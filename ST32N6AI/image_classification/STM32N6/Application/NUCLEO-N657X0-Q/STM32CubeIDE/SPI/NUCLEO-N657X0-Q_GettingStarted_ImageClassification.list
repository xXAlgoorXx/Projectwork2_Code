
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c7dc  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3401cf40  3401cf40  0001cf40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000017dc  3401cf60  3401cf60  0001cf60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3401e73c  3401e73c  0001e928  2**0
                  CONTENTS
  5 .ARM          00000008  3401e73c  3401e73c  0001e73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3401e744  3401e928  0001e928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3401e744  3401e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  3401e748  3401e748  0001e748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  3401e74c  3401e74c  0001e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000068c  3401e928  3401e928  0001e928  2**2
                  ALLOC
 11 ._user_heap_stack 00004204  3401efb4  3401efb4  0001e928  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  0001e928  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040dd4  00000000  00000000  0001e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a4e  00000000  00000000  0005f736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003068  00000000  00000000  00065188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025a8  00000000  00000000  000681f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000787be  00000000  00000000  0006a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ab81  00000000  00000000  000e2f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003a0ea0  00000000  00000000  0011dad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  004be977  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de40  00000000  00000000  004be9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000155  00000000  00000000  004cc7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3401e928 	.word	0x3401e928
3400076c:	00000000 	.word	0x00000000
34000770:	3401cf14 	.word	0x3401cf14

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3401e92c 	.word	0x3401e92c
3400078c:	3401cf14 	.word	0x3401cf14

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <getIdentityWeights_float>:
//

    return identity;
}

float* getIdentityWeights_float(size_t insize, size_t outsize) {
34000b1c:	b580      	push	{r7, lr}
34000b1e:	b084      	sub	sp, #16
34000b20:	af00      	add	r7, sp, #0
34000b22:	6078      	str	r0, [r7, #4]
34000b24:	6039      	str	r1, [r7, #0]
    float* identity = malloc(insize * outsize * sizeof(float));
34000b26:	687b      	ldr	r3, [r7, #4]
34000b28:	683a      	ldr	r2, [r7, #0]
34000b2a:	fb02 f303 	mul.w	r3, r2, r3
34000b2e:	009b      	lsls	r3, r3, #2
34000b30:	4618      	mov	r0, r3
34000b32:	f019 fd71 	bl	3401a618 <malloc>
34000b36:	4603      	mov	r3, r0
34000b38:	60bb      	str	r3, [r7, #8]
    if (identity == NULL) {
34000b3a:	68bb      	ldr	r3, [r7, #8]
34000b3c:	2b00      	cmp	r3, #0
34000b3e:	d101      	bne.n	34000b44 <getIdentityWeights_float+0x28>
        return NULL;
34000b40:	2300      	movs	r3, #0
34000b42:	e023      	b.n	34000b8c <getIdentityWeights_float+0x70>
    }

    // Initialize all elements to 0
    memset(identity, 0, insize * outsize * sizeof(float));
34000b44:	687b      	ldr	r3, [r7, #4]
34000b46:	683a      	ldr	r2, [r7, #0]
34000b48:	fb02 f303 	mul.w	r3, r2, r3
34000b4c:	009b      	lsls	r3, r3, #2
34000b4e:	461a      	mov	r2, r3
34000b50:	2100      	movs	r1, #0
34000b52:	68b8      	ldr	r0, [r7, #8]
34000b54:	f01a fd2a 	bl	3401b5ac <memset>

    // Set diagonal to 1
    for (size_t i = 0; i < insize && i < outsize; i++) {
34000b58:	2300      	movs	r3, #0
34000b5a:	60fb      	str	r3, [r7, #12]
34000b5c:	e00d      	b.n	34000b7a <getIdentityWeights_float+0x5e>
        identity[i * outsize + i] = 1.0f;
34000b5e:	683b      	ldr	r3, [r7, #0]
34000b60:	3301      	adds	r3, #1
34000b62:	68fa      	ldr	r2, [r7, #12]
34000b64:	fb02 f303 	mul.w	r3, r2, r3
34000b68:	009b      	lsls	r3, r3, #2
34000b6a:	68ba      	ldr	r2, [r7, #8]
34000b6c:	4413      	add	r3, r2
34000b6e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
34000b72:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < insize && i < outsize; i++) {
34000b74:	68fb      	ldr	r3, [r7, #12]
34000b76:	3301      	adds	r3, #1
34000b78:	60fb      	str	r3, [r7, #12]
34000b7a:	68fa      	ldr	r2, [r7, #12]
34000b7c:	687b      	ldr	r3, [r7, #4]
34000b7e:	429a      	cmp	r2, r3
34000b80:	d203      	bcs.n	34000b8a <getIdentityWeights_float+0x6e>
34000b82:	68fa      	ldr	r2, [r7, #12]
34000b84:	683b      	ldr	r3, [r7, #0]
34000b86:	429a      	cmp	r2, r3
34000b88:	d3e9      	bcc.n	34000b5e <getIdentityWeights_float+0x42>
    }

    return identity;
34000b8a:	68bb      	ldr	r3, [r7, #8]
}
34000b8c:	4618      	mov	r0, r3
34000b8e:	3710      	adds	r7, #16
34000b90:	46bd      	mov	sp, r7
34000b92:	bd80      	pop	{r7, pc}

34000b94 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000b94:	b580      	push	{r7, lr}
34000b96:	b086      	sub	sp, #24
34000b98:	af00      	add	r7, sp, #0
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000b9a:	4b21      	ldr	r3, [pc, #132]	@ (34000c20 <Fuse_Programming+0x8c>)
34000b9c:	607b      	str	r3, [r7, #4]

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
34000b9e:	237c      	movs	r3, #124	@ 0x7c
34000ba0:	617b      	str	r3, [r7, #20]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000ba2:	f107 020c 	add.w	r2, r7, #12
34000ba6:	1d3b      	adds	r3, r7, #4
34000ba8:	6979      	ldr	r1, [r7, #20]
34000baa:	4618      	mov	r0, r3
34000bac:	f005 fa6e 	bl	3400608c <HAL_BSEC_OTP_Read>
34000bb0:	4603      	mov	r3, r0
34000bb2:	2b00      	cmp	r3, #0
34000bb4:	d12e      	bne.n	34000c14 <Fuse_Programming+0x80>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
34000bb6:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
34000bba:	613b      	str	r3, [r7, #16]
    if ((data & bit_mask) != bit_mask)
34000bbc:	68fa      	ldr	r2, [r7, #12]
34000bbe:	693b      	ldr	r3, [r7, #16]
34000bc0:	4013      	ands	r3, r2
34000bc2:	693a      	ldr	r2, [r7, #16]
34000bc4:	429a      	cmp	r2, r3
34000bc6:	d027      	beq.n	34000c18 <Fuse_Programming+0x84>
    {
      data |= bit_mask;
34000bc8:	68fa      	ldr	r2, [r7, #12]
34000bca:	693b      	ldr	r3, [r7, #16]
34000bcc:	4313      	orrs	r3, r2
34000bce:	60fb      	str	r3, [r7, #12]
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000bd0:	68fa      	ldr	r2, [r7, #12]
34000bd2:	1d38      	adds	r0, r7, #4
34000bd4:	2300      	movs	r3, #0
34000bd6:	6979      	ldr	r1, [r7, #20]
34000bd8:	f005 fa90 	bl	340060fc <HAL_BSEC_OTP_Program>
34000bdc:	4603      	mov	r3, r0
34000bde:	2b00      	cmp	r3, #0
34000be0:	d115      	bne.n	34000c0e <Fuse_Programming+0x7a>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000be2:	f107 020c 	add.w	r2, r7, #12
34000be6:	1d3b      	adds	r3, r7, #4
34000be8:	6979      	ldr	r1, [r7, #20]
34000bea:	4618      	mov	r0, r3
34000bec:	f005 fa4e 	bl	3400608c <HAL_BSEC_OTP_Read>
34000bf0:	4603      	mov	r3, r0
34000bf2:	2b00      	cmp	r3, #0
34000bf4:	d108      	bne.n	34000c08 <Fuse_Programming+0x74>
        {
          if ((data & bit_mask) != bit_mask)
34000bf6:	68fa      	ldr	r2, [r7, #12]
34000bf8:	693b      	ldr	r3, [r7, #16]
34000bfa:	4013      	ands	r3, r2
34000bfc:	693a      	ldr	r2, [r7, #16]
34000bfe:	429a      	cmp	r2, r3
34000c00:	d00a      	beq.n	34000c18 <Fuse_Programming+0x84>
          {
            /* Error : Fuse programming not taken in account */
            ErrorHandler();
34000c02:	f000 f80f 	bl	34000c24 <ErrorHandler>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000c06:	e007      	b.n	34000c18 <Fuse_Programming+0x84>
          ErrorHandler();
34000c08:	f000 f80c 	bl	34000c24 <ErrorHandler>
}
34000c0c:	e004      	b.n	34000c18 <Fuse_Programming+0x84>
        ErrorHandler();
34000c0e:	f000 f809 	bl	34000c24 <ErrorHandler>
}
34000c12:	e001      	b.n	34000c18 <Fuse_Programming+0x84>
    ErrorHandler();
34000c14:	f000 f806 	bl	34000c24 <ErrorHandler>
}
34000c18:	bf00      	nop
34000c1a:	3718      	adds	r7, #24
34000c1c:	46bd      	mov	sp, r7
34000c1e:	bd80      	pop	{r7, pc}
34000c20:	56009000 	.word	0x56009000

34000c24 <ErrorHandler>:
/**
  * @brief  Handle error which occurs when calling HAL API
  * @retval None
  */
static void ErrorHandler(void)
{
34000c24:	b480      	push	{r7}
34000c26:	af00      	add	r7, sp, #0
  while(1);
34000c28:	bf00      	nop
34000c2a:	e7fd      	b.n	34000c28 <ErrorHandler+0x4>

34000c2c <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
34000c2c:	b480      	push	{r7}
34000c2e:	b085      	sub	sp, #20
34000c30:	af00      	add	r7, sp, #0
34000c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000c34:	4a07      	ldr	r2, [pc, #28]	@ (34000c54 <LL_MEM_EnableClock+0x28>)
34000c36:	687b      	ldr	r3, [r7, #4]
34000c38:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000c3c:	4b05      	ldr	r3, [pc, #20]	@ (34000c54 <LL_MEM_EnableClock+0x28>)
34000c3e:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000c42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c44:	68fb      	ldr	r3, [r7, #12]
}
34000c46:	bf00      	nop
34000c48:	3714      	adds	r7, #20
34000c4a:	46bd      	mov	sp, r7
34000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c50:	4770      	bx	lr
34000c52:	bf00      	nop
34000c54:	56028000 	.word	0x56028000

34000c58 <LL_MEM_EnableClockLowPower>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
34000c58:	b480      	push	{r7}
34000c5a:	b085      	sub	sp, #20
34000c5c:	af00      	add	r7, sp, #0
34000c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000c60:	4a07      	ldr	r2, [pc, #28]	@ (34000c80 <LL_MEM_EnableClockLowPower+0x28>)
34000c62:	687b      	ldr	r3, [r7, #4]
34000c64:	f8c2 3a8c 	str.w	r3, [r2, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000c68:	4b05      	ldr	r3, [pc, #20]	@ (34000c80 <LL_MEM_EnableClockLowPower+0x28>)
34000c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c70:	68fb      	ldr	r3, [r7, #12]
}
34000c72:	bf00      	nop
34000c74:	3714      	adds	r7, #20
34000c76:	46bd      	mov	sp, r7
34000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c7c:	4770      	bx	lr
34000c7e:	bf00      	nop
34000c80:	56028000 	.word	0x56028000

34000c84 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_MDF1
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADF1
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
34000c84:	b480      	push	{r7}
34000c86:	b085      	sub	sp, #20
34000c88:	af00      	add	r7, sp, #0
34000c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000c8c:	4a07      	ldr	r2, [pc, #28]	@ (34000cac <LL_AHB2_GRP1_EnableClock+0x28>)
34000c8e:	687b      	ldr	r3, [r7, #4]
34000c90:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB2ENR);
34000c94:	4b05      	ldr	r3, [pc, #20]	@ (34000cac <LL_AHB2_GRP1_EnableClock+0x28>)
34000c96:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
34000c9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c9c:	68fb      	ldr	r3, [r7, #12]
}
34000c9e:	bf00      	nop
34000ca0:	3714      	adds	r7, #20
34000ca2:	46bd      	mov	sp, r7
34000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ca8:	4770      	bx	lr
34000caa:	bf00      	nop
34000cac:	56028000 	.word	0x56028000

34000cb0 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34000cb0:	b480      	push	{r7}
34000cb2:	b085      	sub	sp, #20
34000cb4:	af00      	add	r7, sp, #0
34000cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000cb8:	4a07      	ldr	r2, [pc, #28]	@ (34000cd8 <LL_AHB3_GRP1_EnableClock+0x28>)
34000cba:	687b      	ldr	r3, [r7, #4]
34000cbc:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34000cc0:	4b05      	ldr	r3, [pc, #20]	@ (34000cd8 <LL_AHB3_GRP1_EnableClock+0x28>)
34000cc2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34000cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000cc8:	68fb      	ldr	r3, [r7, #12]
}
34000cca:	bf00      	nop
34000ccc:	3714      	adds	r7, #20
34000cce:	46bd      	mov	sp, r7
34000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34000cd4:	4770      	bx	lr
34000cd6:	bf00      	nop
34000cd8:	56028000 	.word	0x56028000

34000cdc <LL_AHB3_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
34000cdc:	b480      	push	{r7}
34000cde:	b083      	sub	sp, #12
34000ce0:	af00      	add	r7, sp, #0
34000ce2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000ce4:	4a04      	ldr	r2, [pc, #16]	@ (34000cf8 <LL_AHB3_GRP1_ForceReset+0x1c>)
34000ce6:	687b      	ldr	r3, [r7, #4]
34000ce8:	f8c2 3a18 	str.w	r3, [r2, #2584]	@ 0xa18
}
34000cec:	bf00      	nop
34000cee:	370c      	adds	r7, #12
34000cf0:	46bd      	mov	sp, r7
34000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
34000cf6:	4770      	bx	lr
34000cf8:	56028000 	.word	0x56028000

34000cfc <LL_AHB3_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
34000cfc:	b480      	push	{r7}
34000cfe:	b083      	sub	sp, #12
34000d00:	af00      	add	r7, sp, #0
34000d02:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000d04:	4b06      	ldr	r3, [pc, #24]	@ (34000d20 <LL_AHB3_GRP1_ReleaseReset+0x24>)
34000d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000d0a:	461a      	mov	r2, r3
34000d0c:	687b      	ldr	r3, [r7, #4]
34000d0e:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
}
34000d12:	bf00      	nop
34000d14:	370c      	adds	r7, #12
34000d16:	46bd      	mov	sp, r7
34000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d1c:	4770      	bx	lr
34000d1e:	bf00      	nop
34000d20:	56028000 	.word	0x56028000

34000d24 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34000d24:	b480      	push	{r7}
34000d26:	b085      	sub	sp, #20
34000d28:	af00      	add	r7, sp, #0
34000d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000d2c:	4a07      	ldr	r2, [pc, #28]	@ (34000d4c <LL_AHB5_GRP1_EnableClock+0x28>)
34000d2e:	687b      	ldr	r3, [r7, #4]
34000d30:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34000d34:	4b05      	ldr	r3, [pc, #20]	@ (34000d4c <LL_AHB5_GRP1_EnableClock+0x28>)
34000d36:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34000d3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000d3c:	68fb      	ldr	r3, [r7, #12]
}
34000d3e:	bf00      	nop
34000d40:	3714      	adds	r7, #20
34000d42:	46bd      	mov	sp, r7
34000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d48:	4770      	bx	lr
34000d4a:	bf00      	nop
34000d4c:	56028000 	.word	0x56028000

34000d50 <LL_AHB5_GRP1_ForceReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ForceReset(uint32_t Periphs)
{
34000d50:	b480      	push	{r7}
34000d52:	b083      	sub	sp, #12
34000d54:	af00      	add	r7, sp, #0
34000d56:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000d58:	4a04      	ldr	r2, [pc, #16]	@ (34000d6c <LL_AHB5_GRP1_ForceReset+0x1c>)
34000d5a:	687b      	ldr	r3, [r7, #4]
34000d5c:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34000d60:	bf00      	nop
34000d62:	370c      	adds	r7, #12
34000d64:	46bd      	mov	sp, r7
34000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d6a:	4770      	bx	lr
34000d6c:	56028000 	.word	0x56028000

34000d70 <LL_AHB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34000d70:	b480      	push	{r7}
34000d72:	b083      	sub	sp, #12
34000d74:	af00      	add	r7, sp, #0
34000d76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000d78:	4b06      	ldr	r3, [pc, #24]	@ (34000d94 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34000d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000d7e:	461a      	mov	r2, r3
34000d80:	687b      	ldr	r3, [r7, #4]
34000d82:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34000d86:	bf00      	nop
34000d88:	370c      	adds	r7, #12
34000d8a:	46bd      	mov	sp, r7
34000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d90:	4770      	bx	lr
34000d92:	bf00      	nop
34000d94:	56028000 	.word	0x56028000

34000d98 <LL_AHB5_GRP1_EnableClockLowPower>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000d98:	b480      	push	{r7}
34000d9a:	b085      	sub	sp, #20
34000d9c:	af00      	add	r7, sp, #0
34000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000da0:	4a07      	ldr	r2, [pc, #28]	@ (34000dc0 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000da2:	687b      	ldr	r3, [r7, #4]
34000da4:	f8c2 3aa0 	str.w	r3, [r2, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000da8:	4b05      	ldr	r3, [pc, #20]	@ (34000dc0 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000daa:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000db0:	68fb      	ldr	r3, [r7, #12]
}
34000db2:	bf00      	nop
34000db4:	3714      	adds	r7, #20
34000db6:	46bd      	mov	sp, r7
34000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
34000dbc:	4770      	bx	lr
34000dbe:	bf00      	nop
34000dc0:	56028000 	.word	0x56028000

34000dc4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34000dc4:	b480      	push	{r7}
34000dc6:	b085      	sub	sp, #20
34000dc8:	af00      	add	r7, sp, #0
34000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000dcc:	4a07      	ldr	r2, [pc, #28]	@ (34000dec <LL_APB2_GRP1_EnableClock+0x28>)
34000dce:	687b      	ldr	r3, [r7, #4]
34000dd0:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000dd4:	4b05      	ldr	r3, [pc, #20]	@ (34000dec <LL_APB2_GRP1_EnableClock+0x28>)
34000dd6:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000dda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000ddc:	68fb      	ldr	r3, [r7, #12]
}
34000dde:	bf00      	nop
34000de0:	3714      	adds	r7, #20
34000de2:	46bd      	mov	sp, r7
34000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
34000de8:	4770      	bx	lr
34000dea:	bf00      	nop
34000dec:	56028000 	.word	0x56028000

34000df0 <LL_APB5_GRP1_EnableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000df0:	b480      	push	{r7}
34000df2:	b085      	sub	sp, #20
34000df4:	af00      	add	r7, sp, #0
34000df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000df8:	4a07      	ldr	r2, [pc, #28]	@ (34000e18 <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000dfa:	687b      	ldr	r3, [r7, #4]
34000dfc:	f8c2 3abc 	str.w	r3, [r2, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000e00:	4b05      	ldr	r3, [pc, #20]	@ (34000e18 <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
34000e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000e08:	68fb      	ldr	r3, [r7, #12]
}
34000e0a:	bf00      	nop
34000e0c:	3714      	adds	r7, #20
34000e0e:	46bd      	mov	sp, r7
34000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e14:	4770      	bx	lr
34000e16:	bf00      	nop
34000e18:	56028000 	.word	0x56028000

34000e1c <LL_RCC_SetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
34000e1c:	b480      	push	{r7}
34000e1e:	b083      	sub	sp, #12
34000e20:	af00      	add	r7, sp, #0
34000e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000e24:	4b06      	ldr	r3, [pc, #24]	@ (34000e40 <LL_RCC_SetCpuClkSource+0x24>)
34000e26:	6a1b      	ldr	r3, [r3, #32]
34000e28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34000e2c:	4904      	ldr	r1, [pc, #16]	@ (34000e40 <LL_RCC_SetCpuClkSource+0x24>)
34000e2e:	687b      	ldr	r3, [r7, #4]
34000e30:	4313      	orrs	r3, r2
34000e32:	620b      	str	r3, [r1, #32]
}
34000e34:	bf00      	nop
34000e36:	370c      	adds	r7, #12
34000e38:	46bd      	mov	sp, r7
34000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e3e:	4770      	bx	lr
34000e40:	56028000 	.word	0x56028000

34000e44 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
34000e44:	b480      	push	{r7}
34000e46:	b083      	sub	sp, #12
34000e48:	af00      	add	r7, sp, #0
34000e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000e4c:	4b06      	ldr	r3, [pc, #24]	@ (34000e68 <LL_RCC_SetSysClkSource+0x24>)
34000e4e:	6a1b      	ldr	r3, [r3, #32]
34000e50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34000e54:	4904      	ldr	r1, [pc, #16]	@ (34000e68 <LL_RCC_SetSysClkSource+0x24>)
34000e56:	687b      	ldr	r3, [r7, #4]
34000e58:	4313      	orrs	r3, r2
34000e5a:	620b      	str	r3, [r1, #32]
}
34000e5c:	bf00      	nop
34000e5e:	370c      	adds	r7, #12
34000e60:	46bd      	mov	sp, r7
34000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e66:	4770      	bx	lr
34000e68:	56028000 	.word	0x56028000

34000e6c <enableTiming_Cyc>:
int main_NPU_int8(void);
int main_NPU_float(void);
int main_ARM_int8(void);
int main_ARM_float(void);

void enableTiming_Cyc(void){
34000e6c:	b480      	push	{r7}
34000e6e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000e70:	4b08      	ldr	r3, [pc, #32]	@ (34000e94 <enableTiming_Cyc+0x28>)
34000e72:	68db      	ldr	r3, [r3, #12]
34000e74:	4a07      	ldr	r2, [pc, #28]	@ (34000e94 <enableTiming_Cyc+0x28>)
34000e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000e7a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000e7c:	4b06      	ldr	r3, [pc, #24]	@ (34000e98 <enableTiming_Cyc+0x2c>)
34000e7e:	681b      	ldr	r3, [r3, #0]
34000e80:	4a05      	ldr	r2, [pc, #20]	@ (34000e98 <enableTiming_Cyc+0x2c>)
34000e82:	f043 0301 	orr.w	r3, r3, #1
34000e86:	6013      	str	r3, [r2, #0]
}
34000e88:	bf00      	nop
34000e8a:	46bd      	mov	sp, r7
34000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e90:	4770      	bx	lr
34000e92:	bf00      	nop
34000e94:	e000edf0 	.word	0xe000edf0
34000e98:	e0001000 	.word	0xe0001000

34000e9c <startTiming_Cyc>:

void startTiming_Cyc(void){
34000e9c:	b480      	push	{r7}
34000e9e:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; // Reset counter
34000ea0:	4b03      	ldr	r3, [pc, #12]	@ (34000eb0 <startTiming_Cyc+0x14>)
34000ea2:	2200      	movs	r2, #0
34000ea4:	605a      	str	r2, [r3, #4]
}
34000ea6:	bf00      	nop
34000ea8:	46bd      	mov	sp, r7
34000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eae:	4770      	bx	lr
34000eb0:	e0001000 	.word	0xe0001000

34000eb4 <getTiming_Cyc>:

uint32_t getTiming_Cyc(){
34000eb4:	b480      	push	{r7}
34000eb6:	b083      	sub	sp, #12
34000eb8:	af00      	add	r7, sp, #0
	uint32_t cycles = DWT->CYCCNT;
34000eba:	4b05      	ldr	r3, [pc, #20]	@ (34000ed0 <getTiming_Cyc+0x1c>)
34000ebc:	685b      	ldr	r3, [r3, #4]
34000ebe:	607b      	str	r3, [r7, #4]
	return cycles;
34000ec0:	687b      	ldr	r3, [r7, #4]
}
34000ec2:	4618      	mov	r0, r3
34000ec4:	370c      	adds	r7, #12
34000ec6:	46bd      	mov	sp, r7
34000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ecc:	4770      	bx	lr
34000ece:	bf00      	nop
34000ed0:	e0001000 	.word	0xe0001000

34000ed4 <main>:

int main(void)
{
34000ed4:	b580      	push	{r7, lr}
34000ed6:	af00      	add	r7, sp, #0
	Hardware_init();
34000ed8:	f000 f8da 	bl	34001090 <Hardware_init>
	enableTiming_Cyc();
34000edc:	f7ff ffc6 	bl	34000e6c <enableTiming_Cyc>
	main_ARM_float();
34000ee0:	f000 f804 	bl	34000eec <main_ARM_float>
34000ee4:	2300      	movs	r3, #0
}
34000ee6:	4618      	mov	r0, r3
34000ee8:	bd80      	pop	{r7, pc}
	...

34000eec <main_ARM_float>:
		controllOutput(inVec,identityWeights,insize,outsize);
    }
    return 0;
}

int main_ARM_float(void) {
34000eec:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
34000ef0:	b097      	sub	sp, #92	@ 0x5c
34000ef2:	af02      	add	r7, sp, #8
34000ef4:	466b      	mov	r3, sp
34000ef6:	461c      	mov	r4, r3
    size_t insize = 8;
34000ef8:	2308      	movs	r3, #8
34000efa:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t outsize = 8;
34000efc:	2308      	movs	r3, #8
34000efe:	643b      	str	r3, [r7, #64]	@ 0x40

    float32_t inVec[insize];
34000f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34000f02:	461a      	mov	r2, r3
34000f04:	3a01      	subs	r2, #1
34000f06:	63fa      	str	r2, [r7, #60]	@ 0x3c
34000f08:	2200      	movs	r2, #0
34000f0a:	603b      	str	r3, [r7, #0]
34000f0c:	607a      	str	r2, [r7, #4]
34000f0e:	2200      	movs	r2, #0
34000f10:	4618      	mov	r0, r3
34000f12:	4611      	mov	r1, r2
34000f14:	009b      	lsls	r3, r3, #2
34000f16:	3307      	adds	r3, #7
34000f18:	08db      	lsrs	r3, r3, #3
34000f1a:	00db      	lsls	r3, r3, #3
34000f1c:	ebad 0d03 	sub.w	sp, sp, r3
34000f20:	ab02      	add	r3, sp, #8
34000f22:	3303      	adds	r3, #3
34000f24:	089b      	lsrs	r3, r3, #2
34000f26:	009b      	lsls	r3, r3, #2
34000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (int i = 0; i < insize; i++) {
34000f2a:	2300      	movs	r3, #0
34000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
34000f2e:	e00d      	b.n	34000f4c <main_ARM_float+0x60>
        inVec[i] = i * 1.0f;  // Example float input values
34000f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34000f32:	ee07 3a90 	vmov	s15, r3
34000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34000f3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34000f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34000f3e:	009b      	lsls	r3, r3, #2
34000f40:	4413      	add	r3, r2
34000f42:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < insize; i++) {
34000f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34000f48:	3301      	adds	r3, #1
34000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
34000f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34000f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34000f50:	429a      	cmp	r2, r3
34000f52:	d8ed      	bhi.n	34000f30 <main_ARM_float+0x44>
    }

    // Identity weight matrix
    float32_t* identityWeights = getIdentityWeights_float(insize, outsize);
34000f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34000f56:	6c78      	ldr	r0, [r7, #68]	@ 0x44
34000f58:	f7ff fde0 	bl	34000b1c <getIdentityWeights_float>
34000f5c:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!identityWeights) {
34000f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000f60:	2b00      	cmp	r3, #0
34000f62:	d106      	bne.n	34000f72 <main_ARM_float+0x86>
        printf("Memory allocation failed\n");
34000f64:	4844      	ldr	r0, [pc, #272]	@ (34001078 <main_ARM_float+0x18c>)
34000f66:	f01a fa41 	bl	3401b3ec <puts>
        return -1;
34000f6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000f6e:	46a5      	mov	sp, r4
34000f70:	e07d      	b.n	3400106e <main_ARM_float+0x182>
    }

    float32_t dataOut[outsize];
34000f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34000f74:	461a      	mov	r2, r3
34000f76:	3a01      	subs	r2, #1
34000f78:	633a      	str	r2, [r7, #48]	@ 0x30
34000f7a:	2200      	movs	r2, #0
34000f7c:	469a      	mov	sl, r3
34000f7e:	4693      	mov	fp, r2
34000f80:	2200      	movs	r2, #0
34000f82:	4698      	mov	r8, r3
34000f84:	4691      	mov	r9, r2
34000f86:	009b      	lsls	r3, r3, #2
34000f88:	3307      	adds	r3, #7
34000f8a:	08db      	lsrs	r3, r3, #3
34000f8c:	00db      	lsls	r3, r3, #3
34000f8e:	ebad 0d03 	sub.w	sp, sp, r3
34000f92:	ab02      	add	r3, sp, #8
34000f94:	3303      	adds	r3, #3
34000f96:	089b      	lsrs	r3, r3, #2
34000f98:	009b      	lsls	r3, r3, #2
34000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    arm_matrix_instance_f32 in;
    arm_matrix_instance_f32 weight;
    arm_matrix_instance_f32 out;

    arm_mat_init_f32(&in, 1, insize, inVec);
34000f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34000f9e:	b29a      	uxth	r2, r3
34000fa0:	f107 0018 	add.w	r0, r7, #24
34000fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34000fa6:	2101      	movs	r1, #1
34000fa8:	f001 ffe8 	bl	34002f7c <arm_mat_init_f32>
    arm_mat_init_f32(&weight, insize, outsize, identityWeights);
34000fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34000fae:	b299      	uxth	r1, r3
34000fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34000fb2:	b29a      	uxth	r2, r3
34000fb4:	f107 0010 	add.w	r0, r7, #16
34000fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000fba:	f001 ffdf 	bl	34002f7c <arm_mat_init_f32>
    arm_mat_init_f32(&out, 1, outsize, dataOut);
34000fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34000fc0:	b29a      	uxth	r2, r3
34000fc2:	f107 0008 	add.w	r0, r7, #8
34000fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34000fc8:	2101      	movs	r1, #1
34000fca:	f001 ffd7 	bl	34002f7c <arm_mat_init_f32>

    while(1){
    	startTiming_Cyc();
34000fce:	f7ff ff65 	bl	34000e9c <startTiming_Cyc>
		arm_status status = arm_mat_mult_f32(&in, &weight, &out);
34000fd2:	f107 0208 	add.w	r2, r7, #8
34000fd6:	f107 0110 	add.w	r1, r7, #16
34000fda:	f107 0318 	add.w	r3, r7, #24
34000fde:	4618      	mov	r0, r3
34000fe0:	f003 fc32 	bl	34004848 <arm_mat_mult_f32>
34000fe4:	4603      	mov	r3, r0
34000fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		uint32_t cycles = getTiming_Cyc();
34000fea:	f7ff ff63 	bl	34000eb4 <getTiming_Cyc>
34000fee:	6278      	str	r0, [r7, #36]	@ 0x24
		float time = ((float)cycles / SystemCoreClock) * 1000.0f;
34000ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34000ff2:	ee07 3a90 	vmov	s15, r3
34000ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
34000ffa:	4b20      	ldr	r3, [pc, #128]	@ (3400107c <main_ARM_float+0x190>)
34000ffc:	681b      	ldr	r3, [r3, #0]
34000ffe:	ee07 3a90 	vmov	s15, r3
34001002:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001006:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400100a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 34001080 <main_ARM_float+0x194>
3400100e:	ee67 7a87 	vmul.f32	s15, s15, s14
34001012:	edc7 7a08 	vstr	s15, [r7, #32]

		if (status == ARM_MATH_SUCCESS) {
34001016:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
3400101a:	2b00      	cmp	r3, #0
3400101c:	d123      	bne.n	34001066 <main_ARM_float+0x17a>
			printf("Time CMSIS float32: %f ms, Cycles: %lu\n\r", time, cycles);
3400101e:	edd7 7a08 	vldr	s15, [r7, #32]
34001022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001028:	9300      	str	r3, [sp, #0]
3400102a:	ec53 2b17 	vmov	r2, r3, d7
3400102e:	4815      	ldr	r0, [pc, #84]	@ (34001084 <main_ARM_float+0x198>)
34001030:	f01a f974 	bl	3401b31c <iprintf>
			for (int i = 0; i < outsize; ++i) {
34001034:	2300      	movs	r3, #0
34001036:	64bb      	str	r3, [r7, #72]	@ 0x48
34001038:	e010      	b.n	3400105c <main_ARM_float+0x170>
				printf("Out[%d]: %7.4f\n\r", i, dataOut[i]);
3400103a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3400103c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3400103e:	009b      	lsls	r3, r3, #2
34001040:	4413      	add	r3, r2
34001042:	edd3 7a00 	vldr	s15, [r3]
34001046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3400104a:	ec53 2b17 	vmov	r2, r3, d7
3400104e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
34001050:	480d      	ldr	r0, [pc, #52]	@ (34001088 <main_ARM_float+0x19c>)
34001052:	f01a f963 	bl	3401b31c <iprintf>
			for (int i = 0; i < outsize; ++i) {
34001056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34001058:	3301      	adds	r3, #1
3400105a:	64bb      	str	r3, [r7, #72]	@ 0x48
3400105c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3400105e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34001060:	429a      	cmp	r2, r3
34001062:	d8ea      	bhi.n	3400103a <main_ARM_float+0x14e>
34001064:	e7b3      	b.n	34000fce <main_ARM_float+0xe2>
			}
		} else {
			printf("Matrix multiplication failed!\n");
34001066:	4809      	ldr	r0, [pc, #36]	@ (3400108c <main_ARM_float+0x1a0>)
34001068:	f01a f9c0 	bl	3401b3ec <puts>
    while(1){
3400106c:	e7af      	b.n	34000fce <main_ARM_float+0xe2>
		}

//		free(identityWeights);
    }
    return 0;
}
3400106e:	4618      	mov	r0, r3
34001070:	3754      	adds	r7, #84	@ 0x54
34001072:	46bd      	mov	sp, r7
34001074:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
34001078:	3401cfc0 	.word	0x3401cfc0
3400107c:	3401e754 	.word	0x3401e754
34001080:	447a0000 	.word	0x447a0000
34001084:	3401d028 	.word	0x3401d028
34001088:	3401d054 	.word	0x3401d054
3400108c:	3401d068 	.word	0x3401d068

34001090 <Hardware_init>:
	}
}


static void Hardware_init(void)
{
34001090:	b580      	push	{r7, lr}
34001092:	b086      	sub	sp, #24
34001094:	af00      	add	r7, sp, #0
  /* Power on ICACHE */
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
34001096:	4b31      	ldr	r3, [pc, #196]	@ (3400115c <Hardware_init+0xcc>)
34001098:	681b      	ldr	r3, [r3, #0]
3400109a:	4a30      	ldr	r2, [pc, #192]	@ (3400115c <Hardware_init+0xcc>)
3400109c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340010a0:	6013      	str	r3, [r2, #0]

  /* Set back system and CPU clock source to HSI */
  __HAL_RCC_CPUCLK_CONFIG(RCC_CPUCLKSOURCE_HSI);
340010a2:	2000      	movs	r0, #0
340010a4:	f7ff feba 	bl	34000e1c <LL_RCC_SetCpuClkSource>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
340010a8:	2000      	movs	r0, #0
340010aa:	f7ff fecb 	bl	34000e44 <LL_RCC_SetSysClkSource>
  __HAL_RCC_USART1_CLK_ENABLE();
340010ae:	2010      	movs	r0, #16
340010b0:	f7ff fe88 	bl	34000dc4 <LL_APB2_GRP1_EnableClock>

  HAL_Init();
340010b4:	f004 ff54 	bl	34005f60 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
340010b8:	4b29      	ldr	r3, [pc, #164]	@ (34001160 <Hardware_init+0xd0>)
340010ba:	695b      	ldr	r3, [r3, #20]
340010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
340010c0:	2b00      	cmp	r3, #0
340010c2:	d11b      	bne.n	340010fc <Hardware_init+0x6c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
340010c4:	f3bf 8f4f 	dsb	sy
}
340010c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340010ca:	f3bf 8f6f 	isb	sy
}
340010ce:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
340010d0:	4b23      	ldr	r3, [pc, #140]	@ (34001160 <Hardware_init+0xd0>)
340010d2:	2200      	movs	r2, #0
340010d4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
340010d8:	f3bf 8f4f 	dsb	sy
}
340010dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340010de:	f3bf 8f6f 	isb	sy
}
340010e2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
340010e4:	4b1e      	ldr	r3, [pc, #120]	@ (34001160 <Hardware_init+0xd0>)
340010e6:	695b      	ldr	r3, [r3, #20]
340010e8:	4a1d      	ldr	r2, [pc, #116]	@ (34001160 <Hardware_init+0xd0>)
340010ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
340010ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
340010f0:	f3bf 8f4f 	dsb	sy
}
340010f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340010f6:	f3bf 8f6f 	isb	sy
}
340010fa:	e000      	b.n	340010fe <Hardware_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
340010fc:	bf00      	nop
#if defined(USE_DCACHE)
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
  SCB_EnableDCache();
#endif

  SystemClock_Config();
340010fe:	f000 f945 	bl	3400138c <SystemClock_Config>

  NPURam_enable();
34001102:	f000 f845 	bl	34001190 <NPURam_enable>
  Fuse_Programming();
34001106:	f7ff fd45 	bl	34000b94 <Fuse_Programming>
  NPUCache_config();
3400110a:	f000 f8bc 	bl	34001286 <NPUCache_config>

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400110e:	2301      	movs	r3, #1
34001110:	753b      	strb	r3, [r7, #20]
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
34001112:	2301      	movs	r3, #1
34001114:	757b      	strb	r3, [r7, #21]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001116:	f107 0314 	add.w	r3, r7, #20
3400111a:	4619      	mov	r1, r3
3400111c:	2000      	movs	r0, #0
3400111e:	f001 f975 	bl	3400240c <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
34001122:	2000      	movs	r0, #0
34001124:	f001 fa58 	bl	340025d8 <BSP_XSPI_NOR_EnableMemoryMappedMode>

  Security_Config();
34001128:	f000 f8b6 	bl	34001298 <Security_Config>
  IAC_Config();
3400112c:	f000 f91a 	bl	34001364 <IAC_Config>
  set_clk_sleep_mode();
34001130:	f000 f876 	bl	34001220 <set_clk_sleep_mode>

  /*** Now initialize UART ***/
  COM_InitTypeDef com_config = {
34001134:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
34001138:	607b      	str	r3, [r7, #4]
3400113a:	2300      	movs	r3, #0
3400113c:	60bb      	str	r3, [r7, #8]
3400113e:	2300      	movs	r3, #0
34001140:	81bb      	strh	r3, [r7, #12]
34001142:	2300      	movs	r3, #0
34001144:	81fb      	strh	r3, [r7, #14]
34001146:	2300      	movs	r3, #0
34001148:	823b      	strh	r3, [r7, #16]
    .WordLength = UART_WORDLENGTH_8B,
    .StopBits = UART_STOPBITS_1,
    .Parity = UART_PARITY_NONE,
    .HwFlowCtl = UART_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &com_config);
3400114a:	1d3b      	adds	r3, r7, #4
3400114c:	4619      	mov	r1, r3
3400114e:	2000      	movs	r0, #0
34001150:	f001 f81e 	bl	34002190 <BSP_COM_Init>
}
34001154:	bf00      	nop
34001156:	3718      	adds	r7, #24
34001158:	46bd      	mov	sp, r7
3400115a:	bd80      	pop	{r7, pc}
3400115c:	e001e000 	.word	0xe001e000
34001160:	e000ed00 	.word	0xe000ed00

34001164 <_write>:

int _write(int file, char *ptr, int len)
{
34001164:	b580      	push	{r7, lr}
34001166:	b084      	sub	sp, #16
34001168:	af00      	add	r7, sp, #0
3400116a:	60f8      	str	r0, [r7, #12]
3400116c:	60b9      	str	r1, [r7, #8]
3400116e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
34001170:	687b      	ldr	r3, [r7, #4]
34001172:	b29a      	uxth	r2, r3
34001174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001178:	68b9      	ldr	r1, [r7, #8]
3400117a:	4804      	ldr	r0, [pc, #16]	@ (3400118c <_write+0x28>)
3400117c:	f016 fe88 	bl	34017e90 <HAL_UART_Transmit>
    return len;
34001180:	687b      	ldr	r3, [r7, #4]
}
34001182:	4618      	mov	r0, r3
34001184:	3710      	adds	r7, #16
34001186:	46bd      	mov	sp, r7
34001188:	bd80      	pop	{r7, pc}
3400118a:	bf00      	nop
3400118c:	3401e950 	.word	0x3401e950

34001190 <NPURam_enable>:

static void NPURam_enable(void)
{
34001190:	b580      	push	{r7, lr}
34001192:	b084      	sub	sp, #16
34001194:	af00      	add	r7, sp, #0
  __HAL_RCC_NPU_CLK_ENABLE();
34001196:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400119a:	f7ff fdc3 	bl	34000d24 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_NPU_FORCE_RESET();
3400119e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
340011a2:	f7ff fdd5 	bl	34000d50 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_NPU_RELEASE_RESET();
340011a6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
340011aa:	f7ff fde1 	bl	34000d70 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable NPU RAMs (4x448KB) */
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
340011ae:	2001      	movs	r0, #1
340011b0:	f7ff fd3c 	bl	34000c2c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
340011b4:	2002      	movs	r0, #2
340011b6:	f7ff fd39 	bl	34000c2c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
340011ba:	2004      	movs	r0, #4
340011bc:	f7ff fd36 	bl	34000c2c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
340011c0:	2008      	movs	r0, #8
340011c2:	f7ff fd33 	bl	34000c2c <LL_MEM_EnableClock>
  __HAL_RCC_RAMCFG_CLK_ENABLE();
340011c6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
340011ca:	f7ff fd5b 	bl	34000c84 <LL_AHB2_GRP1_EnableClock>
  RAMCFG_HandleTypeDef hramcfg = {0};
340011ce:	1d3b      	adds	r3, r7, #4
340011d0:	2200      	movs	r2, #0
340011d2:	601a      	str	r2, [r3, #0]
340011d4:	605a      	str	r2, [r3, #4]
340011d6:	609a      	str	r2, [r3, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340011d8:	4b0d      	ldr	r3, [pc, #52]	@ (34001210 <NPURam_enable+0x80>)
340011da:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340011dc:	1d3b      	adds	r3, r7, #4
340011de:	4618      	mov	r0, r3
340011e0:	f007 f9bc 	bl	3400855c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340011e4:	4b0b      	ldr	r3, [pc, #44]	@ (34001214 <NPURam_enable+0x84>)
340011e6:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340011e8:	1d3b      	adds	r3, r7, #4
340011ea:	4618      	mov	r0, r3
340011ec:	f007 f9b6 	bl	3400855c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340011f0:	4b09      	ldr	r3, [pc, #36]	@ (34001218 <NPURam_enable+0x88>)
340011f2:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340011f4:	1d3b      	adds	r3, r7, #4
340011f6:	4618      	mov	r0, r3
340011f8:	f007 f9b0 	bl	3400855c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
340011fc:	4b07      	ldr	r3, [pc, #28]	@ (3400121c <NPURam_enable+0x8c>)
340011fe:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001200:	1d3b      	adds	r3, r7, #4
34001202:	4618      	mov	r0, r3
34001204:	f007 f9aa 	bl	3400855c <HAL_RAMCFG_EnableAXISRAM>
}
34001208:	bf00      	nop
3400120a:	3710      	adds	r7, #16
3400120c:	46bd      	mov	sp, r7
3400120e:	bd80      	pop	{r7, pc}
34001210:	52023100 	.word	0x52023100
34001214:	52023180 	.word	0x52023180
34001218:	52023200 	.word	0x52023200
3400121c:	52023280 	.word	0x52023280

34001220 <set_clk_sleep_mode>:

static void set_clk_sleep_mode(void)
{
34001220:	b580      	push	{r7, lr}
34001222:	af00      	add	r7, sp, #0
  /*** Enable sleep mode support during NPU inference *************************/
  /* Configure peripheral clocks to remain active during sleep mode */
  /* Keep all IP's enabled during WFE so they can wake up CPU. Fine tune
   * this if you want to save maximum power
   */
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34001224:	2020      	movs	r0, #32
34001226:	f7ff fdb7 	bl	34000d98 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
3400122a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3400122e:	f7ff fdb3 	bl	34000d98 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
34001232:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001236:	f7ff fdaf 	bl	34000d98 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
3400123a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3400123e:	f7ff fdab 	bl	34000d98 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
34001242:	2002      	movs	r0, #2
34001244:	f7ff fda8 	bl	34000d98 <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DCMIPP_CLK_SLEEP_ENABLE();   /* For camera configuration retention */
34001248:	2004      	movs	r0, #4
3400124a:	f7ff fdd1 	bl	34000df0 <LL_APB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CSI_CLK_SLEEP_ENABLE();      /* For camera configuration retention */
3400124e:	2040      	movs	r0, #64	@ 0x40
34001250:	f7ff fdce 	bl	34000df0 <LL_APB5_GRP1_EnableClockLowPower>

  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001254:	f44f 7000 	mov.w	r0, #512	@ 0x200
34001258:	f7ff fcfe 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
3400125c:	2080      	movs	r0, #128	@ 0x80
3400125e:	f7ff fcfb 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
34001262:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001266:	f7ff fcf7 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
3400126a:	2001      	movs	r0, #1
3400126c:	f7ff fcf4 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
34001270:	2002      	movs	r0, #2
34001272:	f7ff fcf1 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34001276:	2004      	movs	r0, #4
34001278:	f7ff fcee 	bl	34000c58 <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
3400127c:	2008      	movs	r0, #8
3400127e:	f7ff fceb 	bl	34000c58 <LL_MEM_EnableClockLowPower>
}
34001282:	bf00      	nop
34001284:	bd80      	pop	{r7, pc}

34001286 <NPUCache_config>:

static void NPUCache_config(void)
{
34001286:	b580      	push	{r7, lr}
34001288:	af00      	add	r7, sp, #0
  npu_cache_init();
3400128a:	f000 f9a9 	bl	340015e0 <npu_cache_init>
  npu_cache_enable();
3400128e:	f000 f9b5 	bl	340015fc <npu_cache_enable>
}
34001292:	bf00      	nop
34001294:	bd80      	pop	{r7, pc}
	...

34001298 <Security_Config>:

static void Security_Config(void)
{
34001298:	b580      	push	{r7, lr}
3400129a:	b082      	sub	sp, #8
3400129c:	af00      	add	r7, sp, #0
  __HAL_RCC_RIFSC_CLK_ENABLE();
3400129e:	f44f 7000 	mov.w	r0, #512	@ 0x200
340012a2:	f7ff fd05 	bl	34000cb0 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
340012a6:	463b      	mov	r3, r7
340012a8:	2200      	movs	r2, #0
340012aa:	601a      	str	r2, [r3, #0]
340012ac:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
340012ae:	2302      	movs	r3, #2
340012b0:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
340012b2:	2303      	movs	r3, #3
340012b4:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
340012b6:	463b      	mov	r3, r7
340012b8:	4619      	mov	r1, r3
340012ba:	2001      	movs	r0, #1
340012bc:	f015 fb52 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
340012c0:	463b      	mov	r3, r7
340012c2:	4619      	mov	r1, r3
340012c4:	2008      	movs	r0, #8
340012c6:	f015 fb4d 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
340012ca:	463b      	mov	r3, r7
340012cc:	4619      	mov	r1, r3
340012ce:	2009      	movs	r0, #9
340012d0:	f015 fb48 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
340012d4:	463b      	mov	r3, r7
340012d6:	4619      	mov	r1, r3
340012d8:	200a      	movs	r0, #10
340012da:	f015 fb43 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
340012de:	463b      	mov	r3, r7
340012e0:	4619      	mov	r1, r3
340012e2:	200b      	movs	r0, #11
340012e4:	f015 fb3e 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
340012e8:	463b      	mov	r3, r7
340012ea:	4619      	mov	r1, r3
340012ec:	2004      	movs	r0, #4
340012ee:	f015 fb39 	bl	34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340012f2:	2103      	movs	r1, #3
340012f4:	4813      	ldr	r0, [pc, #76]	@ (34001344 <Security_Config+0xac>)
340012f6:	f015 fbdf 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340012fa:	2103      	movs	r1, #3
340012fc:	4812      	ldr	r0, [pc, #72]	@ (34001348 <Security_Config+0xb0>)
340012fe:	f015 fbdb 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001302:	2103      	movs	r1, #3
34001304:	4811      	ldr	r0, [pc, #68]	@ (3400134c <Security_Config+0xb4>)
34001306:	f015 fbd7 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400130a:	2103      	movs	r1, #3
3400130c:	4810      	ldr	r0, [pc, #64]	@ (34001350 <Security_Config+0xb8>)
3400130e:	f015 fbd3 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001312:	2103      	movs	r1, #3
34001314:	480f      	ldr	r0, [pc, #60]	@ (34001354 <Security_Config+0xbc>)
34001316:	f015 fbcf 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400131a:	2103      	movs	r1, #3
3400131c:	480e      	ldr	r0, [pc, #56]	@ (34001358 <Security_Config+0xc0>)
3400131e:	f015 fbcb 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001322:	2103      	movs	r1, #3
34001324:	480d      	ldr	r0, [pc, #52]	@ (3400135c <Security_Config+0xc4>)
34001326:	f015 fbc7 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400132a:	2103      	movs	r1, #3
3400132c:	480c      	ldr	r0, [pc, #48]	@ (34001360 <Security_Config+0xc8>)
3400132e:	f015 fbc3 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001332:	2103      	movs	r1, #3
34001334:	2004      	movs	r0, #4
34001336:	f015 fbbf 	bl	34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>
}
3400133a:	bf00      	nop
3400133c:	3708      	adds	r7, #8
3400133e:	46bd      	mov	sp, r7
34001340:	bd80      	pop	{r7, pc}
34001342:	bf00      	nop
34001344:	3000000a 	.word	0x3000000a
34001348:	30000005 	.word	0x30000005
3400134c:	2000001c 	.word	0x2000001c
34001350:	2000001d 	.word	0x2000001d
34001354:	30000006 	.word	0x30000006
34001358:	30000007 	.word	0x30000007
3400135c:	30000008 	.word	0x30000008
34001360:	10000018 	.word	0x10000018

34001364 <IAC_Config>:

static void IAC_Config(void)
{
34001364:	b580      	push	{r7, lr}
34001366:	af00      	add	r7, sp, #0
/* Configure IAC to trap illegal access events */
  __HAL_RCC_IAC_CLK_ENABLE();
34001368:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3400136c:	f7ff fca0 	bl	34000cb0 <LL_AHB3_GRP1_EnableClock>
  __HAL_RCC_IAC_FORCE_RESET();
34001370:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001374:	f7ff fcb2 	bl	34000cdc <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_IAC_RELEASE_RESET();
34001378:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3400137c:	f7ff fcbe 	bl	34000cfc <LL_AHB3_GRP1_ReleaseReset>
}
34001380:	bf00      	nop
34001382:	bd80      	pop	{r7, pc}

34001384 <IAC_IRQHandler>:

void IAC_IRQHandler(void)
{
34001384:	b480      	push	{r7}
34001386:	af00      	add	r7, sp, #0
  while (1)
34001388:	bf00      	nop
3400138a:	e7fd      	b.n	34001388 <IAC_IRQHandler+0x4>

3400138c <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
3400138c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
34001390:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
34001394:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34001396:	f507 730a 	add.w	r3, r7, #552	@ 0x228
3400139a:	2240      	movs	r2, #64	@ 0x40
3400139c:	2100      	movs	r1, #0
3400139e:	4618      	mov	r0, r3
340013a0:	f01a f904 	bl	3401b5ac <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
340013a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
340013a8:	2298      	movs	r2, #152	@ 0x98
340013aa:	2100      	movs	r1, #0
340013ac:	4618      	mov	r0, r3
340013ae:	f01a f8fd 	bl	3401b5ac <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
340013b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340013b6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340013ba:	4618      	mov	r0, r3
340013bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
340013c0:	461a      	mov	r2, r3
340013c2:	2100      	movs	r1, #0
340013c4:	f01a f8f2 	bl	3401b5ac <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
340013c8:	2001      	movs	r0, #1
340013ca:	f000 feb5 	bl	34002138 <BSP_SMPS_Init>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
340013ce:	2300      	movs	r3, #0
340013d0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  /* PLL1 = 64 x 25 / 2 = 800MHz */
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
340013d4:	2302      	movs	r3, #2
340013d6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
340013da:	2300      	movs	r3, #0
340013dc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  RCC_OscInitStruct.PLL1.PLLM = 2;
340013e0:	2302      	movs	r3, #2
340013e2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  RCC_OscInitStruct.PLL1.PLLN = 25;
340013e6:	2319      	movs	r3, #25
340013e8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
340013ec:	2300      	movs	r3, #0
340013ee:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
340013f2:	2301      	movs	r3, #1
340013f4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
340013f8:	2301      	movs	r3, #1
340013fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
340013fe:	2302      	movs	r3, #2
34001400:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34001404:	2300      	movs	r3, #0
34001406:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  RCC_OscInitStruct.PLL2.PLLM = 8;
3400140a:	2308      	movs	r3, #8
3400140c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34001410:	2300      	movs	r3, #0
34001412:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  RCC_OscInitStruct.PLL2.PLLN = 125;
34001416:	237d      	movs	r3, #125	@ 0x7d
34001418:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
3400141c:	2301      	movs	r3, #1
3400141e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  RCC_OscInitStruct.PLL2.PLLP2 = 1;
34001422:	2301      	movs	r3, #1
34001424:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34001428:	2302      	movs	r3, #2
3400142a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
3400142e:	2300      	movs	r3, #0
34001430:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001434:	2308      	movs	r3, #8
34001436:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  RCC_OscInitStruct.PLL3.PLLN = 225;
3400143a:	23e1      	movs	r3, #225	@ 0xe1
3400143c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34001440:	2300      	movs	r3, #0
34001442:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
34001446:	2301      	movs	r3, #1
34001448:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
3400144c:	2302      	movs	r3, #2
3400144e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
34001452:	2302      	movs	r3, #2
34001454:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34001458:	2300      	movs	r3, #0
3400145a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  RCC_OscInitStruct.PLL4.PLLM = 8;
3400145e:	2308      	movs	r3, #8
34001460:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34001464:	2300      	movs	r3, #0
34001466:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  RCC_OscInitStruct.PLL4.PLLN = 225;
3400146a:	23e1      	movs	r3, #225	@ 0xe1
3400146c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34001470:	2306      	movs	r3, #6
34001472:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34001476:	2306      	movs	r3, #6
34001478:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3400147c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001480:	4618      	mov	r0, r3
34001482:	f007 fb43 	bl	34008b0c <HAL_RCC_OscConfig>
34001486:	4603      	mov	r3, r0
34001488:	2b00      	cmp	r3, #0
3400148a:	d001      	beq.n	34001490 <SystemClock_Config+0x104>
  {
    while(1);
3400148c:	bf00      	nop
3400148e:	e7fd      	b.n	3400148c <SystemClock_Config+0x100>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK |
34001490:	237f      	movs	r3, #127	@ 0x7f
34001492:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34001496:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3400149a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
3400149e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
340014a2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
340014a6:	2300      	movs	r3, #0
340014a8:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
340014ac:	2301      	movs	r3, #1
340014ae:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
340014b2:	2300      	movs	r3, #0
340014b4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
340014b8:	2302      	movs	r3, #2
340014ba:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
340014be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
340014c2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
340014c6:	2301      	movs	r3, #1
340014c8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
340014cc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340014d0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
340014d4:	2301      	movs	r3, #1
340014d6:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
340014da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
340014de:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
340014e2:	2300      	movs	r3, #0
340014e4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
340014e8:	2300      	movs	r3, #0
340014ea:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
340014ee:	2300      	movs	r3, #0
340014f0:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
340014f4:	2300      	movs	r3, #0
340014f6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
340014fa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
340014fe:	4618      	mov	r0, r3
34001500:	f008 f824 	bl	3400954c <HAL_RCC_ClockConfig>
34001504:	4603      	mov	r3, r0
34001506:	2b00      	cmp	r3, #0
34001508:	d001      	beq.n	3400150e <SystemClock_Config+0x182>
  {
    while(1);
3400150a:	bf00      	nop
3400150c:	e7fd      	b.n	3400150a <SystemClock_Config+0x17e>
  }

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;
3400150e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001512:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
34001516:	f04f 0200 	mov.w	r2, #0
3400151a:	f04f 0300 	mov.w	r3, #0
3400151e:	e9c1 2300 	strd	r2, r3, [r1]

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
34001522:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001526:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
3400152a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400152e:	4690      	mov	r8, r2
34001530:	f443 0980 	orr.w	r9, r3, #4194304	@ 0x400000
34001534:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001538:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
3400153c:	e9c3 8900 	strd	r8, r9, [r3]
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001540:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001544:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001548:	4a13      	ldr	r2, [pc, #76]	@ (34001598 <SystemClock_Config+0x20c>)
3400154a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3400154e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001552:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001556:	e9d3 2300 	ldrd	r2, r3, [r3]
3400155a:	4614      	mov	r4, r2
3400155c:	f443 0500 	orr.w	r5, r3, #8388608	@ 0x800000
34001560:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001564:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001568:	e9c3 4500 	strd	r4, r5, [r3]
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3400156c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001570:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001574:	4a09      	ldr	r2, [pc, #36]	@ (3400159c <SystemClock_Config+0x210>)
34001576:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400157a:	463b      	mov	r3, r7
3400157c:	4618      	mov	r0, r3
3400157e:	f00a fbdb 	bl	3400bd38 <HAL_RCCEx_PeriphCLKConfig>
34001582:	4603      	mov	r3, r0
34001584:	2b00      	cmp	r3, #0
34001586:	d001      	beq.n	3400158c <SystemClock_Config+0x200>
  {
    while (1);
34001588:	bf00      	nop
3400158a:	e7fd      	b.n	34001588 <SystemClock_Config+0x1fc>
  }
}
3400158c:	bf00      	nop
3400158e:	f507 771a 	add.w	r7, r7, #616	@ 0x268
34001592:	46bd      	mov	sp, r7
34001594:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
34001598:	03000014 	.word	0x03000014
3400159c:	03000414 	.word	0x03000414

340015a0 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340015a0:	b580      	push	{r7, lr}
340015a2:	b082      	sub	sp, #8
340015a4:	af00      	add	r7, sp, #0
340015a6:	6078      	str	r0, [r7, #4]
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
340015a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340015ac:	f7ff fb3e 	bl	34000c2c <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
340015b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
340015b4:	f7ff fbb6 	bl	34000d24 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_CACHEAXI_FORCE_RESET();
340015b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
340015bc:	f7ff fbc8 	bl	34000d50 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
340015c0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
340015c4:	f7ff fbd4 	bl	34000d70 <LL_AHB5_GRP1_ReleaseReset>
}
340015c8:	bf00      	nop
340015ca:	3708      	adds	r7, #8
340015cc:	46bd      	mov	sp, r7
340015ce:	bd80      	pop	{r7, pc}

340015d0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
340015d0:	b480      	push	{r7}
340015d2:	b083      	sub	sp, #12
340015d4:	af00      	add	r7, sp, #0
340015d6:	6078      	str	r0, [r7, #4]
340015d8:	6039      	str	r1, [r7, #0]
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
340015da:	be00      	bkpt	0x0000
  while (1)
340015dc:	bf00      	nop
340015de:	e7fd      	b.n	340015dc <assert_failed+0xc>

340015e0 <npu_cache_init>:
#include "stm32n6xx_hal_cacheaxi.h"

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
340015e0:	b580      	push	{r7, lr}
340015e2:	af00      	add	r7, sp, #0
  hcacheaxi_s.Instance = CACHEAXI;
340015e4:	4b03      	ldr	r3, [pc, #12]	@ (340015f4 <npu_cache_init+0x14>)
340015e6:	4a04      	ldr	r2, [pc, #16]	@ (340015f8 <npu_cache_init+0x18>)
340015e8:	601a      	str	r2, [r3, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
340015ea:	4802      	ldr	r0, [pc, #8]	@ (340015f4 <npu_cache_init+0x14>)
340015ec:	f004 fea0 	bl	34006330 <HAL_CACHEAXI_Init>
}
340015f0:	bf00      	nop
340015f2:	bd80      	pop	{r7, pc}
340015f4:	3401e944 	.word	0x3401e944
340015f8:	580dfc00 	.word	0x580dfc00

340015fc <npu_cache_enable>:

void npu_cache_enable(void)
{
340015fc:	b580      	push	{r7, lr}
340015fe:	b082      	sub	sp, #8
34001600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001602:	4806      	ldr	r0, [pc, #24]	@ (3400161c <npu_cache_enable+0x20>)
34001604:	f004 feca 	bl	3400639c <HAL_CACHEAXI_Enable>
34001608:	4603      	mov	r3, r0
3400160a:	71fb      	strb	r3, [r7, #7]
  } while (status == HAL_BUSY);
3400160c:	79fb      	ldrb	r3, [r7, #7]
3400160e:	2b02      	cmp	r3, #2
34001610:	d0f7      	beq.n	34001602 <npu_cache_enable+0x6>
}
34001612:	bf00      	nop
34001614:	bf00      	nop
34001616:	3708      	adds	r7, #8
34001618:	46bd      	mov	sp, r7
3400161a:	bd80      	pop	{r7, pc}
3400161c:	3401e944 	.word	0x3401e944

34001620 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
34001620:	b480      	push	{r7}
34001622:	af00      	add	r7, sp, #0
}
34001624:	bf00      	nop
34001626:	46bd      	mov	sp, r7
34001628:	f85d 7b04 	ldr.w	r7, [sp], #4
3400162c:	4770      	bx	lr

3400162e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
3400162e:	b480      	push	{r7}
34001630:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001632:	bf00      	nop
34001634:	e7fd      	b.n	34001632 <HardFault_Handler+0x4>

34001636 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
34001636:	b480      	push	{r7}
34001638:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
3400163a:	bf00      	nop
3400163c:	e7fd      	b.n	3400163a <MemManage_Handler+0x4>

3400163e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
3400163e:	b480      	push	{r7}
34001640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34001642:	bf00      	nop
34001644:	e7fd      	b.n	34001642 <BusFault_Handler+0x4>

34001646 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
34001646:	b480      	push	{r7}
34001648:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
3400164a:	bf00      	nop
3400164c:	e7fd      	b.n	3400164a <UsageFault_Handler+0x4>

3400164e <SecureFault_Handler>:
  * @brief  This function handles Secure Fault exception.
  * @param  None
  * @retval None
  */
void SecureFault_Handler(void)
{
3400164e:	b480      	push	{r7}
34001650:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001652:	bf00      	nop
34001654:	e7fd      	b.n	34001652 <SecureFault_Handler+0x4>

34001656 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
34001656:	b480      	push	{r7}
34001658:	af00      	add	r7, sp, #0
}
3400165a:	bf00      	nop
3400165c:	46bd      	mov	sp, r7
3400165e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001662:	4770      	bx	lr

34001664 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
34001664:	b480      	push	{r7}
34001666:	af00      	add	r7, sp, #0
  while (1)
34001668:	bf00      	nop
3400166a:	e7fd      	b.n	34001668 <DebugMon_Handler+0x4>

3400166c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
3400166c:	b480      	push	{r7}
3400166e:	af00      	add	r7, sp, #0
  while (1)
34001670:	bf00      	nop
34001672:	e7fd      	b.n	34001670 <PendSV_Handler+0x4>

34001674 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
34001674:	b580      	push	{r7, lr}
34001676:	af00      	add	r7, sp, #0
  HAL_IncTick();
34001678:	f004 fcc4 	bl	34006004 <HAL_IncTick>
}
3400167c:	bf00      	nop
3400167e:	bd80      	pop	{r7, pc}

34001680 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001680:	b580      	push	{r7, lr}
34001682:	b082      	sub	sp, #8
34001684:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001686:	f018 fc63 	bl	34019f50 <CMW_CAMERA_GetDCMIPPHandle>
3400168a:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
3400168c:	6878      	ldr	r0, [r7, #4]
3400168e:	f005 fa33 	bl	34006af8 <HAL_DCMIPP_CSI_IRQHandler>
}
34001692:	bf00      	nop
34001694:	3708      	adds	r7, #8
34001696:	46bd      	mov	sp, r7
34001698:	bd80      	pop	{r7, pc}

3400169a <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
3400169a:	b580      	push	{r7, lr}
3400169c:	b082      	sub	sp, #8
3400169e:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340016a0:	f018 fc56 	bl	34019f50 <CMW_CAMERA_GetDCMIPPHandle>
340016a4:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
340016a6:	6878      	ldr	r0, [r7, #4]
340016a8:	f005 f842 	bl	34006730 <HAL_DCMIPP_IRQHandler>
340016ac:	bf00      	nop
340016ae:	3708      	adds	r7, #8
340016b0:	46bd      	mov	sp, r7
340016b2:	bd80      	pop	{r7, pc}

340016b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
340016b4:	b480      	push	{r7}
340016b6:	af00      	add	r7, sp, #0
  return 1;
340016b8:	2301      	movs	r3, #1
}
340016ba:	4618      	mov	r0, r3
340016bc:	46bd      	mov	sp, r7
340016be:	f85d 7b04 	ldr.w	r7, [sp], #4
340016c2:	4770      	bx	lr

340016c4 <_kill>:

int _kill(int pid, int sig)
{
340016c4:	b580      	push	{r7, lr}
340016c6:	b082      	sub	sp, #8
340016c8:	af00      	add	r7, sp, #0
340016ca:	6078      	str	r0, [r7, #4]
340016cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
340016ce:	f019 ffcf 	bl	3401b670 <__errno>
340016d2:	4603      	mov	r3, r0
340016d4:	2216      	movs	r2, #22
340016d6:	601a      	str	r2, [r3, #0]
  return -1;
340016d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
340016dc:	4618      	mov	r0, r3
340016de:	3708      	adds	r7, #8
340016e0:	46bd      	mov	sp, r7
340016e2:	bd80      	pop	{r7, pc}

340016e4 <_exit>:

void _exit (int status)
{
340016e4:	b580      	push	{r7, lr}
340016e6:	b082      	sub	sp, #8
340016e8:	af00      	add	r7, sp, #0
340016ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
340016ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
340016f0:	6878      	ldr	r0, [r7, #4]
340016f2:	f7ff ffe7 	bl	340016c4 <_kill>
  while (1) {}    /* Make sure we hang here */
340016f6:	bf00      	nop
340016f8:	e7fd      	b.n	340016f6 <_exit+0x12>

340016fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
340016fa:	b580      	push	{r7, lr}
340016fc:	b086      	sub	sp, #24
340016fe:	af00      	add	r7, sp, #0
34001700:	60f8      	str	r0, [r7, #12]
34001702:	60b9      	str	r1, [r7, #8]
34001704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001706:	2300      	movs	r3, #0
34001708:	617b      	str	r3, [r7, #20]
3400170a:	e00a      	b.n	34001722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
3400170c:	f3af 8000 	nop.w
34001710:	4601      	mov	r1, r0
34001712:	68bb      	ldr	r3, [r7, #8]
34001714:	1c5a      	adds	r2, r3, #1
34001716:	60ba      	str	r2, [r7, #8]
34001718:	b2ca      	uxtb	r2, r1
3400171a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400171c:	697b      	ldr	r3, [r7, #20]
3400171e:	3301      	adds	r3, #1
34001720:	617b      	str	r3, [r7, #20]
34001722:	697a      	ldr	r2, [r7, #20]
34001724:	687b      	ldr	r3, [r7, #4]
34001726:	429a      	cmp	r2, r3
34001728:	dbf0      	blt.n	3400170c <_read+0x12>
  }

  return len;
3400172a:	687b      	ldr	r3, [r7, #4]
}
3400172c:	4618      	mov	r0, r3
3400172e:	3718      	adds	r7, #24
34001730:	46bd      	mov	sp, r7
34001732:	bd80      	pop	{r7, pc}

34001734 <_close>:
  }
  return len;
}

int _close(int file)
{
34001734:	b480      	push	{r7}
34001736:	b083      	sub	sp, #12
34001738:	af00      	add	r7, sp, #0
3400173a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
3400173c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001740:	4618      	mov	r0, r3
34001742:	370c      	adds	r7, #12
34001744:	46bd      	mov	sp, r7
34001746:	f85d 7b04 	ldr.w	r7, [sp], #4
3400174a:	4770      	bx	lr

3400174c <_fstat>:


int _fstat(int file, struct stat *st)
{
3400174c:	b480      	push	{r7}
3400174e:	b083      	sub	sp, #12
34001750:	af00      	add	r7, sp, #0
34001752:	6078      	str	r0, [r7, #4]
34001754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34001756:	683b      	ldr	r3, [r7, #0]
34001758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3400175c:	605a      	str	r2, [r3, #4]
  return 0;
3400175e:	2300      	movs	r3, #0
}
34001760:	4618      	mov	r0, r3
34001762:	370c      	adds	r7, #12
34001764:	46bd      	mov	sp, r7
34001766:	f85d 7b04 	ldr.w	r7, [sp], #4
3400176a:	4770      	bx	lr

3400176c <_isatty>:

int _isatty(int file)
{
3400176c:	b480      	push	{r7}
3400176e:	b083      	sub	sp, #12
34001770:	af00      	add	r7, sp, #0
34001772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34001774:	2301      	movs	r3, #1
}
34001776:	4618      	mov	r0, r3
34001778:	370c      	adds	r7, #12
3400177a:	46bd      	mov	sp, r7
3400177c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001780:	4770      	bx	lr

34001782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
34001782:	b480      	push	{r7}
34001784:	b085      	sub	sp, #20
34001786:	af00      	add	r7, sp, #0
34001788:	60f8      	str	r0, [r7, #12]
3400178a:	60b9      	str	r1, [r7, #8]
3400178c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
3400178e:	2300      	movs	r3, #0
}
34001790:	4618      	mov	r0, r3
34001792:	3714      	adds	r7, #20
34001794:	46bd      	mov	sp, r7
34001796:	f85d 7b04 	ldr.w	r7, [sp], #4
3400179a:	4770      	bx	lr

3400179c <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
3400179c:	b480      	push	{r7}
3400179e:	b083      	sub	sp, #12
340017a0:	af00      	add	r7, sp, #0
340017a2:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
340017a4:	687b      	ldr	r3, [r7, #4]
340017a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340017aa:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
340017ac:	687b      	ldr	r3, [r7, #4]
340017ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340017b2:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
340017b4:	687b      	ldr	r3, [r7, #4]
340017b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340017ba:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
340017bc:	687b      	ldr	r3, [r7, #4]
340017be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340017c2:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340017c4:	687b      	ldr	r3, [r7, #4]
340017c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340017ca:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
340017cc:	687b      	ldr	r3, [r7, #4]
340017ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340017d2:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
340017d4:	687b      	ldr	r3, [r7, #4]
340017d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340017da:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
340017dc:	687b      	ldr	r3, [r7, #4]
340017de:	f44f 7280 	mov.w	r2, #256	@ 0x100
340017e2:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
340017e4:	687b      	ldr	r3, [r7, #4]
340017e6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340017ea:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
340017ec:	2300      	movs	r3, #0
};
340017ee:	4618      	mov	r0, r3
340017f0:	370c      	adds	r7, #12
340017f2:	46bd      	mov	sp, r7
340017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340017f8:	4770      	bx	lr

340017fa <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
340017fa:	b580      	push	{r7, lr}
340017fc:	b09a      	sub	sp, #104	@ 0x68
340017fe:	af00      	add	r7, sp, #0
34001800:	6078      	str	r0, [r7, #4]
34001802:	460b      	mov	r3, r1
34001804:	70fb      	strb	r3, [r7, #3]
34001806:	4613      	mov	r3, r2
34001808:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
3400180a:	f107 031c 	add.w	r3, r7, #28
3400180e:	224c      	movs	r2, #76	@ 0x4c
34001810:	2100      	movs	r1, #0
34001812:	4618      	mov	r0, r3
34001814:	f019 feca 	bl	3401b5ac <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001818:	f107 0308 	add.w	r3, r7, #8
3400181c:	2200      	movs	r2, #0
3400181e:	601a      	str	r2, [r3, #0]
34001820:	605a      	str	r2, [r3, #4]
34001822:	609a      	str	r2, [r3, #8]
34001824:	60da      	str	r2, [r3, #12]
34001826:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001828:	78fb      	ldrb	r3, [r7, #3]
3400182a:	2b00      	cmp	r3, #0
3400182c:	d105      	bne.n	3400183a <MX25UM51245G_AutoPollingMemReady+0x40>
3400182e:	78bb      	ldrb	r3, [r7, #2]
34001830:	2b01      	cmp	r3, #1
34001832:	d102      	bne.n	3400183a <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
34001834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001838:	e08b      	b.n	34001952 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
3400183a:	2300      	movs	r3, #0
3400183c:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400183e:	2300      	movs	r3, #0
34001840:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001842:	78fb      	ldrb	r3, [r7, #3]
34001844:	2b00      	cmp	r3, #0
34001846:	d101      	bne.n	3400184c <MX25UM51245G_AutoPollingMemReady+0x52>
34001848:	2301      	movs	r3, #1
3400184a:	e000      	b.n	3400184e <MX25UM51245G_AutoPollingMemReady+0x54>
3400184c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001850:	78bb      	ldrb	r3, [r7, #2]
34001852:	2b01      	cmp	r3, #1
34001854:	d101      	bne.n	3400185a <MX25UM51245G_AutoPollingMemReady+0x60>
34001856:	2308      	movs	r3, #8
34001858:	e000      	b.n	3400185c <MX25UM51245G_AutoPollingMemReady+0x62>
3400185a:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400185c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400185e:	78fb      	ldrb	r3, [r7, #3]
34001860:	2b00      	cmp	r3, #0
34001862:	d101      	bne.n	34001868 <MX25UM51245G_AutoPollingMemReady+0x6e>
34001864:	2300      	movs	r3, #0
34001866:	e000      	b.n	3400186a <MX25UM51245G_AutoPollingMemReady+0x70>
34001868:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
3400186c:	78fb      	ldrb	r3, [r7, #3]
3400186e:	2b00      	cmp	r3, #0
34001870:	d101      	bne.n	34001876 <MX25UM51245G_AutoPollingMemReady+0x7c>
34001872:	2305      	movs	r3, #5
34001874:	e001      	b.n	3400187a <MX25UM51245G_AutoPollingMemReady+0x80>
34001876:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400187a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400187c:	78fb      	ldrb	r3, [r7, #3]
3400187e:	2b00      	cmp	r3, #0
34001880:	d101      	bne.n	34001886 <MX25UM51245G_AutoPollingMemReady+0x8c>
34001882:	2300      	movs	r3, #0
34001884:	e001      	b.n	3400188a <MX25UM51245G_AutoPollingMemReady+0x90>
34001886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400188a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400188c:	78bb      	ldrb	r3, [r7, #2]
3400188e:	2b01      	cmp	r3, #1
34001890:	d102      	bne.n	34001898 <MX25UM51245G_AutoPollingMemReady+0x9e>
34001892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001896:	e000      	b.n	3400189a <MX25UM51245G_AutoPollingMemReady+0xa0>
34001898:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400189a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400189c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address            = 0U;
340018a2:	2300      	movs	r3, #0
340018a4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340018a6:	2300      	movs	r3, #0
340018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340018aa:	78fb      	ldrb	r3, [r7, #3]
340018ac:	2b00      	cmp	r3, #0
340018ae:	d102      	bne.n	340018b6 <MX25UM51245G_AutoPollingMemReady+0xbc>
340018b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340018b4:	e001      	b.n	340018ba <MX25UM51245G_AutoPollingMemReady+0xc0>
340018b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
340018ba:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
340018bc:	78bb      	ldrb	r3, [r7, #2]
340018be:	2b01      	cmp	r3, #1
340018c0:	d102      	bne.n	340018c8 <MX25UM51245G_AutoPollingMemReady+0xce>
340018c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340018c6:	e000      	b.n	340018ca <MX25UM51245G_AutoPollingMemReady+0xd0>
340018c8:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
340018ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
340018cc:	78fb      	ldrb	r3, [r7, #3]
340018ce:	2b00      	cmp	r3, #0
340018d0:	d006      	beq.n	340018e0 <MX25UM51245G_AutoPollingMemReady+0xe6>
340018d2:	78bb      	ldrb	r3, [r7, #2]
340018d4:	2b01      	cmp	r3, #1
340018d6:	d101      	bne.n	340018dc <MX25UM51245G_AutoPollingMemReady+0xe2>
340018d8:	2305      	movs	r3, #5
340018da:	e002      	b.n	340018e2 <MX25UM51245G_AutoPollingMemReady+0xe8>
340018dc:	2304      	movs	r3, #4
340018de:	e000      	b.n	340018e2 <MX25UM51245G_AutoPollingMemReady+0xe8>
340018e0:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
340018e2:	663b      	str	r3, [r7, #96]	@ 0x60
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
340018e4:	78bb      	ldrb	r3, [r7, #2]
340018e6:	2b01      	cmp	r3, #1
340018e8:	d101      	bne.n	340018ee <MX25UM51245G_AutoPollingMemReady+0xf4>
340018ea:	2302      	movs	r3, #2
340018ec:	e000      	b.n	340018f0 <MX25UM51245G_AutoPollingMemReady+0xf6>
340018ee:	2301      	movs	r3, #1
340018f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
340018f2:	78bb      	ldrb	r3, [r7, #2]
340018f4:	2b01      	cmp	r3, #1
340018f6:	d102      	bne.n	340018fe <MX25UM51245G_AutoPollingMemReady+0x104>
340018f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
340018fc:	e000      	b.n	34001900 <MX25UM51245G_AutoPollingMemReady+0x106>
340018fe:	2300      	movs	r3, #0
34001900:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  s_config.MatchValue    = 0U;
34001902:	2300      	movs	r3, #0
34001904:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001906:	2301      	movs	r3, #1
34001908:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
3400190a:	2300      	movs	r3, #0
3400190c:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
3400190e:	2310      	movs	r3, #16
34001910:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001916:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001918:	f107 031c 	add.w	r3, r7, #28
3400191c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001920:	4619      	mov	r1, r3
34001922:	6878      	ldr	r0, [r7, #4]
34001924:	f017 fc4e 	bl	340191c4 <HAL_XSPI_Command>
34001928:	4603      	mov	r3, r0
3400192a:	2b00      	cmp	r3, #0
3400192c:	d002      	beq.n	34001934 <MX25UM51245G_AutoPollingMemReady+0x13a>
  {
    return MX25UM51245G_ERROR;
3400192e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001932:	e00e      	b.n	34001952 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001934:	f107 0308 	add.w	r3, r7, #8
34001938:	f241 3288 	movw	r2, #5000	@ 0x1388
3400193c:	4619      	mov	r1, r3
3400193e:	6878      	ldr	r0, [r7, #4]
34001940:	f017 ff68 	bl	34019814 <HAL_XSPI_AutoPolling>
34001944:	4603      	mov	r3, r0
34001946:	2b00      	cmp	r3, #0
34001948:	d002      	beq.n	34001950 <MX25UM51245G_AutoPollingMemReady+0x156>
  {
    return MX25UM51245G_ERROR;
3400194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400194e:	e000      	b.n	34001952 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  return MX25UM51245G_OK;
34001950:	2300      	movs	r3, #0
}
34001952:	4618      	mov	r0, r3
34001954:	3768      	adds	r7, #104	@ 0x68
34001956:	46bd      	mov	sp, r7
34001958:	bd80      	pop	{r7, pc}

3400195a <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
3400195a:	b580      	push	{r7, lr}
3400195c:	b09a      	sub	sp, #104	@ 0x68
3400195e:	af00      	add	r7, sp, #0
34001960:	6078      	str	r0, [r7, #4]
34001962:	460b      	mov	r3, r1
34001964:	70fb      	strb	r3, [r7, #3]
34001966:	4613      	mov	r3, r2
34001968:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
3400196a:	f107 031c 	add.w	r3, r7, #28
3400196e:	224c      	movs	r2, #76	@ 0x4c
34001970:	2100      	movs	r1, #0
34001972:	4618      	mov	r0, r3
34001974:	f019 fe1a 	bl	3401b5ac <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001978:	f107 030c 	add.w	r3, r7, #12
3400197c:	2200      	movs	r2, #0
3400197e:	601a      	str	r2, [r3, #0]
34001980:	605a      	str	r2, [r3, #4]
34001982:	609a      	str	r2, [r3, #8]
34001984:	60da      	str	r2, [r3, #12]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
34001986:	78fb      	ldrb	r3, [r7, #3]
34001988:	2b01      	cmp	r3, #1
3400198a:	d105      	bne.n	34001998 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
3400198c:	78bb      	ldrb	r3, [r7, #2]
3400198e:	2b00      	cmp	r3, #0
34001990:	d102      	bne.n	34001998 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
  {
    return MX25UM51245G_ERROR;
34001992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001996:	e086      	b.n	34001aa6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001998:	2301      	movs	r3, #1
3400199a:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400199c:	2300      	movs	r3, #0
3400199e:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019a0:	78fb      	ldrb	r3, [r7, #3]
340019a2:	2b00      	cmp	r3, #0
340019a4:	d101      	bne.n	340019aa <MX25UM51245G_EnableSTRMemoryMappedMode+0x50>
340019a6:	2301      	movs	r3, #1
340019a8:	e000      	b.n	340019ac <MX25UM51245G_EnableSTRMemoryMappedMode+0x52>
340019aa:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340019ae:	2300      	movs	r3, #0
340019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340019b2:	78fb      	ldrb	r3, [r7, #3]
340019b4:	2b00      	cmp	r3, #0
340019b6:	d101      	bne.n	340019bc <MX25UM51245G_EnableSTRMemoryMappedMode+0x62>
340019b8:	2300      	movs	r3, #0
340019ba:	e000      	b.n	340019be <MX25UM51245G_EnableSTRMemoryMappedMode+0x64>
340019bc:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
340019c0:	78fb      	ldrb	r3, [r7, #3]
340019c2:	2b00      	cmp	r3, #0
340019c4:	d106      	bne.n	340019d4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
340019c6:	78bb      	ldrb	r3, [r7, #2]
340019c8:	2b00      	cmp	r3, #0
340019ca:	d101      	bne.n	340019d0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
340019cc:	230b      	movs	r3, #11
340019ce:	e003      	b.n	340019d8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
340019d0:	230c      	movs	r3, #12
340019d2:	e001      	b.n	340019d8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
340019d4:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340019d8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340019da:	78fb      	ldrb	r3, [r7, #3]
340019dc:	2b00      	cmp	r3, #0
340019de:	d102      	bne.n	340019e6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
340019e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
340019e4:	e001      	b.n	340019ea <MX25UM51245G_EnableSTRMemoryMappedMode+0x90>
340019e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
340019ec:	2300      	movs	r3, #0
340019ee:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
340019f0:	78bb      	ldrb	r3, [r7, #2]
340019f2:	2b00      	cmp	r3, #0
340019f4:	d102      	bne.n	340019fc <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
340019f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340019fa:	e001      	b.n	34001a00 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa6>
340019fc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001a02:	2300      	movs	r3, #0
34001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001a06:	78fb      	ldrb	r3, [r7, #3]
34001a08:	2b00      	cmp	r3, #0
34001a0a:	d102      	bne.n	34001a12 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
34001a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001a10:	e001      	b.n	34001a16 <MX25UM51245G_EnableSTRMemoryMappedMode+0xbc>
34001a12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001a16:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
34001a18:	2300      	movs	r3, #0
34001a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001a1c:	78fb      	ldrb	r3, [r7, #3]
34001a1e:	2b00      	cmp	r3, #0
34001a20:	d101      	bne.n	34001a26 <MX25UM51245G_EnableSTRMemoryMappedMode+0xcc>
34001a22:	2308      	movs	r3, #8
34001a24:	e000      	b.n	34001a28 <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
34001a26:	2306      	movs	r3, #6
34001a28:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001a2a:	2300      	movs	r3, #0
34001a2c:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a2e:	f107 031c 	add.w	r3, r7, #28
34001a32:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a36:	4619      	mov	r1, r3
34001a38:	6878      	ldr	r0, [r7, #4]
34001a3a:	f017 fbc3 	bl	340191c4 <HAL_XSPI_Command>
34001a3e:	4603      	mov	r3, r0
34001a40:	2b00      	cmp	r3, #0
34001a42:	d002      	beq.n	34001a4a <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
34001a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001a48:	e02d      	b.n	34001aa6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
34001a4a:	2302      	movs	r3, #2
34001a4c:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001a4e:	78fb      	ldrb	r3, [r7, #3]
34001a50:	2b00      	cmp	r3, #0
34001a52:	d106      	bne.n	34001a62 <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
34001a54:	78bb      	ldrb	r3, [r7, #2]
34001a56:	2b00      	cmp	r3, #0
34001a58:	d101      	bne.n	34001a5e <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
34001a5a:	2302      	movs	r3, #2
34001a5c:	e003      	b.n	34001a66 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001a5e:	2312      	movs	r3, #18
34001a60:	e001      	b.n	34001a66 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001a62:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles        = 0U;
34001a68:	2300      	movs	r3, #0
34001a6a:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a6c:	f107 031c 	add.w	r3, r7, #28
34001a70:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a74:	4619      	mov	r1, r3
34001a76:	6878      	ldr	r0, [r7, #4]
34001a78:	f017 fba4 	bl	340191c4 <HAL_XSPI_Command>
34001a7c:	4603      	mov	r3, r0
34001a7e:	2b00      	cmp	r3, #0
34001a80:	d002      	beq.n	34001a88 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
34001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001a86:	e00e      	b.n	34001aa6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001a88:	2300      	movs	r3, #0
34001a8a:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001a8c:	f107 030c 	add.w	r3, r7, #12
34001a90:	4619      	mov	r1, r3
34001a92:	6878      	ldr	r0, [r7, #4]
34001a94:	f017 ff88 	bl	340199a8 <HAL_XSPI_MemoryMapped>
34001a98:	4603      	mov	r3, r0
34001a9a:	2b00      	cmp	r3, #0
34001a9c:	d002      	beq.n	34001aa4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
34001a9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001aa2:	e000      	b.n	34001aa6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
34001aa4:	2300      	movs	r3, #0
}
34001aa6:	4618      	mov	r0, r3
34001aa8:	3768      	adds	r7, #104	@ 0x68
34001aaa:	46bd      	mov	sp, r7
34001aac:	bd80      	pop	{r7, pc}

34001aae <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34001aae:	b580      	push	{r7, lr}
34001ab0:	b09a      	sub	sp, #104	@ 0x68
34001ab2:	af00      	add	r7, sp, #0
34001ab4:	6078      	str	r0, [r7, #4]
34001ab6:	460b      	mov	r3, r1
34001ab8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
34001aba:	f107 031c 	add.w	r3, r7, #28
34001abe:	224c      	movs	r2, #76	@ 0x4c
34001ac0:	2100      	movs	r1, #0
34001ac2:	4618      	mov	r0, r3
34001ac4:	f019 fd72 	bl	3401b5ac <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001ac8:	f107 030c 	add.w	r3, r7, #12
34001acc:	2200      	movs	r2, #0
34001ace:	601a      	str	r2, [r3, #0]
34001ad0:	605a      	str	r2, [r3, #4]
34001ad2:	609a      	str	r2, [r3, #8]
34001ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001ad6:	2301      	movs	r3, #1
34001ad8:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001ada:	2300      	movs	r3, #0
34001adc:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34001ade:	2304      	movs	r3, #4
34001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001ae2:	2308      	movs	r3, #8
34001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34001ae6:	2310      	movs	r3, #16
34001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001aea:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34001af6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001afa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001afc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001b02:	2300      	movs	r3, #0
34001b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001b06:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34001b0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001b12:	2306      	movs	r3, #6
34001b14:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001b16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001b1a:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b1c:	f107 031c 	add.w	r3, r7, #28
34001b20:	f241 3288 	movw	r2, #5000	@ 0x1388
34001b24:	4619      	mov	r1, r3
34001b26:	6878      	ldr	r0, [r7, #4]
34001b28:	f017 fb4c 	bl	340191c4 <HAL_XSPI_Command>
34001b2c:	4603      	mov	r3, r0
34001b2e:	2b00      	cmp	r3, #0
34001b30:	d002      	beq.n	34001b38 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
34001b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001b36:	e025      	b.n	34001b84 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001b38:	2302      	movs	r3, #2
34001b3a:	61fb      	str	r3, [r7, #28]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001b3c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles   = 0U;
34001b42:	2300      	movs	r3, #0
34001b44:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34001b46:	2300      	movs	r3, #0
34001b48:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b4a:	f107 031c 	add.w	r3, r7, #28
34001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001b52:	4619      	mov	r1, r3
34001b54:	6878      	ldr	r0, [r7, #4]
34001b56:	f017 fb35 	bl	340191c4 <HAL_XSPI_Command>
34001b5a:	4603      	mov	r3, r0
34001b5c:	2b00      	cmp	r3, #0
34001b5e:	d002      	beq.n	34001b66 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
34001b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001b64:	e00e      	b.n	34001b84 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001b66:	2300      	movs	r3, #0
34001b68:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001b6a:	f107 030c 	add.w	r3, r7, #12
34001b6e:	4619      	mov	r1, r3
34001b70:	6878      	ldr	r0, [r7, #4]
34001b72:	f017 ff19 	bl	340199a8 <HAL_XSPI_MemoryMapped>
34001b76:	4603      	mov	r3, r0
34001b78:	2b00      	cmp	r3, #0
34001b7a:	d002      	beq.n	34001b82 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
34001b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001b80:	e000      	b.n	34001b84 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
34001b82:	2300      	movs	r3, #0
}
34001b84:	4618      	mov	r0, r3
34001b86:	3768      	adds	r7, #104	@ 0x68
34001b88:	46bd      	mov	sp, r7
34001b8a:	bd80      	pop	{r7, pc}

34001b8c <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001b8c:	b580      	push	{r7, lr}
34001b8e:	b09a      	sub	sp, #104	@ 0x68
34001b90:	af00      	add	r7, sp, #0
34001b92:	6078      	str	r0, [r7, #4]
34001b94:	460b      	mov	r3, r1
34001b96:	70fb      	strb	r3, [r7, #3]
34001b98:	4613      	mov	r3, r2
34001b9a:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
34001b9c:	f107 031c 	add.w	r3, r7, #28
34001ba0:	224c      	movs	r2, #76	@ 0x4c
34001ba2:	2100      	movs	r1, #0
34001ba4:	4618      	mov	r0, r3
34001ba6:	f019 fd01 	bl	3401b5ac <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001baa:	f107 0308 	add.w	r3, r7, #8
34001bae:	2200      	movs	r2, #0
34001bb0:	601a      	str	r2, [r3, #0]
34001bb2:	605a      	str	r2, [r3, #4]
34001bb4:	609a      	str	r2, [r3, #8]
34001bb6:	60da      	str	r2, [r3, #12]
34001bb8:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001bba:	78fb      	ldrb	r3, [r7, #3]
34001bbc:	2b00      	cmp	r3, #0
34001bbe:	d105      	bne.n	34001bcc <MX25UM51245G_WriteEnable+0x40>
34001bc0:	78bb      	ldrb	r3, [r7, #2]
34001bc2:	2b01      	cmp	r3, #1
34001bc4:	d102      	bne.n	34001bcc <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
34001bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001bca:	e0a9      	b.n	34001d20 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001bcc:	2300      	movs	r3, #0
34001bce:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001bd0:	2300      	movs	r3, #0
34001bd2:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001bd4:	78fb      	ldrb	r3, [r7, #3]
34001bd6:	2b00      	cmp	r3, #0
34001bd8:	d101      	bne.n	34001bde <MX25UM51245G_WriteEnable+0x52>
34001bda:	2301      	movs	r3, #1
34001bdc:	e000      	b.n	34001be0 <MX25UM51245G_WriteEnable+0x54>
34001bde:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001be2:	78bb      	ldrb	r3, [r7, #2]
34001be4:	2b01      	cmp	r3, #1
34001be6:	d101      	bne.n	34001bec <MX25UM51245G_WriteEnable+0x60>
34001be8:	2308      	movs	r3, #8
34001bea:	e000      	b.n	34001bee <MX25UM51245G_WriteEnable+0x62>
34001bec:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001bf0:	78fb      	ldrb	r3, [r7, #3]
34001bf2:	2b00      	cmp	r3, #0
34001bf4:	d101      	bne.n	34001bfa <MX25UM51245G_WriteEnable+0x6e>
34001bf6:	2300      	movs	r3, #0
34001bf8:	e000      	b.n	34001bfc <MX25UM51245G_WriteEnable+0x70>
34001bfa:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001bfe:	78fb      	ldrb	r3, [r7, #3]
34001c00:	2b00      	cmp	r3, #0
34001c02:	d101      	bne.n	34001c08 <MX25UM51245G_WriteEnable+0x7c>
34001c04:	2306      	movs	r3, #6
34001c06:	e001      	b.n	34001c0c <MX25UM51245G_WriteEnable+0x80>
34001c08:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34001c0e:	2300      	movs	r3, #0
34001c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001c12:	2300      	movs	r3, #0
34001c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34001c16:	2300      	movs	r3, #0
34001c18:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34001c1a:	2300      	movs	r3, #0
34001c1c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001c1e:	2300      	movs	r3, #0
34001c20:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001c22:	f107 031c 	add.w	r3, r7, #28
34001c26:	f241 3288 	movw	r2, #5000	@ 0x1388
34001c2a:	4619      	mov	r1, r3
34001c2c:	6878      	ldr	r0, [r7, #4]
34001c2e:	f017 fac9 	bl	340191c4 <HAL_XSPI_Command>
34001c32:	4603      	mov	r3, r0
34001c34:	2b00      	cmp	r3, #0
34001c36:	d002      	beq.n	34001c3e <MX25UM51245G_WriteEnable+0xb2>
  {
    return MX25UM51245G_ERROR;
34001c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001c3c:	e070      	b.n	34001d20 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001c3e:	78fb      	ldrb	r3, [r7, #3]
34001c40:	2b00      	cmp	r3, #0
34001c42:	d101      	bne.n	34001c48 <MX25UM51245G_WriteEnable+0xbc>
34001c44:	2305      	movs	r3, #5
34001c46:	e001      	b.n	34001c4c <MX25UM51245G_WriteEnable+0xc0>
34001c48:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
34001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001c4e:	78fb      	ldrb	r3, [r7, #3]
34001c50:	2b00      	cmp	r3, #0
34001c52:	d101      	bne.n	34001c58 <MX25UM51245G_WriteEnable+0xcc>
34001c54:	2300      	movs	r3, #0
34001c56:	e001      	b.n	34001c5c <MX25UM51245G_WriteEnable+0xd0>
34001c58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001c5e:	78bb      	ldrb	r3, [r7, #2]
34001c60:	2b01      	cmp	r3, #1
34001c62:	d102      	bne.n	34001c6a <MX25UM51245G_WriteEnable+0xde>
34001c64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001c68:	e000      	b.n	34001c6c <MX25UM51245G_WriteEnable+0xe0>
34001c6a:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
34001c6e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address        = 0U;
34001c74:	2300      	movs	r3, #0
34001c76:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001c78:	78fb      	ldrb	r3, [r7, #3]
34001c7a:	2b00      	cmp	r3, #0
34001c7c:	d102      	bne.n	34001c84 <MX25UM51245G_WriteEnable+0xf8>
34001c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001c82:	e001      	b.n	34001c88 <MX25UM51245G_WriteEnable+0xfc>
34001c84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001c88:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
34001c8a:	78bb      	ldrb	r3, [r7, #2]
34001c8c:	2b01      	cmp	r3, #1
34001c8e:	d102      	bne.n	34001c96 <MX25UM51245G_WriteEnable+0x10a>
34001c90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001c94:	e000      	b.n	34001c98 <MX25UM51245G_WriteEnable+0x10c>
34001c96:	2300      	movs	r3, #0
34001c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001c9a:	78fb      	ldrb	r3, [r7, #3]
34001c9c:	2b00      	cmp	r3, #0
34001c9e:	d006      	beq.n	34001cae <MX25UM51245G_WriteEnable+0x122>
34001ca0:	78bb      	ldrb	r3, [r7, #2]
34001ca2:	2b01      	cmp	r3, #1
34001ca4:	d101      	bne.n	34001caa <MX25UM51245G_WriteEnable+0x11e>
34001ca6:	2305      	movs	r3, #5
34001ca8:	e002      	b.n	34001cb0 <MX25UM51245G_WriteEnable+0x124>
34001caa:	2304      	movs	r3, #4
34001cac:	e000      	b.n	34001cb0 <MX25UM51245G_WriteEnable+0x124>
34001cae:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34001cb0:	663b      	str	r3, [r7, #96]	@ 0x60
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001cb2:	78bb      	ldrb	r3, [r7, #2]
34001cb4:	2b01      	cmp	r3, #1
34001cb6:	d101      	bne.n	34001cbc <MX25UM51245G_WriteEnable+0x130>
34001cb8:	2302      	movs	r3, #2
34001cba:	e000      	b.n	34001cbe <MX25UM51245G_WriteEnable+0x132>
34001cbc:	2301      	movs	r3, #1
34001cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001cc0:	78bb      	ldrb	r3, [r7, #2]
34001cc2:	2b01      	cmp	r3, #1
34001cc4:	d102      	bne.n	34001ccc <MX25UM51245G_WriteEnable+0x140>
34001cc6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001cca:	e000      	b.n	34001cce <MX25UM51245G_WriteEnable+0x142>
34001ccc:	2300      	movs	r3, #0
34001cce:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001cd0:	f107 031c 	add.w	r3, r7, #28
34001cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
34001cd8:	4619      	mov	r1, r3
34001cda:	6878      	ldr	r0, [r7, #4]
34001cdc:	f017 fa72 	bl	340191c4 <HAL_XSPI_Command>
34001ce0:	4603      	mov	r3, r0
34001ce2:	2b00      	cmp	r3, #0
34001ce4:	d002      	beq.n	34001cec <MX25UM51245G_WriteEnable+0x160>
  {
    return MX25UM51245G_ERROR;
34001ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001cea:	e019      	b.n	34001d20 <MX25UM51245G_WriteEnable+0x194>
  }

  s_config.MatchValue      = 2U;
34001cec:	2302      	movs	r3, #2
34001cee:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask       = 2U;
34001cf0:	2302      	movs	r3, #2
34001cf2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34001cf4:	2300      	movs	r3, #0
34001cf6:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34001cf8:	2310      	movs	r3, #16
34001cfa:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001cfc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001d00:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d02:	f107 0308 	add.w	r3, r7, #8
34001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d0a:	4619      	mov	r1, r3
34001d0c:	6878      	ldr	r0, [r7, #4]
34001d0e:	f017 fd81 	bl	34019814 <HAL_XSPI_AutoPolling>
34001d12:	4603      	mov	r3, r0
34001d14:	2b00      	cmp	r3, #0
34001d16:	d002      	beq.n	34001d1e <MX25UM51245G_WriteEnable+0x192>
  {
    return MX25UM51245G_ERROR;
34001d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d1c:	e000      	b.n	34001d20 <MX25UM51245G_WriteEnable+0x194>
  }

  return MX25UM51245G_OK;
34001d1e:	2300      	movs	r3, #0
}
34001d20:	4618      	mov	r0, r3
34001d22:	3768      	adds	r7, #104	@ 0x68
34001d24:	46bd      	mov	sp, r7
34001d26:	bd80      	pop	{r7, pc}

34001d28 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34001d28:	b580      	push	{r7, lr}
34001d2a:	b098      	sub	sp, #96	@ 0x60
34001d2c:	af00      	add	r7, sp, #0
34001d2e:	60f8      	str	r0, [r7, #12]
34001d30:	607b      	str	r3, [r7, #4]
34001d32:	460b      	mov	r3, r1
34001d34:	72fb      	strb	r3, [r7, #11]
34001d36:	4613      	mov	r3, r2
34001d38:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34001d3a:	f107 0314 	add.w	r3, r7, #20
34001d3e:	224c      	movs	r2, #76	@ 0x4c
34001d40:	2100      	movs	r1, #0
34001d42:	4618      	mov	r0, r3
34001d44:	f019 fc32 	bl	3401b5ac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001d48:	7afb      	ldrb	r3, [r7, #11]
34001d4a:	2b00      	cmp	r3, #0
34001d4c:	d105      	bne.n	34001d5a <MX25UM51245G_WriteCfg2Register+0x32>
34001d4e:	7abb      	ldrb	r3, [r7, #10]
34001d50:	2b01      	cmp	r3, #1
34001d52:	d102      	bne.n	34001d5a <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
34001d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d58:	e075      	b.n	34001e46 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001d5a:	2300      	movs	r3, #0
34001d5c:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001d5e:	2300      	movs	r3, #0
34001d60:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001d62:	7afb      	ldrb	r3, [r7, #11]
34001d64:	2b00      	cmp	r3, #0
34001d66:	d101      	bne.n	34001d6c <MX25UM51245G_WriteCfg2Register+0x44>
34001d68:	2301      	movs	r3, #1
34001d6a:	e000      	b.n	34001d6e <MX25UM51245G_WriteCfg2Register+0x46>
34001d6c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001d6e:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001d70:	7abb      	ldrb	r3, [r7, #10]
34001d72:	2b01      	cmp	r3, #1
34001d74:	d101      	bne.n	34001d7a <MX25UM51245G_WriteCfg2Register+0x52>
34001d76:	2308      	movs	r3, #8
34001d78:	e000      	b.n	34001d7c <MX25UM51245G_WriteCfg2Register+0x54>
34001d7a:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001d7e:	7afb      	ldrb	r3, [r7, #11]
34001d80:	2b00      	cmp	r3, #0
34001d82:	d101      	bne.n	34001d88 <MX25UM51245G_WriteCfg2Register+0x60>
34001d84:	2300      	movs	r3, #0
34001d86:	e000      	b.n	34001d8a <MX25UM51245G_WriteCfg2Register+0x62>
34001d88:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
34001d8c:	7afb      	ldrb	r3, [r7, #11]
34001d8e:	2b00      	cmp	r3, #0
34001d90:	d101      	bne.n	34001d96 <MX25UM51245G_WriteCfg2Register+0x6e>
34001d92:	2372      	movs	r3, #114	@ 0x72
34001d94:	e001      	b.n	34001d9a <MX25UM51245G_WriteCfg2Register+0x72>
34001d96:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001d9a:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001d9c:	7afb      	ldrb	r3, [r7, #11]
34001d9e:	2b00      	cmp	r3, #0
34001da0:	d102      	bne.n	34001da8 <MX25UM51245G_WriteCfg2Register+0x80>
34001da2:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001da6:	e001      	b.n	34001dac <MX25UM51245G_WriteCfg2Register+0x84>
34001da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001dac:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001dae:	7abb      	ldrb	r3, [r7, #10]
34001db0:	2b01      	cmp	r3, #1
34001db2:	d102      	bne.n	34001dba <MX25UM51245G_WriteCfg2Register+0x92>
34001db4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001db8:	e000      	b.n	34001dbc <MX25UM51245G_WriteCfg2Register+0x94>
34001dba:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001dbe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = WriteAddr;
34001dc4:	687b      	ldr	r3, [r7, #4]
34001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001dc8:	2300      	movs	r3, #0
34001dca:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001dcc:	7afb      	ldrb	r3, [r7, #11]
34001dce:	2b00      	cmp	r3, #0
34001dd0:	d102      	bne.n	34001dd8 <MX25UM51245G_WriteCfg2Register+0xb0>
34001dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001dd6:	e001      	b.n	34001ddc <MX25UM51245G_WriteCfg2Register+0xb4>
34001dd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001dde:	7abb      	ldrb	r3, [r7, #10]
34001de0:	2b01      	cmp	r3, #1
34001de2:	d102      	bne.n	34001dea <MX25UM51245G_WriteCfg2Register+0xc2>
34001de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001de8:	e000      	b.n	34001dec <MX25UM51245G_WriteCfg2Register+0xc4>
34001dea:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001dec:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34001dee:	2300      	movs	r3, #0
34001df0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001df2:	7afb      	ldrb	r3, [r7, #11]
34001df4:	2b00      	cmp	r3, #0
34001df6:	d006      	beq.n	34001e06 <MX25UM51245G_WriteCfg2Register+0xde>
34001df8:	7abb      	ldrb	r3, [r7, #10]
34001dfa:	2b01      	cmp	r3, #1
34001dfc:	d101      	bne.n	34001e02 <MX25UM51245G_WriteCfg2Register+0xda>
34001dfe:	2302      	movs	r3, #2
34001e00:	e002      	b.n	34001e08 <MX25UM51245G_WriteCfg2Register+0xe0>
34001e02:	2301      	movs	r3, #1
34001e04:	e000      	b.n	34001e08 <MX25UM51245G_WriteCfg2Register+0xe0>
34001e06:	2301      	movs	r3, #1
34001e08:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001e0a:	2300      	movs	r3, #0
34001e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e0e:	f107 0314 	add.w	r3, r7, #20
34001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e16:	4619      	mov	r1, r3
34001e18:	68f8      	ldr	r0, [r7, #12]
34001e1a:	f017 f9d3 	bl	340191c4 <HAL_XSPI_Command>
34001e1e:	4603      	mov	r3, r0
34001e20:	2b00      	cmp	r3, #0
34001e22:	d002      	beq.n	34001e2a <MX25UM51245G_WriteCfg2Register+0x102>
  {
    return MX25UM51245G_ERROR;
34001e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e28:	e00d      	b.n	34001e46 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e2e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
34001e32:	68f8      	ldr	r0, [r7, #12]
34001e34:	f017 fbd8 	bl	340195e8 <HAL_XSPI_Transmit>
34001e38:	4603      	mov	r3, r0
34001e3a:	2b00      	cmp	r3, #0
34001e3c:	d002      	beq.n	34001e44 <MX25UM51245G_WriteCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
34001e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e42:	e000      	b.n	34001e46 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  return MX25UM51245G_OK;
34001e44:	2300      	movs	r3, #0
}
34001e46:	4618      	mov	r0, r3
34001e48:	3760      	adds	r7, #96	@ 0x60
34001e4a:	46bd      	mov	sp, r7
34001e4c:	bd80      	pop	{r7, pc}

34001e4e <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001e4e:	b580      	push	{r7, lr}
34001e50:	b098      	sub	sp, #96	@ 0x60
34001e52:	af00      	add	r7, sp, #0
34001e54:	60f8      	str	r0, [r7, #12]
34001e56:	607b      	str	r3, [r7, #4]
34001e58:	460b      	mov	r3, r1
34001e5a:	72fb      	strb	r3, [r7, #11]
34001e5c:	4613      	mov	r3, r2
34001e5e:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34001e60:	f107 0314 	add.w	r3, r7, #20
34001e64:	224c      	movs	r2, #76	@ 0x4c
34001e66:	2100      	movs	r1, #0
34001e68:	4618      	mov	r0, r3
34001e6a:	f019 fb9f 	bl	3401b5ac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001e6e:	7afb      	ldrb	r3, [r7, #11]
34001e70:	2b00      	cmp	r3, #0
34001e72:	d105      	bne.n	34001e80 <MX25UM51245G_ReadCfg2Register+0x32>
34001e74:	7abb      	ldrb	r3, [r7, #10]
34001e76:	2b01      	cmp	r3, #1
34001e78:	d102      	bne.n	34001e80 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
34001e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e7e:	e07f      	b.n	34001f80 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001e80:	2300      	movs	r3, #0
34001e82:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001e84:	2300      	movs	r3, #0
34001e86:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001e88:	7afb      	ldrb	r3, [r7, #11]
34001e8a:	2b00      	cmp	r3, #0
34001e8c:	d101      	bne.n	34001e92 <MX25UM51245G_ReadCfg2Register+0x44>
34001e8e:	2301      	movs	r3, #1
34001e90:	e000      	b.n	34001e94 <MX25UM51245G_ReadCfg2Register+0x46>
34001e92:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001e94:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001e96:	7abb      	ldrb	r3, [r7, #10]
34001e98:	2b01      	cmp	r3, #1
34001e9a:	d101      	bne.n	34001ea0 <MX25UM51245G_ReadCfg2Register+0x52>
34001e9c:	2308      	movs	r3, #8
34001e9e:	e000      	b.n	34001ea2 <MX25UM51245G_ReadCfg2Register+0x54>
34001ea0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001ea4:	7afb      	ldrb	r3, [r7, #11]
34001ea6:	2b00      	cmp	r3, #0
34001ea8:	d101      	bne.n	34001eae <MX25UM51245G_ReadCfg2Register+0x60>
34001eaa:	2300      	movs	r3, #0
34001eac:	e000      	b.n	34001eb0 <MX25UM51245G_ReadCfg2Register+0x62>
34001eae:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
34001eb2:	7afb      	ldrb	r3, [r7, #11]
34001eb4:	2b00      	cmp	r3, #0
34001eb6:	d101      	bne.n	34001ebc <MX25UM51245G_ReadCfg2Register+0x6e>
34001eb8:	2371      	movs	r3, #113	@ 0x71
34001eba:	e001      	b.n	34001ec0 <MX25UM51245G_ReadCfg2Register+0x72>
34001ebc:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001ec0:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001ec2:	7afb      	ldrb	r3, [r7, #11]
34001ec4:	2b00      	cmp	r3, #0
34001ec6:	d102      	bne.n	34001ece <MX25UM51245G_ReadCfg2Register+0x80>
34001ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001ecc:	e001      	b.n	34001ed2 <MX25UM51245G_ReadCfg2Register+0x84>
34001ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001ed4:	7abb      	ldrb	r3, [r7, #10]
34001ed6:	2b01      	cmp	r3, #1
34001ed8:	d102      	bne.n	34001ee0 <MX25UM51245G_ReadCfg2Register+0x92>
34001eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001ede:	e000      	b.n	34001ee2 <MX25UM51245G_ReadCfg2Register+0x94>
34001ee0:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001ee4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = ReadAddr;
34001eea:	687b      	ldr	r3, [r7, #4]
34001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001eee:	2300      	movs	r3, #0
34001ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001ef2:	7afb      	ldrb	r3, [r7, #11]
34001ef4:	2b00      	cmp	r3, #0
34001ef6:	d102      	bne.n	34001efe <MX25UM51245G_ReadCfg2Register+0xb0>
34001ef8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001efc:	e001      	b.n	34001f02 <MX25UM51245G_ReadCfg2Register+0xb4>
34001efe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001f04:	7abb      	ldrb	r3, [r7, #10]
34001f06:	2b01      	cmp	r3, #1
34001f08:	d102      	bne.n	34001f10 <MX25UM51245G_ReadCfg2Register+0xc2>
34001f0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001f0e:	e000      	b.n	34001f12 <MX25UM51245G_ReadCfg2Register+0xc4>
34001f10:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001f12:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001f14:	7afb      	ldrb	r3, [r7, #11]
34001f16:	2b00      	cmp	r3, #0
34001f18:	d006      	beq.n	34001f28 <MX25UM51245G_ReadCfg2Register+0xda>
34001f1a:	7abb      	ldrb	r3, [r7, #10]
34001f1c:	2b01      	cmp	r3, #1
34001f1e:	d101      	bne.n	34001f24 <MX25UM51245G_ReadCfg2Register+0xd6>
34001f20:	2305      	movs	r3, #5
34001f22:	e002      	b.n	34001f2a <MX25UM51245G_ReadCfg2Register+0xdc>
34001f24:	2304      	movs	r3, #4
34001f26:	e000      	b.n	34001f2a <MX25UM51245G_ReadCfg2Register+0xdc>
34001f28:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001f2c:	7abb      	ldrb	r3, [r7, #10]
34001f2e:	2b01      	cmp	r3, #1
34001f30:	d101      	bne.n	34001f36 <MX25UM51245G_ReadCfg2Register+0xe8>
34001f32:	2302      	movs	r3, #2
34001f34:	e000      	b.n	34001f38 <MX25UM51245G_ReadCfg2Register+0xea>
34001f36:	2301      	movs	r3, #1
34001f38:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001f3a:	7abb      	ldrb	r3, [r7, #10]
34001f3c:	2b01      	cmp	r3, #1
34001f3e:	d102      	bne.n	34001f46 <MX25UM51245G_ReadCfg2Register+0xf8>
34001f40:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001f44:	e000      	b.n	34001f48 <MX25UM51245G_ReadCfg2Register+0xfa>
34001f46:	2300      	movs	r3, #0
34001f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001f4a:	f107 0314 	add.w	r3, r7, #20
34001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001f52:	4619      	mov	r1, r3
34001f54:	68f8      	ldr	r0, [r7, #12]
34001f56:	f017 f935 	bl	340191c4 <HAL_XSPI_Command>
34001f5a:	4603      	mov	r3, r0
34001f5c:	2b00      	cmp	r3, #0
34001f5e:	d002      	beq.n	34001f66 <MX25UM51245G_ReadCfg2Register+0x118>
  {
    return MX25UM51245G_ERROR;
34001f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f64:	e00c      	b.n	34001f80 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
34001f6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
34001f6c:	68f8      	ldr	r0, [r7, #12]
34001f6e:	f017 fbae 	bl	340196ce <HAL_XSPI_Receive>
34001f72:	4603      	mov	r3, r0
34001f74:	2b00      	cmp	r3, #0
34001f76:	d002      	beq.n	34001f7e <MX25UM51245G_ReadCfg2Register+0x130>
  {
    return MX25UM51245G_ERROR;
34001f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f7c:	e000      	b.n	34001f80 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  return MX25UM51245G_OK;
34001f7e:	2300      	movs	r3, #0
}
34001f80:	4618      	mov	r0, r3
34001f82:	3760      	adds	r7, #96	@ 0x60
34001f84:	46bd      	mov	sp, r7
34001f86:	bd80      	pop	{r7, pc}

34001f88 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001f88:	b580      	push	{r7, lr}
34001f8a:	b096      	sub	sp, #88	@ 0x58
34001f8c:	af00      	add	r7, sp, #0
34001f8e:	6078      	str	r0, [r7, #4]
34001f90:	460b      	mov	r3, r1
34001f92:	70fb      	strb	r3, [r7, #3]
34001f94:	4613      	mov	r3, r2
34001f96:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
34001f98:	f107 030c 	add.w	r3, r7, #12
34001f9c:	224c      	movs	r2, #76	@ 0x4c
34001f9e:	2100      	movs	r1, #0
34001fa0:	4618      	mov	r0, r3
34001fa2:	f019 fb03 	bl	3401b5ac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001fa6:	78fb      	ldrb	r3, [r7, #3]
34001fa8:	2b00      	cmp	r3, #0
34001faa:	d105      	bne.n	34001fb8 <MX25UM51245G_ResetEnable+0x30>
34001fac:	78bb      	ldrb	r3, [r7, #2]
34001fae:	2b01      	cmp	r3, #1
34001fb0:	d102      	bne.n	34001fb8 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
34001fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001fb6:	e039      	b.n	3400202c <MX25UM51245G_ResetEnable+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001fb8:	2300      	movs	r3, #0
34001fba:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001fbc:	2300      	movs	r3, #0
34001fbe:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001fc0:	78fb      	ldrb	r3, [r7, #3]
34001fc2:	2b00      	cmp	r3, #0
34001fc4:	d101      	bne.n	34001fca <MX25UM51245G_ResetEnable+0x42>
34001fc6:	2301      	movs	r3, #1
34001fc8:	e000      	b.n	34001fcc <MX25UM51245G_ResetEnable+0x44>
34001fca:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001fcc:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001fce:	78bb      	ldrb	r3, [r7, #2]
34001fd0:	2b01      	cmp	r3, #1
34001fd2:	d101      	bne.n	34001fd8 <MX25UM51245G_ResetEnable+0x50>
34001fd4:	2308      	movs	r3, #8
34001fd6:	e000      	b.n	34001fda <MX25UM51245G_ResetEnable+0x52>
34001fd8:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001fda:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001fdc:	78fb      	ldrb	r3, [r7, #3]
34001fde:	2b00      	cmp	r3, #0
34001fe0:	d101      	bne.n	34001fe6 <MX25UM51245G_ResetEnable+0x5e>
34001fe2:	2300      	movs	r3, #0
34001fe4:	e000      	b.n	34001fe8 <MX25UM51245G_ResetEnable+0x60>
34001fe6:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001fe8:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34001fea:	78fb      	ldrb	r3, [r7, #3]
34001fec:	2b00      	cmp	r3, #0
34001fee:	d101      	bne.n	34001ff4 <MX25UM51245G_ResetEnable+0x6c>
34001ff0:	2366      	movs	r3, #102	@ 0x66
34001ff2:	e001      	b.n	34001ff8 <MX25UM51245G_ResetEnable+0x70>
34001ff4:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001ff8:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34001ffa:	2300      	movs	r3, #0
34001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001ffe:	2300      	movs	r3, #0
34002000:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34002002:	2300      	movs	r3, #0
34002004:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
34002006:	2300      	movs	r3, #0
34002008:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400200a:	2300      	movs	r3, #0
3400200c:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400200e:	f107 030c 	add.w	r3, r7, #12
34002012:	f241 3288 	movw	r2, #5000	@ 0x1388
34002016:	4619      	mov	r1, r3
34002018:	6878      	ldr	r0, [r7, #4]
3400201a:	f017 f8d3 	bl	340191c4 <HAL_XSPI_Command>
3400201e:	4603      	mov	r3, r0
34002020:	2b00      	cmp	r3, #0
34002022:	d002      	beq.n	3400202a <MX25UM51245G_ResetEnable+0xa2>
  {
    return MX25UM51245G_ERROR;
34002024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002028:	e000      	b.n	3400202c <MX25UM51245G_ResetEnable+0xa4>
  }

  return MX25UM51245G_OK;
3400202a:	2300      	movs	r3, #0
}
3400202c:	4618      	mov	r0, r3
3400202e:	3758      	adds	r7, #88	@ 0x58
34002030:	46bd      	mov	sp, r7
34002032:	bd80      	pop	{r7, pc}

34002034 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34002034:	b580      	push	{r7, lr}
34002036:	b096      	sub	sp, #88	@ 0x58
34002038:	af00      	add	r7, sp, #0
3400203a:	6078      	str	r0, [r7, #4]
3400203c:	460b      	mov	r3, r1
3400203e:	70fb      	strb	r3, [r7, #3]
34002040:	4613      	mov	r3, r2
34002042:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
34002044:	f107 030c 	add.w	r3, r7, #12
34002048:	224c      	movs	r2, #76	@ 0x4c
3400204a:	2100      	movs	r1, #0
3400204c:	4618      	mov	r0, r3
3400204e:	f019 faad 	bl	3401b5ac <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002052:	78fb      	ldrb	r3, [r7, #3]
34002054:	2b00      	cmp	r3, #0
34002056:	d105      	bne.n	34002064 <MX25UM51245G_ResetMemory+0x30>
34002058:	78bb      	ldrb	r3, [r7, #2]
3400205a:	2b01      	cmp	r3, #1
3400205c:	d102      	bne.n	34002064 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
3400205e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002062:	e039      	b.n	340020d8 <MX25UM51245G_ResetMemory+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002064:	2300      	movs	r3, #0
34002066:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002068:	2300      	movs	r3, #0
3400206a:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400206c:	78fb      	ldrb	r3, [r7, #3]
3400206e:	2b00      	cmp	r3, #0
34002070:	d101      	bne.n	34002076 <MX25UM51245G_ResetMemory+0x42>
34002072:	2301      	movs	r3, #1
34002074:	e000      	b.n	34002078 <MX25UM51245G_ResetMemory+0x44>
34002076:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002078:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400207a:	78bb      	ldrb	r3, [r7, #2]
3400207c:	2b01      	cmp	r3, #1
3400207e:	d101      	bne.n	34002084 <MX25UM51245G_ResetMemory+0x50>
34002080:	2308      	movs	r3, #8
34002082:	e000      	b.n	34002086 <MX25UM51245G_ResetMemory+0x52>
34002084:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002086:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002088:	78fb      	ldrb	r3, [r7, #3]
3400208a:	2b00      	cmp	r3, #0
3400208c:	d101      	bne.n	34002092 <MX25UM51245G_ResetMemory+0x5e>
3400208e:	2300      	movs	r3, #0
34002090:	e000      	b.n	34002094 <MX25UM51245G_ResetMemory+0x60>
34002092:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002094:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
34002096:	78fb      	ldrb	r3, [r7, #3]
34002098:	2b00      	cmp	r3, #0
3400209a:	d101      	bne.n	340020a0 <MX25UM51245G_ResetMemory+0x6c>
3400209c:	2399      	movs	r3, #153	@ 0x99
3400209e:	e001      	b.n	340020a4 <MX25UM51245G_ResetMemory+0x70>
340020a0:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340020a4:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
340020a6:	2300      	movs	r3, #0
340020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340020aa:	2300      	movs	r3, #0
340020ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
340020ae:	2300      	movs	r3, #0
340020b0:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
340020b2:	2300      	movs	r3, #0
340020b4:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
340020b6:	2300      	movs	r3, #0
340020b8:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340020ba:	f107 030c 	add.w	r3, r7, #12
340020be:	f241 3288 	movw	r2, #5000	@ 0x1388
340020c2:	4619      	mov	r1, r3
340020c4:	6878      	ldr	r0, [r7, #4]
340020c6:	f017 f87d 	bl	340191c4 <HAL_XSPI_Command>
340020ca:	4603      	mov	r3, r0
340020cc:	2b00      	cmp	r3, #0
340020ce:	d002      	beq.n	340020d6 <MX25UM51245G_ResetMemory+0xa2>
  {
    return MX25UM51245G_ERROR;
340020d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020d4:	e000      	b.n	340020d8 <MX25UM51245G_ResetMemory+0xa4>
  }

  return MX25UM51245G_OK;
340020d6:	2300      	movs	r3, #0
}
340020d8:	4618      	mov	r0, r3
340020da:	3758      	adds	r7, #88	@ 0x58
340020dc:	46bd      	mov	sp, r7
340020de:	bd80      	pop	{r7, pc}

340020e0 <LL_AHB4_GRP1_EnableClock>:
{
340020e0:	b480      	push	{r7}
340020e2:	b085      	sub	sp, #20
340020e4:	af00      	add	r7, sp, #0
340020e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340020e8:	4a07      	ldr	r2, [pc, #28]	@ (34002108 <LL_AHB4_GRP1_EnableClock+0x28>)
340020ea:	687b      	ldr	r3, [r7, #4]
340020ec:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
340020f0:	4b05      	ldr	r3, [pc, #20]	@ (34002108 <LL_AHB4_GRP1_EnableClock+0x28>)
340020f2:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
340020f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340020f8:	68fb      	ldr	r3, [r7, #12]
}
340020fa:	bf00      	nop
340020fc:	3714      	adds	r7, #20
340020fe:	46bd      	mov	sp, r7
34002100:	f85d 7b04 	ldr.w	r7, [sp], #4
34002104:	4770      	bx	lr
34002106:	bf00      	nop
34002108:	56028000 	.word	0x56028000

3400210c <LL_APB2_GRP1_EnableClock>:
{
3400210c:	b480      	push	{r7}
3400210e:	b085      	sub	sp, #20
34002110:	af00      	add	r7, sp, #0
34002112:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
34002114:	4a07      	ldr	r2, [pc, #28]	@ (34002134 <LL_APB2_GRP1_EnableClock+0x28>)
34002116:	687b      	ldr	r3, [r7, #4]
34002118:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3400211c:	4b05      	ldr	r3, [pc, #20]	@ (34002134 <LL_APB2_GRP1_EnableClock+0x28>)
3400211e:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34002122:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002124:	68fb      	ldr	r3, [r7, #12]
}
34002126:	bf00      	nop
34002128:	3714      	adds	r7, #20
3400212a:	46bd      	mov	sp, r7
3400212c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002130:	4770      	bx	lr
34002132:	bf00      	nop
34002134:	56028000 	.word	0x56028000

34002138 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34002138:	b580      	push	{r7, lr}
3400213a:	b088      	sub	sp, #32
3400213c:	af00      	add	r7, sp, #0
3400213e:	4603      	mov	r3, r0
34002140:	71fb      	strb	r3, [r7, #7]
  SMPS_GPIO_CLK_ENABLE();
34002142:	2002      	movs	r0, #2
34002144:	f7ff ffcc 	bl	340020e0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34002148:	f107 030c 	add.w	r3, r7, #12
3400214c:	2200      	movs	r2, #0
3400214e:	601a      	str	r2, [r3, #0]
34002150:	605a      	str	r2, [r3, #4]
34002152:	609a      	str	r2, [r3, #8]
34002154:	60da      	str	r2, [r3, #12]
34002156:	611a      	str	r2, [r3, #16]
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
34002158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3400215c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400215e:	2301      	movs	r3, #1
34002160:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
34002162:	2300      	movs	r3, #0
34002164:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34002166:	2303      	movs	r3, #3
34002168:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
3400216a:	f107 030c 	add.w	r3, r7, #12
3400216e:	4619      	mov	r1, r3
34002170:	4806      	ldr	r0, [pc, #24]	@ (3400218c <BSP_SMPS_Init+0x54>)
34002172:	f005 fde7 	bl	34007d44 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
34002176:	79fb      	ldrb	r3, [r7, #7]
34002178:	461a      	mov	r2, r3
3400217a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3400217e:	4803      	ldr	r0, [pc, #12]	@ (3400218c <BSP_SMPS_Init+0x54>)
34002180:	f006 f940 	bl	34008404 <HAL_GPIO_WritePin>
}
34002184:	bf00      	nop
34002186:	3720      	adds	r7, #32
34002188:	46bd      	mov	sp, r7
3400218a:	bd80      	pop	{r7, pc}
3400218c:	56020400 	.word	0x56020400

34002190 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
34002190:	b580      	push	{r7, lr}
34002192:	b084      	sub	sp, #16
34002194:	af00      	add	r7, sp, #0
34002196:	4603      	mov	r3, r0
34002198:	6039      	str	r1, [r7, #0]
3400219a:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
3400219c:	2300      	movs	r3, #0
3400219e:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
340021a0:	683b      	ldr	r3, [r7, #0]
340021a2:	2b00      	cmp	r3, #0
340021a4:	d103      	bne.n	340021ae <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
340021a6:	f06f 0301 	mvn.w	r3, #1
340021aa:	60fb      	str	r3, [r7, #12]
340021ac:	e029      	b.n	34002202 <BSP_COM_Init+0x72>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
340021ae:	79fa      	ldrb	r2, [r7, #7]
340021b0:	79fb      	ldrb	r3, [r7, #7]
340021b2:	4916      	ldr	r1, [pc, #88]	@ (3400220c <BSP_COM_Init+0x7c>)
340021b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
340021b8:	4915      	ldr	r1, [pc, #84]	@ (34002210 <BSP_COM_Init+0x80>)
340021ba:	2094      	movs	r0, #148	@ 0x94
340021bc:	fb00 f303 	mul.w	r3, r0, r3
340021c0:	440b      	add	r3, r1
340021c2:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
340021c4:	79fb      	ldrb	r3, [r7, #7]
340021c6:	2294      	movs	r2, #148	@ 0x94
340021c8:	fb02 f303 	mul.w	r3, r2, r3
340021cc:	4a10      	ldr	r2, [pc, #64]	@ (34002210 <BSP_COM_Init+0x80>)
340021ce:	4413      	add	r3, r2
340021d0:	4618      	mov	r0, r3
340021d2:	f000 f853 	bl	3400227c <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (status == BSP_ERROR_NONE)
340021d6:	68fb      	ldr	r3, [r7, #12]
340021d8:	2b00      	cmp	r3, #0
340021da:	d112      	bne.n	34002202 <BSP_COM_Init+0x72>
    {
      if (COM == COM1)
340021dc:	79fb      	ldrb	r3, [r7, #7]
340021de:	2b00      	cmp	r3, #0
340021e0:	d10f      	bne.n	34002202 <BSP_COM_Init+0x72>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
340021e2:	79fb      	ldrb	r3, [r7, #7]
340021e4:	2294      	movs	r2, #148	@ 0x94
340021e6:	fb02 f303 	mul.w	r3, r2, r3
340021ea:	4a09      	ldr	r2, [pc, #36]	@ (34002210 <BSP_COM_Init+0x80>)
340021ec:	4413      	add	r3, r2
340021ee:	6839      	ldr	r1, [r7, #0]
340021f0:	4618      	mov	r0, r3
340021f2:	f000 f80f 	bl	34002214 <MX_USART1_Init>
340021f6:	4603      	mov	r3, r0
340021f8:	2b00      	cmp	r3, #0
340021fa:	d002      	beq.n	34002202 <BSP_COM_Init+0x72>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
340021fc:	f06f 0303 	mvn.w	r3, #3
34002200:	60fb      	str	r3, [r7, #12]
//        }
      }
    }
  }

  return status;
34002202:	68fb      	ldr	r3, [r7, #12]
}
34002204:	4618      	mov	r0, r3
34002206:	3710      	adds	r7, #16
34002208:	46bd      	mov	sp, r7
3400220a:	bd80      	pop	{r7, pc}
3400220c:	3401e74c 	.word	0x3401e74c
34002210:	3401e950 	.word	0x3401e950

34002214 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
34002214:	b580      	push	{r7, lr}
34002216:	b082      	sub	sp, #8
34002218:	af00      	add	r7, sp, #0
3400221a:	6078      	str	r0, [r7, #4]
3400221c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
3400221e:	4b16      	ldr	r3, [pc, #88]	@ (34002278 <MX_USART1_Init+0x64>)
34002220:	681a      	ldr	r2, [r3, #0]
34002222:	687b      	ldr	r3, [r7, #4]
34002224:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34002226:	683b      	ldr	r3, [r7, #0]
34002228:	681a      	ldr	r2, [r3, #0]
3400222a:	687b      	ldr	r3, [r7, #4]
3400222c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
3400222e:	687b      	ldr	r3, [r7, #4]
34002230:	220c      	movs	r2, #12
34002232:	615a      	str	r2, [r3, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34002234:	683b      	ldr	r3, [r7, #0]
34002236:	895b      	ldrh	r3, [r3, #10]
34002238:	461a      	mov	r2, r3
3400223a:	687b      	ldr	r3, [r7, #4]
3400223c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
3400223e:	683b      	ldr	r3, [r7, #0]
34002240:	685a      	ldr	r2, [r3, #4]
34002242:	687b      	ldr	r3, [r7, #4]
34002244:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34002246:	683b      	ldr	r3, [r7, #0]
34002248:	891b      	ldrh	r3, [r3, #8]
3400224a:	461a      	mov	r2, r3
3400224c:	687b      	ldr	r3, [r7, #4]
3400224e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
34002250:	683b      	ldr	r3, [r7, #0]
34002252:	899b      	ldrh	r3, [r3, #12]
34002254:	461a      	mov	r2, r3
34002256:	687b      	ldr	r3, [r7, #4]
34002258:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
3400225a:	687b      	ldr	r3, [r7, #4]
3400225c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34002260:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
34002262:	687b      	ldr	r3, [r7, #4]
34002264:	2200      	movs	r2, #0
34002266:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
34002268:	6878      	ldr	r0, [r7, #4]
3400226a:	f015 fc8b 	bl	34017b84 <HAL_UART_Init>
3400226e:	4603      	mov	r3, r0
}
34002270:	4618      	mov	r0, r3
34002272:	3708      	adds	r7, #8
34002274:	46bd      	mov	sp, r7
34002276:	bd80      	pop	{r7, pc}
34002278:	3401e74c 	.word	0x3401e74c

3400227c <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
3400227c:	b580      	push	{r7, lr}
3400227e:	b090      	sub	sp, #64	@ 0x40
34002280:	af00      	add	r7, sp, #0
34002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
34002284:	f107 0320 	add.w	r3, r7, #32
34002288:	2200      	movs	r2, #0
3400228a:	601a      	str	r2, [r3, #0]
3400228c:	605a      	str	r2, [r3, #4]
3400228e:	4b34      	ldr	r3, [pc, #208]	@ (34002360 <UART_MspInit+0xe4>)
34002290:	623b      	str	r3, [r7, #32]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
34002292:	f107 0318 	add.w	r3, r7, #24
34002296:	2200      	movs	r2, #0
34002298:	601a      	str	r2, [r3, #0]
3400229a:	605a      	str	r2, [r3, #4]
3400229c:	4b31      	ldr	r3, [pc, #196]	@ (34002364 <UART_MspInit+0xe8>)
3400229e:	61bb      	str	r3, [r7, #24]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN};
340022a0:	2300      	movs	r3, #0
340022a2:	617b      	str	r3, [r7, #20]
340022a4:	2320      	movs	r3, #32
340022a6:	82bb      	strh	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN};
340022a8:	2300      	movs	r3, #0
340022aa:	613b      	str	r3, [r7, #16]
340022ac:	2340      	movs	r3, #64	@ 0x40
340022ae:	823b      	strh	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
340022b0:	2307      	movs	r3, #7
340022b2:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
340022b4:	2307      	movs	r3, #7
340022b6:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
340022b8:	687b      	ldr	r3, [r7, #4]
340022ba:	681b      	ldr	r3, [r3, #0]
340022bc:	4a2a      	ldr	r2, [pc, #168]	@ (34002368 <UART_MspInit+0xec>)
340022be:	4293      	cmp	r3, r2
340022c0:	d14a      	bne.n	34002358 <UART_MspInit+0xdc>
  {
    COM = COM1;
340022c2:	2300      	movs	r3, #0
340022c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
340022c8:	2010      	movs	r0, #16
340022ca:	f7ff ff09 	bl	340020e0 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
340022ce:	2008      	movs	r0, #8
340022d0:	f7ff ff06 	bl	340020e0 <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
340022d4:	2010      	movs	r0, #16
340022d6:	f7ff ff19 	bl	3400210c <LL_APB2_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
340022da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
340022de:	005b      	lsls	r3, r3, #1
340022e0:	3340      	adds	r3, #64	@ 0x40
340022e2:	443b      	add	r3, r7
340022e4:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
340022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
340022ea:	2302      	movs	r3, #2
340022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
340022ee:	2302      	movs	r3, #2
340022f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
340022f2:	2301      	movs	r3, #1
340022f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
340022f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
340022fa:	3340      	adds	r3, #64	@ 0x40
340022fc:	443b      	add	r3, r7
340022fe:	f813 3c34 	ldrb.w	r3, [r3, #-52]
34002302:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34002304:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002308:	009b      	lsls	r3, r3, #2
3400230a:	3340      	adds	r3, #64	@ 0x40
3400230c:	443b      	add	r3, r7
3400230e:	f853 3c20 	ldr.w	r3, [r3, #-32]
34002312:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002316:	4611      	mov	r1, r2
34002318:	4618      	mov	r0, r3
3400231a:	f005 fd13 	bl	34007d44 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
3400231e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002322:	005b      	lsls	r3, r3, #1
34002324:	3340      	adds	r3, #64	@ 0x40
34002326:	443b      	add	r3, r7
34002328:	f833 3c30 	ldrh.w	r3, [r3, #-48]
3400232c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
3400232e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002332:	3340      	adds	r3, #64	@ 0x40
34002334:	443b      	add	r3, r7
34002336:	f813 3c38 	ldrb.w	r3, [r3, #-56]
3400233a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
3400233c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002340:	009b      	lsls	r3, r3, #2
34002342:	3340      	adds	r3, #64	@ 0x40
34002344:	443b      	add	r3, r7
34002346:	f853 3c28 	ldr.w	r3, [r3, #-40]
3400234a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
3400234e:	4611      	mov	r1, r2
34002350:	4618      	mov	r0, r3
34002352:	f005 fcf7 	bl	34007d44 <HAL_GPIO_Init>
34002356:	e000      	b.n	3400235a <UART_MspInit+0xde>
      return;
34002358:	bf00      	nop
}
3400235a:	3740      	adds	r7, #64	@ 0x40
3400235c:	46bd      	mov	sp, r7
3400235e:	bd80      	pop	{r7, pc}
34002360:	56021000 	.word	0x56021000
34002364:	56020c00 	.word	0x56020c00
34002368:	52001000 	.word	0x52001000

3400236c <LL_AHB4_GRP1_EnableClock>:
{
3400236c:	b480      	push	{r7}
3400236e:	b085      	sub	sp, #20
34002370:	af00      	add	r7, sp, #0
34002372:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002374:	4a07      	ldr	r2, [pc, #28]	@ (34002394 <LL_AHB4_GRP1_EnableClock+0x28>)
34002376:	687b      	ldr	r3, [r7, #4]
34002378:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400237c:	4b05      	ldr	r3, [pc, #20]	@ (34002394 <LL_AHB4_GRP1_EnableClock+0x28>)
3400237e:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002382:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002384:	68fb      	ldr	r3, [r7, #12]
}
34002386:	bf00      	nop
34002388:	3714      	adds	r7, #20
3400238a:	46bd      	mov	sp, r7
3400238c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002390:	4770      	bx	lr
34002392:	bf00      	nop
34002394:	56028000 	.word	0x56028000

34002398 <LL_AHB5_GRP1_EnableClock>:
{
34002398:	b480      	push	{r7}
3400239a:	b085      	sub	sp, #20
3400239c:	af00      	add	r7, sp, #0
3400239e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340023a0:	4a07      	ldr	r2, [pc, #28]	@ (340023c0 <LL_AHB5_GRP1_EnableClock+0x28>)
340023a2:	687b      	ldr	r3, [r7, #4]
340023a4:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
340023a8:	4b05      	ldr	r3, [pc, #20]	@ (340023c0 <LL_AHB5_GRP1_EnableClock+0x28>)
340023aa:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
340023ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340023b0:	68fb      	ldr	r3, [r7, #12]
}
340023b2:	bf00      	nop
340023b4:	3714      	adds	r7, #20
340023b6:	46bd      	mov	sp, r7
340023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340023bc:	4770      	bx	lr
340023be:	bf00      	nop
340023c0:	56028000 	.word	0x56028000

340023c4 <LL_AHB5_GRP1_ForceReset>:
{
340023c4:	b480      	push	{r7}
340023c6:	b083      	sub	sp, #12
340023c8:	af00      	add	r7, sp, #0
340023ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340023cc:	4a04      	ldr	r2, [pc, #16]	@ (340023e0 <LL_AHB5_GRP1_ForceReset+0x1c>)
340023ce:	687b      	ldr	r3, [r7, #4]
340023d0:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
340023d4:	bf00      	nop
340023d6:	370c      	adds	r7, #12
340023d8:	46bd      	mov	sp, r7
340023da:	f85d 7b04 	ldr.w	r7, [sp], #4
340023de:	4770      	bx	lr
340023e0:	56028000 	.word	0x56028000

340023e4 <LL_AHB5_GRP1_ReleaseReset>:
{
340023e4:	b480      	push	{r7}
340023e6:	b083      	sub	sp, #12
340023e8:	af00      	add	r7, sp, #0
340023ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
340023ec:	4b06      	ldr	r3, [pc, #24]	@ (34002408 <LL_AHB5_GRP1_ReleaseReset+0x24>)
340023ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340023f2:	461a      	mov	r2, r3
340023f4:	687b      	ldr	r3, [r7, #4]
340023f6:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
340023fa:	bf00      	nop
340023fc:	370c      	adds	r7, #12
340023fe:	46bd      	mov	sp, r7
34002400:	f85d 7b04 	ldr.w	r7, [sp], #4
34002404:	4770      	bx	lr
34002406:	bf00      	nop
34002408:	56028000 	.word	0x56028000

3400240c <BSP_XSPI_NOR_Init>:
  * @param  Instance   XSPI Instance
  * @param  Init       XSPI Init structure
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_Init(uint32_t Instance, BSP_XSPI_NOR_Init_t *Init)
{
3400240c:	b590      	push	{r4, r7, lr}
3400240e:	b095      	sub	sp, #84	@ 0x54
34002410:	af00      	add	r7, sp, #0
34002412:	6078      	str	r0, [r7, #4]
34002414:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_XSPI_NOR_Info_t pInfo;
  MX_XSPI_InitTypeDef xspi_init;

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002416:	687b      	ldr	r3, [r7, #4]
34002418:	2b00      	cmp	r3, #0
3400241a:	d003      	beq.n	34002424 <BSP_XSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
3400241c:	f06f 0301 	mvn.w	r3, #1
34002420:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002422:	e080      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002424:	4947      	ldr	r1, [pc, #284]	@ (34002544 <BSP_XSPI_NOR_Init+0x138>)
34002426:	687a      	ldr	r2, [r7, #4]
34002428:	4613      	mov	r3, r2
3400242a:	005b      	lsls	r3, r3, #1
3400242c:	4413      	add	r3, r2
3400242e:	440b      	add	r3, r1
34002430:	781b      	ldrb	r3, [r3, #0]
34002432:	2b00      	cmp	r3, #0
34002434:	d175      	bne.n	34002522 <BSP_XSPI_NOR_Init+0x116>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp XSPI initialization */
      XSPI_NOR_MspInit(&hxspi_nor[Instance]);
34002436:	687b      	ldr	r3, [r7, #4]
34002438:	2264      	movs	r2, #100	@ 0x64
3400243a:	fb02 f303 	mul.w	r3, r2, r3
3400243e:	4a42      	ldr	r2, [pc, #264]	@ (34002548 <BSP_XSPI_NOR_Init+0x13c>)
34002440:	4413      	add	r3, r2
34002442:	4618      	mov	r0, r3
34002444:	f000 f9b6 	bl	340027b4 <XSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34002448:	f107 031c 	add.w	r3, r7, #28
3400244c:	4618      	mov	r0, r3
3400244e:	f7ff f9a5 	bl	3400179c <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      xspi_init.ClockPrescaler = 3;
34002452:	2303      	movs	r3, #3
34002454:	613b      	str	r3, [r7, #16]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34002456:	69fb      	ldr	r3, [r7, #28]
34002458:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400245a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3400245c:	fa93 f3a3 	rbit	r3, r3
34002460:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
34002462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34002464:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
34002466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002468:	2b00      	cmp	r3, #0
3400246a:	d101      	bne.n	34002470 <BSP_XSPI_NOR_Init+0x64>
  {
    return 32U;
3400246c:	2320      	movs	r3, #32
3400246e:	e003      	b.n	34002478 <BSP_XSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
34002470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002472:	fab3 f383 	clz	r3, r3
34002476:	b2db      	uxtb	r3, r3
34002478:	60fb      	str	r3, [r7, #12]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400247a:	2300      	movs	r3, #0
3400247c:	617b      	str	r3, [r7, #20]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
3400247e:	683b      	ldr	r3, [r7, #0]
34002480:	785b      	ldrb	r3, [r3, #1]
34002482:	61bb      	str	r3, [r7, #24]

      /* STM32 XSPI interface initialization */
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34002484:	687b      	ldr	r3, [r7, #4]
34002486:	2264      	movs	r2, #100	@ 0x64
34002488:	fb02 f303 	mul.w	r3, r2, r3
3400248c:	4a2e      	ldr	r2, [pc, #184]	@ (34002548 <BSP_XSPI_NOR_Init+0x13c>)
3400248e:	4413      	add	r3, r2
34002490:	f107 020c 	add.w	r2, r7, #12
34002494:	4611      	mov	r1, r2
34002496:	4618      	mov	r0, r3
34002498:	f000 f858 	bl	3400254c <MX_XSPI_NOR_Init>
3400249c:	4603      	mov	r3, r0
3400249e:	2b00      	cmp	r3, #0
340024a0:	d003      	beq.n	340024aa <BSP_XSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
340024a2:	f06f 0303 	mvn.w	r3, #3
340024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
340024a8:	e03d      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* XSPI memory reset */
      else if (XSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
340024aa:	6878      	ldr	r0, [r7, #4]
340024ac:	f000 fa50 	bl	34002950 <XSPI_NOR_ResetMemory>
340024b0:	4603      	mov	r3, r0
340024b2:	2b00      	cmp	r3, #0
340024b4:	d003      	beq.n	340024be <BSP_XSPI_NOR_Init+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
340024b6:	f06f 0304 	mvn.w	r3, #4
340024ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
340024bc:	e033      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340024be:	687b      	ldr	r3, [r7, #4]
340024c0:	2264      	movs	r2, #100	@ 0x64
340024c2:	fb02 f303 	mul.w	r3, r2, r3
340024c6:	4a20      	ldr	r2, [pc, #128]	@ (34002548 <BSP_XSPI_NOR_Init+0x13c>)
340024c8:	1898      	adds	r0, r3, r2
340024ca:	491e      	ldr	r1, [pc, #120]	@ (34002544 <BSP_XSPI_NOR_Init+0x138>)
340024cc:	687a      	ldr	r2, [r7, #4]
340024ce:	4613      	mov	r3, r2
340024d0:	005b      	lsls	r3, r3, #1
340024d2:	4413      	add	r3, r2
340024d4:	440b      	add	r3, r1
340024d6:	3301      	adds	r3, #1
340024d8:	7819      	ldrb	r1, [r3, #0]
340024da:	4c1a      	ldr	r4, [pc, #104]	@ (34002544 <BSP_XSPI_NOR_Init+0x138>)
340024dc:	687a      	ldr	r2, [r7, #4]
340024de:	4613      	mov	r3, r2
340024e0:	005b      	lsls	r3, r3, #1
340024e2:	4413      	add	r3, r2
340024e4:	4423      	add	r3, r4
340024e6:	3302      	adds	r3, #2
340024e8:	781b      	ldrb	r3, [r3, #0]
340024ea:	461a      	mov	r2, r3
340024ec:	f7ff f985 	bl	340017fa <MX25UM51245G_AutoPollingMemReady>
340024f0:	4603      	mov	r3, r0
340024f2:	2b00      	cmp	r3, #0
340024f4:	d003      	beq.n	340024fe <BSP_XSPI_NOR_Init+0xf2>
                                                Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
340024f6:	f06f 0304 	mvn.w	r3, #4
340024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
340024fc:	e013      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Configure the memory */
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
340024fe:	683b      	ldr	r3, [r7, #0]
34002500:	7819      	ldrb	r1, [r3, #0]
34002502:	683b      	ldr	r3, [r7, #0]
34002504:	785b      	ldrb	r3, [r3, #1]
34002506:	461a      	mov	r2, r3
34002508:	6878      	ldr	r0, [r7, #4]
3400250a:	f000 f8c7 	bl	3400269c <BSP_XSPI_NOR_ConfigFlash>
3400250e:	4603      	mov	r3, r0
34002510:	2b00      	cmp	r3, #0
34002512:	d003      	beq.n	3400251c <BSP_XSPI_NOR_Init+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002514:	f06f 0304 	mvn.w	r3, #4
34002518:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400251a:	e004      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
3400251c:	2300      	movs	r3, #0
3400251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002520:	e001      	b.n	34002526 <BSP_XSPI_NOR_Init+0x11a>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002522:	2300      	movs	r3, #0
34002524:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34002526:	687b      	ldr	r3, [r7, #4]
34002528:	2264      	movs	r2, #100	@ 0x64
3400252a:	fb02 f303 	mul.w	r3, r2, r3
3400252e:	4a06      	ldr	r2, [pc, #24]	@ (34002548 <BSP_XSPI_NOR_Init+0x13c>)
34002530:	4413      	add	r3, r2
34002532:	2100      	movs	r1, #0
34002534:	4618      	mov	r0, r3
34002536:	f017 fad9 	bl	34019aec <HAL_XSPI_SetClockPrescaler>
  /* Return BSP status */
  return ret;
3400253a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
3400253c:	4618      	mov	r0, r3
3400253e:	3754      	adds	r7, #84	@ 0x54
34002540:	46bd      	mov	sp, r7
34002542:	bd90      	pop	{r4, r7, pc}
34002544:	3401eadc 	.word	0x3401eadc
34002548:	3401ea78 	.word	0x3401ea78

3400254c <MX_XSPI_NOR_Init>:
  * @param  hxspi          XSPI handle
  * @param  Init           XSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_XSPI_NOR_Init(XSPI_HandleTypeDef *hxspi, MX_XSPI_InitTypeDef *Init)
{
3400254c:	b580      	push	{r7, lr}
3400254e:	b082      	sub	sp, #8
34002550:	af00      	add	r7, sp, #0
34002552:	6078      	str	r0, [r7, #4]
34002554:	6039      	str	r1, [r7, #0]
  /* XSPI initialization */
  hxspi->Instance = XSPI2;
34002556:	687b      	ldr	r3, [r7, #4]
34002558:	4a1e      	ldr	r2, [pc, #120]	@ (340025d4 <MX_XSPI_NOR_Init+0x88>)
3400255a:	601a      	str	r2, [r3, #0]

  hxspi->Init.FifoThresholdByte       = 4;
3400255c:	687b      	ldr	r3, [r7, #4]
3400255e:	2204      	movs	r2, #4
34002560:	605a      	str	r2, [r3, #4]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002562:	687b      	ldr	r3, [r7, #4]
34002564:	2200      	movs	r2, #0
34002566:	609a      	str	r2, [r3, #8]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002568:	683b      	ldr	r3, [r7, #0]
3400256a:	681a      	ldr	r2, [r3, #0]
3400256c:	687b      	ldr	r3, [r7, #4]
3400256e:	611a      	str	r2, [r3, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34002570:	687b      	ldr	r3, [r7, #4]
34002572:	2202      	movs	r2, #2
34002574:	615a      	str	r2, [r3, #20]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34002576:	687b      	ldr	r3, [r7, #4]
34002578:	2200      	movs	r2, #0
3400257a:	619a      	str	r2, [r3, #24]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
3400257c:	687b      	ldr	r3, [r7, #4]
3400257e:	2200      	movs	r2, #0
34002580:	61da      	str	r2, [r3, #28]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34002582:	687b      	ldr	r3, [r7, #4]
34002584:	2200      	movs	r2, #0
34002586:	621a      	str	r2, [r3, #32]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34002588:	683b      	ldr	r3, [r7, #0]
3400258a:	685a      	ldr	r2, [r3, #4]
3400258c:	687b      	ldr	r3, [r7, #4]
3400258e:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002590:	683b      	ldr	r3, [r7, #0]
34002592:	689a      	ldr	r2, [r3, #8]
34002594:	687b      	ldr	r3, [r7, #4]
34002596:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary      = 0;
34002598:	687b      	ldr	r3, [r7, #4]
3400259a:	2200      	movs	r2, #0
3400259c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (OCTOSPI_DCR1_DLYBYP)
  hxspi->Init.DelayBlockBypass           = HAL_XSPI_DELAY_BLOCK_BYPASS;
#endif /* OCTOSPI_DCR1_DLYBYP */

  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400259e:	683b      	ldr	r3, [r7, #0]
340025a0:	68db      	ldr	r3, [r3, #12]
340025a2:	2b01      	cmp	r3, #1
340025a4:	d108      	bne.n	340025b8 <MX_XSPI_NOR_Init+0x6c>
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
340025a6:	687b      	ldr	r3, [r7, #4]
340025a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340025ac:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
340025ae:	687b      	ldr	r3, [r7, #4]
340025b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
340025b4:	62da      	str	r2, [r3, #44]	@ 0x2c
340025b6:	e005      	b.n	340025c4 <MX_XSPI_NOR_Init+0x78>
  }
  else
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
340025b8:	687b      	ldr	r3, [r7, #4]
340025ba:	2200      	movs	r2, #0
340025bc:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
340025be:	687b      	ldr	r3, [r7, #4]
340025c0:	2200      	movs	r2, #0
340025c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hxspi);
340025c4:	6878      	ldr	r0, [r7, #4]
340025c6:	f016 fb05 	bl	34018bd4 <HAL_XSPI_Init>
340025ca:	4603      	mov	r3, r0
}
340025cc:	4618      	mov	r0, r3
340025ce:	3708      	adds	r7, #8
340025d0:	46bd      	mov	sp, r7
340025d2:	bd80      	pop	{r7, pc}
340025d4:	5802a000 	.word	0x5802a000

340025d8 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the XSPI in memory-mapped mode
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
340025d8:	b580      	push	{r7, lr}
340025da:	b084      	sub	sp, #16
340025dc:	af00      	add	r7, sp, #0
340025de:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
340025e0:	2300      	movs	r3, #0
340025e2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340025e4:	687b      	ldr	r3, [r7, #4]
340025e6:	2b00      	cmp	r3, #0
340025e8:	d003      	beq.n	340025f2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340025ea:	f06f 0301 	mvn.w	r3, #1
340025ee:	60fb      	str	r3, [r7, #12]
340025f0:	e04b      	b.n	3400268a <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
340025f2:	4928      	ldr	r1, [pc, #160]	@ (34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
340025f4:	687a      	ldr	r2, [r7, #4]
340025f6:	4613      	mov	r3, r2
340025f8:	005b      	lsls	r3, r3, #1
340025fa:	4413      	add	r3, r2
340025fc:	440b      	add	r3, r1
340025fe:	3302      	adds	r3, #2
34002600:	781b      	ldrb	r3, [r3, #0]
34002602:	2b00      	cmp	r3, #0
34002604:	d121      	bne.n	3400264a <BSP_XSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002606:	687b      	ldr	r3, [r7, #4]
34002608:	2264      	movs	r2, #100	@ 0x64
3400260a:	fb02 f303 	mul.w	r3, r2, r3
3400260e:	4a22      	ldr	r2, [pc, #136]	@ (34002698 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002610:	1898      	adds	r0, r3, r2
34002612:	4920      	ldr	r1, [pc, #128]	@ (34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002614:	687a      	ldr	r2, [r7, #4]
34002616:	4613      	mov	r3, r2
34002618:	005b      	lsls	r3, r3, #1
3400261a:	4413      	add	r3, r2
3400261c:	440b      	add	r3, r1
3400261e:	3301      	adds	r3, #1
34002620:	781b      	ldrb	r3, [r3, #0]
34002622:	2201      	movs	r2, #1
34002624:	4619      	mov	r1, r3
34002626:	f7ff f998 	bl	3400195a <MX25UM51245G_EnableSTRMemoryMappedMode>
3400262a:	4603      	mov	r3, r0
3400262c:	2b00      	cmp	r3, #0
3400262e:	d003      	beq.n	34002638 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002630:	f06f 0304 	mvn.w	r3, #4
34002634:	60fb      	str	r3, [r7, #12]
34002636:	e028      	b.n	3400268a <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002638:	4916      	ldr	r1, [pc, #88]	@ (34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
3400263a:	687a      	ldr	r2, [r7, #4]
3400263c:	4613      	mov	r3, r2
3400263e:	005b      	lsls	r3, r3, #1
34002640:	4413      	add	r3, r2
34002642:	440b      	add	r3, r1
34002644:	2202      	movs	r2, #2
34002646:	701a      	strb	r2, [r3, #0]
34002648:	e01f      	b.n	3400268a <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
3400264a:	687b      	ldr	r3, [r7, #4]
3400264c:	2264      	movs	r2, #100	@ 0x64
3400264e:	fb02 f303 	mul.w	r3, r2, r3
34002652:	4a11      	ldr	r2, [pc, #68]	@ (34002698 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002654:	1898      	adds	r0, r3, r2
34002656:	490f      	ldr	r1, [pc, #60]	@ (34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002658:	687a      	ldr	r2, [r7, #4]
3400265a:	4613      	mov	r3, r2
3400265c:	005b      	lsls	r3, r3, #1
3400265e:	4413      	add	r3, r2
34002660:	440b      	add	r3, r1
34002662:	3301      	adds	r3, #1
34002664:	781b      	ldrb	r3, [r3, #0]
34002666:	4619      	mov	r1, r3
34002668:	f7ff fa21 	bl	34001aae <MX25UM51245G_EnableDTRMemoryMappedMode>
3400266c:	4603      	mov	r3, r0
3400266e:	2b00      	cmp	r3, #0
34002670:	d003      	beq.n	3400267a <BSP_XSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Xspi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002672:	f06f 0304 	mvn.w	r3, #4
34002676:	60fb      	str	r3, [r7, #12]
34002678:	e007      	b.n	3400268a <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400267a:	4906      	ldr	r1, [pc, #24]	@ (34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
3400267c:	687a      	ldr	r2, [r7, #4]
3400267e:	4613      	mov	r3, r2
34002680:	005b      	lsls	r3, r3, #1
34002682:	4413      	add	r3, r2
34002684:	440b      	add	r3, r1
34002686:	2202      	movs	r2, #2
34002688:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
3400268a:	68fb      	ldr	r3, [r7, #12]
}
3400268c:	4618      	mov	r0, r3
3400268e:	3710      	adds	r7, #16
34002690:	46bd      	mov	sp, r7
34002692:	bd80      	pop	{r7, pc}
34002694:	3401eadc 	.word	0x3401eadc
34002698:	3401ea78 	.word	0x3401ea78

3400269c <BSP_XSPI_NOR_ConfigFlash>:
  * @param  Mode      XSPI mode
  * @param  Rate      XSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_ConfigFlash(uint32_t Instance, BSP_XSPI_NOR_Interface_t Mode, BSP_XSPI_NOR_Transfer_t Rate)
{
3400269c:	b580      	push	{r7, lr}
3400269e:	b084      	sub	sp, #16
340026a0:	af00      	add	r7, sp, #0
340026a2:	6078      	str	r0, [r7, #4]
340026a4:	460b      	mov	r3, r1
340026a6:	70fb      	strb	r3, [r7, #3]
340026a8:	4613      	mov	r3, r2
340026aa:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
340026ac:	2300      	movs	r3, #0
340026ae:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340026b0:	687b      	ldr	r3, [r7, #4]
340026b2:	2b00      	cmp	r3, #0
340026b4:	d003      	beq.n	340026be <BSP_XSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340026b6:	f06f 0301 	mvn.w	r3, #1
340026ba:	60fb      	str	r3, [r7, #12]
340026bc:	e072      	b.n	340027a4 <BSP_XSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
340026be:	493c      	ldr	r1, [pc, #240]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
340026c0:	687a      	ldr	r2, [r7, #4]
340026c2:	4613      	mov	r3, r2
340026c4:	005b      	lsls	r3, r3, #1
340026c6:	4413      	add	r3, r2
340026c8:	440b      	add	r3, r1
340026ca:	781b      	ldrb	r3, [r3, #0]
340026cc:	2b02      	cmp	r3, #2
340026ce:	d103      	bne.n	340026d8 <BSP_XSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
340026d0:	f06f 0319 	mvn.w	r3, #25
340026d4:	60fb      	str	r3, [r7, #12]
340026d6:	e065      	b.n	340027a4 <BSP_XSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
340026d8:	4935      	ldr	r1, [pc, #212]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
340026da:	687a      	ldr	r2, [r7, #4]
340026dc:	4613      	mov	r3, r2
340026de:	005b      	lsls	r3, r3, #1
340026e0:	4413      	add	r3, r2
340026e2:	440b      	add	r3, r1
340026e4:	3301      	adds	r3, #1
340026e6:	781b      	ldrb	r3, [r3, #0]
340026e8:	2b01      	cmp	r3, #1
340026ea:	d12b      	bne.n	34002744 <BSP_XSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_XSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
340026ec:	78fb      	ldrb	r3, [r7, #3]
340026ee:	2b01      	cmp	r3, #1
340026f0:	d10a      	bne.n	34002708 <BSP_XSPI_NOR_ConfigFlash+0x6c>
340026f2:	492f      	ldr	r1, [pc, #188]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
340026f4:	687a      	ldr	r2, [r7, #4]
340026f6:	4613      	mov	r3, r2
340026f8:	005b      	lsls	r3, r3, #1
340026fa:	4413      	add	r3, r2
340026fc:	440b      	add	r3, r1
340026fe:	3302      	adds	r3, #2
34002700:	781b      	ldrb	r3, [r3, #0]
34002702:	78ba      	ldrb	r2, [r7, #2]
34002704:	429a      	cmp	r2, r3
34002706:	d02d      	beq.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002708:	6878      	ldr	r0, [r7, #4]
3400270a:	f000 fb7d 	bl	34002e08 <XSPI_NOR_ExitOPIMode>
3400270e:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34002710:	68fb      	ldr	r3, [r7, #12]
34002712:	2b00      	cmp	r3, #0
34002714:	d126      	bne.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0xc8>
34002716:	78fb      	ldrb	r3, [r7, #3]
34002718:	2b01      	cmp	r3, #1
3400271a:	d123      	bne.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0xc8>
            {

              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400271c:	4924      	ldr	r1, [pc, #144]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
3400271e:	687a      	ldr	r2, [r7, #4]
34002720:	4613      	mov	r3, r2
34002722:	005b      	lsls	r3, r3, #1
34002724:	4413      	add	r3, r2
34002726:	440b      	add	r3, r1
34002728:	3302      	adds	r3, #2
3400272a:	781b      	ldrb	r3, [r3, #0]
3400272c:	2b00      	cmp	r3, #0
3400272e:	d104      	bne.n	3400273a <BSP_XSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = XSPI_NOR_EnterDOPIMode(Instance);
34002730:	6878      	ldr	r0, [r7, #4]
34002732:	f000 f9ad 	bl	34002a90 <XSPI_NOR_EnterDOPIMode>
34002736:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = XSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
34002738:	e014      	b.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0xc8>
                ret = XSPI_NOR_EnterSOPIMode(Instance);
3400273a:	6878      	ldr	r0, [r7, #4]
3400273c:	f000 fa98 	bl	34002c70 <XSPI_NOR_EnterSOPIMode>
34002740:	60f8      	str	r0, [r7, #12]
          break;
34002742:	e00f      	b.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0xc8>

        case BSP_XSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34002744:	78fb      	ldrb	r3, [r7, #3]
34002746:	2b01      	cmp	r3, #1
34002748:	d10e      	bne.n	34002768 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
3400274a:	78bb      	ldrb	r3, [r7, #2]
3400274c:	2b00      	cmp	r3, #0
3400274e:	d104      	bne.n	3400275a <BSP_XSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34002750:	6878      	ldr	r0, [r7, #4]
34002752:	f000 fa8d 	bl	34002c70 <XSPI_NOR_EnterSOPIMode>
34002756:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = XSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
34002758:	e006      	b.n	34002768 <BSP_XSPI_NOR_ConfigFlash+0xcc>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
3400275a:	6878      	ldr	r0, [r7, #4]
3400275c:	f000 f998 	bl	34002a90 <XSPI_NOR_EnterDOPIMode>
34002760:	60f8      	str	r0, [r7, #12]
          break;
34002762:	e001      	b.n	34002768 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          break;
34002764:	bf00      	nop
34002766:	e000      	b.n	3400276a <BSP_XSPI_NOR_ConfigFlash+0xce>
          break;
34002768:	bf00      	nop
      }

      /* Update XSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
3400276a:	68fb      	ldr	r3, [r7, #12]
3400276c:	2b00      	cmp	r3, #0
3400276e:	d119      	bne.n	340027a4 <BSP_XSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34002770:	490f      	ldr	r1, [pc, #60]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002772:	687a      	ldr	r2, [r7, #4]
34002774:	4613      	mov	r3, r2
34002776:	005b      	lsls	r3, r3, #1
34002778:	4413      	add	r3, r2
3400277a:	440b      	add	r3, r1
3400277c:	2201      	movs	r2, #1
3400277e:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34002780:	490b      	ldr	r1, [pc, #44]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002782:	687a      	ldr	r2, [r7, #4]
34002784:	4613      	mov	r3, r2
34002786:	005b      	lsls	r3, r3, #1
34002788:	4413      	add	r3, r2
3400278a:	440b      	add	r3, r1
3400278c:	3301      	adds	r3, #1
3400278e:	78fa      	ldrb	r2, [r7, #3]
34002790:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34002792:	4907      	ldr	r1, [pc, #28]	@ (340027b0 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002794:	687a      	ldr	r2, [r7, #4]
34002796:	4613      	mov	r3, r2
34002798:	005b      	lsls	r3, r3, #1
3400279a:	4413      	add	r3, r2
3400279c:	440b      	add	r3, r1
3400279e:	3302      	adds	r3, #2
340027a0:	78ba      	ldrb	r2, [r7, #2]
340027a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
340027a4:	68fb      	ldr	r3, [r7, #12]
}
340027a6:	4618      	mov	r0, r3
340027a8:	3710      	adds	r7, #16
340027aa:	46bd      	mov	sp, r7
340027ac:	bd80      	pop	{r7, pc}
340027ae:	bf00      	nop
340027b0:	3401eadc 	.word	0x3401eadc

340027b4 <XSPI_NOR_MspInit>:
  * @brief  Initializes the XSPI MSP.
  * @param  hxspi XSPI handle
  * @retval None
  */
static void XSPI_NOR_MspInit(XSPI_HandleTypeDef *hxspi)
{
340027b4:	b580      	push	{r7, lr}
340027b6:	b088      	sub	sp, #32
340027b8:	af00      	add	r7, sp, #0
340027ba:	6078      	str	r0, [r7, #4]

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

  /* Enable the XSPI memory interface clock */
  XSPI_CLK_ENABLE();
340027bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
340027c0:	f7ff fdea 	bl	34002398 <LL_AHB5_GRP1_EnableClock>

  /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
340027c4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
340027c8:	f7ff fdd0 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
340027cc:	f005 feb6 	bl	3400853c <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
340027d0:	2101      	movs	r1, #1
340027d2:	2002      	movs	r0, #2
340027d4:	f005 fe42 	bl	3400845c <HAL_PWREx_ConfigVddIORange>

  /* Reset the XSPI memory interface */
  XSPI_FORCE_RESET();
340027d8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
340027dc:	f7ff fdf2 	bl	340023c4 <LL_AHB5_GRP1_ForceReset>
  XSPI_RELEASE_RESET();
340027e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
340027e4:	f7ff fdfe 	bl	340023e4 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable GPIO clocks */
  XSPI_CLK_GPIO_CLK_ENABLE();
340027e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340027ec:	f7ff fdbe 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_DQS_GPIO_CLK_ENABLE();
340027f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340027f4:	f7ff fdba 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_CS_GPIO_CLK_ENABLE();
340027f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340027fc:	f7ff fdb6 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34002800:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002804:	f7ff fdb2 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34002808:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400280c:	f7ff fdae 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34002810:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002814:	f7ff fdaa 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34002818:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400281c:	f7ff fda6 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34002820:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002824:	f7ff fda2 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34002828:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400282c:	f7ff fd9e 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34002830:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002834:	f7ff fd9a 	bl	3400236c <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002838:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400283c:	f7ff fd96 	bl	3400236c <LL_AHB4_GRP1_EnableClock>

  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34002840:	2302      	movs	r3, #2
34002842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34002844:	2302      	movs	r3, #2
34002846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34002848:	2301      	movs	r3, #1
3400284a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400284c:	2303      	movs	r3, #3
3400284e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34002850:	2309      	movs	r3, #9
34002852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34002854:	f107 030c 	add.w	r3, r7, #12
34002858:	4619      	mov	r1, r3
3400285a:	483c      	ldr	r0, [pc, #240]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
3400285c:	f005 fa72 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34002860:	2340      	movs	r3, #64	@ 0x40
34002862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34002864:	2300      	movs	r3, #0
34002866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34002868:	2309      	movs	r3, #9
3400286a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
3400286c:	f107 030c 	add.w	r3, r7, #12
34002870:	4619      	mov	r1, r3
34002872:	4836      	ldr	r0, [pc, #216]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
34002874:	f005 fa66 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002878:	2304      	movs	r3, #4
3400287a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
3400287c:	2309      	movs	r3, #9
3400287e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002880:	f107 030c 	add.w	r3, r7, #12
34002884:	4619      	mov	r1, r3
34002886:	4831      	ldr	r0, [pc, #196]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
34002888:	f005 fa5c 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
3400288c:	2308      	movs	r3, #8
3400288e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002890:	2309      	movs	r3, #9
34002892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002894:	f107 030c 	add.w	r3, r7, #12
34002898:	4619      	mov	r1, r3
3400289a:	482c      	ldr	r0, [pc, #176]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
3400289c:	f005 fa52 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
340028a0:	2310      	movs	r3, #16
340028a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
340028a4:	2309      	movs	r3, #9
340028a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
340028a8:	f107 030c 	add.w	r3, r7, #12
340028ac:	4619      	mov	r1, r3
340028ae:	4827      	ldr	r0, [pc, #156]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
340028b0:	f005 fa48 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
340028b4:	2320      	movs	r3, #32
340028b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
340028b8:	2309      	movs	r3, #9
340028ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
340028bc:	f107 030c 	add.w	r3, r7, #12
340028c0:	4619      	mov	r1, r3
340028c2:	4822      	ldr	r0, [pc, #136]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
340028c4:	f005 fa3e 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
340028c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
340028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
340028ce:	2309      	movs	r3, #9
340028d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
340028d2:	f107 030c 	add.w	r3, r7, #12
340028d6:	4619      	mov	r1, r3
340028d8:	481c      	ldr	r0, [pc, #112]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
340028da:	f005 fa33 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
340028de:	f44f 7300 	mov.w	r3, #512	@ 0x200
340028e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
340028e4:	2309      	movs	r3, #9
340028e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
340028e8:	f107 030c 	add.w	r3, r7, #12
340028ec:	4619      	mov	r1, r3
340028ee:	4817      	ldr	r0, [pc, #92]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
340028f0:	f005 fa28 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
340028f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340028f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
340028fa:	2309      	movs	r3, #9
340028fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
340028fe:	f107 030c 	add.w	r3, r7, #12
34002902:	4619      	mov	r1, r3
34002904:	4811      	ldr	r0, [pc, #68]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
34002906:	f005 fa1d 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
3400290a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400290e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34002910:	2309      	movs	r3, #9
34002912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34002914:	f107 030c 	add.w	r3, r7, #12
34002918:	4619      	mov	r1, r3
3400291a:	480c      	ldr	r0, [pc, #48]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
3400291c:	f005 fa12 	bl	34007d44 <HAL_GPIO_Init>

  /* XSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34002920:	2301      	movs	r3, #1
34002922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34002924:	2309      	movs	r3, #9
34002926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34002928:	f107 030c 	add.w	r3, r7, #12
3400292c:	4619      	mov	r1, r3
3400292e:	4807      	ldr	r0, [pc, #28]	@ (3400294c <XSPI_NOR_MspInit+0x198>)
34002930:	f005 fa08 	bl	34007d44 <HAL_GPIO_Init>

  /* Configure the NVIC for XSPI */
  /* NVIC configuration for XSPI interrupt */
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34002934:	2200      	movs	r2, #0
34002936:	210f      	movs	r1, #15
34002938:	20aa      	movs	r0, #170	@ 0xaa
3400293a:	f003 fe79 	bl	34006630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
3400293e:	20aa      	movs	r0, #170	@ 0xaa
34002940:	f003 fed0 	bl	340066e4 <HAL_NVIC_EnableIRQ>
}
34002944:	bf00      	nop
34002946:	3720      	adds	r7, #32
34002948:	46bd      	mov	sp, r7
3400294a:	bd80      	pop	{r7, pc}
3400294c:	56023400 	.word	0x56023400

34002950 <XSPI_NOR_ResetMemory>:
  * @brief  This function reset the XSPI memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ResetMemory(uint32_t Instance)
{
34002950:	b580      	push	{r7, lr}
34002952:	b084      	sub	sp, #16
34002954:	af00      	add	r7, sp, #0
34002956:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002958:	2300      	movs	r3, #0
3400295a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400295c:	687b      	ldr	r3, [r7, #4]
3400295e:	2b00      	cmp	r3, #0
34002960:	d003      	beq.n	3400296a <XSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002962:	f06f 0301 	mvn.w	r3, #1
34002966:	60fb      	str	r3, [r7, #12]
34002968:	e088      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400296a:	687b      	ldr	r3, [r7, #4]
3400296c:	2264      	movs	r2, #100	@ 0x64
3400296e:	fb02 f303 	mul.w	r3, r2, r3
34002972:	4a45      	ldr	r2, [pc, #276]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
34002974:	4413      	add	r3, r2
34002976:	2200      	movs	r2, #0
34002978:	2100      	movs	r1, #0
3400297a:	4618      	mov	r0, r3
3400297c:	f7ff fb04 	bl	34001f88 <MX25UM51245G_ResetEnable>
34002980:	4603      	mov	r3, r0
34002982:	2b00      	cmp	r3, #0
34002984:	d003      	beq.n	3400298e <XSPI_NOR_ResetMemory+0x3e>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002986:	f06f 0304 	mvn.w	r3, #4
3400298a:	60fb      	str	r3, [r7, #12]
3400298c:	e076      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400298e:	687b      	ldr	r3, [r7, #4]
34002990:	2264      	movs	r2, #100	@ 0x64
34002992:	fb02 f303 	mul.w	r3, r2, r3
34002996:	4a3c      	ldr	r2, [pc, #240]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
34002998:	4413      	add	r3, r2
3400299a:	2200      	movs	r2, #0
3400299c:	2100      	movs	r1, #0
3400299e:	4618      	mov	r0, r3
340029a0:	f7ff fb48 	bl	34002034 <MX25UM51245G_ResetMemory>
340029a4:	4603      	mov	r3, r0
340029a6:	2b00      	cmp	r3, #0
340029a8:	d003      	beq.n	340029b2 <XSPI_NOR_ResetMemory+0x62>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340029aa:	f06f 0304 	mvn.w	r3, #4
340029ae:	60fb      	str	r3, [r7, #12]
340029b0:	e064      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340029b2:	687b      	ldr	r3, [r7, #4]
340029b4:	2264      	movs	r2, #100	@ 0x64
340029b6:	fb02 f303 	mul.w	r3, r2, r3
340029ba:	4a33      	ldr	r2, [pc, #204]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
340029bc:	4413      	add	r3, r2
340029be:	2200      	movs	r2, #0
340029c0:	2101      	movs	r1, #1
340029c2:	4618      	mov	r0, r3
340029c4:	f7ff fae0 	bl	34001f88 <MX25UM51245G_ResetEnable>
340029c8:	4603      	mov	r3, r0
340029ca:	2b00      	cmp	r3, #0
340029cc:	d003      	beq.n	340029d6 <XSPI_NOR_ResetMemory+0x86>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340029ce:	f06f 0304 	mvn.w	r3, #4
340029d2:	60fb      	str	r3, [r7, #12]
340029d4:	e052      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340029d6:	687b      	ldr	r3, [r7, #4]
340029d8:	2264      	movs	r2, #100	@ 0x64
340029da:	fb02 f303 	mul.w	r3, r2, r3
340029de:	4a2a      	ldr	r2, [pc, #168]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
340029e0:	4413      	add	r3, r2
340029e2:	2200      	movs	r2, #0
340029e4:	2101      	movs	r1, #1
340029e6:	4618      	mov	r0, r3
340029e8:	f7ff fb24 	bl	34002034 <MX25UM51245G_ResetMemory>
340029ec:	4603      	mov	r3, r0
340029ee:	2b00      	cmp	r3, #0
340029f0:	d003      	beq.n	340029fa <XSPI_NOR_ResetMemory+0xaa>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340029f2:	f06f 0304 	mvn.w	r3, #4
340029f6:	60fb      	str	r3, [r7, #12]
340029f8:	e040      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340029fa:	687b      	ldr	r3, [r7, #4]
340029fc:	2264      	movs	r2, #100	@ 0x64
340029fe:	fb02 f303 	mul.w	r3, r2, r3
34002a02:	4a21      	ldr	r2, [pc, #132]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
34002a04:	4413      	add	r3, r2
34002a06:	2201      	movs	r2, #1
34002a08:	2101      	movs	r1, #1
34002a0a:	4618      	mov	r0, r3
34002a0c:	f7ff fabc 	bl	34001f88 <MX25UM51245G_ResetEnable>
34002a10:	4603      	mov	r3, r0
34002a12:	2b00      	cmp	r3, #0
34002a14:	d003      	beq.n	34002a1e <XSPI_NOR_ResetMemory+0xce>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a16:	f06f 0304 	mvn.w	r3, #4
34002a1a:	60fb      	str	r3, [r7, #12]
34002a1c:	e02e      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002a1e:	687b      	ldr	r3, [r7, #4]
34002a20:	2264      	movs	r2, #100	@ 0x64
34002a22:	fb02 f303 	mul.w	r3, r2, r3
34002a26:	4a18      	ldr	r2, [pc, #96]	@ (34002a88 <XSPI_NOR_ResetMemory+0x138>)
34002a28:	4413      	add	r3, r2
34002a2a:	2201      	movs	r2, #1
34002a2c:	2101      	movs	r1, #1
34002a2e:	4618      	mov	r0, r3
34002a30:	f7ff fb00 	bl	34002034 <MX25UM51245G_ResetMemory>
34002a34:	4603      	mov	r3, r0
34002a36:	2b00      	cmp	r3, #0
34002a38:	d003      	beq.n	34002a42 <XSPI_NOR_ResetMemory+0xf2>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a3a:	f06f 0304 	mvn.w	r3, #4
34002a3e:	60fb      	str	r3, [r7, #12]
34002a40:	e01c      	b.n	34002a7c <XSPI_NOR_ResetMemory+0x12c>
  }
  else
  {
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34002a42:	4912      	ldr	r1, [pc, #72]	@ (34002a8c <XSPI_NOR_ResetMemory+0x13c>)
34002a44:	687a      	ldr	r2, [r7, #4]
34002a46:	4613      	mov	r3, r2
34002a48:	005b      	lsls	r3, r3, #1
34002a4a:	4413      	add	r3, r2
34002a4c:	440b      	add	r3, r1
34002a4e:	2201      	movs	r2, #1
34002a50:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34002a52:	490e      	ldr	r1, [pc, #56]	@ (34002a8c <XSPI_NOR_ResetMemory+0x13c>)
34002a54:	687a      	ldr	r2, [r7, #4]
34002a56:	4613      	mov	r3, r2
34002a58:	005b      	lsls	r3, r3, #1
34002a5a:	4413      	add	r3, r2
34002a5c:	440b      	add	r3, r1
34002a5e:	3301      	adds	r3, #1
34002a60:	2200      	movs	r2, #0
34002a62:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34002a64:	4909      	ldr	r1, [pc, #36]	@ (34002a8c <XSPI_NOR_ResetMemory+0x13c>)
34002a66:	687a      	ldr	r2, [r7, #4]
34002a68:	4613      	mov	r3, r2
34002a6a:	005b      	lsls	r3, r3, #1
34002a6c:	4413      	add	r3, r2
34002a6e:	440b      	add	r3, r1
34002a70:	3302      	adds	r3, #2
34002a72:	2200      	movs	r2, #0
34002a74:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34002a76:	2064      	movs	r0, #100	@ 0x64
34002a78:	f003 fae4 	bl	34006044 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
34002a7c:	68fb      	ldr	r3, [r7, #12]
}
34002a7e:	4618      	mov	r0, r3
34002a80:	3710      	adds	r7, #16
34002a82:	46bd      	mov	sp, r7
34002a84:	bd80      	pop	{r7, pc}
34002a86:	bf00      	nop
34002a88:	3401ea78 	.word	0x3401ea78
34002a8c:	3401eadc 	.word	0x3401eadc

34002a90 <XSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
34002a90:	b590      	push	{r4, r7, lr}
34002a92:	b087      	sub	sp, #28
34002a94:	af02      	add	r7, sp, #8
34002a96:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002a98:	687b      	ldr	r3, [r7, #4]
34002a9a:	2b00      	cmp	r3, #0
34002a9c:	d003      	beq.n	34002aa6 <XSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002a9e:	f06f 0301 	mvn.w	r3, #1
34002aa2:	60fb      	str	r3, [r7, #12]
34002aa4:	e0db      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002aa6:	687b      	ldr	r3, [r7, #4]
34002aa8:	2264      	movs	r2, #100	@ 0x64
34002aaa:	fb02 f303 	mul.w	r3, r2, r3
34002aae:	4a6e      	ldr	r2, [pc, #440]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002ab0:	1898      	adds	r0, r3, r2
34002ab2:	496e      	ldr	r1, [pc, #440]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002ab4:	687a      	ldr	r2, [r7, #4]
34002ab6:	4613      	mov	r3, r2
34002ab8:	005b      	lsls	r3, r3, #1
34002aba:	4413      	add	r3, r2
34002abc:	440b      	add	r3, r1
34002abe:	3301      	adds	r3, #1
34002ac0:	7819      	ldrb	r1, [r3, #0]
34002ac2:	4c6a      	ldr	r4, [pc, #424]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002ac4:	687a      	ldr	r2, [r7, #4]
34002ac6:	4613      	mov	r3, r2
34002ac8:	005b      	lsls	r3, r3, #1
34002aca:	4413      	add	r3, r2
34002acc:	4423      	add	r3, r4
34002ace:	3302      	adds	r3, #2
34002ad0:	781b      	ldrb	r3, [r3, #0]
34002ad2:	461a      	mov	r2, r3
34002ad4:	f7ff f85a 	bl	34001b8c <MX25UM51245G_WriteEnable>
34002ad8:	4603      	mov	r3, r0
34002ada:	2b00      	cmp	r3, #0
34002adc:	d003      	beq.n	34002ae6 <XSPI_NOR_EnterDOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002ade:	f06f 0304 	mvn.w	r3, #4
34002ae2:	60fb      	str	r3, [r7, #12]
34002ae4:	e0bb      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002ae6:	687b      	ldr	r3, [r7, #4]
34002ae8:	2264      	movs	r2, #100	@ 0x64
34002aea:	fb02 f303 	mul.w	r3, r2, r3
34002aee:	4a5e      	ldr	r2, [pc, #376]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002af0:	1898      	adds	r0, r3, r2
34002af2:	495e      	ldr	r1, [pc, #376]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002af4:	687a      	ldr	r2, [r7, #4]
34002af6:	4613      	mov	r3, r2
34002af8:	005b      	lsls	r3, r3, #1
34002afa:	4413      	add	r3, r2
34002afc:	440b      	add	r3, r1
34002afe:	3301      	adds	r3, #1
34002b00:	7819      	ldrb	r1, [r3, #0]
34002b02:	4c5a      	ldr	r4, [pc, #360]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b04:	687a      	ldr	r2, [r7, #4]
34002b06:	4613      	mov	r3, r2
34002b08:	005b      	lsls	r3, r3, #1
34002b0a:	4413      	add	r3, r2
34002b0c:	4423      	add	r3, r4
34002b0e:	3302      	adds	r3, #2
34002b10:	781a      	ldrb	r2, [r3, #0]
34002b12:	2300      	movs	r3, #0
34002b14:	9300      	str	r3, [sp, #0]
34002b16:	f44f 7340 	mov.w	r3, #768	@ 0x300
34002b1a:	f7ff f905 	bl	34001d28 <MX25UM51245G_WriteCfg2Register>
34002b1e:	4603      	mov	r3, r0
34002b20:	2b00      	cmp	r3, #0
34002b22:	d003      	beq.n	34002b2c <XSPI_NOR_EnterDOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002b24:	f06f 0304 	mvn.w	r3, #4
34002b28:	60fb      	str	r3, [r7, #12]
34002b2a:	e098      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002b2c:	687b      	ldr	r3, [r7, #4]
34002b2e:	2264      	movs	r2, #100	@ 0x64
34002b30:	fb02 f303 	mul.w	r3, r2, r3
34002b34:	4a4c      	ldr	r2, [pc, #304]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002b36:	1898      	adds	r0, r3, r2
34002b38:	494c      	ldr	r1, [pc, #304]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b3a:	687a      	ldr	r2, [r7, #4]
34002b3c:	4613      	mov	r3, r2
34002b3e:	005b      	lsls	r3, r3, #1
34002b40:	4413      	add	r3, r2
34002b42:	440b      	add	r3, r1
34002b44:	3301      	adds	r3, #1
34002b46:	7819      	ldrb	r1, [r3, #0]
34002b48:	4c48      	ldr	r4, [pc, #288]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b4a:	687a      	ldr	r2, [r7, #4]
34002b4c:	4613      	mov	r3, r2
34002b4e:	005b      	lsls	r3, r3, #1
34002b50:	4413      	add	r3, r2
34002b52:	4423      	add	r3, r4
34002b54:	3302      	adds	r3, #2
34002b56:	781b      	ldrb	r3, [r3, #0]
34002b58:	461a      	mov	r2, r3
34002b5a:	f7ff f817 	bl	34001b8c <MX25UM51245G_WriteEnable>
34002b5e:	4603      	mov	r3, r0
34002b60:	2b00      	cmp	r3, #0
34002b62:	d003      	beq.n	34002b6c <XSPI_NOR_EnterDOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002b64:	f06f 0304 	mvn.w	r3, #4
34002b68:	60fb      	str	r3, [r7, #12]
34002b6a:	e078      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002b6c:	687b      	ldr	r3, [r7, #4]
34002b6e:	2264      	movs	r2, #100	@ 0x64
34002b70:	fb02 f303 	mul.w	r3, r2, r3
34002b74:	4a3c      	ldr	r2, [pc, #240]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002b76:	1898      	adds	r0, r3, r2
34002b78:	493c      	ldr	r1, [pc, #240]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b7a:	687a      	ldr	r2, [r7, #4]
34002b7c:	4613      	mov	r3, r2
34002b7e:	005b      	lsls	r3, r3, #1
34002b80:	4413      	add	r3, r2
34002b82:	440b      	add	r3, r1
34002b84:	3301      	adds	r3, #1
34002b86:	7819      	ldrb	r1, [r3, #0]
34002b88:	4c38      	ldr	r4, [pc, #224]	@ (34002c6c <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b8a:	687a      	ldr	r2, [r7, #4]
34002b8c:	4613      	mov	r3, r2
34002b8e:	005b      	lsls	r3, r3, #1
34002b90:	4413      	add	r3, r2
34002b92:	4423      	add	r3, r4
34002b94:	3302      	adds	r3, #2
34002b96:	781a      	ldrb	r2, [r3, #0]
34002b98:	2302      	movs	r3, #2
34002b9a:	9300      	str	r3, [sp, #0]
34002b9c:	2300      	movs	r3, #0
34002b9e:	f7ff f8c3 	bl	34001d28 <MX25UM51245G_WriteCfg2Register>
34002ba2:	4603      	mov	r3, r0
34002ba4:	2b00      	cmp	r3, #0
34002ba6:	d003      	beq.n	34002bb0 <XSPI_NOR_EnterDOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002ba8:	f06f 0304 	mvn.w	r3, #4
34002bac:	60fb      	str	r3, [r7, #12]
34002bae:	e056      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002bb0:	2028      	movs	r0, #40	@ 0x28
34002bb2:	f003 fa47 	bl	34006044 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002bb6:	4a2c      	ldr	r2, [pc, #176]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002bb8:	687b      	ldr	r3, [r7, #4]
34002bba:	2164      	movs	r1, #100	@ 0x64
34002bbc:	fb01 f303 	mul.w	r3, r1, r3
34002bc0:	4413      	add	r3, r2
34002bc2:	330c      	adds	r3, #12
34002bc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002bc8:	601a      	str	r2, [r3, #0]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34002bca:	4a27      	ldr	r2, [pc, #156]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002bcc:	687b      	ldr	r3, [r7, #4]
34002bce:	2164      	movs	r1, #100	@ 0x64
34002bd0:	fb01 f303 	mul.w	r3, r1, r3
34002bd4:	4413      	add	r3, r2
34002bd6:	332c      	adds	r3, #44	@ 0x2c
34002bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002bdc:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34002bde:	687b      	ldr	r3, [r7, #4]
34002be0:	2264      	movs	r2, #100	@ 0x64
34002be2:	fb02 f303 	mul.w	r3, r2, r3
34002be6:	4a20      	ldr	r2, [pc, #128]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002be8:	4413      	add	r3, r2
34002bea:	4618      	mov	r0, r3
34002bec:	f015 fff2 	bl	34018bd4 <HAL_XSPI_Init>
34002bf0:	4603      	mov	r3, r0
34002bf2:	2b00      	cmp	r3, #0
34002bf4:	d003      	beq.n	34002bfe <XSPI_NOR_EnterDOPIMode+0x16e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34002bf6:	f06f 0303 	mvn.w	r3, #3
34002bfa:	60fb      	str	r3, [r7, #12]
34002bfc:	e02f      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002bfe:	687b      	ldr	r3, [r7, #4]
34002c00:	2264      	movs	r2, #100	@ 0x64
34002c02:	fb02 f303 	mul.w	r3, r2, r3
34002c06:	4a18      	ldr	r2, [pc, #96]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c08:	4413      	add	r3, r2
34002c0a:	2201      	movs	r2, #1
34002c0c:	2101      	movs	r1, #1
34002c0e:	4618      	mov	r0, r3
34002c10:	f7fe fdf3 	bl	340017fa <MX25UM51245G_AutoPollingMemReady>
34002c14:	4603      	mov	r3, r0
34002c16:	2b00      	cmp	r3, #0
34002c18:	d003      	beq.n	34002c22 <XSPI_NOR_EnterDOPIMode+0x192>
                                              BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002c1a:	f06f 0304 	mvn.w	r3, #4
34002c1e:	60fb      	str	r3, [r7, #12]
34002c20:	e01d      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34002c22:	687b      	ldr	r3, [r7, #4]
34002c24:	2264      	movs	r2, #100	@ 0x64
34002c26:	fb02 f303 	mul.w	r3, r2, r3
34002c2a:	4a0f      	ldr	r2, [pc, #60]	@ (34002c68 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c2c:	1898      	adds	r0, r3, r2
34002c2e:	f107 0308 	add.w	r3, r7, #8
34002c32:	9300      	str	r3, [sp, #0]
34002c34:	2300      	movs	r3, #0
34002c36:	2201      	movs	r2, #1
34002c38:	2101      	movs	r1, #1
34002c3a:	f7ff f908 	bl	34001e4e <MX25UM51245G_ReadCfg2Register>
34002c3e:	4603      	mov	r3, r0
34002c40:	2b00      	cmp	r3, #0
34002c42:	d003      	beq.n	34002c4c <XSPI_NOR_EnterDOPIMode+0x1bc>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002c44:	f06f 0304 	mvn.w	r3, #4
34002c48:	60fb      	str	r3, [r7, #12]
34002c4a:	e008      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34002c4c:	7a3b      	ldrb	r3, [r7, #8]
34002c4e:	2b02      	cmp	r3, #2
34002c50:	d003      	beq.n	34002c5a <XSPI_NOR_EnterDOPIMode+0x1ca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002c52:	f06f 0304 	mvn.w	r3, #4
34002c56:	60fb      	str	r3, [r7, #12]
34002c58:	e001      	b.n	34002c5e <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002c5a:	2300      	movs	r3, #0
34002c5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34002c5e:	68fb      	ldr	r3, [r7, #12]
}
34002c60:	4618      	mov	r0, r3
34002c62:	3714      	adds	r7, #20
34002c64:	46bd      	mov	sp, r7
34002c66:	bd90      	pop	{r4, r7, pc}
34002c68:	3401ea78 	.word	0x3401ea78
34002c6c:	3401eadc 	.word	0x3401eadc

34002c70 <XSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
34002c70:	b590      	push	{r4, r7, lr}
34002c72:	b087      	sub	sp, #28
34002c74:	af02      	add	r7, sp, #8
34002c76:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002c78:	687b      	ldr	r3, [r7, #4]
34002c7a:	2b00      	cmp	r3, #0
34002c7c:	d003      	beq.n	34002c86 <XSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002c7e:	f06f 0301 	mvn.w	r3, #1
34002c82:	60fb      	str	r3, [r7, #12]
34002c84:	e0b7      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002c86:	687b      	ldr	r3, [r7, #4]
34002c88:	2264      	movs	r2, #100	@ 0x64
34002c8a:	fb02 f303 	mul.w	r3, r2, r3
34002c8e:	4a5c      	ldr	r2, [pc, #368]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002c90:	1898      	adds	r0, r3, r2
34002c92:	495c      	ldr	r1, [pc, #368]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002c94:	687a      	ldr	r2, [r7, #4]
34002c96:	4613      	mov	r3, r2
34002c98:	005b      	lsls	r3, r3, #1
34002c9a:	4413      	add	r3, r2
34002c9c:	440b      	add	r3, r1
34002c9e:	3301      	adds	r3, #1
34002ca0:	7819      	ldrb	r1, [r3, #0]
34002ca2:	4c58      	ldr	r4, [pc, #352]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002ca4:	687a      	ldr	r2, [r7, #4]
34002ca6:	4613      	mov	r3, r2
34002ca8:	005b      	lsls	r3, r3, #1
34002caa:	4413      	add	r3, r2
34002cac:	4423      	add	r3, r4
34002cae:	3302      	adds	r3, #2
34002cb0:	781b      	ldrb	r3, [r3, #0]
34002cb2:	461a      	mov	r2, r3
34002cb4:	f7fe ff6a 	bl	34001b8c <MX25UM51245G_WriteEnable>
34002cb8:	4603      	mov	r3, r0
34002cba:	2b00      	cmp	r3, #0
34002cbc:	d003      	beq.n	34002cc6 <XSPI_NOR_EnterSOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002cbe:	f06f 0304 	mvn.w	r3, #4
34002cc2:	60fb      	str	r3, [r7, #12]
34002cc4:	e097      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002cc6:	687b      	ldr	r3, [r7, #4]
34002cc8:	2264      	movs	r2, #100	@ 0x64
34002cca:	fb02 f303 	mul.w	r3, r2, r3
34002cce:	4a4c      	ldr	r2, [pc, #304]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002cd0:	1898      	adds	r0, r3, r2
34002cd2:	494c      	ldr	r1, [pc, #304]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002cd4:	687a      	ldr	r2, [r7, #4]
34002cd6:	4613      	mov	r3, r2
34002cd8:	005b      	lsls	r3, r3, #1
34002cda:	4413      	add	r3, r2
34002cdc:	440b      	add	r3, r1
34002cde:	3301      	adds	r3, #1
34002ce0:	7819      	ldrb	r1, [r3, #0]
34002ce2:	4c48      	ldr	r4, [pc, #288]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002ce4:	687a      	ldr	r2, [r7, #4]
34002ce6:	4613      	mov	r3, r2
34002ce8:	005b      	lsls	r3, r3, #1
34002cea:	4413      	add	r3, r2
34002cec:	4423      	add	r3, r4
34002cee:	3302      	adds	r3, #2
34002cf0:	781a      	ldrb	r2, [r3, #0]
34002cf2:	2300      	movs	r3, #0
34002cf4:	9300      	str	r3, [sp, #0]
34002cf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
34002cfa:	f7ff f815 	bl	34001d28 <MX25UM51245G_WriteCfg2Register>
34002cfe:	4603      	mov	r3, r0
34002d00:	2b00      	cmp	r3, #0
34002d02:	d003      	beq.n	34002d0c <XSPI_NOR_EnterSOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002d04:	f06f 0304 	mvn.w	r3, #4
34002d08:	60fb      	str	r3, [r7, #12]
34002d0a:	e074      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d0c:	687b      	ldr	r3, [r7, #4]
34002d0e:	2264      	movs	r2, #100	@ 0x64
34002d10:	fb02 f303 	mul.w	r3, r2, r3
34002d14:	4a3a      	ldr	r2, [pc, #232]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002d16:	1898      	adds	r0, r3, r2
34002d18:	493a      	ldr	r1, [pc, #232]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d1a:	687a      	ldr	r2, [r7, #4]
34002d1c:	4613      	mov	r3, r2
34002d1e:	005b      	lsls	r3, r3, #1
34002d20:	4413      	add	r3, r2
34002d22:	440b      	add	r3, r1
34002d24:	3301      	adds	r3, #1
34002d26:	7819      	ldrb	r1, [r3, #0]
34002d28:	4c36      	ldr	r4, [pc, #216]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d2a:	687a      	ldr	r2, [r7, #4]
34002d2c:	4613      	mov	r3, r2
34002d2e:	005b      	lsls	r3, r3, #1
34002d30:	4413      	add	r3, r2
34002d32:	4423      	add	r3, r4
34002d34:	3302      	adds	r3, #2
34002d36:	781b      	ldrb	r3, [r3, #0]
34002d38:	461a      	mov	r2, r3
34002d3a:	f7fe ff27 	bl	34001b8c <MX25UM51245G_WriteEnable>
34002d3e:	4603      	mov	r3, r0
34002d40:	2b00      	cmp	r3, #0
34002d42:	d003      	beq.n	34002d4c <XSPI_NOR_EnterSOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002d44:	f06f 0304 	mvn.w	r3, #4
34002d48:	60fb      	str	r3, [r7, #12]
34002d4a:	e054      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d4c:	687b      	ldr	r3, [r7, #4]
34002d4e:	2264      	movs	r2, #100	@ 0x64
34002d50:	fb02 f303 	mul.w	r3, r2, r3
34002d54:	4a2a      	ldr	r2, [pc, #168]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002d56:	1898      	adds	r0, r3, r2
34002d58:	492a      	ldr	r1, [pc, #168]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d5a:	687a      	ldr	r2, [r7, #4]
34002d5c:	4613      	mov	r3, r2
34002d5e:	005b      	lsls	r3, r3, #1
34002d60:	4413      	add	r3, r2
34002d62:	440b      	add	r3, r1
34002d64:	3301      	adds	r3, #1
34002d66:	7819      	ldrb	r1, [r3, #0]
34002d68:	4c26      	ldr	r4, [pc, #152]	@ (34002e04 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d6a:	687a      	ldr	r2, [r7, #4]
34002d6c:	4613      	mov	r3, r2
34002d6e:	005b      	lsls	r3, r3, #1
34002d70:	4413      	add	r3, r2
34002d72:	4423      	add	r3, r4
34002d74:	3302      	adds	r3, #2
34002d76:	781a      	ldrb	r2, [r3, #0]
34002d78:	2301      	movs	r3, #1
34002d7a:	9300      	str	r3, [sp, #0]
34002d7c:	2300      	movs	r3, #0
34002d7e:	f7fe ffd3 	bl	34001d28 <MX25UM51245G_WriteCfg2Register>
34002d82:	4603      	mov	r3, r0
34002d84:	2b00      	cmp	r3, #0
34002d86:	d003      	beq.n	34002d90 <XSPI_NOR_EnterSOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002d88:	f06f 0304 	mvn.w	r3, #4
34002d8c:	60fb      	str	r3, [r7, #12]
34002d8e:	e032      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002d90:	2028      	movs	r0, #40	@ 0x28
34002d92:	f003 f957 	bl	34006044 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002d96:	687b      	ldr	r3, [r7, #4]
34002d98:	2264      	movs	r2, #100	@ 0x64
34002d9a:	fb02 f303 	mul.w	r3, r2, r3
34002d9e:	4a18      	ldr	r2, [pc, #96]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002da0:	4413      	add	r3, r2
34002da2:	2200      	movs	r2, #0
34002da4:	2101      	movs	r1, #1
34002da6:	4618      	mov	r0, r3
34002da8:	f7fe fd27 	bl	340017fa <MX25UM51245G_AutoPollingMemReady>
34002dac:	4603      	mov	r3, r0
34002dae:	2b00      	cmp	r3, #0
34002db0:	d003      	beq.n	34002dba <XSPI_NOR_EnterSOPIMode+0x14a>
                                         BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002db2:	f06f 0304 	mvn.w	r3, #4
34002db6:	60fb      	str	r3, [r7, #12]
34002db8:	e01d      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34002dba:	687b      	ldr	r3, [r7, #4]
34002dbc:	2264      	movs	r2, #100	@ 0x64
34002dbe:	fb02 f303 	mul.w	r3, r2, r3
34002dc2:	4a0f      	ldr	r2, [pc, #60]	@ (34002e00 <XSPI_NOR_EnterSOPIMode+0x190>)
34002dc4:	1898      	adds	r0, r3, r2
34002dc6:	f107 0308 	add.w	r3, r7, #8
34002dca:	9300      	str	r3, [sp, #0]
34002dcc:	2300      	movs	r3, #0
34002dce:	2200      	movs	r2, #0
34002dd0:	2101      	movs	r1, #1
34002dd2:	f7ff f83c 	bl	34001e4e <MX25UM51245G_ReadCfg2Register>
34002dd6:	4603      	mov	r3, r0
34002dd8:	2b00      	cmp	r3, #0
34002dda:	d003      	beq.n	34002de4 <XSPI_NOR_EnterSOPIMode+0x174>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002ddc:	f06f 0304 	mvn.w	r3, #4
34002de0:	60fb      	str	r3, [r7, #12]
34002de2:	e008      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34002de4:	7a3b      	ldrb	r3, [r7, #8]
34002de6:	2b01      	cmp	r3, #1
34002de8:	d003      	beq.n	34002df2 <XSPI_NOR_EnterSOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002dea:	f06f 0304 	mvn.w	r3, #4
34002dee:	60fb      	str	r3, [r7, #12]
34002df0:	e001      	b.n	34002df6 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002df2:	2300      	movs	r3, #0
34002df4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34002df6:	68fb      	ldr	r3, [r7, #12]
}
34002df8:	4618      	mov	r0, r3
34002dfa:	3714      	adds	r7, #20
34002dfc:	46bd      	mov	sp, r7
34002dfe:	bd90      	pop	{r4, r7, pc}
34002e00:	3401ea78 	.word	0x3401ea78
34002e04:	3401eadc 	.word	0x3401eadc

34002e08 <XSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
34002e08:	b590      	push	{r4, r7, lr}
34002e0a:	b087      	sub	sp, #28
34002e0c:	af02      	add	r7, sp, #8
34002e0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002e10:	2300      	movs	r3, #0
34002e12:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002e14:	687b      	ldr	r3, [r7, #4]
34002e16:	2b00      	cmp	r3, #0
34002e18:	d003      	beq.n	34002e22 <XSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002e1a:	f06f 0301 	mvn.w	r3, #1
34002e1e:	60fb      	str	r3, [r7, #12]
34002e20:	e0a3      	b.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002e22:	687b      	ldr	r3, [r7, #4]
34002e24:	2264      	movs	r2, #100	@ 0x64
34002e26:	fb02 f303 	mul.w	r3, r2, r3
34002e2a:	4a52      	ldr	r2, [pc, #328]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002e2c:	1898      	adds	r0, r3, r2
34002e2e:	4952      	ldr	r1, [pc, #328]	@ (34002f78 <XSPI_NOR_ExitOPIMode+0x170>)
34002e30:	687a      	ldr	r2, [r7, #4]
34002e32:	4613      	mov	r3, r2
34002e34:	005b      	lsls	r3, r3, #1
34002e36:	4413      	add	r3, r2
34002e38:	440b      	add	r3, r1
34002e3a:	3301      	adds	r3, #1
34002e3c:	7819      	ldrb	r1, [r3, #0]
34002e3e:	4c4e      	ldr	r4, [pc, #312]	@ (34002f78 <XSPI_NOR_ExitOPIMode+0x170>)
34002e40:	687a      	ldr	r2, [r7, #4]
34002e42:	4613      	mov	r3, r2
34002e44:	005b      	lsls	r3, r3, #1
34002e46:	4413      	add	r3, r2
34002e48:	4423      	add	r3, r4
34002e4a:	3302      	adds	r3, #2
34002e4c:	781b      	ldrb	r3, [r3, #0]
34002e4e:	461a      	mov	r2, r3
34002e50:	f7fe fe9c 	bl	34001b8c <MX25UM51245G_WriteEnable>
34002e54:	4603      	mov	r3, r0
34002e56:	2b00      	cmp	r3, #0
34002e58:	d003      	beq.n	34002e62 <XSPI_NOR_ExitOPIMode+0x5a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002e5a:	f06f 0304 	mvn.w	r3, #4
34002e5e:	60fb      	str	r3, [r7, #12]
34002e60:	e083      	b.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
34002e62:	2300      	movs	r3, #0
34002e64:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
34002e66:	2300      	movs	r3, #0
34002e68:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002e6a:	687b      	ldr	r3, [r7, #4]
34002e6c:	2264      	movs	r2, #100	@ 0x64
34002e6e:	fb02 f303 	mul.w	r3, r2, r3
34002e72:	4a40      	ldr	r2, [pc, #256]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002e74:	1898      	adds	r0, r3, r2
34002e76:	4940      	ldr	r1, [pc, #256]	@ (34002f78 <XSPI_NOR_ExitOPIMode+0x170>)
34002e78:	687a      	ldr	r2, [r7, #4]
34002e7a:	4613      	mov	r3, r2
34002e7c:	005b      	lsls	r3, r3, #1
34002e7e:	4413      	add	r3, r2
34002e80:	440b      	add	r3, r1
34002e82:	3301      	adds	r3, #1
34002e84:	7819      	ldrb	r1, [r3, #0]
34002e86:	4c3c      	ldr	r4, [pc, #240]	@ (34002f78 <XSPI_NOR_ExitOPIMode+0x170>)
34002e88:	687a      	ldr	r2, [r7, #4]
34002e8a:	4613      	mov	r3, r2
34002e8c:	005b      	lsls	r3, r3, #1
34002e8e:	4413      	add	r3, r2
34002e90:	4423      	add	r3, r4
34002e92:	3302      	adds	r3, #2
34002e94:	781a      	ldrb	r2, [r3, #0]
34002e96:	7a3b      	ldrb	r3, [r7, #8]
34002e98:	9300      	str	r3, [sp, #0]
34002e9a:	2300      	movs	r3, #0
34002e9c:	f7fe ff44 	bl	34001d28 <MX25UM51245G_WriteCfg2Register>
34002ea0:	4603      	mov	r3, r0
34002ea2:	2b00      	cmp	r3, #0
34002ea4:	d003      	beq.n	34002eae <XSPI_NOR_ExitOPIMode+0xa6>
                                       Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002ea6:	f06f 0304 	mvn.w	r3, #4
34002eaa:	60fb      	str	r3, [r7, #12]
34002eac:	e05d      	b.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002eae:	2028      	movs	r0, #40	@ 0x28
34002eb0:	f003 f8c8 	bl	34006044 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34002eb4:	4930      	ldr	r1, [pc, #192]	@ (34002f78 <XSPI_NOR_ExitOPIMode+0x170>)
34002eb6:	687a      	ldr	r2, [r7, #4]
34002eb8:	4613      	mov	r3, r2
34002eba:	005b      	lsls	r3, r3, #1
34002ebc:	4413      	add	r3, r2
34002ebe:	440b      	add	r3, r1
34002ec0:	3302      	adds	r3, #2
34002ec2:	781b      	ldrb	r3, [r3, #0]
34002ec4:	2b01      	cmp	r3, #1
34002ec6:	d120      	bne.n	34002f0a <XSPI_NOR_ExitOPIMode+0x102>
      {
        /* Reconfigure the memory type of the peripheral */
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002ec8:	4a2a      	ldr	r2, [pc, #168]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002eca:	687b      	ldr	r3, [r7, #4]
34002ecc:	2164      	movs	r1, #100	@ 0x64
34002ece:	fb01 f303 	mul.w	r3, r1, r3
34002ed2:	4413      	add	r3, r2
34002ed4:	330c      	adds	r3, #12
34002ed6:	2200      	movs	r2, #0
34002ed8:	601a      	str	r2, [r3, #0]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002eda:	4a26      	ldr	r2, [pc, #152]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002edc:	687b      	ldr	r3, [r7, #4]
34002ede:	2164      	movs	r1, #100	@ 0x64
34002ee0:	fb01 f303 	mul.w	r3, r1, r3
34002ee4:	4413      	add	r3, r2
34002ee6:	332c      	adds	r3, #44	@ 0x2c
34002ee8:	2200      	movs	r2, #0
34002eea:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34002eec:	687b      	ldr	r3, [r7, #4]
34002eee:	2264      	movs	r2, #100	@ 0x64
34002ef0:	fb02 f303 	mul.w	r3, r2, r3
34002ef4:	4a1f      	ldr	r2, [pc, #124]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002ef6:	4413      	add	r3, r2
34002ef8:	4618      	mov	r0, r3
34002efa:	f015 fe6b 	bl	34018bd4 <HAL_XSPI_Init>
34002efe:	4603      	mov	r3, r0
34002f00:	2b00      	cmp	r3, #0
34002f02:	d002      	beq.n	34002f0a <XSPI_NOR_ExitOPIMode+0x102>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
34002f04:	f06f 0303 	mvn.w	r3, #3
34002f08:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
34002f0a:	68fb      	ldr	r3, [r7, #12]
34002f0c:	2b00      	cmp	r3, #0
34002f0e:	d12c      	bne.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34002f10:	687b      	ldr	r3, [r7, #4]
34002f12:	2264      	movs	r2, #100	@ 0x64
34002f14:	fb02 f303 	mul.w	r3, r2, r3
34002f18:	4a16      	ldr	r2, [pc, #88]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f1a:	4413      	add	r3, r2
34002f1c:	2200      	movs	r2, #0
34002f1e:	2100      	movs	r1, #0
34002f20:	4618      	mov	r0, r3
34002f22:	f7fe fc6a 	bl	340017fa <MX25UM51245G_AutoPollingMemReady>
34002f26:	4603      	mov	r3, r0
34002f28:	2b00      	cmp	r3, #0
34002f2a:	d003      	beq.n	34002f34 <XSPI_NOR_ExitOPIMode+0x12c>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002f2c:	f06f 0304 	mvn.w	r3, #4
34002f30:	60fb      	str	r3, [r7, #12]
34002f32:	e01a      	b.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34002f34:	687b      	ldr	r3, [r7, #4]
34002f36:	2264      	movs	r2, #100	@ 0x64
34002f38:	fb02 f303 	mul.w	r3, r2, r3
34002f3c:	4a0d      	ldr	r2, [pc, #52]	@ (34002f74 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f3e:	1898      	adds	r0, r3, r2
34002f40:	f107 0308 	add.w	r3, r7, #8
34002f44:	9300      	str	r3, [sp, #0]
34002f46:	2300      	movs	r3, #0
34002f48:	2200      	movs	r2, #0
34002f4a:	2100      	movs	r1, #0
34002f4c:	f7fe ff7f 	bl	34001e4e <MX25UM51245G_ReadCfg2Register>
34002f50:	4603      	mov	r3, r0
34002f52:	2b00      	cmp	r3, #0
34002f54:	d003      	beq.n	34002f5e <XSPI_NOR_ExitOPIMode+0x156>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002f56:	f06f 0304 	mvn.w	r3, #4
34002f5a:	60fb      	str	r3, [r7, #12]
34002f5c:	e005      	b.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
        }
        else if (reg[0] != 0U)
34002f5e:	7a3b      	ldrb	r3, [r7, #8]
34002f60:	2b00      	cmp	r3, #0
34002f62:	d002      	beq.n	34002f6a <XSPI_NOR_ExitOPIMode+0x162>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002f64:	f06f 0304 	mvn.w	r3, #4
34002f68:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002f6a:	68fb      	ldr	r3, [r7, #12]
}
34002f6c:	4618      	mov	r0, r3
34002f6e:	3714      	adds	r7, #20
34002f70:	46bd      	mov	sp, r7
34002f72:	bd90      	pop	{r4, r7, pc}
34002f74:	3401ea78 	.word	0x3401ea78
34002f78:	3401eadc 	.word	0x3401eadc

34002f7c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
34002f7c:	b480      	push	{r7}
34002f7e:	b085      	sub	sp, #20
34002f80:	af00      	add	r7, sp, #0
34002f82:	60f8      	str	r0, [r7, #12]
34002f84:	607b      	str	r3, [r7, #4]
34002f86:	460b      	mov	r3, r1
34002f88:	817b      	strh	r3, [r7, #10]
34002f8a:	4613      	mov	r3, r2
34002f8c:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
34002f8e:	68fb      	ldr	r3, [r7, #12]
34002f90:	897a      	ldrh	r2, [r7, #10]
34002f92:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
34002f94:	68fb      	ldr	r3, [r7, #12]
34002f96:	893a      	ldrh	r2, [r7, #8]
34002f98:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
34002f9a:	68fb      	ldr	r3, [r7, #12]
34002f9c:	687a      	ldr	r2, [r7, #4]
34002f9e:	605a      	str	r2, [r3, #4]
}
34002fa0:	bf00      	nop
34002fa2:	3714      	adds	r7, #20
34002fa4:	46bd      	mov	sp, r7
34002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34002faa:	4770      	bx	lr

34002fac <arm_mat_mult_f32_2x2_mve>:

__STATIC_INLINE  arm_status arm_mat_mult_f32_2x2_mve(
    const arm_matrix_instance_f32 *pSrcA,
    const arm_matrix_instance_f32 *pSrcB,
    arm_matrix_instance_f32 *pDst)
{
34002fac:	b480      	push	{r7}
34002fae:	b0e3      	sub	sp, #396	@ 0x18c
34002fb0:	af00      	add	r7, sp, #0
34002fb2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fb6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
34002fba:	6018      	str	r0, [r3, #0]
34002fbc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fc0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
34002fc4:	6019      	str	r1, [r3, #0]
34002fc6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
34002fce:	601a      	str	r2, [r3, #0]
34002fd0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fd4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
34002fd8:	4ac8      	ldr	r2, [pc, #800]	@ (340032fc <arm_mat_mult_f32_2x2_mve+0x350>)
34002fda:	601a      	str	r2, [r3, #0]

__extension__ extern __inline uint32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vldrwq_u32 (uint32_t const * __base)
{
  return __builtin_mve_vldrwq_uv4si ((__builtin_neon_si *) __base);
34002fdc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fe0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
34002fe4:	681b      	ldr	r3, [r3, #0]
34002fe6:	ed93 7f00 	ldc	15, cr7, [r3]
    static const uint32_t  offsetB1[4] = { 2, 3, 2, 3 };

    uint32x4_t vecOffsA, vecOffsB;
    f32x4_t vecInA, vecInB, vecDst;

    vecOffsA = vldrwq_u32((uint32_t const *) offsetA0);
34002fea:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002fee:	3b10      	subs	r3, #16
34002ff0:	ed83 7f00 	stc	15, cr7, [r3]
34002ff4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34002ff8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
34002ffc:	4ac0      	ldr	r2, [pc, #768]	@ (34003300 <arm_mat_mult_f32_2x2_mve+0x354>)
34002ffe:	601a      	str	r2, [r3, #0]
34003000:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003004:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
34003008:	681b      	ldr	r3, [r3, #0]
3400300a:	ed93 7f00 	ldc	15, cr7, [r3]
    vecOffsB = vldrwq_u32((uint32_t const *) offsetB0);
3400300e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003012:	3b20      	subs	r3, #32
34003014:	ed83 7f00 	stc	15, cr7, [r3]

    vecInA = vldrwq_gather_shifted_offset((float32_t const *) pSrcA->pData, vecOffsA);
34003018:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400301c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
34003020:	681b      	ldr	r3, [r3, #0]
34003022:	685a      	ldr	r2, [r3, #4]
34003024:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003028:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
3400302c:	601a      	str	r2, [r3, #0]
3400302e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003032:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
34003036:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
3400303a:	3a10      	subs	r2, #16
3400303c:	ed92 7f00 	ldc	15, cr7, [r2]
34003040:	ed83 7f00 	stc	15, cr7, [r3]

__extension__ extern __inline float32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vldrwq_gather_shifted_offset_f32 (float32_t const * __base, uint32x4_t __offset)
{
  return __builtin_mve_vldrwq_gather_shifted_offset_fv4sf ((__builtin_neon_si *) __base, __offset);
34003044:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003048:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
3400304c:	681b      	ldr	r3, [r3, #0]
3400304e:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003052:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
34003056:	ed92 5f00 	ldc	15, cr5, [r2]
3400305a:	fc93 6f45 	ldc2	15, cr6, [r3], {69}	@ 0x45
3400305e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003062:	3b30      	subs	r3, #48	@ 0x30
34003064:	ed83 7f00 	stc	15, cr7, [r3]
    vecInB = vldrwq_gather_shifted_offset((float32_t const *) pSrcB->pData, vecOffsB);
34003068:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400306c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
34003070:	681b      	ldr	r3, [r3, #0]
34003072:	685a      	ldr	r2, [r3, #4]
34003074:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003078:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
3400307c:	601a      	str	r2, [r3, #0]
3400307e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003082:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
34003086:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
3400308a:	3a20      	subs	r2, #32
3400308c:	ed92 7f00 	ldc	15, cr7, [r2]
34003090:	ed83 7f00 	stc	15, cr7, [r3]
34003094:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003098:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
3400309c:	681b      	ldr	r3, [r3, #0]
3400309e:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340030a2:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
340030a6:	ed92 5f00 	ldc	15, cr5, [r2]
340030aa:	fc93 6f45 	ldc2	15, cr6, [r3], {69}	@ 0x45
340030ae:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340030b2:	3b40      	subs	r3, #64	@ 0x40
340030b4:	ed83 7f00 	stc	15, cr7, [r3]

    vecDst = vmulq(vecInA, vecInB);
340030b8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340030bc:	3b50      	subs	r3, #80	@ 0x50
340030be:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340030c2:	3a30      	subs	r2, #48	@ 0x30
340030c4:	ed92 7f00 	ldc	15, cr7, [r2]
340030c8:	ed83 7f00 	stc	15, cr7, [r3]
340030cc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340030d0:	3b60      	subs	r3, #96	@ 0x60
340030d2:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340030d6:	3a40      	subs	r2, #64	@ 0x40
340030d8:	ed92 7f00 	ldc	15, cr7, [r2]
340030dc:	ed83 7f00 	stc	15, cr7, [r3]
340030e0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340030e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
340030e8:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340030ec:	3a50      	subs	r2, #80	@ 0x50
340030ee:	ed92 7f00 	ldc	15, cr7, [r2]
340030f2:	ed83 7f00 	stc	15, cr7, [r3]
340030f6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340030fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
340030fe:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003102:	3a60      	subs	r2, #96	@ 0x60
34003104:	ed92 7f00 	ldc	15, cr7, [r2]
34003108:	ed83 7f00 	stc	15, cr7, [r3]
  return __builtin_mve_vmulq_fv4sf (__a, __b);
3400310c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003110:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
34003114:	ed93 5f00 	ldc	15, cr5, [r3]
34003118:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400311c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
34003120:	ed93 7f00 	ldc	15, cr7, [r3]
34003124:	ff04 6d56 	vmul.f32	q3, q2, q3
34003128:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400312c:	3b70      	subs	r3, #112	@ 0x70
3400312e:	ed83 7f00 	stc	15, cr7, [r3]
34003132:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003136:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
3400313a:	4a72      	ldr	r2, [pc, #456]	@ (34003304 <arm_mat_mult_f32_2x2_mve+0x358>)
3400313c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vldrwq_uv4si ((__builtin_neon_si *) __base);
3400313e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003142:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
34003146:	681b      	ldr	r3, [r3, #0]
34003148:	ed93 7f00 	ldc	15, cr7, [r3]

    vecOffsA = vldrwq_u32((uint32_t const *) offsetA1);
3400314c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003150:	3b10      	subs	r3, #16
34003152:	ed83 7f00 	stc	15, cr7, [r3]
34003156:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400315a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
3400315e:	4a6a      	ldr	r2, [pc, #424]	@ (34003308 <arm_mat_mult_f32_2x2_mve+0x35c>)
34003160:	601a      	str	r2, [r3, #0]
34003162:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
3400316a:	681b      	ldr	r3, [r3, #0]
3400316c:	ed93 7f00 	ldc	15, cr7, [r3]
    vecOffsB = vldrwq_u32((uint32_t const *) offsetB1);
34003170:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003174:	3b20      	subs	r3, #32
34003176:	ed83 7f00 	stc	15, cr7, [r3]

    vecInA = vldrwq_gather_shifted_offset((float32_t const *) pSrcA->pData, vecOffsA);
3400317a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400317e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
34003182:	681b      	ldr	r3, [r3, #0]
34003184:	685a      	ldr	r2, [r3, #4]
34003186:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400318a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
3400318e:	601a      	str	r2, [r3, #0]
34003190:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003194:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
34003198:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
3400319c:	3a10      	subs	r2, #16
3400319e:	ed92 7f00 	ldc	15, cr7, [r2]
340031a2:	ed83 7f00 	stc	15, cr7, [r3]
  return __builtin_mve_vldrwq_gather_shifted_offset_fv4sf ((__builtin_neon_si *) __base, __offset);
340031a6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340031aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
340031ae:	681b      	ldr	r3, [r3, #0]
340031b0:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340031b4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
340031b8:	ed92 5f00 	ldc	15, cr5, [r2]
340031bc:	fc93 6f45 	ldc2	15, cr6, [r3], {69}	@ 0x45
340031c0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340031c4:	3b30      	subs	r3, #48	@ 0x30
340031c6:	ed83 7f00 	stc	15, cr7, [r3]
    vecInB = vldrwq_gather_shifted_offset((float32_t const *) pSrcB->pData, vecOffsB);
340031ca:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340031ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
340031d2:	681b      	ldr	r3, [r3, #0]
340031d4:	685b      	ldr	r3, [r3, #4]
340031d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
340031da:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340031de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
340031e2:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340031e6:	3a20      	subs	r2, #32
340031e8:	ed92 7f00 	ldc	15, cr7, [r2]
340031ec:	ed83 7f00 	stc	15, cr7, [r3]
340031f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
340031f4:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340031f8:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
340031fc:	ed92 5f00 	ldc	15, cr5, [r2]
34003200:	fc93 6f45 	ldc2	15, cr6, [r3], {69}	@ 0x45
34003204:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003208:	3b40      	subs	r3, #64	@ 0x40
3400320a:	ed83 7f00 	stc	15, cr7, [r3]

    vecDst = vfmaq(vecDst, vecInA, vecInB);
3400320e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003212:	3b80      	subs	r3, #128	@ 0x80
34003214:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003218:	3a70      	subs	r2, #112	@ 0x70
3400321a:	ed92 7f00 	ldc	15, cr7, [r2]
3400321e:	ed83 7f00 	stc	15, cr7, [r3]
34003222:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003226:	3b90      	subs	r3, #144	@ 0x90
34003228:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
3400322c:	3a30      	subs	r2, #48	@ 0x30
3400322e:	ed92 7f00 	ldc	15, cr7, [r2]
34003232:	ed83 7f00 	stc	15, cr7, [r3]
34003236:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400323a:	3ba0      	subs	r3, #160	@ 0xa0
3400323c:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003240:	3a40      	subs	r2, #64	@ 0x40
34003242:	ed92 7f00 	ldc	15, cr7, [r2]
34003246:	ed83 7f00 	stc	15, cr7, [r3]
3400324a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400324e:	3bc8      	subs	r3, #200	@ 0xc8
34003250:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003254:	3a80      	subs	r2, #128	@ 0x80
34003256:	ed92 7f00 	ldc	15, cr7, [r2]
3400325a:	ed83 7f00 	stc	15, cr7, [r3]
3400325e:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003262:	3bd8      	subs	r3, #216	@ 0xd8
34003264:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
34003268:	3a90      	subs	r2, #144	@ 0x90
3400326a:	ed92 7f00 	ldc	15, cr7, [r2]
3400326e:	ed83 7f00 	stc	15, cr7, [r3]
34003272:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003276:	3be8      	subs	r3, #232	@ 0xe8
34003278:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
3400327c:	3aa0      	subs	r2, #160	@ 0xa0
3400327e:	ed92 7f00 	ldc	15, cr7, [r2]
34003282:	ed83 7f00 	stc	15, cr7, [r3]
  return __builtin_mve_vfmaq_fv4sf (__a, __b, __c);
34003286:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400328a:	3bc8      	subs	r3, #200	@ 0xc8
3400328c:	ed93 7f00 	ldc	15, cr7, [r3]
34003290:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
34003294:	3bd8      	subs	r3, #216	@ 0xd8
34003296:	ed93 5f00 	ldc	15, cr5, [r3]
3400329a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
3400329e:	3be8      	subs	r3, #232	@ 0xe8
340032a0:	ed93 3f00 	ldc	15, cr3, [r3]
340032a4:	ef04 6c52 	vfma.f32	q3, q2, q1
340032a8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340032ac:	3b70      	subs	r3, #112	@ 0x70
340032ae:	ed83 7f00 	stc	15, cr7, [r3]

    vstrwq_f32(pDst->pData, vecDst);
340032b2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340032b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
340032ba:	681b      	ldr	r3, [r3, #0]
340032bc:	685b      	ldr	r3, [r3, #4]
340032be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
340032c2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
340032c6:	3bb8      	subs	r3, #184	@ 0xb8
340032c8:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340032cc:	3a70      	subs	r2, #112	@ 0x70
340032ce:	ed92 7f00 	ldc	15, cr7, [r2]
340032d2:	ed83 7f00 	stc	15, cr7, [r3]

__extension__ extern __inline void
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vstrwq_f32 (float32_t * __addr, float32x4_t __value)
{
  __builtin_mve_vstrwq_fv4sf ((__builtin_neon_si *) __addr, __value);
340032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
340032da:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
340032de:	3ab8      	subs	r2, #184	@ 0xb8
340032e0:	ed92 7f00 	ldc	15, cr7, [r2]
340032e4:	ed83 7f00 	stc	15, cr7, [r3]
}
340032e8:	bf00      	nop

    return (ARM_MATH_SUCCESS);
340032ea:	2300      	movs	r3, #0

}
340032ec:	4618      	mov	r0, r3
340032ee:	f507 77c6 	add.w	r7, r7, #396	@ 0x18c
340032f2:	46bd      	mov	sp, r7
340032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340032f8:	4770      	bx	lr
340032fa:	bf00      	nop
340032fc:	3401e2d8 	.word	0x3401e2d8
34003300:	3401e2e8 	.word	0x3401e2e8
34003304:	3401e2f8 	.word	0x3401e2f8
34003308:	3401e308 	.word	0x3401e308

3400330c <arm_mat_mult_f32_3x3_mve>:
 */
__STATIC_INLINE  arm_status arm_mat_mult_f32_3x3_mve(
    const arm_matrix_instance_f32 *pSrcA,
    const arm_matrix_instance_f32 *pSrcB,
    arm_matrix_instance_f32 *pDst)
{
3400330c:	b480      	push	{r7}
3400330e:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
34003312:	af00      	add	r7, sp, #0
34003314:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003318:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
3400331c:	6018      	str	r0, [r3, #0]
3400331e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003322:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
34003326:	6019      	str	r1, [r3, #0]
34003328:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400332c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
34003330:	601a      	str	r2, [r3, #0]
    float32_t   *pInB = pSrcB->pData; /* input data matrix pointer B */
34003332:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003336:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
3400333a:	681b      	ldr	r3, [r3, #0]
3400333c:	685b      	ldr	r3, [r3, #4]
3400333e:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
    float32_t   *pInA = pSrcA->pData; /* input data matrix pointer A  */
34003342:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003346:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
3400334a:	681b      	ldr	r3, [r3, #0]
3400334c:	685b      	ldr	r3, [r3, #4]
3400334e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
    float32_t   *pOut = pDst->pData;  /* output data matrix pointer */
34003352:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003356:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
3400335a:	681b      	ldr	r3, [r3, #0]
3400335c:	685b      	ldr	r3, [r3, #4]
3400335e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    float32_t   *pInA0, *pInA1, *pInA2;
    f32x4_t    vecMac0, vecMac1, vecMac2;
    f32x4_t    vecInB;
    float32_t const *pSrBVec;

    pSrBVec = (float32_t const *) pInB;
34003362:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
34003366:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    pInA0 = pInA;
3400336a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
3400336e:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    pInA1 = pInA0 + MATRIX_DIM3;
34003372:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
34003376:	330c      	adds	r3, #12
34003378:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    pInA2 = pInA1 + MATRIX_DIM3;
3400337c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
34003380:	330c      	adds	r3, #12
34003382:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
34003386:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400338a:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
3400338e:	2203      	movs	r2, #3
34003390:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vctp32qv4bi (__a);
34003392:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003396:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
3400339a:	681b      	ldr	r3, [r3, #0]
3400339c:	f023 e801 	bfcsel	0, 340023a2 <LL_AHB5_GRP1_EnableClock+0xa>, 4, hi
340033a0:	eefd 3a10 	vmrs	r3, <impl def 0xd>
340033a4:	b29b      	uxth	r3, r3
    /* enable predication to disable last (4th) vector element */
    mve_pred16_t p0 = vctp32q(MATRIX_DIM3);
340033a6:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
340033aa:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340033ae:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
340033b2:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
340033b6:	601a      	str	r2, [r3, #0]
340033b8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340033bc:	f2a3 332a 	subw	r3, r3, #810	@ 0x32a
340033c0:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
340033c4:	801a      	strh	r2, [r3, #0]
  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);
340033c6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340033ca:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
340033ce:	681b      	ldr	r3, [r3, #0]
340033d0:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340033d4:	f2a2 322a 	subw	r2, r2, #810	@ 0x32a
340033d8:	8812      	ldrh	r2, [r2, #0]
340033da:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340033de:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340033e2:	ed93 7f00 	ldc	15, cr7, [r3]

    /*
     * load {b0,0, b0,1, b0,2, 0}
     */
    vecInB = vldrwq_z_f32(pSrBVec, p0);  
340033e6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340033ea:	3b30      	subs	r3, #48	@ 0x30
340033ec:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM3;
340033f0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
340033f4:	330c      	adds	r3, #12
340033f6:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    vecMac0 = vmulq(vecInB, *pInA0++);
340033fa:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340033fe:	3b40      	subs	r3, #64	@ 0x40
34003400:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003404:	3a30      	subs	r2, #48	@ 0x30
34003406:	ed92 7f00 	ldc	15, cr7, [r2]
3400340a:	ed83 7f00 	stc	15, cr7, [r3]
3400340e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
34003412:	1d1a      	adds	r2, r3, #4
34003414:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
34003418:	681b      	ldr	r3, [r3, #0]
3400341a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
3400341e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003422:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
34003426:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400342a:	3a40      	subs	r2, #64	@ 0x40
3400342c:	ed92 7f00 	ldc	15, cr7, [r2]
34003430:	ed83 7f00 	stc	15, cr7, [r3]
34003434:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003438:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
3400343c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
34003440:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vmulq_n_fv4sf (__a, __b);
34003442:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003446:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
3400344a:	ed93 7f00 	ldc	15, cr7, [r3]
3400344e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003452:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
34003456:	681b      	ldr	r3, [r3, #0]
34003458:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
3400345c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003460:	3b58      	subs	r3, #88	@ 0x58
34003462:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vmulq(vecInB, *pInA1++);
34003466:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400346a:	3b68      	subs	r3, #104	@ 0x68
3400346c:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003470:	3a30      	subs	r2, #48	@ 0x30
34003472:	ed92 7f00 	ldc	15, cr7, [r2]
34003476:	ed83 7f00 	stc	15, cr7, [r3]
3400347a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
3400347e:	1d1a      	adds	r2, r3, #4
34003480:	f8c7 2328 	str.w	r2, [r7, #808]	@ 0x328
34003484:	681b      	ldr	r3, [r3, #0]
34003486:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
3400348a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400348e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
34003492:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003496:	3a68      	subs	r2, #104	@ 0x68
34003498:	ed92 7f00 	ldc	15, cr7, [r2]
3400349c:	ed83 7f00 	stc	15, cr7, [r3]
340034a0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034a4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
340034a8:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
340034ac:	601a      	str	r2, [r3, #0]
340034ae:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034b2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
340034b6:	ed93 7f00 	ldc	15, cr7, [r3]
340034ba:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034be:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
340034c2:	681b      	ldr	r3, [r3, #0]
340034c4:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
340034c8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034cc:	3b80      	subs	r3, #128	@ 0x80
340034ce:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vmulq(vecInB, *pInA2++);
340034d2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034d6:	3b90      	subs	r3, #144	@ 0x90
340034d8:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340034dc:	3a30      	subs	r2, #48	@ 0x30
340034de:	ed92 7f00 	ldc	15, cr7, [r2]
340034e2:	ed83 7f00 	stc	15, cr7, [r3]
340034e6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
340034ea:	1d1a      	adds	r2, r3, #4
340034ec:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
340034f0:	681b      	ldr	r3, [r3, #0]
340034f2:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
340034f6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340034fa:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
340034fe:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003502:	3a90      	subs	r2, #144	@ 0x90
34003504:	ed92 7f00 	ldc	15, cr7, [r2]
34003508:	ed83 7f00 	stc	15, cr7, [r3]
3400350c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003510:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
34003514:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
34003518:	601a      	str	r2, [r3, #0]
3400351a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400351e:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
34003522:	ed93 7f00 	ldc	15, cr7, [r3]
34003526:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400352a:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
3400352e:	681b      	ldr	r3, [r3, #0]
34003530:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
34003534:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003538:	3ba8      	subs	r3, #168	@ 0xa8
3400353a:	ed83 7f00 	stc	15, cr7, [r3]
3400353e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003542:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
34003546:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
3400354a:	601a      	str	r2, [r3, #0]
3400354c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003550:	f2a3 23da 	subw	r3, r3, #730	@ 0x2da
34003554:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
34003558:	801a      	strh	r2, [r3, #0]
  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);
3400355a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400355e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
34003562:	681b      	ldr	r3, [r3, #0]
34003564:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003568:	f2a2 22da 	subw	r2, r2, #730	@ 0x2da
3400356c:	8812      	ldrh	r2, [r2, #0]
3400356e:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34003572:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34003576:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b1,0, b1,1, b1,2, 0}
     */
    vecInB = vldrwq_z_f32(pSrBVec, p0);  
3400357a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400357e:	3b30      	subs	r3, #48	@ 0x30
34003580:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM3;
34003584:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
34003588:	330c      	adds	r3, #12
3400358a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
3400358e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003592:	3bb8      	subs	r3, #184	@ 0xb8
34003594:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003598:	3a58      	subs	r2, #88	@ 0x58
3400359a:	ed92 7f00 	ldc	15, cr7, [r2]
3400359e:	ed83 7f00 	stc	15, cr7, [r3]
340035a2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340035a6:	3bc8      	subs	r3, #200	@ 0xc8
340035a8:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340035ac:	3a30      	subs	r2, #48	@ 0x30
340035ae:	ed92 7f00 	ldc	15, cr7, [r2]
340035b2:	ed83 7f00 	stc	15, cr7, [r3]
340035b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
340035ba:	1d1a      	adds	r2, r3, #4
340035bc:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
340035c0:	681b      	ldr	r3, [r3, #0]
340035c2:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
340035c6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340035ca:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
340035ce:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340035d2:	3ab8      	subs	r2, #184	@ 0xb8
340035d4:	ed92 7f00 	ldc	15, cr7, [r2]
340035d8:	ed83 7f00 	stc	15, cr7, [r3]
340035dc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340035e0:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
340035e4:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340035e8:	3ac8      	subs	r2, #200	@ 0xc8
340035ea:	ed92 7f00 	ldc	15, cr7, [r2]
340035ee:	ed83 7f00 	stc	15, cr7, [r3]
340035f2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340035f6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
340035fa:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
340035fe:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
34003600:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003604:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
34003608:	ed93 7f00 	ldc	15, cr7, [r3]
3400360c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003610:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
34003614:	ed93 5f00 	ldc	15, cr5, [r3]
34003618:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400361c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
34003620:	681b      	ldr	r3, [r3, #0]
34003622:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34003626:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400362a:	3b58      	subs	r3, #88	@ 0x58
3400362c:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
34003630:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003634:	3be0      	subs	r3, #224	@ 0xe0
34003636:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400363a:	3a80      	subs	r2, #128	@ 0x80
3400363c:	ed92 7f00 	ldc	15, cr7, [r2]
34003640:	ed83 7f00 	stc	15, cr7, [r3]
34003644:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003648:	3bf0      	subs	r3, #240	@ 0xf0
3400364a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400364e:	3a30      	subs	r2, #48	@ 0x30
34003650:	ed92 7f00 	ldc	15, cr7, [r2]
34003654:	ed83 7f00 	stc	15, cr7, [r3]
34003658:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
3400365c:	1d1a      	adds	r2, r3, #4
3400365e:	f8c7 2328 	str.w	r2, [r7, #808]	@ 0x328
34003662:	681b      	ldr	r3, [r3, #0]
34003664:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
34003668:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400366c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
34003670:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003674:	3ae0      	subs	r2, #224	@ 0xe0
34003676:	ed92 7f00 	ldc	15, cr7, [r2]
3400367a:	ed83 7f00 	stc	15, cr7, [r3]
3400367e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003682:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
34003686:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400368a:	3af0      	subs	r2, #240	@ 0xf0
3400368c:	ed92 7f00 	ldc	15, cr7, [r2]
34003690:	ed83 7f00 	stc	15, cr7, [r3]
34003694:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003698:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
3400369c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
340036a0:	601a      	str	r2, [r3, #0]
340036a2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036a6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
340036aa:	ed93 7f00 	ldc	15, cr7, [r3]
340036ae:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036b2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
340036b6:	ed93 5f00 	ldc	15, cr5, [r3]
340036ba:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
340036c2:	681b      	ldr	r3, [r3, #0]
340036c4:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340036c8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036cc:	3b80      	subs	r3, #128	@ 0x80
340036ce:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
340036d2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
340036da:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340036de:	3aa8      	subs	r2, #168	@ 0xa8
340036e0:	ed92 7f00 	ldc	15, cr7, [r2]
340036e4:	ed83 7f00 	stc	15, cr7, [r3]
340036e8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340036ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
340036f0:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340036f4:	3a30      	subs	r2, #48	@ 0x30
340036f6:	ed92 7f00 	ldc	15, cr7, [r2]
340036fa:	ed83 7f00 	stc	15, cr7, [r3]
340036fe:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
34003702:	1d1a      	adds	r2, r3, #4
34003704:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
34003708:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400370c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
34003710:	681b      	ldr	r3, [r3, #0]
34003712:	6013      	str	r3, [r2, #0]
34003714:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003718:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
3400371c:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003720:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
34003724:	ed92 7f00 	ldc	15, cr7, [r2]
34003728:	ed83 7f00 	stc	15, cr7, [r3]
3400372c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003730:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
34003734:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003738:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
3400373c:	ed92 7f00 	ldc	15, cr7, [r2]
34003740:	ed83 7f00 	stc	15, cr7, [r3]
34003744:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003748:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
3400374c:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003750:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
34003754:	6812      	ldr	r2, [r2, #0]
34003756:	601a      	str	r2, [r3, #0]
34003758:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400375c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
34003760:	ed93 7f00 	ldc	15, cr7, [r3]
34003764:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003768:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
3400376c:	ed93 5f00 	ldc	15, cr5, [r3]
34003770:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003774:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
34003778:	681b      	ldr	r3, [r3, #0]
3400377a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400377e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003782:	3ba8      	subs	r3, #168	@ 0xa8
34003784:	ed83 7f00 	stc	15, cr7, [r3]
34003788:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400378c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
34003790:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
34003794:	601a      	str	r2, [r3, #0]
34003796:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400379a:	f2a3 235a 	subw	r3, r3, #602	@ 0x25a
3400379e:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
340037a2:	801a      	strh	r2, [r3, #0]
  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);
340037a4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340037a8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
340037ac:	681b      	ldr	r3, [r3, #0]
340037ae:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340037b2:	f2a2 225a 	subw	r2, r2, #602	@ 0x25a
340037b6:	8812      	ldrh	r2, [r2, #0]
340037b8:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340037bc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340037c0:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b2,0, b2,1 , b2,2, 0}
     */
    vecInB = vldrwq_z_f32(pSrBVec, p0);  
340037c4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340037c8:	3b30      	subs	r3, #48	@ 0x30
340037ca:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM3;
340037ce:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
340037d2:	330c      	adds	r3, #12
340037d4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
340037d8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340037dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
340037e0:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340037e4:	3a58      	subs	r2, #88	@ 0x58
340037e6:	ed92 7f00 	ldc	15, cr7, [r2]
340037ea:	ed83 7f00 	stc	15, cr7, [r3]
340037ee:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340037f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
340037f6:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340037fa:	3a30      	subs	r2, #48	@ 0x30
340037fc:	ed92 7f00 	ldc	15, cr7, [r2]
34003800:	ed83 7f00 	stc	15, cr7, [r3]
34003804:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
34003808:	1d1a      	adds	r2, r3, #4
3400380a:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
3400380e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003812:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
34003816:	681b      	ldr	r3, [r3, #0]
34003818:	6013      	str	r3, [r2, #0]
3400381a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400381e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
34003822:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003826:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
3400382a:	ed92 7f00 	ldc	15, cr7, [r2]
3400382e:	ed83 7f00 	stc	15, cr7, [r3]
34003832:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003836:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
3400383a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400383e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34003842:	ed92 7f00 	ldc	15, cr7, [r2]
34003846:	ed83 7f00 	stc	15, cr7, [r3]
3400384a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400384e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
34003852:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003856:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
3400385a:	6812      	ldr	r2, [r2, #0]
3400385c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400385e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003862:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
34003866:	ed93 7f00 	ldc	15, cr7, [r3]
3400386a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400386e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
34003872:	ed93 5f00 	ldc	15, cr5, [r3]
34003876:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400387a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
3400387e:	681b      	ldr	r3, [r3, #0]
34003880:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34003884:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003888:	3b58      	subs	r3, #88	@ 0x58
3400388a:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
3400388e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003892:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
34003896:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400389a:	3a80      	subs	r2, #128	@ 0x80
3400389c:	ed92 7f00 	ldc	15, cr7, [r2]
340038a0:	ed83 7f00 	stc	15, cr7, [r3]
340038a4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340038a8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
340038ac:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340038b0:	3a30      	subs	r2, #48	@ 0x30
340038b2:	ed92 7f00 	ldc	15, cr7, [r2]
340038b6:	ed83 7f00 	stc	15, cr7, [r3]
340038ba:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
340038be:	1d1a      	adds	r2, r3, #4
340038c0:	f8c7 2328 	str.w	r2, [r7, #808]	@ 0x328
340038c4:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340038c8:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
340038cc:	681b      	ldr	r3, [r3, #0]
340038ce:	6013      	str	r3, [r2, #0]
340038d0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340038d4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
340038d8:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340038dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
340038e0:	ed92 7f00 	ldc	15, cr7, [r2]
340038e4:	ed83 7f00 	stc	15, cr7, [r3]
340038e8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340038ec:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
340038f0:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340038f4:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
340038f8:	ed92 7f00 	ldc	15, cr7, [r2]
340038fc:	ed83 7f00 	stc	15, cr7, [r3]
34003900:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003904:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
34003908:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400390c:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
34003910:	6812      	ldr	r2, [r2, #0]
34003912:	601a      	str	r2, [r3, #0]
34003914:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003918:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
3400391c:	ed93 7f00 	ldc	15, cr7, [r3]
34003920:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003924:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
34003928:	ed93 5f00 	ldc	15, cr5, [r3]
3400392c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003930:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
34003934:	681b      	ldr	r3, [r3, #0]
34003936:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400393a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400393e:	3b80      	subs	r3, #128	@ 0x80
34003940:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
34003944:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003948:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
3400394c:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003950:	3aa8      	subs	r2, #168	@ 0xa8
34003952:	ed92 7f00 	ldc	15, cr7, [r2]
34003956:	ed83 7f00 	stc	15, cr7, [r3]
3400395a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400395e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34003962:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003966:	3a30      	subs	r2, #48	@ 0x30
34003968:	ed92 7f00 	ldc	15, cr7, [r2]
3400396c:	ed83 7f00 	stc	15, cr7, [r3]
34003970:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
34003974:	1d1a      	adds	r2, r3, #4
34003976:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
3400397a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
3400397e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
34003982:	681b      	ldr	r3, [r3, #0]
34003984:	6013      	str	r3, [r2, #0]
34003986:	f507 7350 	add.w	r3, r7, #832	@ 0x340
3400398a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
3400398e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003992:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
34003996:	ed92 7f00 	ldc	15, cr7, [r2]
3400399a:	ed83 7f00 	stc	15, cr7, [r3]
3400399e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039a2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
340039a6:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340039aa:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
340039ae:	ed92 7f00 	ldc	15, cr7, [r2]
340039b2:	ed83 7f00 	stc	15, cr7, [r3]
340039b6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
340039be:	f507 7250 	add.w	r2, r7, #832	@ 0x340
340039c2:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
340039c6:	6812      	ldr	r2, [r2, #0]
340039c8:	601a      	str	r2, [r3, #0]
340039ca:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039ce:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
340039d2:	ed93 7f00 	ldc	15, cr7, [r3]
340039d6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039da:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
340039de:	ed93 5f00 	ldc	15, cr5, [r3]
340039e2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
340039ea:	681b      	ldr	r3, [r3, #0]
340039ec:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340039f0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039f4:	3ba8      	subs	r3, #168	@ 0xa8
340039f6:	ed83 7f00 	stc	15, cr7, [r3]
340039fa:	f507 7350 	add.w	r3, r7, #832	@ 0x340
340039fe:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34003a02:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
34003a06:	601a      	str	r2, [r3, #0]
34003a08:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
34003a10:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003a14:	3a58      	subs	r2, #88	@ 0x58
34003a16:	ed92 7f00 	ldc	15, cr7, [r2]
34003a1a:	ed83 7f00 	stc	15, cr7, [r3]
34003a1e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a22:	f5a3 73ed 	sub.w	r3, r3, #474	@ 0x1da
34003a26:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
34003a2a:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
34003a2c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a30:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34003a34:	681b      	ldr	r3, [r3, #0]
34003a36:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003a3a:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
34003a3e:	ed92 7f00 	ldc	15, cr7, [r2]
34003a42:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003a46:	f5a2 72ed 	sub.w	r2, r2, #474	@ 0x1da
34003a4a:	8812      	ldrh	r2, [r2, #0]
34003a4c:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34003a50:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34003a54:	ed83 7f00 	stc	15, cr7, [r3]
}
34003a58:	bf00      	nop

    /* partial vector stores */
    vstrwq_p_f32(pOut, vecMac0, p0); 
    pOut += MATRIX_DIM3;
34003a5a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
34003a5e:	330c      	adds	r3, #12
34003a60:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
34003a64:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a68:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
34003a6c:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
34003a70:	601a      	str	r2, [r3, #0]
34003a72:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a76:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
34003a7a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003a7e:	3a80      	subs	r2, #128	@ 0x80
34003a80:	ed92 7f00 	ldc	15, cr7, [r2]
34003a84:	ed83 7f00 	stc	15, cr7, [r3]
34003a88:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a8c:	f5a3 73e1 	sub.w	r3, r3, #450	@ 0x1c2
34003a90:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
34003a94:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
34003a96:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003a9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
34003a9e:	681b      	ldr	r3, [r3, #0]
34003aa0:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003aa4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
34003aa8:	ed92 7f00 	ldc	15, cr7, [r2]
34003aac:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003ab0:	f5a2 72e1 	sub.w	r2, r2, #450	@ 0x1c2
34003ab4:	8812      	ldrh	r2, [r2, #0]
34003ab6:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34003aba:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34003abe:	ed83 7f00 	stc	15, cr7, [r3]
}
34003ac2:	bf00      	nop
    vstrwq_p_f32(pOut, vecMac1, p0); 
    pOut += MATRIX_DIM3;
34003ac4:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
34003ac8:	330c      	adds	r3, #12
34003aca:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
34003ace:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003ad2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
34003ad6:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
34003ada:	601a      	str	r2, [r3, #0]
34003adc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003ae0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34003ae4:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003ae8:	3aa8      	subs	r2, #168	@ 0xa8
34003aea:	ed92 7f00 	ldc	15, cr7, [r2]
34003aee:	ed83 7f00 	stc	15, cr7, [r3]
34003af2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003af6:	f5a3 73d5 	sub.w	r3, r3, #426	@ 0x1aa
34003afa:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
34003afe:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
34003b00:	f507 7350 	add.w	r3, r7, #832	@ 0x340
34003b04:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
34003b08:	681b      	ldr	r3, [r3, #0]
34003b0a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003b0e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
34003b12:	ed92 7f00 	ldc	15, cr7, [r2]
34003b16:	f507 7250 	add.w	r2, r7, #832	@ 0x340
34003b1a:	f5a2 72d5 	sub.w	r2, r2, #426	@ 0x1aa
34003b1e:	8812      	ldrh	r2, [r2, #0]
34003b20:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34003b24:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34003b28:	ed83 7f00 	stc	15, cr7, [r3]
}
34003b2c:	bf00      	nop
    vstrwq_p_f32(pOut, vecMac2, p0);
    /*
     * Return to application
     */
    return (ARM_MATH_SUCCESS);
34003b2e:	2300      	movs	r3, #0
}
34003b30:	4618      	mov	r0, r3
34003b32:	f507 7751 	add.w	r7, r7, #836	@ 0x344
34003b36:	46bd      	mov	sp, r7
34003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
34003b3c:	4770      	bx	lr

34003b3e <arm_mat_mult_f32_4x4_mve>:

__STATIC_INLINE arm_status arm_mat_mult_f32_4x4_mve(
    const arm_matrix_instance_f32 *pSrcA,
    const arm_matrix_instance_f32 *pSrcB,
    arm_matrix_instance_f32 *pDst)
{
34003b3e:	b480      	push	{r7}
34003b40:	f2ad 5da4 	subw	sp, sp, #1444	@ 0x5a4
34003b44:	af00      	add	r7, sp, #0
34003b46:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b4a:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
34003b4e:	6018      	str	r0, [r3, #0]
34003b50:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b54:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
34003b58:	6019      	str	r1, [r3, #0]
34003b5a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b5e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
34003b62:	601a      	str	r2, [r3, #0]
    float32_t const *pSrBVec;
    float32_t *pInB = pSrcB->pData; /* input data matrix pointer B */
34003b64:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b68:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
34003b6c:	681b      	ldr	r3, [r3, #0]
34003b6e:	685b      	ldr	r3, [r3, #4]
34003b70:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
    float32_t *pInA = pSrcA->pData; /* input data matrix pointer A  */
34003b74:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b78:	f2a3 5394 	subw	r3, r3, #1428	@ 0x594
34003b7c:	681b      	ldr	r3, [r3, #0]
34003b7e:	685b      	ldr	r3, [r3, #4]
34003b80:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
    float32_t *pOut = pDst->pData;  /* output data matrix pointer */
34003b84:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003b88:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
34003b8c:	681b      	ldr	r3, [r3, #0]
34003b8e:	685b      	ldr	r3, [r3, #4]
34003b90:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
    float32_t *pInA0, *pInA1, *pInA2, *pInA3;
    f32x4_t vecMac0, vecMac1, vecMac2, vecMac3;
    f32x4_t vecInB;

    pSrBVec = (float32_t const *) pInB;
34003b94:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
34003b98:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

    pInA0 = pInA;
34003b9c:	f8d7 3598 	ldr.w	r3, [r7, #1432]	@ 0x598
34003ba0:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
    pInA1 = pInA0 + MATRIX_DIM4;
34003ba4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
34003ba8:	3310      	adds	r3, #16
34003baa:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
    pInA2 = pInA1 + MATRIX_DIM4;
34003bae:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
34003bb2:	3310      	adds	r3, #16
34003bb4:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
    pInA3 = pInA2 + MATRIX_DIM4;
34003bb8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
34003bbc:	3310      	adds	r3, #16
34003bbe:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
34003bc2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003bc6:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
34003bca:	f8d7 2590 	ldr.w	r2, [r7, #1424]	@ 0x590
34003bce:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vld1q_fv4sf((__builtin_neon_si *) __base);
34003bd0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003bd4:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
34003bd8:	681b      	ldr	r3, [r3, #0]
34003bda:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b0,0, b0,1, b0,2, b0,3}
     */
    vecInB = vld1q(pSrBVec);  
34003bde:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003be2:	3b30      	subs	r3, #48	@ 0x30
34003be4:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM4;
34003be8:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
34003bec:	3310      	adds	r3, #16
34003bee:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

    vecMac0 = vmulq(vecInB, *pInA0++);
34003bf2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003bf6:	3b40      	subs	r3, #64	@ 0x40
34003bf8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003bfc:	3a30      	subs	r2, #48	@ 0x30
34003bfe:	ed92 7f00 	ldc	15, cr7, [r2]
34003c02:	ed83 7f00 	stc	15, cr7, [r3]
34003c06:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
34003c0a:	1d1a      	adds	r2, r3, #4
34003c0c:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
34003c10:	681b      	ldr	r3, [r3, #0]
34003c12:	f207 525c 	addw	r2, r7, #1372	@ 0x55c
34003c16:	6013      	str	r3, [r2, #0]
34003c18:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c1c:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
34003c20:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003c24:	3a40      	subs	r2, #64	@ 0x40
34003c26:	ed92 7f00 	ldc	15, cr7, [r2]
34003c2a:	ed83 7f00 	stc	15, cr7, [r3]
34003c2e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c32:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
34003c36:	f207 525c 	addw	r2, r7, #1372	@ 0x55c
34003c3a:	6812      	ldr	r2, [r2, #0]
34003c3c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vmulq_n_fv4sf (__a, __b);
34003c3e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c42:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
34003c46:	ed93 7f00 	ldc	15, cr7, [r3]
34003c4a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c4e:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
34003c52:	681b      	ldr	r3, [r3, #0]
34003c54:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
34003c58:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c5c:	3b58      	subs	r3, #88	@ 0x58
34003c5e:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vmulq(vecInB, *pInA1++);
34003c62:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c66:	3b68      	subs	r3, #104	@ 0x68
34003c68:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003c6c:	3a30      	subs	r2, #48	@ 0x30
34003c6e:	ed92 7f00 	ldc	15, cr7, [r2]
34003c72:	ed83 7f00 	stc	15, cr7, [r3]
34003c76:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
34003c7a:	1d1a      	adds	r2, r3, #4
34003c7c:	f8c7 2588 	str.w	r2, [r7, #1416]	@ 0x588
34003c80:	681b      	ldr	r3, [r3, #0]
34003c82:	f207 5234 	addw	r2, r7, #1332	@ 0x534
34003c86:	6013      	str	r3, [r2, #0]
34003c88:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003c8c:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
34003c90:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003c94:	3a68      	subs	r2, #104	@ 0x68
34003c96:	ed92 7f00 	ldc	15, cr7, [r2]
34003c9a:	ed83 7f00 	stc	15, cr7, [r3]
34003c9e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ca2:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34003ca6:	f207 5234 	addw	r2, r7, #1332	@ 0x534
34003caa:	6812      	ldr	r2, [r2, #0]
34003cac:	601a      	str	r2, [r3, #0]
34003cae:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003cb2:	f5a3 63ae 	sub.w	r3, r3, #1392	@ 0x570
34003cb6:	ed93 7f00 	ldc	15, cr7, [r3]
34003cba:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003cbe:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34003cc2:	681b      	ldr	r3, [r3, #0]
34003cc4:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
34003cc8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ccc:	3b80      	subs	r3, #128	@ 0x80
34003cce:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vmulq(vecInB, *pInA2++);
34003cd2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003cd6:	3b90      	subs	r3, #144	@ 0x90
34003cd8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003cdc:	3a30      	subs	r2, #48	@ 0x30
34003cde:	ed92 7f00 	ldc	15, cr7, [r2]
34003ce2:	ed83 7f00 	stc	15, cr7, [r3]
34003ce6:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
34003cea:	1d1a      	adds	r2, r3, #4
34003cec:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
34003cf0:	681b      	ldr	r3, [r3, #0]
34003cf2:	f207 520c 	addw	r2, r7, #1292	@ 0x50c
34003cf6:	6013      	str	r3, [r2, #0]
34003cf8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003cfc:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
34003d00:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003d04:	3a90      	subs	r2, #144	@ 0x90
34003d06:	ed92 7f00 	ldc	15, cr7, [r2]
34003d0a:	ed83 7f00 	stc	15, cr7, [r3]
34003d0e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d12:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
34003d16:	f207 520c 	addw	r2, r7, #1292	@ 0x50c
34003d1a:	6812      	ldr	r2, [r2, #0]
34003d1c:	601a      	str	r2, [r3, #0]
34003d1e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d22:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
34003d26:	ed93 7f00 	ldc	15, cr7, [r3]
34003d2a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d2e:	f2a3 535c 	subw	r3, r3, #1372	@ 0x55c
34003d32:	681b      	ldr	r3, [r3, #0]
34003d34:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
34003d38:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d3c:	3ba8      	subs	r3, #168	@ 0xa8
34003d3e:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac3 = vmulq(vecInB, *pInA3++);
34003d42:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d46:	3bb8      	subs	r3, #184	@ 0xb8
34003d48:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003d4c:	3a30      	subs	r2, #48	@ 0x30
34003d4e:	ed92 7f00 	ldc	15, cr7, [r2]
34003d52:	ed83 7f00 	stc	15, cr7, [r3]
34003d56:	f8d7 3580 	ldr.w	r3, [r7, #1408]	@ 0x580
34003d5a:	1d1a      	adds	r2, r3, #4
34003d5c:	f8c7 2580 	str.w	r2, [r7, #1408]	@ 0x580
34003d60:	681b      	ldr	r3, [r3, #0]
34003d62:	f207 42e4 	addw	r2, r7, #1252	@ 0x4e4
34003d66:	6013      	str	r3, [r2, #0]
34003d68:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d6c:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
34003d70:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003d74:	3ab8      	subs	r2, #184	@ 0xb8
34003d76:	ed92 7f00 	ldc	15, cr7, [r2]
34003d7a:	ed83 7f00 	stc	15, cr7, [r3]
34003d7e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d82:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
34003d86:	f207 42e4 	addw	r2, r7, #1252	@ 0x4e4
34003d8a:	6812      	ldr	r2, [r2, #0]
34003d8c:	601a      	str	r2, [r3, #0]
34003d8e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d92:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
34003d96:	ed93 7f00 	ldc	15, cr7, [r3]
34003d9a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003d9e:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
34003da2:	681b      	ldr	r3, [r3, #0]
34003da4:	ee37 6e63 	cdp	14, 3, cr6, cr7, cr3, {3}
34003da8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003dac:	3bd0      	subs	r3, #208	@ 0xd0
34003dae:	ed83 7f00 	stc	15, cr7, [r3]
34003db2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003db6:	f5a3 63a6 	sub.w	r3, r3, #1328	@ 0x530
34003dba:	f8d7 2590 	ldr.w	r2, [r7, #1424]	@ 0x590
34003dbe:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vld1q_fv4sf((__builtin_neon_si *) __base);
34003dc0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003dc4:	f5a3 63a6 	sub.w	r3, r3, #1328	@ 0x530
34003dc8:	681b      	ldr	r3, [r3, #0]
34003dca:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b1,0, b1,1, b1,2, b1,3}
     */
    vecInB = vld1q(pSrBVec);  
34003dce:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003dd2:	3b30      	subs	r3, #48	@ 0x30
34003dd4:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM4;
34003dd8:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
34003ddc:	3310      	adds	r3, #16
34003dde:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
34003de2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003de6:	3be0      	subs	r3, #224	@ 0xe0
34003de8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003dec:	3a58      	subs	r2, #88	@ 0x58
34003dee:	ed92 7f00 	ldc	15, cr7, [r2]
34003df2:	ed83 7f00 	stc	15, cr7, [r3]
34003df6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003dfa:	3bf0      	subs	r3, #240	@ 0xf0
34003dfc:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003e00:	3a30      	subs	r2, #48	@ 0x30
34003e02:	ed92 7f00 	ldc	15, cr7, [r2]
34003e06:	ed83 7f00 	stc	15, cr7, [r3]
34003e0a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
34003e0e:	1d1a      	adds	r2, r3, #4
34003e10:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
34003e14:	681b      	ldr	r3, [r3, #0]
34003e16:	f207 42ac 	addw	r2, r7, #1196	@ 0x4ac
34003e1a:	6013      	str	r3, [r2, #0]
34003e1c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e20:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
34003e24:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003e28:	3ae0      	subs	r2, #224	@ 0xe0
34003e2a:	ed92 7f00 	ldc	15, cr7, [r2]
34003e2e:	ed83 7f00 	stc	15, cr7, [r3]
34003e32:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e36:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
34003e3a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003e3e:	3af0      	subs	r2, #240	@ 0xf0
34003e40:	ed92 7f00 	ldc	15, cr7, [r2]
34003e44:	ed83 7f00 	stc	15, cr7, [r3]
34003e48:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e4c:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
34003e50:	f207 42ac 	addw	r2, r7, #1196	@ 0x4ac
34003e54:	6812      	ldr	r2, [r2, #0]
34003e56:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
34003e58:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e5c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
34003e60:	ed93 7f00 	ldc	15, cr7, [r3]
34003e64:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e68:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
34003e6c:	ed93 5f00 	ldc	15, cr5, [r3]
34003e70:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e74:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
34003e78:	681b      	ldr	r3, [r3, #0]
34003e7a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34003e7e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e82:	3b58      	subs	r3, #88	@ 0x58
34003e84:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
34003e88:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
34003e90:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003e94:	3a80      	subs	r2, #128	@ 0x80
34003e96:	ed92 7f00 	ldc	15, cr7, [r2]
34003e9a:	ed83 7f00 	stc	15, cr7, [r3]
34003e9e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ea2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
34003ea6:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003eaa:	3a30      	subs	r2, #48	@ 0x30
34003eac:	ed92 7f00 	ldc	15, cr7, [r2]
34003eb0:	ed83 7f00 	stc	15, cr7, [r3]
34003eb4:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
34003eb8:	1d1a      	adds	r2, r3, #4
34003eba:	f8c7 2588 	str.w	r2, [r7, #1416]	@ 0x588
34003ebe:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003ec2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
34003ec6:	681b      	ldr	r3, [r3, #0]
34003ec8:	6013      	str	r3, [r2, #0]
34003eca:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ece:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
34003ed2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003ed6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
34003eda:	ed92 7f00 	ldc	15, cr7, [r2]
34003ede:	ed83 7f00 	stc	15, cr7, [r3]
34003ee2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ee6:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
34003eea:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003eee:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
34003ef2:	ed92 7f00 	ldc	15, cr7, [r2]
34003ef6:	ed83 7f00 	stc	15, cr7, [r3]
34003efa:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003efe:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
34003f02:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003f06:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
34003f0a:	6812      	ldr	r2, [r2, #0]
34003f0c:	601a      	str	r2, [r3, #0]
34003f0e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f12:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
34003f16:	ed93 7f00 	ldc	15, cr7, [r3]
34003f1a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f1e:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
34003f22:	ed93 5f00 	ldc	15, cr5, [r3]
34003f26:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f2a:	f2a3 5304 	subw	r3, r3, #1284	@ 0x504
34003f2e:	681b      	ldr	r3, [r3, #0]
34003f30:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34003f34:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f38:	3b80      	subs	r3, #128	@ 0x80
34003f3a:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
34003f3e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
34003f46:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003f4a:	3aa8      	subs	r2, #168	@ 0xa8
34003f4c:	ed92 7f00 	ldc	15, cr7, [r2]
34003f50:	ed83 7f00 	stc	15, cr7, [r3]
34003f54:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
34003f5c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003f60:	3a30      	subs	r2, #48	@ 0x30
34003f62:	ed92 7f00 	ldc	15, cr7, [r2]
34003f66:	ed83 7f00 	stc	15, cr7, [r3]
34003f6a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
34003f6e:	1d1a      	adds	r2, r3, #4
34003f70:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
34003f74:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003f78:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
34003f7c:	681b      	ldr	r3, [r3, #0]
34003f7e:	6013      	str	r3, [r2, #0]
34003f80:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f84:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
34003f88:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003f8c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
34003f90:	ed92 7f00 	ldc	15, cr7, [r2]
34003f94:	ed83 7f00 	stc	15, cr7, [r3]
34003f98:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003f9c:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
34003fa0:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003fa4:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34003fa8:	ed92 7f00 	ldc	15, cr7, [r2]
34003fac:	ed83 7f00 	stc	15, cr7, [r3]
34003fb0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003fb4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
34003fb8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34003fbc:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
34003fc0:	6812      	ldr	r2, [r2, #0]
34003fc2:	601a      	str	r2, [r3, #0]
34003fc4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003fc8:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
34003fcc:	ed93 7f00 	ldc	15, cr7, [r3]
34003fd0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003fd4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
34003fd8:	ed93 5f00 	ldc	15, cr5, [r3]
34003fdc:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003fe0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
34003fe4:	681b      	ldr	r3, [r3, #0]
34003fe6:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34003fea:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003fee:	3ba8      	subs	r3, #168	@ 0xa8
34003ff0:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac3 = vfmaq(vecMac3, vecInB, *pInA3++);
34003ff4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34003ff8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
34003ffc:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004000:	3ad0      	subs	r2, #208	@ 0xd0
34004002:	ed92 7f00 	ldc	15, cr7, [r2]
34004006:	ed83 7f00 	stc	15, cr7, [r3]
3400400a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400400e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
34004012:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004016:	3a30      	subs	r2, #48	@ 0x30
34004018:	ed92 7f00 	ldc	15, cr7, [r2]
3400401c:	ed83 7f00 	stc	15, cr7, [r3]
34004020:	f8d7 3580 	ldr.w	r3, [r7, #1408]	@ 0x580
34004024:	1d1a      	adds	r2, r3, #4
34004026:	f8c7 2580 	str.w	r2, [r7, #1408]	@ 0x580
3400402a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400402e:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
34004032:	681b      	ldr	r3, [r3, #0]
34004034:	6013      	str	r3, [r2, #0]
34004036:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400403a:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
3400403e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004042:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
34004046:	ed92 7f00 	ldc	15, cr7, [r2]
3400404a:	ed83 7f00 	stc	15, cr7, [r3]
3400404e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004052:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
34004056:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400405a:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
3400405e:	ed92 7f00 	ldc	15, cr7, [r2]
34004062:	ed83 7f00 	stc	15, cr7, [r3]
34004066:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400406a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
3400406e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004072:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
34004076:	6812      	ldr	r2, [r2, #0]
34004078:	601a      	str	r2, [r3, #0]
3400407a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400407e:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
34004082:	ed93 7f00 	ldc	15, cr7, [r3]
34004086:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400408a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
3400408e:	ed93 5f00 	ldc	15, cr5, [r3]
34004092:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004096:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
3400409a:	681b      	ldr	r3, [r3, #0]
3400409c:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340040a0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040a4:	3bd0      	subs	r3, #208	@ 0xd0
340040a6:	ed83 7f00 	stc	15, cr7, [r3]
340040aa:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040ae:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
340040b2:	f8d7 2590 	ldr.w	r2, [r7, #1424]	@ 0x590
340040b6:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vld1q_fv4sf((__builtin_neon_si *) __base);
340040b8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040bc:	f5a3 6392 	sub.w	r3, r3, #1168	@ 0x490
340040c0:	681b      	ldr	r3, [r3, #0]
340040c2:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b2,0, b2,1, b2,2, b2,3}
     */
    vecInB = vld1q(pSrBVec);  
340040c6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040ca:	3b30      	subs	r3, #48	@ 0x30
340040cc:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM4;
340040d0:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
340040d4:	3310      	adds	r3, #16
340040d6:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
340040da:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040de:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
340040e2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340040e6:	3a58      	subs	r2, #88	@ 0x58
340040e8:	ed92 7f00 	ldc	15, cr7, [r2]
340040ec:	ed83 7f00 	stc	15, cr7, [r3]
340040f0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340040f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
340040f8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340040fc:	3a30      	subs	r2, #48	@ 0x30
340040fe:	ed92 7f00 	ldc	15, cr7, [r2]
34004102:	ed83 7f00 	stc	15, cr7, [r3]
34004106:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
3400410a:	1d1a      	adds	r2, r3, #4
3400410c:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
34004110:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004114:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
34004118:	681b      	ldr	r3, [r3, #0]
3400411a:	6013      	str	r3, [r2, #0]
3400411c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004120:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
34004124:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004128:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
3400412c:	ed92 7f00 	ldc	15, cr7, [r2]
34004130:	ed83 7f00 	stc	15, cr7, [r3]
34004134:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004138:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
3400413c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004140:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
34004144:	ed92 7f00 	ldc	15, cr7, [r2]
34004148:	ed83 7f00 	stc	15, cr7, [r3]
3400414c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004150:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
34004154:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004158:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
3400415c:	6812      	ldr	r2, [r2, #0]
3400415e:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
34004160:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004164:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
34004168:	ed93 7f00 	ldc	15, cr7, [r3]
3400416c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004170:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
34004174:	ed93 5f00 	ldc	15, cr5, [r3]
34004178:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400417c:	f2a3 438c 	subw	r3, r3, #1164	@ 0x48c
34004180:	681b      	ldr	r3, [r3, #0]
34004182:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004186:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400418a:	3b58      	subs	r3, #88	@ 0x58
3400418c:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
34004190:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004194:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34004198:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400419c:	3a80      	subs	r2, #128	@ 0x80
3400419e:	ed92 7f00 	ldc	15, cr7, [r2]
340041a2:	ed83 7f00 	stc	15, cr7, [r3]
340041a6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340041aa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
340041ae:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340041b2:	3a30      	subs	r2, #48	@ 0x30
340041b4:	ed92 7f00 	ldc	15, cr7, [r2]
340041b8:	ed83 7f00 	stc	15, cr7, [r3]
340041bc:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
340041c0:	1d1a      	adds	r2, r3, #4
340041c2:	f8c7 2588 	str.w	r2, [r7, #1416]	@ 0x588
340041c6:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340041ca:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
340041ce:	681b      	ldr	r3, [r3, #0]
340041d0:	6013      	str	r3, [r2, #0]
340041d2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340041d6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
340041da:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340041de:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
340041e2:	ed92 7f00 	ldc	15, cr7, [r2]
340041e6:	ed83 7f00 	stc	15, cr7, [r3]
340041ea:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340041ee:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
340041f2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340041f6:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
340041fa:	ed92 7f00 	ldc	15, cr7, [r2]
340041fe:	ed83 7f00 	stc	15, cr7, [r3]
34004202:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004206:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
3400420a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400420e:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
34004212:	6812      	ldr	r2, [r2, #0]
34004214:	601a      	str	r2, [r3, #0]
34004216:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400421a:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
3400421e:	ed93 7f00 	ldc	15, cr7, [r3]
34004222:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004226:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
3400422a:	ed93 5f00 	ldc	15, cr5, [r3]
3400422e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004232:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
34004236:	681b      	ldr	r3, [r3, #0]
34004238:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400423c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004240:	3b80      	subs	r3, #128	@ 0x80
34004242:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
34004246:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400424a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
3400424e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004252:	3aa8      	subs	r2, #168	@ 0xa8
34004254:	ed92 7f00 	ldc	15, cr7, [r2]
34004258:	ed83 7f00 	stc	15, cr7, [r3]
3400425c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004260:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
34004264:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004268:	3a30      	subs	r2, #48	@ 0x30
3400426a:	ed92 7f00 	ldc	15, cr7, [r2]
3400426e:	ed83 7f00 	stc	15, cr7, [r3]
34004272:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
34004276:	1d1a      	adds	r2, r3, #4
34004278:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
3400427c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004280:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
34004284:	681b      	ldr	r3, [r3, #0]
34004286:	6013      	str	r3, [r2, #0]
34004288:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400428c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
34004290:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004294:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
34004298:	ed92 7f00 	ldc	15, cr7, [r2]
3400429c:	ed83 7f00 	stc	15, cr7, [r3]
340042a0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042a4:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
340042a8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340042ac:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
340042b0:	ed92 7f00 	ldc	15, cr7, [r2]
340042b4:	ed83 7f00 	stc	15, cr7, [r3]
340042b8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042bc:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
340042c0:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340042c4:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
340042c8:	6812      	ldr	r2, [r2, #0]
340042ca:	601a      	str	r2, [r3, #0]
340042cc:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042d0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
340042d4:	ed93 7f00 	ldc	15, cr7, [r3]
340042d8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042dc:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
340042e0:	ed93 5f00 	ldc	15, cr5, [r3]
340042e4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042e8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
340042ec:	681b      	ldr	r3, [r3, #0]
340042ee:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340042f2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340042f6:	3ba8      	subs	r3, #168	@ 0xa8
340042f8:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac3 = vfmaq(vecMac3, vecInB, *pInA3++);
340042fc:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004300:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
34004304:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004308:	3ad0      	subs	r2, #208	@ 0xd0
3400430a:	ed92 7f00 	ldc	15, cr7, [r2]
3400430e:	ed83 7f00 	stc	15, cr7, [r3]
34004312:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004316:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
3400431a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400431e:	3a30      	subs	r2, #48	@ 0x30
34004320:	ed92 7f00 	ldc	15, cr7, [r2]
34004324:	ed83 7f00 	stc	15, cr7, [r3]
34004328:	f8d7 3580 	ldr.w	r3, [r7, #1408]	@ 0x580
3400432c:	1d1a      	adds	r2, r3, #4
3400432e:	f8c7 2580 	str.w	r2, [r7, #1408]	@ 0x580
34004332:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004336:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
3400433a:	681b      	ldr	r3, [r3, #0]
3400433c:	6013      	str	r3, [r2, #0]
3400433e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004342:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34004346:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400434a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
3400434e:	ed92 7f00 	ldc	15, cr7, [r2]
34004352:	ed83 7f00 	stc	15, cr7, [r3]
34004356:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400435a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
3400435e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004362:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
34004366:	ed92 7f00 	ldc	15, cr7, [r2]
3400436a:	ed83 7f00 	stc	15, cr7, [r3]
3400436e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004372:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
34004376:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400437a:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
3400437e:	6812      	ldr	r2, [r2, #0]
34004380:	601a      	str	r2, [r3, #0]
34004382:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004386:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3400438a:	ed93 7f00 	ldc	15, cr7, [r3]
3400438e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004392:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
34004396:	ed93 5f00 	ldc	15, cr5, [r3]
3400439a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400439e:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
340043a2:	681b      	ldr	r3, [r3, #0]
340043a4:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340043a8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043ac:	3bd0      	subs	r3, #208	@ 0xd0
340043ae:	ed83 7f00 	stc	15, cr7, [r3]
340043b2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043b6:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
340043ba:	f8d7 2590 	ldr.w	r2, [r7, #1424]	@ 0x590
340043be:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vld1q_fv4sf((__builtin_neon_si *) __base);
340043c0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043c4:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
340043c8:	681b      	ldr	r3, [r3, #0]
340043ca:	ed93 7f00 	ldc	15, cr7, [r3]
    /*
     * load {b3,0, b3,1, b3,2, b3,3}
     */
    vecInB = vld1q(pSrBVec);  
340043ce:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043d2:	3b30      	subs	r3, #48	@ 0x30
340043d4:	ed83 7f00 	stc	15, cr7, [r3]
    pSrBVec += MATRIX_DIM4;
340043d8:	f8d7 3590 	ldr.w	r3, [r7, #1424]	@ 0x590
340043dc:	3310      	adds	r3, #16
340043de:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590

    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
340043e2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
340043ea:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340043ee:	3a58      	subs	r2, #88	@ 0x58
340043f0:	ed92 7f00 	ldc	15, cr7, [r2]
340043f4:	ed83 7f00 	stc	15, cr7, [r3]
340043f8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340043fc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
34004400:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004404:	3a30      	subs	r2, #48	@ 0x30
34004406:	ed92 7f00 	ldc	15, cr7, [r2]
3400440a:	ed83 7f00 	stc	15, cr7, [r3]
3400440e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
34004412:	1d1a      	adds	r2, r3, #4
34004414:	f8c7 258c 	str.w	r2, [r7, #1420]	@ 0x58c
34004418:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400441c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
34004420:	681b      	ldr	r3, [r3, #0]
34004422:	6013      	str	r3, [r2, #0]
34004424:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004428:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
3400442c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004430:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
34004434:	ed92 7f00 	ldc	15, cr7, [r2]
34004438:	ed83 7f00 	stc	15, cr7, [r3]
3400443c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004440:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
34004444:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004448:	f5a2 720c 	sub.w	r2, r2, #560	@ 0x230
3400444c:	ed92 7f00 	ldc	15, cr7, [r2]
34004450:	ed83 7f00 	stc	15, cr7, [r3]
34004454:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004458:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
3400445c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004460:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
34004464:	6812      	ldr	r2, [r2, #0]
34004466:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
34004468:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400446c:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
34004470:	ed93 7f00 	ldc	15, cr7, [r3]
34004474:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004478:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
3400447c:	ed93 5f00 	ldc	15, cr5, [r3]
34004480:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004484:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
34004488:	681b      	ldr	r3, [r3, #0]
3400448a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400448e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004492:	3b58      	subs	r3, #88	@ 0x58
34004494:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
34004498:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400449c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
340044a0:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340044a4:	3a80      	subs	r2, #128	@ 0x80
340044a6:	ed92 7f00 	ldc	15, cr7, [r2]
340044aa:	ed83 7f00 	stc	15, cr7, [r3]
340044ae:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340044b2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
340044b6:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340044ba:	3a30      	subs	r2, #48	@ 0x30
340044bc:	ed92 7f00 	ldc	15, cr7, [r2]
340044c0:	ed83 7f00 	stc	15, cr7, [r3]
340044c4:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
340044c8:	1d1a      	adds	r2, r3, #4
340044ca:	f8c7 2588 	str.w	r2, [r7, #1416]	@ 0x588
340044ce:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340044d2:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
340044d6:	681b      	ldr	r3, [r3, #0]
340044d8:	6013      	str	r3, [r2, #0]
340044da:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340044de:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
340044e2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340044e6:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
340044ea:	ed92 7f00 	ldc	15, cr7, [r2]
340044ee:	ed83 7f00 	stc	15, cr7, [r3]
340044f2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340044f6:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
340044fa:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340044fe:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
34004502:	ed92 7f00 	ldc	15, cr7, [r2]
34004506:	ed83 7f00 	stc	15, cr7, [r3]
3400450a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400450e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
34004512:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004516:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
3400451a:	6812      	ldr	r2, [r2, #0]
3400451c:	601a      	str	r2, [r3, #0]
3400451e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004522:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
34004526:	ed93 7f00 	ldc	15, cr7, [r3]
3400452a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400452e:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
34004532:	ed93 5f00 	ldc	15, cr5, [r3]
34004536:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400453a:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
3400453e:	681b      	ldr	r3, [r3, #0]
34004540:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004544:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004548:	3b80      	subs	r3, #128	@ 0x80
3400454a:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
3400454e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004552:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
34004556:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400455a:	3aa8      	subs	r2, #168	@ 0xa8
3400455c:	ed92 7f00 	ldc	15, cr7, [r2]
34004560:	ed83 7f00 	stc	15, cr7, [r3]
34004564:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004568:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
3400456c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004570:	3a30      	subs	r2, #48	@ 0x30
34004572:	ed92 7f00 	ldc	15, cr7, [r2]
34004576:	ed83 7f00 	stc	15, cr7, [r3]
3400457a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
3400457e:	1d1a      	adds	r2, r3, #4
34004580:	f8c7 2584 	str.w	r2, [r7, #1412]	@ 0x584
34004584:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004588:	f5a2 7221 	sub.w	r2, r2, #644	@ 0x284
3400458c:	681b      	ldr	r3, [r3, #0]
3400458e:	6013      	str	r3, [r2, #0]
34004590:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004594:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
34004598:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400459c:	f5a2 721c 	sub.w	r2, r2, #624	@ 0x270
340045a0:	ed92 7f00 	ldc	15, cr7, [r2]
340045a4:	ed83 7f00 	stc	15, cr7, [r3]
340045a8:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045ac:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
340045b0:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340045b4:	f5a2 7220 	sub.w	r2, r2, #640	@ 0x280
340045b8:	ed92 7f00 	ldc	15, cr7, [r2]
340045bc:	ed83 7f00 	stc	15, cr7, [r3]
340045c0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045c4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
340045c8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340045cc:	f5a2 7221 	sub.w	r2, r2, #644	@ 0x284
340045d0:	6812      	ldr	r2, [r2, #0]
340045d2:	601a      	str	r2, [r3, #0]
340045d4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045d8:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
340045dc:	ed93 7f00 	ldc	15, cr7, [r3]
340045e0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045e4:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
340045e8:	ed93 5f00 	ldc	15, cr5, [r3]
340045ec:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045f0:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
340045f4:	681b      	ldr	r3, [r3, #0]
340045f6:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340045fa:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340045fe:	3ba8      	subs	r3, #168	@ 0xa8
34004600:	ed83 7f00 	stc	15, cr7, [r3]
    vecMac3 = vfmaq(vecMac3, vecInB, *pInA3++);
34004604:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004608:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
3400460c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004610:	3ad0      	subs	r2, #208	@ 0xd0
34004612:	ed92 7f00 	ldc	15, cr7, [r2]
34004616:	ed83 7f00 	stc	15, cr7, [r3]
3400461a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400461e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
34004622:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004626:	3a30      	subs	r2, #48	@ 0x30
34004628:	ed92 7f00 	ldc	15, cr7, [r2]
3400462c:	ed83 7f00 	stc	15, cr7, [r3]
34004630:	f8d7 3580 	ldr.w	r3, [r7, #1408]	@ 0x580
34004634:	1d1a      	adds	r2, r3, #4
34004636:	f8c7 2580 	str.w	r2, [r7, #1408]	@ 0x580
3400463a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400463e:	f5a2 722b 	sub.w	r2, r2, #684	@ 0x2ac
34004642:	681b      	ldr	r3, [r3, #0]
34004644:	6013      	str	r3, [r2, #0]
34004646:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400464a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
3400464e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004652:	f5a2 7226 	sub.w	r2, r2, #664	@ 0x298
34004656:	ed92 7f00 	ldc	15, cr7, [r2]
3400465a:	ed83 7f00 	stc	15, cr7, [r3]
3400465e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004662:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
34004666:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400466a:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
3400466e:	ed92 7f00 	ldc	15, cr7, [r2]
34004672:	ed83 7f00 	stc	15, cr7, [r3]
34004676:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400467a:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
3400467e:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004682:	f5a2 722b 	sub.w	r2, r2, #684	@ 0x2ac
34004686:	6812      	ldr	r2, [r2, #0]
34004688:	601a      	str	r2, [r3, #0]
3400468a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400468e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
34004692:	ed93 7f00 	ldc	15, cr7, [r3]
34004696:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400469a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
3400469e:	ed93 5f00 	ldc	15, cr5, [r3]
340046a2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046a6:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
340046aa:	681b      	ldr	r3, [r3, #0]
340046ac:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340046b0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046b4:	3bd0      	subs	r3, #208	@ 0xd0
340046b6:	ed83 7f00 	stc	15, cr7, [r3]

    vst1q(pOut, vecMac0);  
340046ba:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046be:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
340046c2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340046c6:	3a58      	subs	r2, #88	@ 0x58
340046c8:	ed92 7f00 	ldc	15, cr7, [r2]
340046cc:	ed83 7f00 	stc	15, cr7, [r3]
340046d0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046d4:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
340046d8:	f8d7 2594 	ldr.w	r2, [r7, #1428]	@ 0x594
340046dc:	601a      	str	r2, [r3, #0]
340046de:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046e2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
340046e6:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340046ea:	f5a2 7230 	sub.w	r2, r2, #704	@ 0x2c0
340046ee:	ed92 7f00 	ldc	15, cr7, [r2]
340046f2:	ed83 7f00 	stc	15, cr7, [r3]

__extension__ extern __inline void
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vst1q_f32 (float32_t * __addr, float32x4_t __value)
{
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
340046f6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340046fa:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
340046fe:	681b      	ldr	r3, [r3, #0]
34004700:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004704:	f5a2 7254 	sub.w	r2, r2, #848	@ 0x350
34004708:	ed92 7f00 	ldc	15, cr7, [r2]
3400470c:	ed83 7f00 	stc	15, cr7, [r3]
}
34004710:	bf00      	nop
    pOut += MATRIX_DIM4;
34004712:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
34004716:	3310      	adds	r3, #16
34004718:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
    vst1q(pOut, vecMac1);  
3400471c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004720:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
34004724:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004728:	3a80      	subs	r2, #128	@ 0x80
3400472a:	ed92 7f00 	ldc	15, cr7, [r2]
3400472e:	ed83 7f00 	stc	15, cr7, [r3]
34004732:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004736:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
3400473a:	f8d7 2594 	ldr.w	r2, [r7, #1428]	@ 0x594
3400473e:	601a      	str	r2, [r3, #0]
34004740:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004744:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
34004748:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400474c:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
34004750:	ed92 7f00 	ldc	15, cr7, [r2]
34004754:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34004758:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
3400475c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
34004760:	681b      	ldr	r3, [r3, #0]
34004762:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004766:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
3400476a:	ed92 7f00 	ldc	15, cr7, [r2]
3400476e:	ed83 7f00 	stc	15, cr7, [r3]
}
34004772:	bf00      	nop
    pOut += MATRIX_DIM4;
34004774:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
34004778:	3310      	adds	r3, #16
3400477a:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
    vst1q(pOut, vecMac2);  
3400477e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004782:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
34004786:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400478a:	3aa8      	subs	r2, #168	@ 0xa8
3400478c:	ed92 7f00 	ldc	15, cr7, [r2]
34004790:	ed83 7f00 	stc	15, cr7, [r3]
34004794:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004798:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
3400479c:	f8d7 2594 	ldr.w	r2, [r7, #1428]	@ 0x594
340047a0:	601a      	str	r2, [r3, #0]
340047a2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340047a6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
340047aa:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340047ae:	f5a2 7238 	sub.w	r2, r2, #736	@ 0x2e0
340047b2:	ed92 7f00 	ldc	15, cr7, [r2]
340047b6:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
340047ba:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340047be:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
340047c2:	681b      	ldr	r3, [r3, #0]
340047c4:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340047c8:	f5a2 7248 	sub.w	r2, r2, #800	@ 0x320
340047cc:	ed92 7f00 	ldc	15, cr7, [r2]
340047d0:	ed83 7f00 	stc	15, cr7, [r3]
}
340047d4:	bf00      	nop
    pOut += MATRIX_DIM4;
340047d6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	@ 0x594
340047da:	3310      	adds	r3, #16
340047dc:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
    vst1q(pOut, vecMac3);
340047e0:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340047e4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
340047e8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
340047ec:	3ad0      	subs	r2, #208	@ 0xd0
340047ee:	ed92 7f00 	ldc	15, cr7, [r2]
340047f2:	ed83 7f00 	stc	15, cr7, [r3]
340047f6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
340047fa:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
340047fe:	f8d7 2594 	ldr.w	r2, [r7, #1428]	@ 0x594
34004802:	601a      	str	r2, [r3, #0]
34004804:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004808:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
3400480c:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
34004810:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
34004814:	ed92 7f00 	ldc	15, cr7, [r2]
34004818:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
3400481c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
34004820:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
34004824:	681b      	ldr	r3, [r3, #0]
34004826:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
3400482a:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
3400482e:	ed92 7f00 	ldc	15, cr7, [r2]
34004832:	ed83 7f00 	stc	15, cr7, [r3]
}
34004836:	bf00      	nop
    /*
     * Return to application
     */
    return (ARM_MATH_SUCCESS);
34004838:	2300      	movs	r3, #0
}
3400483a:	4618      	mov	r0, r3
3400483c:	f207 57a4 	addw	r7, r7, #1444	@ 0x5a4
34004840:	46bd      	mov	sp, r7
34004842:	f85d 7b04 	ldr.w	r7, [sp], #4
34004846:	4770      	bx	lr

34004848 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
34004848:	b580      	push	{r7, lr}
3400484a:	f5ad 6db0 	sub.w	sp, sp, #1408	@ 0x580
3400484e:	af00      	add	r7, sp, #0
34004850:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004854:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34004858:	6018      	str	r0, [r3, #0]
3400485a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400485e:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
34004862:	6019      	str	r1, [r3, #0]
34004864:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004868:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
3400486c:	601a      	str	r2, [r3, #0]
    float32_t  *pInB = pSrcB->pData;        /* input data matrix pointer B */
3400486e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004872:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
34004876:	681b      	ldr	r3, [r3, #0]
34004878:	685b      	ldr	r3, [r3, #4]
3400487a:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
    float32_t  *pInA = pSrcA->pData;        /* input data matrix pointer A  */
3400487e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004882:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34004886:	681b      	ldr	r3, [r3, #0]
34004888:	685b      	ldr	r3, [r3, #4]
3400488a:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
    float32_t  *pOut = pDst->pData;         /* output data matrix pointer */
3400488e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004892:	f2a3 537c 	subw	r3, r3, #1404	@ 0x57c
34004896:	681b      	ldr	r3, [r3, #0]
34004898:	685b      	ldr	r3, [r3, #4]
3400489a:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
    int         numRowsA = pSrcA->numRows;  /* number of rows of input matrix A */
3400489e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340048a2:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
340048a6:	681b      	ldr	r3, [r3, #0]
340048a8:	881b      	ldrh	r3, [r3, #0]
340048aa:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
    int         numColsB = pSrcB->numCols;  /* number of columns of input matrix B */
340048ae:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340048b2:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
340048b6:	681b      	ldr	r3, [r3, #0]
340048b8:	885b      	ldrh	r3, [r3, #2]
340048ba:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    int         numColsA = pSrcA->numCols;  /* number of columns of input matrix A */
340048be:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340048c2:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
340048c6:	681b      	ldr	r3, [r3, #0]
340048c8:	885b      	ldrh	r3, [r3, #2]
340048ca:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
  }
  else
#endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
  {
      /* small squared matrix specialized routines */
    if(numRowsA == numColsB && numColsB == numColsA) {
340048ce:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
340048d2:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340048d6:	429a      	cmp	r2, r3
340048d8:	d162      	bne.n	340049a0 <arm_mat_mult_f32+0x158>
340048da:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
340048de:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
340048e2:	429a      	cmp	r2, r3
340048e4:	d15c      	bne.n	340049a0 <arm_mat_mult_f32+0x158>
        if (numRowsA == 1)
340048e6:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
340048ea:	2b01      	cmp	r3, #1
340048ec:	d110      	bne.n	34004910 <arm_mat_mult_f32+0xc8>
        {
           pOut[0] = pInA[0] * pInB[0];
340048ee:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
340048f2:	ed93 7a00 	vldr	s14, [r3]
340048f6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
340048fa:	edd3 7a00 	vldr	s15, [r3]
340048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
34004902:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
34004906:	edc3 7a00 	vstr	s15, [r3]
           return(ARM_MATH_SUCCESS);
3400490a:	2300      	movs	r3, #0
3400490c:	f001 b87e 	b.w	34005a0c <arm_mat_mult_f32+0x11c4>
        }
        else if(numRowsA == 2)
34004910:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
34004914:	2b02      	cmp	r3, #2
34004916:	d113      	bne.n	34004940 <arm_mat_mult_f32+0xf8>
            return arm_mat_mult_f32_2x2_mve(pSrcA, pSrcB, pDst);
34004918:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400491c:	f2a3 527c 	subw	r2, r3, #1404	@ 0x57c
34004920:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004924:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
34004928:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400492c:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34004930:	6812      	ldr	r2, [r2, #0]
34004932:	6809      	ldr	r1, [r1, #0]
34004934:	6818      	ldr	r0, [r3, #0]
34004936:	f7fe fb39 	bl	34002fac <arm_mat_mult_f32_2x2_mve>
3400493a:	4603      	mov	r3, r0
3400493c:	f001 b866 	b.w	34005a0c <arm_mat_mult_f32+0x11c4>
        else if(numRowsA == 3)
34004940:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
34004944:	2b03      	cmp	r3, #3
34004946:	d113      	bne.n	34004970 <arm_mat_mult_f32+0x128>
            return arm_mat_mult_f32_3x3_mve(pSrcA, pSrcB, pDst);
34004948:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400494c:	f2a3 527c 	subw	r2, r3, #1404	@ 0x57c
34004950:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004954:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
34004958:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400495c:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34004960:	6812      	ldr	r2, [r2, #0]
34004962:	6809      	ldr	r1, [r1, #0]
34004964:	6818      	ldr	r0, [r3, #0]
34004966:	f7fe fcd1 	bl	3400330c <arm_mat_mult_f32_3x3_mve>
3400496a:	4603      	mov	r3, r0
3400496c:	f001 b84e 	b.w	34005a0c <arm_mat_mult_f32+0x11c4>
        else if(numRowsA == 4)
34004970:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
34004974:	2b04      	cmp	r3, #4
34004976:	d113      	bne.n	340049a0 <arm_mat_mult_f32+0x158>
            return arm_mat_mult_f32_4x4_mve(pSrcA, pSrcB, pDst);
34004978:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400497c:	f2a3 527c 	subw	r2, r3, #1404	@ 0x57c
34004980:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004984:	f5a3 61af 	sub.w	r1, r3, #1400	@ 0x578
34004988:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400498c:	f2a3 5374 	subw	r3, r3, #1396	@ 0x574
34004990:	6812      	ldr	r2, [r2, #0]
34004992:	6809      	ldr	r1, [r1, #0]
34004994:	6818      	ldr	r0, [r3, #0]
34004996:	f7ff f8d2 	bl	34003b3e <arm_mat_mult_f32_4x4_mve>
3400499a:	4603      	mov	r3, r0
3400499c:	f001 b836 	b.w	34005a0c <arm_mat_mult_f32+0x11c4>
    }

    /* main loop process 4 rows */
    i = numRowsA >> 2;
340049a0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
340049a4:	109b      	asrs	r3, r3, #2
340049a6:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
    while (i > 0U)
340049aa:	f000 be1c 	b.w	340055e6 <arm_mat_mult_f32+0xd9e>
        float32_t *pOut0, *pOut1, *pOut2, *pOut3;
        f32x4_t vecMac0, vecMac1, vecMac2, vecMac3;
        f32x4_t vecInB;

        /* pointers to 4 consecutive output rows */
        pOut0 = pOut;
340049ae:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
340049b2:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
        pOut1 = pOut0 + numColsB;
340049b6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340049ba:	009b      	lsls	r3, r3, #2
340049bc:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
340049c0:	4413      	add	r3, r2
340049c2:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
        pOut2 = pOut1 + numColsB;
340049c6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340049ca:	009b      	lsls	r3, r3, #2
340049cc:	f8d7 2554 	ldr.w	r2, [r7, #1364]	@ 0x554
340049d0:	4413      	add	r3, r2
340049d2:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
        pOut3 = pOut2 + numColsB;
340049d6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340049da:	009b      	lsls	r3, r3, #2
340049dc:	f8d7 2550 	ldr.w	r2, [r7, #1360]	@ 0x550
340049e0:	4413      	add	r3, r2
340049e2:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
        pInB0 = pInB;
340049e6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
340049ea:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c

        uint32_t  k = numColsB >> 2;
340049ee:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340049f2:	109b      	asrs	r3, r3, #2
340049f4:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
        while (k > 0U)
340049f8:	e2cf      	b.n	34004f9a <arm_mat_mult_f32+0x752>
        {
            /* pointers to 4 consecutive Matrix A rows */
            pInA0 = pInA;
340049fa:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
340049fe:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
            pInA1 = pInA0 + numColsA;
34004a02:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004a06:	009b      	lsls	r3, r3, #2
34004a08:	f8d7 256c 	ldr.w	r2, [r7, #1388]	@ 0x56c
34004a0c:	4413      	add	r3, r2
34004a0e:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
            pInA2 = pInA1 + numColsA;
34004a12:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004a16:	009b      	lsls	r3, r3, #2
34004a18:	f8d7 2568 	ldr.w	r2, [r7, #1384]	@ 0x568
34004a1c:	4413      	add	r3, r2
34004a1e:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
            pInA3 = pInA2 + numColsA;
34004a22:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004a26:	009b      	lsls	r3, r3, #2
34004a28:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
34004a2c:	4413      	add	r3, r2
34004a2e:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
34004a32:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a36:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
34004a3a:	f04f 0200 	mov.w	r2, #0
34004a3e:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vdupq_n_fv4sf (__a);
34004a40:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a44:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
34004a48:	681b      	ldr	r3, [r3, #0]
34004a4a:	eea6 3b10 	vdup.32	q3, r3

            vecMac0 = vdupq_n_f32(0.0f);
34004a4e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a52:	3b48      	subs	r3, #72	@ 0x48
34004a54:	ed83 7f00 	stc	15, cr7, [r3]
34004a58:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a5c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
34004a60:	f04f 0200 	mov.w	r2, #0
34004a64:	601a      	str	r2, [r3, #0]
34004a66:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a6a:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
34004a6e:	681b      	ldr	r3, [r3, #0]
34004a70:	eea6 3b10 	vdup.32	q3, r3
            vecMac1 = vdupq_n_f32(0.0f);
34004a74:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a78:	3b58      	subs	r3, #88	@ 0x58
34004a7a:	ed83 7f00 	stc	15, cr7, [r3]
34004a7e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a82:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
34004a86:	f04f 0200 	mov.w	r2, #0
34004a8a:	601a      	str	r2, [r3, #0]
34004a8c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a90:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
34004a94:	681b      	ldr	r3, [r3, #0]
34004a96:	eea6 3b10 	vdup.32	q3, r3
            vecMac2 = vdupq_n_f32(0.0f);
34004a9a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004a9e:	3b68      	subs	r3, #104	@ 0x68
34004aa0:	ed83 7f00 	stc	15, cr7, [r3]
34004aa4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004aa8:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
34004aac:	f04f 0200 	mov.w	r2, #0
34004ab0:	601a      	str	r2, [r3, #0]
34004ab2:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ab6:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
34004aba:	681b      	ldr	r3, [r3, #0]
34004abc:	eea6 3b10 	vdup.32	q3, r3
            vecMac3 = vdupq_n_f32(0.0f);
34004ac0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ac4:	3b78      	subs	r3, #120	@ 0x78
34004ac6:	ed83 7f00 	stc	15, cr7, [r3]

            blkCnt = numColsA;
34004aca:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004ace:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574

            while (blkCnt > 0U)
34004ad2:	e186      	b.n	34004de2 <arm_mat_mult_f32+0x59a>
            {
                /*
                 * load {bi,4n+0, bi,4n+1, bi,4n+2, bi,4n+3}
                 */
                vecInB = *(f32x4_t *)pInB0; /* vldrwq_f32(pInB0, 0); */
34004ad4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ad8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
34004adc:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
34004ae0:	ed92 7f00 	ldc	15, cr7, [r2]
34004ae4:	ed83 7f00 	stc	15, cr7, [r3]

                vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
34004ae8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004aec:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
34004af0:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004af4:	3a48      	subs	r2, #72	@ 0x48
34004af6:	ed92 7f00 	ldc	15, cr7, [r2]
34004afa:	ed83 7f00 	stc	15, cr7, [r3]
34004afe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b02:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
34004b06:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004b0a:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34004b0e:	ed92 7f00 	ldc	15, cr7, [r2]
34004b12:	ed83 7f00 	stc	15, cr7, [r3]
34004b16:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
34004b1a:	1d1a      	adds	r2, r3, #4
34004b1c:	f8c7 256c 	str.w	r2, [r7, #1388]	@ 0x56c
34004b20:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004b24:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
34004b28:	681b      	ldr	r3, [r3, #0]
34004b2a:	6013      	str	r3, [r2, #0]
34004b2c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b30:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34004b34:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004b38:	f5a2 720c 	sub.w	r2, r2, #560	@ 0x230
34004b3c:	ed92 7f00 	ldc	15, cr7, [r2]
34004b40:	ed83 7f00 	stc	15, cr7, [r3]
34004b44:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b48:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
34004b4c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004b50:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
34004b54:	ed92 7f00 	ldc	15, cr7, [r2]
34004b58:	ed83 7f00 	stc	15, cr7, [r3]
34004b5c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b60:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
34004b64:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004b68:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
34004b6c:	6812      	ldr	r2, [r2, #0]
34004b6e:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
34004b70:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b74:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
34004b78:	ed93 7f00 	ldc	15, cr7, [r3]
34004b7c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b80:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
34004b84:	ed93 5f00 	ldc	15, cr5, [r3]
34004b88:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b8c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
34004b90:	681b      	ldr	r3, [r3, #0]
34004b92:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004b96:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004b9a:	3b48      	subs	r3, #72	@ 0x48
34004b9c:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
34004ba0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ba4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
34004ba8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004bac:	3a58      	subs	r2, #88	@ 0x58
34004bae:	ed92 7f00 	ldc	15, cr7, [r2]
34004bb2:	ed83 7f00 	stc	15, cr7, [r3]
34004bb6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004bba:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34004bbe:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004bc2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34004bc6:	ed92 7f00 	ldc	15, cr7, [r2]
34004bca:	ed83 7f00 	stc	15, cr7, [r3]
34004bce:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
34004bd2:	1d1a      	adds	r2, r3, #4
34004bd4:	f8c7 2568 	str.w	r2, [r7, #1384]	@ 0x568
34004bd8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004bdc:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
34004be0:	681b      	ldr	r3, [r3, #0]
34004be2:	6013      	str	r3, [r2, #0]
34004be4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004be8:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
34004bec:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004bf0:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
34004bf4:	ed92 7f00 	ldc	15, cr7, [r2]
34004bf8:	ed83 7f00 	stc	15, cr7, [r3]
34004bfc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c00:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
34004c04:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004c08:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
34004c0c:	ed92 7f00 	ldc	15, cr7, [r2]
34004c10:	ed83 7f00 	stc	15, cr7, [r3]
34004c14:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c18:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
34004c1c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004c20:	f5a2 721b 	sub.w	r2, r2, #620	@ 0x26c
34004c24:	6812      	ldr	r2, [r2, #0]
34004c26:	601a      	str	r2, [r3, #0]
34004c28:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c2c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
34004c30:	ed93 7f00 	ldc	15, cr7, [r3]
34004c34:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c38:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
34004c3c:	ed93 5f00 	ldc	15, cr5, [r3]
34004c40:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c44:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
34004c48:	681b      	ldr	r3, [r3, #0]
34004c4a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004c4e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c52:	3b58      	subs	r3, #88	@ 0x58
34004c54:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
34004c58:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c5c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
34004c60:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004c64:	3a68      	subs	r2, #104	@ 0x68
34004c66:	ed92 7f00 	ldc	15, cr7, [r2]
34004c6a:	ed83 7f00 	stc	15, cr7, [r3]
34004c6e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004c72:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
34004c76:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004c7a:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34004c7e:	ed92 7f00 	ldc	15, cr7, [r2]
34004c82:	ed83 7f00 	stc	15, cr7, [r3]
34004c86:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
34004c8a:	1d1a      	adds	r2, r3, #4
34004c8c:	f8c7 2564 	str.w	r2, [r7, #1380]	@ 0x564
34004c90:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004c94:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
34004c98:	681b      	ldr	r3, [r3, #0]
34004c9a:	6013      	str	r3, [r2, #0]
34004c9c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ca0:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
34004ca4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004ca8:	f5a2 7220 	sub.w	r2, r2, #640	@ 0x280
34004cac:	ed92 7f00 	ldc	15, cr7, [r2]
34004cb0:	ed83 7f00 	stc	15, cr7, [r3]
34004cb4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004cb8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
34004cbc:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004cc0:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
34004cc4:	ed92 7f00 	ldc	15, cr7, [r2]
34004cc8:	ed83 7f00 	stc	15, cr7, [r3]
34004ccc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004cd0:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
34004cd4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004cd8:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
34004cdc:	6812      	ldr	r2, [r2, #0]
34004cde:	601a      	str	r2, [r3, #0]
34004ce0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ce4:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
34004ce8:	ed93 7f00 	ldc	15, cr7, [r3]
34004cec:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004cf0:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
34004cf4:	ed93 5f00 	ldc	15, cr5, [r3]
34004cf8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004cfc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
34004d00:	681b      	ldr	r3, [r3, #0]
34004d02:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004d06:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d0a:	3b68      	subs	r3, #104	@ 0x68
34004d0c:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac3 = vfmaq(vecMac3, vecInB, *pInA3++);
34004d10:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d14:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
34004d18:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d1c:	3a78      	subs	r2, #120	@ 0x78
34004d1e:	ed92 7f00 	ldc	15, cr7, [r2]
34004d22:	ed83 7f00 	stc	15, cr7, [r3]
34004d26:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d2a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
34004d2e:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d32:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34004d36:	ed92 7f00 	ldc	15, cr7, [r2]
34004d3a:	ed83 7f00 	stc	15, cr7, [r3]
34004d3e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
34004d42:	1d1a      	adds	r2, r3, #4
34004d44:	f8c7 2560 	str.w	r2, [r7, #1376]	@ 0x560
34004d48:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d4c:	f5a2 722f 	sub.w	r2, r2, #700	@ 0x2bc
34004d50:	681b      	ldr	r3, [r3, #0]
34004d52:	6013      	str	r3, [r2, #0]
34004d54:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d58:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
34004d5c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d60:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
34004d64:	ed92 7f00 	ldc	15, cr7, [r2]
34004d68:	ed83 7f00 	stc	15, cr7, [r3]
34004d6c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d70:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
34004d74:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d78:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
34004d7c:	ed92 7f00 	ldc	15, cr7, [r2]
34004d80:	ed83 7f00 	stc	15, cr7, [r3]
34004d84:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d88:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
34004d8c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004d90:	f5a2 722f 	sub.w	r2, r2, #700	@ 0x2bc
34004d94:	6812      	ldr	r2, [r2, #0]
34004d96:	601a      	str	r2, [r3, #0]
34004d98:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004d9c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
34004da0:	ed93 7f00 	ldc	15, cr7, [r3]
34004da4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004da8:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
34004dac:	ed93 5f00 	ldc	15, cr5, [r3]
34004db0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004db4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
34004db8:	681b      	ldr	r3, [r3, #0]
34004dba:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34004dbe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004dc2:	3b78      	subs	r3, #120	@ 0x78
34004dc4:	ed83 7f00 	stc	15, cr7, [r3]

                pInB0 = pInB0 + numColsB;
34004dc8:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
34004dcc:	009b      	lsls	r3, r3, #2
34004dce:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
34004dd2:	4413      	add	r3, r2
34004dd4:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
                /*
                 * Decrement the blockSize loop counter
                 */
                blkCnt--;
34004dd8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
34004ddc:	3b01      	subs	r3, #1
34004dde:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
            while (blkCnt > 0U)
34004de2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
34004de6:	2b00      	cmp	r3, #0
34004de8:	f47f ae74 	bne.w	34004ad4 <arm_mat_mult_f32+0x28c>
            }

            /* Store the results (4 x 4 block) in the destination buffer */
            vst1q(pOut0, vecMac0);  
34004dec:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004df0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
34004df4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004df8:	3a48      	subs	r2, #72	@ 0x48
34004dfa:	ed92 7f00 	ldc	15, cr7, [r2]
34004dfe:	ed83 7f00 	stc	15, cr7, [r3]
34004e02:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e06:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
34004e0a:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
34004e0e:	601a      	str	r2, [r3, #0]
34004e10:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e14:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
34004e18:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004e1c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
34004e20:	ed92 7f00 	ldc	15, cr7, [r2]
34004e24:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34004e28:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e2c:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
34004e30:	681b      	ldr	r3, [r3, #0]
34004e32:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004e36:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
34004e3a:	ed92 7f00 	ldc	15, cr7, [r2]
34004e3e:	ed83 7f00 	stc	15, cr7, [r3]
}
34004e42:	bf00      	nop
            pOut0 += 4;
34004e44:	f8d7 3558 	ldr.w	r3, [r7, #1368]	@ 0x558
34004e48:	3310      	adds	r3, #16
34004e4a:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
            vst1q(pOut1, vecMac1);  
34004e4e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e52:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
34004e56:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004e5a:	3a58      	subs	r2, #88	@ 0x58
34004e5c:	ed92 7f00 	ldc	15, cr7, [r2]
34004e60:	ed83 7f00 	stc	15, cr7, [r3]
34004e64:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e68:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
34004e6c:	f8d7 2554 	ldr.w	r2, [r7, #1364]	@ 0x554
34004e70:	601a      	str	r2, [r3, #0]
34004e72:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e76:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
34004e7a:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004e7e:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
34004e82:	ed92 7f00 	ldc	15, cr7, [r2]
34004e86:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34004e8a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004e8e:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
34004e92:	681b      	ldr	r3, [r3, #0]
34004e94:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004e98:	f5a2 726c 	sub.w	r2, r2, #944	@ 0x3b0
34004e9c:	ed92 7f00 	ldc	15, cr7, [r2]
34004ea0:	ed83 7f00 	stc	15, cr7, [r3]
}
34004ea4:	bf00      	nop
            pOut1 += 4;
34004ea6:	f8d7 3554 	ldr.w	r3, [r7, #1364]	@ 0x554
34004eaa:	3310      	adds	r3, #16
34004eac:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
            vst1q(pOut2, vecMac2);  
34004eb0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004eb4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
34004eb8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004ebc:	3a68      	subs	r2, #104	@ 0x68
34004ebe:	ed92 7f00 	ldc	15, cr7, [r2]
34004ec2:	ed83 7f00 	stc	15, cr7, [r3]
34004ec6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004eca:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
34004ece:	f8d7 2550 	ldr.w	r2, [r7, #1360]	@ 0x550
34004ed2:	601a      	str	r2, [r3, #0]
34004ed4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ed8:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
34004edc:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004ee0:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
34004ee4:	ed92 7f00 	ldc	15, cr7, [r2]
34004ee8:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34004eec:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004ef0:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
34004ef4:	681b      	ldr	r3, [r3, #0]
34004ef6:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004efa:	f5a2 7266 	sub.w	r2, r2, #920	@ 0x398
34004efe:	ed92 7f00 	ldc	15, cr7, [r2]
34004f02:	ed83 7f00 	stc	15, cr7, [r3]
}
34004f06:	bf00      	nop
            pOut2 += 4;
34004f08:	f8d7 3550 	ldr.w	r3, [r7, #1360]	@ 0x550
34004f0c:	3310      	adds	r3, #16
34004f0e:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
            vst1q(pOut3, vecMac3);  
34004f12:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004f16:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
34004f1a:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004f1e:	3a78      	subs	r2, #120	@ 0x78
34004f20:	ed92 7f00 	ldc	15, cr7, [r2]
34004f24:	ed83 7f00 	stc	15, cr7, [r3]
34004f28:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004f2c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
34004f30:	f8d7 254c 	ldr.w	r2, [r7, #1356]	@ 0x54c
34004f34:	601a      	str	r2, [r3, #0]
34004f36:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004f3a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
34004f3e:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004f42:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
34004f46:	ed92 7f00 	ldc	15, cr7, [r2]
34004f4a:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34004f4e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004f52:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
34004f56:	681b      	ldr	r3, [r3, #0]
34004f58:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34004f5c:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
34004f60:	ed92 7f00 	ldc	15, cr7, [r2]
34004f64:	ed83 7f00 	stc	15, cr7, [r3]
}
34004f68:	bf00      	nop
            pOut3 += 4;
34004f6a:	f8d7 354c 	ldr.w	r3, [r7, #1356]	@ 0x54c
34004f6e:	3310      	adds	r3, #16
34004f70:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c

            /*
             * rewind
             */
            pInB0 -= (numColsB * numColsA) - 4;
34004f74:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
34004f78:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
34004f7c:	fb02 f303 	mul.w	r3, r2, r3
34004f80:	f1c3 0304 	rsb	r3, r3, #4
34004f84:	009b      	lsls	r3, r3, #2
34004f86:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
34004f8a:	4413      	add	r3, r2
34004f8c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
            k--;
34004f90:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
34004f94:	3b01      	subs	r3, #1
34004f96:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
        while (k > 0U)
34004f9a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
34004f9e:	2b00      	cmp	r3, #0
34004fa0:	f47f ad2b 	bne.w	340049fa <arm_mat_mult_f32+0x1b2>
        }

        int       colBLeft = numColsB & 3;
34004fa4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
34004fac:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	@ 0x4d8
34004fb0:	f002 0203 	and.w	r2, r2, #3
34004fb4:	601a      	str	r2, [r3, #0]
        if (colBLeft)
34004fb6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34004fba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
34004fbe:	681b      	ldr	r3, [r3, #0]
34004fc0:	2b00      	cmp	r3, #0
34004fc2:	f000 82fb 	beq.w	340055bc <arm_mat_mult_f32+0xd74>
        {
            pInA0 = pInA;
34004fc6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
34004fca:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
            pInA1 = pInA0 + numColsA;
34004fce:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004fd2:	009b      	lsls	r3, r3, #2
34004fd4:	f8d7 256c 	ldr.w	r2, [r7, #1388]	@ 0x56c
34004fd8:	4413      	add	r3, r2
34004fda:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
            pInA2 = pInA1 + numColsA;
34004fde:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004fe2:	009b      	lsls	r3, r3, #2
34004fe4:	f8d7 2568 	ldr.w	r2, [r7, #1384]	@ 0x568
34004fe8:	4413      	add	r3, r2
34004fea:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
            pInA3 = pInA2 + numColsA;
34004fee:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
34004ff2:	009b      	lsls	r3, r3, #2
34004ff4:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
34004ff8:	4413      	add	r3, r2
34004ffa:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
            mve_pred16_t p0 = vctp32q(colBLeft);
34004ffe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005002:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
34005006:	681a      	ldr	r2, [r3, #0]
34005008:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400500c:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
34005010:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vctp32qv4bi (__a);
34005012:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005016:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
3400501a:	681b      	ldr	r3, [r3, #0]
3400501c:	f023 e801 	bfcsel	0, 34004022 <arm_mat_mult_f32_4x4_mve+0x4e4>, 4, hi
34005020:	eefd 3a10 	vmrs	r3, <impl def 0xd>
34005024:	b29a      	uxth	r2, r3
34005026:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400502a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
3400502e:	801a      	strh	r2, [r3, #0]
34005030:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005034:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
34005038:	f04f 0200 	mov.w	r2, #0
3400503c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vdupq_n_fv4sf (__a);
3400503e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005042:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
34005046:	681b      	ldr	r3, [r3, #0]
34005048:	eea6 3b10 	vdup.32	q3, r3

            vecMac0 = vdupq_n_f32(0.0f);
3400504c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005050:	3b48      	subs	r3, #72	@ 0x48
34005052:	ed83 7f00 	stc	15, cr7, [r3]
34005056:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400505a:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
3400505e:	f04f 0200 	mov.w	r2, #0
34005062:	601a      	str	r2, [r3, #0]
34005064:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005068:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
3400506c:	681b      	ldr	r3, [r3, #0]
3400506e:	eea6 3b10 	vdup.32	q3, r3
            vecMac1 = vdupq_n_f32(0.0f);
34005072:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005076:	3b58      	subs	r3, #88	@ 0x58
34005078:	ed83 7f00 	stc	15, cr7, [r3]
3400507c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005080:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
34005084:	f04f 0200 	mov.w	r2, #0
34005088:	601a      	str	r2, [r3, #0]
3400508a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400508e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
34005092:	681b      	ldr	r3, [r3, #0]
34005094:	eea6 3b10 	vdup.32	q3, r3
            vecMac2 = vdupq_n_f32(0.0f);
34005098:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400509c:	3b68      	subs	r3, #104	@ 0x68
3400509e:	ed83 7f00 	stc	15, cr7, [r3]
340050a2:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050a6:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
340050aa:	f04f 0200 	mov.w	r2, #0
340050ae:	601a      	str	r2, [r3, #0]
340050b0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050b4:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
340050b8:	681b      	ldr	r3, [r3, #0]
340050ba:	eea6 3b10 	vdup.32	q3, r3
            vecMac3 = vdupq_n_f32(0.0f);
340050be:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050c2:	3b78      	subs	r3, #120	@ 0x78
340050c4:	ed83 7f00 	stc	15, cr7, [r3]

            blkCnt = numColsA;
340050c8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
340050cc:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574

            while (blkCnt > 0U)
340050d0:	e1a3      	b.n	3400541a <arm_mat_mult_f32+0xbd2>
340050d2:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050d6:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
340050da:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
340050de:	601a      	str	r2, [r3, #0]
340050e0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050e4:	f2a3 4382 	subw	r3, r3, #1154	@ 0x482
340050e8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340050ec:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
340050f0:	8812      	ldrh	r2, [r2, #0]
340050f2:	801a      	strh	r2, [r3, #0]
  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);
340050f4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340050f8:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
340050fc:	681b      	ldr	r3, [r3, #0]
340050fe:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005102:	f2a2 4282 	subw	r2, r2, #1154	@ 0x482
34005106:	8812      	ldrh	r2, [r2, #0]
34005108:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3400510c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34005110:	ed93 7f00 	ldc	15, cr7, [r3]
            {
                /*
                 * load {bi,4n+0, bi,4n+1, bi,4n+2, bi,4n+3}
                 */
                vecInB = vldrwq_z_f32(pInB0, p0);
34005114:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005118:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
3400511c:	ed83 7f00 	stc	15, cr7, [r3]

                vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
34005120:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005124:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
34005128:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400512c:	3a48      	subs	r2, #72	@ 0x48
3400512e:	ed92 7f00 	ldc	15, cr7, [r2]
34005132:	ed83 7f00 	stc	15, cr7, [r3]
34005136:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400513a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
3400513e:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005142:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
34005146:	ed92 7f00 	ldc	15, cr7, [r2]
3400514a:	ed83 7f00 	stc	15, cr7, [r3]
3400514e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
34005152:	1d1a      	adds	r2, r3, #4
34005154:	f8c7 256c 	str.w	r2, [r7, #1388]	@ 0x56c
34005158:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400515c:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
34005160:	681b      	ldr	r3, [r3, #0]
34005162:	6013      	str	r3, [r2, #0]
34005164:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005168:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
3400516c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005170:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
34005174:	ed92 7f00 	ldc	15, cr7, [r2]
34005178:	ed83 7f00 	stc	15, cr7, [r3]
3400517c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005180:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
34005184:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005188:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
3400518c:	ed92 7f00 	ldc	15, cr7, [r2]
34005190:	ed83 7f00 	stc	15, cr7, [r3]
34005194:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005198:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
3400519c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340051a0:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
340051a4:	6812      	ldr	r2, [r2, #0]
340051a6:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
340051a8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051ac:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
340051b0:	ed93 7f00 	ldc	15, cr7, [r3]
340051b4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051b8:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
340051bc:	ed93 5f00 	ldc	15, cr5, [r3]
340051c0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051c4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
340051c8:	681b      	ldr	r3, [r3, #0]
340051ca:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340051ce:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051d2:	3b48      	subs	r3, #72	@ 0x48
340051d4:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac1 = vfmaq(vecMac1, vecInB, *pInA1++);
340051d8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051dc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
340051e0:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340051e4:	3a58      	subs	r2, #88	@ 0x58
340051e6:	ed92 7f00 	ldc	15, cr7, [r2]
340051ea:	ed83 7f00 	stc	15, cr7, [r3]
340051ee:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340051f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
340051f6:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340051fa:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
340051fe:	ed92 7f00 	ldc	15, cr7, [r2]
34005202:	ed83 7f00 	stc	15, cr7, [r3]
34005206:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
3400520a:	1d1a      	adds	r2, r3, #4
3400520c:	f8c7 2568 	str.w	r2, [r7, #1384]	@ 0x568
34005210:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005214:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
34005218:	681b      	ldr	r3, [r3, #0]
3400521a:	6013      	str	r3, [r2, #0]
3400521c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005220:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
34005224:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005228:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
3400522c:	ed92 7f00 	ldc	15, cr7, [r2]
34005230:	ed83 7f00 	stc	15, cr7, [r3]
34005234:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005238:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
3400523c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005240:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
34005244:	ed92 7f00 	ldc	15, cr7, [r2]
34005248:	ed83 7f00 	stc	15, cr7, [r3]
3400524c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005250:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
34005254:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005258:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
3400525c:	6812      	ldr	r2, [r2, #0]
3400525e:	601a      	str	r2, [r3, #0]
34005260:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005264:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
34005268:	ed93 7f00 	ldc	15, cr7, [r3]
3400526c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005270:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
34005274:	ed93 5f00 	ldc	15, cr5, [r3]
34005278:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400527c:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
34005280:	681b      	ldr	r3, [r3, #0]
34005282:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34005286:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400528a:	3b58      	subs	r3, #88	@ 0x58
3400528c:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac2 = vfmaq(vecMac2, vecInB, *pInA2++);
34005290:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005294:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
34005298:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400529c:	3a68      	subs	r2, #104	@ 0x68
3400529e:	ed92 7f00 	ldc	15, cr7, [r2]
340052a2:	ed83 7f00 	stc	15, cr7, [r3]
340052a6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340052aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
340052ae:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340052b2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
340052b6:	ed92 7f00 	ldc	15, cr7, [r2]
340052ba:	ed83 7f00 	stc	15, cr7, [r3]
340052be:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
340052c2:	1d1a      	adds	r2, r3, #4
340052c4:	f8c7 2564 	str.w	r2, [r7, #1380]	@ 0x564
340052c8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340052cc:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
340052d0:	681b      	ldr	r3, [r3, #0]
340052d2:	6013      	str	r3, [r2, #0]
340052d4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340052d8:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
340052dc:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340052e0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
340052e4:	ed92 7f00 	ldc	15, cr7, [r2]
340052e8:	ed83 7f00 	stc	15, cr7, [r3]
340052ec:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340052f0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
340052f4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340052f8:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
340052fc:	ed92 7f00 	ldc	15, cr7, [r2]
34005300:	ed83 7f00 	stc	15, cr7, [r3]
34005304:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005308:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
3400530c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005310:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
34005314:	6812      	ldr	r2, [r2, #0]
34005316:	601a      	str	r2, [r3, #0]
34005318:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400531c:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
34005320:	ed93 7f00 	ldc	15, cr7, [r3]
34005324:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005328:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
3400532c:	ed93 5f00 	ldc	15, cr5, [r3]
34005330:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005334:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
34005338:	681b      	ldr	r3, [r3, #0]
3400533a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400533e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005342:	3b68      	subs	r3, #104	@ 0x68
34005344:	ed83 7f00 	stc	15, cr7, [r3]
                vecMac3 = vfmaq(vecMac3, vecInB, *pInA3++);
34005348:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400534c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
34005350:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005354:	3a78      	subs	r2, #120	@ 0x78
34005356:	ed92 7f00 	ldc	15, cr7, [r2]
3400535a:	ed83 7f00 	stc	15, cr7, [r3]
3400535e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005362:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
34005366:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400536a:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
3400536e:	ed92 7f00 	ldc	15, cr7, [r2]
34005372:	ed83 7f00 	stc	15, cr7, [r3]
34005376:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
3400537a:	1d1a      	adds	r2, r3, #4
3400537c:	f8c7 2560 	str.w	r2, [r7, #1376]	@ 0x560
34005380:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005384:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
34005388:	681b      	ldr	r3, [r3, #0]
3400538a:	6013      	str	r3, [r2, #0]
3400538c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005390:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
34005394:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005398:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
3400539c:	ed92 7f00 	ldc	15, cr7, [r2]
340053a0:	ed83 7f00 	stc	15, cr7, [r3]
340053a4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053a8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
340053ac:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340053b0:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
340053b4:	ed92 7f00 	ldc	15, cr7, [r2]
340053b8:	ed83 7f00 	stc	15, cr7, [r3]
340053bc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053c0:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340053c4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340053c8:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
340053cc:	6812      	ldr	r2, [r2, #0]
340053ce:	601a      	str	r2, [r3, #0]
340053d0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053d4:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
340053d8:	ed93 7f00 	ldc	15, cr7, [r3]
340053dc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053e0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
340053e4:	ed93 5f00 	ldc	15, cr5, [r3]
340053e8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053ec:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
340053f0:	681b      	ldr	r3, [r3, #0]
340053f2:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
340053f6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340053fa:	3b78      	subs	r3, #120	@ 0x78
340053fc:	ed83 7f00 	stc	15, cr7, [r3]

                pInB0 = pInB0 + numColsB;
34005400:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
34005404:	009b      	lsls	r3, r3, #2
34005406:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
3400540a:	4413      	add	r3, r2
3400540c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
                /*
                 * Decrement the blockSize loop counter
                 */
                blkCnt--;
34005410:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
34005414:	3b01      	subs	r3, #1
34005416:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
            while (blkCnt > 0U)
3400541a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
3400541e:	2b00      	cmp	r3, #0
34005420:	f47f ae57 	bne.w	340050d2 <arm_mat_mult_f32+0x88a>
34005424:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005428:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
3400542c:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
34005430:	601a      	str	r2, [r3, #0]
34005432:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005436:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
3400543a:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400543e:	3a48      	subs	r2, #72	@ 0x48
34005440:	ed92 7f00 	ldc	15, cr7, [r2]
34005444:	ed83 7f00 	stc	15, cr7, [r3]
34005448:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400544c:	f2a3 43e2 	subw	r3, r3, #1250	@ 0x4e2
34005450:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005454:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
34005458:	8812      	ldrh	r2, [r2, #0]
3400545a:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
3400545c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005460:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
34005464:	681b      	ldr	r3, [r3, #0]
34005466:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400546a:	f5a2 629c 	sub.w	r2, r2, #1248	@ 0x4e0
3400546e:	ed92 7f00 	ldc	15, cr7, [r2]
34005472:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005476:	f2a2 42e2 	subw	r2, r2, #1250	@ 0x4e2
3400547a:	8812      	ldrh	r2, [r2, #0]
3400547c:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34005480:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34005484:	ed83 7f00 	stc	15, cr7, [r3]
}
34005488:	bf00      	nop
3400548a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400548e:	f5a3 6397 	sub.w	r3, r3, #1208	@ 0x4b8
34005492:	f8d7 2554 	ldr.w	r2, [r7, #1364]	@ 0x554
34005496:	601a      	str	r2, [r3, #0]
34005498:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400549c:	f5a3 6399 	sub.w	r3, r3, #1224	@ 0x4c8
340054a0:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340054a4:	3a58      	subs	r2, #88	@ 0x58
340054a6:	ed92 7f00 	ldc	15, cr7, [r2]
340054aa:	ed83 7f00 	stc	15, cr7, [r3]
340054ae:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340054b2:	f2a3 43ca 	subw	r3, r3, #1226	@ 0x4ca
340054b6:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340054ba:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
340054be:	8812      	ldrh	r2, [r2, #0]
340054c0:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
340054c2:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340054c6:	f5a3 6397 	sub.w	r3, r3, #1208	@ 0x4b8
340054ca:	681b      	ldr	r3, [r3, #0]
340054cc:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340054d0:	f5a2 6299 	sub.w	r2, r2, #1224	@ 0x4c8
340054d4:	ed92 7f00 	ldc	15, cr7, [r2]
340054d8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340054dc:	f2a2 42ca 	subw	r2, r2, #1226	@ 0x4ca
340054e0:	8812      	ldrh	r2, [r2, #0]
340054e2:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340054e6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340054ea:	ed83 7f00 	stc	15, cr7, [r3]
}
340054ee:	bf00      	nop
340054f0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340054f4:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
340054f8:	f8d7 2550 	ldr.w	r2, [r7, #1360]	@ 0x550
340054fc:	601a      	str	r2, [r3, #0]
340054fe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005502:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
34005506:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400550a:	3a68      	subs	r2, #104	@ 0x68
3400550c:	ed92 7f00 	ldc	15, cr7, [r2]
34005510:	ed83 7f00 	stc	15, cr7, [r3]
34005514:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005518:	f2a3 43b2 	subw	r3, r3, #1202	@ 0x4b2
3400551c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005520:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
34005524:	8812      	ldrh	r2, [r2, #0]
34005526:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
34005528:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400552c:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
34005530:	681b      	ldr	r3, [r3, #0]
34005532:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005536:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
3400553a:	ed92 7f00 	ldc	15, cr7, [r2]
3400553e:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005542:	f2a2 42b2 	subw	r2, r2, #1202	@ 0x4b2
34005546:	8812      	ldrh	r2, [r2, #0]
34005548:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3400554c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34005550:	ed83 7f00 	stc	15, cr7, [r3]
}
34005554:	bf00      	nop
34005556:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400555a:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
3400555e:	f8d7 254c 	ldr.w	r2, [r7, #1356]	@ 0x54c
34005562:	601a      	str	r2, [r3, #0]
34005564:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005568:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
3400556c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005570:	3a78      	subs	r2, #120	@ 0x78
34005572:	ed92 7f00 	ldc	15, cr7, [r2]
34005576:	ed83 7f00 	stc	15, cr7, [r3]
3400557a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400557e:	f2a3 439a 	subw	r3, r3, #1178	@ 0x49a
34005582:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005586:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
3400558a:	8812      	ldrh	r2, [r2, #0]
3400558c:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
3400558e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005592:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
34005596:	681b      	ldr	r3, [r3, #0]
34005598:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400559c:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
340055a0:	ed92 7f00 	ldc	15, cr7, [r2]
340055a4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340055a8:	f2a2 429a 	subw	r2, r2, #1178	@ 0x49a
340055ac:	8812      	ldrh	r2, [r2, #0]
340055ae:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340055b2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340055b6:	ed83 7f00 	stc	15, cr7, [r3]
}
340055ba:	bf00      	nop
            vstrwq_p_f32(pOut2, vecMac2, p0);
            vstrwq_p_f32(pOut3, vecMac3, p0);
        }

        /* move to next rows */
        pInA += 4 * numColsA;
340055bc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
340055c0:	011b      	lsls	r3, r3, #4
340055c2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	@ 0x57c
340055c6:	4413      	add	r3, r2
340055c8:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
        pOut += 4 * numColsB;
340055cc:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340055d0:	011b      	lsls	r3, r3, #4
340055d2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	@ 0x578
340055d6:	4413      	add	r3, r2
340055d8:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
        i--;
340055dc:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
340055e0:	3b01      	subs	r3, #1
340055e2:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
    while (i > 0U)
340055e6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
340055ea:	2b00      	cmp	r3, #0
340055ec:	f47f a9df 	bne.w	340049ae <arm_mat_mult_f32+0x166>

    /*
     * non multiple of 4 rows for Matrix A
     * process single row
     */
    if (numRowsA & 3)
340055f0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
340055f4:	f003 0303 	and.w	r3, r3, #3
340055f8:	2b00      	cmp	r3, #0
340055fa:	f000 81fb 	beq.w	340059f4 <arm_mat_mult_f32+0x11ac>
    {
        i = numRowsA & 3;
340055fe:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
34005602:	f003 0303 	and.w	r3, r3, #3
34005606:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
        while (i > 0U)
3400560a:	e1ee      	b.n	340059ea <arm_mat_mult_f32+0x11a2>
            float32_t   *pInB0;
            float32_t   *pOut0;
            f32x4_t    vecInB;
            f32x4_t    vecMac0;

            pOut0 = pOut;
3400560c:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
34005610:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
            pInB0 = pInB;
34005614:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
34005618:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc

            uint32_t       k = numColsB >> 2;
3400561c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
34005620:	109b      	asrs	r3, r3, #2
34005622:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
            while (k > 0U)
34005626:	e0d4      	b.n	340057d2 <arm_mat_mult_f32+0xf8a>
            {
                pInA0 = pInA;
34005628:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
3400562c:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
34005630:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005634:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
34005638:	f04f 0200 	mov.w	r2, #0
3400563c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vdupq_n_fv4sf (__a);
3400563e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005642:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
34005646:	681b      	ldr	r3, [r3, #0]
34005648:	eea6 3b10 	vdup.32	q3, r3

                vecMac0 = vdupq_n_f32(0.0f);
3400564c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005650:	3b98      	subs	r3, #152	@ 0x98
34005652:	ed83 7f00 	stc	15, cr7, [r3]
                blkCnt = numColsA;
34005656:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
3400565a:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
                while (blkCnt > 0U)
3400565e:	e070      	b.n	34005742 <arm_mat_mult_f32+0xefa>
                {
                    /*
                     * load {bi,4n+0, bi,4n+1, bi,4n+2, bi,4n+3}
                     */
                    vecInB = *(f32x4_t *)pInB0; /* vldrwq_f32(pInB0, 0); */
34005660:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005664:	3bc8      	subs	r3, #200	@ 0xc8
34005666:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
3400566a:	ed92 7f00 	ldc	15, cr7, [r2]
3400566e:	ed83 7f00 	stc	15, cr7, [r3]

                    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
34005672:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005676:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
3400567a:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400567e:	3a98      	subs	r2, #152	@ 0x98
34005680:	ed92 7f00 	ldc	15, cr7, [r2]
34005684:	ed83 7f00 	stc	15, cr7, [r3]
34005688:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400568c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
34005690:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005694:	3ac8      	subs	r2, #200	@ 0xc8
34005696:	ed92 7f00 	ldc	15, cr7, [r2]
3400569a:	ed83 7f00 	stc	15, cr7, [r3]
3400569e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
340056a2:	1d1a      	adds	r2, r3, #4
340056a4:	f8c7 2500 	str.w	r2, [r7, #1280]	@ 0x500
340056a8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340056ac:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
340056b0:	681b      	ldr	r3, [r3, #0]
340056b2:	6013      	str	r3, [r2, #0]
340056b4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340056b8:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
340056bc:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340056c0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
340056c4:	ed92 7f00 	ldc	15, cr7, [r2]
340056c8:	ed83 7f00 	stc	15, cr7, [r3]
340056cc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340056d0:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
340056d4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340056d8:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
340056dc:	ed92 7f00 	ldc	15, cr7, [r2]
340056e0:	ed83 7f00 	stc	15, cr7, [r3]
340056e4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340056e8:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
340056ec:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340056f0:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
340056f4:	6812      	ldr	r2, [r2, #0]
340056f6:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
340056f8:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340056fc:	f5a3 639f 	sub.w	r3, r3, #1272	@ 0x4f8
34005700:	ed93 7f00 	ldc	15, cr7, [r3]
34005704:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005708:	f5a3 63a1 	sub.w	r3, r3, #1288	@ 0x508
3400570c:	ed93 5f00 	ldc	15, cr5, [r3]
34005710:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005714:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
34005718:	681b      	ldr	r3, [r3, #0]
3400571a:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
3400571e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005722:	3b98      	subs	r3, #152	@ 0x98
34005724:	ed83 7f00 	stc	15, cr7, [r3]

                    pInB0 = pInB0 + numColsB;
34005728:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
3400572c:	009b      	lsls	r3, r3, #2
3400572e:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
34005732:	4413      	add	r3, r2
34005734:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
                    /*
                     * Decrement the blockSize loop counter
                     */
                    blkCnt--;
34005738:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
3400573c:	3b01      	subs	r3, #1
3400573e:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
                while (blkCnt > 0U)
34005742:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
34005746:	2b00      	cmp	r3, #0
34005748:	d18a      	bne.n	34005660 <arm_mat_mult_f32+0xe18>
                }

                /* Store the results (1 x 4 block) in the destination buffer */
                vst1q(pOut0, vecMac0);  
3400574a:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400574e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
34005752:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005756:	3a98      	subs	r2, #152	@ 0x98
34005758:	ed92 7f00 	ldc	15, cr7, [r2]
3400575c:	ed83 7f00 	stc	15, cr7, [r3]
34005760:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005764:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
34005768:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	@ 0x4f8
3400576c:	601a      	str	r2, [r3, #0]
3400576e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005772:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
34005776:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400577a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
3400577e:	ed92 7f00 	ldc	15, cr7, [r2]
34005782:	ed83 7f00 	stc	15, cr7, [r3]
  __builtin_mve_vst1q_fv4sf ((__builtin_neon_si *) __addr, __value);
34005786:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400578a:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
3400578e:	681b      	ldr	r3, [r3, #0]
34005790:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
34005794:	f5a2 62a4 	sub.w	r2, r2, #1312	@ 0x520
34005798:	ed92 7f00 	ldc	15, cr7, [r2]
3400579c:	ed83 7f00 	stc	15, cr7, [r3]
}
340057a0:	bf00      	nop
                pOut0 += 4;
340057a2:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
340057a6:	3310      	adds	r3, #16
340057a8:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8

                /*
                 * rewind
                 */
                pInB0 -= (numColsB * numColsA) - 4;
340057ac:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340057b0:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
340057b4:	fb02 f303 	mul.w	r3, r2, r3
340057b8:	f1c3 0304 	rsb	r3, r3, #4
340057bc:	009b      	lsls	r3, r3, #2
340057be:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
340057c2:	4413      	add	r3, r2
340057c4:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
                k--;
340057c8:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
340057cc:	3b01      	subs	r3, #1
340057ce:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
            while (k > 0U)
340057d2:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
340057d6:	2b00      	cmp	r3, #0
340057d8:	f47f af26 	bne.w	34005628 <arm_mat_mult_f32+0xde0>
            }

            int       colBLeft = numColsB & 3;
340057dc:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340057e0:	f003 0303 	and.w	r3, r3, #3
340057e4:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
            if (colBLeft)
340057e8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
340057ec:	2b00      	cmp	r3, #0
340057ee:	f000 80e7 	beq.w	340059c0 <arm_mat_mult_f32+0x1178>
            {
                pInA0 = pInA;
340057f2:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
340057f6:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
                mve_pred16_t p0 = vctp32q(colBLeft);
340057fa:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
340057fe:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005802:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
34005806:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vctp32qv4bi (__a);
34005808:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400580c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
34005810:	681b      	ldr	r3, [r3, #0]
34005812:	f023 e801 	bfcsel	0, 34004818 <arm_mat_mult_f32_4x4_mve+0xcda>, 4, hi
34005816:	eefd 3a10 	vmrs	r3, <impl def 0xd>
3400581a:	b29b      	uxth	r3, r3
3400581c:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
34005820:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005824:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
34005828:	f04f 0200 	mov.w	r2, #0
3400582c:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vdupq_n_fv4sf (__a);
3400582e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005832:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
34005836:	681b      	ldr	r3, [r3, #0]
34005838:	eea6 3b10 	vdup.32	q3, r3

                vecMac0 = vdupq_n_f32(0.0f);
3400583c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005840:	3b98      	subs	r3, #152	@ 0x98
34005842:	ed83 7f00 	stc	15, cr7, [r3]
                blkCnt = numColsA;
34005846:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
3400584a:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
                while (blkCnt > 0U)
3400584e:	e082      	b.n	34005956 <arm_mat_mult_f32+0x110e>
34005850:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005854:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
34005858:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
3400585c:	601a      	str	r2, [r3, #0]
3400585e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005862:	f2a3 5352 	subw	r3, r3, #1362	@ 0x552
34005866:	f8b7 24ce 	ldrh.w	r2, [r7, #1230]	@ 0x4ce
3400586a:	801a      	strh	r2, [r3, #0]
  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);
3400586c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005870:	f5a3 63aa 	sub.w	r3, r3, #1360	@ 0x550
34005874:	681b      	ldr	r3, [r3, #0]
34005876:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400587a:	f2a2 5252 	subw	r2, r2, #1362	@ 0x552
3400587e:	8812      	ldrh	r2, [r2, #0]
34005880:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34005884:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34005888:	ed93 7f00 	ldc	15, cr7, [r3]
                {
                    /*
                     * load {bi,4n+0, bi,4n+1, bi,4n+2, bi,4n+3}
                     */
                    vecInB = vldrwq_z_f32(pInB0, p0);
3400588c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005890:	3bc8      	subs	r3, #200	@ 0xc8
34005892:	ed83 7f00 	stc	15, cr7, [r3]

                    vecMac0 = vfmaq(vecMac0, vecInB, *pInA0++);
34005896:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400589a:	3bd8      	subs	r3, #216	@ 0xd8
3400589c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340058a0:	3a98      	subs	r2, #152	@ 0x98
340058a2:	ed92 7f00 	ldc	15, cr7, [r2]
340058a6:	ed83 7f00 	stc	15, cr7, [r3]
340058aa:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340058ae:	3be8      	subs	r3, #232	@ 0xe8
340058b0:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340058b4:	3ac8      	subs	r2, #200	@ 0xc8
340058b6:	ed92 7f00 	ldc	15, cr7, [r2]
340058ba:	ed83 7f00 	stc	15, cr7, [r3]
340058be:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
340058c2:	1d1a      	adds	r2, r3, #4
340058c4:	f8c7 2500 	str.w	r2, [r7, #1280]	@ 0x500
340058c8:	681b      	ldr	r3, [r3, #0]
340058ca:	f207 4294 	addw	r2, r7, #1172	@ 0x494
340058ce:	6013      	str	r3, [r2, #0]
340058d0:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340058d4:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
340058d8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340058dc:	3ad8      	subs	r2, #216	@ 0xd8
340058de:	ed92 7f00 	ldc	15, cr7, [r2]
340058e2:	ed83 7f00 	stc	15, cr7, [r3]
340058e6:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340058ea:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
340058ee:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340058f2:	3ae8      	subs	r2, #232	@ 0xe8
340058f4:	ed92 7f00 	ldc	15, cr7, [r2]
340058f8:	ed83 7f00 	stc	15, cr7, [r3]
340058fc:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005900:	f2a3 534c 	subw	r3, r3, #1356	@ 0x54c
34005904:	f207 4294 	addw	r2, r7, #1172	@ 0x494
34005908:	6812      	ldr	r2, [r2, #0]
3400590a:	601a      	str	r2, [r3, #0]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400590c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005910:	f5a3 63a7 	sub.w	r3, r3, #1336	@ 0x538
34005914:	ed93 7f00 	ldc	15, cr7, [r3]
34005918:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
3400591c:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
34005920:	ed93 5f00 	ldc	15, cr5, [r3]
34005924:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005928:	f2a3 534c 	subw	r3, r3, #1356	@ 0x54c
3400592c:	681b      	ldr	r3, [r3, #0]
3400592e:	ee35 6e43 	cdp	14, 3, cr6, cr5, cr3, {2}
34005932:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005936:	3b98      	subs	r3, #152	@ 0x98
34005938:	ed83 7f00 	stc	15, cr7, [r3]

                    pInB0 = pInB0 + numColsB;
3400593c:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
34005940:	009b      	lsls	r3, r3, #2
34005942:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
34005946:	4413      	add	r3, r2
34005948:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
                    /*
                     * Decrement the blockSize loop counter
                     */
                    blkCnt--;
3400594c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
34005950:	3b01      	subs	r3, #1
34005952:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
                while (blkCnt > 0U)
34005956:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
3400595a:	2b00      	cmp	r3, #0
3400595c:	f47f af78 	bne.w	34005850 <arm_mat_mult_f32+0x1008>
34005960:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005964:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
34005968:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	@ 0x4f8
3400596c:	601a      	str	r2, [r3, #0]
3400596e:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005972:	f5a3 63ad 	sub.w	r3, r3, #1384	@ 0x568
34005976:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
3400597a:	3a98      	subs	r2, #152	@ 0x98
3400597c:	ed92 7f00 	ldc	15, cr7, [r2]
34005980:	ed83 7f00 	stc	15, cr7, [r3]
34005984:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005988:	f2a3 536a 	subw	r3, r3, #1386	@ 0x56a
3400598c:	f8b7 24ce 	ldrh.w	r2, [r7, #1230]	@ 0x4ce
34005990:	801a      	strh	r2, [r3, #0]
  __builtin_mve_vstrwq_p_fv4sf ((__builtin_neon_si *) __addr, __value, __p);
34005992:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005996:	f5a3 63ab 	sub.w	r3, r3, #1368	@ 0x558
3400599a:	681b      	ldr	r3, [r3, #0]
3400599c:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340059a0:	f5a2 62ad 	sub.w	r2, r2, #1384	@ 0x568
340059a4:	ed92 7f00 	ldc	15, cr7, [r2]
340059a8:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
340059ac:	f2a2 526a 	subw	r2, r2, #1386	@ 0x56a
340059b0:	8812      	ldrh	r2, [r2, #0]
340059b2:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340059b6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340059ba:	ed83 7f00 	stc	15, cr7, [r3]
}
340059be:	bf00      	nop
                /* Store the results (1 x colBLeft block) in the destination buffer */
                vstrwq_p_f32(pOut0, vecMac0, p0);
            }

            /* move to next row */
            pInA += 1 * numColsA;
340059c0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
340059c4:	009b      	lsls	r3, r3, #2
340059c6:	f8d7 257c 	ldr.w	r2, [r7, #1404]	@ 0x57c
340059ca:	4413      	add	r3, r2
340059cc:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
            pOut += 1 * numColsB;
340059d0:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
340059d4:	009b      	lsls	r3, r3, #2
340059d6:	f8d7 2578 	ldr.w	r2, [r7, #1400]	@ 0x578
340059da:	4413      	add	r3, r2
340059dc:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
            i--;
340059e0:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
340059e4:	3b01      	subs	r3, #1
340059e6:	f8c7 3570 	str.w	r3, [r7, #1392]	@ 0x570
        while (i > 0U)
340059ea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
340059ee:	2b00      	cmp	r3, #0
340059f0:	f47f ae0c 	bne.w	3400560c <arm_mat_mult_f32+0xdc4>
        }
        
      }
      status = ARM_MATH_SUCCESS;
340059f4:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
340059f8:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
340059fc:	2200      	movs	r2, #0
340059fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return to application */
  return (status);
34005a00:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
34005a04:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
34005a08:	f993 3000 	ldrsb.w	r3, [r3]
}
34005a0c:	4618      	mov	r0, r3
34005a0e:	f507 67b0 	add.w	r7, r7, #1408	@ 0x580
34005a12:	46bd      	mov	sp, r7
34005a14:	bd80      	pop	{r7, pc}
	...

34005a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34005a18:	b480      	push	{r7}
34005a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34005a1c:	4b6a      	ldr	r3, [pc, #424]	@ (34005bc8 <SystemInit+0x1b0>)
34005a1e:	4a6b      	ldr	r2, [pc, #428]	@ (34005bcc <SystemInit+0x1b4>)
34005a20:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34005a22:	4b6b      	ldr	r3, [pc, #428]	@ (34005bd0 <SystemInit+0x1b8>)
34005a24:	2201      	movs	r2, #1
34005a26:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34005a2a:	4b69      	ldr	r3, [pc, #420]	@ (34005bd0 <SystemInit+0x1b8>)
34005a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005a30:	461a      	mov	r2, r3
34005a32:	2301      	movs	r3, #1
34005a34:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34005a38:	4b65      	ldr	r3, [pc, #404]	@ (34005bd0 <SystemInit+0x1b8>)
34005a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005a3e:	461a      	mov	r2, r3
34005a40:	2301      	movs	r3, #1
34005a42:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34005a46:	4b63      	ldr	r3, [pc, #396]	@ (34005bd4 <SystemInit+0x1bc>)
34005a48:	2200      	movs	r2, #0
34005a4a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005a4c:	4b61      	ldr	r3, [pc, #388]	@ (34005bd4 <SystemInit+0x1bc>)
34005a4e:	2200      	movs	r2, #0
34005a50:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005a52:	4b60      	ldr	r3, [pc, #384]	@ (34005bd4 <SystemInit+0x1bc>)
34005a54:	2200      	movs	r2, #0
34005a56:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34005a58:	4b5e      	ldr	r3, [pc, #376]	@ (34005bd4 <SystemInit+0x1bc>)
34005a5a:	2201      	movs	r2, #1
34005a5c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005a5e:	4b5d      	ldr	r3, [pc, #372]	@ (34005bd4 <SystemInit+0x1bc>)
34005a60:	2200      	movs	r2, #0
34005a62:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005a64:	4b5b      	ldr	r3, [pc, #364]	@ (34005bd4 <SystemInit+0x1bc>)
34005a66:	2200      	movs	r2, #0
34005a68:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
34005a6a:	4b5a      	ldr	r3, [pc, #360]	@ (34005bd4 <SystemInit+0x1bc>)
34005a6c:	2202      	movs	r2, #2
34005a6e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005a70:	4b58      	ldr	r3, [pc, #352]	@ (34005bd4 <SystemInit+0x1bc>)
34005a72:	2200      	movs	r2, #0
34005a74:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005a76:	4b57      	ldr	r3, [pc, #348]	@ (34005bd4 <SystemInit+0x1bc>)
34005a78:	2200      	movs	r2, #0
34005a7a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34005a7c:	4b55      	ldr	r3, [pc, #340]	@ (34005bd4 <SystemInit+0x1bc>)
34005a7e:	2203      	movs	r2, #3
34005a80:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005a82:	4b54      	ldr	r3, [pc, #336]	@ (34005bd4 <SystemInit+0x1bc>)
34005a84:	2200      	movs	r2, #0
34005a86:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005a88:	4b52      	ldr	r3, [pc, #328]	@ (34005bd4 <SystemInit+0x1bc>)
34005a8a:	2200      	movs	r2, #0
34005a8c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34005a8e:	4b51      	ldr	r3, [pc, #324]	@ (34005bd4 <SystemInit+0x1bc>)
34005a90:	2204      	movs	r2, #4
34005a92:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005a94:	4b4f      	ldr	r3, [pc, #316]	@ (34005bd4 <SystemInit+0x1bc>)
34005a96:	2200      	movs	r2, #0
34005a98:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005a9a:	4b4e      	ldr	r3, [pc, #312]	@ (34005bd4 <SystemInit+0x1bc>)
34005a9c:	2200      	movs	r2, #0
34005a9e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34005aa0:	4b4c      	ldr	r3, [pc, #304]	@ (34005bd4 <SystemInit+0x1bc>)
34005aa2:	2205      	movs	r2, #5
34005aa4:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005aa6:	4b4b      	ldr	r3, [pc, #300]	@ (34005bd4 <SystemInit+0x1bc>)
34005aa8:	2200      	movs	r2, #0
34005aaa:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005aac:	4b49      	ldr	r3, [pc, #292]	@ (34005bd4 <SystemInit+0x1bc>)
34005aae:	2200      	movs	r2, #0
34005ab0:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34005ab2:	4b48      	ldr	r3, [pc, #288]	@ (34005bd4 <SystemInit+0x1bc>)
34005ab4:	2206      	movs	r2, #6
34005ab6:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005ab8:	4b46      	ldr	r3, [pc, #280]	@ (34005bd4 <SystemInit+0x1bc>)
34005aba:	2200      	movs	r2, #0
34005abc:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005abe:	4b45      	ldr	r3, [pc, #276]	@ (34005bd4 <SystemInit+0x1bc>)
34005ac0:	2200      	movs	r2, #0
34005ac2:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34005ac4:	4b43      	ldr	r3, [pc, #268]	@ (34005bd4 <SystemInit+0x1bc>)
34005ac6:	2207      	movs	r2, #7
34005ac8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34005aca:	4b42      	ldr	r3, [pc, #264]	@ (34005bd4 <SystemInit+0x1bc>)
34005acc:	2200      	movs	r2, #0
34005ace:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34005ad0:	4b40      	ldr	r3, [pc, #256]	@ (34005bd4 <SystemInit+0x1bc>)
34005ad2:	2200      	movs	r2, #0
34005ad4:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34005ad6:	4b3e      	ldr	r3, [pc, #248]	@ (34005bd0 <SystemInit+0x1b8>)
34005ad8:	2201      	movs	r2, #1
34005ada:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34005ade:	4b3c      	ldr	r3, [pc, #240]	@ (34005bd0 <SystemInit+0x1b8>)
34005ae0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34005ae4:	4b38      	ldr	r3, [pc, #224]	@ (34005bc8 <SystemInit+0x1b0>)
34005ae6:	4a3c      	ldr	r2, [pc, #240]	@ (34005bd8 <SystemInit+0x1c0>)
34005ae8:	689b      	ldr	r3, [r3, #8]
34005aea:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34005aec:	4b3b      	ldr	r3, [pc, #236]	@ (34005bdc <SystemInit+0x1c4>)
34005aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005af0:	4a3a      	ldr	r2, [pc, #232]	@ (34005bdc <SystemInit+0x1c4>)
34005af2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34005af6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34005af8:	4b38      	ldr	r3, [pc, #224]	@ (34005bdc <SystemInit+0x1c4>)
34005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005afc:	4a37      	ldr	r2, [pc, #220]	@ (34005bdc <SystemInit+0x1c4>)
34005afe:	f043 0310 	orr.w	r3, r3, #16
34005b02:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34005b04:	4b35      	ldr	r3, [pc, #212]	@ (34005bdc <SystemInit+0x1c4>)
34005b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34005b08:	4b31      	ldr	r3, [pc, #196]	@ (34005bd0 <SystemInit+0x1b8>)
34005b0a:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
34005b0e:	4a30      	ldr	r2, [pc, #192]	@ (34005bd0 <SystemInit+0x1b8>)
34005b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34005b14:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34005b18:	4b2d      	ldr	r3, [pc, #180]	@ (34005bd0 <SystemInit+0x1b8>)
34005b1a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34005b1e:	4a2c      	ldr	r2, [pc, #176]	@ (34005bd0 <SystemInit+0x1b8>)
34005b20:	f043 0310 	orr.w	r3, r3, #16
34005b24:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34005b28:	4b29      	ldr	r3, [pc, #164]	@ (34005bd0 <SystemInit+0x1b8>)
34005b2a:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34005b2e:	4b28      	ldr	r3, [pc, #160]	@ (34005bd0 <SystemInit+0x1b8>)
34005b30:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
34005b34:	4a26      	ldr	r2, [pc, #152]	@ (34005bd0 <SystemInit+0x1b8>)
34005b36:	f023 0310 	bic.w	r3, r3, #16
34005b3a:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34005b3e:	4b24      	ldr	r3, [pc, #144]	@ (34005bd0 <SystemInit+0x1b8>)
34005b40:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34005b44:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34005b48:	4b21      	ldr	r3, [pc, #132]	@ (34005bd0 <SystemInit+0x1b8>)
34005b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005b4e:	461a      	mov	r2, r3
34005b50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34005b54:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34005b58:	4b1d      	ldr	r3, [pc, #116]	@ (34005bd0 <SystemInit+0x1b8>)
34005b5a:	2201      	movs	r2, #1
34005b5c:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34005b60:	4b1b      	ldr	r3, [pc, #108]	@ (34005bd0 <SystemInit+0x1b8>)
34005b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005b66:	461a      	mov	r2, r3
34005b68:	2301      	movs	r3, #1
34005b6a:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34005b6e:	4b18      	ldr	r3, [pc, #96]	@ (34005bd0 <SystemInit+0x1b8>)
34005b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005b74:	461a      	mov	r2, r3
34005b76:	2301      	movs	r3, #1
34005b78:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34005b7c:	4b14      	ldr	r3, [pc, #80]	@ (34005bd0 <SystemInit+0x1b8>)
34005b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005b82:	461a      	mov	r2, r3
34005b84:	2340      	movs	r3, #64	@ 0x40
34005b86:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34005b8a:	4b13      	ldr	r3, [pc, #76]	@ (34005bd8 <SystemInit+0x1c0>)
34005b8c:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34005b8e:	4b10      	ldr	r3, [pc, #64]	@ (34005bd0 <SystemInit+0x1b8>)
34005b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005b94:	461a      	mov	r2, r3
34005b96:	2301      	movs	r3, #1
34005b98:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (34005bc8 <SystemInit+0x1b0>)
34005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34005ba2:	4a09      	ldr	r2, [pc, #36]	@ (34005bc8 <SystemInit+0x1b0>)
34005ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34005ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34005bac:	4b0c      	ldr	r3, [pc, #48]	@ (34005be0 <SystemInit+0x1c8>)
34005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34005bb2:	4a0b      	ldr	r2, [pc, #44]	@ (34005be0 <SystemInit+0x1c8>)
34005bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34005bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34005bbc:	bf00      	nop
34005bbe:	46bd      	mov	sp, r7
34005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34005bc4:	4770      	bx	lr
34005bc6:	bf00      	nop
34005bc8:	e000ed00 	.word	0xe000ed00
34005bcc:	34000400 	.word	0x34000400
34005bd0:	56028000 	.word	0x56028000
34005bd4:	e000edd0 	.word	0xe000edd0
34005bd8:	56008000 	.word	0x56008000
34005bdc:	56024800 	.word	0x56024800
34005be0:	e002ed00 	.word	0xe002ed00

34005be4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34005be4:	b480      	push	{r7}
34005be6:	b08d      	sub	sp, #52	@ 0x34
34005be8:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34005bea:	2300      	movs	r3, #0
34005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34005bee:	2300      	movs	r3, #0
34005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34005bf2:	2300      	movs	r3, #0
34005bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
34005bf6:	2300      	movs	r3, #0
34005bf8:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34005bfa:	2300      	movs	r3, #0
34005bfc:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34005bfe:	2300      	movs	r3, #0
34005c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34005c02:	4b9b      	ldr	r3, [pc, #620]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005c04:	6a1b      	ldr	r3, [r3, #32]
34005c06:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34005c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34005c0e:	d029      	beq.n	34005c64 <SystemCoreClockUpdate+0x80>
34005c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34005c14:	f200 8180 	bhi.w	34005f18 <SystemCoreClockUpdate+0x334>
34005c18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34005c1c:	d01f      	beq.n	34005c5e <SystemCoreClockUpdate+0x7a>
34005c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34005c22:	f200 8179 	bhi.w	34005f18 <SystemCoreClockUpdate+0x334>
34005c26:	2b00      	cmp	r3, #0
34005c28:	d003      	beq.n	34005c32 <SystemCoreClockUpdate+0x4e>
34005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34005c2e:	d00a      	beq.n	34005c46 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34005c30:	e172      	b.n	34005f18 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34005c32:	4b8f      	ldr	r3, [pc, #572]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005c36:	09db      	lsrs	r3, r3, #7
34005c38:	f003 0303 	and.w	r3, r3, #3
34005c3c:	4a8d      	ldr	r2, [pc, #564]	@ (34005e74 <SystemCoreClockUpdate+0x290>)
34005c3e:	fa22 f303 	lsr.w	r3, r2, r3
34005c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34005c44:	e169      	b.n	34005f1a <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34005c46:	4b8a      	ldr	r3, [pc, #552]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005c4e:	2b00      	cmp	r3, #0
34005c50:	d102      	bne.n	34005c58 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34005c52:	4b89      	ldr	r3, [pc, #548]	@ (34005e78 <SystemCoreClockUpdate+0x294>)
34005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34005c56:	e160      	b.n	34005f1a <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34005c58:	4b88      	ldr	r3, [pc, #544]	@ (34005e7c <SystemCoreClockUpdate+0x298>)
34005c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34005c5c:	e15d      	b.n	34005f1a <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
34005c5e:	4b88      	ldr	r3, [pc, #544]	@ (34005e80 <SystemCoreClockUpdate+0x29c>)
34005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34005c62:	e15a      	b.n	34005f1a <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34005c64:	4b82      	ldr	r3, [pc, #520]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34005c6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34005c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34005c72:	d066      	beq.n	34005d42 <SystemCoreClockUpdate+0x15e>
34005c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34005c78:	f200 8091 	bhi.w	34005d9e <SystemCoreClockUpdate+0x1ba>
34005c7c:	2b00      	cmp	r3, #0
34005c7e:	d003      	beq.n	34005c88 <SystemCoreClockUpdate+0xa4>
34005c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34005c84:	d02f      	beq.n	34005ce6 <SystemCoreClockUpdate+0x102>
34005c86:	e08a      	b.n	34005d9e <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34005c88:	4b79      	ldr	r3, [pc, #484]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005c8e:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34005c90:	68fb      	ldr	r3, [r7, #12]
34005c92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34005c96:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34005c98:	68fb      	ldr	r3, [r7, #12]
34005c9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005c9e:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34005ca0:	693b      	ldr	r3, [r7, #16]
34005ca2:	2b00      	cmp	r3, #0
34005ca4:	f040 80a9 	bne.w	34005dfa <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34005ca8:	68fb      	ldr	r3, [r7, #12]
34005caa:	0d1b      	lsrs	r3, r3, #20
34005cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34005cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34005cb2:	68fb      	ldr	r3, [r7, #12]
34005cb4:	0a1b      	lsrs	r3, r3, #8
34005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005cba:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34005cbc:	4b6c      	ldr	r3, [pc, #432]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34005cc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34005cc6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34005cc8:	4b69      	ldr	r3, [pc, #420]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34005cce:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34005cd0:	68fb      	ldr	r3, [r7, #12]
34005cd2:	0edb      	lsrs	r3, r3, #27
34005cd4:	f003 0307 	and.w	r3, r3, #7
34005cd8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34005cda:	68fb      	ldr	r3, [r7, #12]
34005cdc:	0e1b      	lsrs	r3, r3, #24
34005cde:	f003 0307 	and.w	r3, r3, #7
34005ce2:	61bb      	str	r3, [r7, #24]
      break;
34005ce4:	e089      	b.n	34005dfa <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34005ce6:	4b62      	ldr	r3, [pc, #392]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34005cec:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34005cee:	68fb      	ldr	r3, [r7, #12]
34005cf0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34005cf4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
34005cf6:	68fb      	ldr	r3, [r7, #12]
34005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005cfc:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34005cfe:	693b      	ldr	r3, [r7, #16]
34005d00:	2b00      	cmp	r3, #0
34005d02:	d17c      	bne.n	34005dfe <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34005d04:	68fb      	ldr	r3, [r7, #12]
34005d06:	0d1b      	lsrs	r3, r3, #20
34005d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34005d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34005d0e:	68fb      	ldr	r3, [r7, #12]
34005d10:	0a1b      	lsrs	r3, r3, #8
34005d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005d16:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34005d18:	4b55      	ldr	r3, [pc, #340]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34005d1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34005d22:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34005d24:	4b52      	ldr	r3, [pc, #328]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34005d2a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34005d2c:	68fb      	ldr	r3, [r7, #12]
34005d2e:	0edb      	lsrs	r3, r3, #27
34005d30:	f003 0307 	and.w	r3, r3, #7
34005d34:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
34005d36:	68fb      	ldr	r3, [r7, #12]
34005d38:	0e1b      	lsrs	r3, r3, #24
34005d3a:	f003 0307 	and.w	r3, r3, #7
34005d3e:	61bb      	str	r3, [r7, #24]
      break;
34005d40:	e05d      	b.n	34005dfe <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34005d42:	4b4b      	ldr	r3, [pc, #300]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34005d48:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34005d4a:	68fb      	ldr	r3, [r7, #12]
34005d4c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34005d50:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34005d52:	68fb      	ldr	r3, [r7, #12]
34005d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005d58:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34005d5a:	693b      	ldr	r3, [r7, #16]
34005d5c:	2b00      	cmp	r3, #0
34005d5e:	d150      	bne.n	34005e02 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34005d60:	68fb      	ldr	r3, [r7, #12]
34005d62:	0d1b      	lsrs	r3, r3, #20
34005d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34005d6a:	68fb      	ldr	r3, [r7, #12]
34005d6c:	0a1b      	lsrs	r3, r3, #8
34005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005d72:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34005d74:	4b3e      	ldr	r3, [pc, #248]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34005d7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34005d7e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34005d80:	4b3b      	ldr	r3, [pc, #236]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34005d86:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34005d88:	68fb      	ldr	r3, [r7, #12]
34005d8a:	0edb      	lsrs	r3, r3, #27
34005d8c:	f003 0307 	and.w	r3, r3, #7
34005d90:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34005d92:	68fb      	ldr	r3, [r7, #12]
34005d94:	0e1b      	lsrs	r3, r3, #24
34005d96:	f003 0307 	and.w	r3, r3, #7
34005d9a:	61bb      	str	r3, [r7, #24]
      break;
34005d9c:	e031      	b.n	34005e02 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34005d9e:	4b34      	ldr	r3, [pc, #208]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34005da4:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34005da6:	68fb      	ldr	r3, [r7, #12]
34005da8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34005dac:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34005dae:	68fb      	ldr	r3, [r7, #12]
34005db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005db4:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34005db6:	693b      	ldr	r3, [r7, #16]
34005db8:	2b00      	cmp	r3, #0
34005dba:	d124      	bne.n	34005e06 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34005dbc:	68fb      	ldr	r3, [r7, #12]
34005dbe:	0d1b      	lsrs	r3, r3, #20
34005dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34005dc6:	68fb      	ldr	r3, [r7, #12]
34005dc8:	0a1b      	lsrs	r3, r3, #8
34005dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005dce:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34005dd0:	4b27      	ldr	r3, [pc, #156]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34005dd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34005dda:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34005ddc:	4b24      	ldr	r3, [pc, #144]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005dde:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34005de2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34005de4:	68fb      	ldr	r3, [r7, #12]
34005de6:	0edb      	lsrs	r3, r3, #27
34005de8:	f003 0307 	and.w	r3, r3, #7
34005dec:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34005dee:	68fb      	ldr	r3, [r7, #12]
34005df0:	0e1b      	lsrs	r3, r3, #24
34005df2:	f003 0307 	and.w	r3, r3, #7
34005df6:	61bb      	str	r3, [r7, #24]
      break;
34005df8:	e005      	b.n	34005e06 <SystemCoreClockUpdate+0x222>
      break;
34005dfa:	bf00      	nop
34005dfc:	e004      	b.n	34005e08 <SystemCoreClockUpdate+0x224>
      break;
34005dfe:	bf00      	nop
34005e00:	e002      	b.n	34005e08 <SystemCoreClockUpdate+0x224>
      break;
34005e02:	bf00      	nop
34005e04:	e000      	b.n	34005e08 <SystemCoreClockUpdate+0x224>
      break;
34005e06:	bf00      	nop
    switch (pllsource)
34005e08:	697b      	ldr	r3, [r7, #20]
34005e0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34005e0e:	d02c      	beq.n	34005e6a <SystemCoreClockUpdate+0x286>
34005e10:	697b      	ldr	r3, [r7, #20]
34005e12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34005e16:	d839      	bhi.n	34005e8c <SystemCoreClockUpdate+0x2a8>
34005e18:	697b      	ldr	r3, [r7, #20]
34005e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34005e1e:	d021      	beq.n	34005e64 <SystemCoreClockUpdate+0x280>
34005e20:	697b      	ldr	r3, [r7, #20]
34005e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34005e26:	d831      	bhi.n	34005e8c <SystemCoreClockUpdate+0x2a8>
34005e28:	697b      	ldr	r3, [r7, #20]
34005e2a:	2b00      	cmp	r3, #0
34005e2c:	d004      	beq.n	34005e38 <SystemCoreClockUpdate+0x254>
34005e2e:	697b      	ldr	r3, [r7, #20]
34005e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34005e34:	d00a      	beq.n	34005e4c <SystemCoreClockUpdate+0x268>
      break;
34005e36:	e029      	b.n	34005e8c <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34005e38:	4b0d      	ldr	r3, [pc, #52]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005e3c:	09db      	lsrs	r3, r3, #7
34005e3e:	f003 0303 	and.w	r3, r3, #3
34005e42:	4a0c      	ldr	r2, [pc, #48]	@ (34005e74 <SystemCoreClockUpdate+0x290>)
34005e44:	fa22 f303 	lsr.w	r3, r2, r3
34005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34005e4a:	e020      	b.n	34005e8e <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34005e4c:	4b08      	ldr	r3, [pc, #32]	@ (34005e70 <SystemCoreClockUpdate+0x28c>)
34005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005e54:	2b00      	cmp	r3, #0
34005e56:	d102      	bne.n	34005e5e <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34005e58:	4b07      	ldr	r3, [pc, #28]	@ (34005e78 <SystemCoreClockUpdate+0x294>)
34005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34005e5c:	e017      	b.n	34005e8e <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34005e5e:	4b07      	ldr	r3, [pc, #28]	@ (34005e7c <SystemCoreClockUpdate+0x298>)
34005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34005e62:	e014      	b.n	34005e8e <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34005e64:	4b06      	ldr	r3, [pc, #24]	@ (34005e80 <SystemCoreClockUpdate+0x29c>)
34005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34005e68:	e011      	b.n	34005e8e <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34005e6a:	4b06      	ldr	r3, [pc, #24]	@ (34005e84 <SystemCoreClockUpdate+0x2a0>)
34005e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34005e6e:	e00e      	b.n	34005e8e <SystemCoreClockUpdate+0x2aa>
34005e70:	56028000 	.word	0x56028000
34005e74:	03d09000 	.word	0x03d09000
34005e78:	003d0900 	.word	0x003d0900
34005e7c:	00f42400 	.word	0x00f42400
34005e80:	02dc6c00 	.word	0x02dc6c00
34005e84:	00bb8000 	.word	0x00bb8000
34005e88:	4b800000 	.word	0x4b800000
      break;
34005e8c:	bf00      	nop
    if (pllbypass == 0U)
34005e8e:	693b      	ldr	r3, [r7, #16]
34005e90:	2b00      	cmp	r3, #0
34005e92:	d134      	bne.n	34005efe <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34005e96:	ee07 3a90 	vmov	s15, r3
34005e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34005ea0:	ee07 3a90 	vmov	s15, r3
34005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
34005ea8:	6a3b      	ldr	r3, [r7, #32]
34005eaa:	ee07 3a90 	vmov	s15, r3
34005eae:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34005eb2:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34005e88 <SystemCoreClockUpdate+0x2a4>
34005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
34005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
34005ebe:	ee67 6a27 	vmul.f32	s13, s14, s15
34005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34005ec4:	ee07 3a90 	vmov	s15, r3
34005ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34005ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
34005ed0:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34005ed4:	69fb      	ldr	r3, [r7, #28]
34005ed6:	ee07 3a90 	vmov	s15, r3
34005eda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34005ede:	69bb      	ldr	r3, [r7, #24]
34005ee0:	ee07 3a90 	vmov	s15, r3
34005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
34005eec:	edd7 6a02 	vldr	s13, [r7, #8]
34005ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
34005ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34005ef8:	ee17 3a90 	vmov	r3, s15
34005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34005efe:	4b0b      	ldr	r3, [pc, #44]	@ (34005f2c <SystemCoreClockUpdate+0x348>)
34005f00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34005f04:	0c1b      	lsrs	r3, r3, #16
34005f06:	b2db      	uxtb	r3, r3
34005f08:	3301      	adds	r3, #1
34005f0a:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34005f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34005f0e:	687b      	ldr	r3, [r7, #4]
34005f10:	fbb2 f3f3 	udiv	r3, r2, r3
34005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34005f16:	e000      	b.n	34005f1a <SystemCoreClockUpdate+0x336>
    break;
34005f18:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34005f1a:	4a05      	ldr	r2, [pc, #20]	@ (34005f30 <SystemCoreClockUpdate+0x34c>)
34005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34005f1e:	6013      	str	r3, [r2, #0]
}
34005f20:	bf00      	nop
34005f22:	3734      	adds	r7, #52	@ 0x34
34005f24:	46bd      	mov	sp, r7
34005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f2a:	4770      	bx	lr
34005f2c:	56028000 	.word	0x56028000
34005f30:	3401e754 	.word	0x3401e754

34005f34 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34005f34:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34005f38:	b588      	push	{r3, r7, lr}
34005f3a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34005f3c:	f7ff fe52 	bl	34005be4 <SystemCoreClockUpdate>

  return SystemCoreClock;
34005f40:	4b06      	ldr	r3, [pc, #24]	@ (34005f5c <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34005f42:	681b      	ldr	r3, [r3, #0]
}
34005f44:	4618      	mov	r0, r3
34005f46:	46bd      	mov	sp, r7
34005f48:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34005f4c:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34005f50:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34005f54:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34005f58:	4774      	bxns	lr
34005f5a:	bf00      	nop
34005f5c:	3401e754 	.word	0x3401e754

34005f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34005f60:	b580      	push	{r7, lr}
34005f62:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34005f64:	2003      	movs	r0, #3
34005f66:	f000 fb43 	bl	340065f0 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34005f6a:	f7ff fe3b 	bl	34005be4 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34005f6e:	200f      	movs	r0, #15
34005f70:	f000 f812 	bl	34005f98 <HAL_InitTick>
34005f74:	4603      	mov	r3, r0
34005f76:	2b00      	cmp	r3, #0
34005f78:	d001      	beq.n	34005f7e <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34005f7a:	2301      	movs	r3, #1
34005f7c:	e002      	b.n	34005f84 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34005f7e:	f000 f803 	bl	34005f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34005f82:	2300      	movs	r3, #0
}
34005f84:	4618      	mov	r0, r3
34005f86:	bd80      	pop	{r7, pc}

34005f88 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
34005f88:	b480      	push	{r7}
34005f8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34005f8c:	bf00      	nop
34005f8e:	46bd      	mov	sp, r7
34005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f94:	4770      	bx	lr
	...

34005f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34005f98:	b580      	push	{r7, lr}
34005f9a:	b082      	sub	sp, #8
34005f9c:	af00      	add	r7, sp, #0
34005f9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34005fa0:	4b15      	ldr	r3, [pc, #84]	@ (34005ff8 <HAL_InitTick+0x60>)
34005fa2:	781b      	ldrb	r3, [r3, #0]
34005fa4:	2b00      	cmp	r3, #0
34005fa6:	d101      	bne.n	34005fac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34005fa8:	2301      	movs	r3, #1
34005faa:	e021      	b.n	34005ff0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34005fac:	4b13      	ldr	r3, [pc, #76]	@ (34005ffc <HAL_InitTick+0x64>)
34005fae:	681a      	ldr	r2, [r3, #0]
34005fb0:	4b11      	ldr	r3, [pc, #68]	@ (34005ff8 <HAL_InitTick+0x60>)
34005fb2:	781b      	ldrb	r3, [r3, #0]
34005fb4:	4619      	mov	r1, r3
34005fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34005fba:	fbb3 f3f1 	udiv	r3, r3, r1
34005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
34005fc2:	4618      	mov	r0, r3
34005fc4:	f000 fba8 	bl	34006718 <HAL_SYSTICK_Config>
34005fc8:	4603      	mov	r3, r0
34005fca:	2b00      	cmp	r3, #0
34005fcc:	d001      	beq.n	34005fd2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34005fce:	2301      	movs	r3, #1
34005fd0:	e00e      	b.n	34005ff0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34005fd2:	687b      	ldr	r3, [r7, #4]
34005fd4:	2b0f      	cmp	r3, #15
34005fd6:	d80a      	bhi.n	34005fee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34005fd8:	2200      	movs	r2, #0
34005fda:	6879      	ldr	r1, [r7, #4]
34005fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34005fe0:	f000 fb26 	bl	34006630 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34005fe4:	4a06      	ldr	r2, [pc, #24]	@ (34006000 <HAL_InitTick+0x68>)
34005fe6:	687b      	ldr	r3, [r7, #4]
34005fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34005fea:	2300      	movs	r3, #0
34005fec:	e000      	b.n	34005ff0 <HAL_InitTick+0x58>
    return HAL_ERROR;
34005fee:	2301      	movs	r3, #1
}
34005ff0:	4618      	mov	r0, r3
34005ff2:	3708      	adds	r7, #8
34005ff4:	46bd      	mov	sp, r7
34005ff6:	bd80      	pop	{r7, pc}
34005ff8:	3401e75c 	.word	0x3401e75c
34005ffc:	3401e754 	.word	0x3401e754
34006000:	3401e758 	.word	0x3401e758

34006004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34006004:	b480      	push	{r7}
34006006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34006008:	4b06      	ldr	r3, [pc, #24]	@ (34006024 <HAL_IncTick+0x20>)
3400600a:	781b      	ldrb	r3, [r3, #0]
3400600c:	461a      	mov	r2, r3
3400600e:	4b06      	ldr	r3, [pc, #24]	@ (34006028 <HAL_IncTick+0x24>)
34006010:	681b      	ldr	r3, [r3, #0]
34006012:	4413      	add	r3, r2
34006014:	4a04      	ldr	r2, [pc, #16]	@ (34006028 <HAL_IncTick+0x24>)
34006016:	6013      	str	r3, [r2, #0]
}
34006018:	bf00      	nop
3400601a:	46bd      	mov	sp, r7
3400601c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006020:	4770      	bx	lr
34006022:	bf00      	nop
34006024:	3401e75c 	.word	0x3401e75c
34006028:	3401eae0 	.word	0x3401eae0

3400602c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
3400602c:	b480      	push	{r7}
3400602e:	af00      	add	r7, sp, #0
  return uwTick;
34006030:	4b03      	ldr	r3, [pc, #12]	@ (34006040 <HAL_GetTick+0x14>)
34006032:	681b      	ldr	r3, [r3, #0]
}
34006034:	4618      	mov	r0, r3
34006036:	46bd      	mov	sp, r7
34006038:	f85d 7b04 	ldr.w	r7, [sp], #4
3400603c:	4770      	bx	lr
3400603e:	bf00      	nop
34006040:	3401eae0 	.word	0x3401eae0

34006044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34006044:	b580      	push	{r7, lr}
34006046:	b084      	sub	sp, #16
34006048:	af00      	add	r7, sp, #0
3400604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
3400604c:	f7ff ffee 	bl	3400602c <HAL_GetTick>
34006050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34006052:	687b      	ldr	r3, [r7, #4]
34006054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34006056:	68fb      	ldr	r3, [r7, #12]
34006058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3400605c:	d005      	beq.n	3400606a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
3400605e:	4b0a      	ldr	r3, [pc, #40]	@ (34006088 <HAL_Delay+0x44>)
34006060:	781b      	ldrb	r3, [r3, #0]
34006062:	461a      	mov	r2, r3
34006064:	68fb      	ldr	r3, [r7, #12]
34006066:	4413      	add	r3, r2
34006068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3400606a:	bf00      	nop
3400606c:	f7ff ffde 	bl	3400602c <HAL_GetTick>
34006070:	4602      	mov	r2, r0
34006072:	68bb      	ldr	r3, [r7, #8]
34006074:	1ad3      	subs	r3, r2, r3
34006076:	68fa      	ldr	r2, [r7, #12]
34006078:	429a      	cmp	r2, r3
3400607a:	d8f7      	bhi.n	3400606c <HAL_Delay+0x28>
  {
  }
}
3400607c:	bf00      	nop
3400607e:	bf00      	nop
34006080:	3710      	adds	r7, #16
34006082:	46bd      	mov	sp, r7
34006084:	bd80      	pop	{r7, pc}
34006086:	bf00      	nop
34006088:	3401e75c 	.word	0x3401e75c

3400608c <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
3400608c:	b580      	push	{r7, lr}
3400608e:	b084      	sub	sp, #16
34006090:	af00      	add	r7, sp, #0
34006092:	60f8      	str	r0, [r7, #12]
34006094:	60b9      	str	r1, [r7, #8]
34006096:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34006098:	68fb      	ldr	r3, [r7, #12]
3400609a:	2b00      	cmp	r3, #0
3400609c:	d101      	bne.n	340060a2 <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
3400609e:	2301      	movs	r3, #1
340060a0:	e026      	b.n	340060f0 <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
340060a2:	687b      	ldr	r3, [r7, #4]
340060a4:	2b00      	cmp	r3, #0
340060a6:	d004      	beq.n	340060b2 <HAL_BSEC_OTP_Read+0x26>
340060a8:	68fb      	ldr	r3, [r7, #12]
340060aa:	681b      	ldr	r3, [r3, #0]
340060ac:	4a12      	ldr	r2, [pc, #72]	@ (340060f8 <HAL_BSEC_OTP_Read+0x6c>)
340060ae:	4293      	cmp	r3, r2
340060b0:	d004      	beq.n	340060bc <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340060b2:	68fb      	ldr	r3, [r7, #12]
340060b4:	2201      	movs	r2, #1
340060b6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340060b8:	2301      	movs	r3, #1
340060ba:	e019      	b.n	340060f0 <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
340060bc:	68bb      	ldr	r3, [r7, #8]
340060be:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
340060c2:	d211      	bcs.n	340060e8 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340060c4:	68b9      	ldr	r1, [r7, #8]
340060c6:	68f8      	ldr	r0, [r7, #12]
340060c8:	f000 f8ba 	bl	34006240 <HAL_BSEC_OTP_Reload>
340060cc:	4603      	mov	r3, r0
340060ce:	2b00      	cmp	r3, #0
340060d0:	d108      	bne.n	340060e4 <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340060d2:	68fb      	ldr	r3, [r7, #12]
340060d4:	681b      	ldr	r3, [r3, #0]
340060d6:	68ba      	ldr	r2, [r7, #8]
340060d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
340060dc:	687b      	ldr	r3, [r7, #4]
340060de:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
340060e0:	2300      	movs	r3, #0
340060e2:	e005      	b.n	340060f0 <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
340060e4:	2301      	movs	r3, #1
340060e6:	e003      	b.n	340060f0 <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340060e8:	68fb      	ldr	r3, [r7, #12]
340060ea:	2201      	movs	r2, #1
340060ec:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340060ee:	2301      	movs	r3, #1
}
340060f0:	4618      	mov	r0, r3
340060f2:	3710      	adds	r7, #16
340060f4:	46bd      	mov	sp, r7
340060f6:	bd80      	pop	{r7, pc}
340060f8:	56009000 	.word	0x56009000

340060fc <HAL_BSEC_OTP_Program>:
  * @param  Lock      Permanent lock value, this parameter is @ref BSEC_Permanent_Lock
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Program(BSEC_HandleTypeDef *hbsec, uint32_t FuseId, uint32_t FuseData, uint32_t Lock)
{
340060fc:	b580      	push	{r7, lr}
340060fe:	b088      	sub	sp, #32
34006100:	af00      	add	r7, sp, #0
34006102:	60f8      	str	r0, [r7, #12]
34006104:	60b9      	str	r1, [r7, #8]
34006106:	607a      	str	r2, [r7, #4]
34006108:	603b      	str	r3, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t read_data;
  uint32_t tick_start = HAL_GetTick();
3400610a:	f7ff ff8f 	bl	3400602c <HAL_GetTick>
3400610e:	61f8      	str	r0, [r7, #28]

  /* Check the handle pointer */
  if (hbsec == NULL)
34006110:	68fb      	ldr	r3, [r7, #12]
34006112:	2b00      	cmp	r3, #0
34006114:	d101      	bne.n	3400611a <HAL_BSEC_OTP_Program+0x1e>
  {
    return HAL_ERROR;
34006116:	2301      	movs	r3, #1
34006118:	e08a      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400611a:	68fb      	ldr	r3, [r7, #12]
3400611c:	681b      	ldr	r3, [r3, #0]
3400611e:	4a46      	ldr	r2, [pc, #280]	@ (34006238 <HAL_BSEC_OTP_Program+0x13c>)
34006120:	4293      	cmp	r3, r2
34006122:	d004      	beq.n	3400612e <HAL_BSEC_OTP_Program+0x32>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34006124:	68fb      	ldr	r3, [r7, #12]
34006126:	2201      	movs	r2, #1
34006128:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
3400612a:	2301      	movs	r3, #1
3400612c:	e080      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the permanent lock */
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
3400612e:	683b      	ldr	r3, [r7, #0]
34006130:	2b00      	cmp	r3, #0
34006132:	d008      	beq.n	34006146 <HAL_BSEC_OTP_Program+0x4a>
34006134:	683b      	ldr	r3, [r7, #0]
34006136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3400613a:	d004      	beq.n	34006146 <HAL_BSEC_OTP_Program+0x4a>
3400613c:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34006140:	483e      	ldr	r0, [pc, #248]	@ (3400623c <HAL_BSEC_OTP_Program+0x140>)
34006142:	f7fb fa45 	bl	340015d0 <assert_failed>

  /* Get the correct register value */
  if (FuseId < BSEC_NB_FUSES)
34006146:	68bb      	ldr	r3, [r7, #8]
34006148:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
3400614c:	d26a      	bcs.n	34006224 <HAL_BSEC_OTP_Program+0x128>
  {
    status_reg = FuseId / 32U;
3400614e:	68bb      	ldr	r3, [r7, #8]
34006150:	095b      	lsrs	r3, r3, #5
34006152:	61bb      	str	r3, [r7, #24]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34006154:	68bb      	ldr	r3, [r7, #8]
34006156:	f003 031f 	and.w	r3, r3, #31
3400615a:	2201      	movs	r2, #1
3400615c:	fa02 f303 	lsl.w	r3, r2, r3
34006160:	617b      	str	r3, [r7, #20]

    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34006162:	68fb      	ldr	r3, [r7, #12]
34006164:	681b      	ldr	r3, [r3, #0]
34006166:	69ba      	ldr	r2, [r7, #24]
34006168:	f502 7200 	add.w	r2, r2, #512	@ 0x200
3400616c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34006170:	697b      	ldr	r3, [r7, #20]
34006172:	4013      	ands	r3, r2
34006174:	2b00      	cmp	r3, #0
34006176:	d150      	bne.n	3400621a <HAL_BSEC_OTP_Program+0x11e>
    {
      /* Write data in register */
      hbsec->Instance->WDR = FuseData;
34006178:	68fb      	ldr	r3, [r7, #12]
3400617a:	681b      	ldr	r3, [r3, #0]
3400617c:	687a      	ldr	r2, [r7, #4]
3400617e:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08

      /* Perform a program of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34006182:	68fb      	ldr	r3, [r7, #12]
34006184:	681b      	ldr	r3, [r3, #0]
34006186:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
3400618a:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400618e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34006192:	68b9      	ldr	r1, [r7, #8]
34006194:	683a      	ldr	r2, [r7, #0]
34006196:	430a      	orrs	r2, r1
34006198:	431a      	orrs	r2, r3
3400619a:	68fb      	ldr	r3, [r7, #12]
3400619c:	681b      	ldr	r3, [r3, #0]
3400619e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
340061a2:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
                                         (FuseId | BSEC_OTPCR_PROG | Lock));

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340061a6:	e00c      	b.n	340061c2 <HAL_BSEC_OTP_Program+0xc6>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340061a8:	f7ff ff40 	bl	3400602c <HAL_GetTick>
340061ac:	4602      	mov	r2, r0
340061ae:	69fb      	ldr	r3, [r7, #28]
340061b0:	1ad3      	subs	r3, r2, r3
340061b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
340061b6:	d904      	bls.n	340061c2 <HAL_BSEC_OTP_Program+0xc6>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340061b8:	68fb      	ldr	r3, [r7, #12]
340061ba:	220a      	movs	r2, #10
340061bc:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
340061be:	2301      	movs	r3, #1
340061c0:	e036      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340061c2:	68fb      	ldr	r3, [r7, #12]
340061c4:	681b      	ldr	r3, [r3, #0]
340061c6:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340061ca:	f003 0301 	and.w	r3, r3, #1
340061ce:	2b00      	cmp	r3, #0
340061d0:	d1ea      	bne.n	340061a8 <HAL_BSEC_OTP_Program+0xac>
        }
      }

      /* Check programming errors */
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
340061d2:	68fb      	ldr	r3, [r7, #12]
340061d4:	681b      	ldr	r3, [r3, #0]
340061d6:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340061da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340061de:	2b00      	cmp	r3, #0
340061e0:	d005      	beq.n	340061ee <HAL_BSEC_OTP_Program+0xf2>
      {
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
340061e2:	68fb      	ldr	r3, [r7, #12]
340061e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340061e8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
340061ea:	2301      	movs	r3, #1
340061ec:	e020      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
      }

      /* Read back programmed data */
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
340061ee:	f107 0310 	add.w	r3, r7, #16
340061f2:	461a      	mov	r2, r3
340061f4:	68b9      	ldr	r1, [r7, #8]
340061f6:	68f8      	ldr	r0, [r7, #12]
340061f8:	f7ff ff48 	bl	3400608c <HAL_BSEC_OTP_Read>
340061fc:	4603      	mov	r3, r0
340061fe:	2b00      	cmp	r3, #0
34006200:	d109      	bne.n	34006216 <HAL_BSEC_OTP_Program+0x11a>
      {
        /* Verify programmed data */
        if (read_data != FuseData)
34006202:	693b      	ldr	r3, [r7, #16]
34006204:	687a      	ldr	r2, [r7, #4]
34006206:	429a      	cmp	r2, r3
34006208:	d011      	beq.n	3400622e <HAL_BSEC_OTP_Program+0x132>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400620a:	68fb      	ldr	r3, [r7, #12]
3400620c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34006210:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34006212:	2301      	movs	r3, #1
34006214:	e00c      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
        }
      }
      else
      {
        return HAL_ERROR;
34006216:	2301      	movs	r3, #1
34006218:	e00a      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
      }
    }
    else
    {
      /* Fuse is sticky programming locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400621a:	68fb      	ldr	r3, [r7, #12]
3400621c:	2204      	movs	r2, #4
3400621e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34006220:	2301      	movs	r3, #1
34006222:	e005      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34006224:	68fb      	ldr	r3, [r7, #12]
34006226:	2201      	movs	r2, #1
34006228:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
3400622a:	2301      	movs	r3, #1
3400622c:	e000      	b.n	34006230 <HAL_BSEC_OTP_Program+0x134>
  }

  return HAL_OK;
3400622e:	2300      	movs	r3, #0
}
34006230:	4618      	mov	r0, r3
34006232:	3720      	adds	r7, #32
34006234:	46bd      	mov	sp, r7
34006236:	bd80      	pop	{r7, pc}
34006238:	56009000 	.word	0x56009000
3400623c:	3401d19c 	.word	0x3401d19c

34006240 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34006240:	b580      	push	{r7, lr}
34006242:	b086      	sub	sp, #24
34006244:	af00      	add	r7, sp, #0
34006246:	6078      	str	r0, [r7, #4]
34006248:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400624a:	f7ff feef 	bl	3400602c <HAL_GetTick>
3400624e:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34006250:	687b      	ldr	r3, [r7, #4]
34006252:	2b00      	cmp	r3, #0
34006254:	d101      	bne.n	3400625a <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34006256:	2301      	movs	r3, #1
34006258:	e063      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400625a:	687b      	ldr	r3, [r7, #4]
3400625c:	681b      	ldr	r3, [r3, #0]
3400625e:	4a33      	ldr	r2, [pc, #204]	@ (3400632c <HAL_BSEC_OTP_Reload+0xec>)
34006260:	4293      	cmp	r3, r2
34006262:	d004      	beq.n	3400626e <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34006264:	687b      	ldr	r3, [r7, #4]
34006266:	2201      	movs	r2, #1
34006268:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
3400626a:	2301      	movs	r3, #1
3400626c:	e059      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
3400626e:	683b      	ldr	r3, [r7, #0]
34006270:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34006274:	d24f      	bcs.n	34006316 <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34006276:	683b      	ldr	r3, [r7, #0]
34006278:	095b      	lsrs	r3, r3, #5
3400627a:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400627c:	683b      	ldr	r3, [r7, #0]
3400627e:	f003 031f 	and.w	r3, r3, #31
34006282:	2201      	movs	r2, #1
34006284:	fa02 f303 	lsl.w	r3, r2, r3
34006288:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400628a:	687b      	ldr	r3, [r7, #4]
3400628c:	681b      	ldr	r3, [r3, #0]
3400628e:	693a      	ldr	r2, [r7, #16]
34006290:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34006294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34006298:	68fb      	ldr	r3, [r7, #12]
3400629a:	4013      	ands	r3, r2
3400629c:	2b00      	cmp	r3, #0
3400629e:	d135      	bne.n	3400630c <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
340062a0:	687b      	ldr	r3, [r7, #4]
340062a2:	681b      	ldr	r3, [r3, #0]
340062a4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
340062a8:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
340062ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
340062b0:	687a      	ldr	r2, [r7, #4]
340062b2:	6812      	ldr	r2, [r2, #0]
340062b4:	6839      	ldr	r1, [r7, #0]
340062b6:	430b      	orrs	r3, r1
340062b8:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340062bc:	e00c      	b.n	340062d8 <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
340062be:	f7ff feb5 	bl	3400602c <HAL_GetTick>
340062c2:	4602      	mov	r2, r0
340062c4:	697b      	ldr	r3, [r7, #20]
340062c6:	1ad3      	subs	r3, r2, r3
340062c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
340062cc:	d904      	bls.n	340062d8 <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
340062ce:	687b      	ldr	r3, [r7, #4]
340062d0:	220a      	movs	r2, #10
340062d2:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
340062d4:	2301      	movs	r3, #1
340062d6:	e024      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
340062d8:	687b      	ldr	r3, [r7, #4]
340062da:	681b      	ldr	r3, [r3, #0]
340062dc:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340062e0:	f003 0301 	and.w	r3, r3, #1
340062e4:	2b00      	cmp	r3, #0
340062e6:	d1ea      	bne.n	340062be <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
340062e8:	687b      	ldr	r3, [r7, #4]
340062ea:	681b      	ldr	r3, [r3, #0]
340062ec:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340062f0:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
340062f4:	2b00      	cmp	r3, #0
340062f6:	d013      	beq.n	34006320 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
340062f8:	687b      	ldr	r3, [r7, #4]
340062fa:	681b      	ldr	r3, [r3, #0]
340062fc:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34006300:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
34006304:	687b      	ldr	r3, [r7, #4]
34006306:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34006308:	2301      	movs	r3, #1
3400630a:	e00a      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400630c:	687b      	ldr	r3, [r7, #4]
3400630e:	2204      	movs	r2, #4
34006310:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34006312:	2301      	movs	r3, #1
34006314:	e005      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34006316:	687b      	ldr	r3, [r7, #4]
34006318:	2201      	movs	r2, #1
3400631a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
3400631c:	2301      	movs	r3, #1
3400631e:	e000      	b.n	34006322 <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
34006320:	2300      	movs	r3, #0
}
34006322:	4618      	mov	r0, r3
34006324:	3718      	adds	r7, #24
34006326:	46bd      	mov	sp, r7
34006328:	bd80      	pop	{r7, pc}
3400632a:	bf00      	nop
3400632c:	56009000 	.word	0x56009000

34006330 <HAL_CACHEAXI_Init>:
  * @note   In case HAL_CACHEAXI_Init() returns HAL_BUSY because an invalidation
  *         procedure is ongoing, the application should call again HAL_CACHEAXI_Init()
  *         until it returns HAL_OK to have the CACHEAXI enabled
  */
HAL_StatusTypeDef  HAL_CACHEAXI_Init(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34006330:	b580      	push	{r7, lr}
34006332:	b084      	sub	sp, #16
34006334:	af00      	add	r7, sp, #0
34006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the CACHEAXI handle allocation */
  if (hcacheaxi == NULL)
34006338:	687b      	ldr	r3, [r7, #4]
3400633a:	2b00      	cmp	r3, #0
3400633c:	d101      	bne.n	34006342 <HAL_CACHEAXI_Init+0x12>
  {
    return HAL_ERROR;
3400633e:	2301      	movs	r3, #1
34006340:	e021      	b.n	34006386 <HAL_CACHEAXI_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34006342:	687b      	ldr	r3, [r7, #4]
34006344:	681b      	ldr	r3, [r3, #0]
34006346:	4a12      	ldr	r2, [pc, #72]	@ (34006390 <HAL_CACHEAXI_Init+0x60>)
34006348:	4293      	cmp	r3, r2
3400634a:	d008      	beq.n	3400635e <HAL_CACHEAXI_Init+0x2e>
3400634c:	687b      	ldr	r3, [r7, #4]
3400634e:	681b      	ldr	r3, [r3, #0]
34006350:	4a10      	ldr	r2, [pc, #64]	@ (34006394 <HAL_CACHEAXI_Init+0x64>)
34006352:	4293      	cmp	r3, r2
34006354:	d003      	beq.n	3400635e <HAL_CACHEAXI_Init+0x2e>
34006356:	21bc      	movs	r1, #188	@ 0xbc
34006358:	480f      	ldr	r0, [pc, #60]	@ (34006398 <HAL_CACHEAXI_Init+0x68>)
3400635a:	f7fb f939 	bl	340015d0 <assert_failed>

  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400635e:	687b      	ldr	r3, [r7, #4]
34006360:	791b      	ldrb	r3, [r3, #4]
34006362:	b2db      	uxtb	r3, r3
34006364:	2b00      	cmp	r3, #0
34006366:	d102      	bne.n	3400636e <HAL_CACHEAXI_Init+0x3e>

    /* Init the low level hardware */
    hcacheaxi->MspInitCallback(hcacheaxi);
#else
    /* Init the low level hardware */
    HAL_CACHEAXI_MspInit(hcacheaxi);
34006368:	6878      	ldr	r0, [r7, #4]
3400636a:	f7fb f919 	bl	340015a0 <HAL_CACHEAXI_MspInit>
#endif /* USE_HAL_CACHEAXI_REGISTER_CALLBACKS */
  }

  /* Init the error code */
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400636e:	687b      	ldr	r3, [r7, #4]
34006370:	2200      	movs	r2, #0
34006372:	609a      	str	r2, [r3, #8]

  /* Init the CACHEAXI handle state */
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34006374:	687b      	ldr	r3, [r7, #4]
34006376:	2201      	movs	r2, #1
34006378:	711a      	strb	r2, [r3, #4]

  /* Enable the selected CACHEAXI peripheral */
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400637a:	6878      	ldr	r0, [r7, #4]
3400637c:	f000 f80e 	bl	3400639c <HAL_CACHEAXI_Enable>
34006380:	4603      	mov	r3, r0
34006382:	73fb      	strb	r3, [r7, #15]

  return status;
34006384:	7bfb      	ldrb	r3, [r7, #15]
}
34006386:	4618      	mov	r0, r3
34006388:	3710      	adds	r7, #16
3400638a:	46bd      	mov	sp, r7
3400638c:	bd80      	pop	{r7, pc}
3400638e:	bf00      	nop
34006390:	580dfc00 	.word	0x580dfc00
34006394:	480dfc00 	.word	0x480dfc00
34006398:	3401d248 	.word	0x3401d248

3400639c <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3400639c:	b580      	push	{r7, lr}
3400639e:	b084      	sub	sp, #16
340063a0:	af00      	add	r7, sp, #0
340063a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
340063a4:	2300      	movs	r3, #0
340063a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
340063a8:	687b      	ldr	r3, [r7, #4]
340063aa:	2b00      	cmp	r3, #0
340063ac:	d101      	bne.n	340063b2 <HAL_CACHEAXI_Enable+0x16>
  {
    return HAL_ERROR;
340063ae:	2301      	movs	r3, #1
340063b0:	e043      	b.n	3400643a <HAL_CACHEAXI_Enable+0x9e>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
340063b2:	687b      	ldr	r3, [r7, #4]
340063b4:	681b      	ldr	r3, [r3, #0]
340063b6:	4a23      	ldr	r2, [pc, #140]	@ (34006444 <HAL_CACHEAXI_Enable+0xa8>)
340063b8:	4293      	cmp	r3, r2
340063ba:	d009      	beq.n	340063d0 <HAL_CACHEAXI_Enable+0x34>
340063bc:	687b      	ldr	r3, [r7, #4]
340063be:	681b      	ldr	r3, [r3, #0]
340063c0:	4a21      	ldr	r2, [pc, #132]	@ (34006448 <HAL_CACHEAXI_Enable+0xac>)
340063c2:	4293      	cmp	r3, r2
340063c4:	d004      	beq.n	340063d0 <HAL_CACHEAXI_Enable+0x34>
340063c6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340063ca:	4820      	ldr	r0, [pc, #128]	@ (3400644c <HAL_CACHEAXI_Enable+0xb0>)
340063cc:	f7fb f900 	bl	340015d0 <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340063d0:	687b      	ldr	r3, [r7, #4]
340063d2:	681b      	ldr	r3, [r3, #0]
340063d4:	685b      	ldr	r3, [r3, #4]
340063d6:	f003 0301 	and.w	r3, r3, #1
340063da:	2b00      	cmp	r3, #0
340063dc:	d01e      	beq.n	3400641c <HAL_CACHEAXI_Enable+0x80>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
340063de:	f7ff fe25 	bl	3400602c <HAL_GetTick>
340063e2:	60b8      	str	r0, [r7, #8]

    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340063e4:	e013      	b.n	3400640e <HAL_CACHEAXI_Enable+0x72>
    {
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340063e6:	f7ff fe21 	bl	3400602c <HAL_GetTick>
340063ea:	4602      	mov	r2, r0
340063ec:	68bb      	ldr	r3, [r7, #8]
340063ee:	1ad3      	subs	r3, r2, r3
340063f0:	2b01      	cmp	r3, #1
340063f2:	d90c      	bls.n	3400640e <HAL_CACHEAXI_Enable+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340063f4:	687b      	ldr	r3, [r7, #4]
340063f6:	681b      	ldr	r3, [r3, #0]
340063f8:	685b      	ldr	r3, [r3, #4]
340063fa:	f003 0301 	and.w	r3, r3, #1
340063fe:	2b00      	cmp	r3, #0
34006400:	d105      	bne.n	3400640e <HAL_CACHEAXI_Enable+0x72>
        {
          /* Update error code */
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34006402:	687b      	ldr	r3, [r7, #4]
34006404:	2210      	movs	r2, #16
34006406:	609a      	str	r2, [r3, #8]
          /* Return error status */
          status =  HAL_ERROR;
34006408:	2301      	movs	r3, #1
3400640a:	73fb      	strb	r3, [r7, #15]
          break;
3400640c:	e006      	b.n	3400641c <HAL_CACHEAXI_Enable+0x80>
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400640e:	687b      	ldr	r3, [r7, #4]
34006410:	681b      	ldr	r3, [r3, #0]
34006412:	685b      	ldr	r3, [r3, #4]
34006414:	f003 0301 	and.w	r3, r3, #1
34006418:	2b00      	cmp	r3, #0
3400641a:	d1e4      	bne.n	340063e6 <HAL_CACHEAXI_Enable+0x4a>
        }
      }
    }
  }

  if (status == HAL_OK)
3400641c:	7bfb      	ldrb	r3, [r7, #15]
3400641e:	2b00      	cmp	r3, #0
34006420:	d10a      	bne.n	34006438 <HAL_CACHEAXI_Enable+0x9c>
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34006422:	687b      	ldr	r3, [r7, #4]
34006424:	2200      	movs	r2, #0
34006426:	609a      	str	r2, [r3, #8]
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34006428:	687b      	ldr	r3, [r7, #4]
3400642a:	681b      	ldr	r3, [r3, #0]
3400642c:	681a      	ldr	r2, [r3, #0]
3400642e:	687b      	ldr	r3, [r7, #4]
34006430:	681b      	ldr	r3, [r3, #0]
34006432:	f042 0201 	orr.w	r2, r2, #1
34006436:	601a      	str	r2, [r3, #0]
  }

  return status;
34006438:	7bfb      	ldrb	r3, [r7, #15]
}
3400643a:	4618      	mov	r0, r3
3400643c:	3710      	adds	r7, #16
3400643e:	46bd      	mov	sp, r7
34006440:	bd80      	pop	{r7, pc}
34006442:	bf00      	nop
34006444:	580dfc00 	.word	0x580dfc00
34006448:	480dfc00 	.word	0x480dfc00
3400644c:	3401d248 	.word	0x3401d248

34006450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34006450:	b480      	push	{r7}
34006452:	b085      	sub	sp, #20
34006454:	af00      	add	r7, sp, #0
34006456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34006458:	687b      	ldr	r3, [r7, #4]
3400645a:	f003 0307 	and.w	r3, r3, #7
3400645e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34006460:	4b0c      	ldr	r3, [pc, #48]	@ (34006494 <__NVIC_SetPriorityGrouping+0x44>)
34006462:	68db      	ldr	r3, [r3, #12]
34006464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34006466:	68ba      	ldr	r2, [r7, #8]
34006468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
3400646c:	4013      	ands	r3, r2
3400646e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34006470:	68fb      	ldr	r3, [r7, #12]
34006472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34006474:	68bb      	ldr	r3, [r7, #8]
34006476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34006478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
3400647c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34006480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34006482:	4a04      	ldr	r2, [pc, #16]	@ (34006494 <__NVIC_SetPriorityGrouping+0x44>)
34006484:	68bb      	ldr	r3, [r7, #8]
34006486:	60d3      	str	r3, [r2, #12]
}
34006488:	bf00      	nop
3400648a:	3714      	adds	r7, #20
3400648c:	46bd      	mov	sp, r7
3400648e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006492:	4770      	bx	lr
34006494:	e000ed00 	.word	0xe000ed00

34006498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34006498:	b480      	push	{r7}
3400649a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
3400649c:	4b04      	ldr	r3, [pc, #16]	@ (340064b0 <__NVIC_GetPriorityGrouping+0x18>)
3400649e:	68db      	ldr	r3, [r3, #12]
340064a0:	0a1b      	lsrs	r3, r3, #8
340064a2:	f003 0307 	and.w	r3, r3, #7
}
340064a6:	4618      	mov	r0, r3
340064a8:	46bd      	mov	sp, r7
340064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
340064ae:	4770      	bx	lr
340064b0:	e000ed00 	.word	0xe000ed00

340064b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
340064b4:	b480      	push	{r7}
340064b6:	b083      	sub	sp, #12
340064b8:	af00      	add	r7, sp, #0
340064ba:	4603      	mov	r3, r0
340064bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
340064be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340064c2:	2b00      	cmp	r3, #0
340064c4:	db0b      	blt.n	340064de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340064c6:	88fb      	ldrh	r3, [r7, #6]
340064c8:	f003 021f 	and.w	r2, r3, #31
340064cc:	4907      	ldr	r1, [pc, #28]	@ (340064ec <__NVIC_EnableIRQ+0x38>)
340064ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340064d2:	095b      	lsrs	r3, r3, #5
340064d4:	2001      	movs	r0, #1
340064d6:	fa00 f202 	lsl.w	r2, r0, r2
340064da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
340064de:	bf00      	nop
340064e0:	370c      	adds	r7, #12
340064e2:	46bd      	mov	sp, r7
340064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
340064e8:	4770      	bx	lr
340064ea:	bf00      	nop
340064ec:	e000e100 	.word	0xe000e100

340064f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
340064f0:	b480      	push	{r7}
340064f2:	b083      	sub	sp, #12
340064f4:	af00      	add	r7, sp, #0
340064f6:	4603      	mov	r3, r0
340064f8:	6039      	str	r1, [r7, #0]
340064fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
340064fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34006500:	2b00      	cmp	r3, #0
34006502:	db0a      	blt.n	3400651a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34006504:	683b      	ldr	r3, [r7, #0]
34006506:	b2da      	uxtb	r2, r3
34006508:	490c      	ldr	r1, [pc, #48]	@ (3400653c <__NVIC_SetPriority+0x4c>)
3400650a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3400650e:	0112      	lsls	r2, r2, #4
34006510:	b2d2      	uxtb	r2, r2
34006512:	440b      	add	r3, r1
34006514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34006518:	e00a      	b.n	34006530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400651a:	683b      	ldr	r3, [r7, #0]
3400651c:	b2da      	uxtb	r2, r3
3400651e:	4908      	ldr	r1, [pc, #32]	@ (34006540 <__NVIC_SetPriority+0x50>)
34006520:	88fb      	ldrh	r3, [r7, #6]
34006522:	f003 030f 	and.w	r3, r3, #15
34006526:	3b04      	subs	r3, #4
34006528:	0112      	lsls	r2, r2, #4
3400652a:	b2d2      	uxtb	r2, r2
3400652c:	440b      	add	r3, r1
3400652e:	761a      	strb	r2, [r3, #24]
}
34006530:	bf00      	nop
34006532:	370c      	adds	r7, #12
34006534:	46bd      	mov	sp, r7
34006536:	f85d 7b04 	ldr.w	r7, [sp], #4
3400653a:	4770      	bx	lr
3400653c:	e000e100 	.word	0xe000e100
34006540:	e000ed00 	.word	0xe000ed00

34006544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34006544:	b480      	push	{r7}
34006546:	b089      	sub	sp, #36	@ 0x24
34006548:	af00      	add	r7, sp, #0
3400654a:	60f8      	str	r0, [r7, #12]
3400654c:	60b9      	str	r1, [r7, #8]
3400654e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34006550:	68fb      	ldr	r3, [r7, #12]
34006552:	f003 0307 	and.w	r3, r3, #7
34006556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34006558:	69fb      	ldr	r3, [r7, #28]
3400655a:	f1c3 0307 	rsb	r3, r3, #7
3400655e:	2b04      	cmp	r3, #4
34006560:	bf28      	it	cs
34006562:	2304      	movcs	r3, #4
34006564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34006566:	69fb      	ldr	r3, [r7, #28]
34006568:	3304      	adds	r3, #4
3400656a:	2b06      	cmp	r3, #6
3400656c:	d902      	bls.n	34006574 <NVIC_EncodePriority+0x30>
3400656e:	69fb      	ldr	r3, [r7, #28]
34006570:	3b03      	subs	r3, #3
34006572:	e000      	b.n	34006576 <NVIC_EncodePriority+0x32>
34006574:	2300      	movs	r3, #0
34006576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34006578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3400657c:	69bb      	ldr	r3, [r7, #24]
3400657e:	fa02 f303 	lsl.w	r3, r2, r3
34006582:	43da      	mvns	r2, r3
34006584:	68bb      	ldr	r3, [r7, #8]
34006586:	401a      	ands	r2, r3
34006588:	697b      	ldr	r3, [r7, #20]
3400658a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
3400658c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34006590:	697b      	ldr	r3, [r7, #20]
34006592:	fa01 f303 	lsl.w	r3, r1, r3
34006596:	43d9      	mvns	r1, r3
34006598:	687b      	ldr	r3, [r7, #4]
3400659a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400659c:	4313      	orrs	r3, r2
         );
}
3400659e:	4618      	mov	r0, r3
340065a0:	3724      	adds	r7, #36	@ 0x24
340065a2:	46bd      	mov	sp, r7
340065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340065a8:	4770      	bx	lr
	...

340065ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
340065ac:	b580      	push	{r7, lr}
340065ae:	b082      	sub	sp, #8
340065b0:	af00      	add	r7, sp, #0
340065b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
340065b4:	687b      	ldr	r3, [r7, #4]
340065b6:	3b01      	subs	r3, #1
340065b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340065bc:	d301      	bcc.n	340065c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
340065be:	2301      	movs	r3, #1
340065c0:	e00f      	b.n	340065e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
340065c2:	4a0a      	ldr	r2, [pc, #40]	@ (340065ec <SysTick_Config+0x40>)
340065c4:	687b      	ldr	r3, [r7, #4]
340065c6:	3b01      	subs	r3, #1
340065c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
340065ca:	210f      	movs	r1, #15
340065cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340065d0:	f7ff ff8e 	bl	340064f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
340065d4:	4b05      	ldr	r3, [pc, #20]	@ (340065ec <SysTick_Config+0x40>)
340065d6:	2200      	movs	r2, #0
340065d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
340065da:	4b04      	ldr	r3, [pc, #16]	@ (340065ec <SysTick_Config+0x40>)
340065dc:	2207      	movs	r2, #7
340065de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
340065e0:	2300      	movs	r3, #0
}
340065e2:	4618      	mov	r0, r3
340065e4:	3708      	adds	r7, #8
340065e6:	46bd      	mov	sp, r7
340065e8:	bd80      	pop	{r7, pc}
340065ea:	bf00      	nop
340065ec:	e000e010 	.word	0xe000e010

340065f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
340065f0:	b580      	push	{r7, lr}
340065f2:	b082      	sub	sp, #8
340065f4:	af00      	add	r7, sp, #0
340065f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
340065f8:	687b      	ldr	r3, [r7, #4]
340065fa:	2b07      	cmp	r3, #7
340065fc:	d00f      	beq.n	3400661e <HAL_NVIC_SetPriorityGrouping+0x2e>
340065fe:	687b      	ldr	r3, [r7, #4]
34006600:	2b06      	cmp	r3, #6
34006602:	d00c      	beq.n	3400661e <HAL_NVIC_SetPriorityGrouping+0x2e>
34006604:	687b      	ldr	r3, [r7, #4]
34006606:	2b05      	cmp	r3, #5
34006608:	d009      	beq.n	3400661e <HAL_NVIC_SetPriorityGrouping+0x2e>
3400660a:	687b      	ldr	r3, [r7, #4]
3400660c:	2b04      	cmp	r3, #4
3400660e:	d006      	beq.n	3400661e <HAL_NVIC_SetPriorityGrouping+0x2e>
34006610:	687b      	ldr	r3, [r7, #4]
34006612:	2b03      	cmp	r3, #3
34006614:	d003      	beq.n	3400661e <HAL_NVIC_SetPriorityGrouping+0x2e>
34006616:	21e6      	movs	r1, #230	@ 0xe6
34006618:	4804      	ldr	r0, [pc, #16]	@ (3400662c <HAL_NVIC_SetPriorityGrouping+0x3c>)
3400661a:	f7fa ffd9 	bl	340015d0 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
3400661e:	6878      	ldr	r0, [r7, #4]
34006620:	f7ff ff16 	bl	34006450 <__NVIC_SetPriorityGrouping>
}
34006624:	bf00      	nop
34006626:	3708      	adds	r7, #8
34006628:	46bd      	mov	sp, r7
3400662a:	bd80      	pop	{r7, pc}
3400662c:	3401d2f8 	.word	0x3401d2f8

34006630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34006630:	b580      	push	{r7, lr}
34006632:	b086      	sub	sp, #24
34006634:	af00      	add	r7, sp, #0
34006636:	4603      	mov	r3, r0
34006638:	60b9      	str	r1, [r7, #8]
3400663a:	607a      	str	r2, [r7, #4]
3400663c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400663e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34006642:	f113 0f0c 	cmn.w	r3, #12
34006646:	db04      	blt.n	34006652 <HAL_NVIC_SetPriority+0x22>
34006648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
3400664c:	f113 0f04 	cmn.w	r3, #4
34006650:	d103      	bne.n	3400665a <HAL_NVIC_SetPriority+0x2a>
34006652:	21ff      	movs	r1, #255	@ 0xff
34006654:	4822      	ldr	r0, [pc, #136]	@ (340066e0 <HAL_NVIC_SetPriority+0xb0>)
34006656:	f7fa ffbb 	bl	340015d0 <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
3400665a:	f7ff ff1d 	bl	34006498 <__NVIC_GetPriorityGrouping>
3400665e:	4603      	mov	r3, r0
34006660:	f003 0307 	and.w	r3, r3, #7
34006664:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34006666:	697b      	ldr	r3, [r7, #20]
34006668:	2b02      	cmp	r3, #2
3400666a:	d806      	bhi.n	3400667a <HAL_NVIC_SetPriority+0x4a>
3400666c:	687b      	ldr	r3, [r7, #4]
3400666e:	2b00      	cmp	r3, #0
34006670:	bf0c      	ite	eq
34006672:	2301      	moveq	r3, #1
34006674:	2300      	movne	r3, #0
34006676:	b2db      	uxtb	r3, r3
34006678:	e00a      	b.n	34006690 <HAL_NVIC_SetPriority+0x60>
3400667a:	697b      	ldr	r3, [r7, #20]
3400667c:	3b03      	subs	r3, #3
3400667e:	2201      	movs	r2, #1
34006680:	fa02 f303 	lsl.w	r3, r2, r3
34006684:	687a      	ldr	r2, [r7, #4]
34006686:	429a      	cmp	r2, r3
34006688:	bf34      	ite	cc
3400668a:	2301      	movcc	r3, #1
3400668c:	2300      	movcs	r3, #0
3400668e:	b2db      	uxtb	r3, r3
34006690:	2b00      	cmp	r3, #0
34006692:	d104      	bne.n	3400669e <HAL_NVIC_SetPriority+0x6e>
34006694:	f44f 7181 	mov.w	r1, #258	@ 0x102
34006698:	4811      	ldr	r0, [pc, #68]	@ (340066e0 <HAL_NVIC_SetPriority+0xb0>)
3400669a:	f7fa ff99 	bl	340015d0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
3400669e:	68bb      	ldr	r3, [r7, #8]
340066a0:	2b0f      	cmp	r3, #15
340066a2:	d808      	bhi.n	340066b6 <HAL_NVIC_SetPriority+0x86>
340066a4:	697b      	ldr	r3, [r7, #20]
340066a6:	f1c3 0307 	rsb	r3, r3, #7
340066aa:	2201      	movs	r2, #1
340066ac:	fa02 f303 	lsl.w	r3, r2, r3
340066b0:	68ba      	ldr	r2, [r7, #8]
340066b2:	429a      	cmp	r2, r3
340066b4:	d304      	bcc.n	340066c0 <HAL_NVIC_SetPriority+0x90>
340066b6:	f240 1103 	movw	r1, #259	@ 0x103
340066ba:	4809      	ldr	r0, [pc, #36]	@ (340066e0 <HAL_NVIC_SetPriority+0xb0>)
340066bc:	f7fa ff88 	bl	340015d0 <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
340066c0:	687a      	ldr	r2, [r7, #4]
340066c2:	68b9      	ldr	r1, [r7, #8]
340066c4:	6978      	ldr	r0, [r7, #20]
340066c6:	f7ff ff3d 	bl	34006544 <NVIC_EncodePriority>
340066ca:	4602      	mov	r2, r0
340066cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
340066d0:	4611      	mov	r1, r2
340066d2:	4618      	mov	r0, r3
340066d4:	f7ff ff0c 	bl	340064f0 <__NVIC_SetPriority>
}
340066d8:	bf00      	nop
340066da:	3718      	adds	r7, #24
340066dc:	46bd      	mov	sp, r7
340066de:	bd80      	pop	{r7, pc}
340066e0:	3401d2f8 	.word	0x3401d2f8

340066e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
340066e4:	b580      	push	{r7, lr}
340066e6:	b082      	sub	sp, #8
340066e8:	af00      	add	r7, sp, #0
340066ea:	4603      	mov	r3, r0
340066ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
340066ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340066f2:	2b00      	cmp	r3, #0
340066f4:	da04      	bge.n	34006700 <HAL_NVIC_EnableIRQ+0x1c>
340066f6:	f240 1115 	movw	r1, #277	@ 0x115
340066fa:	4806      	ldr	r0, [pc, #24]	@ (34006714 <HAL_NVIC_EnableIRQ+0x30>)
340066fc:	f7fa ff68 	bl	340015d0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34006700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34006704:	4618      	mov	r0, r3
34006706:	f7ff fed5 	bl	340064b4 <__NVIC_EnableIRQ>
}
3400670a:	bf00      	nop
3400670c:	3708      	adds	r7, #8
3400670e:	46bd      	mov	sp, r7
34006710:	bd80      	pop	{r7, pc}
34006712:	bf00      	nop
34006714:	3401d2f8 	.word	0x3401d2f8

34006718 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34006718:	b580      	push	{r7, lr}
3400671a:	b082      	sub	sp, #8
3400671c:	af00      	add	r7, sp, #0
3400671e:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34006720:	6878      	ldr	r0, [r7, #4]
34006722:	f7ff ff43 	bl	340065ac <SysTick_Config>
34006726:	4603      	mov	r3, r0
}
34006728:	4618      	mov	r0, r3
3400672a:	3708      	adds	r7, #8
3400672c:	46bd      	mov	sp, r7
3400672e:	bd80      	pop	{r7, pc}

34006730 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34006730:	b580      	push	{r7, lr}
34006732:	b084      	sub	sp, #16
34006734:	af00      	add	r7, sp, #0
34006736:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34006738:	687b      	ldr	r3, [r7, #4]
3400673a:	681b      	ldr	r3, [r3, #0]
3400673c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
34006740:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34006742:	687b      	ldr	r3, [r7, #4]
34006744:	681b      	ldr	r3, [r3, #0]
34006746:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
3400674a:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
3400674c:	68fb      	ldr	r3, [r7, #12]
3400674e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34006752:	2b00      	cmp	r3, #0
34006754:	d01e      	beq.n	34006794 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34006756:	68bb      	ldr	r3, [r7, #8]
34006758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400675c:	2b00      	cmp	r3, #0
3400675e:	d019      	beq.n	34006794 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34006760:	687b      	ldr	r3, [r7, #4]
34006762:	681b      	ldr	r3, [r3, #0]
34006764:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006768:	687b      	ldr	r3, [r7, #4]
3400676a:	681b      	ldr	r3, [r3, #0]
3400676c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34006770:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34006774:	687b      	ldr	r3, [r7, #4]
34006776:	689b      	ldr	r3, [r3, #8]
34006778:	f043 0204 	orr.w	r2, r3, #4
3400677c:	687b      	ldr	r3, [r7, #4]
3400677e:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34006780:	687b      	ldr	r3, [r7, #4]
34006782:	681b      	ldr	r3, [r3, #0]
34006784:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34006788:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3400678c:	2100      	movs	r1, #0
3400678e:	6878      	ldr	r0, [r7, #4]
34006790:	f000 fe67 	bl	34007462 <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34006794:	68fb      	ldr	r3, [r7, #12]
34006796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400679a:	2b00      	cmp	r3, #0
3400679c:	d00e      	beq.n	340067bc <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
3400679e:	68bb      	ldr	r3, [r7, #8]
340067a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340067a4:	2b00      	cmp	r3, #0
340067a6:	d009      	beq.n	340067bc <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
340067a8:	687b      	ldr	r3, [r7, #4]
340067aa:	681b      	ldr	r3, [r3, #0]
340067ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340067b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
340067b4:	2100      	movs	r1, #0
340067b6:	6878      	ldr	r0, [r7, #4]
340067b8:	f013 fbea 	bl	34019f90 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
340067bc:	68fb      	ldr	r3, [r7, #12]
340067be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340067c2:	2b00      	cmp	r3, #0
340067c4:	d023      	beq.n	3400680e <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
340067c6:	68bb      	ldr	r3, [r7, #8]
340067c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340067cc:	2b00      	cmp	r3, #0
340067ce:	d01e      	beq.n	3400680e <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340067d0:	687b      	ldr	r3, [r7, #4]
340067d2:	681b      	ldr	r3, [r3, #0]
340067d4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340067d8:	f003 0304 	and.w	r3, r3, #4
340067dc:	2b04      	cmp	r3, #4
340067de:	d10c      	bne.n	340067fa <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
340067e0:	687b      	ldr	r3, [r7, #4]
340067e2:	681b      	ldr	r3, [r3, #0]
340067e4:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340067e8:	687b      	ldr	r3, [r7, #4]
340067ea:	681b      	ldr	r3, [r3, #0]
340067ec:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340067f0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340067f4:	687b      	ldr	r3, [r7, #4]
340067f6:	2201      	movs	r2, #1
340067f8:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340067fa:	687b      	ldr	r3, [r7, #4]
340067fc:	681b      	ldr	r3, [r3, #0]
340067fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
34006802:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34006806:	2100      	movs	r1, #0
34006808:	6878      	ldr	r0, [r7, #4]
3400680a:	f013 fbdb 	bl	34019fc4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
3400680e:	68fb      	ldr	r3, [r7, #12]
34006810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006814:	2b00      	cmp	r3, #0
34006816:	d00e      	beq.n	34006836 <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34006818:	68bb      	ldr	r3, [r7, #8]
3400681a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400681e:	2b00      	cmp	r3, #0
34006820:	d009      	beq.n	34006836 <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34006822:	687b      	ldr	r3, [r7, #4]
34006824:	681b      	ldr	r3, [r3, #0]
34006826:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400682a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400682e:	2100      	movs	r1, #0
34006830:	6878      	ldr	r0, [r7, #4]
34006832:	f000 fe0b 	bl	3400744c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34006836:	68fb      	ldr	r3, [r7, #12]
34006838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400683c:	2b00      	cmp	r3, #0
3400683e:	d021      	beq.n	34006884 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34006840:	68bb      	ldr	r3, [r7, #8]
34006842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34006846:	2b00      	cmp	r3, #0
34006848:	d01c      	beq.n	34006884 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400684a:	687b      	ldr	r3, [r7, #4]
3400684c:	681b      	ldr	r3, [r3, #0]
3400684e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006852:	687b      	ldr	r3, [r7, #4]
34006854:	681b      	ldr	r3, [r3, #0]
34006856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3400685a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
3400685e:	687b      	ldr	r3, [r7, #4]
34006860:	689b      	ldr	r3, [r3, #8]
34006862:	f043 0208 	orr.w	r2, r3, #8
34006866:	687b      	ldr	r3, [r7, #4]
34006868:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
3400686a:	687b      	ldr	r3, [r7, #4]
3400686c:	681b      	ldr	r3, [r3, #0]
3400686e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34006872:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34006876:	687b      	ldr	r3, [r7, #4]
34006878:	2204      	movs	r2, #4
3400687a:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400687c:	2100      	movs	r1, #0
3400687e:	6878      	ldr	r0, [r7, #4]
34006880:	f000 fdfa 	bl	34007478 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34006884:	68fb      	ldr	r3, [r7, #12]
34006886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400688a:	2b00      	cmp	r3, #0
3400688c:	d00e      	beq.n	340068ac <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400688e:	68bb      	ldr	r3, [r7, #8]
34006890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34006894:	2b00      	cmp	r3, #0
34006896:	d009      	beq.n	340068ac <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34006898:	687b      	ldr	r3, [r7, #4]
3400689a:	681b      	ldr	r3, [r3, #0]
3400689c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340068a0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
340068a4:	2101      	movs	r1, #1
340068a6:	6878      	ldr	r0, [r7, #4]
340068a8:	f000 fdd0 	bl	3400744c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
340068ac:	68fb      	ldr	r3, [r7, #12]
340068ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340068b2:	2b00      	cmp	r3, #0
340068b4:	d00e      	beq.n	340068d4 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
340068b6:	68bb      	ldr	r3, [r7, #8]
340068b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340068bc:	2b00      	cmp	r3, #0
340068be:	d009      	beq.n	340068d4 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340068c0:	687b      	ldr	r3, [r7, #4]
340068c2:	681b      	ldr	r3, [r3, #0]
340068c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340068c8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340068cc:	2101      	movs	r1, #1
340068ce:	6878      	ldr	r0, [r7, #4]
340068d0:	f013 fb5e 	bl	34019f90 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
340068d4:	68fb      	ldr	r3, [r7, #12]
340068d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
340068da:	2b00      	cmp	r3, #0
340068dc:	d023      	beq.n	34006926 <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
340068de:	68bb      	ldr	r3, [r7, #8]
340068e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
340068e4:	2b00      	cmp	r3, #0
340068e6:	d01e      	beq.n	34006926 <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340068e8:	687b      	ldr	r3, [r7, #4]
340068ea:	681b      	ldr	r3, [r3, #0]
340068ec:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
340068f0:	f003 0304 	and.w	r3, r3, #4
340068f4:	2b04      	cmp	r3, #4
340068f6:	d10c      	bne.n	34006912 <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340068f8:	687b      	ldr	r3, [r7, #4]
340068fa:	681b      	ldr	r3, [r3, #0]
340068fc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006900:	687b      	ldr	r3, [r7, #4]
34006902:	681b      	ldr	r3, [r3, #0]
34006904:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34006908:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
3400690c:	687b      	ldr	r3, [r7, #4]
3400690e:	2201      	movs	r2, #1
34006910:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34006912:	687b      	ldr	r3, [r7, #4]
34006914:	681b      	ldr	r3, [r3, #0]
34006916:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3400691a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
3400691e:	2101      	movs	r1, #1
34006920:	6878      	ldr	r0, [r7, #4]
34006922:	f013 fb4f 	bl	34019fc4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34006926:	68fb      	ldr	r3, [r7, #12]
34006928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400692c:	2b00      	cmp	r3, #0
3400692e:	d021      	beq.n	34006974 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34006930:	68bb      	ldr	r3, [r7, #8]
34006932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34006936:	2b00      	cmp	r3, #0
34006938:	d01c      	beq.n	34006974 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
3400693a:	687b      	ldr	r3, [r7, #4]
3400693c:	681b      	ldr	r3, [r3, #0]
3400693e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006942:	687b      	ldr	r3, [r7, #4]
34006944:	681b      	ldr	r3, [r3, #0]
34006946:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
3400694a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
3400694e:	687b      	ldr	r3, [r7, #4]
34006950:	689b      	ldr	r3, [r3, #8]
34006952:	f043 0210 	orr.w	r2, r3, #16
34006956:	687b      	ldr	r3, [r7, #4]
34006958:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
3400695a:	687b      	ldr	r3, [r7, #4]
3400695c:	681b      	ldr	r3, [r3, #0]
3400695e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34006962:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34006966:	687b      	ldr	r3, [r7, #4]
34006968:	2204      	movs	r2, #4
3400696a:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
3400696c:	2101      	movs	r1, #1
3400696e:	6878      	ldr	r0, [r7, #4]
34006970:	f000 fd82 	bl	34007478 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34006974:	68fb      	ldr	r3, [r7, #12]
34006976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400697a:	2b00      	cmp	r3, #0
3400697c:	d00e      	beq.n	3400699c <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
3400697e:	68bb      	ldr	r3, [r7, #8]
34006980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34006984:	2b00      	cmp	r3, #0
34006986:	d009      	beq.n	3400699c <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34006988:	687b      	ldr	r3, [r7, #4]
3400698a:	681b      	ldr	r3, [r3, #0]
3400698c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34006990:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34006994:	2102      	movs	r1, #2
34006996:	6878      	ldr	r0, [r7, #4]
34006998:	f000 fd58 	bl	3400744c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
3400699c:	68fb      	ldr	r3, [r7, #12]
3400699e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
340069a2:	2b00      	cmp	r3, #0
340069a4:	d00e      	beq.n	340069c4 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
340069a6:	68bb      	ldr	r3, [r7, #8]
340069a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
340069ac:	2b00      	cmp	r3, #0
340069ae:	d009      	beq.n	340069c4 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
340069b0:	687b      	ldr	r3, [r7, #4]
340069b2:	681b      	ldr	r3, [r3, #0]
340069b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340069b8:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
340069bc:	2102      	movs	r1, #2
340069be:	6878      	ldr	r0, [r7, #4]
340069c0:	f013 fae6 	bl	34019f90 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
340069c4:	68fb      	ldr	r3, [r7, #12]
340069c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340069ca:	2b00      	cmp	r3, #0
340069cc:	d023      	beq.n	34006a16 <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
340069ce:	68bb      	ldr	r3, [r7, #8]
340069d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340069d4:	2b00      	cmp	r3, #0
340069d6:	d01e      	beq.n	34006a16 <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340069d8:	687b      	ldr	r3, [r7, #4]
340069da:	681b      	ldr	r3, [r3, #0]
340069dc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
340069e0:	f003 0304 	and.w	r3, r3, #4
340069e4:	2b04      	cmp	r3, #4
340069e6:	d10c      	bne.n	34006a02 <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
340069e8:	687b      	ldr	r3, [r7, #4]
340069ea:	681b      	ldr	r3, [r3, #0]
340069ec:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340069f0:	687b      	ldr	r3, [r7, #4]
340069f2:	681b      	ldr	r3, [r3, #0]
340069f4:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
340069f8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
340069fc:	687b      	ldr	r3, [r7, #4]
340069fe:	2201      	movs	r2, #1
34006a00:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34006a02:	687b      	ldr	r3, [r7, #4]
34006a04:	681b      	ldr	r3, [r3, #0]
34006a06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34006a0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34006a0e:	2102      	movs	r1, #2
34006a10:	6878      	ldr	r0, [r7, #4]
34006a12:	f013 fad7 	bl	34019fc4 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34006a16:	68fb      	ldr	r3, [r7, #12]
34006a18:	2b00      	cmp	r3, #0
34006a1a:	da1f      	bge.n	34006a5c <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34006a1c:	68bb      	ldr	r3, [r7, #8]
34006a1e:	2b00      	cmp	r3, #0
34006a20:	da1c      	bge.n	34006a5c <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34006a22:	687b      	ldr	r3, [r7, #4]
34006a24:	681b      	ldr	r3, [r3, #0]
34006a26:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006a2a:	687b      	ldr	r3, [r7, #4]
34006a2c:	681b      	ldr	r3, [r3, #0]
34006a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34006a32:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34006a36:	687b      	ldr	r3, [r7, #4]
34006a38:	689b      	ldr	r3, [r3, #8]
34006a3a:	f043 0220 	orr.w	r2, r3, #32
34006a3e:	687b      	ldr	r3, [r7, #4]
34006a40:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34006a42:	687b      	ldr	r3, [r7, #4]
34006a44:	681b      	ldr	r3, [r3, #0]
34006a46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34006a4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34006a4e:	687b      	ldr	r3, [r7, #4]
34006a50:	2204      	movs	r2, #4
34006a52:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34006a54:	2102      	movs	r1, #2
34006a56:	6878      	ldr	r0, [r7, #4]
34006a58:	f000 fd0e 	bl	34007478 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34006a5c:	68fb      	ldr	r3, [r7, #12]
34006a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34006a62:	2b00      	cmp	r3, #0
34006a64:	d01f      	beq.n	34006aa6 <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34006a66:	68bb      	ldr	r3, [r7, #8]
34006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34006a6c:	2b00      	cmp	r3, #0
34006a6e:	d01a      	beq.n	34006aa6 <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34006a70:	687b      	ldr	r3, [r7, #4]
34006a72:	681b      	ldr	r3, [r3, #0]
34006a74:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006a78:	687b      	ldr	r3, [r7, #4]
34006a7a:	681b      	ldr	r3, [r3, #0]
34006a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34006a80:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34006a84:	687b      	ldr	r3, [r7, #4]
34006a86:	689b      	ldr	r3, [r3, #8]
34006a88:	f043 0202 	orr.w	r2, r3, #2
34006a8c:	687b      	ldr	r3, [r7, #4]
34006a8e:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34006a90:	687b      	ldr	r3, [r7, #4]
34006a92:	681b      	ldr	r3, [r3, #0]
34006a94:	2240      	movs	r2, #64	@ 0x40
34006a96:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34006a9a:	687b      	ldr	r3, [r7, #4]
34006a9c:	2204      	movs	r2, #4
34006a9e:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34006aa0:	6878      	ldr	r0, [r7, #4]
34006aa2:	f000 fcf4 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34006aa6:	68fb      	ldr	r3, [r7, #12]
34006aa8:	f003 0320 	and.w	r3, r3, #32
34006aac:	2b00      	cmp	r3, #0
34006aae:	d01f      	beq.n	34006af0 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34006ab0:	68bb      	ldr	r3, [r7, #8]
34006ab2:	f003 0320 	and.w	r3, r3, #32
34006ab6:	2b00      	cmp	r3, #0
34006ab8:	d01a      	beq.n	34006af0 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34006aba:	687b      	ldr	r3, [r7, #4]
34006abc:	681b      	ldr	r3, [r3, #0]
34006abe:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34006ac2:	687b      	ldr	r3, [r7, #4]
34006ac4:	681b      	ldr	r3, [r3, #0]
34006ac6:	f022 0220 	bic.w	r2, r2, #32
34006aca:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34006ace:	687b      	ldr	r3, [r7, #4]
34006ad0:	689b      	ldr	r3, [r3, #8]
34006ad2:	f043 0201 	orr.w	r2, r3, #1
34006ad6:	687b      	ldr	r3, [r7, #4]
34006ad8:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34006ada:	687b      	ldr	r3, [r7, #4]
34006adc:	681b      	ldr	r3, [r3, #0]
34006ade:	2220      	movs	r2, #32
34006ae0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34006ae4:	687b      	ldr	r3, [r7, #4]
34006ae6:	2204      	movs	r2, #4
34006ae8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34006aea:	6878      	ldr	r0, [r7, #4]
34006aec:	f000 fccf 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34006af0:	bf00      	nop
34006af2:	3710      	adds	r7, #16
34006af4:	46bd      	mov	sp, r7
34006af6:	bd80      	pop	{r7, pc}

34006af8 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34006af8:	b580      	push	{r7, lr}
34006afa:	b088      	sub	sp, #32
34006afc:	af00      	add	r7, sp, #0
34006afe:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
34006b00:	4bb1      	ldr	r3, [pc, #708]	@ (34006dc8 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
34006b02:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34006b04:	69fb      	ldr	r3, [r7, #28]
34006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34006b0a:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34006b0c:	69fb      	ldr	r3, [r7, #28]
34006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34006b12:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34006b14:	69fb      	ldr	r3, [r7, #28]
34006b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006b1a:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34006b1c:	69fb      	ldr	r3, [r7, #28]
34006b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34006b22:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34006b24:	69bb      	ldr	r3, [r7, #24]
34006b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34006b2a:	2b00      	cmp	r3, #0
34006b2c:	d014      	beq.n	34006b58 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34006b2e:	693b      	ldr	r3, [r7, #16]
34006b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34006b34:	2b00      	cmp	r3, #0
34006b36:	d00f      	beq.n	34006b58 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34006b38:	69fb      	ldr	r3, [r7, #28]
34006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006b3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
34006b42:	69fb      	ldr	r3, [r7, #28]
34006b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34006b48:	69fb      	ldr	r3, [r7, #28]
34006b4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34006b4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34006b52:	6878      	ldr	r0, [r7, #4]
34006b54:	f000 fcb0 	bl	340074b8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34006b58:	69bb      	ldr	r3, [r7, #24]
34006b5a:	f003 0308 	and.w	r3, r3, #8
34006b5e:	2b00      	cmp	r3, #0
34006b60:	d01c      	beq.n	34006b9c <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34006b62:	693b      	ldr	r3, [r7, #16]
34006b64:	f003 0308 	and.w	r3, r3, #8
34006b68:	2b00      	cmp	r3, #0
34006b6a:	d017      	beq.n	34006b9c <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006b6c:	687b      	ldr	r3, [r7, #4]
34006b6e:	681b      	ldr	r3, [r3, #0]
34006b70:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006b74:	f003 0304 	and.w	r3, r3, #4
34006b78:	2b04      	cmp	r3, #4
34006b7a:	d107      	bne.n	34006b8c <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34006b7c:	69fb      	ldr	r3, [r7, #28]
34006b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006b82:	f023 0208 	bic.w	r2, r3, #8
34006b86:	69fb      	ldr	r3, [r7, #28]
34006b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34006b8c:	69fb      	ldr	r3, [r7, #28]
34006b8e:	2208      	movs	r2, #8
34006b90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34006b94:	2103      	movs	r1, #3
34006b96:	6878      	ldr	r0, [r7, #4]
34006b98:	f000 fcc3 	bl	34007522 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34006b9c:	69bb      	ldr	r3, [r7, #24]
34006b9e:	f003 0304 	and.w	r3, r3, #4
34006ba2:	2b00      	cmp	r3, #0
34006ba4:	d01c      	beq.n	34006be0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34006ba6:	693b      	ldr	r3, [r7, #16]
34006ba8:	f003 0304 	and.w	r3, r3, #4
34006bac:	2b00      	cmp	r3, #0
34006bae:	d017      	beq.n	34006be0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006bb0:	687b      	ldr	r3, [r7, #4]
34006bb2:	681b      	ldr	r3, [r3, #0]
34006bb4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006bb8:	f003 0304 	and.w	r3, r3, #4
34006bbc:	2b04      	cmp	r3, #4
34006bbe:	d107      	bne.n	34006bd0 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34006bc0:	69fb      	ldr	r3, [r7, #28]
34006bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006bc6:	f023 0204 	bic.w	r2, r3, #4
34006bca:	69fb      	ldr	r3, [r7, #28]
34006bcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34006bd0:	69fb      	ldr	r3, [r7, #28]
34006bd2:	2204      	movs	r2, #4
34006bd4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34006bd8:	2102      	movs	r1, #2
34006bda:	6878      	ldr	r0, [r7, #4]
34006bdc:	f000 fca1 	bl	34007522 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34006be0:	69bb      	ldr	r3, [r7, #24]
34006be2:	f003 0302 	and.w	r3, r3, #2
34006be6:	2b00      	cmp	r3, #0
34006be8:	d01c      	beq.n	34006c24 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34006bea:	693b      	ldr	r3, [r7, #16]
34006bec:	f003 0302 	and.w	r3, r3, #2
34006bf0:	2b00      	cmp	r3, #0
34006bf2:	d017      	beq.n	34006c24 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006bf4:	687b      	ldr	r3, [r7, #4]
34006bf6:	681b      	ldr	r3, [r3, #0]
34006bf8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006bfc:	f003 0304 	and.w	r3, r3, #4
34006c00:	2b04      	cmp	r3, #4
34006c02:	d107      	bne.n	34006c14 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34006c04:	69fb      	ldr	r3, [r7, #28]
34006c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006c0a:	f023 0202 	bic.w	r2, r3, #2
34006c0e:	69fb      	ldr	r3, [r7, #28]
34006c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34006c14:	69fb      	ldr	r3, [r7, #28]
34006c16:	2202      	movs	r2, #2
34006c18:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34006c1c:	2101      	movs	r1, #1
34006c1e:	6878      	ldr	r0, [r7, #4]
34006c20:	f000 fc7f 	bl	34007522 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
34006c24:	69bb      	ldr	r3, [r7, #24]
34006c26:	f003 0301 	and.w	r3, r3, #1
34006c2a:	2b00      	cmp	r3, #0
34006c2c:	d01c      	beq.n	34006c68 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34006c2e:	693b      	ldr	r3, [r7, #16]
34006c30:	f003 0301 	and.w	r3, r3, #1
34006c34:	2b00      	cmp	r3, #0
34006c36:	d017      	beq.n	34006c68 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006c38:	687b      	ldr	r3, [r7, #4]
34006c3a:	681b      	ldr	r3, [r3, #0]
34006c3c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006c40:	f003 0304 	and.w	r3, r3, #4
34006c44:	2b04      	cmp	r3, #4
34006c46:	d107      	bne.n	34006c58 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34006c48:	69fb      	ldr	r3, [r7, #28]
34006c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006c4e:	f023 0201 	bic.w	r2, r3, #1
34006c52:	69fb      	ldr	r3, [r7, #28]
34006c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34006c58:	69fb      	ldr	r3, [r7, #28]
34006c5a:	2201      	movs	r2, #1
34006c5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34006c60:	2100      	movs	r1, #0
34006c62:	6878      	ldr	r0, [r7, #4]
34006c64:	f000 fc5d 	bl	34007522 <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34006c68:	69bb      	ldr	r3, [r7, #24]
34006c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34006c6e:	2b00      	cmp	r3, #0
34006c70:	d01d      	beq.n	34006cae <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34006c72:	693b      	ldr	r3, [r7, #16]
34006c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34006c78:	2b00      	cmp	r3, #0
34006c7a:	d018      	beq.n	34006cae <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006c7c:	687b      	ldr	r3, [r7, #4]
34006c7e:	681b      	ldr	r3, [r3, #0]
34006c80:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006c84:	f003 0304 	and.w	r3, r3, #4
34006c88:	2b04      	cmp	r3, #4
34006c8a:	d107      	bne.n	34006c9c <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34006c8c:	69fb      	ldr	r3, [r7, #28]
34006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006c92:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34006c96:	69fb      	ldr	r3, [r7, #28]
34006c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34006c9c:	69fb      	ldr	r3, [r7, #28]
34006c9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34006ca2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34006ca6:	2103      	movs	r1, #3
34006ca8:	6878      	ldr	r0, [r7, #4]
34006caa:	f000 fc19 	bl	340074e0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34006cae:	69bb      	ldr	r3, [r7, #24]
34006cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34006cb4:	2b00      	cmp	r3, #0
34006cb6:	d01d      	beq.n	34006cf4 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34006cb8:	693b      	ldr	r3, [r7, #16]
34006cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34006cbe:	2b00      	cmp	r3, #0
34006cc0:	d018      	beq.n	34006cf4 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006cc2:	687b      	ldr	r3, [r7, #4]
34006cc4:	681b      	ldr	r3, [r3, #0]
34006cc6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006cca:	f003 0304 	and.w	r3, r3, #4
34006cce:	2b04      	cmp	r3, #4
34006cd0:	d107      	bne.n	34006ce2 <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34006cd2:	69fb      	ldr	r3, [r7, #28]
34006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006cd8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34006cdc:	69fb      	ldr	r3, [r7, #28]
34006cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34006ce2:	69fb      	ldr	r3, [r7, #28]
34006ce4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34006ce8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34006cec:	2102      	movs	r1, #2
34006cee:	6878      	ldr	r0, [r7, #4]
34006cf0:	f000 fbf6 	bl	340074e0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34006cf4:	69bb      	ldr	r3, [r7, #24]
34006cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34006cfa:	2b00      	cmp	r3, #0
34006cfc:	d01d      	beq.n	34006d3a <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34006cfe:	693b      	ldr	r3, [r7, #16]
34006d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34006d04:	2b00      	cmp	r3, #0
34006d06:	d018      	beq.n	34006d3a <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006d08:	687b      	ldr	r3, [r7, #4]
34006d0a:	681b      	ldr	r3, [r3, #0]
34006d0c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006d10:	f003 0304 	and.w	r3, r3, #4
34006d14:	2b04      	cmp	r3, #4
34006d16:	d107      	bne.n	34006d28 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34006d18:	69fb      	ldr	r3, [r7, #28]
34006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006d1e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34006d22:	69fb      	ldr	r3, [r7, #28]
34006d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34006d28:	69fb      	ldr	r3, [r7, #28]
34006d2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34006d2e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34006d32:	2101      	movs	r1, #1
34006d34:	6878      	ldr	r0, [r7, #4]
34006d36:	f000 fbd3 	bl	340074e0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34006d3a:	69bb      	ldr	r3, [r7, #24]
34006d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34006d40:	2b00      	cmp	r3, #0
34006d42:	d01d      	beq.n	34006d80 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34006d44:	693b      	ldr	r3, [r7, #16]
34006d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34006d4a:	2b00      	cmp	r3, #0
34006d4c:	d018      	beq.n	34006d80 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006d4e:	687b      	ldr	r3, [r7, #4]
34006d50:	681b      	ldr	r3, [r3, #0]
34006d52:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006d56:	f003 0304 	and.w	r3, r3, #4
34006d5a:	2b04      	cmp	r3, #4
34006d5c:	d107      	bne.n	34006d6e <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34006d5e:	69fb      	ldr	r3, [r7, #28]
34006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34006d68:	69fb      	ldr	r3, [r7, #28]
34006d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34006d6e:	69fb      	ldr	r3, [r7, #28]
34006d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34006d74:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34006d78:	2100      	movs	r1, #0
34006d7a:	6878      	ldr	r0, [r7, #4]
34006d7c:	f000 fbb0 	bl	340074e0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34006d80:	69bb      	ldr	r3, [r7, #24]
34006d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006d86:	2b00      	cmp	r3, #0
34006d88:	d020      	beq.n	34006dcc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34006d8a:	693b      	ldr	r3, [r7, #16]
34006d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006d90:	2b00      	cmp	r3, #0
34006d92:	d01b      	beq.n	34006dcc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006d94:	687b      	ldr	r3, [r7, #4]
34006d96:	681b      	ldr	r3, [r3, #0]
34006d98:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006d9c:	f003 0304 	and.w	r3, r3, #4
34006da0:	2b04      	cmp	r3, #4
34006da2:	d107      	bne.n	34006db4 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34006da4:	69fb      	ldr	r3, [r7, #28]
34006da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006daa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34006dae:	69fb      	ldr	r3, [r7, #28]
34006db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34006db4:	69fb      	ldr	r3, [r7, #28]
34006db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34006dba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34006dbe:	2103      	movs	r1, #3
34006dc0:	6878      	ldr	r0, [r7, #4]
34006dc2:	f000 fb98 	bl	340074f6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
34006dc6:	e001      	b.n	34006dcc <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34006dc8:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34006dcc:	69bb      	ldr	r3, [r7, #24]
34006dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006dd2:	2b00      	cmp	r3, #0
34006dd4:	d01d      	beq.n	34006e12 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34006dd6:	693b      	ldr	r3, [r7, #16]
34006dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006ddc:	2b00      	cmp	r3, #0
34006dde:	d018      	beq.n	34006e12 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006de0:	687b      	ldr	r3, [r7, #4]
34006de2:	681b      	ldr	r3, [r3, #0]
34006de4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006de8:	f003 0304 	and.w	r3, r3, #4
34006dec:	2b04      	cmp	r3, #4
34006dee:	d107      	bne.n	34006e00 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34006df0:	69fb      	ldr	r3, [r7, #28]
34006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006df6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34006dfa:	69fb      	ldr	r3, [r7, #28]
34006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34006e00:	69fb      	ldr	r3, [r7, #28]
34006e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34006e06:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34006e0a:	2102      	movs	r1, #2
34006e0c:	6878      	ldr	r0, [r7, #4]
34006e0e:	f000 fb72 	bl	340074f6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34006e12:	69bb      	ldr	r3, [r7, #24]
34006e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006e18:	2b00      	cmp	r3, #0
34006e1a:	d01d      	beq.n	34006e58 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34006e1c:	693b      	ldr	r3, [r7, #16]
34006e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006e22:	2b00      	cmp	r3, #0
34006e24:	d018      	beq.n	34006e58 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006e26:	687b      	ldr	r3, [r7, #4]
34006e28:	681b      	ldr	r3, [r3, #0]
34006e2a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006e2e:	f003 0304 	and.w	r3, r3, #4
34006e32:	2b04      	cmp	r3, #4
34006e34:	d107      	bne.n	34006e46 <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34006e36:	69fb      	ldr	r3, [r7, #28]
34006e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006e3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34006e40:	69fb      	ldr	r3, [r7, #28]
34006e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34006e46:	69fb      	ldr	r3, [r7, #28]
34006e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
34006e4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34006e50:	2101      	movs	r1, #1
34006e52:	6878      	ldr	r0, [r7, #4]
34006e54:	f000 fb4f 	bl	340074f6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34006e58:	69bb      	ldr	r3, [r7, #24]
34006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006e5e:	2b00      	cmp	r3, #0
34006e60:	d01d      	beq.n	34006e9e <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34006e62:	693b      	ldr	r3, [r7, #16]
34006e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006e68:	2b00      	cmp	r3, #0
34006e6a:	d018      	beq.n	34006e9e <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006e6c:	687b      	ldr	r3, [r7, #4]
34006e6e:	681b      	ldr	r3, [r3, #0]
34006e70:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006e74:	f003 0304 	and.w	r3, r3, #4
34006e78:	2b04      	cmp	r3, #4
34006e7a:	d107      	bne.n	34006e8c <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34006e7c:	69fb      	ldr	r3, [r7, #28]
34006e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006e82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34006e86:	69fb      	ldr	r3, [r7, #28]
34006e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34006e8c:	69fb      	ldr	r3, [r7, #28]
34006e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34006e92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34006e96:	2100      	movs	r1, #0
34006e98:	6878      	ldr	r0, [r7, #4]
34006e9a:	f000 fb2c 	bl	340074f6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34006e9e:	69bb      	ldr	r3, [r7, #24]
34006ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34006ea4:	2b00      	cmp	r3, #0
34006ea6:	d01c      	beq.n	34006ee2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34006ea8:	693b      	ldr	r3, [r7, #16]
34006eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34006eae:	2b00      	cmp	r3, #0
34006eb0:	d017      	beq.n	34006ee2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006eb2:	687b      	ldr	r3, [r7, #4]
34006eb4:	681b      	ldr	r3, [r3, #0]
34006eb6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006eba:	f003 0304 	and.w	r3, r3, #4
34006ebe:	2b04      	cmp	r3, #4
34006ec0:	d107      	bne.n	34006ed2 <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34006ec2:	69fb      	ldr	r3, [r7, #28]
34006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006ec8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34006ecc:	69fb      	ldr	r3, [r7, #28]
34006ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34006ed2:	69fb      	ldr	r3, [r7, #28]
34006ed4:	2280      	movs	r2, #128	@ 0x80
34006ed6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34006eda:	2103      	movs	r1, #3
34006edc:	6878      	ldr	r0, [r7, #4]
34006ede:	f000 fb15 	bl	3400750c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34006ee2:	69bb      	ldr	r3, [r7, #24]
34006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34006ee8:	2b00      	cmp	r3, #0
34006eea:	d01c      	beq.n	34006f26 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34006eec:	693b      	ldr	r3, [r7, #16]
34006eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34006ef2:	2b00      	cmp	r3, #0
34006ef4:	d017      	beq.n	34006f26 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006ef6:	687b      	ldr	r3, [r7, #4]
34006ef8:	681b      	ldr	r3, [r3, #0]
34006efa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006efe:	f003 0304 	and.w	r3, r3, #4
34006f02:	2b04      	cmp	r3, #4
34006f04:	d107      	bne.n	34006f16 <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34006f06:	69fb      	ldr	r3, [r7, #28]
34006f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006f0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34006f10:	69fb      	ldr	r3, [r7, #28]
34006f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34006f16:	69fb      	ldr	r3, [r7, #28]
34006f18:	2240      	movs	r2, #64	@ 0x40
34006f1a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34006f1e:	2102      	movs	r1, #2
34006f20:	6878      	ldr	r0, [r7, #4]
34006f22:	f000 faf3 	bl	3400750c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34006f26:	69bb      	ldr	r3, [r7, #24]
34006f28:	f003 0320 	and.w	r3, r3, #32
34006f2c:	2b00      	cmp	r3, #0
34006f2e:	d01c      	beq.n	34006f6a <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34006f30:	693b      	ldr	r3, [r7, #16]
34006f32:	f003 0320 	and.w	r3, r3, #32
34006f36:	2b00      	cmp	r3, #0
34006f38:	d017      	beq.n	34006f6a <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006f3a:	687b      	ldr	r3, [r7, #4]
34006f3c:	681b      	ldr	r3, [r3, #0]
34006f3e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006f42:	f003 0304 	and.w	r3, r3, #4
34006f46:	2b04      	cmp	r3, #4
34006f48:	d107      	bne.n	34006f5a <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34006f4a:	69fb      	ldr	r3, [r7, #28]
34006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006f50:	f023 0220 	bic.w	r2, r3, #32
34006f54:	69fb      	ldr	r3, [r7, #28]
34006f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34006f5a:	69fb      	ldr	r3, [r7, #28]
34006f5c:	2220      	movs	r2, #32
34006f5e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34006f62:	2101      	movs	r1, #1
34006f64:	6878      	ldr	r0, [r7, #4]
34006f66:	f000 fad1 	bl	3400750c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34006f6a:	69bb      	ldr	r3, [r7, #24]
34006f6c:	f003 0310 	and.w	r3, r3, #16
34006f70:	2b00      	cmp	r3, #0
34006f72:	d01c      	beq.n	34006fae <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34006f74:	693b      	ldr	r3, [r7, #16]
34006f76:	f003 0310 	and.w	r3, r3, #16
34006f7a:	2b00      	cmp	r3, #0
34006f7c:	d017      	beq.n	34006fae <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34006f7e:	687b      	ldr	r3, [r7, #4]
34006f80:	681b      	ldr	r3, [r3, #0]
34006f82:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34006f86:	f003 0304 	and.w	r3, r3, #4
34006f8a:	2b04      	cmp	r3, #4
34006f8c:	d107      	bne.n	34006f9e <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34006f8e:	69fb      	ldr	r3, [r7, #28]
34006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006f94:	f023 0210 	bic.w	r2, r3, #16
34006f98:	69fb      	ldr	r3, [r7, #28]
34006f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34006f9e:	69fb      	ldr	r3, [r7, #28]
34006fa0:	2210      	movs	r2, #16
34006fa2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34006fa6:	2100      	movs	r1, #0
34006fa8:	6878      	ldr	r0, [r7, #4]
34006faa:	f000 faaf 	bl	3400750c <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34006fae:	69bb      	ldr	r3, [r7, #24]
34006fb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34006fb4:	2b00      	cmp	r3, #0
34006fb6:	d01a      	beq.n	34006fee <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34006fb8:	693b      	ldr	r3, [r7, #16]
34006fba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34006fbe:	2b00      	cmp	r3, #0
34006fc0:	d015      	beq.n	34006fee <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34006fc2:	69fb      	ldr	r3, [r7, #28]
34006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006fc8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34006fcc:	69fb      	ldr	r3, [r7, #28]
34006fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34006fd2:	69fb      	ldr	r3, [r7, #28]
34006fd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34006fd8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34006fdc:	687b      	ldr	r3, [r7, #4]
34006fde:	689b      	ldr	r3, [r3, #8]
34006fe0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34006fe4:	687b      	ldr	r3, [r7, #4]
34006fe6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34006fe8:	6878      	ldr	r0, [r7, #4]
34006fea:	f000 fa50 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34006fee:	69bb      	ldr	r3, [r7, #24]
34006ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34006ff4:	2b00      	cmp	r3, #0
34006ff6:	d01a      	beq.n	3400702e <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34006ff8:	693b      	ldr	r3, [r7, #16]
34006ffa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34006ffe:	2b00      	cmp	r3, #0
34007000:	d015      	beq.n	3400702e <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34007002:	69fb      	ldr	r3, [r7, #28]
34007004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007008:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
3400700c:	69fb      	ldr	r3, [r7, #28]
3400700e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34007012:	69fb      	ldr	r3, [r7, #28]
34007014:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34007018:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
3400701c:	687b      	ldr	r3, [r7, #4]
3400701e:	689b      	ldr	r3, [r3, #8]
34007020:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34007024:	687b      	ldr	r3, [r7, #4]
34007026:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34007028:	6878      	ldr	r0, [r7, #4]
3400702a:	f000 fa30 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
3400702e:	69bb      	ldr	r3, [r7, #24]
34007030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34007034:	2b00      	cmp	r3, #0
34007036:	d01a      	beq.n	3400706e <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34007038:	693b      	ldr	r3, [r7, #16]
3400703a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
3400703e:	2b00      	cmp	r3, #0
34007040:	d015      	beq.n	3400706e <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34007042:	69fb      	ldr	r3, [r7, #28]
34007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007048:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
3400704c:	69fb      	ldr	r3, [r7, #28]
3400704e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34007052:	69fb      	ldr	r3, [r7, #28]
34007054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34007058:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
3400705c:	687b      	ldr	r3, [r7, #4]
3400705e:	689b      	ldr	r3, [r3, #8]
34007060:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34007064:	687b      	ldr	r3, [r7, #4]
34007066:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34007068:	6878      	ldr	r0, [r7, #4]
3400706a:	f000 fa10 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
3400706e:	69bb      	ldr	r3, [r7, #24]
34007070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34007074:	2b00      	cmp	r3, #0
34007076:	d01a      	beq.n	340070ae <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34007078:	693b      	ldr	r3, [r7, #16]
3400707a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400707e:	2b00      	cmp	r3, #0
34007080:	d015      	beq.n	340070ae <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34007082:	69fb      	ldr	r3, [r7, #28]
34007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007088:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400708c:	69fb      	ldr	r3, [r7, #28]
3400708e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34007092:	69fb      	ldr	r3, [r7, #28]
34007094:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34007098:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
3400709c:	687b      	ldr	r3, [r7, #4]
3400709e:	689b      	ldr	r3, [r3, #8]
340070a0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
340070a4:	687b      	ldr	r3, [r7, #4]
340070a6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340070a8:	6878      	ldr	r0, [r7, #4]
340070aa:	f000 f9f0 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
340070ae:	69bb      	ldr	r3, [r7, #24]
340070b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
340070b4:	2b00      	cmp	r3, #0
340070b6:	d01a      	beq.n	340070ee <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
340070b8:	693b      	ldr	r3, [r7, #16]
340070ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
340070be:	2b00      	cmp	r3, #0
340070c0:	d015      	beq.n	340070ee <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
340070c2:	69fb      	ldr	r3, [r7, #28]
340070c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340070c8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
340070cc:	69fb      	ldr	r3, [r7, #28]
340070ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
340070d2:	69fb      	ldr	r3, [r7, #28]
340070d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340070d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
340070dc:	687b      	ldr	r3, [r7, #4]
340070de:	689b      	ldr	r3, [r3, #8]
340070e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
340070e4:	687b      	ldr	r3, [r7, #4]
340070e6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340070e8:	6878      	ldr	r0, [r7, #4]
340070ea:	f000 f9d0 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
340070ee:	69bb      	ldr	r3, [r7, #24]
340070f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340070f4:	2b00      	cmp	r3, #0
340070f6:	d01a      	beq.n	3400712e <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
340070f8:	693b      	ldr	r3, [r7, #16]
340070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340070fe:	2b00      	cmp	r3, #0
34007100:	d015      	beq.n	3400712e <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34007102:	69fb      	ldr	r3, [r7, #28]
34007104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007108:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
3400710c:	69fb      	ldr	r3, [r7, #28]
3400710e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34007112:	69fb      	ldr	r3, [r7, #28]
34007114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34007118:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
3400711c:	687b      	ldr	r3, [r7, #4]
3400711e:	689b      	ldr	r3, [r3, #8]
34007120:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34007124:	687b      	ldr	r3, [r7, #4]
34007126:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34007128:	6878      	ldr	r0, [r7, #4]
3400712a:	f000 f9b0 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
3400712e:	69bb      	ldr	r3, [r7, #24]
34007130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34007134:	2b00      	cmp	r3, #0
34007136:	d01a      	beq.n	3400716e <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34007138:	693b      	ldr	r3, [r7, #16]
3400713a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400713e:	2b00      	cmp	r3, #0
34007140:	d015      	beq.n	3400716e <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34007142:	69fb      	ldr	r3, [r7, #28]
34007144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3400714c:	69fb      	ldr	r3, [r7, #28]
3400714e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34007152:	69fb      	ldr	r3, [r7, #28]
34007154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34007158:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
3400715c:	687b      	ldr	r3, [r7, #4]
3400715e:	689b      	ldr	r3, [r3, #8]
34007160:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34007164:	687b      	ldr	r3, [r7, #4]
34007166:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34007168:	6878      	ldr	r0, [r7, #4]
3400716a:	f000 f990 	bl	3400748e <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
3400716e:	697b      	ldr	r3, [r7, #20]
34007170:	f003 0301 	and.w	r3, r3, #1
34007174:	2b00      	cmp	r3, #0
34007176:	d01d      	beq.n	340071b4 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34007178:	68fb      	ldr	r3, [r7, #12]
3400717a:	f003 0301 	and.w	r3, r3, #1
3400717e:	2b00      	cmp	r3, #0
34007180:	d018      	beq.n	340071b4 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34007182:	69fb      	ldr	r3, [r7, #28]
34007184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007188:	f023 0201 	bic.w	r2, r3, #1
3400718c:	69fb      	ldr	r3, [r7, #28]
3400718e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34007192:	69fb      	ldr	r3, [r7, #28]
34007194:	2201      	movs	r2, #1
34007196:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
3400719a:	687b      	ldr	r3, [r7, #4]
3400719c:	689b      	ldr	r3, [r3, #8]
3400719e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
340071a2:	687b      	ldr	r3, [r7, #4]
340071a4:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340071a6:	687b      	ldr	r3, [r7, #4]
340071a8:	2204      	movs	r2, #4
340071aa:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340071ac:	2101      	movs	r1, #1
340071ae:	6878      	ldr	r0, [r7, #4]
340071b0:	f000 f977 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
340071b4:	697b      	ldr	r3, [r7, #20]
340071b6:	f003 0302 	and.w	r3, r3, #2
340071ba:	2b00      	cmp	r3, #0
340071bc:	d01d      	beq.n	340071fa <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
340071be:	68fb      	ldr	r3, [r7, #12]
340071c0:	f003 0302 	and.w	r3, r3, #2
340071c4:	2b00      	cmp	r3, #0
340071c6:	d018      	beq.n	340071fa <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
340071c8:	69fb      	ldr	r3, [r7, #28]
340071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340071ce:	f023 0202 	bic.w	r2, r3, #2
340071d2:	69fb      	ldr	r3, [r7, #28]
340071d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
340071d8:	69fb      	ldr	r3, [r7, #28]
340071da:	2202      	movs	r2, #2
340071dc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
340071e0:	687b      	ldr	r3, [r7, #4]
340071e2:	689b      	ldr	r3, [r3, #8]
340071e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
340071e8:	687b      	ldr	r3, [r7, #4]
340071ea:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340071ec:	687b      	ldr	r3, [r7, #4]
340071ee:	2204      	movs	r2, #4
340071f0:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340071f2:	2101      	movs	r1, #1
340071f4:	6878      	ldr	r0, [r7, #4]
340071f6:	f000 f954 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
340071fa:	697b      	ldr	r3, [r7, #20]
340071fc:	f003 0304 	and.w	r3, r3, #4
34007200:	2b00      	cmp	r3, #0
34007202:	d01a      	beq.n	3400723a <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34007204:	68fb      	ldr	r3, [r7, #12]
34007206:	f003 0304 	and.w	r3, r3, #4
3400720a:	2b00      	cmp	r3, #0
3400720c:	d015      	beq.n	3400723a <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3400720e:	69fb      	ldr	r3, [r7, #28]
34007210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007214:	f023 0204 	bic.w	r2, r3, #4
34007218:	69fb      	ldr	r3, [r7, #28]
3400721a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
3400721e:	69fb      	ldr	r3, [r7, #28]
34007220:	2204      	movs	r2, #4
34007222:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34007226:	687b      	ldr	r3, [r7, #4]
34007228:	689b      	ldr	r3, [r3, #8]
3400722a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
3400722e:	687b      	ldr	r3, [r7, #4]
34007230:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34007232:	2101      	movs	r1, #1
34007234:	6878      	ldr	r0, [r7, #4]
34007236:	f000 f934 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
3400723a:	697b      	ldr	r3, [r7, #20]
3400723c:	f003 0308 	and.w	r3, r3, #8
34007240:	2b00      	cmp	r3, #0
34007242:	d01a      	beq.n	3400727a <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34007244:	68fb      	ldr	r3, [r7, #12]
34007246:	f003 0308 	and.w	r3, r3, #8
3400724a:	2b00      	cmp	r3, #0
3400724c:	d015      	beq.n	3400727a <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3400724e:	69fb      	ldr	r3, [r7, #28]
34007250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007254:	f023 0208 	bic.w	r2, r3, #8
34007258:	69fb      	ldr	r3, [r7, #28]
3400725a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
3400725e:	69fb      	ldr	r3, [r7, #28]
34007260:	2208      	movs	r2, #8
34007262:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34007266:	687b      	ldr	r3, [r7, #4]
34007268:	689b      	ldr	r3, [r3, #8]
3400726a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
3400726e:	687b      	ldr	r3, [r7, #4]
34007270:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34007272:	2101      	movs	r1, #1
34007274:	6878      	ldr	r0, [r7, #4]
34007276:	f000 f914 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
3400727a:	697b      	ldr	r3, [r7, #20]
3400727c:	f003 0310 	and.w	r3, r3, #16
34007280:	2b00      	cmp	r3, #0
34007282:	d01a      	beq.n	340072ba <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34007284:	68fb      	ldr	r3, [r7, #12]
34007286:	f003 0310 	and.w	r3, r3, #16
3400728a:	2b00      	cmp	r3, #0
3400728c:	d015      	beq.n	340072ba <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
3400728e:	69fb      	ldr	r3, [r7, #28]
34007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007294:	f023 0210 	bic.w	r2, r3, #16
34007298:	69fb      	ldr	r3, [r7, #28]
3400729a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
3400729e:	69fb      	ldr	r3, [r7, #28]
340072a0:	2210      	movs	r2, #16
340072a2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340072a6:	687b      	ldr	r3, [r7, #4]
340072a8:	689b      	ldr	r3, [r3, #8]
340072aa:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
340072ae:	687b      	ldr	r3, [r7, #4]
340072b0:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340072b2:	2101      	movs	r1, #1
340072b4:	6878      	ldr	r0, [r7, #4]
340072b6:	f000 f8f4 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
340072ba:	697b      	ldr	r3, [r7, #20]
340072bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340072c0:	2b00      	cmp	r3, #0
340072c2:	d01e      	beq.n	34007302 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
340072c4:	68fb      	ldr	r3, [r7, #12]
340072c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340072ca:	2b00      	cmp	r3, #0
340072cc:	d019      	beq.n	34007302 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340072ce:	69fb      	ldr	r3, [r7, #28]
340072d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340072d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
340072d8:	69fb      	ldr	r3, [r7, #28]
340072da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
340072de:	69fb      	ldr	r3, [r7, #28]
340072e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
340072e4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340072e8:	687b      	ldr	r3, [r7, #4]
340072ea:	689b      	ldr	r3, [r3, #8]
340072ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
340072f0:	687b      	ldr	r3, [r7, #4]
340072f2:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340072f4:	687b      	ldr	r3, [r7, #4]
340072f6:	2204      	movs	r2, #4
340072f8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340072fa:	2102      	movs	r1, #2
340072fc:	6878      	ldr	r0, [r7, #4]
340072fe:	f000 f8d0 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34007302:	697b      	ldr	r3, [r7, #20]
34007304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34007308:	2b00      	cmp	r3, #0
3400730a:	d01e      	beq.n	3400734a <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
3400730c:	68fb      	ldr	r3, [r7, #12]
3400730e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34007312:	2b00      	cmp	r3, #0
34007314:	d019      	beq.n	3400734a <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34007316:	69fb      	ldr	r3, [r7, #28]
34007318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400731c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34007320:	69fb      	ldr	r3, [r7, #28]
34007322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34007326:	69fb      	ldr	r3, [r7, #28]
34007328:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400732c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34007330:	687b      	ldr	r3, [r7, #4]
34007332:	689b      	ldr	r3, [r3, #8]
34007334:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34007338:	687b      	ldr	r3, [r7, #4]
3400733a:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400733c:	687b      	ldr	r3, [r7, #4]
3400733e:	2204      	movs	r2, #4
34007340:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34007342:	2102      	movs	r1, #2
34007344:	6878      	ldr	r0, [r7, #4]
34007346:	f000 f8ac 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
3400734a:	697b      	ldr	r3, [r7, #20]
3400734c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34007350:	2b00      	cmp	r3, #0
34007352:	d01b      	beq.n	3400738c <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34007354:	68fb      	ldr	r3, [r7, #12]
34007356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400735a:	2b00      	cmp	r3, #0
3400735c:	d016      	beq.n	3400738c <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400735e:	69fb      	ldr	r3, [r7, #28]
34007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34007364:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34007368:	69fb      	ldr	r3, [r7, #28]
3400736a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3400736e:	69fb      	ldr	r3, [r7, #28]
34007370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34007374:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34007378:	687b      	ldr	r3, [r7, #4]
3400737a:	689b      	ldr	r3, [r3, #8]
3400737c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34007380:	687b      	ldr	r3, [r7, #4]
34007382:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34007384:	2102      	movs	r1, #2
34007386:	6878      	ldr	r0, [r7, #4]
34007388:	f000 f88b 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
3400738c:	697b      	ldr	r3, [r7, #20]
3400738e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34007392:	2b00      	cmp	r3, #0
34007394:	d01b      	beq.n	340073ce <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34007396:	68fb      	ldr	r3, [r7, #12]
34007398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400739c:	2b00      	cmp	r3, #0
3400739e:	d016      	beq.n	340073ce <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
340073a0:	69fb      	ldr	r3, [r7, #28]
340073a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340073a6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
340073aa:	69fb      	ldr	r3, [r7, #28]
340073ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
340073b0:	69fb      	ldr	r3, [r7, #28]
340073b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
340073b6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
340073ba:	687b      	ldr	r3, [r7, #4]
340073bc:	689b      	ldr	r3, [r3, #8]
340073be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
340073c2:	687b      	ldr	r3, [r7, #4]
340073c4:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340073c6:	2102      	movs	r1, #2
340073c8:	6878      	ldr	r0, [r7, #4]
340073ca:	f000 f86a 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
340073ce:	697b      	ldr	r3, [r7, #20]
340073d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340073d4:	2b00      	cmp	r3, #0
340073d6:	d01b      	beq.n	34007410 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
340073d8:	68fb      	ldr	r3, [r7, #12]
340073da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340073de:	2b00      	cmp	r3, #0
340073e0:	d016      	beq.n	34007410 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340073e2:	69fb      	ldr	r3, [r7, #28]
340073e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340073e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
340073ec:	69fb      	ldr	r3, [r7, #28]
340073ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340073f2:	69fb      	ldr	r3, [r7, #28]
340073f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340073f8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340073fc:	687b      	ldr	r3, [r7, #4]
340073fe:	689b      	ldr	r3, [r3, #8]
34007400:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34007404:	687b      	ldr	r3, [r7, #4]
34007406:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34007408:	2102      	movs	r1, #2
3400740a:	6878      	ldr	r0, [r7, #4]
3400740c:	f000 f849 	bl	340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34007410:	69bb      	ldr	r3, [r7, #24]
34007412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34007416:	2b00      	cmp	r3, #0
34007418:	d014      	beq.n	34007444 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
3400741a:	693b      	ldr	r3, [r7, #16]
3400741c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34007420:	2b00      	cmp	r3, #0
34007422:	d00f      	beq.n	34007444 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34007424:	69fb      	ldr	r3, [r7, #28]
34007426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400742a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
3400742e:	69fb      	ldr	r3, [r7, #28]
34007430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34007434:	69fb      	ldr	r3, [r7, #28]
34007436:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400743a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
3400743e:	6878      	ldr	r0, [r7, #4]
34007440:	f000 f844 	bl	340074cc <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34007444:	bf00      	nop
34007446:	3720      	adds	r7, #32
34007448:	46bd      	mov	sp, r7
3400744a:	bd80      	pop	{r7, pc}

3400744c <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3400744c:	b480      	push	{r7}
3400744e:	b083      	sub	sp, #12
34007450:	af00      	add	r7, sp, #0
34007452:	6078      	str	r0, [r7, #4]
34007454:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34007456:	bf00      	nop
34007458:	370c      	adds	r7, #12
3400745a:	46bd      	mov	sp, r7
3400745c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007460:	4770      	bx	lr

34007462 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34007462:	b480      	push	{r7}
34007464:	b083      	sub	sp, #12
34007466:	af00      	add	r7, sp, #0
34007468:	6078      	str	r0, [r7, #4]
3400746a:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
3400746c:	bf00      	nop
3400746e:	370c      	adds	r7, #12
34007470:	46bd      	mov	sp, r7
34007472:	f85d 7b04 	ldr.w	r7, [sp], #4
34007476:	4770      	bx	lr

34007478 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34007478:	b480      	push	{r7}
3400747a:	b083      	sub	sp, #12
3400747c:	af00      	add	r7, sp, #0
3400747e:	6078      	str	r0, [r7, #4]
34007480:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34007482:	bf00      	nop
34007484:	370c      	adds	r7, #12
34007486:	46bd      	mov	sp, r7
34007488:	f85d 7b04 	ldr.w	r7, [sp], #4
3400748c:	4770      	bx	lr

3400748e <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
3400748e:	b480      	push	{r7}
34007490:	b083      	sub	sp, #12
34007492:	af00      	add	r7, sp, #0
34007494:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
34007496:	bf00      	nop
34007498:	370c      	adds	r7, #12
3400749a:	46bd      	mov	sp, r7
3400749c:	f85d 7b04 	ldr.w	r7, [sp], #4
340074a0:	4770      	bx	lr

340074a2 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
340074a2:	b480      	push	{r7}
340074a4:	b083      	sub	sp, #12
340074a6:	af00      	add	r7, sp, #0
340074a8:	6078      	str	r0, [r7, #4]
340074aa:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
340074ac:	bf00      	nop
340074ae:	370c      	adds	r7, #12
340074b0:	46bd      	mov	sp, r7
340074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
340074b6:	4770      	bx	lr

340074b8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
340074b8:	b480      	push	{r7}
340074ba:	b083      	sub	sp, #12
340074bc:	af00      	add	r7, sp, #0
340074be:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
340074c0:	bf00      	nop
340074c2:	370c      	adds	r7, #12
340074c4:	46bd      	mov	sp, r7
340074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340074ca:	4770      	bx	lr

340074cc <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
340074cc:	b480      	push	{r7}
340074ce:	b083      	sub	sp, #12
340074d0:	af00      	add	r7, sp, #0
340074d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
340074d4:	bf00      	nop
340074d6:	370c      	adds	r7, #12
340074d8:	46bd      	mov	sp, r7
340074da:	f85d 7b04 	ldr.w	r7, [sp], #4
340074de:	4770      	bx	lr

340074e0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
340074e0:	b480      	push	{r7}
340074e2:	b083      	sub	sp, #12
340074e4:	af00      	add	r7, sp, #0
340074e6:	6078      	str	r0, [r7, #4]
340074e8:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
340074ea:	bf00      	nop
340074ec:	370c      	adds	r7, #12
340074ee:	46bd      	mov	sp, r7
340074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340074f4:	4770      	bx	lr

340074f6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
340074f6:	b480      	push	{r7}
340074f8:	b083      	sub	sp, #12
340074fa:	af00      	add	r7, sp, #0
340074fc:	6078      	str	r0, [r7, #4]
340074fe:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34007500:	bf00      	nop
34007502:	370c      	adds	r7, #12
34007504:	46bd      	mov	sp, r7
34007506:	f85d 7b04 	ldr.w	r7, [sp], #4
3400750a:	4770      	bx	lr

3400750c <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
3400750c:	b480      	push	{r7}
3400750e:	b083      	sub	sp, #12
34007510:	af00      	add	r7, sp, #0
34007512:	6078      	str	r0, [r7, #4]
34007514:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
34007516:	bf00      	nop
34007518:	370c      	adds	r7, #12
3400751a:	46bd      	mov	sp, r7
3400751c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007520:	4770      	bx	lr

34007522 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
34007522:	b480      	push	{r7}
34007524:	b083      	sub	sp, #12
34007526:	af00      	add	r7, sp, #0
34007528:	6078      	str	r0, [r7, #4]
3400752a:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
3400752c:	bf00      	nop
3400752e:	370c      	adds	r7, #12
34007530:	46bd      	mov	sp, r7
34007532:	f85d 7b04 	ldr.w	r7, [sp], #4
34007536:	4770      	bx	lr

34007538 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
34007538:	b580      	push	{r7, lr}
3400753a:	b084      	sub	sp, #16
3400753c:	af00      	add	r7, sp, #0
3400753e:	60f8      	str	r0, [r7, #12]
34007540:	60b9      	str	r1, [r7, #8]
34007542:	607a      	str	r2, [r7, #4]
34007544:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34007546:	68fb      	ldr	r3, [r7, #12]
34007548:	2b00      	cmp	r3, #0
3400754a:	d101      	bne.n	34007550 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
3400754c:	2301      	movs	r3, #1
3400754e:	e05b      	b.n	34007608 <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
34007550:	683b      	ldr	r3, [r7, #0]
34007552:	2b00      	cmp	r3, #0
34007554:	d003      	beq.n	3400755e <HAL_DMA_Start_IT+0x26>
34007556:	683b      	ldr	r3, [r7, #0]
34007558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400755c:	d304      	bcc.n	34007568 <HAL_DMA_Start_IT+0x30>
3400755e:	f240 2143 	movw	r1, #579	@ 0x243
34007562:	482b      	ldr	r0, [pc, #172]	@ (34007610 <HAL_DMA_Start_IT+0xd8>)
34007564:	f7fa f834 	bl	340015d0 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
34007568:	68fb      	ldr	r3, [r7, #12]
3400756a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
3400756e:	2b01      	cmp	r3, #1
34007570:	d101      	bne.n	34007576 <HAL_DMA_Start_IT+0x3e>
34007572:	2302      	movs	r3, #2
34007574:	e048      	b.n	34007608 <HAL_DMA_Start_IT+0xd0>
34007576:	68fb      	ldr	r3, [r7, #12]
34007578:	2201      	movs	r2, #1
3400757a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
3400757e:	68fb      	ldr	r3, [r7, #12]
34007580:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34007584:	b2db      	uxtb	r3, r3
34007586:	2b01      	cmp	r3, #1
34007588:	d136      	bne.n	340075f8 <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
3400758a:	68fb      	ldr	r3, [r7, #12]
3400758c:	2202      	movs	r2, #2
3400758e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
34007592:	68fb      	ldr	r3, [r7, #12]
34007594:	2200      	movs	r2, #0
34007596:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
34007598:	683b      	ldr	r3, [r7, #0]
3400759a:	687a      	ldr	r2, [r7, #4]
3400759c:	68b9      	ldr	r1, [r7, #8]
3400759e:	68f8      	ldr	r0, [r7, #12]
340075a0:	f000 f9d6 	bl	34007950 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
340075a4:	68fb      	ldr	r3, [r7, #12]
340075a6:	681b      	ldr	r3, [r3, #0]
340075a8:	695a      	ldr	r2, [r3, #20]
340075aa:	68fb      	ldr	r3, [r7, #12]
340075ac:	681b      	ldr	r3, [r3, #0]
340075ae:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
340075b2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
340075b4:	68fb      	ldr	r3, [r7, #12]
340075b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340075b8:	2b00      	cmp	r3, #0
340075ba:	d007      	beq.n	340075cc <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
340075bc:	68fb      	ldr	r3, [r7, #12]
340075be:	681b      	ldr	r3, [r3, #0]
340075c0:	695a      	ldr	r2, [r3, #20]
340075c2:	68fb      	ldr	r3, [r7, #12]
340075c4:	681b      	ldr	r3, [r3, #0]
340075c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340075ca:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
340075cc:	68fb      	ldr	r3, [r7, #12]
340075ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340075d0:	2b00      	cmp	r3, #0
340075d2:	d007      	beq.n	340075e4 <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
340075d4:	68fb      	ldr	r3, [r7, #12]
340075d6:	681b      	ldr	r3, [r3, #0]
340075d8:	695a      	ldr	r2, [r3, #20]
340075da:	68fb      	ldr	r3, [r7, #12]
340075dc:	681b      	ldr	r3, [r3, #0]
340075de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
340075e2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
340075e4:	68fb      	ldr	r3, [r7, #12]
340075e6:	681b      	ldr	r3, [r3, #0]
340075e8:	695a      	ldr	r2, [r3, #20]
340075ea:	68fb      	ldr	r3, [r7, #12]
340075ec:	681b      	ldr	r3, [r3, #0]
340075ee:	f042 0201 	orr.w	r2, r2, #1
340075f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
340075f4:	2300      	movs	r3, #0
340075f6:	e007      	b.n	34007608 <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
340075f8:	68fb      	ldr	r3, [r7, #12]
340075fa:	2240      	movs	r2, #64	@ 0x40
340075fc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
340075fe:	68fb      	ldr	r3, [r7, #12]
34007600:	2200      	movs	r2, #0
34007602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34007606:	2301      	movs	r3, #1
}
34007608:	4618      	mov	r0, r3
3400760a:	3710      	adds	r7, #16
3400760c:	46bd      	mov	sp, r7
3400760e:	bd80      	pop	{r7, pc}
34007610:	3401d3a4 	.word	0x3401d3a4

34007614 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
34007614:	b480      	push	{r7}
34007616:	b083      	sub	sp, #12
34007618:	af00      	add	r7, sp, #0
3400761a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
3400761c:	687b      	ldr	r3, [r7, #4]
3400761e:	2b00      	cmp	r3, #0
34007620:	d101      	bne.n	34007626 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
34007622:	2301      	movs	r3, #1
34007624:	e019      	b.n	3400765a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34007626:	687b      	ldr	r3, [r7, #4]
34007628:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3400762c:	b2db      	uxtb	r3, r3
3400762e:	2b02      	cmp	r3, #2
34007630:	d004      	beq.n	3400763c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34007632:	687b      	ldr	r3, [r7, #4]
34007634:	2220      	movs	r2, #32
34007636:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34007638:	2301      	movs	r3, #1
3400763a:	e00e      	b.n	3400765a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
3400763c:	687b      	ldr	r3, [r7, #4]
3400763e:	2204      	movs	r2, #4
34007640:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34007644:	687b      	ldr	r3, [r7, #4]
34007646:	681b      	ldr	r3, [r3, #0]
34007648:	695b      	ldr	r3, [r3, #20]
3400764a:	687a      	ldr	r2, [r7, #4]
3400764c:	6812      	ldr	r2, [r2, #0]
3400764e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34007652:	f043 0304 	orr.w	r3, r3, #4
34007656:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34007658:	2300      	movs	r3, #0
}
3400765a:	4618      	mov	r0, r3
3400765c:	370c      	adds	r7, #12
3400765e:	46bd      	mov	sp, r7
34007660:	f85d 7b04 	ldr.w	r7, [sp], #4
34007664:	4770      	bx	lr

34007666 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
34007666:	b580      	push	{r7, lr}
34007668:	b086      	sub	sp, #24
3400766a:	af00      	add	r7, sp, #0
3400766c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
3400766e:	687b      	ldr	r3, [r7, #4]
34007670:	681b      	ldr	r3, [r3, #0]
34007672:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
34007676:	f023 030f 	bic.w	r3, r3, #15
3400767a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
3400767c:	687b      	ldr	r3, [r7, #4]
3400767e:	681b      	ldr	r3, [r3, #0]
34007680:	f3c3 030b 	ubfx	r3, r3, #0, #12
34007684:	3b50      	subs	r3, #80	@ 0x50
34007686:	09db      	lsrs	r3, r3, #7
34007688:	f003 031f 	and.w	r3, r3, #31
3400768c:	2201      	movs	r2, #1
3400768e:	fa02 f303 	lsl.w	r3, r2, r3
34007692:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
34007694:	697b      	ldr	r3, [r7, #20]
34007696:	68db      	ldr	r3, [r3, #12]
34007698:	693a      	ldr	r2, [r7, #16]
3400769a:	4013      	ands	r3, r2
3400769c:	60fb      	str	r3, [r7, #12]
#if defined (CPU_IN_SECURE_STATE)
  uint32_t global_active_flag_s = IS_DMA_GLOBAL_ACTIVE_FLAG_S(p_dma_instance, global_it_flag);
3400769e:	697b      	ldr	r3, [r7, #20]
340076a0:	691b      	ldr	r3, [r3, #16]
340076a2:	693a      	ldr	r2, [r7, #16]
340076a4:	4013      	ands	r3, r2
340076a6:	60bb      	str	r3, [r7, #8]
#endif /* CPU_IN_SECURE_STATE */

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
340076a8:	68bb      	ldr	r3, [r7, #8]
340076aa:	2b00      	cmp	r3, #0
340076ac:	d103      	bne.n	340076b6 <HAL_DMA_IRQHandler+0x50>
340076ae:	68fb      	ldr	r3, [r7, #12]
340076b0:	2b00      	cmp	r3, #0
340076b2:	f000 813b 	beq.w	3400792c <HAL_DMA_IRQHandler+0x2c6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
340076b6:	687b      	ldr	r3, [r7, #4]
340076b8:	681b      	ldr	r3, [r3, #0]
340076ba:	691b      	ldr	r3, [r3, #16]
340076bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340076c0:	2b00      	cmp	r3, #0
340076c2:	d011      	beq.n	340076e8 <HAL_DMA_IRQHandler+0x82>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
340076c4:	687b      	ldr	r3, [r7, #4]
340076c6:	681b      	ldr	r3, [r3, #0]
340076c8:	695b      	ldr	r3, [r3, #20]
340076ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340076ce:	2b00      	cmp	r3, #0
340076d0:	d00a      	beq.n	340076e8 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
340076d2:	687b      	ldr	r3, [r7, #4]
340076d4:	681b      	ldr	r3, [r3, #0]
340076d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340076da:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
340076dc:	687b      	ldr	r3, [r7, #4]
340076de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340076e0:	f043 0201 	orr.w	r2, r3, #1
340076e4:	687b      	ldr	r3, [r7, #4]
340076e6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
340076e8:	687b      	ldr	r3, [r7, #4]
340076ea:	681b      	ldr	r3, [r3, #0]
340076ec:	691b      	ldr	r3, [r3, #16]
340076ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340076f2:	2b00      	cmp	r3, #0
340076f4:	d011      	beq.n	3400771a <HAL_DMA_IRQHandler+0xb4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
340076f6:	687b      	ldr	r3, [r7, #4]
340076f8:	681b      	ldr	r3, [r3, #0]
340076fa:	695b      	ldr	r3, [r3, #20]
340076fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34007700:	2b00      	cmp	r3, #0
34007702:	d00a      	beq.n	3400771a <HAL_DMA_IRQHandler+0xb4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
34007704:	687b      	ldr	r3, [r7, #4]
34007706:	681b      	ldr	r3, [r3, #0]
34007708:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400770c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
3400770e:	687b      	ldr	r3, [r7, #4]
34007710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34007712:	f043 0202 	orr.w	r2, r3, #2
34007716:	687b      	ldr	r3, [r7, #4]
34007718:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
3400771a:	687b      	ldr	r3, [r7, #4]
3400771c:	681b      	ldr	r3, [r3, #0]
3400771e:	691b      	ldr	r3, [r3, #16]
34007720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34007724:	2b00      	cmp	r3, #0
34007726:	d011      	beq.n	3400774c <HAL_DMA_IRQHandler+0xe6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
34007728:	687b      	ldr	r3, [r7, #4]
3400772a:	681b      	ldr	r3, [r3, #0]
3400772c:	695b      	ldr	r3, [r3, #20]
3400772e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34007732:	2b00      	cmp	r3, #0
34007734:	d00a      	beq.n	3400774c <HAL_DMA_IRQHandler+0xe6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
34007736:	687b      	ldr	r3, [r7, #4]
34007738:	681b      	ldr	r3, [r3, #0]
3400773a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400773e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
34007740:	687b      	ldr	r3, [r7, #4]
34007742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34007744:	f043 0204 	orr.w	r2, r3, #4
34007748:	687b      	ldr	r3, [r7, #4]
3400774a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
3400774c:	687b      	ldr	r3, [r7, #4]
3400774e:	681b      	ldr	r3, [r3, #0]
34007750:	691b      	ldr	r3, [r3, #16]
34007752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34007756:	2b00      	cmp	r3, #0
34007758:	d011      	beq.n	3400777e <HAL_DMA_IRQHandler+0x118>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
3400775a:	687b      	ldr	r3, [r7, #4]
3400775c:	681b      	ldr	r3, [r3, #0]
3400775e:	695b      	ldr	r3, [r3, #20]
34007760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34007764:	2b00      	cmp	r3, #0
34007766:	d00a      	beq.n	3400777e <HAL_DMA_IRQHandler+0x118>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
34007768:	687b      	ldr	r3, [r7, #4]
3400776a:	681b      	ldr	r3, [r3, #0]
3400776c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34007770:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
34007772:	687b      	ldr	r3, [r7, #4]
34007774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34007776:	f043 0208 	orr.w	r2, r3, #8
3400777a:	687b      	ldr	r3, [r7, #4]
3400777c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
3400777e:	687b      	ldr	r3, [r7, #4]
34007780:	681b      	ldr	r3, [r3, #0]
34007782:	691b      	ldr	r3, [r3, #16]
34007784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34007788:	2b00      	cmp	r3, #0
3400778a:	d013      	beq.n	340077b4 <HAL_DMA_IRQHandler+0x14e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
3400778c:	687b      	ldr	r3, [r7, #4]
3400778e:	681b      	ldr	r3, [r3, #0]
34007790:	695b      	ldr	r3, [r3, #20]
34007792:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34007796:	2b00      	cmp	r3, #0
34007798:	d00c      	beq.n	340077b4 <HAL_DMA_IRQHandler+0x14e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
3400779a:	687b      	ldr	r3, [r7, #4]
3400779c:	681b      	ldr	r3, [r3, #0]
3400779e:	f44f 7200 	mov.w	r2, #512	@ 0x200
340077a2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
340077a4:	687b      	ldr	r3, [r7, #4]
340077a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340077a8:	2b00      	cmp	r3, #0
340077aa:	d003      	beq.n	340077b4 <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
340077ac:	687b      	ldr	r3, [r7, #4]
340077ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340077b0:	6878      	ldr	r0, [r7, #4]
340077b2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
340077b4:	687b      	ldr	r3, [r7, #4]
340077b6:	681b      	ldr	r3, [r3, #0]
340077b8:	691b      	ldr	r3, [r3, #16]
340077ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340077be:	2b00      	cmp	r3, #0
340077c0:	d04c      	beq.n	3400785c <HAL_DMA_IRQHandler+0x1f6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
340077c2:	687b      	ldr	r3, [r7, #4]
340077c4:	681b      	ldr	r3, [r3, #0]
340077c6:	695b      	ldr	r3, [r3, #20]
340077c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340077cc:	2b00      	cmp	r3, #0
340077ce:	d045      	beq.n	3400785c <HAL_DMA_IRQHandler+0x1f6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
340077d0:	687b      	ldr	r3, [r7, #4]
340077d2:	681b      	ldr	r3, [r3, #0]
340077d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340077d8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
340077da:	687b      	ldr	r3, [r7, #4]
340077dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340077e0:	b2db      	uxtb	r3, r3
340077e2:	2b04      	cmp	r3, #4
340077e4:	d12e      	bne.n	34007844 <HAL_DMA_IRQHandler+0x1de>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
340077e6:	687b      	ldr	r3, [r7, #4]
340077e8:	681b      	ldr	r3, [r3, #0]
340077ea:	695a      	ldr	r2, [r3, #20]
340077ec:	687b      	ldr	r3, [r7, #4]
340077ee:	681b      	ldr	r3, [r3, #0]
340077f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340077f4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
340077f6:	687b      	ldr	r3, [r7, #4]
340077f8:	681b      	ldr	r3, [r3, #0]
340077fa:	695a      	ldr	r2, [r3, #20]
340077fc:	687b      	ldr	r3, [r7, #4]
340077fe:	681b      	ldr	r3, [r3, #0]
34007800:	f042 0202 	orr.w	r2, r2, #2
34007804:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
34007806:	687b      	ldr	r3, [r7, #4]
34007808:	2201      	movs	r2, #1
3400780a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
3400780e:	687b      	ldr	r3, [r7, #4]
34007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34007812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34007816:	2b00      	cmp	r3, #0
34007818:	d007      	beq.n	3400782a <HAL_DMA_IRQHandler+0x1c4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
3400781a:	687b      	ldr	r3, [r7, #4]
3400781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400781e:	2201      	movs	r2, #1
34007820:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
34007822:	687b      	ldr	r3, [r7, #4]
34007824:	681b      	ldr	r3, [r3, #0]
34007826:	2200      	movs	r2, #0
34007828:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
3400782a:	687b      	ldr	r3, [r7, #4]
3400782c:	2200      	movs	r2, #0
3400782e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
34007832:	687b      	ldr	r3, [r7, #4]
34007834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34007836:	2b00      	cmp	r3, #0
34007838:	d07a      	beq.n	34007930 <HAL_DMA_IRQHandler+0x2ca>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
3400783a:	687b      	ldr	r3, [r7, #4]
3400783c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400783e:	6878      	ldr	r0, [r7, #4]
34007840:	4798      	blx	r3
        }

        return;
34007842:	e075      	b.n	34007930 <HAL_DMA_IRQHandler+0x2ca>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
34007844:	687b      	ldr	r3, [r7, #4]
34007846:	2205      	movs	r2, #5
34007848:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
3400784c:	687b      	ldr	r3, [r7, #4]
3400784e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34007850:	2b00      	cmp	r3, #0
34007852:	d003      	beq.n	3400785c <HAL_DMA_IRQHandler+0x1f6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
34007854:	687b      	ldr	r3, [r7, #4]
34007856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34007858:	6878      	ldr	r0, [r7, #4]
3400785a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
3400785c:	687b      	ldr	r3, [r7, #4]
3400785e:	681b      	ldr	r3, [r3, #0]
34007860:	691b      	ldr	r3, [r3, #16]
34007862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34007866:	2b00      	cmp	r3, #0
34007868:	d039      	beq.n	340078de <HAL_DMA_IRQHandler+0x278>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
3400786a:	687b      	ldr	r3, [r7, #4]
3400786c:	681b      	ldr	r3, [r3, #0]
3400786e:	695b      	ldr	r3, [r3, #20]
34007870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34007874:	2b00      	cmp	r3, #0
34007876:	d032      	beq.n	340078de <HAL_DMA_IRQHandler+0x278>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34007878:	687b      	ldr	r3, [r7, #4]
3400787a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34007880:	2b00      	cmp	r3, #0
34007882:	d012      	beq.n	340078aa <HAL_DMA_IRQHandler+0x244>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
34007884:	687b      	ldr	r3, [r7, #4]
34007886:	681b      	ldr	r3, [r3, #0]
34007888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400788a:	2b00      	cmp	r3, #0
3400788c:	d116      	bne.n	340078bc <HAL_DMA_IRQHandler+0x256>
        {
          if (hdma->Instance->CBR1 == 0U)
3400788e:	687b      	ldr	r3, [r7, #4]
34007890:	681b      	ldr	r3, [r3, #0]
34007892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007894:	2b00      	cmp	r3, #0
34007896:	d111      	bne.n	340078bc <HAL_DMA_IRQHandler+0x256>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
34007898:	687b      	ldr	r3, [r7, #4]
3400789a:	2201      	movs	r2, #1
3400789c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340078a0:	687b      	ldr	r3, [r7, #4]
340078a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340078a4:	2201      	movs	r2, #1
340078a6:	731a      	strb	r2, [r3, #12]
340078a8:	e008      	b.n	340078bc <HAL_DMA_IRQHandler+0x256>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
340078aa:	687b      	ldr	r3, [r7, #4]
340078ac:	681b      	ldr	r3, [r3, #0]
340078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340078b0:	2b00      	cmp	r3, #0
340078b2:	d103      	bne.n	340078bc <HAL_DMA_IRQHandler+0x256>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
340078b4:	687b      	ldr	r3, [r7, #4]
340078b6:	2201      	movs	r2, #1
340078b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
340078bc:	687b      	ldr	r3, [r7, #4]
340078be:	681b      	ldr	r3, [r3, #0]
340078c0:	f44f 7240 	mov.w	r2, #768	@ 0x300
340078c4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
340078c6:	687b      	ldr	r3, [r7, #4]
340078c8:	2200      	movs	r2, #0
340078ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
340078ce:	687b      	ldr	r3, [r7, #4]
340078d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340078d2:	2b00      	cmp	r3, #0
340078d4:	d003      	beq.n	340078de <HAL_DMA_IRQHandler+0x278>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
340078d6:	687b      	ldr	r3, [r7, #4]
340078d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340078da:	6878      	ldr	r0, [r7, #4]
340078dc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
340078de:	687b      	ldr	r3, [r7, #4]
340078e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340078e2:	2b00      	cmp	r3, #0
340078e4:	d025      	beq.n	34007932 <HAL_DMA_IRQHandler+0x2cc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
340078e6:	687b      	ldr	r3, [r7, #4]
340078e8:	681b      	ldr	r3, [r3, #0]
340078ea:	695a      	ldr	r2, [r3, #20]
340078ec:	687b      	ldr	r3, [r7, #4]
340078ee:	681b      	ldr	r3, [r3, #0]
340078f0:	f042 0202 	orr.w	r2, r2, #2
340078f4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
340078f6:	687b      	ldr	r3, [r7, #4]
340078f8:	2201      	movs	r2, #1
340078fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340078fe:	687b      	ldr	r3, [r7, #4]
34007900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34007906:	2b00      	cmp	r3, #0
34007908:	d003      	beq.n	34007912 <HAL_DMA_IRQHandler+0x2ac>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
3400790a:	687b      	ldr	r3, [r7, #4]
3400790c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400790e:	2201      	movs	r2, #1
34007910:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34007912:	687b      	ldr	r3, [r7, #4]
34007914:	2200      	movs	r2, #0
34007916:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
3400791a:	687b      	ldr	r3, [r7, #4]
3400791c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400791e:	2b00      	cmp	r3, #0
34007920:	d007      	beq.n	34007932 <HAL_DMA_IRQHandler+0x2cc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
34007922:	687b      	ldr	r3, [r7, #4]
34007924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34007926:	6878      	ldr	r0, [r7, #4]
34007928:	4798      	blx	r3
3400792a:	e002      	b.n	34007932 <HAL_DMA_IRQHandler+0x2cc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
3400792c:	bf00      	nop
3400792e:	e000      	b.n	34007932 <HAL_DMA_IRQHandler+0x2cc>
        return;
34007930:	bf00      	nop
    }
  }
}
34007932:	3718      	adds	r7, #24
34007934:	46bd      	mov	sp, r7
34007936:	bd80      	pop	{r7, pc}

34007938 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
34007938:	b480      	push	{r7}
3400793a:	b083      	sub	sp, #12
3400793c:	af00      	add	r7, sp, #0
3400793e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
34007940:	687b      	ldr	r3, [r7, #4]
34007942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
34007944:	4618      	mov	r0, r3
34007946:	370c      	adds	r7, #12
34007948:	46bd      	mov	sp, r7
3400794a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400794e:	4770      	bx	lr

34007950 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
34007950:	b480      	push	{r7}
34007952:	b085      	sub	sp, #20
34007954:	af00      	add	r7, sp, #0
34007956:	60f8      	str	r0, [r7, #12]
34007958:	60b9      	str	r1, [r7, #8]
3400795a:	607a      	str	r2, [r7, #4]
3400795c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
3400795e:	68fb      	ldr	r3, [r7, #12]
34007960:	681b      	ldr	r3, [r3, #0]
34007962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007964:	0c1b      	lsrs	r3, r3, #16
34007966:	041b      	lsls	r3, r3, #16
34007968:	683a      	ldr	r2, [r7, #0]
3400796a:	b291      	uxth	r1, r2
3400796c:	68fa      	ldr	r2, [r7, #12]
3400796e:	6812      	ldr	r2, [r2, #0]
34007970:	430b      	orrs	r3, r1
34007972:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34007974:	68fb      	ldr	r3, [r7, #12]
34007976:	681b      	ldr	r3, [r3, #0]
34007978:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
3400797c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
3400797e:	68fb      	ldr	r3, [r7, #12]
34007980:	681b      	ldr	r3, [r3, #0]
34007982:	68ba      	ldr	r2, [r7, #8]
34007984:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
34007986:	68fb      	ldr	r3, [r7, #12]
34007988:	681b      	ldr	r3, [r3, #0]
3400798a:	687a      	ldr	r2, [r7, #4]
3400798c:	651a      	str	r2, [r3, #80]	@ 0x50
}
3400798e:	bf00      	nop
34007990:	3714      	adds	r7, #20
34007992:	46bd      	mov	sp, r7
34007994:	f85d 7b04 	ldr.w	r7, [sp], #4
34007998:	4770      	bx	lr

3400799a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
3400799a:	b580      	push	{r7, lr}
3400799c:	b084      	sub	sp, #16
3400799e:	af00      	add	r7, sp, #0
340079a0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
340079a2:	687b      	ldr	r3, [r7, #4]
340079a4:	681b      	ldr	r3, [r3, #0]
340079a6:	685b      	ldr	r3, [r3, #4]
340079a8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
340079aa:	687b      	ldr	r3, [r7, #4]
340079ac:	681b      	ldr	r3, [r3, #0]
340079ae:	681b      	ldr	r3, [r3, #0]
340079b0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
340079b2:	68fb      	ldr	r3, [r7, #12]
340079b4:	f003 0301 	and.w	r3, r3, #1
340079b8:	2b00      	cmp	r3, #0
340079ba:	d026      	beq.n	34007a0a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
340079bc:	68bb      	ldr	r3, [r7, #8]
340079be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340079c2:	2b00      	cmp	r3, #0
340079c4:	d021      	beq.n	34007a0a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
340079c6:	687b      	ldr	r3, [r7, #4]
340079c8:	681b      	ldr	r3, [r3, #0]
340079ca:	681a      	ldr	r2, [r3, #0]
340079cc:	687b      	ldr	r3, [r7, #4]
340079ce:	681b      	ldr	r3, [r3, #0]
340079d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
340079d4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
340079d6:	687b      	ldr	r3, [r7, #4]
340079d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340079da:	f043 0201 	orr.w	r2, r3, #1
340079de:	687b      	ldr	r3, [r7, #4]
340079e0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
340079e2:	687b      	ldr	r3, [r7, #4]
340079e4:	681b      	ldr	r3, [r3, #0]
340079e6:	2201      	movs	r2, #1
340079e8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340079ea:	687b      	ldr	r3, [r7, #4]
340079ec:	2204      	movs	r2, #4
340079ee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340079f2:	687b      	ldr	r3, [r7, #4]
340079f4:	2200      	movs	r2, #0
340079f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
340079fa:	687b      	ldr	r3, [r7, #4]
340079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079fe:	2b00      	cmp	r3, #0
34007a00:	d003      	beq.n	34007a0a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34007a02:	687b      	ldr	r3, [r7, #4]
34007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a06:	6878      	ldr	r0, [r7, #4]
34007a08:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34007a0a:	68fb      	ldr	r3, [r7, #12]
34007a0c:	f003 0320 	and.w	r3, r3, #32
34007a10:	2b00      	cmp	r3, #0
34007a12:	d026      	beq.n	34007a62 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
34007a14:	68bb      	ldr	r3, [r7, #8]
34007a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34007a1a:	2b00      	cmp	r3, #0
34007a1c:	d021      	beq.n	34007a62 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34007a1e:	687b      	ldr	r3, [r7, #4]
34007a20:	681b      	ldr	r3, [r3, #0]
34007a22:	681a      	ldr	r2, [r3, #0]
34007a24:	687b      	ldr	r3, [r7, #4]
34007a26:	681b      	ldr	r3, [r3, #0]
34007a28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34007a2c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34007a2e:	687b      	ldr	r3, [r7, #4]
34007a30:	681b      	ldr	r3, [r3, #0]
34007a32:	2220      	movs	r2, #32
34007a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
34007a36:	687b      	ldr	r3, [r7, #4]
34007a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34007a3a:	f043 0202 	orr.w	r2, r3, #2
34007a3e:	687b      	ldr	r3, [r7, #4]
34007a40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34007a42:	687b      	ldr	r3, [r7, #4]
34007a44:	2204      	movs	r2, #4
34007a46:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34007a4a:	687b      	ldr	r3, [r7, #4]
34007a4c:	2200      	movs	r2, #0
34007a4e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34007a52:	687b      	ldr	r3, [r7, #4]
34007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a56:	2b00      	cmp	r3, #0
34007a58:	d003      	beq.n	34007a62 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34007a5a:	687b      	ldr	r3, [r7, #4]
34007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a5e:	6878      	ldr	r0, [r7, #4]
34007a60:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34007a62:	68fb      	ldr	r3, [r7, #12]
34007a64:	f003 0308 	and.w	r3, r3, #8
34007a68:	2b00      	cmp	r3, #0
34007a6a:	d026      	beq.n	34007aba <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
34007a6c:	68bb      	ldr	r3, [r7, #8]
34007a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34007a72:	2b00      	cmp	r3, #0
34007a74:	d021      	beq.n	34007aba <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34007a76:	687b      	ldr	r3, [r7, #4]
34007a78:	681b      	ldr	r3, [r3, #0]
34007a7a:	681a      	ldr	r2, [r3, #0]
34007a7c:	687b      	ldr	r3, [r7, #4]
34007a7e:	681b      	ldr	r3, [r3, #0]
34007a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34007a84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34007a86:	687b      	ldr	r3, [r7, #4]
34007a88:	681b      	ldr	r3, [r3, #0]
34007a8a:	2208      	movs	r2, #8
34007a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34007a8e:	687b      	ldr	r3, [r7, #4]
34007a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34007a92:	f043 0204 	orr.w	r2, r3, #4
34007a96:	687b      	ldr	r3, [r7, #4]
34007a98:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34007a9a:	687b      	ldr	r3, [r7, #4]
34007a9c:	2204      	movs	r2, #4
34007a9e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34007aa2:	687b      	ldr	r3, [r7, #4]
34007aa4:	2200      	movs	r2, #0
34007aa6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34007aaa:	687b      	ldr	r3, [r7, #4]
34007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007aae:	2b00      	cmp	r3, #0
34007ab0:	d003      	beq.n	34007aba <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34007ab2:	687b      	ldr	r3, [r7, #4]
34007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007ab6:	6878      	ldr	r0, [r7, #4]
34007ab8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
34007aba:	68fb      	ldr	r3, [r7, #12]
34007abc:	f003 0304 	and.w	r3, r3, #4
34007ac0:	2b00      	cmp	r3, #0
34007ac2:	d013      	beq.n	34007aec <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
34007ac4:	68bb      	ldr	r3, [r7, #8]
34007ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34007aca:	2b00      	cmp	r3, #0
34007acc:	d00e      	beq.n	34007aec <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34007ace:	687b      	ldr	r3, [r7, #4]
34007ad0:	681b      	ldr	r3, [r3, #0]
34007ad2:	681a      	ldr	r2, [r3, #0]
34007ad4:	687b      	ldr	r3, [r7, #4]
34007ad6:	681b      	ldr	r3, [r3, #0]
34007ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34007adc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34007ade:	687b      	ldr	r3, [r7, #4]
34007ae0:	681b      	ldr	r3, [r3, #0]
34007ae2:	2204      	movs	r2, #4
34007ae4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
34007ae6:	6878      	ldr	r0, [r7, #4]
34007ae8:	f000 f853 	bl	34007b92 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
34007aec:	68fb      	ldr	r3, [r7, #12]
34007aee:	f003 0302 	and.w	r3, r3, #2
34007af2:	2b00      	cmp	r3, #0
34007af4:	d024      	beq.n	34007b40 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
34007af6:	68bb      	ldr	r3, [r7, #8]
34007af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34007afc:	2b00      	cmp	r3, #0
34007afe:	d01f      	beq.n	34007b40 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
34007b00:	687b      	ldr	r3, [r7, #4]
34007b02:	681b      	ldr	r3, [r3, #0]
34007b04:	681a      	ldr	r2, [r3, #0]
34007b06:	687b      	ldr	r3, [r7, #4]
34007b08:	681b      	ldr	r3, [r3, #0]
34007b0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34007b0e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
34007b10:	687b      	ldr	r3, [r7, #4]
34007b12:	681b      	ldr	r3, [r3, #0]
34007b14:	2202      	movs	r2, #2
34007b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34007b18:	687b      	ldr	r3, [r7, #4]
34007b1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34007b1c:	687b      	ldr	r3, [r7, #4]
34007b1e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34007b20:	687b      	ldr	r3, [r7, #4]
34007b22:	2201      	movs	r2, #1
34007b24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34007b28:	687b      	ldr	r3, [r7, #4]
34007b2a:	2200      	movs	r2, #0
34007b2c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
34007b30:	687b      	ldr	r3, [r7, #4]
34007b32:	6a1b      	ldr	r3, [r3, #32]
34007b34:	2b00      	cmp	r3, #0
34007b36:	d003      	beq.n	34007b40 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
34007b38:	687b      	ldr	r3, [r7, #4]
34007b3a:	6a1b      	ldr	r3, [r3, #32]
34007b3c:	6878      	ldr	r0, [r7, #4]
34007b3e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
34007b40:	68fb      	ldr	r3, [r7, #12]
34007b42:	f003 0310 	and.w	r3, r3, #16
34007b46:	2b00      	cmp	r3, #0
34007b48:	d01f      	beq.n	34007b8a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
34007b4a:	68bb      	ldr	r3, [r7, #8]
34007b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34007b50:	2b00      	cmp	r3, #0
34007b52:	d01a      	beq.n	34007b8a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34007b54:	687b      	ldr	r3, [r7, #4]
34007b56:	681b      	ldr	r3, [r3, #0]
34007b58:	681a      	ldr	r2, [r3, #0]
34007b5a:	687b      	ldr	r3, [r7, #4]
34007b5c:	681b      	ldr	r3, [r3, #0]
34007b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34007b62:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34007b64:	687b      	ldr	r3, [r7, #4]
34007b66:	681b      	ldr	r3, [r3, #0]
34007b68:	2210      	movs	r2, #16
34007b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34007b6c:	687b      	ldr	r3, [r7, #4]
34007b6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34007b70:	687b      	ldr	r3, [r7, #4]
34007b72:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34007b74:	687b      	ldr	r3, [r7, #4]
34007b76:	2201      	movs	r2, #1
34007b78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34007b7c:	687b      	ldr	r3, [r7, #4]
34007b7e:	2200      	movs	r2, #0
34007b80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34007b84:	6878      	ldr	r0, [r7, #4]
34007b86:	f000 f80e 	bl	34007ba6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
34007b8a:	bf00      	nop
34007b8c:	3710      	adds	r7, #16
34007b8e:	46bd      	mov	sp, r7
34007b90:	bd80      	pop	{r7, pc}

34007b92 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
34007b92:	b480      	push	{r7}
34007b94:	b083      	sub	sp, #12
34007b96:	af00      	add	r7, sp, #0
34007b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
34007b9a:	bf00      	nop
34007b9c:	370c      	adds	r7, #12
34007b9e:	46bd      	mov	sp, r7
34007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
34007ba4:	4770      	bx	lr

34007ba6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
34007ba6:	b480      	push	{r7}
34007ba8:	b083      	sub	sp, #12
34007baa:	af00      	add	r7, sp, #0
34007bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
34007bae:	bf00      	nop
34007bb0:	370c      	adds	r7, #12
34007bb2:	46bd      	mov	sp, r7
34007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34007bb8:	4770      	bx	lr

34007bba <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
34007bba:	b580      	push	{r7, lr}
34007bbc:	b086      	sub	sp, #24
34007bbe:	af00      	add	r7, sp, #0
34007bc0:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
34007bc2:	687b      	ldr	r3, [r7, #4]
34007bc4:	2b00      	cmp	r3, #0
34007bc6:	d003      	beq.n	34007bd0 <HAL_DMAEx_List_Start_IT+0x16>
34007bc8:	687b      	ldr	r3, [r7, #4]
34007bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007bcc:	2b00      	cmp	r3, #0
34007bce:	d101      	bne.n	34007bd4 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
34007bd0:	2301      	movs	r3, #1
34007bd2:	e082      	b.n	34007cda <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
34007bd4:	687b      	ldr	r3, [r7, #4]
34007bd6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34007bda:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
34007bdc:	687b      	ldr	r3, [r7, #4]
34007bde:	681b      	ldr	r3, [r3, #0]
34007be0:	695b      	ldr	r3, [r3, #20]
34007be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34007be6:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
34007be8:	7dfb      	ldrb	r3, [r7, #23]
34007bea:	2b01      	cmp	r3, #1
34007bec:	d005      	beq.n	34007bfa <HAL_DMAEx_List_Start_IT+0x40>
34007bee:	7dfb      	ldrb	r3, [r7, #23]
34007bf0:	2b02      	cmp	r3, #2
34007bf2:	d16a      	bne.n	34007cca <HAL_DMAEx_List_Start_IT+0x110>
34007bf4:	693b      	ldr	r3, [r7, #16]
34007bf6:	2b00      	cmp	r3, #0
34007bf8:	d067      	beq.n	34007cca <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
34007bfa:	687b      	ldr	r3, [r7, #4]
34007bfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34007c00:	b2db      	uxtb	r3, r3
34007c02:	2b01      	cmp	r3, #1
34007c04:	d157      	bne.n	34007cb6 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
34007c06:	687b      	ldr	r3, [r7, #4]
34007c08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
34007c0c:	2b01      	cmp	r3, #1
34007c0e:	d101      	bne.n	34007c14 <HAL_DMAEx_List_Start_IT+0x5a>
34007c10:	2302      	movs	r3, #2
34007c12:	e062      	b.n	34007cda <HAL_DMAEx_List_Start_IT+0x120>
34007c14:	687b      	ldr	r3, [r7, #4]
34007c16:	2201      	movs	r2, #1
34007c18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
34007c1c:	687b      	ldr	r3, [r7, #4]
34007c1e:	2202      	movs	r2, #2
34007c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
34007c24:	687b      	ldr	r3, [r7, #4]
34007c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007c28:	2202      	movs	r2, #2
34007c2a:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
34007c2c:	687b      	ldr	r3, [r7, #4]
34007c2e:	2200      	movs	r2, #0
34007c30:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
34007c32:	687b      	ldr	r3, [r7, #4]
34007c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007c36:	2200      	movs	r2, #0
34007c38:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34007c3a:	687b      	ldr	r3, [r7, #4]
34007c3c:	681b      	ldr	r3, [r3, #0]
34007c3e:	695a      	ldr	r2, [r3, #20]
34007c40:	687b      	ldr	r3, [r7, #4]
34007c42:	681b      	ldr	r3, [r3, #0]
34007c44:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
34007c48:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
34007c4a:	687b      	ldr	r3, [r7, #4]
34007c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34007c4e:	2b00      	cmp	r3, #0
34007c50:	d007      	beq.n	34007c62 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34007c52:	687b      	ldr	r3, [r7, #4]
34007c54:	681b      	ldr	r3, [r3, #0]
34007c56:	695a      	ldr	r2, [r3, #20]
34007c58:	687b      	ldr	r3, [r7, #4]
34007c5a:	681b      	ldr	r3, [r3, #0]
34007c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34007c60:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
34007c62:	687b      	ldr	r3, [r7, #4]
34007c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34007c66:	2b00      	cmp	r3, #0
34007c68:	d007      	beq.n	34007c7a <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
34007c6a:	687b      	ldr	r3, [r7, #4]
34007c6c:	681b      	ldr	r3, [r3, #0]
34007c6e:	695a      	ldr	r2, [r3, #20]
34007c70:	687b      	ldr	r3, [r7, #4]
34007c72:	681b      	ldr	r3, [r3, #0]
34007c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34007c78:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
34007c7a:	687b      	ldr	r3, [r7, #4]
34007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007c7e:	681b      	ldr	r3, [r3, #0]
34007c80:	f107 010c 	add.w	r1, r7, #12
34007c84:	2200      	movs	r2, #0
34007c86:	4618      	mov	r0, r3
34007c88:	f000 f82c 	bl	34007ce4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
34007c8c:	687b      	ldr	r3, [r7, #4]
34007c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007c90:	681b      	ldr	r3, [r3, #0]
34007c92:	4619      	mov	r1, r3
34007c94:	687b      	ldr	r3, [r7, #4]
34007c96:	681a      	ldr	r2, [r3, #0]
34007c98:	0c0b      	lsrs	r3, r1, #16
34007c9a:	041b      	lsls	r3, r3, #16
34007c9c:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
34007c9e:	687b      	ldr	r3, [r7, #4]
34007ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34007ca2:	681b      	ldr	r3, [r3, #0]
34007ca4:	461a      	mov	r2, r3
34007ca6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
34007caa:	4013      	ands	r3, r2
34007cac:	68f9      	ldr	r1, [r7, #12]
34007cae:	687a      	ldr	r2, [r7, #4]
34007cb0:	6812      	ldr	r2, [r2, #0]
34007cb2:	430b      	orrs	r3, r1
34007cb4:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
34007cb6:	687b      	ldr	r3, [r7, #4]
34007cb8:	681b      	ldr	r3, [r3, #0]
34007cba:	695a      	ldr	r2, [r3, #20]
34007cbc:	687b      	ldr	r3, [r7, #4]
34007cbe:	681b      	ldr	r3, [r3, #0]
34007cc0:	f042 0201 	orr.w	r2, r2, #1
34007cc4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
34007cc6:	2300      	movs	r3, #0
34007cc8:	e007      	b.n	34007cda <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
34007cca:	687b      	ldr	r3, [r7, #4]
34007ccc:	2240      	movs	r2, #64	@ 0x40
34007cce:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34007cd0:	687b      	ldr	r3, [r7, #4]
34007cd2:	2200      	movs	r2, #0
34007cd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34007cd8:	2301      	movs	r3, #1
}
34007cda:	4618      	mov	r0, r3
34007cdc:	3718      	adds	r7, #24
34007cde:	46bd      	mov	sp, r7
34007ce0:	bd80      	pop	{r7, pc}
	...

34007ce4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
34007ce4:	b480      	push	{r7}
34007ce6:	b085      	sub	sp, #20
34007ce8:	af00      	add	r7, sp, #0
34007cea:	60f8      	str	r0, [r7, #12]
34007cec:	60b9      	str	r1, [r7, #8]
34007cee:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
34007cf0:	68fb      	ldr	r3, [r7, #12]
34007cf2:	6a1b      	ldr	r3, [r3, #32]
34007cf4:	f003 0302 	and.w	r3, r3, #2
34007cf8:	2b00      	cmp	r3, #0
34007cfa:	d00c      	beq.n	34007d16 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
34007cfc:	68bb      	ldr	r3, [r7, #8]
34007cfe:	2b00      	cmp	r3, #0
34007d00:	d002      	beq.n	34007d08 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
34007d02:	68bb      	ldr	r3, [r7, #8]
34007d04:	4a0d      	ldr	r2, [pc, #52]	@ (34007d3c <DMA_List_GetCLLRNodeInfo+0x58>)
34007d06:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
34007d08:	687b      	ldr	r3, [r7, #4]
34007d0a:	2b00      	cmp	r3, #0
34007d0c:	d00f      	beq.n	34007d2e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
34007d0e:	687b      	ldr	r3, [r7, #4]
34007d10:	2207      	movs	r2, #7
34007d12:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
34007d14:	e00b      	b.n	34007d2e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
34007d16:	68bb      	ldr	r3, [r7, #8]
34007d18:	2b00      	cmp	r3, #0
34007d1a:	d002      	beq.n	34007d22 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
34007d1c:	68bb      	ldr	r3, [r7, #8]
34007d1e:	4a08      	ldr	r2, [pc, #32]	@ (34007d40 <DMA_List_GetCLLRNodeInfo+0x5c>)
34007d20:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
34007d22:	687b      	ldr	r3, [r7, #4]
34007d24:	2b00      	cmp	r3, #0
34007d26:	d002      	beq.n	34007d2e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
34007d28:	687b      	ldr	r3, [r7, #4]
34007d2a:	2205      	movs	r2, #5
34007d2c:	601a      	str	r2, [r3, #0]
}
34007d2e:	bf00      	nop
34007d30:	3714      	adds	r7, #20
34007d32:	46bd      	mov	sp, r7
34007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d38:	4770      	bx	lr
34007d3a:	bf00      	nop
34007d3c:	fe010000 	.word	0xfe010000
34007d40:	f8010000 	.word	0xf8010000

34007d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34007d44:	b580      	push	{r7, lr}
34007d46:	b086      	sub	sp, #24
34007d48:	af00      	add	r7, sp, #0
34007d4a:	6078      	str	r0, [r7, #4]
34007d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34007d4e:	2300      	movs	r3, #0
34007d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34007d52:	687b      	ldr	r3, [r7, #4]
34007d54:	4a5b      	ldr	r2, [pc, #364]	@ (34007ec4 <HAL_GPIO_Init+0x180>)
34007d56:	4293      	cmp	r3, r2
34007d58:	d05f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d5a:	687b      	ldr	r3, [r7, #4]
34007d5c:	4a5a      	ldr	r2, [pc, #360]	@ (34007ec8 <HAL_GPIO_Init+0x184>)
34007d5e:	4293      	cmp	r3, r2
34007d60:	d05b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d62:	687b      	ldr	r3, [r7, #4]
34007d64:	4a59      	ldr	r2, [pc, #356]	@ (34007ecc <HAL_GPIO_Init+0x188>)
34007d66:	4293      	cmp	r3, r2
34007d68:	d057      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d6a:	687b      	ldr	r3, [r7, #4]
34007d6c:	4a58      	ldr	r2, [pc, #352]	@ (34007ed0 <HAL_GPIO_Init+0x18c>)
34007d6e:	4293      	cmp	r3, r2
34007d70:	d053      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d72:	687b      	ldr	r3, [r7, #4]
34007d74:	4a57      	ldr	r2, [pc, #348]	@ (34007ed4 <HAL_GPIO_Init+0x190>)
34007d76:	4293      	cmp	r3, r2
34007d78:	d04f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d7a:	687b      	ldr	r3, [r7, #4]
34007d7c:	4a56      	ldr	r2, [pc, #344]	@ (34007ed8 <HAL_GPIO_Init+0x194>)
34007d7e:	4293      	cmp	r3, r2
34007d80:	d04b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d82:	687b      	ldr	r3, [r7, #4]
34007d84:	4a55      	ldr	r2, [pc, #340]	@ (34007edc <HAL_GPIO_Init+0x198>)
34007d86:	4293      	cmp	r3, r2
34007d88:	d047      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d8a:	687b      	ldr	r3, [r7, #4]
34007d8c:	4a54      	ldr	r2, [pc, #336]	@ (34007ee0 <HAL_GPIO_Init+0x19c>)
34007d8e:	4293      	cmp	r3, r2
34007d90:	d043      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d92:	687b      	ldr	r3, [r7, #4]
34007d94:	4a53      	ldr	r2, [pc, #332]	@ (34007ee4 <HAL_GPIO_Init+0x1a0>)
34007d96:	4293      	cmp	r3, r2
34007d98:	d03f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007d9a:	687b      	ldr	r3, [r7, #4]
34007d9c:	4a52      	ldr	r2, [pc, #328]	@ (34007ee8 <HAL_GPIO_Init+0x1a4>)
34007d9e:	4293      	cmp	r3, r2
34007da0:	d03b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007da2:	687b      	ldr	r3, [r7, #4]
34007da4:	4a51      	ldr	r2, [pc, #324]	@ (34007eec <HAL_GPIO_Init+0x1a8>)
34007da6:	4293      	cmp	r3, r2
34007da8:	d037      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007daa:	687b      	ldr	r3, [r7, #4]
34007dac:	4a50      	ldr	r2, [pc, #320]	@ (34007ef0 <HAL_GPIO_Init+0x1ac>)
34007dae:	4293      	cmp	r3, r2
34007db0:	d033      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007db2:	687b      	ldr	r3, [r7, #4]
34007db4:	4a4f      	ldr	r2, [pc, #316]	@ (34007ef4 <HAL_GPIO_Init+0x1b0>)
34007db6:	4293      	cmp	r3, r2
34007db8:	d02f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dba:	687b      	ldr	r3, [r7, #4]
34007dbc:	4a4e      	ldr	r2, [pc, #312]	@ (34007ef8 <HAL_GPIO_Init+0x1b4>)
34007dbe:	4293      	cmp	r3, r2
34007dc0:	d02b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dc2:	687b      	ldr	r3, [r7, #4]
34007dc4:	4a4d      	ldr	r2, [pc, #308]	@ (34007efc <HAL_GPIO_Init+0x1b8>)
34007dc6:	4293      	cmp	r3, r2
34007dc8:	d027      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dca:	687b      	ldr	r3, [r7, #4]
34007dcc:	4a4c      	ldr	r2, [pc, #304]	@ (34007f00 <HAL_GPIO_Init+0x1bc>)
34007dce:	4293      	cmp	r3, r2
34007dd0:	d023      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dd2:	687b      	ldr	r3, [r7, #4]
34007dd4:	4a4b      	ldr	r2, [pc, #300]	@ (34007f04 <HAL_GPIO_Init+0x1c0>)
34007dd6:	4293      	cmp	r3, r2
34007dd8:	d01f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dda:	687b      	ldr	r3, [r7, #4]
34007ddc:	4a4a      	ldr	r2, [pc, #296]	@ (34007f08 <HAL_GPIO_Init+0x1c4>)
34007dde:	4293      	cmp	r3, r2
34007de0:	d01b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007de2:	687b      	ldr	r3, [r7, #4]
34007de4:	4a49      	ldr	r2, [pc, #292]	@ (34007f0c <HAL_GPIO_Init+0x1c8>)
34007de6:	4293      	cmp	r3, r2
34007de8:	d017      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dea:	687b      	ldr	r3, [r7, #4]
34007dec:	4a48      	ldr	r2, [pc, #288]	@ (34007f10 <HAL_GPIO_Init+0x1cc>)
34007dee:	4293      	cmp	r3, r2
34007df0:	d013      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007df2:	687b      	ldr	r3, [r7, #4]
34007df4:	4a47      	ldr	r2, [pc, #284]	@ (34007f14 <HAL_GPIO_Init+0x1d0>)
34007df6:	4293      	cmp	r3, r2
34007df8:	d00f      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007dfa:	687b      	ldr	r3, [r7, #4]
34007dfc:	4a46      	ldr	r2, [pc, #280]	@ (34007f18 <HAL_GPIO_Init+0x1d4>)
34007dfe:	4293      	cmp	r3, r2
34007e00:	d00b      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007e02:	687b      	ldr	r3, [r7, #4]
34007e04:	4a45      	ldr	r2, [pc, #276]	@ (34007f1c <HAL_GPIO_Init+0x1d8>)
34007e06:	4293      	cmp	r3, r2
34007e08:	d007      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007e0a:	687b      	ldr	r3, [r7, #4]
34007e0c:	4a44      	ldr	r2, [pc, #272]	@ (34007f20 <HAL_GPIO_Init+0x1dc>)
34007e0e:	4293      	cmp	r3, r2
34007e10:	d003      	beq.n	34007e1a <HAL_GPIO_Init+0xd6>
34007e12:	21ad      	movs	r1, #173	@ 0xad
34007e14:	4843      	ldr	r0, [pc, #268]	@ (34007f24 <HAL_GPIO_Init+0x1e0>)
34007e16:	f7f9 fbdb 	bl	340015d0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34007e1a:	683b      	ldr	r3, [r7, #0]
34007e1c:	681b      	ldr	r3, [r3, #0]
34007e1e:	b29b      	uxth	r3, r3
34007e20:	2b00      	cmp	r3, #0
34007e22:	d004      	beq.n	34007e2e <HAL_GPIO_Init+0xea>
34007e24:	683b      	ldr	r3, [r7, #0]
34007e26:	681b      	ldr	r3, [r3, #0]
34007e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007e2c:	d303      	bcc.n	34007e36 <HAL_GPIO_Init+0xf2>
34007e2e:	21ae      	movs	r1, #174	@ 0xae
34007e30:	483c      	ldr	r0, [pc, #240]	@ (34007f24 <HAL_GPIO_Init+0x1e0>)
34007e32:	f7f9 fbcd 	bl	340015d0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34007e36:	683b      	ldr	r3, [r7, #0]
34007e38:	685b      	ldr	r3, [r3, #4]
34007e3a:	2b00      	cmp	r3, #0
34007e3c:	f000 82bb 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e40:	683b      	ldr	r3, [r7, #0]
34007e42:	685b      	ldr	r3, [r3, #4]
34007e44:	2b01      	cmp	r3, #1
34007e46:	f000 82b6 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e4a:	683b      	ldr	r3, [r7, #0]
34007e4c:	685b      	ldr	r3, [r3, #4]
34007e4e:	2b11      	cmp	r3, #17
34007e50:	f000 82b1 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e54:	683b      	ldr	r3, [r7, #0]
34007e56:	685b      	ldr	r3, [r3, #4]
34007e58:	2b02      	cmp	r3, #2
34007e5a:	f000 82ac 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e5e:	683b      	ldr	r3, [r7, #0]
34007e60:	685b      	ldr	r3, [r3, #4]
34007e62:	2b12      	cmp	r3, #18
34007e64:	f000 82a7 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e68:	683b      	ldr	r3, [r7, #0]
34007e6a:	685b      	ldr	r3, [r3, #4]
34007e6c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34007e70:	f000 82a1 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e74:	683b      	ldr	r3, [r7, #0]
34007e76:	685b      	ldr	r3, [r3, #4]
34007e78:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34007e7c:	f000 829b 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e80:	683b      	ldr	r3, [r7, #0]
34007e82:	685b      	ldr	r3, [r3, #4]
34007e84:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34007e88:	f000 8295 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e8c:	683b      	ldr	r3, [r7, #0]
34007e8e:	685b      	ldr	r3, [r3, #4]
34007e90:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34007e94:	f000 828f 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007e98:	683b      	ldr	r3, [r7, #0]
34007e9a:	685b      	ldr	r3, [r3, #4]
34007e9c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34007ea0:	f000 8289 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007ea4:	683b      	ldr	r3, [r7, #0]
34007ea6:	685b      	ldr	r3, [r3, #4]
34007ea8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
34007eac:	f000 8283 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007eb0:	683b      	ldr	r3, [r7, #0]
34007eb2:	685b      	ldr	r3, [r3, #4]
34007eb4:	2b03      	cmp	r3, #3
34007eb6:	f000 827e 	beq.w	340083b6 <HAL_GPIO_Init+0x672>
34007eba:	21af      	movs	r1, #175	@ 0xaf
34007ebc:	4819      	ldr	r0, [pc, #100]	@ (34007f24 <HAL_GPIO_Init+0x1e0>)
34007ebe:	f7f9 fb87 	bl	340015d0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34007ec2:	e278      	b.n	340083b6 <HAL_GPIO_Init+0x672>
34007ec4:	56020000 	.word	0x56020000
34007ec8:	46020000 	.word	0x46020000
34007ecc:	56020400 	.word	0x56020400
34007ed0:	46020400 	.word	0x46020400
34007ed4:	56020800 	.word	0x56020800
34007ed8:	46020800 	.word	0x46020800
34007edc:	56020c00 	.word	0x56020c00
34007ee0:	46020c00 	.word	0x46020c00
34007ee4:	56021000 	.word	0x56021000
34007ee8:	46021000 	.word	0x46021000
34007eec:	56021400 	.word	0x56021400
34007ef0:	46021400 	.word	0x46021400
34007ef4:	56021800 	.word	0x56021800
34007ef8:	46021800 	.word	0x46021800
34007efc:	56021c00 	.word	0x56021c00
34007f00:	46021c00 	.word	0x46021c00
34007f04:	56023400 	.word	0x56023400
34007f08:	46023400 	.word	0x46023400
34007f0c:	56023800 	.word	0x56023800
34007f10:	46023800 	.word	0x46023800
34007f14:	56023c00 	.word	0x56023c00
34007f18:	46023c00 	.word	0x46023c00
34007f1c:	56024000 	.word	0x56024000
34007f20:	46024000 	.word	0x46024000
34007f24:	3401d44c 	.word	0x3401d44c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34007f28:	683b      	ldr	r3, [r7, #0]
34007f2a:	681a      	ldr	r2, [r3, #0]
34007f2c:	2101      	movs	r1, #1
34007f2e:	697b      	ldr	r3, [r7, #20]
34007f30:	fa01 f303 	lsl.w	r3, r1, r3
34007f34:	4013      	ands	r3, r2
34007f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34007f38:	68fb      	ldr	r3, [r7, #12]
34007f3a:	2b00      	cmp	r3, #0
34007f3c:	f000 8238 	beq.w	340083b0 <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34007f40:	683b      	ldr	r3, [r7, #0]
34007f42:	685b      	ldr	r3, [r3, #4]
34007f44:	f003 0303 	and.w	r3, r3, #3
34007f48:	2b01      	cmp	r3, #1
34007f4a:	d005      	beq.n	34007f58 <HAL_GPIO_Init+0x214>
34007f4c:	683b      	ldr	r3, [r7, #0]
34007f4e:	685b      	ldr	r3, [r3, #4]
34007f50:	f003 0303 	and.w	r3, r3, #3
34007f54:	2b02      	cmp	r3, #2
34007f56:	d144      	bne.n	34007fe2 <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34007f58:	683b      	ldr	r3, [r7, #0]
34007f5a:	68db      	ldr	r3, [r3, #12]
34007f5c:	2b00      	cmp	r3, #0
34007f5e:	d00f      	beq.n	34007f80 <HAL_GPIO_Init+0x23c>
34007f60:	683b      	ldr	r3, [r7, #0]
34007f62:	68db      	ldr	r3, [r3, #12]
34007f64:	2b01      	cmp	r3, #1
34007f66:	d00b      	beq.n	34007f80 <HAL_GPIO_Init+0x23c>
34007f68:	683b      	ldr	r3, [r7, #0]
34007f6a:	68db      	ldr	r3, [r3, #12]
34007f6c:	2b02      	cmp	r3, #2
34007f6e:	d007      	beq.n	34007f80 <HAL_GPIO_Init+0x23c>
34007f70:	683b      	ldr	r3, [r7, #0]
34007f72:	68db      	ldr	r3, [r3, #12]
34007f74:	2b03      	cmp	r3, #3
34007f76:	d003      	beq.n	34007f80 <HAL_GPIO_Init+0x23c>
34007f78:	21be      	movs	r1, #190	@ 0xbe
34007f7a:	4896      	ldr	r0, [pc, #600]	@ (340081d4 <HAL_GPIO_Init+0x490>)
34007f7c:	f7f9 fb28 	bl	340015d0 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34007f80:	687b      	ldr	r3, [r7, #4]
34007f82:	689b      	ldr	r3, [r3, #8]
34007f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34007f86:	697b      	ldr	r3, [r7, #20]
34007f88:	005b      	lsls	r3, r3, #1
34007f8a:	2203      	movs	r2, #3
34007f8c:	fa02 f303 	lsl.w	r3, r2, r3
34007f90:	43db      	mvns	r3, r3
34007f92:	693a      	ldr	r2, [r7, #16]
34007f94:	4013      	ands	r3, r2
34007f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34007f98:	683b      	ldr	r3, [r7, #0]
34007f9a:	68da      	ldr	r2, [r3, #12]
34007f9c:	697b      	ldr	r3, [r7, #20]
34007f9e:	005b      	lsls	r3, r3, #1
34007fa0:	fa02 f303 	lsl.w	r3, r2, r3
34007fa4:	693a      	ldr	r2, [r7, #16]
34007fa6:	4313      	orrs	r3, r2
34007fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34007faa:	687b      	ldr	r3, [r7, #4]
34007fac:	693a      	ldr	r2, [r7, #16]
34007fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34007fb0:	687b      	ldr	r3, [r7, #4]
34007fb2:	685b      	ldr	r3, [r3, #4]
34007fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34007fb6:	2201      	movs	r2, #1
34007fb8:	697b      	ldr	r3, [r7, #20]
34007fba:	fa02 f303 	lsl.w	r3, r2, r3
34007fbe:	43db      	mvns	r3, r3
34007fc0:	693a      	ldr	r2, [r7, #16]
34007fc2:	4013      	ands	r3, r2
34007fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34007fc6:	683b      	ldr	r3, [r7, #0]
34007fc8:	685b      	ldr	r3, [r3, #4]
34007fca:	091b      	lsrs	r3, r3, #4
34007fcc:	f003 0201 	and.w	r2, r3, #1
34007fd0:	697b      	ldr	r3, [r7, #20]
34007fd2:	fa02 f303 	lsl.w	r3, r2, r3
34007fd6:	693a      	ldr	r2, [r7, #16]
34007fd8:	4313      	orrs	r3, r2
34007fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34007fdc:	687b      	ldr	r3, [r7, #4]
34007fde:	693a      	ldr	r2, [r7, #16]
34007fe0:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34007fe2:	683b      	ldr	r3, [r7, #0]
34007fe4:	685b      	ldr	r3, [r3, #4]
34007fe6:	f003 0303 	and.w	r3, r3, #3
34007fea:	2b03      	cmp	r3, #3
34007fec:	d109      	bne.n	34008002 <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34007fee:	683b      	ldr	r3, [r7, #0]
34007ff0:	685b      	ldr	r3, [r3, #4]
34007ff2:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34007ff6:	2b03      	cmp	r3, #3
34007ff8:	d12b      	bne.n	34008052 <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34007ffa:	683b      	ldr	r3, [r7, #0]
34007ffc:	689b      	ldr	r3, [r3, #8]
34007ffe:	2b01      	cmp	r3, #1
34008000:	d027      	beq.n	34008052 <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34008002:	683b      	ldr	r3, [r7, #0]
34008004:	689b      	ldr	r3, [r3, #8]
34008006:	2b00      	cmp	r3, #0
34008008:	d00b      	beq.n	34008022 <HAL_GPIO_Init+0x2de>
3400800a:	683b      	ldr	r3, [r7, #0]
3400800c:	689b      	ldr	r3, [r3, #8]
3400800e:	2b01      	cmp	r3, #1
34008010:	d007      	beq.n	34008022 <HAL_GPIO_Init+0x2de>
34008012:	683b      	ldr	r3, [r7, #0]
34008014:	689b      	ldr	r3, [r3, #8]
34008016:	2b02      	cmp	r3, #2
34008018:	d003      	beq.n	34008022 <HAL_GPIO_Init+0x2de>
3400801a:	21d1      	movs	r1, #209	@ 0xd1
3400801c:	486d      	ldr	r0, [pc, #436]	@ (340081d4 <HAL_GPIO_Init+0x490>)
3400801e:	f7f9 fad7 	bl	340015d0 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34008022:	687b      	ldr	r3, [r7, #4]
34008024:	68db      	ldr	r3, [r3, #12]
34008026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34008028:	697b      	ldr	r3, [r7, #20]
3400802a:	005b      	lsls	r3, r3, #1
3400802c:	2203      	movs	r2, #3
3400802e:	fa02 f303 	lsl.w	r3, r2, r3
34008032:	43db      	mvns	r3, r3
34008034:	693a      	ldr	r2, [r7, #16]
34008036:	4013      	ands	r3, r2
34008038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
3400803a:	683b      	ldr	r3, [r7, #0]
3400803c:	689a      	ldr	r2, [r3, #8]
3400803e:	697b      	ldr	r3, [r7, #20]
34008040:	005b      	lsls	r3, r3, #1
34008042:	fa02 f303 	lsl.w	r3, r2, r3
34008046:	693a      	ldr	r2, [r7, #16]
34008048:	4313      	orrs	r3, r2
3400804a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
3400804c:	687b      	ldr	r3, [r7, #4]
3400804e:	693a      	ldr	r2, [r7, #16]
34008050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34008052:	683b      	ldr	r3, [r7, #0]
34008054:	685b      	ldr	r3, [r3, #4]
34008056:	f003 0303 	and.w	r3, r3, #3
3400805a:	2b02      	cmp	r3, #2
3400805c:	f040 8090 	bne.w	34008180 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34008060:	687b      	ldr	r3, [r7, #4]
34008062:	4a5d      	ldr	r2, [pc, #372]	@ (340081d8 <HAL_GPIO_Init+0x494>)
34008064:	4293      	cmp	r3, r2
34008066:	d05f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008068:	687b      	ldr	r3, [r7, #4]
3400806a:	4a5c      	ldr	r2, [pc, #368]	@ (340081dc <HAL_GPIO_Init+0x498>)
3400806c:	4293      	cmp	r3, r2
3400806e:	d05b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008070:	687b      	ldr	r3, [r7, #4]
34008072:	4a5b      	ldr	r2, [pc, #364]	@ (340081e0 <HAL_GPIO_Init+0x49c>)
34008074:	4293      	cmp	r3, r2
34008076:	d057      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008078:	687b      	ldr	r3, [r7, #4]
3400807a:	4a5a      	ldr	r2, [pc, #360]	@ (340081e4 <HAL_GPIO_Init+0x4a0>)
3400807c:	4293      	cmp	r3, r2
3400807e:	d053      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008080:	687b      	ldr	r3, [r7, #4]
34008082:	4a59      	ldr	r2, [pc, #356]	@ (340081e8 <HAL_GPIO_Init+0x4a4>)
34008084:	4293      	cmp	r3, r2
34008086:	d04f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008088:	687b      	ldr	r3, [r7, #4]
3400808a:	4a58      	ldr	r2, [pc, #352]	@ (340081ec <HAL_GPIO_Init+0x4a8>)
3400808c:	4293      	cmp	r3, r2
3400808e:	d04b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008090:	687b      	ldr	r3, [r7, #4]
34008092:	4a57      	ldr	r2, [pc, #348]	@ (340081f0 <HAL_GPIO_Init+0x4ac>)
34008094:	4293      	cmp	r3, r2
34008096:	d047      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008098:	687b      	ldr	r3, [r7, #4]
3400809a:	4a56      	ldr	r2, [pc, #344]	@ (340081f4 <HAL_GPIO_Init+0x4b0>)
3400809c:	4293      	cmp	r3, r2
3400809e:	d043      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080a0:	687b      	ldr	r3, [r7, #4]
340080a2:	4a55      	ldr	r2, [pc, #340]	@ (340081f8 <HAL_GPIO_Init+0x4b4>)
340080a4:	4293      	cmp	r3, r2
340080a6:	d03f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080a8:	687b      	ldr	r3, [r7, #4]
340080aa:	4a54      	ldr	r2, [pc, #336]	@ (340081fc <HAL_GPIO_Init+0x4b8>)
340080ac:	4293      	cmp	r3, r2
340080ae:	d03b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080b0:	687b      	ldr	r3, [r7, #4]
340080b2:	4a53      	ldr	r2, [pc, #332]	@ (34008200 <HAL_GPIO_Init+0x4bc>)
340080b4:	4293      	cmp	r3, r2
340080b6:	d037      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080b8:	687b      	ldr	r3, [r7, #4]
340080ba:	4a52      	ldr	r2, [pc, #328]	@ (34008204 <HAL_GPIO_Init+0x4c0>)
340080bc:	4293      	cmp	r3, r2
340080be:	d033      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080c0:	687b      	ldr	r3, [r7, #4]
340080c2:	4a51      	ldr	r2, [pc, #324]	@ (34008208 <HAL_GPIO_Init+0x4c4>)
340080c4:	4293      	cmp	r3, r2
340080c6:	d02f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080c8:	687b      	ldr	r3, [r7, #4]
340080ca:	4a50      	ldr	r2, [pc, #320]	@ (3400820c <HAL_GPIO_Init+0x4c8>)
340080cc:	4293      	cmp	r3, r2
340080ce:	d02b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080d0:	687b      	ldr	r3, [r7, #4]
340080d2:	4a4f      	ldr	r2, [pc, #316]	@ (34008210 <HAL_GPIO_Init+0x4cc>)
340080d4:	4293      	cmp	r3, r2
340080d6:	d027      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080d8:	687b      	ldr	r3, [r7, #4]
340080da:	4a4e      	ldr	r2, [pc, #312]	@ (34008214 <HAL_GPIO_Init+0x4d0>)
340080dc:	4293      	cmp	r3, r2
340080de:	d023      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080e0:	687b      	ldr	r3, [r7, #4]
340080e2:	4a4d      	ldr	r2, [pc, #308]	@ (34008218 <HAL_GPIO_Init+0x4d4>)
340080e4:	4293      	cmp	r3, r2
340080e6:	d01f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080e8:	687b      	ldr	r3, [r7, #4]
340080ea:	4a4c      	ldr	r2, [pc, #304]	@ (3400821c <HAL_GPIO_Init+0x4d8>)
340080ec:	4293      	cmp	r3, r2
340080ee:	d01b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080f0:	687b      	ldr	r3, [r7, #4]
340080f2:	4a4b      	ldr	r2, [pc, #300]	@ (34008220 <HAL_GPIO_Init+0x4dc>)
340080f4:	4293      	cmp	r3, r2
340080f6:	d017      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
340080f8:	687b      	ldr	r3, [r7, #4]
340080fa:	4a4a      	ldr	r2, [pc, #296]	@ (34008224 <HAL_GPIO_Init+0x4e0>)
340080fc:	4293      	cmp	r3, r2
340080fe:	d013      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008100:	687b      	ldr	r3, [r7, #4]
34008102:	4a49      	ldr	r2, [pc, #292]	@ (34008228 <HAL_GPIO_Init+0x4e4>)
34008104:	4293      	cmp	r3, r2
34008106:	d00f      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008108:	687b      	ldr	r3, [r7, #4]
3400810a:	4a48      	ldr	r2, [pc, #288]	@ (3400822c <HAL_GPIO_Init+0x4e8>)
3400810c:	4293      	cmp	r3, r2
3400810e:	d00b      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008110:	687b      	ldr	r3, [r7, #4]
34008112:	4a47      	ldr	r2, [pc, #284]	@ (34008230 <HAL_GPIO_Init+0x4ec>)
34008114:	4293      	cmp	r3, r2
34008116:	d007      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008118:	687b      	ldr	r3, [r7, #4]
3400811a:	4a46      	ldr	r2, [pc, #280]	@ (34008234 <HAL_GPIO_Init+0x4f0>)
3400811c:	4293      	cmp	r3, r2
3400811e:	d003      	beq.n	34008128 <HAL_GPIO_Init+0x3e4>
34008120:	21de      	movs	r1, #222	@ 0xde
34008122:	482c      	ldr	r0, [pc, #176]	@ (340081d4 <HAL_GPIO_Init+0x490>)
34008124:	f7f9 fa54 	bl	340015d0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34008128:	683b      	ldr	r3, [r7, #0]
3400812a:	691b      	ldr	r3, [r3, #16]
3400812c:	2b0f      	cmp	r3, #15
3400812e:	d903      	bls.n	34008138 <HAL_GPIO_Init+0x3f4>
34008130:	21df      	movs	r1, #223	@ 0xdf
34008132:	4828      	ldr	r0, [pc, #160]	@ (340081d4 <HAL_GPIO_Init+0x490>)
34008134:	f7f9 fa4c 	bl	340015d0 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34008138:	697b      	ldr	r3, [r7, #20]
3400813a:	08da      	lsrs	r2, r3, #3
3400813c:	687b      	ldr	r3, [r7, #4]
3400813e:	3208      	adds	r2, #8
34008140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34008144:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34008146:	697b      	ldr	r3, [r7, #20]
34008148:	f003 0307 	and.w	r3, r3, #7
3400814c:	009b      	lsls	r3, r3, #2
3400814e:	220f      	movs	r2, #15
34008150:	fa02 f303 	lsl.w	r3, r2, r3
34008154:	43db      	mvns	r3, r3
34008156:	693a      	ldr	r2, [r7, #16]
34008158:	4013      	ands	r3, r2
3400815a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400815c:	683b      	ldr	r3, [r7, #0]
3400815e:	691a      	ldr	r2, [r3, #16]
34008160:	697b      	ldr	r3, [r7, #20]
34008162:	f003 0307 	and.w	r3, r3, #7
34008166:	009b      	lsls	r3, r3, #2
34008168:	fa02 f303 	lsl.w	r3, r2, r3
3400816c:	693a      	ldr	r2, [r7, #16]
3400816e:	4313      	orrs	r3, r2
34008170:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34008172:	697b      	ldr	r3, [r7, #20]
34008174:	08da      	lsrs	r2, r3, #3
34008176:	687b      	ldr	r3, [r7, #4]
34008178:	3208      	adds	r2, #8
3400817a:	6939      	ldr	r1, [r7, #16]
3400817c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34008180:	687b      	ldr	r3, [r7, #4]
34008182:	681b      	ldr	r3, [r3, #0]
34008184:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34008186:	697b      	ldr	r3, [r7, #20]
34008188:	005b      	lsls	r3, r3, #1
3400818a:	2203      	movs	r2, #3
3400818c:	fa02 f303 	lsl.w	r3, r2, r3
34008190:	43db      	mvns	r3, r3
34008192:	693a      	ldr	r2, [r7, #16]
34008194:	4013      	ands	r3, r2
34008196:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34008198:	683b      	ldr	r3, [r7, #0]
3400819a:	685b      	ldr	r3, [r3, #4]
3400819c:	f003 0203 	and.w	r2, r3, #3
340081a0:	697b      	ldr	r3, [r7, #20]
340081a2:	005b      	lsls	r3, r3, #1
340081a4:	fa02 f303 	lsl.w	r3, r2, r3
340081a8:	693a      	ldr	r2, [r7, #16]
340081aa:	4313      	orrs	r3, r2
340081ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
340081ae:	687b      	ldr	r3, [r7, #4]
340081b0:	693a      	ldr	r2, [r7, #16]
340081b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340081b4:	683b      	ldr	r3, [r7, #0]
340081b6:	685b      	ldr	r3, [r3, #4]
340081b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
340081bc:	2b00      	cmp	r3, #0
340081be:	f000 80f7 	beq.w	340083b0 <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
340081c2:	4a1d      	ldr	r2, [pc, #116]	@ (34008238 <HAL_GPIO_Init+0x4f4>)
340081c4:	697b      	ldr	r3, [r7, #20]
340081c6:	089b      	lsrs	r3, r3, #2
340081c8:	3318      	adds	r3, #24
340081ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
340081ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340081d0:	697b      	ldr	r3, [r7, #20]
340081d2:	e033      	b.n	3400823c <HAL_GPIO_Init+0x4f8>
340081d4:	3401d44c 	.word	0x3401d44c
340081d8:	56020000 	.word	0x56020000
340081dc:	46020000 	.word	0x46020000
340081e0:	56020400 	.word	0x56020400
340081e4:	46020400 	.word	0x46020400
340081e8:	56020800 	.word	0x56020800
340081ec:	46020800 	.word	0x46020800
340081f0:	56020c00 	.word	0x56020c00
340081f4:	46020c00 	.word	0x46020c00
340081f8:	56021000 	.word	0x56021000
340081fc:	46021000 	.word	0x46021000
34008200:	56021400 	.word	0x56021400
34008204:	46021400 	.word	0x46021400
34008208:	56021800 	.word	0x56021800
3400820c:	46021800 	.word	0x46021800
34008210:	56021c00 	.word	0x56021c00
34008214:	46021c00 	.word	0x46021c00
34008218:	56023400 	.word	0x56023400
3400821c:	46023400 	.word	0x46023400
34008220:	56023800 	.word	0x56023800
34008224:	46023800 	.word	0x46023800
34008228:	56023c00 	.word	0x56023c00
3400822c:	46023c00 	.word	0x46023c00
34008230:	56024000 	.word	0x56024000
34008234:	46024000 	.word	0x46024000
34008238:	56025000 	.word	0x56025000
3400823c:	f003 0303 	and.w	r3, r3, #3
34008240:	00db      	lsls	r3, r3, #3
34008242:	220f      	movs	r2, #15
34008244:	fa02 f303 	lsl.w	r3, r2, r3
34008248:	43db      	mvns	r3, r3
3400824a:	693a      	ldr	r2, [r7, #16]
3400824c:	4013      	ands	r3, r2
3400824e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34008250:	687b      	ldr	r3, [r7, #4]
34008252:	4a5f      	ldr	r2, [pc, #380]	@ (340083d0 <HAL_GPIO_Init+0x68c>)
34008254:	4293      	cmp	r3, r2
34008256:	d043      	beq.n	340082e0 <HAL_GPIO_Init+0x59c>
34008258:	687b      	ldr	r3, [r7, #4]
3400825a:	4a5e      	ldr	r2, [pc, #376]	@ (340083d4 <HAL_GPIO_Init+0x690>)
3400825c:	4293      	cmp	r3, r2
3400825e:	d03d      	beq.n	340082dc <HAL_GPIO_Init+0x598>
34008260:	687b      	ldr	r3, [r7, #4]
34008262:	4a5d      	ldr	r2, [pc, #372]	@ (340083d8 <HAL_GPIO_Init+0x694>)
34008264:	4293      	cmp	r3, r2
34008266:	d037      	beq.n	340082d8 <HAL_GPIO_Init+0x594>
34008268:	687b      	ldr	r3, [r7, #4]
3400826a:	4a5c      	ldr	r2, [pc, #368]	@ (340083dc <HAL_GPIO_Init+0x698>)
3400826c:	4293      	cmp	r3, r2
3400826e:	d031      	beq.n	340082d4 <HAL_GPIO_Init+0x590>
34008270:	687b      	ldr	r3, [r7, #4]
34008272:	4a5b      	ldr	r2, [pc, #364]	@ (340083e0 <HAL_GPIO_Init+0x69c>)
34008274:	4293      	cmp	r3, r2
34008276:	d02b      	beq.n	340082d0 <HAL_GPIO_Init+0x58c>
34008278:	687b      	ldr	r3, [r7, #4]
3400827a:	4a5a      	ldr	r2, [pc, #360]	@ (340083e4 <HAL_GPIO_Init+0x6a0>)
3400827c:	4293      	cmp	r3, r2
3400827e:	d025      	beq.n	340082cc <HAL_GPIO_Init+0x588>
34008280:	687b      	ldr	r3, [r7, #4]
34008282:	4a59      	ldr	r2, [pc, #356]	@ (340083e8 <HAL_GPIO_Init+0x6a4>)
34008284:	4293      	cmp	r3, r2
34008286:	d01f      	beq.n	340082c8 <HAL_GPIO_Init+0x584>
34008288:	687b      	ldr	r3, [r7, #4]
3400828a:	4a58      	ldr	r2, [pc, #352]	@ (340083ec <HAL_GPIO_Init+0x6a8>)
3400828c:	4293      	cmp	r3, r2
3400828e:	d019      	beq.n	340082c4 <HAL_GPIO_Init+0x580>
34008290:	687b      	ldr	r3, [r7, #4]
34008292:	4a57      	ldr	r2, [pc, #348]	@ (340083f0 <HAL_GPIO_Init+0x6ac>)
34008294:	4293      	cmp	r3, r2
34008296:	d013      	beq.n	340082c0 <HAL_GPIO_Init+0x57c>
34008298:	687b      	ldr	r3, [r7, #4]
3400829a:	4a56      	ldr	r2, [pc, #344]	@ (340083f4 <HAL_GPIO_Init+0x6b0>)
3400829c:	4293      	cmp	r3, r2
3400829e:	d00d      	beq.n	340082bc <HAL_GPIO_Init+0x578>
340082a0:	687b      	ldr	r3, [r7, #4]
340082a2:	4a55      	ldr	r2, [pc, #340]	@ (340083f8 <HAL_GPIO_Init+0x6b4>)
340082a4:	4293      	cmp	r3, r2
340082a6:	d007      	beq.n	340082b8 <HAL_GPIO_Init+0x574>
340082a8:	687b      	ldr	r3, [r7, #4]
340082aa:	4a54      	ldr	r2, [pc, #336]	@ (340083fc <HAL_GPIO_Init+0x6b8>)
340082ac:	4293      	cmp	r3, r2
340082ae:	d101      	bne.n	340082b4 <HAL_GPIO_Init+0x570>
340082b0:	230b      	movs	r3, #11
340082b2:	e016      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082b4:	2310      	movs	r3, #16
340082b6:	e014      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082b8:	230a      	movs	r3, #10
340082ba:	e012      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082bc:	2309      	movs	r3, #9
340082be:	e010      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082c0:	2308      	movs	r3, #8
340082c2:	e00e      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082c4:	2307      	movs	r3, #7
340082c6:	e00c      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082c8:	2306      	movs	r3, #6
340082ca:	e00a      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082cc:	2305      	movs	r3, #5
340082ce:	e008      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082d0:	2304      	movs	r3, #4
340082d2:	e006      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082d4:	2303      	movs	r3, #3
340082d6:	e004      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082d8:	2302      	movs	r3, #2
340082da:	e002      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082dc:	2301      	movs	r3, #1
340082de:	e000      	b.n	340082e2 <HAL_GPIO_Init+0x59e>
340082e0:	2300      	movs	r3, #0
340082e2:	697a      	ldr	r2, [r7, #20]
340082e4:	f002 0203 	and.w	r2, r2, #3
340082e8:	00d2      	lsls	r2, r2, #3
340082ea:	4093      	lsls	r3, r2
340082ec:	693a      	ldr	r2, [r7, #16]
340082ee:	4313      	orrs	r3, r2
340082f0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
340082f2:	4943      	ldr	r1, [pc, #268]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
340082f4:	697b      	ldr	r3, [r7, #20]
340082f6:	089b      	lsrs	r3, r3, #2
340082f8:	3318      	adds	r3, #24
340082fa:	693a      	ldr	r2, [r7, #16]
340082fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34008300:	4b3f      	ldr	r3, [pc, #252]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34008308:	68fb      	ldr	r3, [r7, #12]
3400830a:	43db      	mvns	r3, r3
3400830c:	693a      	ldr	r2, [r7, #16]
3400830e:	4013      	ands	r3, r2
34008310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34008312:	683b      	ldr	r3, [r7, #0]
34008314:	685b      	ldr	r3, [r3, #4]
34008316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400831a:	2b00      	cmp	r3, #0
3400831c:	d003      	beq.n	34008326 <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
3400831e:	693a      	ldr	r2, [r7, #16]
34008320:	68fb      	ldr	r3, [r7, #12]
34008322:	4313      	orrs	r3, r2
34008324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34008326:	4a36      	ldr	r2, [pc, #216]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008328:	693b      	ldr	r3, [r7, #16]
3400832a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
3400832e:	4b34      	ldr	r3, [pc, #208]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34008334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34008336:	68fb      	ldr	r3, [r7, #12]
34008338:	43db      	mvns	r3, r3
3400833a:	693a      	ldr	r2, [r7, #16]
3400833c:	4013      	ands	r3, r2
3400833e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34008340:	683b      	ldr	r3, [r7, #0]
34008342:	685b      	ldr	r3, [r3, #4]
34008344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34008348:	2b00      	cmp	r3, #0
3400834a:	d003      	beq.n	34008354 <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
3400834c:	693a      	ldr	r2, [r7, #16]
3400834e:	68fb      	ldr	r3, [r7, #12]
34008350:	4313      	orrs	r3, r2
34008352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34008354:	4a2a      	ldr	r2, [pc, #168]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008356:	693b      	ldr	r3, [r7, #16]
34008358:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
3400835c:	4b28      	ldr	r3, [pc, #160]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
3400835e:	681b      	ldr	r3, [r3, #0]
34008360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34008362:	68fb      	ldr	r3, [r7, #12]
34008364:	43db      	mvns	r3, r3
34008366:	693a      	ldr	r2, [r7, #16]
34008368:	4013      	ands	r3, r2
3400836a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
3400836c:	683b      	ldr	r3, [r7, #0]
3400836e:	685b      	ldr	r3, [r3, #4]
34008370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34008374:	2b00      	cmp	r3, #0
34008376:	d003      	beq.n	34008380 <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
34008378:	693a      	ldr	r2, [r7, #16]
3400837a:	68fb      	ldr	r3, [r7, #12]
3400837c:	4313      	orrs	r3, r2
3400837e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34008380:	4a1f      	ldr	r2, [pc, #124]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008382:	693b      	ldr	r3, [r7, #16]
34008384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34008386:	4b1e      	ldr	r3, [pc, #120]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
34008388:	685b      	ldr	r3, [r3, #4]
3400838a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3400838c:	68fb      	ldr	r3, [r7, #12]
3400838e:	43db      	mvns	r3, r3
34008390:	693a      	ldr	r2, [r7, #16]
34008392:	4013      	ands	r3, r2
34008394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34008396:	683b      	ldr	r3, [r7, #0]
34008398:	685b      	ldr	r3, [r3, #4]
3400839a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400839e:	2b00      	cmp	r3, #0
340083a0:	d003      	beq.n	340083aa <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
340083a2:	693a      	ldr	r2, [r7, #16]
340083a4:	68fb      	ldr	r3, [r7, #12]
340083a6:	4313      	orrs	r3, r2
340083a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
340083aa:	4a15      	ldr	r2, [pc, #84]	@ (34008400 <HAL_GPIO_Init+0x6bc>)
340083ac:	693b      	ldr	r3, [r7, #16]
340083ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
340083b0:	697b      	ldr	r3, [r7, #20]
340083b2:	3301      	adds	r3, #1
340083b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
340083b6:	683b      	ldr	r3, [r7, #0]
340083b8:	681a      	ldr	r2, [r3, #0]
340083ba:	697b      	ldr	r3, [r7, #20]
340083bc:	fa22 f303 	lsr.w	r3, r2, r3
340083c0:	2b00      	cmp	r3, #0
340083c2:	f47f adb1 	bne.w	34007f28 <HAL_GPIO_Init+0x1e4>
  }
}
340083c6:	bf00      	nop
340083c8:	bf00      	nop
340083ca:	3718      	adds	r7, #24
340083cc:	46bd      	mov	sp, r7
340083ce:	bd80      	pop	{r7, pc}
340083d0:	56020000 	.word	0x56020000
340083d4:	56020400 	.word	0x56020400
340083d8:	56020800 	.word	0x56020800
340083dc:	56020c00 	.word	0x56020c00
340083e0:	56021000 	.word	0x56021000
340083e4:	56021400 	.word	0x56021400
340083e8:	56021800 	.word	0x56021800
340083ec:	56021c00 	.word	0x56021c00
340083f0:	56023400 	.word	0x56023400
340083f4:	56023800 	.word	0x56023800
340083f8:	56023c00 	.word	0x56023c00
340083fc:	56024000 	.word	0x56024000
34008400:	56025000 	.word	0x56025000

34008404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34008404:	b580      	push	{r7, lr}
34008406:	b082      	sub	sp, #8
34008408:	af00      	add	r7, sp, #0
3400840a:	6078      	str	r0, [r7, #4]
3400840c:	460b      	mov	r3, r1
3400840e:	807b      	strh	r3, [r7, #2]
34008410:	4613      	mov	r3, r2
34008412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34008414:	887b      	ldrh	r3, [r7, #2]
34008416:	2b00      	cmp	r3, #0
34008418:	d104      	bne.n	34008424 <HAL_GPIO_WritePin+0x20>
3400841a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400841e:	480e      	ldr	r0, [pc, #56]	@ (34008458 <HAL_GPIO_WritePin+0x54>)
34008420:	f7f9 f8d6 	bl	340015d0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34008424:	787b      	ldrb	r3, [r7, #1]
34008426:	2b00      	cmp	r3, #0
34008428:	d007      	beq.n	3400843a <HAL_GPIO_WritePin+0x36>
3400842a:	787b      	ldrb	r3, [r7, #1]
3400842c:	2b01      	cmp	r3, #1
3400842e:	d004      	beq.n	3400843a <HAL_GPIO_WritePin+0x36>
34008430:	f240 11a1 	movw	r1, #417	@ 0x1a1
34008434:	4808      	ldr	r0, [pc, #32]	@ (34008458 <HAL_GPIO_WritePin+0x54>)
34008436:	f7f9 f8cb 	bl	340015d0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
3400843a:	787b      	ldrb	r3, [r7, #1]
3400843c:	2b00      	cmp	r3, #0
3400843e:	d003      	beq.n	34008448 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34008440:	887a      	ldrh	r2, [r7, #2]
34008442:	687b      	ldr	r3, [r7, #4]
34008444:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34008446:	e002      	b.n	3400844e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34008448:	887a      	ldrh	r2, [r7, #2]
3400844a:	687b      	ldr	r3, [r7, #4]
3400844c:	629a      	str	r2, [r3, #40]	@ 0x28
}
3400844e:	bf00      	nop
34008450:	3708      	adds	r7, #8
34008452:	46bd      	mov	sp, r7
34008454:	bd80      	pop	{r7, pc}
34008456:	bf00      	nop
34008458:	3401d44c 	.word	0x3401d44c

3400845c <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
3400845c:	b580      	push	{r7, lr}
3400845e:	b082      	sub	sp, #8
34008460:	af00      	add	r7, sp, #0
34008462:	6078      	str	r0, [r7, #4]
34008464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34008466:	687b      	ldr	r3, [r7, #4]
34008468:	2b00      	cmp	r3, #0
3400846a:	d010      	beq.n	3400848e <HAL_PWREx_ConfigVddIORange+0x32>
3400846c:	687b      	ldr	r3, [r7, #4]
3400846e:	2b01      	cmp	r3, #1
34008470:	d00d      	beq.n	3400848e <HAL_PWREx_ConfigVddIORange+0x32>
34008472:	687b      	ldr	r3, [r7, #4]
34008474:	2b02      	cmp	r3, #2
34008476:	d00a      	beq.n	3400848e <HAL_PWREx_ConfigVddIORange+0x32>
34008478:	687b      	ldr	r3, [r7, #4]
3400847a:	2b03      	cmp	r3, #3
3400847c:	d007      	beq.n	3400848e <HAL_PWREx_ConfigVddIORange+0x32>
3400847e:	687b      	ldr	r3, [r7, #4]
34008480:	2b04      	cmp	r3, #4
34008482:	d004      	beq.n	3400848e <HAL_PWREx_ConfigVddIORange+0x32>
34008484:	f240 316a 	movw	r1, #874	@ 0x36a
34008488:	482a      	ldr	r0, [pc, #168]	@ (34008534 <HAL_PWREx_ConfigVddIORange+0xd8>)
3400848a:	f7f9 f8a1 	bl	340015d0 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
3400848e:	683b      	ldr	r3, [r7, #0]
34008490:	2b00      	cmp	r3, #0
34008492:	d007      	beq.n	340084a4 <HAL_PWREx_ConfigVddIORange+0x48>
34008494:	683b      	ldr	r3, [r7, #0]
34008496:	2b01      	cmp	r3, #1
34008498:	d004      	beq.n	340084a4 <HAL_PWREx_ConfigVddIORange+0x48>
3400849a:	f240 316b 	movw	r1, #875	@ 0x36b
3400849e:	4825      	ldr	r0, [pc, #148]	@ (34008534 <HAL_PWREx_ConfigVddIORange+0xd8>)
340084a0:	f7f9 f896 	bl	340015d0 <assert_failed>

  switch (VddIOPort)
340084a4:	687b      	ldr	r3, [r7, #4]
340084a6:	2b04      	cmp	r3, #4
340084a8:	d83e      	bhi.n	34008528 <HAL_PWREx_ConfigVddIORange+0xcc>
340084aa:	a201      	add	r2, pc, #4	@ (adr r2, 340084b0 <HAL_PWREx_ConfigVddIORange+0x54>)
340084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340084b0:	340084c5 	.word	0x340084c5
340084b4:	340084d9 	.word	0x340084d9
340084b8:	340084ed 	.word	0x340084ed
340084bc:	34008501 	.word	0x34008501
340084c0:	34008515 	.word	0x34008515
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
340084c4:	4b1c      	ldr	r3, [pc, #112]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340084c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340084cc:	683b      	ldr	r3, [r7, #0]
340084ce:	061b      	lsls	r3, r3, #24
340084d0:	4919      	ldr	r1, [pc, #100]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084d2:	4313      	orrs	r3, r2
340084d4:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340084d6:	e028      	b.n	3400852a <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
340084d8:	4b17      	ldr	r3, [pc, #92]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340084dc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
340084e0:	683b      	ldr	r3, [r7, #0]
340084e2:	065b      	lsls	r3, r3, #25
340084e4:	4914      	ldr	r1, [pc, #80]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084e6:	4313      	orrs	r3, r2
340084e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340084ea:	e01e      	b.n	3400852a <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
340084ec:	4b12      	ldr	r3, [pc, #72]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340084f0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
340084f4:	683b      	ldr	r3, [r7, #0]
340084f6:	069b      	lsls	r3, r3, #26
340084f8:	490f      	ldr	r1, [pc, #60]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
340084fa:	4313      	orrs	r3, r2
340084fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340084fe:	e014      	b.n	3400852a <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34008500:	4b0d      	ldr	r3, [pc, #52]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
34008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34008504:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34008508:	683b      	ldr	r3, [r7, #0]
3400850a:	061b      	lsls	r3, r3, #24
3400850c:	490a      	ldr	r1, [pc, #40]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
3400850e:	4313      	orrs	r3, r2
34008510:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
34008512:	e00a      	b.n	3400852a <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34008514:	4b08      	ldr	r3, [pc, #32]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
34008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34008518:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3400851c:	683b      	ldr	r3, [r7, #0]
3400851e:	061b      	lsls	r3, r3, #24
34008520:	4905      	ldr	r1, [pc, #20]	@ (34008538 <HAL_PWREx_ConfigVddIORange+0xdc>)
34008522:	4313      	orrs	r3, r2
34008524:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
34008526:	e000      	b.n	3400852a <HAL_PWREx_ConfigVddIORange+0xce>

    default:
      break;
34008528:	bf00      	nop
  }
}
3400852a:	bf00      	nop
3400852c:	3708      	adds	r7, #8
3400852e:	46bd      	mov	sp, r7
34008530:	bd80      	pop	{r7, pc}
34008532:	bf00      	nop
34008534:	3401d4f8 	.word	0x3401d4f8
34008538:	56024800 	.word	0x56024800

3400853c <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
3400853c:	b480      	push	{r7}
3400853e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34008540:	4b05      	ldr	r3, [pc, #20]	@ (34008558 <HAL_PWREx_EnableVddIO3+0x1c>)
34008542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34008544:	4a04      	ldr	r2, [pc, #16]	@ (34008558 <HAL_PWREx_EnableVddIO3+0x1c>)
34008546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
3400854a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3400854c:	bf00      	nop
3400854e:	46bd      	mov	sp, r7
34008550:	f85d 7b04 	ldr.w	r7, [sp], #4
34008554:	4770      	bx	lr
34008556:	bf00      	nop
34008558:	56024800 	.word	0x56024800

3400855c <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
3400855c:	b580      	push	{r7, lr}
3400855e:	b082      	sub	sp, #8
34008560:	af00      	add	r7, sp, #0
34008562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34008564:	687b      	ldr	r3, [r7, #4]
34008566:	681b      	ldr	r3, [r3, #0]
34008568:	4a20      	ldr	r2, [pc, #128]	@ (340085ec <HAL_RAMCFG_EnableAXISRAM+0x90>)
3400856a:	4293      	cmp	r3, r2
3400856c:	d031      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400856e:	687b      	ldr	r3, [r7, #4]
34008570:	681b      	ldr	r3, [r3, #0]
34008572:	4a1f      	ldr	r2, [pc, #124]	@ (340085f0 <HAL_RAMCFG_EnableAXISRAM+0x94>)
34008574:	4293      	cmp	r3, r2
34008576:	d02c      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
34008578:	687b      	ldr	r3, [r7, #4]
3400857a:	681b      	ldr	r3, [r3, #0]
3400857c:	4a1d      	ldr	r2, [pc, #116]	@ (340085f4 <HAL_RAMCFG_EnableAXISRAM+0x98>)
3400857e:	4293      	cmp	r3, r2
34008580:	d027      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
34008582:	687b      	ldr	r3, [r7, #4]
34008584:	681b      	ldr	r3, [r3, #0]
34008586:	4a1c      	ldr	r2, [pc, #112]	@ (340085f8 <HAL_RAMCFG_EnableAXISRAM+0x9c>)
34008588:	4293      	cmp	r3, r2
3400858a:	d022      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400858c:	687b      	ldr	r3, [r7, #4]
3400858e:	681b      	ldr	r3, [r3, #0]
34008590:	4a1a      	ldr	r2, [pc, #104]	@ (340085fc <HAL_RAMCFG_EnableAXISRAM+0xa0>)
34008592:	4293      	cmp	r3, r2
34008594:	d01d      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
34008596:	687b      	ldr	r3, [r7, #4]
34008598:	681b      	ldr	r3, [r3, #0]
3400859a:	4a19      	ldr	r2, [pc, #100]	@ (34008600 <HAL_RAMCFG_EnableAXISRAM+0xa4>)
3400859c:	4293      	cmp	r3, r2
3400859e:	d018      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
340085a0:	687b      	ldr	r3, [r7, #4]
340085a2:	681b      	ldr	r3, [r3, #0]
340085a4:	4a17      	ldr	r2, [pc, #92]	@ (34008604 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
340085a6:	4293      	cmp	r3, r2
340085a8:	d013      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
340085aa:	687b      	ldr	r3, [r7, #4]
340085ac:	681b      	ldr	r3, [r3, #0]
340085ae:	4a16      	ldr	r2, [pc, #88]	@ (34008608 <HAL_RAMCFG_EnableAXISRAM+0xac>)
340085b0:	4293      	cmp	r3, r2
340085b2:	d00e      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
340085b4:	687b      	ldr	r3, [r7, #4]
340085b6:	681b      	ldr	r3, [r3, #0]
340085b8:	4a14      	ldr	r2, [pc, #80]	@ (3400860c <HAL_RAMCFG_EnableAXISRAM+0xb0>)
340085ba:	4293      	cmp	r3, r2
340085bc:	d009      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
340085be:	687b      	ldr	r3, [r7, #4]
340085c0:	681b      	ldr	r3, [r3, #0]
340085c2:	4a13      	ldr	r2, [pc, #76]	@ (34008610 <HAL_RAMCFG_EnableAXISRAM+0xb4>)
340085c4:	4293      	cmp	r3, r2
340085c6:	d004      	beq.n	340085d2 <HAL_RAMCFG_EnableAXISRAM+0x76>
340085c8:	f240 4107 	movw	r1, #1031	@ 0x407
340085cc:	4811      	ldr	r0, [pc, #68]	@ (34008614 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
340085ce:	f7f8 ffff 	bl	340015d0 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
340085d2:	687b      	ldr	r3, [r7, #4]
340085d4:	681b      	ldr	r3, [r3, #0]
340085d6:	681a      	ldr	r2, [r3, #0]
340085d8:	687b      	ldr	r3, [r7, #4]
340085da:	681b      	ldr	r3, [r3, #0]
340085dc:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
340085e0:	601a      	str	r2, [r3, #0]
}
340085e2:	bf00      	nop
340085e4:	3708      	adds	r7, #8
340085e6:	46bd      	mov	sp, r7
340085e8:	bd80      	pop	{r7, pc}
340085ea:	bf00      	nop
340085ec:	52023080 	.word	0x52023080
340085f0:	42023080 	.word	0x42023080
340085f4:	52023100 	.word	0x52023100
340085f8:	42023100 	.word	0x42023100
340085fc:	52023180 	.word	0x52023180
34008600:	42023180 	.word	0x42023180
34008604:	52023200 	.word	0x52023200
34008608:	42023200 	.word	0x42023200
3400860c:	52023280 	.word	0x52023280
34008610:	42023280 	.word	0x42023280
34008614:	3401d5a4 	.word	0x3401d5a4

34008618 <LL_RCC_HSE_IsReady>:
{
34008618:	b480      	push	{r7}
3400861a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3400861c:	4b06      	ldr	r3, [pc, #24]	@ (34008638 <LL_RCC_HSE_IsReady+0x20>)
3400861e:	685b      	ldr	r3, [r3, #4]
34008620:	f003 0310 	and.w	r3, r3, #16
34008624:	2b00      	cmp	r3, #0
34008626:	d001      	beq.n	3400862c <LL_RCC_HSE_IsReady+0x14>
34008628:	2301      	movs	r3, #1
3400862a:	e000      	b.n	3400862e <LL_RCC_HSE_IsReady+0x16>
3400862c:	2300      	movs	r3, #0
}
3400862e:	4618      	mov	r0, r3
34008630:	46bd      	mov	sp, r7
34008632:	f85d 7b04 	ldr.w	r7, [sp], #4
34008636:	4770      	bx	lr
34008638:	56028000 	.word	0x56028000

3400863c <LL_RCC_HSI_Enable>:
{
3400863c:	b480      	push	{r7}
3400863e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34008640:	4b04      	ldr	r3, [pc, #16]	@ (34008654 <LL_RCC_HSI_Enable+0x18>)
34008642:	2208      	movs	r2, #8
34008644:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34008648:	bf00      	nop
3400864a:	46bd      	mov	sp, r7
3400864c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008650:	4770      	bx	lr
34008652:	bf00      	nop
34008654:	56028000 	.word	0x56028000

34008658 <LL_RCC_HSI_Disable>:
{
34008658:	b480      	push	{r7}
3400865a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
3400865c:	4b05      	ldr	r3, [pc, #20]	@ (34008674 <LL_RCC_HSI_Disable+0x1c>)
3400865e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34008662:	461a      	mov	r2, r3
34008664:	2308      	movs	r3, #8
34008666:	6013      	str	r3, [r2, #0]
}
34008668:	bf00      	nop
3400866a:	46bd      	mov	sp, r7
3400866c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008670:	4770      	bx	lr
34008672:	bf00      	nop
34008674:	56028000 	.word	0x56028000

34008678 <LL_RCC_HSI_IsReady>:
{
34008678:	b480      	push	{r7}
3400867a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3400867c:	4b06      	ldr	r3, [pc, #24]	@ (34008698 <LL_RCC_HSI_IsReady+0x20>)
3400867e:	685b      	ldr	r3, [r3, #4]
34008680:	f003 0308 	and.w	r3, r3, #8
34008684:	2b00      	cmp	r3, #0
34008686:	d001      	beq.n	3400868c <LL_RCC_HSI_IsReady+0x14>
34008688:	2301      	movs	r3, #1
3400868a:	e000      	b.n	3400868e <LL_RCC_HSI_IsReady+0x16>
3400868c:	2300      	movs	r3, #0
}
3400868e:	4618      	mov	r0, r3
34008690:	46bd      	mov	sp, r7
34008692:	f85d 7b04 	ldr.w	r7, [sp], #4
34008696:	4770      	bx	lr
34008698:	56028000 	.word	0x56028000

3400869c <LL_RCC_HSI_SetDivider>:
{
3400869c:	b480      	push	{r7}
3400869e:	b083      	sub	sp, #12
340086a0:	af00      	add	r7, sp, #0
340086a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
340086a4:	4b06      	ldr	r3, [pc, #24]	@ (340086c0 <LL_RCC_HSI_SetDivider+0x24>)
340086a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340086a8:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
340086ac:	4904      	ldr	r1, [pc, #16]	@ (340086c0 <LL_RCC_HSI_SetDivider+0x24>)
340086ae:	687b      	ldr	r3, [r7, #4]
340086b0:	4313      	orrs	r3, r2
340086b2:	648b      	str	r3, [r1, #72]	@ 0x48
}
340086b4:	bf00      	nop
340086b6:	370c      	adds	r7, #12
340086b8:	46bd      	mov	sp, r7
340086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340086be:	4770      	bx	lr
340086c0:	56028000 	.word	0x56028000

340086c4 <LL_RCC_HSI_GetDivider>:
{
340086c4:	b480      	push	{r7}
340086c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340086c8:	4b04      	ldr	r3, [pc, #16]	@ (340086dc <LL_RCC_HSI_GetDivider+0x18>)
340086ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340086cc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
340086d0:	4618      	mov	r0, r3
340086d2:	46bd      	mov	sp, r7
340086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340086d8:	4770      	bx	lr
340086da:	bf00      	nop
340086dc:	56028000 	.word	0x56028000

340086e0 <LL_RCC_HSI_SetCalibTrimming>:
{
340086e0:	b480      	push	{r7}
340086e2:	b083      	sub	sp, #12
340086e4:	af00      	add	r7, sp, #0
340086e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
340086e8:	4b07      	ldr	r3, [pc, #28]	@ (34008708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
340086ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340086ec:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
340086f0:	687b      	ldr	r3, [r7, #4]
340086f2:	041b      	lsls	r3, r3, #16
340086f4:	4904      	ldr	r1, [pc, #16]	@ (34008708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
340086f6:	4313      	orrs	r3, r2
340086f8:	648b      	str	r3, [r1, #72]	@ 0x48
}
340086fa:	bf00      	nop
340086fc:	370c      	adds	r7, #12
340086fe:	46bd      	mov	sp, r7
34008700:	f85d 7b04 	ldr.w	r7, [sp], #4
34008704:	4770      	bx	lr
34008706:	bf00      	nop
34008708:	56028000 	.word	0x56028000

3400870c <LL_RCC_MSI_Enable>:
{
3400870c:	b480      	push	{r7}
3400870e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34008710:	4b04      	ldr	r3, [pc, #16]	@ (34008724 <LL_RCC_MSI_Enable+0x18>)
34008712:	2204      	movs	r2, #4
34008714:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34008718:	bf00      	nop
3400871a:	46bd      	mov	sp, r7
3400871c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008720:	4770      	bx	lr
34008722:	bf00      	nop
34008724:	56028000 	.word	0x56028000

34008728 <LL_RCC_MSI_Disable>:
{
34008728:	b480      	push	{r7}
3400872a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3400872c:	4b05      	ldr	r3, [pc, #20]	@ (34008744 <LL_RCC_MSI_Disable+0x1c>)
3400872e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34008732:	461a      	mov	r2, r3
34008734:	2304      	movs	r3, #4
34008736:	6013      	str	r3, [r2, #0]
}
34008738:	bf00      	nop
3400873a:	46bd      	mov	sp, r7
3400873c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008740:	4770      	bx	lr
34008742:	bf00      	nop
34008744:	56028000 	.word	0x56028000

34008748 <LL_RCC_MSI_IsReady>:
{
34008748:	b480      	push	{r7}
3400874a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3400874c:	4b06      	ldr	r3, [pc, #24]	@ (34008768 <LL_RCC_MSI_IsReady+0x20>)
3400874e:	685b      	ldr	r3, [r3, #4]
34008750:	f003 0304 	and.w	r3, r3, #4
34008754:	2b00      	cmp	r3, #0
34008756:	d001      	beq.n	3400875c <LL_RCC_MSI_IsReady+0x14>
34008758:	2301      	movs	r3, #1
3400875a:	e000      	b.n	3400875e <LL_RCC_MSI_IsReady+0x16>
3400875c:	2300      	movs	r3, #0
}
3400875e:	4618      	mov	r0, r3
34008760:	46bd      	mov	sp, r7
34008762:	f85d 7b04 	ldr.w	r7, [sp], #4
34008766:	4770      	bx	lr
34008768:	56028000 	.word	0x56028000

3400876c <LL_RCC_MSI_SetFrequency>:
{
3400876c:	b480      	push	{r7}
3400876e:	b083      	sub	sp, #12
34008770:	af00      	add	r7, sp, #0
34008772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34008774:	4b06      	ldr	r3, [pc, #24]	@ (34008790 <LL_RCC_MSI_SetFrequency+0x24>)
34008776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34008778:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3400877c:	4904      	ldr	r1, [pc, #16]	@ (34008790 <LL_RCC_MSI_SetFrequency+0x24>)
3400877e:	687b      	ldr	r3, [r7, #4]
34008780:	4313      	orrs	r3, r2
34008782:	644b      	str	r3, [r1, #68]	@ 0x44
}
34008784:	bf00      	nop
34008786:	370c      	adds	r7, #12
34008788:	46bd      	mov	sp, r7
3400878a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400878e:	4770      	bx	lr
34008790:	56028000 	.word	0x56028000

34008794 <LL_RCC_MSI_GetFrequency>:
{
34008794:	b480      	push	{r7}
34008796:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34008798:	4b04      	ldr	r3, [pc, #16]	@ (340087ac <LL_RCC_MSI_GetFrequency+0x18>)
3400879a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400879c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
340087a0:	4618      	mov	r0, r3
340087a2:	46bd      	mov	sp, r7
340087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340087a8:	4770      	bx	lr
340087aa:	bf00      	nop
340087ac:	56028000 	.word	0x56028000

340087b0 <LL_RCC_MSI_SetCalibTrimming>:
{
340087b0:	b480      	push	{r7}
340087b2:	b083      	sub	sp, #12
340087b4:	af00      	add	r7, sp, #0
340087b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
340087b8:	4b07      	ldr	r3, [pc, #28]	@ (340087d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
340087ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340087bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
340087c0:	687b      	ldr	r3, [r7, #4]
340087c2:	041b      	lsls	r3, r3, #16
340087c4:	4904      	ldr	r1, [pc, #16]	@ (340087d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
340087c6:	4313      	orrs	r3, r2
340087c8:	644b      	str	r3, [r1, #68]	@ 0x44
}
340087ca:	bf00      	nop
340087cc:	370c      	adds	r7, #12
340087ce:	46bd      	mov	sp, r7
340087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340087d4:	4770      	bx	lr
340087d6:	bf00      	nop
340087d8:	56028000 	.word	0x56028000

340087dc <LL_RCC_LSE_IsReady>:
{
340087dc:	b480      	push	{r7}
340087de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340087e0:	4b06      	ldr	r3, [pc, #24]	@ (340087fc <LL_RCC_LSE_IsReady+0x20>)
340087e2:	685b      	ldr	r3, [r3, #4]
340087e4:	f003 0302 	and.w	r3, r3, #2
340087e8:	2b00      	cmp	r3, #0
340087ea:	d001      	beq.n	340087f0 <LL_RCC_LSE_IsReady+0x14>
340087ec:	2301      	movs	r3, #1
340087ee:	e000      	b.n	340087f2 <LL_RCC_LSE_IsReady+0x16>
340087f0:	2300      	movs	r3, #0
}
340087f2:	4618      	mov	r0, r3
340087f4:	46bd      	mov	sp, r7
340087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
340087fa:	4770      	bx	lr
340087fc:	56028000 	.word	0x56028000

34008800 <LL_RCC_LSI_Enable>:
{
34008800:	b480      	push	{r7}
34008802:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34008804:	4b04      	ldr	r3, [pc, #16]	@ (34008818 <LL_RCC_LSI_Enable+0x18>)
34008806:	2201      	movs	r2, #1
34008808:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3400880c:	bf00      	nop
3400880e:	46bd      	mov	sp, r7
34008810:	f85d 7b04 	ldr.w	r7, [sp], #4
34008814:	4770      	bx	lr
34008816:	bf00      	nop
34008818:	56028000 	.word	0x56028000

3400881c <LL_RCC_LSI_Disable>:
{
3400881c:	b480      	push	{r7}
3400881e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34008820:	4b05      	ldr	r3, [pc, #20]	@ (34008838 <LL_RCC_LSI_Disable+0x1c>)
34008822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34008826:	461a      	mov	r2, r3
34008828:	2301      	movs	r3, #1
3400882a:	6013      	str	r3, [r2, #0]
}
3400882c:	bf00      	nop
3400882e:	46bd      	mov	sp, r7
34008830:	f85d 7b04 	ldr.w	r7, [sp], #4
34008834:	4770      	bx	lr
34008836:	bf00      	nop
34008838:	56028000 	.word	0x56028000

3400883c <LL_RCC_LSI_IsReady>:
{
3400883c:	b480      	push	{r7}
3400883e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34008840:	4b04      	ldr	r3, [pc, #16]	@ (34008854 <LL_RCC_LSI_IsReady+0x18>)
34008842:	685b      	ldr	r3, [r3, #4]
34008844:	f003 0301 	and.w	r3, r3, #1
}
34008848:	4618      	mov	r0, r3
3400884a:	46bd      	mov	sp, r7
3400884c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008850:	4770      	bx	lr
34008852:	bf00      	nop
34008854:	56028000 	.word	0x56028000

34008858 <LL_RCC_GetCpuClkSource>:
{
34008858:	b480      	push	{r7}
3400885a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3400885c:	4b04      	ldr	r3, [pc, #16]	@ (34008870 <LL_RCC_GetCpuClkSource+0x18>)
3400885e:	6a1b      	ldr	r3, [r3, #32]
34008860:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34008864:	4618      	mov	r0, r3
34008866:	46bd      	mov	sp, r7
34008868:	f85d 7b04 	ldr.w	r7, [sp], #4
3400886c:	4770      	bx	lr
3400886e:	bf00      	nop
34008870:	56028000 	.word	0x56028000

34008874 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34008874:	b480      	push	{r7}
34008876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34008878:	4b04      	ldr	r3, [pc, #16]	@ (3400888c <LL_RCC_GetSysClkSource+0x18>)
3400887a:	6a1b      	ldr	r3, [r3, #32]
3400887c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008880:	4618      	mov	r0, r3
34008882:	46bd      	mov	sp, r7
34008884:	f85d 7b04 	ldr.w	r7, [sp], #4
34008888:	4770      	bx	lr
3400888a:	bf00      	nop
3400888c:	56028000 	.word	0x56028000

34008890 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34008890:	b480      	push	{r7}
34008892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008894:	4b04      	ldr	r3, [pc, #16]	@ (340088a8 <LL_RCC_PLL1_GetSource+0x18>)
34008896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400889a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400889e:	4618      	mov	r0, r3
340088a0:	46bd      	mov	sp, r7
340088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340088a6:	4770      	bx	lr
340088a8:	56028000 	.word	0x56028000

340088ac <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
340088ac:	b480      	push	{r7}
340088ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340088b0:	4b07      	ldr	r3, [pc, #28]	@ (340088d0 <LL_RCC_PLL1_IsReady+0x24>)
340088b2:	685b      	ldr	r3, [r3, #4]
340088b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340088b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340088bc:	d101      	bne.n	340088c2 <LL_RCC_PLL1_IsReady+0x16>
340088be:	2301      	movs	r3, #1
340088c0:	e000      	b.n	340088c4 <LL_RCC_PLL1_IsReady+0x18>
340088c2:	2300      	movs	r3, #0
}
340088c4:	4618      	mov	r0, r3
340088c6:	46bd      	mov	sp, r7
340088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340088cc:	4770      	bx	lr
340088ce:	bf00      	nop
340088d0:	56028000 	.word	0x56028000

340088d4 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
340088d4:	b480      	push	{r7}
340088d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340088d8:	4b07      	ldr	r3, [pc, #28]	@ (340088f8 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
340088da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340088de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340088e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340088e6:	d101      	bne.n	340088ec <LL_RCC_PLL1_IsEnabledBypass+0x18>
340088e8:	2301      	movs	r3, #1
340088ea:	e000      	b.n	340088ee <LL_RCC_PLL1_IsEnabledBypass+0x1a>
340088ec:	2300      	movs	r3, #0
}
340088ee:	4618      	mov	r0, r3
340088f0:	46bd      	mov	sp, r7
340088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340088f6:	4770      	bx	lr
340088f8:	56028000 	.word	0x56028000

340088fc <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
340088fc:	b480      	push	{r7}
340088fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008900:	4b04      	ldr	r3, [pc, #16]	@ (34008914 <LL_RCC_PLL2_GetSource+0x18>)
34008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008906:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400890a:	4618      	mov	r0, r3
3400890c:	46bd      	mov	sp, r7
3400890e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008912:	4770      	bx	lr
34008914:	56028000 	.word	0x56028000

34008918 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34008918:	b480      	push	{r7}
3400891a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400891c:	4b07      	ldr	r3, [pc, #28]	@ (3400893c <LL_RCC_PLL2_IsReady+0x24>)
3400891e:	685b      	ldr	r3, [r3, #4]
34008920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008928:	d101      	bne.n	3400892e <LL_RCC_PLL2_IsReady+0x16>
3400892a:	2301      	movs	r3, #1
3400892c:	e000      	b.n	34008930 <LL_RCC_PLL2_IsReady+0x18>
3400892e:	2300      	movs	r3, #0
}
34008930:	4618      	mov	r0, r3
34008932:	46bd      	mov	sp, r7
34008934:	f85d 7b04 	ldr.w	r7, [sp], #4
34008938:	4770      	bx	lr
3400893a:	bf00      	nop
3400893c:	56028000 	.word	0x56028000

34008940 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34008940:	b480      	push	{r7}
34008942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008944:	4b07      	ldr	r3, [pc, #28]	@ (34008964 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400894a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400894e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008952:	d101      	bne.n	34008958 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34008954:	2301      	movs	r3, #1
34008956:	e000      	b.n	3400895a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34008958:	2300      	movs	r3, #0
}
3400895a:	4618      	mov	r0, r3
3400895c:	46bd      	mov	sp, r7
3400895e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008962:	4770      	bx	lr
34008964:	56028000 	.word	0x56028000

34008968 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34008968:	b480      	push	{r7}
3400896a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3400896c:	4b04      	ldr	r3, [pc, #16]	@ (34008980 <LL_RCC_PLL3_GetSource+0x18>)
3400896e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008972:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008976:	4618      	mov	r0, r3
34008978:	46bd      	mov	sp, r7
3400897a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400897e:	4770      	bx	lr
34008980:	56028000 	.word	0x56028000

34008984 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34008984:	b480      	push	{r7}
34008986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008988:	4b07      	ldr	r3, [pc, #28]	@ (340089a8 <LL_RCC_PLL3_IsReady+0x24>)
3400898a:	685b      	ldr	r3, [r3, #4]
3400898c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34008994:	d101      	bne.n	3400899a <LL_RCC_PLL3_IsReady+0x16>
34008996:	2301      	movs	r3, #1
34008998:	e000      	b.n	3400899c <LL_RCC_PLL3_IsReady+0x18>
3400899a:	2300      	movs	r3, #0
}
3400899c:	4618      	mov	r0, r3
3400899e:	46bd      	mov	sp, r7
340089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340089a4:	4770      	bx	lr
340089a6:	bf00      	nop
340089a8:	56028000 	.word	0x56028000

340089ac <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
340089ac:	b480      	push	{r7}
340089ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340089b0:	4b07      	ldr	r3, [pc, #28]	@ (340089d0 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
340089b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340089b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340089ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340089be:	d101      	bne.n	340089c4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
340089c0:	2301      	movs	r3, #1
340089c2:	e000      	b.n	340089c6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
340089c4:	2300      	movs	r3, #0
}
340089c6:	4618      	mov	r0, r3
340089c8:	46bd      	mov	sp, r7
340089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
340089ce:	4770      	bx	lr
340089d0:	56028000 	.word	0x56028000

340089d4 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
340089d4:	b480      	push	{r7}
340089d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
340089d8:	4b04      	ldr	r3, [pc, #16]	@ (340089ec <LL_RCC_PLL4_GetSource+0x18>)
340089da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340089de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340089e2:	4618      	mov	r0, r3
340089e4:	46bd      	mov	sp, r7
340089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340089ea:	4770      	bx	lr
340089ec:	56028000 	.word	0x56028000

340089f0 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
340089f0:	b480      	push	{r7}
340089f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340089f4:	4b07      	ldr	r3, [pc, #28]	@ (34008a14 <LL_RCC_PLL4_IsReady+0x24>)
340089f6:	685b      	ldr	r3, [r3, #4]
340089f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340089fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34008a00:	d101      	bne.n	34008a06 <LL_RCC_PLL4_IsReady+0x16>
34008a02:	2301      	movs	r3, #1
34008a04:	e000      	b.n	34008a08 <LL_RCC_PLL4_IsReady+0x18>
34008a06:	2300      	movs	r3, #0
}
34008a08:	4618      	mov	r0, r3
34008a0a:	46bd      	mov	sp, r7
34008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a10:	4770      	bx	lr
34008a12:	bf00      	nop
34008a14:	56028000 	.word	0x56028000

34008a18 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34008a18:	b480      	push	{r7}
34008a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34008a1c:	4b07      	ldr	r3, [pc, #28]	@ (34008a3c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34008a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008a2a:	d101      	bne.n	34008a30 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34008a2c:	2301      	movs	r3, #1
34008a2e:	e000      	b.n	34008a32 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34008a30:	2300      	movs	r3, #0
}
34008a32:	4618      	mov	r0, r3
34008a34:	46bd      	mov	sp, r7
34008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a3a:	4770      	bx	lr
34008a3c:	56028000 	.word	0x56028000

34008a40 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34008a40:	b480      	push	{r7}
34008a42:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34008a44:	4b04      	ldr	r3, [pc, #16]	@ (34008a58 <LL_RCC_IC1_Enable+0x18>)
34008a46:	2201      	movs	r2, #1
34008a48:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008a4c:	bf00      	nop
34008a4e:	46bd      	mov	sp, r7
34008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a54:	4770      	bx	lr
34008a56:	bf00      	nop
34008a58:	56028000 	.word	0x56028000

34008a5c <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34008a5c:	b480      	push	{r7}
34008a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34008a60:	4b04      	ldr	r3, [pc, #16]	@ (34008a74 <LL_RCC_IC1_GetSource+0x18>)
34008a62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34008a66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008a6a:	4618      	mov	r0, r3
34008a6c:	46bd      	mov	sp, r7
34008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a72:	4770      	bx	lr
34008a74:	56028000 	.word	0x56028000

34008a78 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34008a78:	b480      	push	{r7}
34008a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34008a7c:	4b05      	ldr	r3, [pc, #20]	@ (34008a94 <LL_RCC_IC1_GetDivider+0x1c>)
34008a7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34008a82:	0c1b      	lsrs	r3, r3, #16
34008a84:	b2db      	uxtb	r3, r3
34008a86:	3301      	adds	r3, #1
}
34008a88:	4618      	mov	r0, r3
34008a8a:	46bd      	mov	sp, r7
34008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a90:	4770      	bx	lr
34008a92:	bf00      	nop
34008a94:	56028000 	.word	0x56028000

34008a98 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34008a98:	b480      	push	{r7}
34008a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34008a9c:	4b04      	ldr	r3, [pc, #16]	@ (34008ab0 <LL_RCC_IC2_GetSource+0x18>)
34008a9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34008aa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008aa6:	4618      	mov	r0, r3
34008aa8:	46bd      	mov	sp, r7
34008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aae:	4770      	bx	lr
34008ab0:	56028000 	.word	0x56028000

34008ab4 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34008ab4:	b480      	push	{r7}
34008ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34008ab8:	4b05      	ldr	r3, [pc, #20]	@ (34008ad0 <LL_RCC_IC2_GetDivider+0x1c>)
34008aba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34008abe:	0c1b      	lsrs	r3, r3, #16
34008ac0:	b2db      	uxtb	r3, r3
34008ac2:	3301      	adds	r3, #1
}
34008ac4:	4618      	mov	r0, r3
34008ac6:	46bd      	mov	sp, r7
34008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008acc:	4770      	bx	lr
34008ace:	bf00      	nop
34008ad0:	56028000 	.word	0x56028000

34008ad4 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34008ad4:	b480      	push	{r7}
34008ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34008ad8:	4b04      	ldr	r3, [pc, #16]	@ (34008aec <LL_RCC_IC6_GetSource+0x18>)
34008ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34008ade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008ae2:	4618      	mov	r0, r3
34008ae4:	46bd      	mov	sp, r7
34008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aea:	4770      	bx	lr
34008aec:	56028000 	.word	0x56028000

34008af0 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
34008af0:	b480      	push	{r7}
34008af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34008af4:	4b04      	ldr	r3, [pc, #16]	@ (34008b08 <LL_RCC_IC11_GetSource+0x18>)
34008af6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34008afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008afe:	4618      	mov	r0, r3
34008b00:	46bd      	mov	sp, r7
34008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b06:	4770      	bx	lr
34008b08:	56028000 	.word	0x56028000

34008b0c <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
34008b0c:	b580      	push	{r7, lr}
34008b0e:	b0a2      	sub	sp, #136	@ 0x88
34008b10:	af00      	add	r7, sp, #0
34008b12:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34008b14:	687b      	ldr	r3, [r7, #4]
34008b16:	2b00      	cmp	r3, #0
34008b18:	d102      	bne.n	34008b20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
34008b1a:	2301      	movs	r3, #1
34008b1c:	f000 bd10 	b.w	34009540 <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
34008b20:	687b      	ldr	r3, [r7, #4]
34008b22:	681b      	ldr	r3, [r3, #0]
34008b24:	2b00      	cmp	r3, #0
34008b26:	d022      	beq.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b28:	687b      	ldr	r3, [r7, #4]
34008b2a:	681b      	ldr	r3, [r3, #0]
34008b2c:	f003 0301 	and.w	r3, r3, #1
34008b30:	2b00      	cmp	r3, #0
34008b32:	d11c      	bne.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b34:	687b      	ldr	r3, [r7, #4]
34008b36:	681b      	ldr	r3, [r3, #0]
34008b38:	f003 0302 	and.w	r3, r3, #2
34008b3c:	2b00      	cmp	r3, #0
34008b3e:	d116      	bne.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b40:	687b      	ldr	r3, [r7, #4]
34008b42:	681b      	ldr	r3, [r3, #0]
34008b44:	f003 0310 	and.w	r3, r3, #16
34008b48:	2b00      	cmp	r3, #0
34008b4a:	d110      	bne.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b4c:	687b      	ldr	r3, [r7, #4]
34008b4e:	681b      	ldr	r3, [r3, #0]
34008b50:	f003 0308 	and.w	r3, r3, #8
34008b54:	2b00      	cmp	r3, #0
34008b56:	d10a      	bne.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b58:	687b      	ldr	r3, [r7, #4]
34008b5a:	681b      	ldr	r3, [r3, #0]
34008b5c:	f003 0304 	and.w	r3, r3, #4
34008b60:	2b00      	cmp	r3, #0
34008b62:	d104      	bne.n	34008b6e <HAL_RCC_OscConfig+0x62>
34008b64:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34008b68:	4892      	ldr	r0, [pc, #584]	@ (34008db4 <HAL_RCC_OscConfig+0x2a8>)
34008b6a:	f7f8 fd31 	bl	340015d0 <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
34008b6e:	f7ff fe73 	bl	34008858 <LL_RCC_GetCpuClkSource>
34008b72:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34008b76:	f7ff fe7d 	bl	34008874 <LL_RCC_GetSysClkSource>
34008b7a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
34008b7e:	f7ff fe87 	bl	34008890 <LL_RCC_PLL1_GetSource>
34008b82:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34008b84:	f7ff feba 	bl	340088fc <LL_RCC_PLL2_GetSource>
34008b88:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
34008b8a:	f7ff feed 	bl	34008968 <LL_RCC_PLL3_GetSource>
34008b8e:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34008b90:	f7ff ff20 	bl	340089d4 <LL_RCC_PLL4_GetSource>
34008b94:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34008b96:	4b88      	ldr	r3, [pc, #544]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008b98:	685b      	ldr	r3, [r3, #4]
34008b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34008b9c:	687b      	ldr	r3, [r7, #4]
34008b9e:	681b      	ldr	r3, [r3, #0]
34008ba0:	f003 0301 	and.w	r3, r3, #1
34008ba4:	2b00      	cmp	r3, #0
34008ba6:	f000 80c3 	beq.w	34008d30 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34008baa:	687b      	ldr	r3, [r7, #4]
34008bac:	685b      	ldr	r3, [r3, #4]
34008bae:	2b00      	cmp	r3, #0
34008bb0:	d013      	beq.n	34008bda <HAL_RCC_OscConfig+0xce>
34008bb2:	687b      	ldr	r3, [r7, #4]
34008bb4:	685b      	ldr	r3, [r3, #4]
34008bb6:	2b10      	cmp	r3, #16
34008bb8:	d00f      	beq.n	34008bda <HAL_RCC_OscConfig+0xce>
34008bba:	687b      	ldr	r3, [r7, #4]
34008bbc:	685b      	ldr	r3, [r3, #4]
34008bbe:	f248 0210 	movw	r2, #32784	@ 0x8010
34008bc2:	4293      	cmp	r3, r2
34008bc4:	d009      	beq.n	34008bda <HAL_RCC_OscConfig+0xce>
34008bc6:	687b      	ldr	r3, [r7, #4]
34008bc8:	685b      	ldr	r3, [r3, #4]
34008bca:	4a7c      	ldr	r2, [pc, #496]	@ (34008dbc <HAL_RCC_OscConfig+0x2b0>)
34008bcc:	4293      	cmp	r3, r2
34008bce:	d004      	beq.n	34008bda <HAL_RCC_OscConfig+0xce>
34008bd0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34008bd4:	4877      	ldr	r0, [pc, #476]	@ (34008db4 <HAL_RCC_OscConfig+0x2a8>)
34008bd6:	f7f8 fcfb 	bl	340015d0 <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34008bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34008bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34008be2:	d028      	beq.n	34008c36 <HAL_RCC_OscConfig+0x12a>
34008be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34008be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008bec:	d023      	beq.n	34008c36 <HAL_RCC_OscConfig+0x12a>
34008bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34008bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008bf4:	d104      	bne.n	34008c00 <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34008bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008bfc:	2b00      	cmp	r3, #0
34008bfe:	d11a      	bne.n	34008c36 <HAL_RCC_OscConfig+0x12a>
34008c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34008c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008c06:	d104      	bne.n	34008c12 <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34008c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008c0e:	2b00      	cmp	r3, #0
34008c10:	d111      	bne.n	34008c36 <HAL_RCC_OscConfig+0x12a>
34008c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34008c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008c18:	d104      	bne.n	34008c24 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34008c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008c20:	2b00      	cmp	r3, #0
34008c22:	d108      	bne.n	34008c36 <HAL_RCC_OscConfig+0x12a>
34008c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34008c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008c2a:	d10b      	bne.n	34008c44 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34008c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34008c32:	2b00      	cmp	r3, #0
34008c34:	d006      	beq.n	34008c44 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34008c36:	687b      	ldr	r3, [r7, #4]
34008c38:	685b      	ldr	r3, [r3, #4]
34008c3a:	2b00      	cmp	r3, #0
34008c3c:	d178      	bne.n	34008d30 <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
34008c3e:	2301      	movs	r3, #1
34008c40:	f000 bc7e 	b.w	34009540 <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34008c44:	687b      	ldr	r3, [r7, #4]
34008c46:	685b      	ldr	r3, [r3, #4]
34008c48:	2b10      	cmp	r3, #16
34008c4a:	d104      	bne.n	34008c56 <HAL_RCC_OscConfig+0x14a>
34008c4c:	4b5a      	ldr	r3, [pc, #360]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c4e:	2210      	movs	r2, #16
34008c50:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34008c54:	e043      	b.n	34008cde <HAL_RCC_OscConfig+0x1d2>
34008c56:	687b      	ldr	r3, [r7, #4]
34008c58:	685b      	ldr	r3, [r3, #4]
34008c5a:	2b00      	cmp	r3, #0
34008c5c:	d10c      	bne.n	34008c78 <HAL_RCC_OscConfig+0x16c>
34008c5e:	4b56      	ldr	r3, [pc, #344]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34008c64:	461a      	mov	r2, r3
34008c66:	2310      	movs	r3, #16
34008c68:	6013      	str	r3, [r2, #0]
34008c6a:	4b53      	ldr	r3, [pc, #332]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008c6e:	4a52      	ldr	r2, [pc, #328]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c70:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34008c74:	6553      	str	r3, [r2, #84]	@ 0x54
34008c76:	e032      	b.n	34008cde <HAL_RCC_OscConfig+0x1d2>
34008c78:	687b      	ldr	r3, [r7, #4]
34008c7a:	685b      	ldr	r3, [r3, #4]
34008c7c:	f248 0210 	movw	r2, #32784	@ 0x8010
34008c80:	4293      	cmp	r3, r2
34008c82:	d110      	bne.n	34008ca6 <HAL_RCC_OscConfig+0x19a>
34008c84:	4b4c      	ldr	r3, [pc, #304]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008c88:	4a4b      	ldr	r2, [pc, #300]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34008c8e:	6553      	str	r3, [r2, #84]	@ 0x54
34008c90:	4b49      	ldr	r3, [pc, #292]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008c94:	4a48      	ldr	r2, [pc, #288]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34008c9a:	6553      	str	r3, [r2, #84]	@ 0x54
34008c9c:	4b46      	ldr	r3, [pc, #280]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008c9e:	2210      	movs	r2, #16
34008ca0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34008ca4:	e01b      	b.n	34008cde <HAL_RCC_OscConfig+0x1d2>
34008ca6:	687b      	ldr	r3, [r7, #4]
34008ca8:	685b      	ldr	r3, [r3, #4]
34008caa:	4a44      	ldr	r2, [pc, #272]	@ (34008dbc <HAL_RCC_OscConfig+0x2b0>)
34008cac:	4293      	cmp	r3, r2
34008cae:	d10a      	bne.n	34008cc6 <HAL_RCC_OscConfig+0x1ba>
34008cb0:	4b41      	ldr	r3, [pc, #260]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008cb4:	4a40      	ldr	r2, [pc, #256]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cb6:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34008cba:	6553      	str	r3, [r2, #84]	@ 0x54
34008cbc:	4b3e      	ldr	r3, [pc, #248]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cbe:	2210      	movs	r2, #16
34008cc0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34008cc4:	e00b      	b.n	34008cde <HAL_RCC_OscConfig+0x1d2>
34008cc6:	4b3c      	ldr	r3, [pc, #240]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34008ccc:	461a      	mov	r2, r3
34008cce:	2310      	movs	r3, #16
34008cd0:	6013      	str	r3, [r2, #0]
34008cd2:	4b39      	ldr	r3, [pc, #228]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34008cd6:	4a38      	ldr	r2, [pc, #224]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008cd8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34008cdc:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34008cde:	f7fd f9a5 	bl	3400602c <HAL_GetTick>
34008ce2:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34008ce4:	687b      	ldr	r3, [r7, #4]
34008ce6:	685b      	ldr	r3, [r3, #4]
34008ce8:	2b00      	cmp	r3, #0
34008cea:	d01b      	beq.n	34008d24 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34008cec:	e009      	b.n	34008d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34008cee:	f7fd f99d 	bl	3400602c <HAL_GetTick>
34008cf2:	4602      	mov	r2, r0
34008cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008cf6:	1ad3      	subs	r3, r2, r3
34008cf8:	2b64      	cmp	r3, #100	@ 0x64
34008cfa:	d902      	bls.n	34008d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
34008cfc:	2303      	movs	r3, #3
34008cfe:	f000 bc1f 	b.w	34009540 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34008d02:	4b2d      	ldr	r3, [pc, #180]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008d04:	685b      	ldr	r3, [r3, #4]
34008d06:	f003 0310 	and.w	r3, r3, #16
34008d0a:	2b00      	cmp	r3, #0
34008d0c:	d0ef      	beq.n	34008cee <HAL_RCC_OscConfig+0x1e2>
34008d0e:	e00f      	b.n	34008d30 <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34008d10:	f7fd f98c 	bl	3400602c <HAL_GetTick>
34008d14:	4602      	mov	r2, r0
34008d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008d18:	1ad3      	subs	r3, r2, r3
34008d1a:	2b64      	cmp	r3, #100	@ 0x64
34008d1c:	d902      	bls.n	34008d24 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
34008d1e:	2303      	movs	r3, #3
34008d20:	f000 bc0e 	b.w	34009540 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34008d24:	4b24      	ldr	r3, [pc, #144]	@ (34008db8 <HAL_RCC_OscConfig+0x2ac>)
34008d26:	685b      	ldr	r3, [r3, #4]
34008d28:	f003 0310 	and.w	r3, r3, #16
34008d2c:	2b00      	cmp	r3, #0
34008d2e:	d1ef      	bne.n	34008d10 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34008d30:	687b      	ldr	r3, [r7, #4]
34008d32:	681b      	ldr	r3, [r3, #0]
34008d34:	f003 0302 	and.w	r3, r3, #2
34008d38:	2b00      	cmp	r3, #0
34008d3a:	f000 80c3 	beq.w	34008ec4 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34008d3e:	687b      	ldr	r3, [r7, #4]
34008d40:	68db      	ldr	r3, [r3, #12]
34008d42:	2b00      	cmp	r3, #0
34008d44:	d008      	beq.n	34008d58 <HAL_RCC_OscConfig+0x24c>
34008d46:	687b      	ldr	r3, [r7, #4]
34008d48:	68db      	ldr	r3, [r3, #12]
34008d4a:	2b08      	cmp	r3, #8
34008d4c:	d004      	beq.n	34008d58 <HAL_RCC_OscConfig+0x24c>
34008d4e:	f240 11b5 	movw	r1, #437	@ 0x1b5
34008d52:	4818      	ldr	r0, [pc, #96]	@ (34008db4 <HAL_RCC_OscConfig+0x2a8>)
34008d54:	f7f8 fc3c 	bl	340015d0 <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34008d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34008d5c:	2b00      	cmp	r3, #0
34008d5e:	d023      	beq.n	34008da8 <HAL_RCC_OscConfig+0x29c>
34008d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34008d64:	2b00      	cmp	r3, #0
34008d66:	d01f      	beq.n	34008da8 <HAL_RCC_OscConfig+0x29c>
34008d68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34008d6a:	2b00      	cmp	r3, #0
34008d6c:	d104      	bne.n	34008d78 <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34008d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008d74:	2b00      	cmp	r3, #0
34008d76:	d117      	bne.n	34008da8 <HAL_RCC_OscConfig+0x29c>
34008d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34008d7a:	2b00      	cmp	r3, #0
34008d7c:	d104      	bne.n	34008d88 <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34008d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008d84:	2b00      	cmp	r3, #0
34008d86:	d10f      	bne.n	34008da8 <HAL_RCC_OscConfig+0x29c>
34008d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34008d8a:	2b00      	cmp	r3, #0
34008d8c:	d104      	bne.n	34008d98 <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34008d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008d94:	2b00      	cmp	r3, #0
34008d96:	d107      	bne.n	34008da8 <HAL_RCC_OscConfig+0x29c>
34008d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34008d9a:	2b00      	cmp	r3, #0
34008d9c:	d13b      	bne.n	34008e16 <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34008d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34008da4:	2b00      	cmp	r3, #0
34008da6:	d036      	beq.n	34008e16 <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34008da8:	687b      	ldr	r3, [r7, #4]
34008daa:	68db      	ldr	r3, [r3, #12]
34008dac:	2b00      	cmp	r3, #0
34008dae:	d107      	bne.n	34008dc0 <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
34008db0:	2301      	movs	r3, #1
34008db2:	e3c5      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
34008db4:	3401d650 	.word	0x3401d650
34008db8:	56028000 	.word	0x56028000
34008dbc:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34008dc0:	687b      	ldr	r3, [r7, #4]
34008dc2:	691b      	ldr	r3, [r3, #16]
34008dc4:	2b00      	cmp	r3, #0
34008dc6:	d012      	beq.n	34008dee <HAL_RCC_OscConfig+0x2e2>
34008dc8:	687b      	ldr	r3, [r7, #4]
34008dca:	691b      	ldr	r3, [r3, #16]
34008dcc:	2b80      	cmp	r3, #128	@ 0x80
34008dce:	d00e      	beq.n	34008dee <HAL_RCC_OscConfig+0x2e2>
34008dd0:	687b      	ldr	r3, [r7, #4]
34008dd2:	691b      	ldr	r3, [r3, #16]
34008dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008dd8:	d009      	beq.n	34008dee <HAL_RCC_OscConfig+0x2e2>
34008dda:	687b      	ldr	r3, [r7, #4]
34008ddc:	691b      	ldr	r3, [r3, #16]
34008dde:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34008de2:	d004      	beq.n	34008dee <HAL_RCC_OscConfig+0x2e2>
34008de4:	f240 11c7 	movw	r1, #455	@ 0x1c7
34008de8:	48a2      	ldr	r0, [pc, #648]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008dea:	f7f8 fbf1 	bl	340015d0 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34008dee:	687b      	ldr	r3, [r7, #4]
34008df0:	695b      	ldr	r3, [r3, #20]
34008df2:	2b7f      	cmp	r3, #127	@ 0x7f
34008df4:	d904      	bls.n	34008e00 <HAL_RCC_OscConfig+0x2f4>
34008df6:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34008dfa:	489e      	ldr	r0, [pc, #632]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008dfc:	f7f8 fbe8 	bl	340015d0 <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34008e00:	687b      	ldr	r3, [r7, #4]
34008e02:	691b      	ldr	r3, [r3, #16]
34008e04:	4618      	mov	r0, r3
34008e06:	f7ff fc49 	bl	3400869c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34008e0a:	687b      	ldr	r3, [r7, #4]
34008e0c:	695b      	ldr	r3, [r3, #20]
34008e0e:	4618      	mov	r0, r3
34008e10:	f7ff fc66 	bl	340086e0 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34008e14:	e056      	b.n	34008ec4 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34008e16:	687b      	ldr	r3, [r7, #4]
34008e18:	68db      	ldr	r3, [r3, #12]
34008e1a:	2b00      	cmp	r3, #0
34008e1c:	d03e      	beq.n	34008e9c <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34008e1e:	687b      	ldr	r3, [r7, #4]
34008e20:	691b      	ldr	r3, [r3, #16]
34008e22:	2b00      	cmp	r3, #0
34008e24:	d012      	beq.n	34008e4c <HAL_RCC_OscConfig+0x340>
34008e26:	687b      	ldr	r3, [r7, #4]
34008e28:	691b      	ldr	r3, [r3, #16]
34008e2a:	2b80      	cmp	r3, #128	@ 0x80
34008e2c:	d00e      	beq.n	34008e4c <HAL_RCC_OscConfig+0x340>
34008e2e:	687b      	ldr	r3, [r7, #4]
34008e30:	691b      	ldr	r3, [r3, #16]
34008e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008e36:	d009      	beq.n	34008e4c <HAL_RCC_OscConfig+0x340>
34008e38:	687b      	ldr	r3, [r7, #4]
34008e3a:	691b      	ldr	r3, [r3, #16]
34008e3c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34008e40:	d004      	beq.n	34008e4c <HAL_RCC_OscConfig+0x340>
34008e42:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34008e46:	488b      	ldr	r0, [pc, #556]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008e48:	f7f8 fbc2 	bl	340015d0 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34008e4c:	687b      	ldr	r3, [r7, #4]
34008e4e:	695b      	ldr	r3, [r3, #20]
34008e50:	2b7f      	cmp	r3, #127	@ 0x7f
34008e52:	d904      	bls.n	34008e5e <HAL_RCC_OscConfig+0x352>
34008e54:	f240 11d7 	movw	r1, #471	@ 0x1d7
34008e58:	4886      	ldr	r0, [pc, #536]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008e5a:	f7f8 fbb9 	bl	340015d0 <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34008e5e:	f7ff fbed 	bl	3400863c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34008e62:	f7fd f8e3 	bl	3400602c <HAL_GetTick>
34008e66:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34008e68:	e008      	b.n	34008e7c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34008e6a:	f7fd f8df 	bl	3400602c <HAL_GetTick>
34008e6e:	4602      	mov	r2, r0
34008e70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008e72:	1ad3      	subs	r3, r2, r3
34008e74:	2b01      	cmp	r3, #1
34008e76:	d901      	bls.n	34008e7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
34008e78:	2303      	movs	r3, #3
34008e7a:	e361      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
34008e7c:	f7ff fbfc 	bl	34008678 <LL_RCC_HSI_IsReady>
34008e80:	4603      	mov	r3, r0
34008e82:	2b00      	cmp	r3, #0
34008e84:	d0f1      	beq.n	34008e6a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34008e86:	687b      	ldr	r3, [r7, #4]
34008e88:	691b      	ldr	r3, [r3, #16]
34008e8a:	4618      	mov	r0, r3
34008e8c:	f7ff fc06 	bl	3400869c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34008e90:	687b      	ldr	r3, [r7, #4]
34008e92:	695b      	ldr	r3, [r3, #20]
34008e94:	4618      	mov	r0, r3
34008e96:	f7ff fc23 	bl	340086e0 <LL_RCC_HSI_SetCalibTrimming>
34008e9a:	e013      	b.n	34008ec4 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34008e9c:	f7ff fbdc 	bl	34008658 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34008ea0:	f7fd f8c4 	bl	3400602c <HAL_GetTick>
34008ea4:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34008ea6:	e008      	b.n	34008eba <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34008ea8:	f7fd f8c0 	bl	3400602c <HAL_GetTick>
34008eac:	4602      	mov	r2, r0
34008eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008eb0:	1ad3      	subs	r3, r2, r3
34008eb2:	2b01      	cmp	r3, #1
34008eb4:	d901      	bls.n	34008eba <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
34008eb6:	2303      	movs	r3, #3
34008eb8:	e342      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
34008eba:	f7ff fbdd 	bl	34008678 <LL_RCC_HSI_IsReady>
34008ebe:	4603      	mov	r3, r0
34008ec0:	2b00      	cmp	r3, #0
34008ec2:	d1f1      	bne.n	34008ea8 <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34008ec4:	687b      	ldr	r3, [r7, #4]
34008ec6:	681b      	ldr	r3, [r3, #0]
34008ec8:	f003 0310 	and.w	r3, r3, #16
34008ecc:	2b00      	cmp	r3, #0
34008ece:	f000 809e 	beq.w	3400900e <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34008ed2:	687b      	ldr	r3, [r7, #4]
34008ed4:	69db      	ldr	r3, [r3, #28]
34008ed6:	2b00      	cmp	r3, #0
34008ed8:	d008      	beq.n	34008eec <HAL_RCC_OscConfig+0x3e0>
34008eda:	687b      	ldr	r3, [r7, #4]
34008edc:	69db      	ldr	r3, [r3, #28]
34008ede:	2b04      	cmp	r3, #4
34008ee0:	d004      	beq.n	34008eec <HAL_RCC_OscConfig+0x3e0>
34008ee2:	f240 2105 	movw	r1, #517	@ 0x205
34008ee6:	4863      	ldr	r0, [pc, #396]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008ee8:	f7f8 fb72 	bl	340015d0 <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34008eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34008ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34008ef4:	d028      	beq.n	34008f48 <HAL_RCC_OscConfig+0x43c>
34008ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34008efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008efe:	d023      	beq.n	34008f48 <HAL_RCC_OscConfig+0x43c>
34008f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34008f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008f06:	d104      	bne.n	34008f12 <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34008f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008f0e:	2b00      	cmp	r3, #0
34008f10:	d11a      	bne.n	34008f48 <HAL_RCC_OscConfig+0x43c>
34008f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34008f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008f18:	d104      	bne.n	34008f24 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34008f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008f20:	2b00      	cmp	r3, #0
34008f22:	d111      	bne.n	34008f48 <HAL_RCC_OscConfig+0x43c>
34008f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34008f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008f2a:	d104      	bne.n	34008f36 <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34008f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008f32:	2b00      	cmp	r3, #0
34008f34:	d108      	bne.n	34008f48 <HAL_RCC_OscConfig+0x43c>
34008f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34008f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008f3c:	d119      	bne.n	34008f72 <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34008f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34008f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34008f44:	2b00      	cmp	r3, #0
34008f46:	d014      	beq.n	34008f72 <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34008f48:	687b      	ldr	r3, [r7, #4]
34008f4a:	69db      	ldr	r3, [r3, #28]
34008f4c:	2b00      	cmp	r3, #0
34008f4e:	d101      	bne.n	34008f54 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
34008f50:	2301      	movs	r3, #1
34008f52:	e2f5      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34008f54:	687b      	ldr	r3, [r7, #4]
34008f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008f58:	2b1f      	cmp	r3, #31
34008f5a:	d904      	bls.n	34008f66 <HAL_RCC_OscConfig+0x45a>
34008f5c:	f44f 7106 	mov.w	r1, #536	@ 0x218
34008f60:	4844      	ldr	r0, [pc, #272]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008f62:	f7f8 fb35 	bl	340015d0 <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34008f66:	687b      	ldr	r3, [r7, #4]
34008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008f6a:	4618      	mov	r0, r3
34008f6c:	f7ff fc20 	bl	340087b0 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34008f70:	e04d      	b.n	3400900e <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34008f72:	687b      	ldr	r3, [r7, #4]
34008f74:	69db      	ldr	r3, [r3, #28]
34008f76:	2b00      	cmp	r3, #0
34008f78:	d035      	beq.n	34008fe6 <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34008f7a:	687b      	ldr	r3, [r7, #4]
34008f7c:	6a1b      	ldr	r3, [r3, #32]
34008f7e:	2b00      	cmp	r3, #0
34008f80:	d009      	beq.n	34008f96 <HAL_RCC_OscConfig+0x48a>
34008f82:	687b      	ldr	r3, [r7, #4]
34008f84:	6a1b      	ldr	r3, [r3, #32]
34008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008f8a:	d004      	beq.n	34008f96 <HAL_RCC_OscConfig+0x48a>
34008f8c:	f44f 7109 	mov.w	r1, #548	@ 0x224
34008f90:	4838      	ldr	r0, [pc, #224]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008f92:	f7f8 fb1d 	bl	340015d0 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34008f96:	687b      	ldr	r3, [r7, #4]
34008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008f9a:	2b1f      	cmp	r3, #31
34008f9c:	d904      	bls.n	34008fa8 <HAL_RCC_OscConfig+0x49c>
34008f9e:	f240 2125 	movw	r1, #549	@ 0x225
34008fa2:	4834      	ldr	r0, [pc, #208]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34008fa4:	f7f8 fb14 	bl	340015d0 <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34008fa8:	687b      	ldr	r3, [r7, #4]
34008faa:	6a1b      	ldr	r3, [r3, #32]
34008fac:	4618      	mov	r0, r3
34008fae:	f7ff fbdd 	bl	3400876c <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34008fb2:	f7ff fbab 	bl	3400870c <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34008fb6:	f7fd f839 	bl	3400602c <HAL_GetTick>
34008fba:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34008fbc:	e008      	b.n	34008fd0 <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34008fbe:	f7fd f835 	bl	3400602c <HAL_GetTick>
34008fc2:	4602      	mov	r2, r0
34008fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008fc6:	1ad3      	subs	r3, r2, r3
34008fc8:	2b01      	cmp	r3, #1
34008fca:	d901      	bls.n	34008fd0 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
34008fcc:	2303      	movs	r3, #3
34008fce:	e2b7      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
34008fd0:	f7ff fbba 	bl	34008748 <LL_RCC_MSI_IsReady>
34008fd4:	4603      	mov	r3, r0
34008fd6:	2b00      	cmp	r3, #0
34008fd8:	d0f1      	beq.n	34008fbe <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34008fda:	687b      	ldr	r3, [r7, #4]
34008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008fde:	4618      	mov	r0, r3
34008fe0:	f7ff fbe6 	bl	340087b0 <LL_RCC_MSI_SetCalibTrimming>
34008fe4:	e013      	b.n	3400900e <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34008fe6:	f7ff fb9f 	bl	34008728 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34008fea:	f7fd f81f 	bl	3400602c <HAL_GetTick>
34008fee:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34008ff0:	e008      	b.n	34009004 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34008ff2:	f7fd f81b 	bl	3400602c <HAL_GetTick>
34008ff6:	4602      	mov	r2, r0
34008ff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34008ffa:	1ad3      	subs	r3, r2, r3
34008ffc:	2b01      	cmp	r3, #1
34008ffe:	d901      	bls.n	34009004 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
34009000:	2303      	movs	r3, #3
34009002:	e29d      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
34009004:	f7ff fba0 	bl	34008748 <LL_RCC_MSI_IsReady>
34009008:	4603      	mov	r3, r0
3400900a:	2b00      	cmp	r3, #0
3400900c:	d1f1      	bne.n	34008ff2 <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3400900e:	687b      	ldr	r3, [r7, #4]
34009010:	681b      	ldr	r3, [r3, #0]
34009012:	f003 0308 	and.w	r3, r3, #8
34009016:	2b00      	cmp	r3, #0
34009018:	d03c      	beq.n	34009094 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
3400901a:	687b      	ldr	r3, [r7, #4]
3400901c:	699b      	ldr	r3, [r3, #24]
3400901e:	2b00      	cmp	r3, #0
34009020:	d008      	beq.n	34009034 <HAL_RCC_OscConfig+0x528>
34009022:	687b      	ldr	r3, [r7, #4]
34009024:	699b      	ldr	r3, [r3, #24]
34009026:	2b01      	cmp	r3, #1
34009028:	d004      	beq.n	34009034 <HAL_RCC_OscConfig+0x528>
3400902a:	f240 2155 	movw	r1, #597	@ 0x255
3400902e:	4811      	ldr	r0, [pc, #68]	@ (34009074 <HAL_RCC_OscConfig+0x568>)
34009030:	f7f8 face 	bl	340015d0 <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34009034:	687b      	ldr	r3, [r7, #4]
34009036:	699b      	ldr	r3, [r3, #24]
34009038:	2b00      	cmp	r3, #0
3400903a:	d014      	beq.n	34009066 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
3400903c:	f7ff fbe0 	bl	34008800 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34009040:	f7fc fff4 	bl	3400602c <HAL_GetTick>
34009044:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34009046:	e008      	b.n	3400905a <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34009048:	f7fc fff0 	bl	3400602c <HAL_GetTick>
3400904c:	4602      	mov	r2, r0
3400904e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34009050:	1ad3      	subs	r3, r2, r3
34009052:	2b01      	cmp	r3, #1
34009054:	d901      	bls.n	3400905a <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
34009056:	2303      	movs	r3, #3
34009058:	e272      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
3400905a:	f7ff fbef 	bl	3400883c <LL_RCC_LSI_IsReady>
3400905e:	4603      	mov	r3, r0
34009060:	2b00      	cmp	r3, #0
34009062:	d0f1      	beq.n	34009048 <HAL_RCC_OscConfig+0x53c>
34009064:	e016      	b.n	34009094 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34009066:	f7ff fbd9 	bl	3400881c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400906a:	f7fc ffdf 	bl	3400602c <HAL_GetTick>
3400906e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34009070:	e00b      	b.n	3400908a <HAL_RCC_OscConfig+0x57e>
34009072:	bf00      	nop
34009074:	3401d650 	.word	0x3401d650
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34009078:	f7fc ffd8 	bl	3400602c <HAL_GetTick>
3400907c:	4602      	mov	r2, r0
3400907e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34009080:	1ad3      	subs	r3, r2, r3
34009082:	2b01      	cmp	r3, #1
34009084:	d901      	bls.n	3400908a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
34009086:	2303      	movs	r3, #3
34009088:	e25a      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
3400908a:	f7ff fbd7 	bl	3400883c <LL_RCC_LSI_IsReady>
3400908e:	4603      	mov	r3, r0
34009090:	2b00      	cmp	r3, #0
34009092:	d1f1      	bne.n	34009078 <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34009094:	687b      	ldr	r3, [r7, #4]
34009096:	681b      	ldr	r3, [r3, #0]
34009098:	f003 0304 	and.w	r3, r3, #4
3400909c:	2b00      	cmp	r3, #0
3400909e:	f000 80a4 	beq.w	340091ea <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340090a2:	687b      	ldr	r3, [r7, #4]
340090a4:	689b      	ldr	r3, [r3, #8]
340090a6:	2b00      	cmp	r3, #0
340090a8:	d013      	beq.n	340090d2 <HAL_RCC_OscConfig+0x5c6>
340090aa:	687b      	ldr	r3, [r7, #4]
340090ac:	689b      	ldr	r3, [r3, #8]
340090ae:	2b02      	cmp	r3, #2
340090b0:	d00f      	beq.n	340090d2 <HAL_RCC_OscConfig+0x5c6>
340090b2:	687b      	ldr	r3, [r7, #4]
340090b4:	689b      	ldr	r3, [r3, #8]
340090b6:	f248 0202 	movw	r2, #32770	@ 0x8002
340090ba:	4293      	cmp	r3, r2
340090bc:	d009      	beq.n	340090d2 <HAL_RCC_OscConfig+0x5c6>
340090be:	687b      	ldr	r3, [r7, #4]
340090c0:	689b      	ldr	r3, [r3, #8]
340090c2:	4a9b      	ldr	r2, [pc, #620]	@ (34009330 <HAL_RCC_OscConfig+0x824>)
340090c4:	4293      	cmp	r3, r2
340090c6:	d004      	beq.n	340090d2 <HAL_RCC_OscConfig+0x5c6>
340090c8:	f44f 7120 	mov.w	r1, #640	@ 0x280
340090cc:	4899      	ldr	r0, [pc, #612]	@ (34009334 <HAL_RCC_OscConfig+0x828>)
340090ce:	f7f8 fa7f 	bl	340015d0 <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340090d2:	687b      	ldr	r3, [r7, #4]
340090d4:	689b      	ldr	r3, [r3, #8]
340090d6:	2b02      	cmp	r3, #2
340090d8:	d104      	bne.n	340090e4 <HAL_RCC_OscConfig+0x5d8>
340090da:	4b97      	ldr	r3, [pc, #604]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
340090dc:	2202      	movs	r2, #2
340090de:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
340090e2:	e055      	b.n	34009190 <HAL_RCC_OscConfig+0x684>
340090e4:	687b      	ldr	r3, [r7, #4]
340090e6:	689b      	ldr	r3, [r3, #8]
340090e8:	2b00      	cmp	r3, #0
340090ea:	d112      	bne.n	34009112 <HAL_RCC_OscConfig+0x606>
340090ec:	4b92      	ldr	r3, [pc, #584]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
340090ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340090f2:	461a      	mov	r2, r3
340090f4:	2302      	movs	r3, #2
340090f6:	6013      	str	r3, [r2, #0]
340090f8:	4b8f      	ldr	r3, [pc, #572]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
340090fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340090fc:	4a8e      	ldr	r2, [pc, #568]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
340090fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34009102:	6413      	str	r3, [r2, #64]	@ 0x40
34009104:	4b8c      	ldr	r3, [pc, #560]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34009108:	4a8b      	ldr	r2, [pc, #556]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400910a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3400910e:	6413      	str	r3, [r2, #64]	@ 0x40
34009110:	e03e      	b.n	34009190 <HAL_RCC_OscConfig+0x684>
34009112:	687b      	ldr	r3, [r7, #4]
34009114:	689b      	ldr	r3, [r3, #8]
34009116:	f248 0202 	movw	r2, #32770	@ 0x8002
3400911a:	4293      	cmp	r3, r2
3400911c:	d110      	bne.n	34009140 <HAL_RCC_OscConfig+0x634>
3400911e:	4b86      	ldr	r3, [pc, #536]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34009122:	4a85      	ldr	r2, [pc, #532]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34009128:	6413      	str	r3, [r2, #64]	@ 0x40
3400912a:	4b83      	ldr	r3, [pc, #524]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400912c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400912e:	4a82      	ldr	r2, [pc, #520]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34009134:	6413      	str	r3, [r2, #64]	@ 0x40
34009136:	4b80      	ldr	r3, [pc, #512]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009138:	2202      	movs	r2, #2
3400913a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3400913e:	e027      	b.n	34009190 <HAL_RCC_OscConfig+0x684>
34009140:	687b      	ldr	r3, [r7, #4]
34009142:	689b      	ldr	r3, [r3, #8]
34009144:	4a7a      	ldr	r2, [pc, #488]	@ (34009330 <HAL_RCC_OscConfig+0x824>)
34009146:	4293      	cmp	r3, r2
34009148:	d110      	bne.n	3400916c <HAL_RCC_OscConfig+0x660>
3400914a:	4b7b      	ldr	r3, [pc, #492]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400914c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400914e:	4a7a      	ldr	r2, [pc, #488]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34009154:	6413      	str	r3, [r2, #64]	@ 0x40
34009156:	4b78      	ldr	r3, [pc, #480]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400915a:	4a77      	ldr	r2, [pc, #476]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400915c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34009160:	6413      	str	r3, [r2, #64]	@ 0x40
34009162:	4b75      	ldr	r3, [pc, #468]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009164:	2202      	movs	r2, #2
34009166:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3400916a:	e011      	b.n	34009190 <HAL_RCC_OscConfig+0x684>
3400916c:	4b72      	ldr	r3, [pc, #456]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400916e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34009172:	461a      	mov	r2, r3
34009174:	2302      	movs	r3, #2
34009176:	6013      	str	r3, [r2, #0]
34009178:	4b6f      	ldr	r3, [pc, #444]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400917a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400917c:	4a6e      	ldr	r2, [pc, #440]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400917e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34009182:	6413      	str	r3, [r2, #64]	@ 0x40
34009184:	4b6c      	ldr	r3, [pc, #432]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
34009186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34009188:	4a6b      	ldr	r2, [pc, #428]	@ (34009338 <HAL_RCC_OscConfig+0x82c>)
3400918a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400918e:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34009190:	687b      	ldr	r3, [r7, #4]
34009192:	689b      	ldr	r3, [r3, #8]
34009194:	2b00      	cmp	r3, #0
34009196:	d014      	beq.n	340091c2 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34009198:	f7fc ff48 	bl	3400602c <HAL_GetTick>
3400919c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
3400919e:	e00a      	b.n	340091b6 <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340091a0:	f7fc ff44 	bl	3400602c <HAL_GetTick>
340091a4:	4602      	mov	r2, r0
340091a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340091a8:	1ad3      	subs	r3, r2, r3
340091aa:	f241 3288 	movw	r2, #5000	@ 0x1388
340091ae:	4293      	cmp	r3, r2
340091b0:	d901      	bls.n	340091b6 <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
340091b2:	2303      	movs	r3, #3
340091b4:	e1c4      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
340091b6:	f7ff fb11 	bl	340087dc <LL_RCC_LSE_IsReady>
340091ba:	4603      	mov	r3, r0
340091bc:	2b00      	cmp	r3, #0
340091be:	d0ef      	beq.n	340091a0 <HAL_RCC_OscConfig+0x694>
340091c0:	e013      	b.n	340091ea <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
340091c2:	f7fc ff33 	bl	3400602c <HAL_GetTick>
340091c6:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
340091c8:	e00a      	b.n	340091e0 <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340091ca:	f7fc ff2f 	bl	3400602c <HAL_GetTick>
340091ce:	4602      	mov	r2, r0
340091d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340091d2:	1ad3      	subs	r3, r2, r3
340091d4:	f241 3288 	movw	r2, #5000	@ 0x1388
340091d8:	4293      	cmp	r3, r2
340091da:	d901      	bls.n	340091e0 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
340091dc:	2303      	movs	r3, #3
340091de:	e1af      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
340091e0:	f7ff fafc 	bl	340087dc <LL_RCC_LSE_IsReady>
340091e4:	4603      	mov	r3, r0
340091e6:	2b00      	cmp	r3, #0
340091e8:	d1ef      	bne.n	340091ca <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340091ea:	687b      	ldr	r3, [r7, #4]
340091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340091ee:	2b00      	cmp	r3, #0
340091f0:	d010      	beq.n	34009214 <HAL_RCC_OscConfig+0x708>
340091f2:	687b      	ldr	r3, [r7, #4]
340091f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340091f6:	2b01      	cmp	r3, #1
340091f8:	d00c      	beq.n	34009214 <HAL_RCC_OscConfig+0x708>
340091fa:	687b      	ldr	r3, [r7, #4]
340091fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340091fe:	2b02      	cmp	r3, #2
34009200:	d008      	beq.n	34009214 <HAL_RCC_OscConfig+0x708>
34009202:	687b      	ldr	r3, [r7, #4]
34009204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34009206:	2b03      	cmp	r3, #3
34009208:	d004      	beq.n	34009214 <HAL_RCC_OscConfig+0x708>
3400920a:	f240 21a5 	movw	r1, #677	@ 0x2a5
3400920e:	4849      	ldr	r0, [pc, #292]	@ (34009334 <HAL_RCC_OscConfig+0x828>)
34009210:	f7f8 f9de 	bl	340015d0 <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34009214:	687b      	ldr	r3, [r7, #4]
34009216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34009218:	2b00      	cmp	r3, #0
3400921a:	d04c      	beq.n	340092b6 <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
3400921c:	687b      	ldr	r3, [r7, #4]
3400921e:	3328      	adds	r3, #40	@ 0x28
34009220:	4619      	mov	r1, r3
34009222:	2000      	movs	r0, #0
34009224:	f001 f8e0 	bl	3400a3e8 <RCC_PLL_IsNewConfig>
34009228:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3400922a:	f7ff fb3f 	bl	340088ac <LL_RCC_PLL1_IsReady>
3400922e:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34009230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34009232:	2b01      	cmp	r3, #1
34009234:	d130      	bne.n	34009298 <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34009236:	f7ff fc11 	bl	34008a5c <LL_RCC_IC1_GetSource>
3400923a:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3400923c:	f7ff fc2c 	bl	34008a98 <LL_RCC_IC2_GetSource>
34009240:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34009242:	f7ff fc47 	bl	34008ad4 <LL_RCC_IC6_GetSource>
34009246:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34009248:	f7ff fc52 	bl	34008af0 <LL_RCC_IC11_GetSource>
3400924c:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3400924e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34009252:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009256:	d104      	bne.n	34009262 <HAL_RCC_OscConfig+0x756>
34009258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3400925a:	2b00      	cmp	r3, #0
3400925c:	d101      	bne.n	34009262 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
3400925e:	2301      	movs	r3, #1
34009260:	e16e      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34009262:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34009266:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400926a:	d10a      	bne.n	34009282 <HAL_RCC_OscConfig+0x776>
3400926c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3400926e:	2b00      	cmp	r3, #0
34009270:	d005      	beq.n	3400927e <HAL_RCC_OscConfig+0x772>
34009272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34009274:	2b00      	cmp	r3, #0
34009276:	d002      	beq.n	3400927e <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34009278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3400927a:	2b00      	cmp	r3, #0
3400927c:	d101      	bne.n	34009282 <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3400927e:	2301      	movs	r3, #1
34009280:	e15e      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34009282:	687b      	ldr	r3, [r7, #4]
34009284:	3328      	adds	r3, #40	@ 0x28
34009286:	4619      	mov	r1, r3
34009288:	2000      	movs	r0, #0
3400928a:	f000 fedd 	bl	3400a048 <RCC_PLL_Config>
3400928e:	4603      	mov	r3, r0
34009290:	2b00      	cmp	r3, #0
34009292:	d010      	beq.n	340092b6 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34009294:	2301      	movs	r3, #1
34009296:	e153      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34009298:	687b      	ldr	r3, [r7, #4]
3400929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400929c:	2b02      	cmp	r3, #2
3400929e:	d10a      	bne.n	340092b6 <HAL_RCC_OscConfig+0x7aa>
340092a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
340092a2:	2b00      	cmp	r3, #0
340092a4:	d107      	bne.n	340092b6 <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
340092a6:	2000      	movs	r0, #0
340092a8:	f001 f872 	bl	3400a390 <RCC_PLL_Enable>
340092ac:	4603      	mov	r3, r0
340092ae:	2b00      	cmp	r3, #0
340092b0:	d001      	beq.n	340092b6 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
340092b2:	2301      	movs	r3, #1
340092b4:	e144      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
340092b6:	687b      	ldr	r3, [r7, #4]
340092b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340092ba:	2b00      	cmp	r3, #0
340092bc:	d010      	beq.n	340092e0 <HAL_RCC_OscConfig+0x7d4>
340092be:	687b      	ldr	r3, [r7, #4]
340092c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340092c2:	2b01      	cmp	r3, #1
340092c4:	d00c      	beq.n	340092e0 <HAL_RCC_OscConfig+0x7d4>
340092c6:	687b      	ldr	r3, [r7, #4]
340092c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340092ca:	2b02      	cmp	r3, #2
340092cc:	d008      	beq.n	340092e0 <HAL_RCC_OscConfig+0x7d4>
340092ce:	687b      	ldr	r3, [r7, #4]
340092d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340092d2:	2b03      	cmp	r3, #3
340092d4:	d004      	beq.n	340092e0 <HAL_RCC_OscConfig+0x7d4>
340092d6:	f240 21d3 	movw	r1, #723	@ 0x2d3
340092da:	4816      	ldr	r0, [pc, #88]	@ (34009334 <HAL_RCC_OscConfig+0x828>)
340092dc:	f7f8 f978 	bl	340015d0 <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340092e0:	687b      	ldr	r3, [r7, #4]
340092e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340092e4:	2b00      	cmp	r3, #0
340092e6:	d056      	beq.n	34009396 <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
340092e8:	687b      	ldr	r3, [r7, #4]
340092ea:	3344      	adds	r3, #68	@ 0x44
340092ec:	4619      	mov	r1, r3
340092ee:	2001      	movs	r0, #1
340092f0:	f001 f87a 	bl	3400a3e8 <RCC_PLL_IsNewConfig>
340092f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
340092f6:	f7ff fb0f 	bl	34008918 <LL_RCC_PLL2_IsReady>
340092fa:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
340092fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340092fe:	2b01      	cmp	r3, #1
34009300:	d13a      	bne.n	34009378 <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34009302:	f7ff fbab 	bl	34008a5c <LL_RCC_IC1_GetSource>
34009306:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34009308:	f7ff fbc6 	bl	34008a98 <LL_RCC_IC2_GetSource>
3400930c:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3400930e:	f7ff fbe1 	bl	34008ad4 <LL_RCC_IC6_GetSource>
34009312:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34009314:	f7ff fbec 	bl	34008af0 <LL_RCC_IC11_GetSource>
34009318:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3400931a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400931e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009322:	d10b      	bne.n	3400933c <HAL_RCC_OscConfig+0x830>
34009324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34009326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400932a:	d107      	bne.n	3400933c <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
3400932c:	2301      	movs	r3, #1
3400932e:	e107      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
34009330:	00018002 	.word	0x00018002
34009334:	3401d650 	.word	0x3401d650
34009338:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400933c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34009340:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009344:	d10d      	bne.n	34009362 <HAL_RCC_OscConfig+0x856>
34009346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34009348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400934c:	d007      	beq.n	3400935e <HAL_RCC_OscConfig+0x852>
3400934e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34009350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009354:	d003      	beq.n	3400935e <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34009358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400935c:	d101      	bne.n	34009362 <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3400935e:	2301      	movs	r3, #1
34009360:	e0ee      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34009362:	687b      	ldr	r3, [r7, #4]
34009364:	3344      	adds	r3, #68	@ 0x44
34009366:	4619      	mov	r1, r3
34009368:	2001      	movs	r0, #1
3400936a:	f000 fe6d 	bl	3400a048 <RCC_PLL_Config>
3400936e:	4603      	mov	r3, r0
34009370:	2b00      	cmp	r3, #0
34009372:	d010      	beq.n	34009396 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34009374:	2301      	movs	r3, #1
34009376:	e0e3      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34009378:	687b      	ldr	r3, [r7, #4]
3400937a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400937c:	2b02      	cmp	r3, #2
3400937e:	d10a      	bne.n	34009396 <HAL_RCC_OscConfig+0x88a>
34009380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34009382:	2b00      	cmp	r3, #0
34009384:	d107      	bne.n	34009396 <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34009386:	2001      	movs	r0, #1
34009388:	f001 f802 	bl	3400a390 <RCC_PLL_Enable>
3400938c:	4603      	mov	r3, r0
3400938e:	2b00      	cmp	r3, #0
34009390:	d001      	beq.n	34009396 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34009392:	2301      	movs	r3, #1
34009394:	e0d4      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34009396:	687b      	ldr	r3, [r7, #4]
34009398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400939a:	2b00      	cmp	r3, #0
3400939c:	d010      	beq.n	340093c0 <HAL_RCC_OscConfig+0x8b4>
3400939e:	687b      	ldr	r3, [r7, #4]
340093a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340093a2:	2b01      	cmp	r3, #1
340093a4:	d00c      	beq.n	340093c0 <HAL_RCC_OscConfig+0x8b4>
340093a6:	687b      	ldr	r3, [r7, #4]
340093a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340093aa:	2b02      	cmp	r3, #2
340093ac:	d008      	beq.n	340093c0 <HAL_RCC_OscConfig+0x8b4>
340093ae:	687b      	ldr	r3, [r7, #4]
340093b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340093b2:	2b03      	cmp	r3, #3
340093b4:	d004      	beq.n	340093c0 <HAL_RCC_OscConfig+0x8b4>
340093b6:	f240 3101 	movw	r1, #769	@ 0x301
340093ba:	4863      	ldr	r0, [pc, #396]	@ (34009548 <HAL_RCC_OscConfig+0xa3c>)
340093bc:	f7f8 f908 	bl	340015d0 <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340093c0:	687b      	ldr	r3, [r7, #4]
340093c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340093c4:	2b00      	cmp	r3, #0
340093c6:	d050      	beq.n	3400946a <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
340093c8:	687b      	ldr	r3, [r7, #4]
340093ca:	3360      	adds	r3, #96	@ 0x60
340093cc:	4619      	mov	r1, r3
340093ce:	2002      	movs	r0, #2
340093d0:	f001 f80a 	bl	3400a3e8 <RCC_PLL_IsNewConfig>
340093d4:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
340093d6:	f7ff fa69 	bl	340088ac <LL_RCC_PLL1_IsReady>
340093da:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
340093dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340093de:	2b01      	cmp	r3, #1
340093e0:	d134      	bne.n	3400944c <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
340093e2:	f7ff fb3b 	bl	34008a5c <LL_RCC_IC1_GetSource>
340093e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340093e8:	f7ff fb56 	bl	34008a98 <LL_RCC_IC2_GetSource>
340093ec:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340093ee:	f7ff fb71 	bl	34008ad4 <LL_RCC_IC6_GetSource>
340093f2:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340093f4:	f7ff fb7c 	bl	34008af0 <LL_RCC_IC11_GetSource>
340093f8:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340093fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340093fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009402:	d105      	bne.n	34009410 <HAL_RCC_OscConfig+0x904>
34009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34009406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400940a:	d101      	bne.n	34009410 <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
3400940c:	2301      	movs	r3, #1
3400940e:	e097      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34009410:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34009414:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009418:	d10d      	bne.n	34009436 <HAL_RCC_OscConfig+0x92a>
3400941a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400941c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009420:	d007      	beq.n	34009432 <HAL_RCC_OscConfig+0x926>
34009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34009424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009428:	d003      	beq.n	34009432 <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
3400942a:	6a3b      	ldr	r3, [r7, #32]
3400942c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009430:	d101      	bne.n	34009436 <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34009432:	2301      	movs	r3, #1
34009434:	e084      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34009436:	687b      	ldr	r3, [r7, #4]
34009438:	3360      	adds	r3, #96	@ 0x60
3400943a:	4619      	mov	r1, r3
3400943c:	2002      	movs	r0, #2
3400943e:	f000 fe03 	bl	3400a048 <RCC_PLL_Config>
34009442:	4603      	mov	r3, r0
34009444:	2b00      	cmp	r3, #0
34009446:	d010      	beq.n	3400946a <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34009448:	2301      	movs	r3, #1
3400944a:	e079      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
3400944c:	687b      	ldr	r3, [r7, #4]
3400944e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34009450:	2b02      	cmp	r3, #2
34009452:	d10a      	bne.n	3400946a <HAL_RCC_OscConfig+0x95e>
34009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34009456:	2b00      	cmp	r3, #0
34009458:	d107      	bne.n	3400946a <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3400945a:	2002      	movs	r0, #2
3400945c:	f000 ff98 	bl	3400a390 <RCC_PLL_Enable>
34009460:	4603      	mov	r3, r0
34009462:	2b00      	cmp	r3, #0
34009464:	d001      	beq.n	3400946a <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34009466:	2301      	movs	r3, #1
34009468:	e06a      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
3400946a:	687b      	ldr	r3, [r7, #4]
3400946c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400946e:	2b00      	cmp	r3, #0
34009470:	d010      	beq.n	34009494 <HAL_RCC_OscConfig+0x988>
34009472:	687b      	ldr	r3, [r7, #4]
34009474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34009476:	2b01      	cmp	r3, #1
34009478:	d00c      	beq.n	34009494 <HAL_RCC_OscConfig+0x988>
3400947a:	687b      	ldr	r3, [r7, #4]
3400947c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400947e:	2b02      	cmp	r3, #2
34009480:	d008      	beq.n	34009494 <HAL_RCC_OscConfig+0x988>
34009482:	687b      	ldr	r3, [r7, #4]
34009484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34009486:	2b03      	cmp	r3, #3
34009488:	d004      	beq.n	34009494 <HAL_RCC_OscConfig+0x988>
3400948a:	f240 312e 	movw	r1, #814	@ 0x32e
3400948e:	482e      	ldr	r0, [pc, #184]	@ (34009548 <HAL_RCC_OscConfig+0xa3c>)
34009490:	f7f8 f89e 	bl	340015d0 <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34009494:	687b      	ldr	r3, [r7, #4]
34009496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34009498:	2b00      	cmp	r3, #0
3400949a:	d050      	beq.n	3400953e <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3400949c:	687b      	ldr	r3, [r7, #4]
3400949e:	337c      	adds	r3, #124	@ 0x7c
340094a0:	4619      	mov	r1, r3
340094a2:	2003      	movs	r0, #3
340094a4:	f000 ffa0 	bl	3400a3e8 <RCC_PLL_IsNewConfig>
340094a8:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
340094aa:	f7ff faa1 	bl	340089f0 <LL_RCC_PLL4_IsReady>
340094ae:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
340094b0:	69fb      	ldr	r3, [r7, #28]
340094b2:	2b01      	cmp	r3, #1
340094b4:	d134      	bne.n	34009520 <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
340094b6:	f7ff fad1 	bl	34008a5c <LL_RCC_IC1_GetSource>
340094ba:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340094bc:	f7ff faec 	bl	34008a98 <LL_RCC_IC2_GetSource>
340094c0:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340094c2:	f7ff fb07 	bl	34008ad4 <LL_RCC_IC6_GetSource>
340094c6:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340094c8:	f7ff fb12 	bl	34008af0 <LL_RCC_IC11_GetSource>
340094cc:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
340094ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340094d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340094d6:	d105      	bne.n	340094e4 <HAL_RCC_OscConfig+0x9d8>
340094d8:	697b      	ldr	r3, [r7, #20]
340094da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094de:	d101      	bne.n	340094e4 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
340094e0:	2301      	movs	r3, #1
340094e2:	e02d      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
340094e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340094e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094ec:	d10d      	bne.n	3400950a <HAL_RCC_OscConfig+0x9fe>
340094ee:	693b      	ldr	r3, [r7, #16]
340094f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094f4:	d007      	beq.n	34009506 <HAL_RCC_OscConfig+0x9fa>
340094f6:	68fb      	ldr	r3, [r7, #12]
340094f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094fc:	d003      	beq.n	34009506 <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
340094fe:	68bb      	ldr	r3, [r7, #8]
34009500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009504:	d101      	bne.n	3400950a <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34009506:	2301      	movs	r3, #1
34009508:	e01a      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
3400950a:	687b      	ldr	r3, [r7, #4]
3400950c:	337c      	adds	r3, #124	@ 0x7c
3400950e:	4619      	mov	r1, r3
34009510:	2003      	movs	r0, #3
34009512:	f000 fd99 	bl	3400a048 <RCC_PLL_Config>
34009516:	4603      	mov	r3, r0
34009518:	2b00      	cmp	r3, #0
3400951a:	d010      	beq.n	3400953e <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
3400951c:	2301      	movs	r3, #1
3400951e:	e00f      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34009520:	687b      	ldr	r3, [r7, #4]
34009522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34009524:	2b02      	cmp	r3, #2
34009526:	d10a      	bne.n	3400953e <HAL_RCC_OscConfig+0xa32>
34009528:	69bb      	ldr	r3, [r7, #24]
3400952a:	2b00      	cmp	r3, #0
3400952c:	d107      	bne.n	3400953e <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
3400952e:	2003      	movs	r0, #3
34009530:	f000 ff2e 	bl	3400a390 <RCC_PLL_Enable>
34009534:	4603      	mov	r3, r0
34009536:	2b00      	cmp	r3, #0
34009538:	d001      	beq.n	3400953e <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
3400953a:	2301      	movs	r3, #1
3400953c:	e000      	b.n	34009540 <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
3400953e:	2300      	movs	r3, #0
}
34009540:	4618      	mov	r0, r3
34009542:	3788      	adds	r7, #136	@ 0x88
34009544:	46bd      	mov	sp, r7
34009546:	bd80      	pop	{r7, pc}
34009548:	3401d650 	.word	0x3401d650

3400954c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
3400954c:	b580      	push	{r7, lr}
3400954e:	b084      	sub	sp, #16
34009550:	af00      	add	r7, sp, #0
34009552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34009554:	687b      	ldr	r3, [r7, #4]
34009556:	2b00      	cmp	r3, #0
34009558:	d102      	bne.n	34009560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
3400955a:	2301      	movs	r3, #1
3400955c:	f000 bc6d 	b.w	34009e3a <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34009560:	687b      	ldr	r3, [r7, #4]
34009562:	681b      	ldr	r3, [r3, #0]
34009564:	2b7f      	cmp	r3, #127	@ 0x7f
34009566:	d904      	bls.n	34009572 <HAL_RCC_ClockConfig+0x26>
34009568:	f240 317e 	movw	r1, #894	@ 0x37e
3400956c:	4880      	ldr	r0, [pc, #512]	@ (34009770 <HAL_RCC_ClockConfig+0x224>)
3400956e:	f7f8 f82f 	bl	340015d0 <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34009572:	687b      	ldr	r3, [r7, #4]
34009574:	681b      	ldr	r3, [r3, #0]
34009576:	f003 0308 	and.w	r3, r3, #8
3400957a:	2b00      	cmp	r3, #0
3400957c:	d035      	beq.n	340095ea <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3400957e:	687b      	ldr	r3, [r7, #4]
34009580:	691b      	ldr	r3, [r3, #16]
34009582:	2b00      	cmp	r3, #0
34009584:	d020      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
34009586:	687b      	ldr	r3, [r7, #4]
34009588:	691b      	ldr	r3, [r3, #16]
3400958a:	2b01      	cmp	r3, #1
3400958c:	d01c      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
3400958e:	687b      	ldr	r3, [r7, #4]
34009590:	691b      	ldr	r3, [r3, #16]
34009592:	2b02      	cmp	r3, #2
34009594:	d018      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
34009596:	687b      	ldr	r3, [r7, #4]
34009598:	691b      	ldr	r3, [r3, #16]
3400959a:	2b03      	cmp	r3, #3
3400959c:	d014      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
3400959e:	687b      	ldr	r3, [r7, #4]
340095a0:	691b      	ldr	r3, [r3, #16]
340095a2:	2b04      	cmp	r3, #4
340095a4:	d010      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
340095a6:	687b      	ldr	r3, [r7, #4]
340095a8:	691b      	ldr	r3, [r3, #16]
340095aa:	2b05      	cmp	r3, #5
340095ac:	d00c      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
340095ae:	687b      	ldr	r3, [r7, #4]
340095b0:	691b      	ldr	r3, [r3, #16]
340095b2:	2b06      	cmp	r3, #6
340095b4:	d008      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
340095b6:	687b      	ldr	r3, [r7, #4]
340095b8:	691b      	ldr	r3, [r3, #16]
340095ba:	2b07      	cmp	r3, #7
340095bc:	d004      	beq.n	340095c8 <HAL_RCC_ClockConfig+0x7c>
340095be:	f240 3185 	movw	r1, #901	@ 0x385
340095c2:	486b      	ldr	r0, [pc, #428]	@ (34009770 <HAL_RCC_ClockConfig+0x224>)
340095c4:	f7f8 f804 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
340095c8:	687b      	ldr	r3, [r7, #4]
340095ca:	691a      	ldr	r2, [r3, #16]
340095cc:	4b69      	ldr	r3, [pc, #420]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340095d0:	f003 0307 	and.w	r3, r3, #7
340095d4:	429a      	cmp	r2, r3
340095d6:	d908      	bls.n	340095ea <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
340095d8:	4b66      	ldr	r3, [pc, #408]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340095dc:	f023 0207 	bic.w	r2, r3, #7
340095e0:	687b      	ldr	r3, [r7, #4]
340095e2:	691b      	ldr	r3, [r3, #16]
340095e4:	4963      	ldr	r1, [pc, #396]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340095e6:	4313      	orrs	r3, r2
340095e8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340095ea:	687b      	ldr	r3, [r7, #4]
340095ec:	681b      	ldr	r3, [r3, #0]
340095ee:	f003 0310 	and.w	r3, r3, #16
340095f2:	2b00      	cmp	r3, #0
340095f4:	d035      	beq.n	34009662 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340095f6:	687b      	ldr	r3, [r7, #4]
340095f8:	695b      	ldr	r3, [r3, #20]
340095fa:	2b00      	cmp	r3, #0
340095fc:	d020      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
340095fe:	687b      	ldr	r3, [r7, #4]
34009600:	695b      	ldr	r3, [r3, #20]
34009602:	2b10      	cmp	r3, #16
34009604:	d01c      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
34009606:	687b      	ldr	r3, [r7, #4]
34009608:	695b      	ldr	r3, [r3, #20]
3400960a:	2b20      	cmp	r3, #32
3400960c:	d018      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
3400960e:	687b      	ldr	r3, [r7, #4]
34009610:	695b      	ldr	r3, [r3, #20]
34009612:	2b30      	cmp	r3, #48	@ 0x30
34009614:	d014      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
34009616:	687b      	ldr	r3, [r7, #4]
34009618:	695b      	ldr	r3, [r3, #20]
3400961a:	2b40      	cmp	r3, #64	@ 0x40
3400961c:	d010      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
3400961e:	687b      	ldr	r3, [r7, #4]
34009620:	695b      	ldr	r3, [r3, #20]
34009622:	2b50      	cmp	r3, #80	@ 0x50
34009624:	d00c      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
34009626:	687b      	ldr	r3, [r7, #4]
34009628:	695b      	ldr	r3, [r3, #20]
3400962a:	2b60      	cmp	r3, #96	@ 0x60
3400962c:	d008      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
3400962e:	687b      	ldr	r3, [r7, #4]
34009630:	695b      	ldr	r3, [r3, #20]
34009632:	2b70      	cmp	r3, #112	@ 0x70
34009634:	d004      	beq.n	34009640 <HAL_RCC_ClockConfig+0xf4>
34009636:	f240 318f 	movw	r1, #911	@ 0x38f
3400963a:	484d      	ldr	r0, [pc, #308]	@ (34009770 <HAL_RCC_ClockConfig+0x224>)
3400963c:	f7f7 ffc8 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34009640:	687b      	ldr	r3, [r7, #4]
34009642:	695a      	ldr	r2, [r3, #20]
34009644:	4b4b      	ldr	r3, [pc, #300]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
34009646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3400964c:	429a      	cmp	r2, r3
3400964e:	d908      	bls.n	34009662 <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34009650:	4b48      	ldr	r3, [pc, #288]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
34009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34009658:	687b      	ldr	r3, [r7, #4]
3400965a:	695b      	ldr	r3, [r3, #20]
3400965c:	4945      	ldr	r1, [pc, #276]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
3400965e:	4313      	orrs	r3, r2
34009660:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34009662:	687b      	ldr	r3, [r7, #4]
34009664:	681b      	ldr	r3, [r3, #0]
34009666:	f003 0320 	and.w	r3, r3, #32
3400966a:	2b00      	cmp	r3, #0
3400966c:	d03c      	beq.n	340096e8 <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3400966e:	687b      	ldr	r3, [r7, #4]
34009670:	699b      	ldr	r3, [r3, #24]
34009672:	2b00      	cmp	r3, #0
34009674:	d027      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
34009676:	687b      	ldr	r3, [r7, #4]
34009678:	699b      	ldr	r3, [r3, #24]
3400967a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400967e:	d022      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
34009680:	687b      	ldr	r3, [r7, #4]
34009682:	699b      	ldr	r3, [r3, #24]
34009684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009688:	d01d      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
3400968a:	687b      	ldr	r3, [r7, #4]
3400968c:	699b      	ldr	r3, [r3, #24]
3400968e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009692:	d018      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
34009694:	687b      	ldr	r3, [r7, #4]
34009696:	699b      	ldr	r3, [r3, #24]
34009698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3400969c:	d013      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
3400969e:	687b      	ldr	r3, [r7, #4]
340096a0:	699b      	ldr	r3, [r3, #24]
340096a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
340096a6:	d00e      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
340096a8:	687b      	ldr	r3, [r7, #4]
340096aa:	699b      	ldr	r3, [r3, #24]
340096ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
340096b0:	d009      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
340096b2:	687b      	ldr	r3, [r7, #4]
340096b4:	699b      	ldr	r3, [r3, #24]
340096b6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
340096ba:	d004      	beq.n	340096c6 <HAL_RCC_ClockConfig+0x17a>
340096bc:	f240 3199 	movw	r1, #921	@ 0x399
340096c0:	482b      	ldr	r0, [pc, #172]	@ (34009770 <HAL_RCC_ClockConfig+0x224>)
340096c2:	f7f7 ff85 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
340096c6:	687b      	ldr	r3, [r7, #4]
340096c8:	699a      	ldr	r2, [r3, #24]
340096ca:	4b2a      	ldr	r3, [pc, #168]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340096cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340096ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
340096d2:	429a      	cmp	r2, r3
340096d4:	d908      	bls.n	340096e8 <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
340096d6:	4b27      	ldr	r3, [pc, #156]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340096da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
340096de:	687b      	ldr	r3, [r7, #4]
340096e0:	699b      	ldr	r3, [r3, #24]
340096e2:	4924      	ldr	r1, [pc, #144]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
340096e4:	4313      	orrs	r3, r2
340096e6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
340096e8:	687b      	ldr	r3, [r7, #4]
340096ea:	681b      	ldr	r3, [r3, #0]
340096ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340096f0:	2b00      	cmp	r3, #0
340096f2:	d041      	beq.n	34009778 <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
340096f4:	687b      	ldr	r3, [r7, #4]
340096f6:	69db      	ldr	r3, [r3, #28]
340096f8:	2b00      	cmp	r3, #0
340096fa:	d027      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
340096fc:	687b      	ldr	r3, [r7, #4]
340096fe:	69db      	ldr	r3, [r3, #28]
34009700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34009704:	d022      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
34009706:	687b      	ldr	r3, [r7, #4]
34009708:	69db      	ldr	r3, [r3, #28]
3400970a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400970e:	d01d      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
34009710:	687b      	ldr	r3, [r7, #4]
34009712:	69db      	ldr	r3, [r3, #28]
34009714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009718:	d018      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
3400971a:	687b      	ldr	r3, [r7, #4]
3400971c:	69db      	ldr	r3, [r3, #28]
3400971e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009722:	d013      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
34009724:	687b      	ldr	r3, [r7, #4]
34009726:	69db      	ldr	r3, [r3, #28]
34009728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400972c:	d00e      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
3400972e:	687b      	ldr	r3, [r7, #4]
34009730:	69db      	ldr	r3, [r3, #28]
34009732:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009736:	d009      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
34009738:	687b      	ldr	r3, [r7, #4]
3400973a:	69db      	ldr	r3, [r3, #28]
3400973c:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009740:	d004      	beq.n	3400974c <HAL_RCC_ClockConfig+0x200>
34009742:	f240 31a3 	movw	r1, #931	@ 0x3a3
34009746:	480a      	ldr	r0, [pc, #40]	@ (34009770 <HAL_RCC_ClockConfig+0x224>)
34009748:	f7f7 ff42 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3400974c:	687b      	ldr	r3, [r7, #4]
3400974e:	69da      	ldr	r2, [r3, #28]
34009750:	4b08      	ldr	r3, [pc, #32]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
34009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009754:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34009758:	429a      	cmp	r2, r3
3400975a:	d90d      	bls.n	34009778 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3400975c:	4b05      	ldr	r3, [pc, #20]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
3400975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009760:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34009764:	687b      	ldr	r3, [r7, #4]
34009766:	69db      	ldr	r3, [r3, #28]
34009768:	4902      	ldr	r1, [pc, #8]	@ (34009774 <HAL_RCC_ClockConfig+0x228>)
3400976a:	4313      	orrs	r3, r2
3400976c:	624b      	str	r3, [r1, #36]	@ 0x24
3400976e:	e003      	b.n	34009778 <HAL_RCC_ClockConfig+0x22c>
34009770:	3401d650 	.word	0x3401d650
34009774:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34009778:	687b      	ldr	r3, [r7, #4]
3400977a:	681b      	ldr	r3, [r3, #0]
3400977c:	f003 0304 	and.w	r3, r3, #4
34009780:	2b00      	cmp	r3, #0
34009782:	d03c      	beq.n	340097fe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34009784:	687b      	ldr	r3, [r7, #4]
34009786:	68db      	ldr	r3, [r3, #12]
34009788:	2b00      	cmp	r3, #0
3400978a:	d027      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
3400978c:	687b      	ldr	r3, [r7, #4]
3400978e:	68db      	ldr	r3, [r3, #12]
34009790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34009794:	d022      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
34009796:	687b      	ldr	r3, [r7, #4]
34009798:	68db      	ldr	r3, [r3, #12]
3400979a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400979e:	d01d      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097a0:	687b      	ldr	r3, [r7, #4]
340097a2:	68db      	ldr	r3, [r3, #12]
340097a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340097a8:	d018      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097aa:	687b      	ldr	r3, [r7, #4]
340097ac:	68db      	ldr	r3, [r3, #12]
340097ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340097b2:	d013      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097b4:	687b      	ldr	r3, [r7, #4]
340097b6:	68db      	ldr	r3, [r3, #12]
340097b8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
340097bc:	d00e      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097be:	687b      	ldr	r3, [r7, #4]
340097c0:	68db      	ldr	r3, [r3, #12]
340097c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
340097c6:	d009      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097c8:	687b      	ldr	r3, [r7, #4]
340097ca:	68db      	ldr	r3, [r3, #12]
340097cc:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
340097d0:	d004      	beq.n	340097dc <HAL_RCC_ClockConfig+0x290>
340097d2:	f240 31ad 	movw	r1, #941	@ 0x3ad
340097d6:	4874      	ldr	r0, [pc, #464]	@ (340099a8 <HAL_RCC_ClockConfig+0x45c>)
340097d8:	f7f7 fefa 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
340097dc:	687b      	ldr	r3, [r7, #4]
340097de:	68da      	ldr	r2, [r3, #12]
340097e0:	4b72      	ldr	r3, [pc, #456]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
340097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340097e4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340097e8:	429a      	cmp	r2, r3
340097ea:	d908      	bls.n	340097fe <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340097ec:	4b6f      	ldr	r3, [pc, #444]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
340097ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340097f0:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340097f4:	687b      	ldr	r3, [r7, #4]
340097f6:	68db      	ldr	r3, [r3, #12]
340097f8:	496c      	ldr	r1, [pc, #432]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
340097fa:	4313      	orrs	r3, r2
340097fc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
340097fe:	687b      	ldr	r3, [r7, #4]
34009800:	681b      	ldr	r3, [r3, #0]
34009802:	f003 0301 	and.w	r3, r3, #1
34009806:	2b00      	cmp	r3, #0
34009808:	f000 80a2 	beq.w	34009950 <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
3400980c:	687b      	ldr	r3, [r7, #4]
3400980e:	685b      	ldr	r3, [r3, #4]
34009810:	2b00      	cmp	r3, #0
34009812:	d013      	beq.n	3400983c <HAL_RCC_ClockConfig+0x2f0>
34009814:	687b      	ldr	r3, [r7, #4]
34009816:	685b      	ldr	r3, [r3, #4]
34009818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400981c:	d00e      	beq.n	3400983c <HAL_RCC_ClockConfig+0x2f0>
3400981e:	687b      	ldr	r3, [r7, #4]
34009820:	685b      	ldr	r3, [r3, #4]
34009822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009826:	d009      	beq.n	3400983c <HAL_RCC_ClockConfig+0x2f0>
34009828:	687b      	ldr	r3, [r7, #4]
3400982a:	685b      	ldr	r3, [r3, #4]
3400982c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009830:	d004      	beq.n	3400983c <HAL_RCC_ClockConfig+0x2f0>
34009832:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34009836:	485c      	ldr	r0, [pc, #368]	@ (340099a8 <HAL_RCC_ClockConfig+0x45c>)
34009838:	f7f7 feca 	bl	340015d0 <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
3400983c:	687b      	ldr	r3, [r7, #4]
3400983e:	685b      	ldr	r3, [r3, #4]
34009840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009844:	d106      	bne.n	34009854 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34009846:	f7fe fee7 	bl	34008618 <LL_RCC_HSE_IsReady>
3400984a:	4603      	mov	r3, r0
3400984c:	2b00      	cmp	r3, #0
3400984e:	d15a      	bne.n	34009906 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34009850:	2301      	movs	r3, #1
34009852:	e2f2      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34009854:	687b      	ldr	r3, [r7, #4]
34009856:	685b      	ldr	r3, [r3, #4]
34009858:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400985c:	d140      	bne.n	340098e0 <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
3400985e:	687b      	ldr	r3, [r7, #4]
34009860:	6a1b      	ldr	r3, [r3, #32]
34009862:	2b00      	cmp	r3, #0
34009864:	d013      	beq.n	3400988e <HAL_RCC_ClockConfig+0x342>
34009866:	687b      	ldr	r3, [r7, #4]
34009868:	6a1b      	ldr	r3, [r3, #32]
3400986a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400986e:	d00e      	beq.n	3400988e <HAL_RCC_ClockConfig+0x342>
34009870:	687b      	ldr	r3, [r7, #4]
34009872:	6a1b      	ldr	r3, [r3, #32]
34009874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009878:	d009      	beq.n	3400988e <HAL_RCC_ClockConfig+0x342>
3400987a:	687b      	ldr	r3, [r7, #4]
3400987c:	6a1b      	ldr	r3, [r3, #32]
3400987e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009882:	d004      	beq.n	3400988e <HAL_RCC_ClockConfig+0x342>
34009884:	f240 31c7 	movw	r1, #967	@ 0x3c7
34009888:	4847      	ldr	r0, [pc, #284]	@ (340099a8 <HAL_RCC_ClockConfig+0x45c>)
3400988a:	f7f7 fea1 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
3400988e:	687b      	ldr	r3, [r7, #4]
34009890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009892:	2b00      	cmp	r3, #0
34009894:	d004      	beq.n	340098a0 <HAL_RCC_ClockConfig+0x354>
34009896:	687b      	ldr	r3, [r7, #4]
34009898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400989a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400989e:	d904      	bls.n	340098aa <HAL_RCC_ClockConfig+0x35e>
340098a0:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
340098a4:	4840      	ldr	r0, [pc, #256]	@ (340099a8 <HAL_RCC_ClockConfig+0x45c>)
340098a6:	f7f7 fe93 	bl	340015d0 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
340098aa:	f7ff f8d7 	bl	34008a5c <LL_RCC_IC1_GetSource>
340098ae:	4602      	mov	r2, r0
340098b0:	687b      	ldr	r3, [r7, #4]
340098b2:	6a1b      	ldr	r3, [r3, #32]
340098b4:	4619      	mov	r1, r3
340098b6:	4610      	mov	r0, r2
340098b8:	f000 fe4a 	bl	3400a550 <RCC_IC_CheckPLLSources>
340098bc:	4603      	mov	r3, r0
340098be:	2b01      	cmp	r3, #1
340098c0:	d001      	beq.n	340098c6 <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
340098c2:	2301      	movs	r3, #1
340098c4:	e2b9      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
340098c6:	687b      	ldr	r3, [r7, #4]
340098c8:	6a1a      	ldr	r2, [r3, #32]
340098ca:	687b      	ldr	r3, [r7, #4]
340098cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340098ce:	3b01      	subs	r3, #1
340098d0:	041b      	lsls	r3, r3, #16
340098d2:	4936      	ldr	r1, [pc, #216]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
340098d4:	4313      	orrs	r3, r2
340098d6:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
340098da:	f7ff f8b1 	bl	34008a40 <LL_RCC_IC1_Enable>
340098de:	e012      	b.n	34009906 <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
340098e0:	687b      	ldr	r3, [r7, #4]
340098e2:	685b      	ldr	r3, [r3, #4]
340098e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340098e8:	d106      	bne.n	340098f8 <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
340098ea:	f7fe ff2d 	bl	34008748 <LL_RCC_MSI_IsReady>
340098ee:	4603      	mov	r3, r0
340098f0:	2b00      	cmp	r3, #0
340098f2:	d108      	bne.n	34009906 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340098f4:	2301      	movs	r3, #1
340098f6:	e2a0      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
340098f8:	f7fe febe 	bl	34008678 <LL_RCC_HSI_IsReady>
340098fc:	4603      	mov	r3, r0
340098fe:	2b00      	cmp	r3, #0
34009900:	d101      	bne.n	34009906 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34009902:	2301      	movs	r3, #1
34009904:	e299      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34009906:	4b29      	ldr	r3, [pc, #164]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
34009908:	6a1b      	ldr	r3, [r3, #32]
3400990a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
3400990e:	687b      	ldr	r3, [r7, #4]
34009910:	685b      	ldr	r3, [r3, #4]
34009912:	4926      	ldr	r1, [pc, #152]	@ (340099ac <HAL_RCC_ClockConfig+0x460>)
34009914:	4313      	orrs	r3, r2
34009916:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34009918:	f7fc fb88 	bl	3400602c <HAL_GetTick>
3400991c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
3400991e:	e00a      	b.n	34009936 <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34009920:	f7fc fb84 	bl	3400602c <HAL_GetTick>
34009924:	4602      	mov	r2, r0
34009926:	68fb      	ldr	r3, [r7, #12]
34009928:	1ad3      	subs	r3, r2, r3
3400992a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400992e:	4293      	cmp	r3, r2
34009930:	d901      	bls.n	34009936 <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
34009932:	2303      	movs	r3, #3
34009934:	e281      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34009936:	f7fe ff8f 	bl	34008858 <LL_RCC_GetCpuClkSource>
3400993a:	4602      	mov	r2, r0
3400993c:	687b      	ldr	r3, [r7, #4]
3400993e:	685b      	ldr	r3, [r3, #4]
34009940:	011b      	lsls	r3, r3, #4
34009942:	429a      	cmp	r2, r3
34009944:	d1ec      	bne.n	34009920 <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34009946:	f000 fa83 	bl	34009e50 <HAL_RCC_GetCpuClockFreq>
3400994a:	4603      	mov	r3, r0
3400994c:	4a18      	ldr	r2, [pc, #96]	@ (340099b0 <HAL_RCC_ClockConfig+0x464>)
3400994e:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34009950:	687b      	ldr	r3, [r7, #4]
34009952:	681b      	ldr	r3, [r3, #0]
34009954:	f003 0302 	and.w	r3, r3, #2
34009958:	2b00      	cmp	r3, #0
3400995a:	f000 8127 	beq.w	34009bac <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
3400995e:	687b      	ldr	r3, [r7, #4]
34009960:	689b      	ldr	r3, [r3, #8]
34009962:	2b00      	cmp	r3, #0
34009964:	d013      	beq.n	3400998e <HAL_RCC_ClockConfig+0x442>
34009966:	687b      	ldr	r3, [r7, #4]
34009968:	689b      	ldr	r3, [r3, #8]
3400996a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400996e:	d00e      	beq.n	3400998e <HAL_RCC_ClockConfig+0x442>
34009970:	687b      	ldr	r3, [r7, #4]
34009972:	689b      	ldr	r3, [r3, #8]
34009974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009978:	d009      	beq.n	3400998e <HAL_RCC_ClockConfig+0x442>
3400997a:	687b      	ldr	r3, [r7, #4]
3400997c:	689b      	ldr	r3, [r3, #8]
3400997e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34009982:	d004      	beq.n	3400998e <HAL_RCC_ClockConfig+0x442>
34009984:	f240 4101 	movw	r1, #1025	@ 0x401
34009988:	4807      	ldr	r0, [pc, #28]	@ (340099a8 <HAL_RCC_ClockConfig+0x45c>)
3400998a:	f7f7 fe21 	bl	340015d0 <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3400998e:	687b      	ldr	r3, [r7, #4]
34009990:	689b      	ldr	r3, [r3, #8]
34009992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34009996:	d10d      	bne.n	340099b4 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34009998:	f7fe fe3e 	bl	34008618 <LL_RCC_HSE_IsReady>
3400999c:	4603      	mov	r3, r0
3400999e:	2b00      	cmp	r3, #0
340099a0:	f040 80e0 	bne.w	34009b64 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
340099a4:	2301      	movs	r3, #1
340099a6:	e248      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
340099a8:	3401d650 	.word	0x3401d650
340099ac:	56028000 	.word	0x56028000
340099b0:	3401e754 	.word	0x3401e754
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
340099b4:	687b      	ldr	r3, [r7, #4]
340099b6:	689b      	ldr	r3, [r3, #8]
340099b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340099bc:	f040 80c0 	bne.w	34009b40 <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
340099c0:	687b      	ldr	r3, [r7, #4]
340099c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340099c4:	2b00      	cmp	r3, #0
340099c6:	d013      	beq.n	340099f0 <HAL_RCC_ClockConfig+0x4a4>
340099c8:	687b      	ldr	r3, [r7, #4]
340099ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340099cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340099d0:	d00e      	beq.n	340099f0 <HAL_RCC_ClockConfig+0x4a4>
340099d2:	687b      	ldr	r3, [r7, #4]
340099d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340099d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340099da:	d009      	beq.n	340099f0 <HAL_RCC_ClockConfig+0x4a4>
340099dc:	687b      	ldr	r3, [r7, #4]
340099de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340099e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340099e4:	d004      	beq.n	340099f0 <HAL_RCC_ClockConfig+0x4a4>
340099e6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
340099ea:	486a      	ldr	r0, [pc, #424]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
340099ec:	f7f7 fdf0 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
340099f0:	687b      	ldr	r3, [r7, #4]
340099f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340099f4:	2b00      	cmp	r3, #0
340099f6:	d004      	beq.n	34009a02 <HAL_RCC_ClockConfig+0x4b6>
340099f8:	687b      	ldr	r3, [r7, #4]
340099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340099fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009a00:	d904      	bls.n	34009a0c <HAL_RCC_ClockConfig+0x4c0>
34009a02:	f240 4111 	movw	r1, #1041	@ 0x411
34009a06:	4863      	ldr	r0, [pc, #396]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
34009a08:	f7f7 fde2 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34009a0c:	687b      	ldr	r3, [r7, #4]
34009a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34009a10:	2b00      	cmp	r3, #0
34009a12:	d013      	beq.n	34009a3c <HAL_RCC_ClockConfig+0x4f0>
34009a14:	687b      	ldr	r3, [r7, #4]
34009a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34009a18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009a1c:	d00e      	beq.n	34009a3c <HAL_RCC_ClockConfig+0x4f0>
34009a1e:	687b      	ldr	r3, [r7, #4]
34009a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34009a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a26:	d009      	beq.n	34009a3c <HAL_RCC_ClockConfig+0x4f0>
34009a28:	687b      	ldr	r3, [r7, #4]
34009a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34009a2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009a30:	d004      	beq.n	34009a3c <HAL_RCC_ClockConfig+0x4f0>
34009a32:	f240 4112 	movw	r1, #1042	@ 0x412
34009a36:	4857      	ldr	r0, [pc, #348]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
34009a38:	f7f7 fdca 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34009a3c:	687b      	ldr	r3, [r7, #4]
34009a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34009a40:	2b00      	cmp	r3, #0
34009a42:	d004      	beq.n	34009a4e <HAL_RCC_ClockConfig+0x502>
34009a44:	687b      	ldr	r3, [r7, #4]
34009a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34009a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009a4c:	d904      	bls.n	34009a58 <HAL_RCC_ClockConfig+0x50c>
34009a4e:	f240 4113 	movw	r1, #1043	@ 0x413
34009a52:	4850      	ldr	r0, [pc, #320]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
34009a54:	f7f7 fdbc 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34009a58:	687b      	ldr	r3, [r7, #4]
34009a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34009a5c:	2b00      	cmp	r3, #0
34009a5e:	d013      	beq.n	34009a88 <HAL_RCC_ClockConfig+0x53c>
34009a60:	687b      	ldr	r3, [r7, #4]
34009a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34009a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009a68:	d00e      	beq.n	34009a88 <HAL_RCC_ClockConfig+0x53c>
34009a6a:	687b      	ldr	r3, [r7, #4]
34009a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34009a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a72:	d009      	beq.n	34009a88 <HAL_RCC_ClockConfig+0x53c>
34009a74:	687b      	ldr	r3, [r7, #4]
34009a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34009a78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009a7c:	d004      	beq.n	34009a88 <HAL_RCC_ClockConfig+0x53c>
34009a7e:	f240 4114 	movw	r1, #1044	@ 0x414
34009a82:	4844      	ldr	r0, [pc, #272]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
34009a84:	f7f7 fda4 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34009a88:	687b      	ldr	r3, [r7, #4]
34009a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34009a8c:	2b00      	cmp	r3, #0
34009a8e:	d004      	beq.n	34009a9a <HAL_RCC_ClockConfig+0x54e>
34009a90:	687b      	ldr	r3, [r7, #4]
34009a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34009a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009a98:	d904      	bls.n	34009aa4 <HAL_RCC_ClockConfig+0x558>
34009a9a:	f240 4115 	movw	r1, #1045	@ 0x415
34009a9e:	483d      	ldr	r0, [pc, #244]	@ (34009b94 <HAL_RCC_ClockConfig+0x648>)
34009aa0:	f7f7 fd96 	bl	340015d0 <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34009aa4:	f7fe fff8 	bl	34008a98 <LL_RCC_IC2_GetSource>
34009aa8:	4602      	mov	r2, r0
34009aaa:	687b      	ldr	r3, [r7, #4]
34009aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34009aae:	4619      	mov	r1, r3
34009ab0:	4610      	mov	r0, r2
34009ab2:	f000 fd4d 	bl	3400a550 <RCC_IC_CheckPLLSources>
34009ab6:	4603      	mov	r3, r0
34009ab8:	2b01      	cmp	r3, #1
34009aba:	d001      	beq.n	34009ac0 <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
34009abc:	2301      	movs	r3, #1
34009abe:	e1bc      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34009ac0:	f7ff f808 	bl	34008ad4 <LL_RCC_IC6_GetSource>
34009ac4:	4602      	mov	r2, r0
34009ac6:	687b      	ldr	r3, [r7, #4]
34009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34009aca:	4619      	mov	r1, r3
34009acc:	4610      	mov	r0, r2
34009ace:	f000 fd3f 	bl	3400a550 <RCC_IC_CheckPLLSources>
34009ad2:	4603      	mov	r3, r0
34009ad4:	2b01      	cmp	r3, #1
34009ad6:	d001      	beq.n	34009adc <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
34009ad8:	2301      	movs	r3, #1
34009ada:	e1ae      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34009adc:	f7ff f808 	bl	34008af0 <LL_RCC_IC11_GetSource>
34009ae0:	4602      	mov	r2, r0
34009ae2:	687b      	ldr	r3, [r7, #4]
34009ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34009ae6:	4619      	mov	r1, r3
34009ae8:	4610      	mov	r0, r2
34009aea:	f000 fd31 	bl	3400a550 <RCC_IC_CheckPLLSources>
34009aee:	4603      	mov	r3, r0
34009af0:	2b01      	cmp	r3, #1
34009af2:	d001      	beq.n	34009af8 <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
34009af4:	2301      	movs	r3, #1
34009af6:	e1a0      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34009af8:	687b      	ldr	r3, [r7, #4]
34009afa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34009afc:	687b      	ldr	r3, [r7, #4]
34009afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34009b00:	3b01      	subs	r3, #1
34009b02:	041b      	lsls	r3, r3, #16
34009b04:	4924      	ldr	r1, [pc, #144]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b06:	4313      	orrs	r3, r2
34009b08:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34009b0c:	687b      	ldr	r3, [r7, #4]
34009b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34009b10:	687b      	ldr	r3, [r7, #4]
34009b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34009b14:	3b01      	subs	r3, #1
34009b16:	041b      	lsls	r3, r3, #16
34009b18:	491f      	ldr	r1, [pc, #124]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b1a:	4313      	orrs	r3, r2
34009b1c:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34009b20:	687b      	ldr	r3, [r7, #4]
34009b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34009b24:	687b      	ldr	r3, [r7, #4]
34009b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34009b28:	3b01      	subs	r3, #1
34009b2a:	041b      	lsls	r3, r3, #16
34009b2c:	491a      	ldr	r1, [pc, #104]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b2e:	4313      	orrs	r3, r2
34009b30:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34009b34:	4b18      	ldr	r3, [pc, #96]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b36:	f240 4222 	movw	r2, #1058	@ 0x422
34009b3a:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34009b3e:	e011      	b.n	34009b64 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34009b40:	687b      	ldr	r3, [r7, #4]
34009b42:	689b      	ldr	r3, [r3, #8]
34009b44:	2b00      	cmp	r3, #0
34009b46:	d106      	bne.n	34009b56 <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34009b48:	f7fe fd96 	bl	34008678 <LL_RCC_HSI_IsReady>
34009b4c:	4603      	mov	r3, r0
34009b4e:	2b00      	cmp	r3, #0
34009b50:	d108      	bne.n	34009b64 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34009b52:	2301      	movs	r3, #1
34009b54:	e171      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34009b56:	f7fe fdf7 	bl	34008748 <LL_RCC_MSI_IsReady>
34009b5a:	4603      	mov	r3, r0
34009b5c:	2b00      	cmp	r3, #0
34009b5e:	d101      	bne.n	34009b64 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34009b60:	2301      	movs	r3, #1
34009b62:	e16a      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34009b64:	4b0c      	ldr	r3, [pc, #48]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b66:	6a1b      	ldr	r3, [r3, #32]
34009b68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34009b6c:	687b      	ldr	r3, [r7, #4]
34009b6e:	689b      	ldr	r3, [r3, #8]
34009b70:	4909      	ldr	r1, [pc, #36]	@ (34009b98 <HAL_RCC_ClockConfig+0x64c>)
34009b72:	4313      	orrs	r3, r2
34009b74:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34009b76:	f7fc fa59 	bl	3400602c <HAL_GetTick>
34009b7a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34009b7c:	e00e      	b.n	34009b9c <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34009b7e:	f7fc fa55 	bl	3400602c <HAL_GetTick>
34009b82:	4602      	mov	r2, r0
34009b84:	68fb      	ldr	r3, [r7, #12]
34009b86:	1ad3      	subs	r3, r2, r3
34009b88:	f241 3288 	movw	r2, #5000	@ 0x1388
34009b8c:	4293      	cmp	r3, r2
34009b8e:	d905      	bls.n	34009b9c <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
34009b90:	2303      	movs	r3, #3
34009b92:	e152      	b.n	34009e3a <HAL_RCC_ClockConfig+0x8ee>
34009b94:	3401d650 	.word	0x3401d650
34009b98:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34009b9c:	f7fe fe6a 	bl	34008874 <LL_RCC_GetSysClkSource>
34009ba0:	4602      	mov	r2, r0
34009ba2:	687b      	ldr	r3, [r7, #4]
34009ba4:	689b      	ldr	r3, [r3, #8]
34009ba6:	011b      	lsls	r3, r3, #4
34009ba8:	429a      	cmp	r2, r3
34009baa:	d1e8      	bne.n	34009b7e <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34009bac:	687b      	ldr	r3, [r7, #4]
34009bae:	681b      	ldr	r3, [r3, #0]
34009bb0:	f003 0304 	and.w	r3, r3, #4
34009bb4:	2b00      	cmp	r3, #0
34009bb6:	d03c      	beq.n	34009c32 <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34009bb8:	687b      	ldr	r3, [r7, #4]
34009bba:	68db      	ldr	r3, [r3, #12]
34009bbc:	2b00      	cmp	r3, #0
34009bbe:	d027      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bc0:	687b      	ldr	r3, [r7, #4]
34009bc2:	68db      	ldr	r3, [r3, #12]
34009bc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34009bc8:	d022      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bca:	687b      	ldr	r3, [r7, #4]
34009bcc:	68db      	ldr	r3, [r3, #12]
34009bce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009bd2:	d01d      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bd4:	687b      	ldr	r3, [r7, #4]
34009bd6:	68db      	ldr	r3, [r3, #12]
34009bd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009bdc:	d018      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bde:	687b      	ldr	r3, [r7, #4]
34009be0:	68db      	ldr	r3, [r3, #12]
34009be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34009be6:	d013      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009be8:	687b      	ldr	r3, [r7, #4]
34009bea:	68db      	ldr	r3, [r3, #12]
34009bec:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
34009bf0:	d00e      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bf2:	687b      	ldr	r3, [r7, #4]
34009bf4:	68db      	ldr	r3, [r3, #12]
34009bf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34009bfa:	d009      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009bfc:	687b      	ldr	r3, [r7, #4]
34009bfe:	68db      	ldr	r3, [r3, #12]
34009c00:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
34009c04:	d004      	beq.n	34009c10 <HAL_RCC_ClockConfig+0x6c4>
34009c06:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34009c0a:	488e      	ldr	r0, [pc, #568]	@ (34009e44 <HAL_RCC_ClockConfig+0x8f8>)
34009c0c:	f7f7 fce0 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34009c10:	687b      	ldr	r3, [r7, #4]
34009c12:	68da      	ldr	r2, [r3, #12]
34009c14:	4b8c      	ldr	r3, [pc, #560]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009c18:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34009c1c:	429a      	cmp	r2, r3
34009c1e:	d208      	bcs.n	34009c32 <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34009c20:	4b89      	ldr	r3, [pc, #548]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009c24:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34009c28:	687b      	ldr	r3, [r7, #4]
34009c2a:	68db      	ldr	r3, [r3, #12]
34009c2c:	4986      	ldr	r1, [pc, #536]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009c2e:	4313      	orrs	r3, r2
34009c30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34009c32:	687b      	ldr	r3, [r7, #4]
34009c34:	681b      	ldr	r3, [r3, #0]
34009c36:	f003 0308 	and.w	r3, r3, #8
34009c3a:	2b00      	cmp	r3, #0
34009c3c:	d035      	beq.n	34009caa <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34009c3e:	687b      	ldr	r3, [r7, #4]
34009c40:	691b      	ldr	r3, [r3, #16]
34009c42:	2b00      	cmp	r3, #0
34009c44:	d020      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c46:	687b      	ldr	r3, [r7, #4]
34009c48:	691b      	ldr	r3, [r3, #16]
34009c4a:	2b01      	cmp	r3, #1
34009c4c:	d01c      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c4e:	687b      	ldr	r3, [r7, #4]
34009c50:	691b      	ldr	r3, [r3, #16]
34009c52:	2b02      	cmp	r3, #2
34009c54:	d018      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c56:	687b      	ldr	r3, [r7, #4]
34009c58:	691b      	ldr	r3, [r3, #16]
34009c5a:	2b03      	cmp	r3, #3
34009c5c:	d014      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c5e:	687b      	ldr	r3, [r7, #4]
34009c60:	691b      	ldr	r3, [r3, #16]
34009c62:	2b04      	cmp	r3, #4
34009c64:	d010      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c66:	687b      	ldr	r3, [r7, #4]
34009c68:	691b      	ldr	r3, [r3, #16]
34009c6a:	2b05      	cmp	r3, #5
34009c6c:	d00c      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c6e:	687b      	ldr	r3, [r7, #4]
34009c70:	691b      	ldr	r3, [r3, #16]
34009c72:	2b06      	cmp	r3, #6
34009c74:	d008      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c76:	687b      	ldr	r3, [r7, #4]
34009c78:	691b      	ldr	r3, [r3, #16]
34009c7a:	2b07      	cmp	r3, #7
34009c7c:	d004      	beq.n	34009c88 <HAL_RCC_ClockConfig+0x73c>
34009c7e:	f240 4163 	movw	r1, #1123	@ 0x463
34009c82:	4870      	ldr	r0, [pc, #448]	@ (34009e44 <HAL_RCC_ClockConfig+0x8f8>)
34009c84:	f7f7 fca4 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34009c88:	687b      	ldr	r3, [r7, #4]
34009c8a:	691a      	ldr	r2, [r3, #16]
34009c8c:	4b6e      	ldr	r3, [pc, #440]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009c90:	f003 0307 	and.w	r3, r3, #7
34009c94:	429a      	cmp	r2, r3
34009c96:	d208      	bcs.n	34009caa <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34009c98:	4b6b      	ldr	r3, [pc, #428]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009c9c:	f023 0207 	bic.w	r2, r3, #7
34009ca0:	687b      	ldr	r3, [r7, #4]
34009ca2:	691b      	ldr	r3, [r3, #16]
34009ca4:	4968      	ldr	r1, [pc, #416]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009ca6:	4313      	orrs	r3, r2
34009ca8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34009caa:	687b      	ldr	r3, [r7, #4]
34009cac:	681b      	ldr	r3, [r3, #0]
34009cae:	f003 0310 	and.w	r3, r3, #16
34009cb2:	2b00      	cmp	r3, #0
34009cb4:	d035      	beq.n	34009d22 <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34009cb6:	687b      	ldr	r3, [r7, #4]
34009cb8:	695b      	ldr	r3, [r3, #20]
34009cba:	2b00      	cmp	r3, #0
34009cbc:	d020      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cbe:	687b      	ldr	r3, [r7, #4]
34009cc0:	695b      	ldr	r3, [r3, #20]
34009cc2:	2b10      	cmp	r3, #16
34009cc4:	d01c      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cc6:	687b      	ldr	r3, [r7, #4]
34009cc8:	695b      	ldr	r3, [r3, #20]
34009cca:	2b20      	cmp	r3, #32
34009ccc:	d018      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cce:	687b      	ldr	r3, [r7, #4]
34009cd0:	695b      	ldr	r3, [r3, #20]
34009cd2:	2b30      	cmp	r3, #48	@ 0x30
34009cd4:	d014      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cd6:	687b      	ldr	r3, [r7, #4]
34009cd8:	695b      	ldr	r3, [r3, #20]
34009cda:	2b40      	cmp	r3, #64	@ 0x40
34009cdc:	d010      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cde:	687b      	ldr	r3, [r7, #4]
34009ce0:	695b      	ldr	r3, [r3, #20]
34009ce2:	2b50      	cmp	r3, #80	@ 0x50
34009ce4:	d00c      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009ce6:	687b      	ldr	r3, [r7, #4]
34009ce8:	695b      	ldr	r3, [r3, #20]
34009cea:	2b60      	cmp	r3, #96	@ 0x60
34009cec:	d008      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cee:	687b      	ldr	r3, [r7, #4]
34009cf0:	695b      	ldr	r3, [r3, #20]
34009cf2:	2b70      	cmp	r3, #112	@ 0x70
34009cf4:	d004      	beq.n	34009d00 <HAL_RCC_ClockConfig+0x7b4>
34009cf6:	f240 416d 	movw	r1, #1133	@ 0x46d
34009cfa:	4852      	ldr	r0, [pc, #328]	@ (34009e44 <HAL_RCC_ClockConfig+0x8f8>)
34009cfc:	f7f7 fc68 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34009d00:	687b      	ldr	r3, [r7, #4]
34009d02:	695a      	ldr	r2, [r3, #20]
34009d04:	4b50      	ldr	r3, [pc, #320]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009d08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34009d0c:	429a      	cmp	r2, r3
34009d0e:	d208      	bcs.n	34009d22 <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34009d10:	4b4d      	ldr	r3, [pc, #308]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009d14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34009d18:	687b      	ldr	r3, [r7, #4]
34009d1a:	695b      	ldr	r3, [r3, #20]
34009d1c:	494a      	ldr	r1, [pc, #296]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009d1e:	4313      	orrs	r3, r2
34009d20:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34009d22:	687b      	ldr	r3, [r7, #4]
34009d24:	681b      	ldr	r3, [r3, #0]
34009d26:	f003 0320 	and.w	r3, r3, #32
34009d2a:	2b00      	cmp	r3, #0
34009d2c:	d03c      	beq.n	34009da8 <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34009d2e:	687b      	ldr	r3, [r7, #4]
34009d30:	699b      	ldr	r3, [r3, #24]
34009d32:	2b00      	cmp	r3, #0
34009d34:	d027      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d36:	687b      	ldr	r3, [r7, #4]
34009d38:	699b      	ldr	r3, [r3, #24]
34009d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34009d3e:	d022      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d40:	687b      	ldr	r3, [r7, #4]
34009d42:	699b      	ldr	r3, [r3, #24]
34009d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009d48:	d01d      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d4a:	687b      	ldr	r3, [r7, #4]
34009d4c:	699b      	ldr	r3, [r3, #24]
34009d4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34009d52:	d018      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d54:	687b      	ldr	r3, [r7, #4]
34009d56:	699b      	ldr	r3, [r3, #24]
34009d58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34009d5c:	d013      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d5e:	687b      	ldr	r3, [r7, #4]
34009d60:	699b      	ldr	r3, [r3, #24]
34009d62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34009d66:	d00e      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d68:	687b      	ldr	r3, [r7, #4]
34009d6a:	699b      	ldr	r3, [r3, #24]
34009d6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34009d70:	d009      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d72:	687b      	ldr	r3, [r7, #4]
34009d74:	699b      	ldr	r3, [r3, #24]
34009d76:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34009d7a:	d004      	beq.n	34009d86 <HAL_RCC_ClockConfig+0x83a>
34009d7c:	f240 4177 	movw	r1, #1143	@ 0x477
34009d80:	4830      	ldr	r0, [pc, #192]	@ (34009e44 <HAL_RCC_ClockConfig+0x8f8>)
34009d82:	f7f7 fc25 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34009d86:	687b      	ldr	r3, [r7, #4]
34009d88:	699a      	ldr	r2, [r3, #24]
34009d8a:	4b2f      	ldr	r3, [pc, #188]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009d8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34009d92:	429a      	cmp	r2, r3
34009d94:	d208      	bcs.n	34009da8 <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34009d96:	4b2c      	ldr	r3, [pc, #176]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009d9a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34009d9e:	687b      	ldr	r3, [r7, #4]
34009da0:	699b      	ldr	r3, [r3, #24]
34009da2:	4929      	ldr	r1, [pc, #164]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009da4:	4313      	orrs	r3, r2
34009da6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34009da8:	687b      	ldr	r3, [r7, #4]
34009daa:	681b      	ldr	r3, [r3, #0]
34009dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34009db0:	2b00      	cmp	r3, #0
34009db2:	d03c      	beq.n	34009e2e <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34009db4:	687b      	ldr	r3, [r7, #4]
34009db6:	69db      	ldr	r3, [r3, #28]
34009db8:	2b00      	cmp	r3, #0
34009dba:	d027      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009dbc:	687b      	ldr	r3, [r7, #4]
34009dbe:	69db      	ldr	r3, [r3, #28]
34009dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34009dc4:	d022      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009dc6:	687b      	ldr	r3, [r7, #4]
34009dc8:	69db      	ldr	r3, [r3, #28]
34009dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009dce:	d01d      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009dd0:	687b      	ldr	r3, [r7, #4]
34009dd2:	69db      	ldr	r3, [r3, #28]
34009dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34009dd8:	d018      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009dda:	687b      	ldr	r3, [r7, #4]
34009ddc:	69db      	ldr	r3, [r3, #28]
34009dde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34009de2:	d013      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009de4:	687b      	ldr	r3, [r7, #4]
34009de6:	69db      	ldr	r3, [r3, #28]
34009de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34009dec:	d00e      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009dee:	687b      	ldr	r3, [r7, #4]
34009df0:	69db      	ldr	r3, [r3, #28]
34009df2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34009df6:	d009      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009df8:	687b      	ldr	r3, [r7, #4]
34009dfa:	69db      	ldr	r3, [r3, #28]
34009dfc:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34009e00:	d004      	beq.n	34009e0c <HAL_RCC_ClockConfig+0x8c0>
34009e02:	f240 4181 	movw	r1, #1153	@ 0x481
34009e06:	480f      	ldr	r0, [pc, #60]	@ (34009e44 <HAL_RCC_ClockConfig+0x8f8>)
34009e08:	f7f7 fbe2 	bl	340015d0 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34009e0c:	687b      	ldr	r3, [r7, #4]
34009e0e:	69da      	ldr	r2, [r3, #28]
34009e10:	4b0d      	ldr	r3, [pc, #52]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009e14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34009e18:	429a      	cmp	r2, r3
34009e1a:	d208      	bcs.n	34009e2e <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34009e20:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34009e24:	687b      	ldr	r3, [r7, #4]
34009e26:	69db      	ldr	r3, [r3, #28]
34009e28:	4907      	ldr	r1, [pc, #28]	@ (34009e48 <HAL_RCC_ClockConfig+0x8fc>)
34009e2a:	4313      	orrs	r3, r2
34009e2c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34009e2e:	4b07      	ldr	r3, [pc, #28]	@ (34009e4c <HAL_RCC_ClockConfig+0x900>)
34009e30:	681b      	ldr	r3, [r3, #0]
34009e32:	4618      	mov	r0, r3
34009e34:	f7fc f8b0 	bl	34005f98 <HAL_InitTick>
34009e38:	4603      	mov	r3, r0
}
34009e3a:	4618      	mov	r0, r3
34009e3c:	3710      	adds	r7, #16
34009e3e:	46bd      	mov	sp, r7
34009e40:	bd80      	pop	{r7, pc}
34009e42:	bf00      	nop
34009e44:	3401d650 	.word	0x3401d650
34009e48:	56028000 	.word	0x56028000
34009e4c:	3401e758 	.word	0x3401e758

34009e50 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34009e50:	b580      	push	{r7, lr}
34009e52:	b082      	sub	sp, #8
34009e54:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34009e56:	2300      	movs	r3, #0
34009e58:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34009e5a:	f7fe fcfd 	bl	34008858 <LL_RCC_GetCpuClkSource>
34009e5e:	4603      	mov	r3, r0
34009e60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009e64:	d025      	beq.n	34009eb2 <HAL_RCC_GetCpuClockFreq+0x62>
34009e66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34009e6a:	d860      	bhi.n	34009f2e <HAL_RCC_GetCpuClockFreq+0xde>
34009e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009e70:	d01c      	beq.n	34009eac <HAL_RCC_GetCpuClockFreq+0x5c>
34009e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34009e76:	d85a      	bhi.n	34009f2e <HAL_RCC_GetCpuClockFreq+0xde>
34009e78:	2b00      	cmp	r3, #0
34009e7a:	d003      	beq.n	34009e84 <HAL_RCC_GetCpuClockFreq+0x34>
34009e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34009e80:	d009      	beq.n	34009e96 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34009e82:	e054      	b.n	34009f2e <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009e84:	f7fe fc1e 	bl	340086c4 <LL_RCC_HSI_GetDivider>
34009e88:	4603      	mov	r3, r0
34009e8a:	09db      	lsrs	r3, r3, #7
34009e8c:	4a2b      	ldr	r2, [pc, #172]	@ (34009f3c <HAL_RCC_GetCpuClockFreq+0xec>)
34009e8e:	fa22 f303 	lsr.w	r3, r2, r3
34009e92:	607b      	str	r3, [r7, #4]
      break;
34009e94:	e04c      	b.n	34009f30 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34009e96:	f7fe fc7d 	bl	34008794 <LL_RCC_MSI_GetFrequency>
34009e9a:	4603      	mov	r3, r0
34009e9c:	2b00      	cmp	r3, #0
34009e9e:	d102      	bne.n	34009ea6 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34009ea0:	4b27      	ldr	r3, [pc, #156]	@ (34009f40 <HAL_RCC_GetCpuClockFreq+0xf0>)
34009ea2:	607b      	str	r3, [r7, #4]
      break;
34009ea4:	e044      	b.n	34009f30 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34009ea6:	4b27      	ldr	r3, [pc, #156]	@ (34009f44 <HAL_RCC_GetCpuClockFreq+0xf4>)
34009ea8:	607b      	str	r3, [r7, #4]
      break;
34009eaa:	e041      	b.n	34009f30 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34009eac:	4b26      	ldr	r3, [pc, #152]	@ (34009f48 <HAL_RCC_GetCpuClockFreq+0xf8>)
34009eae:	607b      	str	r3, [r7, #4]
      break;
34009eb0:	e03e      	b.n	34009f30 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34009eb2:	f7fe fde1 	bl	34008a78 <LL_RCC_IC1_GetDivider>
34009eb6:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34009eb8:	f7fe fdd0 	bl	34008a5c <LL_RCC_IC1_GetSource>
34009ebc:	4603      	mov	r3, r0
34009ebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009ec2:	d029      	beq.n	34009f18 <HAL_RCC_GetCpuClockFreq+0xc8>
34009ec4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009ec8:	d82f      	bhi.n	34009f2a <HAL_RCC_GetCpuClockFreq+0xda>
34009eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009ece:	d01a      	beq.n	34009f06 <HAL_RCC_GetCpuClockFreq+0xb6>
34009ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009ed4:	d829      	bhi.n	34009f2a <HAL_RCC_GetCpuClockFreq+0xda>
34009ed6:	2b00      	cmp	r3, #0
34009ed8:	d003      	beq.n	34009ee2 <HAL_RCC_GetCpuClockFreq+0x92>
34009eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009ede:	d009      	beq.n	34009ef4 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34009ee0:	e023      	b.n	34009f2a <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009ee2:	f009 f813 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34009ee6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009ee8:	687a      	ldr	r2, [r7, #4]
34009eea:	683b      	ldr	r3, [r7, #0]
34009eec:	fbb2 f3f3 	udiv	r3, r2, r3
34009ef0:	607b      	str	r3, [r7, #4]
          break;
34009ef2:	e01b      	b.n	34009f2c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009ef4:	f009 f850 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34009ef8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009efa:	687a      	ldr	r2, [r7, #4]
34009efc:	683b      	ldr	r3, [r7, #0]
34009efe:	fbb2 f3f3 	udiv	r3, r2, r3
34009f02:	607b      	str	r3, [r7, #4]
          break;
34009f04:	e012      	b.n	34009f2c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009f06:	f009 f88d 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34009f0a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009f0c:	687a      	ldr	r2, [r7, #4]
34009f0e:	683b      	ldr	r3, [r7, #0]
34009f10:	fbb2 f3f3 	udiv	r3, r2, r3
34009f14:	607b      	str	r3, [r7, #4]
          break;
34009f16:	e009      	b.n	34009f2c <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009f18:	f009 f8ca 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34009f1c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009f1e:	687a      	ldr	r2, [r7, #4]
34009f20:	683b      	ldr	r3, [r7, #0]
34009f22:	fbb2 f3f3 	udiv	r3, r2, r3
34009f26:	607b      	str	r3, [r7, #4]
          break;
34009f28:	e000      	b.n	34009f2c <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34009f2a:	bf00      	nop
      break;
34009f2c:	e000      	b.n	34009f30 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34009f2e:	bf00      	nop
  }

  return frequency;
34009f30:	687b      	ldr	r3, [r7, #4]
}
34009f32:	4618      	mov	r0, r3
34009f34:	3708      	adds	r7, #8
34009f36:	46bd      	mov	sp, r7
34009f38:	bd80      	pop	{r7, pc}
34009f3a:	bf00      	nop
34009f3c:	03d09000 	.word	0x03d09000
34009f40:	003d0900 	.word	0x003d0900
34009f44:	00f42400 	.word	0x00f42400
34009f48:	02dc6c00 	.word	0x02dc6c00

34009f4c <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34009f4c:	b580      	push	{r7, lr}
34009f4e:	b082      	sub	sp, #8
34009f50:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34009f52:	2300      	movs	r3, #0
34009f54:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34009f56:	f7fe fc8d 	bl	34008874 <LL_RCC_GetSysClkSource>
34009f5a:	4603      	mov	r3, r0
34009f5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009f60:	d025      	beq.n	34009fae <HAL_RCC_GetSysClockFreq+0x62>
34009f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009f66:	d860      	bhi.n	3400a02a <HAL_RCC_GetSysClockFreq+0xde>
34009f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009f6c:	d01c      	beq.n	34009fa8 <HAL_RCC_GetSysClockFreq+0x5c>
34009f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009f72:	d85a      	bhi.n	3400a02a <HAL_RCC_GetSysClockFreq+0xde>
34009f74:	2b00      	cmp	r3, #0
34009f76:	d003      	beq.n	34009f80 <HAL_RCC_GetSysClockFreq+0x34>
34009f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009f7c:	d009      	beq.n	34009f92 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34009f7e:	e054      	b.n	3400a02a <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009f80:	f7fe fba0 	bl	340086c4 <LL_RCC_HSI_GetDivider>
34009f84:	4603      	mov	r3, r0
34009f86:	09db      	lsrs	r3, r3, #7
34009f88:	4a2b      	ldr	r2, [pc, #172]	@ (3400a038 <HAL_RCC_GetSysClockFreq+0xec>)
34009f8a:	fa22 f303 	lsr.w	r3, r2, r3
34009f8e:	607b      	str	r3, [r7, #4]
      break;
34009f90:	e04c      	b.n	3400a02c <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34009f92:	f7fe fbff 	bl	34008794 <LL_RCC_MSI_GetFrequency>
34009f96:	4603      	mov	r3, r0
34009f98:	2b00      	cmp	r3, #0
34009f9a:	d102      	bne.n	34009fa2 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34009f9c:	4b27      	ldr	r3, [pc, #156]	@ (3400a03c <HAL_RCC_GetSysClockFreq+0xf0>)
34009f9e:	607b      	str	r3, [r7, #4]
      break;
34009fa0:	e044      	b.n	3400a02c <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34009fa2:	4b27      	ldr	r3, [pc, #156]	@ (3400a040 <HAL_RCC_GetSysClockFreq+0xf4>)
34009fa4:	607b      	str	r3, [r7, #4]
      break;
34009fa6:	e041      	b.n	3400a02c <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34009fa8:	4b26      	ldr	r3, [pc, #152]	@ (3400a044 <HAL_RCC_GetSysClockFreq+0xf8>)
34009faa:	607b      	str	r3, [r7, #4]
      break;
34009fac:	e03e      	b.n	3400a02c <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34009fae:	f7fe fd81 	bl	34008ab4 <LL_RCC_IC2_GetDivider>
34009fb2:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34009fb4:	f7fe fd70 	bl	34008a98 <LL_RCC_IC2_GetSource>
34009fb8:	4603      	mov	r3, r0
34009fba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009fbe:	d029      	beq.n	3400a014 <HAL_RCC_GetSysClockFreq+0xc8>
34009fc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009fc4:	d82f      	bhi.n	3400a026 <HAL_RCC_GetSysClockFreq+0xda>
34009fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009fca:	d01a      	beq.n	3400a002 <HAL_RCC_GetSysClockFreq+0xb6>
34009fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009fd0:	d829      	bhi.n	3400a026 <HAL_RCC_GetSysClockFreq+0xda>
34009fd2:	2b00      	cmp	r3, #0
34009fd4:	d003      	beq.n	34009fde <HAL_RCC_GetSysClockFreq+0x92>
34009fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009fda:	d009      	beq.n	34009ff0 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34009fdc:	e023      	b.n	3400a026 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009fde:	f008 ff95 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34009fe2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009fe4:	687a      	ldr	r2, [r7, #4]
34009fe6:	683b      	ldr	r3, [r7, #0]
34009fe8:	fbb2 f3f3 	udiv	r3, r2, r3
34009fec:	607b      	str	r3, [r7, #4]
          break;
34009fee:	e01b      	b.n	3400a028 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009ff0:	f008 ffd2 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34009ff4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34009ff6:	687a      	ldr	r2, [r7, #4]
34009ff8:	683b      	ldr	r3, [r7, #0]
34009ffa:	fbb2 f3f3 	udiv	r3, r2, r3
34009ffe:	607b      	str	r3, [r7, #4]
          break;
3400a000:	e012      	b.n	3400a028 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400a002:	f009 f80f 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3400a006:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3400a008:	687a      	ldr	r2, [r7, #4]
3400a00a:	683b      	ldr	r3, [r7, #0]
3400a00c:	fbb2 f3f3 	udiv	r3, r2, r3
3400a010:	607b      	str	r3, [r7, #4]
          break;
3400a012:	e009      	b.n	3400a028 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400a014:	f009 f84c 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3400a018:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3400a01a:	687a      	ldr	r2, [r7, #4]
3400a01c:	683b      	ldr	r3, [r7, #0]
3400a01e:	fbb2 f3f3 	udiv	r3, r2, r3
3400a022:	607b      	str	r3, [r7, #4]
          break;
3400a024:	e000      	b.n	3400a028 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
3400a026:	bf00      	nop
      break;
3400a028:	e000      	b.n	3400a02c <HAL_RCC_GetSysClockFreq+0xe0>
      break;
3400a02a:	bf00      	nop
  }

  return frequency;
3400a02c:	687b      	ldr	r3, [r7, #4]
}
3400a02e:	4618      	mov	r0, r3
3400a030:	3708      	adds	r7, #8
3400a032:	46bd      	mov	sp, r7
3400a034:	bd80      	pop	{r7, pc}
3400a036:	bf00      	nop
3400a038:	03d09000 	.word	0x03d09000
3400a03c:	003d0900 	.word	0x003d0900
3400a040:	00f42400 	.word	0x00f42400
3400a044:	02dc6c00 	.word	0x02dc6c00

3400a048 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3400a048:	b580      	push	{r7, lr}
3400a04a:	b088      	sub	sp, #32
3400a04c:	af00      	add	r7, sp, #0
3400a04e:	6078      	str	r0, [r7, #4]
3400a050:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
3400a052:	2300      	movs	r3, #0
3400a054:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3400a056:	687b      	ldr	r3, [r7, #4]
3400a058:	011a      	lsls	r2, r3, #4
3400a05a:	4b9a      	ldr	r3, [pc, #616]	@ (3400a2c4 <RCC_PLL_Config+0x27c>)
3400a05c:	4413      	add	r3, r2
3400a05e:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3400a060:	687b      	ldr	r3, [r7, #4]
3400a062:	011a      	lsls	r2, r3, #4
3400a064:	4b98      	ldr	r3, [pc, #608]	@ (3400a2c8 <RCC_PLL_Config+0x280>)
3400a066:	4413      	add	r3, r2
3400a068:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400a06a:	687b      	ldr	r3, [r7, #4]
3400a06c:	011a      	lsls	r2, r3, #4
3400a06e:	4b97      	ldr	r3, [pc, #604]	@ (3400a2cc <RCC_PLL_Config+0x284>)
3400a070:	4413      	add	r3, r2
3400a072:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
3400a074:	683b      	ldr	r3, [r7, #0]
3400a076:	681b      	ldr	r3, [r3, #0]
3400a078:	2b02      	cmp	r3, #2
3400a07a:	f040 80e9 	bne.w	3400a250 <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400a07e:	683b      	ldr	r3, [r7, #0]
3400a080:	685b      	ldr	r3, [r3, #4]
3400a082:	2b00      	cmp	r3, #0
3400a084:	d013      	beq.n	3400a0ae <RCC_PLL_Config+0x66>
3400a086:	683b      	ldr	r3, [r7, #0]
3400a088:	685b      	ldr	r3, [r3, #4]
3400a08a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a08e:	d00e      	beq.n	3400a0ae <RCC_PLL_Config+0x66>
3400a090:	683b      	ldr	r3, [r7, #0]
3400a092:	685b      	ldr	r3, [r3, #4]
3400a094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a098:	d009      	beq.n	3400a0ae <RCC_PLL_Config+0x66>
3400a09a:	683b      	ldr	r3, [r7, #0]
3400a09c:	685b      	ldr	r3, [r3, #4]
3400a09e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a0a2:	d004      	beq.n	3400a0ae <RCC_PLL_Config+0x66>
3400a0a4:	f240 71fa 	movw	r1, #2042	@ 0x7fa
3400a0a8:	4889      	ldr	r0, [pc, #548]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a0aa:	f7f7 fa91 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3400a0ae:	683b      	ldr	r3, [r7, #0]
3400a0b0:	68db      	ldr	r3, [r3, #12]
3400a0b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400a0b6:	d304      	bcc.n	3400a0c2 <RCC_PLL_Config+0x7a>
3400a0b8:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400a0bc:	4884      	ldr	r0, [pc, #528]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a0be:	f7f7 fa87 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
3400a0c2:	683b      	ldr	r3, [r7, #0]
3400a0c4:	689b      	ldr	r3, [r3, #8]
3400a0c6:	2b00      	cmp	r3, #0
3400a0c8:	d003      	beq.n	3400a0d2 <RCC_PLL_Config+0x8a>
3400a0ca:	683b      	ldr	r3, [r7, #0]
3400a0cc:	689b      	ldr	r3, [r3, #8]
3400a0ce:	2b3f      	cmp	r3, #63	@ 0x3f
3400a0d0:	d904      	bls.n	3400a0dc <RCC_PLL_Config+0x94>
3400a0d2:	f240 71fc 	movw	r1, #2044	@ 0x7fc
3400a0d6:	487e      	ldr	r0, [pc, #504]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a0d8:	f7f7 fa7a 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3400a0dc:	683b      	ldr	r3, [r7, #0]
3400a0de:	691b      	ldr	r3, [r3, #16]
3400a0e0:	2b09      	cmp	r3, #9
3400a0e2:	d905      	bls.n	3400a0f0 <RCC_PLL_Config+0xa8>
3400a0e4:	683b      	ldr	r3, [r7, #0]
3400a0e6:	691b      	ldr	r3, [r3, #16]
3400a0e8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
3400a0ec:	4293      	cmp	r3, r2
3400a0ee:	d904      	bls.n	3400a0fa <RCC_PLL_Config+0xb2>
3400a0f0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3400a0f4:	4876      	ldr	r0, [pc, #472]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a0f6:	f7f7 fa6b 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
3400a0fa:	683b      	ldr	r3, [r7, #0]
3400a0fc:	695b      	ldr	r3, [r3, #20]
3400a0fe:	2b00      	cmp	r3, #0
3400a100:	d003      	beq.n	3400a10a <RCC_PLL_Config+0xc2>
3400a102:	683b      	ldr	r3, [r7, #0]
3400a104:	695b      	ldr	r3, [r3, #20]
3400a106:	2b07      	cmp	r3, #7
3400a108:	d904      	bls.n	3400a114 <RCC_PLL_Config+0xcc>
3400a10a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
3400a10e:	4870      	ldr	r0, [pc, #448]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a110:	f7f7 fa5e 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
3400a114:	683b      	ldr	r3, [r7, #0]
3400a116:	699b      	ldr	r3, [r3, #24]
3400a118:	2b00      	cmp	r3, #0
3400a11a:	d003      	beq.n	3400a124 <RCC_PLL_Config+0xdc>
3400a11c:	683b      	ldr	r3, [r7, #0]
3400a11e:	699b      	ldr	r3, [r3, #24]
3400a120:	2b07      	cmp	r3, #7
3400a122:	d904      	bls.n	3400a12e <RCC_PLL_Config+0xe6>
3400a124:	f240 71ff 	movw	r1, #2047	@ 0x7ff
3400a128:	4869      	ldr	r0, [pc, #420]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a12a:	f7f7 fa51 	bl	340015d0 <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400a12e:	4a69      	ldr	r2, [pc, #420]	@ (3400a2d4 <RCC_PLL_Config+0x28c>)
3400a130:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a134:	687b      	ldr	r3, [r7, #4]
3400a136:	fa01 f303 	lsl.w	r3, r1, r3
3400a13a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400a13e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3400a140:	f7fb ff74 	bl	3400602c <HAL_GetTick>
3400a144:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a146:	e008      	b.n	3400a15a <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400a148:	f7fb ff70 	bl	3400602c <HAL_GetTick>
3400a14c:	4602      	mov	r2, r0
3400a14e:	68fb      	ldr	r3, [r7, #12]
3400a150:	1ad3      	subs	r3, r2, r3
3400a152:	2b01      	cmp	r3, #1
3400a154:	d901      	bls.n	3400a15a <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
3400a156:	2303      	movs	r3, #3
3400a158:	e114      	b.n	3400a384 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a15a:	4b5e      	ldr	r3, [pc, #376]	@ (3400a2d4 <RCC_PLL_Config+0x28c>)
3400a15c:	685a      	ldr	r2, [r3, #4]
3400a15e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a162:	687b      	ldr	r3, [r7, #4]
3400a164:	fa01 f303 	lsl.w	r3, r1, r3
3400a168:	401a      	ands	r2, r3
3400a16a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a16e:	687b      	ldr	r3, [r7, #4]
3400a170:	fa01 f303 	lsl.w	r3, r1, r3
3400a174:	429a      	cmp	r2, r3
3400a176:	d0e7      	beq.n	3400a148 <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3400a178:	693b      	ldr	r3, [r7, #16]
3400a17a:	681b      	ldr	r3, [r3, #0]
3400a17c:	f043 0204 	orr.w	r2, r3, #4
3400a180:	693b      	ldr	r3, [r7, #16]
3400a182:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3400a184:	69bb      	ldr	r3, [r7, #24]
3400a186:	681b      	ldr	r3, [r3, #0]
3400a188:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400a18c:	69bb      	ldr	r3, [r7, #24]
3400a18e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
3400a190:	69bb      	ldr	r3, [r7, #24]
3400a192:	681a      	ldr	r2, [r3, #0]
3400a194:	4b50      	ldr	r3, [pc, #320]	@ (3400a2d8 <RCC_PLL_Config+0x290>)
3400a196:	4013      	ands	r3, r2
3400a198:	683a      	ldr	r2, [r7, #0]
3400a19a:	6851      	ldr	r1, [r2, #4]
3400a19c:	683a      	ldr	r2, [r7, #0]
3400a19e:	6892      	ldr	r2, [r2, #8]
3400a1a0:	0512      	lsls	r2, r2, #20
3400a1a2:	4311      	orrs	r1, r2
3400a1a4:	683a      	ldr	r2, [r7, #0]
3400a1a6:	6912      	ldr	r2, [r2, #16]
3400a1a8:	0212      	lsls	r2, r2, #8
3400a1aa:	430a      	orrs	r2, r1
3400a1ac:	431a      	orrs	r2, r3
3400a1ae:	69bb      	ldr	r3, [r7, #24]
3400a1b0:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
3400a1b2:	693b      	ldr	r3, [r7, #16]
3400a1b4:	681b      	ldr	r3, [r3, #0]
3400a1b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3400a1ba:	683b      	ldr	r3, [r7, #0]
3400a1bc:	695b      	ldr	r3, [r3, #20]
3400a1be:	06d9      	lsls	r1, r3, #27
3400a1c0:	683b      	ldr	r3, [r7, #0]
3400a1c2:	699b      	ldr	r3, [r3, #24]
3400a1c4:	061b      	lsls	r3, r3, #24
3400a1c6:	430b      	orrs	r3, r1
3400a1c8:	431a      	orrs	r2, r3
3400a1ca:	693b      	ldr	r3, [r7, #16]
3400a1cc:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3400a1ce:	697b      	ldr	r3, [r7, #20]
3400a1d0:	681b      	ldr	r3, [r3, #0]
3400a1d2:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
3400a1d6:	683b      	ldr	r3, [r7, #0]
3400a1d8:	68db      	ldr	r3, [r3, #12]
3400a1da:	431a      	orrs	r2, r3
3400a1dc:	697b      	ldr	r3, [r7, #20]
3400a1de:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
3400a1e0:	693b      	ldr	r3, [r7, #16]
3400a1e2:	681b      	ldr	r3, [r3, #0]
3400a1e4:	f023 0208 	bic.w	r2, r3, #8
3400a1e8:	693b      	ldr	r3, [r7, #16]
3400a1ea:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3400a1ec:	683b      	ldr	r3, [r7, #0]
3400a1ee:	68db      	ldr	r3, [r3, #12]
3400a1f0:	2b00      	cmp	r3, #0
3400a1f2:	d005      	beq.n	3400a200 <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
3400a1f4:	693b      	ldr	r3, [r7, #16]
3400a1f6:	681b      	ldr	r3, [r3, #0]
3400a1f8:	f043 020a 	orr.w	r2, r3, #10
3400a1fc:	693b      	ldr	r3, [r7, #16]
3400a1fe:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
3400a200:	693b      	ldr	r3, [r7, #16]
3400a202:	681b      	ldr	r3, [r3, #0]
3400a204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3400a208:	f043 0301 	orr.w	r3, r3, #1
3400a20c:	693a      	ldr	r2, [r7, #16]
3400a20e:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400a210:	4a30      	ldr	r2, [pc, #192]	@ (3400a2d4 <RCC_PLL_Config+0x28c>)
3400a212:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a216:	687b      	ldr	r3, [r7, #4]
3400a218:	fa01 f303 	lsl.w	r3, r1, r3
3400a21c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3400a220:	f7fb ff04 	bl	3400602c <HAL_GetTick>
3400a224:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400a226:	e008      	b.n	3400a23a <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400a228:	f7fb ff00 	bl	3400602c <HAL_GetTick>
3400a22c:	4602      	mov	r2, r0
3400a22e:	68fb      	ldr	r3, [r7, #12]
3400a230:	1ad3      	subs	r3, r2, r3
3400a232:	2b01      	cmp	r3, #1
3400a234:	d901      	bls.n	3400a23a <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
3400a236:	2303      	movs	r3, #3
3400a238:	e0a4      	b.n	3400a384 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400a23a:	4b26      	ldr	r3, [pc, #152]	@ (3400a2d4 <RCC_PLL_Config+0x28c>)
3400a23c:	685a      	ldr	r2, [r3, #4]
3400a23e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a242:	687b      	ldr	r3, [r7, #4]
3400a244:	fa01 f303 	lsl.w	r3, r1, r3
3400a248:	4013      	ands	r3, r2
3400a24a:	2b00      	cmp	r3, #0
3400a24c:	d0ec      	beq.n	3400a228 <RCC_PLL_Config+0x1e0>
3400a24e:	e098      	b.n	3400a382 <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3400a250:	683b      	ldr	r3, [r7, #0]
3400a252:	681b      	ldr	r3, [r3, #0]
3400a254:	2b03      	cmp	r3, #3
3400a256:	d15f      	bne.n	3400a318 <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400a258:	683b      	ldr	r3, [r7, #0]
3400a25a:	685b      	ldr	r3, [r3, #4]
3400a25c:	2b00      	cmp	r3, #0
3400a25e:	d013      	beq.n	3400a288 <RCC_PLL_Config+0x240>
3400a260:	683b      	ldr	r3, [r7, #0]
3400a262:	685b      	ldr	r3, [r3, #4]
3400a264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a268:	d00e      	beq.n	3400a288 <RCC_PLL_Config+0x240>
3400a26a:	683b      	ldr	r3, [r7, #0]
3400a26c:	685b      	ldr	r3, [r3, #4]
3400a26e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a272:	d009      	beq.n	3400a288 <RCC_PLL_Config+0x240>
3400a274:	683b      	ldr	r3, [r7, #0]
3400a276:	685b      	ldr	r3, [r3, #4]
3400a278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a27c:	d004      	beq.n	3400a288 <RCC_PLL_Config+0x240>
3400a27e:	f640 013f 	movw	r1, #2111	@ 0x83f
3400a282:	4813      	ldr	r0, [pc, #76]	@ (3400a2d0 <RCC_PLL_Config+0x288>)
3400a284:	f7f7 f9a4 	bl	340015d0 <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3400a288:	683b      	ldr	r3, [r7, #0]
3400a28a:	685b      	ldr	r3, [r3, #4]
3400a28c:	4618      	mov	r0, r3
3400a28e:	f000 f925 	bl	3400a4dc <RCC_PLL_Source_IsReady>
3400a292:	4603      	mov	r3, r0
3400a294:	2b01      	cmp	r3, #1
3400a296:	d13c      	bne.n	3400a312 <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400a298:	4a0e      	ldr	r2, [pc, #56]	@ (3400a2d4 <RCC_PLL_Config+0x28c>)
3400a29a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a29e:	687b      	ldr	r3, [r7, #4]
3400a2a0:	fa01 f303 	lsl.w	r3, r1, r3
3400a2a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400a2a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400a2aa:	f7fb febf 	bl	3400602c <HAL_GetTick>
3400a2ae:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a2b0:	e014      	b.n	3400a2dc <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400a2b2:	f7fb febb 	bl	3400602c <HAL_GetTick>
3400a2b6:	4602      	mov	r2, r0
3400a2b8:	68fb      	ldr	r3, [r7, #12]
3400a2ba:	1ad3      	subs	r3, r2, r3
3400a2bc:	2b01      	cmp	r3, #1
3400a2be:	d90d      	bls.n	3400a2dc <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
3400a2c0:	2303      	movs	r3, #3
3400a2c2:	e05f      	b.n	3400a384 <RCC_PLL_Config+0x33c>
3400a2c4:	56028080 	.word	0x56028080
3400a2c8:	56028084 	.word	0x56028084
3400a2cc:	56028088 	.word	0x56028088
3400a2d0:	3401d650 	.word	0x3401d650
3400a2d4:	56028000 	.word	0x56028000
3400a2d8:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a2dc:	4b2b      	ldr	r3, [pc, #172]	@ (3400a38c <RCC_PLL_Config+0x344>)
3400a2de:	685a      	ldr	r2, [r3, #4]
3400a2e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a2e4:	687b      	ldr	r3, [r7, #4]
3400a2e6:	fa01 f303 	lsl.w	r3, r1, r3
3400a2ea:	401a      	ands	r2, r3
3400a2ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a2f0:	687b      	ldr	r3, [r7, #4]
3400a2f2:	fa01 f303 	lsl.w	r3, r1, r3
3400a2f6:	429a      	cmp	r2, r3
3400a2f8:	d0db      	beq.n	3400a2b2 <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3400a2fa:	69bb      	ldr	r3, [r7, #24]
3400a2fc:	681b      	ldr	r3, [r3, #0]
3400a2fe:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3400a302:	683b      	ldr	r3, [r7, #0]
3400a304:	685b      	ldr	r3, [r3, #4]
3400a306:	4313      	orrs	r3, r2
3400a308:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3400a30c:	69bb      	ldr	r3, [r7, #24]
3400a30e:	601a      	str	r2, [r3, #0]
3400a310:	e037      	b.n	3400a382 <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3400a312:	2301      	movs	r3, #1
3400a314:	77fb      	strb	r3, [r7, #31]
3400a316:	e034      	b.n	3400a382 <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
3400a318:	683b      	ldr	r3, [r7, #0]
3400a31a:	681b      	ldr	r3, [r3, #0]
3400a31c:	2b01      	cmp	r3, #1
3400a31e:	d130      	bne.n	3400a382 <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
3400a320:	693b      	ldr	r3, [r7, #16]
3400a322:	681b      	ldr	r3, [r3, #0]
3400a324:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
3400a328:	693b      	ldr	r3, [r7, #16]
3400a32a:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3400a32c:	4a17      	ldr	r2, [pc, #92]	@ (3400a38c <RCC_PLL_Config+0x344>)
3400a32e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a332:	687b      	ldr	r3, [r7, #4]
3400a334:	fa01 f303 	lsl.w	r3, r1, r3
3400a338:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400a33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3400a33e:	f7fb fe75 	bl	3400602c <HAL_GetTick>
3400a342:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a344:	e008      	b.n	3400a358 <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400a346:	f7fb fe71 	bl	3400602c <HAL_GetTick>
3400a34a:	4602      	mov	r2, r0
3400a34c:	68fb      	ldr	r3, [r7, #12]
3400a34e:	1ad3      	subs	r3, r2, r3
3400a350:	2b01      	cmp	r3, #1
3400a352:	d901      	bls.n	3400a358 <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
3400a354:	2303      	movs	r3, #3
3400a356:	e015      	b.n	3400a384 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a358:	4b0c      	ldr	r3, [pc, #48]	@ (3400a38c <RCC_PLL_Config+0x344>)
3400a35a:	685a      	ldr	r2, [r3, #4]
3400a35c:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a360:	687b      	ldr	r3, [r7, #4]
3400a362:	fa01 f303 	lsl.w	r3, r1, r3
3400a366:	401a      	ands	r2, r3
3400a368:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a36c:	687b      	ldr	r3, [r7, #4]
3400a36e:	fa01 f303 	lsl.w	r3, r1, r3
3400a372:	429a      	cmp	r2, r3
3400a374:	d0e7      	beq.n	3400a346 <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3400a376:	69bb      	ldr	r3, [r7, #24]
3400a378:	681b      	ldr	r3, [r3, #0]
3400a37a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400a37e:	69bb      	ldr	r3, [r7, #24]
3400a380:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
3400a382:	7ffb      	ldrb	r3, [r7, #31]
}
3400a384:	4618      	mov	r0, r3
3400a386:	3720      	adds	r7, #32
3400a388:	46bd      	mov	sp, r7
3400a38a:	bd80      	pop	{r7, pc}
3400a38c:	56028000 	.word	0x56028000

3400a390 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
3400a390:	b580      	push	{r7, lr}
3400a392:	b084      	sub	sp, #16
3400a394:	af00      	add	r7, sp, #0
3400a396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
3400a398:	2300      	movs	r3, #0
3400a39a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400a39c:	4a11      	ldr	r2, [pc, #68]	@ (3400a3e4 <RCC_PLL_Enable+0x54>)
3400a39e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a3a2:	687b      	ldr	r3, [r7, #4]
3400a3a4:	fa01 f303 	lsl.w	r3, r1, r3
3400a3a8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3400a3ac:	f7fb fe3e 	bl	3400602c <HAL_GetTick>
3400a3b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400a3b2:	e008      	b.n	3400a3c6 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3400a3b4:	f7fb fe3a 	bl	3400602c <HAL_GetTick>
3400a3b8:	4602      	mov	r2, r0
3400a3ba:	68bb      	ldr	r3, [r7, #8]
3400a3bc:	1ad3      	subs	r3, r2, r3
3400a3be:	2b01      	cmp	r3, #1
3400a3c0:	d901      	bls.n	3400a3c6 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3400a3c2:	2303      	movs	r3, #3
3400a3c4:	e00a      	b.n	3400a3dc <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400a3c6:	4b07      	ldr	r3, [pc, #28]	@ (3400a3e4 <RCC_PLL_Enable+0x54>)
3400a3c8:	685a      	ldr	r2, [r3, #4]
3400a3ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a3ce:	687b      	ldr	r3, [r7, #4]
3400a3d0:	fa01 f303 	lsl.w	r3, r1, r3
3400a3d4:	4013      	ands	r3, r2
3400a3d6:	2b00      	cmp	r3, #0
3400a3d8:	d0ec      	beq.n	3400a3b4 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3400a3da:	7bfb      	ldrb	r3, [r7, #15]
}
3400a3dc:	4618      	mov	r0, r3
3400a3de:	3710      	adds	r7, #16
3400a3e0:	46bd      	mov	sp, r7
3400a3e2:	bd80      	pop	{r7, pc}
3400a3e4:	56028000 	.word	0x56028000

3400a3e8 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3400a3e8:	b480      	push	{r7}
3400a3ea:	b089      	sub	sp, #36	@ 0x24
3400a3ec:	af00      	add	r7, sp, #0
3400a3ee:	6078      	str	r0, [r7, #4]
3400a3f0:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3400a3f2:	2300      	movs	r3, #0
3400a3f4:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3400a3f6:	687b      	ldr	r3, [r7, #4]
3400a3f8:	011a      	lsls	r2, r3, #4
3400a3fa:	4b34      	ldr	r3, [pc, #208]	@ (3400a4cc <RCC_PLL_IsNewConfig+0xe4>)
3400a3fc:	4413      	add	r3, r2
3400a3fe:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3400a400:	687b      	ldr	r3, [r7, #4]
3400a402:	011a      	lsls	r2, r3, #4
3400a404:	4b32      	ldr	r3, [pc, #200]	@ (3400a4d0 <RCC_PLL_IsNewConfig+0xe8>)
3400a406:	4413      	add	r3, r2
3400a408:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400a40a:	687b      	ldr	r3, [r7, #4]
3400a40c:	011a      	lsls	r2, r3, #4
3400a40e:	4b31      	ldr	r3, [pc, #196]	@ (3400a4d4 <RCC_PLL_IsNewConfig+0xec>)
3400a410:	4413      	add	r3, r2
3400a412:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400a414:	697b      	ldr	r3, [r7, #20]
3400a416:	681b      	ldr	r3, [r3, #0]
3400a418:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
3400a41c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
3400a420:	683a      	ldr	r2, [r7, #0]
3400a422:	6851      	ldr	r1, [r2, #4]
3400a424:	683a      	ldr	r2, [r7, #0]
3400a426:	6892      	ldr	r2, [r2, #8]
3400a428:	0512      	lsls	r2, r2, #20
3400a42a:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3400a42c:	683a      	ldr	r2, [r7, #0]
3400a42e:	6912      	ldr	r2, [r2, #16]
3400a430:	0212      	lsls	r2, r2, #8
3400a432:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3400a434:	4293      	cmp	r3, r2
3400a436:	d002      	beq.n	3400a43e <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
3400a438:	2301      	movs	r3, #1
3400a43a:	61fb      	str	r3, [r7, #28]
3400a43c:	e03e      	b.n	3400a4bc <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3400a43e:	693b      	ldr	r3, [r7, #16]
3400a440:	681b      	ldr	r3, [r3, #0]
3400a442:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
3400a446:	683b      	ldr	r3, [r7, #0]
3400a448:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3400a44a:	429a      	cmp	r2, r3
3400a44c:	d002      	beq.n	3400a454 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
3400a44e:	2301      	movs	r3, #1
3400a450:	61fb      	str	r3, [r7, #28]
3400a452:	e033      	b.n	3400a4bc <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400a454:	68fb      	ldr	r3, [r7, #12]
3400a456:	681b      	ldr	r3, [r3, #0]
3400a458:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3400a45c:	683b      	ldr	r3, [r7, #0]
3400a45e:	695b      	ldr	r3, [r3, #20]
3400a460:	06d9      	lsls	r1, r3, #27
3400a462:	683b      	ldr	r3, [r7, #0]
3400a464:	699b      	ldr	r3, [r3, #24]
3400a466:	061b      	lsls	r3, r3, #24
3400a468:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400a46a:	429a      	cmp	r2, r3
3400a46c:	d002      	beq.n	3400a474 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
3400a46e:	2301      	movs	r3, #1
3400a470:	61fb      	str	r3, [r7, #28]
3400a472:	e023      	b.n	3400a4bc <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400a474:	4b18      	ldr	r3, [pc, #96]	@ (3400a4d8 <RCC_PLL_IsNewConfig+0xf0>)
3400a476:	685a      	ldr	r2, [r3, #4]
3400a478:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a47c:	687b      	ldr	r3, [r7, #4]
3400a47e:	fa01 f303 	lsl.w	r3, r1, r3
3400a482:	401a      	ands	r2, r3
3400a484:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a488:	687b      	ldr	r3, [r7, #4]
3400a48a:	fa01 f303 	lsl.w	r3, r1, r3
3400a48e:	429a      	cmp	r2, r3
3400a490:	d102      	bne.n	3400a498 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3400a492:	2302      	movs	r3, #2
3400a494:	61bb      	str	r3, [r7, #24]
3400a496:	e00a      	b.n	3400a4ae <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3400a498:	697b      	ldr	r3, [r7, #20]
3400a49a:	681b      	ldr	r3, [r3, #0]
3400a49c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400a4a0:	2b00      	cmp	r3, #0
3400a4a2:	d002      	beq.n	3400a4aa <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3400a4a4:	2303      	movs	r3, #3
3400a4a6:	61bb      	str	r3, [r7, #24]
3400a4a8:	e001      	b.n	3400a4ae <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3400a4aa:	2301      	movs	r3, #1
3400a4ac:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3400a4ae:	683b      	ldr	r3, [r7, #0]
3400a4b0:	681b      	ldr	r3, [r3, #0]
3400a4b2:	69ba      	ldr	r2, [r7, #24]
3400a4b4:	429a      	cmp	r2, r3
3400a4b6:	d001      	beq.n	3400a4bc <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
3400a4b8:	2301      	movs	r3, #1
3400a4ba:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
3400a4bc:	69fb      	ldr	r3, [r7, #28]
}
3400a4be:	4618      	mov	r0, r3
3400a4c0:	3724      	adds	r7, #36	@ 0x24
3400a4c2:	46bd      	mov	sp, r7
3400a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a4c8:	4770      	bx	lr
3400a4ca:	bf00      	nop
3400a4cc:	56028080 	.word	0x56028080
3400a4d0:	56028084 	.word	0x56028084
3400a4d4:	56028088 	.word	0x56028088
3400a4d8:	56028000 	.word	0x56028000

3400a4dc <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
3400a4dc:	b580      	push	{r7, lr}
3400a4de:	b084      	sub	sp, #16
3400a4e0:	af00      	add	r7, sp, #0
3400a4e2:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3400a4e4:	2301      	movs	r3, #1
3400a4e6:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
3400a4e8:	687b      	ldr	r3, [r7, #4]
3400a4ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a4ee:	d01b      	beq.n	3400a528 <RCC_PLL_Source_IsReady+0x4c>
3400a4f0:	687b      	ldr	r3, [r7, #4]
3400a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a4f6:	d81f      	bhi.n	3400a538 <RCC_PLL_Source_IsReady+0x5c>
3400a4f8:	687b      	ldr	r3, [r7, #4]
3400a4fa:	2b00      	cmp	r3, #0
3400a4fc:	d004      	beq.n	3400a508 <RCC_PLL_Source_IsReady+0x2c>
3400a4fe:	687b      	ldr	r3, [r7, #4]
3400a500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a504:	d008      	beq.n	3400a518 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3400a506:	e017      	b.n	3400a538 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
3400a508:	f7fe f8b6 	bl	34008678 <LL_RCC_HSI_IsReady>
3400a50c:	4603      	mov	r3, r0
3400a50e:	2b00      	cmp	r3, #0
3400a510:	d114      	bne.n	3400a53c <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3400a512:	2300      	movs	r3, #0
3400a514:	60fb      	str	r3, [r7, #12]
      break;
3400a516:	e011      	b.n	3400a53c <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
3400a518:	f7fe f916 	bl	34008748 <LL_RCC_MSI_IsReady>
3400a51c:	4603      	mov	r3, r0
3400a51e:	2b00      	cmp	r3, #0
3400a520:	d10e      	bne.n	3400a540 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3400a522:	2300      	movs	r3, #0
3400a524:	60fb      	str	r3, [r7, #12]
      break;
3400a526:	e00b      	b.n	3400a540 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
3400a528:	f7fe f876 	bl	34008618 <LL_RCC_HSE_IsReady>
3400a52c:	4603      	mov	r3, r0
3400a52e:	2b00      	cmp	r3, #0
3400a530:	d108      	bne.n	3400a544 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
3400a532:	2300      	movs	r3, #0
3400a534:	60fb      	str	r3, [r7, #12]
      break;
3400a536:	e005      	b.n	3400a544 <RCC_PLL_Source_IsReady+0x68>
      break;
3400a538:	bf00      	nop
3400a53a:	e004      	b.n	3400a546 <RCC_PLL_Source_IsReady+0x6a>
      break;
3400a53c:	bf00      	nop
3400a53e:	e002      	b.n	3400a546 <RCC_PLL_Source_IsReady+0x6a>
      break;
3400a540:	bf00      	nop
3400a542:	e000      	b.n	3400a546 <RCC_PLL_Source_IsReady+0x6a>
      break;
3400a544:	bf00      	nop
  }

  return ret;
3400a546:	68fb      	ldr	r3, [r7, #12]
}
3400a548:	4618      	mov	r0, r3
3400a54a:	3710      	adds	r7, #16
3400a54c:	46bd      	mov	sp, r7
3400a54e:	bd80      	pop	{r7, pc}

3400a550 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
3400a550:	b580      	push	{r7, lr}
3400a552:	b084      	sub	sp, #16
3400a554:	af00      	add	r7, sp, #0
3400a556:	6078      	str	r0, [r7, #4]
3400a558:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
3400a55a:	2301      	movs	r3, #1
3400a55c:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
3400a55e:	687b      	ldr	r3, [r7, #4]
3400a560:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a564:	d03a      	beq.n	3400a5dc <RCC_IC_CheckPLLSources+0x8c>
3400a566:	687b      	ldr	r3, [r7, #4]
3400a568:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a56c:	d843      	bhi.n	3400a5f6 <RCC_IC_CheckPLLSources+0xa6>
3400a56e:	687b      	ldr	r3, [r7, #4]
3400a570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a574:	d025      	beq.n	3400a5c2 <RCC_IC_CheckPLLSources+0x72>
3400a576:	687b      	ldr	r3, [r7, #4]
3400a578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a57c:	d83b      	bhi.n	3400a5f6 <RCC_IC_CheckPLLSources+0xa6>
3400a57e:	687b      	ldr	r3, [r7, #4]
3400a580:	2b00      	cmp	r3, #0
3400a582:	d004      	beq.n	3400a58e <RCC_IC_CheckPLLSources+0x3e>
3400a584:	687b      	ldr	r3, [r7, #4]
3400a586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a58a:	d00d      	beq.n	3400a5a8 <RCC_IC_CheckPLLSources+0x58>
3400a58c:	e033      	b.n	3400a5f6 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3400a58e:	f7fe f98d 	bl	340088ac <LL_RCC_PLL1_IsReady>
3400a592:	4603      	mov	r3, r0
3400a594:	2b00      	cmp	r3, #0
3400a596:	d131      	bne.n	3400a5fc <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3400a598:	f7fe f99c 	bl	340088d4 <LL_RCC_PLL1_IsEnabledBypass>
3400a59c:	4603      	mov	r3, r0
3400a59e:	2b00      	cmp	r3, #0
3400a5a0:	d12c      	bne.n	3400a5fc <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3400a5a2:	2300      	movs	r3, #0
3400a5a4:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a5a6:	e029      	b.n	3400a5fc <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3400a5a8:	f7fe f9b6 	bl	34008918 <LL_RCC_PLL2_IsReady>
3400a5ac:	4603      	mov	r3, r0
3400a5ae:	2b00      	cmp	r3, #0
3400a5b0:	d126      	bne.n	3400a600 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3400a5b2:	f7fe f9c5 	bl	34008940 <LL_RCC_PLL2_IsEnabledBypass>
3400a5b6:	4603      	mov	r3, r0
3400a5b8:	2b00      	cmp	r3, #0
3400a5ba:	d121      	bne.n	3400a600 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
3400a5bc:	2300      	movs	r3, #0
3400a5be:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a5c0:	e01e      	b.n	3400a600 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400a5c2:	f7fe f9df 	bl	34008984 <LL_RCC_PLL3_IsReady>
3400a5c6:	4603      	mov	r3, r0
3400a5c8:	2b00      	cmp	r3, #0
3400a5ca:	d11b      	bne.n	3400a604 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3400a5cc:	f7fe f9ee 	bl	340089ac <LL_RCC_PLL3_IsEnabledBypass>
3400a5d0:	4603      	mov	r3, r0
3400a5d2:	2b00      	cmp	r3, #0
3400a5d4:	d116      	bne.n	3400a604 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3400a5d6:	2300      	movs	r3, #0
3400a5d8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a5da:	e013      	b.n	3400a604 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3400a5dc:	f7fe fa08 	bl	340089f0 <LL_RCC_PLL4_IsReady>
3400a5e0:	4603      	mov	r3, r0
3400a5e2:	2b00      	cmp	r3, #0
3400a5e4:	d110      	bne.n	3400a608 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3400a5e6:	f7fe fa17 	bl	34008a18 <LL_RCC_PLL4_IsEnabledBypass>
3400a5ea:	4603      	mov	r3, r0
3400a5ec:	2b00      	cmp	r3, #0
3400a5ee:	d10b      	bne.n	3400a608 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
3400a5f0:	2300      	movs	r3, #0
3400a5f2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a5f4:	e008      	b.n	3400a608 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3400a5f6:	2300      	movs	r3, #0
3400a5f8:	60fb      	str	r3, [r7, #12]
      break;
3400a5fa:	e006      	b.n	3400a60a <RCC_IC_CheckPLLSources+0xba>
      break;
3400a5fc:	bf00      	nop
3400a5fe:	e004      	b.n	3400a60a <RCC_IC_CheckPLLSources+0xba>
      break;
3400a600:	bf00      	nop
3400a602:	e002      	b.n	3400a60a <RCC_IC_CheckPLLSources+0xba>
      break;
3400a604:	bf00      	nop
3400a606:	e000      	b.n	3400a60a <RCC_IC_CheckPLLSources+0xba>
      break;
3400a608:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3400a60a:	683b      	ldr	r3, [r7, #0]
3400a60c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a610:	d03a      	beq.n	3400a688 <RCC_IC_CheckPLLSources+0x138>
3400a612:	683b      	ldr	r3, [r7, #0]
3400a614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a618:	d843      	bhi.n	3400a6a2 <RCC_IC_CheckPLLSources+0x152>
3400a61a:	683b      	ldr	r3, [r7, #0]
3400a61c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a620:	d025      	beq.n	3400a66e <RCC_IC_CheckPLLSources+0x11e>
3400a622:	683b      	ldr	r3, [r7, #0]
3400a624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a628:	d83b      	bhi.n	3400a6a2 <RCC_IC_CheckPLLSources+0x152>
3400a62a:	683b      	ldr	r3, [r7, #0]
3400a62c:	2b00      	cmp	r3, #0
3400a62e:	d004      	beq.n	3400a63a <RCC_IC_CheckPLLSources+0xea>
3400a630:	683b      	ldr	r3, [r7, #0]
3400a632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a636:	d00d      	beq.n	3400a654 <RCC_IC_CheckPLLSources+0x104>
3400a638:	e033      	b.n	3400a6a2 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3400a63a:	f7fe f937 	bl	340088ac <LL_RCC_PLL1_IsReady>
3400a63e:	4603      	mov	r3, r0
3400a640:	2b00      	cmp	r3, #0
3400a642:	d131      	bne.n	3400a6a8 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3400a644:	f7fe f946 	bl	340088d4 <LL_RCC_PLL1_IsEnabledBypass>
3400a648:	4603      	mov	r3, r0
3400a64a:	2b00      	cmp	r3, #0
3400a64c:	d12c      	bne.n	3400a6a8 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
3400a64e:	2300      	movs	r3, #0
3400a650:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a652:	e029      	b.n	3400a6a8 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3400a654:	f7fe f960 	bl	34008918 <LL_RCC_PLL2_IsReady>
3400a658:	4603      	mov	r3, r0
3400a65a:	2b00      	cmp	r3, #0
3400a65c:	d126      	bne.n	3400a6ac <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3400a65e:	f7fe f96f 	bl	34008940 <LL_RCC_PLL2_IsEnabledBypass>
3400a662:	4603      	mov	r3, r0
3400a664:	2b00      	cmp	r3, #0
3400a666:	d121      	bne.n	3400a6ac <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
3400a668:	2300      	movs	r3, #0
3400a66a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a66c:	e01e      	b.n	3400a6ac <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3400a66e:	f7fe f989 	bl	34008984 <LL_RCC_PLL3_IsReady>
3400a672:	4603      	mov	r3, r0
3400a674:	2b00      	cmp	r3, #0
3400a676:	d11b      	bne.n	3400a6b0 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3400a678:	f7fe f998 	bl	340089ac <LL_RCC_PLL3_IsEnabledBypass>
3400a67c:	4603      	mov	r3, r0
3400a67e:	2b00      	cmp	r3, #0
3400a680:	d116      	bne.n	3400a6b0 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3400a682:	2300      	movs	r3, #0
3400a684:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a686:	e013      	b.n	3400a6b0 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3400a688:	f7fe f9b2 	bl	340089f0 <LL_RCC_PLL4_IsReady>
3400a68c:	4603      	mov	r3, r0
3400a68e:	2b00      	cmp	r3, #0
3400a690:	d110      	bne.n	3400a6b4 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3400a692:	f7fe f9c1 	bl	34008a18 <LL_RCC_PLL4_IsEnabledBypass>
3400a696:	4603      	mov	r3, r0
3400a698:	2b00      	cmp	r3, #0
3400a69a:	d10b      	bne.n	3400a6b4 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
3400a69c:	2300      	movs	r3, #0
3400a69e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400a6a0:	e008      	b.n	3400a6b4 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3400a6a2:	2300      	movs	r3, #0
3400a6a4:	60fb      	str	r3, [r7, #12]
      break;
3400a6a6:	e006      	b.n	3400a6b6 <RCC_IC_CheckPLLSources+0x166>
      break;
3400a6a8:	bf00      	nop
3400a6aa:	e004      	b.n	3400a6b6 <RCC_IC_CheckPLLSources+0x166>
      break;
3400a6ac:	bf00      	nop
3400a6ae:	e002      	b.n	3400a6b6 <RCC_IC_CheckPLLSources+0x166>
      break;
3400a6b0:	bf00      	nop
3400a6b2:	e000      	b.n	3400a6b6 <RCC_IC_CheckPLLSources+0x166>
      break;
3400a6b4:	bf00      	nop
  }

  return ret;
3400a6b6:	68fb      	ldr	r3, [r7, #12]
}
3400a6b8:	4618      	mov	r0, r3
3400a6ba:	3710      	adds	r7, #16
3400a6bc:	46bd      	mov	sp, r7
3400a6be:	bd80      	pop	{r7, pc}

3400a6c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
3400a6c0:	b480      	push	{r7}
3400a6c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400a6c4:	4b05      	ldr	r3, [pc, #20]	@ (3400a6dc <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3400a6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a6c8:	4a04      	ldr	r2, [pc, #16]	@ (3400a6dc <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3400a6ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3400a6ce:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400a6d0:	bf00      	nop
3400a6d2:	46bd      	mov	sp, r7
3400a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a6d8:	4770      	bx	lr
3400a6da:	bf00      	nop
3400a6dc:	56028000 	.word	0x56028000

3400a6e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
3400a6e0:	b480      	push	{r7}
3400a6e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3400a6e4:	4b05      	ldr	r3, [pc, #20]	@ (3400a6fc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3400a6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a6e8:	4a04      	ldr	r2, [pc, #16]	@ (3400a6fc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3400a6ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400a6ee:	6553      	str	r3, [r2, #84]	@ 0x54
}
3400a6f0:	bf00      	nop
3400a6f2:	46bd      	mov	sp, r7
3400a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a6f8:	4770      	bx	lr
3400a6fa:	bf00      	nop
3400a6fc:	56028000 	.word	0x56028000

3400a700 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
3400a700:	b480      	push	{r7}
3400a702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3400a704:	4b06      	ldr	r3, [pc, #24]	@ (3400a720 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
3400a706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400a70c:	2b40      	cmp	r3, #64	@ 0x40
3400a70e:	d101      	bne.n	3400a714 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
3400a710:	2301      	movs	r3, #1
3400a712:	e000      	b.n	3400a716 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
3400a714:	2300      	movs	r3, #0
}
3400a716:	4618      	mov	r0, r3
3400a718:	46bd      	mov	sp, r7
3400a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a71e:	4770      	bx	lr
3400a720:	56028000 	.word	0x56028000

3400a724 <LL_RCC_HSE_IsReady>:
{
3400a724:	b480      	push	{r7}
3400a726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3400a728:	4b06      	ldr	r3, [pc, #24]	@ (3400a744 <LL_RCC_HSE_IsReady+0x20>)
3400a72a:	685b      	ldr	r3, [r3, #4]
3400a72c:	f003 0310 	and.w	r3, r3, #16
3400a730:	2b00      	cmp	r3, #0
3400a732:	d001      	beq.n	3400a738 <LL_RCC_HSE_IsReady+0x14>
3400a734:	2301      	movs	r3, #1
3400a736:	e000      	b.n	3400a73a <LL_RCC_HSE_IsReady+0x16>
3400a738:	2300      	movs	r3, #0
}
3400a73a:	4618      	mov	r0, r3
3400a73c:	46bd      	mov	sp, r7
3400a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a742:	4770      	bx	lr
3400a744:	56028000 	.word	0x56028000

3400a748 <LL_RCC_HSI_IsReady>:
{
3400a748:	b480      	push	{r7}
3400a74a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
3400a74c:	4b06      	ldr	r3, [pc, #24]	@ (3400a768 <LL_RCC_HSI_IsReady+0x20>)
3400a74e:	685b      	ldr	r3, [r3, #4]
3400a750:	f003 0308 	and.w	r3, r3, #8
3400a754:	2b00      	cmp	r3, #0
3400a756:	d001      	beq.n	3400a75c <LL_RCC_HSI_IsReady+0x14>
3400a758:	2301      	movs	r3, #1
3400a75a:	e000      	b.n	3400a75e <LL_RCC_HSI_IsReady+0x16>
3400a75c:	2300      	movs	r3, #0
}
3400a75e:	4618      	mov	r0, r3
3400a760:	46bd      	mov	sp, r7
3400a762:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a766:	4770      	bx	lr
3400a768:	56028000 	.word	0x56028000

3400a76c <LL_RCC_HSI_GetDivider>:
{
3400a76c:	b480      	push	{r7}
3400a76e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400a770:	4b04      	ldr	r3, [pc, #16]	@ (3400a784 <LL_RCC_HSI_GetDivider+0x18>)
3400a772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400a774:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3400a778:	4618      	mov	r0, r3
3400a77a:	46bd      	mov	sp, r7
3400a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a780:	4770      	bx	lr
3400a782:	bf00      	nop
3400a784:	56028000 	.word	0x56028000

3400a788 <LL_RCC_MSI_IsReady>:
{
3400a788:	b480      	push	{r7}
3400a78a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3400a78c:	4b06      	ldr	r3, [pc, #24]	@ (3400a7a8 <LL_RCC_MSI_IsReady+0x20>)
3400a78e:	685b      	ldr	r3, [r3, #4]
3400a790:	f003 0304 	and.w	r3, r3, #4
3400a794:	2b00      	cmp	r3, #0
3400a796:	d001      	beq.n	3400a79c <LL_RCC_MSI_IsReady+0x14>
3400a798:	2301      	movs	r3, #1
3400a79a:	e000      	b.n	3400a79e <LL_RCC_MSI_IsReady+0x16>
3400a79c:	2300      	movs	r3, #0
}
3400a79e:	4618      	mov	r0, r3
3400a7a0:	46bd      	mov	sp, r7
3400a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a7a6:	4770      	bx	lr
3400a7a8:	56028000 	.word	0x56028000

3400a7ac <LL_RCC_MSI_GetFrequency>:
{
3400a7ac:	b480      	push	{r7}
3400a7ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400a7b0:	4b04      	ldr	r3, [pc, #16]	@ (3400a7c4 <LL_RCC_MSI_GetFrequency+0x18>)
3400a7b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400a7b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3400a7b8:	4618      	mov	r0, r3
3400a7ba:	46bd      	mov	sp, r7
3400a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a7c0:	4770      	bx	lr
3400a7c2:	bf00      	nop
3400a7c4:	56028000 	.word	0x56028000

3400a7c8 <LL_RCC_LSE_IsReady>:
{
3400a7c8:	b480      	push	{r7}
3400a7ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
3400a7cc:	4b06      	ldr	r3, [pc, #24]	@ (3400a7e8 <LL_RCC_LSE_IsReady+0x20>)
3400a7ce:	685b      	ldr	r3, [r3, #4]
3400a7d0:	f003 0302 	and.w	r3, r3, #2
3400a7d4:	2b00      	cmp	r3, #0
3400a7d6:	d001      	beq.n	3400a7dc <LL_RCC_LSE_IsReady+0x14>
3400a7d8:	2301      	movs	r3, #1
3400a7da:	e000      	b.n	3400a7de <LL_RCC_LSE_IsReady+0x16>
3400a7dc:	2300      	movs	r3, #0
}
3400a7de:	4618      	mov	r0, r3
3400a7e0:	46bd      	mov	sp, r7
3400a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a7e6:	4770      	bx	lr
3400a7e8:	56028000 	.word	0x56028000

3400a7ec <LL_RCC_LSI_IsReady>:
{
3400a7ec:	b480      	push	{r7}
3400a7ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3400a7f0:	4b04      	ldr	r3, [pc, #16]	@ (3400a804 <LL_RCC_LSI_IsReady+0x18>)
3400a7f2:	685b      	ldr	r3, [r3, #4]
3400a7f4:	f003 0301 	and.w	r3, r3, #1
}
3400a7f8:	4618      	mov	r0, r3
3400a7fa:	46bd      	mov	sp, r7
3400a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a800:	4770      	bx	lr
3400a802:	bf00      	nop
3400a804:	56028000 	.word	0x56028000

3400a808 <LL_RCC_GetAHBPrescaler>:
{
3400a808:	b480      	push	{r7}
3400a80a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3400a80c:	4b04      	ldr	r3, [pc, #16]	@ (3400a820 <LL_RCC_GetAHBPrescaler+0x18>)
3400a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a810:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
3400a814:	4618      	mov	r0, r3
3400a816:	46bd      	mov	sp, r7
3400a818:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a81c:	4770      	bx	lr
3400a81e:	bf00      	nop
3400a820:	56028000 	.word	0x56028000

3400a824 <LL_RCC_GetAPB1Prescaler>:
{
3400a824:	b480      	push	{r7}
3400a826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400a828:	4b04      	ldr	r3, [pc, #16]	@ (3400a83c <LL_RCC_GetAPB1Prescaler+0x18>)
3400a82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a82c:	f003 0307 	and.w	r3, r3, #7
}
3400a830:	4618      	mov	r0, r3
3400a832:	46bd      	mov	sp, r7
3400a834:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a838:	4770      	bx	lr
3400a83a:	bf00      	nop
3400a83c:	56028000 	.word	0x56028000

3400a840 <LL_RCC_GetAPB2Prescaler>:
{
3400a840:	b480      	push	{r7}
3400a842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3400a844:	4b04      	ldr	r3, [pc, #16]	@ (3400a858 <LL_RCC_GetAPB2Prescaler+0x18>)
3400a846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3400a84c:	4618      	mov	r0, r3
3400a84e:	46bd      	mov	sp, r7
3400a850:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a854:	4770      	bx	lr
3400a856:	bf00      	nop
3400a858:	56028000 	.word	0x56028000

3400a85c <LL_RCC_GetAPB4Prescaler>:
{
3400a85c:	b480      	push	{r7}
3400a85e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3400a860:	4b04      	ldr	r3, [pc, #16]	@ (3400a874 <LL_RCC_GetAPB4Prescaler+0x18>)
3400a862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a864:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
3400a868:	4618      	mov	r0, r3
3400a86a:	46bd      	mov	sp, r7
3400a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a870:	4770      	bx	lr
3400a872:	bf00      	nop
3400a874:	56028000 	.word	0x56028000

3400a878 <LL_RCC_GetAPB5Prescaler>:
{
3400a878:	b480      	push	{r7}
3400a87a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
3400a87c:	4b04      	ldr	r3, [pc, #16]	@ (3400a890 <LL_RCC_GetAPB5Prescaler+0x18>)
3400a87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a880:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
3400a884:	4618      	mov	r0, r3
3400a886:	46bd      	mov	sp, r7
3400a888:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a88c:	4770      	bx	lr
3400a88e:	bf00      	nop
3400a890:	56028000 	.word	0x56028000

3400a894 <LL_RCC_SetClockSource>:
{
3400a894:	b480      	push	{r7}
3400a896:	b085      	sub	sp, #20
3400a898:	af00      	add	r7, sp, #0
3400a89a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3400a89c:	687b      	ldr	r3, [r7, #4]
3400a89e:	b2da      	uxtb	r2, r3
3400a8a0:	4b10      	ldr	r3, [pc, #64]	@ (3400a8e4 <LL_RCC_SetClockSource+0x50>)
3400a8a2:	4413      	add	r3, r2
3400a8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3400a8a6:	68fb      	ldr	r3, [r7, #12]
3400a8a8:	681a      	ldr	r2, [r3, #0]
3400a8aa:	687b      	ldr	r3, [r7, #4]
3400a8ac:	0e19      	lsrs	r1, r3, #24
3400a8ae:	687b      	ldr	r3, [r7, #4]
3400a8b0:	0a1b      	lsrs	r3, r3, #8
3400a8b2:	f003 031f 	and.w	r3, r3, #31
3400a8b6:	fa01 f303 	lsl.w	r3, r1, r3
3400a8ba:	43db      	mvns	r3, r3
3400a8bc:	401a      	ands	r2, r3
3400a8be:	687b      	ldr	r3, [r7, #4]
3400a8c0:	0c1b      	lsrs	r3, r3, #16
3400a8c2:	b2d9      	uxtb	r1, r3
3400a8c4:	687b      	ldr	r3, [r7, #4]
3400a8c6:	0a1b      	lsrs	r3, r3, #8
3400a8c8:	f003 031f 	and.w	r3, r3, #31
3400a8cc:	fa01 f303 	lsl.w	r3, r1, r3
3400a8d0:	431a      	orrs	r2, r3
3400a8d2:	68fb      	ldr	r3, [r7, #12]
3400a8d4:	601a      	str	r2, [r3, #0]
}
3400a8d6:	bf00      	nop
3400a8d8:	3714      	adds	r7, #20
3400a8da:	46bd      	mov	sp, r7
3400a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a8e0:	4770      	bx	lr
3400a8e2:	bf00      	nop
3400a8e4:	56028144 	.word	0x56028144

3400a8e8 <LL_RCC_GetADCPrescaler>:
{
3400a8e8:	b480      	push	{r7}
3400a8ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3400a8ec:	4b04      	ldr	r3, [pc, #16]	@ (3400a900 <LL_RCC_GetADCPrescaler+0x18>)
3400a8ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400a8f2:	0a1b      	lsrs	r3, r3, #8
3400a8f4:	b2db      	uxtb	r3, r3
}
3400a8f6:	4618      	mov	r0, r3
3400a8f8:	46bd      	mov	sp, r7
3400a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a8fe:	4770      	bx	lr
3400a900:	56028000 	.word	0x56028000

3400a904 <LL_RCC_SetADFClockSource>:
{
3400a904:	b480      	push	{r7}
3400a906:	b083      	sub	sp, #12
3400a908:	af00      	add	r7, sp, #0
3400a90a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
3400a90c:	4b07      	ldr	r3, [pc, #28]	@ (3400a92c <LL_RCC_SetADFClockSource+0x28>)
3400a90e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400a912:	f023 0207 	bic.w	r2, r3, #7
3400a916:	4905      	ldr	r1, [pc, #20]	@ (3400a92c <LL_RCC_SetADFClockSource+0x28>)
3400a918:	687b      	ldr	r3, [r7, #4]
3400a91a:	4313      	orrs	r3, r2
3400a91c:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3400a920:	bf00      	nop
3400a922:	370c      	adds	r7, #12
3400a924:	46bd      	mov	sp, r7
3400a926:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a92a:	4770      	bx	lr
3400a92c:	56028000 	.word	0x56028000

3400a930 <LL_RCC_SetCLKPClockSource>:
{
3400a930:	b480      	push	{r7}
3400a932:	b083      	sub	sp, #12
3400a934:	af00      	add	r7, sp, #0
3400a936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
3400a938:	4b07      	ldr	r3, [pc, #28]	@ (3400a958 <LL_RCC_SetCLKPClockSource+0x28>)
3400a93a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400a93e:	f023 0207 	bic.w	r2, r3, #7
3400a942:	4905      	ldr	r1, [pc, #20]	@ (3400a958 <LL_RCC_SetCLKPClockSource+0x28>)
3400a944:	687b      	ldr	r3, [r7, #4]
3400a946:	4313      	orrs	r3, r2
3400a948:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400a94c:	bf00      	nop
3400a94e:	370c      	adds	r7, #12
3400a950:	46bd      	mov	sp, r7
3400a952:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a956:	4770      	bx	lr
3400a958:	56028000 	.word	0x56028000

3400a95c <LL_RCC_SetDCMIPPClockSource>:
{
3400a95c:	b480      	push	{r7}
3400a95e:	b083      	sub	sp, #12
3400a960:	af00      	add	r7, sp, #0
3400a962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
3400a964:	4b07      	ldr	r3, [pc, #28]	@ (3400a984 <LL_RCC_SetDCMIPPClockSource+0x28>)
3400a966:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400a96a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
3400a96e:	4905      	ldr	r1, [pc, #20]	@ (3400a984 <LL_RCC_SetDCMIPPClockSource+0x28>)
3400a970:	687b      	ldr	r3, [r7, #4]
3400a972:	4313      	orrs	r3, r2
3400a974:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3400a978:	bf00      	nop
3400a97a:	370c      	adds	r7, #12
3400a97c:	46bd      	mov	sp, r7
3400a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a982:	4770      	bx	lr
3400a984:	56028000 	.word	0x56028000

3400a988 <LL_RCC_SetETHClockSource>:
{
3400a988:	b480      	push	{r7}
3400a98a:	b083      	sub	sp, #12
3400a98c:	af00      	add	r7, sp, #0
3400a98e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
3400a990:	4b07      	ldr	r3, [pc, #28]	@ (3400a9b0 <LL_RCC_SetETHClockSource+0x28>)
3400a992:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400a996:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3400a99a:	4905      	ldr	r1, [pc, #20]	@ (3400a9b0 <LL_RCC_SetETHClockSource+0x28>)
3400a99c:	687b      	ldr	r3, [r7, #4]
3400a99e:	4313      	orrs	r3, r2
3400a9a0:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400a9a4:	bf00      	nop
3400a9a6:	370c      	adds	r7, #12
3400a9a8:	46bd      	mov	sp, r7
3400a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a9ae:	4770      	bx	lr
3400a9b0:	56028000 	.word	0x56028000

3400a9b4 <LL_RCC_SetETHPHYInterface>:
{
3400a9b4:	b480      	push	{r7}
3400a9b6:	b083      	sub	sp, #12
3400a9b8:	af00      	add	r7, sp, #0
3400a9ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
3400a9bc:	4b07      	ldr	r3, [pc, #28]	@ (3400a9dc <LL_RCC_SetETHPHYInterface+0x28>)
3400a9be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400a9c2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400a9c6:	4905      	ldr	r1, [pc, #20]	@ (3400a9dc <LL_RCC_SetETHPHYInterface+0x28>)
3400a9c8:	687b      	ldr	r3, [r7, #4]
3400a9ca:	4313      	orrs	r3, r2
3400a9cc:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400a9d0:	bf00      	nop
3400a9d2:	370c      	adds	r7, #12
3400a9d4:	46bd      	mov	sp, r7
3400a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a9da:	4770      	bx	lr
3400a9dc:	56028000 	.word	0x56028000

3400a9e0 <LL_RCC_GetETH1PTPDivider>:
{
3400a9e0:	b480      	push	{r7}
3400a9e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3400a9e4:	4b04      	ldr	r3, [pc, #16]	@ (3400a9f8 <LL_RCC_GetETH1PTPDivider+0x18>)
3400a9e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400a9ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
3400a9ee:	4618      	mov	r0, r3
3400a9f0:	46bd      	mov	sp, r7
3400a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a9f6:	4770      	bx	lr
3400a9f8:	56028000 	.word	0x56028000

3400a9fc <LL_RCC_SetETHREFRXClockSource>:
{
3400a9fc:	b480      	push	{r7}
3400a9fe:	b083      	sub	sp, #12
3400aa00:	af00      	add	r7, sp, #0
3400aa02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
3400aa04:	4b07      	ldr	r3, [pc, #28]	@ (3400aa24 <LL_RCC_SetETHREFRXClockSource+0x28>)
3400aa06:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400aa0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3400aa0e:	4905      	ldr	r1, [pc, #20]	@ (3400aa24 <LL_RCC_SetETHREFRXClockSource+0x28>)
3400aa10:	687b      	ldr	r3, [r7, #4]
3400aa12:	4313      	orrs	r3, r2
3400aa14:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400aa18:	bf00      	nop
3400aa1a:	370c      	adds	r7, #12
3400aa1c:	46bd      	mov	sp, r7
3400aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aa22:	4770      	bx	lr
3400aa24:	56028000 	.word	0x56028000

3400aa28 <LL_RCC_SetETHREFTXClockSource>:
{
3400aa28:	b480      	push	{r7}
3400aa2a:	b083      	sub	sp, #12
3400aa2c:	af00      	add	r7, sp, #0
3400aa2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
3400aa30:	4b07      	ldr	r3, [pc, #28]	@ (3400aa50 <LL_RCC_SetETHREFTXClockSource+0x28>)
3400aa32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400aa36:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3400aa3a:	4905      	ldr	r1, [pc, #20]	@ (3400aa50 <LL_RCC_SetETHREFTXClockSource+0x28>)
3400aa3c:	687b      	ldr	r3, [r7, #4]
3400aa3e:	4313      	orrs	r3, r2
3400aa40:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400aa44:	bf00      	nop
3400aa46:	370c      	adds	r7, #12
3400aa48:	46bd      	mov	sp, r7
3400aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aa4e:	4770      	bx	lr
3400aa50:	56028000 	.word	0x56028000

3400aa54 <LL_RCC_SetFDCANClockSource>:
{
3400aa54:	b480      	push	{r7}
3400aa56:	b083      	sub	sp, #12
3400aa58:	af00      	add	r7, sp, #0
3400aa5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3400aa5c:	4b07      	ldr	r3, [pc, #28]	@ (3400aa7c <LL_RCC_SetFDCANClockSource+0x28>)
3400aa5e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400aa62:	f023 0203 	bic.w	r2, r3, #3
3400aa66:	4905      	ldr	r1, [pc, #20]	@ (3400aa7c <LL_RCC_SetFDCANClockSource+0x28>)
3400aa68:	687b      	ldr	r3, [r7, #4]
3400aa6a:	4313      	orrs	r3, r2
3400aa6c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3400aa70:	bf00      	nop
3400aa72:	370c      	adds	r7, #12
3400aa74:	46bd      	mov	sp, r7
3400aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aa7a:	4770      	bx	lr
3400aa7c:	56028000 	.word	0x56028000

3400aa80 <LL_RCC_SetFMCClockSource>:
{
3400aa80:	b480      	push	{r7}
3400aa82:	b083      	sub	sp, #12
3400aa84:	af00      	add	r7, sp, #0
3400aa86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
3400aa88:	4b07      	ldr	r3, [pc, #28]	@ (3400aaa8 <LL_RCC_SetFMCClockSource+0x28>)
3400aa8a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400aa8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400aa92:	4905      	ldr	r1, [pc, #20]	@ (3400aaa8 <LL_RCC_SetFMCClockSource+0x28>)
3400aa94:	687b      	ldr	r3, [r7, #4]
3400aa96:	4313      	orrs	r3, r2
3400aa98:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3400aa9c:	bf00      	nop
3400aa9e:	370c      	adds	r7, #12
3400aaa0:	46bd      	mov	sp, r7
3400aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aaa6:	4770      	bx	lr
3400aaa8:	56028000 	.word	0x56028000

3400aaac <LL_RCC_SetI2CClockSource>:
{
3400aaac:	b580      	push	{r7, lr}
3400aaae:	b082      	sub	sp, #8
3400aab0:	af00      	add	r7, sp, #0
3400aab2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400aab4:	6878      	ldr	r0, [r7, #4]
3400aab6:	f7ff feed 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400aaba:	bf00      	nop
3400aabc:	3708      	adds	r7, #8
3400aabe:	46bd      	mov	sp, r7
3400aac0:	bd80      	pop	{r7, pc}

3400aac2 <LL_RCC_SetI3CClockSource>:
{
3400aac2:	b580      	push	{r7, lr}
3400aac4:	b082      	sub	sp, #8
3400aac6:	af00      	add	r7, sp, #0
3400aac8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400aaca:	6878      	ldr	r0, [r7, #4]
3400aacc:	f7ff fee2 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400aad0:	bf00      	nop
3400aad2:	3708      	adds	r7, #8
3400aad4:	46bd      	mov	sp, r7
3400aad6:	bd80      	pop	{r7, pc}

3400aad8 <LL_RCC_SetLPTIMClockSource>:
{
3400aad8:	b580      	push	{r7, lr}
3400aada:	b082      	sub	sp, #8
3400aadc:	af00      	add	r7, sp, #0
3400aade:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400aae0:	6878      	ldr	r0, [r7, #4]
3400aae2:	f7ff fed7 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400aae6:	bf00      	nop
3400aae8:	3708      	adds	r7, #8
3400aaea:	46bd      	mov	sp, r7
3400aaec:	bd80      	pop	{r7, pc}
	...

3400aaf0 <LL_RCC_SetLPUARTClockSource>:
{
3400aaf0:	b480      	push	{r7}
3400aaf2:	b083      	sub	sp, #12
3400aaf4:	af00      	add	r7, sp, #0
3400aaf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3400aaf8:	4b07      	ldr	r3, [pc, #28]	@ (3400ab18 <LL_RCC_SetLPUARTClockSource+0x28>)
3400aafa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400aafe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
3400ab02:	4905      	ldr	r1, [pc, #20]	@ (3400ab18 <LL_RCC_SetLPUARTClockSource+0x28>)
3400ab04:	687b      	ldr	r3, [r7, #4]
3400ab06:	4313      	orrs	r3, r2
3400ab08:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
3400ab0c:	bf00      	nop
3400ab0e:	370c      	adds	r7, #12
3400ab10:	46bd      	mov	sp, r7
3400ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ab16:	4770      	bx	lr
3400ab18:	56028000 	.word	0x56028000

3400ab1c <LL_RCC_SetLTDCClockSource>:
{
3400ab1c:	b480      	push	{r7}
3400ab1e:	b083      	sub	sp, #12
3400ab20:	af00      	add	r7, sp, #0
3400ab22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
3400ab24:	4b07      	ldr	r3, [pc, #28]	@ (3400ab44 <LL_RCC_SetLTDCClockSource+0x28>)
3400ab26:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400ab2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3400ab2e:	4905      	ldr	r1, [pc, #20]	@ (3400ab44 <LL_RCC_SetLTDCClockSource+0x28>)
3400ab30:	687b      	ldr	r3, [r7, #4]
3400ab32:	4313      	orrs	r3, r2
3400ab34:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
3400ab38:	bf00      	nop
3400ab3a:	370c      	adds	r7, #12
3400ab3c:	46bd      	mov	sp, r7
3400ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ab42:	4770      	bx	lr
3400ab44:	56028000 	.word	0x56028000

3400ab48 <LL_RCC_SetMDFClockSource>:
{
3400ab48:	b480      	push	{r7}
3400ab4a:	b083      	sub	sp, #12
3400ab4c:	af00      	add	r7, sp, #0
3400ab4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3400ab50:	4b07      	ldr	r3, [pc, #28]	@ (3400ab70 <LL_RCC_SetMDFClockSource+0x28>)
3400ab52:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400ab56:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400ab5a:	4905      	ldr	r1, [pc, #20]	@ (3400ab70 <LL_RCC_SetMDFClockSource+0x28>)
3400ab5c:	687b      	ldr	r3, [r7, #4]
3400ab5e:	4313      	orrs	r3, r2
3400ab60:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
3400ab64:	bf00      	nop
3400ab66:	370c      	adds	r7, #12
3400ab68:	46bd      	mov	sp, r7
3400ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ab6e:	4770      	bx	lr
3400ab70:	56028000 	.word	0x56028000

3400ab74 <LL_RCC_SetOTGPHYClockSource>:
{
3400ab74:	b580      	push	{r7, lr}
3400ab76:	b082      	sub	sp, #8
3400ab78:	af00      	add	r7, sp, #0
3400ab7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400ab7c:	6878      	ldr	r0, [r7, #4]
3400ab7e:	f7ff fe89 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400ab82:	bf00      	nop
3400ab84:	3708      	adds	r7, #8
3400ab86:	46bd      	mov	sp, r7
3400ab88:	bd80      	pop	{r7, pc}

3400ab8a <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3400ab8a:	b580      	push	{r7, lr}
3400ab8c:	b082      	sub	sp, #8
3400ab8e:	af00      	add	r7, sp, #0
3400ab90:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400ab92:	6878      	ldr	r0, [r7, #4]
3400ab94:	f7ff fe7e 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400ab98:	bf00      	nop
3400ab9a:	3708      	adds	r7, #8
3400ab9c:	46bd      	mov	sp, r7
3400ab9e:	bd80      	pop	{r7, pc}

3400aba0 <LL_RCC_SetPSSIClockSource>:
{
3400aba0:	b480      	push	{r7}
3400aba2:	b083      	sub	sp, #12
3400aba4:	af00      	add	r7, sp, #0
3400aba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3400aba8:	4b07      	ldr	r3, [pc, #28]	@ (3400abc8 <LL_RCC_SetPSSIClockSource+0x28>)
3400abaa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400abae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3400abb2:	4905      	ldr	r1, [pc, #20]	@ (3400abc8 <LL_RCC_SetPSSIClockSource+0x28>)
3400abb4:	687b      	ldr	r3, [r7, #4]
3400abb6:	4313      	orrs	r3, r2
3400abb8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400abbc:	bf00      	nop
3400abbe:	370c      	adds	r7, #12
3400abc0:	46bd      	mov	sp, r7
3400abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400abc6:	4770      	bx	lr
3400abc8:	56028000 	.word	0x56028000

3400abcc <LL_RCC_SetSAIClockSource>:
{
3400abcc:	b580      	push	{r7, lr}
3400abce:	b082      	sub	sp, #8
3400abd0:	af00      	add	r7, sp, #0
3400abd2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400abd4:	6878      	ldr	r0, [r7, #4]
3400abd6:	f7ff fe5d 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400abda:	bf00      	nop
3400abdc:	3708      	adds	r7, #8
3400abde:	46bd      	mov	sp, r7
3400abe0:	bd80      	pop	{r7, pc}

3400abe2 <LL_RCC_SetSDMMCClockSource>:
{
3400abe2:	b580      	push	{r7, lr}
3400abe4:	b082      	sub	sp, #8
3400abe6:	af00      	add	r7, sp, #0
3400abe8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400abea:	6878      	ldr	r0, [r7, #4]
3400abec:	f7ff fe52 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400abf0:	bf00      	nop
3400abf2:	3708      	adds	r7, #8
3400abf4:	46bd      	mov	sp, r7
3400abf6:	bd80      	pop	{r7, pc}

3400abf8 <LL_RCC_SetSPDIFRXClockSource>:
{
3400abf8:	b480      	push	{r7}
3400abfa:	b083      	sub	sp, #12
3400abfc:	af00      	add	r7, sp, #0
3400abfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
3400ac00:	4b07      	ldr	r3, [pc, #28]	@ (3400ac20 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3400ac02:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400ac06:	f023 0207 	bic.w	r2, r3, #7
3400ac0a:	4905      	ldr	r1, [pc, #20]	@ (3400ac20 <LL_RCC_SetSPDIFRXClockSource+0x28>)
3400ac0c:	687b      	ldr	r3, [r7, #4]
3400ac0e:	4313      	orrs	r3, r2
3400ac10:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
3400ac14:	bf00      	nop
3400ac16:	370c      	adds	r7, #12
3400ac18:	46bd      	mov	sp, r7
3400ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ac1e:	4770      	bx	lr
3400ac20:	56028000 	.word	0x56028000

3400ac24 <LL_RCC_SetSPIClockSource>:
{
3400ac24:	b580      	push	{r7, lr}
3400ac26:	b082      	sub	sp, #8
3400ac28:	af00      	add	r7, sp, #0
3400ac2a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400ac2c:	6878      	ldr	r0, [r7, #4]
3400ac2e:	f7ff fe31 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400ac32:	bf00      	nop
3400ac34:	3708      	adds	r7, #8
3400ac36:	46bd      	mov	sp, r7
3400ac38:	bd80      	pop	{r7, pc}

3400ac3a <LL_RCC_SetUSARTClockSource>:
{
3400ac3a:	b580      	push	{r7, lr}
3400ac3c:	b082      	sub	sp, #8
3400ac3e:	af00      	add	r7, sp, #0
3400ac40:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400ac42:	6878      	ldr	r0, [r7, #4]
3400ac44:	f7ff fe26 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400ac48:	bf00      	nop
3400ac4a:	3708      	adds	r7, #8
3400ac4c:	46bd      	mov	sp, r7
3400ac4e:	bd80      	pop	{r7, pc}

3400ac50 <LL_RCC_SetXSPIClockSource>:
{
3400ac50:	b580      	push	{r7, lr}
3400ac52:	b082      	sub	sp, #8
3400ac54:	af00      	add	r7, sp, #0
3400ac56:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400ac58:	6878      	ldr	r0, [r7, #4]
3400ac5a:	f7ff fe1b 	bl	3400a894 <LL_RCC_SetClockSource>
}
3400ac5e:	bf00      	nop
3400ac60:	3708      	adds	r7, #8
3400ac62:	46bd      	mov	sp, r7
3400ac64:	bd80      	pop	{r7, pc}
	...

3400ac68 <LL_RCC_GetClockSource>:
{
3400ac68:	b480      	push	{r7}
3400ac6a:	b085      	sub	sp, #20
3400ac6c:	af00      	add	r7, sp, #0
3400ac6e:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3400ac70:	687b      	ldr	r3, [r7, #4]
3400ac72:	b2da      	uxtb	r2, r3
3400ac74:	4b0e      	ldr	r3, [pc, #56]	@ (3400acb0 <LL_RCC_GetClockSource+0x48>)
3400ac76:	4413      	add	r3, r2
3400ac78:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3400ac7a:	68fb      	ldr	r3, [r7, #12]
3400ac7c:	681a      	ldr	r2, [r3, #0]
3400ac7e:	687b      	ldr	r3, [r7, #4]
3400ac80:	0e19      	lsrs	r1, r3, #24
3400ac82:	687b      	ldr	r3, [r7, #4]
3400ac84:	0a1b      	lsrs	r3, r3, #8
3400ac86:	f003 031f 	and.w	r3, r3, #31
3400ac8a:	fa01 f303 	lsl.w	r3, r1, r3
3400ac8e:	401a      	ands	r2, r3
3400ac90:	687b      	ldr	r3, [r7, #4]
3400ac92:	0a1b      	lsrs	r3, r3, #8
3400ac94:	f003 031f 	and.w	r3, r3, #31
3400ac98:	fa22 f303 	lsr.w	r3, r2, r3
3400ac9c:	041a      	lsls	r2, r3, #16
3400ac9e:	687b      	ldr	r3, [r7, #4]
3400aca0:	4313      	orrs	r3, r2
}
3400aca2:	4618      	mov	r0, r3
3400aca4:	3714      	adds	r7, #20
3400aca6:	46bd      	mov	sp, r7
3400aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400acac:	4770      	bx	lr
3400acae:	bf00      	nop
3400acb0:	56028144 	.word	0x56028144

3400acb4 <LL_RCC_GetADCClockSource>:
{
3400acb4:	b480      	push	{r7}
3400acb6:	b083      	sub	sp, #12
3400acb8:	af00      	add	r7, sp, #0
3400acba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3400acbc:	4b05      	ldr	r3, [pc, #20]	@ (3400acd4 <LL_RCC_GetADCClockSource+0x20>)
3400acbe:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400acc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3400acc6:	4618      	mov	r0, r3
3400acc8:	370c      	adds	r7, #12
3400acca:	46bd      	mov	sp, r7
3400accc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400acd0:	4770      	bx	lr
3400acd2:	bf00      	nop
3400acd4:	56028000 	.word	0x56028000

3400acd8 <LL_RCC_GetADFClockSource>:
{
3400acd8:	b480      	push	{r7}
3400acda:	b083      	sub	sp, #12
3400acdc:	af00      	add	r7, sp, #0
3400acde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3400ace0:	4b05      	ldr	r3, [pc, #20]	@ (3400acf8 <LL_RCC_GetADFClockSource+0x20>)
3400ace2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400ace6:	f003 0307 	and.w	r3, r3, #7
}
3400acea:	4618      	mov	r0, r3
3400acec:	370c      	adds	r7, #12
3400acee:	46bd      	mov	sp, r7
3400acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
3400acf4:	4770      	bx	lr
3400acf6:	bf00      	nop
3400acf8:	56028000 	.word	0x56028000

3400acfc <LL_RCC_GetCLKPClockSource>:
{
3400acfc:	b480      	push	{r7}
3400acfe:	b083      	sub	sp, #12
3400ad00:	af00      	add	r7, sp, #0
3400ad02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
3400ad04:	4b05      	ldr	r3, [pc, #20]	@ (3400ad1c <LL_RCC_GetCLKPClockSource+0x20>)
3400ad06:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400ad0a:	f003 0307 	and.w	r3, r3, #7
}
3400ad0e:	4618      	mov	r0, r3
3400ad10:	370c      	adds	r7, #12
3400ad12:	46bd      	mov	sp, r7
3400ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ad18:	4770      	bx	lr
3400ad1a:	bf00      	nop
3400ad1c:	56028000 	.word	0x56028000

3400ad20 <LL_RCC_GetDCMIPPClockSource>:
{
3400ad20:	b480      	push	{r7}
3400ad22:	b083      	sub	sp, #12
3400ad24:	af00      	add	r7, sp, #0
3400ad26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
3400ad28:	4b05      	ldr	r3, [pc, #20]	@ (3400ad40 <LL_RCC_GetDCMIPPClockSource+0x20>)
3400ad2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400ad2e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
3400ad32:	4618      	mov	r0, r3
3400ad34:	370c      	adds	r7, #12
3400ad36:	46bd      	mov	sp, r7
3400ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ad3c:	4770      	bx	lr
3400ad3e:	bf00      	nop
3400ad40:	56028000 	.word	0x56028000

3400ad44 <LL_RCC_GetETHClockSource>:
{
3400ad44:	b480      	push	{r7}
3400ad46:	b083      	sub	sp, #12
3400ad48:	af00      	add	r7, sp, #0
3400ad4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3400ad4c:	4b05      	ldr	r3, [pc, #20]	@ (3400ad64 <LL_RCC_GetETHClockSource+0x20>)
3400ad4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400ad52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
3400ad56:	4618      	mov	r0, r3
3400ad58:	370c      	adds	r7, #12
3400ad5a:	46bd      	mov	sp, r7
3400ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ad60:	4770      	bx	lr
3400ad62:	bf00      	nop
3400ad64:	56028000 	.word	0x56028000

3400ad68 <LL_RCC_GetETHPTPClockSource>:
{
3400ad68:	b480      	push	{r7}
3400ad6a:	b083      	sub	sp, #12
3400ad6c:	af00      	add	r7, sp, #0
3400ad6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3400ad70:	4b05      	ldr	r3, [pc, #20]	@ (3400ad88 <LL_RCC_GetETHPTPClockSource+0x20>)
3400ad72:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400ad76:	f003 0303 	and.w	r3, r3, #3
}
3400ad7a:	4618      	mov	r0, r3
3400ad7c:	370c      	adds	r7, #12
3400ad7e:	46bd      	mov	sp, r7
3400ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ad84:	4770      	bx	lr
3400ad86:	bf00      	nop
3400ad88:	56028000 	.word	0x56028000

3400ad8c <LL_RCC_GetFDCANClockSource>:
{
3400ad8c:	b480      	push	{r7}
3400ad8e:	b083      	sub	sp, #12
3400ad90:	af00      	add	r7, sp, #0
3400ad92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3400ad94:	4b05      	ldr	r3, [pc, #20]	@ (3400adac <LL_RCC_GetFDCANClockSource+0x20>)
3400ad96:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400ad9a:	f003 0303 	and.w	r3, r3, #3
}
3400ad9e:	4618      	mov	r0, r3
3400ada0:	370c      	adds	r7, #12
3400ada2:	46bd      	mov	sp, r7
3400ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ada8:	4770      	bx	lr
3400adaa:	bf00      	nop
3400adac:	56028000 	.word	0x56028000

3400adb0 <LL_RCC_GetFMCClockSource>:
{
3400adb0:	b480      	push	{r7}
3400adb2:	b083      	sub	sp, #12
3400adb4:	af00      	add	r7, sp, #0
3400adb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
3400adb8:	4b05      	ldr	r3, [pc, #20]	@ (3400add0 <LL_RCC_GetFMCClockSource+0x20>)
3400adba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400adbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3400adc2:	4618      	mov	r0, r3
3400adc4:	370c      	adds	r7, #12
3400adc6:	46bd      	mov	sp, r7
3400adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400adcc:	4770      	bx	lr
3400adce:	bf00      	nop
3400add0:	56028000 	.word	0x56028000

3400add4 <LL_RCC_GetI2CClockSource>:
{
3400add4:	b580      	push	{r7, lr}
3400add6:	b082      	sub	sp, #8
3400add8:	af00      	add	r7, sp, #0
3400adda:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400addc:	6878      	ldr	r0, [r7, #4]
3400adde:	f7ff ff43 	bl	3400ac68 <LL_RCC_GetClockSource>
3400ade2:	4603      	mov	r3, r0
}
3400ade4:	4618      	mov	r0, r3
3400ade6:	3708      	adds	r7, #8
3400ade8:	46bd      	mov	sp, r7
3400adea:	bd80      	pop	{r7, pc}

3400adec <LL_RCC_GetI3CClockSource>:
{
3400adec:	b580      	push	{r7, lr}
3400adee:	b082      	sub	sp, #8
3400adf0:	af00      	add	r7, sp, #0
3400adf2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400adf4:	6878      	ldr	r0, [r7, #4]
3400adf6:	f7ff ff37 	bl	3400ac68 <LL_RCC_GetClockSource>
3400adfa:	4603      	mov	r3, r0
}
3400adfc:	4618      	mov	r0, r3
3400adfe:	3708      	adds	r7, #8
3400ae00:	46bd      	mov	sp, r7
3400ae02:	bd80      	pop	{r7, pc}

3400ae04 <LL_RCC_GetLPTIMClockSource>:
{
3400ae04:	b580      	push	{r7, lr}
3400ae06:	b082      	sub	sp, #8
3400ae08:	af00      	add	r7, sp, #0
3400ae0a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400ae0c:	6878      	ldr	r0, [r7, #4]
3400ae0e:	f7ff ff2b 	bl	3400ac68 <LL_RCC_GetClockSource>
3400ae12:	4603      	mov	r3, r0
}
3400ae14:	4618      	mov	r0, r3
3400ae16:	3708      	adds	r7, #8
3400ae18:	46bd      	mov	sp, r7
3400ae1a:	bd80      	pop	{r7, pc}

3400ae1c <LL_RCC_GetLPUARTClockSource>:
{
3400ae1c:	b480      	push	{r7}
3400ae1e:	b083      	sub	sp, #12
3400ae20:	af00      	add	r7, sp, #0
3400ae22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3400ae24:	4b05      	ldr	r3, [pc, #20]	@ (3400ae3c <LL_RCC_GetLPUARTClockSource+0x20>)
3400ae26:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400ae2a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
3400ae2e:	4618      	mov	r0, r3
3400ae30:	370c      	adds	r7, #12
3400ae32:	46bd      	mov	sp, r7
3400ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ae38:	4770      	bx	lr
3400ae3a:	bf00      	nop
3400ae3c:	56028000 	.word	0x56028000

3400ae40 <LL_RCC_GetLTDCClockSource>:
{
3400ae40:	b480      	push	{r7}
3400ae42:	b083      	sub	sp, #12
3400ae44:	af00      	add	r7, sp, #0
3400ae46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
3400ae48:	4b05      	ldr	r3, [pc, #20]	@ (3400ae60 <LL_RCC_GetLTDCClockSource+0x20>)
3400ae4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400ae4e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
3400ae52:	4618      	mov	r0, r3
3400ae54:	370c      	adds	r7, #12
3400ae56:	46bd      	mov	sp, r7
3400ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ae5c:	4770      	bx	lr
3400ae5e:	bf00      	nop
3400ae60:	56028000 	.word	0x56028000

3400ae64 <LL_RCC_GetMDFClockSource>:
{
3400ae64:	b480      	push	{r7}
3400ae66:	b083      	sub	sp, #12
3400ae68:	af00      	add	r7, sp, #0
3400ae6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3400ae6c:	4b05      	ldr	r3, [pc, #20]	@ (3400ae84 <LL_RCC_GetMDFClockSource+0x20>)
3400ae6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400ae72:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
3400ae76:	4618      	mov	r0, r3
3400ae78:	370c      	adds	r7, #12
3400ae7a:	46bd      	mov	sp, r7
3400ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ae80:	4770      	bx	lr
3400ae82:	bf00      	nop
3400ae84:	56028000 	.word	0x56028000

3400ae88 <LL_RCC_GetPSSIClockSource>:
{
3400ae88:	b480      	push	{r7}
3400ae8a:	b083      	sub	sp, #12
3400ae8c:	af00      	add	r7, sp, #0
3400ae8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3400ae90:	4b05      	ldr	r3, [pc, #20]	@ (3400aea8 <LL_RCC_GetPSSIClockSource+0x20>)
3400ae92:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400ae96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3400ae9a:	4618      	mov	r0, r3
3400ae9c:	370c      	adds	r7, #12
3400ae9e:	46bd      	mov	sp, r7
3400aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aea4:	4770      	bx	lr
3400aea6:	bf00      	nop
3400aea8:	56028000 	.word	0x56028000

3400aeac <LL_RCC_GetSAIClockSource>:
{
3400aeac:	b580      	push	{r7, lr}
3400aeae:	b082      	sub	sp, #8
3400aeb0:	af00      	add	r7, sp, #0
3400aeb2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400aeb4:	6878      	ldr	r0, [r7, #4]
3400aeb6:	f7ff fed7 	bl	3400ac68 <LL_RCC_GetClockSource>
3400aeba:	4603      	mov	r3, r0
}
3400aebc:	4618      	mov	r0, r3
3400aebe:	3708      	adds	r7, #8
3400aec0:	46bd      	mov	sp, r7
3400aec2:	bd80      	pop	{r7, pc}

3400aec4 <LL_RCC_GetSDMMCClockSource>:
{
3400aec4:	b580      	push	{r7, lr}
3400aec6:	b082      	sub	sp, #8
3400aec8:	af00      	add	r7, sp, #0
3400aeca:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400aecc:	6878      	ldr	r0, [r7, #4]
3400aece:	f7ff fecb 	bl	3400ac68 <LL_RCC_GetClockSource>
3400aed2:	4603      	mov	r3, r0
}
3400aed4:	4618      	mov	r0, r3
3400aed6:	3708      	adds	r7, #8
3400aed8:	46bd      	mov	sp, r7
3400aeda:	bd80      	pop	{r7, pc}

3400aedc <LL_RCC_GetSPDIFRXClockSource>:
{
3400aedc:	b480      	push	{r7}
3400aede:	b083      	sub	sp, #12
3400aee0:	af00      	add	r7, sp, #0
3400aee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
3400aee4:	4b05      	ldr	r3, [pc, #20]	@ (3400aefc <LL_RCC_GetSPDIFRXClockSource+0x20>)
3400aee6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400aeea:	f003 0307 	and.w	r3, r3, #7
}
3400aeee:	4618      	mov	r0, r3
3400aef0:	370c      	adds	r7, #12
3400aef2:	46bd      	mov	sp, r7
3400aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aef8:	4770      	bx	lr
3400aefa:	bf00      	nop
3400aefc:	56028000 	.word	0x56028000

3400af00 <LL_RCC_GetSPIClockSource>:
{
3400af00:	b580      	push	{r7, lr}
3400af02:	b082      	sub	sp, #8
3400af04:	af00      	add	r7, sp, #0
3400af06:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400af08:	6878      	ldr	r0, [r7, #4]
3400af0a:	f7ff fead 	bl	3400ac68 <LL_RCC_GetClockSource>
3400af0e:	4603      	mov	r3, r0
}
3400af10:	4618      	mov	r0, r3
3400af12:	3708      	adds	r7, #8
3400af14:	46bd      	mov	sp, r7
3400af16:	bd80      	pop	{r7, pc}

3400af18 <LL_RCC_GetUSARTClockSource>:
{
3400af18:	b580      	push	{r7, lr}
3400af1a:	b082      	sub	sp, #8
3400af1c:	af00      	add	r7, sp, #0
3400af1e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400af20:	6878      	ldr	r0, [r7, #4]
3400af22:	f7ff fea1 	bl	3400ac68 <LL_RCC_GetClockSource>
3400af26:	4603      	mov	r3, r0
}
3400af28:	4618      	mov	r0, r3
3400af2a:	3708      	adds	r7, #8
3400af2c:	46bd      	mov	sp, r7
3400af2e:	bd80      	pop	{r7, pc}

3400af30 <LL_RCC_GetUARTClockSource>:
{
3400af30:	b580      	push	{r7, lr}
3400af32:	b082      	sub	sp, #8
3400af34:	af00      	add	r7, sp, #0
3400af36:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400af38:	6878      	ldr	r0, [r7, #4]
3400af3a:	f7ff fe95 	bl	3400ac68 <LL_RCC_GetClockSource>
3400af3e:	4603      	mov	r3, r0
}
3400af40:	4618      	mov	r0, r3
3400af42:	3708      	adds	r7, #8
3400af44:	46bd      	mov	sp, r7
3400af46:	bd80      	pop	{r7, pc}

3400af48 <LL_RCC_GetUSBClockSource>:
{
3400af48:	b580      	push	{r7, lr}
3400af4a:	b082      	sub	sp, #8
3400af4c:	af00      	add	r7, sp, #0
3400af4e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400af50:	6878      	ldr	r0, [r7, #4]
3400af52:	f7ff fe89 	bl	3400ac68 <LL_RCC_GetClockSource>
3400af56:	4603      	mov	r3, r0
}
3400af58:	4618      	mov	r0, r3
3400af5a:	3708      	adds	r7, #8
3400af5c:	46bd      	mov	sp, r7
3400af5e:	bd80      	pop	{r7, pc}

3400af60 <LL_RCC_GetXSPIClockSource>:
{
3400af60:	b580      	push	{r7, lr}
3400af62:	b082      	sub	sp, #8
3400af64:	af00      	add	r7, sp, #0
3400af66:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400af68:	6878      	ldr	r0, [r7, #4]
3400af6a:	f7ff fe7d 	bl	3400ac68 <LL_RCC_GetClockSource>
3400af6e:	4603      	mov	r3, r0
}
3400af70:	4618      	mov	r0, r3
3400af72:	3708      	adds	r7, #8
3400af74:	46bd      	mov	sp, r7
3400af76:	bd80      	pop	{r7, pc}

3400af78 <LL_RCC_SetRTCClockSource>:
{
3400af78:	b480      	push	{r7}
3400af7a:	b083      	sub	sp, #12
3400af7c:	af00      	add	r7, sp, #0
3400af7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3400af80:	4b07      	ldr	r3, [pc, #28]	@ (3400afa0 <LL_RCC_SetRTCClockSource+0x28>)
3400af82:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400af86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
3400af8a:	4905      	ldr	r1, [pc, #20]	@ (3400afa0 <LL_RCC_SetRTCClockSource+0x28>)
3400af8c:	687b      	ldr	r3, [r7, #4]
3400af8e:	4313      	orrs	r3, r2
3400af90:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400af94:	bf00      	nop
3400af96:	370c      	adds	r7, #12
3400af98:	46bd      	mov	sp, r7
3400af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400af9e:	4770      	bx	lr
3400afa0:	56028000 	.word	0x56028000

3400afa4 <LL_RCC_GetRTCClockSource>:
{
3400afa4:	b480      	push	{r7}
3400afa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3400afa8:	4b04      	ldr	r3, [pc, #16]	@ (3400afbc <LL_RCC_GetRTCClockSource+0x18>)
3400afaa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400afae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3400afb2:	4618      	mov	r0, r3
3400afb4:	46bd      	mov	sp, r7
3400afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400afba:	4770      	bx	lr
3400afbc:	56028000 	.word	0x56028000

3400afc0 <LL_RCC_SetRTC_HSEPrescaler>:
{
3400afc0:	b480      	push	{r7}
3400afc2:	b083      	sub	sp, #12
3400afc4:	af00      	add	r7, sp, #0
3400afc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3400afc8:	4b07      	ldr	r3, [pc, #28]	@ (3400afe8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3400afca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400afce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3400afd2:	4905      	ldr	r1, [pc, #20]	@ (3400afe8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3400afd4:	687b      	ldr	r3, [r7, #4]
3400afd6:	4313      	orrs	r3, r2
3400afd8:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400afdc:	bf00      	nop
3400afde:	370c      	adds	r7, #12
3400afe0:	46bd      	mov	sp, r7
3400afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400afe6:	4770      	bx	lr
3400afe8:	56028000 	.word	0x56028000

3400afec <LL_RCC_SetTIMPrescaler>:
{
3400afec:	b480      	push	{r7}
3400afee:	b083      	sub	sp, #12
3400aff0:	af00      	add	r7, sp, #0
3400aff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3400aff4:	4b07      	ldr	r3, [pc, #28]	@ (3400b014 <LL_RCC_SetTIMPrescaler+0x28>)
3400aff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aff8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3400affc:	687b      	ldr	r3, [r7, #4]
3400affe:	061b      	lsls	r3, r3, #24
3400b000:	4904      	ldr	r1, [pc, #16]	@ (3400b014 <LL_RCC_SetTIMPrescaler+0x28>)
3400b002:	4313      	orrs	r3, r2
3400b004:	624b      	str	r3, [r1, #36]	@ 0x24
}
3400b006:	bf00      	nop
3400b008:	370c      	adds	r7, #12
3400b00a:	46bd      	mov	sp, r7
3400b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b010:	4770      	bx	lr
3400b012:	bf00      	nop
3400b014:	56028000 	.word	0x56028000

3400b018 <LL_RCC_GetTIMPrescaler>:
{
3400b018:	b480      	push	{r7}
3400b01a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3400b01c:	4b04      	ldr	r3, [pc, #16]	@ (3400b030 <LL_RCC_GetTIMPrescaler+0x18>)
3400b01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b020:	0e1b      	lsrs	r3, r3, #24
3400b022:	f003 0303 	and.w	r3, r3, #3
}
3400b026:	4618      	mov	r0, r3
3400b028:	46bd      	mov	sp, r7
3400b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b02e:	4770      	bx	lr
3400b030:	56028000 	.word	0x56028000

3400b034 <LL_RCC_PLL1_GetSource>:
{
3400b034:	b480      	push	{r7}
3400b036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3400b038:	4b04      	ldr	r3, [pc, #16]	@ (3400b04c <LL_RCC_PLL1_GetSource+0x18>)
3400b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400b03e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400b042:	4618      	mov	r0, r3
3400b044:	46bd      	mov	sp, r7
3400b046:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b04a:	4770      	bx	lr
3400b04c:	56028000 	.word	0x56028000

3400b050 <LL_RCC_PLL1_IsReady>:
{
3400b050:	b480      	push	{r7}
3400b052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3400b054:	4b07      	ldr	r3, [pc, #28]	@ (3400b074 <LL_RCC_PLL1_IsReady+0x24>)
3400b056:	685b      	ldr	r3, [r3, #4]
3400b058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400b05c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b060:	d101      	bne.n	3400b066 <LL_RCC_PLL1_IsReady+0x16>
3400b062:	2301      	movs	r3, #1
3400b064:	e000      	b.n	3400b068 <LL_RCC_PLL1_IsReady+0x18>
3400b066:	2300      	movs	r3, #0
}
3400b068:	4618      	mov	r0, r3
3400b06a:	46bd      	mov	sp, r7
3400b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b070:	4770      	bx	lr
3400b072:	bf00      	nop
3400b074:	56028000 	.word	0x56028000

3400b078 <LL_RCC_PLL1_IsEnabledBypass>:
{
3400b078:	b480      	push	{r7}
3400b07a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400b07c:	4b07      	ldr	r3, [pc, #28]	@ (3400b09c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3400b07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400b082:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400b086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400b08a:	d101      	bne.n	3400b090 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3400b08c:	2301      	movs	r3, #1
3400b08e:	e000      	b.n	3400b092 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3400b090:	2300      	movs	r3, #0
}
3400b092:	4618      	mov	r0, r3
3400b094:	46bd      	mov	sp, r7
3400b096:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b09a:	4770      	bx	lr
3400b09c:	56028000 	.word	0x56028000

3400b0a0 <LL_RCC_PLL1_GetN>:
{
3400b0a0:	b480      	push	{r7}
3400b0a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3400b0a4:	4b05      	ldr	r3, [pc, #20]	@ (3400b0bc <LL_RCC_PLL1_GetN+0x1c>)
3400b0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400b0aa:	0a1b      	lsrs	r3, r3, #8
3400b0ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3400b0b0:	4618      	mov	r0, r3
3400b0b2:	46bd      	mov	sp, r7
3400b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b0b8:	4770      	bx	lr
3400b0ba:	bf00      	nop
3400b0bc:	56028000 	.word	0x56028000

3400b0c0 <LL_RCC_PLL1_GetM>:
{
3400b0c0:	b480      	push	{r7}
3400b0c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3400b0c4:	4b05      	ldr	r3, [pc, #20]	@ (3400b0dc <LL_RCC_PLL1_GetM+0x1c>)
3400b0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400b0ca:	0d1b      	lsrs	r3, r3, #20
3400b0cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3400b0d0:	4618      	mov	r0, r3
3400b0d2:	46bd      	mov	sp, r7
3400b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b0d8:	4770      	bx	lr
3400b0da:	bf00      	nop
3400b0dc:	56028000 	.word	0x56028000

3400b0e0 <LL_RCC_PLL1_GetP1>:
{
3400b0e0:	b480      	push	{r7}
3400b0e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3400b0e4:	4b05      	ldr	r3, [pc, #20]	@ (3400b0fc <LL_RCC_PLL1_GetP1+0x1c>)
3400b0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b0ea:	0edb      	lsrs	r3, r3, #27
3400b0ec:	f003 0307 	and.w	r3, r3, #7
}
3400b0f0:	4618      	mov	r0, r3
3400b0f2:	46bd      	mov	sp, r7
3400b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b0f8:	4770      	bx	lr
3400b0fa:	bf00      	nop
3400b0fc:	56028000 	.word	0x56028000

3400b100 <LL_RCC_PLL1_GetP2>:
{
3400b100:	b480      	push	{r7}
3400b102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3400b104:	4b05      	ldr	r3, [pc, #20]	@ (3400b11c <LL_RCC_PLL1_GetP2+0x1c>)
3400b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b10a:	0e1b      	lsrs	r3, r3, #24
3400b10c:	f003 0307 	and.w	r3, r3, #7
}
3400b110:	4618      	mov	r0, r3
3400b112:	46bd      	mov	sp, r7
3400b114:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b118:	4770      	bx	lr
3400b11a:	bf00      	nop
3400b11c:	56028000 	.word	0x56028000

3400b120 <LL_RCC_PLL1P_IsEnabled>:
{
3400b120:	b480      	push	{r7}
3400b122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3400b124:	4b07      	ldr	r3, [pc, #28]	@ (3400b144 <LL_RCC_PLL1P_IsEnabled+0x24>)
3400b126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b12a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400b12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400b132:	d101      	bne.n	3400b138 <LL_RCC_PLL1P_IsEnabled+0x18>
3400b134:	2301      	movs	r3, #1
3400b136:	e000      	b.n	3400b13a <LL_RCC_PLL1P_IsEnabled+0x1a>
3400b138:	2300      	movs	r3, #0
}
3400b13a:	4618      	mov	r0, r3
3400b13c:	46bd      	mov	sp, r7
3400b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b142:	4770      	bx	lr
3400b144:	56028000 	.word	0x56028000

3400b148 <LL_RCC_PLL1_GetFRACN>:
{
3400b148:	b480      	push	{r7}
3400b14a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3400b14c:	4b04      	ldr	r3, [pc, #16]	@ (3400b160 <LL_RCC_PLL1_GetFRACN+0x18>)
3400b14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400b152:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400b156:	4618      	mov	r0, r3
3400b158:	46bd      	mov	sp, r7
3400b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b15e:	4770      	bx	lr
3400b160:	56028000 	.word	0x56028000

3400b164 <LL_RCC_PLL2_GetSource>:
{
3400b164:	b480      	push	{r7}
3400b166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3400b168:	4b04      	ldr	r3, [pc, #16]	@ (3400b17c <LL_RCC_PLL2_GetSource+0x18>)
3400b16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b16e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400b172:	4618      	mov	r0, r3
3400b174:	46bd      	mov	sp, r7
3400b176:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b17a:	4770      	bx	lr
3400b17c:	56028000 	.word	0x56028000

3400b180 <LL_RCC_PLL2_IsReady>:
{
3400b180:	b480      	push	{r7}
3400b182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3400b184:	4b07      	ldr	r3, [pc, #28]	@ (3400b1a4 <LL_RCC_PLL2_IsReady+0x24>)
3400b186:	685b      	ldr	r3, [r3, #4]
3400b188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400b18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400b190:	d101      	bne.n	3400b196 <LL_RCC_PLL2_IsReady+0x16>
3400b192:	2301      	movs	r3, #1
3400b194:	e000      	b.n	3400b198 <LL_RCC_PLL2_IsReady+0x18>
3400b196:	2300      	movs	r3, #0
}
3400b198:	4618      	mov	r0, r3
3400b19a:	46bd      	mov	sp, r7
3400b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b1a0:	4770      	bx	lr
3400b1a2:	bf00      	nop
3400b1a4:	56028000 	.word	0x56028000

3400b1a8 <LL_RCC_PLL2_IsEnabledBypass>:
{
3400b1a8:	b480      	push	{r7}
3400b1aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400b1ac:	4b07      	ldr	r3, [pc, #28]	@ (3400b1cc <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3400b1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b1b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400b1b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400b1ba:	d101      	bne.n	3400b1c0 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3400b1bc:	2301      	movs	r3, #1
3400b1be:	e000      	b.n	3400b1c2 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3400b1c0:	2300      	movs	r3, #0
}
3400b1c2:	4618      	mov	r0, r3
3400b1c4:	46bd      	mov	sp, r7
3400b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b1ca:	4770      	bx	lr
3400b1cc:	56028000 	.word	0x56028000

3400b1d0 <LL_RCC_PLL2_GetN>:
{
3400b1d0:	b480      	push	{r7}
3400b1d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3400b1d4:	4b05      	ldr	r3, [pc, #20]	@ (3400b1ec <LL_RCC_PLL2_GetN+0x1c>)
3400b1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b1da:	0a1b      	lsrs	r3, r3, #8
3400b1dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3400b1e0:	4618      	mov	r0, r3
3400b1e2:	46bd      	mov	sp, r7
3400b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b1e8:	4770      	bx	lr
3400b1ea:	bf00      	nop
3400b1ec:	56028000 	.word	0x56028000

3400b1f0 <LL_RCC_PLL2_GetM>:
{
3400b1f0:	b480      	push	{r7}
3400b1f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3400b1f4:	4b05      	ldr	r3, [pc, #20]	@ (3400b20c <LL_RCC_PLL2_GetM+0x1c>)
3400b1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b1fa:	0d1b      	lsrs	r3, r3, #20
3400b1fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3400b200:	4618      	mov	r0, r3
3400b202:	46bd      	mov	sp, r7
3400b204:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b208:	4770      	bx	lr
3400b20a:	bf00      	nop
3400b20c:	56028000 	.word	0x56028000

3400b210 <LL_RCC_PLL2_GetP1>:
{
3400b210:	b480      	push	{r7}
3400b212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3400b214:	4b05      	ldr	r3, [pc, #20]	@ (3400b22c <LL_RCC_PLL2_GetP1+0x1c>)
3400b216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b21a:	0edb      	lsrs	r3, r3, #27
3400b21c:	f003 0307 	and.w	r3, r3, #7
}
3400b220:	4618      	mov	r0, r3
3400b222:	46bd      	mov	sp, r7
3400b224:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b228:	4770      	bx	lr
3400b22a:	bf00      	nop
3400b22c:	56028000 	.word	0x56028000

3400b230 <LL_RCC_PLL2_GetP2>:
{
3400b230:	b480      	push	{r7}
3400b232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3400b234:	4b05      	ldr	r3, [pc, #20]	@ (3400b24c <LL_RCC_PLL2_GetP2+0x1c>)
3400b236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b23a:	0e1b      	lsrs	r3, r3, #24
3400b23c:	f003 0307 	and.w	r3, r3, #7
}
3400b240:	4618      	mov	r0, r3
3400b242:	46bd      	mov	sp, r7
3400b244:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b248:	4770      	bx	lr
3400b24a:	bf00      	nop
3400b24c:	56028000 	.word	0x56028000

3400b250 <LL_RCC_PLL2P_IsEnabled>:
{
3400b250:	b480      	push	{r7}
3400b252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3400b254:	4b07      	ldr	r3, [pc, #28]	@ (3400b274 <LL_RCC_PLL2P_IsEnabled+0x24>)
3400b256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b25a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400b25e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400b262:	d101      	bne.n	3400b268 <LL_RCC_PLL2P_IsEnabled+0x18>
3400b264:	2301      	movs	r3, #1
3400b266:	e000      	b.n	3400b26a <LL_RCC_PLL2P_IsEnabled+0x1a>
3400b268:	2300      	movs	r3, #0
}
3400b26a:	4618      	mov	r0, r3
3400b26c:	46bd      	mov	sp, r7
3400b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b272:	4770      	bx	lr
3400b274:	56028000 	.word	0x56028000

3400b278 <LL_RCC_PLL2_GetFRACN>:
{
3400b278:	b480      	push	{r7}
3400b27a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3400b27c:	4b04      	ldr	r3, [pc, #16]	@ (3400b290 <LL_RCC_PLL2_GetFRACN+0x18>)
3400b27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b282:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400b286:	4618      	mov	r0, r3
3400b288:	46bd      	mov	sp, r7
3400b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b28e:	4770      	bx	lr
3400b290:	56028000 	.word	0x56028000

3400b294 <LL_RCC_PLL3_GetSource>:
{
3400b294:	b480      	push	{r7}
3400b296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3400b298:	4b04      	ldr	r3, [pc, #16]	@ (3400b2ac <LL_RCC_PLL3_GetSource+0x18>)
3400b29a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400b29e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400b2a2:	4618      	mov	r0, r3
3400b2a4:	46bd      	mov	sp, r7
3400b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b2aa:	4770      	bx	lr
3400b2ac:	56028000 	.word	0x56028000

3400b2b0 <LL_RCC_PLL3_IsReady>:
{
3400b2b0:	b480      	push	{r7}
3400b2b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400b2b4:	4b07      	ldr	r3, [pc, #28]	@ (3400b2d4 <LL_RCC_PLL3_IsReady+0x24>)
3400b2b6:	685b      	ldr	r3, [r3, #4]
3400b2b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400b2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400b2c0:	d101      	bne.n	3400b2c6 <LL_RCC_PLL3_IsReady+0x16>
3400b2c2:	2301      	movs	r3, #1
3400b2c4:	e000      	b.n	3400b2c8 <LL_RCC_PLL3_IsReady+0x18>
3400b2c6:	2300      	movs	r3, #0
}
3400b2c8:	4618      	mov	r0, r3
3400b2ca:	46bd      	mov	sp, r7
3400b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b2d0:	4770      	bx	lr
3400b2d2:	bf00      	nop
3400b2d4:	56028000 	.word	0x56028000

3400b2d8 <LL_RCC_PLL3_IsEnabledBypass>:
{
3400b2d8:	b480      	push	{r7}
3400b2da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400b2dc:	4b07      	ldr	r3, [pc, #28]	@ (3400b2fc <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3400b2de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400b2e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400b2e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400b2ea:	d101      	bne.n	3400b2f0 <LL_RCC_PLL3_IsEnabledBypass+0x18>
3400b2ec:	2301      	movs	r3, #1
3400b2ee:	e000      	b.n	3400b2f2 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
3400b2f0:	2300      	movs	r3, #0
}
3400b2f2:	4618      	mov	r0, r3
3400b2f4:	46bd      	mov	sp, r7
3400b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b2fa:	4770      	bx	lr
3400b2fc:	56028000 	.word	0x56028000

3400b300 <LL_RCC_PLL3_GetN>:
{
3400b300:	b480      	push	{r7}
3400b302:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3400b304:	4b05      	ldr	r3, [pc, #20]	@ (3400b31c <LL_RCC_PLL3_GetN+0x1c>)
3400b306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400b30a:	0a1b      	lsrs	r3, r3, #8
3400b30c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3400b310:	4618      	mov	r0, r3
3400b312:	46bd      	mov	sp, r7
3400b314:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b318:	4770      	bx	lr
3400b31a:	bf00      	nop
3400b31c:	56028000 	.word	0x56028000

3400b320 <LL_RCC_PLL3_GetM>:
{
3400b320:	b480      	push	{r7}
3400b322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3400b324:	4b05      	ldr	r3, [pc, #20]	@ (3400b33c <LL_RCC_PLL3_GetM+0x1c>)
3400b326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400b32a:	0d1b      	lsrs	r3, r3, #20
3400b32c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3400b330:	4618      	mov	r0, r3
3400b332:	46bd      	mov	sp, r7
3400b334:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b338:	4770      	bx	lr
3400b33a:	bf00      	nop
3400b33c:	56028000 	.word	0x56028000

3400b340 <LL_RCC_PLL3_GetP1>:
{
3400b340:	b480      	push	{r7}
3400b342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3400b344:	4b05      	ldr	r3, [pc, #20]	@ (3400b35c <LL_RCC_PLL3_GetP1+0x1c>)
3400b346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b34a:	0edb      	lsrs	r3, r3, #27
3400b34c:	f003 0307 	and.w	r3, r3, #7
}
3400b350:	4618      	mov	r0, r3
3400b352:	46bd      	mov	sp, r7
3400b354:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b358:	4770      	bx	lr
3400b35a:	bf00      	nop
3400b35c:	56028000 	.word	0x56028000

3400b360 <LL_RCC_PLL3_GetP2>:
{
3400b360:	b480      	push	{r7}
3400b362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3400b364:	4b05      	ldr	r3, [pc, #20]	@ (3400b37c <LL_RCC_PLL3_GetP2+0x1c>)
3400b366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b36a:	0e1b      	lsrs	r3, r3, #24
3400b36c:	f003 0307 	and.w	r3, r3, #7
}
3400b370:	4618      	mov	r0, r3
3400b372:	46bd      	mov	sp, r7
3400b374:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b378:	4770      	bx	lr
3400b37a:	bf00      	nop
3400b37c:	56028000 	.word	0x56028000

3400b380 <LL_RCC_PLL3P_IsEnabled>:
{
3400b380:	b480      	push	{r7}
3400b382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3400b384:	4b07      	ldr	r3, [pc, #28]	@ (3400b3a4 <LL_RCC_PLL3P_IsEnabled+0x24>)
3400b386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b38a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400b38e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400b392:	d101      	bne.n	3400b398 <LL_RCC_PLL3P_IsEnabled+0x18>
3400b394:	2301      	movs	r3, #1
3400b396:	e000      	b.n	3400b39a <LL_RCC_PLL3P_IsEnabled+0x1a>
3400b398:	2300      	movs	r3, #0
}
3400b39a:	4618      	mov	r0, r3
3400b39c:	46bd      	mov	sp, r7
3400b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b3a2:	4770      	bx	lr
3400b3a4:	56028000 	.word	0x56028000

3400b3a8 <LL_RCC_PLL3_GetFRACN>:
{
3400b3a8:	b480      	push	{r7}
3400b3aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3400b3ac:	4b04      	ldr	r3, [pc, #16]	@ (3400b3c0 <LL_RCC_PLL3_GetFRACN+0x18>)
3400b3ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400b3b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400b3b6:	4618      	mov	r0, r3
3400b3b8:	46bd      	mov	sp, r7
3400b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b3be:	4770      	bx	lr
3400b3c0:	56028000 	.word	0x56028000

3400b3c4 <LL_RCC_PLL4_GetSource>:
{
3400b3c4:	b480      	push	{r7}
3400b3c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3400b3c8:	4b04      	ldr	r3, [pc, #16]	@ (3400b3dc <LL_RCC_PLL4_GetSource+0x18>)
3400b3ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400b3ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400b3d2:	4618      	mov	r0, r3
3400b3d4:	46bd      	mov	sp, r7
3400b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b3da:	4770      	bx	lr
3400b3dc:	56028000 	.word	0x56028000

3400b3e0 <LL_RCC_PLL4_IsReady>:
{
3400b3e0:	b480      	push	{r7}
3400b3e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3400b3e4:	4b07      	ldr	r3, [pc, #28]	@ (3400b404 <LL_RCC_PLL4_IsReady+0x24>)
3400b3e6:	685b      	ldr	r3, [r3, #4]
3400b3e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400b3ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400b3f0:	d101      	bne.n	3400b3f6 <LL_RCC_PLL4_IsReady+0x16>
3400b3f2:	2301      	movs	r3, #1
3400b3f4:	e000      	b.n	3400b3f8 <LL_RCC_PLL4_IsReady+0x18>
3400b3f6:	2300      	movs	r3, #0
}
3400b3f8:	4618      	mov	r0, r3
3400b3fa:	46bd      	mov	sp, r7
3400b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b400:	4770      	bx	lr
3400b402:	bf00      	nop
3400b404:	56028000 	.word	0x56028000

3400b408 <LL_RCC_PLL4_IsEnabledBypass>:
{
3400b408:	b480      	push	{r7}
3400b40a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3400b40c:	4b07      	ldr	r3, [pc, #28]	@ (3400b42c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3400b40e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400b412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400b416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400b41a:	d101      	bne.n	3400b420 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3400b41c:	2301      	movs	r3, #1
3400b41e:	e000      	b.n	3400b422 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
3400b420:	2300      	movs	r3, #0
}
3400b422:	4618      	mov	r0, r3
3400b424:	46bd      	mov	sp, r7
3400b426:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b42a:	4770      	bx	lr
3400b42c:	56028000 	.word	0x56028000

3400b430 <LL_RCC_PLL4_GetN>:
{
3400b430:	b480      	push	{r7}
3400b432:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
3400b434:	4b05      	ldr	r3, [pc, #20]	@ (3400b44c <LL_RCC_PLL4_GetN+0x1c>)
3400b436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400b43a:	0a1b      	lsrs	r3, r3, #8
3400b43c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
3400b440:	4618      	mov	r0, r3
3400b442:	46bd      	mov	sp, r7
3400b444:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b448:	4770      	bx	lr
3400b44a:	bf00      	nop
3400b44c:	56028000 	.word	0x56028000

3400b450 <LL_RCC_PLL4_GetM>:
{
3400b450:	b480      	push	{r7}
3400b452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3400b454:	4b05      	ldr	r3, [pc, #20]	@ (3400b46c <LL_RCC_PLL4_GetM+0x1c>)
3400b456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400b45a:	0d1b      	lsrs	r3, r3, #20
3400b45c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
3400b460:	4618      	mov	r0, r3
3400b462:	46bd      	mov	sp, r7
3400b464:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b468:	4770      	bx	lr
3400b46a:	bf00      	nop
3400b46c:	56028000 	.word	0x56028000

3400b470 <LL_RCC_PLL4_GetP1>:
{
3400b470:	b480      	push	{r7}
3400b472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3400b474:	4b05      	ldr	r3, [pc, #20]	@ (3400b48c <LL_RCC_PLL4_GetP1+0x1c>)
3400b476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400b47a:	0edb      	lsrs	r3, r3, #27
3400b47c:	f003 0307 	and.w	r3, r3, #7
}
3400b480:	4618      	mov	r0, r3
3400b482:	46bd      	mov	sp, r7
3400b484:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b488:	4770      	bx	lr
3400b48a:	bf00      	nop
3400b48c:	56028000 	.word	0x56028000

3400b490 <LL_RCC_PLL4_GetP2>:
{
3400b490:	b480      	push	{r7}
3400b492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3400b494:	4b05      	ldr	r3, [pc, #20]	@ (3400b4ac <LL_RCC_PLL4_GetP2+0x1c>)
3400b496:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400b49a:	0e1b      	lsrs	r3, r3, #24
3400b49c:	f003 0307 	and.w	r3, r3, #7
}
3400b4a0:	4618      	mov	r0, r3
3400b4a2:	46bd      	mov	sp, r7
3400b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b4a8:	4770      	bx	lr
3400b4aa:	bf00      	nop
3400b4ac:	56028000 	.word	0x56028000

3400b4b0 <LL_RCC_PLL4P_IsEnabled>:
{
3400b4b0:	b480      	push	{r7}
3400b4b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3400b4b4:	4b07      	ldr	r3, [pc, #28]	@ (3400b4d4 <LL_RCC_PLL4P_IsEnabled+0x24>)
3400b4b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400b4ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3400b4c2:	d101      	bne.n	3400b4c8 <LL_RCC_PLL4P_IsEnabled+0x18>
3400b4c4:	2301      	movs	r3, #1
3400b4c6:	e000      	b.n	3400b4ca <LL_RCC_PLL4P_IsEnabled+0x1a>
3400b4c8:	2300      	movs	r3, #0
}
3400b4ca:	4618      	mov	r0, r3
3400b4cc:	46bd      	mov	sp, r7
3400b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b4d2:	4770      	bx	lr
3400b4d4:	56028000 	.word	0x56028000

3400b4d8 <LL_RCC_PLL4_GetFRACN>:
{
3400b4d8:	b480      	push	{r7}
3400b4da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3400b4dc:	4b04      	ldr	r3, [pc, #16]	@ (3400b4f0 <LL_RCC_PLL4_GetFRACN+0x18>)
3400b4de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400b4e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400b4e6:	4618      	mov	r0, r3
3400b4e8:	46bd      	mov	sp, r7
3400b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b4ee:	4770      	bx	lr
3400b4f0:	56028000 	.word	0x56028000

3400b4f4 <LL_RCC_IC3_Enable>:
{
3400b4f4:	b480      	push	{r7}
3400b4f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3400b4f8:	4b04      	ldr	r3, [pc, #16]	@ (3400b50c <LL_RCC_IC3_Enable+0x18>)
3400b4fa:	2204      	movs	r2, #4
3400b4fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b500:	bf00      	nop
3400b502:	46bd      	mov	sp, r7
3400b504:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b508:	4770      	bx	lr
3400b50a:	bf00      	nop
3400b50c:	56028000 	.word	0x56028000

3400b510 <LL_RCC_IC3_IsEnabled>:
{
3400b510:	b480      	push	{r7}
3400b512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3400b514:	4b07      	ldr	r3, [pc, #28]	@ (3400b534 <LL_RCC_IC3_IsEnabled+0x24>)
3400b516:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b51a:	f003 0304 	and.w	r3, r3, #4
3400b51e:	2b04      	cmp	r3, #4
3400b520:	d101      	bne.n	3400b526 <LL_RCC_IC3_IsEnabled+0x16>
3400b522:	2301      	movs	r3, #1
3400b524:	e000      	b.n	3400b528 <LL_RCC_IC3_IsEnabled+0x18>
3400b526:	2300      	movs	r3, #0
}
3400b528:	4618      	mov	r0, r3
3400b52a:	46bd      	mov	sp, r7
3400b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b530:	4770      	bx	lr
3400b532:	bf00      	nop
3400b534:	56028000 	.word	0x56028000

3400b538 <LL_RCC_IC3_GetSource>:
{
3400b538:	b480      	push	{r7}
3400b53a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3400b53c:	4b04      	ldr	r3, [pc, #16]	@ (3400b550 <LL_RCC_IC3_GetSource+0x18>)
3400b53e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b546:	4618      	mov	r0, r3
3400b548:	46bd      	mov	sp, r7
3400b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b54e:	4770      	bx	lr
3400b550:	56028000 	.word	0x56028000

3400b554 <LL_RCC_IC3_GetDivider>:
{
3400b554:	b480      	push	{r7}
3400b556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400b558:	4b05      	ldr	r3, [pc, #20]	@ (3400b570 <LL_RCC_IC3_GetDivider+0x1c>)
3400b55a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b55e:	0c1b      	lsrs	r3, r3, #16
3400b560:	b2db      	uxtb	r3, r3
3400b562:	3301      	adds	r3, #1
}
3400b564:	4618      	mov	r0, r3
3400b566:	46bd      	mov	sp, r7
3400b568:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b56c:	4770      	bx	lr
3400b56e:	bf00      	nop
3400b570:	56028000 	.word	0x56028000

3400b574 <LL_RCC_IC4_Enable>:
{
3400b574:	b480      	push	{r7}
3400b576:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400b578:	4b04      	ldr	r3, [pc, #16]	@ (3400b58c <LL_RCC_IC4_Enable+0x18>)
3400b57a:	2208      	movs	r2, #8
3400b57c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b580:	bf00      	nop
3400b582:	46bd      	mov	sp, r7
3400b584:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b588:	4770      	bx	lr
3400b58a:	bf00      	nop
3400b58c:	56028000 	.word	0x56028000

3400b590 <LL_RCC_IC4_IsEnabled>:
{
3400b590:	b480      	push	{r7}
3400b592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3400b594:	4b07      	ldr	r3, [pc, #28]	@ (3400b5b4 <LL_RCC_IC4_IsEnabled+0x24>)
3400b596:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b59a:	f003 0308 	and.w	r3, r3, #8
3400b59e:	2b08      	cmp	r3, #8
3400b5a0:	d101      	bne.n	3400b5a6 <LL_RCC_IC4_IsEnabled+0x16>
3400b5a2:	2301      	movs	r3, #1
3400b5a4:	e000      	b.n	3400b5a8 <LL_RCC_IC4_IsEnabled+0x18>
3400b5a6:	2300      	movs	r3, #0
}
3400b5a8:	4618      	mov	r0, r3
3400b5aa:	46bd      	mov	sp, r7
3400b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b5b0:	4770      	bx	lr
3400b5b2:	bf00      	nop
3400b5b4:	56028000 	.word	0x56028000

3400b5b8 <LL_RCC_IC4_GetSource>:
{
3400b5b8:	b480      	push	{r7}
3400b5ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3400b5bc:	4b04      	ldr	r3, [pc, #16]	@ (3400b5d0 <LL_RCC_IC4_GetSource+0x18>)
3400b5be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b5c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b5c6:	4618      	mov	r0, r3
3400b5c8:	46bd      	mov	sp, r7
3400b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b5ce:	4770      	bx	lr
3400b5d0:	56028000 	.word	0x56028000

3400b5d4 <LL_RCC_IC4_GetDivider>:
{
3400b5d4:	b480      	push	{r7}
3400b5d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400b5d8:	4b05      	ldr	r3, [pc, #20]	@ (3400b5f0 <LL_RCC_IC4_GetDivider+0x1c>)
3400b5da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b5de:	0c1b      	lsrs	r3, r3, #16
3400b5e0:	b2db      	uxtb	r3, r3
3400b5e2:	3301      	adds	r3, #1
}
3400b5e4:	4618      	mov	r0, r3
3400b5e6:	46bd      	mov	sp, r7
3400b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b5ec:	4770      	bx	lr
3400b5ee:	bf00      	nop
3400b5f0:	56028000 	.word	0x56028000

3400b5f4 <LL_RCC_IC5_Enable>:
{
3400b5f4:	b480      	push	{r7}
3400b5f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3400b5f8:	4b04      	ldr	r3, [pc, #16]	@ (3400b60c <LL_RCC_IC5_Enable+0x18>)
3400b5fa:	2210      	movs	r2, #16
3400b5fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b600:	bf00      	nop
3400b602:	46bd      	mov	sp, r7
3400b604:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b608:	4770      	bx	lr
3400b60a:	bf00      	nop
3400b60c:	56028000 	.word	0x56028000

3400b610 <LL_RCC_IC5_IsEnabled>:
{
3400b610:	b480      	push	{r7}
3400b612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3400b614:	4b07      	ldr	r3, [pc, #28]	@ (3400b634 <LL_RCC_IC5_IsEnabled+0x24>)
3400b616:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b61a:	f003 0310 	and.w	r3, r3, #16
3400b61e:	2b10      	cmp	r3, #16
3400b620:	d101      	bne.n	3400b626 <LL_RCC_IC5_IsEnabled+0x16>
3400b622:	2301      	movs	r3, #1
3400b624:	e000      	b.n	3400b628 <LL_RCC_IC5_IsEnabled+0x18>
3400b626:	2300      	movs	r3, #0
}
3400b628:	4618      	mov	r0, r3
3400b62a:	46bd      	mov	sp, r7
3400b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b630:	4770      	bx	lr
3400b632:	bf00      	nop
3400b634:	56028000 	.word	0x56028000

3400b638 <LL_RCC_IC5_GetSource>:
{
3400b638:	b480      	push	{r7}
3400b63a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3400b63c:	4b04      	ldr	r3, [pc, #16]	@ (3400b650 <LL_RCC_IC5_GetSource+0x18>)
3400b63e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b642:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b646:	4618      	mov	r0, r3
3400b648:	46bd      	mov	sp, r7
3400b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b64e:	4770      	bx	lr
3400b650:	56028000 	.word	0x56028000

3400b654 <LL_RCC_IC5_GetDivider>:
{
3400b654:	b480      	push	{r7}
3400b656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400b658:	4b05      	ldr	r3, [pc, #20]	@ (3400b670 <LL_RCC_IC5_GetDivider+0x1c>)
3400b65a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b65e:	0c1b      	lsrs	r3, r3, #16
3400b660:	b2db      	uxtb	r3, r3
3400b662:	3301      	adds	r3, #1
}
3400b664:	4618      	mov	r0, r3
3400b666:	46bd      	mov	sp, r7
3400b668:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b66c:	4770      	bx	lr
3400b66e:	bf00      	nop
3400b670:	56028000 	.word	0x56028000

3400b674 <LL_RCC_IC7_Enable>:
{
3400b674:	b480      	push	{r7}
3400b676:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400b678:	4b04      	ldr	r3, [pc, #16]	@ (3400b68c <LL_RCC_IC7_Enable+0x18>)
3400b67a:	2240      	movs	r2, #64	@ 0x40
3400b67c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b680:	bf00      	nop
3400b682:	46bd      	mov	sp, r7
3400b684:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b688:	4770      	bx	lr
3400b68a:	bf00      	nop
3400b68c:	56028000 	.word	0x56028000

3400b690 <LL_RCC_IC7_IsEnabled>:
{
3400b690:	b480      	push	{r7}
3400b692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3400b694:	4b07      	ldr	r3, [pc, #28]	@ (3400b6b4 <LL_RCC_IC7_IsEnabled+0x24>)
3400b696:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400b69e:	2b40      	cmp	r3, #64	@ 0x40
3400b6a0:	d101      	bne.n	3400b6a6 <LL_RCC_IC7_IsEnabled+0x16>
3400b6a2:	2301      	movs	r3, #1
3400b6a4:	e000      	b.n	3400b6a8 <LL_RCC_IC7_IsEnabled+0x18>
3400b6a6:	2300      	movs	r3, #0
}
3400b6a8:	4618      	mov	r0, r3
3400b6aa:	46bd      	mov	sp, r7
3400b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b6b0:	4770      	bx	lr
3400b6b2:	bf00      	nop
3400b6b4:	56028000 	.word	0x56028000

3400b6b8 <LL_RCC_IC7_GetSource>:
{
3400b6b8:	b480      	push	{r7}
3400b6ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3400b6bc:	4b04      	ldr	r3, [pc, #16]	@ (3400b6d0 <LL_RCC_IC7_GetSource+0x18>)
3400b6be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b6c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b6c6:	4618      	mov	r0, r3
3400b6c8:	46bd      	mov	sp, r7
3400b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b6ce:	4770      	bx	lr
3400b6d0:	56028000 	.word	0x56028000

3400b6d4 <LL_RCC_IC7_GetDivider>:
{
3400b6d4:	b480      	push	{r7}
3400b6d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
3400b6d8:	4b05      	ldr	r3, [pc, #20]	@ (3400b6f0 <LL_RCC_IC7_GetDivider+0x1c>)
3400b6da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b6de:	0c1b      	lsrs	r3, r3, #16
3400b6e0:	b2db      	uxtb	r3, r3
3400b6e2:	3301      	adds	r3, #1
}
3400b6e4:	4618      	mov	r0, r3
3400b6e6:	46bd      	mov	sp, r7
3400b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b6ec:	4770      	bx	lr
3400b6ee:	bf00      	nop
3400b6f0:	56028000 	.word	0x56028000

3400b6f4 <LL_RCC_IC8_Enable>:
{
3400b6f4:	b480      	push	{r7}
3400b6f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3400b6f8:	4b04      	ldr	r3, [pc, #16]	@ (3400b70c <LL_RCC_IC8_Enable+0x18>)
3400b6fa:	2280      	movs	r2, #128	@ 0x80
3400b6fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b700:	bf00      	nop
3400b702:	46bd      	mov	sp, r7
3400b704:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b708:	4770      	bx	lr
3400b70a:	bf00      	nop
3400b70c:	56028000 	.word	0x56028000

3400b710 <LL_RCC_IC8_IsEnabled>:
{
3400b710:	b480      	push	{r7}
3400b712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
3400b714:	4b07      	ldr	r3, [pc, #28]	@ (3400b734 <LL_RCC_IC8_IsEnabled+0x24>)
3400b716:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b71a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400b71e:	2b80      	cmp	r3, #128	@ 0x80
3400b720:	d101      	bne.n	3400b726 <LL_RCC_IC8_IsEnabled+0x16>
3400b722:	2301      	movs	r3, #1
3400b724:	e000      	b.n	3400b728 <LL_RCC_IC8_IsEnabled+0x18>
3400b726:	2300      	movs	r3, #0
}
3400b728:	4618      	mov	r0, r3
3400b72a:	46bd      	mov	sp, r7
3400b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b730:	4770      	bx	lr
3400b732:	bf00      	nop
3400b734:	56028000 	.word	0x56028000

3400b738 <LL_RCC_IC8_GetSource>:
{
3400b738:	b480      	push	{r7}
3400b73a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3400b73c:	4b04      	ldr	r3, [pc, #16]	@ (3400b750 <LL_RCC_IC8_GetSource+0x18>)
3400b73e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b746:	4618      	mov	r0, r3
3400b748:	46bd      	mov	sp, r7
3400b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b74e:	4770      	bx	lr
3400b750:	56028000 	.word	0x56028000

3400b754 <LL_RCC_IC8_GetDivider>:
{
3400b754:	b480      	push	{r7}
3400b756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
3400b758:	4b05      	ldr	r3, [pc, #20]	@ (3400b770 <LL_RCC_IC8_GetDivider+0x1c>)
3400b75a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b75e:	0c1b      	lsrs	r3, r3, #16
3400b760:	b2db      	uxtb	r3, r3
3400b762:	3301      	adds	r3, #1
}
3400b764:	4618      	mov	r0, r3
3400b766:	46bd      	mov	sp, r7
3400b768:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b76c:	4770      	bx	lr
3400b76e:	bf00      	nop
3400b770:	56028000 	.word	0x56028000

3400b774 <LL_RCC_IC9_Enable>:
{
3400b774:	b480      	push	{r7}
3400b776:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400b778:	4b04      	ldr	r3, [pc, #16]	@ (3400b78c <LL_RCC_IC9_Enable+0x18>)
3400b77a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400b77e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b782:	bf00      	nop
3400b784:	46bd      	mov	sp, r7
3400b786:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b78a:	4770      	bx	lr
3400b78c:	56028000 	.word	0x56028000

3400b790 <LL_RCC_IC9_IsEnabled>:
{
3400b790:	b480      	push	{r7}
3400b792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
3400b794:	4b07      	ldr	r3, [pc, #28]	@ (3400b7b4 <LL_RCC_IC9_IsEnabled+0x24>)
3400b796:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b79a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400b79e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b7a2:	d101      	bne.n	3400b7a8 <LL_RCC_IC9_IsEnabled+0x18>
3400b7a4:	2301      	movs	r3, #1
3400b7a6:	e000      	b.n	3400b7aa <LL_RCC_IC9_IsEnabled+0x1a>
3400b7a8:	2300      	movs	r3, #0
}
3400b7aa:	4618      	mov	r0, r3
3400b7ac:	46bd      	mov	sp, r7
3400b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b7b2:	4770      	bx	lr
3400b7b4:	56028000 	.word	0x56028000

3400b7b8 <LL_RCC_IC9_GetSource>:
{
3400b7b8:	b480      	push	{r7}
3400b7ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3400b7bc:	4b04      	ldr	r3, [pc, #16]	@ (3400b7d0 <LL_RCC_IC9_GetSource+0x18>)
3400b7be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b7c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b7c6:	4618      	mov	r0, r3
3400b7c8:	46bd      	mov	sp, r7
3400b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b7ce:	4770      	bx	lr
3400b7d0:	56028000 	.word	0x56028000

3400b7d4 <LL_RCC_IC9_GetDivider>:
{
3400b7d4:	b480      	push	{r7}
3400b7d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
3400b7d8:	4b05      	ldr	r3, [pc, #20]	@ (3400b7f0 <LL_RCC_IC9_GetDivider+0x1c>)
3400b7da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b7de:	0c1b      	lsrs	r3, r3, #16
3400b7e0:	b2db      	uxtb	r3, r3
3400b7e2:	3301      	adds	r3, #1
}
3400b7e4:	4618      	mov	r0, r3
3400b7e6:	46bd      	mov	sp, r7
3400b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b7ec:	4770      	bx	lr
3400b7ee:	bf00      	nop
3400b7f0:	56028000 	.word	0x56028000

3400b7f4 <LL_RCC_IC10_Enable>:
{
3400b7f4:	b480      	push	{r7}
3400b7f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3400b7f8:	4b04      	ldr	r3, [pc, #16]	@ (3400b80c <LL_RCC_IC10_Enable+0x18>)
3400b7fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400b7fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b802:	bf00      	nop
3400b804:	46bd      	mov	sp, r7
3400b806:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b80a:	4770      	bx	lr
3400b80c:	56028000 	.word	0x56028000

3400b810 <LL_RCC_IC10_IsEnabled>:
{
3400b810:	b480      	push	{r7}
3400b812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3400b814:	4b07      	ldr	r3, [pc, #28]	@ (3400b834 <LL_RCC_IC10_IsEnabled+0x24>)
3400b816:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b81a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400b81e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400b822:	d101      	bne.n	3400b828 <LL_RCC_IC10_IsEnabled+0x18>
3400b824:	2301      	movs	r3, #1
3400b826:	e000      	b.n	3400b82a <LL_RCC_IC10_IsEnabled+0x1a>
3400b828:	2300      	movs	r3, #0
}
3400b82a:	4618      	mov	r0, r3
3400b82c:	46bd      	mov	sp, r7
3400b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b832:	4770      	bx	lr
3400b834:	56028000 	.word	0x56028000

3400b838 <LL_RCC_IC10_GetSource>:
{
3400b838:	b480      	push	{r7}
3400b83a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3400b83c:	4b04      	ldr	r3, [pc, #16]	@ (3400b850 <LL_RCC_IC10_GetSource+0x18>)
3400b83e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400b842:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b846:	4618      	mov	r0, r3
3400b848:	46bd      	mov	sp, r7
3400b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b84e:	4770      	bx	lr
3400b850:	56028000 	.word	0x56028000

3400b854 <LL_RCC_IC10_GetDivider>:
{
3400b854:	b480      	push	{r7}
3400b856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400b858:	4b05      	ldr	r3, [pc, #20]	@ (3400b870 <LL_RCC_IC10_GetDivider+0x1c>)
3400b85a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400b85e:	0c1b      	lsrs	r3, r3, #16
3400b860:	b2db      	uxtb	r3, r3
3400b862:	3301      	adds	r3, #1
}
3400b864:	4618      	mov	r0, r3
3400b866:	46bd      	mov	sp, r7
3400b868:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b86c:	4770      	bx	lr
3400b86e:	bf00      	nop
3400b870:	56028000 	.word	0x56028000

3400b874 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
3400b874:	b480      	push	{r7}
3400b876:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
3400b878:	4b04      	ldr	r3, [pc, #16]	@ (3400b88c <LL_RCC_IC12_Enable+0x18>)
3400b87a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400b87e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b882:	bf00      	nop
3400b884:	46bd      	mov	sp, r7
3400b886:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b88a:	4770      	bx	lr
3400b88c:	56028000 	.word	0x56028000

3400b890 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
3400b890:	b480      	push	{r7}
3400b892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
3400b894:	4b07      	ldr	r3, [pc, #28]	@ (3400b8b4 <LL_RCC_IC12_IsEnabled+0x24>)
3400b896:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b89a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400b89e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400b8a2:	d101      	bne.n	3400b8a8 <LL_RCC_IC12_IsEnabled+0x18>
3400b8a4:	2301      	movs	r3, #1
3400b8a6:	e000      	b.n	3400b8aa <LL_RCC_IC12_IsEnabled+0x1a>
3400b8a8:	2300      	movs	r3, #0
}
3400b8aa:	4618      	mov	r0, r3
3400b8ac:	46bd      	mov	sp, r7
3400b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b8b2:	4770      	bx	lr
3400b8b4:	56028000 	.word	0x56028000

3400b8b8 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
3400b8b8:	b480      	push	{r7}
3400b8ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3400b8bc:	4b04      	ldr	r3, [pc, #16]	@ (3400b8d0 <LL_RCC_IC12_GetSource+0x18>)
3400b8be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400b8c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b8c6:	4618      	mov	r0, r3
3400b8c8:	46bd      	mov	sp, r7
3400b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b8ce:	4770      	bx	lr
3400b8d0:	56028000 	.word	0x56028000

3400b8d4 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
3400b8d4:	b480      	push	{r7}
3400b8d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3400b8d8:	4b05      	ldr	r3, [pc, #20]	@ (3400b8f0 <LL_RCC_IC12_GetDivider+0x1c>)
3400b8da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400b8de:	0c1b      	lsrs	r3, r3, #16
3400b8e0:	b2db      	uxtb	r3, r3
3400b8e2:	3301      	adds	r3, #1
}
3400b8e4:	4618      	mov	r0, r3
3400b8e6:	46bd      	mov	sp, r7
3400b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b8ec:	4770      	bx	lr
3400b8ee:	bf00      	nop
3400b8f0:	56028000 	.word	0x56028000

3400b8f4 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
3400b8f4:	b480      	push	{r7}
3400b8f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3400b8f8:	4b04      	ldr	r3, [pc, #16]	@ (3400b90c <LL_RCC_IC13_Enable+0x18>)
3400b8fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400b8fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b902:	bf00      	nop
3400b904:	46bd      	mov	sp, r7
3400b906:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b90a:	4770      	bx	lr
3400b90c:	56028000 	.word	0x56028000

3400b910 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
3400b910:	b480      	push	{r7}
3400b912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3400b914:	4b07      	ldr	r3, [pc, #28]	@ (3400b934 <LL_RCC_IC13_IsEnabled+0x24>)
3400b916:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b91a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400b91e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400b922:	d101      	bne.n	3400b928 <LL_RCC_IC13_IsEnabled+0x18>
3400b924:	2301      	movs	r3, #1
3400b926:	e000      	b.n	3400b92a <LL_RCC_IC13_IsEnabled+0x1a>
3400b928:	2300      	movs	r3, #0
}
3400b92a:	4618      	mov	r0, r3
3400b92c:	46bd      	mov	sp, r7
3400b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b932:	4770      	bx	lr
3400b934:	56028000 	.word	0x56028000

3400b938 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
3400b938:	b480      	push	{r7}
3400b93a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3400b93c:	4b04      	ldr	r3, [pc, #16]	@ (3400b950 <LL_RCC_IC13_GetSource+0x18>)
3400b93e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400b942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b946:	4618      	mov	r0, r3
3400b948:	46bd      	mov	sp, r7
3400b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b94e:	4770      	bx	lr
3400b950:	56028000 	.word	0x56028000

3400b954 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
3400b954:	b480      	push	{r7}
3400b956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3400b958:	4b05      	ldr	r3, [pc, #20]	@ (3400b970 <LL_RCC_IC13_GetDivider+0x1c>)
3400b95a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400b95e:	0c1b      	lsrs	r3, r3, #16
3400b960:	b2db      	uxtb	r3, r3
3400b962:	3301      	adds	r3, #1
}
3400b964:	4618      	mov	r0, r3
3400b966:	46bd      	mov	sp, r7
3400b968:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b96c:	4770      	bx	lr
3400b96e:	bf00      	nop
3400b970:	56028000 	.word	0x56028000

3400b974 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
3400b974:	b480      	push	{r7}
3400b976:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400b978:	4b04      	ldr	r3, [pc, #16]	@ (3400b98c <LL_RCC_IC14_Enable+0x18>)
3400b97a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3400b97e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400b982:	bf00      	nop
3400b984:	46bd      	mov	sp, r7
3400b986:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b98a:	4770      	bx	lr
3400b98c:	56028000 	.word	0x56028000

3400b990 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
3400b990:	b480      	push	{r7}
3400b992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
3400b994:	4b07      	ldr	r3, [pc, #28]	@ (3400b9b4 <LL_RCC_IC14_IsEnabled+0x24>)
3400b996:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400b99a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400b99e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400b9a2:	d101      	bne.n	3400b9a8 <LL_RCC_IC14_IsEnabled+0x18>
3400b9a4:	2301      	movs	r3, #1
3400b9a6:	e000      	b.n	3400b9aa <LL_RCC_IC14_IsEnabled+0x1a>
3400b9a8:	2300      	movs	r3, #0
}
3400b9aa:	4618      	mov	r0, r3
3400b9ac:	46bd      	mov	sp, r7
3400b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b9b2:	4770      	bx	lr
3400b9b4:	56028000 	.word	0x56028000

3400b9b8 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
3400b9b8:	b480      	push	{r7}
3400b9ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3400b9bc:	4b04      	ldr	r3, [pc, #16]	@ (3400b9d0 <LL_RCC_IC14_GetSource+0x18>)
3400b9be:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400b9c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400b9c6:	4618      	mov	r0, r3
3400b9c8:	46bd      	mov	sp, r7
3400b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b9ce:	4770      	bx	lr
3400b9d0:	56028000 	.word	0x56028000

3400b9d4 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
3400b9d4:	b480      	push	{r7}
3400b9d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
3400b9d8:	4b05      	ldr	r3, [pc, #20]	@ (3400b9f0 <LL_RCC_IC14_GetDivider+0x1c>)
3400b9da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400b9de:	0c1b      	lsrs	r3, r3, #16
3400b9e0:	b2db      	uxtb	r3, r3
3400b9e2:	3301      	adds	r3, #1
}
3400b9e4:	4618      	mov	r0, r3
3400b9e6:	46bd      	mov	sp, r7
3400b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b9ec:	4770      	bx	lr
3400b9ee:	bf00      	nop
3400b9f0:	56028000 	.word	0x56028000

3400b9f4 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
3400b9f4:	b480      	push	{r7}
3400b9f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400b9f8:	4b04      	ldr	r3, [pc, #16]	@ (3400ba0c <LL_RCC_IC15_Enable+0x18>)
3400b9fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400b9fe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400ba02:	bf00      	nop
3400ba04:	46bd      	mov	sp, r7
3400ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ba0a:	4770      	bx	lr
3400ba0c:	56028000 	.word	0x56028000

3400ba10 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
3400ba10:	b480      	push	{r7}
3400ba12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
3400ba14:	4b07      	ldr	r3, [pc, #28]	@ (3400ba34 <LL_RCC_IC15_IsEnabled+0x24>)
3400ba16:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400ba1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400ba1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3400ba22:	d101      	bne.n	3400ba28 <LL_RCC_IC15_IsEnabled+0x18>
3400ba24:	2301      	movs	r3, #1
3400ba26:	e000      	b.n	3400ba2a <LL_RCC_IC15_IsEnabled+0x1a>
3400ba28:	2300      	movs	r3, #0
}
3400ba2a:	4618      	mov	r0, r3
3400ba2c:	46bd      	mov	sp, r7
3400ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ba32:	4770      	bx	lr
3400ba34:	56028000 	.word	0x56028000

3400ba38 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
3400ba38:	b480      	push	{r7}
3400ba3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3400ba3c:	4b04      	ldr	r3, [pc, #16]	@ (3400ba50 <LL_RCC_IC15_GetSource+0x18>)
3400ba3e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ba42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400ba46:	4618      	mov	r0, r3
3400ba48:	46bd      	mov	sp, r7
3400ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ba4e:	4770      	bx	lr
3400ba50:	56028000 	.word	0x56028000

3400ba54 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
3400ba54:	b480      	push	{r7}
3400ba56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
3400ba58:	4b05      	ldr	r3, [pc, #20]	@ (3400ba70 <LL_RCC_IC15_GetDivider+0x1c>)
3400ba5a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ba5e:	0c1b      	lsrs	r3, r3, #16
3400ba60:	b2db      	uxtb	r3, r3
3400ba62:	3301      	adds	r3, #1
}
3400ba64:	4618      	mov	r0, r3
3400ba66:	46bd      	mov	sp, r7
3400ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ba6c:	4770      	bx	lr
3400ba6e:	bf00      	nop
3400ba70:	56028000 	.word	0x56028000

3400ba74 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
3400ba74:	b480      	push	{r7}
3400ba76:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3400ba78:	4b04      	ldr	r3, [pc, #16]	@ (3400ba8c <LL_RCC_IC16_Enable+0x18>)
3400ba7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400ba7e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400ba82:	bf00      	nop
3400ba84:	46bd      	mov	sp, r7
3400ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ba8a:	4770      	bx	lr
3400ba8c:	56028000 	.word	0x56028000

3400ba90 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
3400ba90:	b480      	push	{r7}
3400ba92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
3400ba94:	4b07      	ldr	r3, [pc, #28]	@ (3400bab4 <LL_RCC_IC16_IsEnabled+0x24>)
3400ba96:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400ba9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400ba9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400baa2:	d101      	bne.n	3400baa8 <LL_RCC_IC16_IsEnabled+0x18>
3400baa4:	2301      	movs	r3, #1
3400baa6:	e000      	b.n	3400baaa <LL_RCC_IC16_IsEnabled+0x1a>
3400baa8:	2300      	movs	r3, #0
}
3400baaa:	4618      	mov	r0, r3
3400baac:	46bd      	mov	sp, r7
3400baae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bab2:	4770      	bx	lr
3400bab4:	56028000 	.word	0x56028000

3400bab8 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
3400bab8:	b480      	push	{r7}
3400baba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3400babc:	4b04      	ldr	r3, [pc, #16]	@ (3400bad0 <LL_RCC_IC16_GetSource+0x18>)
3400babe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400bac2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400bac6:	4618      	mov	r0, r3
3400bac8:	46bd      	mov	sp, r7
3400baca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bace:	4770      	bx	lr
3400bad0:	56028000 	.word	0x56028000

3400bad4 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
3400bad4:	b480      	push	{r7}
3400bad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3400bad8:	4b05      	ldr	r3, [pc, #20]	@ (3400baf0 <LL_RCC_IC16_GetDivider+0x1c>)
3400bada:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400bade:	0c1b      	lsrs	r3, r3, #16
3400bae0:	b2db      	uxtb	r3, r3
3400bae2:	3301      	adds	r3, #1
}
3400bae4:	4618      	mov	r0, r3
3400bae6:	46bd      	mov	sp, r7
3400bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400baec:	4770      	bx	lr
3400baee:	bf00      	nop
3400baf0:	56028000 	.word	0x56028000

3400baf4 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
3400baf4:	b480      	push	{r7}
3400baf6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3400baf8:	4b04      	ldr	r3, [pc, #16]	@ (3400bb0c <LL_RCC_IC17_Enable+0x18>)
3400bafa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400bafe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400bb02:	bf00      	nop
3400bb04:	46bd      	mov	sp, r7
3400bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bb0a:	4770      	bx	lr
3400bb0c:	56028000 	.word	0x56028000

3400bb10 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
3400bb10:	b480      	push	{r7}
3400bb12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
3400bb14:	4b07      	ldr	r3, [pc, #28]	@ (3400bb34 <LL_RCC_IC17_IsEnabled+0x24>)
3400bb16:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400bb1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400bb1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400bb22:	d101      	bne.n	3400bb28 <LL_RCC_IC17_IsEnabled+0x18>
3400bb24:	2301      	movs	r3, #1
3400bb26:	e000      	b.n	3400bb2a <LL_RCC_IC17_IsEnabled+0x1a>
3400bb28:	2300      	movs	r3, #0
}
3400bb2a:	4618      	mov	r0, r3
3400bb2c:	46bd      	mov	sp, r7
3400bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bb32:	4770      	bx	lr
3400bb34:	56028000 	.word	0x56028000

3400bb38 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
3400bb38:	b480      	push	{r7}
3400bb3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3400bb3c:	4b04      	ldr	r3, [pc, #16]	@ (3400bb50 <LL_RCC_IC17_GetSource+0x18>)
3400bb3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400bb42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400bb46:	4618      	mov	r0, r3
3400bb48:	46bd      	mov	sp, r7
3400bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bb4e:	4770      	bx	lr
3400bb50:	56028000 	.word	0x56028000

3400bb54 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
3400bb54:	b480      	push	{r7}
3400bb56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3400bb58:	4b05      	ldr	r3, [pc, #20]	@ (3400bb70 <LL_RCC_IC17_GetDivider+0x1c>)
3400bb5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400bb5e:	0c1b      	lsrs	r3, r3, #16
3400bb60:	b2db      	uxtb	r3, r3
3400bb62:	3301      	adds	r3, #1
}
3400bb64:	4618      	mov	r0, r3
3400bb66:	46bd      	mov	sp, r7
3400bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bb6c:	4770      	bx	lr
3400bb6e:	bf00      	nop
3400bb70:	56028000 	.word	0x56028000

3400bb74 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
3400bb74:	b480      	push	{r7}
3400bb76:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3400bb78:	4b04      	ldr	r3, [pc, #16]	@ (3400bb8c <LL_RCC_IC18_Enable+0x18>)
3400bb7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3400bb7e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400bb82:	bf00      	nop
3400bb84:	46bd      	mov	sp, r7
3400bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bb8a:	4770      	bx	lr
3400bb8c:	56028000 	.word	0x56028000

3400bb90 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
3400bb90:	b480      	push	{r7}
3400bb92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
3400bb94:	4b07      	ldr	r3, [pc, #28]	@ (3400bbb4 <LL_RCC_IC18_IsEnabled+0x24>)
3400bb96:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400bb9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400bb9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400bba2:	d101      	bne.n	3400bba8 <LL_RCC_IC18_IsEnabled+0x18>
3400bba4:	2301      	movs	r3, #1
3400bba6:	e000      	b.n	3400bbaa <LL_RCC_IC18_IsEnabled+0x1a>
3400bba8:	2300      	movs	r3, #0
}
3400bbaa:	4618      	mov	r0, r3
3400bbac:	46bd      	mov	sp, r7
3400bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bbb2:	4770      	bx	lr
3400bbb4:	56028000 	.word	0x56028000

3400bbb8 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
3400bbb8:	b480      	push	{r7}
3400bbba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
3400bbbc:	4b04      	ldr	r3, [pc, #16]	@ (3400bbd0 <LL_RCC_IC18_GetSource+0x18>)
3400bbbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400bbc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400bbc6:	4618      	mov	r0, r3
3400bbc8:	46bd      	mov	sp, r7
3400bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bbce:	4770      	bx	lr
3400bbd0:	56028000 	.word	0x56028000

3400bbd4 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
3400bbd4:	b480      	push	{r7}
3400bbd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3400bbd8:	4b05      	ldr	r3, [pc, #20]	@ (3400bbf0 <LL_RCC_IC18_GetDivider+0x1c>)
3400bbda:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400bbde:	0c1b      	lsrs	r3, r3, #16
3400bbe0:	b2db      	uxtb	r3, r3
3400bbe2:	3301      	adds	r3, #1
}
3400bbe4:	4618      	mov	r0, r3
3400bbe6:	46bd      	mov	sp, r7
3400bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bbec:	4770      	bx	lr
3400bbee:	bf00      	nop
3400bbf0:	56028000 	.word	0x56028000

3400bbf4 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
3400bbf4:	b480      	push	{r7}
3400bbf6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3400bbf8:	4b04      	ldr	r3, [pc, #16]	@ (3400bc0c <LL_RCC_IC19_Enable+0x18>)
3400bbfa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400bbfe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400bc02:	bf00      	nop
3400bc04:	46bd      	mov	sp, r7
3400bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bc0a:	4770      	bx	lr
3400bc0c:	56028000 	.word	0x56028000

3400bc10 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
3400bc10:	b480      	push	{r7}
3400bc12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3400bc14:	4b07      	ldr	r3, [pc, #28]	@ (3400bc34 <LL_RCC_IC19_IsEnabled+0x24>)
3400bc16:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400bc1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400bc1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400bc22:	d101      	bne.n	3400bc28 <LL_RCC_IC19_IsEnabled+0x18>
3400bc24:	2301      	movs	r3, #1
3400bc26:	e000      	b.n	3400bc2a <LL_RCC_IC19_IsEnabled+0x1a>
3400bc28:	2300      	movs	r3, #0
}
3400bc2a:	4618      	mov	r0, r3
3400bc2c:	46bd      	mov	sp, r7
3400bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bc32:	4770      	bx	lr
3400bc34:	56028000 	.word	0x56028000

3400bc38 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
3400bc38:	b480      	push	{r7}
3400bc3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3400bc3c:	4b04      	ldr	r3, [pc, #16]	@ (3400bc50 <LL_RCC_IC19_GetSource+0x18>)
3400bc3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400bc42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400bc46:	4618      	mov	r0, r3
3400bc48:	46bd      	mov	sp, r7
3400bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bc4e:	4770      	bx	lr
3400bc50:	56028000 	.word	0x56028000

3400bc54 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
3400bc54:	b480      	push	{r7}
3400bc56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400bc58:	4b05      	ldr	r3, [pc, #20]	@ (3400bc70 <LL_RCC_IC19_GetDivider+0x1c>)
3400bc5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400bc5e:	0c1b      	lsrs	r3, r3, #16
3400bc60:	b2db      	uxtb	r3, r3
3400bc62:	3301      	adds	r3, #1
}
3400bc64:	4618      	mov	r0, r3
3400bc66:	46bd      	mov	sp, r7
3400bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bc6c:	4770      	bx	lr
3400bc6e:	bf00      	nop
3400bc70:	56028000 	.word	0x56028000

3400bc74 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
3400bc74:	b480      	push	{r7}
3400bc76:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3400bc78:	4b04      	ldr	r3, [pc, #16]	@ (3400bc8c <LL_RCC_IC20_Enable+0x18>)
3400bc7a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400bc7e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400bc82:	bf00      	nop
3400bc84:	46bd      	mov	sp, r7
3400bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bc8a:	4770      	bx	lr
3400bc8c:	56028000 	.word	0x56028000

3400bc90 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
3400bc90:	b480      	push	{r7}
3400bc92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3400bc94:	4b07      	ldr	r3, [pc, #28]	@ (3400bcb4 <LL_RCC_IC20_IsEnabled+0x24>)
3400bc96:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400bc9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400bc9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3400bca2:	d101      	bne.n	3400bca8 <LL_RCC_IC20_IsEnabled+0x18>
3400bca4:	2301      	movs	r3, #1
3400bca6:	e000      	b.n	3400bcaa <LL_RCC_IC20_IsEnabled+0x1a>
3400bca8:	2300      	movs	r3, #0
}
3400bcaa:	4618      	mov	r0, r3
3400bcac:	46bd      	mov	sp, r7
3400bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bcb2:	4770      	bx	lr
3400bcb4:	56028000 	.word	0x56028000

3400bcb8 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
3400bcb8:	b480      	push	{r7}
3400bcba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400bcbc:	4b04      	ldr	r3, [pc, #16]	@ (3400bcd0 <LL_RCC_IC20_GetSource+0x18>)
3400bcbe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400bcc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400bcc6:	4618      	mov	r0, r3
3400bcc8:	46bd      	mov	sp, r7
3400bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bcce:	4770      	bx	lr
3400bcd0:	56028000 	.word	0x56028000

3400bcd4 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
3400bcd4:	b480      	push	{r7}
3400bcd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400bcd8:	4b05      	ldr	r3, [pc, #20]	@ (3400bcf0 <LL_RCC_IC20_GetDivider+0x1c>)
3400bcda:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400bcde:	0c1b      	lsrs	r3, r3, #16
3400bce0:	b2db      	uxtb	r3, r3
3400bce2:	3301      	adds	r3, #1
}
3400bce4:	4618      	mov	r0, r3
3400bce6:	46bd      	mov	sp, r7
3400bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bcec:	4770      	bx	lr
3400bcee:	bf00      	nop
3400bcf0:	56028000 	.word	0x56028000

3400bcf4 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
3400bcf4:	b480      	push	{r7}
3400bcf6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400bcf8:	4b04      	ldr	r3, [pc, #16]	@ (3400bd0c <LL_RCC_CLKP_Enable+0x18>)
3400bcfa:	2240      	movs	r2, #64	@ 0x40
3400bcfc:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
3400bd00:	bf00      	nop
3400bd02:	46bd      	mov	sp, r7
3400bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bd08:	4770      	bx	lr
3400bd0a:	bf00      	nop
3400bd0c:	56028000 	.word	0x56028000

3400bd10 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
3400bd10:	b480      	push	{r7}
3400bd12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
3400bd14:	4b07      	ldr	r3, [pc, #28]	@ (3400bd34 <LL_RCC_CLKP_IsEnabled+0x24>)
3400bd16:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
3400bd1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400bd1e:	2b40      	cmp	r3, #64	@ 0x40
3400bd20:	d101      	bne.n	3400bd26 <LL_RCC_CLKP_IsEnabled+0x16>
3400bd22:	2301      	movs	r3, #1
3400bd24:	e000      	b.n	3400bd28 <LL_RCC_CLKP_IsEnabled+0x18>
3400bd26:	2300      	movs	r3, #0
}
3400bd28:	4618      	mov	r0, r3
3400bd2a:	46bd      	mov	sp, r7
3400bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400bd30:	4770      	bx	lr
3400bd32:	bf00      	nop
3400bd34:	56028000 	.word	0x56028000

3400bd38 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
3400bd38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3400bd3c:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
3400bd40:	af00      	add	r7, sp, #0
3400bd42:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
3400bd46:	2300      	movs	r3, #0
3400bd48:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3400bd4c:	2300      	movs	r3, #0
3400bd4e:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3400bd52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd5a:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
3400bd5e:	2500      	movs	r5, #0
3400bd60:	ea54 0305 	orrs.w	r3, r4, r5
3400bd64:	f040 83e0 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bd68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd70:	f04f 0800 	mov.w	r8, #0
3400bd74:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
3400bd78:	ea58 0309 	orrs.w	r3, r8, r9
3400bd7c:	f040 83d4 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bd80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd88:	f04f 0a00 	mov.w	sl, #0
3400bd8c:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
3400bd90:	ea5a 030b 	orrs.w	r3, sl, fp
3400bd94:	f040 83c8 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bd98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bda0:	2100      	movs	r1, #0
3400bda2:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
3400bda6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400bdaa:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
3400bdae:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
3400bdb2:	4603      	mov	r3, r0
3400bdb4:	460a      	mov	r2, r1
3400bdb6:	4313      	orrs	r3, r2
3400bdb8:	f040 83b6 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bdbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bdc4:	f002 0304 	and.w	r3, r2, #4
3400bdc8:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
3400bdcc:	2300      	movs	r3, #0
3400bdce:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
3400bdd2:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
3400bdd6:	4603      	mov	r3, r0
3400bdd8:	460a      	mov	r2, r1
3400bdda:	4313      	orrs	r3, r2
3400bddc:	f040 83a4 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bde0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bde8:	f002 0301 	and.w	r3, r2, #1
3400bdec:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
3400bdf0:	2300      	movs	r3, #0
3400bdf2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
3400bdf6:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
3400bdfa:	4603      	mov	r3, r0
3400bdfc:	460a      	mov	r2, r1
3400bdfe:	4313      	orrs	r3, r2
3400be00:	f040 8392 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400be04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be08:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be0c:	f002 0302 	and.w	r3, r2, #2
3400be10:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
3400be14:	2300      	movs	r3, #0
3400be16:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
3400be1a:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
3400be1e:	4603      	mov	r3, r0
3400be20:	460a      	mov	r2, r1
3400be22:	4313      	orrs	r3, r2
3400be24:	f040 8380 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400be28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be30:	f002 0308 	and.w	r3, r2, #8
3400be34:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
3400be38:	2300      	movs	r3, #0
3400be3a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
3400be3e:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
3400be42:	4603      	mov	r3, r0
3400be44:	460a      	mov	r2, r1
3400be46:	4313      	orrs	r3, r2
3400be48:	f040 836e 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400be4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be50:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be54:	f002 0310 	and.w	r3, r2, #16
3400be58:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
3400be5c:	2300      	movs	r3, #0
3400be5e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
3400be62:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
3400be66:	4603      	mov	r3, r0
3400be68:	460a      	mov	r2, r1
3400be6a:	4313      	orrs	r3, r2
3400be6c:	f040 835c 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400be70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be74:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be78:	f002 0320 	and.w	r3, r2, #32
3400be7c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
3400be80:	2300      	movs	r3, #0
3400be82:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
3400be86:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
3400be8a:	4603      	mov	r3, r0
3400be8c:	460a      	mov	r2, r1
3400be8e:	4313      	orrs	r3, r2
3400be90:	f040 834a 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400be94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be98:	e9d3 2300 	ldrd	r2, r3, [r3]
3400be9c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400bea0:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
3400bea4:	2300      	movs	r3, #0
3400bea6:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
3400beaa:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
3400beae:	4603      	mov	r3, r0
3400beb0:	460a      	mov	r2, r1
3400beb2:	4313      	orrs	r3, r2
3400beb4:	f040 8338 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400beb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bec0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400bec4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
3400bec8:	2300      	movs	r3, #0
3400beca:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
3400bece:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
3400bed2:	4603      	mov	r3, r0
3400bed4:	460a      	mov	r2, r1
3400bed6:	4313      	orrs	r3, r2
3400bed8:	f040 8326 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bedc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bee4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400bee8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
3400beec:	2300      	movs	r3, #0
3400beee:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
3400bef2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
3400bef6:	4603      	mov	r3, r0
3400bef8:	460a      	mov	r2, r1
3400befa:	4313      	orrs	r3, r2
3400befc:	f040 8314 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bf00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf08:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400bf0c:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
3400bf10:	2300      	movs	r3, #0
3400bf12:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
3400bf16:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
3400bf1a:	4603      	mov	r3, r0
3400bf1c:	460a      	mov	r2, r1
3400bf1e:	4313      	orrs	r3, r2
3400bf20:	f040 8302 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bf24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf2c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400bf30:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
3400bf34:	2300      	movs	r3, #0
3400bf36:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
3400bf3a:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
3400bf3e:	4603      	mov	r3, r0
3400bf40:	460a      	mov	r2, r1
3400bf42:	4313      	orrs	r3, r2
3400bf44:	f040 82f0 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bf48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf50:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400bf54:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
3400bf58:	2300      	movs	r3, #0
3400bf5a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
3400bf5e:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
3400bf62:	4603      	mov	r3, r0
3400bf64:	460a      	mov	r2, r1
3400bf66:	4313      	orrs	r3, r2
3400bf68:	f040 82de 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bf6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf74:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400bf78:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
3400bf7c:	2300      	movs	r3, #0
3400bf7e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
3400bf82:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
3400bf86:	4603      	mov	r3, r0
3400bf88:	460a      	mov	r2, r1
3400bf8a:	4313      	orrs	r3, r2
3400bf8c:	f040 82cc 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bf90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400bf9c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
3400bfa0:	2300      	movs	r3, #0
3400bfa2:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
3400bfa6:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
3400bfaa:	4603      	mov	r3, r0
3400bfac:	460a      	mov	r2, r1
3400bfae:	4313      	orrs	r3, r2
3400bfb0:	f040 82ba 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bfb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bfbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400bfc0:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
3400bfc4:	2300      	movs	r3, #0
3400bfc6:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
3400bfca:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
3400bfce:	4603      	mov	r3, r0
3400bfd0:	460a      	mov	r2, r1
3400bfd2:	4313      	orrs	r3, r2
3400bfd4:	f040 82a8 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bfd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bfe0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400bfe4:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
3400bfe8:	2300      	movs	r3, #0
3400bfea:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
3400bfee:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
3400bff2:	4603      	mov	r3, r0
3400bff4:	460a      	mov	r2, r1
3400bff6:	4313      	orrs	r3, r2
3400bff8:	f040 8296 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400bffc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c000:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c004:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400c008:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
3400c00c:	2300      	movs	r3, #0
3400c00e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
3400c012:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
3400c016:	4603      	mov	r3, r0
3400c018:	460a      	mov	r2, r1
3400c01a:	4313      	orrs	r3, r2
3400c01c:	f040 8284 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c020:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c024:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c028:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400c02c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
3400c030:	2300      	movs	r3, #0
3400c032:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
3400c036:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
3400c03a:	4603      	mov	r3, r0
3400c03c:	460a      	mov	r2, r1
3400c03e:	4313      	orrs	r3, r2
3400c040:	f040 8272 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c048:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c04c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400c050:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
3400c054:	2300      	movs	r3, #0
3400c056:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
3400c05a:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
3400c05e:	4603      	mov	r3, r0
3400c060:	460a      	mov	r2, r1
3400c062:	4313      	orrs	r3, r2
3400c064:	f040 8260 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c070:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400c074:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
3400c078:	2300      	movs	r3, #0
3400c07a:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
3400c07e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
3400c082:	4603      	mov	r3, r0
3400c084:	460a      	mov	r2, r1
3400c086:	4313      	orrs	r3, r2
3400c088:	f040 824e 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c08c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c090:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c094:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400c098:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
3400c09c:	2300      	movs	r3, #0
3400c09e:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
3400c0a2:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
3400c0a6:	4603      	mov	r3, r0
3400c0a8:	460a      	mov	r2, r1
3400c0aa:	4313      	orrs	r3, r2
3400c0ac:	f040 823c 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c0b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c0b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400c0bc:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
3400c0c0:	2300      	movs	r3, #0
3400c0c2:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
3400c0c6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
3400c0ca:	4603      	mov	r3, r0
3400c0cc:	460a      	mov	r2, r1
3400c0ce:	4313      	orrs	r3, r2
3400c0d0:	f040 822a 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c0d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c0dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400c0e0:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
3400c0e4:	2300      	movs	r3, #0
3400c0e6:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
3400c0ea:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
3400c0ee:	4603      	mov	r3, r0
3400c0f0:	460a      	mov	r2, r1
3400c0f2:	4313      	orrs	r3, r2
3400c0f4:	f040 8218 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c100:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400c104:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
3400c108:	2300      	movs	r3, #0
3400c10a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
3400c10e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
3400c112:	4603      	mov	r3, r0
3400c114:	460a      	mov	r2, r1
3400c116:	4313      	orrs	r3, r2
3400c118:	f040 8206 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c11c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c120:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c124:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400c128:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
3400c12c:	2300      	movs	r3, #0
3400c12e:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
3400c132:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
3400c136:	4603      	mov	r3, r0
3400c138:	460a      	mov	r2, r1
3400c13a:	4313      	orrs	r3, r2
3400c13c:	f040 81f4 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c144:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c148:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400c14c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
3400c150:	2300      	movs	r3, #0
3400c152:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
3400c156:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
3400c15a:	4603      	mov	r3, r0
3400c15c:	460a      	mov	r2, r1
3400c15e:	4313      	orrs	r3, r2
3400c160:	f040 81e2 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c168:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c16c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3400c170:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
3400c174:	2300      	movs	r3, #0
3400c176:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
3400c17a:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
3400c17e:	4603      	mov	r3, r0
3400c180:	460a      	mov	r2, r1
3400c182:	4313      	orrs	r3, r2
3400c184:	f040 81d0 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c190:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400c194:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
3400c198:	2300      	movs	r3, #0
3400c19a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
3400c19e:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
3400c1a2:	4603      	mov	r3, r0
3400c1a4:	460a      	mov	r2, r1
3400c1a6:	4313      	orrs	r3, r2
3400c1a8:	f040 81be 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c1ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c1b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400c1b8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
3400c1bc:	2300      	movs	r3, #0
3400c1be:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
3400c1c2:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
3400c1c6:	4603      	mov	r3, r0
3400c1c8:	460a      	mov	r2, r1
3400c1ca:	4313      	orrs	r3, r2
3400c1cc:	f040 81ac 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c1d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c1d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400c1dc:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
3400c1e0:	2300      	movs	r3, #0
3400c1e2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
3400c1e6:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
3400c1ea:	4603      	mov	r3, r0
3400c1ec:	460a      	mov	r2, r1
3400c1ee:	4313      	orrs	r3, r2
3400c1f0:	f040 819a 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c1f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c1fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400c200:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
3400c204:	2300      	movs	r3, #0
3400c206:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
3400c20a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
3400c20e:	4603      	mov	r3, r0
3400c210:	460a      	mov	r2, r1
3400c212:	4313      	orrs	r3, r2
3400c214:	f040 8188 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c218:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c220:	2100      	movs	r1, #0
3400c222:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
3400c226:	f003 0301 	and.w	r3, r3, #1
3400c22a:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
3400c22e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
3400c232:	4603      	mov	r3, r0
3400c234:	460a      	mov	r2, r1
3400c236:	4313      	orrs	r3, r2
3400c238:	f040 8176 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c240:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c244:	2100      	movs	r1, #0
3400c246:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
3400c24a:	f003 0302 	and.w	r3, r3, #2
3400c24e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
3400c252:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
3400c256:	4603      	mov	r3, r0
3400c258:	460a      	mov	r2, r1
3400c25a:	4313      	orrs	r3, r2
3400c25c:	f040 8164 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c264:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c268:	2100      	movs	r1, #0
3400c26a:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
3400c26e:	f003 0304 	and.w	r3, r3, #4
3400c272:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
3400c276:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
3400c27a:	4603      	mov	r3, r0
3400c27c:	460a      	mov	r2, r1
3400c27e:	4313      	orrs	r3, r2
3400c280:	f040 8152 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c284:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c288:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c28c:	2100      	movs	r1, #0
3400c28e:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
3400c292:	f003 0308 	and.w	r3, r3, #8
3400c296:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
3400c29a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
3400c29e:	4603      	mov	r3, r0
3400c2a0:	460a      	mov	r2, r1
3400c2a2:	4313      	orrs	r3, r2
3400c2a4:	f040 8140 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c2a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c2b0:	2100      	movs	r1, #0
3400c2b2:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
3400c2b6:	f003 0310 	and.w	r3, r3, #16
3400c2ba:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
3400c2be:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
3400c2c2:	4603      	mov	r3, r0
3400c2c4:	460a      	mov	r2, r1
3400c2c6:	4313      	orrs	r3, r2
3400c2c8:	f040 812e 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c2cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c2d4:	2100      	movs	r1, #0
3400c2d6:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
3400c2da:	f003 0320 	and.w	r3, r3, #32
3400c2de:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
3400c2e2:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
3400c2e6:	4603      	mov	r3, r0
3400c2e8:	460a      	mov	r2, r1
3400c2ea:	4313      	orrs	r3, r2
3400c2ec:	f040 811c 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c2f8:	2100      	movs	r1, #0
3400c2fa:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
3400c2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400c302:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
3400c306:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
3400c30a:	4603      	mov	r3, r0
3400c30c:	460a      	mov	r2, r1
3400c30e:	4313      	orrs	r3, r2
3400c310:	f040 810a 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c318:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c31c:	2100      	movs	r1, #0
3400c31e:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
3400c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400c326:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
3400c32a:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
3400c32e:	4603      	mov	r3, r0
3400c330:	460a      	mov	r2, r1
3400c332:	4313      	orrs	r3, r2
3400c334:	f040 80f8 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c340:	2100      	movs	r1, #0
3400c342:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
3400c346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400c34a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
3400c34e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
3400c352:	4603      	mov	r3, r0
3400c354:	460a      	mov	r2, r1
3400c356:	4313      	orrs	r3, r2
3400c358:	f040 80e6 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c360:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c364:	2100      	movs	r1, #0
3400c366:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
3400c36a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400c36e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
3400c372:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
3400c376:	4603      	mov	r3, r0
3400c378:	460a      	mov	r2, r1
3400c37a:	4313      	orrs	r3, r2
3400c37c:	f040 80d4 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c384:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c388:	2100      	movs	r1, #0
3400c38a:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
3400c38e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400c392:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
3400c396:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
3400c39a:	4603      	mov	r3, r0
3400c39c:	460a      	mov	r2, r1
3400c39e:	4313      	orrs	r3, r2
3400c3a0:	f040 80c2 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c3ac:	2100      	movs	r1, #0
3400c3ae:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
3400c3b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400c3b6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
3400c3ba:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
3400c3be:	4603      	mov	r3, r0
3400c3c0:	460a      	mov	r2, r1
3400c3c2:	4313      	orrs	r3, r2
3400c3c4:	f040 80b0 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c3c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c3d0:	2100      	movs	r1, #0
3400c3d2:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
3400c3d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400c3da:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
3400c3de:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
3400c3e2:	4603      	mov	r3, r0
3400c3e4:	460a      	mov	r2, r1
3400c3e6:	4313      	orrs	r3, r2
3400c3e8:	f040 809e 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c3ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c3f4:	2100      	movs	r1, #0
3400c3f6:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
3400c3fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400c3fe:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
3400c402:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
3400c406:	4603      	mov	r3, r0
3400c408:	460a      	mov	r2, r1
3400c40a:	4313      	orrs	r3, r2
3400c40c:	f040 808c 	bne.w	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c414:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c418:	2100      	movs	r1, #0
3400c41a:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
3400c41e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400c422:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
3400c426:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
3400c42a:	4603      	mov	r3, r0
3400c42c:	460a      	mov	r2, r1
3400c42e:	4313      	orrs	r3, r2
3400c430:	d17a      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c432:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c436:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c43a:	2100      	movs	r1, #0
3400c43c:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
3400c440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400c444:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
3400c448:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
3400c44c:	4603      	mov	r3, r0
3400c44e:	460a      	mov	r2, r1
3400c450:	4313      	orrs	r3, r2
3400c452:	d169      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c458:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c45c:	2100      	movs	r1, #0
3400c45e:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
3400c462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400c466:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
3400c46a:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
3400c46e:	4603      	mov	r3, r0
3400c470:	460a      	mov	r2, r1
3400c472:	4313      	orrs	r3, r2
3400c474:	d158      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c476:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c47e:	2100      	movs	r1, #0
3400c480:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
3400c484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400c488:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
3400c48c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
3400c490:	4603      	mov	r3, r0
3400c492:	460a      	mov	r2, r1
3400c494:	4313      	orrs	r3, r2
3400c496:	d147      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c4a0:	2100      	movs	r1, #0
3400c4a2:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
3400c4a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400c4aa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
3400c4ae:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
3400c4b2:	4603      	mov	r3, r0
3400c4b4:	460a      	mov	r2, r1
3400c4b6:	4313      	orrs	r3, r2
3400c4b8:	d136      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c4ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c4c2:	2100      	movs	r1, #0
3400c4c4:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
3400c4c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400c4cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
3400c4d0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
3400c4d4:	4603      	mov	r3, r0
3400c4d6:	460a      	mov	r2, r1
3400c4d8:	4313      	orrs	r3, r2
3400c4da:	d125      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c4dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c4e4:	2100      	movs	r1, #0
3400c4e6:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
3400c4ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400c4ee:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
3400c4f2:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
3400c4f6:	4603      	mov	r3, r0
3400c4f8:	460a      	mov	r2, r1
3400c4fa:	4313      	orrs	r3, r2
3400c4fc:	d114      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c4fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c502:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c506:	2100      	movs	r1, #0
3400c508:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
3400c50c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400c510:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
3400c514:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
3400c518:	4603      	mov	r3, r0
3400c51a:	460a      	mov	r2, r1
3400c51c:	4313      	orrs	r3, r2
3400c51e:	d103      	bne.n	3400c528 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400c520:	2188      	movs	r1, #136	@ 0x88
3400c522:	48d3      	ldr	r0, [pc, #844]	@ (3400c870 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
3400c524:	f7f5 f854 	bl	340015d0 <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3400c528:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c530:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3400c534:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
3400c538:	2300      	movs	r3, #0
3400c53a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
3400c53e:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
3400c542:	4603      	mov	r3, r0
3400c544:	460a      	mov	r2, r1
3400c546:	4313      	orrs	r3, r2
3400c548:	f000 82b5 	beq.w	3400cab6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3400c54c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c550:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c558:	f000 8240 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c55c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c560:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400c568:	f000 8238 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c56c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c570:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400c578:	f000 8230 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c580:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c584:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
3400c588:	f000 8228 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c58c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c590:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c594:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
3400c598:	f000 8220 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c59c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5a0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5a4:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
3400c5a8:	f000 8218 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5b0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5b4:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
3400c5b8:	f000 8210 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5c0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5c4:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
3400c5c8:	f000 8208 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5d0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5d4:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
3400c5d8:	f000 8200 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5e0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5e4:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
3400c5e8:	f000 81f8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5f0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c5f4:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
3400c5f8:	f000 81f0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c5fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c600:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c604:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
3400c608:	f000 81e8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c60c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c610:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c614:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
3400c618:	f000 81e0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c620:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c624:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
3400c628:	f000 81d8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c62c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c630:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c634:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
3400c638:	f000 81d0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c640:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c644:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
3400c648:	f000 81c8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c64c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c650:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c654:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
3400c658:	f000 81c0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c65c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c660:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c664:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
3400c668:	f000 81b8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c66c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c670:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c674:	4b7f      	ldr	r3, [pc, #508]	@ (3400c874 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3400c676:	429a      	cmp	r2, r3
3400c678:	f000 81b0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c67c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c680:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c684:	4b7c      	ldr	r3, [pc, #496]	@ (3400c878 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3400c686:	429a      	cmp	r2, r3
3400c688:	f000 81a8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c68c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c690:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c694:	4b79      	ldr	r3, [pc, #484]	@ (3400c87c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
3400c696:	429a      	cmp	r2, r3
3400c698:	f000 81a0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c69c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6a0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6a4:	4b76      	ldr	r3, [pc, #472]	@ (3400c880 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3400c6a6:	429a      	cmp	r2, r3
3400c6a8:	f000 8198 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6b0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6b4:	4b73      	ldr	r3, [pc, #460]	@ (3400c884 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3400c6b6:	429a      	cmp	r2, r3
3400c6b8:	f000 8190 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6c0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6c4:	4b70      	ldr	r3, [pc, #448]	@ (3400c888 <HAL_RCCEx_PeriphCLKConfig+0xb50>)
3400c6c6:	429a      	cmp	r2, r3
3400c6c8:	f000 8188 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6d0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6d4:	4b6d      	ldr	r3, [pc, #436]	@ (3400c88c <HAL_RCCEx_PeriphCLKConfig+0xb54>)
3400c6d6:	429a      	cmp	r2, r3
3400c6d8:	f000 8180 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6e0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6e4:	4b6a      	ldr	r3, [pc, #424]	@ (3400c890 <HAL_RCCEx_PeriphCLKConfig+0xb58>)
3400c6e6:	429a      	cmp	r2, r3
3400c6e8:	f000 8178 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6f0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c6f4:	4b67      	ldr	r3, [pc, #412]	@ (3400c894 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
3400c6f6:	429a      	cmp	r2, r3
3400c6f8:	f000 8170 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c6fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c700:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c704:	4b64      	ldr	r3, [pc, #400]	@ (3400c898 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
3400c706:	429a      	cmp	r2, r3
3400c708:	f000 8168 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c710:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c714:	4b61      	ldr	r3, [pc, #388]	@ (3400c89c <HAL_RCCEx_PeriphCLKConfig+0xb64>)
3400c716:	429a      	cmp	r2, r3
3400c718:	f000 8160 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c720:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c724:	4b5e      	ldr	r3, [pc, #376]	@ (3400c8a0 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
3400c726:	429a      	cmp	r2, r3
3400c728:	f000 8158 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c72c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c730:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c734:	4b5b      	ldr	r3, [pc, #364]	@ (3400c8a4 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
3400c736:	429a      	cmp	r2, r3
3400c738:	f000 8150 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c740:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c744:	4b58      	ldr	r3, [pc, #352]	@ (3400c8a8 <HAL_RCCEx_PeriphCLKConfig+0xb70>)
3400c746:	429a      	cmp	r2, r3
3400c748:	f000 8148 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c74c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c750:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c754:	4b55      	ldr	r3, [pc, #340]	@ (3400c8ac <HAL_RCCEx_PeriphCLKConfig+0xb74>)
3400c756:	429a      	cmp	r2, r3
3400c758:	f000 8140 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c760:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c764:	4b52      	ldr	r3, [pc, #328]	@ (3400c8b0 <HAL_RCCEx_PeriphCLKConfig+0xb78>)
3400c766:	429a      	cmp	r2, r3
3400c768:	f000 8138 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c76c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c770:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c774:	4b4f      	ldr	r3, [pc, #316]	@ (3400c8b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
3400c776:	429a      	cmp	r2, r3
3400c778:	f000 8130 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c77c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c780:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c784:	4b4c      	ldr	r3, [pc, #304]	@ (3400c8b8 <HAL_RCCEx_PeriphCLKConfig+0xb80>)
3400c786:	429a      	cmp	r2, r3
3400c788:	f000 8128 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c78c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c790:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c794:	4b49      	ldr	r3, [pc, #292]	@ (3400c8bc <HAL_RCCEx_PeriphCLKConfig+0xb84>)
3400c796:	429a      	cmp	r2, r3
3400c798:	f000 8120 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c79c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7a0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7a4:	4b46      	ldr	r3, [pc, #280]	@ (3400c8c0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
3400c7a6:	429a      	cmp	r2, r3
3400c7a8:	f000 8118 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7b0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7b4:	4b43      	ldr	r3, [pc, #268]	@ (3400c8c4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
3400c7b6:	429a      	cmp	r2, r3
3400c7b8:	f000 8110 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7c0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7c4:	4b40      	ldr	r3, [pc, #256]	@ (3400c8c8 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
3400c7c6:	429a      	cmp	r2, r3
3400c7c8:	f000 8108 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7d0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7d4:	4b3d      	ldr	r3, [pc, #244]	@ (3400c8cc <HAL_RCCEx_PeriphCLKConfig+0xb94>)
3400c7d6:	429a      	cmp	r2, r3
3400c7d8:	f000 8100 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7e0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7e4:	4b3a      	ldr	r3, [pc, #232]	@ (3400c8d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
3400c7e6:	429a      	cmp	r2, r3
3400c7e8:	f000 80f8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7f0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c7f4:	4b37      	ldr	r3, [pc, #220]	@ (3400c8d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
3400c7f6:	429a      	cmp	r2, r3
3400c7f8:	f000 80f0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c7fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c800:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c804:	4b34      	ldr	r3, [pc, #208]	@ (3400c8d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>)
3400c806:	429a      	cmp	r2, r3
3400c808:	f000 80e8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c80c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c810:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c814:	4b31      	ldr	r3, [pc, #196]	@ (3400c8dc <HAL_RCCEx_PeriphCLKConfig+0xba4>)
3400c816:	429a      	cmp	r2, r3
3400c818:	f000 80e0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c81c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c820:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c824:	4b2e      	ldr	r3, [pc, #184]	@ (3400c8e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>)
3400c826:	429a      	cmp	r2, r3
3400c828:	f000 80d8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c830:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c834:	4b2b      	ldr	r3, [pc, #172]	@ (3400c8e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
3400c836:	429a      	cmp	r2, r3
3400c838:	f000 80d0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c83c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c840:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c844:	4b28      	ldr	r3, [pc, #160]	@ (3400c8e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
3400c846:	429a      	cmp	r2, r3
3400c848:	f000 80c8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c84c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c850:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c854:	4b25      	ldr	r3, [pc, #148]	@ (3400c8ec <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
3400c856:	429a      	cmp	r2, r3
3400c858:	f000 80c0 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c860:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c864:	4b22      	ldr	r3, [pc, #136]	@ (3400c8f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
3400c866:	429a      	cmp	r2, r3
3400c868:	f000 80b8 	beq.w	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c86c:	e042      	b.n	3400c8f4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
3400c86e:	bf00      	nop
3400c870:	3401d6f8 	.word	0x3401d6f8
3400c874:	00010300 	.word	0x00010300
3400c878:	00011300 	.word	0x00011300
3400c87c:	00012300 	.word	0x00012300
3400c880:	00013300 	.word	0x00013300
3400c884:	00014300 	.word	0x00014300
3400c888:	00015300 	.word	0x00015300
3400c88c:	00016300 	.word	0x00016300
3400c890:	00017300 	.word	0x00017300
3400c894:	00018300 	.word	0x00018300
3400c898:	00019300 	.word	0x00019300
3400c89c:	0001a300 	.word	0x0001a300
3400c8a0:	0001b300 	.word	0x0001b300
3400c8a4:	0001c300 	.word	0x0001c300
3400c8a8:	0001d300 	.word	0x0001d300
3400c8ac:	0001e300 	.word	0x0001e300
3400c8b0:	0001f300 	.word	0x0001f300
3400c8b4:	00020300 	.word	0x00020300
3400c8b8:	00021300 	.word	0x00021300
3400c8bc:	00022300 	.word	0x00022300
3400c8c0:	00023300 	.word	0x00023300
3400c8c4:	00024300 	.word	0x00024300
3400c8c8:	00025300 	.word	0x00025300
3400c8cc:	00026300 	.word	0x00026300
3400c8d0:	00027300 	.word	0x00027300
3400c8d4:	00028300 	.word	0x00028300
3400c8d8:	00029300 	.word	0x00029300
3400c8dc:	0002a300 	.word	0x0002a300
3400c8e0:	0002b300 	.word	0x0002b300
3400c8e4:	0002c300 	.word	0x0002c300
3400c8e8:	0002d300 	.word	0x0002d300
3400c8ec:	0002e300 	.word	0x0002e300
3400c8f0:	0002f300 	.word	0x0002f300
3400c8f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8f8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c8fc:	4bb4      	ldr	r3, [pc, #720]	@ (3400cbd0 <HAL_RCCEx_PeriphCLKConfig+0xe98>)
3400c8fe:	429a      	cmp	r2, r3
3400c900:	d06c      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c902:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c906:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c90a:	4bb2      	ldr	r3, [pc, #712]	@ (3400cbd4 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
3400c90c:	429a      	cmp	r2, r3
3400c90e:	d065      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c914:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c918:	4baf      	ldr	r3, [pc, #700]	@ (3400cbd8 <HAL_RCCEx_PeriphCLKConfig+0xea0>)
3400c91a:	429a      	cmp	r2, r3
3400c91c:	d05e      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c91e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c922:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c926:	4bad      	ldr	r3, [pc, #692]	@ (3400cbdc <HAL_RCCEx_PeriphCLKConfig+0xea4>)
3400c928:	429a      	cmp	r2, r3
3400c92a:	d057      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c92c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c930:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c934:	4baa      	ldr	r3, [pc, #680]	@ (3400cbe0 <HAL_RCCEx_PeriphCLKConfig+0xea8>)
3400c936:	429a      	cmp	r2, r3
3400c938:	d050      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c93a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c93e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c942:	4ba8      	ldr	r3, [pc, #672]	@ (3400cbe4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
3400c944:	429a      	cmp	r2, r3
3400c946:	d049      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c948:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c94c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c950:	4ba5      	ldr	r3, [pc, #660]	@ (3400cbe8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
3400c952:	429a      	cmp	r2, r3
3400c954:	d042      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c956:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c95a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c95e:	4ba3      	ldr	r3, [pc, #652]	@ (3400cbec <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
3400c960:	429a      	cmp	r2, r3
3400c962:	d03b      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c964:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c968:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c96c:	4ba0      	ldr	r3, [pc, #640]	@ (3400cbf0 <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
3400c96e:	429a      	cmp	r2, r3
3400c970:	d034      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c972:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c976:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c97a:	4b9e      	ldr	r3, [pc, #632]	@ (3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
3400c97c:	429a      	cmp	r2, r3
3400c97e:	d02d      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c980:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c984:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c988:	4b9b      	ldr	r3, [pc, #620]	@ (3400cbf8 <HAL_RCCEx_PeriphCLKConfig+0xec0>)
3400c98a:	429a      	cmp	r2, r3
3400c98c:	d026      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c98e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c992:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c996:	4b99      	ldr	r3, [pc, #612]	@ (3400cbfc <HAL_RCCEx_PeriphCLKConfig+0xec4>)
3400c998:	429a      	cmp	r2, r3
3400c99a:	d01f      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9a0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c9a4:	4b96      	ldr	r3, [pc, #600]	@ (3400cc00 <HAL_RCCEx_PeriphCLKConfig+0xec8>)
3400c9a6:	429a      	cmp	r2, r3
3400c9a8:	d018      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c9aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9ae:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c9b2:	4b94      	ldr	r3, [pc, #592]	@ (3400cc04 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
3400c9b4:	429a      	cmp	r2, r3
3400c9b6:	d011      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c9b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9bc:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c9c0:	4b91      	ldr	r3, [pc, #580]	@ (3400cc08 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
3400c9c2:	429a      	cmp	r2, r3
3400c9c4:	d00a      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c9c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9ca:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400c9ce:	4b8f      	ldr	r3, [pc, #572]	@ (3400cc0c <HAL_RCCEx_PeriphCLKConfig+0xed4>)
3400c9d0:	429a      	cmp	r2, r3
3400c9d2:	d003      	beq.n	3400c9dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400c9d4:	218e      	movs	r1, #142	@ 0x8e
3400c9d6:	488e      	ldr	r0, [pc, #568]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400c9d8:	f7f4 fdfa 	bl	340015d0 <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3400c9dc:	f7fe fae2 	bl	3400afa4 <LL_RCC_GetRTCClockSource>
3400c9e0:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400c9e4:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400c9e8:	2b00      	cmp	r3, #0
3400c9ea:	d018      	beq.n	3400ca1e <HAL_RCCEx_PeriphCLKConfig+0xce6>
3400c9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9f0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400c9f4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3400c9f8:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400c9fc:	4293      	cmp	r3, r2
3400c9fe:	d00e      	beq.n	3400ca1e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3400ca00:	4b84      	ldr	r3, [pc, #528]	@ (3400cc14 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400ca02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ca04:	4a83      	ldr	r2, [pc, #524]	@ (3400cc14 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400ca06:	f043 0301 	orr.w	r3, r3, #1
3400ca0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400ca0c:	4b81      	ldr	r3, [pc, #516]	@ (3400cc14 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400ca0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ca10:	f003 0301 	and.w	r3, r3, #1
3400ca14:	2b00      	cmp	r3, #0
3400ca16:	d102      	bne.n	3400ca1e <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
3400ca18:	2301      	movs	r3, #1
3400ca1a:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3400ca1e:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400ca22:	2b00      	cmp	r3, #0
3400ca24:	d143      	bne.n	3400caae <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400ca26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca2a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400ca2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ca32:	d117      	bne.n	3400ca64 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3400ca34:	f7f9 fafa 	bl	3400602c <HAL_GetTick>
3400ca38:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3400ca3c:	e00d      	b.n	3400ca5a <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400ca3e:	f7f9 faf5 	bl	3400602c <HAL_GetTick>
3400ca42:	4602      	mov	r2, r0
3400ca44:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3400ca48:	1ad2      	subs	r2, r2, r3
3400ca4a:	f241 3388 	movw	r3, #5000	@ 0x1388
3400ca4e:	429a      	cmp	r2, r3
3400ca50:	d903      	bls.n	3400ca5a <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
3400ca52:	2303      	movs	r3, #3
3400ca54:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3400ca58:	e004      	b.n	3400ca64 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3400ca5a:	f7fd feb5 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
3400ca5e:	4603      	mov	r3, r0
3400ca60:	2b00      	cmp	r3, #0
3400ca62:	d0ec      	beq.n	3400ca3e <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
3400ca64:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400ca68:	2b00      	cmp	r3, #0
3400ca6a:	d11b      	bne.n	3400caa4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3400ca6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca70:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400ca74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400ca78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400ca7c:	d108      	bne.n	3400ca90 <HAL_RCCEx_PeriphCLKConfig+0xd58>
3400ca7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca82:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400ca86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400ca8a:	4618      	mov	r0, r3
3400ca8c:	f7fe fa98 	bl	3400afc0 <LL_RCC_SetRTC_HSEPrescaler>
3400ca90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca94:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400ca98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400ca9c:	4618      	mov	r0, r3
3400ca9e:	f7fe fa6b 	bl	3400af78 <LL_RCC_SetRTCClockSource>
3400caa2:	e008      	b.n	3400cab6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
3400caa4:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400caa8:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
3400caac:	e003      	b.n	3400cab6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3400caae:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400cab2:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400cab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caba:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cabe:	f002 0304 	and.w	r3, r2, #4
3400cac2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3400cac6:	2300      	movs	r3, #0
3400cac8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
3400cacc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
3400cad0:	4603      	mov	r3, r0
3400cad2:	460a      	mov	r2, r1
3400cad4:	4313      	orrs	r3, r2
3400cad6:	f000 81dc 	beq.w	3400ce92 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400cada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cade:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cae2:	2b00      	cmp	r3, #0
3400cae4:	d02d      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cae6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400caee:	2b01      	cmp	r3, #1
3400caf0:	d027      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400caf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caf6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cafa:	2b02      	cmp	r3, #2
3400cafc:	d021      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cafe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb06:	2b03      	cmp	r3, #3
3400cb08:	d01b      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cb0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb12:	2b04      	cmp	r3, #4
3400cb14:	d015      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cb16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb1e:	2b05      	cmp	r3, #5
3400cb20:	d00f      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cb22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb2a:	2b06      	cmp	r3, #6
3400cb2c:	d009      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cb2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb36:	2b07      	cmp	r3, #7
3400cb38:	d003      	beq.n	3400cb42 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400cb3a:	21d4      	movs	r1, #212	@ 0xd4
3400cb3c:	4834      	ldr	r0, [pc, #208]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400cb3e:	f7f4 fd47 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3400cb42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cb4a:	2b04      	cmp	r3, #4
3400cb4c:	d166      	bne.n	3400cc1c <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400cb4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400cb54:	2b00      	cmp	r3, #0
3400cb56:	d015      	beq.n	3400cb84 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400cb58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400cb5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cb62:	d00f      	beq.n	3400cb84 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400cb64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400cb6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cb6e:	d009      	beq.n	3400cb84 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400cb70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400cb76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cb7a:	d003      	beq.n	3400cb84 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400cb7c:	21d9      	movs	r1, #217	@ 0xd9
3400cb7e:	4824      	ldr	r0, [pc, #144]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400cb80:	f7f4 fd26 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400cb84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400cb8a:	2b00      	cmp	r3, #0
3400cb8c:	d005      	beq.n	3400cb9a <HAL_RCCEx_PeriphCLKConfig+0xe62>
3400cb8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400cb94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cb98:	d903      	bls.n	3400cba2 <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3400cb9a:	21da      	movs	r1, #218	@ 0xda
3400cb9c:	481c      	ldr	r0, [pc, #112]	@ (3400cc10 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400cb9e:	f7f4 fd17 	bl	340015d0 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400cba2:	4b1d      	ldr	r3, [pc, #116]	@ (3400cc18 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400cba4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400cba8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cbac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cbb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400cbb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400cbbc:	3b01      	subs	r3, #1
3400cbbe:	041b      	lsls	r3, r3, #16
3400cbc0:	4313      	orrs	r3, r2
3400cbc2:	4a15      	ldr	r2, [pc, #84]	@ (3400cc18 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400cbc4:	430b      	orrs	r3, r1
3400cbc6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400cbca:	f7fe fd13 	bl	3400b5f4 <LL_RCC_IC5_Enable>
3400cbce:	e159      	b.n	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400cbd0:	00030300 	.word	0x00030300
3400cbd4:	00031300 	.word	0x00031300
3400cbd8:	00032300 	.word	0x00032300
3400cbdc:	00033300 	.word	0x00033300
3400cbe0:	00034300 	.word	0x00034300
3400cbe4:	00035300 	.word	0x00035300
3400cbe8:	00036300 	.word	0x00036300
3400cbec:	00037300 	.word	0x00037300
3400cbf0:	00038300 	.word	0x00038300
3400cbf4:	00039300 	.word	0x00039300
3400cbf8:	0003a300 	.word	0x0003a300
3400cbfc:	0003b300 	.word	0x0003b300
3400cc00:	0003c300 	.word	0x0003c300
3400cc04:	0003d300 	.word	0x0003d300
3400cc08:	0003e300 	.word	0x0003e300
3400cc0c:	0003f300 	.word	0x0003f300
3400cc10:	3401d6f8 	.word	0x3401d6f8
3400cc14:	56024800 	.word	0x56024800
3400cc18:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3400cc1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cc24:	2b05      	cmp	r3, #5
3400cc26:	d140      	bne.n	3400ccaa <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400cc28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400cc2e:	2b00      	cmp	r3, #0
3400cc30:	d015      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400cc32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400cc38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cc3c:	d00f      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400cc3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400cc44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cc48:	d009      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400cc4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400cc50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cc54:	d003      	beq.n	3400cc5e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400cc56:	21e6      	movs	r1, #230	@ 0xe6
3400cc58:	4860      	ldr	r0, [pc, #384]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cc5a:	f7f4 fcb9 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400cc5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cc64:	2b00      	cmp	r3, #0
3400cc66:	d005      	beq.n	3400cc74 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3400cc68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cc6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cc72:	d903      	bls.n	3400cc7c <HAL_RCCEx_PeriphCLKConfig+0xf44>
3400cc74:	21e7      	movs	r1, #231	@ 0xe7
3400cc76:	4859      	ldr	r0, [pc, #356]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cc78:	f7f4 fcaa 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400cc7c:	4b58      	ldr	r3, [pc, #352]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cc7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400cc82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cc86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cc8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400cc90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cc96:	3b01      	subs	r3, #1
3400cc98:	041b      	lsls	r3, r3, #16
3400cc9a:	4313      	orrs	r3, r2
3400cc9c:	4a50      	ldr	r2, [pc, #320]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cc9e:	430b      	orrs	r3, r1
3400cca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400cca4:	f7fe fda6 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400cca8:	e0ec      	b.n	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400ccaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400ccb2:	2b06      	cmp	r3, #6
3400ccb4:	d140      	bne.n	3400cd38 <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ccb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ccbc:	2b00      	cmp	r3, #0
3400ccbe:	d015      	beq.n	3400ccec <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400ccc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ccc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ccca:	d00f      	beq.n	3400ccec <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400cccc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ccd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ccd6:	d009      	beq.n	3400ccec <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400ccd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ccde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cce2:	d003      	beq.n	3400ccec <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400cce4:	21f3      	movs	r1, #243	@ 0xf3
3400cce6:	483d      	ldr	r0, [pc, #244]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cce8:	f7f4 fc72 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ccec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccf2:	2b00      	cmp	r3, #0
3400ccf4:	d005      	beq.n	3400cd02 <HAL_RCCEx_PeriphCLKConfig+0xfca>
3400ccf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cd00:	d903      	bls.n	3400cd0a <HAL_RCCEx_PeriphCLKConfig+0xfd2>
3400cd02:	21f4      	movs	r1, #244	@ 0xf4
3400cd04:	4835      	ldr	r0, [pc, #212]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cd06:	f7f4 fc63 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cd0a:	4b35      	ldr	r3, [pc, #212]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cd0c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cd10:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cd14:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cd18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd1c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cd1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cd24:	3b01      	subs	r3, #1
3400cd26:	041b      	lsls	r3, r3, #16
3400cd28:	4313      	orrs	r3, r2
3400cd2a:	4a2d      	ldr	r2, [pc, #180]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cd2c:	430b      	orrs	r3, r1
3400cd2e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cd32:	f7fe fe5f 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400cd36:	e0a5      	b.n	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3400cd38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cd40:	2b03      	cmp	r3, #3
3400cd42:	d14f      	bne.n	3400cde4 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400cd44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400cd4c:	2b00      	cmp	r3, #0
3400cd4e:	d019      	beq.n	3400cd84 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400cd50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400cd58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cd5c:	d012      	beq.n	3400cd84 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400cd5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400cd66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cd6a:	d00b      	beq.n	3400cd84 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400cd6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400cd74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cd78:	d004      	beq.n	3400cd84 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400cd7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400cd7e:	4817      	ldr	r0, [pc, #92]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cd80:	f7f4 fc26 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400cd84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400cd8c:	2b00      	cmp	r3, #0
3400cd8e:	d006      	beq.n	3400cd9e <HAL_RCCEx_PeriphCLKConfig+0x1066>
3400cd90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400cd98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cd9c:	d904      	bls.n	3400cda8 <HAL_RCCEx_PeriphCLKConfig+0x1070>
3400cd9e:	f240 1101 	movw	r1, #257	@ 0x101
3400cda2:	480e      	ldr	r0, [pc, #56]	@ (3400cddc <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400cda4:	f7f4 fc14 	bl	340015d0 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400cda8:	4b0d      	ldr	r3, [pc, #52]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cdaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400cdae:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cdb2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cdb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400cdbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400cdc6:	3b01      	subs	r3, #1
3400cdc8:	041b      	lsls	r3, r3, #16
3400cdca:	4313      	orrs	r3, r2
3400cdcc:	4a04      	ldr	r2, [pc, #16]	@ (3400cde0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400cdce:	430b      	orrs	r3, r1
3400cdd0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400cdd4:	f7fe ff0e 	bl	3400bbf4 <LL_RCC_IC19_Enable>
3400cdd8:	e054      	b.n	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400cdda:	bf00      	nop
3400cddc:	3401d6f8 	.word	0x3401d6f8
3400cde0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3400cde4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cde8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400cdec:	2b07      	cmp	r3, #7
3400cdee:	d149      	bne.n	3400ce84 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400cdf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400cdf8:	2b00      	cmp	r3, #0
3400cdfa:	d019      	beq.n	3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400cdfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400ce04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ce08:	d012      	beq.n	3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400ce0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400ce12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ce16:	d00b      	beq.n	3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400ce18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400ce20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ce24:	d004      	beq.n	3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400ce26:	f240 110d 	movw	r1, #269	@ 0x10d
3400ce2a:	487d      	ldr	r0, [pc, #500]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ce2c:	f7f4 fbd0 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400ce30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ce38:	2b00      	cmp	r3, #0
3400ce3a:	d006      	beq.n	3400ce4a <HAL_RCCEx_PeriphCLKConfig+0x1112>
3400ce3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ce44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ce48:	d904      	bls.n	3400ce54 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3400ce4a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400ce4e:	4874      	ldr	r0, [pc, #464]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ce50:	f7f4 fbbe 	bl	340015d0 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400ce54:	4b73      	ldr	r3, [pc, #460]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ce56:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400ce5a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ce5e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ce62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400ce6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ce72:	3b01      	subs	r3, #1
3400ce74:	041b      	lsls	r3, r3, #16
3400ce76:	4313      	orrs	r3, r2
3400ce78:	4a6a      	ldr	r2, [pc, #424]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ce7a:	430b      	orrs	r3, r1
3400ce7c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400ce80:	f7fe fef8 	bl	3400bc74 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3400ce84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400ce8c:	4618      	mov	r0, r3
3400ce8e:	f7fd fd4f 	bl	3400a930 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400ce92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ce9a:	2100      	movs	r1, #0
3400ce9c:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
3400cea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3400cea4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3400cea8:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
3400ceac:	4603      	mov	r3, r0
3400ceae:	460a      	mov	r2, r1
3400ceb0:	4313      	orrs	r3, r2
3400ceb2:	f000 80d1 	beq.w	3400d058 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400ceb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400cebe:	4b5a      	ldr	r3, [pc, #360]	@ (3400d028 <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
3400cec0:	429a      	cmp	r2, r3
3400cec2:	d019      	beq.n	3400cef8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400cec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cec8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400cecc:	4b57      	ldr	r3, [pc, #348]	@ (3400d02c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
3400cece:	429a      	cmp	r2, r3
3400ced0:	d012      	beq.n	3400cef8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ced2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ced6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ceda:	4b55      	ldr	r3, [pc, #340]	@ (3400d030 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400cedc:	429a      	cmp	r2, r3
3400cede:	d00b      	beq.n	3400cef8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400cee0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cee4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400cee8:	4b52      	ldr	r3, [pc, #328]	@ (3400d034 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400ceea:	429a      	cmp	r2, r3
3400ceec:	d004      	beq.n	3400cef8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ceee:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400cef2:	484b      	ldr	r0, [pc, #300]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400cef4:	f7f4 fb6c 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400cef8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cefc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400cf00:	4b4b      	ldr	r3, [pc, #300]	@ (3400d030 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400cf02:	429a      	cmp	r2, r3
3400cf04:	d142      	bne.n	3400cf8c <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400cf06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf0a:	699b      	ldr	r3, [r3, #24]
3400cf0c:	2b00      	cmp	r3, #0
3400cf0e:	d016      	beq.n	3400cf3e <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400cf10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf14:	699b      	ldr	r3, [r3, #24]
3400cf16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cf1a:	d010      	beq.n	3400cf3e <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400cf1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf20:	699b      	ldr	r3, [r3, #24]
3400cf22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cf26:	d00a      	beq.n	3400cf3e <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400cf28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf2c:	699b      	ldr	r3, [r3, #24]
3400cf2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cf32:	d004      	beq.n	3400cf3e <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400cf34:	f240 1129 	movw	r1, #297	@ 0x129
3400cf38:	4839      	ldr	r0, [pc, #228]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400cf3a:	f7f4 fb49 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400cf3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf42:	69db      	ldr	r3, [r3, #28]
3400cf44:	2b00      	cmp	r3, #0
3400cf46:	d005      	beq.n	3400cf54 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3400cf48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf4c:	69db      	ldr	r3, [r3, #28]
3400cf4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cf52:	d904      	bls.n	3400cf5e <HAL_RCCEx_PeriphCLKConfig+0x1226>
3400cf54:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400cf58:	4831      	ldr	r0, [pc, #196]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400cf5a:	f7f4 fb39 	bl	340015d0 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400cf5e:	4b31      	ldr	r3, [pc, #196]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400cf60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400cf64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cf68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cf6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf70:	699a      	ldr	r2, [r3, #24]
3400cf72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf76:	69db      	ldr	r3, [r3, #28]
3400cf78:	3b01      	subs	r3, #1
3400cf7a:	041b      	lsls	r3, r3, #16
3400cf7c:	4313      	orrs	r3, r2
3400cf7e:	4a29      	ldr	r2, [pc, #164]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400cf80:	430b      	orrs	r3, r1
3400cf82:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400cf86:	f7fe fab5 	bl	3400b4f4 <LL_RCC_IC3_Enable>
3400cf8a:	e05e      	b.n	3400d04a <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400cf8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf90:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400cf94:	4b27      	ldr	r3, [pc, #156]	@ (3400d034 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400cf96:	429a      	cmp	r2, r3
3400cf98:	d14e      	bne.n	3400d038 <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400cf9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf9e:	6a1b      	ldr	r3, [r3, #32]
3400cfa0:	2b00      	cmp	r3, #0
3400cfa2:	d016      	beq.n	3400cfd2 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400cfa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfa8:	6a1b      	ldr	r3, [r3, #32]
3400cfaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cfae:	d010      	beq.n	3400cfd2 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400cfb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfb4:	6a1b      	ldr	r3, [r3, #32]
3400cfb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cfba:	d00a      	beq.n	3400cfd2 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400cfbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfc0:	6a1b      	ldr	r3, [r3, #32]
3400cfc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cfc6:	d004      	beq.n	3400cfd2 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400cfc8:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400cfcc:	4814      	ldr	r0, [pc, #80]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400cfce:	f7f4 faff 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400cfd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400cfd8:	2b00      	cmp	r3, #0
3400cfda:	d005      	beq.n	3400cfe8 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
3400cfdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400cfe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cfe6:	d904      	bls.n	3400cff2 <HAL_RCCEx_PeriphCLKConfig+0x12ba>
3400cfe8:	f240 1137 	movw	r1, #311	@ 0x137
3400cfec:	480c      	ldr	r0, [pc, #48]	@ (3400d020 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400cfee:	f7f4 faef 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400cff2:	4b0c      	ldr	r3, [pc, #48]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400cff4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400cff8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cffc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d004:	6a1a      	ldr	r2, [r3, #32]
3400d006:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d00c:	3b01      	subs	r3, #1
3400d00e:	041b      	lsls	r3, r3, #16
3400d010:	4313      	orrs	r3, r2
3400d012:	4a04      	ldr	r2, [pc, #16]	@ (3400d024 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400d014:	430b      	orrs	r3, r1
3400d016:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d01a:	f7fe faab 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d01e:	e014      	b.n	3400d04a <HAL_RCCEx_PeriphCLKConfig+0x1312>
3400d020:	3401d6f8 	.word	0x3401d6f8
3400d024:	56028000 	.word	0x56028000
3400d028:	03000014 	.word	0x03000014
3400d02c:	03010014 	.word	0x03010014
3400d030:	03020014 	.word	0x03020014
3400d034:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400d038:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d03c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400d040:	4baf      	ldr	r3, [pc, #700]	@ (3400d300 <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
3400d042:	429a      	cmp	r2, r3
3400d044:	d101      	bne.n	3400d04a <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3400d046:	f7fe fe55 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3400d04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d04e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3400d052:	4618      	mov	r0, r3
3400d054:	f7fd fdfc 	bl	3400ac50 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400d058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d060:	2100      	movs	r1, #0
3400d062:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3400d066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400d06a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3400d06e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3400d072:	4603      	mov	r3, r0
3400d074:	460a      	mov	r2, r1
3400d076:	4313      	orrs	r3, r2
3400d078:	f000 80c5 	beq.w	3400d206 <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400d07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d080:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d084:	4b9f      	ldr	r3, [pc, #636]	@ (3400d304 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3400d086:	429a      	cmp	r2, r3
3400d088:	d019      	beq.n	3400d0be <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400d08a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d08e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d092:	4b9d      	ldr	r3, [pc, #628]	@ (3400d308 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400d094:	429a      	cmp	r2, r3
3400d096:	d012      	beq.n	3400d0be <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400d098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d09c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d0a0:	4b9a      	ldr	r3, [pc, #616]	@ (3400d30c <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400d0a2:	429a      	cmp	r2, r3
3400d0a4:	d00b      	beq.n	3400d0be <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400d0a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d0ae:	4b98      	ldr	r3, [pc, #608]	@ (3400d310 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400d0b0:	429a      	cmp	r2, r3
3400d0b2:	d004      	beq.n	3400d0be <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400d0b4:	f240 1151 	movw	r1, #337	@ 0x151
3400d0b8:	4896      	ldr	r0, [pc, #600]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d0ba:	f7f4 fa89 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400d0be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d0c6:	4b91      	ldr	r3, [pc, #580]	@ (3400d30c <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400d0c8:	429a      	cmp	r2, r3
3400d0ca:	d142      	bne.n	3400d152 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400d0cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0d0:	699b      	ldr	r3, [r3, #24]
3400d0d2:	2b00      	cmp	r3, #0
3400d0d4:	d016      	beq.n	3400d104 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400d0d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0da:	699b      	ldr	r3, [r3, #24]
3400d0dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d0e0:	d010      	beq.n	3400d104 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400d0e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0e6:	699b      	ldr	r3, [r3, #24]
3400d0e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d0ec:	d00a      	beq.n	3400d104 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400d0ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0f2:	699b      	ldr	r3, [r3, #24]
3400d0f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d0f8:	d004      	beq.n	3400d104 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400d0fa:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400d0fe:	4885      	ldr	r0, [pc, #532]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d100:	f7f4 fa66 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400d104:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d108:	69db      	ldr	r3, [r3, #28]
3400d10a:	2b00      	cmp	r3, #0
3400d10c:	d005      	beq.n	3400d11a <HAL_RCCEx_PeriphCLKConfig+0x13e2>
3400d10e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d112:	69db      	ldr	r3, [r3, #28]
3400d114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d118:	d904      	bls.n	3400d124 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
3400d11a:	f240 1157 	movw	r1, #343	@ 0x157
3400d11e:	487d      	ldr	r0, [pc, #500]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d120:	f7f4 fa56 	bl	340015d0 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400d124:	4b7c      	ldr	r3, [pc, #496]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d126:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400d12a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d12e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d132:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d136:	699a      	ldr	r2, [r3, #24]
3400d138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d13c:	69db      	ldr	r3, [r3, #28]
3400d13e:	3b01      	subs	r3, #1
3400d140:	041b      	lsls	r3, r3, #16
3400d142:	4313      	orrs	r3, r2
3400d144:	4a74      	ldr	r2, [pc, #464]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d146:	430b      	orrs	r3, r1
3400d148:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400d14c:	f7fe f9d2 	bl	3400b4f4 <LL_RCC_IC3_Enable>
3400d150:	e052      	b.n	3400d1f8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400d152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d156:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d15a:	4b6d      	ldr	r3, [pc, #436]	@ (3400d310 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400d15c:	429a      	cmp	r2, r3
3400d15e:	d142      	bne.n	3400d1e6 <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400d160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d164:	6a1b      	ldr	r3, [r3, #32]
3400d166:	2b00      	cmp	r3, #0
3400d168:	d016      	beq.n	3400d198 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400d16a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d16e:	6a1b      	ldr	r3, [r3, #32]
3400d170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d174:	d010      	beq.n	3400d198 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400d176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d17a:	6a1b      	ldr	r3, [r3, #32]
3400d17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d180:	d00a      	beq.n	3400d198 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400d182:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d186:	6a1b      	ldr	r3, [r3, #32]
3400d188:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d18c:	d004      	beq.n	3400d198 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400d18e:	f240 1163 	movw	r1, #355	@ 0x163
3400d192:	4860      	ldr	r0, [pc, #384]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d194:	f7f4 fa1c 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400d198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d19e:	2b00      	cmp	r3, #0
3400d1a0:	d005      	beq.n	3400d1ae <HAL_RCCEx_PeriphCLKConfig+0x1476>
3400d1a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d1ac:	d904      	bls.n	3400d1b8 <HAL_RCCEx_PeriphCLKConfig+0x1480>
3400d1ae:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400d1b2:	4858      	ldr	r0, [pc, #352]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d1b4:	f7f4 fa0c 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400d1b8:	4b57      	ldr	r3, [pc, #348]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d1ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400d1be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d1c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d1c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1ca:	6a1a      	ldr	r2, [r3, #32]
3400d1cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d1d2:	3b01      	subs	r3, #1
3400d1d4:	041b      	lsls	r3, r3, #16
3400d1d6:	4313      	orrs	r3, r2
3400d1d8:	4a4f      	ldr	r2, [pc, #316]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d1da:	430b      	orrs	r3, r1
3400d1dc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d1e0:	f7fe f9c8 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d1e4:	e008      	b.n	3400d1f8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400d1e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400d1ee:	4b46      	ldr	r3, [pc, #280]	@ (3400d308 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400d1f0:	429a      	cmp	r2, r3
3400d1f2:	d101      	bne.n	3400d1f8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
3400d1f4:	f7fe fd7e 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3400d1f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400d200:	4618      	mov	r0, r3
3400d202:	f7fd fd25 	bl	3400ac50 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400d206:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d20e:	2100      	movs	r1, #0
3400d210:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400d214:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400d218:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3400d21c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400d220:	4603      	mov	r3, r0
3400d222:	460a      	mov	r2, r1
3400d224:	4313      	orrs	r3, r2
3400d226:	f000 80db 	beq.w	3400d3e0 <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3400d22a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d22e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d232:	4b3a      	ldr	r3, [pc, #232]	@ (3400d31c <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
3400d234:	429a      	cmp	r2, r3
3400d236:	d019      	beq.n	3400d26c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400d238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d23c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d240:	4b37      	ldr	r3, [pc, #220]	@ (3400d320 <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
3400d242:	429a      	cmp	r2, r3
3400d244:	d012      	beq.n	3400d26c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400d246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d24a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d24e:	4b35      	ldr	r3, [pc, #212]	@ (3400d324 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400d250:	429a      	cmp	r2, r3
3400d252:	d00b      	beq.n	3400d26c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400d254:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d258:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d25c:	4b32      	ldr	r3, [pc, #200]	@ (3400d328 <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
3400d25e:	429a      	cmp	r2, r3
3400d260:	d004      	beq.n	3400d26c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400d262:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400d266:	482b      	ldr	r0, [pc, #172]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d268:	f7f4 f9b2 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400d26c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d270:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d274:	4b2b      	ldr	r3, [pc, #172]	@ (3400d324 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400d276:	429a      	cmp	r2, r3
3400d278:	d158      	bne.n	3400d32c <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400d27a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d27e:	699b      	ldr	r3, [r3, #24]
3400d280:	2b00      	cmp	r3, #0
3400d282:	d016      	beq.n	3400d2b2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400d284:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d288:	699b      	ldr	r3, [r3, #24]
3400d28a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d28e:	d010      	beq.n	3400d2b2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400d290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d294:	699b      	ldr	r3, [r3, #24]
3400d296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d29a:	d00a      	beq.n	3400d2b2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400d29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2a0:	699b      	ldr	r3, [r3, #24]
3400d2a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d2a6:	d004      	beq.n	3400d2b2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400d2a8:	f240 1183 	movw	r1, #387	@ 0x183
3400d2ac:	4819      	ldr	r0, [pc, #100]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d2ae:	f7f4 f98f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400d2b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2b6:	69db      	ldr	r3, [r3, #28]
3400d2b8:	2b00      	cmp	r3, #0
3400d2ba:	d005      	beq.n	3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x1590>
3400d2bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2c0:	69db      	ldr	r3, [r3, #28]
3400d2c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d2c6:	d904      	bls.n	3400d2d2 <HAL_RCCEx_PeriphCLKConfig+0x159a>
3400d2c8:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400d2cc:	4811      	ldr	r0, [pc, #68]	@ (3400d314 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400d2ce:	f7f4 f97f 	bl	340015d0 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400d2d2:	4b11      	ldr	r3, [pc, #68]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d2d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400d2d8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d2dc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d2e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2e4:	699a      	ldr	r2, [r3, #24]
3400d2e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2ea:	69db      	ldr	r3, [r3, #28]
3400d2ec:	3b01      	subs	r3, #1
3400d2ee:	041b      	lsls	r3, r3, #16
3400d2f0:	4313      	orrs	r3, r2
3400d2f2:	4a09      	ldr	r2, [pc, #36]	@ (3400d318 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400d2f4:	430b      	orrs	r3, r1
3400d2f6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400d2fa:	f7fe f8fb 	bl	3400b4f4 <LL_RCC_IC3_Enable>
3400d2fe:	e068      	b.n	3400d3d2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400d300:	03010014 	.word	0x03010014
3400d304:	03000414 	.word	0x03000414
3400d308:	03010414 	.word	0x03010414
3400d30c:	03020414 	.word	0x03020414
3400d310:	03030414 	.word	0x03030414
3400d314:	3401d6f8 	.word	0x3401d6f8
3400d318:	56028000 	.word	0x56028000
3400d31c:	03000814 	.word	0x03000814
3400d320:	03010814 	.word	0x03010814
3400d324:	03020814 	.word	0x03020814
3400d328:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400d32c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d330:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d334:	4b8b      	ldr	r3, [pc, #556]	@ (3400d564 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
3400d336:	429a      	cmp	r2, r3
3400d338:	d142      	bne.n	3400d3c0 <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400d33a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d33e:	6a1b      	ldr	r3, [r3, #32]
3400d340:	2b00      	cmp	r3, #0
3400d342:	d016      	beq.n	3400d372 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400d344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d348:	6a1b      	ldr	r3, [r3, #32]
3400d34a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d34e:	d010      	beq.n	3400d372 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400d350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d354:	6a1b      	ldr	r3, [r3, #32]
3400d356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d35a:	d00a      	beq.n	3400d372 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400d35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d360:	6a1b      	ldr	r3, [r3, #32]
3400d362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d366:	d004      	beq.n	3400d372 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400d368:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400d36c:	487e      	ldr	r0, [pc, #504]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d36e:	f7f4 f92f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400d372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d378:	2b00      	cmp	r3, #0
3400d37a:	d005      	beq.n	3400d388 <HAL_RCCEx_PeriphCLKConfig+0x1650>
3400d37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d386:	d904      	bls.n	3400d392 <HAL_RCCEx_PeriphCLKConfig+0x165a>
3400d388:	f240 1191 	movw	r1, #401	@ 0x191
3400d38c:	4876      	ldr	r0, [pc, #472]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d38e:	f7f4 f91f 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400d392:	4b76      	ldr	r3, [pc, #472]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d394:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400d398:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d39c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d3a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3a4:	6a1a      	ldr	r2, [r3, #32]
3400d3a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d3ac:	3b01      	subs	r3, #1
3400d3ae:	041b      	lsls	r3, r3, #16
3400d3b0:	4313      	orrs	r3, r2
3400d3b2:	4a6e      	ldr	r2, [pc, #440]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d3b4:	430b      	orrs	r3, r1
3400d3b6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d3ba:	f7fe f8db 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d3be:	e008      	b.n	3400d3d2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400d3c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3c4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400d3c8:	4b69      	ldr	r3, [pc, #420]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3400d3ca:	429a      	cmp	r2, r3
3400d3cc:	d101      	bne.n	3400d3d2 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
3400d3ce:	f7fe fc91 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3400d3d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400d3da:	4618      	mov	r0, r3
3400d3dc:	f7fd fc38 	bl	3400ac50 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400d3e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d3e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3400d3ec:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3400d3f0:	2300      	movs	r3, #0
3400d3f2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3400d3f6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3400d3fa:	4603      	mov	r3, r0
3400d3fc:	460a      	mov	r2, r1
3400d3fe:	4313      	orrs	r3, r2
3400d400:	f000 80c7 	beq.w	3400d592 <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400d404:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d40c:	2b00      	cmp	r3, #0
3400d40e:	d016      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400d410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d418:	2b10      	cmp	r3, #16
3400d41a:	d010      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400d41c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d420:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d424:	2b20      	cmp	r3, #32
3400d426:	d00a      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400d428:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d42c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d430:	2b30      	cmp	r3, #48	@ 0x30
3400d432:	d004      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400d434:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400d438:	484b      	ldr	r0, [pc, #300]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d43a:	f7f4 f8c9 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400d43e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d446:	2b20      	cmp	r3, #32
3400d448:	d142      	bne.n	3400d4d0 <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400d44a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d44e:	699b      	ldr	r3, [r3, #24]
3400d450:	2b00      	cmp	r3, #0
3400d452:	d016      	beq.n	3400d482 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400d454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d458:	699b      	ldr	r3, [r3, #24]
3400d45a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d45e:	d010      	beq.n	3400d482 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400d460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d464:	699b      	ldr	r3, [r3, #24]
3400d466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d46a:	d00a      	beq.n	3400d482 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400d46c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d470:	699b      	ldr	r3, [r3, #24]
3400d472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d476:	d004      	beq.n	3400d482 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400d478:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400d47c:	483a      	ldr	r0, [pc, #232]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d47e:	f7f4 f8a7 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400d482:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d486:	69db      	ldr	r3, [r3, #28]
3400d488:	2b00      	cmp	r3, #0
3400d48a:	d005      	beq.n	3400d498 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3400d48c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d490:	69db      	ldr	r3, [r3, #28]
3400d492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d496:	d904      	bls.n	3400d4a2 <HAL_RCCEx_PeriphCLKConfig+0x176a>
3400d498:	f240 11b1 	movw	r1, #433	@ 0x1b1
3400d49c:	4832      	ldr	r0, [pc, #200]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d49e:	f7f4 f897 	bl	340015d0 <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400d4a2:	4b32      	ldr	r3, [pc, #200]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d4a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400d4a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d4ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d4b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4b4:	699a      	ldr	r2, [r3, #24]
3400d4b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ba:	69db      	ldr	r3, [r3, #28]
3400d4bc:	3b01      	subs	r3, #1
3400d4be:	041b      	lsls	r3, r3, #16
3400d4c0:	4313      	orrs	r3, r2
3400d4c2:	4a2a      	ldr	r2, [pc, #168]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d4c4:	430b      	orrs	r3, r1
3400d4c6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400d4ca:	f7fe f813 	bl	3400b4f4 <LL_RCC_IC3_Enable>
3400d4ce:	e059      	b.n	3400d584 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3400d4d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d4d8:	2b30      	cmp	r3, #48	@ 0x30
3400d4da:	d14b      	bne.n	3400d574 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400d4dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4e0:	6a1b      	ldr	r3, [r3, #32]
3400d4e2:	2b00      	cmp	r3, #0
3400d4e4:	d016      	beq.n	3400d514 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400d4e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ea:	6a1b      	ldr	r3, [r3, #32]
3400d4ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d4f0:	d010      	beq.n	3400d514 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400d4f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4f6:	6a1b      	ldr	r3, [r3, #32]
3400d4f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d4fc:	d00a      	beq.n	3400d514 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400d4fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d502:	6a1b      	ldr	r3, [r3, #32]
3400d504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d508:	d004      	beq.n	3400d514 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400d50a:	f240 11bd 	movw	r1, #445	@ 0x1bd
3400d50e:	4816      	ldr	r0, [pc, #88]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d510:	f7f4 f85e 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400d514:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d51a:	2b00      	cmp	r3, #0
3400d51c:	d005      	beq.n	3400d52a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
3400d51e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d528:	d904      	bls.n	3400d534 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
3400d52a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400d52e:	480e      	ldr	r0, [pc, #56]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400d530:	f7f4 f84e 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400d534:	4b0d      	ldr	r3, [pc, #52]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d536:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400d53a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d53e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d542:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d546:	6a1a      	ldr	r2, [r3, #32]
3400d548:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d54e:	3b01      	subs	r3, #1
3400d550:	041b      	lsls	r3, r3, #16
3400d552:	4313      	orrs	r3, r2
3400d554:	4a05      	ldr	r2, [pc, #20]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400d556:	430b      	orrs	r3, r1
3400d558:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d55c:	f7fe f80a 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d560:	e010      	b.n	3400d584 <HAL_RCCEx_PeriphCLKConfig+0x184c>
3400d562:	bf00      	nop
3400d564:	03030814 	.word	0x03030814
3400d568:	3401d6f8 	.word	0x3401d6f8
3400d56c:	56028000 	.word	0x56028000
3400d570:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3400d574:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d57c:	2b10      	cmp	r3, #16
3400d57e:	d101      	bne.n	3400d584 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
3400d580:	f7fe fbb8 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3400d584:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d588:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400d58c:	4618      	mov	r0, r3
3400d58e:	f7fd fa77 	bl	3400aa80 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3400d592:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d596:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d59a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400d59e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3400d5a2:	2300      	movs	r3, #0
3400d5a4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3400d5a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3400d5ac:	4603      	mov	r3, r0
3400d5ae:	460a      	mov	r2, r1
3400d5b0:	4313      	orrs	r3, r2
3400d5b2:	f000 80c5 	beq.w	3400d740 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400d5b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5ba:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d5be:	4b9f      	ldr	r3, [pc, #636]	@ (3400d83c <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
3400d5c0:	429a      	cmp	r2, r3
3400d5c2:	d019      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400d5c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5c8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d5cc:	4b9c      	ldr	r3, [pc, #624]	@ (3400d840 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400d5ce:	429a      	cmp	r2, r3
3400d5d0:	d012      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400d5d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5d6:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d5da:	4b9a      	ldr	r3, [pc, #616]	@ (3400d844 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400d5dc:	429a      	cmp	r2, r3
3400d5de:	d00b      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400d5e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5e4:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d5e8:	4b97      	ldr	r3, [pc, #604]	@ (3400d848 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400d5ea:	429a      	cmp	r2, r3
3400d5ec:	d004      	beq.n	3400d5f8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400d5ee:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400d5f2:	4896      	ldr	r0, [pc, #600]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d5f4:	f7f3 ffec 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400d5f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5fc:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d600:	4b90      	ldr	r3, [pc, #576]	@ (3400d844 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400d602:	429a      	cmp	r2, r3
3400d604:	d142      	bne.n	3400d68c <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400d606:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d60a:	6a1b      	ldr	r3, [r3, #32]
3400d60c:	2b00      	cmp	r3, #0
3400d60e:	d016      	beq.n	3400d63e <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400d610:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d614:	6a1b      	ldr	r3, [r3, #32]
3400d616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d61a:	d010      	beq.n	3400d63e <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400d61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d620:	6a1b      	ldr	r3, [r3, #32]
3400d622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d626:	d00a      	beq.n	3400d63e <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400d628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d62c:	6a1b      	ldr	r3, [r3, #32]
3400d62e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d632:	d004      	beq.n	3400d63e <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400d634:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400d638:	4884      	ldr	r0, [pc, #528]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d63a:	f7f3 ffc9 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400d63e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d644:	2b00      	cmp	r3, #0
3400d646:	d005      	beq.n	3400d654 <HAL_RCCEx_PeriphCLKConfig+0x191c>
3400d648:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d64e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d652:	d904      	bls.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x1926>
3400d654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400d658:	487c      	ldr	r0, [pc, #496]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d65a:	f7f3 ffb9 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400d65e:	4b7c      	ldr	r3, [pc, #496]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d660:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400d664:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d668:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d66c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d670:	6a1a      	ldr	r2, [r3, #32]
3400d672:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d678:	3b01      	subs	r3, #1
3400d67a:	041b      	lsls	r3, r3, #16
3400d67c:	4313      	orrs	r3, r2
3400d67e:	4a74      	ldr	r2, [pc, #464]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d680:	430b      	orrs	r3, r1
3400d682:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d686:	f7fd ff75 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d68a:	e052      	b.n	3400d732 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3400d68c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d690:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d694:	4b6c      	ldr	r3, [pc, #432]	@ (3400d848 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400d696:	429a      	cmp	r2, r3
3400d698:	d142      	bne.n	3400d720 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400d69a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d6a0:	2b00      	cmp	r3, #0
3400d6a2:	d016      	beq.n	3400d6d2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400d6a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d6aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d6ae:	d010      	beq.n	3400d6d2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400d6b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d6b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d6ba:	d00a      	beq.n	3400d6d2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400d6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d6c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d6c6:	d004      	beq.n	3400d6d2 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400d6c8:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400d6cc:	485f      	ldr	r0, [pc, #380]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d6ce:	f7f3 ff7f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400d6d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d6d8:	2b00      	cmp	r3, #0
3400d6da:	d005      	beq.n	3400d6e8 <HAL_RCCEx_PeriphCLKConfig+0x19b0>
3400d6dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d6e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d6e6:	d904      	bls.n	3400d6f2 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
3400d6e8:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400d6ec:	4857      	ldr	r0, [pc, #348]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d6ee:	f7f3 ff6f 	bl	340015d0 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400d6f2:	4b57      	ldr	r3, [pc, #348]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d6f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400d6f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d6fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d700:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400d706:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d70c:	3b01      	subs	r3, #1
3400d70e:	041b      	lsls	r3, r3, #16
3400d710:	4313      	orrs	r3, r2
3400d712:	4a4f      	ldr	r2, [pc, #316]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d714:	430b      	orrs	r3, r1
3400d716:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400d71a:	f7fd ff6b 	bl	3400b5f4 <LL_RCC_IC5_Enable>
3400d71e:	e008      	b.n	3400d732 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400d720:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d724:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400d728:	4b45      	ldr	r3, [pc, #276]	@ (3400d840 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400d72a:	429a      	cmp	r2, r3
3400d72c:	d101      	bne.n	3400d732 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
3400d72e:	f7fe fae1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3400d732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d736:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3400d73a:	4618      	mov	r0, r3
3400d73c:	f7fd fa51 	bl	3400abe2 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400d740:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d744:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d748:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400d74c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3400d750:	2300      	movs	r3, #0
3400d752:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3400d756:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3400d75a:	4603      	mov	r3, r0
3400d75c:	460a      	mov	r2, r1
3400d75e:	4313      	orrs	r3, r2
3400d760:	f000 80da 	beq.w	3400d918 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400d764:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d768:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d76c:	4b39      	ldr	r3, [pc, #228]	@ (3400d854 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
3400d76e:	429a      	cmp	r2, r3
3400d770:	d019      	beq.n	3400d7a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400d772:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d776:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d77a:	4b37      	ldr	r3, [pc, #220]	@ (3400d858 <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
3400d77c:	429a      	cmp	r2, r3
3400d77e:	d012      	beq.n	3400d7a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400d780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d784:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d788:	4b34      	ldr	r3, [pc, #208]	@ (3400d85c <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400d78a:	429a      	cmp	r2, r3
3400d78c:	d00b      	beq.n	3400d7a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400d78e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d792:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d796:	4b32      	ldr	r3, [pc, #200]	@ (3400d860 <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
3400d798:	429a      	cmp	r2, r3
3400d79a:	d004      	beq.n	3400d7a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400d79c:	f240 2105 	movw	r1, #517	@ 0x205
3400d7a0:	482a      	ldr	r0, [pc, #168]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d7a2:	f7f3 ff15 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400d7a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7aa:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d7ae:	4b2b      	ldr	r3, [pc, #172]	@ (3400d85c <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400d7b0:	429a      	cmp	r2, r3
3400d7b2:	d157      	bne.n	3400d864 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400d7b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7b8:	6a1b      	ldr	r3, [r3, #32]
3400d7ba:	2b00      	cmp	r3, #0
3400d7bc:	d016      	beq.n	3400d7ec <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400d7be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7c2:	6a1b      	ldr	r3, [r3, #32]
3400d7c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d7c8:	d010      	beq.n	3400d7ec <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400d7ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ce:	6a1b      	ldr	r3, [r3, #32]
3400d7d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d7d4:	d00a      	beq.n	3400d7ec <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400d7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7da:	6a1b      	ldr	r3, [r3, #32]
3400d7dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d7e0:	d004      	beq.n	3400d7ec <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400d7e2:	f240 210a 	movw	r1, #522	@ 0x20a
3400d7e6:	4819      	ldr	r0, [pc, #100]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d7e8:	f7f3 fef2 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400d7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d7f2:	2b00      	cmp	r3, #0
3400d7f4:	d005      	beq.n	3400d802 <HAL_RCCEx_PeriphCLKConfig+0x1aca>
3400d7f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d7fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d800:	d904      	bls.n	3400d80c <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
3400d802:	f240 210b 	movw	r1, #523	@ 0x20b
3400d806:	4811      	ldr	r0, [pc, #68]	@ (3400d84c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400d808:	f7f3 fee2 	bl	340015d0 <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400d80c:	4b10      	ldr	r3, [pc, #64]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d80e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400d812:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d816:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d81a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d81e:	6a1a      	ldr	r2, [r3, #32]
3400d820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400d826:	3b01      	subs	r3, #1
3400d828:	041b      	lsls	r3, r3, #16
3400d82a:	4313      	orrs	r3, r2
3400d82c:	4a08      	ldr	r2, [pc, #32]	@ (3400d850 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400d82e:	430b      	orrs	r3, r1
3400d830:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400d834:	f7fd fe9e 	bl	3400b574 <LL_RCC_IC4_Enable>
3400d838:	e067      	b.n	3400d90a <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
3400d83a:	bf00      	nop
3400d83c:	0300001c 	.word	0x0300001c
3400d840:	0301001c 	.word	0x0301001c
3400d844:	0302001c 	.word	0x0302001c
3400d848:	0303001c 	.word	0x0303001c
3400d84c:	3401d6f8 	.word	0x3401d6f8
3400d850:	56028000 	.word	0x56028000
3400d854:	0300041c 	.word	0x0300041c
3400d858:	0301041c 	.word	0x0301041c
3400d85c:	0302041c 	.word	0x0302041c
3400d860:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400d864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d868:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d86c:	4ba0      	ldr	r3, [pc, #640]	@ (3400daf0 <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
3400d86e:	429a      	cmp	r2, r3
3400d870:	d142      	bne.n	3400d8f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400d872:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d878:	2b00      	cmp	r3, #0
3400d87a:	d016      	beq.n	3400d8aa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400d87c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d886:	d010      	beq.n	3400d8aa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400d888:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d88e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d892:	d00a      	beq.n	3400d8aa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400d894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400d89a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d89e:	d004      	beq.n	3400d8aa <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400d8a0:	f240 2117 	movw	r1, #535	@ 0x217
3400d8a4:	4893      	ldr	r0, [pc, #588]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400d8a6:	f7f3 fe93 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400d8aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d8b0:	2b00      	cmp	r3, #0
3400d8b2:	d005      	beq.n	3400d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
3400d8b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d8be:	d904      	bls.n	3400d8ca <HAL_RCCEx_PeriphCLKConfig+0x1b92>
3400d8c0:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400d8c4:	488b      	ldr	r0, [pc, #556]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400d8c6:	f7f3 fe83 	bl	340015d0 <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400d8ca:	4b8b      	ldr	r3, [pc, #556]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400d8cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400d8d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d8d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d8d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400d8de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400d8e4:	3b01      	subs	r3, #1
3400d8e6:	041b      	lsls	r3, r3, #16
3400d8e8:	4313      	orrs	r3, r2
3400d8ea:	4a83      	ldr	r2, [pc, #524]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400d8ec:	430b      	orrs	r3, r1
3400d8ee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400d8f2:	f7fd fe7f 	bl	3400b5f4 <LL_RCC_IC5_Enable>
3400d8f6:	e008      	b.n	3400d90a <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400d8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8fc:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400d900:	4b7e      	ldr	r3, [pc, #504]	@ (3400dafc <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
3400d902:	429a      	cmp	r2, r3
3400d904:	d101      	bne.n	3400d90a <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
3400d906:	f7fe f9f5 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3400d90a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d90e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3400d912:	4618      	mov	r0, r3
3400d914:	f7fd f965 	bl	3400abe2 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400d918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d920:	f002 0301 	and.w	r3, r2, #1
3400d924:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3400d928:	2300      	movs	r3, #0
3400d92a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3400d92e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3400d932:	4603      	mov	r3, r0
3400d934:	460a      	mov	r2, r1
3400d936:	4313      	orrs	r3, r2
3400d938:	f000 8100 	beq.w	3400db3c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400d93c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d940:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d944:	2b00      	cmp	r3, #0
3400d946:	d02e      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d948:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d94c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d950:	2b10      	cmp	r3, #16
3400d952:	d028      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d958:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d95c:	2b20      	cmp	r3, #32
3400d95e:	d022      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d960:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d964:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d968:	2b30      	cmp	r3, #48	@ 0x30
3400d96a:	d01c      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d96c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d970:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d974:	2b40      	cmp	r3, #64	@ 0x40
3400d976:	d016      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d978:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d97c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d980:	2b50      	cmp	r3, #80	@ 0x50
3400d982:	d010      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d984:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d988:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d98c:	2b60      	cmp	r3, #96	@ 0x60
3400d98e:	d00a      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d994:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d998:	2b70      	cmp	r3, #112	@ 0x70
3400d99a:	d004      	beq.n	3400d9a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400d99c:	f240 2132 	movw	r1, #562	@ 0x232
3400d9a0:	4854      	ldr	r0, [pc, #336]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400d9a2:	f7f3 fe15 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400d9a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400d9ae:	2b00      	cmp	r3, #0
3400d9b0:	d006      	beq.n	3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
3400d9b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400d9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d9be:	d904      	bls.n	3400d9ca <HAL_RCCEx_PeriphCLKConfig+0x1c92>
3400d9c0:	f240 2133 	movw	r1, #563	@ 0x233
3400d9c4:	484b      	ldr	r0, [pc, #300]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400d9c6:	f7f3 fe03 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400d9ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400d9d2:	2b20      	cmp	r3, #32
3400d9d4:	d142      	bne.n	3400da5c <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d9d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d9dc:	2b00      	cmp	r3, #0
3400d9de:	d016      	beq.n	3400da0e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400d9e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d9e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d9ea:	d010      	beq.n	3400da0e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400d9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d9f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d9f6:	d00a      	beq.n	3400da0e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400d9f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d9fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400da02:	d004      	beq.n	3400da0e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400da04:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400da08:	483a      	ldr	r0, [pc, #232]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400da0a:	f7f3 fde1 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400da0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400da14:	2b00      	cmp	r3, #0
3400da16:	d005      	beq.n	3400da24 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
3400da18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400da1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400da22:	d904      	bls.n	3400da2e <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
3400da24:	f240 2139 	movw	r1, #569	@ 0x239
3400da28:	4832      	ldr	r0, [pc, #200]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400da2a:	f7f3 fdd1 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400da2e:	4b32      	ldr	r3, [pc, #200]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400da30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400da34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400da38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400da3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400da42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400da48:	3b01      	subs	r3, #1
3400da4a:	041b      	lsls	r3, r3, #16
3400da4c:	4313      	orrs	r3, r2
3400da4e:	4a2a      	ldr	r2, [pc, #168]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400da50:	430b      	orrs	r3, r1
3400da52:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400da56:	f7fd fe0d 	bl	3400b674 <LL_RCC_IC7_Enable>
3400da5a:	e059      	b.n	3400db10 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3400da5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400da64:	2b30      	cmp	r3, #48	@ 0x30
3400da66:	d14b      	bne.n	3400db00 <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400da68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da6e:	2b00      	cmp	r3, #0
3400da70:	d016      	beq.n	3400daa0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400da72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400da7c:	d010      	beq.n	3400daa0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400da7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400da88:	d00a      	beq.n	3400daa0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400da8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400da94:	d004      	beq.n	3400daa0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400da96:	f240 2145 	movw	r1, #581	@ 0x245
3400da9a:	4816      	ldr	r0, [pc, #88]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400da9c:	f7f3 fd98 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400daa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400daa6:	2b00      	cmp	r3, #0
3400daa8:	d005      	beq.n	3400dab6 <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3400daaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dab4:	d904      	bls.n	3400dac0 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3400dab6:	f240 2146 	movw	r1, #582	@ 0x246
3400daba:	480e      	ldr	r0, [pc, #56]	@ (3400daf4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400dabc:	f7f3 fd88 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dac0:	4b0d      	ldr	r3, [pc, #52]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400dac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dac6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400daca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dace:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dada:	3b01      	subs	r3, #1
3400dadc:	041b      	lsls	r3, r3, #16
3400dade:	4313      	orrs	r3, r2
3400dae0:	4a05      	ldr	r2, [pc, #20]	@ (3400daf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400dae2:	430b      	orrs	r3, r1
3400dae4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dae8:	f7fd fe04 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3400daec:	e010      	b.n	3400db10 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
3400daee:	bf00      	nop
3400daf0:	0303041c 	.word	0x0303041c
3400daf4:	3401d6f8 	.word	0x3401d6f8
3400daf8:	56028000 	.word	0x56028000
3400dafc:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400db00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400db08:	2b10      	cmp	r3, #16
3400db0a:	d101      	bne.n	3400db10 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
3400db0c:	f7fe f8f2 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400db10:	4b77      	ldr	r3, [pc, #476]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400db12:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400db16:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3400db1a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3400db1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400db26:	3b01      	subs	r3, #1
3400db28:	021a      	lsls	r2, r3, #8
3400db2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400db32:	4313      	orrs	r3, r2
3400db34:	4a6e      	ldr	r2, [pc, #440]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400db36:	430b      	orrs	r3, r1
3400db38:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400db3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db40:	e9d3 2300 	ldrd	r2, r3, [r3]
3400db44:	f002 0302 	and.w	r3, r2, #2
3400db48:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3400db4c:	2300      	movs	r3, #0
3400db4e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3400db52:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3400db56:	4603      	mov	r3, r0
3400db58:	460a      	mov	r2, r1
3400db5a:	4313      	orrs	r3, r2
3400db5c:	f000 80db 	beq.w	3400dd16 <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400db60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400db68:	2b00      	cmp	r3, #0
3400db6a:	d02e      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400db6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400db74:	2b01      	cmp	r3, #1
3400db76:	d028      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400db78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400db80:	2b02      	cmp	r3, #2
3400db82:	d022      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400db84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400db8c:	2b03      	cmp	r3, #3
3400db8e:	d01c      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400db90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400db98:	2b04      	cmp	r3, #4
3400db9a:	d016      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400db9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dba0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dba4:	2b05      	cmp	r3, #5
3400dba6:	d010      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400dba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dbb0:	2b06      	cmp	r3, #6
3400dbb2:	d00a      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400dbb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dbbc:	2b07      	cmp	r3, #7
3400dbbe:	d004      	beq.n	3400dbca <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400dbc0:	f240 2161 	movw	r1, #609	@ 0x261
3400dbc4:	484b      	ldr	r0, [pc, #300]	@ (3400dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400dbc6:	f7f3 fd03 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400dbca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dbd2:	2b02      	cmp	r3, #2
3400dbd4:	d142      	bne.n	3400dc5c <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400dbd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dbdc:	2b00      	cmp	r3, #0
3400dbde:	d016      	beq.n	3400dc0e <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400dbe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dbe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dbea:	d010      	beq.n	3400dc0e <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400dbec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dbf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dbf6:	d00a      	beq.n	3400dc0e <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400dbf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dbfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dc02:	d004      	beq.n	3400dc0e <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400dc04:	f240 2166 	movw	r1, #614	@ 0x266
3400dc08:	483a      	ldr	r0, [pc, #232]	@ (3400dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400dc0a:	f7f3 fce1 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400dc0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dc14:	2b00      	cmp	r3, #0
3400dc16:	d005      	beq.n	3400dc24 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
3400dc18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dc1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dc22:	d904      	bls.n	3400dc2e <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
3400dc24:	f240 2167 	movw	r1, #615	@ 0x267
3400dc28:	4832      	ldr	r0, [pc, #200]	@ (3400dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400dc2a:	f7f3 fcd1 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400dc2e:	4b30      	ldr	r3, [pc, #192]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400dc30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400dc34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dc38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dc3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400dc42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dc48:	3b01      	subs	r3, #1
3400dc4a:	041b      	lsls	r3, r3, #16
3400dc4c:	4313      	orrs	r3, r2
3400dc4e:	4a28      	ldr	r2, [pc, #160]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400dc50:	430b      	orrs	r3, r1
3400dc52:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400dc56:	f7fd fd0d 	bl	3400b674 <LL_RCC_IC7_Enable>
3400dc5a:	e055      	b.n	3400dd08 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400dc5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dc64:	2b03      	cmp	r3, #3
3400dc66:	d147      	bne.n	3400dcf8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dc68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc6e:	2b00      	cmp	r3, #0
3400dc70:	d016      	beq.n	3400dca0 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400dc72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dc7c:	d010      	beq.n	3400dca0 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400dc7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dc88:	d00a      	beq.n	3400dca0 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400dc8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dc94:	d004      	beq.n	3400dca0 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400dc96:	f240 2173 	movw	r1, #627	@ 0x273
3400dc9a:	4816      	ldr	r0, [pc, #88]	@ (3400dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400dc9c:	f7f3 fc98 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dca0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dca6:	2b00      	cmp	r3, #0
3400dca8:	d005      	beq.n	3400dcb6 <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3400dcaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dcb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dcb4:	d904      	bls.n	3400dcc0 <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3400dcb6:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400dcba:	480e      	ldr	r0, [pc, #56]	@ (3400dcf4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400dcbc:	f7f3 fc88 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dcc0:	4b0b      	ldr	r3, [pc, #44]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400dcc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dcc6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dcca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dcce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dcd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dcda:	3b01      	subs	r3, #1
3400dcdc:	041b      	lsls	r3, r3, #16
3400dcde:	4313      	orrs	r3, r2
3400dce0:	4a03      	ldr	r2, [pc, #12]	@ (3400dcf0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400dce2:	430b      	orrs	r3, r1
3400dce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dce8:	f7fd fd04 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3400dcec:	e00c      	b.n	3400dd08 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
3400dcee:	bf00      	nop
3400dcf0:	56028000 	.word	0x56028000
3400dcf4:	3401d6f8 	.word	0x3401d6f8
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400dcf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dd00:	2b01      	cmp	r3, #1
3400dd02:	d101      	bne.n	3400dd08 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
3400dd04:	f7fd fff6 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3400dd08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400dd10:	4618      	mov	r0, r3
3400dd12:	f7fc fdf7 	bl	3400a904 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400dd16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400dd1e:	f002 0308 	and.w	r3, r2, #8
3400dd22:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3400dd26:	2300      	movs	r3, #0
3400dd28:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3400dd2c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3400dd30:	4603      	mov	r3, r0
3400dd32:	460a      	mov	r2, r1
3400dd34:	4313      	orrs	r3, r2
3400dd36:	d049      	beq.n	3400ddcc <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
3400dd38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400dd40:	2b00      	cmp	r3, #0
3400dd42:	d019      	beq.n	3400dd78 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400dd44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400dd4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dd50:	d012      	beq.n	3400dd78 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400dd52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400dd5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dd5e:	d00b      	beq.n	3400dd78 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400dd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400dd68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dd6c:	d004      	beq.n	3400dd78 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400dd6e:	f240 218e 	movw	r1, #654	@ 0x28e
3400dd72:	489e      	ldr	r0, [pc, #632]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400dd74:	f7f3 fc2c 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400dd78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400dd80:	2b00      	cmp	r3, #0
3400dd82:	d006      	beq.n	3400dd92 <HAL_RCCEx_PeriphCLKConfig+0x205a>
3400dd84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400dd8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dd90:	d904      	bls.n	3400dd9c <HAL_RCCEx_PeriphCLKConfig+0x2064>
3400dd92:	f240 218f 	movw	r1, #655	@ 0x28f
3400dd96:	4895      	ldr	r0, [pc, #596]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400dd98:	f7f3 fc1a 	bl	340015d0 <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400dd9c:	4b94      	ldr	r3, [pc, #592]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400dd9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400dda2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dda6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ddaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400ddb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ddba:	3b01      	subs	r3, #1
3400ddbc:	041b      	lsls	r3, r3, #16
3400ddbe:	4313      	orrs	r3, r2
3400ddc0:	4a8b      	ldr	r2, [pc, #556]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ddc2:	430b      	orrs	r3, r1
3400ddc4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3400ddc8:	f7fd fed4 	bl	3400bb74 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400ddcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ddd4:	f002 0310 	and.w	r3, r2, #16
3400ddd8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3400dddc:	2300      	movs	r3, #0
3400ddde:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3400dde2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3400dde6:	4603      	mov	r3, r0
3400dde8:	460a      	mov	r2, r1
3400ddea:	4313      	orrs	r3, r2
3400ddec:	f000 8082 	beq.w	3400def4 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400ddf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddf4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400ddf8:	2b00      	cmp	r3, #0
3400ddfa:	d019      	beq.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400ddfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de00:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400de04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400de08:	d012      	beq.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400de0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400de12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400de16:	d00b      	beq.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400de18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de1c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400de20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400de24:	d004      	beq.n	3400de30 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400de26:	f240 219d 	movw	r1, #669	@ 0x29d
3400de2a:	4870      	ldr	r0, [pc, #448]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400de2c:	f7f3 fbd0 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400de30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de34:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400de38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400de3c:	d14a      	bne.n	3400ded4 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
3400de3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400de46:	2b00      	cmp	r3, #0
3400de48:	d019      	beq.n	3400de7e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400de4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400de52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400de56:	d012      	beq.n	3400de7e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400de58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400de60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400de64:	d00b      	beq.n	3400de7e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400de66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400de6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400de72:	d004      	beq.n	3400de7e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400de74:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400de78:	485c      	ldr	r0, [pc, #368]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400de7a:	f7f3 fba9 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
3400de7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400de86:	2b00      	cmp	r3, #0
3400de88:	d006      	beq.n	3400de98 <HAL_RCCEx_PeriphCLKConfig+0x2160>
3400de8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400de92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400de96:	d904      	bls.n	3400dea2 <HAL_RCCEx_PeriphCLKConfig+0x216a>
3400de98:	f240 21a3 	movw	r1, #675	@ 0x2a3
3400de9c:	4853      	ldr	r0, [pc, #332]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400de9e:	f7f3 fb97 	bl	340015d0 <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3400dea2:	4b53      	ldr	r3, [pc, #332]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400dea4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400dea8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400deac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400deb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400deb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400debc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400dec0:	3b01      	subs	r3, #1
3400dec2:	041b      	lsls	r3, r3, #16
3400dec4:	4313      	orrs	r3, r2
3400dec6:	4a4a      	ldr	r2, [pc, #296]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400dec8:	430b      	orrs	r3, r1
3400deca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3400dece:	f7fd fe11 	bl	3400baf4 <LL_RCC_IC17_Enable>
3400ded2:	e008      	b.n	3400dee6 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400ded4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ded8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400dedc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400dee0:	d101      	bne.n	3400dee6 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
3400dee2:	f7fd ff07 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3400dee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400deee:	4618      	mov	r0, r3
3400def0:	f7fc fd34 	bl	3400a95c <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400def4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400def8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400defc:	f002 0320 	and.w	r3, r2, #32
3400df00:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3400df04:	2300      	movs	r3, #0
3400df06:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3400df0a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3400df0e:	4603      	mov	r3, r0
3400df10:	460a      	mov	r2, r1
3400df12:	4313      	orrs	r3, r2
3400df14:	d07e      	beq.n	3400e014 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400df16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df1a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400df1e:	2b00      	cmp	r3, #0
3400df20:	d019      	beq.n	3400df56 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400df22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400df2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400df2e:	d012      	beq.n	3400df56 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400df30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400df38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400df3c:	d00b      	beq.n	3400df56 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400df3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400df46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400df4a:	d004      	beq.n	3400df56 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400df4c:	f240 21bd 	movw	r1, #701	@ 0x2bd
3400df50:	4826      	ldr	r0, [pc, #152]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400df52:	f7f3 fb3d 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400df56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df5a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400df5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400df62:	d147      	bne.n	3400dff4 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400df64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400df6a:	2b00      	cmp	r3, #0
3400df6c:	d016      	beq.n	3400df9c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400df6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400df74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400df78:	d010      	beq.n	3400df9c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400df7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400df80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400df84:	d00a      	beq.n	3400df9c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400df86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400df8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400df90:	d004      	beq.n	3400df9c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400df92:	f240 21c2 	movw	r1, #706	@ 0x2c2
3400df96:	4815      	ldr	r0, [pc, #84]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400df98:	f7f3 fb1a 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
3400df9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400dfa2:	2b00      	cmp	r3, #0
3400dfa4:	d005      	beq.n	3400dfb2 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400dfa6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400dfac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dfb0:	d904      	bls.n	3400dfbc <HAL_RCCEx_PeriphCLKConfig+0x2284>
3400dfb2:	f240 21c3 	movw	r1, #707	@ 0x2c3
3400dfb6:	480d      	ldr	r0, [pc, #52]	@ (3400dfec <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400dfb8:	f7f3 fb0a 	bl	340015d0 <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400dfbc:	4b0c      	ldr	r3, [pc, #48]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400dfbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400dfc2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dfc6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dfca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3400dfd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400dfd6:	3b01      	subs	r3, #1
3400dfd8:	041b      	lsls	r3, r3, #16
3400dfda:	4313      	orrs	r3, r2
3400dfdc:	4a04      	ldr	r2, [pc, #16]	@ (3400dff0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400dfde:	430b      	orrs	r3, r1
3400dfe0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3400dfe4:	f7fd fc46 	bl	3400b874 <LL_RCC_IC12_Enable>
3400dfe8:	e00d      	b.n	3400e006 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
3400dfea:	bf00      	nop
3400dfec:	3401d6f8 	.word	0x3401d6f8
3400dff0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400dff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dff8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400dffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400e000:	d101      	bne.n	3400e006 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
3400e002:	f7fd fe77 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3400e006:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e00a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400e00e:	4618      	mov	r0, r3
3400e010:	f7fc fcba 	bl	3400a988 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400e014:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e018:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e01c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400e020:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3400e024:	2300      	movs	r3, #0
3400e026:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3400e02a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3400e02e:	4603      	mov	r3, r0
3400e030:	460a      	mov	r2, r1
3400e032:	4313      	orrs	r3, r2
3400e034:	d01f      	beq.n	3400e076 <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400e036:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e03a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400e03e:	2b00      	cmp	r3, #0
3400e040:	d012      	beq.n	3400e068 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400e042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e046:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400e04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400e04e:	d00b      	beq.n	3400e068 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400e050:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e054:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400e058:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400e05c:	d004      	beq.n	3400e068 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400e05e:	f240 21dd 	movw	r1, #733	@ 0x2dd
3400e062:	48c1      	ldr	r0, [pc, #772]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e064:	f7f3 fab4 	bl	340015d0 <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3400e068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e06c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400e070:	4618      	mov	r0, r3
3400e072:	f7fc fc9f 	bl	3400a9b4 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3400e076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e07e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400e082:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3400e086:	2300      	movs	r3, #0
3400e088:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3400e08c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3400e090:	4603      	mov	r3, r0
3400e092:	460a      	mov	r2, r1
3400e094:	4313      	orrs	r3, r2
3400e096:	d018      	beq.n	3400e0ca <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3400e098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e09c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400e0a0:	2b00      	cmp	r3, #0
3400e0a2:	d00b      	beq.n	3400e0bc <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400e0a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400e0ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400e0b0:	d004      	beq.n	3400e0bc <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400e0b2:	f240 21e7 	movw	r1, #743	@ 0x2e7
3400e0b6:	48ac      	ldr	r0, [pc, #688]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e0b8:	f7f3 fa8a 	bl	340015d0 <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3400e0bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400e0c4:	4618      	mov	r0, r3
3400e0c6:	f7fc fc99 	bl	3400a9fc <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400e0ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e0d2:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400e0d6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3400e0da:	2300      	movs	r3, #0
3400e0dc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3400e0e0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3400e0e4:	4603      	mov	r3, r0
3400e0e6:	460a      	mov	r2, r1
3400e0e8:	4313      	orrs	r3, r2
3400e0ea:	d018      	beq.n	3400e11e <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
3400e0ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400e0f4:	2b00      	cmp	r3, #0
3400e0f6:	d00b      	beq.n	3400e110 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400e0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400e100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400e104:	d004      	beq.n	3400e110 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400e106:	f240 21f1 	movw	r1, #753	@ 0x2f1
3400e10a:	4897      	ldr	r0, [pc, #604]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e10c:	f7f3 fa60 	bl	340015d0 <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3400e110:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400e118:	4618      	mov	r0, r3
3400e11a:	f7fc fc85 	bl	3400aa28 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400e11e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e122:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e126:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400e12a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3400e12e:	2300      	movs	r3, #0
3400e130:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3400e134:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400e138:	4603      	mov	r3, r0
3400e13a:	460a      	mov	r2, r1
3400e13c:	4313      	orrs	r3, r2
3400e13e:	f000 8093 	beq.w	3400e268 <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
3400e142:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e146:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e14a:	2b00      	cmp	r3, #0
3400e14c:	d016      	beq.n	3400e17c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400e14e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e156:	2b01      	cmp	r3, #1
3400e158:	d010      	beq.n	3400e17c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400e15a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e15e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e162:	2b02      	cmp	r3, #2
3400e164:	d00a      	beq.n	3400e17c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400e166:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e16a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e16e:	2b03      	cmp	r3, #3
3400e170:	d004      	beq.n	3400e17c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400e172:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400e176:	487c      	ldr	r0, [pc, #496]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e178:	f7f3 fa2a 	bl	340015d0 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
3400e17c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e184:	2b00      	cmp	r3, #0
3400e186:	d005      	beq.n	3400e194 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3400e188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e18c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e190:	2b10      	cmp	r3, #16
3400e192:	d904      	bls.n	3400e19e <HAL_RCCEx_PeriphCLKConfig+0x2466>
3400e194:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3400e198:	4873      	ldr	r0, [pc, #460]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e19a:	f7f3 fa19 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3400e19e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e1a6:	2b02      	cmp	r3, #2
3400e1a8:	d142      	bne.n	3400e230 <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3400e1aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400e1b0:	2b00      	cmp	r3, #0
3400e1b2:	d016      	beq.n	3400e1e2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400e1b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400e1ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e1be:	d010      	beq.n	3400e1e2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400e1c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400e1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e1ca:	d00a      	beq.n	3400e1e2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400e1cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400e1d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e1d6:	d004      	beq.n	3400e1e2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400e1d8:	f240 3101 	movw	r1, #769	@ 0x301
3400e1dc:	4862      	ldr	r0, [pc, #392]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e1de:	f7f3 f9f7 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3400e1e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400e1e8:	2b00      	cmp	r3, #0
3400e1ea:	d005      	beq.n	3400e1f8 <HAL_RCCEx_PeriphCLKConfig+0x24c0>
3400e1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400e1f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e1f6:	d904      	bls.n	3400e202 <HAL_RCCEx_PeriphCLKConfig+0x24ca>
3400e1f8:	f240 3102 	movw	r1, #770	@ 0x302
3400e1fc:	485a      	ldr	r0, [pc, #360]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e1fe:	f7f3 f9e7 	bl	340015d0 <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400e202:	4b5a      	ldr	r3, [pc, #360]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400e208:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e20c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e210:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e214:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3400e216:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400e21c:	3b01      	subs	r3, #1
3400e21e:	041b      	lsls	r3, r3, #16
3400e220:	4313      	orrs	r3, r2
3400e222:	4a52      	ldr	r2, [pc, #328]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e224:	430b      	orrs	r3, r1
3400e226:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3400e22a:	f7fd fb63 	bl	3400b8f4 <LL_RCC_IC13_Enable>
3400e22e:	e007      	b.n	3400e240 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400e230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e238:	2b01      	cmp	r3, #1
3400e23a:	d101      	bne.n	3400e240 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
3400e23c:	f7fd fd5a 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400e240:	4b4a      	ldr	r3, [pc, #296]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e242:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400e246:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3400e24a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e24e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e252:	3b01      	subs	r3, #1
3400e254:	011a      	lsls	r2, r3, #4
3400e256:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e25a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400e25e:	4313      	orrs	r3, r2
3400e260:	4a42      	ldr	r2, [pc, #264]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e262:	430b      	orrs	r3, r1
3400e264:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3400e268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e270:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400e274:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3400e278:	2300      	movs	r3, #0
3400e27a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3400e27e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3400e282:	4603      	mov	r3, r0
3400e284:	460a      	mov	r2, r1
3400e286:	4313      	orrs	r3, r2
3400e288:	f000 8081 	beq.w	3400e38e <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3400e28c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e294:	2b00      	cmp	r3, #0
3400e296:	d016      	beq.n	3400e2c6 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400e298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e29c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e2a0:	2b01      	cmp	r3, #1
3400e2a2:	d010      	beq.n	3400e2c6 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400e2a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e2ac:	2b02      	cmp	r3, #2
3400e2ae:	d00a      	beq.n	3400e2c6 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400e2b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e2b8:	2b03      	cmp	r3, #3
3400e2ba:	d004      	beq.n	3400e2c6 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400e2bc:	f240 311d 	movw	r1, #797	@ 0x31d
3400e2c0:	4829      	ldr	r0, [pc, #164]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e2c2:	f7f3 f985 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3400e2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e2ce:	2b02      	cmp	r3, #2
3400e2d0:	d14e      	bne.n	3400e370 <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400e2d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400e2da:	2b00      	cmp	r3, #0
3400e2dc:	d019      	beq.n	3400e312 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400e2de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400e2e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e2ea:	d012      	beq.n	3400e312 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400e2ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400e2f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e2f8:	d00b      	beq.n	3400e312 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400e2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400e302:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e306:	d004      	beq.n	3400e312 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400e308:	f240 3122 	movw	r1, #802	@ 0x322
3400e30c:	4816      	ldr	r0, [pc, #88]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e30e:	f7f3 f95f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400e312:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400e31a:	2b00      	cmp	r3, #0
3400e31c:	d006      	beq.n	3400e32c <HAL_RCCEx_PeriphCLKConfig+0x25f4>
3400e31e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400e326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e32a:	d904      	bls.n	3400e336 <HAL_RCCEx_PeriphCLKConfig+0x25fe>
3400e32c:	f240 3123 	movw	r1, #803	@ 0x323
3400e330:	480d      	ldr	r0, [pc, #52]	@ (3400e368 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400e332:	f7f3 f94d 	bl	340015d0 <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400e336:	4b0d      	ldr	r3, [pc, #52]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e338:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400e33c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e340:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e348:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400e34c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400e354:	3b01      	subs	r3, #1
3400e356:	041b      	lsls	r3, r3, #16
3400e358:	4313      	orrs	r3, r2
3400e35a:	4a04      	ldr	r2, [pc, #16]	@ (3400e36c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400e35c:	430b      	orrs	r3, r1
3400e35e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400e362:	f7fd fc47 	bl	3400bbf4 <LL_RCC_IC19_Enable>
3400e366:	e00b      	b.n	3400e380 <HAL_RCCEx_PeriphCLKConfig+0x2648>
3400e368:	3401d6f8 	.word	0x3401d6f8
3400e36c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400e370:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e378:	2b01      	cmp	r3, #1
3400e37a:	d101      	bne.n	3400e380 <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
3400e37c:	f7fd fcba 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3400e380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e388:	4618      	mov	r0, r3
3400e38a:	f7fc fb63 	bl	3400aa54 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3400e38e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e392:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e396:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400e39a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3400e39e:	2300      	movs	r3, #0
3400e3a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3400e3a4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400e3a8:	4603      	mov	r3, r0
3400e3aa:	460a      	mov	r2, r1
3400e3ac:	4313      	orrs	r3, r2
3400e3ae:	f000 80d3 	beq.w	3400e558 <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3400e3b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e3ba:	4bad      	ldr	r3, [pc, #692]	@ (3400e670 <HAL_RCCEx_PeriphCLKConfig+0x2938>)
3400e3bc:	429a      	cmp	r2, r3
3400e3be:	d027      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e3c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e3c8:	4baa      	ldr	r3, [pc, #680]	@ (3400e674 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400e3ca:	429a      	cmp	r2, r3
3400e3cc:	d020      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e3ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3d2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e3d6:	4ba8      	ldr	r3, [pc, #672]	@ (3400e678 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400e3d8:	429a      	cmp	r2, r3
3400e3da:	d019      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e3dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e3e4:	4ba5      	ldr	r3, [pc, #660]	@ (3400e67c <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400e3e6:	429a      	cmp	r2, r3
3400e3e8:	d012      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e3ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e3f2:	4ba3      	ldr	r3, [pc, #652]	@ (3400e680 <HAL_RCCEx_PeriphCLKConfig+0x2948>)
3400e3f4:	429a      	cmp	r2, r3
3400e3f6:	d00b      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e3f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e400:	4ba0      	ldr	r3, [pc, #640]	@ (3400e684 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
3400e402:	429a      	cmp	r2, r3
3400e404:	d004      	beq.n	3400e410 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400e406:	f240 313d 	movw	r1, #829	@ 0x33d
3400e40a:	489f      	ldr	r0, [pc, #636]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e40c:	f7f3 f8e0 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400e410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e414:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e418:	4b97      	ldr	r3, [pc, #604]	@ (3400e678 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400e41a:	429a      	cmp	r2, r3
3400e41c:	d142      	bne.n	3400e4a4 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400e41e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e424:	2b00      	cmp	r3, #0
3400e426:	d016      	beq.n	3400e456 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400e428:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e42e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e432:	d010      	beq.n	3400e456 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400e434:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e43a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e43e:	d00a      	beq.n	3400e456 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400e440:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e446:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e44a:	d004      	beq.n	3400e456 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400e44c:	f240 3142 	movw	r1, #834	@ 0x342
3400e450:	488d      	ldr	r0, [pc, #564]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e452:	f7f3 f8bd 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400e456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e45c:	2b00      	cmp	r3, #0
3400e45e:	d005      	beq.n	3400e46c <HAL_RCCEx_PeriphCLKConfig+0x2734>
3400e460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e46a:	d904      	bls.n	3400e476 <HAL_RCCEx_PeriphCLKConfig+0x273e>
3400e46c:	f240 3143 	movw	r1, #835	@ 0x343
3400e470:	4885      	ldr	r0, [pc, #532]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e472:	f7f3 f8ad 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400e476:	4b85      	ldr	r3, [pc, #532]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400e47c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e480:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400e48a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e490:	3b01      	subs	r3, #1
3400e492:	041b      	lsls	r3, r3, #16
3400e494:	4313      	orrs	r3, r2
3400e496:	4a7d      	ldr	r2, [pc, #500]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e498:	430b      	orrs	r3, r1
3400e49a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400e49e:	f7fd f9a9 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400e4a2:	e052      	b.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400e4a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e4ac:	4b73      	ldr	r3, [pc, #460]	@ (3400e67c <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400e4ae:	429a      	cmp	r2, r3
3400e4b0:	d142      	bne.n	3400e538 <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400e4b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e4b8:	2b00      	cmp	r3, #0
3400e4ba:	d016      	beq.n	3400e4ea <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400e4bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e4c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e4c6:	d010      	beq.n	3400e4ea <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400e4c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e4ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e4d2:	d00a      	beq.n	3400e4ea <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400e4d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e4da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e4de:	d004      	beq.n	3400e4ea <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400e4e0:	f240 314f 	movw	r1, #847	@ 0x34f
3400e4e4:	4868      	ldr	r0, [pc, #416]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e4e6:	f7f3 f873 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400e4ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e4f0:	2b00      	cmp	r3, #0
3400e4f2:	d005      	beq.n	3400e500 <HAL_RCCEx_PeriphCLKConfig+0x27c8>
3400e4f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e4fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e4fe:	d904      	bls.n	3400e50a <HAL_RCCEx_PeriphCLKConfig+0x27d2>
3400e500:	f44f 7154 	mov.w	r1, #848	@ 0x350
3400e504:	4860      	ldr	r0, [pc, #384]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e506:	f7f3 f863 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400e50a:	4b60      	ldr	r3, [pc, #384]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e50c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400e510:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e514:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e518:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e51c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400e51e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e524:	3b01      	subs	r3, #1
3400e526:	041b      	lsls	r3, r3, #16
3400e528:	4313      	orrs	r3, r2
3400e52a:	4a58      	ldr	r2, [pc, #352]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e52c:	430b      	orrs	r3, r1
3400e52e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400e532:	f7fd fa5f 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400e536:	e008      	b.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400e538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e53c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400e540:	4b4c      	ldr	r3, [pc, #304]	@ (3400e674 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400e542:	429a      	cmp	r2, r3
3400e544:	d101      	bne.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
3400e546:	f7fd fbd5 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3400e54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e54e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400e552:	4618      	mov	r0, r3
3400e554:	f7fc faaa 	bl	3400aaac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3400e558:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e560:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400e564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3400e568:	2300      	movs	r3, #0
3400e56a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3400e56e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3400e572:	4603      	mov	r3, r0
3400e574:	460a      	mov	r2, r1
3400e576:	4313      	orrs	r3, r2
3400e578:	f000 80f0 	beq.w	3400e75c <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400e57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e580:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e584:	4b42      	ldr	r3, [pc, #264]	@ (3400e690 <HAL_RCCEx_PeriphCLKConfig+0x2958>)
3400e586:	429a      	cmp	r2, r3
3400e588:	d027      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e58a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e58e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e592:	4b40      	ldr	r3, [pc, #256]	@ (3400e694 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
3400e594:	429a      	cmp	r2, r3
3400e596:	d020      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e59c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e5a0:	4b3d      	ldr	r3, [pc, #244]	@ (3400e698 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400e5a2:	429a      	cmp	r2, r3
3400e5a4:	d019      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5aa:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e5ae:	4b3b      	ldr	r3, [pc, #236]	@ (3400e69c <HAL_RCCEx_PeriphCLKConfig+0x2964>)
3400e5b0:	429a      	cmp	r2, r3
3400e5b2:	d012      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5b8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e5bc:	4b38      	ldr	r3, [pc, #224]	@ (3400e6a0 <HAL_RCCEx_PeriphCLKConfig+0x2968>)
3400e5be:	429a      	cmp	r2, r3
3400e5c0:	d00b      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e5c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5c6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e5ca:	4b36      	ldr	r3, [pc, #216]	@ (3400e6a4 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
3400e5cc:	429a      	cmp	r2, r3
3400e5ce:	d004      	beq.n	3400e5da <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400e5d0:	f240 316a 	movw	r1, #874	@ 0x36a
3400e5d4:	482c      	ldr	r0, [pc, #176]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e5d6:	f7f2 fffb 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3400e5da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5de:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e5e2:	4b2d      	ldr	r3, [pc, #180]	@ (3400e698 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400e5e4:	429a      	cmp	r2, r3
3400e5e6:	d15f      	bne.n	3400e6a8 <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400e5e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e5ee:	2b00      	cmp	r3, #0
3400e5f0:	d016      	beq.n	3400e620 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400e5f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e5f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e5fc:	d010      	beq.n	3400e620 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400e5fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e608:	d00a      	beq.n	3400e620 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400e60a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e614:	d004      	beq.n	3400e620 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400e616:	f240 316f 	movw	r1, #879	@ 0x36f
3400e61a:	481b      	ldr	r0, [pc, #108]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e61c:	f7f2 ffd8 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400e620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e626:	2b00      	cmp	r3, #0
3400e628:	d005      	beq.n	3400e636 <HAL_RCCEx_PeriphCLKConfig+0x28fe>
3400e62a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e62e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e634:	d904      	bls.n	3400e640 <HAL_RCCEx_PeriphCLKConfig+0x2908>
3400e636:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400e63a:	4813      	ldr	r0, [pc, #76]	@ (3400e688 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400e63c:	f7f2 ffc8 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400e640:	4b12      	ldr	r3, [pc, #72]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e642:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400e646:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e64a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e64e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400e654:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e65a:	3b01      	subs	r3, #1
3400e65c:	041b      	lsls	r3, r3, #16
3400e65e:	4313      	orrs	r3, r2
3400e660:	4a0a      	ldr	r2, [pc, #40]	@ (3400e68c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400e662:	430b      	orrs	r3, r1
3400e664:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400e668:	f7fd f8c4 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400e66c:	e06f      	b.n	3400e74e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
3400e66e:	bf00      	nop
3400e670:	0700000c 	.word	0x0700000c
3400e674:	0701000c 	.word	0x0701000c
3400e678:	0702000c 	.word	0x0702000c
3400e67c:	0703000c 	.word	0x0703000c
3400e680:	0704000c 	.word	0x0704000c
3400e684:	0705000c 	.word	0x0705000c
3400e688:	3401d6f8 	.word	0x3401d6f8
3400e68c:	56028000 	.word	0x56028000
3400e690:	0700040c 	.word	0x0700040c
3400e694:	0701040c 	.word	0x0701040c
3400e698:	0702040c 	.word	0x0702040c
3400e69c:	0703040c 	.word	0x0703040c
3400e6a0:	0704040c 	.word	0x0704040c
3400e6a4:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400e6a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ac:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e6b0:	4b95      	ldr	r3, [pc, #596]	@ (3400e908 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
3400e6b2:	429a      	cmp	r2, r3
3400e6b4:	d142      	bne.n	3400e73c <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400e6b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e6bc:	2b00      	cmp	r3, #0
3400e6be:	d016      	beq.n	3400e6ee <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400e6c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e6c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e6ca:	d010      	beq.n	3400e6ee <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400e6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e6d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e6d6:	d00a      	beq.n	3400e6ee <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400e6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e6de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e6e2:	d004      	beq.n	3400e6ee <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400e6e4:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400e6e8:	4888      	ldr	r0, [pc, #544]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e6ea:	f7f2 ff71 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400e6ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e6f4:	2b00      	cmp	r3, #0
3400e6f6:	d005      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
3400e6f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e702:	d904      	bls.n	3400e70e <HAL_RCCEx_PeriphCLKConfig+0x29d6>
3400e704:	f240 317d 	movw	r1, #893	@ 0x37d
3400e708:	4880      	ldr	r0, [pc, #512]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e70a:	f7f2 ff61 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400e70e:	4b80      	ldr	r3, [pc, #512]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e710:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400e714:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e718:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e720:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400e722:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e728:	3b01      	subs	r3, #1
3400e72a:	041b      	lsls	r3, r3, #16
3400e72c:	4313      	orrs	r3, r2
3400e72e:	4a78      	ldr	r2, [pc, #480]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e730:	430b      	orrs	r3, r1
3400e732:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400e736:	f7fd f95d 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400e73a:	e008      	b.n	3400e74e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400e73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e740:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400e744:	4b73      	ldr	r3, [pc, #460]	@ (3400e914 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
3400e746:	429a      	cmp	r2, r3
3400e748:	d101      	bne.n	3400e74e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
3400e74a:	f7fd fad3 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3400e74e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e752:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400e756:	4618      	mov	r0, r3
3400e758:	f7fc f9a8 	bl	3400aaac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3400e75c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e760:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e764:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400e768:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3400e76c:	2300      	movs	r3, #0
3400e76e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400e772:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3400e776:	4603      	mov	r3, r0
3400e778:	460a      	mov	r2, r1
3400e77a:	4313      	orrs	r3, r2
3400e77c:	f000 80e8 	beq.w	3400e950 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3400e780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e784:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e788:	4b63      	ldr	r3, [pc, #396]	@ (3400e918 <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
3400e78a:	429a      	cmp	r2, r3
3400e78c:	d027      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e78e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e792:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e796:	4b61      	ldr	r3, [pc, #388]	@ (3400e91c <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
3400e798:	429a      	cmp	r2, r3
3400e79a:	d020      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e79c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e7a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e920 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400e7a6:	429a      	cmp	r2, r3
3400e7a8:	d019      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e7aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7ae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e7b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e924 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400e7b4:	429a      	cmp	r2, r3
3400e7b6:	d012      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e7b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e7c0:	4b59      	ldr	r3, [pc, #356]	@ (3400e928 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
3400e7c2:	429a      	cmp	r2, r3
3400e7c4:	d00b      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e7c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7ca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e7ce:	4b57      	ldr	r3, [pc, #348]	@ (3400e92c <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
3400e7d0:	429a      	cmp	r2, r3
3400e7d2:	d004      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400e7d4:	f240 3197 	movw	r1, #919	@ 0x397
3400e7d8:	484c      	ldr	r0, [pc, #304]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e7da:	f7f2 fef9 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3400e7de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7e2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e7e6:	4b4e      	ldr	r3, [pc, #312]	@ (3400e920 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400e7e8:	429a      	cmp	r2, r3
3400e7ea:	d142      	bne.n	3400e872 <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400e7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e7f2:	2b00      	cmp	r3, #0
3400e7f4:	d016      	beq.n	3400e824 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400e7f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e7fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e800:	d010      	beq.n	3400e824 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400e802:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e80c:	d00a      	beq.n	3400e824 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400e80e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e814:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e818:	d004      	beq.n	3400e824 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400e81a:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3400e81e:	483b      	ldr	r0, [pc, #236]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e820:	f7f2 fed6 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400e824:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e82a:	2b00      	cmp	r3, #0
3400e82c:	d005      	beq.n	3400e83a <HAL_RCCEx_PeriphCLKConfig+0x2b02>
3400e82e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e838:	d904      	bls.n	3400e844 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
3400e83a:	f240 319d 	movw	r1, #925	@ 0x39d
3400e83e:	4833      	ldr	r0, [pc, #204]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e840:	f7f2 fec6 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400e844:	4b32      	ldr	r3, [pc, #200]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400e84a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e84e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e852:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e856:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400e858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400e85e:	3b01      	subs	r3, #1
3400e860:	041b      	lsls	r3, r3, #16
3400e862:	4313      	orrs	r3, r2
3400e864:	4a2a      	ldr	r2, [pc, #168]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e866:	430b      	orrs	r3, r1
3400e868:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400e86c:	f7fc ffc2 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400e870:	e067      	b.n	3400e942 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400e872:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e876:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e87a:	4b2a      	ldr	r3, [pc, #168]	@ (3400e924 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400e87c:	429a      	cmp	r2, r3
3400e87e:	d157      	bne.n	3400e930 <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400e880:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e886:	2b00      	cmp	r3, #0
3400e888:	d016      	beq.n	3400e8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400e88a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e88e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e894:	d010      	beq.n	3400e8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400e896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e89a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e8a0:	d00a      	beq.n	3400e8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400e8a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400e8a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e8ac:	d004      	beq.n	3400e8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400e8ae:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400e8b2:	4816      	ldr	r0, [pc, #88]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e8b4:	f7f2 fe8c 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400e8b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e8be:	2b00      	cmp	r3, #0
3400e8c0:	d005      	beq.n	3400e8ce <HAL_RCCEx_PeriphCLKConfig+0x2b96>
3400e8c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e8c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e8cc:	d904      	bls.n	3400e8d8 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
3400e8ce:	f240 31aa 	movw	r1, #938	@ 0x3aa
3400e8d2:	480e      	ldr	r0, [pc, #56]	@ (3400e90c <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400e8d4:	f7f2 fe7c 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400e8d8:	4b0d      	ldr	r3, [pc, #52]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e8da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400e8de:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e8e2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e8e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8ea:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400e8ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400e8f2:	3b01      	subs	r3, #1
3400e8f4:	041b      	lsls	r3, r3, #16
3400e8f6:	4313      	orrs	r3, r2
3400e8f8:	4a05      	ldr	r2, [pc, #20]	@ (3400e910 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400e8fa:	430b      	orrs	r3, r1
3400e8fc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400e900:	f7fd f878 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400e904:	e01d      	b.n	3400e942 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
3400e906:	bf00      	nop
3400e908:	0703040c 	.word	0x0703040c
3400e90c:	3401d6f8 	.word	0x3401d6f8
3400e910:	56028000 	.word	0x56028000
3400e914:	0701040c 	.word	0x0701040c
3400e918:	0700080c 	.word	0x0700080c
3400e91c:	0701080c 	.word	0x0701080c
3400e920:	0702080c 	.word	0x0702080c
3400e924:	0703080c 	.word	0x0703080c
3400e928:	0704080c 	.word	0x0704080c
3400e92c:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400e930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e934:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400e938:	4b70      	ldr	r3, [pc, #448]	@ (3400eafc <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
3400e93a:	429a      	cmp	r2, r3
3400e93c:	d101      	bne.n	3400e942 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
3400e93e:	f7fd f9d9 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3400e942:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400e94a:	4618      	mov	r0, r3
3400e94c:	f7fc f8ae 	bl	3400aaac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3400e950:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e954:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e958:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400e95c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3400e960:	2300      	movs	r3, #0
3400e962:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400e966:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400e96a:	4603      	mov	r3, r0
3400e96c:	460a      	mov	r2, r1
3400e96e:	4313      	orrs	r3, r2
3400e970:	f000 80e6 	beq.w	3400eb40 <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400e974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e978:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e97c:	4b60      	ldr	r3, [pc, #384]	@ (3400eb00 <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
3400e97e:	429a      	cmp	r2, r3
3400e980:	d027      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e982:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e986:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e98a:	4b5e      	ldr	r3, [pc, #376]	@ (3400eb04 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
3400e98c:	429a      	cmp	r2, r3
3400e98e:	d020      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e994:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e998:	4b5b      	ldr	r3, [pc, #364]	@ (3400eb08 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400e99a:	429a      	cmp	r2, r3
3400e99c:	d019      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e99e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9a2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e9a6:	4b59      	ldr	r3, [pc, #356]	@ (3400eb0c <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400e9a8:	429a      	cmp	r2, r3
3400e9aa:	d012      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9b0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e9b4:	4b56      	ldr	r3, [pc, #344]	@ (3400eb10 <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
3400e9b6:	429a      	cmp	r2, r3
3400e9b8:	d00b      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e9ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9be:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e9c2:	4b54      	ldr	r3, [pc, #336]	@ (3400eb14 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
3400e9c4:	429a      	cmp	r2, r3
3400e9c6:	d004      	beq.n	3400e9d2 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400e9c8:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400e9cc:	4852      	ldr	r0, [pc, #328]	@ (3400eb18 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400e9ce:	f7f2 fdff 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3400e9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9d6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400e9da:	4b4b      	ldr	r3, [pc, #300]	@ (3400eb08 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400e9dc:	429a      	cmp	r2, r3
3400e9de:	d142      	bne.n	3400ea66 <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400e9e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e9e6:	2b00      	cmp	r3, #0
3400e9e8:	d016      	beq.n	3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400e9ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e9f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e9f4:	d010      	beq.n	3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400e9f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400e9fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ea00:	d00a      	beq.n	3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400ea02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ea08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ea0c:	d004      	beq.n	3400ea18 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400ea0e:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400ea12:	4841      	ldr	r0, [pc, #260]	@ (3400eb18 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400ea14:	f7f2 fddc 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400ea18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ea1e:	2b00      	cmp	r3, #0
3400ea20:	d005      	beq.n	3400ea2e <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
3400ea22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ea28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ea2c:	d904      	bls.n	3400ea38 <HAL_RCCEx_PeriphCLKConfig+0x2d00>
3400ea2e:	f240 31ca 	movw	r1, #970	@ 0x3ca
3400ea32:	4839      	ldr	r0, [pc, #228]	@ (3400eb18 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400ea34:	f7f2 fdcc 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400ea38:	4b38      	ldr	r3, [pc, #224]	@ (3400eb1c <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400ea3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400ea3e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ea42:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ea46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400ea4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ea52:	3b01      	subs	r3, #1
3400ea54:	041b      	lsls	r3, r3, #16
3400ea56:	4313      	orrs	r3, r2
3400ea58:	4a30      	ldr	r2, [pc, #192]	@ (3400eb1c <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400ea5a:	430b      	orrs	r3, r1
3400ea5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400ea60:	f7fc fec8 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400ea64:	e065      	b.n	3400eb32 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400ea66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea6a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400ea6e:	4b27      	ldr	r3, [pc, #156]	@ (3400eb0c <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400ea70:	429a      	cmp	r2, r3
3400ea72:	d155      	bne.n	3400eb20 <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ea74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ea7a:	2b00      	cmp	r3, #0
3400ea7c:	d016      	beq.n	3400eaac <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400ea7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ea84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ea88:	d010      	beq.n	3400eaac <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400ea8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ea90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ea94:	d00a      	beq.n	3400eaac <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400ea96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ea9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eaa0:	d004      	beq.n	3400eaac <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400eaa2:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400eaa6:	481c      	ldr	r0, [pc, #112]	@ (3400eb18 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400eaa8:	f7f2 fd92 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400eaac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eab2:	2b00      	cmp	r3, #0
3400eab4:	d005      	beq.n	3400eac2 <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3400eab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eabc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eac0:	d904      	bls.n	3400eacc <HAL_RCCEx_PeriphCLKConfig+0x2d94>
3400eac2:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400eac6:	4814      	ldr	r0, [pc, #80]	@ (3400eb18 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400eac8:	f7f2 fd82 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400eacc:	4b13      	ldr	r3, [pc, #76]	@ (3400eb1c <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400eace:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ead2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ead6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eade:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400eae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eae6:	3b01      	subs	r3, #1
3400eae8:	041b      	lsls	r3, r3, #16
3400eaea:	4313      	orrs	r3, r2
3400eaec:	4a0b      	ldr	r2, [pc, #44]	@ (3400eb1c <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400eaee:	430b      	orrs	r3, r1
3400eaf0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400eaf4:	f7fc ff7e 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400eaf8:	e01b      	b.n	3400eb32 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
3400eafa:	bf00      	nop
3400eafc:	0701080c 	.word	0x0701080c
3400eb00:	07000c0c 	.word	0x07000c0c
3400eb04:	07010c0c 	.word	0x07010c0c
3400eb08:	07020c0c 	.word	0x07020c0c
3400eb0c:	07030c0c 	.word	0x07030c0c
3400eb10:	07040c0c 	.word	0x07040c0c
3400eb14:	07050c0c 	.word	0x07050c0c
3400eb18:	3401d6f8 	.word	0x3401d6f8
3400eb1c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400eb20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb24:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400eb28:	4b70      	ldr	r3, [pc, #448]	@ (3400ecec <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400eb2a:	429a      	cmp	r2, r3
3400eb2c:	d101      	bne.n	3400eb32 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
3400eb2e:	f7fd f8e1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3400eb32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400eb3a:	4618      	mov	r0, r3
3400eb3c:	f7fb ffb6 	bl	3400aaac <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400eb40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
3400eb48:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400eb4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400eb50:	2300      	movs	r3, #0
3400eb52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3400eb56:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3400eb5a:	4603      	mov	r3, r0
3400eb5c:	460a      	mov	r2, r1
3400eb5e:	4313      	orrs	r3, r2
3400eb60:	f000 80e6 	beq.w	3400ed30 <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400eb64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb68:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400eb6c:	4b60      	ldr	r3, [pc, #384]	@ (3400ecf0 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
3400eb6e:	429a      	cmp	r2, r3
3400eb70:	d027      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400eb72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb76:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400eb7a:	4b5e      	ldr	r3, [pc, #376]	@ (3400ecf4 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
3400eb7c:	429a      	cmp	r2, r3
3400eb7e:	d020      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400eb80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb84:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400eb88:	4b5b      	ldr	r3, [pc, #364]	@ (3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400eb8a:	429a      	cmp	r2, r3
3400eb8c:	d019      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400eb8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb92:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400eb96:	4b59      	ldr	r3, [pc, #356]	@ (3400ecfc <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400eb98:	429a      	cmp	r2, r3
3400eb9a:	d012      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400eb9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eba0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400eba4:	4b56      	ldr	r3, [pc, #344]	@ (3400ed00 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3400eba6:	429a      	cmp	r2, r3
3400eba8:	d00b      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400ebaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebae:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400ebb2:	4b54      	ldr	r3, [pc, #336]	@ (3400ed04 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400ebb4:	429a      	cmp	r2, r3
3400ebb6:	d004      	beq.n	3400ebc2 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400ebb8:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400ebbc:	4852      	ldr	r0, [pc, #328]	@ (3400ed08 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400ebbe:	f7f2 fd07 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400ebc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebc6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400ebca:	4b4b      	ldr	r3, [pc, #300]	@ (3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400ebcc:	429a      	cmp	r2, r3
3400ebce:	d142      	bne.n	3400ec56 <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400ebd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ebd6:	2b00      	cmp	r3, #0
3400ebd8:	d016      	beq.n	3400ec08 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400ebda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ebe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ebe4:	d010      	beq.n	3400ec08 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400ebe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ebec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ebf0:	d00a      	beq.n	3400ec08 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400ebf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ebf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ebfc:	d004      	beq.n	3400ec08 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400ebfe:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3400ec02:	4841      	ldr	r0, [pc, #260]	@ (3400ed08 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400ec04:	f7f2 fce4 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400ec08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ec0e:	2b00      	cmp	r3, #0
3400ec10:	d005      	beq.n	3400ec1e <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
3400ec12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ec18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ec1c:	d904      	bls.n	3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
3400ec1e:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400ec22:	4839      	ldr	r0, [pc, #228]	@ (3400ed08 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400ec24:	f7f2 fcd4 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400ec28:	4b38      	ldr	r3, [pc, #224]	@ (3400ed0c <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400ec2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400ec2e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ec32:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ec36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400ec3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ec42:	3b01      	subs	r3, #1
3400ec44:	041b      	lsls	r3, r3, #16
3400ec46:	4313      	orrs	r3, r2
3400ec48:	4a30      	ldr	r2, [pc, #192]	@ (3400ed0c <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400ec4a:	430b      	orrs	r3, r1
3400ec4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400ec50:	f7fc fdd0 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400ec54:	e065      	b.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400ec56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec5a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400ec5e:	4b27      	ldr	r3, [pc, #156]	@ (3400ecfc <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400ec60:	429a      	cmp	r2, r3
3400ec62:	d155      	bne.n	3400ed10 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ec64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ec6a:	2b00      	cmp	r3, #0
3400ec6c:	d016      	beq.n	3400ec9c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400ec6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ec74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ec78:	d010      	beq.n	3400ec9c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400ec7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ec80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ec84:	d00a      	beq.n	3400ec9c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400ec86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ec8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ec90:	d004      	beq.n	3400ec9c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400ec92:	f240 4103 	movw	r1, #1027	@ 0x403
3400ec96:	481c      	ldr	r0, [pc, #112]	@ (3400ed08 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400ec98:	f7f2 fc9a 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ec9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eca2:	2b00      	cmp	r3, #0
3400eca4:	d005      	beq.n	3400ecb2 <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3400eca6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ecac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ecb0:	d904      	bls.n	3400ecbc <HAL_RCCEx_PeriphCLKConfig+0x2f84>
3400ecb2:	f240 4104 	movw	r1, #1028	@ 0x404
3400ecb6:	4814      	ldr	r0, [pc, #80]	@ (3400ed08 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400ecb8:	f7f2 fc8a 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400ecbc:	4b13      	ldr	r3, [pc, #76]	@ (3400ed0c <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400ecbe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ecc2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ecc6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ecca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ecd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ecd6:	3b01      	subs	r3, #1
3400ecd8:	041b      	lsls	r3, r3, #16
3400ecda:	4313      	orrs	r3, r2
3400ecdc:	4a0b      	ldr	r2, [pc, #44]	@ (3400ed0c <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400ecde:	430b      	orrs	r3, r1
3400ece0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ece4:	f7fc fe86 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400ece8:	e01b      	b.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
3400ecea:	bf00      	nop
3400ecec:	07010c0c 	.word	0x07010c0c
3400ecf0:	0700100c 	.word	0x0700100c
3400ecf4:	0701100c 	.word	0x0701100c
3400ecf8:	0702100c 	.word	0x0702100c
3400ecfc:	0703100c 	.word	0x0703100c
3400ed00:	0704100c 	.word	0x0704100c
3400ed04:	0705100c 	.word	0x0705100c
3400ed08:	3401d6f8 	.word	0x3401d6f8
3400ed0c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400ed10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed14:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400ed18:	4b70      	ldr	r3, [pc, #448]	@ (3400eedc <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
3400ed1a:	429a      	cmp	r2, r3
3400ed1c:	d101      	bne.n	3400ed22 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
3400ed1e:	f7fc ffe9 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3400ed22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed26:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ed2a:	4618      	mov	r0, r3
3400ed2c:	f7fb fec9 	bl	3400aac2 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400ed30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ed38:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400ed3c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3400ed40:	2300      	movs	r3, #0
3400ed42:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3400ed46:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3400ed4a:	4603      	mov	r3, r0
3400ed4c:	460a      	mov	r2, r1
3400ed4e:	4313      	orrs	r3, r2
3400ed50:	f000 80e6 	beq.w	3400ef20 <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3400ed54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed58:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ed5c:	4b60      	ldr	r3, [pc, #384]	@ (3400eee0 <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
3400ed5e:	429a      	cmp	r2, r3
3400ed60:	d027      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ed62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed66:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ed6a:	4b5e      	ldr	r3, [pc, #376]	@ (3400eee4 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
3400ed6c:	429a      	cmp	r2, r3
3400ed6e:	d020      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ed70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed74:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ed78:	4b5b      	ldr	r3, [pc, #364]	@ (3400eee8 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400ed7a:	429a      	cmp	r2, r3
3400ed7c:	d019      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ed7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed82:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ed86:	4b59      	ldr	r3, [pc, #356]	@ (3400eeec <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400ed88:	429a      	cmp	r2, r3
3400ed8a:	d012      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ed8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed90:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ed94:	4b56      	ldr	r3, [pc, #344]	@ (3400eef0 <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3400ed96:	429a      	cmp	r2, r3
3400ed98:	d00b      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ed9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed9e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400eda2:	4b54      	ldr	r3, [pc, #336]	@ (3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
3400eda4:	429a      	cmp	r2, r3
3400eda6:	d004      	beq.n	3400edb2 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400eda8:	f240 411e 	movw	r1, #1054	@ 0x41e
3400edac:	4852      	ldr	r0, [pc, #328]	@ (3400eef8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400edae:	f7f2 fc0f 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3400edb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edb6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400edba:	4b4b      	ldr	r3, [pc, #300]	@ (3400eee8 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400edbc:	429a      	cmp	r2, r3
3400edbe:	d142      	bne.n	3400ee46 <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400edc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400edc6:	2b00      	cmp	r3, #0
3400edc8:	d016      	beq.n	3400edf8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400edca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400edd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400edd4:	d010      	beq.n	3400edf8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400edd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400eddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ede0:	d00a      	beq.n	3400edf8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ede2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ede6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ede8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400edec:	d004      	beq.n	3400edf8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400edee:	f240 4123 	movw	r1, #1059	@ 0x423
3400edf2:	4841      	ldr	r0, [pc, #260]	@ (3400eef8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400edf4:	f7f2 fbec 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400edf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400edfe:	2b00      	cmp	r3, #0
3400ee00:	d005      	beq.n	3400ee0e <HAL_RCCEx_PeriphCLKConfig+0x30d6>
3400ee02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ee08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ee0c:	d904      	bls.n	3400ee18 <HAL_RCCEx_PeriphCLKConfig+0x30e0>
3400ee0e:	f240 4124 	movw	r1, #1060	@ 0x424
3400ee12:	4839      	ldr	r0, [pc, #228]	@ (3400eef8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400ee14:	f7f2 fbdc 	bl	340015d0 <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400ee18:	4b38      	ldr	r3, [pc, #224]	@ (3400eefc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400ee1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400ee1e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ee22:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ee26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400ee2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ee32:	3b01      	subs	r3, #1
3400ee34:	041b      	lsls	r3, r3, #16
3400ee36:	4313      	orrs	r3, r2
3400ee38:	4a30      	ldr	r2, [pc, #192]	@ (3400eefc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400ee3a:	430b      	orrs	r3, r1
3400ee3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400ee40:	f7fc fcd8 	bl	3400b7f4 <LL_RCC_IC10_Enable>
3400ee44:	e065      	b.n	3400ef12 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3400ee46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee4a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ee4e:	4b27      	ldr	r3, [pc, #156]	@ (3400eeec <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400ee50:	429a      	cmp	r2, r3
3400ee52:	d155      	bne.n	3400ef00 <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ee54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ee5a:	2b00      	cmp	r3, #0
3400ee5c:	d016      	beq.n	3400ee8c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400ee5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ee64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ee68:	d010      	beq.n	3400ee8c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400ee6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ee70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ee74:	d00a      	beq.n	3400ee8c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400ee76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ee7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ee80:	d004      	beq.n	3400ee8c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400ee82:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3400ee86:	481c      	ldr	r0, [pc, #112]	@ (3400eef8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400ee88:	f7f2 fba2 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400ee8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ee92:	2b00      	cmp	r3, #0
3400ee94:	d005      	beq.n	3400eea2 <HAL_RCCEx_PeriphCLKConfig+0x316a>
3400ee96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ee9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eea0:	d904      	bls.n	3400eeac <HAL_RCCEx_PeriphCLKConfig+0x3174>
3400eea2:	f240 4131 	movw	r1, #1073	@ 0x431
3400eea6:	4814      	ldr	r0, [pc, #80]	@ (3400eef8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400eea8:	f7f2 fb92 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400eeac:	4b13      	ldr	r3, [pc, #76]	@ (3400eefc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400eeae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400eeb2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eeb6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eeba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eebe:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400eec0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eec6:	3b01      	subs	r3, #1
3400eec8:	041b      	lsls	r3, r3, #16
3400eeca:	4313      	orrs	r3, r2
3400eecc:	4a0b      	ldr	r2, [pc, #44]	@ (3400eefc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400eece:	430b      	orrs	r3, r1
3400eed0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400eed4:	f7fc fd8e 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400eed8:	e01b      	b.n	3400ef12 <HAL_RCCEx_PeriphCLKConfig+0x31da>
3400eeda:	bf00      	nop
3400eedc:	0701100c 	.word	0x0701100c
3400eee0:	0700140c 	.word	0x0700140c
3400eee4:	0701140c 	.word	0x0701140c
3400eee8:	0702140c 	.word	0x0702140c
3400eeec:	0703140c 	.word	0x0703140c
3400eef0:	0704140c 	.word	0x0704140c
3400eef4:	0705140c 	.word	0x0705140c
3400eef8:	3401d6f8 	.word	0x3401d6f8
3400eefc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400ef00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef04:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ef08:	4b98      	ldr	r3, [pc, #608]	@ (3400f16c <HAL_RCCEx_PeriphCLKConfig+0x3434>)
3400ef0a:	429a      	cmp	r2, r3
3400ef0c:	d101      	bne.n	3400ef12 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
3400ef0e:	f7fc fef1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3400ef12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ef1a:	4618      	mov	r0, r3
3400ef1c:	f7fb fdd1 	bl	3400aac2 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3400ef20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ef28:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400ef2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3400ef30:	2300      	movs	r3, #0
3400ef32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3400ef36:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3400ef3a:	4603      	mov	r3, r0
3400ef3c:	460a      	mov	r2, r1
3400ef3e:	4313      	orrs	r3, r2
3400ef40:	f000 8089 	beq.w	3400f056 <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400ef44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef48:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef4c:	4b88      	ldr	r3, [pc, #544]	@ (3400f170 <HAL_RCCEx_PeriphCLKConfig+0x3438>)
3400ef4e:	429a      	cmp	r2, r3
3400ef50:	d027      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef56:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef5a:	4b86      	ldr	r3, [pc, #536]	@ (3400f174 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400ef5c:	429a      	cmp	r2, r3
3400ef5e:	d020      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef64:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef68:	4b83      	ldr	r3, [pc, #524]	@ (3400f178 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400ef6a:	429a      	cmp	r2, r3
3400ef6c:	d019      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef72:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef76:	4b81      	ldr	r3, [pc, #516]	@ (3400f17c <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3400ef78:	429a      	cmp	r2, r3
3400ef7a:	d012      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef80:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef84:	4b7e      	ldr	r3, [pc, #504]	@ (3400f180 <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3400ef86:	429a      	cmp	r2, r3
3400ef88:	d00b      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef8e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ef92:	4b7c      	ldr	r3, [pc, #496]	@ (3400f184 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
3400ef94:	429a      	cmp	r2, r3
3400ef96:	d004      	beq.n	3400efa2 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400ef98:	f240 414b 	movw	r1, #1099	@ 0x44b
3400ef9c:	487a      	ldr	r0, [pc, #488]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400ef9e:	f7f2 fb17 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400efa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efa6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400efaa:	4b73      	ldr	r3, [pc, #460]	@ (3400f178 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400efac:	429a      	cmp	r2, r3
3400efae:	d142      	bne.n	3400f036 <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400efb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400efb6:	2b00      	cmp	r3, #0
3400efb8:	d016      	beq.n	3400efe8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400efba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400efc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400efc4:	d010      	beq.n	3400efe8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400efc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400efcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400efd0:	d00a      	beq.n	3400efe8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400efd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400efd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400efdc:	d004      	beq.n	3400efe8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400efde:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3400efe2:	4869      	ldr	r0, [pc, #420]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400efe4:	f7f2 faf4 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400efe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400efee:	2b00      	cmp	r3, #0
3400eff0:	d005      	beq.n	3400effe <HAL_RCCEx_PeriphCLKConfig+0x32c6>
3400eff2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400eff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400effc:	d904      	bls.n	3400f008 <HAL_RCCEx_PeriphCLKConfig+0x32d0>
3400effe:	f240 4151 	movw	r1, #1105	@ 0x451
3400f002:	4861      	ldr	r0, [pc, #388]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400f004:	f7f2 fae4 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f008:	4b60      	ldr	r3, [pc, #384]	@ (3400f18c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400f00a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f00e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f012:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f016:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f01a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400f01c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f022:	3b01      	subs	r3, #1
3400f024:	041b      	lsls	r3, r3, #16
3400f026:	4313      	orrs	r3, r2
3400f028:	4a58      	ldr	r2, [pc, #352]	@ (3400f18c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400f02a:	430b      	orrs	r3, r1
3400f02c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f030:	f7fc fce0 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400f034:	e008      	b.n	3400f048 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400f036:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f03a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400f03e:	4b4d      	ldr	r3, [pc, #308]	@ (3400f174 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400f040:	429a      	cmp	r2, r3
3400f042:	d101      	bne.n	3400f048 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
3400f044:	f7fc fe56 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3400f048:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f04c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400f050:	4618      	mov	r0, r3
3400f052:	f7fb fd41 	bl	3400aad8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400f056:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f05e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400f062:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3400f066:	2300      	movs	r3, #0
3400f068:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3400f06c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400f070:	4603      	mov	r3, r0
3400f072:	460a      	mov	r2, r1
3400f074:	4313      	orrs	r3, r2
3400f076:	f000 80a7 	beq.w	3400f1c8 <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400f07a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f07e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f082:	4b43      	ldr	r3, [pc, #268]	@ (3400f190 <HAL_RCCEx_PeriphCLKConfig+0x3458>)
3400f084:	429a      	cmp	r2, r3
3400f086:	d027      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f08c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f090:	4b40      	ldr	r3, [pc, #256]	@ (3400f194 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
3400f092:	429a      	cmp	r2, r3
3400f094:	d020      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f096:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f09a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f09e:	4b3e      	ldr	r3, [pc, #248]	@ (3400f198 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400f0a0:	429a      	cmp	r2, r3
3400f0a2:	d019      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f0a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f0ac:	4b3b      	ldr	r3, [pc, #236]	@ (3400f19c <HAL_RCCEx_PeriphCLKConfig+0x3464>)
3400f0ae:	429a      	cmp	r2, r3
3400f0b0:	d012      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f0b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f0ba:	4b39      	ldr	r3, [pc, #228]	@ (3400f1a0 <HAL_RCCEx_PeriphCLKConfig+0x3468>)
3400f0bc:	429a      	cmp	r2, r3
3400f0be:	d00b      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f0c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f0c8:	4b36      	ldr	r3, [pc, #216]	@ (3400f1a4 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3400f0ca:	429a      	cmp	r2, r3
3400f0cc:	d004      	beq.n	3400f0d8 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400f0ce:	f240 416b 	movw	r1, #1131	@ 0x46b
3400f0d2:	482d      	ldr	r0, [pc, #180]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400f0d4:	f7f2 fa7c 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3400f0d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f0e0:	4b2d      	ldr	r3, [pc, #180]	@ (3400f198 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400f0e2:	429a      	cmp	r2, r3
3400f0e4:	d160      	bne.n	3400f1a8 <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400f0e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f0ec:	2b00      	cmp	r3, #0
3400f0ee:	d016      	beq.n	3400f11e <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400f0f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f0fa:	d010      	beq.n	3400f11e <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400f0fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f106:	d00a      	beq.n	3400f11e <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400f108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f10c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f10e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f112:	d004      	beq.n	3400f11e <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400f114:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400f118:	481b      	ldr	r0, [pc, #108]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400f11a:	f7f2 fa59 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400f11e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f124:	2b00      	cmp	r3, #0
3400f126:	d005      	beq.n	3400f134 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
3400f128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f12e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f132:	d904      	bls.n	3400f13e <HAL_RCCEx_PeriphCLKConfig+0x3406>
3400f134:	f240 4171 	movw	r1, #1137	@ 0x471
3400f138:	4813      	ldr	r0, [pc, #76]	@ (3400f188 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400f13a:	f7f2 fa49 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f13e:	4b13      	ldr	r3, [pc, #76]	@ (3400f18c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400f140:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f144:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f148:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f14c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f150:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400f152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f158:	3b01      	subs	r3, #1
3400f15a:	041b      	lsls	r3, r3, #16
3400f15c:	4313      	orrs	r3, r2
3400f15e:	4a0b      	ldr	r2, [pc, #44]	@ (3400f18c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400f160:	430b      	orrs	r3, r1
3400f162:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f166:	f7fc fc45 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400f16a:	e026      	b.n	3400f1ba <HAL_RCCEx_PeriphCLKConfig+0x3482>
3400f16c:	0701140c 	.word	0x0701140c
3400f170:	0700082c 	.word	0x0700082c
3400f174:	0701082c 	.word	0x0701082c
3400f178:	0702082c 	.word	0x0702082c
3400f17c:	0703082c 	.word	0x0703082c
3400f180:	0704082c 	.word	0x0704082c
3400f184:	0705082c 	.word	0x0705082c
3400f188:	3401d6f8 	.word	0x3401d6f8
3400f18c:	56028000 	.word	0x56028000
3400f190:	07000c2c 	.word	0x07000c2c
3400f194:	07010c2c 	.word	0x07010c2c
3400f198:	07020c2c 	.word	0x07020c2c
3400f19c:	07030c2c 	.word	0x07030c2c
3400f1a0:	07040c2c 	.word	0x07040c2c
3400f1a4:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400f1a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400f1b0:	4b98      	ldr	r3, [pc, #608]	@ (3400f414 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
3400f1b2:	429a      	cmp	r2, r3
3400f1b4:	d101      	bne.n	3400f1ba <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3400f1b6:	f7fc fd9d 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3400f1ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1be:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400f1c2:	4618      	mov	r0, r3
3400f1c4:	f7fb fc88 	bl	3400aad8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3400f1c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f1d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400f1d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3400f1d8:	2300      	movs	r3, #0
3400f1da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3400f1de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3400f1e2:	4603      	mov	r3, r0
3400f1e4:	460a      	mov	r2, r1
3400f1e6:	4313      	orrs	r3, r2
3400f1e8:	f000 8089 	beq.w	3400f2fe <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400f1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f1f4:	4b88      	ldr	r3, [pc, #544]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
3400f1f6:	429a      	cmp	r2, r3
3400f1f8:	d027      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f1fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f202:	4b86      	ldr	r3, [pc, #536]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400f204:	429a      	cmp	r2, r3
3400f206:	d020      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f208:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f20c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f210:	4b83      	ldr	r3, [pc, #524]	@ (3400f420 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400f212:	429a      	cmp	r2, r3
3400f214:	d019      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f216:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f21a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f21e:	4b81      	ldr	r3, [pc, #516]	@ (3400f424 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
3400f220:	429a      	cmp	r2, r3
3400f222:	d012      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f224:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f228:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f22c:	4b7e      	ldr	r3, [pc, #504]	@ (3400f428 <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
3400f22e:	429a      	cmp	r2, r3
3400f230:	d00b      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f232:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f236:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f23a:	4b7c      	ldr	r3, [pc, #496]	@ (3400f42c <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
3400f23c:	429a      	cmp	r2, r3
3400f23e:	d004      	beq.n	3400f24a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400f240:	f240 418b 	movw	r1, #1163	@ 0x48b
3400f244:	487a      	ldr	r0, [pc, #488]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f246:	f7f2 f9c3 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400f24a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f24e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f252:	4b73      	ldr	r3, [pc, #460]	@ (3400f420 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400f254:	429a      	cmp	r2, r3
3400f256:	d142      	bne.n	3400f2de <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400f258:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f25c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f25e:	2b00      	cmp	r3, #0
3400f260:	d016      	beq.n	3400f290 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400f262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f266:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f26c:	d010      	beq.n	3400f290 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400f26e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f278:	d00a      	beq.n	3400f290 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400f27a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f27e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f280:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f284:	d004      	beq.n	3400f290 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400f286:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3400f28a:	4869      	ldr	r0, [pc, #420]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f28c:	f7f2 f9a0 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400f290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f296:	2b00      	cmp	r3, #0
3400f298:	d005      	beq.n	3400f2a6 <HAL_RCCEx_PeriphCLKConfig+0x356e>
3400f29a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f29e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f2a4:	d904      	bls.n	3400f2b0 <HAL_RCCEx_PeriphCLKConfig+0x3578>
3400f2a6:	f240 4191 	movw	r1, #1169	@ 0x491
3400f2aa:	4861      	ldr	r0, [pc, #388]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f2ac:	f7f2 f990 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f2b0:	4b60      	ldr	r3, [pc, #384]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400f2b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f2b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f2ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f2be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2c2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400f2c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f2ca:	3b01      	subs	r3, #1
3400f2cc:	041b      	lsls	r3, r3, #16
3400f2ce:	4313      	orrs	r3, r2
3400f2d0:	4a58      	ldr	r2, [pc, #352]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400f2d2:	430b      	orrs	r3, r1
3400f2d4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f2d8:	f7fc fb8c 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400f2dc:	e008      	b.n	3400f2f0 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400f2de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400f2e6:	4b4d      	ldr	r3, [pc, #308]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400f2e8:	429a      	cmp	r2, r3
3400f2ea:	d101      	bne.n	3400f2f0 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
3400f2ec:	f7fc fd02 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3400f2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400f2f8:	4618      	mov	r0, r3
3400f2fa:	f7fb fbed 	bl	3400aad8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400f2fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f302:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f306:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400f30a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3400f30e:	2300      	movs	r3, #0
3400f310:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400f314:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3400f318:	4603      	mov	r3, r0
3400f31a:	460a      	mov	r2, r1
3400f31c:	4313      	orrs	r3, r2
3400f31e:	f000 80a7 	beq.w	3400f470 <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
3400f322:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f326:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f32a:	4b43      	ldr	r3, [pc, #268]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x3700>)
3400f32c:	429a      	cmp	r2, r3
3400f32e:	d027      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f334:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f338:	4b40      	ldr	r3, [pc, #256]	@ (3400f43c <HAL_RCCEx_PeriphCLKConfig+0x3704>)
3400f33a:	429a      	cmp	r2, r3
3400f33c:	d020      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f33e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f342:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f346:	4b3e      	ldr	r3, [pc, #248]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400f348:	429a      	cmp	r2, r3
3400f34a:	d019      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f34c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f350:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f354:	4b3b      	ldr	r3, [pc, #236]	@ (3400f444 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3400f356:	429a      	cmp	r2, r3
3400f358:	d012      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f35a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f35e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f362:	4b39      	ldr	r3, [pc, #228]	@ (3400f448 <HAL_RCCEx_PeriphCLKConfig+0x3710>)
3400f364:	429a      	cmp	r2, r3
3400f366:	d00b      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f368:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f36c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f370:	4b36      	ldr	r3, [pc, #216]	@ (3400f44c <HAL_RCCEx_PeriphCLKConfig+0x3714>)
3400f372:	429a      	cmp	r2, r3
3400f374:	d004      	beq.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400f376:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3400f37a:	482d      	ldr	r0, [pc, #180]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f37c:	f7f2 f928 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400f380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f384:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f388:	4b2d      	ldr	r3, [pc, #180]	@ (3400f440 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400f38a:	429a      	cmp	r2, r3
3400f38c:	d160      	bne.n	3400f450 <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400f38e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f394:	2b00      	cmp	r3, #0
3400f396:	d016      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400f398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f39c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f3a2:	d010      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400f3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f3ae:	d00a      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400f3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f3b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f3ba:	d004      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400f3bc:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400f3c0:	481b      	ldr	r0, [pc, #108]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f3c2:	f7f2 f905 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400f3c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f3cc:	2b00      	cmp	r3, #0
3400f3ce:	d005      	beq.n	3400f3dc <HAL_RCCEx_PeriphCLKConfig+0x36a4>
3400f3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f3da:	d904      	bls.n	3400f3e6 <HAL_RCCEx_PeriphCLKConfig+0x36ae>
3400f3dc:	f240 41b1 	movw	r1, #1201	@ 0x4b1
3400f3e0:	4813      	ldr	r0, [pc, #76]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400f3e2:	f7f2 f8f5 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f3e6:	4b13      	ldr	r3, [pc, #76]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400f3e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f3ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f3f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f3f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3f8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400f3fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f400:	3b01      	subs	r3, #1
3400f402:	041b      	lsls	r3, r3, #16
3400f404:	4313      	orrs	r3, r2
3400f406:	4a0b      	ldr	r2, [pc, #44]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400f408:	430b      	orrs	r3, r1
3400f40a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f40e:	f7fc faf1 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400f412:	e026      	b.n	3400f462 <HAL_RCCEx_PeriphCLKConfig+0x372a>
3400f414:	07010c2c 	.word	0x07010c2c
3400f418:	0700102c 	.word	0x0700102c
3400f41c:	0701102c 	.word	0x0701102c
3400f420:	0702102c 	.word	0x0702102c
3400f424:	0703102c 	.word	0x0703102c
3400f428:	0704102c 	.word	0x0704102c
3400f42c:	0705102c 	.word	0x0705102c
3400f430:	3401d6f8 	.word	0x3401d6f8
3400f434:	56028000 	.word	0x56028000
3400f438:	0700142c 	.word	0x0700142c
3400f43c:	0701142c 	.word	0x0701142c
3400f440:	0702142c 	.word	0x0702142c
3400f444:	0703142c 	.word	0x0703142c
3400f448:	0704142c 	.word	0x0704142c
3400f44c:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400f450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f454:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400f458:	4b9b      	ldr	r3, [pc, #620]	@ (3400f6c8 <HAL_RCCEx_PeriphCLKConfig+0x3990>)
3400f45a:	429a      	cmp	r2, r3
3400f45c:	d101      	bne.n	3400f462 <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
3400f45e:	f7fc fc49 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3400f462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f466:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400f46a:	4618      	mov	r0, r3
3400f46c:	f7fb fb34 	bl	3400aad8 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400f470:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f474:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400f47c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3400f480:	2300      	movs	r3, #0
3400f482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3400f486:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3400f48a:	4603      	mov	r3, r0
3400f48c:	460a      	mov	r2, r1
3400f48e:	4313      	orrs	r3, r2
3400f490:	f000 8089 	beq.w	3400f5a6 <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400f494:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f498:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f49c:	4b8b      	ldr	r3, [pc, #556]	@ (3400f6cc <HAL_RCCEx_PeriphCLKConfig+0x3994>)
3400f49e:	429a      	cmp	r2, r3
3400f4a0:	d027      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4aa:	4b89      	ldr	r3, [pc, #548]	@ (3400f6d0 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400f4ac:	429a      	cmp	r2, r3
3400f4ae:	d020      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4b8:	4b86      	ldr	r3, [pc, #536]	@ (3400f6d4 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400f4ba:	429a      	cmp	r2, r3
3400f4bc:	d019      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4c6:	4b84      	ldr	r3, [pc, #528]	@ (3400f6d8 <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
3400f4c8:	429a      	cmp	r2, r3
3400f4ca:	d012      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4d4:	4b81      	ldr	r3, [pc, #516]	@ (3400f6dc <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
3400f4d6:	429a      	cmp	r2, r3
3400f4d8:	d00b      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4de:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4e2:	4b7f      	ldr	r3, [pc, #508]	@ (3400f6e0 <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
3400f4e4:	429a      	cmp	r2, r3
3400f4e6:	d004      	beq.n	3400f4f2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400f4e8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400f4ec:	487d      	ldr	r0, [pc, #500]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f4ee:	f7f2 f86f 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400f4f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f4fa:	4b76      	ldr	r3, [pc, #472]	@ (3400f6d4 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400f4fc:	429a      	cmp	r2, r3
3400f4fe:	d142      	bne.n	3400f586 <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400f500:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f506:	2b00      	cmp	r3, #0
3400f508:	d016      	beq.n	3400f538 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400f50a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f50e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f514:	d010      	beq.n	3400f538 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400f516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f51a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f51c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f520:	d00a      	beq.n	3400f538 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400f522:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f52c:	d004      	beq.n	3400f538 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400f52e:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400f532:	486c      	ldr	r0, [pc, #432]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f534:	f7f2 f84c 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400f538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f53c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f53e:	2b00      	cmp	r3, #0
3400f540:	d005      	beq.n	3400f54e <HAL_RCCEx_PeriphCLKConfig+0x3816>
3400f542:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f54c:	d904      	bls.n	3400f558 <HAL_RCCEx_PeriphCLKConfig+0x3820>
3400f54e:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400f552:	4864      	ldr	r0, [pc, #400]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f554:	f7f2 f83c 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f558:	4b63      	ldr	r3, [pc, #396]	@ (3400f6e8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400f55a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f55e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f562:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f56a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400f56c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f572:	3b01      	subs	r3, #1
3400f574:	041b      	lsls	r3, r3, #16
3400f576:	4313      	orrs	r3, r2
3400f578:	4a5b      	ldr	r2, [pc, #364]	@ (3400f6e8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400f57a:	430b      	orrs	r3, r1
3400f57c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f580:	f7fc fa38 	bl	3400b9f4 <LL_RCC_IC15_Enable>
3400f584:	e008      	b.n	3400f598 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400f586:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f58a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400f58e:	4b50      	ldr	r3, [pc, #320]	@ (3400f6d0 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400f590:	429a      	cmp	r2, r3
3400f592:	d101      	bne.n	3400f598 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
3400f594:	f7fc fbae 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3400f598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f59c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400f5a0:	4618      	mov	r0, r3
3400f5a2:	f7fb fa99 	bl	3400aad8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400f5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f5ae:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400f5b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3400f5b6:	2300      	movs	r3, #0
3400f5b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3400f5bc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400f5c0:	4603      	mov	r3, r0
3400f5c2:	460a      	mov	r2, r1
3400f5c4:	4313      	orrs	r3, r2
3400f5c6:	f000 80eb 	beq.w	3400f7a0 <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3400f5ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f5d2:	2b00      	cmp	r3, #0
3400f5d4:	d02e      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f5d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5da:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f5e2:	d027      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f5e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400f5f0:	d020      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f5f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f5fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400f5fe:	d019      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f604:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400f60c:	d012      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f60e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f612:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f616:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400f61a:	d00b      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f620:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f624:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400f628:	d004      	beq.n	3400f634 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400f62a:	f240 41eb 	movw	r1, #1259	@ 0x4eb
3400f62e:	482d      	ldr	r0, [pc, #180]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f630:	f7f1 ffce 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400f634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f638:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f63c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400f640:	d154      	bne.n	3400f6ec <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f642:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f648:	2b00      	cmp	r3, #0
3400f64a:	d016      	beq.n	3400f67a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400f64c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f656:	d010      	beq.n	3400f67a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400f658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f65c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f662:	d00a      	beq.n	3400f67a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400f664:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f66a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f66e:	d004      	beq.n	3400f67a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400f670:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3400f674:	481b      	ldr	r0, [pc, #108]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f676:	f7f1 ffab 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f67a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f67e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f680:	2b00      	cmp	r3, #0
3400f682:	d005      	beq.n	3400f690 <HAL_RCCEx_PeriphCLKConfig+0x3958>
3400f684:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f68a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f68e:	d904      	bls.n	3400f69a <HAL_RCCEx_PeriphCLKConfig+0x3962>
3400f690:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3400f694:	4813      	ldr	r0, [pc, #76]	@ (3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400f696:	f7f1 ff9b 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f69a:	4b13      	ldr	r3, [pc, #76]	@ (3400f6e8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400f69c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f6a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f6a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f6a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f6ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f6b4:	3b01      	subs	r3, #1
3400f6b6:	041b      	lsls	r3, r3, #16
3400f6b8:	4313      	orrs	r3, r2
3400f6ba:	4a0b      	ldr	r2, [pc, #44]	@ (3400f6e8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400f6bc:	430b      	orrs	r3, r1
3400f6be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f6c2:	f7fc f857 	bl	3400b774 <LL_RCC_IC9_Enable>
3400f6c6:	e064      	b.n	3400f792 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
3400f6c8:	0701142c 	.word	0x0701142c
3400f6cc:	0700182c 	.word	0x0700182c
3400f6d0:	0701182c 	.word	0x0701182c
3400f6d4:	0702182c 	.word	0x0702182c
3400f6d8:	0703182c 	.word	0x0703182c
3400f6dc:	0704182c 	.word	0x0704182c
3400f6e0:	0705182c 	.word	0x0705182c
3400f6e4:	3401d6f8 	.word	0x3401d6f8
3400f6e8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400f6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f6f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400f6f8:	d142      	bne.n	3400f780 <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f700:	2b00      	cmp	r3, #0
3400f702:	d016      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400f704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f70a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f70e:	d010      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400f710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f71a:	d00a      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400f71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f726:	d004      	beq.n	3400f732 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400f728:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400f72c:	48b2      	ldr	r0, [pc, #712]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f72e:	f7f1 ff4f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f738:	2b00      	cmp	r3, #0
3400f73a:	d005      	beq.n	3400f748 <HAL_RCCEx_PeriphCLKConfig+0x3a10>
3400f73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f746:	d904      	bls.n	3400f752 <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
3400f748:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400f74c:	48aa      	ldr	r0, [pc, #680]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f74e:	f7f1 ff3f 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f752:	4baa      	ldr	r3, [pc, #680]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f754:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f758:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f75c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f760:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f764:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f76a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f76c:	3b01      	subs	r3, #1
3400f76e:	041b      	lsls	r3, r3, #16
3400f770:	4313      	orrs	r3, r2
3400f772:	4aa2      	ldr	r2, [pc, #648]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f774:	430b      	orrs	r3, r1
3400f776:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f77a:	f7fc f8fb 	bl	3400b974 <LL_RCC_IC14_Enable>
3400f77e:	e008      	b.n	3400f792 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400f780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f784:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f78c:	d101      	bne.n	3400f792 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
3400f78e:	f7fc fab1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3400f792:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f796:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400f79a:	4618      	mov	r0, r3
3400f79c:	f7fb f9a8 	bl	3400aaf0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400f7a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f7a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400f7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400f7b0:	2300      	movs	r3, #0
3400f7b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3400f7b6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3400f7ba:	4603      	mov	r3, r0
3400f7bc:	460a      	mov	r2, r1
3400f7be:	4313      	orrs	r3, r2
3400f7c0:	f000 8082 	beq.w	3400f8c8 <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400f7c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f7cc:	2b00      	cmp	r3, #0
3400f7ce:	d019      	beq.n	3400f804 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400f7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7d4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f7d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400f7dc:	d012      	beq.n	3400f804 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400f7de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f7e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400f7ea:	d00b      	beq.n	3400f804 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400f7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f7f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400f7f8:	d004      	beq.n	3400f804 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400f7fa:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400f7fe:	487e      	ldr	r0, [pc, #504]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f800:	f7f1 fee6 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400f804:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f808:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f80c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400f810:	d14a      	bne.n	3400f8a8 <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400f812:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400f81a:	2b00      	cmp	r3, #0
3400f81c:	d019      	beq.n	3400f852 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400f81e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400f826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f82a:	d012      	beq.n	3400f852 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400f82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400f834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f838:	d00b      	beq.n	3400f852 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400f83a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400f842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f846:	d004      	beq.n	3400f852 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400f848:	f240 511d 	movw	r1, #1309	@ 0x51d
3400f84c:	486a      	ldr	r0, [pc, #424]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f84e:	f7f1 febf 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400f852:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400f85a:	2b00      	cmp	r3, #0
3400f85c:	d006      	beq.n	3400f86c <HAL_RCCEx_PeriphCLKConfig+0x3b34>
3400f85e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400f866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f86a:	d904      	bls.n	3400f876 <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
3400f86c:	f240 511e 	movw	r1, #1310	@ 0x51e
3400f870:	4861      	ldr	r0, [pc, #388]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f872:	f7f1 fead 	bl	340015d0 <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400f876:	4b61      	ldr	r3, [pc, #388]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f878:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400f87c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f880:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f888:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400f88c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400f894:	3b01      	subs	r3, #1
3400f896:	041b      	lsls	r3, r3, #16
3400f898:	4313      	orrs	r3, r2
3400f89a:	4a58      	ldr	r2, [pc, #352]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f89c:	430b      	orrs	r3, r1
3400f89e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3400f8a2:	f7fc f8e7 	bl	3400ba74 <LL_RCC_IC16_Enable>
3400f8a6:	e008      	b.n	3400f8ba <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400f8a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f8b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400f8b4:	d101      	bne.n	3400f8ba <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
3400f8b6:	f7fc fa1d 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3400f8ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400f8c2:	4618      	mov	r0, r3
3400f8c4:	f7fb f92a 	bl	3400ab1c <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400f8c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f8d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400f8d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400f8d8:	2300      	movs	r3, #0
3400f8da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3400f8de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3400f8e2:	4603      	mov	r3, r0
3400f8e4:	460a      	mov	r2, r1
3400f8e6:	4313      	orrs	r3, r2
3400f8e8:	f000 80e4 	beq.w	3400fab4 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400f8ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f8f4:	2b00      	cmp	r3, #0
3400f8f6:	d035      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400f904:	d02e      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f906:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f90a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f90e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400f912:	d027      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f914:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f918:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f91c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400f920:	d020      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f922:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f926:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f92a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400f92e:	d019      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f934:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400f93c:	d012      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f93e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f942:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f946:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400f94a:	d00b      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f94c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f950:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f954:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400f958:	d004      	beq.n	3400f964 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400f95a:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400f95e:	4826      	ldr	r0, [pc, #152]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f960:	f7f1 fe36 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3400f964:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f968:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400f96c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400f970:	d146      	bne.n	3400fa00 <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400f972:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400f978:	2b00      	cmp	r3, #0
3400f97a:	d016      	beq.n	3400f9aa <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400f97c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400f982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f986:	d010      	beq.n	3400f9aa <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400f988:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400f98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f992:	d00a      	beq.n	3400f9aa <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400f994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400f99a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f99e:	d004      	beq.n	3400f9aa <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400f9a0:	f240 513d 	movw	r1, #1341	@ 0x53d
3400f9a4:	4814      	ldr	r0, [pc, #80]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f9a6:	f7f1 fe13 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400f9aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400f9b0:	2b00      	cmp	r3, #0
3400f9b2:	d005      	beq.n	3400f9c0 <HAL_RCCEx_PeriphCLKConfig+0x3c88>
3400f9b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400f9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f9be:	d904      	bls.n	3400f9ca <HAL_RCCEx_PeriphCLKConfig+0x3c92>
3400f9c0:	f240 513e 	movw	r1, #1342	@ 0x53e
3400f9c4:	480c      	ldr	r0, [pc, #48]	@ (3400f9f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400f9c6:	f7f1 fe03 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400f9ca:	4b0c      	ldr	r3, [pc, #48]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f9cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400f9d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f9d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f9d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400f9de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400f9e4:	3b01      	subs	r3, #1
3400f9e6:	041b      	lsls	r3, r3, #16
3400f9e8:	4313      	orrs	r3, r2
3400f9ea:	4a04      	ldr	r2, [pc, #16]	@ (3400f9fc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400f9ec:	430b      	orrs	r3, r1
3400f9ee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400f9f2:	f7fb fe3f 	bl	3400b674 <LL_RCC_IC7_Enable>
3400f9f6:	e056      	b.n	3400faa6 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
3400f9f8:	3401d6f8 	.word	0x3401d6f8
3400f9fc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3400fa00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa04:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400fa08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400fa0c:	d142      	bne.n	3400fa94 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400fa0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fa14:	2b00      	cmp	r3, #0
3400fa16:	d016      	beq.n	3400fa46 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400fa18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fa1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fa22:	d010      	beq.n	3400fa46 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400fa24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fa2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fa2e:	d00a      	beq.n	3400fa46 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400fa30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fa36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fa3a:	d004      	beq.n	3400fa46 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400fa3c:	f240 514a 	movw	r1, #1354	@ 0x54a
3400fa40:	48b0      	ldr	r0, [pc, #704]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fa42:	f7f1 fdc5 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400fa46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fa4c:	2b00      	cmp	r3, #0
3400fa4e:	d005      	beq.n	3400fa5c <HAL_RCCEx_PeriphCLKConfig+0x3d24>
3400fa50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fa56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fa5a:	d904      	bls.n	3400fa66 <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
3400fa5c:	f240 514b 	movw	r1, #1355	@ 0x54b
3400fa60:	48a8      	ldr	r0, [pc, #672]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fa62:	f7f1 fdb5 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400fa66:	4ba8      	ldr	r3, [pc, #672]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fa68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400fa6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fa70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fa74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400fa7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fa80:	3b01      	subs	r3, #1
3400fa82:	041b      	lsls	r3, r3, #16
3400fa84:	4313      	orrs	r3, r2
3400fa86:	4aa0      	ldr	r2, [pc, #640]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fa88:	430b      	orrs	r3, r1
3400fa8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400fa8e:	f7fb fe31 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3400fa92:	e008      	b.n	3400faa6 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400fa94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa98:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400fa9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400faa0:	d101      	bne.n	3400faa6 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
3400faa2:	f7fc f927 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3400faa6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faaa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400faae:	4618      	mov	r0, r3
3400fab0:	f7fb f84a 	bl	3400ab48 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400fab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fabc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400fac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3400fac4:	2300      	movs	r3, #0
3400fac6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3400faca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3400face:	4603      	mov	r3, r0
3400fad0:	460a      	mov	r2, r1
3400fad2:	4313      	orrs	r3, r2
3400fad4:	d07c      	beq.n	3400fbd0 <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400fad6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fada:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400fade:	2b00      	cmp	r3, #0
3400fae0:	d016      	beq.n	3400fb10 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400fae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fae6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400faea:	2b10      	cmp	r3, #16
3400faec:	d010      	beq.n	3400fb10 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400faee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faf2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400faf6:	2b20      	cmp	r3, #32
3400faf8:	d00a      	beq.n	3400fb10 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400fafa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fafe:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400fb02:	2b30      	cmp	r3, #48	@ 0x30
3400fb04:	d004      	beq.n	3400fb10 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400fb06:	f240 5165 	movw	r1, #1381	@ 0x565
3400fb0a:	487e      	ldr	r0, [pc, #504]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fb0c:	f7f1 fd60 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400fb10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb14:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400fb18:	2b20      	cmp	r3, #32
3400fb1a:	d14a      	bne.n	3400fbb2 <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400fb1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400fb24:	2b00      	cmp	r3, #0
3400fb26:	d019      	beq.n	3400fb5c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400fb28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400fb30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fb34:	d012      	beq.n	3400fb5c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400fb36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400fb3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fb42:	d00b      	beq.n	3400fb5c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400fb44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400fb4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fb50:	d004      	beq.n	3400fb5c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400fb52:	f240 516a 	movw	r1, #1386	@ 0x56a
3400fb56:	486b      	ldr	r0, [pc, #428]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fb58:	f7f1 fd3a 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400fb5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400fb64:	2b00      	cmp	r3, #0
3400fb66:	d006      	beq.n	3400fb76 <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3400fb68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400fb70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fb74:	d904      	bls.n	3400fb80 <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3400fb76:	f240 516b 	movw	r1, #1387	@ 0x56b
3400fb7a:	4862      	ldr	r0, [pc, #392]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fb7c:	f7f1 fd28 	bl	340015d0 <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400fb80:	4b61      	ldr	r3, [pc, #388]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fb82:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400fb86:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fb8a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fb8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb92:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400fb96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400fb9e:	3b01      	subs	r3, #1
3400fba0:	041b      	lsls	r3, r3, #16
3400fba2:	4313      	orrs	r3, r2
3400fba4:	4a58      	ldr	r2, [pc, #352]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fba6:	430b      	orrs	r3, r1
3400fba8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400fbac:	f7fc f862 	bl	3400bc74 <LL_RCC_IC20_Enable>
3400fbb0:	e007      	b.n	3400fbc2 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400fbb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400fbba:	2b10      	cmp	r3, #16
3400fbbc:	d101      	bne.n	3400fbc2 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
3400fbbe:	f7fc f899 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3400fbc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400fbca:	4618      	mov	r0, r3
3400fbcc:	f7fa ffe8 	bl	3400aba0 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400fbd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fbd8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400fbdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3400fbe0:	2300      	movs	r3, #0
3400fbe2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3400fbe6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3400fbea:	4603      	mov	r3, r0
3400fbec:	460a      	mov	r2, r1
3400fbee:	4313      	orrs	r3, r2
3400fbf0:	f000 80f6 	beq.w	3400fde0 <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3400fbf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbf8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fbfc:	4b43      	ldr	r3, [pc, #268]	@ (3400fd0c <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
3400fbfe:	429a      	cmp	r2, r3
3400fc00:	d035      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc06:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc0a:	4b41      	ldr	r3, [pc, #260]	@ (3400fd10 <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
3400fc0c:	429a      	cmp	r2, r3
3400fc0e:	d02e      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc14:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc18:	4b3e      	ldr	r3, [pc, #248]	@ (3400fd14 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400fc1a:	429a      	cmp	r2, r3
3400fc1c:	d027      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc22:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc26:	4b3c      	ldr	r3, [pc, #240]	@ (3400fd18 <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
3400fc28:	429a      	cmp	r2, r3
3400fc2a:	d020      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc30:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc34:	4b39      	ldr	r3, [pc, #228]	@ (3400fd1c <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
3400fc36:	429a      	cmp	r2, r3
3400fc38:	d019      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc3e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc42:	4b37      	ldr	r3, [pc, #220]	@ (3400fd20 <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
3400fc44:	429a      	cmp	r2, r3
3400fc46:	d012      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc4c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc50:	4b34      	ldr	r3, [pc, #208]	@ (3400fd24 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
3400fc52:	429a      	cmp	r2, r3
3400fc54:	d00b      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc5a:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc5e:	4b32      	ldr	r3, [pc, #200]	@ (3400fd28 <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
3400fc60:	429a      	cmp	r2, r3
3400fc62:	d004      	beq.n	3400fc6e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400fc64:	f240 5185 	movw	r1, #1413	@ 0x585
3400fc68:	4826      	ldr	r0, [pc, #152]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fc6a:	f7f1 fcb1 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400fc6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc72:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fc76:	4b27      	ldr	r3, [pc, #156]	@ (3400fd14 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400fc78:	429a      	cmp	r2, r3
3400fc7a:	d157      	bne.n	3400fd2c <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400fc7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fc82:	2b00      	cmp	r3, #0
3400fc84:	d016      	beq.n	3400fcb4 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400fc86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fc8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fc90:	d010      	beq.n	3400fcb4 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400fc92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fc98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fc9c:	d00a      	beq.n	3400fcb4 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400fc9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fca4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fca8:	d004      	beq.n	3400fcb4 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400fcaa:	f240 518a 	movw	r1, #1418	@ 0x58a
3400fcae:	4815      	ldr	r0, [pc, #84]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fcb0:	f7f1 fc8e 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400fcb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400fcba:	2b00      	cmp	r3, #0
3400fcbc:	d005      	beq.n	3400fcca <HAL_RCCEx_PeriphCLKConfig+0x3f92>
3400fcbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400fcc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fcc8:	d904      	bls.n	3400fcd4 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3400fcca:	f240 518b 	movw	r1, #1419	@ 0x58b
3400fcce:	480d      	ldr	r0, [pc, #52]	@ (3400fd04 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400fcd0:	f7f1 fc7e 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400fcd4:	4b0c      	ldr	r3, [pc, #48]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fcd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400fcda:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fcde:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fce2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400fce8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400fcee:	3b01      	subs	r3, #1
3400fcf0:	041b      	lsls	r3, r3, #16
3400fcf2:	4313      	orrs	r3, r2
3400fcf4:	4a04      	ldr	r2, [pc, #16]	@ (3400fd08 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400fcf6:	430b      	orrs	r3, r1
3400fcf8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400fcfc:	f7fb fcba 	bl	3400b674 <LL_RCC_IC7_Enable>
3400fd00:	e067      	b.n	3400fdd2 <HAL_RCCEx_PeriphCLKConfig+0x409a>
3400fd02:	bf00      	nop
3400fd04:	3401d6f8 	.word	0x3401d6f8
3400fd08:	56028000 	.word	0x56028000
3400fd0c:	07001418 	.word	0x07001418
3400fd10:	07011418 	.word	0x07011418
3400fd14:	07021418 	.word	0x07021418
3400fd18:	07031418 	.word	0x07031418
3400fd1c:	07041418 	.word	0x07041418
3400fd20:	07051418 	.word	0x07051418
3400fd24:	07061418 	.word	0x07061418
3400fd28:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3400fd2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd30:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fd34:	4b9c      	ldr	r3, [pc, #624]	@ (3400ffa8 <HAL_RCCEx_PeriphCLKConfig+0x4270>)
3400fd36:	429a      	cmp	r2, r3
3400fd38:	d142      	bne.n	3400fdc0 <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400fd3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fd40:	2b00      	cmp	r3, #0
3400fd42:	d016      	beq.n	3400fd72 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400fd44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fd4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fd4e:	d010      	beq.n	3400fd72 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400fd50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fd56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fd5a:	d00a      	beq.n	3400fd72 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400fd5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400fd62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fd66:	d004      	beq.n	3400fd72 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400fd68:	f240 5197 	movw	r1, #1431	@ 0x597
3400fd6c:	488f      	ldr	r0, [pc, #572]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400fd6e:	f7f1 fc2f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400fd72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fd78:	2b00      	cmp	r3, #0
3400fd7a:	d005      	beq.n	3400fd88 <HAL_RCCEx_PeriphCLKConfig+0x4050>
3400fd7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fd82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fd86:	d904      	bls.n	3400fd92 <HAL_RCCEx_PeriphCLKConfig+0x405a>
3400fd88:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
3400fd8c:	4887      	ldr	r0, [pc, #540]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400fd8e:	f7f1 fc1f 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400fd92:	4b87      	ldr	r3, [pc, #540]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400fd94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400fd98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fd9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fda0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fda4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400fda6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400fdac:	3b01      	subs	r3, #1
3400fdae:	041b      	lsls	r3, r3, #16
3400fdb0:	4313      	orrs	r3, r2
3400fdb2:	4a7f      	ldr	r2, [pc, #508]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400fdb4:	430b      	orrs	r3, r1
3400fdb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400fdba:	f7fb fc9b 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3400fdbe:	e008      	b.n	3400fdd2 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3400fdc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdc4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400fdc8:	4b7a      	ldr	r3, [pc, #488]	@ (3400ffb4 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3400fdca:	429a      	cmp	r2, r3
3400fdcc:	d101      	bne.n	3400fdd2 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
3400fdce:	f7fb ff91 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3400fdd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdd6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3400fdda:	4618      	mov	r0, r3
3400fddc:	f7fa fef6 	bl	3400abcc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400fde0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fde8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400fdec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3400fdf0:	2300      	movs	r3, #0
3400fdf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3400fdf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3400fdfa:	4603      	mov	r3, r0
3400fdfc:	460a      	mov	r2, r1
3400fdfe:	4313      	orrs	r3, r2
3400fe00:	f000 80fa 	beq.w	3400fff8 <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400fe04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe08:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe0c:	4b6a      	ldr	r3, [pc, #424]	@ (3400ffb8 <HAL_RCCEx_PeriphCLKConfig+0x4280>)
3400fe0e:	429a      	cmp	r2, r3
3400fe10:	d035      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe16:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe1a:	4b68      	ldr	r3, [pc, #416]	@ (3400ffbc <HAL_RCCEx_PeriphCLKConfig+0x4284>)
3400fe1c:	429a      	cmp	r2, r3
3400fe1e:	d02e      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe24:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe28:	4b65      	ldr	r3, [pc, #404]	@ (3400ffc0 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400fe2a:	429a      	cmp	r2, r3
3400fe2c:	d027      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe32:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe36:	4b63      	ldr	r3, [pc, #396]	@ (3400ffc4 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400fe38:	429a      	cmp	r2, r3
3400fe3a:	d020      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe40:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe44:	4b60      	ldr	r3, [pc, #384]	@ (3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3400fe46:	429a      	cmp	r2, r3
3400fe48:	d019      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe4e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe52:	4b5e      	ldr	r3, [pc, #376]	@ (3400ffcc <HAL_RCCEx_PeriphCLKConfig+0x4294>)
3400fe54:	429a      	cmp	r2, r3
3400fe56:	d012      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe5c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe60:	4b5b      	ldr	r3, [pc, #364]	@ (3400ffd0 <HAL_RCCEx_PeriphCLKConfig+0x4298>)
3400fe62:	429a      	cmp	r2, r3
3400fe64:	d00b      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe6a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe6e:	4b59      	ldr	r3, [pc, #356]	@ (3400ffd4 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
3400fe70:	429a      	cmp	r2, r3
3400fe72:	d004      	beq.n	3400fe7e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400fe74:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400fe78:	484c      	ldr	r0, [pc, #304]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400fe7a:	f7f1 fba9 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400fe7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe82:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400fe86:	4b4e      	ldr	r3, [pc, #312]	@ (3400ffc0 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400fe88:	429a      	cmp	r2, r3
3400fe8a:	d142      	bne.n	3400ff12 <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400fe8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fe92:	2b00      	cmp	r3, #0
3400fe94:	d016      	beq.n	3400fec4 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400fe96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fe9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fea0:	d010      	beq.n	3400fec4 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400fea2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400fea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400feac:	d00a      	beq.n	3400fec4 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400feae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400feb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400feb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400feb8:	d004      	beq.n	3400fec4 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400feba:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400febe:	483b      	ldr	r0, [pc, #236]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400fec0:	f7f1 fb86 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400fec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400feca:	2b00      	cmp	r3, #0
3400fecc:	d005      	beq.n	3400feda <HAL_RCCEx_PeriphCLKConfig+0x41a2>
3400fece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400fed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fed8:	d904      	bls.n	3400fee4 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3400feda:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400fede:	4833      	ldr	r0, [pc, #204]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400fee0:	f7f1 fb76 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400fee4:	4b32      	ldr	r3, [pc, #200]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400fee6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400feea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400feee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fef2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400fef8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fefc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400fefe:	3b01      	subs	r3, #1
3400ff00:	041b      	lsls	r3, r3, #16
3400ff02:	4313      	orrs	r3, r2
3400ff04:	4a2a      	ldr	r2, [pc, #168]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400ff06:	430b      	orrs	r3, r1
3400ff08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400ff0c:	f7fb fbb2 	bl	3400b674 <LL_RCC_IC7_Enable>
3400ff10:	e06b      	b.n	3400ffea <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3400ff12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff16:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400ff1a:	4b2a      	ldr	r3, [pc, #168]	@ (3400ffc4 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400ff1c:	429a      	cmp	r2, r3
3400ff1e:	d15b      	bne.n	3400ffd8 <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400ff20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ff26:	2b00      	cmp	r3, #0
3400ff28:	d016      	beq.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400ff2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ff30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ff34:	d010      	beq.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400ff36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ff3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ff40:	d00a      	beq.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400ff42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ff48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ff4c:	d004      	beq.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400ff4e:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400ff52:	4816      	ldr	r0, [pc, #88]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400ff54:	f7f1 fb3c 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400ff58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400ff5e:	2b00      	cmp	r3, #0
3400ff60:	d005      	beq.n	3400ff6e <HAL_RCCEx_PeriphCLKConfig+0x4236>
3400ff62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400ff68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ff6c:	d904      	bls.n	3400ff78 <HAL_RCCEx_PeriphCLKConfig+0x4240>
3400ff6e:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400ff72:	480e      	ldr	r0, [pc, #56]	@ (3400ffac <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400ff74:	f7f1 fb2c 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400ff78:	4b0d      	ldr	r3, [pc, #52]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400ff7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400ff7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ff82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ff86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400ff8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400ff92:	3b01      	subs	r3, #1
3400ff94:	041b      	lsls	r3, r3, #16
3400ff96:	4313      	orrs	r3, r2
3400ff98:	4a05      	ldr	r2, [pc, #20]	@ (3400ffb0 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400ff9a:	430b      	orrs	r3, r1
3400ff9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400ffa0:	f7fb fba8 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3400ffa4:	e021      	b.n	3400ffea <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3400ffa6:	bf00      	nop
3400ffa8:	07031418 	.word	0x07031418
3400ffac:	3401d6f8 	.word	0x3401d6f8
3400ffb0:	56028000 	.word	0x56028000
3400ffb4:	07011418 	.word	0x07011418
3400ffb8:	07001818 	.word	0x07001818
3400ffbc:	07011818 	.word	0x07011818
3400ffc0:	07021818 	.word	0x07021818
3400ffc4:	07031818 	.word	0x07031818
3400ffc8:	07041818 	.word	0x07041818
3400ffcc:	07051818 	.word	0x07051818
3400ffd0:	07061818 	.word	0x07061818
3400ffd4:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3400ffd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffdc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400ffe0:	4b6f      	ldr	r3, [pc, #444]	@ (340101a0 <HAL_RCCEx_PeriphCLKConfig+0x4468>)
3400ffe2:	429a      	cmp	r2, r3
3400ffe4:	d101      	bne.n	3400ffea <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
3400ffe6:	f7fb fe85 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3400ffea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffee:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3400fff2:	4618      	mov	r0, r3
3400fff4:	f7fa fdea 	bl	3400abcc <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3400fff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
34010000:	2100      	movs	r1, #0
34010002:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34010006:	f003 0301 	and.w	r3, r3, #1
3401000a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3401000e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34010012:	4603      	mov	r3, r0
34010014:	460a      	mov	r2, r1
34010016:	4313      	orrs	r3, r2
34010018:	f000 80d7 	beq.w	340101ca <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3401001c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010020:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010024:	2b00      	cmp	r3, #0
34010026:	d028      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010028:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401002c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010030:	2b01      	cmp	r3, #1
34010032:	d022      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010038:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3401003c:	2b02      	cmp	r3, #2
3401003e:	d01c      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010040:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010044:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010048:	2b03      	cmp	r3, #3
3401004a:	d016      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3401004c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010050:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010054:	2b04      	cmp	r3, #4
34010056:	d010      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401005c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010060:	2b05      	cmp	r3, #5
34010062:	d00a      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010068:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3401006c:	2b06      	cmp	r3, #6
3401006e:	d004      	beq.n	3401007a <HAL_RCCEx_PeriphCLKConfig+0x4342>
34010070:	f240 51df 	movw	r1, #1503	@ 0x5df
34010074:	484b      	ldr	r0, [pc, #300]	@ (340101a4 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
34010076:	f7f1 faab 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3401007a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401007e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010082:	2b02      	cmp	r3, #2
34010084:	d142      	bne.n	3401010c <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34010086:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401008a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401008c:	2b00      	cmp	r3, #0
3401008e:	d016      	beq.n	340100be <HAL_RCCEx_PeriphCLKConfig+0x4386>
34010090:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34010096:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401009a:	d010      	beq.n	340100be <HAL_RCCEx_PeriphCLKConfig+0x4386>
3401009c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340100a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340100a6:	d00a      	beq.n	340100be <HAL_RCCEx_PeriphCLKConfig+0x4386>
340100a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340100ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340100b2:	d004      	beq.n	340100be <HAL_RCCEx_PeriphCLKConfig+0x4386>
340100b4:	f240 51e4 	movw	r1, #1508	@ 0x5e4
340100b8:	483a      	ldr	r0, [pc, #232]	@ (340101a4 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
340100ba:	f7f1 fa89 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340100be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340100c4:	2b00      	cmp	r3, #0
340100c6:	d005      	beq.n	340100d4 <HAL_RCCEx_PeriphCLKConfig+0x439c>
340100c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340100ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340100d2:	d904      	bls.n	340100de <HAL_RCCEx_PeriphCLKConfig+0x43a6>
340100d4:	f240 51e5 	movw	r1, #1509	@ 0x5e5
340100d8:	4832      	ldr	r0, [pc, #200]	@ (340101a4 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
340100da:	f7f1 fa79 	bl	340015d0 <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340100de:	4b32      	ldr	r3, [pc, #200]	@ (340101a8 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
340100e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
340100e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340100e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340100ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340100f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340100f8:	3b01      	subs	r3, #1
340100fa:	041b      	lsls	r3, r3, #16
340100fc:	4313      	orrs	r3, r2
340100fe:	4a2a      	ldr	r2, [pc, #168]	@ (340101a8 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
34010100:	430b      	orrs	r3, r1
34010102:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34010106:	f7fb fab5 	bl	3400b674 <LL_RCC_IC7_Enable>
3401010a:	e057      	b.n	340101bc <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3401010c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010110:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34010114:	2b03      	cmp	r3, #3
34010116:	d149      	bne.n	340101ac <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34010118:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401011c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401011e:	2b00      	cmp	r3, #0
34010120:	d016      	beq.n	34010150 <HAL_RCCEx_PeriphCLKConfig+0x4418>
34010122:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401012c:	d010      	beq.n	34010150 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3401012e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010138:	d00a      	beq.n	34010150 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3401013a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401013e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010140:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010144:	d004      	beq.n	34010150 <HAL_RCCEx_PeriphCLKConfig+0x4418>
34010146:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3401014a:	4816      	ldr	r0, [pc, #88]	@ (340101a4 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3401014c:	f7f1 fa40 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34010150:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010156:	2b00      	cmp	r3, #0
34010158:	d005      	beq.n	34010166 <HAL_RCCEx_PeriphCLKConfig+0x442e>
3401015a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401015e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010164:	d904      	bls.n	34010170 <HAL_RCCEx_PeriphCLKConfig+0x4438>
34010166:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3401016a:	480e      	ldr	r0, [pc, #56]	@ (340101a4 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3401016c:	f7f1 fa30 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34010170:	4b0d      	ldr	r3, [pc, #52]	@ (340101a8 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
34010172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34010176:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3401017a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3401017e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34010184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401018a:	3b01      	subs	r3, #1
3401018c:	041b      	lsls	r3, r3, #16
3401018e:	4313      	orrs	r3, r2
34010190:	4a05      	ldr	r2, [pc, #20]	@ (340101a8 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
34010192:	430b      	orrs	r3, r1
34010194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34010198:	f7fb faac 	bl	3400b6f4 <LL_RCC_IC8_Enable>
3401019c:	e00e      	b.n	340101bc <HAL_RCCEx_PeriphCLKConfig+0x4484>
3401019e:	bf00      	nop
340101a0:	07011818 	.word	0x07011818
340101a4:	3401d6f8 	.word	0x3401d6f8
340101a8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
340101ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
340101b4:	2b01      	cmp	r3, #1
340101b6:	d101      	bne.n	340101bc <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
340101b8:	f7fb fd9c 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
340101bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
340101c4:	4618      	mov	r0, r3
340101c6:	f7fa fd17 	bl	3400abf8 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
340101ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
340101d2:	2100      	movs	r1, #0
340101d4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
340101d8:	f003 0302 	and.w	r3, r3, #2
340101dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
340101e0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
340101e4:	4603      	mov	r3, r0
340101e6:	460a      	mov	r2, r1
340101e8:	4313      	orrs	r3, r2
340101ea:	f000 80da 	beq.w	340103a2 <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
340101ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101f2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
340101f6:	4bb4      	ldr	r3, [pc, #720]	@ (340104c8 <HAL_RCCEx_PeriphCLKConfig+0x4790>)
340101f8:	429a      	cmp	r2, r3
340101fa:	d02e      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
340101fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010200:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34010204:	4bb1      	ldr	r3, [pc, #708]	@ (340104cc <HAL_RCCEx_PeriphCLKConfig+0x4794>)
34010206:	429a      	cmp	r2, r3
34010208:	d027      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3401020a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401020e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34010212:	4baf      	ldr	r3, [pc, #700]	@ (340104d0 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
34010214:	429a      	cmp	r2, r3
34010216:	d020      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
34010218:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401021c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34010220:	4bac      	ldr	r3, [pc, #688]	@ (340104d4 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
34010222:	429a      	cmp	r2, r3
34010224:	d019      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
34010226:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401022a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3401022e:	4baa      	ldr	r3, [pc, #680]	@ (340104d8 <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
34010230:	429a      	cmp	r2, r3
34010232:	d012      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
34010234:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010238:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3401023c:	4ba7      	ldr	r3, [pc, #668]	@ (340104dc <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
3401023e:	429a      	cmp	r2, r3
34010240:	d00b      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
34010242:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010246:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3401024a:	4ba5      	ldr	r3, [pc, #660]	@ (340104e0 <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
3401024c:	429a      	cmp	r2, r3
3401024e:	d004      	beq.n	3401025a <HAL_RCCEx_PeriphCLKConfig+0x4522>
34010250:	f240 610c 	movw	r1, #1548	@ 0x60c
34010254:	48a3      	ldr	r0, [pc, #652]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34010256:	f7f1 f9bb 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3401025a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401025e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34010262:	4b9b      	ldr	r3, [pc, #620]	@ (340104d0 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
34010264:	429a      	cmp	r2, r3
34010266:	d142      	bne.n	340102ee <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34010268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401026c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401026e:	2b00      	cmp	r3, #0
34010270:	d016      	beq.n	340102a0 <HAL_RCCEx_PeriphCLKConfig+0x4568>
34010272:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401027c:	d010      	beq.n	340102a0 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3401027e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010288:	d00a      	beq.n	340102a0 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3401028a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401028e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010290:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010294:	d004      	beq.n	340102a0 <HAL_RCCEx_PeriphCLKConfig+0x4568>
34010296:	f240 6111 	movw	r1, #1553	@ 0x611
3401029a:	4892      	ldr	r0, [pc, #584]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3401029c:	f7f1 f998 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340102a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340102a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340102a6:	2b00      	cmp	r3, #0
340102a8:	d005      	beq.n	340102b6 <HAL_RCCEx_PeriphCLKConfig+0x457e>
340102aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340102ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340102b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340102b4:	d904      	bls.n	340102c0 <HAL_RCCEx_PeriphCLKConfig+0x4588>
340102b6:	f240 6112 	movw	r1, #1554	@ 0x612
340102ba:	488a      	ldr	r0, [pc, #552]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
340102bc:	f7f1 f988 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340102c0:	4b89      	ldr	r3, [pc, #548]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
340102c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340102c6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340102ca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340102ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340102d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
340102d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340102d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340102da:	3b01      	subs	r3, #1
340102dc:	041b      	lsls	r3, r3, #16
340102de:	4313      	orrs	r3, r2
340102e0:	4a81      	ldr	r2, [pc, #516]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
340102e2:	430b      	orrs	r3, r1
340102e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
340102e8:	f7fb fa04 	bl	3400b6f4 <LL_RCC_IC8_Enable>
340102ec:	e052      	b.n	34010394 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
340102ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340102f2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
340102f6:	4b77      	ldr	r3, [pc, #476]	@ (340104d4 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
340102f8:	429a      	cmp	r2, r3
340102fa:	d142      	bne.n	34010382 <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340102fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010302:	2b00      	cmp	r3, #0
34010304:	d016      	beq.n	34010334 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
34010306:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401030a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401030c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010310:	d010      	beq.n	34010334 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
34010312:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401031c:	d00a      	beq.n	34010334 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3401031e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010324:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010328:	d004      	beq.n	34010334 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3401032a:	f240 611e 	movw	r1, #1566	@ 0x61e
3401032e:	486d      	ldr	r0, [pc, #436]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34010330:	f7f1 f94e 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010334:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401033a:	2b00      	cmp	r3, #0
3401033c:	d005      	beq.n	3401034a <HAL_RCCEx_PeriphCLKConfig+0x4612>
3401033e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010348:	d904      	bls.n	34010354 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3401034a:	f240 611f 	movw	r1, #1567	@ 0x61f
3401034e:	4865      	ldr	r0, [pc, #404]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34010350:	f7f1 f93e 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34010354:	4b64      	ldr	r3, [pc, #400]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
34010356:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3401035a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3401035e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010362:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010366:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010368:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401036c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401036e:	3b01      	subs	r3, #1
34010370:	041b      	lsls	r3, r3, #16
34010372:	4313      	orrs	r3, r2
34010374:	4a5c      	ldr	r2, [pc, #368]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
34010376:	430b      	orrs	r3, r1
34010378:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3401037c:	f7fb f9fa 	bl	3400b774 <LL_RCC_IC9_Enable>
34010380:	e008      	b.n	34010394 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34010382:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010386:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3401038a:	4b50      	ldr	r3, [pc, #320]	@ (340104cc <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3401038c:	429a      	cmp	r2, r3
3401038e:	d101      	bne.n	34010394 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
34010390:	f7fb fcb0 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
34010394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010398:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3401039c:	4618      	mov	r0, r3
3401039e:	f7fa fc41 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
340103a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
340103aa:	2100      	movs	r1, #0
340103ac:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
340103b0:	f003 0304 	and.w	r3, r3, #4
340103b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
340103b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
340103bc:	4603      	mov	r3, r0
340103be:	460a      	mov	r2, r1
340103c0:	4313      	orrs	r3, r2
340103c2:	f000 80fb 	beq.w	340105bc <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
340103c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340103ca:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
340103ce:	4b47      	ldr	r3, [pc, #284]	@ (340104ec <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
340103d0:	429a      	cmp	r2, r3
340103d2:	d02e      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
340103d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340103d8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
340103dc:	4b44      	ldr	r3, [pc, #272]	@ (340104f0 <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
340103de:	429a      	cmp	r2, r3
340103e0:	d027      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
340103e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340103e6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
340103ea:	4b42      	ldr	r3, [pc, #264]	@ (340104f4 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
340103ec:	429a      	cmp	r2, r3
340103ee:	d020      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
340103f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340103f4:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
340103f8:	4b3f      	ldr	r3, [pc, #252]	@ (340104f8 <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
340103fa:	429a      	cmp	r2, r3
340103fc:	d019      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
340103fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010402:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34010406:	4b3d      	ldr	r3, [pc, #244]	@ (340104fc <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
34010408:	429a      	cmp	r2, r3
3401040a:	d012      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3401040c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010410:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34010414:	4b3a      	ldr	r3, [pc, #232]	@ (34010500 <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
34010416:	429a      	cmp	r2, r3
34010418:	d00b      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3401041a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401041e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34010422:	4b38      	ldr	r3, [pc, #224]	@ (34010504 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
34010424:	429a      	cmp	r2, r3
34010426:	d004      	beq.n	34010432 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
34010428:	f240 6139 	movw	r1, #1593	@ 0x639
3401042c:	482d      	ldr	r0, [pc, #180]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3401042e:	f7f1 f8cf 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34010432:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010436:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3401043a:	4b2e      	ldr	r3, [pc, #184]	@ (340104f4 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3401043c:	429a      	cmp	r2, r3
3401043e:	d163      	bne.n	34010508 <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34010440:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010446:	2b00      	cmp	r3, #0
34010448:	d016      	beq.n	34010478 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3401044a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401044e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010454:	d010      	beq.n	34010478 <HAL_RCCEx_PeriphCLKConfig+0x4740>
34010456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401045a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401045c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010460:	d00a      	beq.n	34010478 <HAL_RCCEx_PeriphCLKConfig+0x4740>
34010462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010468:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401046c:	d004      	beq.n	34010478 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3401046e:	f240 613e 	movw	r1, #1598	@ 0x63e
34010472:	481c      	ldr	r0, [pc, #112]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34010474:	f7f1 f8ac 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34010478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401047c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401047e:	2b00      	cmp	r3, #0
34010480:	d005      	beq.n	3401048e <HAL_RCCEx_PeriphCLKConfig+0x4756>
34010482:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401048c:	d904      	bls.n	34010498 <HAL_RCCEx_PeriphCLKConfig+0x4760>
3401048e:	f240 613f 	movw	r1, #1599	@ 0x63f
34010492:	4814      	ldr	r0, [pc, #80]	@ (340104e4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
34010494:	f7f1 f89c 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34010498:	4b13      	ldr	r3, [pc, #76]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3401049a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3401049e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340104a2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340104a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340104aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
340104ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340104b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340104b2:	3b01      	subs	r3, #1
340104b4:	041b      	lsls	r3, r3, #16
340104b6:	4313      	orrs	r3, r2
340104b8:	4a0b      	ldr	r2, [pc, #44]	@ (340104e8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
340104ba:	430b      	orrs	r3, r1
340104bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
340104c0:	f7fb f918 	bl	3400b6f4 <LL_RCC_IC8_Enable>
340104c4:	e073      	b.n	340105ae <HAL_RCCEx_PeriphCLKConfig+0x4876>
340104c6:	bf00      	nop
340104c8:	07000420 	.word	0x07000420
340104cc:	07010420 	.word	0x07010420
340104d0:	07020420 	.word	0x07020420
340104d4:	07030420 	.word	0x07030420
340104d8:	07040420 	.word	0x07040420
340104dc:	07050420 	.word	0x07050420
340104e0:	07060420 	.word	0x07060420
340104e4:	3401d6f8 	.word	0x3401d6f8
340104e8:	56028000 	.word	0x56028000
340104ec:	07000820 	.word	0x07000820
340104f0:	07010820 	.word	0x07010820
340104f4:	07020820 	.word	0x07020820
340104f8:	07030820 	.word	0x07030820
340104fc:	07040820 	.word	0x07040820
34010500:	07050820 	.word	0x07050820
34010504:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34010508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401050c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34010510:	4b98      	ldr	r3, [pc, #608]	@ (34010774 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
34010512:	429a      	cmp	r2, r3
34010514:	d142      	bne.n	3401059c <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34010516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401051a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401051c:	2b00      	cmp	r3, #0
3401051e:	d016      	beq.n	3401054e <HAL_RCCEx_PeriphCLKConfig+0x4816>
34010520:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401052a:	d010      	beq.n	3401054e <HAL_RCCEx_PeriphCLKConfig+0x4816>
3401052c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010536:	d00a      	beq.n	3401054e <HAL_RCCEx_PeriphCLKConfig+0x4816>
34010538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401053c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401053e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010542:	d004      	beq.n	3401054e <HAL_RCCEx_PeriphCLKConfig+0x4816>
34010544:	f240 614b 	movw	r1, #1611	@ 0x64b
34010548:	488b      	ldr	r0, [pc, #556]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3401054a:	f7f1 f841 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401054e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010554:	2b00      	cmp	r3, #0
34010556:	d005      	beq.n	34010564 <HAL_RCCEx_PeriphCLKConfig+0x482c>
34010558:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401055e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010562:	d904      	bls.n	3401056e <HAL_RCCEx_PeriphCLKConfig+0x4836>
34010564:	f240 614c 	movw	r1, #1612	@ 0x64c
34010568:	4883      	ldr	r0, [pc, #524]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3401056a:	f7f1 f831 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401056e:	4b83      	ldr	r3, [pc, #524]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34010570:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34010574:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010578:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3401057c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010580:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010582:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010588:	3b01      	subs	r3, #1
3401058a:	041b      	lsls	r3, r3, #16
3401058c:	4313      	orrs	r3, r2
3401058e:	4a7b      	ldr	r2, [pc, #492]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34010590:	430b      	orrs	r3, r1
34010592:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34010596:	f7fb f8ed 	bl	3400b774 <LL_RCC_IC9_Enable>
3401059a:	e008      	b.n	340105ae <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3401059c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340105a0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
340105a4:	4b76      	ldr	r3, [pc, #472]	@ (34010780 <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
340105a6:	429a      	cmp	r2, r3
340105a8:	d101      	bne.n	340105ae <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
340105aa:	f7fb fba3 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
340105ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340105b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
340105b6:	4618      	mov	r0, r3
340105b8:	f7fa fb34 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
340105bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
340105c4:	2100      	movs	r1, #0
340105c6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
340105ca:	f003 0308 	and.w	r3, r3, #8
340105ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
340105d2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
340105d6:	4603      	mov	r3, r0
340105d8:	460a      	mov	r2, r1
340105da:	4313      	orrs	r3, r2
340105dc:	f000 80f0 	beq.w	340107c0 <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
340105e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340105e4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
340105e8:	4b66      	ldr	r3, [pc, #408]	@ (34010784 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
340105ea:	429a      	cmp	r2, r3
340105ec:	d02e      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
340105ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340105f2:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
340105f6:	4b64      	ldr	r3, [pc, #400]	@ (34010788 <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
340105f8:	429a      	cmp	r2, r3
340105fa:	d027      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
340105fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010600:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34010604:	4b61      	ldr	r3, [pc, #388]	@ (3401078c <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
34010606:	429a      	cmp	r2, r3
34010608:	d020      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3401060a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401060e:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34010612:	4b5f      	ldr	r3, [pc, #380]	@ (34010790 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
34010614:	429a      	cmp	r2, r3
34010616:	d019      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
34010618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401061c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34010620:	4b5c      	ldr	r3, [pc, #368]	@ (34010794 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
34010622:	429a      	cmp	r2, r3
34010624:	d012      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
34010626:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401062a:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3401062e:	4b5a      	ldr	r3, [pc, #360]	@ (34010798 <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
34010630:	429a      	cmp	r2, r3
34010632:	d00b      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
34010634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010638:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3401063c:	4b57      	ldr	r3, [pc, #348]	@ (3401079c <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
3401063e:	429a      	cmp	r2, r3
34010640:	d004      	beq.n	3401064c <HAL_RCCEx_PeriphCLKConfig+0x4914>
34010642:	f240 6166 	movw	r1, #1638	@ 0x666
34010646:	484c      	ldr	r0, [pc, #304]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34010648:	f7f0 ffc2 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3401064c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010650:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34010654:	4b4d      	ldr	r3, [pc, #308]	@ (3401078c <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
34010656:	429a      	cmp	r2, r3
34010658:	d142      	bne.n	340106e0 <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3401065a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010660:	2b00      	cmp	r3, #0
34010662:	d016      	beq.n	34010692 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34010664:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401066a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401066e:	d010      	beq.n	34010692 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34010670:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401067a:	d00a      	beq.n	34010692 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3401067c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010682:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010686:	d004      	beq.n	34010692 <HAL_RCCEx_PeriphCLKConfig+0x495a>
34010688:	f240 616b 	movw	r1, #1643	@ 0x66b
3401068c:	483a      	ldr	r0, [pc, #232]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3401068e:	f7f0 ff9f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34010692:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010698:	2b00      	cmp	r3, #0
3401069a:	d005      	beq.n	340106a8 <HAL_RCCEx_PeriphCLKConfig+0x4970>
3401069c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340106a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340106a6:	d904      	bls.n	340106b2 <HAL_RCCEx_PeriphCLKConfig+0x497a>
340106a8:	f240 616c 	movw	r1, #1644	@ 0x66c
340106ac:	4832      	ldr	r0, [pc, #200]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
340106ae:	f7f0 ff8f 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340106b2:	4b32      	ldr	r3, [pc, #200]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
340106b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340106b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340106bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340106c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
340106c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340106cc:	3b01      	subs	r3, #1
340106ce:	041b      	lsls	r3, r3, #16
340106d0:	4313      	orrs	r3, r2
340106d2:	4a2a      	ldr	r2, [pc, #168]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
340106d4:	430b      	orrs	r3, r1
340106d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
340106da:	f7fb f80b 	bl	3400b6f4 <LL_RCC_IC8_Enable>
340106de:	e068      	b.n	340107b2 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
340106e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106e4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
340106e8:	4b29      	ldr	r3, [pc, #164]	@ (34010790 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
340106ea:	429a      	cmp	r2, r3
340106ec:	d158      	bne.n	340107a0 <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340106ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340106f4:	2b00      	cmp	r3, #0
340106f6:	d016      	beq.n	34010726 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
340106f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340106fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340106fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010702:	d010      	beq.n	34010726 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34010704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401070a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401070e:	d00a      	beq.n	34010726 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
34010710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010716:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401071a:	d004      	beq.n	34010726 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3401071c:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34010720:	4815      	ldr	r0, [pc, #84]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34010722:	f7f0 ff55 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010726:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401072a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401072c:	2b00      	cmp	r3, #0
3401072e:	d005      	beq.n	3401073c <HAL_RCCEx_PeriphCLKConfig+0x4a04>
34010730:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401073a:	d904      	bls.n	34010746 <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
3401073c:	f240 6179 	movw	r1, #1657	@ 0x679
34010740:	480d      	ldr	r0, [pc, #52]	@ (34010778 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
34010742:	f7f0 ff45 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34010746:	4b0d      	ldr	r3, [pc, #52]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34010748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3401074c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010750:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010754:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010758:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3401075a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010760:	3b01      	subs	r3, #1
34010762:	041b      	lsls	r3, r3, #16
34010764:	4313      	orrs	r3, r2
34010766:	4a05      	ldr	r2, [pc, #20]	@ (3401077c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
34010768:	430b      	orrs	r3, r1
3401076a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3401076e:	f7fb f801 	bl	3400b774 <LL_RCC_IC9_Enable>
34010772:	e01e      	b.n	340107b2 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
34010774:	07030820 	.word	0x07030820
34010778:	3401d6f8 	.word	0x3401d6f8
3401077c:	56028000 	.word	0x56028000
34010780:	07010820 	.word	0x07010820
34010784:	07000c20 	.word	0x07000c20
34010788:	07010c20 	.word	0x07010c20
3401078c:	07020c20 	.word	0x07020c20
34010790:	07030c20 	.word	0x07030c20
34010794:	07040c20 	.word	0x07040c20
34010798:	07050c20 	.word	0x07050c20
3401079c:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
340107a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340107a4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
340107a8:	4b73      	ldr	r3, [pc, #460]	@ (34010978 <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
340107aa:	429a      	cmp	r2, r3
340107ac:	d101      	bne.n	340107b2 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
340107ae:	f7fb faa1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
340107b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340107b6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
340107ba:	4618      	mov	r0, r3
340107bc:	f7fa fa32 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
340107c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
340107c8:	2100      	movs	r1, #0
340107ca:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
340107ce:	f003 0310 	and.w	r3, r3, #16
340107d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
340107d6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
340107da:	4603      	mov	r3, r0
340107dc:	460a      	mov	r2, r1
340107de:	4313      	orrs	r3, r2
340107e0:	f000 80ee 	beq.w	340109c0 <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
340107e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340107e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
340107ec:	4b63      	ldr	r3, [pc, #396]	@ (3401097c <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
340107ee:	429a      	cmp	r2, r3
340107f0:	d02e      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
340107f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340107f6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
340107fa:	4b61      	ldr	r3, [pc, #388]	@ (34010980 <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
340107fc:	429a      	cmp	r2, r3
340107fe:	d027      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34010800:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010804:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010808:	4b5e      	ldr	r3, [pc, #376]	@ (34010984 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3401080a:	429a      	cmp	r2, r3
3401080c:	d020      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3401080e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010812:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010816:	4b5c      	ldr	r3, [pc, #368]	@ (34010988 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
34010818:	429a      	cmp	r2, r3
3401081a:	d019      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3401081c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010820:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010824:	4b59      	ldr	r3, [pc, #356]	@ (3401098c <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
34010826:	429a      	cmp	r2, r3
34010828:	d012      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3401082a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401082e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010832:	4b57      	ldr	r3, [pc, #348]	@ (34010990 <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
34010834:	429a      	cmp	r2, r3
34010836:	d00b      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34010838:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401083c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010840:	4b54      	ldr	r3, [pc, #336]	@ (34010994 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
34010842:	429a      	cmp	r2, r3
34010844:	d004      	beq.n	34010850 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
34010846:	f240 6193 	movw	r1, #1683	@ 0x693
3401084a:	4853      	ldr	r0, [pc, #332]	@ (34010998 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3401084c:	f7f0 fec0 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34010850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010854:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34010858:	4b4a      	ldr	r3, [pc, #296]	@ (34010984 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3401085a:	429a      	cmp	r2, r3
3401085c:	d142      	bne.n	340108e4 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401085e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010864:	2b00      	cmp	r3, #0
34010866:	d016      	beq.n	34010896 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34010868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401086c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401086e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010872:	d010      	beq.n	34010896 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34010874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401087a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401087e:	d00a      	beq.n	34010896 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
34010880:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401088a:	d004      	beq.n	34010896 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3401088c:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34010890:	4841      	ldr	r0, [pc, #260]	@ (34010998 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34010892:	f7f0 fe9d 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010896:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401089c:	2b00      	cmp	r3, #0
3401089e:	d005      	beq.n	340108ac <HAL_RCCEx_PeriphCLKConfig+0x4b74>
340108a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340108a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340108a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340108aa:	d904      	bls.n	340108b6 <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
340108ac:	f240 6199 	movw	r1, #1689	@ 0x699
340108b0:	4839      	ldr	r0, [pc, #228]	@ (34010998 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
340108b2:	f7f0 fe8d 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340108b6:	4b39      	ldr	r3, [pc, #228]	@ (3401099c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
340108b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340108bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340108c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340108c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340108c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340108ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340108ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340108d0:	3b01      	subs	r3, #1
340108d2:	041b      	lsls	r3, r3, #16
340108d4:	4313      	orrs	r3, r2
340108d6:	4a31      	ldr	r2, [pc, #196]	@ (3401099c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
340108d8:	430b      	orrs	r3, r1
340108da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340108de:	f7fa ff49 	bl	3400b774 <LL_RCC_IC9_Enable>
340108e2:	e066      	b.n	340109b2 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
340108e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340108e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
340108ec:	4b26      	ldr	r3, [pc, #152]	@ (34010988 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
340108ee:	429a      	cmp	r2, r3
340108f0:	d156      	bne.n	340109a0 <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340108f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340108f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340108f8:	2b00      	cmp	r3, #0
340108fa:	d016      	beq.n	3401092a <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
340108fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010906:	d010      	beq.n	3401092a <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34010908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401090c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3401090e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010912:	d00a      	beq.n	3401092a <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34010914:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3401091a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401091e:	d004      	beq.n	3401092a <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
34010920:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34010924:	481c      	ldr	r0, [pc, #112]	@ (34010998 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34010926:	f7f0 fe53 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401092a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401092e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010930:	2b00      	cmp	r3, #0
34010932:	d005      	beq.n	34010940 <HAL_RCCEx_PeriphCLKConfig+0x4c08>
34010934:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401093a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401093e:	d904      	bls.n	3401094a <HAL_RCCEx_PeriphCLKConfig+0x4c12>
34010940:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34010944:	4814      	ldr	r0, [pc, #80]	@ (34010998 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
34010946:	f7f0 fe43 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401094a:	4b14      	ldr	r3, [pc, #80]	@ (3401099c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3401094c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34010950:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010954:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401095c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3401095e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010964:	3b01      	subs	r3, #1
34010966:	041b      	lsls	r3, r3, #16
34010968:	4313      	orrs	r3, r2
3401096a:	4a0c      	ldr	r2, [pc, #48]	@ (3401099c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3401096c:	430b      	orrs	r3, r1
3401096e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34010972:	f7fa ffff 	bl	3400b974 <LL_RCC_IC14_Enable>
34010976:	e01c      	b.n	340109b2 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
34010978:	07010c20 	.word	0x07010c20
3401097c:	07001020 	.word	0x07001020
34010980:	07011020 	.word	0x07011020
34010984:	07021020 	.word	0x07021020
34010988:	07031020 	.word	0x07031020
3401098c:	07041020 	.word	0x07041020
34010990:	07051020 	.word	0x07051020
34010994:	07061020 	.word	0x07061020
34010998:	3401d6f8 	.word	0x3401d6f8
3401099c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
340109a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340109a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
340109a8:	4b73      	ldr	r3, [pc, #460]	@ (34010b78 <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
340109aa:	429a      	cmp	r2, r3
340109ac:	d101      	bne.n	340109b2 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
340109ae:	f7fb f9a1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
340109b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340109b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
340109ba:	4618      	mov	r0, r3
340109bc:	f7fa f932 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
340109c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
340109c8:	2100      	movs	r1, #0
340109ca:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
340109ce:	f003 0320 	and.w	r3, r3, #32
340109d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
340109d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
340109da:	4603      	mov	r3, r0
340109dc:	460a      	mov	r2, r1
340109de:	4313      	orrs	r3, r2
340109e0:	f000 80ee 	beq.w	34010bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340109e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340109e8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
340109ec:	4b63      	ldr	r3, [pc, #396]	@ (34010b7c <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
340109ee:	429a      	cmp	r2, r3
340109f0:	d02e      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
340109f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340109f6:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
340109fa:	4b61      	ldr	r3, [pc, #388]	@ (34010b80 <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
340109fc:	429a      	cmp	r2, r3
340109fe:	d027      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a04:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a08:	4b5e      	ldr	r3, [pc, #376]	@ (34010b84 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
34010a0a:	429a      	cmp	r2, r3
34010a0c:	d020      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a12:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a16:	4b5c      	ldr	r3, [pc, #368]	@ (34010b88 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
34010a18:	429a      	cmp	r2, r3
34010a1a:	d019      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a20:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a24:	4b59      	ldr	r3, [pc, #356]	@ (34010b8c <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
34010a26:	429a      	cmp	r2, r3
34010a28:	d012      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a2e:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a32:	4b57      	ldr	r3, [pc, #348]	@ (34010b90 <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
34010a34:	429a      	cmp	r2, r3
34010a36:	d00b      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a3c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a40:	4b54      	ldr	r3, [pc, #336]	@ (34010b94 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
34010a42:	429a      	cmp	r2, r3
34010a44:	d004      	beq.n	34010a50 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
34010a46:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34010a4a:	4853      	ldr	r0, [pc, #332]	@ (34010b98 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34010a4c:	f7f0 fdc0 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34010a50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a54:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010a58:	4b4a      	ldr	r3, [pc, #296]	@ (34010b84 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
34010a5a:	429a      	cmp	r2, r3
34010a5c:	d142      	bne.n	34010ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34010a5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010a64:	2b00      	cmp	r3, #0
34010a66:	d016      	beq.n	34010a96 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34010a68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010a72:	d010      	beq.n	34010a96 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34010a74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010a7e:	d00a      	beq.n	34010a96 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34010a80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010a8a:	d004      	beq.n	34010a96 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
34010a8c:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34010a90:	4841      	ldr	r0, [pc, #260]	@ (34010b98 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34010a92:	f7f0 fd9d 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010a96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010a9c:	2b00      	cmp	r3, #0
34010a9e:	d005      	beq.n	34010aac <HAL_RCCEx_PeriphCLKConfig+0x4d74>
34010aa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010aaa:	d904      	bls.n	34010ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
34010aac:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34010ab0:	4839      	ldr	r0, [pc, #228]	@ (34010b98 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34010ab2:	f7f0 fd8d 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34010ab6:	4b39      	ldr	r3, [pc, #228]	@ (34010b9c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34010ab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34010abc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010ac0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010ac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010aca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010ad0:	3b01      	subs	r3, #1
34010ad2:	041b      	lsls	r3, r3, #16
34010ad4:	4313      	orrs	r3, r2
34010ad6:	4a31      	ldr	r2, [pc, #196]	@ (34010b9c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34010ad8:	430b      	orrs	r3, r1
34010ada:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34010ade:	f7fa fe49 	bl	3400b774 <LL_RCC_IC9_Enable>
34010ae2:	e066      	b.n	34010bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34010ae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ae8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010aec:	4b26      	ldr	r3, [pc, #152]	@ (34010b88 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
34010aee:	429a      	cmp	r2, r3
34010af0:	d156      	bne.n	34010ba0 <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34010af2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010af8:	2b00      	cmp	r3, #0
34010afa:	d016      	beq.n	34010b2a <HAL_RCCEx_PeriphCLKConfig+0x4df2>
34010afc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010b06:	d010      	beq.n	34010b2a <HAL_RCCEx_PeriphCLKConfig+0x4df2>
34010b08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010b12:	d00a      	beq.n	34010b2a <HAL_RCCEx_PeriphCLKConfig+0x4df2>
34010b14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010b1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010b1e:	d004      	beq.n	34010b2a <HAL_RCCEx_PeriphCLKConfig+0x4df2>
34010b20:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34010b24:	481c      	ldr	r0, [pc, #112]	@ (34010b98 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34010b26:	f7f0 fd53 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34010b2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010b30:	2b00      	cmp	r3, #0
34010b32:	d005      	beq.n	34010b40 <HAL_RCCEx_PeriphCLKConfig+0x4e08>
34010b34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010b3e:	d904      	bls.n	34010b4a <HAL_RCCEx_PeriphCLKConfig+0x4e12>
34010b40:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34010b44:	4814      	ldr	r0, [pc, #80]	@ (34010b98 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
34010b46:	f7f0 fd43 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34010b4a:	4b14      	ldr	r3, [pc, #80]	@ (34010b9c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34010b4c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34010b50:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010b54:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010b58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34010b5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010b64:	3b01      	subs	r3, #1
34010b66:	041b      	lsls	r3, r3, #16
34010b68:	4313      	orrs	r3, r2
34010b6a:	4a0c      	ldr	r2, [pc, #48]	@ (34010b9c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
34010b6c:	430b      	orrs	r3, r1
34010b6e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34010b72:	f7fa feff 	bl	3400b974 <LL_RCC_IC14_Enable>
34010b76:	e01c      	b.n	34010bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
34010b78:	07011020 	.word	0x07011020
34010b7c:	07001420 	.word	0x07001420
34010b80:	07011420 	.word	0x07011420
34010b84:	07021420 	.word	0x07021420
34010b88:	07031420 	.word	0x07031420
34010b8c:	07041420 	.word	0x07041420
34010b90:	07051420 	.word	0x07051420
34010b94:	07061420 	.word	0x07061420
34010b98:	3401d6f8 	.word	0x3401d6f8
34010b9c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34010ba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ba4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34010ba8:	4b72      	ldr	r3, [pc, #456]	@ (34010d74 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
34010baa:	429a      	cmp	r2, r3
34010bac:	d101      	bne.n	34010bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
34010bae:	f7fb f8a1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34010bb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010bb6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34010bba:	4618      	mov	r0, r3
34010bbc:	f7fa f832 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34010bc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
34010bc8:	2100      	movs	r1, #0
34010bca:	67b9      	str	r1, [r7, #120]	@ 0x78
34010bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34010bd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
34010bd2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34010bd6:	4603      	mov	r3, r0
34010bd8:	460a      	mov	r2, r1
34010bda:	4313      	orrs	r3, r2
34010bdc:	f000 80ee 	beq.w	34010dbc <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34010be0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010be4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010be8:	4b63      	ldr	r3, [pc, #396]	@ (34010d78 <HAL_RCCEx_PeriphCLKConfig+0x5040>)
34010bea:	429a      	cmp	r2, r3
34010bec:	d02e      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010bee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010bf2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010bf6:	4b61      	ldr	r3, [pc, #388]	@ (34010d7c <HAL_RCCEx_PeriphCLKConfig+0x5044>)
34010bf8:	429a      	cmp	r2, r3
34010bfa:	d027      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c00:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c04:	4b5e      	ldr	r3, [pc, #376]	@ (34010d80 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
34010c06:	429a      	cmp	r2, r3
34010c08:	d020      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010c0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c0e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c12:	4b5c      	ldr	r3, [pc, #368]	@ (34010d84 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
34010c14:	429a      	cmp	r2, r3
34010c16:	d019      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010c18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c1c:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c20:	4b59      	ldr	r3, [pc, #356]	@ (34010d88 <HAL_RCCEx_PeriphCLKConfig+0x5050>)
34010c22:	429a      	cmp	r2, r3
34010c24:	d012      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010c26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c2a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c2e:	4b57      	ldr	r3, [pc, #348]	@ (34010d8c <HAL_RCCEx_PeriphCLKConfig+0x5054>)
34010c30:	429a      	cmp	r2, r3
34010c32:	d00b      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010c34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c38:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c3c:	4b54      	ldr	r3, [pc, #336]	@ (34010d90 <HAL_RCCEx_PeriphCLKConfig+0x5058>)
34010c3e:	429a      	cmp	r2, r3
34010c40:	d004      	beq.n	34010c4c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
34010c42:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34010c46:	4853      	ldr	r0, [pc, #332]	@ (34010d94 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34010c48:	f7f0 fcc2 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34010c4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c50:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010c54:	4b4a      	ldr	r3, [pc, #296]	@ (34010d80 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
34010c56:	429a      	cmp	r2, r3
34010c58:	d142      	bne.n	34010ce0 <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34010c5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010c60:	2b00      	cmp	r3, #0
34010c62:	d016      	beq.n	34010c92 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34010c64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010c6e:	d010      	beq.n	34010c92 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34010c70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010c7a:	d00a      	beq.n	34010c92 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34010c7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34010c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010c86:	d004      	beq.n	34010c92 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
34010c88:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34010c8c:	4841      	ldr	r0, [pc, #260]	@ (34010d94 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34010c8e:	f7f0 fc9f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34010c92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010c98:	2b00      	cmp	r3, #0
34010c9a:	d005      	beq.n	34010ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f70>
34010c9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010ca6:	d904      	bls.n	34010cb2 <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
34010ca8:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34010cac:	4839      	ldr	r0, [pc, #228]	@ (34010d94 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34010cae:	f7f0 fc8f 	bl	340015d0 <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34010cb2:	4b39      	ldr	r3, [pc, #228]	@ (34010d98 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34010cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34010cb8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010cbc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010cc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34010cc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34010ccc:	3b01      	subs	r3, #1
34010cce:	041b      	lsls	r3, r3, #16
34010cd0:	4313      	orrs	r3, r2
34010cd2:	4a31      	ldr	r2, [pc, #196]	@ (34010d98 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34010cd4:	430b      	orrs	r3, r1
34010cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34010cda:	f7fa fd0b 	bl	3400b6f4 <LL_RCC_IC8_Enable>
34010cde:	e066      	b.n	34010dae <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34010ce0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ce4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010ce8:	4b26      	ldr	r3, [pc, #152]	@ (34010d84 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
34010cea:	429a      	cmp	r2, r3
34010cec:	d156      	bne.n	34010d9c <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34010cee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010cf4:	2b00      	cmp	r3, #0
34010cf6:	d016      	beq.n	34010d26 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
34010cf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010d02:	d010      	beq.n	34010d26 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
34010d04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010d0e:	d00a      	beq.n	34010d26 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
34010d10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010d16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010d1a:	d004      	beq.n	34010d26 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
34010d1c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34010d20:	481c      	ldr	r0, [pc, #112]	@ (34010d94 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34010d22:	f7f0 fc55 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010d26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010d2c:	2b00      	cmp	r3, #0
34010d2e:	d005      	beq.n	34010d3c <HAL_RCCEx_PeriphCLKConfig+0x5004>
34010d30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010d3a:	d904      	bls.n	34010d46 <HAL_RCCEx_PeriphCLKConfig+0x500e>
34010d3c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34010d40:	4814      	ldr	r0, [pc, #80]	@ (34010d94 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
34010d42:	f7f0 fc45 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34010d46:	4b14      	ldr	r3, [pc, #80]	@ (34010d98 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34010d48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34010d4c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010d50:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010d54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010d5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010d60:	3b01      	subs	r3, #1
34010d62:	041b      	lsls	r3, r3, #16
34010d64:	4313      	orrs	r3, r2
34010d66:	4a0c      	ldr	r2, [pc, #48]	@ (34010d98 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
34010d68:	430b      	orrs	r3, r1
34010d6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34010d6e:	f7fa fd01 	bl	3400b774 <LL_RCC_IC9_Enable>
34010d72:	e01c      	b.n	34010dae <HAL_RCCEx_PeriphCLKConfig+0x5076>
34010d74:	07011420 	.word	0x07011420
34010d78:	07001820 	.word	0x07001820
34010d7c:	07011820 	.word	0x07011820
34010d80:	07021820 	.word	0x07021820
34010d84:	07031820 	.word	0x07031820
34010d88:	07041820 	.word	0x07041820
34010d8c:	07051820 	.word	0x07051820
34010d90:	07061820 	.word	0x07061820
34010d94:	3401d6f8 	.word	0x3401d6f8
34010d98:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34010d9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010da0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34010da4:	4b72      	ldr	r3, [pc, #456]	@ (34010f70 <HAL_RCCEx_PeriphCLKConfig+0x5238>)
34010da6:	429a      	cmp	r2, r3
34010da8:	d101      	bne.n	34010dae <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
34010daa:	f7fa ffa3 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34010dae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010db2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34010db6:	4618      	mov	r0, r3
34010db8:	f7f9 ff34 	bl	3400ac24 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34010dbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
34010dc4:	2100      	movs	r1, #0
34010dc6:	6739      	str	r1, [r7, #112]	@ 0x70
34010dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34010dcc:	677b      	str	r3, [r7, #116]	@ 0x74
34010dce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34010dd2:	4603      	mov	r3, r0
34010dd4:	460a      	mov	r2, r1
34010dd6:	4313      	orrs	r3, r2
34010dd8:	f000 80ee 	beq.w	34010fb8 <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34010ddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010de0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010de4:	4b63      	ldr	r3, [pc, #396]	@ (34010f74 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
34010de6:	429a      	cmp	r2, r3
34010de8:	d02e      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010dea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010dee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010df2:	4b61      	ldr	r3, [pc, #388]	@ (34010f78 <HAL_RCCEx_PeriphCLKConfig+0x5240>)
34010df4:	429a      	cmp	r2, r3
34010df6:	d027      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010df8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010dfc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e00:	4b5e      	ldr	r3, [pc, #376]	@ (34010f7c <HAL_RCCEx_PeriphCLKConfig+0x5244>)
34010e02:	429a      	cmp	r2, r3
34010e04:	d020      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010e06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e0a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e0e:	4b5c      	ldr	r3, [pc, #368]	@ (34010f80 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
34010e10:	429a      	cmp	r2, r3
34010e12:	d019      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010e14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e18:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e1c:	4b59      	ldr	r3, [pc, #356]	@ (34010f84 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
34010e1e:	429a      	cmp	r2, r3
34010e20:	d012      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010e22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e26:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e2a:	4b57      	ldr	r3, [pc, #348]	@ (34010f88 <HAL_RCCEx_PeriphCLKConfig+0x5250>)
34010e2c:	429a      	cmp	r2, r3
34010e2e:	d00b      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010e30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e34:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e38:	4b54      	ldr	r3, [pc, #336]	@ (34010f8c <HAL_RCCEx_PeriphCLKConfig+0x5254>)
34010e3a:	429a      	cmp	r2, r3
34010e3c:	d004      	beq.n	34010e48 <HAL_RCCEx_PeriphCLKConfig+0x5110>
34010e3e:	f240 711a 	movw	r1, #1818	@ 0x71a
34010e42:	4853      	ldr	r0, [pc, #332]	@ (34010f90 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34010e44:	f7f0 fbc4 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34010e48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e4c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010e50:	4b4a      	ldr	r3, [pc, #296]	@ (34010f7c <HAL_RCCEx_PeriphCLKConfig+0x5244>)
34010e52:	429a      	cmp	r2, r3
34010e54:	d142      	bne.n	34010edc <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34010e56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010e5c:	2b00      	cmp	r3, #0
34010e5e:	d016      	beq.n	34010e8e <HAL_RCCEx_PeriphCLKConfig+0x5156>
34010e60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010e66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010e6a:	d010      	beq.n	34010e8e <HAL_RCCEx_PeriphCLKConfig+0x5156>
34010e6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e76:	d00a      	beq.n	34010e8e <HAL_RCCEx_PeriphCLKConfig+0x5156>
34010e78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34010e7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e82:	d004      	beq.n	34010e8e <HAL_RCCEx_PeriphCLKConfig+0x5156>
34010e84:	f240 711f 	movw	r1, #1823	@ 0x71f
34010e88:	4841      	ldr	r0, [pc, #260]	@ (34010f90 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34010e8a:	f7f0 fba1 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34010e8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010e94:	2b00      	cmp	r3, #0
34010e96:	d005      	beq.n	34010ea4 <HAL_RCCEx_PeriphCLKConfig+0x516c>
34010e98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010ea2:	d904      	bls.n	34010eae <HAL_RCCEx_PeriphCLKConfig+0x5176>
34010ea4:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34010ea8:	4839      	ldr	r0, [pc, #228]	@ (34010f90 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34010eaa:	f7f0 fb91 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34010eae:	4b39      	ldr	r3, [pc, #228]	@ (34010f94 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34010eb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34010eb4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010eb8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010ebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010ec2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34010ec8:	3b01      	subs	r3, #1
34010eca:	041b      	lsls	r3, r3, #16
34010ecc:	4313      	orrs	r3, r2
34010ece:	4a31      	ldr	r2, [pc, #196]	@ (34010f94 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34010ed0:	430b      	orrs	r3, r1
34010ed2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34010ed6:	f7fa fc4d 	bl	3400b774 <LL_RCC_IC9_Enable>
34010eda:	e066      	b.n	34010faa <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34010edc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ee0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010ee4:	4b26      	ldr	r3, [pc, #152]	@ (34010f80 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
34010ee6:	429a      	cmp	r2, r3
34010ee8:	d156      	bne.n	34010f98 <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34010eea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010ef0:	2b00      	cmp	r3, #0
34010ef2:	d016      	beq.n	34010f22 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
34010ef4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010efe:	d010      	beq.n	34010f22 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
34010f00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010f0a:	d00a      	beq.n	34010f22 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
34010f0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34010f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010f16:	d004      	beq.n	34010f22 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
34010f18:	f240 712c 	movw	r1, #1836	@ 0x72c
34010f1c:	481c      	ldr	r0, [pc, #112]	@ (34010f90 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34010f1e:	f7f0 fb57 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34010f22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010f28:	2b00      	cmp	r3, #0
34010f2a:	d005      	beq.n	34010f38 <HAL_RCCEx_PeriphCLKConfig+0x5200>
34010f2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010f36:	d904      	bls.n	34010f42 <HAL_RCCEx_PeriphCLKConfig+0x520a>
34010f38:	f240 712d 	movw	r1, #1837	@ 0x72d
34010f3c:	4814      	ldr	r0, [pc, #80]	@ (34010f90 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
34010f3e:	f7f0 fb47 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34010f42:	4b14      	ldr	r3, [pc, #80]	@ (34010f94 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34010f44:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34010f48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34010f4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34010f50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34010f56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34010f5c:	3b01      	subs	r3, #1
34010f5e:	041b      	lsls	r3, r3, #16
34010f60:	4313      	orrs	r3, r2
34010f62:	4a0c      	ldr	r2, [pc, #48]	@ (34010f94 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
34010f64:	430b      	orrs	r3, r1
34010f66:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34010f6a:	f7fa fd03 	bl	3400b974 <LL_RCC_IC14_Enable>
34010f6e:	e01c      	b.n	34010faa <HAL_RCCEx_PeriphCLKConfig+0x5272>
34010f70:	07011820 	.word	0x07011820
34010f74:	07000030 	.word	0x07000030
34010f78:	07010030 	.word	0x07010030
34010f7c:	07020030 	.word	0x07020030
34010f80:	07030030 	.word	0x07030030
34010f84:	07040030 	.word	0x07040030
34010f88:	07050030 	.word	0x07050030
34010f8c:	07060030 	.word	0x07060030
34010f90:	3401d6f8 	.word	0x3401d6f8
34010f94:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34010f98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010f9c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34010fa0:	4b72      	ldr	r3, [pc, #456]	@ (3401116c <HAL_RCCEx_PeriphCLKConfig+0x5434>)
34010fa2:	429a      	cmp	r2, r3
34010fa4:	d101      	bne.n	34010faa <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
34010fa6:	f7fa fea5 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34010faa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010fae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34010fb2:	4618      	mov	r0, r3
34010fb4:	f7f9 fe41 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34010fb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
34010fc0:	2100      	movs	r1, #0
34010fc2:	66b9      	str	r1, [r7, #104]	@ 0x68
34010fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34010fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
34010fca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34010fce:	4603      	mov	r3, r0
34010fd0:	460a      	mov	r2, r1
34010fd2:	4313      	orrs	r3, r2
34010fd4:	f000 80ee 	beq.w	340111b4 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34010fd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010fdc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34010fe0:	4b63      	ldr	r3, [pc, #396]	@ (34011170 <HAL_RCCEx_PeriphCLKConfig+0x5438>)
34010fe2:	429a      	cmp	r2, r3
34010fe4:	d02e      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
34010fe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010fea:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34010fee:	4b61      	ldr	r3, [pc, #388]	@ (34011174 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
34010ff0:	429a      	cmp	r2, r3
34010ff2:	d027      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
34010ff4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010ff8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34010ffc:	4b5e      	ldr	r3, [pc, #376]	@ (34011178 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
34010ffe:	429a      	cmp	r2, r3
34011000:	d020      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
34011002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011006:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3401100a:	4b5c      	ldr	r3, [pc, #368]	@ (3401117c <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3401100c:	429a      	cmp	r2, r3
3401100e:	d019      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
34011010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011014:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34011018:	4b59      	ldr	r3, [pc, #356]	@ (34011180 <HAL_RCCEx_PeriphCLKConfig+0x5448>)
3401101a:	429a      	cmp	r2, r3
3401101c:	d012      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3401101e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011022:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34011026:	4b57      	ldr	r3, [pc, #348]	@ (34011184 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
34011028:	429a      	cmp	r2, r3
3401102a:	d00b      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3401102c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011030:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34011034:	4b54      	ldr	r3, [pc, #336]	@ (34011188 <HAL_RCCEx_PeriphCLKConfig+0x5450>)
34011036:	429a      	cmp	r2, r3
34011038:	d004      	beq.n	34011044 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3401103a:	f240 7147 	movw	r1, #1863	@ 0x747
3401103e:	4853      	ldr	r0, [pc, #332]	@ (3401118c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
34011040:	f7f0 fac6 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34011044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011048:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3401104c:	4b4a      	ldr	r3, [pc, #296]	@ (34011178 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3401104e:	429a      	cmp	r2, r3
34011050:	d142      	bne.n	340110d8 <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011052:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011058:	2b00      	cmp	r3, #0
3401105a:	d016      	beq.n	3401108a <HAL_RCCEx_PeriphCLKConfig+0x5352>
3401105c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011066:	d010      	beq.n	3401108a <HAL_RCCEx_PeriphCLKConfig+0x5352>
34011068:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401106c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401106e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011072:	d00a      	beq.n	3401108a <HAL_RCCEx_PeriphCLKConfig+0x5352>
34011074:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401107a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401107e:	d004      	beq.n	3401108a <HAL_RCCEx_PeriphCLKConfig+0x5352>
34011080:	f240 714c 	movw	r1, #1868	@ 0x74c
34011084:	4841      	ldr	r0, [pc, #260]	@ (3401118c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
34011086:	f7f0 faa3 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401108a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011090:	2b00      	cmp	r3, #0
34011092:	d005      	beq.n	340110a0 <HAL_RCCEx_PeriphCLKConfig+0x5368>
34011094:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401109a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401109e:	d904      	bls.n	340110aa <HAL_RCCEx_PeriphCLKConfig+0x5372>
340110a0:	f240 714d 	movw	r1, #1869	@ 0x74d
340110a4:	4839      	ldr	r0, [pc, #228]	@ (3401118c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
340110a6:	f7f0 fa93 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340110aa:	4b39      	ldr	r3, [pc, #228]	@ (34011190 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
340110ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340110b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340110b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340110b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340110bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340110be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340110c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340110c4:	3b01      	subs	r3, #1
340110c6:	041b      	lsls	r3, r3, #16
340110c8:	4313      	orrs	r3, r2
340110ca:	4a31      	ldr	r2, [pc, #196]	@ (34011190 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
340110cc:	430b      	orrs	r3, r1
340110ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340110d2:	f7fa fb4f 	bl	3400b774 <LL_RCC_IC9_Enable>
340110d6:	e066      	b.n	340111a6 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
340110d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340110dc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
340110e0:	4b26      	ldr	r3, [pc, #152]	@ (3401117c <HAL_RCCEx_PeriphCLKConfig+0x5444>)
340110e2:	429a      	cmp	r2, r3
340110e4:	d156      	bne.n	34011194 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340110e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340110ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340110ec:	2b00      	cmp	r3, #0
340110ee:	d016      	beq.n	3401111e <HAL_RCCEx_PeriphCLKConfig+0x53e6>
340110f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340110f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340110f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340110fa:	d010      	beq.n	3401111e <HAL_RCCEx_PeriphCLKConfig+0x53e6>
340110fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011106:	d00a      	beq.n	3401111e <HAL_RCCEx_PeriphCLKConfig+0x53e6>
34011108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401110c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3401110e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011112:	d004      	beq.n	3401111e <HAL_RCCEx_PeriphCLKConfig+0x53e6>
34011114:	f240 7159 	movw	r1, #1881	@ 0x759
34011118:	481c      	ldr	r0, [pc, #112]	@ (3401118c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3401111a:	f7f0 fa59 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401111e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011124:	2b00      	cmp	r3, #0
34011126:	d005      	beq.n	34011134 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
34011128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401112c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401112e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011132:	d904      	bls.n	3401113e <HAL_RCCEx_PeriphCLKConfig+0x5406>
34011134:	f240 715a 	movw	r1, #1882	@ 0x75a
34011138:	4814      	ldr	r0, [pc, #80]	@ (3401118c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3401113a:	f7f0 fa49 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401113e:	4b14      	ldr	r3, [pc, #80]	@ (34011190 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34011140:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011144:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011148:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3401114c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011150:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011158:	3b01      	subs	r3, #1
3401115a:	041b      	lsls	r3, r3, #16
3401115c:	4313      	orrs	r3, r2
3401115e:	4a0c      	ldr	r2, [pc, #48]	@ (34011190 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
34011160:	430b      	orrs	r3, r1
34011162:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011166:	f7fa fc05 	bl	3400b974 <LL_RCC_IC14_Enable>
3401116a:	e01c      	b.n	340111a6 <HAL_RCCEx_PeriphCLKConfig+0x546e>
3401116c:	07010030 	.word	0x07010030
34011170:	07000430 	.word	0x07000430
34011174:	07010430 	.word	0x07010430
34011178:	07020430 	.word	0x07020430
3401117c:	07030430 	.word	0x07030430
34011180:	07040430 	.word	0x07040430
34011184:	07050430 	.word	0x07050430
34011188:	07060430 	.word	0x07060430
3401118c:	3401d6f8 	.word	0x3401d6f8
34011190:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34011194:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011198:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3401119c:	4b72      	ldr	r3, [pc, #456]	@ (34011368 <HAL_RCCEx_PeriphCLKConfig+0x5630>)
3401119e:	429a      	cmp	r2, r3
340111a0:	d101      	bne.n	340111a6 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
340111a2:	f7fa fda7 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
340111a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340111aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
340111ae:	4618      	mov	r0, r3
340111b0:	f7f9 fd43 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
340111b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340111b8:	e9d3 2300 	ldrd	r2, r3, [r3]
340111bc:	2100      	movs	r1, #0
340111be:	6639      	str	r1, [r7, #96]	@ 0x60
340111c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340111c4:	667b      	str	r3, [r7, #100]	@ 0x64
340111c6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
340111ca:	4603      	mov	r3, r0
340111cc:	460a      	mov	r2, r1
340111ce:	4313      	orrs	r3, r2
340111d0:	f000 80ee 	beq.w	340113b0 <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
340111d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340111d8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
340111dc:	4b63      	ldr	r3, [pc, #396]	@ (3401136c <HAL_RCCEx_PeriphCLKConfig+0x5634>)
340111de:	429a      	cmp	r2, r3
340111e0:	d02e      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
340111e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340111e6:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
340111ea:	4b61      	ldr	r3, [pc, #388]	@ (34011370 <HAL_RCCEx_PeriphCLKConfig+0x5638>)
340111ec:	429a      	cmp	r2, r3
340111ee:	d027      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
340111f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340111f4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
340111f8:	4b5e      	ldr	r3, [pc, #376]	@ (34011374 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
340111fa:	429a      	cmp	r2, r3
340111fc:	d020      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
340111fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011202:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011206:	4b5c      	ldr	r3, [pc, #368]	@ (34011378 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
34011208:	429a      	cmp	r2, r3
3401120a:	d019      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3401120c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011210:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011214:	4b59      	ldr	r3, [pc, #356]	@ (3401137c <HAL_RCCEx_PeriphCLKConfig+0x5644>)
34011216:	429a      	cmp	r2, r3
34011218:	d012      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3401121a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401121e:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011222:	4b57      	ldr	r3, [pc, #348]	@ (34011380 <HAL_RCCEx_PeriphCLKConfig+0x5648>)
34011224:	429a      	cmp	r2, r3
34011226:	d00b      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
34011228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401122c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011230:	4b54      	ldr	r3, [pc, #336]	@ (34011384 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
34011232:	429a      	cmp	r2, r3
34011234:	d004      	beq.n	34011240 <HAL_RCCEx_PeriphCLKConfig+0x5508>
34011236:	f240 7174 	movw	r1, #1908	@ 0x774
3401123a:	4853      	ldr	r0, [pc, #332]	@ (34011388 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3401123c:	f7f0 f9c8 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34011240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011244:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011248:	4b4a      	ldr	r3, [pc, #296]	@ (34011374 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3401124a:	429a      	cmp	r2, r3
3401124c:	d142      	bne.n	340112d4 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401124e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011254:	2b00      	cmp	r3, #0
34011256:	d016      	beq.n	34011286 <HAL_RCCEx_PeriphCLKConfig+0x554e>
34011258:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401125c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401125e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011262:	d010      	beq.n	34011286 <HAL_RCCEx_PeriphCLKConfig+0x554e>
34011264:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401126a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401126e:	d00a      	beq.n	34011286 <HAL_RCCEx_PeriphCLKConfig+0x554e>
34011270:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011276:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401127a:	d004      	beq.n	34011286 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3401127c:	f240 7179 	movw	r1, #1913	@ 0x779
34011280:	4841      	ldr	r0, [pc, #260]	@ (34011388 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34011282:	f7f0 f9a5 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34011286:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401128c:	2b00      	cmp	r3, #0
3401128e:	d005      	beq.n	3401129c <HAL_RCCEx_PeriphCLKConfig+0x5564>
34011290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401129a:	d904      	bls.n	340112a6 <HAL_RCCEx_PeriphCLKConfig+0x556e>
3401129c:	f240 717a 	movw	r1, #1914	@ 0x77a
340112a0:	4839      	ldr	r0, [pc, #228]	@ (34011388 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
340112a2:	f7f0 f995 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340112a6:	4b39      	ldr	r3, [pc, #228]	@ (3401138c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
340112a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340112ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340112b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340112b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340112ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340112c0:	3b01      	subs	r3, #1
340112c2:	041b      	lsls	r3, r3, #16
340112c4:	4313      	orrs	r3, r2
340112c6:	4a31      	ldr	r2, [pc, #196]	@ (3401138c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
340112c8:	430b      	orrs	r3, r1
340112ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340112ce:	f7fa fa51 	bl	3400b774 <LL_RCC_IC9_Enable>
340112d2:	e066      	b.n	340113a2 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
340112d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112d8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
340112dc:	4b26      	ldr	r3, [pc, #152]	@ (34011378 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
340112de:	429a      	cmp	r2, r3
340112e0:	d156      	bne.n	34011390 <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340112e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340112e8:	2b00      	cmp	r3, #0
340112ea:	d016      	beq.n	3401131a <HAL_RCCEx_PeriphCLKConfig+0x55e2>
340112ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340112f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340112f6:	d010      	beq.n	3401131a <HAL_RCCEx_PeriphCLKConfig+0x55e2>
340112f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340112fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340112fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011302:	d00a      	beq.n	3401131a <HAL_RCCEx_PeriphCLKConfig+0x55e2>
34011304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3401130a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401130e:	d004      	beq.n	3401131a <HAL_RCCEx_PeriphCLKConfig+0x55e2>
34011310:	f240 7186 	movw	r1, #1926	@ 0x786
34011314:	481c      	ldr	r0, [pc, #112]	@ (34011388 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34011316:	f7f0 f95b 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401131a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401131e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011320:	2b00      	cmp	r3, #0
34011322:	d005      	beq.n	34011330 <HAL_RCCEx_PeriphCLKConfig+0x55f8>
34011324:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401132a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401132e:	d904      	bls.n	3401133a <HAL_RCCEx_PeriphCLKConfig+0x5602>
34011330:	f240 7187 	movw	r1, #1927	@ 0x787
34011334:	4814      	ldr	r0, [pc, #80]	@ (34011388 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
34011336:	f7f0 f94b 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401133a:	4b14      	ldr	r3, [pc, #80]	@ (3401138c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3401133c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011340:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011344:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011348:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401134c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3401134e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011354:	3b01      	subs	r3, #1
34011356:	041b      	lsls	r3, r3, #16
34011358:	4313      	orrs	r3, r2
3401135a:	4a0c      	ldr	r2, [pc, #48]	@ (3401138c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3401135c:	430b      	orrs	r3, r1
3401135e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011362:	f7fa fb07 	bl	3400b974 <LL_RCC_IC14_Enable>
34011366:	e01c      	b.n	340113a2 <HAL_RCCEx_PeriphCLKConfig+0x566a>
34011368:	07010430 	.word	0x07010430
3401136c:	07000830 	.word	0x07000830
34011370:	07010830 	.word	0x07010830
34011374:	07020830 	.word	0x07020830
34011378:	07030830 	.word	0x07030830
3401137c:	07040830 	.word	0x07040830
34011380:	07050830 	.word	0x07050830
34011384:	07060830 	.word	0x07060830
34011388:	3401d6f8 	.word	0x3401d6f8
3401138c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34011390:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011394:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34011398:	4b72      	ldr	r3, [pc, #456]	@ (34011564 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3401139a:	429a      	cmp	r2, r3
3401139c:	d101      	bne.n	340113a2 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
3401139e:	f7fa fca9 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
340113a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113a6:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
340113aa:	4618      	mov	r0, r3
340113ac:	f7f9 fc45 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
340113b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113b4:	e9d3 2300 	ldrd	r2, r3, [r3]
340113b8:	2100      	movs	r1, #0
340113ba:	65b9      	str	r1, [r7, #88]	@ 0x58
340113bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340113c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
340113c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
340113c6:	4603      	mov	r3, r0
340113c8:	460a      	mov	r2, r1
340113ca:	4313      	orrs	r3, r2
340113cc:	f000 80ee 	beq.w	340115ac <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
340113d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113d4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340113d8:	4b63      	ldr	r3, [pc, #396]	@ (34011568 <HAL_RCCEx_PeriphCLKConfig+0x5830>)
340113da:	429a      	cmp	r2, r3
340113dc:	d02e      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
340113de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113e2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340113e6:	4b61      	ldr	r3, [pc, #388]	@ (3401156c <HAL_RCCEx_PeriphCLKConfig+0x5834>)
340113e8:	429a      	cmp	r2, r3
340113ea:	d027      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
340113ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113f0:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340113f4:	4b5e      	ldr	r3, [pc, #376]	@ (34011570 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
340113f6:	429a      	cmp	r2, r3
340113f8:	d020      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
340113fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340113fe:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34011402:	4b5c      	ldr	r3, [pc, #368]	@ (34011574 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
34011404:	429a      	cmp	r2, r3
34011406:	d019      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
34011408:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401140c:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34011410:	4b59      	ldr	r3, [pc, #356]	@ (34011578 <HAL_RCCEx_PeriphCLKConfig+0x5840>)
34011412:	429a      	cmp	r2, r3
34011414:	d012      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
34011416:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401141a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3401141e:	4b57      	ldr	r3, [pc, #348]	@ (3401157c <HAL_RCCEx_PeriphCLKConfig+0x5844>)
34011420:	429a      	cmp	r2, r3
34011422:	d00b      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
34011424:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011428:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3401142c:	4b54      	ldr	r3, [pc, #336]	@ (34011580 <HAL_RCCEx_PeriphCLKConfig+0x5848>)
3401142e:	429a      	cmp	r2, r3
34011430:	d004      	beq.n	3401143c <HAL_RCCEx_PeriphCLKConfig+0x5704>
34011432:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34011436:	4853      	ldr	r0, [pc, #332]	@ (34011584 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34011438:	f7f0 f8ca 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3401143c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011440:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34011444:	4b4a      	ldr	r3, [pc, #296]	@ (34011570 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
34011446:	429a      	cmp	r2, r3
34011448:	d142      	bne.n	340114d0 <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401144a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401144e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011450:	2b00      	cmp	r3, #0
34011452:	d016      	beq.n	34011482 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34011454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401145a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401145e:	d010      	beq.n	34011482 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34011460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401146a:	d00a      	beq.n	34011482 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3401146c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011476:	d004      	beq.n	34011482 <HAL_RCCEx_PeriphCLKConfig+0x574a>
34011478:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3401147c:	4841      	ldr	r0, [pc, #260]	@ (34011584 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3401147e:	f7f0 f8a7 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34011482:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011488:	2b00      	cmp	r3, #0
3401148a:	d005      	beq.n	34011498 <HAL_RCCEx_PeriphCLKConfig+0x5760>
3401148c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011496:	d904      	bls.n	340114a2 <HAL_RCCEx_PeriphCLKConfig+0x576a>
34011498:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3401149c:	4839      	ldr	r0, [pc, #228]	@ (34011584 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3401149e:	f7f0 f897 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340114a2:	4b39      	ldr	r3, [pc, #228]	@ (34011588 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
340114a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340114a8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340114ac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340114b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340114b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340114bc:	3b01      	subs	r3, #1
340114be:	041b      	lsls	r3, r3, #16
340114c0:	4313      	orrs	r3, r2
340114c2:	4a31      	ldr	r2, [pc, #196]	@ (34011588 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
340114c4:	430b      	orrs	r3, r1
340114c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340114ca:	f7fa f953 	bl	3400b774 <LL_RCC_IC9_Enable>
340114ce:	e066      	b.n	3401159e <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
340114d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114d4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340114d8:	4b26      	ldr	r3, [pc, #152]	@ (34011574 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
340114da:	429a      	cmp	r2, r3
340114dc:	d156      	bne.n	3401158c <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340114de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340114e4:	2b00      	cmp	r3, #0
340114e6:	d016      	beq.n	34011516 <HAL_RCCEx_PeriphCLKConfig+0x57de>
340114e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340114ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340114f2:	d010      	beq.n	34011516 <HAL_RCCEx_PeriphCLKConfig+0x57de>
340114f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340114f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340114fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340114fe:	d00a      	beq.n	34011516 <HAL_RCCEx_PeriphCLKConfig+0x57de>
34011500:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011506:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401150a:	d004      	beq.n	34011516 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3401150c:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34011510:	481c      	ldr	r0, [pc, #112]	@ (34011584 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34011512:	f7f0 f85d 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34011516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401151a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401151c:	2b00      	cmp	r3, #0
3401151e:	d005      	beq.n	3401152c <HAL_RCCEx_PeriphCLKConfig+0x57f4>
34011520:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401152a:	d904      	bls.n	34011536 <HAL_RCCEx_PeriphCLKConfig+0x57fe>
3401152c:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34011530:	4814      	ldr	r0, [pc, #80]	@ (34011584 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
34011532:	f7f0 f84d 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34011536:	4b14      	ldr	r3, [pc, #80]	@ (34011588 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34011538:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3401153c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011540:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011544:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011548:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3401154a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011550:	3b01      	subs	r3, #1
34011552:	041b      	lsls	r3, r3, #16
34011554:	4313      	orrs	r3, r2
34011556:	4a0c      	ldr	r2, [pc, #48]	@ (34011588 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
34011558:	430b      	orrs	r3, r1
3401155a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3401155e:	f7fa fa09 	bl	3400b974 <LL_RCC_IC14_Enable>
34011562:	e01c      	b.n	3401159e <HAL_RCCEx_PeriphCLKConfig+0x5866>
34011564:	07010830 	.word	0x07010830
34011568:	07000c30 	.word	0x07000c30
3401156c:	07010c30 	.word	0x07010c30
34011570:	07020c30 	.word	0x07020c30
34011574:	07030c30 	.word	0x07030c30
34011578:	07040c30 	.word	0x07040c30
3401157c:	07050c30 	.word	0x07050c30
34011580:	07060c30 	.word	0x07060c30
34011584:	3401d6f8 	.word	0x3401d6f8
34011588:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3401158c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011590:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34011594:	4b72      	ldr	r3, [pc, #456]	@ (34011760 <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
34011596:	429a      	cmp	r2, r3
34011598:	d101      	bne.n	3401159e <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
3401159a:	f7fa fbab 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3401159e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115a2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340115a6:	4618      	mov	r0, r3
340115a8:	f7f9 fb47 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
340115ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
340115b4:	2100      	movs	r1, #0
340115b6:	6539      	str	r1, [r7, #80]	@ 0x50
340115b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340115bc:	657b      	str	r3, [r7, #84]	@ 0x54
340115be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
340115c2:	4603      	mov	r3, r0
340115c4:	460a      	mov	r2, r1
340115c6:	4313      	orrs	r3, r2
340115c8:	f000 80ee 	beq.w	340117a8 <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
340115cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115d0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340115d4:	4b63      	ldr	r3, [pc, #396]	@ (34011764 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
340115d6:	429a      	cmp	r2, r3
340115d8:	d02e      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
340115da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115de:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340115e2:	4b61      	ldr	r3, [pc, #388]	@ (34011768 <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
340115e4:	429a      	cmp	r2, r3
340115e6:	d027      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
340115e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115ec:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340115f0:	4b5e      	ldr	r3, [pc, #376]	@ (3401176c <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
340115f2:	429a      	cmp	r2, r3
340115f4:	d020      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
340115f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340115fa:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340115fe:	4b5c      	ldr	r3, [pc, #368]	@ (34011770 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
34011600:	429a      	cmp	r2, r3
34011602:	d019      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
34011604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011608:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3401160c:	4b59      	ldr	r3, [pc, #356]	@ (34011774 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
3401160e:	429a      	cmp	r2, r3
34011610:	d012      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
34011612:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011616:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3401161a:	4b57      	ldr	r3, [pc, #348]	@ (34011778 <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
3401161c:	429a      	cmp	r2, r3
3401161e:	d00b      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
34011620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011624:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34011628:	4b54      	ldr	r3, [pc, #336]	@ (3401177c <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
3401162a:	429a      	cmp	r2, r3
3401162c:	d004      	beq.n	34011638 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3401162e:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34011632:	4853      	ldr	r0, [pc, #332]	@ (34011780 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
34011634:	f7ef ffcc 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34011638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401163c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34011640:	4b4a      	ldr	r3, [pc, #296]	@ (3401176c <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
34011642:	429a      	cmp	r2, r3
34011644:	d142      	bne.n	340116cc <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011646:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401164a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401164c:	2b00      	cmp	r3, #0
3401164e:	d016      	beq.n	3401167e <HAL_RCCEx_PeriphCLKConfig+0x5946>
34011650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401165a:	d010      	beq.n	3401167e <HAL_RCCEx_PeriphCLKConfig+0x5946>
3401165c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011666:	d00a      	beq.n	3401167e <HAL_RCCEx_PeriphCLKConfig+0x5946>
34011668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401166c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401166e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011672:	d004      	beq.n	3401167e <HAL_RCCEx_PeriphCLKConfig+0x5946>
34011674:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34011678:	4841      	ldr	r0, [pc, #260]	@ (34011780 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3401167a:	f7ef ffa9 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401167e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011684:	2b00      	cmp	r3, #0
34011686:	d005      	beq.n	34011694 <HAL_RCCEx_PeriphCLKConfig+0x595c>
34011688:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401168e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011692:	d904      	bls.n	3401169e <HAL_RCCEx_PeriphCLKConfig+0x5966>
34011694:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34011698:	4839      	ldr	r0, [pc, #228]	@ (34011780 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3401169a:	f7ef ff99 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401169e:	4b39      	ldr	r3, [pc, #228]	@ (34011784 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
340116a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340116a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340116a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340116ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340116b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340116b8:	3b01      	subs	r3, #1
340116ba:	041b      	lsls	r3, r3, #16
340116bc:	4313      	orrs	r3, r2
340116be:	4a31      	ldr	r2, [pc, #196]	@ (34011784 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
340116c0:	430b      	orrs	r3, r1
340116c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340116c6:	f7fa f855 	bl	3400b774 <LL_RCC_IC9_Enable>
340116ca:	e066      	b.n	3401179a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
340116cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116d0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340116d4:	4b26      	ldr	r3, [pc, #152]	@ (34011770 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
340116d6:	429a      	cmp	r2, r3
340116d8:	d156      	bne.n	34011788 <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340116da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340116e0:	2b00      	cmp	r3, #0
340116e2:	d016      	beq.n	34011712 <HAL_RCCEx_PeriphCLKConfig+0x59da>
340116e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340116ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340116ee:	d010      	beq.n	34011712 <HAL_RCCEx_PeriphCLKConfig+0x59da>
340116f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340116f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340116f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340116fa:	d00a      	beq.n	34011712 <HAL_RCCEx_PeriphCLKConfig+0x59da>
340116fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011706:	d004      	beq.n	34011712 <HAL_RCCEx_PeriphCLKConfig+0x59da>
34011708:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3401170c:	481c      	ldr	r0, [pc, #112]	@ (34011780 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3401170e:	f7ef ff5f 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34011712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011718:	2b00      	cmp	r3, #0
3401171a:	d005      	beq.n	34011728 <HAL_RCCEx_PeriphCLKConfig+0x59f0>
3401171c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011726:	d904      	bls.n	34011732 <HAL_RCCEx_PeriphCLKConfig+0x59fa>
34011728:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3401172c:	4814      	ldr	r0, [pc, #80]	@ (34011780 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3401172e:	f7ef ff4f 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34011732:	4b14      	ldr	r3, [pc, #80]	@ (34011784 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34011734:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011738:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3401173c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011740:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011744:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011746:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401174a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401174c:	3b01      	subs	r3, #1
3401174e:	041b      	lsls	r3, r3, #16
34011750:	4313      	orrs	r3, r2
34011752:	4a0c      	ldr	r2, [pc, #48]	@ (34011784 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
34011754:	430b      	orrs	r3, r1
34011756:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3401175a:	f7fa f90b 	bl	3400b974 <LL_RCC_IC14_Enable>
3401175e:	e01c      	b.n	3401179a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
34011760:	07010c30 	.word	0x07010c30
34011764:	07001030 	.word	0x07001030
34011768:	07011030 	.word	0x07011030
3401176c:	07021030 	.word	0x07021030
34011770:	07031030 	.word	0x07031030
34011774:	07041030 	.word	0x07041030
34011778:	07051030 	.word	0x07051030
3401177c:	07061030 	.word	0x07061030
34011780:	3401d6f8 	.word	0x3401d6f8
34011784:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34011788:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401178c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34011790:	4b72      	ldr	r3, [pc, #456]	@ (3401195c <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
34011792:	429a      	cmp	r2, r3
34011794:	d101      	bne.n	3401179a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
34011796:	f7fa faad 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3401179a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401179e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
340117a2:	4618      	mov	r0, r3
340117a4:	f7f9 fa49 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
340117a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
340117b0:	2100      	movs	r1, #0
340117b2:	64b9      	str	r1, [r7, #72]	@ 0x48
340117b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340117b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
340117ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
340117be:	4603      	mov	r3, r0
340117c0:	460a      	mov	r2, r1
340117c2:	4313      	orrs	r3, r2
340117c4:	f000 80ee 	beq.w	340119a4 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
340117c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340117cc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340117d0:	4b63      	ldr	r3, [pc, #396]	@ (34011960 <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
340117d2:	429a      	cmp	r2, r3
340117d4:	d02e      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
340117d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340117da:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340117de:	4b61      	ldr	r3, [pc, #388]	@ (34011964 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
340117e0:	429a      	cmp	r2, r3
340117e2:	d027      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
340117e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340117e8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340117ec:	4b5e      	ldr	r3, [pc, #376]	@ (34011968 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
340117ee:	429a      	cmp	r2, r3
340117f0:	d020      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
340117f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340117f6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340117fa:	4b5c      	ldr	r3, [pc, #368]	@ (3401196c <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
340117fc:	429a      	cmp	r2, r3
340117fe:	d019      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
34011800:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011804:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34011808:	4b59      	ldr	r3, [pc, #356]	@ (34011970 <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
3401180a:	429a      	cmp	r2, r3
3401180c:	d012      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3401180e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011812:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34011816:	4b57      	ldr	r3, [pc, #348]	@ (34011974 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
34011818:	429a      	cmp	r2, r3
3401181a:	d00b      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3401181c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011820:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34011824:	4b54      	ldr	r3, [pc, #336]	@ (34011978 <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
34011826:	429a      	cmp	r2, r3
34011828:	d004      	beq.n	34011834 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3401182a:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3401182e:	4853      	ldr	r0, [pc, #332]	@ (3401197c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34011830:	f7ef fece 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34011834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011838:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3401183c:	4b4a      	ldr	r3, [pc, #296]	@ (34011968 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3401183e:	429a      	cmp	r2, r3
34011840:	d142      	bne.n	340118c8 <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011848:	2b00      	cmp	r3, #0
3401184a:	d016      	beq.n	3401187a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3401184c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011856:	d010      	beq.n	3401187a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34011858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401185c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401185e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011862:	d00a      	beq.n	3401187a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34011864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401186a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401186e:	d004      	beq.n	3401187a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
34011870:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34011874:	4841      	ldr	r0, [pc, #260]	@ (3401197c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34011876:	f7ef feab 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401187a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011880:	2b00      	cmp	r3, #0
34011882:	d005      	beq.n	34011890 <HAL_RCCEx_PeriphCLKConfig+0x5b58>
34011884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401188a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401188e:	d904      	bls.n	3401189a <HAL_RCCEx_PeriphCLKConfig+0x5b62>
34011890:	f640 0101 	movw	r1, #2049	@ 0x801
34011894:	4839      	ldr	r0, [pc, #228]	@ (3401197c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
34011896:	f7ef fe9b 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401189a:	4b39      	ldr	r3, [pc, #228]	@ (34011980 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3401189c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340118a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340118a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340118a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340118ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340118b4:	3b01      	subs	r3, #1
340118b6:	041b      	lsls	r3, r3, #16
340118b8:	4313      	orrs	r3, r2
340118ba:	4a31      	ldr	r2, [pc, #196]	@ (34011980 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
340118bc:	430b      	orrs	r3, r1
340118be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340118c2:	f7f9 ff57 	bl	3400b774 <LL_RCC_IC9_Enable>
340118c6:	e066      	b.n	34011996 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
340118c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118cc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340118d0:	4b26      	ldr	r3, [pc, #152]	@ (3401196c <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
340118d2:	429a      	cmp	r2, r3
340118d4:	d156      	bne.n	34011984 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340118d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340118dc:	2b00      	cmp	r3, #0
340118de:	d016      	beq.n	3401190e <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
340118e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340118e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340118ea:	d010      	beq.n	3401190e <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
340118ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340118f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340118f6:	d00a      	beq.n	3401190e <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
340118f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340118fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340118fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011902:	d004      	beq.n	3401190e <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
34011904:	f640 010d 	movw	r1, #2061	@ 0x80d
34011908:	481c      	ldr	r0, [pc, #112]	@ (3401197c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3401190a:	f7ef fe61 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401190e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011914:	2b00      	cmp	r3, #0
34011916:	d005      	beq.n	34011924 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
34011918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401191e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011922:	d904      	bls.n	3401192e <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
34011924:	f640 010e 	movw	r1, #2062	@ 0x80e
34011928:	4814      	ldr	r0, [pc, #80]	@ (3401197c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3401192a:	f7ef fe51 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401192e:	4b14      	ldr	r3, [pc, #80]	@ (34011980 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34011930:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011934:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011938:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3401193c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011940:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011942:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011948:	3b01      	subs	r3, #1
3401194a:	041b      	lsls	r3, r3, #16
3401194c:	4313      	orrs	r3, r2
3401194e:	4a0c      	ldr	r2, [pc, #48]	@ (34011980 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
34011950:	430b      	orrs	r3, r1
34011952:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011956:	f7fa f80d 	bl	3400b974 <LL_RCC_IC14_Enable>
3401195a:	e01c      	b.n	34011996 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
3401195c:	07011030 	.word	0x07011030
34011960:	07001430 	.word	0x07001430
34011964:	07011430 	.word	0x07011430
34011968:	07021430 	.word	0x07021430
3401196c:	07031430 	.word	0x07031430
34011970:	07041430 	.word	0x07041430
34011974:	07051430 	.word	0x07051430
34011978:	07061430 	.word	0x07061430
3401197c:	3401d6f8 	.word	0x3401d6f8
34011980:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34011984:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011988:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3401198c:	4b72      	ldr	r3, [pc, #456]	@ (34011b58 <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
3401198e:	429a      	cmp	r2, r3
34011990:	d101      	bne.n	34011996 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
34011992:	f7fa f9af 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34011996:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401199a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3401199e:	4618      	mov	r0, r3
340119a0:	f7f9 f94b 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
340119a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340119a8:	e9d3 2300 	ldrd	r2, r3, [r3]
340119ac:	2100      	movs	r1, #0
340119ae:	6439      	str	r1, [r7, #64]	@ 0x40
340119b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340119b4:	647b      	str	r3, [r7, #68]	@ 0x44
340119b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
340119ba:	4603      	mov	r3, r0
340119bc:	460a      	mov	r2, r1
340119be:	4313      	orrs	r3, r2
340119c0:	f000 80ee 	beq.w	34011ba0 <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
340119c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340119c8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
340119cc:	4b63      	ldr	r3, [pc, #396]	@ (34011b5c <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
340119ce:	429a      	cmp	r2, r3
340119d0:	d02e      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
340119d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340119d6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
340119da:	4b61      	ldr	r3, [pc, #388]	@ (34011b60 <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
340119dc:	429a      	cmp	r2, r3
340119de:	d027      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
340119e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340119e4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
340119e8:	4b5e      	ldr	r3, [pc, #376]	@ (34011b64 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
340119ea:	429a      	cmp	r2, r3
340119ec:	d020      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
340119ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340119f2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
340119f6:	4b5c      	ldr	r3, [pc, #368]	@ (34011b68 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
340119f8:	429a      	cmp	r2, r3
340119fa:	d019      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
340119fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a00:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011a04:	4b59      	ldr	r3, [pc, #356]	@ (34011b6c <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
34011a06:	429a      	cmp	r2, r3
34011a08:	d012      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34011a0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a0e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011a12:	4b57      	ldr	r3, [pc, #348]	@ (34011b70 <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
34011a14:	429a      	cmp	r2, r3
34011a16:	d00b      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34011a18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a1c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011a20:	4b54      	ldr	r3, [pc, #336]	@ (34011b74 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
34011a22:	429a      	cmp	r2, r3
34011a24:	d004      	beq.n	34011a30 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
34011a26:	f640 0128 	movw	r1, #2088	@ 0x828
34011a2a:	4853      	ldr	r0, [pc, #332]	@ (34011b78 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34011a2c:	f7ef fdd0 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34011a30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a34:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011a38:	4b4a      	ldr	r3, [pc, #296]	@ (34011b64 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
34011a3a:	429a      	cmp	r2, r3
34011a3c:	d142      	bne.n	34011ac4 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011a3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011a44:	2b00      	cmp	r3, #0
34011a46:	d016      	beq.n	34011a76 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34011a48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011a52:	d010      	beq.n	34011a76 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34011a54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a5e:	d00a      	beq.n	34011a76 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34011a60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a6a:	d004      	beq.n	34011a76 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
34011a6c:	f640 012d 	movw	r1, #2093	@ 0x82d
34011a70:	4841      	ldr	r0, [pc, #260]	@ (34011b78 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34011a72:	f7ef fdad 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34011a76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011a7c:	2b00      	cmp	r3, #0
34011a7e:	d005      	beq.n	34011a8c <HAL_RCCEx_PeriphCLKConfig+0x5d54>
34011a80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011a8a:	d904      	bls.n	34011a96 <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
34011a8c:	f640 012e 	movw	r1, #2094	@ 0x82e
34011a90:	4839      	ldr	r0, [pc, #228]	@ (34011b78 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34011a92:	f7ef fd9d 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34011a96:	4b39      	ldr	r3, [pc, #228]	@ (34011b7c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
34011a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34011a9c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011aa0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011aa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34011aaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011ab0:	3b01      	subs	r3, #1
34011ab2:	041b      	lsls	r3, r3, #16
34011ab4:	4313      	orrs	r3, r2
34011ab6:	4a31      	ldr	r2, [pc, #196]	@ (34011b7c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
34011ab8:	430b      	orrs	r3, r1
34011aba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34011abe:	f7f9 fe59 	bl	3400b774 <LL_RCC_IC9_Enable>
34011ac2:	e066      	b.n	34011b92 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34011ac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ac8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011acc:	4b26      	ldr	r3, [pc, #152]	@ (34011b68 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
34011ace:	429a      	cmp	r2, r3
34011ad0:	d156      	bne.n	34011b80 <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34011ad2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011ad8:	2b00      	cmp	r3, #0
34011ada:	d016      	beq.n	34011b0a <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
34011adc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011ae6:	d010      	beq.n	34011b0a <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
34011ae8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011af2:	d00a      	beq.n	34011b0a <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
34011af4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011afa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011afe:	d004      	beq.n	34011b0a <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
34011b00:	f640 013a 	movw	r1, #2106	@ 0x83a
34011b04:	481c      	ldr	r0, [pc, #112]	@ (34011b78 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34011b06:	f7ef fd63 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34011b0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011b10:	2b00      	cmp	r3, #0
34011b12:	d005      	beq.n	34011b20 <HAL_RCCEx_PeriphCLKConfig+0x5de8>
34011b14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011b1e:	d904      	bls.n	34011b2a <HAL_RCCEx_PeriphCLKConfig+0x5df2>
34011b20:	f640 013b 	movw	r1, #2107	@ 0x83b
34011b24:	4814      	ldr	r0, [pc, #80]	@ (34011b78 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
34011b26:	f7ef fd53 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34011b2a:	4b14      	ldr	r3, [pc, #80]	@ (34011b7c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
34011b2c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011b30:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011b34:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011b38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011b3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011b44:	3b01      	subs	r3, #1
34011b46:	041b      	lsls	r3, r3, #16
34011b48:	4313      	orrs	r3, r2
34011b4a:	4a0c      	ldr	r2, [pc, #48]	@ (34011b7c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
34011b4c:	430b      	orrs	r3, r1
34011b4e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011b52:	f7f9 ff0f 	bl	3400b974 <LL_RCC_IC14_Enable>
34011b56:	e01c      	b.n	34011b92 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
34011b58:	07011430 	.word	0x07011430
34011b5c:	07001830 	.word	0x07001830
34011b60:	07011830 	.word	0x07011830
34011b64:	07021830 	.word	0x07021830
34011b68:	07031830 	.word	0x07031830
34011b6c:	07041830 	.word	0x07041830
34011b70:	07051830 	.word	0x07051830
34011b74:	07061830 	.word	0x07061830
34011b78:	3401d6f8 	.word	0x3401d6f8
34011b7c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34011b80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b84:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34011b88:	4b72      	ldr	r3, [pc, #456]	@ (34011d54 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
34011b8a:	429a      	cmp	r2, r3
34011b8c:	d101      	bne.n	34011b92 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
34011b8e:	f7fa f8b1 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34011b92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011b96:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34011b9a:	4618      	mov	r0, r3
34011b9c:	f7f9 f84d 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34011ba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
34011ba8:	2100      	movs	r1, #0
34011baa:	63b9      	str	r1, [r7, #56]	@ 0x38
34011bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34011bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
34011bb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34011bb6:	4603      	mov	r3, r0
34011bb8:	460a      	mov	r2, r1
34011bba:	4313      	orrs	r3, r2
34011bbc:	f000 80ee 	beq.w	34011d9c <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34011bc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011bc4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011bc8:	4b63      	ldr	r3, [pc, #396]	@ (34011d58 <HAL_RCCEx_PeriphCLKConfig+0x6020>)
34011bca:	429a      	cmp	r2, r3
34011bcc:	d02e      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011bce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011bd2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011bd6:	4b61      	ldr	r3, [pc, #388]	@ (34011d5c <HAL_RCCEx_PeriphCLKConfig+0x6024>)
34011bd8:	429a      	cmp	r2, r3
34011bda:	d027      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011bdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011be0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011be4:	4b5e      	ldr	r3, [pc, #376]	@ (34011d60 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
34011be6:	429a      	cmp	r2, r3
34011be8:	d020      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011bea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011bee:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011bf2:	4b5c      	ldr	r3, [pc, #368]	@ (34011d64 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
34011bf4:	429a      	cmp	r2, r3
34011bf6:	d019      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011bf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011bfc:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011c00:	4b59      	ldr	r3, [pc, #356]	@ (34011d68 <HAL_RCCEx_PeriphCLKConfig+0x6030>)
34011c02:	429a      	cmp	r2, r3
34011c04:	d012      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011c06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c0a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011c0e:	4b57      	ldr	r3, [pc, #348]	@ (34011d6c <HAL_RCCEx_PeriphCLKConfig+0x6034>)
34011c10:	429a      	cmp	r2, r3
34011c12:	d00b      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011c14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c18:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011c1c:	4b54      	ldr	r3, [pc, #336]	@ (34011d70 <HAL_RCCEx_PeriphCLKConfig+0x6038>)
34011c1e:	429a      	cmp	r2, r3
34011c20:	d004      	beq.n	34011c2c <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
34011c22:	f640 0155 	movw	r1, #2133	@ 0x855
34011c26:	4853      	ldr	r0, [pc, #332]	@ (34011d74 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34011c28:	f7ef fcd2 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34011c2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c30:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011c34:	4b4a      	ldr	r3, [pc, #296]	@ (34011d60 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
34011c36:	429a      	cmp	r2, r3
34011c38:	d142      	bne.n	34011cc0 <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011c3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011c40:	2b00      	cmp	r3, #0
34011c42:	d016      	beq.n	34011c72 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34011c44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011c4e:	d010      	beq.n	34011c72 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34011c50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011c5a:	d00a      	beq.n	34011c72 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34011c5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011c66:	d004      	beq.n	34011c72 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
34011c68:	f640 015a 	movw	r1, #2138	@ 0x85a
34011c6c:	4841      	ldr	r0, [pc, #260]	@ (34011d74 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34011c6e:	f7ef fcaf 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34011c72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011c78:	2b00      	cmp	r3, #0
34011c7a:	d005      	beq.n	34011c88 <HAL_RCCEx_PeriphCLKConfig+0x5f50>
34011c7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011c86:	d904      	bls.n	34011c92 <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
34011c88:	f640 015b 	movw	r1, #2139	@ 0x85b
34011c8c:	4839      	ldr	r0, [pc, #228]	@ (34011d74 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34011c8e:	f7ef fc9f 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34011c92:	4b39      	ldr	r3, [pc, #228]	@ (34011d78 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34011c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34011c98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011c9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011ca0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ca4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34011ca6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011cac:	3b01      	subs	r3, #1
34011cae:	041b      	lsls	r3, r3, #16
34011cb0:	4313      	orrs	r3, r2
34011cb2:	4a31      	ldr	r2, [pc, #196]	@ (34011d78 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34011cb4:	430b      	orrs	r3, r1
34011cb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34011cba:	f7f9 fd5b 	bl	3400b774 <LL_RCC_IC9_Enable>
34011cbe:	e066      	b.n	34011d8e <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34011cc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011cc4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011cc8:	4b26      	ldr	r3, [pc, #152]	@ (34011d64 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
34011cca:	429a      	cmp	r2, r3
34011ccc:	d156      	bne.n	34011d7c <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34011cce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011cd4:	2b00      	cmp	r3, #0
34011cd6:	d016      	beq.n	34011d06 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
34011cd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011ce2:	d010      	beq.n	34011d06 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
34011ce4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011cee:	d00a      	beq.n	34011d06 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
34011cf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011cf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cfa:	d004      	beq.n	34011d06 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
34011cfc:	f640 0167 	movw	r1, #2151	@ 0x867
34011d00:	481c      	ldr	r0, [pc, #112]	@ (34011d74 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34011d02:	f7ef fc65 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34011d06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011d0c:	2b00      	cmp	r3, #0
34011d0e:	d005      	beq.n	34011d1c <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
34011d10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011d1a:	d904      	bls.n	34011d26 <HAL_RCCEx_PeriphCLKConfig+0x5fee>
34011d1c:	f640 0168 	movw	r1, #2152	@ 0x868
34011d20:	4814      	ldr	r0, [pc, #80]	@ (34011d74 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
34011d22:	f7ef fc55 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34011d26:	4b14      	ldr	r3, [pc, #80]	@ (34011d78 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34011d28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011d2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011d30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011d34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011d3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011d40:	3b01      	subs	r3, #1
34011d42:	041b      	lsls	r3, r3, #16
34011d44:	4313      	orrs	r3, r2
34011d46:	4a0c      	ldr	r2, [pc, #48]	@ (34011d78 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
34011d48:	430b      	orrs	r3, r1
34011d4a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011d4e:	f7f9 fe11 	bl	3400b974 <LL_RCC_IC14_Enable>
34011d52:	e01c      	b.n	34011d8e <HAL_RCCEx_PeriphCLKConfig+0x6056>
34011d54:	07011830 	.word	0x07011830
34011d58:	07001c30 	.word	0x07001c30
34011d5c:	07011c30 	.word	0x07011c30
34011d60:	07021c30 	.word	0x07021c30
34011d64:	07031c30 	.word	0x07031c30
34011d68:	07041c30 	.word	0x07041c30
34011d6c:	07051c30 	.word	0x07051c30
34011d70:	07061c30 	.word	0x07061c30
34011d74:	3401d6f8 	.word	0x3401d6f8
34011d78:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34011d7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d80:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34011d84:	4b72      	ldr	r3, [pc, #456]	@ (34011f50 <HAL_RCCEx_PeriphCLKConfig+0x6218>)
34011d86:	429a      	cmp	r2, r3
34011d88:	d101      	bne.n	34011d8e <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
34011d8a:	f7f9 ffb3 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34011d8e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011d92:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34011d96:	4618      	mov	r0, r3
34011d98:	f7f8 ff4f 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34011d9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011da0:	e9d3 2300 	ldrd	r2, r3, [r3]
34011da4:	2100      	movs	r1, #0
34011da6:	6339      	str	r1, [r7, #48]	@ 0x30
34011da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34011dac:	637b      	str	r3, [r7, #52]	@ 0x34
34011dae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34011db2:	4603      	mov	r3, r0
34011db4:	460a      	mov	r2, r1
34011db6:	4313      	orrs	r3, r2
34011db8:	f000 80ee 	beq.w	34011f98 <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34011dbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011dc0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011dc4:	4a63      	ldr	r2, [pc, #396]	@ (34011f54 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
34011dc6:	4293      	cmp	r3, r2
34011dc8:	d02e      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011dca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011dce:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011dd2:	4a61      	ldr	r2, [pc, #388]	@ (34011f58 <HAL_RCCEx_PeriphCLKConfig+0x6220>)
34011dd4:	4293      	cmp	r3, r2
34011dd6:	d027      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011dd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ddc:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011de0:	4a5e      	ldr	r2, [pc, #376]	@ (34011f5c <HAL_RCCEx_PeriphCLKConfig+0x6224>)
34011de2:	4293      	cmp	r3, r2
34011de4:	d020      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011de6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011dea:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011dee:	4a5c      	ldr	r2, [pc, #368]	@ (34011f60 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
34011df0:	4293      	cmp	r3, r2
34011df2:	d019      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011df4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011df8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011dfc:	4a59      	ldr	r2, [pc, #356]	@ (34011f64 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
34011dfe:	4293      	cmp	r3, r2
34011e00:	d012      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011e02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e06:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011e0a:	4a57      	ldr	r2, [pc, #348]	@ (34011f68 <HAL_RCCEx_PeriphCLKConfig+0x6230>)
34011e0c:	4293      	cmp	r3, r2
34011e0e:	d00b      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011e10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e14:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011e18:	4a54      	ldr	r2, [pc, #336]	@ (34011f6c <HAL_RCCEx_PeriphCLKConfig+0x6234>)
34011e1a:	4293      	cmp	r3, r2
34011e1c:	d004      	beq.n	34011e28 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
34011e1e:	f640 0182 	movw	r1, #2178	@ 0x882
34011e22:	4853      	ldr	r0, [pc, #332]	@ (34011f70 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
34011e24:	f7ef fbd4 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34011e28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e2c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011e30:	4a4a      	ldr	r2, [pc, #296]	@ (34011f5c <HAL_RCCEx_PeriphCLKConfig+0x6224>)
34011e32:	4293      	cmp	r3, r2
34011e34:	d142      	bne.n	34011ebc <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34011e36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011e3c:	2b00      	cmp	r3, #0
34011e3e:	d016      	beq.n	34011e6e <HAL_RCCEx_PeriphCLKConfig+0x6136>
34011e40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011e4a:	d010      	beq.n	34011e6e <HAL_RCCEx_PeriphCLKConfig+0x6136>
34011e4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011e56:	d00a      	beq.n	34011e6e <HAL_RCCEx_PeriphCLKConfig+0x6136>
34011e58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34011e5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011e62:	d004      	beq.n	34011e6e <HAL_RCCEx_PeriphCLKConfig+0x6136>
34011e64:	f640 0187 	movw	r1, #2183	@ 0x887
34011e68:	4841      	ldr	r0, [pc, #260]	@ (34011f70 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
34011e6a:	f7ef fbb1 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34011e6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011e74:	2b00      	cmp	r3, #0
34011e76:	d005      	beq.n	34011e84 <HAL_RCCEx_PeriphCLKConfig+0x614c>
34011e78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011e82:	d904      	bls.n	34011e8e <HAL_RCCEx_PeriphCLKConfig+0x6156>
34011e84:	f640 0188 	movw	r1, #2184	@ 0x888
34011e88:	4839      	ldr	r0, [pc, #228]	@ (34011f70 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
34011e8a:	f7ef fba1 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34011e8e:	4b39      	ldr	r3, [pc, #228]	@ (34011f74 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34011e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34011e94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011e98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011e9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34011ea2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34011ea8:	3b01      	subs	r3, #1
34011eaa:	041b      	lsls	r3, r3, #16
34011eac:	4313      	orrs	r3, r2
34011eae:	4a31      	ldr	r2, [pc, #196]	@ (34011f74 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34011eb0:	430b      	orrs	r3, r1
34011eb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34011eb6:	f7f9 fc5d 	bl	3400b774 <LL_RCC_IC9_Enable>
34011eba:	e066      	b.n	34011f8a <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34011ebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ec0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011ec4:	4a26      	ldr	r2, [pc, #152]	@ (34011f60 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
34011ec6:	4293      	cmp	r3, r2
34011ec8:	d156      	bne.n	34011f78 <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34011eca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011ed0:	2b00      	cmp	r3, #0
34011ed2:	d016      	beq.n	34011f02 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
34011ed4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011ede:	d010      	beq.n	34011f02 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
34011ee0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011eea:	d00a      	beq.n	34011f02 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
34011eec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34011ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011ef6:	d004      	beq.n	34011f02 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
34011ef8:	f640 0194 	movw	r1, #2196	@ 0x894
34011efc:	481c      	ldr	r0, [pc, #112]	@ (34011f70 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
34011efe:	f7ef fb67 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34011f02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011f08:	2b00      	cmp	r3, #0
34011f0a:	d005      	beq.n	34011f18 <HAL_RCCEx_PeriphCLKConfig+0x61e0>
34011f0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011f16:	d904      	bls.n	34011f22 <HAL_RCCEx_PeriphCLKConfig+0x61ea>
34011f18:	f640 0195 	movw	r1, #2197	@ 0x895
34011f1c:	4814      	ldr	r0, [pc, #80]	@ (34011f70 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
34011f1e:	f7ef fb57 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34011f22:	4b14      	ldr	r3, [pc, #80]	@ (34011f74 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34011f24:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34011f28:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34011f2c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34011f30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34011f36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34011f3c:	3b01      	subs	r3, #1
34011f3e:	041b      	lsls	r3, r3, #16
34011f40:	4313      	orrs	r3, r2
34011f42:	4a0c      	ldr	r2, [pc, #48]	@ (34011f74 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
34011f44:	430b      	orrs	r3, r1
34011f46:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34011f4a:	f7f9 fd13 	bl	3400b974 <LL_RCC_IC14_Enable>
34011f4e:	e01c      	b.n	34011f8a <HAL_RCCEx_PeriphCLKConfig+0x6252>
34011f50:	07011c30 	.word	0x07011c30
34011f54:	07000034 	.word	0x07000034
34011f58:	07010034 	.word	0x07010034
34011f5c:	07020034 	.word	0x07020034
34011f60:	07030034 	.word	0x07030034
34011f64:	07040034 	.word	0x07040034
34011f68:	07050034 	.word	0x07050034
34011f6c:	07060034 	.word	0x07060034
34011f70:	3401d6f8 	.word	0x3401d6f8
34011f74:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34011f78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f7c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011f80:	4ab7      	ldr	r2, [pc, #732]	@ (34012260 <HAL_RCCEx_PeriphCLKConfig+0x6528>)
34011f82:	4293      	cmp	r3, r2
34011f84:	d101      	bne.n	34011f8a <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
34011f86:	f7f9 feb5 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
34011f8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34011f92:	4618      	mov	r0, r3
34011f94:	f7f8 fe51 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34011f98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
34011fa0:	2100      	movs	r1, #0
34011fa2:	62b9      	str	r1, [r7, #40]	@ 0x28
34011fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34011fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
34011faa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34011fae:	4603      	mov	r3, r0
34011fb0:	460a      	mov	r2, r1
34011fb2:	4313      	orrs	r3, r2
34011fb4:	f000 80da 	beq.w	3401216c <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34011fb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011fbc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34011fc0:	4aa8      	ldr	r2, [pc, #672]	@ (34012264 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
34011fc2:	4293      	cmp	r3, r2
34011fc4:	d02e      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34011fc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011fca:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34011fce:	4aa6      	ldr	r2, [pc, #664]	@ (34012268 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
34011fd0:	4293      	cmp	r3, r2
34011fd2:	d027      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34011fd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011fd8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34011fdc:	4aa3      	ldr	r2, [pc, #652]	@ (3401226c <HAL_RCCEx_PeriphCLKConfig+0x6534>)
34011fde:	4293      	cmp	r3, r2
34011fe0:	d020      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34011fe2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011fe6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34011fea:	4aa1      	ldr	r2, [pc, #644]	@ (34012270 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
34011fec:	4293      	cmp	r3, r2
34011fee:	d019      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34011ff0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34011ff4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34011ff8:	4a9e      	ldr	r2, [pc, #632]	@ (34012274 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
34011ffa:	4293      	cmp	r3, r2
34011ffc:	d012      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
34011ffe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012002:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34012006:	4a9c      	ldr	r2, [pc, #624]	@ (34012278 <HAL_RCCEx_PeriphCLKConfig+0x6540>)
34012008:	4293      	cmp	r3, r2
3401200a:	d00b      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3401200c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012010:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34012014:	4a99      	ldr	r2, [pc, #612]	@ (3401227c <HAL_RCCEx_PeriphCLKConfig+0x6544>)
34012016:	4293      	cmp	r3, r2
34012018:	d004      	beq.n	34012024 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3401201a:	f640 01af 	movw	r1, #2223	@ 0x8af
3401201e:	4898      	ldr	r0, [pc, #608]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
34012020:	f7ef fad6 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34012024:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012028:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3401202c:	4a8f      	ldr	r2, [pc, #572]	@ (3401226c <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3401202e:	4293      	cmp	r3, r2
34012030:	d142      	bne.n	340120b8 <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34012032:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34012038:	2b00      	cmp	r3, #0
3401203a:	d016      	beq.n	3401206a <HAL_RCCEx_PeriphCLKConfig+0x6332>
3401203c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34012042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012046:	d010      	beq.n	3401206a <HAL_RCCEx_PeriphCLKConfig+0x6332>
34012048:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401204e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012052:	d00a      	beq.n	3401206a <HAL_RCCEx_PeriphCLKConfig+0x6332>
34012054:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401205a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401205e:	d004      	beq.n	3401206a <HAL_RCCEx_PeriphCLKConfig+0x6332>
34012060:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34012064:	4886      	ldr	r0, [pc, #536]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
34012066:	f7ef fab3 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401206a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34012070:	2b00      	cmp	r3, #0
34012072:	d005      	beq.n	34012080 <HAL_RCCEx_PeriphCLKConfig+0x6348>
34012074:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401207a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401207e:	d904      	bls.n	3401208a <HAL_RCCEx_PeriphCLKConfig+0x6352>
34012080:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34012084:	487e      	ldr	r0, [pc, #504]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
34012086:	f7ef faa3 	bl	340015d0 <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401208a:	4b7e      	ldr	r3, [pc, #504]	@ (34012284 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3401208c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34012090:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34012094:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34012098:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3401209c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3401209e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
340120a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
340120a4:	3a01      	subs	r2, #1
340120a6:	0412      	lsls	r2, r2, #16
340120a8:	430a      	orrs	r2, r1
340120aa:	4976      	ldr	r1, [pc, #472]	@ (34012284 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
340120ac:	4313      	orrs	r3, r2
340120ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340120b2:	f7f9 fb5f 	bl	3400b774 <LL_RCC_IC9_Enable>
340120b6:	e052      	b.n	3401215e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
340120b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340120bc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
340120c0:	4a6b      	ldr	r2, [pc, #428]	@ (34012270 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
340120c2:	4293      	cmp	r3, r2
340120c4:	d142      	bne.n	3401214c <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340120c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340120ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340120cc:	2b00      	cmp	r3, #0
340120ce:	d016      	beq.n	340120fe <HAL_RCCEx_PeriphCLKConfig+0x63c6>
340120d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340120d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340120d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340120da:	d010      	beq.n	340120fe <HAL_RCCEx_PeriphCLKConfig+0x63c6>
340120dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340120e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340120e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340120e6:	d00a      	beq.n	340120fe <HAL_RCCEx_PeriphCLKConfig+0x63c6>
340120e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340120ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
340120ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340120f2:	d004      	beq.n	340120fe <HAL_RCCEx_PeriphCLKConfig+0x63c6>
340120f4:	f640 01c1 	movw	r1, #2241	@ 0x8c1
340120f8:	4861      	ldr	r0, [pc, #388]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
340120fa:	f7ef fa69 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340120fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34012104:	2b00      	cmp	r3, #0
34012106:	d005      	beq.n	34012114 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
34012108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401210c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401210e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34012112:	d904      	bls.n	3401211e <HAL_RCCEx_PeriphCLKConfig+0x63e6>
34012114:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34012118:	4859      	ldr	r0, [pc, #356]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3401211a:	f7ef fa59 	bl	340015d0 <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401211e:	4b59      	ldr	r3, [pc, #356]	@ (34012284 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
34012120:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34012124:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34012128:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401212c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34012130:	6f11      	ldr	r1, [r2, #112]	@ 0x70
34012132:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34012136:	6f52      	ldr	r2, [r2, #116]	@ 0x74
34012138:	3a01      	subs	r2, #1
3401213a:	0412      	lsls	r2, r2, #16
3401213c:	430a      	orrs	r2, r1
3401213e:	4951      	ldr	r1, [pc, #324]	@ (34012284 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
34012140:	4313      	orrs	r3, r2
34012142:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34012146:	f7f9 fc15 	bl	3400b974 <LL_RCC_IC14_Enable>
3401214a:	e008      	b.n	3401215e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3401214c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012150:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34012154:	4a44      	ldr	r2, [pc, #272]	@ (34012268 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
34012156:	4293      	cmp	r3, r2
34012158:	d101      	bne.n	3401215e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3401215a:	f7f9 fdcb 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3401215e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012162:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34012166:	4618      	mov	r0, r3
34012168:	f7f8 fd67 	bl	3400ac3a <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3401216c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012170:	e9d3 2300 	ldrd	r2, r3, [r3]
34012174:	2100      	movs	r1, #0
34012176:	6239      	str	r1, [r7, #32]
34012178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3401217c:	627b      	str	r3, [r7, #36]	@ 0x24
3401217e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34012182:	4603      	mov	r3, r0
34012184:	460a      	mov	r2, r1
34012186:	4313      	orrs	r3, r2
34012188:	d02e      	beq.n	340121e8 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3401218a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401218e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34012192:	4a3d      	ldr	r2, [pc, #244]	@ (34012288 <HAL_RCCEx_PeriphCLKConfig+0x6550>)
34012194:	4293      	cmp	r3, r2
34012196:	d012      	beq.n	340121be <HAL_RCCEx_PeriphCLKConfig+0x6486>
34012198:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401219c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340121a0:	4a3a      	ldr	r2, [pc, #232]	@ (3401228c <HAL_RCCEx_PeriphCLKConfig+0x6554>)
340121a2:	4293      	cmp	r3, r2
340121a4:	d00b      	beq.n	340121be <HAL_RCCEx_PeriphCLKConfig+0x6486>
340121a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340121aa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340121ae:	4a38      	ldr	r2, [pc, #224]	@ (34012290 <HAL_RCCEx_PeriphCLKConfig+0x6558>)
340121b0:	4293      	cmp	r3, r2
340121b2:	d004      	beq.n	340121be <HAL_RCCEx_PeriphCLKConfig+0x6486>
340121b4:	f640 01dc 	movw	r1, #2268	@ 0x8dc
340121b8:	4831      	ldr	r0, [pc, #196]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
340121ba:	f7ef fa09 	bl	340015d0 <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340121be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340121c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340121c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340121ca:	4618      	mov	r0, r3
340121cc:	f7f8 fcdd 	bl	3400ab8a <LL_RCC_SetOTGPHYCKREFClockSource>
340121d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340121d4:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340121d8:	0fdb      	lsrs	r3, r3, #31
340121da:	2b01      	cmp	r3, #1
340121dc:	d102      	bne.n	340121e4 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
340121de:	f7f8 fa7f 	bl	3400a6e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
340121e2:	e001      	b.n	340121e8 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
340121e4:	f7f8 fa6c 	bl	3400a6c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
340121e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
340121f0:	2100      	movs	r1, #0
340121f2:	61b9      	str	r1, [r7, #24]
340121f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
340121f8:	61fb      	str	r3, [r7, #28]
340121fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
340121fe:	4603      	mov	r3, r0
34012200:	460a      	mov	r2, r1
34012202:	4313      	orrs	r3, r2
34012204:	d04e      	beq.n	340122a4 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34012206:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401220a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3401220e:	4a21      	ldr	r2, [pc, #132]	@ (34012294 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
34012210:	4293      	cmp	r3, r2
34012212:	d012      	beq.n	3401223a <HAL_RCCEx_PeriphCLKConfig+0x6502>
34012214:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012218:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3401221c:	4a1e      	ldr	r2, [pc, #120]	@ (34012298 <HAL_RCCEx_PeriphCLKConfig+0x6560>)
3401221e:	4293      	cmp	r3, r2
34012220:	d00b      	beq.n	3401223a <HAL_RCCEx_PeriphCLKConfig+0x6502>
34012222:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012226:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3401222a:	4a1c      	ldr	r2, [pc, #112]	@ (3401229c <HAL_RCCEx_PeriphCLKConfig+0x6564>)
3401222c:	4293      	cmp	r3, r2
3401222e:	d004      	beq.n	3401223a <HAL_RCCEx_PeriphCLKConfig+0x6502>
34012230:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34012234:	4812      	ldr	r0, [pc, #72]	@ (34012280 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
34012236:	f7ef f9cb 	bl	340015d0 <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3401223a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401223e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34012242:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34012246:	4618      	mov	r0, r3
34012248:	f7f8 fc9f 	bl	3400ab8a <LL_RCC_SetOTGPHYCKREFClockSource>
3401224c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012250:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
34012254:	0fdb      	lsrs	r3, r3, #31
34012256:	2b01      	cmp	r3, #1
34012258:	d122      	bne.n	340122a0 <HAL_RCCEx_PeriphCLKConfig+0x6568>
3401225a:	f7f8 fa41 	bl	3400a6e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3401225e:	e021      	b.n	340122a4 <HAL_RCCEx_PeriphCLKConfig+0x656c>
34012260:	07010034 	.word	0x07010034
34012264:	07000434 	.word	0x07000434
34012268:	07010434 	.word	0x07010434
3401226c:	07020434 	.word	0x07020434
34012270:	07030434 	.word	0x07030434
34012274:	07040434 	.word	0x07040434
34012278:	07050434 	.word	0x07050434
3401227c:	07060434 	.word	0x07060434
34012280:	3401d6f8 	.word	0x3401d6f8
34012284:	56028000 	.word	0x56028000
34012288:	01001014 	.word	0x01001014
3401228c:	01011014 	.word	0x01011014
34012290:	81011014 	.word	0x81011014
34012294:	01001814 	.word	0x01001814
34012298:	01011814 	.word	0x01011814
3401229c:	81011814 	.word	0x81011814
340122a0:	f7f8 fa0e 	bl	3400a6c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
340122a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
340122ac:	2100      	movs	r1, #0
340122ae:	6139      	str	r1, [r7, #16]
340122b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
340122b4:	617b      	str	r3, [r7, #20]
340122b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
340122ba:	4603      	mov	r3, r0
340122bc:	460a      	mov	r2, r1
340122be:	4313      	orrs	r3, r2
340122c0:	f000 8090 	beq.w	340123e4 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
340122c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340122c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340122cc:	4ab5      	ldr	r2, [pc, #724]	@ (340125a4 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
340122ce:	4293      	cmp	r3, r2
340122d0:	d020      	beq.n	34012314 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
340122d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340122d6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340122da:	4ab3      	ldr	r2, [pc, #716]	@ (340125a8 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
340122dc:	4293      	cmp	r3, r2
340122de:	d019      	beq.n	34012314 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
340122e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340122e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340122e8:	4ab0      	ldr	r2, [pc, #704]	@ (340125ac <HAL_RCCEx_PeriphCLKConfig+0x6874>)
340122ea:	4293      	cmp	r3, r2
340122ec:	d012      	beq.n	34012314 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
340122ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340122f2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340122f6:	4aae      	ldr	r2, [pc, #696]	@ (340125b0 <HAL_RCCEx_PeriphCLKConfig+0x6878>)
340122f8:	4293      	cmp	r3, r2
340122fa:	d00b      	beq.n	34012314 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
340122fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012300:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34012304:	4aab      	ldr	r2, [pc, #684]	@ (340125b4 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
34012306:	4293      	cmp	r3, r2
34012308:	d004      	beq.n	34012314 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3401230a:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3401230e:	48aa      	ldr	r0, [pc, #680]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012310:	f7ef f95e 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34012314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012318:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3401231c:	4aa3      	ldr	r2, [pc, #652]	@ (340125ac <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3401231e:	4293      	cmp	r3, r2
34012320:	d142      	bne.n	340123a8 <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34012322:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012326:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34012328:	2b00      	cmp	r3, #0
3401232a:	d016      	beq.n	3401235a <HAL_RCCEx_PeriphCLKConfig+0x6622>
3401232c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34012332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012336:	d010      	beq.n	3401235a <HAL_RCCEx_PeriphCLKConfig+0x6622>
34012338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401233c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401233e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012342:	d00a      	beq.n	3401235a <HAL_RCCEx_PeriphCLKConfig+0x6622>
34012344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401234a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401234e:	d004      	beq.n	3401235a <HAL_RCCEx_PeriphCLKConfig+0x6622>
34012350:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34012354:	4898      	ldr	r0, [pc, #608]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012356:	f7ef f93b 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401235a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401235e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34012360:	2b00      	cmp	r3, #0
34012362:	d005      	beq.n	34012370 <HAL_RCCEx_PeriphCLKConfig+0x6638>
34012364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401236a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401236e:	d904      	bls.n	3401237a <HAL_RCCEx_PeriphCLKConfig+0x6642>
34012370:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34012374:	4890      	ldr	r0, [pc, #576]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012376:	f7ef f92b 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401237a:	4b90      	ldr	r3, [pc, #576]	@ (340125bc <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3401237c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34012380:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34012384:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34012388:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3401238c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3401238e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34012392:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34012394:	3a01      	subs	r2, #1
34012396:	0412      	lsls	r2, r2, #16
34012398:	430a      	orrs	r2, r1
3401239a:	4988      	ldr	r1, [pc, #544]	@ (340125bc <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3401239c:	4313      	orrs	r3, r2
3401239e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340123a2:	f7f9 fb27 	bl	3400b9f4 <LL_RCC_IC15_Enable>
340123a6:	e008      	b.n	340123ba <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
340123a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340123ac:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340123b0:	4a7d      	ldr	r2, [pc, #500]	@ (340125a8 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
340123b2:	4293      	cmp	r3, r2
340123b4:	d101      	bne.n	340123ba <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
340123b6:	f7f9 fc9d 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340123ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340123be:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340123c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340123c6:	4618      	mov	r0, r3
340123c8:	f7f8 fbd4 	bl	3400ab74 <LL_RCC_SetOTGPHYClockSource>
340123cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340123d0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340123d4:	0fdb      	lsrs	r3, r3, #31
340123d6:	2b01      	cmp	r3, #1
340123d8:	d102      	bne.n	340123e0 <HAL_RCCEx_PeriphCLKConfig+0x66a8>
340123da:	f7f8 f981 	bl	3400a6e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
340123de:	e001      	b.n	340123e4 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
340123e0:	f7f8 f96e 	bl	3400a6c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
340123e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
340123ec:	2100      	movs	r1, #0
340123ee:	60b9      	str	r1, [r7, #8]
340123f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340123f4:	60fb      	str	r3, [r7, #12]
340123f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
340123fa:	4603      	mov	r3, r0
340123fc:	460a      	mov	r2, r1
340123fe:	4313      	orrs	r3, r2
34012400:	f000 8090 	beq.w	34012524 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34012404:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012408:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3401240c:	4a6c      	ldr	r2, [pc, #432]	@ (340125c0 <HAL_RCCEx_PeriphCLKConfig+0x6888>)
3401240e:	4293      	cmp	r3, r2
34012410:	d020      	beq.n	34012454 <HAL_RCCEx_PeriphCLKConfig+0x671c>
34012412:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012416:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3401241a:	4a6a      	ldr	r2, [pc, #424]	@ (340125c4 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
3401241c:	4293      	cmp	r3, r2
3401241e:	d019      	beq.n	34012454 <HAL_RCCEx_PeriphCLKConfig+0x671c>
34012420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012424:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34012428:	4a67      	ldr	r2, [pc, #412]	@ (340125c8 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3401242a:	4293      	cmp	r3, r2
3401242c:	d012      	beq.n	34012454 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3401242e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012432:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34012436:	4a65      	ldr	r2, [pc, #404]	@ (340125cc <HAL_RCCEx_PeriphCLKConfig+0x6894>)
34012438:	4293      	cmp	r3, r2
3401243a:	d00b      	beq.n	34012454 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3401243c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012440:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34012444:	4a62      	ldr	r2, [pc, #392]	@ (340125d0 <HAL_RCCEx_PeriphCLKConfig+0x6898>)
34012446:	4293      	cmp	r3, r2
34012448:	d004      	beq.n	34012454 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3401244a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3401244e:	485a      	ldr	r0, [pc, #360]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012450:	f7ef f8be 	bl	340015d0 <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34012454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012458:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3401245c:	4a5a      	ldr	r2, [pc, #360]	@ (340125c8 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3401245e:	4293      	cmp	r3, r2
34012460:	d142      	bne.n	340124e8 <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34012462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012466:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34012468:	2b00      	cmp	r3, #0
3401246a:	d016      	beq.n	3401249a <HAL_RCCEx_PeriphCLKConfig+0x6762>
3401246c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34012472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012476:	d010      	beq.n	3401249a <HAL_RCCEx_PeriphCLKConfig+0x6762>
34012478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401247c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401247e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012482:	d00a      	beq.n	3401249a <HAL_RCCEx_PeriphCLKConfig+0x6762>
34012484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401248a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401248e:	d004      	beq.n	3401249a <HAL_RCCEx_PeriphCLKConfig+0x6762>
34012490:	f640 1115 	movw	r1, #2325	@ 0x915
34012494:	4848      	ldr	r0, [pc, #288]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012496:	f7ef f89b 	bl	340015d0 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401249a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401249e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340124a0:	2b00      	cmp	r3, #0
340124a2:	d005      	beq.n	340124b0 <HAL_RCCEx_PeriphCLKConfig+0x6778>
340124a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340124a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340124aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340124ae:	d904      	bls.n	340124ba <HAL_RCCEx_PeriphCLKConfig+0x6782>
340124b0:	f640 1116 	movw	r1, #2326	@ 0x916
340124b4:	4840      	ldr	r0, [pc, #256]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
340124b6:	f7ef f88b 	bl	340015d0 <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340124ba:	4b40      	ldr	r3, [pc, #256]	@ (340125bc <HAL_RCCEx_PeriphCLKConfig+0x6884>)
340124bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340124c0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340124c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340124c8:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
340124cc:	6f91      	ldr	r1, [r2, #120]	@ 0x78
340124ce:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
340124d2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
340124d4:	3a01      	subs	r2, #1
340124d6:	0412      	lsls	r2, r2, #16
340124d8:	430a      	orrs	r2, r1
340124da:	4938      	ldr	r1, [pc, #224]	@ (340125bc <HAL_RCCEx_PeriphCLKConfig+0x6884>)
340124dc:	4313      	orrs	r3, r2
340124de:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340124e2:	f7f9 fa87 	bl	3400b9f4 <LL_RCC_IC15_Enable>
340124e6:	e008      	b.n	340124fa <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
340124e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340124ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340124f0:	4a34      	ldr	r2, [pc, #208]	@ (340125c4 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
340124f2:	4293      	cmp	r3, r2
340124f4:	d101      	bne.n	340124fa <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
340124f6:	f7f9 fbfd 	bl	3400bcf4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340124fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340124fe:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34012502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34012506:	4618      	mov	r0, r3
34012508:	f7f8 fb34 	bl	3400ab74 <LL_RCC_SetOTGPHYClockSource>
3401250c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012510:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34012514:	0fdb      	lsrs	r3, r3, #31
34012516:	2b01      	cmp	r3, #1
34012518:	d102      	bne.n	34012520 <HAL_RCCEx_PeriphCLKConfig+0x67e8>
3401251a:	f7f8 f8e1 	bl	3400a6e0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3401251e:	e001      	b.n	34012524 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
34012520:	f7f8 f8ce 	bl	3400a6c0 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34012524:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012528:	e9d3 2300 	ldrd	r2, r3, [r3]
3401252c:	2100      	movs	r1, #0
3401252e:	6039      	str	r1, [r7, #0]
34012530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34012534:	607b      	str	r3, [r7, #4]
34012536:	e9d7 0100 	ldrd	r0, r1, [r7]
3401253a:	4603      	mov	r3, r0
3401253c:	460a      	mov	r2, r1
3401253e:	4313      	orrs	r3, r2
34012540:	d023      	beq.n	3401258a <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34012542:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012546:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401254a:	2b00      	cmp	r3, #0
3401254c:	d016      	beq.n	3401257c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401254e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012552:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34012556:	2b01      	cmp	r3, #1
34012558:	d010      	beq.n	3401257c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401255a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401255e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34012562:	2b02      	cmp	r3, #2
34012564:	d00a      	beq.n	3401257c <HAL_RCCEx_PeriphCLKConfig+0x6844>
34012566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401256a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401256e:	2b03      	cmp	r3, #3
34012570:	d004      	beq.n	3401257c <HAL_RCCEx_PeriphCLKConfig+0x6844>
34012572:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34012576:	4810      	ldr	r0, [pc, #64]	@ (340125b8 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34012578:	f7ef f82a 	bl	340015d0 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3401257c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34012580:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34012584:	4618      	mov	r0, r3
34012586:	f7f8 fd31 	bl	3400afec <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3401258a:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
3401258e:	2b00      	cmp	r3, #0
34012590:	d101      	bne.n	34012596 <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
34012592:	2300      	movs	r3, #0
34012594:	e000      	b.n	34012598 <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
34012596:	2301      	movs	r3, #1
}
34012598:	4618      	mov	r0, r3
3401259a:	f507 7764 	add.w	r7, r7, #912	@ 0x390
3401259e:	46bd      	mov	sp, r7
340125a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
340125a4:	03000c14 	.word	0x03000c14
340125a8:	03010c14 	.word	0x03010c14
340125ac:	03020c14 	.word	0x03020c14
340125b0:	03030c14 	.word	0x03030c14
340125b4:	83030c14 	.word	0x83030c14
340125b8:	3401d6f8 	.word	0x3401d6f8
340125bc:	56028000 	.word	0x56028000
340125c0:	03001414 	.word	0x03001414
340125c4:	03011414 	.word	0x03011414
340125c8:	03021414 	.word	0x03021414
340125cc:	03031414 	.word	0x03031414
340125d0:	83031414 	.word	0x83031414

340125d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
340125d4:	b590      	push	{r4, r7, lr}
340125d6:	b085      	sub	sp, #20
340125d8:	af00      	add	r7, sp, #0
340125da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
340125de:	2100      	movs	r1, #0
340125e0:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
340125e2:	e9d7 0100 	ldrd	r0, r1, [r7]
340125e6:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
340125ea:	ea50 0104 	orrs.w	r1, r0, r4
340125ee:	f000 8436 	beq.w	34012e5e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
340125f2:	e9d7 0100 	ldrd	r0, r1, [r7]
340125f6:	2801      	cmp	r0, #1
340125f8:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
340125fc:	f080 8434 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012600:	e9d7 0100 	ldrd	r0, r1, [r7]
34012604:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34012608:	ea50 0104 	orrs.w	r1, r0, r4
3401260c:	f000 8422 	beq.w	34012e54 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
34012610:	e9d7 0100 	ldrd	r0, r1, [r7]
34012614:	2801      	cmp	r0, #1
34012616:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
3401261a:	f080 8425 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401261e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012622:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
34012626:	ea50 0104 	orrs.w	r1, r0, r4
3401262a:	f000 840e 	beq.w	34012e4a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
3401262e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012632:	2801      	cmp	r0, #1
34012634:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
34012638:	f080 8416 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401263c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012640:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34012644:	ea50 0104 	orrs.w	r1, r0, r4
34012648:	f000 83fa 	beq.w	34012e40 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
3401264c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012650:	2801      	cmp	r0, #1
34012652:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34012656:	f080 8407 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401265a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401265e:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34012662:	ea50 0104 	orrs.w	r1, r0, r4
34012666:	f000 83e6 	beq.w	34012e36 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3401266a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401266e:	2801      	cmp	r0, #1
34012670:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34012674:	f080 83f8 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012678:	e9d7 0100 	ldrd	r0, r1, [r7]
3401267c:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34012680:	ea50 0104 	orrs.w	r1, r0, r4
34012684:	f000 83d2 	beq.w	34012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34012688:	e9d7 0100 	ldrd	r0, r1, [r7]
3401268c:	2801      	cmp	r0, #1
3401268e:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34012692:	f080 83e9 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012696:	e9d7 0100 	ldrd	r0, r1, [r7]
3401269a:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3401269e:	ea50 0104 	orrs.w	r1, r0, r4
340126a2:	f000 83be 	beq.w	34012e22 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
340126a6:	e9d7 0100 	ldrd	r0, r1, [r7]
340126aa:	2801      	cmp	r0, #1
340126ac:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
340126b0:	f080 83da 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340126b4:	e9d7 0100 	ldrd	r0, r1, [r7]
340126b8:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
340126bc:	ea50 0104 	orrs.w	r1, r0, r4
340126c0:	f000 83aa 	beq.w	34012e18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
340126c4:	e9d7 0100 	ldrd	r0, r1, [r7]
340126c8:	2801      	cmp	r0, #1
340126ca:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
340126ce:	f080 83cb 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340126d2:	e9d7 0100 	ldrd	r0, r1, [r7]
340126d6:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
340126da:	ea50 0104 	orrs.w	r1, r0, r4
340126de:	f000 8396 	beq.w	34012e0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
340126e2:	e9d7 0100 	ldrd	r0, r1, [r7]
340126e6:	2801      	cmp	r0, #1
340126e8:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
340126ec:	f080 83bc 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340126f0:	e9d7 0100 	ldrd	r0, r1, [r7]
340126f4:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
340126f8:	ea50 0104 	orrs.w	r1, r0, r4
340126fc:	f000 8382 	beq.w	34012e04 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
34012700:	e9d7 0100 	ldrd	r0, r1, [r7]
34012704:	2801      	cmp	r0, #1
34012706:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
3401270a:	f080 83ad 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401270e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012712:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
34012716:	ea50 0104 	orrs.w	r1, r0, r4
3401271a:	f000 836e 	beq.w	34012dfa <HAL_RCCEx_GetPeriphCLKFreq+0x826>
3401271e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012722:	2801      	cmp	r0, #1
34012724:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
34012728:	f080 839e 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401272c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012730:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
34012734:	ea50 0104 	orrs.w	r1, r0, r4
34012738:	f000 835a 	beq.w	34012df0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
3401273c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012740:	2801      	cmp	r0, #1
34012742:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
34012746:	f080 838f 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401274a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401274e:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
34012752:	ea50 0104 	orrs.w	r1, r0, r4
34012756:	f000 8346 	beq.w	34012de6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3401275a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401275e:	2801      	cmp	r0, #1
34012760:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34012764:	f080 8380 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012768:	e9d7 0100 	ldrd	r0, r1, [r7]
3401276c:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34012770:	ea50 0104 	orrs.w	r1, r0, r4
34012774:	f000 8332 	beq.w	34012ddc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34012778:	e9d7 0100 	ldrd	r0, r1, [r7]
3401277c:	2801      	cmp	r0, #1
3401277e:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34012782:	f080 8371 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012786:	e9d7 0100 	ldrd	r0, r1, [r7]
3401278a:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3401278e:	ea50 0104 	orrs.w	r1, r0, r4
34012792:	f000 831e 	beq.w	34012dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34012796:	e9d7 0100 	ldrd	r0, r1, [r7]
3401279a:	2801      	cmp	r0, #1
3401279c:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
340127a0:	f080 8362 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340127a4:	e9d7 0100 	ldrd	r0, r1, [r7]
340127a8:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
340127ac:	ea50 0104 	orrs.w	r1, r0, r4
340127b0:	f000 830a 	beq.w	34012dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
340127b4:	e9d7 0100 	ldrd	r0, r1, [r7]
340127b8:	2801      	cmp	r0, #1
340127ba:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
340127be:	f080 8353 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340127c2:	e9d7 0100 	ldrd	r0, r1, [r7]
340127c6:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
340127ca:	ea50 0104 	orrs.w	r1, r0, r4
340127ce:	f000 82f6 	beq.w	34012dbe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
340127d2:	e9d7 0100 	ldrd	r0, r1, [r7]
340127d6:	2801      	cmp	r0, #1
340127d8:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
340127dc:	f080 8344 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340127e0:	e9d7 0100 	ldrd	r0, r1, [r7]
340127e4:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
340127e8:	ea50 0104 	orrs.w	r1, r0, r4
340127ec:	f000 82e2 	beq.w	34012db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
340127f0:	e9d7 0100 	ldrd	r0, r1, [r7]
340127f4:	2801      	cmp	r0, #1
340127f6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
340127fa:	f080 8335 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340127fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34012802:	f1a1 0420 	sub.w	r4, r1, #32
34012806:	ea50 0104 	orrs.w	r1, r0, r4
3401280a:	f000 82ce 	beq.w	34012daa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3401280e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012812:	2801      	cmp	r0, #1
34012814:	f171 0120 	sbcs.w	r1, r1, #32
34012818:	f080 8326 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401281c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012820:	f1a1 0410 	sub.w	r4, r1, #16
34012824:	ea50 0104 	orrs.w	r1, r0, r4
34012828:	f000 82ba 	beq.w	34012da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
3401282c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012830:	2801      	cmp	r0, #1
34012832:	f171 0110 	sbcs.w	r1, r1, #16
34012836:	f080 8317 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401283a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401283e:	f1a1 0408 	sub.w	r4, r1, #8
34012842:	ea50 0104 	orrs.w	r1, r0, r4
34012846:	f000 82a6 	beq.w	34012d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
3401284a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401284e:	2801      	cmp	r0, #1
34012850:	f171 0108 	sbcs.w	r1, r1, #8
34012854:	f080 8308 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012858:	e9d7 0100 	ldrd	r0, r1, [r7]
3401285c:	1f0c      	subs	r4, r1, #4
3401285e:	ea50 0104 	orrs.w	r1, r0, r4
34012862:	f000 8293 	beq.w	34012d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34012866:	e9d7 0100 	ldrd	r0, r1, [r7]
3401286a:	2801      	cmp	r0, #1
3401286c:	f171 0104 	sbcs.w	r1, r1, #4
34012870:	f080 82fa 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012874:	e9d7 0100 	ldrd	r0, r1, [r7]
34012878:	1e8c      	subs	r4, r1, #2
3401287a:	ea50 0104 	orrs.w	r1, r0, r4
3401287e:	f000 8280 	beq.w	34012d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34012882:	e9d7 0100 	ldrd	r0, r1, [r7]
34012886:	2801      	cmp	r0, #1
34012888:	f171 0102 	sbcs.w	r1, r1, #2
3401288c:	f080 82ec 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012890:	e9d7 0100 	ldrd	r0, r1, [r7]
34012894:	1e4c      	subs	r4, r1, #1
34012896:	ea50 0104 	orrs.w	r1, r0, r4
3401289a:	f000 826d 	beq.w	34012d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3401289e:	e9d7 0100 	ldrd	r0, r1, [r7]
340128a2:	2801      	cmp	r0, #1
340128a4:	f171 0101 	sbcs.w	r1, r1, #1
340128a8:	f080 82de 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340128ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340128b0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
340128b4:	4321      	orrs	r1, r4
340128b6:	f000 825a 	beq.w	34012d6e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
340128ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340128be:	4cda      	ldr	r4, [pc, #872]	@ (34012c28 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
340128c0:	42a0      	cmp	r0, r4
340128c2:	f171 0100 	sbcs.w	r1, r1, #0
340128c6:	f080 82cf 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340128ca:	e9d7 0100 	ldrd	r0, r1, [r7]
340128ce:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
340128d2:	4321      	orrs	r1, r4
340128d4:	f000 8246 	beq.w	34012d64 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
340128d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340128dc:	4cd3      	ldr	r4, [pc, #844]	@ (34012c2c <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
340128de:	42a0      	cmp	r0, r4
340128e0:	f171 0100 	sbcs.w	r1, r1, #0
340128e4:	f080 82c0 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340128e8:	e9d7 0100 	ldrd	r0, r1, [r7]
340128ec:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
340128f0:	4321      	orrs	r1, r4
340128f2:	f000 8232 	beq.w	34012d5a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
340128f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340128fa:	4ccd      	ldr	r4, [pc, #820]	@ (34012c30 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
340128fc:	42a0      	cmp	r0, r4
340128fe:	f171 0100 	sbcs.w	r1, r1, #0
34012902:	f080 82b1 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012906:	e9d7 0100 	ldrd	r0, r1, [r7]
3401290a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3401290e:	4321      	orrs	r1, r4
34012910:	f000 821e 	beq.w	34012d50 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
34012914:	e9d7 0100 	ldrd	r0, r1, [r7]
34012918:	4cc6      	ldr	r4, [pc, #792]	@ (34012c34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
3401291a:	42a0      	cmp	r0, r4
3401291c:	f171 0100 	sbcs.w	r1, r1, #0
34012920:	f080 82a2 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012924:	e9d7 0100 	ldrd	r0, r1, [r7]
34012928:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
3401292c:	4321      	orrs	r1, r4
3401292e:	f000 820b 	beq.w	34012d48 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
34012932:	e9d7 0100 	ldrd	r0, r1, [r7]
34012936:	4cc0      	ldr	r4, [pc, #768]	@ (34012c38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
34012938:	42a0      	cmp	r0, r4
3401293a:	f171 0100 	sbcs.w	r1, r1, #0
3401293e:	f080 8293 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012942:	e9d7 0100 	ldrd	r0, r1, [r7]
34012946:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
3401294a:	4321      	orrs	r1, r4
3401294c:	f000 81f7 	beq.w	34012d3e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34012950:	e9d7 0100 	ldrd	r0, r1, [r7]
34012954:	4cb9      	ldr	r4, [pc, #740]	@ (34012c3c <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
34012956:	42a0      	cmp	r0, r4
34012958:	f171 0100 	sbcs.w	r1, r1, #0
3401295c:	f080 8284 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012960:	e9d7 0100 	ldrd	r0, r1, [r7]
34012964:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34012968:	4321      	orrs	r1, r4
3401296a:	f000 81e2 	beq.w	34012d32 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3401296e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012972:	4cb3      	ldr	r4, [pc, #716]	@ (34012c40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34012974:	42a0      	cmp	r0, r4
34012976:	f171 0100 	sbcs.w	r1, r1, #0
3401297a:	f080 8275 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401297e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012982:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34012986:	4321      	orrs	r1, r4
34012988:	f000 81cd 	beq.w	34012d26 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
3401298c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012990:	4cac      	ldr	r4, [pc, #688]	@ (34012c44 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34012992:	42a0      	cmp	r0, r4
34012994:	f171 0100 	sbcs.w	r1, r1, #0
34012998:	f080 8266 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401299c:	e9d7 0100 	ldrd	r0, r1, [r7]
340129a0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
340129a4:	4321      	orrs	r1, r4
340129a6:	f000 81b8 	beq.w	34012d1a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
340129aa:	e9d7 0100 	ldrd	r0, r1, [r7]
340129ae:	4ca6      	ldr	r4, [pc, #664]	@ (34012c48 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
340129b0:	42a0      	cmp	r0, r4
340129b2:	f171 0100 	sbcs.w	r1, r1, #0
340129b6:	f080 8257 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340129ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340129be:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
340129c2:	4321      	orrs	r1, r4
340129c4:	f000 81a4 	beq.w	34012d10 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
340129c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340129cc:	4c9f      	ldr	r4, [pc, #636]	@ (34012c4c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
340129ce:	42a0      	cmp	r0, r4
340129d0:	f171 0100 	sbcs.w	r1, r1, #0
340129d4:	f080 8248 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340129d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340129dc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
340129e0:	4321      	orrs	r1, r4
340129e2:	f000 8190 	beq.w	34012d06 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
340129e6:	e9d7 0100 	ldrd	r0, r1, [r7]
340129ea:	4c99      	ldr	r4, [pc, #612]	@ (34012c50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
340129ec:	42a0      	cmp	r0, r4
340129ee:	f171 0100 	sbcs.w	r1, r1, #0
340129f2:	f080 8239 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340129f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340129fa:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
340129fe:	4321      	orrs	r1, r4
34012a00:	f000 817c 	beq.w	34012cfc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34012a04:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a08:	4c92      	ldr	r4, [pc, #584]	@ (34012c54 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34012a0a:	42a0      	cmp	r0, r4
34012a0c:	f171 0100 	sbcs.w	r1, r1, #0
34012a10:	f080 822a 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012a14:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a18:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34012a1c:	4321      	orrs	r1, r4
34012a1e:	f000 8168 	beq.w	34012cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
34012a22:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a26:	4c8c      	ldr	r4, [pc, #560]	@ (34012c58 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34012a28:	42a0      	cmp	r0, r4
34012a2a:	f171 0100 	sbcs.w	r1, r1, #0
34012a2e:	f080 821b 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012a32:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a36:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34012a3a:	4321      	orrs	r1, r4
34012a3c:	f000 8154 	beq.w	34012ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34012a40:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a44:	4c85      	ldr	r4, [pc, #532]	@ (34012c5c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34012a46:	42a0      	cmp	r0, r4
34012a48:	f171 0100 	sbcs.w	r1, r1, #0
34012a4c:	f080 820c 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012a50:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a54:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34012a58:	4321      	orrs	r1, r4
34012a5a:	f000 8140 	beq.w	34012cde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34012a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a62:	4c7f      	ldr	r4, [pc, #508]	@ (34012c60 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34012a64:	42a0      	cmp	r0, r4
34012a66:	f171 0100 	sbcs.w	r1, r1, #0
34012a6a:	f080 81fd 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012a6e:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a72:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34012a76:	4321      	orrs	r1, r4
34012a78:	f000 812c 	beq.w	34012cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34012a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a80:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34012a84:	f171 0100 	sbcs.w	r1, r1, #0
34012a88:	f080 81ee 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a90:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34012a94:	4321      	orrs	r1, r4
34012a96:	f000 8118 	beq.w	34012cca <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
34012a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
34012a9e:	f248 0401 	movw	r4, #32769	@ 0x8001
34012aa2:	42a0      	cmp	r0, r4
34012aa4:	f171 0100 	sbcs.w	r1, r1, #0
34012aa8:	f080 81de 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012aac:	e9d7 0100 	ldrd	r0, r1, [r7]
34012ab0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34012ab4:	4321      	orrs	r1, r4
34012ab6:	f000 8103 	beq.w	34012cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34012aba:	e9d7 0100 	ldrd	r0, r1, [r7]
34012abe:	f244 0401 	movw	r4, #16385	@ 0x4001
34012ac2:	42a0      	cmp	r0, r4
34012ac4:	f171 0100 	sbcs.w	r1, r1, #0
34012ac8:	f080 81ce 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012acc:	e9d7 0100 	ldrd	r0, r1, [r7]
34012ad0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34012ad4:	4321      	orrs	r1, r4
34012ad6:	f000 80ee 	beq.w	34012cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34012ada:	e9d7 0100 	ldrd	r0, r1, [r7]
34012ade:	f242 0401 	movw	r4, #8193	@ 0x2001
34012ae2:	42a0      	cmp	r0, r4
34012ae4:	f171 0100 	sbcs.w	r1, r1, #0
34012ae8:	f080 81be 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012aec:	e9d7 0100 	ldrd	r0, r1, [r7]
34012af0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34012af4:	4321      	orrs	r1, r4
34012af6:	f000 80d9 	beq.w	34012cac <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34012afa:	e9d7 0100 	ldrd	r0, r1, [r7]
34012afe:	f241 0401 	movw	r4, #4097	@ 0x1001
34012b02:	42a0      	cmp	r0, r4
34012b04:	f171 0100 	sbcs.w	r1, r1, #0
34012b08:	f080 81ae 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b0c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b10:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
34012b14:	4321      	orrs	r1, r4
34012b16:	f000 80c4 	beq.w	34012ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
34012b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b1e:	f640 0401 	movw	r4, #2049	@ 0x801
34012b22:	42a0      	cmp	r0, r4
34012b24:	f171 0100 	sbcs.w	r1, r1, #0
34012b28:	f080 819e 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b30:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
34012b34:	4321      	orrs	r1, r4
34012b36:	f000 80af 	beq.w	34012c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
34012b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b3e:	f240 4401 	movw	r4, #1025	@ 0x401
34012b42:	42a0      	cmp	r0, r4
34012b44:	f171 0100 	sbcs.w	r1, r1, #0
34012b48:	f080 818e 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b50:	2821      	cmp	r0, #33	@ 0x21
34012b52:	f171 0100 	sbcs.w	r1, r1, #0
34012b56:	d255      	bcs.n	34012c04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34012b58:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b5c:	4301      	orrs	r1, r0
34012b5e:	f000 8183 	beq.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b62:	e9d7 0100 	ldrd	r0, r1, [r7]
34012b66:	1e42      	subs	r2, r0, #1
34012b68:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
34012b6c:	2a20      	cmp	r2, #32
34012b6e:	f173 0100 	sbcs.w	r1, r3, #0
34012b72:	f080 8179 	bcs.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b76:	2a1f      	cmp	r2, #31
34012b78:	f200 8176 	bhi.w	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34012b7c:	a101      	add	r1, pc, #4	@ (adr r1, 34012b84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34012b7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34012b82:	bf00      	nop
34012b84:	34012c13 	.word	0x34012c13
34012b88:	34012c1d 	.word	0x34012c1d
34012b8c:	34012e69 	.word	0x34012e69
34012b90:	34012c6d 	.word	0x34012c6d
34012b94:	34012e69 	.word	0x34012e69
34012b98:	34012e69 	.word	0x34012e69
34012b9c:	34012e69 	.word	0x34012e69
34012ba0:	34012c65 	.word	0x34012c65
34012ba4:	34012e69 	.word	0x34012e69
34012ba8:	34012e69 	.word	0x34012e69
34012bac:	34012e69 	.word	0x34012e69
34012bb0:	34012e69 	.word	0x34012e69
34012bb4:	34012e69 	.word	0x34012e69
34012bb8:	34012e69 	.word	0x34012e69
34012bbc:	34012e69 	.word	0x34012e69
34012bc0:	34012c77 	.word	0x34012c77
34012bc4:	34012e69 	.word	0x34012e69
34012bc8:	34012e69 	.word	0x34012e69
34012bcc:	34012e69 	.word	0x34012e69
34012bd0:	34012e69 	.word	0x34012e69
34012bd4:	34012e69 	.word	0x34012e69
34012bd8:	34012e69 	.word	0x34012e69
34012bdc:	34012e69 	.word	0x34012e69
34012be0:	34012e69 	.word	0x34012e69
34012be4:	34012e69 	.word	0x34012e69
34012be8:	34012e69 	.word	0x34012e69
34012bec:	34012e69 	.word	0x34012e69
34012bf0:	34012e69 	.word	0x34012e69
34012bf4:	34012e69 	.word	0x34012e69
34012bf8:	34012e69 	.word	0x34012e69
34012bfc:	34012e69 	.word	0x34012e69
34012c00:	34012c83 	.word	0x34012c83
34012c04:	e9d7 2300 	ldrd	r2, r3, [r7]
34012c08:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34012c0c:	430b      	orrs	r3, r1
34012c0e:	d03e      	beq.n	34012c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
34012c10:	e12a      	b.n	34012e68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
34012c12:	2070      	movs	r0, #112	@ 0x70
34012c14:	f000 fb90 	bl	34013338 <RCCEx_GetADCCLKFreq>
34012c18:	60f8      	str	r0, [r7, #12]
      break;
34012c1a:	e126      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34012c1c:	2007      	movs	r0, #7
34012c1e:	f000 fc8d 	bl	3401353c <RCCEx_GetADFCLKFreq>
34012c22:	60f8      	str	r0, [r7, #12]
      break;
34012c24:	e121      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
34012c26:	bf00      	nop
34012c28:	80000001 	.word	0x80000001
34012c2c:	40000001 	.word	0x40000001
34012c30:	20000001 	.word	0x20000001
34012c34:	10000001 	.word	0x10000001
34012c38:	08000001 	.word	0x08000001
34012c3c:	04000001 	.word	0x04000001
34012c40:	02000001 	.word	0x02000001
34012c44:	01000001 	.word	0x01000001
34012c48:	00800001 	.word	0x00800001
34012c4c:	00400001 	.word	0x00400001
34012c50:	00200001 	.word	0x00200001
34012c54:	00100001 	.word	0x00100001
34012c58:	00080001 	.word	0x00080001
34012c5c:	00040001 	.word	0x00040001
34012c60:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34012c64:	f000 ff0c 	bl	34013a80 <RCCEx_GetCSICLKFreq>
34012c68:	60f8      	str	r0, [r7, #12]
      break;
34012c6a:	e0fe      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012c6c:	2007      	movs	r0, #7
34012c6e:	f000 fd51 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34012c72:	60f8      	str	r0, [r7, #12]
      break;
34012c74:	e0f9      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34012c76:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34012c7a:	f000 ff4d 	bl	34013b18 <RCCEx_GetDCMIPPCLKFreq>
34012c7e:	60f8      	str	r0, [r7, #12]
      break;
34012c80:	e0f3      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34012c82:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34012c86:	f000 ffd1 	bl	34013c2c <RCCEx_GetETH1CLKFreq>
34012c8a:	60f8      	str	r0, [r7, #12]
      break;
34012c8c:	e0ed      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34012c8e:	2003      	movs	r0, #3
34012c90:	f001 f84c 	bl	34013d2c <RCCEx_GetETH1PTPCLKFreq>
34012c94:	60f8      	str	r0, [r7, #12]
      break;
34012c96:	e0e8      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34012c98:	2003      	movs	r0, #3
34012c9a:	f001 f8cb 	bl	34013e34 <RCCEx_GetFDCANCLKFreq>
34012c9e:	60f8      	str	r0, [r7, #12]
      break;
34012ca0:	e0e3      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34012ca2:	2030      	movs	r0, #48	@ 0x30
34012ca4:	f001 f946 	bl	34013f34 <RCCEx_GetFMCCLKFreq>
34012ca8:	60f8      	str	r0, [r7, #12]
      break;
34012caa:	e0de      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34012cac:	4871      	ldr	r0, [pc, #452]	@ (34012e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34012cae:	f001 f9f9 	bl	340140a4 <RCCEx_GetI2CCLKFreq>
34012cb2:	60f8      	str	r0, [r7, #12]
      break;
34012cb4:	e0d9      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34012cb6:	4870      	ldr	r0, [pc, #448]	@ (34012e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34012cb8:	f001 f9f4 	bl	340140a4 <RCCEx_GetI2CCLKFreq>
34012cbc:	60f8      	str	r0, [r7, #12]
      break;
34012cbe:	e0d4      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34012cc0:	486e      	ldr	r0, [pc, #440]	@ (34012e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34012cc2:	f001 f9ef 	bl	340140a4 <RCCEx_GetI2CCLKFreq>
34012cc6:	60f8      	str	r0, [r7, #12]
      break;
34012cc8:	e0cf      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34012cca:	486d      	ldr	r0, [pc, #436]	@ (34012e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34012ccc:	f001 f9ea 	bl	340140a4 <RCCEx_GetI2CCLKFreq>
34012cd0:	60f8      	str	r0, [r7, #12]
      break;
34012cd2:	e0ca      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34012cd4:	486b      	ldr	r0, [pc, #428]	@ (34012e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34012cd6:	f001 fb8d 	bl	340143f4 <RCCEx_GetI3CCLKFreq>
34012cda:	60f8      	str	r0, [r7, #12]
      break;
34012cdc:	e0c5      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34012cde:	486a      	ldr	r0, [pc, #424]	@ (34012e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34012ce0:	f001 fb88 	bl	340143f4 <RCCEx_GetI3CCLKFreq>
34012ce4:	60f8      	str	r0, [r7, #12]
      break;
34012ce6:	e0c0      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34012ce8:	4868      	ldr	r0, [pc, #416]	@ (34012e8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34012cea:	f001 fcb7 	bl	3401465c <RCCEx_GetLPTIMCLKFreq>
34012cee:	60f8      	str	r0, [r7, #12]
      break;
34012cf0:	e0bb      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34012cf2:	4867      	ldr	r0, [pc, #412]	@ (34012e90 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34012cf4:	f001 fcb2 	bl	3401465c <RCCEx_GetLPTIMCLKFreq>
34012cf8:	60f8      	str	r0, [r7, #12]
      break;
34012cfa:	e0b6      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34012cfc:	4865      	ldr	r0, [pc, #404]	@ (34012e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
34012cfe:	f001 fcad 	bl	3401465c <RCCEx_GetLPTIMCLKFreq>
34012d02:	60f8      	str	r0, [r7, #12]
      break;
34012d04:	e0b1      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34012d06:	4864      	ldr	r0, [pc, #400]	@ (34012e98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34012d08:	f001 fca8 	bl	3401465c <RCCEx_GetLPTIMCLKFreq>
34012d0c:	60f8      	str	r0, [r7, #12]
      break;
34012d0e:	e0ac      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34012d10:	4862      	ldr	r0, [pc, #392]	@ (34012e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
34012d12:	f001 fca3 	bl	3401465c <RCCEx_GetLPTIMCLKFreq>
34012d16:	60f8      	str	r0, [r7, #12]
      break;
34012d18:	e0a7      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34012d1a:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
34012d1e:	f001 fe47 	bl	340149b0 <RCCEx_GetLPUARTCLKFreq>
34012d22:	60f8      	str	r0, [r7, #12]
      break;
34012d24:	e0a1      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
34012d26:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34012d2a:	f001 ff43 	bl	34014bb4 <RCCEx_GetLTDCCLKFreq>
34012d2e:	60f8      	str	r0, [r7, #12]
      break;
34012d30:	e09b      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
34012d32:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
34012d36:	f001 ffc7 	bl	34014cc8 <RCCEx_GetMDFCLKFreq>
34012d3a:	60f8      	str	r0, [r7, #12]
      break;
34012d3c:	e095      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34012d3e:	2030      	movs	r0, #48	@ 0x30
34012d40:	f002 f8cc 	bl	34014edc <RCCEx_GetPSSICLKFreq>
34012d44:	60f8      	str	r0, [r7, #12]
      break;
34012d46:	e090      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34012d48:	f002 f94a 	bl	34014fe0 <RCCEx_GetRTCCLKFreq>
34012d4c:	60f8      	str	r0, [r7, #12]
      break;
34012d4e:	e08c      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34012d50:	4853      	ldr	r0, [pc, #332]	@ (34012ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34012d52:	f002 f997 	bl	34015084 <RCCEx_GetSAICLKFreq>
34012d56:	60f8      	str	r0, [r7, #12]
      break;
34012d58:	e087      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34012d5a:	4852      	ldr	r0, [pc, #328]	@ (34012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34012d5c:	f002 f992 	bl	34015084 <RCCEx_GetSAICLKFreq>
34012d60:	60f8      	str	r0, [r7, #12]
      break;
34012d62:	e082      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34012d64:	4850      	ldr	r0, [pc, #320]	@ (34012ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34012d66:	f002 faf3 	bl	34015350 <RCCEx_GetSDMMCCLKFreq>
34012d6a:	60f8      	str	r0, [r7, #12]
      break;
34012d6c:	e07d      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34012d6e:	484f      	ldr	r0, [pc, #316]	@ (34012eac <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34012d70:	f002 faee 	bl	34015350 <RCCEx_GetSDMMCCLKFreq>
34012d74:	60f8      	str	r0, [r7, #12]
      break;
34012d76:	e078      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34012d78:	2007      	movs	r0, #7
34012d7a:	f002 fbd3 	bl	34015524 <RCCEx_GetSPDIFRXCLKFreq>
34012d7e:	60f8      	str	r0, [r7, #12]
      break;
34012d80:	e073      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34012d82:	484b      	ldr	r0, [pc, #300]	@ (34012eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34012d84:	f002 fcb2 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012d88:	60f8      	str	r0, [r7, #12]
      break;
34012d8a:	e06e      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34012d8c:	4849      	ldr	r0, [pc, #292]	@ (34012eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34012d8e:	f002 fcad 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012d92:	60f8      	str	r0, [r7, #12]
      break;
34012d94:	e069      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34012d96:	4848      	ldr	r0, [pc, #288]	@ (34012eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34012d98:	f002 fca8 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012d9c:	60f8      	str	r0, [r7, #12]
      break;
34012d9e:	e064      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34012da0:	4846      	ldr	r0, [pc, #280]	@ (34012ebc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34012da2:	f002 fca3 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012da6:	60f8      	str	r0, [r7, #12]
      break;
34012da8:	e05f      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34012daa:	4845      	ldr	r0, [pc, #276]	@ (34012ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34012dac:	f002 fc9e 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012db0:	60f8      	str	r0, [r7, #12]
      break;
34012db2:	e05a      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34012db4:	4843      	ldr	r0, [pc, #268]	@ (34012ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34012db6:	f002 fc99 	bl	340156ec <RCCEx_GetSPICLKFreq>
34012dba:	60f8      	str	r0, [r7, #12]
      break;
34012dbc:	e055      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34012dbe:	4842      	ldr	r0, [pc, #264]	@ (34012ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34012dc0:	f003 f990 	bl	340160e4 <RCCEx_GetUSARTCLKFreq>
34012dc4:	60f8      	str	r0, [r7, #12]
      break;
34012dc6:	e050      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34012dc8:	4840      	ldr	r0, [pc, #256]	@ (34012ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34012dca:	f003 f98b 	bl	340160e4 <RCCEx_GetUSARTCLKFreq>
34012dce:	60f8      	str	r0, [r7, #12]
      break;
34012dd0:	e04b      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34012dd2:	483f      	ldr	r0, [pc, #252]	@ (34012ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34012dd4:	f003 f986 	bl	340160e4 <RCCEx_GetUSARTCLKFreq>
34012dd8:	60f8      	str	r0, [r7, #12]
      break;
34012dda:	e046      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34012ddc:	483d      	ldr	r0, [pc, #244]	@ (34012ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34012dde:	f002 ff57 	bl	34015c90 <RCCEx_GetUARTCLKFreq>
34012de2:	60f8      	str	r0, [r7, #12]
      break;
34012de4:	e041      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34012de6:	483c      	ldr	r0, [pc, #240]	@ (34012ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34012de8:	f002 ff52 	bl	34015c90 <RCCEx_GetUARTCLKFreq>
34012dec:	60f8      	str	r0, [r7, #12]
      break;
34012dee:	e03c      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34012df0:	483a      	ldr	r0, [pc, #232]	@ (34012edc <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34012df2:	f003 f977 	bl	340160e4 <RCCEx_GetUSARTCLKFreq>
34012df6:	60f8      	str	r0, [r7, #12]
      break;
34012df8:	e037      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34012dfa:	4839      	ldr	r0, [pc, #228]	@ (34012ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34012dfc:	f002 ff48 	bl	34015c90 <RCCEx_GetUARTCLKFreq>
34012e00:	60f8      	str	r0, [r7, #12]
      break;
34012e02:	e032      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34012e04:	4837      	ldr	r0, [pc, #220]	@ (34012ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34012e06:	f002 ff43 	bl	34015c90 <RCCEx_GetUARTCLKFreq>
34012e0a:	60f8      	str	r0, [r7, #12]
      break;
34012e0c:	e02d      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34012e0e:	4836      	ldr	r0, [pc, #216]	@ (34012ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34012e10:	f002 ff3e 	bl	34015c90 <RCCEx_GetUARTCLKFreq>
34012e14:	60f8      	str	r0, [r7, #12]
      break;
34012e16:	e028      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34012e18:	4834      	ldr	r0, [pc, #208]	@ (34012eec <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34012e1a:	f003 f963 	bl	340160e4 <RCCEx_GetUSARTCLKFreq>
34012e1e:	60f8      	str	r0, [r7, #12]
      break;
34012e20:	e023      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34012e22:	4833      	ldr	r0, [pc, #204]	@ (34012ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34012e24:	f003 fc3e 	bl	340166a4 <RCCEx_GetOTGPHYCKREFCLKFreq>
34012e28:	60f8      	str	r0, [r7, #12]
      break;
34012e2a:	e01e      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34012e2c:	4831      	ldr	r0, [pc, #196]	@ (34012ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34012e2e:	f003 fb83 	bl	34016538 <RCCEx_GetOTGPHYCLKFreq>
34012e32:	60f8      	str	r0, [r7, #12]
      break;
34012e34:	e019      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34012e36:	4830      	ldr	r0, [pc, #192]	@ (34012ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34012e38:	f003 fc34 	bl	340166a4 <RCCEx_GetOTGPHYCKREFCLKFreq>
34012e3c:	60f8      	str	r0, [r7, #12]
      break;
34012e3e:	e014      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34012e40:	482e      	ldr	r0, [pc, #184]	@ (34012efc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34012e42:	f003 fb79 	bl	34016538 <RCCEx_GetOTGPHYCLKFreq>
34012e46:	60f8      	str	r0, [r7, #12]
      break;
34012e48:	e00f      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34012e4a:	482d      	ldr	r0, [pc, #180]	@ (34012f00 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34012e4c:	f003 fc7a 	bl	34016744 <RCCEx_GetXSPICLKFreq>
34012e50:	60f8      	str	r0, [r7, #12]
      break;
34012e52:	e00a      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34012e54:	482b      	ldr	r0, [pc, #172]	@ (34012f04 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34012e56:	f003 fc75 	bl	34016744 <RCCEx_GetXSPICLKFreq>
34012e5a:	60f8      	str	r0, [r7, #12]
      break;
34012e5c:	e005      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34012e5e:	482a      	ldr	r0, [pc, #168]	@ (34012f08 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34012e60:	f003 fc70 	bl	34016744 <RCCEx_GetXSPICLKFreq>
34012e64:	60f8      	str	r0, [r7, #12]
      break;
34012e66:	e000      	b.n	34012e6a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34012e68:	bf00      	nop
  }

  return frequency;
34012e6a:	68fb      	ldr	r3, [r7, #12]
}
34012e6c:	4618      	mov	r0, r3
34012e6e:	3714      	adds	r7, #20
34012e70:	46bd      	mov	sp, r7
34012e72:	bd90      	pop	{r4, r7, pc}
34012e74:	0700000c 	.word	0x0700000c
34012e78:	0700040c 	.word	0x0700040c
34012e7c:	0700080c 	.word	0x0700080c
34012e80:	07000c0c 	.word	0x07000c0c
34012e84:	0700100c 	.word	0x0700100c
34012e88:	0700140c 	.word	0x0700140c
34012e8c:	0700082c 	.word	0x0700082c
34012e90:	07000c2c 	.word	0x07000c2c
34012e94:	0700102c 	.word	0x0700102c
34012e98:	0700142c 	.word	0x0700142c
34012e9c:	0700182c 	.word	0x0700182c
34012ea0:	07001418 	.word	0x07001418
34012ea4:	07001818 	.word	0x07001818
34012ea8:	0300001c 	.word	0x0300001c
34012eac:	0300041c 	.word	0x0300041c
34012eb0:	07000420 	.word	0x07000420
34012eb4:	07000820 	.word	0x07000820
34012eb8:	07000c20 	.word	0x07000c20
34012ebc:	07001020 	.word	0x07001020
34012ec0:	07001420 	.word	0x07001420
34012ec4:	07001820 	.word	0x07001820
34012ec8:	07000030 	.word	0x07000030
34012ecc:	07000430 	.word	0x07000430
34012ed0:	07000830 	.word	0x07000830
34012ed4:	07000c30 	.word	0x07000c30
34012ed8:	07001030 	.word	0x07001030
34012edc:	07001430 	.word	0x07001430
34012ee0:	07001830 	.word	0x07001830
34012ee4:	07001c30 	.word	0x07001c30
34012ee8:	07000034 	.word	0x07000034
34012eec:	07000434 	.word	0x07000434
34012ef0:	01001014 	.word	0x01001014
34012ef4:	03000c14 	.word	0x03000c14
34012ef8:	01001814 	.word	0x01001814
34012efc:	03001414 	.word	0x03001414
34012f00:	03000014 	.word	0x03000014
34012f04:	03000414 	.word	0x03000414
34012f08:	03000814 	.word	0x03000814

34012f0c <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34012f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
34012f0e:	b087      	sub	sp, #28
34012f10:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34012f12:	2300      	movs	r3, #0
34012f14:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34012f16:	f7f8 f89b 	bl	3400b050 <LL_RCC_PLL1_IsReady>
34012f1a:	4603      	mov	r3, r0
34012f1c:	2b00      	cmp	r3, #0
34012f1e:	d02a      	beq.n	34012f76 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34012f20:	f7f8 f8fe 	bl	3400b120 <LL_RCC_PLL1P_IsEnabled>
34012f24:	4603      	mov	r3, r0
34012f26:	2b00      	cmp	r3, #0
34012f28:	d031      	beq.n	34012f8e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34012f2a:	f7f8 f883 	bl	3400b034 <LL_RCC_PLL1_GetSource>
34012f2e:	4603      	mov	r3, r0
34012f30:	4618      	mov	r0, r3
34012f32:	f000 f957 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
34012f36:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34012f38:	68bb      	ldr	r3, [r7, #8]
34012f3a:	2b00      	cmp	r3, #0
34012f3c:	d027      	beq.n	34012f8e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
34012f3e:	f7f8 f8bf 	bl	3400b0c0 <LL_RCC_PLL1_GetM>
34012f42:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34012f44:	687b      	ldr	r3, [r7, #4]
34012f46:	2b00      	cmp	r3, #0
34012f48:	d021      	beq.n	34012f8e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34012f4a:	f7f8 f8a9 	bl	3400b0a0 <LL_RCC_PLL1_GetN>
34012f4e:	4605      	mov	r5, r0
34012f50:	f7f8 f8fa 	bl	3400b148 <LL_RCC_PLL1_GetFRACN>
34012f54:	4606      	mov	r6, r0
34012f56:	f7f8 f8c3 	bl	3400b0e0 <LL_RCC_PLL1_GetP1>
34012f5a:	4604      	mov	r4, r0
34012f5c:	f7f8 f8d0 	bl	3400b100 <LL_RCC_PLL1_GetP2>
34012f60:	4603      	mov	r3, r0
34012f62:	9301      	str	r3, [sp, #4]
34012f64:	9400      	str	r4, [sp, #0]
34012f66:	4633      	mov	r3, r6
34012f68:	462a      	mov	r2, r5
34012f6a:	6879      	ldr	r1, [r7, #4]
34012f6c:	68b8      	ldr	r0, [r7, #8]
34012f6e:	f000 f997 	bl	340132a0 <RCCEx_CalcPLLFreq>
34012f72:	60f8      	str	r0, [r7, #12]
34012f74:	e00b      	b.n	34012f8e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34012f76:	f7f8 f87f 	bl	3400b078 <LL_RCC_PLL1_IsEnabledBypass>
34012f7a:	4603      	mov	r3, r0
34012f7c:	2b00      	cmp	r3, #0
34012f7e:	d006      	beq.n	34012f8e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34012f80:	f7f8 f858 	bl	3400b034 <LL_RCC_PLL1_GetSource>
34012f84:	4603      	mov	r3, r0
34012f86:	4618      	mov	r0, r3
34012f88:	f000 f92c 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
34012f8c:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34012f8e:	68fb      	ldr	r3, [r7, #12]
}
34012f90:	4618      	mov	r0, r3
34012f92:	3714      	adds	r7, #20
34012f94:	46bd      	mov	sp, r7
34012f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

34012f98 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34012f98:	b5f0      	push	{r4, r5, r6, r7, lr}
34012f9a:	b087      	sub	sp, #28
34012f9c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34012f9e:	2300      	movs	r3, #0
34012fa0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34012fa2:	f7f8 f8ed 	bl	3400b180 <LL_RCC_PLL2_IsReady>
34012fa6:	4603      	mov	r3, r0
34012fa8:	2b00      	cmp	r3, #0
34012faa:	d02a      	beq.n	34013002 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34012fac:	f7f8 f950 	bl	3400b250 <LL_RCC_PLL2P_IsEnabled>
34012fb0:	4603      	mov	r3, r0
34012fb2:	2b00      	cmp	r3, #0
34012fb4:	d031      	beq.n	3401301a <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34012fb6:	f7f8 f8d5 	bl	3400b164 <LL_RCC_PLL2_GetSource>
34012fba:	4603      	mov	r3, r0
34012fbc:	4618      	mov	r0, r3
34012fbe:	f000 f911 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
34012fc2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34012fc4:	68bb      	ldr	r3, [r7, #8]
34012fc6:	2b00      	cmp	r3, #0
34012fc8:	d027      	beq.n	3401301a <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
34012fca:	f7f8 f911 	bl	3400b1f0 <LL_RCC_PLL2_GetM>
34012fce:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34012fd0:	687b      	ldr	r3, [r7, #4]
34012fd2:	2b00      	cmp	r3, #0
34012fd4:	d021      	beq.n	3401301a <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34012fd6:	f7f8 f8fb 	bl	3400b1d0 <LL_RCC_PLL2_GetN>
34012fda:	4605      	mov	r5, r0
34012fdc:	f7f8 f94c 	bl	3400b278 <LL_RCC_PLL2_GetFRACN>
34012fe0:	4606      	mov	r6, r0
34012fe2:	f7f8 f915 	bl	3400b210 <LL_RCC_PLL2_GetP1>
34012fe6:	4604      	mov	r4, r0
34012fe8:	f7f8 f922 	bl	3400b230 <LL_RCC_PLL2_GetP2>
34012fec:	4603      	mov	r3, r0
34012fee:	9301      	str	r3, [sp, #4]
34012ff0:	9400      	str	r4, [sp, #0]
34012ff2:	4633      	mov	r3, r6
34012ff4:	462a      	mov	r2, r5
34012ff6:	6879      	ldr	r1, [r7, #4]
34012ff8:	68b8      	ldr	r0, [r7, #8]
34012ffa:	f000 f951 	bl	340132a0 <RCCEx_CalcPLLFreq>
34012ffe:	60f8      	str	r0, [r7, #12]
34013000:	e00b      	b.n	3401301a <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34013002:	f7f8 f8d1 	bl	3400b1a8 <LL_RCC_PLL2_IsEnabledBypass>
34013006:	4603      	mov	r3, r0
34013008:	2b00      	cmp	r3, #0
3401300a:	d006      	beq.n	3401301a <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3401300c:	f7f8 f8aa 	bl	3400b164 <LL_RCC_PLL2_GetSource>
34013010:	4603      	mov	r3, r0
34013012:	4618      	mov	r0, r3
34013014:	f000 f8e6 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
34013018:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3401301a:	68fb      	ldr	r3, [r7, #12]
}
3401301c:	4618      	mov	r0, r3
3401301e:	3714      	adds	r7, #20
34013020:	46bd      	mov	sp, r7
34013022:	bdf0      	pop	{r4, r5, r6, r7, pc}

34013024 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34013024:	b5f0      	push	{r4, r5, r6, r7, lr}
34013026:	b087      	sub	sp, #28
34013028:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3401302a:	2300      	movs	r3, #0
3401302c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3401302e:	f7f8 f93f 	bl	3400b2b0 <LL_RCC_PLL3_IsReady>
34013032:	4603      	mov	r3, r0
34013034:	2b00      	cmp	r3, #0
34013036:	d02a      	beq.n	3401308e <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34013038:	f7f8 f9a2 	bl	3400b380 <LL_RCC_PLL3P_IsEnabled>
3401303c:	4603      	mov	r3, r0
3401303e:	2b00      	cmp	r3, #0
34013040:	d031      	beq.n	340130a6 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34013042:	f7f8 f927 	bl	3400b294 <LL_RCC_PLL3_GetSource>
34013046:	4603      	mov	r3, r0
34013048:	4618      	mov	r0, r3
3401304a:	f000 f8cb 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
3401304e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34013050:	68bb      	ldr	r3, [r7, #8]
34013052:	2b00      	cmp	r3, #0
34013054:	d027      	beq.n	340130a6 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34013056:	f7f8 f963 	bl	3400b320 <LL_RCC_PLL3_GetM>
3401305a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3401305c:	687b      	ldr	r3, [r7, #4]
3401305e:	2b00      	cmp	r3, #0
34013060:	d021      	beq.n	340130a6 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34013062:	f7f8 f94d 	bl	3400b300 <LL_RCC_PLL3_GetN>
34013066:	4605      	mov	r5, r0
34013068:	f7f8 f99e 	bl	3400b3a8 <LL_RCC_PLL3_GetFRACN>
3401306c:	4606      	mov	r6, r0
3401306e:	f7f8 f967 	bl	3400b340 <LL_RCC_PLL3_GetP1>
34013072:	4604      	mov	r4, r0
34013074:	f7f8 f974 	bl	3400b360 <LL_RCC_PLL3_GetP2>
34013078:	4603      	mov	r3, r0
3401307a:	9301      	str	r3, [sp, #4]
3401307c:	9400      	str	r4, [sp, #0]
3401307e:	4633      	mov	r3, r6
34013080:	462a      	mov	r2, r5
34013082:	6879      	ldr	r1, [r7, #4]
34013084:	68b8      	ldr	r0, [r7, #8]
34013086:	f000 f90b 	bl	340132a0 <RCCEx_CalcPLLFreq>
3401308a:	60f8      	str	r0, [r7, #12]
3401308c:	e00b      	b.n	340130a6 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3401308e:	f7f8 f923 	bl	3400b2d8 <LL_RCC_PLL3_IsEnabledBypass>
34013092:	4603      	mov	r3, r0
34013094:	2b00      	cmp	r3, #0
34013096:	d006      	beq.n	340130a6 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34013098:	f7f8 f8fc 	bl	3400b294 <LL_RCC_PLL3_GetSource>
3401309c:	4603      	mov	r3, r0
3401309e:	4618      	mov	r0, r3
340130a0:	f000 f8a0 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
340130a4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
340130a6:	68fb      	ldr	r3, [r7, #12]
}
340130a8:	4618      	mov	r0, r3
340130aa:	3714      	adds	r7, #20
340130ac:	46bd      	mov	sp, r7
340130ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

340130b0 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
340130b0:	b5f0      	push	{r4, r5, r6, r7, lr}
340130b2:	b087      	sub	sp, #28
340130b4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340130b6:	2300      	movs	r3, #0
340130b8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
340130ba:	f7f8 f991 	bl	3400b3e0 <LL_RCC_PLL4_IsReady>
340130be:	4603      	mov	r3, r0
340130c0:	2b00      	cmp	r3, #0
340130c2:	d02a      	beq.n	3401311a <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
340130c4:	f7f8 f9f4 	bl	3400b4b0 <LL_RCC_PLL4P_IsEnabled>
340130c8:	4603      	mov	r3, r0
340130ca:	2b00      	cmp	r3, #0
340130cc:	d031      	beq.n	34013132 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340130ce:	f7f8 f979 	bl	3400b3c4 <LL_RCC_PLL4_GetSource>
340130d2:	4603      	mov	r3, r0
340130d4:	4618      	mov	r0, r3
340130d6:	f000 f885 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
340130da:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340130dc:	68bb      	ldr	r3, [r7, #8]
340130de:	2b00      	cmp	r3, #0
340130e0:	d027      	beq.n	34013132 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
340130e2:	f7f8 f9b5 	bl	3400b450 <LL_RCC_PLL4_GetM>
340130e6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
340130e8:	687b      	ldr	r3, [r7, #4]
340130ea:	2b00      	cmp	r3, #0
340130ec:	d021      	beq.n	34013132 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340130ee:	f7f8 f99f 	bl	3400b430 <LL_RCC_PLL4_GetN>
340130f2:	4605      	mov	r5, r0
340130f4:	f7f8 f9f0 	bl	3400b4d8 <LL_RCC_PLL4_GetFRACN>
340130f8:	4606      	mov	r6, r0
340130fa:	f7f8 f9b9 	bl	3400b470 <LL_RCC_PLL4_GetP1>
340130fe:	4604      	mov	r4, r0
34013100:	f7f8 f9c6 	bl	3400b490 <LL_RCC_PLL4_GetP2>
34013104:	4603      	mov	r3, r0
34013106:	9301      	str	r3, [sp, #4]
34013108:	9400      	str	r4, [sp, #0]
3401310a:	4633      	mov	r3, r6
3401310c:	462a      	mov	r2, r5
3401310e:	6879      	ldr	r1, [r7, #4]
34013110:	68b8      	ldr	r0, [r7, #8]
34013112:	f000 f8c5 	bl	340132a0 <RCCEx_CalcPLLFreq>
34013116:	60f8      	str	r0, [r7, #12]
34013118:	e00b      	b.n	34013132 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
3401311a:	f7f8 f975 	bl	3400b408 <LL_RCC_PLL4_IsEnabledBypass>
3401311e:	4603      	mov	r3, r0
34013120:	2b00      	cmp	r3, #0
34013122:	d006      	beq.n	34013132 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34013124:	f7f8 f94e 	bl	3400b3c4 <LL_RCC_PLL4_GetSource>
34013128:	4603      	mov	r3, r0
3401312a:	4618      	mov	r0, r3
3401312c:	f000 f85a 	bl	340131e4 <RCCEx_GetPLLSourceFreq>
34013130:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34013132:	68fb      	ldr	r3, [r7, #12]
}
34013134:	4618      	mov	r0, r3
34013136:	3714      	adds	r7, #20
34013138:	46bd      	mov	sp, r7
3401313a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3401313c <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
3401313c:	b580      	push	{r7, lr}
3401313e:	b082      	sub	sp, #8
34013140:	af00      	add	r7, sp, #0
34013142:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34013144:	f7f7 fb60 	bl	3400a808 <LL_RCC_GetAHBPrescaler>
34013148:	4603      	mov	r3, r0
3401314a:	0d1b      	lsrs	r3, r3, #20
3401314c:	f003 0307 	and.w	r3, r3, #7
34013150:	687a      	ldr	r2, [r7, #4]
34013152:	fa22 f303 	lsr.w	r3, r2, r3
}
34013156:	4618      	mov	r0, r3
34013158:	3708      	adds	r7, #8
3401315a:	46bd      	mov	sp, r7
3401315c:	bd80      	pop	{r7, pc}

3401315e <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
3401315e:	b580      	push	{r7, lr}
34013160:	b082      	sub	sp, #8
34013162:	af00      	add	r7, sp, #0
34013164:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34013166:	f7f7 fb5d 	bl	3400a824 <LL_RCC_GetAPB1Prescaler>
3401316a:	4603      	mov	r3, r0
3401316c:	f003 0307 	and.w	r3, r3, #7
34013170:	687a      	ldr	r2, [r7, #4]
34013172:	fa22 f303 	lsr.w	r3, r2, r3
}
34013176:	4618      	mov	r0, r3
34013178:	3708      	adds	r7, #8
3401317a:	46bd      	mov	sp, r7
3401317c:	bd80      	pop	{r7, pc}

3401317e <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3401317e:	b580      	push	{r7, lr}
34013180:	b082      	sub	sp, #8
34013182:	af00      	add	r7, sp, #0
34013184:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34013186:	f7f7 fb5b 	bl	3400a840 <LL_RCC_GetAPB2Prescaler>
3401318a:	4603      	mov	r3, r0
3401318c:	091b      	lsrs	r3, r3, #4
3401318e:	f003 0307 	and.w	r3, r3, #7
34013192:	687a      	ldr	r2, [r7, #4]
34013194:	fa22 f303 	lsr.w	r3, r2, r3
}
34013198:	4618      	mov	r0, r3
3401319a:	3708      	adds	r7, #8
3401319c:	46bd      	mov	sp, r7
3401319e:	bd80      	pop	{r7, pc}

340131a0 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
340131a0:	b580      	push	{r7, lr}
340131a2:	b082      	sub	sp, #8
340131a4:	af00      	add	r7, sp, #0
340131a6:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340131a8:	f7f7 fb58 	bl	3400a85c <LL_RCC_GetAPB4Prescaler>
340131ac:	4603      	mov	r3, r0
340131ae:	0b1b      	lsrs	r3, r3, #12
340131b0:	f003 0307 	and.w	r3, r3, #7
340131b4:	687a      	ldr	r2, [r7, #4]
340131b6:	fa22 f303 	lsr.w	r3, r2, r3
}
340131ba:	4618      	mov	r0, r3
340131bc:	3708      	adds	r7, #8
340131be:	46bd      	mov	sp, r7
340131c0:	bd80      	pop	{r7, pc}

340131c2 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
340131c2:	b580      	push	{r7, lr}
340131c4:	b082      	sub	sp, #8
340131c6:	af00      	add	r7, sp, #0
340131c8:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
340131ca:	f7f7 fb55 	bl	3400a878 <LL_RCC_GetAPB5Prescaler>
340131ce:	4603      	mov	r3, r0
340131d0:	0c1b      	lsrs	r3, r3, #16
340131d2:	f003 0307 	and.w	r3, r3, #7
340131d6:	687a      	ldr	r2, [r7, #4]
340131d8:	fa22 f303 	lsr.w	r3, r2, r3
}
340131dc:	4618      	mov	r0, r3
340131de:	3708      	adds	r7, #8
340131e0:	46bd      	mov	sp, r7
340131e2:	bd80      	pop	{r7, pc}

340131e4 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
340131e4:	b580      	push	{r7, lr}
340131e6:	b084      	sub	sp, #16
340131e8:	af00      	add	r7, sp, #0
340131ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
340131ec:	2300      	movs	r3, #0
340131ee:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
340131f0:	687b      	ldr	r3, [r7, #4]
340131f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340131f6:	d039      	beq.n	3401326c <RCCEx_GetPLLSourceFreq+0x88>
340131f8:	687b      	ldr	r3, [r7, #4]
340131fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340131fe:	d838      	bhi.n	34013272 <RCCEx_GetPLLSourceFreq+0x8e>
34013200:	687b      	ldr	r3, [r7, #4]
34013202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013206:	d029      	beq.n	3401325c <RCCEx_GetPLLSourceFreq+0x78>
34013208:	687b      	ldr	r3, [r7, #4]
3401320a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401320e:	d830      	bhi.n	34013272 <RCCEx_GetPLLSourceFreq+0x8e>
34013210:	687b      	ldr	r3, [r7, #4]
34013212:	2b00      	cmp	r3, #0
34013214:	d004      	beq.n	34013220 <RCCEx_GetPLLSourceFreq+0x3c>
34013216:	687b      	ldr	r3, [r7, #4]
34013218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401321c:	d00e      	beq.n	3401323c <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
3401321e:	e028      	b.n	34013272 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34013220:	f7f7 fa92 	bl	3400a748 <LL_RCC_HSI_IsReady>
34013224:	4603      	mov	r3, r0
34013226:	2b00      	cmp	r3, #0
34013228:	d025      	beq.n	34013276 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401322a:	f7f7 fa9f 	bl	3400a76c <LL_RCC_HSI_GetDivider>
3401322e:	4603      	mov	r3, r0
34013230:	09db      	lsrs	r3, r3, #7
34013232:	4a16      	ldr	r2, [pc, #88]	@ (3401328c <RCCEx_GetPLLSourceFreq+0xa8>)
34013234:	fa22 f303 	lsr.w	r3, r2, r3
34013238:	60fb      	str	r3, [r7, #12]
      break;
3401323a:	e01c      	b.n	34013276 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
3401323c:	f7f7 faa4 	bl	3400a788 <LL_RCC_MSI_IsReady>
34013240:	4603      	mov	r3, r0
34013242:	2b00      	cmp	r3, #0
34013244:	d019      	beq.n	3401327a <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34013246:	f7f7 fab1 	bl	3400a7ac <LL_RCC_MSI_GetFrequency>
3401324a:	4603      	mov	r3, r0
3401324c:	2b00      	cmp	r3, #0
3401324e:	d102      	bne.n	34013256 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34013250:	4b0f      	ldr	r3, [pc, #60]	@ (34013290 <RCCEx_GetPLLSourceFreq+0xac>)
34013252:	60fb      	str	r3, [r7, #12]
      break;
34013254:	e011      	b.n	3401327a <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34013256:	4b0f      	ldr	r3, [pc, #60]	@ (34013294 <RCCEx_GetPLLSourceFreq+0xb0>)
34013258:	60fb      	str	r3, [r7, #12]
      break;
3401325a:	e00e      	b.n	3401327a <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3401325c:	f7f7 fa62 	bl	3400a724 <LL_RCC_HSE_IsReady>
34013260:	4603      	mov	r3, r0
34013262:	2b00      	cmp	r3, #0
34013264:	d00b      	beq.n	3401327e <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34013266:	4b0c      	ldr	r3, [pc, #48]	@ (34013298 <RCCEx_GetPLLSourceFreq+0xb4>)
34013268:	60fb      	str	r3, [r7, #12]
      break;
3401326a:	e008      	b.n	3401327e <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3401326c:	4b0b      	ldr	r3, [pc, #44]	@ (3401329c <RCCEx_GetPLLSourceFreq+0xb8>)
3401326e:	60fb      	str	r3, [r7, #12]
      break;
34013270:	e006      	b.n	34013280 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34013272:	bf00      	nop
34013274:	e004      	b.n	34013280 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34013276:	bf00      	nop
34013278:	e002      	b.n	34013280 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3401327a:	bf00      	nop
3401327c:	e000      	b.n	34013280 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3401327e:	bf00      	nop
  }

  return pllinputfreq;
34013280:	68fb      	ldr	r3, [r7, #12]
}
34013282:	4618      	mov	r0, r3
34013284:	3710      	adds	r7, #16
34013286:	46bd      	mov	sp, r7
34013288:	bd80      	pop	{r7, pc}
3401328a:	bf00      	nop
3401328c:	03d09000 	.word	0x03d09000
34013290:	003d0900 	.word	0x003d0900
34013294:	00f42400 	.word	0x00f42400
34013298:	02dc6c00 	.word	0x02dc6c00
3401329c:	00bb8000 	.word	0x00bb8000

340132a0 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
340132a0:	b480      	push	{r7}
340132a2:	b087      	sub	sp, #28
340132a4:	af00      	add	r7, sp, #0
340132a6:	60f8      	str	r0, [r7, #12]
340132a8:	60b9      	str	r1, [r7, #8]
340132aa:	607a      	str	r2, [r7, #4]
340132ac:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340132ae:	68fb      	ldr	r3, [r7, #12]
340132b0:	ee07 3a90 	vmov	s15, r3
340132b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340132b8:	687b      	ldr	r3, [r7, #4]
340132ba:	ee07 3a90 	vmov	s15, r3
340132be:	eef8 6a67 	vcvt.f32.u32	s13, s15
340132c2:	683b      	ldr	r3, [r7, #0]
340132c4:	ee07 3a90 	vmov	s15, r3
340132c8:	eeb8 6a67 	vcvt.f32.u32	s12, s15
340132cc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34013334 <RCCEx_CalcPLLFreq+0x94>
340132d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
340132d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
340132d8:	ee67 6a27 	vmul.f32	s13, s14, s15
340132dc:	68bb      	ldr	r3, [r7, #8]
340132de:	ee07 3a90 	vmov	s15, r3
340132e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340132e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
340132ea:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
340132ee:	6a3b      	ldr	r3, [r7, #32]
340132f0:	ee07 3a90 	vmov	s15, r3
340132f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340132f8:	edd7 6a05 	vldr	s13, [r7, #20]
340132fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
34013300:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34013304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34013306:	ee07 3a90 	vmov	s15, r3
3401330a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3401330e:	edd7 6a05 	vldr	s13, [r7, #20]
34013312:	eec6 7a87 	vdiv.f32	s15, s13, s14
34013316:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
3401331a:	edd7 7a05 	vldr	s15, [r7, #20]
3401331e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34013322:	ee17 3a90 	vmov	r3, s15
}
34013326:	4618      	mov	r0, r3
34013328:	371c      	adds	r7, #28
3401332a:	46bd      	mov	sp, r7
3401332c:	f85d 7b04 	ldr.w	r7, [sp], #4
34013330:	4770      	bx	lr
34013332:	bf00      	nop
34013334:	4b800000 	.word	0x4b800000

34013338 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34013338:	b590      	push	{r4, r7, lr}
3401333a:	b085      	sub	sp, #20
3401333c:	af00      	add	r7, sp, #0
3401333e:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34013340:	2300      	movs	r3, #0
34013342:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34013344:	6878      	ldr	r0, [r7, #4]
34013346:	f7f7 fcb5 	bl	3400acb4 <LL_RCC_GetADCClockSource>
3401334a:	4603      	mov	r3, r0
3401334c:	2b70      	cmp	r3, #112	@ 0x70
3401334e:	f000 80d1 	beq.w	340134f4 <RCCEx_GetADCCLKFreq+0x1bc>
34013352:	2b70      	cmp	r3, #112	@ 0x70
34013354:	f200 80d8 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
34013358:	2b60      	cmp	r3, #96	@ 0x60
3401335a:	f000 80c8 	beq.w	340134ee <RCCEx_GetADCCLKFreq+0x1b6>
3401335e:	2b60      	cmp	r3, #96	@ 0x60
34013360:	f200 80d2 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
34013364:	2b50      	cmp	r3, #80	@ 0x50
34013366:	f000 80ac 	beq.w	340134c2 <RCCEx_GetADCCLKFreq+0x18a>
3401336a:	2b50      	cmp	r3, #80	@ 0x50
3401336c:	f200 80cc 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
34013370:	2b40      	cmp	r3, #64	@ 0x40
34013372:	f000 80b4 	beq.w	340134de <RCCEx_GetADCCLKFreq+0x1a6>
34013376:	2b40      	cmp	r3, #64	@ 0x40
34013378:	f200 80c6 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
3401337c:	2b30      	cmp	r3, #48	@ 0x30
3401337e:	d05d      	beq.n	3401343c <RCCEx_GetADCCLKFreq+0x104>
34013380:	2b30      	cmp	r3, #48	@ 0x30
34013382:	f200 80c1 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
34013386:	2b20      	cmp	r3, #32
34013388:	d014      	beq.n	340133b4 <RCCEx_GetADCCLKFreq+0x7c>
3401338a:	2b20      	cmp	r3, #32
3401338c:	f200 80bc 	bhi.w	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
34013390:	2b00      	cmp	r3, #0
34013392:	d002      	beq.n	3401339a <RCCEx_GetADCCLKFreq+0x62>
34013394:	2b10      	cmp	r3, #16
34013396:	d008      	beq.n	340133aa <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34013398:	e0b6      	b.n	34013508 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401339a:	f7f6 fdd7 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
3401339e:	4603      	mov	r3, r0
340133a0:	4618      	mov	r0, r3
340133a2:	f7ff fecb 	bl	3401313c <RCCEx_GetHCLKFreq>
340133a6:	60f8      	str	r0, [r7, #12]
      break;
340133a8:	e0b7      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340133aa:	2007      	movs	r0, #7
340133ac:	f000 f9b2 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
340133b0:	60f8      	str	r0, [r7, #12]
      break;
340133b2:	e0b2      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340133b4:	f7f8 f96c 	bl	3400b690 <LL_RCC_IC7_IsEnabled>
340133b8:	4603      	mov	r3, r0
340133ba:	2b00      	cmp	r3, #0
340133bc:	f000 80a6 	beq.w	3401350c <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
340133c0:	f7f8 f988 	bl	3400b6d4 <LL_RCC_IC7_GetDivider>
340133c4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
340133c6:	f7f8 f977 	bl	3400b6b8 <LL_RCC_IC7_GetSource>
340133ca:	4603      	mov	r3, r0
340133cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340133d0:	d029      	beq.n	34013426 <RCCEx_GetADCCLKFreq+0xee>
340133d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340133d6:	d82f      	bhi.n	34013438 <RCCEx_GetADCCLKFreq+0x100>
340133d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340133dc:	d01a      	beq.n	34013414 <RCCEx_GetADCCLKFreq+0xdc>
340133de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340133e2:	d829      	bhi.n	34013438 <RCCEx_GetADCCLKFreq+0x100>
340133e4:	2b00      	cmp	r3, #0
340133e6:	d003      	beq.n	340133f0 <RCCEx_GetADCCLKFreq+0xb8>
340133e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340133ec:	d009      	beq.n	34013402 <RCCEx_GetADCCLKFreq+0xca>
            break;
340133ee:	e023      	b.n	34013438 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340133f0:	f7ff fd8c 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340133f4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340133f6:	68fa      	ldr	r2, [r7, #12]
340133f8:	68bb      	ldr	r3, [r7, #8]
340133fa:	fbb2 f3f3 	udiv	r3, r2, r3
340133fe:	60fb      	str	r3, [r7, #12]
            break;
34013400:	e01b      	b.n	3401343a <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013402:	f7ff fdc9 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013406:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34013408:	68fa      	ldr	r2, [r7, #12]
3401340a:	68bb      	ldr	r3, [r7, #8]
3401340c:	fbb2 f3f3 	udiv	r3, r2, r3
34013410:	60fb      	str	r3, [r7, #12]
            break;
34013412:	e012      	b.n	3401343a <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013414:	f7ff fe06 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013418:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401341a:	68fa      	ldr	r2, [r7, #12]
3401341c:	68bb      	ldr	r3, [r7, #8]
3401341e:	fbb2 f3f3 	udiv	r3, r2, r3
34013422:	60fb      	str	r3, [r7, #12]
            break;
34013424:	e009      	b.n	3401343a <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013426:	f7ff fe43 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401342a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401342c:	68fa      	ldr	r2, [r7, #12]
3401342e:	68bb      	ldr	r3, [r7, #8]
34013430:	fbb2 f3f3 	udiv	r3, r2, r3
34013434:	60fb      	str	r3, [r7, #12]
            break;
34013436:	e000      	b.n	3401343a <RCCEx_GetADCCLKFreq+0x102>
            break;
34013438:	bf00      	nop
      break;
3401343a:	e067      	b.n	3401350c <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401343c:	f7f8 f968 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
34013440:	4603      	mov	r3, r0
34013442:	2b00      	cmp	r3, #0
34013444:	d064      	beq.n	34013510 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34013446:	f7f8 f985 	bl	3400b754 <LL_RCC_IC8_GetDivider>
3401344a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3401344c:	f7f8 f974 	bl	3400b738 <LL_RCC_IC8_GetSource>
34013450:	4603      	mov	r3, r0
34013452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013456:	d029      	beq.n	340134ac <RCCEx_GetADCCLKFreq+0x174>
34013458:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401345c:	d82f      	bhi.n	340134be <RCCEx_GetADCCLKFreq+0x186>
3401345e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013462:	d01a      	beq.n	3401349a <RCCEx_GetADCCLKFreq+0x162>
34013464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013468:	d829      	bhi.n	340134be <RCCEx_GetADCCLKFreq+0x186>
3401346a:	2b00      	cmp	r3, #0
3401346c:	d003      	beq.n	34013476 <RCCEx_GetADCCLKFreq+0x13e>
3401346e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013472:	d009      	beq.n	34013488 <RCCEx_GetADCCLKFreq+0x150>
            break;
34013474:	e023      	b.n	340134be <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013476:	f7ff fd49 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401347a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401347c:	68fa      	ldr	r2, [r7, #12]
3401347e:	68bb      	ldr	r3, [r7, #8]
34013480:	fbb2 f3f3 	udiv	r3, r2, r3
34013484:	60fb      	str	r3, [r7, #12]
            break;
34013486:	e01b      	b.n	340134c0 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013488:	f7ff fd86 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401348c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3401348e:	68fa      	ldr	r2, [r7, #12]
34013490:	68bb      	ldr	r3, [r7, #8]
34013492:	fbb2 f3f3 	udiv	r3, r2, r3
34013496:	60fb      	str	r3, [r7, #12]
            break;
34013498:	e012      	b.n	340134c0 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401349a:	f7ff fdc3 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3401349e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340134a0:	68fa      	ldr	r2, [r7, #12]
340134a2:	68bb      	ldr	r3, [r7, #8]
340134a4:	fbb2 f3f3 	udiv	r3, r2, r3
340134a8:	60fb      	str	r3, [r7, #12]
            break;
340134aa:	e009      	b.n	340134c0 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340134ac:	f7ff fe00 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340134b0:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340134b2:	68fa      	ldr	r2, [r7, #12]
340134b4:	68bb      	ldr	r3, [r7, #8]
340134b6:	fbb2 f3f3 	udiv	r3, r2, r3
340134ba:	60fb      	str	r3, [r7, #12]
            break;
340134bc:	e000      	b.n	340134c0 <RCCEx_GetADCCLKFreq+0x188>
            break;
340134be:	bf00      	nop
      break;
340134c0:	e026      	b.n	34013510 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
340134c2:	f7f7 f941 	bl	3400a748 <LL_RCC_HSI_IsReady>
340134c6:	4603      	mov	r3, r0
340134c8:	2b00      	cmp	r3, #0
340134ca:	d023      	beq.n	34013514 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340134cc:	f7f7 f94e 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340134d0:	4603      	mov	r3, r0
340134d2:	09db      	lsrs	r3, r3, #7
340134d4:	4a16      	ldr	r2, [pc, #88]	@ (34013530 <RCCEx_GetADCCLKFreq+0x1f8>)
340134d6:	fa22 f303 	lsr.w	r3, r2, r3
340134da:	60fb      	str	r3, [r7, #12]
      break;
340134dc:	e01a      	b.n	34013514 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
340134de:	f7f7 f953 	bl	3400a788 <LL_RCC_MSI_IsReady>
340134e2:	4603      	mov	r3, r0
340134e4:	2b00      	cmp	r3, #0
340134e6:	d017      	beq.n	34013518 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
340134e8:	4b12      	ldr	r3, [pc, #72]	@ (34013534 <RCCEx_GetADCCLKFreq+0x1fc>)
340134ea:	60fb      	str	r3, [r7, #12]
      break;
340134ec:	e014      	b.n	34013518 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
340134ee:	4b12      	ldr	r3, [pc, #72]	@ (34013538 <RCCEx_GetADCCLKFreq+0x200>)
340134f0:	60fb      	str	r3, [r7, #12]
      break;
340134f2:	e012      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340134f4:	f7f6 fd2a 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
340134f8:	4604      	mov	r4, r0
340134fa:	f7f7 fd8d 	bl	3400b018 <LL_RCC_GetTIMPrescaler>
340134fe:	4603      	mov	r3, r0
34013500:	fa24 f303 	lsr.w	r3, r4, r3
34013504:	60fb      	str	r3, [r7, #12]
      break;
34013506:	e008      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34013508:	bf00      	nop
3401350a:	e006      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3401350c:	bf00      	nop
3401350e:	e004      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34013510:	bf00      	nop
34013512:	e002      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34013514:	bf00      	nop
34013516:	e000      	b.n	3401351a <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34013518:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
3401351a:	f7f7 f9e5 	bl	3400a8e8 <LL_RCC_GetADCPrescaler>
3401351e:	4603      	mov	r3, r0
34013520:	3301      	adds	r3, #1
34013522:	68fa      	ldr	r2, [r7, #12]
34013524:	fbb2 f3f3 	udiv	r3, r2, r3
}
34013528:	4618      	mov	r0, r3
3401352a:	3714      	adds	r7, #20
3401352c:	46bd      	mov	sp, r7
3401352e:	bd90      	pop	{r4, r7, pc}
34013530:	03d09000 	.word	0x03d09000
34013534:	003d0900 	.word	0x003d0900
34013538:	00bb8000 	.word	0x00bb8000

3401353c <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
3401353c:	b590      	push	{r4, r7, lr}
3401353e:	b085      	sub	sp, #20
34013540:	af00      	add	r7, sp, #0
34013542:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34013544:	2300      	movs	r3, #0
34013546:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34013548:	6878      	ldr	r0, [r7, #4]
3401354a:	f7f7 fbc5 	bl	3400acd8 <LL_RCC_GetADFClockSource>
3401354e:	4603      	mov	r3, r0
34013550:	2b07      	cmp	r3, #7
34013552:	f200 80ca 	bhi.w	340136ea <RCCEx_GetADFCLKFreq+0x1ae>
34013556:	a201      	add	r2, pc, #4	@ (adr r2, 3401355c <RCCEx_GetADFCLKFreq+0x20>)
34013558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401355c:	3401357d 	.word	0x3401357d
34013560:	3401358d 	.word	0x3401358d
34013564:	34013597 	.word	0x34013597
34013568:	3401361f 	.word	0x3401361f
3401356c:	340136c1 	.word	0x340136c1
34013570:	340136a5 	.word	0x340136a5
34013574:	340136d1 	.word	0x340136d1
34013578:	340136d7 	.word	0x340136d7
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401357c:	f7f6 fce6 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013580:	4603      	mov	r3, r0
34013582:	4618      	mov	r0, r3
34013584:	f7ff fdda 	bl	3401313c <RCCEx_GetHCLKFreq>
34013588:	60f8      	str	r0, [r7, #12]
      break;
3401358a:	e0b7      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401358c:	2007      	movs	r0, #7
3401358e:	f000 f8c1 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013592:	60f8      	str	r0, [r7, #12]
      break;
34013594:	e0b2      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34013596:	f7f8 f87b 	bl	3400b690 <LL_RCC_IC7_IsEnabled>
3401359a:	4603      	mov	r3, r0
3401359c:	2b00      	cmp	r3, #0
3401359e:	f000 80a6 	beq.w	340136ee <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
340135a2:	f7f8 f897 	bl	3400b6d4 <LL_RCC_IC7_GetDivider>
340135a6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
340135a8:	f7f8 f886 	bl	3400b6b8 <LL_RCC_IC7_GetSource>
340135ac:	4603      	mov	r3, r0
340135ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135b2:	d029      	beq.n	34013608 <RCCEx_GetADFCLKFreq+0xcc>
340135b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135b8:	d82f      	bhi.n	3401361a <RCCEx_GetADFCLKFreq+0xde>
340135ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135be:	d01a      	beq.n	340135f6 <RCCEx_GetADFCLKFreq+0xba>
340135c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135c4:	d829      	bhi.n	3401361a <RCCEx_GetADFCLKFreq+0xde>
340135c6:	2b00      	cmp	r3, #0
340135c8:	d003      	beq.n	340135d2 <RCCEx_GetADFCLKFreq+0x96>
340135ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340135ce:	d009      	beq.n	340135e4 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340135d0:	e023      	b.n	3401361a <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340135d2:	f7ff fc9b 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340135d6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340135d8:	68fa      	ldr	r2, [r7, #12]
340135da:	68bb      	ldr	r3, [r7, #8]
340135dc:	fbb2 f3f3 	udiv	r3, r2, r3
340135e0:	60fb      	str	r3, [r7, #12]
            break;
340135e2:	e01b      	b.n	3401361c <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340135e4:	f7ff fcd8 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340135e8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340135ea:	68fa      	ldr	r2, [r7, #12]
340135ec:	68bb      	ldr	r3, [r7, #8]
340135ee:	fbb2 f3f3 	udiv	r3, r2, r3
340135f2:	60fb      	str	r3, [r7, #12]
            break;
340135f4:	e012      	b.n	3401361c <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340135f6:	f7ff fd15 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340135fa:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340135fc:	68fa      	ldr	r2, [r7, #12]
340135fe:	68bb      	ldr	r3, [r7, #8]
34013600:	fbb2 f3f3 	udiv	r3, r2, r3
34013604:	60fb      	str	r3, [r7, #12]
            break;
34013606:	e009      	b.n	3401361c <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013608:	f7ff fd52 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401360c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401360e:	68fa      	ldr	r2, [r7, #12]
34013610:	68bb      	ldr	r3, [r7, #8]
34013612:	fbb2 f3f3 	udiv	r3, r2, r3
34013616:	60fb      	str	r3, [r7, #12]
            break;
34013618:	e000      	b.n	3401361c <RCCEx_GetADFCLKFreq+0xe0>
            break;
3401361a:	bf00      	nop
        }
      }
      break;
3401361c:	e067      	b.n	340136ee <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401361e:	f7f8 f877 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
34013622:	4603      	mov	r3, r0
34013624:	2b00      	cmp	r3, #0
34013626:	d064      	beq.n	340136f2 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34013628:	f7f8 f894 	bl	3400b754 <LL_RCC_IC8_GetDivider>
3401362c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3401362e:	f7f8 f883 	bl	3400b738 <LL_RCC_IC8_GetSource>
34013632:	4603      	mov	r3, r0
34013634:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013638:	d029      	beq.n	3401368e <RCCEx_GetADFCLKFreq+0x152>
3401363a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401363e:	d82f      	bhi.n	340136a0 <RCCEx_GetADFCLKFreq+0x164>
34013640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013644:	d01a      	beq.n	3401367c <RCCEx_GetADFCLKFreq+0x140>
34013646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401364a:	d829      	bhi.n	340136a0 <RCCEx_GetADFCLKFreq+0x164>
3401364c:	2b00      	cmp	r3, #0
3401364e:	d003      	beq.n	34013658 <RCCEx_GetADFCLKFreq+0x11c>
34013650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013654:	d009      	beq.n	3401366a <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013656:	e023      	b.n	340136a0 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013658:	f7ff fc58 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401365c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401365e:	68fa      	ldr	r2, [r7, #12]
34013660:	68bb      	ldr	r3, [r7, #8]
34013662:	fbb2 f3f3 	udiv	r3, r2, r3
34013666:	60fb      	str	r3, [r7, #12]
            break;
34013668:	e01b      	b.n	340136a2 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401366a:	f7ff fc95 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401366e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34013670:	68fa      	ldr	r2, [r7, #12]
34013672:	68bb      	ldr	r3, [r7, #8]
34013674:	fbb2 f3f3 	udiv	r3, r2, r3
34013678:	60fb      	str	r3, [r7, #12]
            break;
3401367a:	e012      	b.n	340136a2 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401367c:	f7ff fcd2 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013680:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34013682:	68fa      	ldr	r2, [r7, #12]
34013684:	68bb      	ldr	r3, [r7, #8]
34013686:	fbb2 f3f3 	udiv	r3, r2, r3
3401368a:	60fb      	str	r3, [r7, #12]
            break;
3401368c:	e009      	b.n	340136a2 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401368e:	f7ff fd0f 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013692:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34013694:	68fa      	ldr	r2, [r7, #12]
34013696:	68bb      	ldr	r3, [r7, #8]
34013698:	fbb2 f3f3 	udiv	r3, r2, r3
3401369c:	60fb      	str	r3, [r7, #12]
            break;
3401369e:	e000      	b.n	340136a2 <RCCEx_GetADFCLKFreq+0x166>
            break;
340136a0:	bf00      	nop
        }
      }
      break;
340136a2:	e026      	b.n	340136f2 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340136a4:	f7f7 f850 	bl	3400a748 <LL_RCC_HSI_IsReady>
340136a8:	4603      	mov	r3, r0
340136aa:	2b00      	cmp	r3, #0
340136ac:	d023      	beq.n	340136f6 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340136ae:	f7f7 f85d 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340136b2:	4603      	mov	r3, r0
340136b4:	09db      	lsrs	r3, r3, #7
340136b6:	4a14      	ldr	r2, [pc, #80]	@ (34013708 <RCCEx_GetADFCLKFreq+0x1cc>)
340136b8:	fa22 f303 	lsr.w	r3, r2, r3
340136bc:	60fb      	str	r3, [r7, #12]
      }
      break;
340136be:	e01a      	b.n	340136f6 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340136c0:	f7f7 f862 	bl	3400a788 <LL_RCC_MSI_IsReady>
340136c4:	4603      	mov	r3, r0
340136c6:	2b00      	cmp	r3, #0
340136c8:	d017      	beq.n	340136fa <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
340136ca:	4b10      	ldr	r3, [pc, #64]	@ (3401370c <RCCEx_GetADFCLKFreq+0x1d0>)
340136cc:	60fb      	str	r3, [r7, #12]
      }
      break;
340136ce:	e014      	b.n	340136fa <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
340136d0:	4b0f      	ldr	r3, [pc, #60]	@ (34013710 <RCCEx_GetADFCLKFreq+0x1d4>)
340136d2:	60fb      	str	r3, [r7, #12]
      break;
340136d4:	e012      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340136d6:	f7f6 fc39 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
340136da:	4604      	mov	r4, r0
340136dc:	f7f7 fc9c 	bl	3400b018 <LL_RCC_GetTIMPrescaler>
340136e0:	4603      	mov	r3, r0
340136e2:	fa24 f303 	lsr.w	r3, r4, r3
340136e6:	60fb      	str	r3, [r7, #12]
      break;
340136e8:	e008      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
340136ea:	bf00      	nop
340136ec:	e006      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340136ee:	bf00      	nop
340136f0:	e004      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340136f2:	bf00      	nop
340136f4:	e002      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340136f6:	bf00      	nop
340136f8:	e000      	b.n	340136fc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340136fa:	bf00      	nop
  }

  return adf_frequency;
340136fc:	68fb      	ldr	r3, [r7, #12]
}
340136fe:	4618      	mov	r0, r3
34013700:	3714      	adds	r7, #20
34013702:	46bd      	mov	sp, r7
34013704:	bd90      	pop	{r4, r7, pc}
34013706:	bf00      	nop
34013708:	03d09000 	.word	0x03d09000
3401370c:	003d0900 	.word	0x003d0900
34013710:	00bb8000 	.word	0x00bb8000

34013714 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
34013714:	b580      	push	{r7, lr}
34013716:	b084      	sub	sp, #16
34013718:	af00      	add	r7, sp, #0
3401371a:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3401371c:	2300      	movs	r3, #0
3401371e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34013720:	f7f8 faf6 	bl	3400bd10 <LL_RCC_CLKP_IsEnabled>
34013724:	4603      	mov	r3, r0
34013726:	2b01      	cmp	r3, #1
34013728:	f040 81a5 	bne.w	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3401372c:	6878      	ldr	r0, [r7, #4]
3401372e:	f7f7 fae5 	bl	3400acfc <LL_RCC_GetCLKPClockSource>
34013732:	4603      	mov	r3, r0
34013734:	2b07      	cmp	r3, #7
34013736:	f200 818d 	bhi.w	34013a54 <RCCEx_GetCLKPCLKFreq+0x340>
3401373a:	a201      	add	r2, pc, #4	@ (adr r2, 34013740 <RCCEx_GetCLKPCLKFreq+0x2c>)
3401373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34013740:	34013761 	.word	0x34013761
34013744:	3401377f 	.word	0x3401377f
34013748:	34013791 	.word	0x34013791
3401374c:	3401393b 	.word	0x3401393b
34013750:	340137a3 	.word	0x340137a3
34013754:	3401382b 	.word	0x3401382b
34013758:	340138b3 	.word	0x340138b3
3401375c:	340139c3 	.word	0x340139c3
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34013760:	f7f6 fff2 	bl	3400a748 <LL_RCC_HSI_IsReady>
34013764:	4603      	mov	r3, r0
34013766:	2b00      	cmp	r3, #0
34013768:	f000 8176 	beq.w	34013a58 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401376c:	f7f6 fffe 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34013770:	4603      	mov	r3, r0
34013772:	09db      	lsrs	r3, r3, #7
34013774:	4aa1      	ldr	r2, [pc, #644]	@ (340139fc <RCCEx_GetCLKPCLKFreq+0x2e8>)
34013776:	fa22 f303 	lsr.w	r3, r2, r3
3401377a:	60fb      	str	r3, [r7, #12]
        }
        break;
3401377c:	e16c      	b.n	34013a58 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3401377e:	f7f7 f803 	bl	3400a788 <LL_RCC_MSI_IsReady>
34013782:	4603      	mov	r3, r0
34013784:	2b00      	cmp	r3, #0
34013786:	f000 8169 	beq.w	34013a5c <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3401378a:	4b9d      	ldr	r3, [pc, #628]	@ (34013a00 <RCCEx_GetCLKPCLKFreq+0x2ec>)
3401378c:	60fb      	str	r3, [r7, #12]
        }
        break;
3401378e:	e165      	b.n	34013a5c <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34013790:	f7f6 ffc8 	bl	3400a724 <LL_RCC_HSE_IsReady>
34013794:	4603      	mov	r3, r0
34013796:	2b00      	cmp	r3, #0
34013798:	f000 8162 	beq.w	34013a60 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
3401379c:	4b99      	ldr	r3, [pc, #612]	@ (34013a04 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3401379e:	60fb      	str	r3, [r7, #12]
        }
        break;
340137a0:	e15e      	b.n	34013a60 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
340137a2:	f7f7 ff35 	bl	3400b610 <LL_RCC_IC5_IsEnabled>
340137a6:	4603      	mov	r3, r0
340137a8:	2b00      	cmp	r3, #0
340137aa:	f000 815b 	beq.w	34013a64 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
340137ae:	f7f7 ff51 	bl	3400b654 <LL_RCC_IC5_GetDivider>
340137b2:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
340137b4:	f7f7 ff40 	bl	3400b638 <LL_RCC_IC5_GetSource>
340137b8:	4603      	mov	r3, r0
340137ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137be:	d029      	beq.n	34013814 <RCCEx_GetCLKPCLKFreq+0x100>
340137c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137c4:	d82f      	bhi.n	34013826 <RCCEx_GetCLKPCLKFreq+0x112>
340137c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137ca:	d01a      	beq.n	34013802 <RCCEx_GetCLKPCLKFreq+0xee>
340137cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137d0:	d829      	bhi.n	34013826 <RCCEx_GetCLKPCLKFreq+0x112>
340137d2:	2b00      	cmp	r3, #0
340137d4:	d003      	beq.n	340137de <RCCEx_GetCLKPCLKFreq+0xca>
340137d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340137da:	d009      	beq.n	340137f0 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340137dc:	e023      	b.n	34013826 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340137de:	f7ff fb95 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340137e2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340137e4:	68fa      	ldr	r2, [r7, #12]
340137e6:	68bb      	ldr	r3, [r7, #8]
340137e8:	fbb2 f3f3 	udiv	r3, r2, r3
340137ec:	60fb      	str	r3, [r7, #12]
              break;
340137ee:	e01b      	b.n	34013828 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340137f0:	f7ff fbd2 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340137f4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340137f6:	68fa      	ldr	r2, [r7, #12]
340137f8:	68bb      	ldr	r3, [r7, #8]
340137fa:	fbb2 f3f3 	udiv	r3, r2, r3
340137fe:	60fb      	str	r3, [r7, #12]
              break;
34013800:	e012      	b.n	34013828 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013802:	f7ff fc0f 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013806:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013808:	68fa      	ldr	r2, [r7, #12]
3401380a:	68bb      	ldr	r3, [r7, #8]
3401380c:	fbb2 f3f3 	udiv	r3, r2, r3
34013810:	60fb      	str	r3, [r7, #12]
              break;
34013812:	e009      	b.n	34013828 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013814:	f7ff fc4c 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013818:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401381a:	68fa      	ldr	r2, [r7, #12]
3401381c:	68bb      	ldr	r3, [r7, #8]
3401381e:	fbb2 f3f3 	udiv	r3, r2, r3
34013822:	60fb      	str	r3, [r7, #12]
              break;
34013824:	e000      	b.n	34013828 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
34013826:	bf00      	nop
          }
        }
        break;
34013828:	e11c      	b.n	34013a64 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
3401382a:	f7f7 fff1 	bl	3400b810 <LL_RCC_IC10_IsEnabled>
3401382e:	4603      	mov	r3, r0
34013830:	2b00      	cmp	r3, #0
34013832:	f000 8119 	beq.w	34013a68 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
34013836:	f7f8 f80d 	bl	3400b854 <LL_RCC_IC10_GetDivider>
3401383a:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
3401383c:	f7f7 fffc 	bl	3400b838 <LL_RCC_IC10_GetSource>
34013840:	4603      	mov	r3, r0
34013842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013846:	d029      	beq.n	3401389c <RCCEx_GetCLKPCLKFreq+0x188>
34013848:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401384c:	d82f      	bhi.n	340138ae <RCCEx_GetCLKPCLKFreq+0x19a>
3401384e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013852:	d01a      	beq.n	3401388a <RCCEx_GetCLKPCLKFreq+0x176>
34013854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013858:	d829      	bhi.n	340138ae <RCCEx_GetCLKPCLKFreq+0x19a>
3401385a:	2b00      	cmp	r3, #0
3401385c:	d003      	beq.n	34013866 <RCCEx_GetCLKPCLKFreq+0x152>
3401385e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013862:	d009      	beq.n	34013878 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34013864:	e023      	b.n	340138ae <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013866:	f7ff fb51 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401386a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401386c:	68fa      	ldr	r2, [r7, #12]
3401386e:	68bb      	ldr	r3, [r7, #8]
34013870:	fbb2 f3f3 	udiv	r3, r2, r3
34013874:	60fb      	str	r3, [r7, #12]
              break;
34013876:	e01b      	b.n	340138b0 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013878:	f7ff fb8e 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401387c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401387e:	68fa      	ldr	r2, [r7, #12]
34013880:	68bb      	ldr	r3, [r7, #8]
34013882:	fbb2 f3f3 	udiv	r3, r2, r3
34013886:	60fb      	str	r3, [r7, #12]
              break;
34013888:	e012      	b.n	340138b0 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401388a:	f7ff fbcb 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3401388e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013890:	68fa      	ldr	r2, [r7, #12]
34013892:	68bb      	ldr	r3, [r7, #8]
34013894:	fbb2 f3f3 	udiv	r3, r2, r3
34013898:	60fb      	str	r3, [r7, #12]
              break;
3401389a:	e009      	b.n	340138b0 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401389c:	f7ff fc08 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340138a0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340138a2:	68fa      	ldr	r2, [r7, #12]
340138a4:	68bb      	ldr	r3, [r7, #8]
340138a6:	fbb2 f3f3 	udiv	r3, r2, r3
340138aa:	60fb      	str	r3, [r7, #12]
              break;
340138ac:	e000      	b.n	340138b0 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
340138ae:	bf00      	nop
          }
        }
        break;
340138b0:	e0da      	b.n	34013a68 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
340138b2:	f7f8 f8ad 	bl	3400ba10 <LL_RCC_IC15_IsEnabled>
340138b6:	4603      	mov	r3, r0
340138b8:	2b00      	cmp	r3, #0
340138ba:	f000 80d7 	beq.w	34013a6c <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
340138be:	f7f8 f8c9 	bl	3400ba54 <LL_RCC_IC15_GetDivider>
340138c2:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
340138c4:	f7f8 f8b8 	bl	3400ba38 <LL_RCC_IC15_GetSource>
340138c8:	4603      	mov	r3, r0
340138ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340138ce:	d029      	beq.n	34013924 <RCCEx_GetCLKPCLKFreq+0x210>
340138d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340138d4:	d82f      	bhi.n	34013936 <RCCEx_GetCLKPCLKFreq+0x222>
340138d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340138da:	d01a      	beq.n	34013912 <RCCEx_GetCLKPCLKFreq+0x1fe>
340138dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340138e0:	d829      	bhi.n	34013936 <RCCEx_GetCLKPCLKFreq+0x222>
340138e2:	2b00      	cmp	r3, #0
340138e4:	d003      	beq.n	340138ee <RCCEx_GetCLKPCLKFreq+0x1da>
340138e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340138ea:	d009      	beq.n	34013900 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340138ec:	e023      	b.n	34013936 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340138ee:	f7ff fb0d 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340138f2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340138f4:	68fa      	ldr	r2, [r7, #12]
340138f6:	68bb      	ldr	r3, [r7, #8]
340138f8:	fbb2 f3f3 	udiv	r3, r2, r3
340138fc:	60fb      	str	r3, [r7, #12]
              break;
340138fe:	e01b      	b.n	34013938 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013900:	f7ff fb4a 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013904:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013906:	68fa      	ldr	r2, [r7, #12]
34013908:	68bb      	ldr	r3, [r7, #8]
3401390a:	fbb2 f3f3 	udiv	r3, r2, r3
3401390e:	60fb      	str	r3, [r7, #12]
              break;
34013910:	e012      	b.n	34013938 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013912:	f7ff fb87 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013916:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013918:	68fa      	ldr	r2, [r7, #12]
3401391a:	68bb      	ldr	r3, [r7, #8]
3401391c:	fbb2 f3f3 	udiv	r3, r2, r3
34013920:	60fb      	str	r3, [r7, #12]
              break;
34013922:	e009      	b.n	34013938 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013924:	f7ff fbc4 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013928:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401392a:	68fa      	ldr	r2, [r7, #12]
3401392c:	68bb      	ldr	r3, [r7, #8]
3401392e:	fbb2 f3f3 	udiv	r3, r2, r3
34013932:	60fb      	str	r3, [r7, #12]
              break;
34013934:	e000      	b.n	34013938 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
34013936:	bf00      	nop
          }
        }
        break;
34013938:	e098      	b.n	34013a6c <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
3401393a:	f7f8 f969 	bl	3400bc10 <LL_RCC_IC19_IsEnabled>
3401393e:	4603      	mov	r3, r0
34013940:	2b00      	cmp	r3, #0
34013942:	f000 8095 	beq.w	34013a70 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34013946:	f7f8 f985 	bl	3400bc54 <LL_RCC_IC19_GetDivider>
3401394a:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
3401394c:	f7f8 f974 	bl	3400bc38 <LL_RCC_IC19_GetSource>
34013950:	4603      	mov	r3, r0
34013952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013956:	d029      	beq.n	340139ac <RCCEx_GetCLKPCLKFreq+0x298>
34013958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401395c:	d82f      	bhi.n	340139be <RCCEx_GetCLKPCLKFreq+0x2aa>
3401395e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013962:	d01a      	beq.n	3401399a <RCCEx_GetCLKPCLKFreq+0x286>
34013964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013968:	d829      	bhi.n	340139be <RCCEx_GetCLKPCLKFreq+0x2aa>
3401396a:	2b00      	cmp	r3, #0
3401396c:	d003      	beq.n	34013976 <RCCEx_GetCLKPCLKFreq+0x262>
3401396e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013972:	d009      	beq.n	34013988 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34013974:	e023      	b.n	340139be <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013976:	f7ff fac9 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401397a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401397c:	68fa      	ldr	r2, [r7, #12]
3401397e:	68bb      	ldr	r3, [r7, #8]
34013980:	fbb2 f3f3 	udiv	r3, r2, r3
34013984:	60fb      	str	r3, [r7, #12]
              break;
34013986:	e01b      	b.n	340139c0 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013988:	f7ff fb06 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401398c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3401398e:	68fa      	ldr	r2, [r7, #12]
34013990:	68bb      	ldr	r3, [r7, #8]
34013992:	fbb2 f3f3 	udiv	r3, r2, r3
34013996:	60fb      	str	r3, [r7, #12]
              break;
34013998:	e012      	b.n	340139c0 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401399a:	f7ff fb43 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3401399e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340139a0:	68fa      	ldr	r2, [r7, #12]
340139a2:	68bb      	ldr	r3, [r7, #8]
340139a4:	fbb2 f3f3 	udiv	r3, r2, r3
340139a8:	60fb      	str	r3, [r7, #12]
              break;
340139aa:	e009      	b.n	340139c0 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340139ac:	f7ff fb80 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340139b0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340139b2:	68fa      	ldr	r2, [r7, #12]
340139b4:	68bb      	ldr	r3, [r7, #8]
340139b6:	fbb2 f3f3 	udiv	r3, r2, r3
340139ba:	60fb      	str	r3, [r7, #12]
              break;
340139bc:	e000      	b.n	340139c0 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
340139be:	bf00      	nop
          }
        }
        break;
340139c0:	e056      	b.n	34013a70 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
340139c2:	f7f8 f965 	bl	3400bc90 <LL_RCC_IC20_IsEnabled>
340139c6:	4603      	mov	r3, r0
340139c8:	2b00      	cmp	r3, #0
340139ca:	d053      	beq.n	34013a74 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
340139cc:	f7f8 f982 	bl	3400bcd4 <LL_RCC_IC20_GetDivider>
340139d0:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
340139d2:	f7f8 f971 	bl	3400bcb8 <LL_RCC_IC20_GetSource>
340139d6:	4603      	mov	r3, r0
340139d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340139dc:	d02f      	beq.n	34013a3e <RCCEx_GetCLKPCLKFreq+0x32a>
340139de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340139e2:	d835      	bhi.n	34013a50 <RCCEx_GetCLKPCLKFreq+0x33c>
340139e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340139e8:	d020      	beq.n	34013a2c <RCCEx_GetCLKPCLKFreq+0x318>
340139ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340139ee:	d82f      	bhi.n	34013a50 <RCCEx_GetCLKPCLKFreq+0x33c>
340139f0:	2b00      	cmp	r3, #0
340139f2:	d009      	beq.n	34013a08 <RCCEx_GetCLKPCLKFreq+0x2f4>
340139f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340139f8:	d00f      	beq.n	34013a1a <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340139fa:	e029      	b.n	34013a50 <RCCEx_GetCLKPCLKFreq+0x33c>
340139fc:	03d09000 	.word	0x03d09000
34013a00:	003d0900 	.word	0x003d0900
34013a04:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013a08:	f7ff fa80 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013a0c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013a0e:	68fa      	ldr	r2, [r7, #12]
34013a10:	68bb      	ldr	r3, [r7, #8]
34013a12:	fbb2 f3f3 	udiv	r3, r2, r3
34013a16:	60fb      	str	r3, [r7, #12]
              break;
34013a18:	e01b      	b.n	34013a52 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013a1a:	f7ff fabd 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013a1e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013a20:	68fa      	ldr	r2, [r7, #12]
34013a22:	68bb      	ldr	r3, [r7, #8]
34013a24:	fbb2 f3f3 	udiv	r3, r2, r3
34013a28:	60fb      	str	r3, [r7, #12]
              break;
34013a2a:	e012      	b.n	34013a52 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013a2c:	f7ff fafa 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013a30:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013a32:	68fa      	ldr	r2, [r7, #12]
34013a34:	68bb      	ldr	r3, [r7, #8]
34013a36:	fbb2 f3f3 	udiv	r3, r2, r3
34013a3a:	60fb      	str	r3, [r7, #12]
              break;
34013a3c:	e009      	b.n	34013a52 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013a3e:	f7ff fb37 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013a42:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34013a44:	68fa      	ldr	r2, [r7, #12]
34013a46:	68bb      	ldr	r3, [r7, #8]
34013a48:	fbb2 f3f3 	udiv	r3, r2, r3
34013a4c:	60fb      	str	r3, [r7, #12]
              break;
34013a4e:	e000      	b.n	34013a52 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34013a50:	bf00      	nop
          }
        }
        break;
34013a52:	e00f      	b.n	34013a74 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34013a54:	bf00      	nop
34013a56:	e00e      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a58:	bf00      	nop
34013a5a:	e00c      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a5c:	bf00      	nop
34013a5e:	e00a      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a60:	bf00      	nop
34013a62:	e008      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a64:	bf00      	nop
34013a66:	e006      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a68:	bf00      	nop
34013a6a:	e004      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a6c:	bf00      	nop
34013a6e:	e002      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a70:	bf00      	nop
34013a72:	e000      	b.n	34013a76 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34013a74:	bf00      	nop
    }
  }

  return clkp_frequency;
34013a76:	68fb      	ldr	r3, [r7, #12]
}
34013a78:	4618      	mov	r0, r3
34013a7a:	3710      	adds	r7, #16
34013a7c:	46bd      	mov	sp, r7
34013a7e:	bd80      	pop	{r7, pc}

34013a80 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34013a80:	b580      	push	{r7, lr}
34013a82:	b082      	sub	sp, #8
34013a84:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34013a86:	2300      	movs	r3, #0
34013a88:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
34013a8a:	f7f8 f881 	bl	3400bb90 <LL_RCC_IC18_IsEnabled>
34013a8e:	4603      	mov	r3, r0
34013a90:	2b00      	cmp	r3, #0
34013a92:	d03c      	beq.n	34013b0e <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34013a94:	f7f8 f89e 	bl	3400bbd4 <LL_RCC_IC18_GetDivider>
34013a98:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
34013a9a:	f7f8 f88d 	bl	3400bbb8 <LL_RCC_IC18_GetSource>
34013a9e:	4603      	mov	r3, r0
34013aa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013aa4:	d029      	beq.n	34013afa <RCCEx_GetCSICLKFreq+0x7a>
34013aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013aaa:	d82f      	bhi.n	34013b0c <RCCEx_GetCSICLKFreq+0x8c>
34013aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013ab0:	d01a      	beq.n	34013ae8 <RCCEx_GetCSICLKFreq+0x68>
34013ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013ab6:	d829      	bhi.n	34013b0c <RCCEx_GetCSICLKFreq+0x8c>
34013ab8:	2b00      	cmp	r3, #0
34013aba:	d003      	beq.n	34013ac4 <RCCEx_GetCSICLKFreq+0x44>
34013abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ac0:	d009      	beq.n	34013ad6 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34013ac2:	e023      	b.n	34013b0c <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013ac4:	f7ff fa22 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013ac8:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34013aca:	687a      	ldr	r2, [r7, #4]
34013acc:	683b      	ldr	r3, [r7, #0]
34013ace:	fbb2 f3f3 	udiv	r3, r2, r3
34013ad2:	607b      	str	r3, [r7, #4]
        break;
34013ad4:	e01b      	b.n	34013b0e <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013ad6:	f7ff fa5f 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013ada:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34013adc:	687a      	ldr	r2, [r7, #4]
34013ade:	683b      	ldr	r3, [r7, #0]
34013ae0:	fbb2 f3f3 	udiv	r3, r2, r3
34013ae4:	607b      	str	r3, [r7, #4]
        break;
34013ae6:	e012      	b.n	34013b0e <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013ae8:	f7ff fa9c 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013aec:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34013aee:	687a      	ldr	r2, [r7, #4]
34013af0:	683b      	ldr	r3, [r7, #0]
34013af2:	fbb2 f3f3 	udiv	r3, r2, r3
34013af6:	607b      	str	r3, [r7, #4]
        break;
34013af8:	e009      	b.n	34013b0e <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013afa:	f7ff fad9 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013afe:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34013b00:	687a      	ldr	r2, [r7, #4]
34013b02:	683b      	ldr	r3, [r7, #0]
34013b04:	fbb2 f3f3 	udiv	r3, r2, r3
34013b08:	607b      	str	r3, [r7, #4]
        break;
34013b0a:	e000      	b.n	34013b0e <RCCEx_GetCSICLKFreq+0x8e>
        break;
34013b0c:	bf00      	nop
    }
  }

  return clkp_frequency;
34013b0e:	687b      	ldr	r3, [r7, #4]
}
34013b10:	4618      	mov	r0, r3
34013b12:	3708      	adds	r7, #8
34013b14:	46bd      	mov	sp, r7
34013b16:	bd80      	pop	{r7, pc}

34013b18 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
34013b18:	b580      	push	{r7, lr}
34013b1a:	b084      	sub	sp, #16
34013b1c:	af00      	add	r7, sp, #0
34013b1e:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
34013b20:	2300      	movs	r3, #0
34013b22:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34013b24:	6878      	ldr	r0, [r7, #4]
34013b26:	f7f7 f8fb 	bl	3400ad20 <LL_RCC_GetDCMIPPClockSource>
34013b2a:	4603      	mov	r3, r0
34013b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34013b30:	d062      	beq.n	34013bf8 <RCCEx_GetDCMIPPCLKFreq+0xe0>
34013b32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34013b36:	d86d      	bhi.n	34013c14 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34013b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34013b3c:	d019      	beq.n	34013b72 <RCCEx_GetDCMIPPCLKFreq+0x5a>
34013b3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34013b42:	d867      	bhi.n	34013c14 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34013b44:	2b00      	cmp	r3, #0
34013b46:	d003      	beq.n	34013b50 <RCCEx_GetDCMIPPCLKFreq+0x38>
34013b48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34013b4c:	d00c      	beq.n	34013b68 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013b4e:	e061      	b.n	34013c14 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013b50:	f7f6 f9fc 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013b54:	4603      	mov	r3, r0
34013b56:	4618      	mov	r0, r3
34013b58:	f7ff faf0 	bl	3401313c <RCCEx_GetHCLKFreq>
34013b5c:	4603      	mov	r3, r0
34013b5e:	4618      	mov	r0, r3
34013b60:	f7ff fb2f 	bl	340131c2 <RCCEx_GetPCLK5Freq>
34013b64:	60f8      	str	r0, [r7, #12]
      break;
34013b66:	e05a      	b.n	34013c1e <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013b68:	2007      	movs	r0, #7
34013b6a:	f7ff fdd3 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013b6e:	60f8      	str	r0, [r7, #12]
      break;
34013b70:	e055      	b.n	34013c1e <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34013b72:	f7f7 ffcd 	bl	3400bb10 <LL_RCC_IC17_IsEnabled>
34013b76:	4603      	mov	r3, r0
34013b78:	2b00      	cmp	r3, #0
34013b7a:	d04d      	beq.n	34013c18 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34013b7c:	f7f7 ffea 	bl	3400bb54 <LL_RCC_IC17_GetDivider>
34013b80:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34013b82:	f7f7 ffd9 	bl	3400bb38 <LL_RCC_IC17_GetSource>
34013b86:	4603      	mov	r3, r0
34013b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013b8c:	d029      	beq.n	34013be2 <RCCEx_GetDCMIPPCLKFreq+0xca>
34013b8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013b92:	d82f      	bhi.n	34013bf4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34013b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013b98:	d01a      	beq.n	34013bd0 <RCCEx_GetDCMIPPCLKFreq+0xb8>
34013b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013b9e:	d829      	bhi.n	34013bf4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34013ba0:	2b00      	cmp	r3, #0
34013ba2:	d003      	beq.n	34013bac <RCCEx_GetDCMIPPCLKFreq+0x94>
34013ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ba8:	d009      	beq.n	34013bbe <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34013baa:	e023      	b.n	34013bf4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013bac:	f7ff f9ae 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013bb0:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34013bb2:	68fa      	ldr	r2, [r7, #12]
34013bb4:	68bb      	ldr	r3, [r7, #8]
34013bb6:	fbb2 f3f3 	udiv	r3, r2, r3
34013bba:	60fb      	str	r3, [r7, #12]
            break;
34013bbc:	e01b      	b.n	34013bf6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013bbe:	f7ff f9eb 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013bc2:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34013bc4:	68fa      	ldr	r2, [r7, #12]
34013bc6:	68bb      	ldr	r3, [r7, #8]
34013bc8:	fbb2 f3f3 	udiv	r3, r2, r3
34013bcc:	60fb      	str	r3, [r7, #12]
            break;
34013bce:	e012      	b.n	34013bf6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013bd0:	f7ff fa28 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013bd4:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34013bd6:	68fa      	ldr	r2, [r7, #12]
34013bd8:	68bb      	ldr	r3, [r7, #8]
34013bda:	fbb2 f3f3 	udiv	r3, r2, r3
34013bde:	60fb      	str	r3, [r7, #12]
            break;
34013be0:	e009      	b.n	34013bf6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013be2:	f7ff fa65 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013be6:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34013be8:	68fa      	ldr	r2, [r7, #12]
34013bea:	68bb      	ldr	r3, [r7, #8]
34013bec:	fbb2 f3f3 	udiv	r3, r2, r3
34013bf0:	60fb      	str	r3, [r7, #12]
            break;
34013bf2:	e000      	b.n	34013bf6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34013bf4:	bf00      	nop
      break;
34013bf6:	e00f      	b.n	34013c18 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34013bf8:	f7f6 fda6 	bl	3400a748 <LL_RCC_HSI_IsReady>
34013bfc:	4603      	mov	r3, r0
34013bfe:	2b00      	cmp	r3, #0
34013c00:	d00c      	beq.n	34013c1c <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013c02:	f7f6 fdb3 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34013c06:	4603      	mov	r3, r0
34013c08:	09db      	lsrs	r3, r3, #7
34013c0a:	4a07      	ldr	r2, [pc, #28]	@ (34013c28 <RCCEx_GetDCMIPPCLKFreq+0x110>)
34013c0c:	fa22 f303 	lsr.w	r3, r2, r3
34013c10:	60fb      	str	r3, [r7, #12]
      break;
34013c12:	e003      	b.n	34013c1c <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
34013c14:	bf00      	nop
34013c16:	e002      	b.n	34013c1e <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34013c18:	bf00      	nop
34013c1a:	e000      	b.n	34013c1e <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34013c1c:	bf00      	nop
  }

  return dcmipp_frequency;
34013c1e:	68fb      	ldr	r3, [r7, #12]
}
34013c20:	4618      	mov	r0, r3
34013c22:	3710      	adds	r7, #16
34013c24:	46bd      	mov	sp, r7
34013c26:	bd80      	pop	{r7, pc}
34013c28:	03d09000 	.word	0x03d09000

34013c2c <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34013c2c:	b580      	push	{r7, lr}
34013c2e:	b084      	sub	sp, #16
34013c30:	af00      	add	r7, sp, #0
34013c32:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
34013c34:	2300      	movs	r3, #0
34013c36:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34013c38:	6878      	ldr	r0, [r7, #4]
34013c3a:	f7f7 f883 	bl	3400ad44 <LL_RCC_GetETHClockSource>
34013c3e:	4603      	mov	r3, r0
34013c40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34013c44:	d05e      	beq.n	34013d04 <RCCEx_GetETH1CLKFreq+0xd8>
34013c46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34013c4a:	d863      	bhi.n	34013d14 <RCCEx_GetETH1CLKFreq+0xe8>
34013c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34013c50:	d015      	beq.n	34013c7e <RCCEx_GetETH1CLKFreq+0x52>
34013c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34013c56:	d85d      	bhi.n	34013d14 <RCCEx_GetETH1CLKFreq+0xe8>
34013c58:	2b00      	cmp	r3, #0
34013c5a:	d003      	beq.n	34013c64 <RCCEx_GetETH1CLKFreq+0x38>
34013c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013c60:	d008      	beq.n	34013c74 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013c62:	e057      	b.n	34013d14 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34013c64:	f7f6 f972 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013c68:	4603      	mov	r3, r0
34013c6a:	4618      	mov	r0, r3
34013c6c:	f7ff fa66 	bl	3401313c <RCCEx_GetHCLKFreq>
34013c70:	60f8      	str	r0, [r7, #12]
      break;
34013c72:	e054      	b.n	34013d1e <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013c74:	2007      	movs	r0, #7
34013c76:	f7ff fd4d 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013c7a:	60f8      	str	r0, [r7, #12]
      break;
34013c7c:	e04f      	b.n	34013d1e <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34013c7e:	f7f7 fe07 	bl	3400b890 <LL_RCC_IC12_IsEnabled>
34013c82:	4603      	mov	r3, r0
34013c84:	2b00      	cmp	r3, #0
34013c86:	d047      	beq.n	34013d18 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34013c88:	f7f7 fe24 	bl	3400b8d4 <LL_RCC_IC12_GetDivider>
34013c8c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34013c8e:	f7f7 fe13 	bl	3400b8b8 <LL_RCC_IC12_GetSource>
34013c92:	4603      	mov	r3, r0
34013c94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013c98:	d029      	beq.n	34013cee <RCCEx_GetETH1CLKFreq+0xc2>
34013c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013c9e:	d82f      	bhi.n	34013d00 <RCCEx_GetETH1CLKFreq+0xd4>
34013ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013ca4:	d01a      	beq.n	34013cdc <RCCEx_GetETH1CLKFreq+0xb0>
34013ca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013caa:	d829      	bhi.n	34013d00 <RCCEx_GetETH1CLKFreq+0xd4>
34013cac:	2b00      	cmp	r3, #0
34013cae:	d003      	beq.n	34013cb8 <RCCEx_GetETH1CLKFreq+0x8c>
34013cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013cb4:	d009      	beq.n	34013cca <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34013cb6:	e023      	b.n	34013d00 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013cb8:	f7ff f928 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013cbc:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34013cbe:	68fa      	ldr	r2, [r7, #12]
34013cc0:	68bb      	ldr	r3, [r7, #8]
34013cc2:	fbb2 f3f3 	udiv	r3, r2, r3
34013cc6:	60fb      	str	r3, [r7, #12]
            break;
34013cc8:	e01b      	b.n	34013d02 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013cca:	f7ff f965 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013cce:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34013cd0:	68fa      	ldr	r2, [r7, #12]
34013cd2:	68bb      	ldr	r3, [r7, #8]
34013cd4:	fbb2 f3f3 	udiv	r3, r2, r3
34013cd8:	60fb      	str	r3, [r7, #12]
            break;
34013cda:	e012      	b.n	34013d02 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013cdc:	f7ff f9a2 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013ce0:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34013ce2:	68fa      	ldr	r2, [r7, #12]
34013ce4:	68bb      	ldr	r3, [r7, #8]
34013ce6:	fbb2 f3f3 	udiv	r3, r2, r3
34013cea:	60fb      	str	r3, [r7, #12]
            break;
34013cec:	e009      	b.n	34013d02 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013cee:	f7ff f9df 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013cf2:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34013cf4:	68fa      	ldr	r2, [r7, #12]
34013cf6:	68bb      	ldr	r3, [r7, #8]
34013cf8:	fbb2 f3f3 	udiv	r3, r2, r3
34013cfc:	60fb      	str	r3, [r7, #12]
            break;
34013cfe:	e000      	b.n	34013d02 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
34013d00:	bf00      	nop
      break;
34013d02:	e009      	b.n	34013d18 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
34013d04:	f7f6 fd0e 	bl	3400a724 <LL_RCC_HSE_IsReady>
34013d08:	4603      	mov	r3, r0
34013d0a:	2b00      	cmp	r3, #0
34013d0c:	d006      	beq.n	34013d1c <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
34013d0e:	4b06      	ldr	r3, [pc, #24]	@ (34013d28 <RCCEx_GetETH1CLKFreq+0xfc>)
34013d10:	60fb      	str	r3, [r7, #12]
      break;
34013d12:	e003      	b.n	34013d1c <RCCEx_GetETH1CLKFreq+0xf0>
      break;
34013d14:	bf00      	nop
34013d16:	e002      	b.n	34013d1e <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34013d18:	bf00      	nop
34013d1a:	e000      	b.n	34013d1e <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34013d1c:	bf00      	nop
  }

  return eth1_frequency;
34013d1e:	68fb      	ldr	r3, [r7, #12]
}
34013d20:	4618      	mov	r0, r3
34013d22:	3710      	adds	r7, #16
34013d24:	46bd      	mov	sp, r7
34013d26:	bd80      	pop	{r7, pc}
34013d28:	02dc6c00 	.word	0x02dc6c00

34013d2c <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34013d2c:	b580      	push	{r7, lr}
34013d2e:	b084      	sub	sp, #16
34013d30:	af00      	add	r7, sp, #0
34013d32:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
34013d34:	2300      	movs	r3, #0
34013d36:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34013d38:	6878      	ldr	r0, [r7, #4]
34013d3a:	f7f7 f815 	bl	3400ad68 <LL_RCC_GetETHPTPClockSource>
34013d3e:	4603      	mov	r3, r0
34013d40:	2b03      	cmp	r3, #3
34013d42:	d863      	bhi.n	34013e0c <RCCEx_GetETH1PTPCLKFreq+0xe0>
34013d44:	a201      	add	r2, pc, #4	@ (adr r2, 34013d4c <RCCEx_GetETH1PTPCLKFreq+0x20>)
34013d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34013d4a:	bf00      	nop
34013d4c:	34013d5d 	.word	0x34013d5d
34013d50:	34013d6d 	.word	0x34013d6d
34013d54:	34013d77 	.word	0x34013d77
34013d58:	34013dfd 	.word	0x34013dfd
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34013d5c:	f7f6 f8f6 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013d60:	4603      	mov	r3, r0
34013d62:	4618      	mov	r0, r3
34013d64:	f7ff f9ea 	bl	3401313c <RCCEx_GetHCLKFreq>
34013d68:	60f8      	str	r0, [r7, #12]
      break;
34013d6a:	e054      	b.n	34013e16 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013d6c:	2007      	movs	r0, #7
34013d6e:	f7ff fcd1 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013d72:	60f8      	str	r0, [r7, #12]
      break;
34013d74:	e04f      	b.n	34013e16 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34013d76:	f7f7 fdcb 	bl	3400b910 <LL_RCC_IC13_IsEnabled>
34013d7a:	4603      	mov	r3, r0
34013d7c:	2b00      	cmp	r3, #0
34013d7e:	d047      	beq.n	34013e10 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34013d80:	f7f7 fde8 	bl	3400b954 <LL_RCC_IC13_GetDivider>
34013d84:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34013d86:	f7f7 fdd7 	bl	3400b938 <LL_RCC_IC13_GetSource>
34013d8a:	4603      	mov	r3, r0
34013d8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013d90:	d029      	beq.n	34013de6 <RCCEx_GetETH1PTPCLKFreq+0xba>
34013d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013d96:	d82f      	bhi.n	34013df8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34013d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013d9c:	d01a      	beq.n	34013dd4 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34013d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013da2:	d829      	bhi.n	34013df8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34013da4:	2b00      	cmp	r3, #0
34013da6:	d003      	beq.n	34013db0 <RCCEx_GetETH1PTPCLKFreq+0x84>
34013da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013dac:	d009      	beq.n	34013dc2 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013dae:	e023      	b.n	34013df8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013db0:	f7ff f8ac 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013db4:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34013db6:	68fa      	ldr	r2, [r7, #12]
34013db8:	68bb      	ldr	r3, [r7, #8]
34013dba:	fbb2 f3f3 	udiv	r3, r2, r3
34013dbe:	60fb      	str	r3, [r7, #12]
            break;
34013dc0:	e01b      	b.n	34013dfa <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013dc2:	f7ff f8e9 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013dc6:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34013dc8:	68fa      	ldr	r2, [r7, #12]
34013dca:	68bb      	ldr	r3, [r7, #8]
34013dcc:	fbb2 f3f3 	udiv	r3, r2, r3
34013dd0:	60fb      	str	r3, [r7, #12]
            break;
34013dd2:	e012      	b.n	34013dfa <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013dd4:	f7ff f926 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013dd8:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34013dda:	68fa      	ldr	r2, [r7, #12]
34013ddc:	68bb      	ldr	r3, [r7, #8]
34013dde:	fbb2 f3f3 	udiv	r3, r2, r3
34013de2:	60fb      	str	r3, [r7, #12]
            break;
34013de4:	e009      	b.n	34013dfa <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013de6:	f7ff f963 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013dea:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34013dec:	68fa      	ldr	r2, [r7, #12]
34013dee:	68bb      	ldr	r3, [r7, #8]
34013df0:	fbb2 f3f3 	udiv	r3, r2, r3
34013df4:	60fb      	str	r3, [r7, #12]
            break;
34013df6:	e000      	b.n	34013dfa <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34013df8:	bf00      	nop
        }
      }
      break;
34013dfa:	e009      	b.n	34013e10 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34013dfc:	f7f6 fc92 	bl	3400a724 <LL_RCC_HSE_IsReady>
34013e00:	4603      	mov	r3, r0
34013e02:	2b00      	cmp	r3, #0
34013e04:	d006      	beq.n	34013e14 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34013e06:	4b0a      	ldr	r3, [pc, #40]	@ (34013e30 <RCCEx_GetETH1PTPCLKFreq+0x104>)
34013e08:	60fb      	str	r3, [r7, #12]
      }
      break;
34013e0a:	e003      	b.n	34013e14 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34013e0c:	bf00      	nop
34013e0e:	e002      	b.n	34013e16 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34013e10:	bf00      	nop
34013e12:	e000      	b.n	34013e16 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34013e14:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34013e16:	f7f6 fde3 	bl	3400a9e0 <LL_RCC_GetETH1PTPDivider>
34013e1a:	4603      	mov	r3, r0
34013e1c:	091b      	lsrs	r3, r3, #4
34013e1e:	3301      	adds	r3, #1
34013e20:	68fa      	ldr	r2, [r7, #12]
34013e22:	fbb2 f3f3 	udiv	r3, r2, r3
}
34013e26:	4618      	mov	r0, r3
34013e28:	3710      	adds	r7, #16
34013e2a:	46bd      	mov	sp, r7
34013e2c:	bd80      	pop	{r7, pc}
34013e2e:	bf00      	nop
34013e30:	02dc6c00 	.word	0x02dc6c00

34013e34 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34013e34:	b580      	push	{r7, lr}
34013e36:	b084      	sub	sp, #16
34013e38:	af00      	add	r7, sp, #0
34013e3a:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34013e3c:	2300      	movs	r3, #0
34013e3e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34013e40:	6878      	ldr	r0, [r7, #4]
34013e42:	f7f6 ffa3 	bl	3400ad8c <LL_RCC_GetFDCANClockSource>
34013e46:	4603      	mov	r3, r0
34013e48:	2b03      	cmp	r3, #3
34013e4a:	d867      	bhi.n	34013f1c <RCCEx_GetFDCANCLKFreq+0xe8>
34013e4c:	a201      	add	r2, pc, #4	@ (adr r2, 34013e54 <RCCEx_GetFDCANCLKFreq+0x20>)
34013e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34013e52:	bf00      	nop
34013e54:	34013e65 	.word	0x34013e65
34013e58:	34013e7d 	.word	0x34013e7d
34013e5c:	34013e87 	.word	0x34013e87
34013e60:	34013f0d 	.word	0x34013f0d
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013e64:	f7f6 f872 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013e68:	4603      	mov	r3, r0
34013e6a:	4618      	mov	r0, r3
34013e6c:	f7ff f966 	bl	3401313c <RCCEx_GetHCLKFreq>
34013e70:	4603      	mov	r3, r0
34013e72:	4618      	mov	r0, r3
34013e74:	f7ff f973 	bl	3401315e <RCCEx_GetPCLK1Freq>
34013e78:	60f8      	str	r0, [r7, #12]
      break;
34013e7a:	e054      	b.n	34013f26 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013e7c:	2007      	movs	r0, #7
34013e7e:	f7ff fc49 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013e82:	60f8      	str	r0, [r7, #12]
      break;
34013e84:	e04f      	b.n	34013f26 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34013e86:	f7f7 fec3 	bl	3400bc10 <LL_RCC_IC19_IsEnabled>
34013e8a:	4603      	mov	r3, r0
34013e8c:	2b00      	cmp	r3, #0
34013e8e:	d047      	beq.n	34013f20 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34013e90:	f7f7 fee0 	bl	3400bc54 <LL_RCC_IC19_GetDivider>
34013e94:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34013e96:	f7f7 fecf 	bl	3400bc38 <LL_RCC_IC19_GetSource>
34013e9a:	4603      	mov	r3, r0
34013e9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013ea0:	d029      	beq.n	34013ef6 <RCCEx_GetFDCANCLKFreq+0xc2>
34013ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013ea6:	d82f      	bhi.n	34013f08 <RCCEx_GetFDCANCLKFreq+0xd4>
34013ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013eac:	d01a      	beq.n	34013ee4 <RCCEx_GetFDCANCLKFreq+0xb0>
34013eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013eb2:	d829      	bhi.n	34013f08 <RCCEx_GetFDCANCLKFreq+0xd4>
34013eb4:	2b00      	cmp	r3, #0
34013eb6:	d003      	beq.n	34013ec0 <RCCEx_GetFDCANCLKFreq+0x8c>
34013eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ebc:	d009      	beq.n	34013ed2 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013ebe:	e023      	b.n	34013f08 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013ec0:	f7ff f824 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013ec4:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34013ec6:	68fa      	ldr	r2, [r7, #12]
34013ec8:	68bb      	ldr	r3, [r7, #8]
34013eca:	fbb2 f3f3 	udiv	r3, r2, r3
34013ece:	60fb      	str	r3, [r7, #12]
            break;
34013ed0:	e01b      	b.n	34013f0a <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013ed2:	f7ff f861 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013ed6:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34013ed8:	68fa      	ldr	r2, [r7, #12]
34013eda:	68bb      	ldr	r3, [r7, #8]
34013edc:	fbb2 f3f3 	udiv	r3, r2, r3
34013ee0:	60fb      	str	r3, [r7, #12]
            break;
34013ee2:	e012      	b.n	34013f0a <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013ee4:	f7ff f89e 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013ee8:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34013eea:	68fa      	ldr	r2, [r7, #12]
34013eec:	68bb      	ldr	r3, [r7, #8]
34013eee:	fbb2 f3f3 	udiv	r3, r2, r3
34013ef2:	60fb      	str	r3, [r7, #12]
            break;
34013ef4:	e009      	b.n	34013f0a <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013ef6:	f7ff f8db 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013efa:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34013efc:	68fa      	ldr	r2, [r7, #12]
34013efe:	68bb      	ldr	r3, [r7, #8]
34013f00:	fbb2 f3f3 	udiv	r3, r2, r3
34013f04:	60fb      	str	r3, [r7, #12]
            break;
34013f06:	e000      	b.n	34013f0a <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34013f08:	bf00      	nop
        }
      }
      break;
34013f0a:	e009      	b.n	34013f20 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34013f0c:	f7f6 fc0a 	bl	3400a724 <LL_RCC_HSE_IsReady>
34013f10:	4603      	mov	r3, r0
34013f12:	2b00      	cmp	r3, #0
34013f14:	d006      	beq.n	34013f24 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34013f16:	4b06      	ldr	r3, [pc, #24]	@ (34013f30 <RCCEx_GetFDCANCLKFreq+0xfc>)
34013f18:	60fb      	str	r3, [r7, #12]
      }
      break;
34013f1a:	e003      	b.n	34013f24 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34013f1c:	bf00      	nop
34013f1e:	e002      	b.n	34013f26 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34013f20:	bf00      	nop
34013f22:	e000      	b.n	34013f26 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34013f24:	bf00      	nop
  }

  return fdcan_frequency;
34013f26:	68fb      	ldr	r3, [r7, #12]
}
34013f28:	4618      	mov	r0, r3
34013f2a:	3710      	adds	r7, #16
34013f2c:	46bd      	mov	sp, r7
34013f2e:	bd80      	pop	{r7, pc}
34013f30:	02dc6c00 	.word	0x02dc6c00

34013f34 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34013f34:	b580      	push	{r7, lr}
34013f36:	b084      	sub	sp, #16
34013f38:	af00      	add	r7, sp, #0
34013f3a:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34013f3c:	2300      	movs	r3, #0
34013f3e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34013f40:	6878      	ldr	r0, [r7, #4]
34013f42:	f7f6 ff35 	bl	3400adb0 <LL_RCC_GetFMCClockSource>
34013f46:	4603      	mov	r3, r0
34013f48:	2b30      	cmp	r3, #48	@ 0x30
34013f4a:	d05d      	beq.n	34014008 <RCCEx_GetFMCCLKFreq+0xd4>
34013f4c:	2b30      	cmp	r3, #48	@ 0x30
34013f4e:	f200 809e 	bhi.w	3401408e <RCCEx_GetFMCCLKFreq+0x15a>
34013f52:	2b20      	cmp	r3, #32
34013f54:	d014      	beq.n	34013f80 <RCCEx_GetFMCCLKFreq+0x4c>
34013f56:	2b20      	cmp	r3, #32
34013f58:	f200 8099 	bhi.w	3401408e <RCCEx_GetFMCCLKFreq+0x15a>
34013f5c:	2b00      	cmp	r3, #0
34013f5e:	d002      	beq.n	34013f66 <RCCEx_GetFMCCLKFreq+0x32>
34013f60:	2b10      	cmp	r3, #16
34013f62:	d008      	beq.n	34013f76 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013f64:	e093      	b.n	3401408e <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34013f66:	f7f5 fff1 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34013f6a:	4603      	mov	r3, r0
34013f6c:	4618      	mov	r0, r3
34013f6e:	f7ff f8e5 	bl	3401313c <RCCEx_GetHCLKFreq>
34013f72:	60f8      	str	r0, [r7, #12]
      break;
34013f74:	e090      	b.n	34014098 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013f76:	2007      	movs	r0, #7
34013f78:	f7ff fbcc 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34013f7c:	60f8      	str	r0, [r7, #12]
      break;
34013f7e:	e08b      	b.n	34014098 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34013f80:	f7f7 fac6 	bl	3400b510 <LL_RCC_IC3_IsEnabled>
34013f84:	4603      	mov	r3, r0
34013f86:	2b00      	cmp	r3, #0
34013f88:	f000 8083 	beq.w	34014092 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34013f8c:	f7f7 fae2 	bl	3400b554 <LL_RCC_IC3_GetDivider>
34013f90:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34013f92:	f7f7 fad1 	bl	3400b538 <LL_RCC_IC3_GetSource>
34013f96:	4603      	mov	r3, r0
34013f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013f9c:	d029      	beq.n	34013ff2 <RCCEx_GetFMCCLKFreq+0xbe>
34013f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013fa2:	d82f      	bhi.n	34014004 <RCCEx_GetFMCCLKFreq+0xd0>
34013fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013fa8:	d01a      	beq.n	34013fe0 <RCCEx_GetFMCCLKFreq+0xac>
34013faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013fae:	d829      	bhi.n	34014004 <RCCEx_GetFMCCLKFreq+0xd0>
34013fb0:	2b00      	cmp	r3, #0
34013fb2:	d003      	beq.n	34013fbc <RCCEx_GetFMCCLKFreq+0x88>
34013fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013fb8:	d009      	beq.n	34013fce <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34013fba:	e023      	b.n	34014004 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013fbc:	f7fe ffa6 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34013fc0:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34013fc2:	68fa      	ldr	r2, [r7, #12]
34013fc4:	68bb      	ldr	r3, [r7, #8]
34013fc6:	fbb2 f3f3 	udiv	r3, r2, r3
34013fca:	60fb      	str	r3, [r7, #12]
            break;
34013fcc:	e01b      	b.n	34014006 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013fce:	f7fe ffe3 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34013fd2:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34013fd4:	68fa      	ldr	r2, [r7, #12]
34013fd6:	68bb      	ldr	r3, [r7, #8]
34013fd8:	fbb2 f3f3 	udiv	r3, r2, r3
34013fdc:	60fb      	str	r3, [r7, #12]
            break;
34013fde:	e012      	b.n	34014006 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013fe0:	f7ff f820 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34013fe4:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34013fe6:	68fa      	ldr	r2, [r7, #12]
34013fe8:	68bb      	ldr	r3, [r7, #8]
34013fea:	fbb2 f3f3 	udiv	r3, r2, r3
34013fee:	60fb      	str	r3, [r7, #12]
            break;
34013ff0:	e009      	b.n	34014006 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013ff2:	f7ff f85d 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34013ff6:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34013ff8:	68fa      	ldr	r2, [r7, #12]
34013ffa:	68bb      	ldr	r3, [r7, #8]
34013ffc:	fbb2 f3f3 	udiv	r3, r2, r3
34014000:	60fb      	str	r3, [r7, #12]
            break;
34014002:	e000      	b.n	34014006 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34014004:	bf00      	nop
      break;
34014006:	e044      	b.n	34014092 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34014008:	f7f7 fac2 	bl	3400b590 <LL_RCC_IC4_IsEnabled>
3401400c:	4603      	mov	r3, r0
3401400e:	2b00      	cmp	r3, #0
34014010:	d041      	beq.n	34014096 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34014012:	f7f7 fadf 	bl	3400b5d4 <LL_RCC_IC4_GetDivider>
34014016:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34014018:	f7f7 face 	bl	3400b5b8 <LL_RCC_IC4_GetSource>
3401401c:	4603      	mov	r3, r0
3401401e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014022:	d029      	beq.n	34014078 <RCCEx_GetFMCCLKFreq+0x144>
34014024:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014028:	d82f      	bhi.n	3401408a <RCCEx_GetFMCCLKFreq+0x156>
3401402a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401402e:	d01a      	beq.n	34014066 <RCCEx_GetFMCCLKFreq+0x132>
34014030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014034:	d829      	bhi.n	3401408a <RCCEx_GetFMCCLKFreq+0x156>
34014036:	2b00      	cmp	r3, #0
34014038:	d003      	beq.n	34014042 <RCCEx_GetFMCCLKFreq+0x10e>
3401403a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401403e:	d009      	beq.n	34014054 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34014040:	e023      	b.n	3401408a <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014042:	f7fe ff63 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014046:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34014048:	68fa      	ldr	r2, [r7, #12]
3401404a:	68bb      	ldr	r3, [r7, #8]
3401404c:	fbb2 f3f3 	udiv	r3, r2, r3
34014050:	60fb      	str	r3, [r7, #12]
            break;
34014052:	e01b      	b.n	3401408c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014054:	f7fe ffa0 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014058:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401405a:	68fa      	ldr	r2, [r7, #12]
3401405c:	68bb      	ldr	r3, [r7, #8]
3401405e:	fbb2 f3f3 	udiv	r3, r2, r3
34014062:	60fb      	str	r3, [r7, #12]
            break;
34014064:	e012      	b.n	3401408c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014066:	f7fe ffdd 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3401406a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401406c:	68fa      	ldr	r2, [r7, #12]
3401406e:	68bb      	ldr	r3, [r7, #8]
34014070:	fbb2 f3f3 	udiv	r3, r2, r3
34014074:	60fb      	str	r3, [r7, #12]
            break;
34014076:	e009      	b.n	3401408c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014078:	f7ff f81a 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401407c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401407e:	68fa      	ldr	r2, [r7, #12]
34014080:	68bb      	ldr	r3, [r7, #8]
34014082:	fbb2 f3f3 	udiv	r3, r2, r3
34014086:	60fb      	str	r3, [r7, #12]
            break;
34014088:	e000      	b.n	3401408c <RCCEx_GetFMCCLKFreq+0x158>
            break;
3401408a:	bf00      	nop
      break;
3401408c:	e003      	b.n	34014096 <RCCEx_GetFMCCLKFreq+0x162>
      break;
3401408e:	bf00      	nop
34014090:	e002      	b.n	34014098 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34014092:	bf00      	nop
34014094:	e000      	b.n	34014098 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34014096:	bf00      	nop
  }

  return fmc_frequency;
34014098:	68fb      	ldr	r3, [r7, #12]
}
3401409a:	4618      	mov	r0, r3
3401409c:	3710      	adds	r7, #16
3401409e:	46bd      	mov	sp, r7
340140a0:	bd80      	pop	{r7, pc}
	...

340140a4 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
340140a4:	b580      	push	{r7, lr}
340140a6:	b084      	sub	sp, #16
340140a8:	af00      	add	r7, sp, #0
340140aa:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
340140ac:	2300      	movs	r3, #0
340140ae:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340140b0:	6878      	ldr	r0, [r7, #4]
340140b2:	f7f6 fe8f 	bl	3400add4 <LL_RCC_GetI2CClockSource>
340140b6:	4603      	mov	r3, r0
340140b8:	4aa2      	ldr	r2, [pc, #648]	@ (34014344 <RCCEx_GetI2CCLKFreq+0x2a0>)
340140ba:	4293      	cmp	r3, r2
340140bc:	f000 8172 	beq.w	340143a4 <RCCEx_GetI2CCLKFreq+0x300>
340140c0:	4aa0      	ldr	r2, [pc, #640]	@ (34014344 <RCCEx_GetI2CCLKFreq+0x2a0>)
340140c2:	4293      	cmp	r3, r2
340140c4:	f200 8184 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340140c8:	4a9f      	ldr	r2, [pc, #636]	@ (34014348 <RCCEx_GetI2CCLKFreq+0x2a4>)
340140ca:	4293      	cmp	r3, r2
340140cc:	f000 816a 	beq.w	340143a4 <RCCEx_GetI2CCLKFreq+0x300>
340140d0:	4a9d      	ldr	r2, [pc, #628]	@ (34014348 <RCCEx_GetI2CCLKFreq+0x2a4>)
340140d2:	4293      	cmp	r3, r2
340140d4:	f200 817c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340140d8:	4a9c      	ldr	r2, [pc, #624]	@ (3401434c <RCCEx_GetI2CCLKFreq+0x2a8>)
340140da:	4293      	cmp	r3, r2
340140dc:	f000 8162 	beq.w	340143a4 <RCCEx_GetI2CCLKFreq+0x300>
340140e0:	4a9a      	ldr	r2, [pc, #616]	@ (3401434c <RCCEx_GetI2CCLKFreq+0x2a8>)
340140e2:	4293      	cmp	r3, r2
340140e4:	f200 8174 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340140e8:	4a99      	ldr	r2, [pc, #612]	@ (34014350 <RCCEx_GetI2CCLKFreq+0x2ac>)
340140ea:	4293      	cmp	r3, r2
340140ec:	f000 815a 	beq.w	340143a4 <RCCEx_GetI2CCLKFreq+0x300>
340140f0:	4a97      	ldr	r2, [pc, #604]	@ (34014350 <RCCEx_GetI2CCLKFreq+0x2ac>)
340140f2:	4293      	cmp	r3, r2
340140f4:	f200 816c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340140f8:	4a96      	ldr	r2, [pc, #600]	@ (34014354 <RCCEx_GetI2CCLKFreq+0x2b0>)
340140fa:	4293      	cmp	r3, r2
340140fc:	f000 8160 	beq.w	340143c0 <RCCEx_GetI2CCLKFreq+0x31c>
34014100:	4a94      	ldr	r2, [pc, #592]	@ (34014354 <RCCEx_GetI2CCLKFreq+0x2b0>)
34014102:	4293      	cmp	r3, r2
34014104:	f200 8164 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014108:	4a93      	ldr	r2, [pc, #588]	@ (34014358 <RCCEx_GetI2CCLKFreq+0x2b4>)
3401410a:	4293      	cmp	r3, r2
3401410c:	f000 8158 	beq.w	340143c0 <RCCEx_GetI2CCLKFreq+0x31c>
34014110:	4a91      	ldr	r2, [pc, #580]	@ (34014358 <RCCEx_GetI2CCLKFreq+0x2b4>)
34014112:	4293      	cmp	r3, r2
34014114:	f200 815c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014118:	4a90      	ldr	r2, [pc, #576]	@ (3401435c <RCCEx_GetI2CCLKFreq+0x2b8>)
3401411a:	4293      	cmp	r3, r2
3401411c:	f000 8150 	beq.w	340143c0 <RCCEx_GetI2CCLKFreq+0x31c>
34014120:	4a8e      	ldr	r2, [pc, #568]	@ (3401435c <RCCEx_GetI2CCLKFreq+0x2b8>)
34014122:	4293      	cmp	r3, r2
34014124:	f200 8154 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014128:	4a8d      	ldr	r2, [pc, #564]	@ (34014360 <RCCEx_GetI2CCLKFreq+0x2bc>)
3401412a:	4293      	cmp	r3, r2
3401412c:	f000 8148 	beq.w	340143c0 <RCCEx_GetI2CCLKFreq+0x31c>
34014130:	4a8b      	ldr	r2, [pc, #556]	@ (34014360 <RCCEx_GetI2CCLKFreq+0x2bc>)
34014132:	4293      	cmp	r3, r2
34014134:	f200 814c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014138:	4a8a      	ldr	r2, [pc, #552]	@ (34014364 <RCCEx_GetI2CCLKFreq+0x2c0>)
3401413a:	4293      	cmp	r3, r2
3401413c:	f000 80be 	beq.w	340142bc <RCCEx_GetI2CCLKFreq+0x218>
34014140:	4a88      	ldr	r2, [pc, #544]	@ (34014364 <RCCEx_GetI2CCLKFreq+0x2c0>)
34014142:	4293      	cmp	r3, r2
34014144:	f200 8144 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014148:	4a87      	ldr	r2, [pc, #540]	@ (34014368 <RCCEx_GetI2CCLKFreq+0x2c4>)
3401414a:	4293      	cmp	r3, r2
3401414c:	f000 80b6 	beq.w	340142bc <RCCEx_GetI2CCLKFreq+0x218>
34014150:	4a85      	ldr	r2, [pc, #532]	@ (34014368 <RCCEx_GetI2CCLKFreq+0x2c4>)
34014152:	4293      	cmp	r3, r2
34014154:	f200 813c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014158:	4a84      	ldr	r2, [pc, #528]	@ (3401436c <RCCEx_GetI2CCLKFreq+0x2c8>)
3401415a:	4293      	cmp	r3, r2
3401415c:	f000 80ae 	beq.w	340142bc <RCCEx_GetI2CCLKFreq+0x218>
34014160:	4a82      	ldr	r2, [pc, #520]	@ (3401436c <RCCEx_GetI2CCLKFreq+0x2c8>)
34014162:	4293      	cmp	r3, r2
34014164:	f200 8134 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014168:	4a81      	ldr	r2, [pc, #516]	@ (34014370 <RCCEx_GetI2CCLKFreq+0x2cc>)
3401416a:	4293      	cmp	r3, r2
3401416c:	f000 80a6 	beq.w	340142bc <RCCEx_GetI2CCLKFreq+0x218>
34014170:	4a7f      	ldr	r2, [pc, #508]	@ (34014370 <RCCEx_GetI2CCLKFreq+0x2cc>)
34014172:	4293      	cmp	r3, r2
34014174:	f200 812c 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014178:	4a7e      	ldr	r2, [pc, #504]	@ (34014374 <RCCEx_GetI2CCLKFreq+0x2d0>)
3401417a:	4293      	cmp	r3, r2
3401417c:	d05a      	beq.n	34014234 <RCCEx_GetI2CCLKFreq+0x190>
3401417e:	4a7d      	ldr	r2, [pc, #500]	@ (34014374 <RCCEx_GetI2CCLKFreq+0x2d0>)
34014180:	4293      	cmp	r3, r2
34014182:	f200 8125 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014186:	4a7c      	ldr	r2, [pc, #496]	@ (34014378 <RCCEx_GetI2CCLKFreq+0x2d4>)
34014188:	4293      	cmp	r3, r2
3401418a:	d053      	beq.n	34014234 <RCCEx_GetI2CCLKFreq+0x190>
3401418c:	4a7a      	ldr	r2, [pc, #488]	@ (34014378 <RCCEx_GetI2CCLKFreq+0x2d4>)
3401418e:	4293      	cmp	r3, r2
34014190:	f200 811e 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014194:	4a79      	ldr	r2, [pc, #484]	@ (3401437c <RCCEx_GetI2CCLKFreq+0x2d8>)
34014196:	4293      	cmp	r3, r2
34014198:	d04c      	beq.n	34014234 <RCCEx_GetI2CCLKFreq+0x190>
3401419a:	4a78      	ldr	r2, [pc, #480]	@ (3401437c <RCCEx_GetI2CCLKFreq+0x2d8>)
3401419c:	4293      	cmp	r3, r2
3401419e:	f200 8117 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141a2:	4a77      	ldr	r2, [pc, #476]	@ (34014380 <RCCEx_GetI2CCLKFreq+0x2dc>)
340141a4:	4293      	cmp	r3, r2
340141a6:	d045      	beq.n	34014234 <RCCEx_GetI2CCLKFreq+0x190>
340141a8:	4a75      	ldr	r2, [pc, #468]	@ (34014380 <RCCEx_GetI2CCLKFreq+0x2dc>)
340141aa:	4293      	cmp	r3, r2
340141ac:	f200 8110 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141b0:	4a74      	ldr	r2, [pc, #464]	@ (34014384 <RCCEx_GetI2CCLKFreq+0x2e0>)
340141b2:	4293      	cmp	r3, r2
340141b4:	d039      	beq.n	3401422a <RCCEx_GetI2CCLKFreq+0x186>
340141b6:	4a73      	ldr	r2, [pc, #460]	@ (34014384 <RCCEx_GetI2CCLKFreq+0x2e0>)
340141b8:	4293      	cmp	r3, r2
340141ba:	f200 8109 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141be:	4a72      	ldr	r2, [pc, #456]	@ (34014388 <RCCEx_GetI2CCLKFreq+0x2e4>)
340141c0:	4293      	cmp	r3, r2
340141c2:	d032      	beq.n	3401422a <RCCEx_GetI2CCLKFreq+0x186>
340141c4:	4a70      	ldr	r2, [pc, #448]	@ (34014388 <RCCEx_GetI2CCLKFreq+0x2e4>)
340141c6:	4293      	cmp	r3, r2
340141c8:	f200 8102 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141cc:	4a6f      	ldr	r2, [pc, #444]	@ (3401438c <RCCEx_GetI2CCLKFreq+0x2e8>)
340141ce:	4293      	cmp	r3, r2
340141d0:	d02b      	beq.n	3401422a <RCCEx_GetI2CCLKFreq+0x186>
340141d2:	4a6e      	ldr	r2, [pc, #440]	@ (3401438c <RCCEx_GetI2CCLKFreq+0x2e8>)
340141d4:	4293      	cmp	r3, r2
340141d6:	f200 80fb 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141da:	4a6d      	ldr	r2, [pc, #436]	@ (34014390 <RCCEx_GetI2CCLKFreq+0x2ec>)
340141dc:	4293      	cmp	r3, r2
340141de:	d024      	beq.n	3401422a <RCCEx_GetI2CCLKFreq+0x186>
340141e0:	4a6b      	ldr	r2, [pc, #428]	@ (34014390 <RCCEx_GetI2CCLKFreq+0x2ec>)
340141e2:	4293      	cmp	r3, r2
340141e4:	f200 80f4 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141e8:	4a6a      	ldr	r2, [pc, #424]	@ (34014394 <RCCEx_GetI2CCLKFreq+0x2f0>)
340141ea:	4293      	cmp	r3, r2
340141ec:	d011      	beq.n	34014212 <RCCEx_GetI2CCLKFreq+0x16e>
340141ee:	4a69      	ldr	r2, [pc, #420]	@ (34014394 <RCCEx_GetI2CCLKFreq+0x2f0>)
340141f0:	4293      	cmp	r3, r2
340141f2:	f200 80ed 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
340141f6:	4a68      	ldr	r2, [pc, #416]	@ (34014398 <RCCEx_GetI2CCLKFreq+0x2f4>)
340141f8:	4293      	cmp	r3, r2
340141fa:	d00a      	beq.n	34014212 <RCCEx_GetI2CCLKFreq+0x16e>
340141fc:	4a66      	ldr	r2, [pc, #408]	@ (34014398 <RCCEx_GetI2CCLKFreq+0x2f4>)
340141fe:	4293      	cmp	r3, r2
34014200:	f200 80e6 	bhi.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
34014204:	4a65      	ldr	r2, [pc, #404]	@ (3401439c <RCCEx_GetI2CCLKFreq+0x2f8>)
34014206:	4293      	cmp	r3, r2
34014208:	d003      	beq.n	34014212 <RCCEx_GetI2CCLKFreq+0x16e>
3401420a:	4a65      	ldr	r2, [pc, #404]	@ (340143a0 <RCCEx_GetI2CCLKFreq+0x2fc>)
3401420c:	4293      	cmp	r3, r2
3401420e:	f040 80df 	bne.w	340143d0 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34014212:	f7f5 fe9b 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014216:	4603      	mov	r3, r0
34014218:	4618      	mov	r0, r3
3401421a:	f7fe ff8f 	bl	3401313c <RCCEx_GetHCLKFreq>
3401421e:	4603      	mov	r3, r0
34014220:	4618      	mov	r0, r3
34014222:	f7fe ff9c 	bl	3401315e <RCCEx_GetPCLK1Freq>
34014226:	60f8      	str	r0, [r7, #12]
      break;
34014228:	e0db      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401422a:	2007      	movs	r0, #7
3401422c:	f7ff fa72 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34014230:	60f8      	str	r0, [r7, #12]
      break;
34014232:	e0d6      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34014234:	f7f7 faec 	bl	3400b810 <LL_RCC_IC10_IsEnabled>
34014238:	4603      	mov	r3, r0
3401423a:	2b00      	cmp	r3, #0
3401423c:	f000 80ca 	beq.w	340143d4 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34014240:	f7f7 fb08 	bl	3400b854 <LL_RCC_IC10_GetDivider>
34014244:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34014246:	f7f7 faf7 	bl	3400b838 <LL_RCC_IC10_GetSource>
3401424a:	4603      	mov	r3, r0
3401424c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014250:	d029      	beq.n	340142a6 <RCCEx_GetI2CCLKFreq+0x202>
34014252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014256:	d82f      	bhi.n	340142b8 <RCCEx_GetI2CCLKFreq+0x214>
34014258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401425c:	d01a      	beq.n	34014294 <RCCEx_GetI2CCLKFreq+0x1f0>
3401425e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014262:	d829      	bhi.n	340142b8 <RCCEx_GetI2CCLKFreq+0x214>
34014264:	2b00      	cmp	r3, #0
34014266:	d003      	beq.n	34014270 <RCCEx_GetI2CCLKFreq+0x1cc>
34014268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401426c:	d009      	beq.n	34014282 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401426e:	e023      	b.n	340142b8 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014270:	f7fe fe4c 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014274:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34014276:	68fa      	ldr	r2, [r7, #12]
34014278:	68bb      	ldr	r3, [r7, #8]
3401427a:	fbb2 f3f3 	udiv	r3, r2, r3
3401427e:	60fb      	str	r3, [r7, #12]
            break;
34014280:	e01b      	b.n	340142ba <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014282:	f7fe fe89 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014286:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34014288:	68fa      	ldr	r2, [r7, #12]
3401428a:	68bb      	ldr	r3, [r7, #8]
3401428c:	fbb2 f3f3 	udiv	r3, r2, r3
34014290:	60fb      	str	r3, [r7, #12]
            break;
34014292:	e012      	b.n	340142ba <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014294:	f7fe fec6 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014298:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3401429a:	68fa      	ldr	r2, [r7, #12]
3401429c:	68bb      	ldr	r3, [r7, #8]
3401429e:	fbb2 f3f3 	udiv	r3, r2, r3
340142a2:	60fb      	str	r3, [r7, #12]
            break;
340142a4:	e009      	b.n	340142ba <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340142a6:	f7fe ff03 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340142aa:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340142ac:	68fa      	ldr	r2, [r7, #12]
340142ae:	68bb      	ldr	r3, [r7, #8]
340142b0:	fbb2 f3f3 	udiv	r3, r2, r3
340142b4:	60fb      	str	r3, [r7, #12]
            break;
340142b6:	e000      	b.n	340142ba <RCCEx_GetI2CCLKFreq+0x216>
            break;
340142b8:	bf00      	nop
        }
      }
      break;
340142ba:	e08b      	b.n	340143d4 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
340142bc:	f7f7 fba8 	bl	3400ba10 <LL_RCC_IC15_IsEnabled>
340142c0:	4603      	mov	r3, r0
340142c2:	2b00      	cmp	r3, #0
340142c4:	f000 8088 	beq.w	340143d8 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
340142c8:	f7f7 fbc4 	bl	3400ba54 <LL_RCC_IC15_GetDivider>
340142cc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
340142ce:	f7f7 fbb3 	bl	3400ba38 <LL_RCC_IC15_GetSource>
340142d2:	4603      	mov	r3, r0
340142d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142d8:	d029      	beq.n	3401432e <RCCEx_GetI2CCLKFreq+0x28a>
340142da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142de:	d82f      	bhi.n	34014340 <RCCEx_GetI2CCLKFreq+0x29c>
340142e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142e4:	d01a      	beq.n	3401431c <RCCEx_GetI2CCLKFreq+0x278>
340142e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142ea:	d829      	bhi.n	34014340 <RCCEx_GetI2CCLKFreq+0x29c>
340142ec:	2b00      	cmp	r3, #0
340142ee:	d003      	beq.n	340142f8 <RCCEx_GetI2CCLKFreq+0x254>
340142f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340142f4:	d009      	beq.n	3401430a <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340142f6:	e023      	b.n	34014340 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340142f8:	f7fe fe08 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340142fc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340142fe:	68fa      	ldr	r2, [r7, #12]
34014300:	68bb      	ldr	r3, [r7, #8]
34014302:	fbb2 f3f3 	udiv	r3, r2, r3
34014306:	60fb      	str	r3, [r7, #12]
            break;
34014308:	e01b      	b.n	34014342 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401430a:	f7fe fe45 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401430e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34014310:	68fa      	ldr	r2, [r7, #12]
34014312:	68bb      	ldr	r3, [r7, #8]
34014314:	fbb2 f3f3 	udiv	r3, r2, r3
34014318:	60fb      	str	r3, [r7, #12]
            break;
3401431a:	e012      	b.n	34014342 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401431c:	f7fe fe82 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014320:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34014322:	68fa      	ldr	r2, [r7, #12]
34014324:	68bb      	ldr	r3, [r7, #8]
34014326:	fbb2 f3f3 	udiv	r3, r2, r3
3401432a:	60fb      	str	r3, [r7, #12]
            break;
3401432c:	e009      	b.n	34014342 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401432e:	f7fe febf 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014332:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34014334:	68fa      	ldr	r2, [r7, #12]
34014336:	68bb      	ldr	r3, [r7, #8]
34014338:	fbb2 f3f3 	udiv	r3, r2, r3
3401433c:	60fb      	str	r3, [r7, #12]
            break;
3401433e:	e000      	b.n	34014342 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34014340:	bf00      	nop
        }
      }
      break;
34014342:	e049      	b.n	340143d8 <RCCEx_GetI2CCLKFreq+0x334>
34014344:	07050c0c 	.word	0x07050c0c
34014348:	0705080c 	.word	0x0705080c
3401434c:	0705040c 	.word	0x0705040c
34014350:	0705000c 	.word	0x0705000c
34014354:	07040c0c 	.word	0x07040c0c
34014358:	0704080c 	.word	0x0704080c
3401435c:	0704040c 	.word	0x0704040c
34014360:	0704000c 	.word	0x0704000c
34014364:	07030c0c 	.word	0x07030c0c
34014368:	0703080c 	.word	0x0703080c
3401436c:	0703040c 	.word	0x0703040c
34014370:	0703000c 	.word	0x0703000c
34014374:	07020c0c 	.word	0x07020c0c
34014378:	0702080c 	.word	0x0702080c
3401437c:	0702040c 	.word	0x0702040c
34014380:	0702000c 	.word	0x0702000c
34014384:	07010c0c 	.word	0x07010c0c
34014388:	0701080c 	.word	0x0701080c
3401438c:	0701040c 	.word	0x0701040c
34014390:	0701000c 	.word	0x0701000c
34014394:	07000c0c 	.word	0x07000c0c
34014398:	0700080c 	.word	0x0700080c
3401439c:	0700000c 	.word	0x0700000c
340143a0:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340143a4:	f7f6 f9d0 	bl	3400a748 <LL_RCC_HSI_IsReady>
340143a8:	4603      	mov	r3, r0
340143aa:	2b00      	cmp	r3, #0
340143ac:	d016      	beq.n	340143dc <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340143ae:	f7f6 f9dd 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340143b2:	4603      	mov	r3, r0
340143b4:	09db      	lsrs	r3, r3, #7
340143b6:	4a0d      	ldr	r2, [pc, #52]	@ (340143ec <RCCEx_GetI2CCLKFreq+0x348>)
340143b8:	fa22 f303 	lsr.w	r3, r2, r3
340143bc:	60fb      	str	r3, [r7, #12]
      }
      break;
340143be:	e00d      	b.n	340143dc <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340143c0:	f7f6 f9e2 	bl	3400a788 <LL_RCC_MSI_IsReady>
340143c4:	4603      	mov	r3, r0
340143c6:	2b00      	cmp	r3, #0
340143c8:	d00a      	beq.n	340143e0 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
340143ca:	4b09      	ldr	r3, [pc, #36]	@ (340143f0 <RCCEx_GetI2CCLKFreq+0x34c>)
340143cc:	60fb      	str	r3, [r7, #12]
      }
      break;
340143ce:	e007      	b.n	340143e0 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
340143d0:	bf00      	nop
340143d2:	e006      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
340143d4:	bf00      	nop
340143d6:	e004      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
340143d8:	bf00      	nop
340143da:	e002      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
340143dc:	bf00      	nop
340143de:	e000      	b.n	340143e2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
340143e0:	bf00      	nop
  }

  return i2c_frequency;
340143e2:	68fb      	ldr	r3, [r7, #12]
}
340143e4:	4618      	mov	r0, r3
340143e6:	3710      	adds	r7, #16
340143e8:	46bd      	mov	sp, r7
340143ea:	bd80      	pop	{r7, pc}
340143ec:	03d09000 	.word	0x03d09000
340143f0:	003d0900 	.word	0x003d0900

340143f4 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
340143f4:	b580      	push	{r7, lr}
340143f6:	b084      	sub	sp, #16
340143f8:	af00      	add	r7, sp, #0
340143fa:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340143fc:	2300      	movs	r3, #0
340143fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34014400:	6878      	ldr	r0, [r7, #4]
34014402:	f7f6 fcf3 	bl	3400adec <LL_RCC_GetI3CClockSource>
34014406:	4603      	mov	r3, r0
34014408:	4a86      	ldr	r2, [pc, #536]	@ (34014624 <RCCEx_GetI3CCLKFreq+0x230>)
3401440a:	4293      	cmp	r3, r2
3401440c:	f000 80e6 	beq.w	340145dc <RCCEx_GetI3CCLKFreq+0x1e8>
34014410:	4a84      	ldr	r2, [pc, #528]	@ (34014624 <RCCEx_GetI3CCLKFreq+0x230>)
34014412:	4293      	cmp	r3, r2
34014414:	f200 80f8 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014418:	4a83      	ldr	r2, [pc, #524]	@ (34014628 <RCCEx_GetI3CCLKFreq+0x234>)
3401441a:	4293      	cmp	r3, r2
3401441c:	f000 80de 	beq.w	340145dc <RCCEx_GetI3CCLKFreq+0x1e8>
34014420:	4a81      	ldr	r2, [pc, #516]	@ (34014628 <RCCEx_GetI3CCLKFreq+0x234>)
34014422:	4293      	cmp	r3, r2
34014424:	f200 80f0 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014428:	4a80      	ldr	r2, [pc, #512]	@ (3401462c <RCCEx_GetI3CCLKFreq+0x238>)
3401442a:	4293      	cmp	r3, r2
3401442c:	f000 80e4 	beq.w	340145f8 <RCCEx_GetI3CCLKFreq+0x204>
34014430:	4a7e      	ldr	r2, [pc, #504]	@ (3401462c <RCCEx_GetI3CCLKFreq+0x238>)
34014432:	4293      	cmp	r3, r2
34014434:	f200 80e8 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014438:	4a7d      	ldr	r2, [pc, #500]	@ (34014630 <RCCEx_GetI3CCLKFreq+0x23c>)
3401443a:	4293      	cmp	r3, r2
3401443c:	f000 80dc 	beq.w	340145f8 <RCCEx_GetI3CCLKFreq+0x204>
34014440:	4a7b      	ldr	r2, [pc, #492]	@ (34014630 <RCCEx_GetI3CCLKFreq+0x23c>)
34014442:	4293      	cmp	r3, r2
34014444:	f200 80e0 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014448:	4a7a      	ldr	r2, [pc, #488]	@ (34014634 <RCCEx_GetI3CCLKFreq+0x240>)
3401444a:	4293      	cmp	r3, r2
3401444c:	f000 8083 	beq.w	34014556 <RCCEx_GetI3CCLKFreq+0x162>
34014450:	4a78      	ldr	r2, [pc, #480]	@ (34014634 <RCCEx_GetI3CCLKFreq+0x240>)
34014452:	4293      	cmp	r3, r2
34014454:	f200 80d8 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014458:	4a77      	ldr	r2, [pc, #476]	@ (34014638 <RCCEx_GetI3CCLKFreq+0x244>)
3401445a:	4293      	cmp	r3, r2
3401445c:	d07b      	beq.n	34014556 <RCCEx_GetI3CCLKFreq+0x162>
3401445e:	4a76      	ldr	r2, [pc, #472]	@ (34014638 <RCCEx_GetI3CCLKFreq+0x244>)
34014460:	4293      	cmp	r3, r2
34014462:	f200 80d1 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014466:	4a75      	ldr	r2, [pc, #468]	@ (3401463c <RCCEx_GetI3CCLKFreq+0x248>)
34014468:	4293      	cmp	r3, r2
3401446a:	d030      	beq.n	340144ce <RCCEx_GetI3CCLKFreq+0xda>
3401446c:	4a73      	ldr	r2, [pc, #460]	@ (3401463c <RCCEx_GetI3CCLKFreq+0x248>)
3401446e:	4293      	cmp	r3, r2
34014470:	f200 80ca 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014474:	4a72      	ldr	r2, [pc, #456]	@ (34014640 <RCCEx_GetI3CCLKFreq+0x24c>)
34014476:	4293      	cmp	r3, r2
34014478:	d029      	beq.n	340144ce <RCCEx_GetI3CCLKFreq+0xda>
3401447a:	4a71      	ldr	r2, [pc, #452]	@ (34014640 <RCCEx_GetI3CCLKFreq+0x24c>)
3401447c:	4293      	cmp	r3, r2
3401447e:	f200 80c3 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014482:	4a70      	ldr	r2, [pc, #448]	@ (34014644 <RCCEx_GetI3CCLKFreq+0x250>)
34014484:	4293      	cmp	r3, r2
34014486:	d01d      	beq.n	340144c4 <RCCEx_GetI3CCLKFreq+0xd0>
34014488:	4a6e      	ldr	r2, [pc, #440]	@ (34014644 <RCCEx_GetI3CCLKFreq+0x250>)
3401448a:	4293      	cmp	r3, r2
3401448c:	f200 80bc 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
34014490:	4a6d      	ldr	r2, [pc, #436]	@ (34014648 <RCCEx_GetI3CCLKFreq+0x254>)
34014492:	4293      	cmp	r3, r2
34014494:	d016      	beq.n	340144c4 <RCCEx_GetI3CCLKFreq+0xd0>
34014496:	4a6c      	ldr	r2, [pc, #432]	@ (34014648 <RCCEx_GetI3CCLKFreq+0x254>)
34014498:	4293      	cmp	r3, r2
3401449a:	f200 80b5 	bhi.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
3401449e:	4a6b      	ldr	r2, [pc, #428]	@ (3401464c <RCCEx_GetI3CCLKFreq+0x258>)
340144a0:	4293      	cmp	r3, r2
340144a2:	d003      	beq.n	340144ac <RCCEx_GetI3CCLKFreq+0xb8>
340144a4:	4a6a      	ldr	r2, [pc, #424]	@ (34014650 <RCCEx_GetI3CCLKFreq+0x25c>)
340144a6:	4293      	cmp	r3, r2
340144a8:	f040 80ae 	bne.w	34014608 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340144ac:	f7f5 fd4e 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
340144b0:	4603      	mov	r3, r0
340144b2:	4618      	mov	r0, r3
340144b4:	f7fe fe42 	bl	3401313c <RCCEx_GetHCLKFreq>
340144b8:	4603      	mov	r3, r0
340144ba:	4618      	mov	r0, r3
340144bc:	f7fe fe4f 	bl	3401315e <RCCEx_GetPCLK1Freq>
340144c0:	60f8      	str	r0, [r7, #12]
      break;
340144c2:	e0aa      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340144c4:	2007      	movs	r0, #7
340144c6:	f7ff f925 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
340144ca:	60f8      	str	r0, [r7, #12]
      break;
340144cc:	e0a5      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
340144ce:	f7f7 f99f 	bl	3400b810 <LL_RCC_IC10_IsEnabled>
340144d2:	4603      	mov	r3, r0
340144d4:	2b00      	cmp	r3, #0
340144d6:	f000 8099 	beq.w	3401460c <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
340144da:	f7f7 f9bb 	bl	3400b854 <LL_RCC_IC10_GetDivider>
340144de:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
340144e0:	f7f7 f9aa 	bl	3400b838 <LL_RCC_IC10_GetSource>
340144e4:	4603      	mov	r3, r0
340144e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144ea:	d029      	beq.n	34014540 <RCCEx_GetI3CCLKFreq+0x14c>
340144ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144f0:	d82f      	bhi.n	34014552 <RCCEx_GetI3CCLKFreq+0x15e>
340144f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144f6:	d01a      	beq.n	3401452e <RCCEx_GetI3CCLKFreq+0x13a>
340144f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144fc:	d829      	bhi.n	34014552 <RCCEx_GetI3CCLKFreq+0x15e>
340144fe:	2b00      	cmp	r3, #0
34014500:	d003      	beq.n	3401450a <RCCEx_GetI3CCLKFreq+0x116>
34014502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014506:	d009      	beq.n	3401451c <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34014508:	e023      	b.n	34014552 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401450a:	f7fe fcff 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401450e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34014510:	68fa      	ldr	r2, [r7, #12]
34014512:	68bb      	ldr	r3, [r7, #8]
34014514:	fbb2 f3f3 	udiv	r3, r2, r3
34014518:	60fb      	str	r3, [r7, #12]
            break;
3401451a:	e01b      	b.n	34014554 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401451c:	f7fe fd3c 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014520:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34014522:	68fa      	ldr	r2, [r7, #12]
34014524:	68bb      	ldr	r3, [r7, #8]
34014526:	fbb2 f3f3 	udiv	r3, r2, r3
3401452a:	60fb      	str	r3, [r7, #12]
            break;
3401452c:	e012      	b.n	34014554 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401452e:	f7fe fd79 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014532:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34014534:	68fa      	ldr	r2, [r7, #12]
34014536:	68bb      	ldr	r3, [r7, #8]
34014538:	fbb2 f3f3 	udiv	r3, r2, r3
3401453c:	60fb      	str	r3, [r7, #12]
            break;
3401453e:	e009      	b.n	34014554 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014540:	f7fe fdb6 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014544:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34014546:	68fa      	ldr	r2, [r7, #12]
34014548:	68bb      	ldr	r3, [r7, #8]
3401454a:	fbb2 f3f3 	udiv	r3, r2, r3
3401454e:	60fb      	str	r3, [r7, #12]
            break;
34014550:	e000      	b.n	34014554 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34014552:	bf00      	nop
        }
      }
      break;
34014554:	e05a      	b.n	3401460c <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34014556:	f7f7 fa5b 	bl	3400ba10 <LL_RCC_IC15_IsEnabled>
3401455a:	4603      	mov	r3, r0
3401455c:	2b00      	cmp	r3, #0
3401455e:	d057      	beq.n	34014610 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34014560:	f7f7 fa78 	bl	3400ba54 <LL_RCC_IC15_GetDivider>
34014564:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34014566:	f7f7 fa67 	bl	3400ba38 <LL_RCC_IC15_GetSource>
3401456a:	4603      	mov	r3, r0
3401456c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014570:	d029      	beq.n	340145c6 <RCCEx_GetI3CCLKFreq+0x1d2>
34014572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014576:	d82f      	bhi.n	340145d8 <RCCEx_GetI3CCLKFreq+0x1e4>
34014578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401457c:	d01a      	beq.n	340145b4 <RCCEx_GetI3CCLKFreq+0x1c0>
3401457e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014582:	d829      	bhi.n	340145d8 <RCCEx_GetI3CCLKFreq+0x1e4>
34014584:	2b00      	cmp	r3, #0
34014586:	d003      	beq.n	34014590 <RCCEx_GetI3CCLKFreq+0x19c>
34014588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401458c:	d009      	beq.n	340145a2 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401458e:	e023      	b.n	340145d8 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014590:	f7fe fcbc 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014594:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34014596:	68fa      	ldr	r2, [r7, #12]
34014598:	68bb      	ldr	r3, [r7, #8]
3401459a:	fbb2 f3f3 	udiv	r3, r2, r3
3401459e:	60fb      	str	r3, [r7, #12]
            break;
340145a0:	e01b      	b.n	340145da <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340145a2:	f7fe fcf9 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340145a6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340145a8:	68fa      	ldr	r2, [r7, #12]
340145aa:	68bb      	ldr	r3, [r7, #8]
340145ac:	fbb2 f3f3 	udiv	r3, r2, r3
340145b0:	60fb      	str	r3, [r7, #12]
            break;
340145b2:	e012      	b.n	340145da <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340145b4:	f7fe fd36 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340145b8:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340145ba:	68fa      	ldr	r2, [r7, #12]
340145bc:	68bb      	ldr	r3, [r7, #8]
340145be:	fbb2 f3f3 	udiv	r3, r2, r3
340145c2:	60fb      	str	r3, [r7, #12]
            break;
340145c4:	e009      	b.n	340145da <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340145c6:	f7fe fd73 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340145ca:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340145cc:	68fa      	ldr	r2, [r7, #12]
340145ce:	68bb      	ldr	r3, [r7, #8]
340145d0:	fbb2 f3f3 	udiv	r3, r2, r3
340145d4:	60fb      	str	r3, [r7, #12]
            break;
340145d6:	e000      	b.n	340145da <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
340145d8:	bf00      	nop
        }
      }
      break;
340145da:	e019      	b.n	34014610 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340145dc:	f7f6 f8b4 	bl	3400a748 <LL_RCC_HSI_IsReady>
340145e0:	4603      	mov	r3, r0
340145e2:	2b00      	cmp	r3, #0
340145e4:	d016      	beq.n	34014614 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340145e6:	f7f6 f8c1 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340145ea:	4603      	mov	r3, r0
340145ec:	09db      	lsrs	r3, r3, #7
340145ee:	4a19      	ldr	r2, [pc, #100]	@ (34014654 <RCCEx_GetI3CCLKFreq+0x260>)
340145f0:	fa22 f303 	lsr.w	r3, r2, r3
340145f4:	60fb      	str	r3, [r7, #12]
      }
      break;
340145f6:	e00d      	b.n	34014614 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340145f8:	f7f6 f8c6 	bl	3400a788 <LL_RCC_MSI_IsReady>
340145fc:	4603      	mov	r3, r0
340145fe:	2b00      	cmp	r3, #0
34014600:	d00a      	beq.n	34014618 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34014602:	4b15      	ldr	r3, [pc, #84]	@ (34014658 <RCCEx_GetI3CCLKFreq+0x264>)
34014604:	60fb      	str	r3, [r7, #12]
      }
      break;
34014606:	e007      	b.n	34014618 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34014608:	bf00      	nop
3401460a:	e006      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>
      break;
3401460c:	bf00      	nop
3401460e:	e004      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>
      break;
34014610:	bf00      	nop
34014612:	e002      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>
      break;
34014614:	bf00      	nop
34014616:	e000      	b.n	3401461a <RCCEx_GetI3CCLKFreq+0x226>
      break;
34014618:	bf00      	nop
  }

  return i3c_frequency;
3401461a:	68fb      	ldr	r3, [r7, #12]
}
3401461c:	4618      	mov	r0, r3
3401461e:	3710      	adds	r7, #16
34014620:	46bd      	mov	sp, r7
34014622:	bd80      	pop	{r7, pc}
34014624:	0705140c 	.word	0x0705140c
34014628:	0705100c 	.word	0x0705100c
3401462c:	0704140c 	.word	0x0704140c
34014630:	0704100c 	.word	0x0704100c
34014634:	0703140c 	.word	0x0703140c
34014638:	0703100c 	.word	0x0703100c
3401463c:	0702140c 	.word	0x0702140c
34014640:	0702100c 	.word	0x0702100c
34014644:	0701140c 	.word	0x0701140c
34014648:	0701100c 	.word	0x0701100c
3401464c:	0700100c 	.word	0x0700100c
34014650:	0700140c 	.word	0x0700140c
34014654:	03d09000 	.word	0x03d09000
34014658:	003d0900 	.word	0x003d0900

3401465c <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
3401465c:	b590      	push	{r4, r7, lr}
3401465e:	b085      	sub	sp, #20
34014660:	af00      	add	r7, sp, #0
34014662:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34014664:	2300      	movs	r3, #0
34014666:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34014668:	6878      	ldr	r0, [r7, #4]
3401466a:	f7f6 fbcb 	bl	3400ae04 <LL_RCC_GetLPTIMClockSource>
3401466e:	4603      	mov	r3, r0
34014670:	4aa1      	ldr	r2, [pc, #644]	@ (340148f8 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34014672:	4293      	cmp	r3, r2
34014674:	f000 8185 	beq.w	34014982 <RCCEx_GetLPTIMCLKFreq+0x326>
34014678:	4a9f      	ldr	r2, [pc, #636]	@ (340148f8 <RCCEx_GetLPTIMCLKFreq+0x29c>)
3401467a:	4293      	cmp	r3, r2
3401467c:	f200 818b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014680:	4a9e      	ldr	r2, [pc, #632]	@ (340148fc <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34014682:	4293      	cmp	r3, r2
34014684:	f000 817d 	beq.w	34014982 <RCCEx_GetLPTIMCLKFreq+0x326>
34014688:	4a9c      	ldr	r2, [pc, #624]	@ (340148fc <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3401468a:	4293      	cmp	r3, r2
3401468c:	f200 8183 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014690:	4a9b      	ldr	r2, [pc, #620]	@ (34014900 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34014692:	4293      	cmp	r3, r2
34014694:	f000 8175 	beq.w	34014982 <RCCEx_GetLPTIMCLKFreq+0x326>
34014698:	4a99      	ldr	r2, [pc, #612]	@ (34014900 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3401469a:	4293      	cmp	r3, r2
3401469c:	f200 817b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146a0:	4a98      	ldr	r2, [pc, #608]	@ (34014904 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
340146a2:	4293      	cmp	r3, r2
340146a4:	f000 816d 	beq.w	34014982 <RCCEx_GetLPTIMCLKFreq+0x326>
340146a8:	4a96      	ldr	r2, [pc, #600]	@ (34014904 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
340146aa:	4293      	cmp	r3, r2
340146ac:	f200 8173 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146b0:	4a95      	ldr	r2, [pc, #596]	@ (34014908 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
340146b2:	4293      	cmp	r3, r2
340146b4:	f000 8165 	beq.w	34014982 <RCCEx_GetLPTIMCLKFreq+0x326>
340146b8:	4a93      	ldr	r2, [pc, #588]	@ (34014908 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
340146ba:	4293      	cmp	r3, r2
340146bc:	f200 816b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146c0:	4a92      	ldr	r2, [pc, #584]	@ (3401490c <RCCEx_GetLPTIMCLKFreq+0x2b0>)
340146c2:	4293      	cmp	r3, r2
340146c4:	f000 8154 	beq.w	34014970 <RCCEx_GetLPTIMCLKFreq+0x314>
340146c8:	4a90      	ldr	r2, [pc, #576]	@ (3401490c <RCCEx_GetLPTIMCLKFreq+0x2b0>)
340146ca:	4293      	cmp	r3, r2
340146cc:	f200 8163 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146d0:	4a8f      	ldr	r2, [pc, #572]	@ (34014910 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
340146d2:	4293      	cmp	r3, r2
340146d4:	f000 814c 	beq.w	34014970 <RCCEx_GetLPTIMCLKFreq+0x314>
340146d8:	4a8d      	ldr	r2, [pc, #564]	@ (34014910 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
340146da:	4293      	cmp	r3, r2
340146dc:	f200 815b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146e0:	4a8c      	ldr	r2, [pc, #560]	@ (34014914 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
340146e2:	4293      	cmp	r3, r2
340146e4:	f000 8144 	beq.w	34014970 <RCCEx_GetLPTIMCLKFreq+0x314>
340146e8:	4a8a      	ldr	r2, [pc, #552]	@ (34014914 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
340146ea:	4293      	cmp	r3, r2
340146ec:	f200 8153 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340146f0:	4a89      	ldr	r2, [pc, #548]	@ (34014918 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340146f2:	4293      	cmp	r3, r2
340146f4:	f000 813c 	beq.w	34014970 <RCCEx_GetLPTIMCLKFreq+0x314>
340146f8:	4a87      	ldr	r2, [pc, #540]	@ (34014918 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340146fa:	4293      	cmp	r3, r2
340146fc:	f200 814b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014700:	4a86      	ldr	r2, [pc, #536]	@ (3401491c <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34014702:	4293      	cmp	r3, r2
34014704:	f000 8134 	beq.w	34014970 <RCCEx_GetLPTIMCLKFreq+0x314>
34014708:	4a84      	ldr	r2, [pc, #528]	@ (3401491c <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3401470a:	4293      	cmp	r3, r2
3401470c:	f200 8143 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014710:	4a83      	ldr	r2, [pc, #524]	@ (34014920 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34014712:	4293      	cmp	r3, r2
34014714:	f000 80e7 	beq.w	340148e6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34014718:	4a81      	ldr	r2, [pc, #516]	@ (34014920 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3401471a:	4293      	cmp	r3, r2
3401471c:	f200 813b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014720:	4a80      	ldr	r2, [pc, #512]	@ (34014924 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34014722:	4293      	cmp	r3, r2
34014724:	f000 80df 	beq.w	340148e6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34014728:	4a7e      	ldr	r2, [pc, #504]	@ (34014924 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3401472a:	4293      	cmp	r3, r2
3401472c:	f200 8133 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014730:	4a7d      	ldr	r2, [pc, #500]	@ (34014928 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34014732:	4293      	cmp	r3, r2
34014734:	f000 80d7 	beq.w	340148e6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34014738:	4a7b      	ldr	r2, [pc, #492]	@ (34014928 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3401473a:	4293      	cmp	r3, r2
3401473c:	f200 812b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014740:	4a7a      	ldr	r2, [pc, #488]	@ (3401492c <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34014742:	4293      	cmp	r3, r2
34014744:	f000 80cf 	beq.w	340148e6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34014748:	4a78      	ldr	r2, [pc, #480]	@ (3401492c <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3401474a:	4293      	cmp	r3, r2
3401474c:	f200 8123 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014750:	4a77      	ldr	r2, [pc, #476]	@ (34014930 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34014752:	4293      	cmp	r3, r2
34014754:	f000 80c7 	beq.w	340148e6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34014758:	4a75      	ldr	r2, [pc, #468]	@ (34014930 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3401475a:	4293      	cmp	r3, r2
3401475c:	f200 811b 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014760:	4a74      	ldr	r2, [pc, #464]	@ (34014934 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34014762:	4293      	cmp	r3, r2
34014764:	d07b      	beq.n	3401485e <RCCEx_GetLPTIMCLKFreq+0x202>
34014766:	4a73      	ldr	r2, [pc, #460]	@ (34014934 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34014768:	4293      	cmp	r3, r2
3401476a:	f200 8114 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401476e:	4a72      	ldr	r2, [pc, #456]	@ (34014938 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34014770:	4293      	cmp	r3, r2
34014772:	d074      	beq.n	3401485e <RCCEx_GetLPTIMCLKFreq+0x202>
34014774:	4a70      	ldr	r2, [pc, #448]	@ (34014938 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34014776:	4293      	cmp	r3, r2
34014778:	f200 810d 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401477c:	4a6f      	ldr	r2, [pc, #444]	@ (3401493c <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3401477e:	4293      	cmp	r3, r2
34014780:	d06d      	beq.n	3401485e <RCCEx_GetLPTIMCLKFreq+0x202>
34014782:	4a6e      	ldr	r2, [pc, #440]	@ (3401493c <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34014784:	4293      	cmp	r3, r2
34014786:	f200 8106 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
3401478a:	4a6d      	ldr	r2, [pc, #436]	@ (34014940 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3401478c:	4293      	cmp	r3, r2
3401478e:	d066      	beq.n	3401485e <RCCEx_GetLPTIMCLKFreq+0x202>
34014790:	4a6b      	ldr	r2, [pc, #428]	@ (34014940 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34014792:	4293      	cmp	r3, r2
34014794:	f200 80ff 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014798:	4a6a      	ldr	r2, [pc, #424]	@ (34014944 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3401479a:	4293      	cmp	r3, r2
3401479c:	d05f      	beq.n	3401485e <RCCEx_GetLPTIMCLKFreq+0x202>
3401479e:	4a69      	ldr	r2, [pc, #420]	@ (34014944 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
340147a0:	4293      	cmp	r3, r2
340147a2:	f200 80f8 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147a6:	4a68      	ldr	r2, [pc, #416]	@ (34014948 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
340147a8:	4293      	cmp	r3, r2
340147aa:	d053      	beq.n	34014854 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340147ac:	4a66      	ldr	r2, [pc, #408]	@ (34014948 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
340147ae:	4293      	cmp	r3, r2
340147b0:	f200 80f1 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147b4:	4a65      	ldr	r2, [pc, #404]	@ (3401494c <RCCEx_GetLPTIMCLKFreq+0x2f0>)
340147b6:	4293      	cmp	r3, r2
340147b8:	d04c      	beq.n	34014854 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340147ba:	4a64      	ldr	r2, [pc, #400]	@ (3401494c <RCCEx_GetLPTIMCLKFreq+0x2f0>)
340147bc:	4293      	cmp	r3, r2
340147be:	f200 80ea 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147c2:	4a63      	ldr	r2, [pc, #396]	@ (34014950 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
340147c4:	4293      	cmp	r3, r2
340147c6:	d045      	beq.n	34014854 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340147c8:	4a61      	ldr	r2, [pc, #388]	@ (34014950 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
340147ca:	4293      	cmp	r3, r2
340147cc:	f200 80e3 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147d0:	4a60      	ldr	r2, [pc, #384]	@ (34014954 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
340147d2:	4293      	cmp	r3, r2
340147d4:	d03e      	beq.n	34014854 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340147d6:	4a5f      	ldr	r2, [pc, #380]	@ (34014954 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
340147d8:	4293      	cmp	r3, r2
340147da:	f200 80dc 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147de:	4a5e      	ldr	r2, [pc, #376]	@ (34014958 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
340147e0:	4293      	cmp	r3, r2
340147e2:	d037      	beq.n	34014854 <RCCEx_GetLPTIMCLKFreq+0x1f8>
340147e4:	4a5c      	ldr	r2, [pc, #368]	@ (34014958 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
340147e6:	4293      	cmp	r3, r2
340147e8:	f200 80d5 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147ec:	4a5b      	ldr	r2, [pc, #364]	@ (3401495c <RCCEx_GetLPTIMCLKFreq+0x300>)
340147ee:	4293      	cmp	r3, r2
340147f0:	d024      	beq.n	3401483c <RCCEx_GetLPTIMCLKFreq+0x1e0>
340147f2:	4a5a      	ldr	r2, [pc, #360]	@ (3401495c <RCCEx_GetLPTIMCLKFreq+0x300>)
340147f4:	4293      	cmp	r3, r2
340147f6:	f200 80ce 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
340147fa:	4a59      	ldr	r2, [pc, #356]	@ (34014960 <RCCEx_GetLPTIMCLKFreq+0x304>)
340147fc:	4293      	cmp	r3, r2
340147fe:	d01d      	beq.n	3401483c <RCCEx_GetLPTIMCLKFreq+0x1e0>
34014800:	4a57      	ldr	r2, [pc, #348]	@ (34014960 <RCCEx_GetLPTIMCLKFreq+0x304>)
34014802:	4293      	cmp	r3, r2
34014804:	f200 80c7 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014808:	4a56      	ldr	r2, [pc, #344]	@ (34014964 <RCCEx_GetLPTIMCLKFreq+0x308>)
3401480a:	4293      	cmp	r3, r2
3401480c:	d016      	beq.n	3401483c <RCCEx_GetLPTIMCLKFreq+0x1e0>
3401480e:	4a55      	ldr	r2, [pc, #340]	@ (34014964 <RCCEx_GetLPTIMCLKFreq+0x308>)
34014810:	4293      	cmp	r3, r2
34014812:	f200 80c0 	bhi.w	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
34014816:	4a54      	ldr	r2, [pc, #336]	@ (34014968 <RCCEx_GetLPTIMCLKFreq+0x30c>)
34014818:	4293      	cmp	r3, r2
3401481a:	d003      	beq.n	34014824 <RCCEx_GetLPTIMCLKFreq+0x1c8>
3401481c:	4a53      	ldr	r2, [pc, #332]	@ (3401496c <RCCEx_GetLPTIMCLKFreq+0x310>)
3401481e:	4293      	cmp	r3, r2
34014820:	d00c      	beq.n	3401483c <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34014822:	e0b8      	b.n	34014996 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34014824:	f7f5 fb92 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014828:	4603      	mov	r3, r0
3401482a:	4618      	mov	r0, r3
3401482c:	f7fe fc86 	bl	3401313c <RCCEx_GetHCLKFreq>
34014830:	4603      	mov	r3, r0
34014832:	4618      	mov	r0, r3
34014834:	f7fe fc93 	bl	3401315e <RCCEx_GetPCLK1Freq>
34014838:	60f8      	str	r0, [r7, #12]
      break;
3401483a:	e0b3      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401483c:	f7f5 fb86 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014840:	4603      	mov	r3, r0
34014842:	4618      	mov	r0, r3
34014844:	f7fe fc7a 	bl	3401313c <RCCEx_GetHCLKFreq>
34014848:	4603      	mov	r3, r0
3401484a:	4618      	mov	r0, r3
3401484c:	f7fe fca8 	bl	340131a0 <RCCEx_GetPCLK4Freq>
34014850:	60f8      	str	r0, [r7, #12]
      break;
34014852:	e0a7      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014854:	2007      	movs	r0, #7
34014856:	f7fe ff5d 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
3401485a:	60f8      	str	r0, [r7, #12]
      break;
3401485c:	e0a2      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401485e:	f7f7 f8d7 	bl	3400ba10 <LL_RCC_IC15_IsEnabled>
34014862:	4603      	mov	r3, r0
34014864:	2b00      	cmp	r3, #0
34014866:	f000 8098 	beq.w	3401499a <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3401486a:	f7f7 f8f3 	bl	3400ba54 <LL_RCC_IC15_GetDivider>
3401486e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34014870:	f7f7 f8e2 	bl	3400ba38 <LL_RCC_IC15_GetSource>
34014874:	4603      	mov	r3, r0
34014876:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401487a:	d029      	beq.n	340148d0 <RCCEx_GetLPTIMCLKFreq+0x274>
3401487c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014880:	d82f      	bhi.n	340148e2 <RCCEx_GetLPTIMCLKFreq+0x286>
34014882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014886:	d01a      	beq.n	340148be <RCCEx_GetLPTIMCLKFreq+0x262>
34014888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401488c:	d829      	bhi.n	340148e2 <RCCEx_GetLPTIMCLKFreq+0x286>
3401488e:	2b00      	cmp	r3, #0
34014890:	d003      	beq.n	3401489a <RCCEx_GetLPTIMCLKFreq+0x23e>
34014892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014896:	d009      	beq.n	340148ac <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34014898:	e023      	b.n	340148e2 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401489a:	f7fe fb37 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401489e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
340148a0:	68fa      	ldr	r2, [r7, #12]
340148a2:	68bb      	ldr	r3, [r7, #8]
340148a4:	fbb2 f3f3 	udiv	r3, r2, r3
340148a8:	60fb      	str	r3, [r7, #12]
            break;
340148aa:	e01b      	b.n	340148e4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340148ac:	f7fe fb74 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340148b0:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
340148b2:	68fa      	ldr	r2, [r7, #12]
340148b4:	68bb      	ldr	r3, [r7, #8]
340148b6:	fbb2 f3f3 	udiv	r3, r2, r3
340148ba:	60fb      	str	r3, [r7, #12]
            break;
340148bc:	e012      	b.n	340148e4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340148be:	f7fe fbb1 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340148c2:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
340148c4:	68fa      	ldr	r2, [r7, #12]
340148c6:	68bb      	ldr	r3, [r7, #8]
340148c8:	fbb2 f3f3 	udiv	r3, r2, r3
340148cc:	60fb      	str	r3, [r7, #12]
            break;
340148ce:	e009      	b.n	340148e4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340148d0:	f7fe fbee 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340148d4:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
340148d6:	68fa      	ldr	r2, [r7, #12]
340148d8:	68bb      	ldr	r3, [r7, #8]
340148da:	fbb2 f3f3 	udiv	r3, r2, r3
340148de:	60fb      	str	r3, [r7, #12]
            break;
340148e0:	e000      	b.n	340148e4 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
340148e2:	bf00      	nop
      break;
340148e4:	e059      	b.n	3401499a <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
340148e6:	f7f5 ff6f 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
340148ea:	4603      	mov	r3, r0
340148ec:	2b00      	cmp	r3, #0
340148ee:	d056      	beq.n	3401499e <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
340148f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340148f4:	60fb      	str	r3, [r7, #12]
      break;
340148f6:	e052      	b.n	3401499e <RCCEx_GetLPTIMCLKFreq+0x342>
340148f8:	0705182c 	.word	0x0705182c
340148fc:	0705142c 	.word	0x0705142c
34014900:	0705102c 	.word	0x0705102c
34014904:	07050c2c 	.word	0x07050c2c
34014908:	0705082c 	.word	0x0705082c
3401490c:	0704182c 	.word	0x0704182c
34014910:	0704142c 	.word	0x0704142c
34014914:	0704102c 	.word	0x0704102c
34014918:	07040c2c 	.word	0x07040c2c
3401491c:	0704082c 	.word	0x0704082c
34014920:	0703182c 	.word	0x0703182c
34014924:	0703142c 	.word	0x0703142c
34014928:	0703102c 	.word	0x0703102c
3401492c:	07030c2c 	.word	0x07030c2c
34014930:	0703082c 	.word	0x0703082c
34014934:	0702182c 	.word	0x0702182c
34014938:	0702142c 	.word	0x0702142c
3401493c:	0702102c 	.word	0x0702102c
34014940:	07020c2c 	.word	0x07020c2c
34014944:	0702082c 	.word	0x0702082c
34014948:	0701182c 	.word	0x0701182c
3401494c:	0701142c 	.word	0x0701142c
34014950:	0701102c 	.word	0x0701102c
34014954:	07010c2c 	.word	0x07010c2c
34014958:	0701082c 	.word	0x0701082c
3401495c:	0700182c 	.word	0x0700182c
34014960:	0700142c 	.word	0x0700142c
34014964:	0700102c 	.word	0x0700102c
34014968:	0700082c 	.word	0x0700082c
3401496c:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34014970:	f7f5 ff3c 	bl	3400a7ec <LL_RCC_LSI_IsReady>
34014974:	4603      	mov	r3, r0
34014976:	2b00      	cmp	r3, #0
34014978:	d013      	beq.n	340149a2 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3401497a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3401497e:	60fb      	str	r3, [r7, #12]
      break;
34014980:	e00f      	b.n	340149a2 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34014982:	f7f5 fae3 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014986:	4604      	mov	r4, r0
34014988:	f7f6 fb46 	bl	3400b018 <LL_RCC_GetTIMPrescaler>
3401498c:	4603      	mov	r3, r0
3401498e:	fa24 f303 	lsr.w	r3, r4, r3
34014992:	60fb      	str	r3, [r7, #12]
      break;
34014994:	e006      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34014996:	bf00      	nop
34014998:	e004      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401499a:	bf00      	nop
3401499c:	e002      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401499e:	bf00      	nop
340149a0:	e000      	b.n	340149a4 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
340149a2:	bf00      	nop
  }

  return lptim_frequency;
340149a4:	68fb      	ldr	r3, [r7, #12]
}
340149a6:	4618      	mov	r0, r3
340149a8:	3714      	adds	r7, #20
340149aa:	46bd      	mov	sp, r7
340149ac:	bd90      	pop	{r4, r7, pc}
340149ae:	bf00      	nop

340149b0 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
340149b0:	b580      	push	{r7, lr}
340149b2:	b084      	sub	sp, #16
340149b4:	af00      	add	r7, sp, #0
340149b6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
340149b8:	2300      	movs	r3, #0
340149ba:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
340149bc:	6878      	ldr	r0, [r7, #4]
340149be:	f7f6 fa2d 	bl	3400ae1c <LL_RCC_GetLPUARTClockSource>
340149c2:	4603      	mov	r3, r0
340149c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
340149c8:	f000 80c0 	beq.w	34014b4c <RCCEx_GetLPUARTCLKFreq+0x19c>
340149cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
340149d0:	f200 80db 	bhi.w	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
340149d4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
340149d8:	f000 80c6 	beq.w	34014b68 <RCCEx_GetLPUARTCLKFreq+0x1b8>
340149dc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
340149e0:	f200 80d3 	bhi.w	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
340149e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340149e8:	f000 80c6 	beq.w	34014b78 <RCCEx_GetLPUARTCLKFreq+0x1c8>
340149ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340149f0:	f200 80cb 	bhi.w	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
340149f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340149f8:	d065      	beq.n	34014ac6 <RCCEx_GetLPUARTCLKFreq+0x116>
340149fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340149fe:	f200 80c4 	bhi.w	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
34014a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34014a06:	d01a      	beq.n	34014a3e <RCCEx_GetLPUARTCLKFreq+0x8e>
34014a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34014a0c:	f200 80bd 	bhi.w	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
34014a10:	2b00      	cmp	r3, #0
34014a12:	d003      	beq.n	34014a1c <RCCEx_GetLPUARTCLKFreq+0x6c>
34014a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34014a18:	d00c      	beq.n	34014a34 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
34014a1a:	e0b6      	b.n	34014b8a <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34014a1c:	f7f5 fa96 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014a20:	4603      	mov	r3, r0
34014a22:	4618      	mov	r0, r3
34014a24:	f7fe fb8a 	bl	3401313c <RCCEx_GetHCLKFreq>
34014a28:	4603      	mov	r3, r0
34014a2a:	4618      	mov	r0, r3
34014a2c:	f7fe fbb8 	bl	340131a0 <RCCEx_GetPCLK4Freq>
34014a30:	60f8      	str	r0, [r7, #12]
      break;
34014a32:	e0b5      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014a34:	2007      	movs	r0, #7
34014a36:	f7fe fe6d 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34014a3a:	60f8      	str	r0, [r7, #12]
      break;
34014a3c:	e0b0      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34014a3e:	f7f6 fea7 	bl	3400b790 <LL_RCC_IC9_IsEnabled>
34014a42:	4603      	mov	r3, r0
34014a44:	2b00      	cmp	r3, #0
34014a46:	f000 80a2 	beq.w	34014b8e <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
34014a4a:	f7f6 fec3 	bl	3400b7d4 <LL_RCC_IC9_GetDivider>
34014a4e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34014a50:	f7f6 feb2 	bl	3400b7b8 <LL_RCC_IC9_GetSource>
34014a54:	4603      	mov	r3, r0
34014a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014a5a:	d029      	beq.n	34014ab0 <RCCEx_GetLPUARTCLKFreq+0x100>
34014a5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014a60:	d82f      	bhi.n	34014ac2 <RCCEx_GetLPUARTCLKFreq+0x112>
34014a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014a66:	d01a      	beq.n	34014a9e <RCCEx_GetLPUARTCLKFreq+0xee>
34014a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014a6c:	d829      	bhi.n	34014ac2 <RCCEx_GetLPUARTCLKFreq+0x112>
34014a6e:	2b00      	cmp	r3, #0
34014a70:	d003      	beq.n	34014a7a <RCCEx_GetLPUARTCLKFreq+0xca>
34014a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014a76:	d009      	beq.n	34014a8c <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34014a78:	e023      	b.n	34014ac2 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014a7a:	f7fe fa47 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014a7e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014a80:	68fa      	ldr	r2, [r7, #12]
34014a82:	68bb      	ldr	r3, [r7, #8]
34014a84:	fbb2 f3f3 	udiv	r3, r2, r3
34014a88:	60fb      	str	r3, [r7, #12]
            break;
34014a8a:	e01b      	b.n	34014ac4 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014a8c:	f7fe fa84 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014a90:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014a92:	68fa      	ldr	r2, [r7, #12]
34014a94:	68bb      	ldr	r3, [r7, #8]
34014a96:	fbb2 f3f3 	udiv	r3, r2, r3
34014a9a:	60fb      	str	r3, [r7, #12]
            break;
34014a9c:	e012      	b.n	34014ac4 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014a9e:	f7fe fac1 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014aa2:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014aa4:	68fa      	ldr	r2, [r7, #12]
34014aa6:	68bb      	ldr	r3, [r7, #8]
34014aa8:	fbb2 f3f3 	udiv	r3, r2, r3
34014aac:	60fb      	str	r3, [r7, #12]
            break;
34014aae:	e009      	b.n	34014ac4 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014ab0:	f7fe fafe 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014ab4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014ab6:	68fa      	ldr	r2, [r7, #12]
34014ab8:	68bb      	ldr	r3, [r7, #8]
34014aba:	fbb2 f3f3 	udiv	r3, r2, r3
34014abe:	60fb      	str	r3, [r7, #12]
            break;
34014ac0:	e000      	b.n	34014ac4 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
34014ac2:	bf00      	nop
      break;
34014ac4:	e063      	b.n	34014b8e <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34014ac6:	f7f6 ff63 	bl	3400b990 <LL_RCC_IC14_IsEnabled>
34014aca:	4603      	mov	r3, r0
34014acc:	2b00      	cmp	r3, #0
34014ace:	d060      	beq.n	34014b92 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
34014ad0:	f7f6 ff80 	bl	3400b9d4 <LL_RCC_IC14_GetDivider>
34014ad4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34014ad6:	f7f6 ff6f 	bl	3400b9b8 <LL_RCC_IC14_GetSource>
34014ada:	4603      	mov	r3, r0
34014adc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014ae0:	d029      	beq.n	34014b36 <RCCEx_GetLPUARTCLKFreq+0x186>
34014ae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014ae6:	d82f      	bhi.n	34014b48 <RCCEx_GetLPUARTCLKFreq+0x198>
34014ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014aec:	d01a      	beq.n	34014b24 <RCCEx_GetLPUARTCLKFreq+0x174>
34014aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014af2:	d829      	bhi.n	34014b48 <RCCEx_GetLPUARTCLKFreq+0x198>
34014af4:	2b00      	cmp	r3, #0
34014af6:	d003      	beq.n	34014b00 <RCCEx_GetLPUARTCLKFreq+0x150>
34014af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014afc:	d009      	beq.n	34014b12 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
34014afe:	e023      	b.n	34014b48 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014b00:	f7fe fa04 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014b04:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014b06:	68fa      	ldr	r2, [r7, #12]
34014b08:	68bb      	ldr	r3, [r7, #8]
34014b0a:	fbb2 f3f3 	udiv	r3, r2, r3
34014b0e:	60fb      	str	r3, [r7, #12]
            break;
34014b10:	e01b      	b.n	34014b4a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014b12:	f7fe fa41 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014b16:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014b18:	68fa      	ldr	r2, [r7, #12]
34014b1a:	68bb      	ldr	r3, [r7, #8]
34014b1c:	fbb2 f3f3 	udiv	r3, r2, r3
34014b20:	60fb      	str	r3, [r7, #12]
            break;
34014b22:	e012      	b.n	34014b4a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014b24:	f7fe fa7e 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014b28:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014b2a:	68fa      	ldr	r2, [r7, #12]
34014b2c:	68bb      	ldr	r3, [r7, #8]
34014b2e:	fbb2 f3f3 	udiv	r3, r2, r3
34014b32:	60fb      	str	r3, [r7, #12]
            break;
34014b34:	e009      	b.n	34014b4a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014b36:	f7fe fabb 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014b3a:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34014b3c:	68fa      	ldr	r2, [r7, #12]
34014b3e:	68bb      	ldr	r3, [r7, #8]
34014b40:	fbb2 f3f3 	udiv	r3, r2, r3
34014b44:	60fb      	str	r3, [r7, #12]
            break;
34014b46:	e000      	b.n	34014b4a <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
34014b48:	bf00      	nop
      break;
34014b4a:	e022      	b.n	34014b92 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34014b4c:	f7f5 fdfc 	bl	3400a748 <LL_RCC_HSI_IsReady>
34014b50:	4603      	mov	r3, r0
34014b52:	2b00      	cmp	r3, #0
34014b54:	d01f      	beq.n	34014b96 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014b56:	f7f5 fe09 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34014b5a:	4603      	mov	r3, r0
34014b5c:	09db      	lsrs	r3, r3, #7
34014b5e:	4a13      	ldr	r2, [pc, #76]	@ (34014bac <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34014b60:	fa22 f303 	lsr.w	r3, r2, r3
34014b64:	60fb      	str	r3, [r7, #12]
      break;
34014b66:	e016      	b.n	34014b96 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34014b68:	f7f5 fe0e 	bl	3400a788 <LL_RCC_MSI_IsReady>
34014b6c:	4603      	mov	r3, r0
34014b6e:	2b00      	cmp	r3, #0
34014b70:	d013      	beq.n	34014b9a <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34014b72:	4b0f      	ldr	r3, [pc, #60]	@ (34014bb0 <RCCEx_GetLPUARTCLKFreq+0x200>)
34014b74:	60fb      	str	r3, [r7, #12]
      break;
34014b76:	e010      	b.n	34014b9a <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34014b78:	f7f5 fe26 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
34014b7c:	4603      	mov	r3, r0
34014b7e:	2b00      	cmp	r3, #0
34014b80:	d00d      	beq.n	34014b9e <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34014b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34014b86:	60fb      	str	r3, [r7, #12]
      break;
34014b88:	e009      	b.n	34014b9e <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
34014b8a:	bf00      	nop
34014b8c:	e008      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34014b8e:	bf00      	nop
34014b90:	e006      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34014b92:	bf00      	nop
34014b94:	e004      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34014b96:	bf00      	nop
34014b98:	e002      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34014b9a:	bf00      	nop
34014b9c:	e000      	b.n	34014ba0 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34014b9e:	bf00      	nop
  }

  return lpuart_frequency;
34014ba0:	68fb      	ldr	r3, [r7, #12]
}
34014ba2:	4618      	mov	r0, r3
34014ba4:	3710      	adds	r7, #16
34014ba6:	46bd      	mov	sp, r7
34014ba8:	bd80      	pop	{r7, pc}
34014baa:	bf00      	nop
34014bac:	03d09000 	.word	0x03d09000
34014bb0:	003d0900 	.word	0x003d0900

34014bb4 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34014bb4:	b580      	push	{r7, lr}
34014bb6:	b084      	sub	sp, #16
34014bb8:	af00      	add	r7, sp, #0
34014bba:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34014bbc:	2300      	movs	r3, #0
34014bbe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34014bc0:	6878      	ldr	r0, [r7, #4]
34014bc2:	f7f6 f93d 	bl	3400ae40 <LL_RCC_GetLTDCClockSource>
34014bc6:	4603      	mov	r3, r0
34014bc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34014bcc:	d062      	beq.n	34014c94 <RCCEx_GetLTDCCLKFreq+0xe0>
34014bce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34014bd2:	d86d      	bhi.n	34014cb0 <RCCEx_GetLTDCCLKFreq+0xfc>
34014bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34014bd8:	d019      	beq.n	34014c0e <RCCEx_GetLTDCCLKFreq+0x5a>
34014bda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34014bde:	d867      	bhi.n	34014cb0 <RCCEx_GetLTDCCLKFreq+0xfc>
34014be0:	2b00      	cmp	r3, #0
34014be2:	d003      	beq.n	34014bec <RCCEx_GetLTDCCLKFreq+0x38>
34014be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34014be8:	d00c      	beq.n	34014c04 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34014bea:	e061      	b.n	34014cb0 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34014bec:	f7f5 f9ae 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014bf0:	4603      	mov	r3, r0
34014bf2:	4618      	mov	r0, r3
34014bf4:	f7fe faa2 	bl	3401313c <RCCEx_GetHCLKFreq>
34014bf8:	4603      	mov	r3, r0
34014bfa:	4618      	mov	r0, r3
34014bfc:	f7fe fae1 	bl	340131c2 <RCCEx_GetPCLK5Freq>
34014c00:	60f8      	str	r0, [r7, #12]
      break;
34014c02:	e05a      	b.n	34014cba <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014c04:	2007      	movs	r0, #7
34014c06:	f7fe fd85 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34014c0a:	60f8      	str	r0, [r7, #12]
      break;
34014c0c:	e055      	b.n	34014cba <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
34014c0e:	f7f6 ff3f 	bl	3400ba90 <LL_RCC_IC16_IsEnabled>
34014c12:	4603      	mov	r3, r0
34014c14:	2b00      	cmp	r3, #0
34014c16:	d04d      	beq.n	34014cb4 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
34014c18:	f7f6 ff5c 	bl	3400bad4 <LL_RCC_IC16_GetDivider>
34014c1c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
34014c1e:	f7f6 ff4b 	bl	3400bab8 <LL_RCC_IC16_GetSource>
34014c22:	4603      	mov	r3, r0
34014c24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014c28:	d029      	beq.n	34014c7e <RCCEx_GetLTDCCLKFreq+0xca>
34014c2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014c2e:	d82f      	bhi.n	34014c90 <RCCEx_GetLTDCCLKFreq+0xdc>
34014c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014c34:	d01a      	beq.n	34014c6c <RCCEx_GetLTDCCLKFreq+0xb8>
34014c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014c3a:	d829      	bhi.n	34014c90 <RCCEx_GetLTDCCLKFreq+0xdc>
34014c3c:	2b00      	cmp	r3, #0
34014c3e:	d003      	beq.n	34014c48 <RCCEx_GetLTDCCLKFreq+0x94>
34014c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014c44:	d009      	beq.n	34014c5a <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
34014c46:	e023      	b.n	34014c90 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014c48:	f7fe f960 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014c4c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34014c4e:	68fa      	ldr	r2, [r7, #12]
34014c50:	68bb      	ldr	r3, [r7, #8]
34014c52:	fbb2 f3f3 	udiv	r3, r2, r3
34014c56:	60fb      	str	r3, [r7, #12]
            break;
34014c58:	e01b      	b.n	34014c92 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014c5a:	f7fe f99d 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014c5e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34014c60:	68fa      	ldr	r2, [r7, #12]
34014c62:	68bb      	ldr	r3, [r7, #8]
34014c64:	fbb2 f3f3 	udiv	r3, r2, r3
34014c68:	60fb      	str	r3, [r7, #12]
            break;
34014c6a:	e012      	b.n	34014c92 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014c6c:	f7fe f9da 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014c70:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34014c72:	68fa      	ldr	r2, [r7, #12]
34014c74:	68bb      	ldr	r3, [r7, #8]
34014c76:	fbb2 f3f3 	udiv	r3, r2, r3
34014c7a:	60fb      	str	r3, [r7, #12]
            break;
34014c7c:	e009      	b.n	34014c92 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014c7e:	f7fe fa17 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014c82:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34014c84:	68fa      	ldr	r2, [r7, #12]
34014c86:	68bb      	ldr	r3, [r7, #8]
34014c88:	fbb2 f3f3 	udiv	r3, r2, r3
34014c8c:	60fb      	str	r3, [r7, #12]
            break;
34014c8e:	e000      	b.n	34014c92 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34014c90:	bf00      	nop
      break;
34014c92:	e00f      	b.n	34014cb4 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34014c94:	f7f5 fd58 	bl	3400a748 <LL_RCC_HSI_IsReady>
34014c98:	4603      	mov	r3, r0
34014c9a:	2b00      	cmp	r3, #0
34014c9c:	d00c      	beq.n	34014cb8 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014c9e:	f7f5 fd65 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34014ca2:	4603      	mov	r3, r0
34014ca4:	09db      	lsrs	r3, r3, #7
34014ca6:	4a07      	ldr	r2, [pc, #28]	@ (34014cc4 <RCCEx_GetLTDCCLKFreq+0x110>)
34014ca8:	fa22 f303 	lsr.w	r3, r2, r3
34014cac:	60fb      	str	r3, [r7, #12]
      break;
34014cae:	e003      	b.n	34014cb8 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34014cb0:	bf00      	nop
34014cb2:	e002      	b.n	34014cba <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34014cb4:	bf00      	nop
34014cb6:	e000      	b.n	34014cba <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34014cb8:	bf00      	nop
  }

  return ltdc_frequency;
34014cba:	68fb      	ldr	r3, [r7, #12]
}
34014cbc:	4618      	mov	r0, r3
34014cbe:	3710      	adds	r7, #16
34014cc0:	46bd      	mov	sp, r7
34014cc2:	bd80      	pop	{r7, pc}
34014cc4:	03d09000 	.word	0x03d09000

34014cc8 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34014cc8:	b590      	push	{r4, r7, lr}
34014cca:	b085      	sub	sp, #20
34014ccc:	af00      	add	r7, sp, #0
34014cce:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34014cd0:	2300      	movs	r3, #0
34014cd2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34014cd4:	6878      	ldr	r0, [r7, #4]
34014cd6:	f7f6 f8c5 	bl	3400ae64 <LL_RCC_GetMDFClockSource>
34014cda:	4603      	mov	r3, r0
34014cdc:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34014ce0:	f000 80dd 	beq.w	34014e9e <RCCEx_GetMDFCLKFreq+0x1d6>
34014ce4:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34014ce8:	f200 80e3 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014cec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014cf0:	f000 80d2 	beq.w	34014e98 <RCCEx_GetMDFCLKFreq+0x1d0>
34014cf4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014cf8:	f200 80db 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34014d00:	f000 80b4 	beq.w	34014e6c <RCCEx_GetMDFCLKFreq+0x1a4>
34014d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34014d08:	f200 80d3 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014d0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34014d10:	f000 80ba 	beq.w	34014e88 <RCCEx_GetMDFCLKFreq+0x1c0>
34014d14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34014d18:	f200 80cb 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014d1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34014d20:	d061      	beq.n	34014de6 <RCCEx_GetMDFCLKFreq+0x11e>
34014d22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34014d26:	f200 80c4 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014d2e:	d016      	beq.n	34014d5e <RCCEx_GetMDFCLKFreq+0x96>
34014d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014d34:	f200 80bd 	bhi.w	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
34014d38:	2b00      	cmp	r3, #0
34014d3a:	d003      	beq.n	34014d44 <RCCEx_GetMDFCLKFreq+0x7c>
34014d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34014d40:	d008      	beq.n	34014d54 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34014d42:	e0b6      	b.n	34014eb2 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34014d44:	f7f5 f902 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014d48:	4603      	mov	r3, r0
34014d4a:	4618      	mov	r0, r3
34014d4c:	f7fe f9f6 	bl	3401313c <RCCEx_GetHCLKFreq>
34014d50:	60f8      	str	r0, [r7, #12]
      break;
34014d52:	e0b7      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014d54:	2007      	movs	r0, #7
34014d56:	f7fe fcdd 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34014d5a:	60f8      	str	r0, [r7, #12]
      break;
34014d5c:	e0b2      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34014d5e:	f7f6 fc97 	bl	3400b690 <LL_RCC_IC7_IsEnabled>
34014d62:	4603      	mov	r3, r0
34014d64:	2b00      	cmp	r3, #0
34014d66:	f000 80a6 	beq.w	34014eb6 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34014d6a:	f7f6 fcb3 	bl	3400b6d4 <LL_RCC_IC7_GetDivider>
34014d6e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34014d70:	f7f6 fca2 	bl	3400b6b8 <LL_RCC_IC7_GetSource>
34014d74:	4603      	mov	r3, r0
34014d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014d7a:	d029      	beq.n	34014dd0 <RCCEx_GetMDFCLKFreq+0x108>
34014d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014d80:	d82f      	bhi.n	34014de2 <RCCEx_GetMDFCLKFreq+0x11a>
34014d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014d86:	d01a      	beq.n	34014dbe <RCCEx_GetMDFCLKFreq+0xf6>
34014d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014d8c:	d829      	bhi.n	34014de2 <RCCEx_GetMDFCLKFreq+0x11a>
34014d8e:	2b00      	cmp	r3, #0
34014d90:	d003      	beq.n	34014d9a <RCCEx_GetMDFCLKFreq+0xd2>
34014d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014d96:	d009      	beq.n	34014dac <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34014d98:	e023      	b.n	34014de2 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014d9a:	f7fe f8b7 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014d9e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014da0:	68fa      	ldr	r2, [r7, #12]
34014da2:	68bb      	ldr	r3, [r7, #8]
34014da4:	fbb2 f3f3 	udiv	r3, r2, r3
34014da8:	60fb      	str	r3, [r7, #12]
            break;
34014daa:	e01b      	b.n	34014de4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014dac:	f7fe f8f4 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014db0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014db2:	68fa      	ldr	r2, [r7, #12]
34014db4:	68bb      	ldr	r3, [r7, #8]
34014db6:	fbb2 f3f3 	udiv	r3, r2, r3
34014dba:	60fb      	str	r3, [r7, #12]
            break;
34014dbc:	e012      	b.n	34014de4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014dbe:	f7fe f931 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014dc2:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014dc4:	68fa      	ldr	r2, [r7, #12]
34014dc6:	68bb      	ldr	r3, [r7, #8]
34014dc8:	fbb2 f3f3 	udiv	r3, r2, r3
34014dcc:	60fb      	str	r3, [r7, #12]
            break;
34014dce:	e009      	b.n	34014de4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014dd0:	f7fe f96e 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014dd4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014dd6:	68fa      	ldr	r2, [r7, #12]
34014dd8:	68bb      	ldr	r3, [r7, #8]
34014dda:	fbb2 f3f3 	udiv	r3, r2, r3
34014dde:	60fb      	str	r3, [r7, #12]
            break;
34014de0:	e000      	b.n	34014de4 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34014de2:	bf00      	nop
      break;
34014de4:	e067      	b.n	34014eb6 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34014de6:	f7f6 fc93 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
34014dea:	4603      	mov	r3, r0
34014dec:	2b00      	cmp	r3, #0
34014dee:	d064      	beq.n	34014eba <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34014df0:	f7f6 fcb0 	bl	3400b754 <LL_RCC_IC8_GetDivider>
34014df4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34014df6:	f7f6 fc9f 	bl	3400b738 <LL_RCC_IC8_GetSource>
34014dfa:	4603      	mov	r3, r0
34014dfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014e00:	d029      	beq.n	34014e56 <RCCEx_GetMDFCLKFreq+0x18e>
34014e02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014e06:	d82f      	bhi.n	34014e68 <RCCEx_GetMDFCLKFreq+0x1a0>
34014e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014e0c:	d01a      	beq.n	34014e44 <RCCEx_GetMDFCLKFreq+0x17c>
34014e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014e12:	d829      	bhi.n	34014e68 <RCCEx_GetMDFCLKFreq+0x1a0>
34014e14:	2b00      	cmp	r3, #0
34014e16:	d003      	beq.n	34014e20 <RCCEx_GetMDFCLKFreq+0x158>
34014e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014e1c:	d009      	beq.n	34014e32 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34014e1e:	e023      	b.n	34014e68 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014e20:	f7fe f874 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014e24:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014e26:	68fa      	ldr	r2, [r7, #12]
34014e28:	68bb      	ldr	r3, [r7, #8]
34014e2a:	fbb2 f3f3 	udiv	r3, r2, r3
34014e2e:	60fb      	str	r3, [r7, #12]
            break;
34014e30:	e01b      	b.n	34014e6a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014e32:	f7fe f8b1 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014e36:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014e38:	68fa      	ldr	r2, [r7, #12]
34014e3a:	68bb      	ldr	r3, [r7, #8]
34014e3c:	fbb2 f3f3 	udiv	r3, r2, r3
34014e40:	60fb      	str	r3, [r7, #12]
            break;
34014e42:	e012      	b.n	34014e6a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014e44:	f7fe f8ee 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014e48:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014e4a:	68fa      	ldr	r2, [r7, #12]
34014e4c:	68bb      	ldr	r3, [r7, #8]
34014e4e:	fbb2 f3f3 	udiv	r3, r2, r3
34014e52:	60fb      	str	r3, [r7, #12]
            break;
34014e54:	e009      	b.n	34014e6a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014e56:	f7fe f92b 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014e5a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34014e5c:	68fa      	ldr	r2, [r7, #12]
34014e5e:	68bb      	ldr	r3, [r7, #8]
34014e60:	fbb2 f3f3 	udiv	r3, r2, r3
34014e64:	60fb      	str	r3, [r7, #12]
            break;
34014e66:	e000      	b.n	34014e6a <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34014e68:	bf00      	nop
      break;
34014e6a:	e026      	b.n	34014eba <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34014e6c:	f7f5 fc6c 	bl	3400a748 <LL_RCC_HSI_IsReady>
34014e70:	4603      	mov	r3, r0
34014e72:	2b00      	cmp	r3, #0
34014e74:	d023      	beq.n	34014ebe <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014e76:	f7f5 fc79 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34014e7a:	4603      	mov	r3, r0
34014e7c:	09db      	lsrs	r3, r3, #7
34014e7e:	4a14      	ldr	r2, [pc, #80]	@ (34014ed0 <RCCEx_GetMDFCLKFreq+0x208>)
34014e80:	fa22 f303 	lsr.w	r3, r2, r3
34014e84:	60fb      	str	r3, [r7, #12]
      break;
34014e86:	e01a      	b.n	34014ebe <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34014e88:	f7f5 fc7e 	bl	3400a788 <LL_RCC_MSI_IsReady>
34014e8c:	4603      	mov	r3, r0
34014e8e:	2b00      	cmp	r3, #0
34014e90:	d017      	beq.n	34014ec2 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34014e92:	4b10      	ldr	r3, [pc, #64]	@ (34014ed4 <RCCEx_GetMDFCLKFreq+0x20c>)
34014e94:	60fb      	str	r3, [r7, #12]
      break;
34014e96:	e014      	b.n	34014ec2 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34014e98:	4b0f      	ldr	r3, [pc, #60]	@ (34014ed8 <RCCEx_GetMDFCLKFreq+0x210>)
34014e9a:	60fb      	str	r3, [r7, #12]
      break;
34014e9c:	e012      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34014e9e:	f7f5 f855 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014ea2:	4604      	mov	r4, r0
34014ea4:	f7f6 f8b8 	bl	3400b018 <LL_RCC_GetTIMPrescaler>
34014ea8:	4603      	mov	r3, r0
34014eaa:	fa24 f303 	lsr.w	r3, r4, r3
34014eae:	60fb      	str	r3, [r7, #12]
      break;
34014eb0:	e008      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34014eb2:	bf00      	nop
34014eb4:	e006      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34014eb6:	bf00      	nop
34014eb8:	e004      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34014eba:	bf00      	nop
34014ebc:	e002      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34014ebe:	bf00      	nop
34014ec0:	e000      	b.n	34014ec4 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34014ec2:	bf00      	nop
  }

  return adf_frequency;
34014ec4:	68fb      	ldr	r3, [r7, #12]
}
34014ec6:	4618      	mov	r0, r3
34014ec8:	3714      	adds	r7, #20
34014eca:	46bd      	mov	sp, r7
34014ecc:	bd90      	pop	{r4, r7, pc}
34014ece:	bf00      	nop
34014ed0:	03d09000 	.word	0x03d09000
34014ed4:	003d0900 	.word	0x003d0900
34014ed8:	00bb8000 	.word	0x00bb8000

34014edc <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34014edc:	b580      	push	{r7, lr}
34014ede:	b084      	sub	sp, #16
34014ee0:	af00      	add	r7, sp, #0
34014ee2:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34014ee4:	2300      	movs	r3, #0
34014ee6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34014ee8:	6878      	ldr	r0, [r7, #4]
34014eea:	f7f5 ffcd 	bl	3400ae88 <LL_RCC_GetPSSIClockSource>
34014eee:	4603      	mov	r3, r0
34014ef0:	2b30      	cmp	r3, #48	@ 0x30
34014ef2:	d05a      	beq.n	34014faa <RCCEx_GetPSSICLKFreq+0xce>
34014ef4:	2b30      	cmp	r3, #48	@ 0x30
34014ef6:	d866      	bhi.n	34014fc6 <RCCEx_GetPSSICLKFreq+0xea>
34014ef8:	2b20      	cmp	r3, #32
34014efa:	d013      	beq.n	34014f24 <RCCEx_GetPSSICLKFreq+0x48>
34014efc:	2b20      	cmp	r3, #32
34014efe:	d862      	bhi.n	34014fc6 <RCCEx_GetPSSICLKFreq+0xea>
34014f00:	2b00      	cmp	r3, #0
34014f02:	d002      	beq.n	34014f0a <RCCEx_GetPSSICLKFreq+0x2e>
34014f04:	2b10      	cmp	r3, #16
34014f06:	d008      	beq.n	34014f1a <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34014f08:	e05d      	b.n	34014fc6 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34014f0a:	f7f5 f81f 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34014f0e:	4603      	mov	r3, r0
34014f10:	4618      	mov	r0, r3
34014f12:	f7fe f913 	bl	3401313c <RCCEx_GetHCLKFreq>
34014f16:	60f8      	str	r0, [r7, #12]
      break;
34014f18:	e05a      	b.n	34014fd0 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014f1a:	2007      	movs	r0, #7
34014f1c:	f7fe fbfa 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34014f20:	60f8      	str	r0, [r7, #12]
      break;
34014f22:	e055      	b.n	34014fd0 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
34014f24:	f7f6 feb4 	bl	3400bc90 <LL_RCC_IC20_IsEnabled>
34014f28:	4603      	mov	r3, r0
34014f2a:	2b00      	cmp	r3, #0
34014f2c:	d04d      	beq.n	34014fca <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34014f2e:	f7f6 fed1 	bl	3400bcd4 <LL_RCC_IC20_GetDivider>
34014f32:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
34014f34:	f7f6 fec0 	bl	3400bcb8 <LL_RCC_IC20_GetSource>
34014f38:	4603      	mov	r3, r0
34014f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014f3e:	d029      	beq.n	34014f94 <RCCEx_GetPSSICLKFreq+0xb8>
34014f40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014f44:	d82f      	bhi.n	34014fa6 <RCCEx_GetPSSICLKFreq+0xca>
34014f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014f4a:	d01a      	beq.n	34014f82 <RCCEx_GetPSSICLKFreq+0xa6>
34014f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014f50:	d829      	bhi.n	34014fa6 <RCCEx_GetPSSICLKFreq+0xca>
34014f52:	2b00      	cmp	r3, #0
34014f54:	d003      	beq.n	34014f5e <RCCEx_GetPSSICLKFreq+0x82>
34014f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014f5a:	d009      	beq.n	34014f70 <RCCEx_GetPSSICLKFreq+0x94>
            break;
34014f5c:	e023      	b.n	34014fa6 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014f5e:	f7fd ffd5 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34014f62:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34014f64:	68fa      	ldr	r2, [r7, #12]
34014f66:	68bb      	ldr	r3, [r7, #8]
34014f68:	fbb2 f3f3 	udiv	r3, r2, r3
34014f6c:	60fb      	str	r3, [r7, #12]
            break;
34014f6e:	e01b      	b.n	34014fa8 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014f70:	f7fe f812 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34014f74:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34014f76:	68fa      	ldr	r2, [r7, #12]
34014f78:	68bb      	ldr	r3, [r7, #8]
34014f7a:	fbb2 f3f3 	udiv	r3, r2, r3
34014f7e:	60fb      	str	r3, [r7, #12]
            break;
34014f80:	e012      	b.n	34014fa8 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014f82:	f7fe f84f 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34014f86:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34014f88:	68fa      	ldr	r2, [r7, #12]
34014f8a:	68bb      	ldr	r3, [r7, #8]
34014f8c:	fbb2 f3f3 	udiv	r3, r2, r3
34014f90:	60fb      	str	r3, [r7, #12]
            break;
34014f92:	e009      	b.n	34014fa8 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014f94:	f7fe f88c 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34014f98:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34014f9a:	68fa      	ldr	r2, [r7, #12]
34014f9c:	68bb      	ldr	r3, [r7, #8]
34014f9e:	fbb2 f3f3 	udiv	r3, r2, r3
34014fa2:	60fb      	str	r3, [r7, #12]
            break;
34014fa4:	e000      	b.n	34014fa8 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34014fa6:	bf00      	nop
      break;
34014fa8:	e00f      	b.n	34014fca <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34014faa:	f7f5 fbcd 	bl	3400a748 <LL_RCC_HSI_IsReady>
34014fae:	4603      	mov	r3, r0
34014fb0:	2b00      	cmp	r3, #0
34014fb2:	d00c      	beq.n	34014fce <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014fb4:	f7f5 fbda 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34014fb8:	4603      	mov	r3, r0
34014fba:	09db      	lsrs	r3, r3, #7
34014fbc:	4a07      	ldr	r2, [pc, #28]	@ (34014fdc <RCCEx_GetPSSICLKFreq+0x100>)
34014fbe:	fa22 f303 	lsr.w	r3, r2, r3
34014fc2:	60fb      	str	r3, [r7, #12]
      break;
34014fc4:	e003      	b.n	34014fce <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34014fc6:	bf00      	nop
34014fc8:	e002      	b.n	34014fd0 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34014fca:	bf00      	nop
34014fcc:	e000      	b.n	34014fd0 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34014fce:	bf00      	nop
  }

  return pssi_frequency;
34014fd0:	68fb      	ldr	r3, [r7, #12]
}
34014fd2:	4618      	mov	r0, r3
34014fd4:	3710      	adds	r7, #16
34014fd6:	46bd      	mov	sp, r7
34014fd8:	bd80      	pop	{r7, pc}
34014fda:	bf00      	nop
34014fdc:	03d09000 	.word	0x03d09000

34014fe0 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34014fe0:	b580      	push	{r7, lr}
34014fe2:	b082      	sub	sp, #8
34014fe4:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34014fe6:	2300      	movs	r3, #0
34014fe8:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34014fea:	f7f5 ffdb 	bl	3400afa4 <LL_RCC_GetRTCClockSource>
34014fee:	4603      	mov	r3, r0
34014ff0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34014ff4:	d020      	beq.n	34015038 <RCCEx_GetRTCCLKFreq+0x58>
34014ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34014ffa:	d830      	bhi.n	3401505e <RCCEx_GetRTCCLKFreq+0x7e>
34014ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015000:	d011      	beq.n	34015026 <RCCEx_GetRTCCLKFreq+0x46>
34015002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015006:	d82a      	bhi.n	3401505e <RCCEx_GetRTCCLKFreq+0x7e>
34015008:	2b00      	cmp	r3, #0
3401500a:	d02a      	beq.n	34015062 <RCCEx_GetRTCCLKFreq+0x82>
3401500c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34015010:	d000      	beq.n	34015014 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34015012:	e024      	b.n	3401505e <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34015014:	f7f5 fbd8 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
34015018:	4603      	mov	r3, r0
3401501a:	2b00      	cmp	r3, #0
3401501c:	d023      	beq.n	34015066 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
3401501e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34015022:	607b      	str	r3, [r7, #4]
      break;
34015024:	e01f      	b.n	34015066 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34015026:	f7f5 fbe1 	bl	3400a7ec <LL_RCC_LSI_IsReady>
3401502a:	4603      	mov	r3, r0
3401502c:	2b00      	cmp	r3, #0
3401502e:	d01c      	beq.n	3401506a <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34015030:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34015034:	607b      	str	r3, [r7, #4]
      break;
34015036:	e018      	b.n	3401506a <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34015038:	f7f5 fb74 	bl	3400a724 <LL_RCC_HSE_IsReady>
3401503c:	4603      	mov	r3, r0
3401503e:	2b00      	cmp	r3, #0
34015040:	d015      	beq.n	3401506e <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34015042:	4b0e      	ldr	r3, [pc, #56]	@ (3401507c <RCCEx_GetRTCCLKFreq+0x9c>)
34015044:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34015048:	0b1b      	lsrs	r3, r3, #12
3401504a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3401504e:	3301      	adds	r3, #1
34015050:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34015052:	4a0b      	ldr	r2, [pc, #44]	@ (34015080 <RCCEx_GetRTCCLKFreq+0xa0>)
34015054:	683b      	ldr	r3, [r7, #0]
34015056:	fbb2 f3f3 	udiv	r3, r2, r3
3401505a:	607b      	str	r3, [r7, #4]
      break;
3401505c:	e007      	b.n	3401506e <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3401505e:	bf00      	nop
34015060:	e006      	b.n	34015070 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34015062:	bf00      	nop
34015064:	e004      	b.n	34015070 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34015066:	bf00      	nop
34015068:	e002      	b.n	34015070 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3401506a:	bf00      	nop
3401506c:	e000      	b.n	34015070 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3401506e:	bf00      	nop
  }

  return rtc_frequency;
34015070:	687b      	ldr	r3, [r7, #4]
}
34015072:	4618      	mov	r0, r3
34015074:	3708      	adds	r7, #8
34015076:	46bd      	mov	sp, r7
34015078:	bd80      	pop	{r7, pc}
3401507a:	bf00      	nop
3401507c:	56028000 	.word	0x56028000
34015080:	02dc6c00 	.word	0x02dc6c00

34015084 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34015084:	b580      	push	{r7, lr}
34015086:	b084      	sub	sp, #16
34015088:	af00      	add	r7, sp, #0
3401508a:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3401508c:	2300      	movs	r3, #0
3401508e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34015090:	6878      	ldr	r0, [r7, #4]
34015092:	f7f5 ff0b 	bl	3400aeac <LL_RCC_GetSAIClockSource>
34015096:	4603      	mov	r3, r0
34015098:	4a9a      	ldr	r2, [pc, #616]	@ (34015304 <RCCEx_GetSAICLKFreq+0x280>)
3401509a:	4293      	cmp	r3, r2
3401509c:	f000 811f 	beq.w	340152de <RCCEx_GetSAICLKFreq+0x25a>
340150a0:	4a98      	ldr	r2, [pc, #608]	@ (34015304 <RCCEx_GetSAICLKFreq+0x280>)
340150a2:	4293      	cmp	r3, r2
340150a4:	f200 8120 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150a8:	4a97      	ldr	r2, [pc, #604]	@ (34015308 <RCCEx_GetSAICLKFreq+0x284>)
340150aa:	4293      	cmp	r3, r2
340150ac:	f000 8117 	beq.w	340152de <RCCEx_GetSAICLKFreq+0x25a>
340150b0:	4a95      	ldr	r2, [pc, #596]	@ (34015308 <RCCEx_GetSAICLKFreq+0x284>)
340150b2:	4293      	cmp	r3, r2
340150b4:	f200 8118 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150b8:	4a94      	ldr	r2, [pc, #592]	@ (3401530c <RCCEx_GetSAICLKFreq+0x288>)
340150ba:	4293      	cmp	r3, r2
340150bc:	f000 810c 	beq.w	340152d8 <RCCEx_GetSAICLKFreq+0x254>
340150c0:	4a92      	ldr	r2, [pc, #584]	@ (3401530c <RCCEx_GetSAICLKFreq+0x288>)
340150c2:	4293      	cmp	r3, r2
340150c4:	f200 8110 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150c8:	4a91      	ldr	r2, [pc, #580]	@ (34015310 <RCCEx_GetSAICLKFreq+0x28c>)
340150ca:	4293      	cmp	r3, r2
340150cc:	f000 8104 	beq.w	340152d8 <RCCEx_GetSAICLKFreq+0x254>
340150d0:	4a8f      	ldr	r2, [pc, #572]	@ (34015310 <RCCEx_GetSAICLKFreq+0x28c>)
340150d2:	4293      	cmp	r3, r2
340150d4:	f200 8108 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150d8:	4a8e      	ldr	r2, [pc, #568]	@ (34015314 <RCCEx_GetSAICLKFreq+0x290>)
340150da:	4293      	cmp	r3, r2
340150dc:	f000 80e6 	beq.w	340152ac <RCCEx_GetSAICLKFreq+0x228>
340150e0:	4a8c      	ldr	r2, [pc, #560]	@ (34015314 <RCCEx_GetSAICLKFreq+0x290>)
340150e2:	4293      	cmp	r3, r2
340150e4:	f200 8100 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150e8:	4a8b      	ldr	r2, [pc, #556]	@ (34015318 <RCCEx_GetSAICLKFreq+0x294>)
340150ea:	4293      	cmp	r3, r2
340150ec:	f000 80de 	beq.w	340152ac <RCCEx_GetSAICLKFreq+0x228>
340150f0:	4a89      	ldr	r2, [pc, #548]	@ (34015318 <RCCEx_GetSAICLKFreq+0x294>)
340150f2:	4293      	cmp	r3, r2
340150f4:	f200 80f8 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
340150f8:	4a88      	ldr	r2, [pc, #544]	@ (3401531c <RCCEx_GetSAICLKFreq+0x298>)
340150fa:	4293      	cmp	r3, r2
340150fc:	f000 80e4 	beq.w	340152c8 <RCCEx_GetSAICLKFreq+0x244>
34015100:	4a86      	ldr	r2, [pc, #536]	@ (3401531c <RCCEx_GetSAICLKFreq+0x298>)
34015102:	4293      	cmp	r3, r2
34015104:	f200 80f0 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015108:	4a85      	ldr	r2, [pc, #532]	@ (34015320 <RCCEx_GetSAICLKFreq+0x29c>)
3401510a:	4293      	cmp	r3, r2
3401510c:	f000 80dc 	beq.w	340152c8 <RCCEx_GetSAICLKFreq+0x244>
34015110:	4a83      	ldr	r2, [pc, #524]	@ (34015320 <RCCEx_GetSAICLKFreq+0x29c>)
34015112:	4293      	cmp	r3, r2
34015114:	f200 80e8 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015118:	4a82      	ldr	r2, [pc, #520]	@ (34015324 <RCCEx_GetSAICLKFreq+0x2a0>)
3401511a:	4293      	cmp	r3, r2
3401511c:	f000 8083 	beq.w	34015226 <RCCEx_GetSAICLKFreq+0x1a2>
34015120:	4a80      	ldr	r2, [pc, #512]	@ (34015324 <RCCEx_GetSAICLKFreq+0x2a0>)
34015122:	4293      	cmp	r3, r2
34015124:	f200 80e0 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015128:	4a7f      	ldr	r2, [pc, #508]	@ (34015328 <RCCEx_GetSAICLKFreq+0x2a4>)
3401512a:	4293      	cmp	r3, r2
3401512c:	d07b      	beq.n	34015226 <RCCEx_GetSAICLKFreq+0x1a2>
3401512e:	4a7e      	ldr	r2, [pc, #504]	@ (34015328 <RCCEx_GetSAICLKFreq+0x2a4>)
34015130:	4293      	cmp	r3, r2
34015132:	f200 80d9 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015136:	4a7d      	ldr	r2, [pc, #500]	@ (3401532c <RCCEx_GetSAICLKFreq+0x2a8>)
34015138:	4293      	cmp	r3, r2
3401513a:	d030      	beq.n	3401519e <RCCEx_GetSAICLKFreq+0x11a>
3401513c:	4a7b      	ldr	r2, [pc, #492]	@ (3401532c <RCCEx_GetSAICLKFreq+0x2a8>)
3401513e:	4293      	cmp	r3, r2
34015140:	f200 80d2 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015144:	4a7a      	ldr	r2, [pc, #488]	@ (34015330 <RCCEx_GetSAICLKFreq+0x2ac>)
34015146:	4293      	cmp	r3, r2
34015148:	d029      	beq.n	3401519e <RCCEx_GetSAICLKFreq+0x11a>
3401514a:	4a79      	ldr	r2, [pc, #484]	@ (34015330 <RCCEx_GetSAICLKFreq+0x2ac>)
3401514c:	4293      	cmp	r3, r2
3401514e:	f200 80cb 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015152:	4a78      	ldr	r2, [pc, #480]	@ (34015334 <RCCEx_GetSAICLKFreq+0x2b0>)
34015154:	4293      	cmp	r3, r2
34015156:	d01d      	beq.n	34015194 <RCCEx_GetSAICLKFreq+0x110>
34015158:	4a76      	ldr	r2, [pc, #472]	@ (34015334 <RCCEx_GetSAICLKFreq+0x2b0>)
3401515a:	4293      	cmp	r3, r2
3401515c:	f200 80c4 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
34015160:	4a75      	ldr	r2, [pc, #468]	@ (34015338 <RCCEx_GetSAICLKFreq+0x2b4>)
34015162:	4293      	cmp	r3, r2
34015164:	d016      	beq.n	34015194 <RCCEx_GetSAICLKFreq+0x110>
34015166:	4a74      	ldr	r2, [pc, #464]	@ (34015338 <RCCEx_GetSAICLKFreq+0x2b4>)
34015168:	4293      	cmp	r3, r2
3401516a:	f200 80bd 	bhi.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
3401516e:	4a73      	ldr	r2, [pc, #460]	@ (3401533c <RCCEx_GetSAICLKFreq+0x2b8>)
34015170:	4293      	cmp	r3, r2
34015172:	d003      	beq.n	3401517c <RCCEx_GetSAICLKFreq+0xf8>
34015174:	4a72      	ldr	r2, [pc, #456]	@ (34015340 <RCCEx_GetSAICLKFreq+0x2bc>)
34015176:	4293      	cmp	r3, r2
34015178:	f040 80b6 	bne.w	340152e8 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401517c:	f7f4 fee6 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015180:	4603      	mov	r3, r0
34015182:	4618      	mov	r0, r3
34015184:	f7fd ffda 	bl	3401313c <RCCEx_GetHCLKFreq>
34015188:	4603      	mov	r3, r0
3401518a:	4618      	mov	r0, r3
3401518c:	f7fd fff7 	bl	3401317e <RCCEx_GetPCLK2Freq>
34015190:	60f8      	str	r0, [r7, #12]
      break;
34015192:	e0b2      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34015194:	2007      	movs	r0, #7
34015196:	f7fe fabd 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
3401519a:	60f8      	str	r0, [r7, #12]
      break;
3401519c:	e0ad      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401519e:	f7f6 fa77 	bl	3400b690 <LL_RCC_IC7_IsEnabled>
340151a2:	4603      	mov	r3, r0
340151a4:	2b00      	cmp	r3, #0
340151a6:	f000 80a1 	beq.w	340152ec <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
340151aa:	f7f6 fa93 	bl	3400b6d4 <LL_RCC_IC7_GetDivider>
340151ae:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
340151b0:	f7f6 fa82 	bl	3400b6b8 <LL_RCC_IC7_GetSource>
340151b4:	4603      	mov	r3, r0
340151b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340151ba:	d029      	beq.n	34015210 <RCCEx_GetSAICLKFreq+0x18c>
340151bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340151c0:	d82f      	bhi.n	34015222 <RCCEx_GetSAICLKFreq+0x19e>
340151c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340151c6:	d01a      	beq.n	340151fe <RCCEx_GetSAICLKFreq+0x17a>
340151c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340151cc:	d829      	bhi.n	34015222 <RCCEx_GetSAICLKFreq+0x19e>
340151ce:	2b00      	cmp	r3, #0
340151d0:	d003      	beq.n	340151da <RCCEx_GetSAICLKFreq+0x156>
340151d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340151d6:	d009      	beq.n	340151ec <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340151d8:	e023      	b.n	34015222 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340151da:	f7fd fe97 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340151de:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340151e0:	68fa      	ldr	r2, [r7, #12]
340151e2:	68bb      	ldr	r3, [r7, #8]
340151e4:	fbb2 f3f3 	udiv	r3, r2, r3
340151e8:	60fb      	str	r3, [r7, #12]
            break;
340151ea:	e01b      	b.n	34015224 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340151ec:	f7fd fed4 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340151f0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340151f2:	68fa      	ldr	r2, [r7, #12]
340151f4:	68bb      	ldr	r3, [r7, #8]
340151f6:	fbb2 f3f3 	udiv	r3, r2, r3
340151fa:	60fb      	str	r3, [r7, #12]
            break;
340151fc:	e012      	b.n	34015224 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340151fe:	f7fd ff11 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015202:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34015204:	68fa      	ldr	r2, [r7, #12]
34015206:	68bb      	ldr	r3, [r7, #8]
34015208:	fbb2 f3f3 	udiv	r3, r2, r3
3401520c:	60fb      	str	r3, [r7, #12]
            break;
3401520e:	e009      	b.n	34015224 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015210:	f7fd ff4e 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015214:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34015216:	68fa      	ldr	r2, [r7, #12]
34015218:	68bb      	ldr	r3, [r7, #8]
3401521a:	fbb2 f3f3 	udiv	r3, r2, r3
3401521e:	60fb      	str	r3, [r7, #12]
            break;
34015220:	e000      	b.n	34015224 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
34015222:	bf00      	nop
        }
      }
      break;
34015224:	e062      	b.n	340152ec <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34015226:	f7f6 fa73 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
3401522a:	4603      	mov	r3, r0
3401522c:	2b00      	cmp	r3, #0
3401522e:	d05f      	beq.n	340152f0 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34015230:	f7f6 fa90 	bl	3400b754 <LL_RCC_IC8_GetDivider>
34015234:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34015236:	f7f6 fa7f 	bl	3400b738 <LL_RCC_IC8_GetSource>
3401523a:	4603      	mov	r3, r0
3401523c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015240:	d029      	beq.n	34015296 <RCCEx_GetSAICLKFreq+0x212>
34015242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015246:	d82f      	bhi.n	340152a8 <RCCEx_GetSAICLKFreq+0x224>
34015248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401524c:	d01a      	beq.n	34015284 <RCCEx_GetSAICLKFreq+0x200>
3401524e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015252:	d829      	bhi.n	340152a8 <RCCEx_GetSAICLKFreq+0x224>
34015254:	2b00      	cmp	r3, #0
34015256:	d003      	beq.n	34015260 <RCCEx_GetSAICLKFreq+0x1dc>
34015258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401525c:	d009      	beq.n	34015272 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401525e:	e023      	b.n	340152a8 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015260:	f7fd fe54 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015264:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34015266:	68fa      	ldr	r2, [r7, #12]
34015268:	68bb      	ldr	r3, [r7, #8]
3401526a:	fbb2 f3f3 	udiv	r3, r2, r3
3401526e:	60fb      	str	r3, [r7, #12]
            break;
34015270:	e01b      	b.n	340152aa <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015272:	f7fd fe91 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015276:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34015278:	68fa      	ldr	r2, [r7, #12]
3401527a:	68bb      	ldr	r3, [r7, #8]
3401527c:	fbb2 f3f3 	udiv	r3, r2, r3
34015280:	60fb      	str	r3, [r7, #12]
            break;
34015282:	e012      	b.n	340152aa <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015284:	f7fd fece 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015288:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3401528a:	68fa      	ldr	r2, [r7, #12]
3401528c:	68bb      	ldr	r3, [r7, #8]
3401528e:	fbb2 f3f3 	udiv	r3, r2, r3
34015292:	60fb      	str	r3, [r7, #12]
            break;
34015294:	e009      	b.n	340152aa <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015296:	f7fd ff0b 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401529a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3401529c:	68fa      	ldr	r2, [r7, #12]
3401529e:	68bb      	ldr	r3, [r7, #8]
340152a0:	fbb2 f3f3 	udiv	r3, r2, r3
340152a4:	60fb      	str	r3, [r7, #12]
            break;
340152a6:	e000      	b.n	340152aa <RCCEx_GetSAICLKFreq+0x226>
            break;
340152a8:	bf00      	nop
        }
      }
      break;
340152aa:	e021      	b.n	340152f0 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340152ac:	f7f5 fa4c 	bl	3400a748 <LL_RCC_HSI_IsReady>
340152b0:	4603      	mov	r3, r0
340152b2:	2b00      	cmp	r3, #0
340152b4:	d01e      	beq.n	340152f4 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340152b6:	f7f5 fa59 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340152ba:	4603      	mov	r3, r0
340152bc:	09db      	lsrs	r3, r3, #7
340152be:	4a21      	ldr	r2, [pc, #132]	@ (34015344 <RCCEx_GetSAICLKFreq+0x2c0>)
340152c0:	fa22 f303 	lsr.w	r3, r2, r3
340152c4:	60fb      	str	r3, [r7, #12]
      }
      break;
340152c6:	e015      	b.n	340152f4 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340152c8:	f7f5 fa5e 	bl	3400a788 <LL_RCC_MSI_IsReady>
340152cc:	4603      	mov	r3, r0
340152ce:	2b00      	cmp	r3, #0
340152d0:	d012      	beq.n	340152f8 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
340152d2:	4b1d      	ldr	r3, [pc, #116]	@ (34015348 <RCCEx_GetSAICLKFreq+0x2c4>)
340152d4:	60fb      	str	r3, [r7, #12]
      }
      break;
340152d6:	e00f      	b.n	340152f8 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
340152d8:	4b1c      	ldr	r3, [pc, #112]	@ (3401534c <RCCEx_GetSAICLKFreq+0x2c8>)
340152da:	60fb      	str	r3, [r7, #12]
      break;
340152dc:	e00d      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
340152de:	2007      	movs	r0, #7
340152e0:	f000 f920 	bl	34015524 <RCCEx_GetSPDIFRXCLKFreq>
340152e4:	60f8      	str	r0, [r7, #12]
      break;
340152e6:	e008      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
340152e8:	bf00      	nop
340152ea:	e006      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>
      break;
340152ec:	bf00      	nop
340152ee:	e004      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>
      break;
340152f0:	bf00      	nop
340152f2:	e002      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>
      break;
340152f4:	bf00      	nop
340152f6:	e000      	b.n	340152fa <RCCEx_GetSAICLKFreq+0x276>
      break;
340152f8:	bf00      	nop
  }

  return sai_frequency;
340152fa:	68fb      	ldr	r3, [r7, #12]
}
340152fc:	4618      	mov	r0, r3
340152fe:	3710      	adds	r7, #16
34015300:	46bd      	mov	sp, r7
34015302:	bd80      	pop	{r7, pc}
34015304:	07071818 	.word	0x07071818
34015308:	07071418 	.word	0x07071418
3401530c:	07061818 	.word	0x07061818
34015310:	07061418 	.word	0x07061418
34015314:	07051818 	.word	0x07051818
34015318:	07051418 	.word	0x07051418
3401531c:	07041818 	.word	0x07041818
34015320:	07041418 	.word	0x07041418
34015324:	07031818 	.word	0x07031818
34015328:	07031418 	.word	0x07031418
3401532c:	07021818 	.word	0x07021818
34015330:	07021418 	.word	0x07021418
34015334:	07011818 	.word	0x07011818
34015338:	07011418 	.word	0x07011418
3401533c:	07001418 	.word	0x07001418
34015340:	07001818 	.word	0x07001818
34015344:	03d09000 	.word	0x03d09000
34015348:	003d0900 	.word	0x003d0900
3401534c:	00bb8000 	.word	0x00bb8000

34015350 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34015350:	b580      	push	{r7, lr}
34015352:	b084      	sub	sp, #16
34015354:	af00      	add	r7, sp, #0
34015356:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34015358:	2300      	movs	r3, #0
3401535a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401535c:	6878      	ldr	r0, [r7, #4]
3401535e:	f7f5 fdb1 	bl	3400aec4 <LL_RCC_GetSDMMCClockSource>
34015362:	4603      	mov	r3, r0
34015364:	4a67      	ldr	r2, [pc, #412]	@ (34015504 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34015366:	4293      	cmp	r3, r2
34015368:	d07e      	beq.n	34015468 <RCCEx_GetSDMMCCLKFreq+0x118>
3401536a:	4a66      	ldr	r2, [pc, #408]	@ (34015504 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3401536c:	4293      	cmp	r3, r2
3401536e:	f200 80be 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
34015372:	4a65      	ldr	r2, [pc, #404]	@ (34015508 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34015374:	4293      	cmp	r3, r2
34015376:	d077      	beq.n	34015468 <RCCEx_GetSDMMCCLKFreq+0x118>
34015378:	4a63      	ldr	r2, [pc, #396]	@ (34015508 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3401537a:	4293      	cmp	r3, r2
3401537c:	f200 80b7 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
34015380:	4a62      	ldr	r2, [pc, #392]	@ (3401550c <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34015382:	4293      	cmp	r3, r2
34015384:	d02c      	beq.n	340153e0 <RCCEx_GetSDMMCCLKFreq+0x90>
34015386:	4a61      	ldr	r2, [pc, #388]	@ (3401550c <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34015388:	4293      	cmp	r3, r2
3401538a:	f200 80b0 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
3401538e:	4a60      	ldr	r2, [pc, #384]	@ (34015510 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34015390:	4293      	cmp	r3, r2
34015392:	d025      	beq.n	340153e0 <RCCEx_GetSDMMCCLKFreq+0x90>
34015394:	4a5e      	ldr	r2, [pc, #376]	@ (34015510 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34015396:	4293      	cmp	r3, r2
34015398:	f200 80a9 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
3401539c:	4a5d      	ldr	r2, [pc, #372]	@ (34015514 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3401539e:	4293      	cmp	r3, r2
340153a0:	d019      	beq.n	340153d6 <RCCEx_GetSDMMCCLKFreq+0x86>
340153a2:	4a5c      	ldr	r2, [pc, #368]	@ (34015514 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
340153a4:	4293      	cmp	r3, r2
340153a6:	f200 80a2 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
340153aa:	4a5b      	ldr	r2, [pc, #364]	@ (34015518 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
340153ac:	4293      	cmp	r3, r2
340153ae:	d012      	beq.n	340153d6 <RCCEx_GetSDMMCCLKFreq+0x86>
340153b0:	4a59      	ldr	r2, [pc, #356]	@ (34015518 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
340153b2:	4293      	cmp	r3, r2
340153b4:	f200 809b 	bhi.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
340153b8:	4a58      	ldr	r2, [pc, #352]	@ (3401551c <RCCEx_GetSDMMCCLKFreq+0x1cc>)
340153ba:	4293      	cmp	r3, r2
340153bc:	d003      	beq.n	340153c6 <RCCEx_GetSDMMCCLKFreq+0x76>
340153be:	4a58      	ldr	r2, [pc, #352]	@ (34015520 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
340153c0:	4293      	cmp	r3, r2
340153c2:	f040 8094 	bne.w	340154ee <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340153c6:	f7f4 fdc1 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
340153ca:	4603      	mov	r3, r0
340153cc:	4618      	mov	r0, r3
340153ce:	f7fd feb5 	bl	3401313c <RCCEx_GetHCLKFreq>
340153d2:	60f8      	str	r0, [r7, #12]
      break;
340153d4:	e090      	b.n	340154f8 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340153d6:	2007      	movs	r0, #7
340153d8:	f7fe f99c 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
340153dc:	60f8      	str	r0, [r7, #12]
      break;
340153de:	e08b      	b.n	340154f8 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
340153e0:	f7f6 f8d6 	bl	3400b590 <LL_RCC_IC4_IsEnabled>
340153e4:	4603      	mov	r3, r0
340153e6:	2b00      	cmp	r3, #0
340153e8:	f000 8083 	beq.w	340154f2 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
340153ec:	f7f6 f8f2 	bl	3400b5d4 <LL_RCC_IC4_GetDivider>
340153f0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340153f2:	f7f6 f8e1 	bl	3400b5b8 <LL_RCC_IC4_GetSource>
340153f6:	4603      	mov	r3, r0
340153f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340153fc:	d029      	beq.n	34015452 <RCCEx_GetSDMMCCLKFreq+0x102>
340153fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015402:	d82f      	bhi.n	34015464 <RCCEx_GetSDMMCCLKFreq+0x114>
34015404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015408:	d01a      	beq.n	34015440 <RCCEx_GetSDMMCCLKFreq+0xf0>
3401540a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401540e:	d829      	bhi.n	34015464 <RCCEx_GetSDMMCCLKFreq+0x114>
34015410:	2b00      	cmp	r3, #0
34015412:	d003      	beq.n	3401541c <RCCEx_GetSDMMCCLKFreq+0xcc>
34015414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015418:	d009      	beq.n	3401542e <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401541a:	e023      	b.n	34015464 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401541c:	f7fd fd76 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015420:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34015422:	68fa      	ldr	r2, [r7, #12]
34015424:	68bb      	ldr	r3, [r7, #8]
34015426:	fbb2 f3f3 	udiv	r3, r2, r3
3401542a:	60fb      	str	r3, [r7, #12]
            break;
3401542c:	e01b      	b.n	34015466 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401542e:	f7fd fdb3 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015432:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34015434:	68fa      	ldr	r2, [r7, #12]
34015436:	68bb      	ldr	r3, [r7, #8]
34015438:	fbb2 f3f3 	udiv	r3, r2, r3
3401543c:	60fb      	str	r3, [r7, #12]
            break;
3401543e:	e012      	b.n	34015466 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015440:	f7fd fdf0 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015444:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34015446:	68fa      	ldr	r2, [r7, #12]
34015448:	68bb      	ldr	r3, [r7, #8]
3401544a:	fbb2 f3f3 	udiv	r3, r2, r3
3401544e:	60fb      	str	r3, [r7, #12]
            break;
34015450:	e009      	b.n	34015466 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015452:	f7fd fe2d 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015456:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34015458:	68fa      	ldr	r2, [r7, #12]
3401545a:	68bb      	ldr	r3, [r7, #8]
3401545c:	fbb2 f3f3 	udiv	r3, r2, r3
34015460:	60fb      	str	r3, [r7, #12]
            break;
34015462:	e000      	b.n	34015466 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34015464:	bf00      	nop
        }
      }
      break;
34015466:	e044      	b.n	340154f2 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34015468:	f7f6 f8d2 	bl	3400b610 <LL_RCC_IC5_IsEnabled>
3401546c:	4603      	mov	r3, r0
3401546e:	2b00      	cmp	r3, #0
34015470:	d041      	beq.n	340154f6 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34015472:	f7f6 f8ef 	bl	3400b654 <LL_RCC_IC5_GetDivider>
34015476:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34015478:	f7f6 f8de 	bl	3400b638 <LL_RCC_IC5_GetSource>
3401547c:	4603      	mov	r3, r0
3401547e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015482:	d029      	beq.n	340154d8 <RCCEx_GetSDMMCCLKFreq+0x188>
34015484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015488:	d82f      	bhi.n	340154ea <RCCEx_GetSDMMCCLKFreq+0x19a>
3401548a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401548e:	d01a      	beq.n	340154c6 <RCCEx_GetSDMMCCLKFreq+0x176>
34015490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015494:	d829      	bhi.n	340154ea <RCCEx_GetSDMMCCLKFreq+0x19a>
34015496:	2b00      	cmp	r3, #0
34015498:	d003      	beq.n	340154a2 <RCCEx_GetSDMMCCLKFreq+0x152>
3401549a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401549e:	d009      	beq.n	340154b4 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340154a0:	e023      	b.n	340154ea <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340154a2:	f7fd fd33 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340154a6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340154a8:	68fa      	ldr	r2, [r7, #12]
340154aa:	68bb      	ldr	r3, [r7, #8]
340154ac:	fbb2 f3f3 	udiv	r3, r2, r3
340154b0:	60fb      	str	r3, [r7, #12]
            break;
340154b2:	e01b      	b.n	340154ec <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340154b4:	f7fd fd70 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340154b8:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340154ba:	68fa      	ldr	r2, [r7, #12]
340154bc:	68bb      	ldr	r3, [r7, #8]
340154be:	fbb2 f3f3 	udiv	r3, r2, r3
340154c2:	60fb      	str	r3, [r7, #12]
            break;
340154c4:	e012      	b.n	340154ec <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340154c6:	f7fd fdad 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340154ca:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340154cc:	68fa      	ldr	r2, [r7, #12]
340154ce:	68bb      	ldr	r3, [r7, #8]
340154d0:	fbb2 f3f3 	udiv	r3, r2, r3
340154d4:	60fb      	str	r3, [r7, #12]
            break;
340154d6:	e009      	b.n	340154ec <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340154d8:	f7fd fdea 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340154dc:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340154de:	68fa      	ldr	r2, [r7, #12]
340154e0:	68bb      	ldr	r3, [r7, #8]
340154e2:	fbb2 f3f3 	udiv	r3, r2, r3
340154e6:	60fb      	str	r3, [r7, #12]
            break;
340154e8:	e000      	b.n	340154ec <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
340154ea:	bf00      	nop
        }
      }
      break;
340154ec:	e003      	b.n	340154f6 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
340154ee:	bf00      	nop
340154f0:	e002      	b.n	340154f8 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340154f2:	bf00      	nop
340154f4:	e000      	b.n	340154f8 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340154f6:	bf00      	nop
  }

  return sdmmc_frequency;
340154f8:	68fb      	ldr	r3, [r7, #12]
}
340154fa:	4618      	mov	r0, r3
340154fc:	3710      	adds	r7, #16
340154fe:	46bd      	mov	sp, r7
34015500:	bd80      	pop	{r7, pc}
34015502:	bf00      	nop
34015504:	0303041c 	.word	0x0303041c
34015508:	0303001c 	.word	0x0303001c
3401550c:	0302041c 	.word	0x0302041c
34015510:	0302001c 	.word	0x0302001c
34015514:	0301041c 	.word	0x0301041c
34015518:	0301001c 	.word	0x0301001c
3401551c:	0300001c 	.word	0x0300001c
34015520:	0300041c 	.word	0x0300041c

34015524 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34015524:	b580      	push	{r7, lr}
34015526:	b084      	sub	sp, #16
34015528:	af00      	add	r7, sp, #0
3401552a:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3401552c:	2300      	movs	r3, #0
3401552e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34015530:	6878      	ldr	r0, [r7, #4]
34015532:	f7f5 fcd3 	bl	3400aedc <LL_RCC_GetSPDIFRXClockSource>
34015536:	4603      	mov	r3, r0
34015538:	2b06      	cmp	r3, #6
3401553a:	f200 80c2 	bhi.w	340156c2 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3401553e:	a201      	add	r2, pc, #4	@ (adr r2, 34015544 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34015540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34015544:	34015561 	.word	0x34015561
34015548:	34015579 	.word	0x34015579
3401554c:	34015583 	.word	0x34015583
34015550:	3401560b 	.word	0x3401560b
34015554:	340156ad 	.word	0x340156ad
34015558:	34015691 	.word	0x34015691
3401555c:	340156bd 	.word	0x340156bd
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015560:	f7f4 fcf4 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015564:	4603      	mov	r3, r0
34015566:	4618      	mov	r0, r3
34015568:	f7fd fde8 	bl	3401313c <RCCEx_GetHCLKFreq>
3401556c:	4603      	mov	r3, r0
3401556e:	4618      	mov	r0, r3
34015570:	f7fd fdf5 	bl	3401315e <RCCEx_GetPCLK1Freq>
34015574:	60f8      	str	r0, [r7, #12]
      break;
34015576:	e0ad      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34015578:	2007      	movs	r0, #7
3401557a:	f7fe f8cb 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
3401557e:	60f8      	str	r0, [r7, #12]
      break;
34015580:	e0a8      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34015582:	f7f6 f885 	bl	3400b690 <LL_RCC_IC7_IsEnabled>
34015586:	4603      	mov	r3, r0
34015588:	2b00      	cmp	r3, #0
3401558a:	f000 809c 	beq.w	340156c6 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401558e:	f7f6 f8a1 	bl	3400b6d4 <LL_RCC_IC7_GetDivider>
34015592:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34015594:	f7f6 f890 	bl	3400b6b8 <LL_RCC_IC7_GetSource>
34015598:	4603      	mov	r3, r0
3401559a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401559e:	d029      	beq.n	340155f4 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
340155a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340155a4:	d82f      	bhi.n	34015606 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
340155a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340155aa:	d01a      	beq.n	340155e2 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
340155ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340155b0:	d829      	bhi.n	34015606 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
340155b2:	2b00      	cmp	r3, #0
340155b4:	d003      	beq.n	340155be <RCCEx_GetSPDIFRXCLKFreq+0x9a>
340155b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340155ba:	d009      	beq.n	340155d0 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340155bc:	e023      	b.n	34015606 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340155be:	f7fd fca5 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340155c2:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340155c4:	68fa      	ldr	r2, [r7, #12]
340155c6:	68bb      	ldr	r3, [r7, #8]
340155c8:	fbb2 f3f3 	udiv	r3, r2, r3
340155cc:	60fb      	str	r3, [r7, #12]
            break;
340155ce:	e01b      	b.n	34015608 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340155d0:	f7fd fce2 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340155d4:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340155d6:	68fa      	ldr	r2, [r7, #12]
340155d8:	68bb      	ldr	r3, [r7, #8]
340155da:	fbb2 f3f3 	udiv	r3, r2, r3
340155de:	60fb      	str	r3, [r7, #12]
            break;
340155e0:	e012      	b.n	34015608 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340155e2:	f7fd fd1f 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340155e6:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340155e8:	68fa      	ldr	r2, [r7, #12]
340155ea:	68bb      	ldr	r3, [r7, #8]
340155ec:	fbb2 f3f3 	udiv	r3, r2, r3
340155f0:	60fb      	str	r3, [r7, #12]
            break;
340155f2:	e009      	b.n	34015608 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340155f4:	f7fd fd5c 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340155f8:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340155fa:	68fa      	ldr	r2, [r7, #12]
340155fc:	68bb      	ldr	r3, [r7, #8]
340155fe:	fbb2 f3f3 	udiv	r3, r2, r3
34015602:	60fb      	str	r3, [r7, #12]
            break;
34015604:	e000      	b.n	34015608 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
34015606:	bf00      	nop
        }
      }
      break;
34015608:	e05d      	b.n	340156c6 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401560a:	f7f6 f881 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
3401560e:	4603      	mov	r3, r0
34015610:	2b00      	cmp	r3, #0
34015612:	d05a      	beq.n	340156ca <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34015614:	f7f6 f89e 	bl	3400b754 <LL_RCC_IC8_GetDivider>
34015618:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3401561a:	f7f6 f88d 	bl	3400b738 <LL_RCC_IC8_GetSource>
3401561e:	4603      	mov	r3, r0
34015620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015624:	d029      	beq.n	3401567a <RCCEx_GetSPDIFRXCLKFreq+0x156>
34015626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401562a:	d82f      	bhi.n	3401568c <RCCEx_GetSPDIFRXCLKFreq+0x168>
3401562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015630:	d01a      	beq.n	34015668 <RCCEx_GetSPDIFRXCLKFreq+0x144>
34015632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015636:	d829      	bhi.n	3401568c <RCCEx_GetSPDIFRXCLKFreq+0x168>
34015638:	2b00      	cmp	r3, #0
3401563a:	d003      	beq.n	34015644 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3401563c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015640:	d009      	beq.n	34015656 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34015642:	e023      	b.n	3401568c <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015644:	f7fd fc62 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015648:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401564a:	68fa      	ldr	r2, [r7, #12]
3401564c:	68bb      	ldr	r3, [r7, #8]
3401564e:	fbb2 f3f3 	udiv	r3, r2, r3
34015652:	60fb      	str	r3, [r7, #12]
            break;
34015654:	e01b      	b.n	3401568e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015656:	f7fd fc9f 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401565a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401565c:	68fa      	ldr	r2, [r7, #12]
3401565e:	68bb      	ldr	r3, [r7, #8]
34015660:	fbb2 f3f3 	udiv	r3, r2, r3
34015664:	60fb      	str	r3, [r7, #12]
            break;
34015666:	e012      	b.n	3401568e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015668:	f7fd fcdc 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
3401566c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401566e:	68fa      	ldr	r2, [r7, #12]
34015670:	68bb      	ldr	r3, [r7, #8]
34015672:	fbb2 f3f3 	udiv	r3, r2, r3
34015676:	60fb      	str	r3, [r7, #12]
            break;
34015678:	e009      	b.n	3401568e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401567a:	f7fd fd19 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401567e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34015680:	68fa      	ldr	r2, [r7, #12]
34015682:	68bb      	ldr	r3, [r7, #8]
34015684:	fbb2 f3f3 	udiv	r3, r2, r3
34015688:	60fb      	str	r3, [r7, #12]
            break;
3401568a:	e000      	b.n	3401568e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3401568c:	bf00      	nop
        }
      }
      break;
3401568e:	e01c      	b.n	340156ca <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34015690:	f7f5 f85a 	bl	3400a748 <LL_RCC_HSI_IsReady>
34015694:	4603      	mov	r3, r0
34015696:	2b00      	cmp	r3, #0
34015698:	d019      	beq.n	340156ce <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401569a:	f7f5 f867 	bl	3400a76c <LL_RCC_HSI_GetDivider>
3401569e:	4603      	mov	r3, r0
340156a0:	09db      	lsrs	r3, r3, #7
340156a2:	4a0f      	ldr	r2, [pc, #60]	@ (340156e0 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
340156a4:	fa22 f303 	lsr.w	r3, r2, r3
340156a8:	60fb      	str	r3, [r7, #12]
      }
      break;
340156aa:	e010      	b.n	340156ce <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340156ac:	f7f5 f86c 	bl	3400a788 <LL_RCC_MSI_IsReady>
340156b0:	4603      	mov	r3, r0
340156b2:	2b00      	cmp	r3, #0
340156b4:	d00d      	beq.n	340156d2 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
340156b6:	4b0b      	ldr	r3, [pc, #44]	@ (340156e4 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
340156b8:	60fb      	str	r3, [r7, #12]
      }
      break;
340156ba:	e00a      	b.n	340156d2 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
340156bc:	4b0a      	ldr	r3, [pc, #40]	@ (340156e8 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
340156be:	60fb      	str	r3, [r7, #12]
      break;
340156c0:	e008      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
340156c2:	bf00      	nop
340156c4:	e006      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
340156c6:	bf00      	nop
340156c8:	e004      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
340156ca:	bf00      	nop
340156cc:	e002      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
340156ce:	bf00      	nop
340156d0:	e000      	b.n	340156d4 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
340156d2:	bf00      	nop
  }

  return spdifrx_frequency;
340156d4:	68fb      	ldr	r3, [r7, #12]
}
340156d6:	4618      	mov	r0, r3
340156d8:	3710      	adds	r7, #16
340156da:	46bd      	mov	sp, r7
340156dc:	bd80      	pop	{r7, pc}
340156de:	bf00      	nop
340156e0:	03d09000 	.word	0x03d09000
340156e4:	003d0900 	.word	0x003d0900
340156e8:	00bb8000 	.word	0x00bb8000

340156ec <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
340156ec:	b580      	push	{r7, lr}
340156ee:	b084      	sub	sp, #16
340156f0:	af00      	add	r7, sp, #0
340156f2:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
340156f4:	2300      	movs	r3, #0
340156f6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340156f8:	6878      	ldr	r0, [r7, #4]
340156fa:	f7f5 fc01 	bl	3400af00 <LL_RCC_GetSPIClockSource>
340156fe:	4603      	mov	r3, r0
34015700:	4aa7      	ldr	r2, [pc, #668]	@ (340159a0 <RCCEx_GetSPICLKFreq+0x2b4>)
34015702:	4293      	cmp	r3, r2
34015704:	f000 829e 	beq.w	34015c44 <RCCEx_GetSPICLKFreq+0x558>
34015708:	4aa5      	ldr	r2, [pc, #660]	@ (340159a0 <RCCEx_GetSPICLKFreq+0x2b4>)
3401570a:	4293      	cmp	r3, r2
3401570c:	f200 82a5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015710:	4aa4      	ldr	r2, [pc, #656]	@ (340159a4 <RCCEx_GetSPICLKFreq+0x2b8>)
34015712:	4293      	cmp	r3, r2
34015714:	f000 8299 	beq.w	34015c4a <RCCEx_GetSPICLKFreq+0x55e>
34015718:	4aa2      	ldr	r2, [pc, #648]	@ (340159a4 <RCCEx_GetSPICLKFreq+0x2b8>)
3401571a:	4293      	cmp	r3, r2
3401571c:	f200 829d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015720:	4aa1      	ldr	r2, [pc, #644]	@ (340159a8 <RCCEx_GetSPICLKFreq+0x2bc>)
34015722:	4293      	cmp	r3, r2
34015724:	f000 8291 	beq.w	34015c4a <RCCEx_GetSPICLKFreq+0x55e>
34015728:	4a9f      	ldr	r2, [pc, #636]	@ (340159a8 <RCCEx_GetSPICLKFreq+0x2bc>)
3401572a:	4293      	cmp	r3, r2
3401572c:	f200 8295 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015730:	4a9e      	ldr	r2, [pc, #632]	@ (340159ac <RCCEx_GetSPICLKFreq+0x2c0>)
34015732:	4293      	cmp	r3, r2
34015734:	f000 8286 	beq.w	34015c44 <RCCEx_GetSPICLKFreq+0x558>
34015738:	4a9c      	ldr	r2, [pc, #624]	@ (340159ac <RCCEx_GetSPICLKFreq+0x2c0>)
3401573a:	4293      	cmp	r3, r2
3401573c:	f200 828d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015740:	4a9b      	ldr	r2, [pc, #620]	@ (340159b0 <RCCEx_GetSPICLKFreq+0x2c4>)
34015742:	4293      	cmp	r3, r2
34015744:	f000 827e 	beq.w	34015c44 <RCCEx_GetSPICLKFreq+0x558>
34015748:	4a99      	ldr	r2, [pc, #612]	@ (340159b0 <RCCEx_GetSPICLKFreq+0x2c4>)
3401574a:	4293      	cmp	r3, r2
3401574c:	f200 8285 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015750:	4a98      	ldr	r2, [pc, #608]	@ (340159b4 <RCCEx_GetSPICLKFreq+0x2c8>)
34015752:	4293      	cmp	r3, r2
34015754:	f000 8276 	beq.w	34015c44 <RCCEx_GetSPICLKFreq+0x558>
34015758:	4a96      	ldr	r2, [pc, #600]	@ (340159b4 <RCCEx_GetSPICLKFreq+0x2c8>)
3401575a:	4293      	cmp	r3, r2
3401575c:	f200 827d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015760:	4a95      	ldr	r2, [pc, #596]	@ (340159b8 <RCCEx_GetSPICLKFreq+0x2cc>)
34015762:	4293      	cmp	r3, r2
34015764:	f000 8258 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
34015768:	4a93      	ldr	r2, [pc, #588]	@ (340159b8 <RCCEx_GetSPICLKFreq+0x2cc>)
3401576a:	4293      	cmp	r3, r2
3401576c:	f200 8275 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015770:	4a92      	ldr	r2, [pc, #584]	@ (340159bc <RCCEx_GetSPICLKFreq+0x2d0>)
34015772:	4293      	cmp	r3, r2
34015774:	f000 8250 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
34015778:	4a90      	ldr	r2, [pc, #576]	@ (340159bc <RCCEx_GetSPICLKFreq+0x2d0>)
3401577a:	4293      	cmp	r3, r2
3401577c:	f200 826d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015780:	4a8f      	ldr	r2, [pc, #572]	@ (340159c0 <RCCEx_GetSPICLKFreq+0x2d4>)
34015782:	4293      	cmp	r3, r2
34015784:	f000 8248 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
34015788:	4a8d      	ldr	r2, [pc, #564]	@ (340159c0 <RCCEx_GetSPICLKFreq+0x2d4>)
3401578a:	4293      	cmp	r3, r2
3401578c:	f200 8265 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015790:	4a8c      	ldr	r2, [pc, #560]	@ (340159c4 <RCCEx_GetSPICLKFreq+0x2d8>)
34015792:	4293      	cmp	r3, r2
34015794:	f000 8240 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
34015798:	4a8a      	ldr	r2, [pc, #552]	@ (340159c4 <RCCEx_GetSPICLKFreq+0x2d8>)
3401579a:	4293      	cmp	r3, r2
3401579c:	f200 825d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157a0:	4a89      	ldr	r2, [pc, #548]	@ (340159c8 <RCCEx_GetSPICLKFreq+0x2dc>)
340157a2:	4293      	cmp	r3, r2
340157a4:	f000 8238 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
340157a8:	4a87      	ldr	r2, [pc, #540]	@ (340159c8 <RCCEx_GetSPICLKFreq+0x2dc>)
340157aa:	4293      	cmp	r3, r2
340157ac:	f200 8255 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157b0:	4a86      	ldr	r2, [pc, #536]	@ (340159cc <RCCEx_GetSPICLKFreq+0x2e0>)
340157b2:	4293      	cmp	r3, r2
340157b4:	f000 8230 	beq.w	34015c18 <RCCEx_GetSPICLKFreq+0x52c>
340157b8:	4a84      	ldr	r2, [pc, #528]	@ (340159cc <RCCEx_GetSPICLKFreq+0x2e0>)
340157ba:	4293      	cmp	r3, r2
340157bc:	f200 824d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157c0:	4a83      	ldr	r2, [pc, #524]	@ (340159d0 <RCCEx_GetSPICLKFreq+0x2e4>)
340157c2:	4293      	cmp	r3, r2
340157c4:	f000 8236 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
340157c8:	4a81      	ldr	r2, [pc, #516]	@ (340159d0 <RCCEx_GetSPICLKFreq+0x2e4>)
340157ca:	4293      	cmp	r3, r2
340157cc:	f200 8245 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157d0:	4a80      	ldr	r2, [pc, #512]	@ (340159d4 <RCCEx_GetSPICLKFreq+0x2e8>)
340157d2:	4293      	cmp	r3, r2
340157d4:	f000 822e 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
340157d8:	4a7e      	ldr	r2, [pc, #504]	@ (340159d4 <RCCEx_GetSPICLKFreq+0x2e8>)
340157da:	4293      	cmp	r3, r2
340157dc:	f200 823d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157e0:	4a7d      	ldr	r2, [pc, #500]	@ (340159d8 <RCCEx_GetSPICLKFreq+0x2ec>)
340157e2:	4293      	cmp	r3, r2
340157e4:	f000 8226 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
340157e8:	4a7b      	ldr	r2, [pc, #492]	@ (340159d8 <RCCEx_GetSPICLKFreq+0x2ec>)
340157ea:	4293      	cmp	r3, r2
340157ec:	f200 8235 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340157f0:	4a7a      	ldr	r2, [pc, #488]	@ (340159dc <RCCEx_GetSPICLKFreq+0x2f0>)
340157f2:	4293      	cmp	r3, r2
340157f4:	f000 821e 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
340157f8:	4a78      	ldr	r2, [pc, #480]	@ (340159dc <RCCEx_GetSPICLKFreq+0x2f0>)
340157fa:	4293      	cmp	r3, r2
340157fc:	f200 822d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015800:	4a77      	ldr	r2, [pc, #476]	@ (340159e0 <RCCEx_GetSPICLKFreq+0x2f4>)
34015802:	4293      	cmp	r3, r2
34015804:	f000 8216 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
34015808:	4a75      	ldr	r2, [pc, #468]	@ (340159e0 <RCCEx_GetSPICLKFreq+0x2f4>)
3401580a:	4293      	cmp	r3, r2
3401580c:	f200 8225 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015810:	4a74      	ldr	r2, [pc, #464]	@ (340159e4 <RCCEx_GetSPICLKFreq+0x2f8>)
34015812:	4293      	cmp	r3, r2
34015814:	f000 820e 	beq.w	34015c34 <RCCEx_GetSPICLKFreq+0x548>
34015818:	4a72      	ldr	r2, [pc, #456]	@ (340159e4 <RCCEx_GetSPICLKFreq+0x2f8>)
3401581a:	4293      	cmp	r3, r2
3401581c:	f200 821d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015820:	4a71      	ldr	r2, [pc, #452]	@ (340159e8 <RCCEx_GetSPICLKFreq+0x2fc>)
34015822:	4293      	cmp	r3, r2
34015824:	f000 8171 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
34015828:	4a6f      	ldr	r2, [pc, #444]	@ (340159e8 <RCCEx_GetSPICLKFreq+0x2fc>)
3401582a:	4293      	cmp	r3, r2
3401582c:	f200 8215 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015830:	4a6e      	ldr	r2, [pc, #440]	@ (340159ec <RCCEx_GetSPICLKFreq+0x300>)
34015832:	4293      	cmp	r3, r2
34015834:	f000 81ad 	beq.w	34015b92 <RCCEx_GetSPICLKFreq+0x4a6>
34015838:	4a6c      	ldr	r2, [pc, #432]	@ (340159ec <RCCEx_GetSPICLKFreq+0x300>)
3401583a:	4293      	cmp	r3, r2
3401583c:	f200 820d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015840:	4a6b      	ldr	r2, [pc, #428]	@ (340159f0 <RCCEx_GetSPICLKFreq+0x304>)
34015842:	4293      	cmp	r3, r2
34015844:	f000 81a5 	beq.w	34015b92 <RCCEx_GetSPICLKFreq+0x4a6>
34015848:	4a69      	ldr	r2, [pc, #420]	@ (340159f0 <RCCEx_GetSPICLKFreq+0x304>)
3401584a:	4293      	cmp	r3, r2
3401584c:	f200 8205 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015850:	4a68      	ldr	r2, [pc, #416]	@ (340159f4 <RCCEx_GetSPICLKFreq+0x308>)
34015852:	4293      	cmp	r3, r2
34015854:	f000 8159 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
34015858:	4a66      	ldr	r2, [pc, #408]	@ (340159f4 <RCCEx_GetSPICLKFreq+0x308>)
3401585a:	4293      	cmp	r3, r2
3401585c:	f200 81fd 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015860:	4a65      	ldr	r2, [pc, #404]	@ (340159f8 <RCCEx_GetSPICLKFreq+0x30c>)
34015862:	4293      	cmp	r3, r2
34015864:	f000 8151 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
34015868:	4a63      	ldr	r2, [pc, #396]	@ (340159f8 <RCCEx_GetSPICLKFreq+0x30c>)
3401586a:	4293      	cmp	r3, r2
3401586c:	f200 81f5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015870:	4a62      	ldr	r2, [pc, #392]	@ (340159fc <RCCEx_GetSPICLKFreq+0x310>)
34015872:	4293      	cmp	r3, r2
34015874:	f000 8149 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
34015878:	4a60      	ldr	r2, [pc, #384]	@ (340159fc <RCCEx_GetSPICLKFreq+0x310>)
3401587a:	4293      	cmp	r3, r2
3401587c:	f200 81ed 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015880:	4a5f      	ldr	r2, [pc, #380]	@ (34015a00 <RCCEx_GetSPICLKFreq+0x314>)
34015882:	4293      	cmp	r3, r2
34015884:	f000 80fd 	beq.w	34015a82 <RCCEx_GetSPICLKFreq+0x396>
34015888:	4a5d      	ldr	r2, [pc, #372]	@ (34015a00 <RCCEx_GetSPICLKFreq+0x314>)
3401588a:	4293      	cmp	r3, r2
3401588c:	f200 81e5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015890:	4a5c      	ldr	r2, [pc, #368]	@ (34015a04 <RCCEx_GetSPICLKFreq+0x318>)
34015892:	4293      	cmp	r3, r2
34015894:	f000 8139 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
34015898:	4a5a      	ldr	r2, [pc, #360]	@ (34015a04 <RCCEx_GetSPICLKFreq+0x318>)
3401589a:	4293      	cmp	r3, r2
3401589c:	f200 81dd 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158a0:	4a59      	ldr	r2, [pc, #356]	@ (34015a08 <RCCEx_GetSPICLKFreq+0x31c>)
340158a2:	4293      	cmp	r3, r2
340158a4:	f000 8131 	beq.w	34015b0a <RCCEx_GetSPICLKFreq+0x41e>
340158a8:	4a57      	ldr	r2, [pc, #348]	@ (34015a08 <RCCEx_GetSPICLKFreq+0x31c>)
340158aa:	4293      	cmp	r3, r2
340158ac:	f200 81d5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158b0:	4a56      	ldr	r2, [pc, #344]	@ (34015a0c <RCCEx_GetSPICLKFreq+0x320>)
340158b2:	4293      	cmp	r3, r2
340158b4:	f000 80e5 	beq.w	34015a82 <RCCEx_GetSPICLKFreq+0x396>
340158b8:	4a54      	ldr	r2, [pc, #336]	@ (34015a0c <RCCEx_GetSPICLKFreq+0x320>)
340158ba:	4293      	cmp	r3, r2
340158bc:	f200 81cd 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158c0:	4a53      	ldr	r2, [pc, #332]	@ (34015a10 <RCCEx_GetSPICLKFreq+0x324>)
340158c2:	4293      	cmp	r3, r2
340158c4:	f000 80dd 	beq.w	34015a82 <RCCEx_GetSPICLKFreq+0x396>
340158c8:	4a51      	ldr	r2, [pc, #324]	@ (34015a10 <RCCEx_GetSPICLKFreq+0x324>)
340158ca:	4293      	cmp	r3, r2
340158cc:	f200 81c5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158d0:	4a50      	ldr	r2, [pc, #320]	@ (34015a14 <RCCEx_GetSPICLKFreq+0x328>)
340158d2:	4293      	cmp	r3, r2
340158d4:	f000 80d5 	beq.w	34015a82 <RCCEx_GetSPICLKFreq+0x396>
340158d8:	4a4e      	ldr	r2, [pc, #312]	@ (34015a14 <RCCEx_GetSPICLKFreq+0x328>)
340158da:	4293      	cmp	r3, r2
340158dc:	f200 81bd 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158e0:	4a4d      	ldr	r2, [pc, #308]	@ (34015a18 <RCCEx_GetSPICLKFreq+0x32c>)
340158e2:	4293      	cmp	r3, r2
340158e4:	f000 80c8 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
340158e8:	4a4b      	ldr	r2, [pc, #300]	@ (34015a18 <RCCEx_GetSPICLKFreq+0x32c>)
340158ea:	4293      	cmp	r3, r2
340158ec:	f200 81b5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
340158f0:	4a4a      	ldr	r2, [pc, #296]	@ (34015a1c <RCCEx_GetSPICLKFreq+0x330>)
340158f2:	4293      	cmp	r3, r2
340158f4:	f000 80c0 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
340158f8:	4a48      	ldr	r2, [pc, #288]	@ (34015a1c <RCCEx_GetSPICLKFreq+0x330>)
340158fa:	4293      	cmp	r3, r2
340158fc:	f200 81ad 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015900:	4a47      	ldr	r2, [pc, #284]	@ (34015a20 <RCCEx_GetSPICLKFreq+0x334>)
34015902:	4293      	cmp	r3, r2
34015904:	f000 80b8 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
34015908:	4a45      	ldr	r2, [pc, #276]	@ (34015a20 <RCCEx_GetSPICLKFreq+0x334>)
3401590a:	4293      	cmp	r3, r2
3401590c:	f200 81a5 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015910:	4a44      	ldr	r2, [pc, #272]	@ (34015a24 <RCCEx_GetSPICLKFreq+0x338>)
34015912:	4293      	cmp	r3, r2
34015914:	f000 80b0 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
34015918:	4a42      	ldr	r2, [pc, #264]	@ (34015a24 <RCCEx_GetSPICLKFreq+0x338>)
3401591a:	4293      	cmp	r3, r2
3401591c:	f200 819d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015920:	4a41      	ldr	r2, [pc, #260]	@ (34015a28 <RCCEx_GetSPICLKFreq+0x33c>)
34015922:	4293      	cmp	r3, r2
34015924:	f000 80a8 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
34015928:	4a3f      	ldr	r2, [pc, #252]	@ (34015a28 <RCCEx_GetSPICLKFreq+0x33c>)
3401592a:	4293      	cmp	r3, r2
3401592c:	f200 8195 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015930:	4a3e      	ldr	r2, [pc, #248]	@ (34015a2c <RCCEx_GetSPICLKFreq+0x340>)
34015932:	4293      	cmp	r3, r2
34015934:	f000 80a0 	beq.w	34015a78 <RCCEx_GetSPICLKFreq+0x38c>
34015938:	4a3c      	ldr	r2, [pc, #240]	@ (34015a2c <RCCEx_GetSPICLKFreq+0x340>)
3401593a:	4293      	cmp	r3, r2
3401593c:	f200 818d 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015940:	4a3b      	ldr	r2, [pc, #236]	@ (34015a30 <RCCEx_GetSPICLKFreq+0x344>)
34015942:	4293      	cmp	r3, r2
34015944:	f000 808c 	beq.w	34015a60 <RCCEx_GetSPICLKFreq+0x374>
34015948:	4a39      	ldr	r2, [pc, #228]	@ (34015a30 <RCCEx_GetSPICLKFreq+0x344>)
3401594a:	4293      	cmp	r3, r2
3401594c:	f200 8185 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
34015950:	4a38      	ldr	r2, [pc, #224]	@ (34015a34 <RCCEx_GetSPICLKFreq+0x348>)
34015952:	4293      	cmp	r3, r2
34015954:	d078      	beq.n	34015a48 <RCCEx_GetSPICLKFreq+0x35c>
34015956:	4a37      	ldr	r2, [pc, #220]	@ (34015a34 <RCCEx_GetSPICLKFreq+0x348>)
34015958:	4293      	cmp	r3, r2
3401595a:	f200 817e 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
3401595e:	4a36      	ldr	r2, [pc, #216]	@ (34015a38 <RCCEx_GetSPICLKFreq+0x34c>)
34015960:	4293      	cmp	r3, r2
34015962:	d071      	beq.n	34015a48 <RCCEx_GetSPICLKFreq+0x35c>
34015964:	4a34      	ldr	r2, [pc, #208]	@ (34015a38 <RCCEx_GetSPICLKFreq+0x34c>)
34015966:	4293      	cmp	r3, r2
34015968:	f200 8177 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
3401596c:	4a33      	ldr	r2, [pc, #204]	@ (34015a3c <RCCEx_GetSPICLKFreq+0x350>)
3401596e:	4293      	cmp	r3, r2
34015970:	d00a      	beq.n	34015988 <RCCEx_GetSPICLKFreq+0x29c>
34015972:	4a32      	ldr	r2, [pc, #200]	@ (34015a3c <RCCEx_GetSPICLKFreq+0x350>)
34015974:	4293      	cmp	r3, r2
34015976:	f200 8170 	bhi.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
3401597a:	4a31      	ldr	r2, [pc, #196]	@ (34015a40 <RCCEx_GetSPICLKFreq+0x354>)
3401597c:	4293      	cmp	r3, r2
3401597e:	d063      	beq.n	34015a48 <RCCEx_GetSPICLKFreq+0x35c>
34015980:	4a30      	ldr	r2, [pc, #192]	@ (34015a44 <RCCEx_GetSPICLKFreq+0x358>)
34015982:	4293      	cmp	r3, r2
34015984:	f040 8169 	bne.w	34015c5a <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015988:	f7f4 fae0 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
3401598c:	4603      	mov	r3, r0
3401598e:	4618      	mov	r0, r3
34015990:	f7fd fbd4 	bl	3401313c <RCCEx_GetHCLKFreq>
34015994:	4603      	mov	r3, r0
34015996:	4618      	mov	r0, r3
34015998:	f7fd fbe1 	bl	3401315e <RCCEx_GetPCLK1Freq>
3401599c:	60f8      	str	r0, [r7, #12]
      break;
3401599e:	e169      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
340159a0:	07061820 	.word	0x07061820
340159a4:	07061420 	.word	0x07061420
340159a8:	07061020 	.word	0x07061020
340159ac:	07060c20 	.word	0x07060c20
340159b0:	07060820 	.word	0x07060820
340159b4:	07060420 	.word	0x07060420
340159b8:	07051820 	.word	0x07051820
340159bc:	07051420 	.word	0x07051420
340159c0:	07051020 	.word	0x07051020
340159c4:	07050c20 	.word	0x07050c20
340159c8:	07050820 	.word	0x07050820
340159cc:	07050420 	.word	0x07050420
340159d0:	07041820 	.word	0x07041820
340159d4:	07041420 	.word	0x07041420
340159d8:	07041020 	.word	0x07041020
340159dc:	07040c20 	.word	0x07040c20
340159e0:	07040820 	.word	0x07040820
340159e4:	07040420 	.word	0x07040420
340159e8:	07031820 	.word	0x07031820
340159ec:	07031420 	.word	0x07031420
340159f0:	07031020 	.word	0x07031020
340159f4:	07030c20 	.word	0x07030c20
340159f8:	07030820 	.word	0x07030820
340159fc:	07030420 	.word	0x07030420
34015a00:	07021820 	.word	0x07021820
34015a04:	07021420 	.word	0x07021420
34015a08:	07021020 	.word	0x07021020
34015a0c:	07020c20 	.word	0x07020c20
34015a10:	07020820 	.word	0x07020820
34015a14:	07020420 	.word	0x07020420
34015a18:	07011820 	.word	0x07011820
34015a1c:	07011420 	.word	0x07011420
34015a20:	07011020 	.word	0x07011020
34015a24:	07010c20 	.word	0x07010c20
34015a28:	07010820 	.word	0x07010820
34015a2c:	07010420 	.word	0x07010420
34015a30:	07001820 	.word	0x07001820
34015a34:	07001420 	.word	0x07001420
34015a38:	07001020 	.word	0x07001020
34015a3c:	07000c20 	.word	0x07000c20
34015a40:	07000420 	.word	0x07000420
34015a44:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015a48:	f7f4 fa80 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015a4c:	4603      	mov	r3, r0
34015a4e:	4618      	mov	r0, r3
34015a50:	f7fd fb74 	bl	3401313c <RCCEx_GetHCLKFreq>
34015a54:	4603      	mov	r3, r0
34015a56:	4618      	mov	r0, r3
34015a58:	f7fd fb91 	bl	3401317e <RCCEx_GetPCLK2Freq>
34015a5c:	60f8      	str	r0, [r7, #12]
      break;
34015a5e:	e109      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015a60:	f7f4 fa74 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015a64:	4603      	mov	r3, r0
34015a66:	4618      	mov	r0, r3
34015a68:	f7fd fb68 	bl	3401313c <RCCEx_GetHCLKFreq>
34015a6c:	4603      	mov	r3, r0
34015a6e:	4618      	mov	r0, r3
34015a70:	f7fd fb96 	bl	340131a0 <RCCEx_GetPCLK4Freq>
34015a74:	60f8      	str	r0, [r7, #12]
      break;
34015a76:	e0fd      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34015a78:	2007      	movs	r0, #7
34015a7a:	f7fd fe4b 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34015a7e:	60f8      	str	r0, [r7, #12]
      break;
34015a80:	e0f8      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34015a82:	f7f5 fe45 	bl	3400b710 <LL_RCC_IC8_IsEnabled>
34015a86:	4603      	mov	r3, r0
34015a88:	2b00      	cmp	r3, #0
34015a8a:	f000 80e8 	beq.w	34015c5e <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34015a8e:	f7f5 fe61 	bl	3400b754 <LL_RCC_IC8_GetDivider>
34015a92:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34015a94:	f7f5 fe50 	bl	3400b738 <LL_RCC_IC8_GetSource>
34015a98:	4603      	mov	r3, r0
34015a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015a9e:	d029      	beq.n	34015af4 <RCCEx_GetSPICLKFreq+0x408>
34015aa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015aa4:	d82f      	bhi.n	34015b06 <RCCEx_GetSPICLKFreq+0x41a>
34015aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015aaa:	d01a      	beq.n	34015ae2 <RCCEx_GetSPICLKFreq+0x3f6>
34015aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015ab0:	d829      	bhi.n	34015b06 <RCCEx_GetSPICLKFreq+0x41a>
34015ab2:	2b00      	cmp	r3, #0
34015ab4:	d003      	beq.n	34015abe <RCCEx_GetSPICLKFreq+0x3d2>
34015ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015aba:	d009      	beq.n	34015ad0 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34015abc:	e023      	b.n	34015b06 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015abe:	f7fd fa25 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015ac2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015ac4:	68fa      	ldr	r2, [r7, #12]
34015ac6:	68bb      	ldr	r3, [r7, #8]
34015ac8:	fbb2 f3f3 	udiv	r3, r2, r3
34015acc:	60fb      	str	r3, [r7, #12]
            break;
34015ace:	e01b      	b.n	34015b08 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015ad0:	f7fd fa62 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015ad4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015ad6:	68fa      	ldr	r2, [r7, #12]
34015ad8:	68bb      	ldr	r3, [r7, #8]
34015ada:	fbb2 f3f3 	udiv	r3, r2, r3
34015ade:	60fb      	str	r3, [r7, #12]
            break;
34015ae0:	e012      	b.n	34015b08 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015ae2:	f7fd fa9f 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015ae6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015ae8:	68fa      	ldr	r2, [r7, #12]
34015aea:	68bb      	ldr	r3, [r7, #8]
34015aec:	fbb2 f3f3 	udiv	r3, r2, r3
34015af0:	60fb      	str	r3, [r7, #12]
            break;
34015af2:	e009      	b.n	34015b08 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015af4:	f7fd fadc 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015af8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015afa:	68fa      	ldr	r2, [r7, #12]
34015afc:	68bb      	ldr	r3, [r7, #8]
34015afe:	fbb2 f3f3 	udiv	r3, r2, r3
34015b02:	60fb      	str	r3, [r7, #12]
            break;
34015b04:	e000      	b.n	34015b08 <RCCEx_GetSPICLKFreq+0x41c>
            break;
34015b06:	bf00      	nop
        }
      }
      break;
34015b08:	e0a9      	b.n	34015c5e <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
34015b0a:	f7f5 fe41 	bl	3400b790 <LL_RCC_IC9_IsEnabled>
34015b0e:	4603      	mov	r3, r0
34015b10:	2b00      	cmp	r3, #0
34015b12:	f000 80a6 	beq.w	34015c62 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
34015b16:	f7f5 fe5d 	bl	3400b7d4 <LL_RCC_IC9_GetDivider>
34015b1a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34015b1c:	f7f5 fe4c 	bl	3400b7b8 <LL_RCC_IC9_GetSource>
34015b20:	4603      	mov	r3, r0
34015b22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015b26:	d029      	beq.n	34015b7c <RCCEx_GetSPICLKFreq+0x490>
34015b28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015b2c:	d82f      	bhi.n	34015b8e <RCCEx_GetSPICLKFreq+0x4a2>
34015b2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015b32:	d01a      	beq.n	34015b6a <RCCEx_GetSPICLKFreq+0x47e>
34015b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015b38:	d829      	bhi.n	34015b8e <RCCEx_GetSPICLKFreq+0x4a2>
34015b3a:	2b00      	cmp	r3, #0
34015b3c:	d003      	beq.n	34015b46 <RCCEx_GetSPICLKFreq+0x45a>
34015b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015b42:	d009      	beq.n	34015b58 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34015b44:	e023      	b.n	34015b8e <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015b46:	f7fd f9e1 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015b4a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015b4c:	68fa      	ldr	r2, [r7, #12]
34015b4e:	68bb      	ldr	r3, [r7, #8]
34015b50:	fbb2 f3f3 	udiv	r3, r2, r3
34015b54:	60fb      	str	r3, [r7, #12]
            break;
34015b56:	e01b      	b.n	34015b90 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015b58:	f7fd fa1e 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015b5c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015b5e:	68fa      	ldr	r2, [r7, #12]
34015b60:	68bb      	ldr	r3, [r7, #8]
34015b62:	fbb2 f3f3 	udiv	r3, r2, r3
34015b66:	60fb      	str	r3, [r7, #12]
            break;
34015b68:	e012      	b.n	34015b90 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015b6a:	f7fd fa5b 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015b6e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015b70:	68fa      	ldr	r2, [r7, #12]
34015b72:	68bb      	ldr	r3, [r7, #8]
34015b74:	fbb2 f3f3 	udiv	r3, r2, r3
34015b78:	60fb      	str	r3, [r7, #12]
            break;
34015b7a:	e009      	b.n	34015b90 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015b7c:	f7fd fa98 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015b80:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015b82:	68fa      	ldr	r2, [r7, #12]
34015b84:	68bb      	ldr	r3, [r7, #8]
34015b86:	fbb2 f3f3 	udiv	r3, r2, r3
34015b8a:	60fb      	str	r3, [r7, #12]
            break;
34015b8c:	e000      	b.n	34015b90 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
34015b8e:	bf00      	nop
        }
      }
      break;
34015b90:	e067      	b.n	34015c62 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34015b92:	f7f5 fefd 	bl	3400b990 <LL_RCC_IC14_IsEnabled>
34015b96:	4603      	mov	r3, r0
34015b98:	2b00      	cmp	r3, #0
34015b9a:	d064      	beq.n	34015c66 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34015b9c:	f7f5 ff1a 	bl	3400b9d4 <LL_RCC_IC14_GetDivider>
34015ba0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34015ba2:	f7f5 ff09 	bl	3400b9b8 <LL_RCC_IC14_GetSource>
34015ba6:	4603      	mov	r3, r0
34015ba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015bac:	d029      	beq.n	34015c02 <RCCEx_GetSPICLKFreq+0x516>
34015bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015bb2:	d82f      	bhi.n	34015c14 <RCCEx_GetSPICLKFreq+0x528>
34015bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015bb8:	d01a      	beq.n	34015bf0 <RCCEx_GetSPICLKFreq+0x504>
34015bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015bbe:	d829      	bhi.n	34015c14 <RCCEx_GetSPICLKFreq+0x528>
34015bc0:	2b00      	cmp	r3, #0
34015bc2:	d003      	beq.n	34015bcc <RCCEx_GetSPICLKFreq+0x4e0>
34015bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015bc8:	d009      	beq.n	34015bde <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34015bca:	e023      	b.n	34015c14 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015bcc:	f7fd f99e 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015bd0:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015bd2:	68fa      	ldr	r2, [r7, #12]
34015bd4:	68bb      	ldr	r3, [r7, #8]
34015bd6:	fbb2 f3f3 	udiv	r3, r2, r3
34015bda:	60fb      	str	r3, [r7, #12]
            break;
34015bdc:	e01b      	b.n	34015c16 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015bde:	f7fd f9db 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015be2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015be4:	68fa      	ldr	r2, [r7, #12]
34015be6:	68bb      	ldr	r3, [r7, #8]
34015be8:	fbb2 f3f3 	udiv	r3, r2, r3
34015bec:	60fb      	str	r3, [r7, #12]
            break;
34015bee:	e012      	b.n	34015c16 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015bf0:	f7fd fa18 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015bf4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015bf6:	68fa      	ldr	r2, [r7, #12]
34015bf8:	68bb      	ldr	r3, [r7, #8]
34015bfa:	fbb2 f3f3 	udiv	r3, r2, r3
34015bfe:	60fb      	str	r3, [r7, #12]
            break;
34015c00:	e009      	b.n	34015c16 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015c02:	f7fd fa55 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015c06:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34015c08:	68fa      	ldr	r2, [r7, #12]
34015c0a:	68bb      	ldr	r3, [r7, #8]
34015c0c:	fbb2 f3f3 	udiv	r3, r2, r3
34015c10:	60fb      	str	r3, [r7, #12]
            break;
34015c12:	e000      	b.n	34015c16 <RCCEx_GetSPICLKFreq+0x52a>
            break;
34015c14:	bf00      	nop
        }
      }
      break;
34015c16:	e026      	b.n	34015c66 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34015c18:	f7f4 fd96 	bl	3400a748 <LL_RCC_HSI_IsReady>
34015c1c:	4603      	mov	r3, r0
34015c1e:	2b00      	cmp	r3, #0
34015c20:	d023      	beq.n	34015c6a <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34015c22:	f7f4 fda3 	bl	3400a76c <LL_RCC_HSI_GetDivider>
34015c26:	4603      	mov	r3, r0
34015c28:	09db      	lsrs	r3, r3, #7
34015c2a:	4a15      	ldr	r2, [pc, #84]	@ (34015c80 <RCCEx_GetSPICLKFreq+0x594>)
34015c2c:	fa22 f303 	lsr.w	r3, r2, r3
34015c30:	60fb      	str	r3, [r7, #12]
      }
      break;
34015c32:	e01a      	b.n	34015c6a <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34015c34:	f7f4 fda8 	bl	3400a788 <LL_RCC_MSI_IsReady>
34015c38:	4603      	mov	r3, r0
34015c3a:	2b00      	cmp	r3, #0
34015c3c:	d017      	beq.n	34015c6e <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
34015c3e:	4b11      	ldr	r3, [pc, #68]	@ (34015c84 <RCCEx_GetSPICLKFreq+0x598>)
34015c40:	60fb      	str	r3, [r7, #12]
      }
      break;
34015c42:	e014      	b.n	34015c6e <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
34015c44:	4b10      	ldr	r3, [pc, #64]	@ (34015c88 <RCCEx_GetSPICLKFreq+0x59c>)
34015c46:	60fb      	str	r3, [r7, #12]
      break;
34015c48:	e014      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34015c4a:	f7f4 fd6b 	bl	3400a724 <LL_RCC_HSE_IsReady>
34015c4e:	4603      	mov	r3, r0
34015c50:	2b00      	cmp	r3, #0
34015c52:	d00e      	beq.n	34015c72 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
34015c54:	4b0d      	ldr	r3, [pc, #52]	@ (34015c8c <RCCEx_GetSPICLKFreq+0x5a0>)
34015c56:	60fb      	str	r3, [r7, #12]
      }
      break;
34015c58:	e00b      	b.n	34015c72 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
34015c5a:	bf00      	nop
34015c5c:	e00a      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c5e:	bf00      	nop
34015c60:	e008      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c62:	bf00      	nop
34015c64:	e006      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c66:	bf00      	nop
34015c68:	e004      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c6a:	bf00      	nop
34015c6c:	e002      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c6e:	bf00      	nop
34015c70:	e000      	b.n	34015c74 <RCCEx_GetSPICLKFreq+0x588>
      break;
34015c72:	bf00      	nop
  }

  return spi_frequency;
34015c74:	68fb      	ldr	r3, [r7, #12]
}
34015c76:	4618      	mov	r0, r3
34015c78:	3710      	adds	r7, #16
34015c7a:	46bd      	mov	sp, r7
34015c7c:	bd80      	pop	{r7, pc}
34015c7e:	bf00      	nop
34015c80:	03d09000 	.word	0x03d09000
34015c84:	003d0900 	.word	0x003d0900
34015c88:	00bb8000 	.word	0x00bb8000
34015c8c:	02dc6c00 	.word	0x02dc6c00

34015c90 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
34015c90:	b580      	push	{r7, lr}
34015c92:	b084      	sub	sp, #16
34015c94:	af00      	add	r7, sp, #0
34015c96:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34015c98:	2300      	movs	r3, #0
34015c9a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34015c9c:	6878      	ldr	r0, [r7, #4]
34015c9e:	f7f5 f947 	bl	3400af30 <LL_RCC_GetUARTClockSource>
34015ca2:	4603      	mov	r3, r0
34015ca4:	4aa2      	ldr	r2, [pc, #648]	@ (34015f30 <RCCEx_GetUARTCLKFreq+0x2a0>)
34015ca6:	4293      	cmp	r3, r2
34015ca8:	f000 81e8 	beq.w	3401607c <RCCEx_GetUARTCLKFreq+0x3ec>
34015cac:	4aa0      	ldr	r2, [pc, #640]	@ (34015f30 <RCCEx_GetUARTCLKFreq+0x2a0>)
34015cae:	4293      	cmp	r3, r2
34015cb0:	f200 8203 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015cb4:	4a9f      	ldr	r2, [pc, #636]	@ (34015f34 <RCCEx_GetUARTCLKFreq+0x2a4>)
34015cb6:	4293      	cmp	r3, r2
34015cb8:	f000 81e0 	beq.w	3401607c <RCCEx_GetUARTCLKFreq+0x3ec>
34015cbc:	4a9d      	ldr	r2, [pc, #628]	@ (34015f34 <RCCEx_GetUARTCLKFreq+0x2a4>)
34015cbe:	4293      	cmp	r3, r2
34015cc0:	f200 81fb 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015cc4:	4a9c      	ldr	r2, [pc, #624]	@ (34015f38 <RCCEx_GetUARTCLKFreq+0x2a8>)
34015cc6:	4293      	cmp	r3, r2
34015cc8:	f000 81d8 	beq.w	3401607c <RCCEx_GetUARTCLKFreq+0x3ec>
34015ccc:	4a9a      	ldr	r2, [pc, #616]	@ (34015f38 <RCCEx_GetUARTCLKFreq+0x2a8>)
34015cce:	4293      	cmp	r3, r2
34015cd0:	f200 81f3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015cd4:	4a99      	ldr	r2, [pc, #612]	@ (34015f3c <RCCEx_GetUARTCLKFreq+0x2ac>)
34015cd6:	4293      	cmp	r3, r2
34015cd8:	f000 81d0 	beq.w	3401607c <RCCEx_GetUARTCLKFreq+0x3ec>
34015cdc:	4a97      	ldr	r2, [pc, #604]	@ (34015f3c <RCCEx_GetUARTCLKFreq+0x2ac>)
34015cde:	4293      	cmp	r3, r2
34015ce0:	f200 81eb 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015ce4:	4a96      	ldr	r2, [pc, #600]	@ (34015f40 <RCCEx_GetUARTCLKFreq+0x2b0>)
34015ce6:	4293      	cmp	r3, r2
34015ce8:	f000 81c8 	beq.w	3401607c <RCCEx_GetUARTCLKFreq+0x3ec>
34015cec:	4a94      	ldr	r2, [pc, #592]	@ (34015f40 <RCCEx_GetUARTCLKFreq+0x2b0>)
34015cee:	4293      	cmp	r3, r2
34015cf0:	f200 81e3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015cf4:	4a93      	ldr	r2, [pc, #588]	@ (34015f44 <RCCEx_GetUARTCLKFreq+0x2b4>)
34015cf6:	4293      	cmp	r3, r2
34015cf8:	f000 81ce 	beq.w	34016098 <RCCEx_GetUARTCLKFreq+0x408>
34015cfc:	4a91      	ldr	r2, [pc, #580]	@ (34015f44 <RCCEx_GetUARTCLKFreq+0x2b4>)
34015cfe:	4293      	cmp	r3, r2
34015d00:	f200 81db 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d04:	4a90      	ldr	r2, [pc, #576]	@ (34015f48 <RCCEx_GetUARTCLKFreq+0x2b8>)
34015d06:	4293      	cmp	r3, r2
34015d08:	f000 81c6 	beq.w	34016098 <RCCEx_GetUARTCLKFreq+0x408>
34015d0c:	4a8e      	ldr	r2, [pc, #568]	@ (34015f48 <RCCEx_GetUARTCLKFreq+0x2b8>)
34015d0e:	4293      	cmp	r3, r2
34015d10:	f200 81d3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d14:	4a8d      	ldr	r2, [pc, #564]	@ (34015f4c <RCCEx_GetUARTCLKFreq+0x2bc>)
34015d16:	4293      	cmp	r3, r2
34015d18:	f000 81be 	beq.w	34016098 <RCCEx_GetUARTCLKFreq+0x408>
34015d1c:	4a8b      	ldr	r2, [pc, #556]	@ (34015f4c <RCCEx_GetUARTCLKFreq+0x2bc>)
34015d1e:	4293      	cmp	r3, r2
34015d20:	f200 81cb 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d24:	4a8a      	ldr	r2, [pc, #552]	@ (34015f50 <RCCEx_GetUARTCLKFreq+0x2c0>)
34015d26:	4293      	cmp	r3, r2
34015d28:	f000 81b6 	beq.w	34016098 <RCCEx_GetUARTCLKFreq+0x408>
34015d2c:	4a88      	ldr	r2, [pc, #544]	@ (34015f50 <RCCEx_GetUARTCLKFreq+0x2c0>)
34015d2e:	4293      	cmp	r3, r2
34015d30:	f200 81c3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d34:	4a87      	ldr	r2, [pc, #540]	@ (34015f54 <RCCEx_GetUARTCLKFreq+0x2c4>)
34015d36:	4293      	cmp	r3, r2
34015d38:	f000 81ae 	beq.w	34016098 <RCCEx_GetUARTCLKFreq+0x408>
34015d3c:	4a85      	ldr	r2, [pc, #532]	@ (34015f54 <RCCEx_GetUARTCLKFreq+0x2c4>)
34015d3e:	4293      	cmp	r3, r2
34015d40:	f200 81bb 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d44:	4a84      	ldr	r2, [pc, #528]	@ (34015f58 <RCCEx_GetUARTCLKFreq+0x2c8>)
34015d46:	4293      	cmp	r3, r2
34015d48:	f000 81ae 	beq.w	340160a8 <RCCEx_GetUARTCLKFreq+0x418>
34015d4c:	4a82      	ldr	r2, [pc, #520]	@ (34015f58 <RCCEx_GetUARTCLKFreq+0x2c8>)
34015d4e:	4293      	cmp	r3, r2
34015d50:	f200 81b3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d54:	4a81      	ldr	r2, [pc, #516]	@ (34015f5c <RCCEx_GetUARTCLKFreq+0x2cc>)
34015d56:	4293      	cmp	r3, r2
34015d58:	f000 81a6 	beq.w	340160a8 <RCCEx_GetUARTCLKFreq+0x418>
34015d5c:	4a7f      	ldr	r2, [pc, #508]	@ (34015f5c <RCCEx_GetUARTCLKFreq+0x2cc>)
34015d5e:	4293      	cmp	r3, r2
34015d60:	f200 81ab 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d64:	4a7e      	ldr	r2, [pc, #504]	@ (34015f60 <RCCEx_GetUARTCLKFreq+0x2d0>)
34015d66:	4293      	cmp	r3, r2
34015d68:	f000 819e 	beq.w	340160a8 <RCCEx_GetUARTCLKFreq+0x418>
34015d6c:	4a7c      	ldr	r2, [pc, #496]	@ (34015f60 <RCCEx_GetUARTCLKFreq+0x2d0>)
34015d6e:	4293      	cmp	r3, r2
34015d70:	f200 81a3 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d74:	4a7b      	ldr	r2, [pc, #492]	@ (34015f64 <RCCEx_GetUARTCLKFreq+0x2d4>)
34015d76:	4293      	cmp	r3, r2
34015d78:	f000 8196 	beq.w	340160a8 <RCCEx_GetUARTCLKFreq+0x418>
34015d7c:	4a79      	ldr	r2, [pc, #484]	@ (34015f64 <RCCEx_GetUARTCLKFreq+0x2d4>)
34015d7e:	4293      	cmp	r3, r2
34015d80:	f200 819b 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d84:	4a78      	ldr	r2, [pc, #480]	@ (34015f68 <RCCEx_GetUARTCLKFreq+0x2d8>)
34015d86:	4293      	cmp	r3, r2
34015d88:	f000 818e 	beq.w	340160a8 <RCCEx_GetUARTCLKFreq+0x418>
34015d8c:	4a76      	ldr	r2, [pc, #472]	@ (34015f68 <RCCEx_GetUARTCLKFreq+0x2d8>)
34015d8e:	4293      	cmp	r3, r2
34015d90:	f200 8193 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015d94:	4a75      	ldr	r2, [pc, #468]	@ (34015f6c <RCCEx_GetUARTCLKFreq+0x2dc>)
34015d96:	4293      	cmp	r3, r2
34015d98:	f000 812d 	beq.w	34015ff6 <RCCEx_GetUARTCLKFreq+0x366>
34015d9c:	4a73      	ldr	r2, [pc, #460]	@ (34015f6c <RCCEx_GetUARTCLKFreq+0x2dc>)
34015d9e:	4293      	cmp	r3, r2
34015da0:	f200 818b 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015da4:	4a72      	ldr	r2, [pc, #456]	@ (34015f70 <RCCEx_GetUARTCLKFreq+0x2e0>)
34015da6:	4293      	cmp	r3, r2
34015da8:	f000 8125 	beq.w	34015ff6 <RCCEx_GetUARTCLKFreq+0x366>
34015dac:	4a70      	ldr	r2, [pc, #448]	@ (34015f70 <RCCEx_GetUARTCLKFreq+0x2e0>)
34015dae:	4293      	cmp	r3, r2
34015db0:	f200 8183 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015db4:	4a6f      	ldr	r2, [pc, #444]	@ (34015f74 <RCCEx_GetUARTCLKFreq+0x2e4>)
34015db6:	4293      	cmp	r3, r2
34015db8:	f000 811d 	beq.w	34015ff6 <RCCEx_GetUARTCLKFreq+0x366>
34015dbc:	4a6d      	ldr	r2, [pc, #436]	@ (34015f74 <RCCEx_GetUARTCLKFreq+0x2e4>)
34015dbe:	4293      	cmp	r3, r2
34015dc0:	f200 817b 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015dc4:	4a6c      	ldr	r2, [pc, #432]	@ (34015f78 <RCCEx_GetUARTCLKFreq+0x2e8>)
34015dc6:	4293      	cmp	r3, r2
34015dc8:	f000 8115 	beq.w	34015ff6 <RCCEx_GetUARTCLKFreq+0x366>
34015dcc:	4a6a      	ldr	r2, [pc, #424]	@ (34015f78 <RCCEx_GetUARTCLKFreq+0x2e8>)
34015dce:	4293      	cmp	r3, r2
34015dd0:	f200 8173 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015dd4:	4a69      	ldr	r2, [pc, #420]	@ (34015f7c <RCCEx_GetUARTCLKFreq+0x2ec>)
34015dd6:	4293      	cmp	r3, r2
34015dd8:	f000 810d 	beq.w	34015ff6 <RCCEx_GetUARTCLKFreq+0x366>
34015ddc:	4a67      	ldr	r2, [pc, #412]	@ (34015f7c <RCCEx_GetUARTCLKFreq+0x2ec>)
34015dde:	4293      	cmp	r3, r2
34015de0:	f200 816b 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015de4:	4a66      	ldr	r2, [pc, #408]	@ (34015f80 <RCCEx_GetUARTCLKFreq+0x2f0>)
34015de6:	4293      	cmp	r3, r2
34015de8:	d07b      	beq.n	34015ee2 <RCCEx_GetUARTCLKFreq+0x252>
34015dea:	4a65      	ldr	r2, [pc, #404]	@ (34015f80 <RCCEx_GetUARTCLKFreq+0x2f0>)
34015dec:	4293      	cmp	r3, r2
34015dee:	f200 8164 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015df2:	4a64      	ldr	r2, [pc, #400]	@ (34015f84 <RCCEx_GetUARTCLKFreq+0x2f4>)
34015df4:	4293      	cmp	r3, r2
34015df6:	d074      	beq.n	34015ee2 <RCCEx_GetUARTCLKFreq+0x252>
34015df8:	4a62      	ldr	r2, [pc, #392]	@ (34015f84 <RCCEx_GetUARTCLKFreq+0x2f4>)
34015dfa:	4293      	cmp	r3, r2
34015dfc:	f200 815d 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e00:	4a61      	ldr	r2, [pc, #388]	@ (34015f88 <RCCEx_GetUARTCLKFreq+0x2f8>)
34015e02:	4293      	cmp	r3, r2
34015e04:	d06d      	beq.n	34015ee2 <RCCEx_GetUARTCLKFreq+0x252>
34015e06:	4a60      	ldr	r2, [pc, #384]	@ (34015f88 <RCCEx_GetUARTCLKFreq+0x2f8>)
34015e08:	4293      	cmp	r3, r2
34015e0a:	f200 8156 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e0e:	4a5f      	ldr	r2, [pc, #380]	@ (34015f8c <RCCEx_GetUARTCLKFreq+0x2fc>)
34015e10:	4293      	cmp	r3, r2
34015e12:	d066      	beq.n	34015ee2 <RCCEx_GetUARTCLKFreq+0x252>
34015e14:	4a5d      	ldr	r2, [pc, #372]	@ (34015f8c <RCCEx_GetUARTCLKFreq+0x2fc>)
34015e16:	4293      	cmp	r3, r2
34015e18:	f200 814f 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e1c:	4a5c      	ldr	r2, [pc, #368]	@ (34015f90 <RCCEx_GetUARTCLKFreq+0x300>)
34015e1e:	4293      	cmp	r3, r2
34015e20:	d05f      	beq.n	34015ee2 <RCCEx_GetUARTCLKFreq+0x252>
34015e22:	4a5b      	ldr	r2, [pc, #364]	@ (34015f90 <RCCEx_GetUARTCLKFreq+0x300>)
34015e24:	4293      	cmp	r3, r2
34015e26:	f200 8148 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e2a:	4a5a      	ldr	r2, [pc, #360]	@ (34015f94 <RCCEx_GetUARTCLKFreq+0x304>)
34015e2c:	4293      	cmp	r3, r2
34015e2e:	d053      	beq.n	34015ed8 <RCCEx_GetUARTCLKFreq+0x248>
34015e30:	4a58      	ldr	r2, [pc, #352]	@ (34015f94 <RCCEx_GetUARTCLKFreq+0x304>)
34015e32:	4293      	cmp	r3, r2
34015e34:	f200 8141 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e38:	4a57      	ldr	r2, [pc, #348]	@ (34015f98 <RCCEx_GetUARTCLKFreq+0x308>)
34015e3a:	4293      	cmp	r3, r2
34015e3c:	d04c      	beq.n	34015ed8 <RCCEx_GetUARTCLKFreq+0x248>
34015e3e:	4a56      	ldr	r2, [pc, #344]	@ (34015f98 <RCCEx_GetUARTCLKFreq+0x308>)
34015e40:	4293      	cmp	r3, r2
34015e42:	f200 813a 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e46:	4a55      	ldr	r2, [pc, #340]	@ (34015f9c <RCCEx_GetUARTCLKFreq+0x30c>)
34015e48:	4293      	cmp	r3, r2
34015e4a:	d045      	beq.n	34015ed8 <RCCEx_GetUARTCLKFreq+0x248>
34015e4c:	4a53      	ldr	r2, [pc, #332]	@ (34015f9c <RCCEx_GetUARTCLKFreq+0x30c>)
34015e4e:	4293      	cmp	r3, r2
34015e50:	f200 8133 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e54:	4a52      	ldr	r2, [pc, #328]	@ (34015fa0 <RCCEx_GetUARTCLKFreq+0x310>)
34015e56:	4293      	cmp	r3, r2
34015e58:	d03e      	beq.n	34015ed8 <RCCEx_GetUARTCLKFreq+0x248>
34015e5a:	4a51      	ldr	r2, [pc, #324]	@ (34015fa0 <RCCEx_GetUARTCLKFreq+0x310>)
34015e5c:	4293      	cmp	r3, r2
34015e5e:	f200 812c 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e62:	4a50      	ldr	r2, [pc, #320]	@ (34015fa4 <RCCEx_GetUARTCLKFreq+0x314>)
34015e64:	4293      	cmp	r3, r2
34015e66:	d037      	beq.n	34015ed8 <RCCEx_GetUARTCLKFreq+0x248>
34015e68:	4a4e      	ldr	r2, [pc, #312]	@ (34015fa4 <RCCEx_GetUARTCLKFreq+0x314>)
34015e6a:	4293      	cmp	r3, r2
34015e6c:	f200 8125 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e70:	4a4d      	ldr	r2, [pc, #308]	@ (34015fa8 <RCCEx_GetUARTCLKFreq+0x318>)
34015e72:	4293      	cmp	r3, r2
34015e74:	d018      	beq.n	34015ea8 <RCCEx_GetUARTCLKFreq+0x218>
34015e76:	4a4c      	ldr	r2, [pc, #304]	@ (34015fa8 <RCCEx_GetUARTCLKFreq+0x318>)
34015e78:	4293      	cmp	r3, r2
34015e7a:	f200 811e 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e7e:	4a4b      	ldr	r2, [pc, #300]	@ (34015fac <RCCEx_GetUARTCLKFreq+0x31c>)
34015e80:	4293      	cmp	r3, r2
34015e82:	d011      	beq.n	34015ea8 <RCCEx_GetUARTCLKFreq+0x218>
34015e84:	4a49      	ldr	r2, [pc, #292]	@ (34015fac <RCCEx_GetUARTCLKFreq+0x31c>)
34015e86:	4293      	cmp	r3, r2
34015e88:	f200 8117 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e8c:	4a48      	ldr	r2, [pc, #288]	@ (34015fb0 <RCCEx_GetUARTCLKFreq+0x320>)
34015e8e:	4293      	cmp	r3, r2
34015e90:	d00a      	beq.n	34015ea8 <RCCEx_GetUARTCLKFreq+0x218>
34015e92:	4a47      	ldr	r2, [pc, #284]	@ (34015fb0 <RCCEx_GetUARTCLKFreq+0x320>)
34015e94:	4293      	cmp	r3, r2
34015e96:	f200 8110 	bhi.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
34015e9a:	4a46      	ldr	r2, [pc, #280]	@ (34015fb4 <RCCEx_GetUARTCLKFreq+0x324>)
34015e9c:	4293      	cmp	r3, r2
34015e9e:	d00f      	beq.n	34015ec0 <RCCEx_GetUARTCLKFreq+0x230>
34015ea0:	4a45      	ldr	r2, [pc, #276]	@ (34015fb8 <RCCEx_GetUARTCLKFreq+0x328>)
34015ea2:	4293      	cmp	r3, r2
34015ea4:	f040 8109 	bne.w	340160ba <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015ea8:	f7f4 f850 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015eac:	4603      	mov	r3, r0
34015eae:	4618      	mov	r0, r3
34015eb0:	f7fd f944 	bl	3401313c <RCCEx_GetHCLKFreq>
34015eb4:	4603      	mov	r3, r0
34015eb6:	4618      	mov	r0, r3
34015eb8:	f7fd f951 	bl	3401315e <RCCEx_GetPCLK1Freq>
34015ebc:	60f8      	str	r0, [r7, #12]
      break;
34015ebe:	e107      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34015ec0:	f7f4 f844 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34015ec4:	4603      	mov	r3, r0
34015ec6:	4618      	mov	r0, r3
34015ec8:	f7fd f938 	bl	3401313c <RCCEx_GetHCLKFreq>
34015ecc:	4603      	mov	r3, r0
34015ece:	4618      	mov	r0, r3
34015ed0:	f7fd f955 	bl	3401317e <RCCEx_GetPCLK2Freq>
34015ed4:	60f8      	str	r0, [r7, #12]
      break;
34015ed6:	e0fb      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34015ed8:	2007      	movs	r0, #7
34015eda:	f7fd fc1b 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34015ede:	60f8      	str	r0, [r7, #12]
      break;
34015ee0:	e0f6      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
34015ee2:	f7f5 fc55 	bl	3400b790 <LL_RCC_IC9_IsEnabled>
34015ee6:	4603      	mov	r3, r0
34015ee8:	2b00      	cmp	r3, #0
34015eea:	f000 80e8 	beq.w	340160be <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
34015eee:	f7f5 fc71 	bl	3400b7d4 <LL_RCC_IC9_GetDivider>
34015ef2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34015ef4:	f7f5 fc60 	bl	3400b7b8 <LL_RCC_IC9_GetSource>
34015ef8:	4603      	mov	r3, r0
34015efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015efe:	d06f      	beq.n	34015fe0 <RCCEx_GetUARTCLKFreq+0x350>
34015f00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015f04:	d875      	bhi.n	34015ff2 <RCCEx_GetUARTCLKFreq+0x362>
34015f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015f0a:	d060      	beq.n	34015fce <RCCEx_GetUARTCLKFreq+0x33e>
34015f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015f10:	d86f      	bhi.n	34015ff2 <RCCEx_GetUARTCLKFreq+0x362>
34015f12:	2b00      	cmp	r3, #0
34015f14:	d003      	beq.n	34015f1e <RCCEx_GetUARTCLKFreq+0x28e>
34015f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015f1a:	d04f      	beq.n	34015fbc <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34015f1c:	e069      	b.n	34015ff2 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015f1e:	f7fc fff5 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34015f22:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34015f24:	68fa      	ldr	r2, [r7, #12]
34015f26:	68bb      	ldr	r3, [r7, #8]
34015f28:	fbb2 f3f3 	udiv	r3, r2, r3
34015f2c:	60fb      	str	r3, [r7, #12]
            break;
34015f2e:	e061      	b.n	34015ff4 <RCCEx_GetUARTCLKFreq+0x364>
34015f30:	07061c30 	.word	0x07061c30
34015f34:	07061830 	.word	0x07061830
34015f38:	07061030 	.word	0x07061030
34015f3c:	07060c30 	.word	0x07060c30
34015f40:	07060034 	.word	0x07060034
34015f44:	07051c30 	.word	0x07051c30
34015f48:	07051830 	.word	0x07051830
34015f4c:	07051030 	.word	0x07051030
34015f50:	07050c30 	.word	0x07050c30
34015f54:	07050034 	.word	0x07050034
34015f58:	07041c30 	.word	0x07041c30
34015f5c:	07041830 	.word	0x07041830
34015f60:	07041030 	.word	0x07041030
34015f64:	07040c30 	.word	0x07040c30
34015f68:	07040034 	.word	0x07040034
34015f6c:	07031c30 	.word	0x07031c30
34015f70:	07031830 	.word	0x07031830
34015f74:	07031030 	.word	0x07031030
34015f78:	07030c30 	.word	0x07030c30
34015f7c:	07030034 	.word	0x07030034
34015f80:	07021c30 	.word	0x07021c30
34015f84:	07021830 	.word	0x07021830
34015f88:	07021030 	.word	0x07021030
34015f8c:	07020c30 	.word	0x07020c30
34015f90:	07020034 	.word	0x07020034
34015f94:	07011c30 	.word	0x07011c30
34015f98:	07011830 	.word	0x07011830
34015f9c:	07011030 	.word	0x07011030
34015fa0:	07010c30 	.word	0x07010c30
34015fa4:	07010034 	.word	0x07010034
34015fa8:	07001c30 	.word	0x07001c30
34015fac:	07001830 	.word	0x07001830
34015fb0:	07001030 	.word	0x07001030
34015fb4:	07000034 	.word	0x07000034
34015fb8:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34015fbc:	f7fc ffec 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34015fc0:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34015fc2:	68fa      	ldr	r2, [r7, #12]
34015fc4:	68bb      	ldr	r3, [r7, #8]
34015fc6:	fbb2 f3f3 	udiv	r3, r2, r3
34015fca:	60fb      	str	r3, [r7, #12]
            break;
34015fcc:	e012      	b.n	34015ff4 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34015fce:	f7fd f829 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34015fd2:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34015fd4:	68fa      	ldr	r2, [r7, #12]
34015fd6:	68bb      	ldr	r3, [r7, #8]
34015fd8:	fbb2 f3f3 	udiv	r3, r2, r3
34015fdc:	60fb      	str	r3, [r7, #12]
            break;
34015fde:	e009      	b.n	34015ff4 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015fe0:	f7fd f866 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34015fe4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34015fe6:	68fa      	ldr	r2, [r7, #12]
34015fe8:	68bb      	ldr	r3, [r7, #8]
34015fea:	fbb2 f3f3 	udiv	r3, r2, r3
34015fee:	60fb      	str	r3, [r7, #12]
            break;
34015ff0:	e000      	b.n	34015ff4 <RCCEx_GetUARTCLKFreq+0x364>
            break;
34015ff2:	bf00      	nop
        }
      }
      break;
34015ff4:	e063      	b.n	340160be <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34015ff6:	f7f5 fccb 	bl	3400b990 <LL_RCC_IC14_IsEnabled>
34015ffa:	4603      	mov	r3, r0
34015ffc:	2b00      	cmp	r3, #0
34015ffe:	d060      	beq.n	340160c2 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34016000:	f7f5 fce8 	bl	3400b9d4 <LL_RCC_IC14_GetDivider>
34016004:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34016006:	f7f5 fcd7 	bl	3400b9b8 <LL_RCC_IC14_GetSource>
3401600a:	4603      	mov	r3, r0
3401600c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016010:	d029      	beq.n	34016066 <RCCEx_GetUARTCLKFreq+0x3d6>
34016012:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016016:	d82f      	bhi.n	34016078 <RCCEx_GetUARTCLKFreq+0x3e8>
34016018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401601c:	d01a      	beq.n	34016054 <RCCEx_GetUARTCLKFreq+0x3c4>
3401601e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016022:	d829      	bhi.n	34016078 <RCCEx_GetUARTCLKFreq+0x3e8>
34016024:	2b00      	cmp	r3, #0
34016026:	d003      	beq.n	34016030 <RCCEx_GetUARTCLKFreq+0x3a0>
34016028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401602c:	d009      	beq.n	34016042 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401602e:	e023      	b.n	34016078 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34016030:	f7fc ff6c 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34016034:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34016036:	68fa      	ldr	r2, [r7, #12]
34016038:	68bb      	ldr	r3, [r7, #8]
3401603a:	fbb2 f3f3 	udiv	r3, r2, r3
3401603e:	60fb      	str	r3, [r7, #12]
            break;
34016040:	e01b      	b.n	3401607a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016042:	f7fc ffa9 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34016046:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34016048:	68fa      	ldr	r2, [r7, #12]
3401604a:	68bb      	ldr	r3, [r7, #8]
3401604c:	fbb2 f3f3 	udiv	r3, r2, r3
34016050:	60fb      	str	r3, [r7, #12]
            break;
34016052:	e012      	b.n	3401607a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34016054:	f7fc ffe6 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34016058:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3401605a:	68fa      	ldr	r2, [r7, #12]
3401605c:	68bb      	ldr	r3, [r7, #8]
3401605e:	fbb2 f3f3 	udiv	r3, r2, r3
34016062:	60fb      	str	r3, [r7, #12]
            break;
34016064:	e009      	b.n	3401607a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34016066:	f7fd f823 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401606a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3401606c:	68fa      	ldr	r2, [r7, #12]
3401606e:	68bb      	ldr	r3, [r7, #8]
34016070:	fbb2 f3f3 	udiv	r3, r2, r3
34016074:	60fb      	str	r3, [r7, #12]
            break;
34016076:	e000      	b.n	3401607a <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34016078:	bf00      	nop
        }
      }
      break;
3401607a:	e022      	b.n	340160c2 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3401607c:	f7f4 fb64 	bl	3400a748 <LL_RCC_HSI_IsReady>
34016080:	4603      	mov	r3, r0
34016082:	2b00      	cmp	r3, #0
34016084:	d01f      	beq.n	340160c6 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34016086:	f7f4 fb71 	bl	3400a76c <LL_RCC_HSI_GetDivider>
3401608a:	4603      	mov	r3, r0
3401608c:	09db      	lsrs	r3, r3, #7
3401608e:	4a13      	ldr	r2, [pc, #76]	@ (340160dc <RCCEx_GetUARTCLKFreq+0x44c>)
34016090:	fa22 f303 	lsr.w	r3, r2, r3
34016094:	60fb      	str	r3, [r7, #12]
      }
      break;
34016096:	e016      	b.n	340160c6 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34016098:	f7f4 fb76 	bl	3400a788 <LL_RCC_MSI_IsReady>
3401609c:	4603      	mov	r3, r0
3401609e:	2b00      	cmp	r3, #0
340160a0:	d013      	beq.n	340160ca <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
340160a2:	4b0f      	ldr	r3, [pc, #60]	@ (340160e0 <RCCEx_GetUARTCLKFreq+0x450>)
340160a4:	60fb      	str	r3, [r7, #12]
      }
      break;
340160a6:	e010      	b.n	340160ca <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
340160a8:	f7f4 fb8e 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
340160ac:	4603      	mov	r3, r0
340160ae:	2b00      	cmp	r3, #0
340160b0:	d00d      	beq.n	340160ce <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
340160b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340160b6:	60fb      	str	r3, [r7, #12]
      }
      break;
340160b8:	e009      	b.n	340160ce <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
340160ba:	bf00      	nop
340160bc:	e008      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
      break;
340160be:	bf00      	nop
340160c0:	e006      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
      break;
340160c2:	bf00      	nop
340160c4:	e004      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
      break;
340160c6:	bf00      	nop
340160c8:	e002      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
      break;
340160ca:	bf00      	nop
340160cc:	e000      	b.n	340160d0 <RCCEx_GetUARTCLKFreq+0x440>
      break;
340160ce:	bf00      	nop
  }

  return uart_frequency;
340160d0:	68fb      	ldr	r3, [r7, #12]
}
340160d2:	4618      	mov	r0, r3
340160d4:	3710      	adds	r7, #16
340160d6:	46bd      	mov	sp, r7
340160d8:	bd80      	pop	{r7, pc}
340160da:	bf00      	nop
340160dc:	03d09000 	.word	0x03d09000
340160e0:	003d0900 	.word	0x003d0900

340160e4 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
340160e4:	b580      	push	{r7, lr}
340160e6:	b084      	sub	sp, #16
340160e8:	af00      	add	r7, sp, #0
340160ea:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
340160ec:	2300      	movs	r3, #0
340160ee:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340160f0:	6878      	ldr	r0, [r7, #4]
340160f2:	f7f4 ff11 	bl	3400af18 <LL_RCC_GetUSARTClockSource>
340160f6:	4603      	mov	r3, r0
340160f8:	4aa2      	ldr	r2, [pc, #648]	@ (34016384 <RCCEx_GetUSARTCLKFreq+0x2a0>)
340160fa:	4293      	cmp	r3, r2
340160fc:	f000 81e8 	beq.w	340164d0 <RCCEx_GetUSARTCLKFreq+0x3ec>
34016100:	4aa0      	ldr	r2, [pc, #640]	@ (34016384 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34016102:	4293      	cmp	r3, r2
34016104:	f200 8203 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016108:	4a9f      	ldr	r2, [pc, #636]	@ (34016388 <RCCEx_GetUSARTCLKFreq+0x2a4>)
3401610a:	4293      	cmp	r3, r2
3401610c:	f000 81e0 	beq.w	340164d0 <RCCEx_GetUSARTCLKFreq+0x3ec>
34016110:	4a9d      	ldr	r2, [pc, #628]	@ (34016388 <RCCEx_GetUSARTCLKFreq+0x2a4>)
34016112:	4293      	cmp	r3, r2
34016114:	f200 81fb 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016118:	4a9c      	ldr	r2, [pc, #624]	@ (3401638c <RCCEx_GetUSARTCLKFreq+0x2a8>)
3401611a:	4293      	cmp	r3, r2
3401611c:	f000 81d8 	beq.w	340164d0 <RCCEx_GetUSARTCLKFreq+0x3ec>
34016120:	4a9a      	ldr	r2, [pc, #616]	@ (3401638c <RCCEx_GetUSARTCLKFreq+0x2a8>)
34016122:	4293      	cmp	r3, r2
34016124:	f200 81f3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016128:	4a99      	ldr	r2, [pc, #612]	@ (34016390 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3401612a:	4293      	cmp	r3, r2
3401612c:	f000 81d0 	beq.w	340164d0 <RCCEx_GetUSARTCLKFreq+0x3ec>
34016130:	4a97      	ldr	r2, [pc, #604]	@ (34016390 <RCCEx_GetUSARTCLKFreq+0x2ac>)
34016132:	4293      	cmp	r3, r2
34016134:	f200 81eb 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016138:	4a96      	ldr	r2, [pc, #600]	@ (34016394 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3401613a:	4293      	cmp	r3, r2
3401613c:	f000 81c8 	beq.w	340164d0 <RCCEx_GetUSARTCLKFreq+0x3ec>
34016140:	4a94      	ldr	r2, [pc, #592]	@ (34016394 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34016142:	4293      	cmp	r3, r2
34016144:	f200 81e3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016148:	4a93      	ldr	r2, [pc, #588]	@ (34016398 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3401614a:	4293      	cmp	r3, r2
3401614c:	f000 81ce 	beq.w	340164ec <RCCEx_GetUSARTCLKFreq+0x408>
34016150:	4a91      	ldr	r2, [pc, #580]	@ (34016398 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34016152:	4293      	cmp	r3, r2
34016154:	f200 81db 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016158:	4a90      	ldr	r2, [pc, #576]	@ (3401639c <RCCEx_GetUSARTCLKFreq+0x2b8>)
3401615a:	4293      	cmp	r3, r2
3401615c:	f000 81c6 	beq.w	340164ec <RCCEx_GetUSARTCLKFreq+0x408>
34016160:	4a8e      	ldr	r2, [pc, #568]	@ (3401639c <RCCEx_GetUSARTCLKFreq+0x2b8>)
34016162:	4293      	cmp	r3, r2
34016164:	f200 81d3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016168:	4a8d      	ldr	r2, [pc, #564]	@ (340163a0 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3401616a:	4293      	cmp	r3, r2
3401616c:	f000 81be 	beq.w	340164ec <RCCEx_GetUSARTCLKFreq+0x408>
34016170:	4a8b      	ldr	r2, [pc, #556]	@ (340163a0 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34016172:	4293      	cmp	r3, r2
34016174:	f200 81cb 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016178:	4a8a      	ldr	r2, [pc, #552]	@ (340163a4 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3401617a:	4293      	cmp	r3, r2
3401617c:	f000 81b6 	beq.w	340164ec <RCCEx_GetUSARTCLKFreq+0x408>
34016180:	4a88      	ldr	r2, [pc, #544]	@ (340163a4 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34016182:	4293      	cmp	r3, r2
34016184:	f200 81c3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016188:	4a87      	ldr	r2, [pc, #540]	@ (340163a8 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3401618a:	4293      	cmp	r3, r2
3401618c:	f000 81ae 	beq.w	340164ec <RCCEx_GetUSARTCLKFreq+0x408>
34016190:	4a85      	ldr	r2, [pc, #532]	@ (340163a8 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34016192:	4293      	cmp	r3, r2
34016194:	f200 81bb 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016198:	4a84      	ldr	r2, [pc, #528]	@ (340163ac <RCCEx_GetUSARTCLKFreq+0x2c8>)
3401619a:	4293      	cmp	r3, r2
3401619c:	f000 81ae 	beq.w	340164fc <RCCEx_GetUSARTCLKFreq+0x418>
340161a0:	4a82      	ldr	r2, [pc, #520]	@ (340163ac <RCCEx_GetUSARTCLKFreq+0x2c8>)
340161a2:	4293      	cmp	r3, r2
340161a4:	f200 81b3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161a8:	4a81      	ldr	r2, [pc, #516]	@ (340163b0 <RCCEx_GetUSARTCLKFreq+0x2cc>)
340161aa:	4293      	cmp	r3, r2
340161ac:	f000 81a6 	beq.w	340164fc <RCCEx_GetUSARTCLKFreq+0x418>
340161b0:	4a7f      	ldr	r2, [pc, #508]	@ (340163b0 <RCCEx_GetUSARTCLKFreq+0x2cc>)
340161b2:	4293      	cmp	r3, r2
340161b4:	f200 81ab 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161b8:	4a7e      	ldr	r2, [pc, #504]	@ (340163b4 <RCCEx_GetUSARTCLKFreq+0x2d0>)
340161ba:	4293      	cmp	r3, r2
340161bc:	f000 819e 	beq.w	340164fc <RCCEx_GetUSARTCLKFreq+0x418>
340161c0:	4a7c      	ldr	r2, [pc, #496]	@ (340163b4 <RCCEx_GetUSARTCLKFreq+0x2d0>)
340161c2:	4293      	cmp	r3, r2
340161c4:	f200 81a3 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161c8:	4a7b      	ldr	r2, [pc, #492]	@ (340163b8 <RCCEx_GetUSARTCLKFreq+0x2d4>)
340161ca:	4293      	cmp	r3, r2
340161cc:	f000 8196 	beq.w	340164fc <RCCEx_GetUSARTCLKFreq+0x418>
340161d0:	4a79      	ldr	r2, [pc, #484]	@ (340163b8 <RCCEx_GetUSARTCLKFreq+0x2d4>)
340161d2:	4293      	cmp	r3, r2
340161d4:	f200 819b 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161d8:	4a78      	ldr	r2, [pc, #480]	@ (340163bc <RCCEx_GetUSARTCLKFreq+0x2d8>)
340161da:	4293      	cmp	r3, r2
340161dc:	f000 818e 	beq.w	340164fc <RCCEx_GetUSARTCLKFreq+0x418>
340161e0:	4a76      	ldr	r2, [pc, #472]	@ (340163bc <RCCEx_GetUSARTCLKFreq+0x2d8>)
340161e2:	4293      	cmp	r3, r2
340161e4:	f200 8193 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161e8:	4a75      	ldr	r2, [pc, #468]	@ (340163c0 <RCCEx_GetUSARTCLKFreq+0x2dc>)
340161ea:	4293      	cmp	r3, r2
340161ec:	f000 812d 	beq.w	3401644a <RCCEx_GetUSARTCLKFreq+0x366>
340161f0:	4a73      	ldr	r2, [pc, #460]	@ (340163c0 <RCCEx_GetUSARTCLKFreq+0x2dc>)
340161f2:	4293      	cmp	r3, r2
340161f4:	f200 818b 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340161f8:	4a72      	ldr	r2, [pc, #456]	@ (340163c4 <RCCEx_GetUSARTCLKFreq+0x2e0>)
340161fa:	4293      	cmp	r3, r2
340161fc:	f000 8125 	beq.w	3401644a <RCCEx_GetUSARTCLKFreq+0x366>
34016200:	4a70      	ldr	r2, [pc, #448]	@ (340163c4 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34016202:	4293      	cmp	r3, r2
34016204:	f200 8183 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016208:	4a6f      	ldr	r2, [pc, #444]	@ (340163c8 <RCCEx_GetUSARTCLKFreq+0x2e4>)
3401620a:	4293      	cmp	r3, r2
3401620c:	f000 811d 	beq.w	3401644a <RCCEx_GetUSARTCLKFreq+0x366>
34016210:	4a6d      	ldr	r2, [pc, #436]	@ (340163c8 <RCCEx_GetUSARTCLKFreq+0x2e4>)
34016212:	4293      	cmp	r3, r2
34016214:	f200 817b 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016218:	4a6c      	ldr	r2, [pc, #432]	@ (340163cc <RCCEx_GetUSARTCLKFreq+0x2e8>)
3401621a:	4293      	cmp	r3, r2
3401621c:	f000 8115 	beq.w	3401644a <RCCEx_GetUSARTCLKFreq+0x366>
34016220:	4a6a      	ldr	r2, [pc, #424]	@ (340163cc <RCCEx_GetUSARTCLKFreq+0x2e8>)
34016222:	4293      	cmp	r3, r2
34016224:	f200 8173 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016228:	4a69      	ldr	r2, [pc, #420]	@ (340163d0 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3401622a:	4293      	cmp	r3, r2
3401622c:	f000 810d 	beq.w	3401644a <RCCEx_GetUSARTCLKFreq+0x366>
34016230:	4a67      	ldr	r2, [pc, #412]	@ (340163d0 <RCCEx_GetUSARTCLKFreq+0x2ec>)
34016232:	4293      	cmp	r3, r2
34016234:	f200 816b 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016238:	4a66      	ldr	r2, [pc, #408]	@ (340163d4 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3401623a:	4293      	cmp	r3, r2
3401623c:	d07b      	beq.n	34016336 <RCCEx_GetUSARTCLKFreq+0x252>
3401623e:	4a65      	ldr	r2, [pc, #404]	@ (340163d4 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34016240:	4293      	cmp	r3, r2
34016242:	f200 8164 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016246:	4a64      	ldr	r2, [pc, #400]	@ (340163d8 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34016248:	4293      	cmp	r3, r2
3401624a:	d074      	beq.n	34016336 <RCCEx_GetUSARTCLKFreq+0x252>
3401624c:	4a62      	ldr	r2, [pc, #392]	@ (340163d8 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3401624e:	4293      	cmp	r3, r2
34016250:	f200 815d 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016254:	4a61      	ldr	r2, [pc, #388]	@ (340163dc <RCCEx_GetUSARTCLKFreq+0x2f8>)
34016256:	4293      	cmp	r3, r2
34016258:	d06d      	beq.n	34016336 <RCCEx_GetUSARTCLKFreq+0x252>
3401625a:	4a60      	ldr	r2, [pc, #384]	@ (340163dc <RCCEx_GetUSARTCLKFreq+0x2f8>)
3401625c:	4293      	cmp	r3, r2
3401625e:	f200 8156 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016262:	4a5f      	ldr	r2, [pc, #380]	@ (340163e0 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34016264:	4293      	cmp	r3, r2
34016266:	d066      	beq.n	34016336 <RCCEx_GetUSARTCLKFreq+0x252>
34016268:	4a5d      	ldr	r2, [pc, #372]	@ (340163e0 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3401626a:	4293      	cmp	r3, r2
3401626c:	f200 814f 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
34016270:	4a5c      	ldr	r2, [pc, #368]	@ (340163e4 <RCCEx_GetUSARTCLKFreq+0x300>)
34016272:	4293      	cmp	r3, r2
34016274:	d05f      	beq.n	34016336 <RCCEx_GetUSARTCLKFreq+0x252>
34016276:	4a5b      	ldr	r2, [pc, #364]	@ (340163e4 <RCCEx_GetUSARTCLKFreq+0x300>)
34016278:	4293      	cmp	r3, r2
3401627a:	f200 8148 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
3401627e:	4a5a      	ldr	r2, [pc, #360]	@ (340163e8 <RCCEx_GetUSARTCLKFreq+0x304>)
34016280:	4293      	cmp	r3, r2
34016282:	d053      	beq.n	3401632c <RCCEx_GetUSARTCLKFreq+0x248>
34016284:	4a58      	ldr	r2, [pc, #352]	@ (340163e8 <RCCEx_GetUSARTCLKFreq+0x304>)
34016286:	4293      	cmp	r3, r2
34016288:	f200 8141 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
3401628c:	4a57      	ldr	r2, [pc, #348]	@ (340163ec <RCCEx_GetUSARTCLKFreq+0x308>)
3401628e:	4293      	cmp	r3, r2
34016290:	d04c      	beq.n	3401632c <RCCEx_GetUSARTCLKFreq+0x248>
34016292:	4a56      	ldr	r2, [pc, #344]	@ (340163ec <RCCEx_GetUSARTCLKFreq+0x308>)
34016294:	4293      	cmp	r3, r2
34016296:	f200 813a 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
3401629a:	4a55      	ldr	r2, [pc, #340]	@ (340163f0 <RCCEx_GetUSARTCLKFreq+0x30c>)
3401629c:	4293      	cmp	r3, r2
3401629e:	d045      	beq.n	3401632c <RCCEx_GetUSARTCLKFreq+0x248>
340162a0:	4a53      	ldr	r2, [pc, #332]	@ (340163f0 <RCCEx_GetUSARTCLKFreq+0x30c>)
340162a2:	4293      	cmp	r3, r2
340162a4:	f200 8133 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162a8:	4a52      	ldr	r2, [pc, #328]	@ (340163f4 <RCCEx_GetUSARTCLKFreq+0x310>)
340162aa:	4293      	cmp	r3, r2
340162ac:	d03e      	beq.n	3401632c <RCCEx_GetUSARTCLKFreq+0x248>
340162ae:	4a51      	ldr	r2, [pc, #324]	@ (340163f4 <RCCEx_GetUSARTCLKFreq+0x310>)
340162b0:	4293      	cmp	r3, r2
340162b2:	f200 812c 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162b6:	4a50      	ldr	r2, [pc, #320]	@ (340163f8 <RCCEx_GetUSARTCLKFreq+0x314>)
340162b8:	4293      	cmp	r3, r2
340162ba:	d037      	beq.n	3401632c <RCCEx_GetUSARTCLKFreq+0x248>
340162bc:	4a4e      	ldr	r2, [pc, #312]	@ (340163f8 <RCCEx_GetUSARTCLKFreq+0x314>)
340162be:	4293      	cmp	r3, r2
340162c0:	f200 8125 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162c4:	4a4d      	ldr	r2, [pc, #308]	@ (340163fc <RCCEx_GetUSARTCLKFreq+0x318>)
340162c6:	4293      	cmp	r3, r2
340162c8:	d018      	beq.n	340162fc <RCCEx_GetUSARTCLKFreq+0x218>
340162ca:	4a4c      	ldr	r2, [pc, #304]	@ (340163fc <RCCEx_GetUSARTCLKFreq+0x318>)
340162cc:	4293      	cmp	r3, r2
340162ce:	f200 811e 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162d2:	4a4b      	ldr	r2, [pc, #300]	@ (34016400 <RCCEx_GetUSARTCLKFreq+0x31c>)
340162d4:	4293      	cmp	r3, r2
340162d6:	d01d      	beq.n	34016314 <RCCEx_GetUSARTCLKFreq+0x230>
340162d8:	4a49      	ldr	r2, [pc, #292]	@ (34016400 <RCCEx_GetUSARTCLKFreq+0x31c>)
340162da:	4293      	cmp	r3, r2
340162dc:	f200 8117 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162e0:	4a48      	ldr	r2, [pc, #288]	@ (34016404 <RCCEx_GetUSARTCLKFreq+0x320>)
340162e2:	4293      	cmp	r3, r2
340162e4:	d00a      	beq.n	340162fc <RCCEx_GetUSARTCLKFreq+0x218>
340162e6:	4a47      	ldr	r2, [pc, #284]	@ (34016404 <RCCEx_GetUSARTCLKFreq+0x320>)
340162e8:	4293      	cmp	r3, r2
340162ea:	f200 8110 	bhi.w	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
340162ee:	4a46      	ldr	r2, [pc, #280]	@ (34016408 <RCCEx_GetUSARTCLKFreq+0x324>)
340162f0:	4293      	cmp	r3, r2
340162f2:	d003      	beq.n	340162fc <RCCEx_GetUSARTCLKFreq+0x218>
340162f4:	4a45      	ldr	r2, [pc, #276]	@ (3401640c <RCCEx_GetUSARTCLKFreq+0x328>)
340162f6:	4293      	cmp	r3, r2
340162f8:	d00c      	beq.n	34016314 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
340162fa:	e108      	b.n	3401650e <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340162fc:	f7f3 fe26 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34016300:	4603      	mov	r3, r0
34016302:	4618      	mov	r0, r3
34016304:	f7fc ff1a 	bl	3401313c <RCCEx_GetHCLKFreq>
34016308:	4603      	mov	r3, r0
3401630a:	4618      	mov	r0, r3
3401630c:	f7fc ff37 	bl	3401317e <RCCEx_GetPCLK2Freq>
34016310:	60f8      	str	r0, [r7, #12]
      break;
34016312:	e107      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34016314:	f7f3 fe1a 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
34016318:	4603      	mov	r3, r0
3401631a:	4618      	mov	r0, r3
3401631c:	f7fc ff0e 	bl	3401313c <RCCEx_GetHCLKFreq>
34016320:	4603      	mov	r3, r0
34016322:	4618      	mov	r0, r3
34016324:	f7fc ff1b 	bl	3401315e <RCCEx_GetPCLK1Freq>
34016328:	60f8      	str	r0, [r7, #12]
      break;
3401632a:	e0fb      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401632c:	2007      	movs	r0, #7
3401632e:	f7fd f9f1 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
34016332:	60f8      	str	r0, [r7, #12]
      break;
34016334:	e0f6      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34016336:	f7f5 fa2b 	bl	3400b790 <LL_RCC_IC9_IsEnabled>
3401633a:	4603      	mov	r3, r0
3401633c:	2b00      	cmp	r3, #0
3401633e:	f000 80e8 	beq.w	34016512 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34016342:	f7f5 fa47 	bl	3400b7d4 <LL_RCC_IC9_GetDivider>
34016346:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34016348:	f7f5 fa36 	bl	3400b7b8 <LL_RCC_IC9_GetSource>
3401634c:	4603      	mov	r3, r0
3401634e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016352:	d06f      	beq.n	34016434 <RCCEx_GetUSARTCLKFreq+0x350>
34016354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016358:	d875      	bhi.n	34016446 <RCCEx_GetUSARTCLKFreq+0x362>
3401635a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401635e:	d060      	beq.n	34016422 <RCCEx_GetUSARTCLKFreq+0x33e>
34016360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016364:	d86f      	bhi.n	34016446 <RCCEx_GetUSARTCLKFreq+0x362>
34016366:	2b00      	cmp	r3, #0
34016368:	d003      	beq.n	34016372 <RCCEx_GetUSARTCLKFreq+0x28e>
3401636a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401636e:	d04f      	beq.n	34016410 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34016370:	e069      	b.n	34016446 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34016372:	f7fc fdcb 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34016376:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34016378:	68fa      	ldr	r2, [r7, #12]
3401637a:	68bb      	ldr	r3, [r7, #8]
3401637c:	fbb2 f3f3 	udiv	r3, r2, r3
34016380:	60fb      	str	r3, [r7, #12]
            break;
34016382:	e061      	b.n	34016448 <RCCEx_GetUSARTCLKFreq+0x364>
34016384:	07061430 	.word	0x07061430
34016388:	07060830 	.word	0x07060830
3401638c:	07060434 	.word	0x07060434
34016390:	07060430 	.word	0x07060430
34016394:	07060030 	.word	0x07060030
34016398:	07051430 	.word	0x07051430
3401639c:	07050830 	.word	0x07050830
340163a0:	07050434 	.word	0x07050434
340163a4:	07050430 	.word	0x07050430
340163a8:	07050030 	.word	0x07050030
340163ac:	07041430 	.word	0x07041430
340163b0:	07040830 	.word	0x07040830
340163b4:	07040434 	.word	0x07040434
340163b8:	07040430 	.word	0x07040430
340163bc:	07040030 	.word	0x07040030
340163c0:	07031430 	.word	0x07031430
340163c4:	07030830 	.word	0x07030830
340163c8:	07030434 	.word	0x07030434
340163cc:	07030430 	.word	0x07030430
340163d0:	07030030 	.word	0x07030030
340163d4:	07021430 	.word	0x07021430
340163d8:	07020830 	.word	0x07020830
340163dc:	07020434 	.word	0x07020434
340163e0:	07020430 	.word	0x07020430
340163e4:	07020030 	.word	0x07020030
340163e8:	07011430 	.word	0x07011430
340163ec:	07010830 	.word	0x07010830
340163f0:	07010434 	.word	0x07010434
340163f4:	07010430 	.word	0x07010430
340163f8:	07010030 	.word	0x07010030
340163fc:	07001430 	.word	0x07001430
34016400:	07000830 	.word	0x07000830
34016404:	07000434 	.word	0x07000434
34016408:	07000030 	.word	0x07000030
3401640c:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016410:	f7fc fdc2 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34016414:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34016416:	68fa      	ldr	r2, [r7, #12]
34016418:	68bb      	ldr	r3, [r7, #8]
3401641a:	fbb2 f3f3 	udiv	r3, r2, r3
3401641e:	60fb      	str	r3, [r7, #12]
            break;
34016420:	e012      	b.n	34016448 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34016422:	f7fc fdff 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34016426:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34016428:	68fa      	ldr	r2, [r7, #12]
3401642a:	68bb      	ldr	r3, [r7, #8]
3401642c:	fbb2 f3f3 	udiv	r3, r2, r3
34016430:	60fb      	str	r3, [r7, #12]
            break;
34016432:	e009      	b.n	34016448 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34016434:	f7fc fe3c 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34016438:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401643a:	68fa      	ldr	r2, [r7, #12]
3401643c:	68bb      	ldr	r3, [r7, #8]
3401643e:	fbb2 f3f3 	udiv	r3, r2, r3
34016442:	60fb      	str	r3, [r7, #12]
            break;
34016444:	e000      	b.n	34016448 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
34016446:	bf00      	nop
      break;
34016448:	e063      	b.n	34016512 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401644a:	f7f5 faa1 	bl	3400b990 <LL_RCC_IC14_IsEnabled>
3401644e:	4603      	mov	r3, r0
34016450:	2b00      	cmp	r3, #0
34016452:	d060      	beq.n	34016516 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34016454:	f7f5 fabe 	bl	3400b9d4 <LL_RCC_IC14_GetDivider>
34016458:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3401645a:	f7f5 faad 	bl	3400b9b8 <LL_RCC_IC14_GetSource>
3401645e:	4603      	mov	r3, r0
34016460:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016464:	d029      	beq.n	340164ba <RCCEx_GetUSARTCLKFreq+0x3d6>
34016466:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401646a:	d82f      	bhi.n	340164cc <RCCEx_GetUSARTCLKFreq+0x3e8>
3401646c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016470:	d01a      	beq.n	340164a8 <RCCEx_GetUSARTCLKFreq+0x3c4>
34016472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016476:	d829      	bhi.n	340164cc <RCCEx_GetUSARTCLKFreq+0x3e8>
34016478:	2b00      	cmp	r3, #0
3401647a:	d003      	beq.n	34016484 <RCCEx_GetUSARTCLKFreq+0x3a0>
3401647c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34016480:	d009      	beq.n	34016496 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34016482:	e023      	b.n	340164cc <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34016484:	f7fc fd42 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34016488:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401648a:	68fa      	ldr	r2, [r7, #12]
3401648c:	68bb      	ldr	r3, [r7, #8]
3401648e:	fbb2 f3f3 	udiv	r3, r2, r3
34016492:	60fb      	str	r3, [r7, #12]
            break;
34016494:	e01b      	b.n	340164ce <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016496:	f7fc fd7f 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401649a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401649c:	68fa      	ldr	r2, [r7, #12]
3401649e:	68bb      	ldr	r3, [r7, #8]
340164a0:	fbb2 f3f3 	udiv	r3, r2, r3
340164a4:	60fb      	str	r3, [r7, #12]
            break;
340164a6:	e012      	b.n	340164ce <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340164a8:	f7fc fdbc 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340164ac:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340164ae:	68fa      	ldr	r2, [r7, #12]
340164b0:	68bb      	ldr	r3, [r7, #8]
340164b2:	fbb2 f3f3 	udiv	r3, r2, r3
340164b6:	60fb      	str	r3, [r7, #12]
            break;
340164b8:	e009      	b.n	340164ce <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340164ba:	f7fc fdf9 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
340164be:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340164c0:	68fa      	ldr	r2, [r7, #12]
340164c2:	68bb      	ldr	r3, [r7, #8]
340164c4:	fbb2 f3f3 	udiv	r3, r2, r3
340164c8:	60fb      	str	r3, [r7, #12]
            break;
340164ca:	e000      	b.n	340164ce <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
340164cc:	bf00      	nop
      break;
340164ce:	e022      	b.n	34016516 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
340164d0:	f7f4 f93a 	bl	3400a748 <LL_RCC_HSI_IsReady>
340164d4:	4603      	mov	r3, r0
340164d6:	2b00      	cmp	r3, #0
340164d8:	d01f      	beq.n	3401651a <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340164da:	f7f4 f947 	bl	3400a76c <LL_RCC_HSI_GetDivider>
340164de:	4603      	mov	r3, r0
340164e0:	09db      	lsrs	r3, r3, #7
340164e2:	4a13      	ldr	r2, [pc, #76]	@ (34016530 <RCCEx_GetUSARTCLKFreq+0x44c>)
340164e4:	fa22 f303 	lsr.w	r3, r2, r3
340164e8:	60fb      	str	r3, [r7, #12]
      break;
340164ea:	e016      	b.n	3401651a <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
340164ec:	f7f4 f94c 	bl	3400a788 <LL_RCC_MSI_IsReady>
340164f0:	4603      	mov	r3, r0
340164f2:	2b00      	cmp	r3, #0
340164f4:	d013      	beq.n	3401651e <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
340164f6:	4b0f      	ldr	r3, [pc, #60]	@ (34016534 <RCCEx_GetUSARTCLKFreq+0x450>)
340164f8:	60fb      	str	r3, [r7, #12]
      break;
340164fa:	e010      	b.n	3401651e <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
340164fc:	f7f4 f964 	bl	3400a7c8 <LL_RCC_LSE_IsReady>
34016500:	4603      	mov	r3, r0
34016502:	2b00      	cmp	r3, #0
34016504:	d00d      	beq.n	34016522 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
34016506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3401650a:	60fb      	str	r3, [r7, #12]
      break;
3401650c:	e009      	b.n	34016522 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3401650e:	bf00      	nop
34016510:	e008      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34016512:	bf00      	nop
34016514:	e006      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34016516:	bf00      	nop
34016518:	e004      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3401651a:	bf00      	nop
3401651c:	e002      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3401651e:	bf00      	nop
34016520:	e000      	b.n	34016524 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34016522:	bf00      	nop
  }

  return usart_frequency;
34016524:	68fb      	ldr	r3, [r7, #12]
}
34016526:	4618      	mov	r0, r3
34016528:	3710      	adds	r7, #16
3401652a:	46bd      	mov	sp, r7
3401652c:	bd80      	pop	{r7, pc}
3401652e:	bf00      	nop
34016530:	03d09000 	.word	0x03d09000
34016534:	003d0900 	.word	0x003d0900

34016538 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
34016538:	b580      	push	{r7, lr}
3401653a:	b084      	sub	sp, #16
3401653c:	af00      	add	r7, sp, #0
3401653e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34016540:	2300      	movs	r3, #0
34016542:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34016544:	6878      	ldr	r0, [r7, #4]
34016546:	f7f4 fcff 	bl	3400af48 <LL_RCC_GetUSBClockSource>
3401654a:	4603      	mov	r3, r0
3401654c:	4a4b      	ldr	r2, [pc, #300]	@ (3401667c <RCCEx_GetOTGPHYCLKFreq+0x144>)
3401654e:	4293      	cmp	r3, r2
34016550:	d035      	beq.n	340165be <RCCEx_GetOTGPHYCLKFreq+0x86>
34016552:	4a4a      	ldr	r2, [pc, #296]	@ (3401667c <RCCEx_GetOTGPHYCLKFreq+0x144>)
34016554:	4293      	cmp	r3, r2
34016556:	f200 8085 	bhi.w	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401655a:	4a49      	ldr	r2, [pc, #292]	@ (34016680 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3401655c:	4293      	cmp	r3, r2
3401655e:	d02e      	beq.n	340165be <RCCEx_GetOTGPHYCLKFreq+0x86>
34016560:	4a47      	ldr	r2, [pc, #284]	@ (34016680 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34016562:	4293      	cmp	r3, r2
34016564:	d87e      	bhi.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34016566:	4a47      	ldr	r2, [pc, #284]	@ (34016684 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34016568:	4293      	cmp	r3, r2
3401656a:	d038      	beq.n	340165de <RCCEx_GetOTGPHYCLKFreq+0xa6>
3401656c:	4a45      	ldr	r2, [pc, #276]	@ (34016684 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3401656e:	4293      	cmp	r3, r2
34016570:	d878      	bhi.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34016572:	4a45      	ldr	r2, [pc, #276]	@ (34016688 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34016574:	4293      	cmp	r3, r2
34016576:	d032      	beq.n	340165de <RCCEx_GetOTGPHYCLKFreq+0xa6>
34016578:	4a43      	ldr	r2, [pc, #268]	@ (34016688 <RCCEx_GetOTGPHYCLKFreq+0x150>)
3401657a:	4293      	cmp	r3, r2
3401657c:	d872      	bhi.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401657e:	4a43      	ldr	r2, [pc, #268]	@ (3401668c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34016580:	4293      	cmp	r3, r2
34016582:	d00f      	beq.n	340165a4 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34016584:	4a41      	ldr	r2, [pc, #260]	@ (3401668c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34016586:	4293      	cmp	r3, r2
34016588:	d86c      	bhi.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401658a:	4a41      	ldr	r2, [pc, #260]	@ (34016690 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3401658c:	4293      	cmp	r3, r2
3401658e:	d009      	beq.n	340165a4 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34016590:	4a3f      	ldr	r2, [pc, #252]	@ (34016690 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34016592:	4293      	cmp	r3, r2
34016594:	d866      	bhi.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34016596:	4a3f      	ldr	r2, [pc, #252]	@ (34016694 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34016598:	4293      	cmp	r3, r2
3401659a:	d008      	beq.n	340165ae <RCCEx_GetOTGPHYCLKFreq+0x76>
3401659c:	4a3e      	ldr	r2, [pc, #248]	@ (34016698 <RCCEx_GetOTGPHYCLKFreq+0x160>)
3401659e:	4293      	cmp	r3, r2
340165a0:	d005      	beq.n	340165ae <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
340165a2:	e05f      	b.n	34016664 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340165a4:	2007      	movs	r0, #7
340165a6:	f7fd f8b5 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
340165aa:	60f8      	str	r0, [r7, #12]
      break;
340165ac:	e061      	b.n	34016672 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
340165ae:	f7f4 f8b9 	bl	3400a724 <LL_RCC_HSE_IsReady>
340165b2:	4603      	mov	r3, r0
340165b4:	2b00      	cmp	r3, #0
340165b6:	d057      	beq.n	34016668 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
340165b8:	4b38      	ldr	r3, [pc, #224]	@ (3401669c <RCCEx_GetOTGPHYCLKFreq+0x164>)
340165ba:	60fb      	str	r3, [r7, #12]
      break;
340165bc:	e054      	b.n	34016668 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
340165be:	f7f4 f8b1 	bl	3400a724 <LL_RCC_HSE_IsReady>
340165c2:	4603      	mov	r3, r0
340165c4:	2b00      	cmp	r3, #0
340165c6:	d051      	beq.n	3401666c <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340165c8:	f7f4 f89a 	bl	3400a700 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
340165cc:	4603      	mov	r3, r0
340165ce:	2b00      	cmp	r3, #0
340165d0:	d102      	bne.n	340165d8 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
340165d2:	4b33      	ldr	r3, [pc, #204]	@ (340166a0 <RCCEx_GetOTGPHYCLKFreq+0x168>)
340165d4:	60fb      	str	r3, [r7, #12]
      break;
340165d6:	e049      	b.n	3401666c <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
340165d8:	4b30      	ldr	r3, [pc, #192]	@ (3401669c <RCCEx_GetOTGPHYCLKFreq+0x164>)
340165da:	60fb      	str	r3, [r7, #12]
      break;
340165dc:	e046      	b.n	3401666c <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340165de:	f7f5 fa17 	bl	3400ba10 <LL_RCC_IC15_IsEnabled>
340165e2:	4603      	mov	r3, r0
340165e4:	2b00      	cmp	r3, #0
340165e6:	d043      	beq.n	34016670 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
340165e8:	f7f5 fa34 	bl	3400ba54 <LL_RCC_IC15_GetDivider>
340165ec:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
340165ee:	f7f5 fa23 	bl	3400ba38 <LL_RCC_IC15_GetSource>
340165f2:	4603      	mov	r3, r0
340165f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340165f8:	d029      	beq.n	3401664e <RCCEx_GetOTGPHYCLKFreq+0x116>
340165fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340165fe:	d82f      	bhi.n	34016660 <RCCEx_GetOTGPHYCLKFreq+0x128>
34016600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016604:	d01a      	beq.n	3401663c <RCCEx_GetOTGPHYCLKFreq+0x104>
34016606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401660a:	d829      	bhi.n	34016660 <RCCEx_GetOTGPHYCLKFreq+0x128>
3401660c:	2b00      	cmp	r3, #0
3401660e:	d003      	beq.n	34016618 <RCCEx_GetOTGPHYCLKFreq+0xe0>
34016610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34016614:	d009      	beq.n	3401662a <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
34016616:	e023      	b.n	34016660 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34016618:	f7fc fc78 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
3401661c:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3401661e:	68fa      	ldr	r2, [r7, #12]
34016620:	68bb      	ldr	r3, [r7, #8]
34016622:	fbb2 f3f3 	udiv	r3, r2, r3
34016626:	60fb      	str	r3, [r7, #12]
            break;
34016628:	e01b      	b.n	34016662 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401662a:	f7fc fcb5 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
3401662e:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34016630:	68fa      	ldr	r2, [r7, #12]
34016632:	68bb      	ldr	r3, [r7, #8]
34016634:	fbb2 f3f3 	udiv	r3, r2, r3
34016638:	60fb      	str	r3, [r7, #12]
            break;
3401663a:	e012      	b.n	34016662 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401663c:	f7fc fcf2 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34016640:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34016642:	68fa      	ldr	r2, [r7, #12]
34016644:	68bb      	ldr	r3, [r7, #8]
34016646:	fbb2 f3f3 	udiv	r3, r2, r3
3401664a:	60fb      	str	r3, [r7, #12]
            break;
3401664c:	e009      	b.n	34016662 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401664e:	f7fc fd2f 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34016652:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34016654:	68fa      	ldr	r2, [r7, #12]
34016656:	68bb      	ldr	r3, [r7, #8]
34016658:	fbb2 f3f3 	udiv	r3, r2, r3
3401665c:	60fb      	str	r3, [r7, #12]
            break;
3401665e:	e000      	b.n	34016662 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
34016660:	bf00      	nop
      break;
34016662:	e005      	b.n	34016670 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34016664:	bf00      	nop
34016666:	e004      	b.n	34016672 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34016668:	bf00      	nop
3401666a:	e002      	b.n	34016672 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3401666c:	bf00      	nop
3401666e:	e000      	b.n	34016672 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34016670:	bf00      	nop
  }

  return usb_frequency;
34016672:	68fb      	ldr	r3, [r7, #12]
}
34016674:	4618      	mov	r0, r3
34016676:	3710      	adds	r7, #16
34016678:	46bd      	mov	sp, r7
3401667a:	bd80      	pop	{r7, pc}
3401667c:	03031414 	.word	0x03031414
34016680:	03030c14 	.word	0x03030c14
34016684:	03021414 	.word	0x03021414
34016688:	03020c14 	.word	0x03020c14
3401668c:	03011414 	.word	0x03011414
34016690:	03010c14 	.word	0x03010c14
34016694:	03000c14 	.word	0x03000c14
34016698:	03001414 	.word	0x03001414
3401669c:	016e3600 	.word	0x016e3600
340166a0:	02dc6c00 	.word	0x02dc6c00

340166a4 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
340166a4:	b580      	push	{r7, lr}
340166a6:	b084      	sub	sp, #16
340166a8:	af00      	add	r7, sp, #0
340166aa:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340166ac:	2300      	movs	r3, #0
340166ae:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
340166b0:	6878      	ldr	r0, [r7, #4]
340166b2:	f7f4 fc49 	bl	3400af48 <LL_RCC_GetUSBClockSource>
340166b6:	4603      	mov	r3, r0
340166b8:	4a1a      	ldr	r2, [pc, #104]	@ (34016724 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
340166ba:	4293      	cmp	r3, r2
340166bc:	d00f      	beq.n	340166de <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
340166be:	4a19      	ldr	r2, [pc, #100]	@ (34016724 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
340166c0:	4293      	cmp	r3, r2
340166c2:	d826      	bhi.n	34016712 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
340166c4:	4a18      	ldr	r2, [pc, #96]	@ (34016728 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
340166c6:	4293      	cmp	r3, r2
340166c8:	d009      	beq.n	340166de <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
340166ca:	4a17      	ldr	r2, [pc, #92]	@ (34016728 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
340166cc:	4293      	cmp	r3, r2
340166ce:	d820      	bhi.n	34016712 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
340166d0:	4a16      	ldr	r2, [pc, #88]	@ (3401672c <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
340166d2:	4293      	cmp	r3, r2
340166d4:	d013      	beq.n	340166fe <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
340166d6:	4a16      	ldr	r2, [pc, #88]	@ (34016730 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
340166d8:	4293      	cmp	r3, r2
340166da:	d015      	beq.n	34016708 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
340166dc:	e019      	b.n	34016712 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
340166de:	f7f4 f821 	bl	3400a724 <LL_RCC_HSE_IsReady>
340166e2:	4603      	mov	r3, r0
340166e4:	2b00      	cmp	r3, #0
340166e6:	d016      	beq.n	34016716 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340166e8:	f7f4 f80a 	bl	3400a700 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
340166ec:	4603      	mov	r3, r0
340166ee:	2b00      	cmp	r3, #0
340166f0:	d102      	bne.n	340166f8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
340166f2:	4b10      	ldr	r3, [pc, #64]	@ (34016734 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
340166f4:	60fb      	str	r3, [r7, #12]
      break;
340166f6:	e00e      	b.n	34016716 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
340166f8:	4b0f      	ldr	r3, [pc, #60]	@ (34016738 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
340166fa:	60fb      	str	r3, [r7, #12]
      break;
340166fc:	e00b      	b.n	34016716 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340166fe:	480f      	ldr	r0, [pc, #60]	@ (3401673c <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
34016700:	f7ff ff1a 	bl	34016538 <RCCEx_GetOTGPHYCLKFreq>
34016704:	60f8      	str	r0, [r7, #12]
      break;
34016706:	e007      	b.n	34016718 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34016708:	480d      	ldr	r0, [pc, #52]	@ (34016740 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3401670a:	f7ff ff15 	bl	34016538 <RCCEx_GetOTGPHYCLKFreq>
3401670e:	60f8      	str	r0, [r7, #12]
      break;
34016710:	e002      	b.n	34016718 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34016712:	bf00      	nop
34016714:	e000      	b.n	34016718 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34016716:	bf00      	nop
  }

  return usb_frequency;
34016718:	68fb      	ldr	r3, [r7, #12]
}
3401671a:	4618      	mov	r0, r3
3401671c:	3710      	adds	r7, #16
3401671e:	46bd      	mov	sp, r7
34016720:	bd80      	pop	{r7, pc}
34016722:	bf00      	nop
34016724:	01011814 	.word	0x01011814
34016728:	01011014 	.word	0x01011014
3401672c:	01001014 	.word	0x01001014
34016730:	01001814 	.word	0x01001814
34016734:	02dc6c00 	.word	0x02dc6c00
34016738:	016e3600 	.word	0x016e3600
3401673c:	03000c14 	.word	0x03000c14
34016740:	03001414 	.word	0x03001414

34016744 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34016744:	b580      	push	{r7, lr}
34016746:	b084      	sub	sp, #16
34016748:	af00      	add	r7, sp, #0
3401674a:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3401674c:	2300      	movs	r3, #0
3401674e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34016750:	6878      	ldr	r0, [r7, #4]
34016752:	f7f4 fc05 	bl	3400af60 <LL_RCC_GetXSPIClockSource>
34016756:	4603      	mov	r3, r0
34016758:	4a76      	ldr	r2, [pc, #472]	@ (34016934 <RCCEx_GetXSPICLKFreq+0x1f0>)
3401675a:	4293      	cmp	r3, r2
3401675c:	f000 809d 	beq.w	3401689a <RCCEx_GetXSPICLKFreq+0x156>
34016760:	4a74      	ldr	r2, [pc, #464]	@ (34016934 <RCCEx_GetXSPICLKFreq+0x1f0>)
34016762:	4293      	cmp	r3, r2
34016764:	f200 80dc 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
34016768:	4a73      	ldr	r2, [pc, #460]	@ (34016938 <RCCEx_GetXSPICLKFreq+0x1f4>)
3401676a:	4293      	cmp	r3, r2
3401676c:	f000 8095 	beq.w	3401689a <RCCEx_GetXSPICLKFreq+0x156>
34016770:	4a71      	ldr	r2, [pc, #452]	@ (34016938 <RCCEx_GetXSPICLKFreq+0x1f4>)
34016772:	4293      	cmp	r3, r2
34016774:	f200 80d4 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
34016778:	4a70      	ldr	r2, [pc, #448]	@ (3401693c <RCCEx_GetXSPICLKFreq+0x1f8>)
3401677a:	4293      	cmp	r3, r2
3401677c:	f000 808d 	beq.w	3401689a <RCCEx_GetXSPICLKFreq+0x156>
34016780:	4a6e      	ldr	r2, [pc, #440]	@ (3401693c <RCCEx_GetXSPICLKFreq+0x1f8>)
34016782:	4293      	cmp	r3, r2
34016784:	f200 80cc 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
34016788:	4a6d      	ldr	r2, [pc, #436]	@ (34016940 <RCCEx_GetXSPICLKFreq+0x1fc>)
3401678a:	4293      	cmp	r3, r2
3401678c:	d041      	beq.n	34016812 <RCCEx_GetXSPICLKFreq+0xce>
3401678e:	4a6c      	ldr	r2, [pc, #432]	@ (34016940 <RCCEx_GetXSPICLKFreq+0x1fc>)
34016790:	4293      	cmp	r3, r2
34016792:	f200 80c5 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
34016796:	4a6b      	ldr	r2, [pc, #428]	@ (34016944 <RCCEx_GetXSPICLKFreq+0x200>)
34016798:	4293      	cmp	r3, r2
3401679a:	d03a      	beq.n	34016812 <RCCEx_GetXSPICLKFreq+0xce>
3401679c:	4a69      	ldr	r2, [pc, #420]	@ (34016944 <RCCEx_GetXSPICLKFreq+0x200>)
3401679e:	4293      	cmp	r3, r2
340167a0:	f200 80be 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167a4:	4a68      	ldr	r2, [pc, #416]	@ (34016948 <RCCEx_GetXSPICLKFreq+0x204>)
340167a6:	4293      	cmp	r3, r2
340167a8:	d033      	beq.n	34016812 <RCCEx_GetXSPICLKFreq+0xce>
340167aa:	4a67      	ldr	r2, [pc, #412]	@ (34016948 <RCCEx_GetXSPICLKFreq+0x204>)
340167ac:	4293      	cmp	r3, r2
340167ae:	f200 80b7 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167b2:	4a66      	ldr	r2, [pc, #408]	@ (3401694c <RCCEx_GetXSPICLKFreq+0x208>)
340167b4:	4293      	cmp	r3, r2
340167b6:	d027      	beq.n	34016808 <RCCEx_GetXSPICLKFreq+0xc4>
340167b8:	4a64      	ldr	r2, [pc, #400]	@ (3401694c <RCCEx_GetXSPICLKFreq+0x208>)
340167ba:	4293      	cmp	r3, r2
340167bc:	f200 80b0 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167c0:	4a63      	ldr	r2, [pc, #396]	@ (34016950 <RCCEx_GetXSPICLKFreq+0x20c>)
340167c2:	4293      	cmp	r3, r2
340167c4:	d020      	beq.n	34016808 <RCCEx_GetXSPICLKFreq+0xc4>
340167c6:	4a62      	ldr	r2, [pc, #392]	@ (34016950 <RCCEx_GetXSPICLKFreq+0x20c>)
340167c8:	4293      	cmp	r3, r2
340167ca:	f200 80a9 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167ce:	4a61      	ldr	r2, [pc, #388]	@ (34016954 <RCCEx_GetXSPICLKFreq+0x210>)
340167d0:	4293      	cmp	r3, r2
340167d2:	d019      	beq.n	34016808 <RCCEx_GetXSPICLKFreq+0xc4>
340167d4:	4a5f      	ldr	r2, [pc, #380]	@ (34016954 <RCCEx_GetXSPICLKFreq+0x210>)
340167d6:	4293      	cmp	r3, r2
340167d8:	f200 80a2 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167dc:	4a5e      	ldr	r2, [pc, #376]	@ (34016958 <RCCEx_GetXSPICLKFreq+0x214>)
340167de:	4293      	cmp	r3, r2
340167e0:	d00a      	beq.n	340167f8 <RCCEx_GetXSPICLKFreq+0xb4>
340167e2:	4a5d      	ldr	r2, [pc, #372]	@ (34016958 <RCCEx_GetXSPICLKFreq+0x214>)
340167e4:	4293      	cmp	r3, r2
340167e6:	f200 809b 	bhi.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
340167ea:	4a5c      	ldr	r2, [pc, #368]	@ (3401695c <RCCEx_GetXSPICLKFreq+0x218>)
340167ec:	4293      	cmp	r3, r2
340167ee:	d003      	beq.n	340167f8 <RCCEx_GetXSPICLKFreq+0xb4>
340167f0:	4a5b      	ldr	r2, [pc, #364]	@ (34016960 <RCCEx_GetXSPICLKFreq+0x21c>)
340167f2:	4293      	cmp	r3, r2
340167f4:	f040 8094 	bne.w	34016920 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340167f8:	f7f3 fba8 	bl	34009f4c <HAL_RCC_GetSysClockFreq>
340167fc:	4603      	mov	r3, r0
340167fe:	4618      	mov	r0, r3
34016800:	f7fc fc9c 	bl	3401313c <RCCEx_GetHCLKFreq>
34016804:	60f8      	str	r0, [r7, #12]
      break;
34016806:	e090      	b.n	3401692a <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34016808:	2007      	movs	r0, #7
3401680a:	f7fc ff83 	bl	34013714 <RCCEx_GetCLKPCLKFreq>
3401680e:	60f8      	str	r0, [r7, #12]
      break;
34016810:	e08b      	b.n	3401692a <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
34016812:	f7f4 fe7d 	bl	3400b510 <LL_RCC_IC3_IsEnabled>
34016816:	4603      	mov	r3, r0
34016818:	2b00      	cmp	r3, #0
3401681a:	f000 8083 	beq.w	34016924 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3401681e:	f7f4 fe99 	bl	3400b554 <LL_RCC_IC3_GetDivider>
34016822:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34016824:	f7f4 fe88 	bl	3400b538 <LL_RCC_IC3_GetSource>
34016828:	4603      	mov	r3, r0
3401682a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401682e:	d029      	beq.n	34016884 <RCCEx_GetXSPICLKFreq+0x140>
34016830:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016834:	d82f      	bhi.n	34016896 <RCCEx_GetXSPICLKFreq+0x152>
34016836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401683a:	d01a      	beq.n	34016872 <RCCEx_GetXSPICLKFreq+0x12e>
3401683c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016840:	d829      	bhi.n	34016896 <RCCEx_GetXSPICLKFreq+0x152>
34016842:	2b00      	cmp	r3, #0
34016844:	d003      	beq.n	3401684e <RCCEx_GetXSPICLKFreq+0x10a>
34016846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401684a:	d009      	beq.n	34016860 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401684c:	e023      	b.n	34016896 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401684e:	f7fc fb5d 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
34016852:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34016854:	68fa      	ldr	r2, [r7, #12]
34016856:	68bb      	ldr	r3, [r7, #8]
34016858:	fbb2 f3f3 	udiv	r3, r2, r3
3401685c:	60fb      	str	r3, [r7, #12]
            break;
3401685e:	e01b      	b.n	34016898 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016860:	f7fc fb9a 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
34016864:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34016866:	68fa      	ldr	r2, [r7, #12]
34016868:	68bb      	ldr	r3, [r7, #8]
3401686a:	fbb2 f3f3 	udiv	r3, r2, r3
3401686e:	60fb      	str	r3, [r7, #12]
            break;
34016870:	e012      	b.n	34016898 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34016872:	f7fc fbd7 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
34016876:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34016878:	68fa      	ldr	r2, [r7, #12]
3401687a:	68bb      	ldr	r3, [r7, #8]
3401687c:	fbb2 f3f3 	udiv	r3, r2, r3
34016880:	60fb      	str	r3, [r7, #12]
            break;
34016882:	e009      	b.n	34016898 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34016884:	f7fc fc14 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
34016888:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401688a:	68fa      	ldr	r2, [r7, #12]
3401688c:	68bb      	ldr	r3, [r7, #8]
3401688e:	fbb2 f3f3 	udiv	r3, r2, r3
34016892:	60fb      	str	r3, [r7, #12]
            break;
34016894:	e000      	b.n	34016898 <RCCEx_GetXSPICLKFreq+0x154>
            break;
34016896:	bf00      	nop
        }
      }
      break;
34016898:	e044      	b.n	34016924 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3401689a:	f7f4 fe79 	bl	3400b590 <LL_RCC_IC4_IsEnabled>
3401689e:	4603      	mov	r3, r0
340168a0:	2b00      	cmp	r3, #0
340168a2:	d041      	beq.n	34016928 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
340168a4:	f7f4 fe96 	bl	3400b5d4 <LL_RCC_IC4_GetDivider>
340168a8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340168aa:	f7f4 fe85 	bl	3400b5b8 <LL_RCC_IC4_GetSource>
340168ae:	4603      	mov	r3, r0
340168b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340168b4:	d029      	beq.n	3401690a <RCCEx_GetXSPICLKFreq+0x1c6>
340168b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340168ba:	d82f      	bhi.n	3401691c <RCCEx_GetXSPICLKFreq+0x1d8>
340168bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340168c0:	d01a      	beq.n	340168f8 <RCCEx_GetXSPICLKFreq+0x1b4>
340168c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340168c6:	d829      	bhi.n	3401691c <RCCEx_GetXSPICLKFreq+0x1d8>
340168c8:	2b00      	cmp	r3, #0
340168ca:	d003      	beq.n	340168d4 <RCCEx_GetXSPICLKFreq+0x190>
340168cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340168d0:	d009      	beq.n	340168e6 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340168d2:	e023      	b.n	3401691c <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340168d4:	f7fc fb1a 	bl	34012f0c <HAL_RCCEx_GetPLL1CLKFreq>
340168d8:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340168da:	68fa      	ldr	r2, [r7, #12]
340168dc:	68bb      	ldr	r3, [r7, #8]
340168de:	fbb2 f3f3 	udiv	r3, r2, r3
340168e2:	60fb      	str	r3, [r7, #12]
            break;
340168e4:	e01b      	b.n	3401691e <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340168e6:	f7fc fb57 	bl	34012f98 <HAL_RCCEx_GetPLL2CLKFreq>
340168ea:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340168ec:	68fa      	ldr	r2, [r7, #12]
340168ee:	68bb      	ldr	r3, [r7, #8]
340168f0:	fbb2 f3f3 	udiv	r3, r2, r3
340168f4:	60fb      	str	r3, [r7, #12]
            break;
340168f6:	e012      	b.n	3401691e <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340168f8:	f7fc fb94 	bl	34013024 <HAL_RCCEx_GetPLL3CLKFreq>
340168fc:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340168fe:	68fa      	ldr	r2, [r7, #12]
34016900:	68bb      	ldr	r3, [r7, #8]
34016902:	fbb2 f3f3 	udiv	r3, r2, r3
34016906:	60fb      	str	r3, [r7, #12]
            break;
34016908:	e009      	b.n	3401691e <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401690a:	f7fc fbd1 	bl	340130b0 <HAL_RCCEx_GetPLL4CLKFreq>
3401690e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34016910:	68fa      	ldr	r2, [r7, #12]
34016912:	68bb      	ldr	r3, [r7, #8]
34016914:	fbb2 f3f3 	udiv	r3, r2, r3
34016918:	60fb      	str	r3, [r7, #12]
            break;
3401691a:	e000      	b.n	3401691e <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3401691c:	bf00      	nop
        }
      }
      break;
3401691e:	e003      	b.n	34016928 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
34016920:	bf00      	nop
34016922:	e002      	b.n	3401692a <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34016924:	bf00      	nop
34016926:	e000      	b.n	3401692a <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34016928:	bf00      	nop
  }

  return xspi_frequency;
3401692a:	68fb      	ldr	r3, [r7, #12]
}
3401692c:	4618      	mov	r0, r3
3401692e:	3710      	adds	r7, #16
34016930:	46bd      	mov	sp, r7
34016932:	bd80      	pop	{r7, pc}
34016934:	03030814 	.word	0x03030814
34016938:	03030414 	.word	0x03030414
3401693c:	03030014 	.word	0x03030014
34016940:	03020814 	.word	0x03020814
34016944:	03020414 	.word	0x03020414
34016948:	03020014 	.word	0x03020014
3401694c:	03010814 	.word	0x03010814
34016950:	03010414 	.word	0x03010414
34016954:	03010014 	.word	0x03010014
34016958:	03000814 	.word	0x03000814
3401695c:	03000014 	.word	0x03000014
34016960:	03000414 	.word	0x03000414

34016964 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34016964:	b580      	push	{r7, lr}
34016966:	b088      	sub	sp, #32
34016968:	af00      	add	r7, sp, #0
3401696a:	6078      	str	r0, [r7, #4]
3401696c:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401696e:	683b      	ldr	r3, [r7, #0]
34016970:	2b00      	cmp	r3, #0
34016972:	d104      	bne.n	3401697e <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34016974:	f240 1111 	movw	r1, #273	@ 0x111
34016978:	484d      	ldr	r0, [pc, #308]	@ (34016ab0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
3401697a:	f7ea fe29 	bl	340015d0 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401697e:	687b      	ldr	r3, [r7, #4]
34016980:	2b00      	cmp	r3, #0
34016982:	d028      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34016984:	687b      	ldr	r3, [r7, #4]
34016986:	2b01      	cmp	r3, #1
34016988:	d025      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401698a:	687b      	ldr	r3, [r7, #4]
3401698c:	2b02      	cmp	r3, #2
3401698e:	d022      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34016990:	687b      	ldr	r3, [r7, #4]
34016992:	2b03      	cmp	r3, #3
34016994:	d01f      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34016996:	687b      	ldr	r3, [r7, #4]
34016998:	2b04      	cmp	r3, #4
3401699a:	d01c      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401699c:	687b      	ldr	r3, [r7, #4]
3401699e:	2b05      	cmp	r3, #5
340169a0:	d019      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169a2:	687b      	ldr	r3, [r7, #4]
340169a4:	2b06      	cmp	r3, #6
340169a6:	d016      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169a8:	687b      	ldr	r3, [r7, #4]
340169aa:	2b07      	cmp	r3, #7
340169ac:	d013      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169ae:	687b      	ldr	r3, [r7, #4]
340169b0:	2b08      	cmp	r3, #8
340169b2:	d010      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169b4:	687b      	ldr	r3, [r7, #4]
340169b6:	2b09      	cmp	r3, #9
340169b8:	d00d      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169ba:	687b      	ldr	r3, [r7, #4]
340169bc:	2b0a      	cmp	r3, #10
340169be:	d00a      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169c0:	687b      	ldr	r3, [r7, #4]
340169c2:	2b0b      	cmp	r3, #11
340169c4:	d007      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169c6:	687b      	ldr	r3, [r7, #4]
340169c8:	2b0c      	cmp	r3, #12
340169ca:	d004      	beq.n	340169d6 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
340169cc:	f44f 7189 	mov.w	r1, #274	@ 0x112
340169d0:	4837      	ldr	r0, [pc, #220]	@ (34016ab0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340169d2:	f7ea fdfd 	bl	340015d0 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
340169d6:	683b      	ldr	r3, [r7, #0]
340169d8:	681b      	ldr	r3, [r3, #0]
340169da:	2b01      	cmp	r3, #1
340169dc:	d020      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340169de:	683b      	ldr	r3, [r7, #0]
340169e0:	681b      	ldr	r3, [r3, #0]
340169e2:	2b02      	cmp	r3, #2
340169e4:	d01c      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340169e6:	683b      	ldr	r3, [r7, #0]
340169e8:	681b      	ldr	r3, [r3, #0]
340169ea:	2b04      	cmp	r3, #4
340169ec:	d018      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340169ee:	683b      	ldr	r3, [r7, #0]
340169f0:	681b      	ldr	r3, [r3, #0]
340169f2:	2b08      	cmp	r3, #8
340169f4:	d014      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340169f6:	683b      	ldr	r3, [r7, #0]
340169f8:	681b      	ldr	r3, [r3, #0]
340169fa:	2b10      	cmp	r3, #16
340169fc:	d010      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340169fe:	683b      	ldr	r3, [r7, #0]
34016a00:	681b      	ldr	r3, [r3, #0]
34016a02:	2b20      	cmp	r3, #32
34016a04:	d00c      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34016a06:	683b      	ldr	r3, [r7, #0]
34016a08:	681b      	ldr	r3, [r3, #0]
34016a0a:	2b40      	cmp	r3, #64	@ 0x40
34016a0c:	d008      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34016a0e:	683b      	ldr	r3, [r7, #0]
34016a10:	681b      	ldr	r3, [r3, #0]
34016a12:	2b80      	cmp	r3, #128	@ 0x80
34016a14:	d004      	beq.n	34016a20 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34016a16:	f240 1113 	movw	r1, #275	@ 0x113
34016a1a:	4825      	ldr	r0, [pc, #148]	@ (34016ab0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34016a1c:	f7ea fdd8 	bl	340015d0 <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34016a20:	683b      	ldr	r3, [r7, #0]
34016a22:	681b      	ldr	r3, [r3, #0]
34016a24:	2b80      	cmp	r3, #128	@ 0x80
34016a26:	d003      	beq.n	34016a30 <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
34016a28:	683b      	ldr	r3, [r7, #0]
34016a2a:	681b      	ldr	r3, [r3, #0]
34016a2c:	2bff      	cmp	r3, #255	@ 0xff
34016a2e:	d904      	bls.n	34016a3a <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
34016a30:	f44f 718a 	mov.w	r1, #276	@ 0x114
34016a34:	481e      	ldr	r0, [pc, #120]	@ (34016ab0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34016a36:	f7ea fdcb 	bl	340015d0 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34016a3a:	683b      	ldr	r3, [r7, #0]
34016a3c:	685b      	ldr	r3, [r3, #4]
34016a3e:	2b03      	cmp	r3, #3
34016a40:	d904      	bls.n	34016a4c <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
34016a42:	f240 1115 	movw	r1, #277	@ 0x115
34016a46:	481a      	ldr	r0, [pc, #104]	@ (34016ab0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34016a48:	f7ea fdc2 	bl	340015d0 <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
34016a4c:	683b      	ldr	r3, [r7, #0]
34016a4e:	681b      	ldr	r3, [r3, #0]
34016a50:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34016a52:	693b      	ldr	r3, [r7, #16]
34016a54:	fa93 f3a3 	rbit	r3, r3
34016a58:	60fb      	str	r3, [r7, #12]
  return result;
34016a5a:	68fb      	ldr	r3, [r7, #12]
34016a5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
34016a5e:	697b      	ldr	r3, [r7, #20]
34016a60:	2b00      	cmp	r3, #0
34016a62:	d101      	bne.n	34016a68 <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
    return 32U;
34016a64:	2320      	movs	r3, #32
34016a66:	e003      	b.n	34016a70 <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  return __builtin_clz(value);
34016a68:	697b      	ldr	r3, [r7, #20]
34016a6a:	fab3 f383 	clz	r3, r3
34016a6e:	b2db      	uxtb	r3, r3
34016a70:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34016a72:	4a10      	ldr	r2, [pc, #64]	@ (34016ab4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34016a74:	687b      	ldr	r3, [r7, #4]
34016a76:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34016a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34016a7e:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34016a80:	69bb      	ldr	r3, [r7, #24]
34016a82:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34016a86:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34016a88:	69fb      	ldr	r3, [r7, #28]
34016a8a:	011a      	lsls	r2, r3, #4
34016a8c:	683b      	ldr	r3, [r7, #0]
34016a8e:	685b      	ldr	r3, [r3, #4]
34016a90:	021b      	lsls	r3, r3, #8
34016a92:	4313      	orrs	r3, r2
34016a94:	69ba      	ldr	r2, [r7, #24]
34016a96:	4313      	orrs	r3, r2
34016a98:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
34016a9a:	4906      	ldr	r1, [pc, #24]	@ (34016ab4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34016a9c:	687b      	ldr	r3, [r7, #4]
34016a9e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34016aa2:	69ba      	ldr	r2, [r7, #24]
34016aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34016aa8:	bf00      	nop
34016aaa:	3720      	adds	r7, #32
34016aac:	46bd      	mov	sp, r7
34016aae:	bd80      	pop	{r7, pc}
34016ab0:	3401d7a4 	.word	0x3401d7a4
34016ab4:	54024000 	.word	0x54024000

34016ab8 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
34016ab8:	b580      	push	{r7, lr}
34016aba:	b084      	sub	sp, #16
34016abc:	af00      	add	r7, sp, #0
34016abe:	6078      	str	r0, [r7, #4]
34016ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34016ac2:	687b      	ldr	r3, [r7, #4]
34016ac4:	2b00      	cmp	r3, #0
34016ac6:	f000 82c6 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016aca:	687b      	ldr	r3, [r7, #4]
34016acc:	2b01      	cmp	r3, #1
34016ace:	f000 82c2 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ad2:	687b      	ldr	r3, [r7, #4]
34016ad4:	2b02      	cmp	r3, #2
34016ad6:	f000 82be 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ada:	687b      	ldr	r3, [r7, #4]
34016adc:	2b03      	cmp	r3, #3
34016ade:	f000 82ba 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ae2:	687b      	ldr	r3, [r7, #4]
34016ae4:	2b04      	cmp	r3, #4
34016ae6:	f000 82b6 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016aea:	687b      	ldr	r3, [r7, #4]
34016aec:	2b05      	cmp	r3, #5
34016aee:	f000 82b2 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016af2:	687b      	ldr	r3, [r7, #4]
34016af4:	2b06      	cmp	r3, #6
34016af6:	f000 82ae 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016afa:	687b      	ldr	r3, [r7, #4]
34016afc:	2b08      	cmp	r3, #8
34016afe:	f000 82aa 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b02:	687b      	ldr	r3, [r7, #4]
34016b04:	2b09      	cmp	r3, #9
34016b06:	f000 82a6 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b0a:	687b      	ldr	r3, [r7, #4]
34016b0c:	2b0a      	cmp	r3, #10
34016b0e:	f000 82a2 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b12:	687b      	ldr	r3, [r7, #4]
34016b14:	2b0b      	cmp	r3, #11
34016b16:	f000 829e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b1a:	687b      	ldr	r3, [r7, #4]
34016b1c:	2b0c      	cmp	r3, #12
34016b1e:	f000 829a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b22:	687b      	ldr	r3, [r7, #4]
34016b24:	2b0d      	cmp	r3, #13
34016b26:	f000 8296 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b2a:	687b      	ldr	r3, [r7, #4]
34016b2c:	2b0e      	cmp	r3, #14
34016b2e:	f000 8292 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b32:	687b      	ldr	r3, [r7, #4]
34016b34:	2b0f      	cmp	r3, #15
34016b36:	f000 828e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b3a:	687b      	ldr	r3, [r7, #4]
34016b3c:	2b10      	cmp	r3, #16
34016b3e:	f000 828a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b42:	687b      	ldr	r3, [r7, #4]
34016b44:	2b11      	cmp	r3, #17
34016b46:	f000 8286 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b4a:	687b      	ldr	r3, [r7, #4]
34016b4c:	2b12      	cmp	r3, #18
34016b4e:	f000 8282 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b52:	687b      	ldr	r3, [r7, #4]
34016b54:	2b13      	cmp	r3, #19
34016b56:	f000 827e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b5a:	687b      	ldr	r3, [r7, #4]
34016b5c:	2b14      	cmp	r3, #20
34016b5e:	f000 827a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b62:	687b      	ldr	r3, [r7, #4]
34016b64:	2b15      	cmp	r3, #21
34016b66:	f000 8276 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b6a:	687b      	ldr	r3, [r7, #4]
34016b6c:	2b16      	cmp	r3, #22
34016b6e:	f000 8272 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b72:	687b      	ldr	r3, [r7, #4]
34016b74:	2b17      	cmp	r3, #23
34016b76:	f000 826e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b7a:	687b      	ldr	r3, [r7, #4]
34016b7c:	2b18      	cmp	r3, #24
34016b7e:	f000 826a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b82:	687b      	ldr	r3, [r7, #4]
34016b84:	2b19      	cmp	r3, #25
34016b86:	f000 8266 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b8a:	687b      	ldr	r3, [r7, #4]
34016b8c:	2b1a      	cmp	r3, #26
34016b8e:	f000 8262 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b92:	687b      	ldr	r3, [r7, #4]
34016b94:	2b1b      	cmp	r3, #27
34016b96:	f000 825e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016b9a:	687b      	ldr	r3, [r7, #4]
34016b9c:	2b1c      	cmp	r3, #28
34016b9e:	f000 825a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ba2:	687b      	ldr	r3, [r7, #4]
34016ba4:	2b1d      	cmp	r3, #29
34016ba6:	f000 8256 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016baa:	687b      	ldr	r3, [r7, #4]
34016bac:	2b1e      	cmp	r3, #30
34016bae:	f000 8252 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bb2:	687b      	ldr	r3, [r7, #4]
34016bb4:	2b1f      	cmp	r3, #31
34016bb6:	f000 824e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bba:	687b      	ldr	r3, [r7, #4]
34016bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34016bc0:	f000 8249 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bc4:	687b      	ldr	r3, [r7, #4]
34016bc6:	4aa0      	ldr	r2, [pc, #640]	@ (34016e48 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
34016bc8:	4293      	cmp	r3, r2
34016bca:	f000 8244 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bce:	687b      	ldr	r3, [r7, #4]
34016bd0:	4a9e      	ldr	r2, [pc, #632]	@ (34016e4c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
34016bd2:	4293      	cmp	r3, r2
34016bd4:	f000 823f 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bd8:	687b      	ldr	r3, [r7, #4]
34016bda:	4a9d      	ldr	r2, [pc, #628]	@ (34016e50 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
34016bdc:	4293      	cmp	r3, r2
34016bde:	f000 823a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016be2:	687b      	ldr	r3, [r7, #4]
34016be4:	4a9b      	ldr	r2, [pc, #620]	@ (34016e54 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
34016be6:	4293      	cmp	r3, r2
34016be8:	f000 8235 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bec:	687b      	ldr	r3, [r7, #4]
34016bee:	4a9a      	ldr	r2, [pc, #616]	@ (34016e58 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
34016bf0:	4293      	cmp	r3, r2
34016bf2:	f000 8230 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016bf6:	687b      	ldr	r3, [r7, #4]
34016bf8:	4a98      	ldr	r2, [pc, #608]	@ (34016e5c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
34016bfa:	4293      	cmp	r3, r2
34016bfc:	f000 822b 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c00:	687b      	ldr	r3, [r7, #4]
34016c02:	4a97      	ldr	r2, [pc, #604]	@ (34016e60 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
34016c04:	4293      	cmp	r3, r2
34016c06:	f000 8226 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c0a:	687b      	ldr	r3, [r7, #4]
34016c0c:	4a95      	ldr	r2, [pc, #596]	@ (34016e64 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
34016c0e:	4293      	cmp	r3, r2
34016c10:	f000 8221 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c14:	687b      	ldr	r3, [r7, #4]
34016c16:	4a94      	ldr	r2, [pc, #592]	@ (34016e68 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
34016c18:	4293      	cmp	r3, r2
34016c1a:	f000 821c 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c1e:	687b      	ldr	r3, [r7, #4]
34016c20:	4a92      	ldr	r2, [pc, #584]	@ (34016e6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
34016c22:	4293      	cmp	r3, r2
34016c24:	f000 8217 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c28:	687b      	ldr	r3, [r7, #4]
34016c2a:	4a91      	ldr	r2, [pc, #580]	@ (34016e70 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
34016c2c:	4293      	cmp	r3, r2
34016c2e:	f000 8212 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c32:	687b      	ldr	r3, [r7, #4]
34016c34:	4a8f      	ldr	r2, [pc, #572]	@ (34016e74 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
34016c36:	4293      	cmp	r3, r2
34016c38:	f000 820d 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c3c:	687b      	ldr	r3, [r7, #4]
34016c3e:	4a8e      	ldr	r2, [pc, #568]	@ (34016e78 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
34016c40:	4293      	cmp	r3, r2
34016c42:	f000 8208 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c46:	687b      	ldr	r3, [r7, #4]
34016c48:	4a8c      	ldr	r2, [pc, #560]	@ (34016e7c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
34016c4a:	4293      	cmp	r3, r2
34016c4c:	f000 8203 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c50:	687b      	ldr	r3, [r7, #4]
34016c52:	4a8b      	ldr	r2, [pc, #556]	@ (34016e80 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
34016c54:	4293      	cmp	r3, r2
34016c56:	f000 81fe 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c5a:	687b      	ldr	r3, [r7, #4]
34016c5c:	4a89      	ldr	r2, [pc, #548]	@ (34016e84 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
34016c5e:	4293      	cmp	r3, r2
34016c60:	f000 81f9 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c64:	687b      	ldr	r3, [r7, #4]
34016c66:	4a88      	ldr	r2, [pc, #544]	@ (34016e88 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
34016c68:	4293      	cmp	r3, r2
34016c6a:	f000 81f4 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c6e:	687b      	ldr	r3, [r7, #4]
34016c70:	4a86      	ldr	r2, [pc, #536]	@ (34016e8c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
34016c72:	4293      	cmp	r3, r2
34016c74:	f000 81ef 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c78:	687b      	ldr	r3, [r7, #4]
34016c7a:	4a85      	ldr	r2, [pc, #532]	@ (34016e90 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
34016c7c:	4293      	cmp	r3, r2
34016c7e:	f000 81ea 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c82:	687b      	ldr	r3, [r7, #4]
34016c84:	4a83      	ldr	r2, [pc, #524]	@ (34016e94 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
34016c86:	4293      	cmp	r3, r2
34016c88:	f000 81e5 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c8c:	687b      	ldr	r3, [r7, #4]
34016c8e:	4a82      	ldr	r2, [pc, #520]	@ (34016e98 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
34016c90:	4293      	cmp	r3, r2
34016c92:	f000 81e0 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016c96:	687b      	ldr	r3, [r7, #4]
34016c98:	4a80      	ldr	r2, [pc, #512]	@ (34016e9c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
34016c9a:	4293      	cmp	r3, r2
34016c9c:	f000 81db 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ca0:	687b      	ldr	r3, [r7, #4]
34016ca2:	4a7f      	ldr	r2, [pc, #508]	@ (34016ea0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
34016ca4:	4293      	cmp	r3, r2
34016ca6:	f000 81d6 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016caa:	687b      	ldr	r3, [r7, #4]
34016cac:	4a7d      	ldr	r2, [pc, #500]	@ (34016ea4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
34016cae:	4293      	cmp	r3, r2
34016cb0:	f000 81d1 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cb4:	687b      	ldr	r3, [r7, #4]
34016cb6:	4a7c      	ldr	r2, [pc, #496]	@ (34016ea8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
34016cb8:	4293      	cmp	r3, r2
34016cba:	f000 81cc 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cbe:	687b      	ldr	r3, [r7, #4]
34016cc0:	4a7a      	ldr	r2, [pc, #488]	@ (34016eac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
34016cc2:	4293      	cmp	r3, r2
34016cc4:	f000 81c7 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cc8:	687b      	ldr	r3, [r7, #4]
34016cca:	4a79      	ldr	r2, [pc, #484]	@ (34016eb0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
34016ccc:	4293      	cmp	r3, r2
34016cce:	f000 81c2 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cd2:	687b      	ldr	r3, [r7, #4]
34016cd4:	4a77      	ldr	r2, [pc, #476]	@ (34016eb4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
34016cd6:	4293      	cmp	r3, r2
34016cd8:	f000 81bd 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cdc:	687b      	ldr	r3, [r7, #4]
34016cde:	4a76      	ldr	r2, [pc, #472]	@ (34016eb8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
34016ce0:	4293      	cmp	r3, r2
34016ce2:	f000 81b8 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ce6:	687b      	ldr	r3, [r7, #4]
34016ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016cec:	f000 81b3 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cf0:	687b      	ldr	r3, [r7, #4]
34016cf2:	4a72      	ldr	r2, [pc, #456]	@ (34016ebc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
34016cf4:	4293      	cmp	r3, r2
34016cf6:	f000 81ae 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016cfa:	687b      	ldr	r3, [r7, #4]
34016cfc:	4a70      	ldr	r2, [pc, #448]	@ (34016ec0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
34016cfe:	4293      	cmp	r3, r2
34016d00:	f000 81a9 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d04:	687b      	ldr	r3, [r7, #4]
34016d06:	4a6f      	ldr	r2, [pc, #444]	@ (34016ec4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
34016d08:	4293      	cmp	r3, r2
34016d0a:	f000 81a4 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d0e:	687b      	ldr	r3, [r7, #4]
34016d10:	4a6d      	ldr	r2, [pc, #436]	@ (34016ec8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
34016d12:	4293      	cmp	r3, r2
34016d14:	f000 819f 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d18:	687b      	ldr	r3, [r7, #4]
34016d1a:	4a6c      	ldr	r2, [pc, #432]	@ (34016ecc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
34016d1c:	4293      	cmp	r3, r2
34016d1e:	f000 819a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d22:	687b      	ldr	r3, [r7, #4]
34016d24:	4a6a      	ldr	r2, [pc, #424]	@ (34016ed0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
34016d26:	4293      	cmp	r3, r2
34016d28:	f000 8195 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d2c:	687b      	ldr	r3, [r7, #4]
34016d2e:	4a69      	ldr	r2, [pc, #420]	@ (34016ed4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
34016d30:	4293      	cmp	r3, r2
34016d32:	f000 8190 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d36:	687b      	ldr	r3, [r7, #4]
34016d38:	4a67      	ldr	r2, [pc, #412]	@ (34016ed8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
34016d3a:	4293      	cmp	r3, r2
34016d3c:	f000 818b 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d40:	687b      	ldr	r3, [r7, #4]
34016d42:	4a66      	ldr	r2, [pc, #408]	@ (34016edc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
34016d44:	4293      	cmp	r3, r2
34016d46:	f000 8186 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d4a:	687b      	ldr	r3, [r7, #4]
34016d4c:	4a64      	ldr	r2, [pc, #400]	@ (34016ee0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
34016d4e:	4293      	cmp	r3, r2
34016d50:	f000 8181 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d54:	687b      	ldr	r3, [r7, #4]
34016d56:	4a63      	ldr	r2, [pc, #396]	@ (34016ee4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
34016d58:	4293      	cmp	r3, r2
34016d5a:	f000 817c 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d5e:	687b      	ldr	r3, [r7, #4]
34016d60:	4a61      	ldr	r2, [pc, #388]	@ (34016ee8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
34016d62:	4293      	cmp	r3, r2
34016d64:	f000 8177 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d68:	687b      	ldr	r3, [r7, #4]
34016d6a:	4a60      	ldr	r2, [pc, #384]	@ (34016eec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
34016d6c:	4293      	cmp	r3, r2
34016d6e:	f000 8172 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d72:	687b      	ldr	r3, [r7, #4]
34016d74:	4a5e      	ldr	r2, [pc, #376]	@ (34016ef0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
34016d76:	4293      	cmp	r3, r2
34016d78:	f000 816d 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d7c:	687b      	ldr	r3, [r7, #4]
34016d7e:	4a5d      	ldr	r2, [pc, #372]	@ (34016ef4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
34016d80:	4293      	cmp	r3, r2
34016d82:	f000 8168 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d86:	687b      	ldr	r3, [r7, #4]
34016d88:	4a5b      	ldr	r2, [pc, #364]	@ (34016ef8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
34016d8a:	4293      	cmp	r3, r2
34016d8c:	f000 8163 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d90:	687b      	ldr	r3, [r7, #4]
34016d92:	4a5a      	ldr	r2, [pc, #360]	@ (34016efc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
34016d94:	4293      	cmp	r3, r2
34016d96:	f000 815e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016d9a:	687b      	ldr	r3, [r7, #4]
34016d9c:	4a58      	ldr	r2, [pc, #352]	@ (34016f00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
34016d9e:	4293      	cmp	r3, r2
34016da0:	f000 8159 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016da4:	687b      	ldr	r3, [r7, #4]
34016da6:	4a57      	ldr	r2, [pc, #348]	@ (34016f04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
34016da8:	4293      	cmp	r3, r2
34016daa:	f000 8154 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dae:	687b      	ldr	r3, [r7, #4]
34016db0:	4a55      	ldr	r2, [pc, #340]	@ (34016f08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
34016db2:	4293      	cmp	r3, r2
34016db4:	f000 814f 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016db8:	687b      	ldr	r3, [r7, #4]
34016dba:	4a54      	ldr	r2, [pc, #336]	@ (34016f0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
34016dbc:	4293      	cmp	r3, r2
34016dbe:	f000 814a 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dc2:	687b      	ldr	r3, [r7, #4]
34016dc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34016dc8:	f000 8145 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dcc:	687b      	ldr	r3, [r7, #4]
34016dce:	4a50      	ldr	r2, [pc, #320]	@ (34016f10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
34016dd0:	4293      	cmp	r3, r2
34016dd2:	f000 8140 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dd6:	687b      	ldr	r3, [r7, #4]
34016dd8:	4a4e      	ldr	r2, [pc, #312]	@ (34016f14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
34016dda:	4293      	cmp	r3, r2
34016ddc:	f000 813b 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016de0:	687b      	ldr	r3, [r7, #4]
34016de2:	4a4d      	ldr	r2, [pc, #308]	@ (34016f18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
34016de4:	4293      	cmp	r3, r2
34016de6:	f000 8136 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dea:	687b      	ldr	r3, [r7, #4]
34016dec:	4a4b      	ldr	r2, [pc, #300]	@ (34016f1c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
34016dee:	4293      	cmp	r3, r2
34016df0:	f000 8131 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016df4:	687b      	ldr	r3, [r7, #4]
34016df6:	4a4a      	ldr	r2, [pc, #296]	@ (34016f20 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
34016df8:	4293      	cmp	r3, r2
34016dfa:	f000 812c 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016dfe:	687b      	ldr	r3, [r7, #4]
34016e00:	4a48      	ldr	r2, [pc, #288]	@ (34016f24 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
34016e02:	4293      	cmp	r3, r2
34016e04:	f000 8127 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e08:	687b      	ldr	r3, [r7, #4]
34016e0a:	4a47      	ldr	r2, [pc, #284]	@ (34016f28 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
34016e0c:	4293      	cmp	r3, r2
34016e0e:	f000 8122 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e12:	687b      	ldr	r3, [r7, #4]
34016e14:	4a45      	ldr	r2, [pc, #276]	@ (34016f2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
34016e16:	4293      	cmp	r3, r2
34016e18:	f000 811d 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e1c:	687b      	ldr	r3, [r7, #4]
34016e1e:	4a44      	ldr	r2, [pc, #272]	@ (34016f30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
34016e20:	4293      	cmp	r3, r2
34016e22:	f000 8118 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e26:	687b      	ldr	r3, [r7, #4]
34016e28:	4a42      	ldr	r2, [pc, #264]	@ (34016f34 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
34016e2a:	4293      	cmp	r3, r2
34016e2c:	f000 8113 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e30:	687b      	ldr	r3, [r7, #4]
34016e32:	4a41      	ldr	r2, [pc, #260]	@ (34016f38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
34016e34:	4293      	cmp	r3, r2
34016e36:	f000 810e 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e3a:	687b      	ldr	r3, [r7, #4]
34016e3c:	4a3f      	ldr	r2, [pc, #252]	@ (34016f3c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
34016e3e:	4293      	cmp	r3, r2
34016e40:	f000 8109 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016e44:	e07c      	b.n	34016f40 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
34016e46:	bf00      	nop
34016e48:	10000001 	.word	0x10000001
34016e4c:	10000002 	.word	0x10000002
34016e50:	10000003 	.word	0x10000003
34016e54:	10000004 	.word	0x10000004
34016e58:	10000005 	.word	0x10000005
34016e5c:	10000006 	.word	0x10000006
34016e60:	10000007 	.word	0x10000007
34016e64:	10000008 	.word	0x10000008
34016e68:	10000009 	.word	0x10000009
34016e6c:	1000000a 	.word	0x1000000a
34016e70:	1000000b 	.word	0x1000000b
34016e74:	1000000c 	.word	0x1000000c
34016e78:	1000000d 	.word	0x1000000d
34016e7c:	1000000e 	.word	0x1000000e
34016e80:	1000000f 	.word	0x1000000f
34016e84:	10000010 	.word	0x10000010
34016e88:	10000011 	.word	0x10000011
34016e8c:	10000012 	.word	0x10000012
34016e90:	10000013 	.word	0x10000013
34016e94:	10000014 	.word	0x10000014
34016e98:	10000015 	.word	0x10000015
34016e9c:	10000016 	.word	0x10000016
34016ea0:	10000017 	.word	0x10000017
34016ea4:	10000018 	.word	0x10000018
34016ea8:	10000019 	.word	0x10000019
34016eac:	1000001a 	.word	0x1000001a
34016eb0:	1000001c 	.word	0x1000001c
34016eb4:	1000001d 	.word	0x1000001d
34016eb8:	1000001e 	.word	0x1000001e
34016ebc:	20000001 	.word	0x20000001
34016ec0:	20000003 	.word	0x20000003
34016ec4:	20000004 	.word	0x20000004
34016ec8:	20000005 	.word	0x20000005
34016ecc:	2000000c 	.word	0x2000000c
34016ed0:	2000000d 	.word	0x2000000d
34016ed4:	2000000e 	.word	0x2000000e
34016ed8:	2000000f 	.word	0x2000000f
34016edc:	20000010 	.word	0x20000010
34016ee0:	20000011 	.word	0x20000011
34016ee4:	20000012 	.word	0x20000012
34016ee8:	20000013 	.word	0x20000013
34016eec:	20000014 	.word	0x20000014
34016ef0:	20000016 	.word	0x20000016
34016ef4:	20000017 	.word	0x20000017
34016ef8:	20000018 	.word	0x20000018
34016efc:	20000019 	.word	0x20000019
34016f00:	2000001a 	.word	0x2000001a
34016f04:	2000001c 	.word	0x2000001c
34016f08:	2000001d 	.word	0x2000001d
34016f0c:	2000001e 	.word	0x2000001e
34016f10:	30000001 	.word	0x30000001
34016f14:	30000002 	.word	0x30000002
34016f18:	30000003 	.word	0x30000003
34016f1c:	30000004 	.word	0x30000004
34016f20:	30000005 	.word	0x30000005
34016f24:	30000006 	.word	0x30000006
34016f28:	30000007 	.word	0x30000007
34016f2c:	30000008 	.word	0x30000008
34016f30:	3000000a 	.word	0x3000000a
34016f34:	40000002 	.word	0x40000002
34016f38:	40000003 	.word	0x40000003
34016f3c:	40000005 	.word	0x40000005
34016f40:	687b      	ldr	r3, [r7, #4]
34016f42:	4a6d      	ldr	r2, [pc, #436]	@ (340170f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
34016f44:	4293      	cmp	r3, r2
34016f46:	f000 8086 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f4a:	687b      	ldr	r3, [r7, #4]
34016f4c:	4a6b      	ldr	r2, [pc, #428]	@ (340170fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
34016f4e:	4293      	cmp	r3, r2
34016f50:	f000 8081 	beq.w	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f54:	687b      	ldr	r3, [r7, #4]
34016f56:	4a6a      	ldr	r2, [pc, #424]	@ (34017100 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
34016f58:	4293      	cmp	r3, r2
34016f5a:	d07c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f5c:	687b      	ldr	r3, [r7, #4]
34016f5e:	4a69      	ldr	r2, [pc, #420]	@ (34017104 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
34016f60:	4293      	cmp	r3, r2
34016f62:	d078      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f64:	687b      	ldr	r3, [r7, #4]
34016f66:	4a68      	ldr	r2, [pc, #416]	@ (34017108 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
34016f68:	4293      	cmp	r3, r2
34016f6a:	d074      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f6c:	687b      	ldr	r3, [r7, #4]
34016f6e:	4a67      	ldr	r2, [pc, #412]	@ (3401710c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
34016f70:	4293      	cmp	r3, r2
34016f72:	d070      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f74:	687b      	ldr	r3, [r7, #4]
34016f76:	4a66      	ldr	r2, [pc, #408]	@ (34017110 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
34016f78:	4293      	cmp	r3, r2
34016f7a:	d06c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f7c:	687b      	ldr	r3, [r7, #4]
34016f7e:	4a65      	ldr	r2, [pc, #404]	@ (34017114 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
34016f80:	4293      	cmp	r3, r2
34016f82:	d068      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f84:	687b      	ldr	r3, [r7, #4]
34016f86:	4a64      	ldr	r2, [pc, #400]	@ (34017118 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
34016f88:	4293      	cmp	r3, r2
34016f8a:	d064      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f8c:	687b      	ldr	r3, [r7, #4]
34016f8e:	4a63      	ldr	r2, [pc, #396]	@ (3401711c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
34016f90:	4293      	cmp	r3, r2
34016f92:	d060      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f94:	687b      	ldr	r3, [r7, #4]
34016f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
34016f9a:	d05c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016f9c:	687b      	ldr	r3, [r7, #4]
34016f9e:	4a60      	ldr	r2, [pc, #384]	@ (34017120 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
34016fa0:	4293      	cmp	r3, r2
34016fa2:	d058      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fa4:	687b      	ldr	r3, [r7, #4]
34016fa6:	4a5f      	ldr	r2, [pc, #380]	@ (34017124 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
34016fa8:	4293      	cmp	r3, r2
34016faa:	d054      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fac:	687b      	ldr	r3, [r7, #4]
34016fae:	4a5e      	ldr	r2, [pc, #376]	@ (34017128 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
34016fb0:	4293      	cmp	r3, r2
34016fb2:	d050      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fb4:	687b      	ldr	r3, [r7, #4]
34016fb6:	4a5d      	ldr	r2, [pc, #372]	@ (3401712c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
34016fb8:	4293      	cmp	r3, r2
34016fba:	d04c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fbc:	687b      	ldr	r3, [r7, #4]
34016fbe:	4a5c      	ldr	r2, [pc, #368]	@ (34017130 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
34016fc0:	4293      	cmp	r3, r2
34016fc2:	d048      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fc4:	687b      	ldr	r3, [r7, #4]
34016fc6:	4a5b      	ldr	r2, [pc, #364]	@ (34017134 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
34016fc8:	4293      	cmp	r3, r2
34016fca:	d044      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fcc:	687b      	ldr	r3, [r7, #4]
34016fce:	4a5a      	ldr	r2, [pc, #360]	@ (34017138 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
34016fd0:	4293      	cmp	r3, r2
34016fd2:	d040      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fd4:	687b      	ldr	r3, [r7, #4]
34016fd6:	4a59      	ldr	r2, [pc, #356]	@ (3401713c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
34016fd8:	4293      	cmp	r3, r2
34016fda:	d03c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fdc:	687b      	ldr	r3, [r7, #4]
34016fde:	4a58      	ldr	r2, [pc, #352]	@ (34017140 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
34016fe0:	4293      	cmp	r3, r2
34016fe2:	d038      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fe4:	687b      	ldr	r3, [r7, #4]
34016fe6:	4a57      	ldr	r2, [pc, #348]	@ (34017144 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
34016fe8:	4293      	cmp	r3, r2
34016fea:	d034      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016fec:	687b      	ldr	r3, [r7, #4]
34016fee:	4a56      	ldr	r2, [pc, #344]	@ (34017148 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
34016ff0:	4293      	cmp	r3, r2
34016ff2:	d030      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ff4:	687b      	ldr	r3, [r7, #4]
34016ff6:	4a55      	ldr	r2, [pc, #340]	@ (3401714c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
34016ff8:	4293      	cmp	r3, r2
34016ffa:	d02c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34016ffc:	687b      	ldr	r3, [r7, #4]
34016ffe:	4a54      	ldr	r2, [pc, #336]	@ (34017150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
34017000:	4293      	cmp	r3, r2
34017002:	d028      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34017004:	687b      	ldr	r3, [r7, #4]
34017006:	4a53      	ldr	r2, [pc, #332]	@ (34017154 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
34017008:	4293      	cmp	r3, r2
3401700a:	d024      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401700c:	687b      	ldr	r3, [r7, #4]
3401700e:	4a52      	ldr	r2, [pc, #328]	@ (34017158 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
34017010:	4293      	cmp	r3, r2
34017012:	d020      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34017014:	687b      	ldr	r3, [r7, #4]
34017016:	4a51      	ldr	r2, [pc, #324]	@ (3401715c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
34017018:	4293      	cmp	r3, r2
3401701a:	d01c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401701c:	687b      	ldr	r3, [r7, #4]
3401701e:	4a50      	ldr	r2, [pc, #320]	@ (34017160 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
34017020:	4293      	cmp	r3, r2
34017022:	d018      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34017024:	687b      	ldr	r3, [r7, #4]
34017026:	4a4f      	ldr	r2, [pc, #316]	@ (34017164 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
34017028:	4293      	cmp	r3, r2
3401702a:	d014      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401702c:	687b      	ldr	r3, [r7, #4]
3401702e:	4a4e      	ldr	r2, [pc, #312]	@ (34017168 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
34017030:	4293      	cmp	r3, r2
34017032:	d010      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34017034:	687b      	ldr	r3, [r7, #4]
34017036:	4a4d      	ldr	r2, [pc, #308]	@ (3401716c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
34017038:	4293      	cmp	r3, r2
3401703a:	d00c      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401703c:	687b      	ldr	r3, [r7, #4]
3401703e:	4a4c      	ldr	r2, [pc, #304]	@ (34017170 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
34017040:	4293      	cmp	r3, r2
34017042:	d008      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34017044:	687b      	ldr	r3, [r7, #4]
34017046:	4a4b      	ldr	r2, [pc, #300]	@ (34017174 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
34017048:	4293      	cmp	r3, r2
3401704a:	d004      	beq.n	34017056 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401704c:	f240 1173 	movw	r1, #371	@ 0x173
34017050:	4849      	ldr	r0, [pc, #292]	@ (34017178 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34017052:	f7ea fabd 	bl	340015d0 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34017056:	683b      	ldr	r3, [r7, #0]
34017058:	2b03      	cmp	r3, #3
3401705a:	d904      	bls.n	34017066 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
3401705c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34017060:	4845      	ldr	r0, [pc, #276]	@ (34017178 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34017062:	f7ea fab5 	bl	340015d0 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34017066:	4a45      	ldr	r2, [pc, #276]	@ (3401717c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34017068:	687b      	ldr	r3, [r7, #4]
3401706a:	0f1b      	lsrs	r3, r3, #28
3401706c:	3304      	adds	r3, #4
3401706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34017072:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34017074:	687b      	ldr	r3, [r7, #4]
34017076:	f003 031f 	and.w	r3, r3, #31
3401707a:	2201      	movs	r2, #1
3401707c:	fa02 f303 	lsl.w	r3, r2, r3
34017080:	43da      	mvns	r2, r3
34017082:	68fb      	ldr	r3, [r7, #12]
34017084:	4013      	ands	r3, r2
34017086:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34017088:	683b      	ldr	r3, [r7, #0]
3401708a:	f003 0201 	and.w	r2, r3, #1
3401708e:	687b      	ldr	r3, [r7, #4]
34017090:	f003 031f 	and.w	r3, r3, #31
34017094:	409a      	lsls	r2, r3
34017096:	68fb      	ldr	r3, [r7, #12]
34017098:	4313      	orrs	r3, r2
3401709a:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401709c:	4937      	ldr	r1, [pc, #220]	@ (3401717c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3401709e:	687b      	ldr	r3, [r7, #4]
340170a0:	0f1b      	lsrs	r3, r3, #28
340170a2:	68fa      	ldr	r2, [r7, #12]
340170a4:	3304      	adds	r3, #4
340170a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
340170aa:	4a34      	ldr	r2, [pc, #208]	@ (3401717c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
340170ac:	687b      	ldr	r3, [r7, #4]
340170ae:	0f1b      	lsrs	r3, r3, #28
340170b0:	330c      	adds	r3, #12
340170b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
340170b6:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
340170b8:	687b      	ldr	r3, [r7, #4]
340170ba:	f003 031f 	and.w	r3, r3, #31
340170be:	2201      	movs	r2, #1
340170c0:	fa02 f303 	lsl.w	r3, r2, r3
340170c4:	43da      	mvns	r2, r3
340170c6:	68fb      	ldr	r3, [r7, #12]
340170c8:	4013      	ands	r3, r2
340170ca:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
340170cc:	683b      	ldr	r3, [r7, #0]
340170ce:	085b      	lsrs	r3, r3, #1
340170d0:	f003 0201 	and.w	r2, r3, #1
340170d4:	687b      	ldr	r3, [r7, #4]
340170d6:	f003 031f 	and.w	r3, r3, #31
340170da:	409a      	lsls	r2, r3
340170dc:	68fb      	ldr	r3, [r7, #12]
340170de:	4313      	orrs	r3, r2
340170e0:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
340170e2:	4926      	ldr	r1, [pc, #152]	@ (3401717c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
340170e4:	687b      	ldr	r3, [r7, #4]
340170e6:	0f1b      	lsrs	r3, r3, #28
340170e8:	68fa      	ldr	r2, [r7, #12]
340170ea:	330c      	adds	r3, #12
340170ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
340170f0:	bf00      	nop
340170f2:	3710      	adds	r7, #16
340170f4:	46bd      	mov	sp, r7
340170f6:	bd80      	pop	{r7, pc}
340170f8:	4000000c 	.word	0x4000000c
340170fc:	4000000d 	.word	0x4000000d
34017100:	40000011 	.word	0x40000011
34017104:	40000012 	.word	0x40000012
34017108:	40000013 	.word	0x40000013
3401710c:	40000019 	.word	0x40000019
34017110:	4000001b 	.word	0x4000001b
34017114:	4000001c 	.word	0x4000001c
34017118:	4000001d 	.word	0x4000001d
3401711c:	4000001f 	.word	0x4000001f
34017120:	50000001 	.word	0x50000001
34017124:	50000002 	.word	0x50000002
34017128:	50000003 	.word	0x50000003
3401712c:	50000004 	.word	0x50000004
34017130:	50000005 	.word	0x50000005
34017134:	50000006 	.word	0x50000006
34017138:	50000008 	.word	0x50000008
3401713c:	50000009 	.word	0x50000009
34017140:	5000000a 	.word	0x5000000a
34017144:	5000000b 	.word	0x5000000b
34017148:	5000000d 	.word	0x5000000d
3401714c:	5000000e 	.word	0x5000000e
34017150:	5000000f 	.word	0x5000000f
34017154:	50000011 	.word	0x50000011
34017158:	50000012 	.word	0x50000012
3401715c:	50000013 	.word	0x50000013
34017160:	50000014 	.word	0x50000014
34017164:	50000016 	.word	0x50000016
34017168:	50000017 	.word	0x50000017
3401716c:	50000018 	.word	0x50000018
34017170:	5000001b 	.word	0x5000001b
34017174:	5000001e 	.word	0x5000001e
34017178:	3401d7a4 	.word	0x3401d7a4
3401717c:	54024000 	.word	0x54024000

34017180 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
34017180:	b580      	push	{r7, lr}
34017182:	b086      	sub	sp, #24
34017184:	af00      	add	r7, sp, #0
34017186:	60f8      	str	r0, [r7, #12]
34017188:	60b9      	str	r1, [r7, #8]
3401718a:	4613      	mov	r3, r2
3401718c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
3401718e:	68fb      	ldr	r3, [r7, #12]
34017190:	689b      	ldr	r3, [r3, #8]
34017192:	2b00      	cmp	r3, #0
34017194:	d00e      	beq.n	340171b4 <HAL_SPI_Transmit_DMA+0x34>
34017196:	68fb      	ldr	r3, [r7, #12]
34017198:	689b      	ldr	r3, [r3, #8]
3401719a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401719e:	d009      	beq.n	340171b4 <HAL_SPI_Transmit_DMA+0x34>
340171a0:	68fb      	ldr	r3, [r7, #12]
340171a2:	689b      	ldr	r3, [r3, #8]
340171a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340171a8:	d004      	beq.n	340171b4 <HAL_SPI_Transmit_DMA+0x34>
340171aa:	f240 71a5 	movw	r1, #1957	@ 0x7a5
340171ae:	4882      	ldr	r0, [pc, #520]	@ (340173b8 <HAL_SPI_Transmit_DMA+0x238>)
340171b0:	f7ea fa0e 	bl	340015d0 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
340171b4:	68fb      	ldr	r3, [r7, #12]
340171b6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
340171ba:	b2db      	uxtb	r3, r3
340171bc:	2b01      	cmp	r3, #1
340171be:	d001      	beq.n	340171c4 <HAL_SPI_Transmit_DMA+0x44>
  {
    return HAL_BUSY;
340171c0:	2302      	movs	r3, #2
340171c2:	e1b7      	b.n	34017534 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  if ((pData == NULL) || (Size == 0UL))
340171c4:	68bb      	ldr	r3, [r7, #8]
340171c6:	2b00      	cmp	r3, #0
340171c8:	d002      	beq.n	340171d0 <HAL_SPI_Transmit_DMA+0x50>
340171ca:	88fb      	ldrh	r3, [r7, #6]
340171cc:	2b00      	cmp	r3, #0
340171ce:	d101      	bne.n	340171d4 <HAL_SPI_Transmit_DMA+0x54>
  {
    return HAL_ERROR;
340171d0:	2301      	movs	r3, #1
340171d2:	e1af      	b.n	34017534 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
340171d4:	68fb      	ldr	r3, [r7, #12]
340171d6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
340171da:	2b01      	cmp	r3, #1
340171dc:	d101      	bne.n	340171e2 <HAL_SPI_Transmit_DMA+0x62>
340171de:	2302      	movs	r3, #2
340171e0:	e1a8      	b.n	34017534 <HAL_SPI_Transmit_DMA+0x3b4>
340171e2:	68fb      	ldr	r3, [r7, #12]
340171e4:	2201      	movs	r2, #1
340171e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
340171ea:	68fb      	ldr	r3, [r7, #12]
340171ec:	2203      	movs	r2, #3
340171ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
340171f2:	68fb      	ldr	r3, [r7, #12]
340171f4:	2200      	movs	r2, #0
340171f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
340171fa:	68fb      	ldr	r3, [r7, #12]
340171fc:	68ba      	ldr	r2, [r7, #8]
340171fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
34017200:	68fb      	ldr	r3, [r7, #12]
34017202:	88fa      	ldrh	r2, [r7, #6]
34017204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
34017208:	68fb      	ldr	r3, [r7, #12]
3401720a:	88fa      	ldrh	r2, [r7, #6]
3401720c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
34017210:	68fb      	ldr	r3, [r7, #12]
34017212:	2200      	movs	r2, #0
34017214:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
34017216:	68fb      	ldr	r3, [r7, #12]
34017218:	2200      	movs	r2, #0
3401721a:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
3401721c:	68fb      	ldr	r3, [r7, #12]
3401721e:	2200      	movs	r2, #0
34017220:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
34017222:	68fb      	ldr	r3, [r7, #12]
34017224:	2200      	movs	r2, #0
34017226:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
3401722a:	68fb      	ldr	r3, [r7, #12]
3401722c:	2200      	movs	r2, #0
3401722e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
34017232:	68fb      	ldr	r3, [r7, #12]
34017234:	689b      	ldr	r3, [r3, #8]
34017236:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401723a:	d108      	bne.n	3401724e <HAL_SPI_Transmit_DMA+0xce>
  {
    SPI_1LINE_TX(hspi);
3401723c:	68fb      	ldr	r3, [r7, #12]
3401723e:	681b      	ldr	r3, [r3, #0]
34017240:	681a      	ldr	r2, [r3, #0]
34017242:	68fb      	ldr	r3, [r7, #12]
34017244:	681b      	ldr	r3, [r3, #0]
34017246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3401724a:	601a      	str	r2, [r3, #0]
3401724c:	e009      	b.n	34017262 <HAL_SPI_Transmit_DMA+0xe2>
  }
  else
  {
    SPI_2LINES_TX(hspi);
3401724e:	68fb      	ldr	r3, [r7, #12]
34017250:	681b      	ldr	r3, [r3, #0]
34017252:	68db      	ldr	r3, [r3, #12]
34017254:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
34017258:	68fb      	ldr	r3, [r7, #12]
3401725a:	681b      	ldr	r3, [r3, #0]
3401725c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34017260:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34017262:	68fb      	ldr	r3, [r7, #12]
34017264:	68db      	ldr	r3, [r3, #12]
34017266:	2b0f      	cmp	r3, #15
34017268:	d92d      	bls.n	340172c6 <HAL_SPI_Transmit_DMA+0x146>
3401726a:	68fb      	ldr	r3, [r7, #12]
3401726c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017270:	699b      	ldr	r3, [r3, #24]
34017272:	2b02      	cmp	r3, #2
34017274:	d027      	beq.n	340172c6 <HAL_SPI_Transmit_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34017276:	68fb      	ldr	r3, [r7, #12]
34017278:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
3401727a:	4a50      	ldr	r2, [pc, #320]	@ (340173bc <HAL_SPI_Transmit_DMA+0x23c>)
3401727c:	4293      	cmp	r3, r2
3401727e:	d02c      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34017280:	68fb      	ldr	r3, [r7, #12]
34017282:	681b      	ldr	r3, [r3, #0]
34017284:	4a4e      	ldr	r2, [pc, #312]	@ (340173c0 <HAL_SPI_Transmit_DMA+0x240>)
34017286:	4293      	cmp	r3, r2
34017288:	d027      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
3401728a:	68fb      	ldr	r3, [r7, #12]
3401728c:	681b      	ldr	r3, [r3, #0]
3401728e:	4a4d      	ldr	r2, [pc, #308]	@ (340173c4 <HAL_SPI_Transmit_DMA+0x244>)
34017290:	4293      	cmp	r3, r2
34017292:	d022      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
34017294:	68fb      	ldr	r3, [r7, #12]
34017296:	681b      	ldr	r3, [r3, #0]
34017298:	4a4b      	ldr	r2, [pc, #300]	@ (340173c8 <HAL_SPI_Transmit_DMA+0x248>)
3401729a:	4293      	cmp	r3, r2
3401729c:	d01d      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
3401729e:	68fb      	ldr	r3, [r7, #12]
340172a0:	681b      	ldr	r3, [r3, #0]
340172a2:	4a4a      	ldr	r2, [pc, #296]	@ (340173cc <HAL_SPI_Transmit_DMA+0x24c>)
340172a4:	4293      	cmp	r3, r2
340172a6:	d018      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
340172a8:	68fb      	ldr	r3, [r7, #12]
340172aa:	681b      	ldr	r3, [r3, #0]
340172ac:	4a48      	ldr	r2, [pc, #288]	@ (340173d0 <HAL_SPI_Transmit_DMA+0x250>)
340172ae:	4293      	cmp	r3, r2
340172b0:	d013      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
340172b2:	68fb      	ldr	r3, [r7, #12]
340172b4:	681b      	ldr	r3, [r3, #0]
340172b6:	4a47      	ldr	r2, [pc, #284]	@ (340173d4 <HAL_SPI_Transmit_DMA+0x254>)
340172b8:	4293      	cmp	r3, r2
340172ba:	d00e      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
340172bc:	68fb      	ldr	r3, [r7, #12]
340172be:	681b      	ldr	r3, [r3, #0]
340172c0:	4a45      	ldr	r2, [pc, #276]	@ (340173d8 <HAL_SPI_Transmit_DMA+0x258>)
340172c2:	4293      	cmp	r3, r2
340172c4:	d009      	beq.n	340172da <HAL_SPI_Transmit_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
340172c6:	68fb      	ldr	r3, [r7, #12]
340172c8:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
340172ca:	2b07      	cmp	r3, #7
340172cc:	d90b      	bls.n	340172e6 <HAL_SPI_Transmit_DMA+0x166>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
340172ce:	68fb      	ldr	r3, [r7, #12]
340172d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340172d4:	699b      	ldr	r3, [r3, #24]
340172d6:	2b00      	cmp	r3, #0
340172d8:	d105      	bne.n	340172e6 <HAL_SPI_Transmit_DMA+0x166>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
340172da:	68fb      	ldr	r3, [r7, #12]
340172dc:	2200      	movs	r2, #0
340172de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
340172e2:	2301      	movs	r3, #1
340172e4:	e126      	b.n	34017534 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
340172e6:	68fb      	ldr	r3, [r7, #12]
340172e8:	68db      	ldr	r3, [r3, #12]
340172ea:	2b07      	cmp	r3, #7
340172ec:	d820      	bhi.n	34017330 <HAL_SPI_Transmit_DMA+0x1b0>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
340172ee:	68fb      	ldr	r3, [r7, #12]
340172f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340172f4:	699b      	ldr	r3, [r3, #24]
340172f6:	2b01      	cmp	r3, #1
340172f8:	d109      	bne.n	3401730e <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
340172fa:	68fb      	ldr	r3, [r7, #12]
340172fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34017300:	b29b      	uxth	r3, r3
34017302:	3301      	adds	r3, #1
34017304:	105b      	asrs	r3, r3, #1
34017306:	b29a      	uxth	r2, r3
34017308:	68fb      	ldr	r3, [r7, #12]
3401730a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
3401730e:	68fb      	ldr	r3, [r7, #12]
34017310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017314:	699b      	ldr	r3, [r3, #24]
34017316:	2b02      	cmp	r3, #2
34017318:	d11e      	bne.n	34017358 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
3401731a:	68fb      	ldr	r3, [r7, #12]
3401731c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34017320:	b29b      	uxth	r3, r3
34017322:	3303      	adds	r3, #3
34017324:	109b      	asrs	r3, r3, #2
34017326:	b29a      	uxth	r2, r3
34017328:	68fb      	ldr	r3, [r7, #12]
3401732a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
3401732e:	e013      	b.n	34017358 <HAL_SPI_Transmit_DMA+0x1d8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34017330:	68fb      	ldr	r3, [r7, #12]
34017332:	68db      	ldr	r3, [r3, #12]
34017334:	2b0f      	cmp	r3, #15
34017336:	d80f      	bhi.n	34017358 <HAL_SPI_Transmit_DMA+0x1d8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34017338:	68fb      	ldr	r3, [r7, #12]
3401733a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401733e:	699b      	ldr	r3, [r3, #24]
34017340:	2b02      	cmp	r3, #2
34017342:	d109      	bne.n	34017358 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34017344:	68fb      	ldr	r3, [r7, #12]
34017346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
3401734a:	b29b      	uxth	r3, r3
3401734c:	3301      	adds	r3, #1
3401734e:	105b      	asrs	r3, r3, #1
34017350:	b29a      	uxth	r2, r3
34017352:	68fb      	ldr	r3, [r7, #12]
34017354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
34017358:	68fb      	ldr	r3, [r7, #12]
3401735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401735e:	4a1f      	ldr	r2, [pc, #124]	@ (340173dc <HAL_SPI_Transmit_DMA+0x25c>)
34017360:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
34017362:	68fb      	ldr	r3, [r7, #12]
34017364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017368:	4a1d      	ldr	r2, [pc, #116]	@ (340173e0 <HAL_SPI_Transmit_DMA+0x260>)
3401736a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
3401736c:	68fb      	ldr	r3, [r7, #12]
3401736e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017372:	4a1c      	ldr	r2, [pc, #112]	@ (340173e4 <HAL_SPI_Transmit_DMA+0x264>)
34017374:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
34017376:	68fb      	ldr	r3, [r7, #12]
34017378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401737c:	2200      	movs	r2, #0
3401737e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34017380:	68fb      	ldr	r3, [r7, #12]
34017382:	681b      	ldr	r3, [r3, #0]
34017384:	689a      	ldr	r2, [r3, #8]
34017386:	68fb      	ldr	r3, [r7, #12]
34017388:	681b      	ldr	r3, [r3, #0]
3401738a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3401738e:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34017390:	68fb      	ldr	r3, [r7, #12]
34017392:	68db      	ldr	r3, [r3, #12]
34017394:	2b07      	cmp	r3, #7
34017396:	d804      	bhi.n	340173a2 <HAL_SPI_Transmit_DMA+0x222>
  {
    hspi->TxXferCount = Size;
34017398:	68fb      	ldr	r3, [r7, #12]
3401739a:	88fa      	ldrh	r2, [r7, #6]
3401739c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
340173a0:	e028      	b.n	340173f4 <HAL_SPI_Transmit_DMA+0x274>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
340173a2:	68fb      	ldr	r3, [r7, #12]
340173a4:	68db      	ldr	r3, [r3, #12]
340173a6:	2b0f      	cmp	r3, #15
340173a8:	d81e      	bhi.n	340173e8 <HAL_SPI_Transmit_DMA+0x268>
  {
    hspi->TxXferCount = Size * 2U;
340173aa:	88fb      	ldrh	r3, [r7, #6]
340173ac:	005b      	lsls	r3, r3, #1
340173ae:	b29a      	uxth	r2, r3
340173b0:	68fb      	ldr	r3, [r7, #12]
340173b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
340173b6:	e01d      	b.n	340173f4 <HAL_SPI_Transmit_DMA+0x274>
340173b8:	3401d84c 	.word	0x3401d84c
340173bc:	52003000 	.word	0x52003000
340173c0:	42003000 	.word	0x42003000
340173c4:	50003800 	.word	0x50003800
340173c8:	40003800 	.word	0x40003800
340173cc:	50003c00 	.word	0x50003c00
340173d0:	40003c00 	.word	0x40003c00
340173d4:	56001400 	.word	0x56001400
340173d8:	46001400 	.word	0x46001400
340173dc:	3401797b 	.word	0x3401797b
340173e0:	34017935 	.word	0x34017935
340173e4:	34017997 	.word	0x34017997
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
340173e8:	88fb      	ldrh	r3, [r7, #6]
340173ea:	009b      	lsls	r3, r3, #2
340173ec:	b29a      	uxth	r2, r3
340173ee:	68fb      	ldr	r3, [r7, #12]
340173f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340173f4:	68fb      	ldr	r3, [r7, #12]
340173f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340173fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340173fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34017400:	2b00      	cmp	r3, #0
34017402:	d02d      	beq.n	34017460 <HAL_SPI_Transmit_DMA+0x2e0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
34017404:	68fb      	ldr	r3, [r7, #12]
34017406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401740a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3401740c:	2b00      	cmp	r3, #0
3401740e:	d024      	beq.n	3401745a <HAL_SPI_Transmit_DMA+0x2da>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
34017410:	68fb      	ldr	r3, [r7, #12]
34017412:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34017416:	b29a      	uxth	r2, r3
34017418:	68fb      	ldr	r3, [r7, #12]
3401741a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401741e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34017420:	681b      	ldr	r3, [r3, #0]
34017422:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
34017424:	68fb      	ldr	r3, [r7, #12]
34017426:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34017428:	68fb      	ldr	r3, [r7, #12]
3401742a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401742e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34017430:	681b      	ldr	r3, [r3, #0]
34017432:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
34017434:	68fb      	ldr	r3, [r7, #12]
34017436:	681b      	ldr	r3, [r3, #0]
34017438:	f103 0220 	add.w	r2, r3, #32
3401743c:	68fb      	ldr	r3, [r7, #12]
3401743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34017444:	681b      	ldr	r3, [r3, #0]
34017446:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
34017448:	68fb      	ldr	r3, [r7, #12]
3401744a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401744e:	4618      	mov	r0, r3
34017450:	f7f0 fbb3 	bl	34007bba <HAL_DMAEx_List_Start_IT>
34017454:	4603      	mov	r3, r0
34017456:	75fb      	strb	r3, [r7, #23]
34017458:	e014      	b.n	34017484 <HAL_SPI_Transmit_DMA+0x304>
    }
    else
    {
      status = HAL_ERROR;
3401745a:	2301      	movs	r3, #1
3401745c:	75fb      	strb	r3, [r7, #23]
3401745e:	e011      	b.n	34017484 <HAL_SPI_Transmit_DMA+0x304>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34017460:	68fb      	ldr	r3, [r7, #12]
34017462:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34017466:	68fb      	ldr	r3, [r7, #12]
34017468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3401746a:	4619      	mov	r1, r3
3401746c:	68fb      	ldr	r3, [r7, #12]
3401746e:	681b      	ldr	r3, [r3, #0]
34017470:	3320      	adds	r3, #32
34017472:	461a      	mov	r2, r3
                              hspi->TxXferCount);
34017474:	68fb      	ldr	r3, [r7, #12]
34017476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
3401747a:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
3401747c:	f7f0 f85c 	bl	34007538 <HAL_DMA_Start_IT>
34017480:	4603      	mov	r3, r0
34017482:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
34017484:	7dfb      	ldrb	r3, [r7, #23]
34017486:	2b00      	cmp	r3, #0
34017488:	d011      	beq.n	340174ae <HAL_SPI_Transmit_DMA+0x32e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
3401748a:	68fb      	ldr	r3, [r7, #12]
3401748c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017490:	f043 0210 	orr.w	r2, r3, #16
34017494:	68fb      	ldr	r3, [r7, #12]
34017496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
3401749a:	68fb      	ldr	r3, [r7, #12]
3401749c:	2201      	movs	r2, #1
3401749e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
340174a2:	68fb      	ldr	r3, [r7, #12]
340174a4:	2200      	movs	r2, #0
340174a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
340174aa:	2301      	movs	r3, #1
340174ac:	e042      	b.n	34017534 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
340174ae:	68fb      	ldr	r3, [r7, #12]
340174b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340174b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340174b6:	2b81      	cmp	r3, #129	@ 0x81
340174b8:	d108      	bne.n	340174cc <HAL_SPI_Transmit_DMA+0x34c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
340174ba:	68fb      	ldr	r3, [r7, #12]
340174bc:	681b      	ldr	r3, [r3, #0]
340174be:	685b      	ldr	r3, [r3, #4]
340174c0:	68fa      	ldr	r2, [r7, #12]
340174c2:	6812      	ldr	r2, [r2, #0]
340174c4:	0c1b      	lsrs	r3, r3, #16
340174c6:	041b      	lsls	r3, r3, #16
340174c8:	6053      	str	r3, [r2, #4]
340174ca:	e009      	b.n	340174e0 <HAL_SPI_Transmit_DMA+0x360>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
340174cc:	68fb      	ldr	r3, [r7, #12]
340174ce:	681b      	ldr	r3, [r3, #0]
340174d0:	685b      	ldr	r3, [r3, #4]
340174d2:	0c1b      	lsrs	r3, r3, #16
340174d4:	041b      	lsls	r3, r3, #16
340174d6:	88f9      	ldrh	r1, [r7, #6]
340174d8:	68fa      	ldr	r2, [r7, #12]
340174da:	6812      	ldr	r2, [r2, #0]
340174dc:	430b      	orrs	r3, r1
340174de:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
340174e0:	68fb      	ldr	r3, [r7, #12]
340174e2:	681b      	ldr	r3, [r3, #0]
340174e4:	689a      	ldr	r2, [r3, #8]
340174e6:	68fb      	ldr	r3, [r7, #12]
340174e8:	681b      	ldr	r3, [r3, #0]
340174ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340174ee:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
340174f0:	68fb      	ldr	r3, [r7, #12]
340174f2:	681b      	ldr	r3, [r3, #0]
340174f4:	691a      	ldr	r2, [r3, #16]
340174f6:	68fb      	ldr	r3, [r7, #12]
340174f8:	681b      	ldr	r3, [r3, #0]
340174fa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
340174fe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
34017500:	68fb      	ldr	r3, [r7, #12]
34017502:	681b      	ldr	r3, [r3, #0]
34017504:	681a      	ldr	r2, [r3, #0]
34017506:	68fb      	ldr	r3, [r7, #12]
34017508:	681b      	ldr	r3, [r3, #0]
3401750a:	f042 0201 	orr.w	r2, r2, #1
3401750e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
34017510:	68fb      	ldr	r3, [r7, #12]
34017512:	685b      	ldr	r3, [r3, #4]
34017514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017518:	d107      	bne.n	3401752a <HAL_SPI_Transmit_DMA+0x3aa>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
3401751a:	68fb      	ldr	r3, [r7, #12]
3401751c:	681b      	ldr	r3, [r3, #0]
3401751e:	681a      	ldr	r2, [r3, #0]
34017520:	68fb      	ldr	r3, [r7, #12]
34017522:	681b      	ldr	r3, [r3, #0]
34017524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34017528:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
3401752a:	68fb      	ldr	r3, [r7, #12]
3401752c:	2200      	movs	r2, #0
3401752e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
34017532:	2300      	movs	r3, #0
}
34017534:	4618      	mov	r0, r3
34017536:	3718      	adds	r7, #24
34017538:	46bd      	mov	sp, r7
3401753a:	bd80      	pop	{r7, pc}

3401753c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
3401753c:	b580      	push	{r7, lr}
3401753e:	b08a      	sub	sp, #40	@ 0x28
34017540:	af00      	add	r7, sp, #0
34017542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
34017544:	687b      	ldr	r3, [r7, #4]
34017546:	681b      	ldr	r3, [r3, #0]
34017548:	691b      	ldr	r3, [r3, #16]
3401754a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
3401754c:	687b      	ldr	r3, [r7, #4]
3401754e:	681b      	ldr	r3, [r3, #0]
34017550:	695b      	ldr	r3, [r3, #20]
34017552:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
34017554:	6a3a      	ldr	r2, [r7, #32]
34017556:	69fb      	ldr	r3, [r7, #28]
34017558:	4013      	ands	r3, r2
3401755a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
3401755c:	687b      	ldr	r3, [r7, #4]
3401755e:	681b      	ldr	r3, [r3, #0]
34017560:	689b      	ldr	r3, [r3, #8]
34017562:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
34017564:	2300      	movs	r3, #0
34017566:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
34017568:	687b      	ldr	r3, [r7, #4]
3401756a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401756e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
34017570:	687b      	ldr	r3, [r7, #4]
34017572:	681b      	ldr	r3, [r3, #0]
34017574:	3330      	adds	r3, #48	@ 0x30
34017576:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
34017578:	69fb      	ldr	r3, [r7, #28]
3401757a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3401757e:	2b00      	cmp	r3, #0
34017580:	d010      	beq.n	340175a4 <HAL_SPI_IRQHandler+0x68>
34017582:	6a3b      	ldr	r3, [r7, #32]
34017584:	f003 0308 	and.w	r3, r3, #8
34017588:	2b00      	cmp	r3, #0
3401758a:	d00b      	beq.n	340175a4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
3401758c:	687b      	ldr	r3, [r7, #4]
3401758e:	681b      	ldr	r3, [r3, #0]
34017590:	699a      	ldr	r2, [r3, #24]
34017592:	687b      	ldr	r3, [r7, #4]
34017594:	681b      	ldr	r3, [r3, #0]
34017596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3401759a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
3401759c:	6878      	ldr	r0, [r7, #4]
3401759e:	f000 f9bf 	bl	34017920 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
340175a2:	e19a      	b.n	340178da <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
340175a4:	69bb      	ldr	r3, [r7, #24]
340175a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340175aa:	2b00      	cmp	r3, #0
340175ac:	d113      	bne.n	340175d6 <HAL_SPI_IRQHandler+0x9a>
340175ae:	69bb      	ldr	r3, [r7, #24]
340175b0:	f003 0320 	and.w	r3, r3, #32
340175b4:	2b00      	cmp	r3, #0
340175b6:	d10e      	bne.n	340175d6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
340175b8:	69bb      	ldr	r3, [r7, #24]
340175ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
340175be:	2b00      	cmp	r3, #0
340175c0:	d009      	beq.n	340175d6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
340175c2:	687b      	ldr	r3, [r7, #4]
340175c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340175c6:	6878      	ldr	r0, [r7, #4]
340175c8:	4798      	blx	r3
    hspi->RxISR(hspi);
340175ca:	687b      	ldr	r3, [r7, #4]
340175cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
340175ce:	6878      	ldr	r0, [r7, #4]
340175d0:	4798      	blx	r3
    handled = 1UL;
340175d2:	2301      	movs	r3, #1
340175d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
340175d6:	69bb      	ldr	r3, [r7, #24]
340175d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340175dc:	2b00      	cmp	r3, #0
340175de:	d10f      	bne.n	34017600 <HAL_SPI_IRQHandler+0xc4>
340175e0:	69bb      	ldr	r3, [r7, #24]
340175e2:	f003 0301 	and.w	r3, r3, #1
340175e6:	2b00      	cmp	r3, #0
340175e8:	d00a      	beq.n	34017600 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
340175ea:	69bb      	ldr	r3, [r7, #24]
340175ec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
340175f0:	2b00      	cmp	r3, #0
340175f2:	d105      	bne.n	34017600 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
340175f4:	687b      	ldr	r3, [r7, #4]
340175f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
340175f8:	6878      	ldr	r0, [r7, #4]
340175fa:	4798      	blx	r3
    handled = 1UL;
340175fc:	2301      	movs	r3, #1
340175fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
34017600:	69bb      	ldr	r3, [r7, #24]
34017602:	f003 0320 	and.w	r3, r3, #32
34017606:	2b00      	cmp	r3, #0
34017608:	d10f      	bne.n	3401762a <HAL_SPI_IRQHandler+0xee>
3401760a:	69bb      	ldr	r3, [r7, #24]
3401760c:	f003 0302 	and.w	r3, r3, #2
34017610:	2b00      	cmp	r3, #0
34017612:	d00a      	beq.n	3401762a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
34017614:	69bb      	ldr	r3, [r7, #24]
34017616:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
3401761a:	2b00      	cmp	r3, #0
3401761c:	d105      	bne.n	3401762a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
3401761e:	687b      	ldr	r3, [r7, #4]
34017620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34017622:	6878      	ldr	r0, [r7, #4]
34017624:	4798      	blx	r3
    handled = 1UL;
34017626:	2301      	movs	r3, #1
34017628:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
3401762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401762c:	2b00      	cmp	r3, #0
3401762e:	f040 814f 	bne.w	340178d0 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
34017632:	69bb      	ldr	r3, [r7, #24]
34017634:	f003 0308 	and.w	r3, r3, #8
34017638:	2b00      	cmp	r3, #0
3401763a:	f000 808b 	beq.w	34017754 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
3401763e:	687b      	ldr	r3, [r7, #4]
34017640:	681b      	ldr	r3, [r3, #0]
34017642:	699a      	ldr	r2, [r3, #24]
34017644:	687b      	ldr	r3, [r7, #4]
34017646:	681b      	ldr	r3, [r3, #0]
34017648:	f042 0208 	orr.w	r2, r2, #8
3401764c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
3401764e:	687b      	ldr	r3, [r7, #4]
34017650:	681b      	ldr	r3, [r3, #0]
34017652:	699a      	ldr	r2, [r3, #24]
34017654:	687b      	ldr	r3, [r7, #4]
34017656:	681b      	ldr	r3, [r3, #0]
34017658:	f042 0210 	orr.w	r2, r2, #16
3401765c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
3401765e:	687b      	ldr	r3, [r7, #4]
34017660:	681b      	ldr	r3, [r3, #0]
34017662:	699a      	ldr	r2, [r3, #24]
34017664:	687b      	ldr	r3, [r7, #4]
34017666:	681b      	ldr	r3, [r3, #0]
34017668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3401766c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
3401766e:	687b      	ldr	r3, [r7, #4]
34017670:	681b      	ldr	r3, [r3, #0]
34017672:	691a      	ldr	r2, [r3, #16]
34017674:	687b      	ldr	r3, [r7, #4]
34017676:	681b      	ldr	r3, [r3, #0]
34017678:	f022 0208 	bic.w	r2, r2, #8
3401767c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
3401767e:	687b      	ldr	r3, [r7, #4]
34017680:	681b      	ldr	r3, [r3, #0]
34017682:	689b      	ldr	r3, [r3, #8]
34017684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
34017688:	2b00      	cmp	r3, #0
3401768a:	d13d      	bne.n	34017708 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
3401768c:	e036      	b.n	340176fc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
3401768e:	687b      	ldr	r3, [r7, #4]
34017690:	68db      	ldr	r3, [r3, #12]
34017692:	2b0f      	cmp	r3, #15
34017694:	d90b      	bls.n	340176ae <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
34017696:	687b      	ldr	r3, [r7, #4]
34017698:	681a      	ldr	r2, [r3, #0]
3401769a:	687b      	ldr	r3, [r7, #4]
3401769c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401769e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
340176a0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
340176a2:	687b      	ldr	r3, [r7, #4]
340176a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340176a6:	1d1a      	adds	r2, r3, #4
340176a8:	687b      	ldr	r3, [r7, #4]
340176aa:	66da      	str	r2, [r3, #108]	@ 0x6c
340176ac:	e01d      	b.n	340176ea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
340176ae:	687b      	ldr	r3, [r7, #4]
340176b0:	68db      	ldr	r3, [r3, #12]
340176b2:	2b07      	cmp	r3, #7
340176b4:	d90b      	bls.n	340176ce <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
340176b6:	687b      	ldr	r3, [r7, #4]
340176b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340176ba:	68fa      	ldr	r2, [r7, #12]
340176bc:	8812      	ldrh	r2, [r2, #0]
340176be:	b292      	uxth	r2, r2
340176c0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
340176c2:	687b      	ldr	r3, [r7, #4]
340176c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340176c6:	1c9a      	adds	r2, r3, #2
340176c8:	687b      	ldr	r3, [r7, #4]
340176ca:	66da      	str	r2, [r3, #108]	@ 0x6c
340176cc:	e00d      	b.n	340176ea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
340176ce:	687b      	ldr	r3, [r7, #4]
340176d0:	681b      	ldr	r3, [r3, #0]
340176d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
340176d6:	687b      	ldr	r3, [r7, #4]
340176d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340176da:	7812      	ldrb	r2, [r2, #0]
340176dc:	b2d2      	uxtb	r2, r2
340176de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
340176e0:	687b      	ldr	r3, [r7, #4]
340176e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340176e4:	1c5a      	adds	r2, r3, #1
340176e6:	687b      	ldr	r3, [r7, #4]
340176e8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
340176ea:	687b      	ldr	r3, [r7, #4]
340176ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
340176f0:	b29b      	uxth	r3, r3
340176f2:	3b01      	subs	r3, #1
340176f4:	b29a      	uxth	r2, r3
340176f6:	687b      	ldr	r3, [r7, #4]
340176f8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
340176fc:	687b      	ldr	r3, [r7, #4]
340176fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
34017702:	b29b      	uxth	r3, r3
34017704:	2b00      	cmp	r3, #0
34017706:	d1c2      	bne.n	3401768e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
34017708:	6878      	ldr	r0, [r7, #4]
3401770a:	f000 f981 	bl	34017a10 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
3401770e:	687b      	ldr	r3, [r7, #4]
34017710:	2201      	movs	r2, #1
34017712:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
34017716:	687b      	ldr	r3, [r7, #4]
34017718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401771c:	2b00      	cmp	r3, #0
3401771e:	d003      	beq.n	34017728 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
34017720:	6878      	ldr	r0, [r7, #4]
34017722:	f002 fcdd 	bl	3401a0e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
34017726:	e0d8      	b.n	340178da <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
34017728:	7cfb      	ldrb	r3, [r7, #19]
3401772a:	2b05      	cmp	r3, #5
3401772c:	d103      	bne.n	34017736 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
3401772e:	6878      	ldr	r0, [r7, #4]
34017730:	f000 f8e2 	bl	340178f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
34017734:	e0ce      	b.n	340178d4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
34017736:	7cfb      	ldrb	r3, [r7, #19]
34017738:	2b04      	cmp	r3, #4
3401773a:	d103      	bne.n	34017744 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
3401773c:	6878      	ldr	r0, [r7, #4]
3401773e:	f000 f8d1 	bl	340178e4 <HAL_SPI_RxCpltCallback>
    return;
34017742:	e0c7      	b.n	340178d4 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
34017744:	7cfb      	ldrb	r3, [r7, #19]
34017746:	2b03      	cmp	r3, #3
34017748:	f040 80c4 	bne.w	340178d4 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
3401774c:	6878      	ldr	r0, [r7, #4]
3401774e:	f002 fcab 	bl	3401a0a8 <HAL_SPI_TxCpltCallback>
    return;
34017752:	e0bf      	b.n	340178d4 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
34017754:	69bb      	ldr	r3, [r7, #24]
34017756:	f403 7358 	and.w	r3, r3, #864	@ 0x360
3401775a:	2b00      	cmp	r3, #0
3401775c:	f000 80bd 	beq.w	340178da <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
34017760:	69bb      	ldr	r3, [r7, #24]
34017762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34017766:	2b00      	cmp	r3, #0
34017768:	d00f      	beq.n	3401778a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
3401776a:	687b      	ldr	r3, [r7, #4]
3401776c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017770:	f043 0204 	orr.w	r2, r3, #4
34017774:	687b      	ldr	r3, [r7, #4]
34017776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
3401777a:	687b      	ldr	r3, [r7, #4]
3401777c:	681b      	ldr	r3, [r3, #0]
3401777e:	699a      	ldr	r2, [r3, #24]
34017780:	687b      	ldr	r3, [r7, #4]
34017782:	681b      	ldr	r3, [r3, #0]
34017784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34017788:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
3401778a:	69bb      	ldr	r3, [r7, #24]
3401778c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34017790:	2b00      	cmp	r3, #0
34017792:	d00f      	beq.n	340177b4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34017794:	687b      	ldr	r3, [r7, #4]
34017796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401779a:	f043 0201 	orr.w	r2, r3, #1
3401779e:	687b      	ldr	r3, [r7, #4]
340177a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
340177a4:	687b      	ldr	r3, [r7, #4]
340177a6:	681b      	ldr	r3, [r3, #0]
340177a8:	699a      	ldr	r2, [r3, #24]
340177aa:	687b      	ldr	r3, [r7, #4]
340177ac:	681b      	ldr	r3, [r3, #0]
340177ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340177b2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
340177b4:	69bb      	ldr	r3, [r7, #24]
340177b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340177ba:	2b00      	cmp	r3, #0
340177bc:	d00f      	beq.n	340177de <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
340177be:	687b      	ldr	r3, [r7, #4]
340177c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340177c4:	f043 0208 	orr.w	r2, r3, #8
340177c8:	687b      	ldr	r3, [r7, #4]
340177ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
340177ce:	687b      	ldr	r3, [r7, #4]
340177d0:	681b      	ldr	r3, [r3, #0]
340177d2:	699a      	ldr	r2, [r3, #24]
340177d4:	687b      	ldr	r3, [r7, #4]
340177d6:	681b      	ldr	r3, [r3, #0]
340177d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
340177dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
340177de:	69bb      	ldr	r3, [r7, #24]
340177e0:	f003 0320 	and.w	r3, r3, #32
340177e4:	2b00      	cmp	r3, #0
340177e6:	d00f      	beq.n	34017808 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
340177e8:	687b      	ldr	r3, [r7, #4]
340177ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340177ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
340177f2:	687b      	ldr	r3, [r7, #4]
340177f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
340177f8:	687b      	ldr	r3, [r7, #4]
340177fa:	681b      	ldr	r3, [r3, #0]
340177fc:	699a      	ldr	r2, [r3, #24]
340177fe:	687b      	ldr	r3, [r7, #4]
34017800:	681b      	ldr	r3, [r3, #0]
34017802:	f042 0220 	orr.w	r2, r2, #32
34017806:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
34017808:	687b      	ldr	r3, [r7, #4]
3401780a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401780e:	2b00      	cmp	r3, #0
34017810:	d062      	beq.n	340178d8 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
34017812:	687b      	ldr	r3, [r7, #4]
34017814:	681b      	ldr	r3, [r3, #0]
34017816:	681a      	ldr	r2, [r3, #0]
34017818:	687b      	ldr	r3, [r7, #4]
3401781a:	681b      	ldr	r3, [r3, #0]
3401781c:	f022 0201 	bic.w	r2, r2, #1
34017820:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
34017822:	687b      	ldr	r3, [r7, #4]
34017824:	681b      	ldr	r3, [r3, #0]
34017826:	691b      	ldr	r3, [r3, #16]
34017828:	687a      	ldr	r2, [r7, #4]
3401782a:	6812      	ldr	r2, [r2, #0]
3401782c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
34017830:	f023 0303 	bic.w	r3, r3, #3
34017834:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
34017836:	697b      	ldr	r3, [r7, #20]
34017838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
3401783c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
34017840:	d13e      	bne.n	340178c0 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34017842:	687b      	ldr	r3, [r7, #4]
34017844:	681b      	ldr	r3, [r3, #0]
34017846:	689a      	ldr	r2, [r3, #8]
34017848:	687b      	ldr	r3, [r7, #4]
3401784a:	681b      	ldr	r3, [r3, #0]
3401784c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34017850:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
34017852:	687b      	ldr	r3, [r7, #4]
34017854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34017858:	2b00      	cmp	r3, #0
3401785a:	d015      	beq.n	34017888 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
3401785c:	687b      	ldr	r3, [r7, #4]
3401785e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34017862:	4a1f      	ldr	r2, [pc, #124]	@ (340178e0 <HAL_SPI_IRQHandler+0x3a4>)
34017864:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
34017866:	687b      	ldr	r3, [r7, #4]
34017868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3401786c:	4618      	mov	r0, r3
3401786e:	f7ef fed1 	bl	34007614 <HAL_DMA_Abort_IT>
34017872:	4603      	mov	r3, r0
34017874:	2b00      	cmp	r3, #0
34017876:	d007      	beq.n	34017888 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34017878:	687b      	ldr	r3, [r7, #4]
3401787a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401787e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34017882:	687b      	ldr	r3, [r7, #4]
34017884:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
34017888:	687b      	ldr	r3, [r7, #4]
3401788a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401788e:	2b00      	cmp	r3, #0
34017890:	d022      	beq.n	340178d8 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
34017892:	687b      	ldr	r3, [r7, #4]
34017894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017898:	4a11      	ldr	r2, [pc, #68]	@ (340178e0 <HAL_SPI_IRQHandler+0x3a4>)
3401789a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
3401789c:	687b      	ldr	r3, [r7, #4]
3401789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340178a2:	4618      	mov	r0, r3
340178a4:	f7ef feb6 	bl	34007614 <HAL_DMA_Abort_IT>
340178a8:	4603      	mov	r3, r0
340178aa:	2b00      	cmp	r3, #0
340178ac:	d014      	beq.n	340178d8 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
340178ae:	687b      	ldr	r3, [r7, #4]
340178b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340178b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
340178b8:	687b      	ldr	r3, [r7, #4]
340178ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
340178be:	e00b      	b.n	340178d8 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
340178c0:	687b      	ldr	r3, [r7, #4]
340178c2:	2201      	movs	r2, #1
340178c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
340178c8:	6878      	ldr	r0, [r7, #4]
340178ca:	f002 fc09 	bl	3401a0e0 <HAL_SPI_ErrorCallback>
    return;
340178ce:	e003      	b.n	340178d8 <HAL_SPI_IRQHandler+0x39c>
    return;
340178d0:	bf00      	nop
340178d2:	e002      	b.n	340178da <HAL_SPI_IRQHandler+0x39e>
    return;
340178d4:	bf00      	nop
340178d6:	e000      	b.n	340178da <HAL_SPI_IRQHandler+0x39e>
    return;
340178d8:	bf00      	nop
  }
}
340178da:	3728      	adds	r7, #40	@ 0x28
340178dc:	46bd      	mov	sp, r7
340178de:	bd80      	pop	{r7, pc}
340178e0:	340179dd 	.word	0x340179dd

340178e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340178e4:	b480      	push	{r7}
340178e6:	b083      	sub	sp, #12
340178e8:	af00      	add	r7, sp, #0
340178ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
340178ec:	bf00      	nop
340178ee:	370c      	adds	r7, #12
340178f0:	46bd      	mov	sp, r7
340178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340178f6:	4770      	bx	lr

340178f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340178f8:	b480      	push	{r7}
340178fa:	b083      	sub	sp, #12
340178fc:	af00      	add	r7, sp, #0
340178fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
34017900:	bf00      	nop
34017902:	370c      	adds	r7, #12
34017904:	46bd      	mov	sp, r7
34017906:	f85d 7b04 	ldr.w	r7, [sp], #4
3401790a:	4770      	bx	lr

3401790c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
3401790c:	b480      	push	{r7}
3401790e:	b083      	sub	sp, #12
34017910:	af00      	add	r7, sp, #0
34017912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
34017914:	bf00      	nop
34017916:	370c      	adds	r7, #12
34017918:	46bd      	mov	sp, r7
3401791a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401791e:	4770      	bx	lr

34017920 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34017920:	b480      	push	{r7}
34017922:	b083      	sub	sp, #12
34017924:	af00      	add	r7, sp, #0
34017926:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
34017928:	bf00      	nop
3401792a:	370c      	adds	r7, #12
3401792c:	46bd      	mov	sp, r7
3401792e:	f85d 7b04 	ldr.w	r7, [sp], #4
34017932:	4770      	bx	lr

34017934 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
34017934:	b580      	push	{r7, lr}
34017936:	b084      	sub	sp, #16
34017938:	af00      	add	r7, sp, #0
3401793a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3401793c:	687b      	ldr	r3, [r7, #4]
3401793e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017940:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
34017942:	68fb      	ldr	r3, [r7, #12]
34017944:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34017948:	b2db      	uxtb	r3, r3
3401794a:	2b07      	cmp	r3, #7
3401794c:	d011      	beq.n	34017972 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
3401794e:	68fb      	ldr	r3, [r7, #12]
34017950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34017954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34017956:	2b81      	cmp	r3, #129	@ 0x81
34017958:	d103      	bne.n	34017962 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
3401795a:	68f8      	ldr	r0, [r7, #12]
3401795c:	f002 fba4 	bl	3401a0a8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
34017960:	e007      	b.n	34017972 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
34017962:	68fb      	ldr	r3, [r7, #12]
34017964:	681b      	ldr	r3, [r3, #0]
34017966:	691a      	ldr	r2, [r3, #16]
34017968:	68fb      	ldr	r3, [r7, #12]
3401796a:	681b      	ldr	r3, [r3, #0]
3401796c:	f042 0208 	orr.w	r2, r2, #8
34017970:	611a      	str	r2, [r3, #16]
}
34017972:	bf00      	nop
34017974:	3710      	adds	r7, #16
34017976:	46bd      	mov	sp, r7
34017978:	bd80      	pop	{r7, pc}

3401797a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
3401797a:	b580      	push	{r7, lr}
3401797c:	b084      	sub	sp, #16
3401797e:	af00      	add	r7, sp, #0
34017980:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
34017982:	687b      	ldr	r3, [r7, #4]
34017984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017986:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
34017988:	68f8      	ldr	r0, [r7, #12]
3401798a:	f7ff ffbf 	bl	3401790c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
3401798e:	bf00      	nop
34017990:	3710      	adds	r7, #16
34017992:	46bd      	mov	sp, r7
34017994:	bd80      	pop	{r7, pc}

34017996 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
34017996:	b580      	push	{r7, lr}
34017998:	b084      	sub	sp, #16
3401799a:	af00      	add	r7, sp, #0
3401799c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3401799e:	687b      	ldr	r3, [r7, #4]
340179a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340179a2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
340179a4:	6878      	ldr	r0, [r7, #4]
340179a6:	f7ef ffc7 	bl	34007938 <HAL_DMA_GetError>
340179aa:	4603      	mov	r3, r0
340179ac:	2b00      	cmp	r3, #0
340179ae:	d011      	beq.n	340179d4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
340179b0:	68f8      	ldr	r0, [r7, #12]
340179b2:	f000 f82d 	bl	34017a10 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
340179b6:	68fb      	ldr	r3, [r7, #12]
340179b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340179bc:	f043 0210 	orr.w	r2, r3, #16
340179c0:	68fb      	ldr	r3, [r7, #12]
340179c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
340179c6:	68fb      	ldr	r3, [r7, #12]
340179c8:	2201      	movs	r2, #1
340179ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
340179ce:	68f8      	ldr	r0, [r7, #12]
340179d0:	f002 fb86 	bl	3401a0e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
340179d4:	bf00      	nop
340179d6:	3710      	adds	r7, #16
340179d8:	46bd      	mov	sp, r7
340179da:	bd80      	pop	{r7, pc}

340179dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
340179dc:	b580      	push	{r7, lr}
340179de:	b084      	sub	sp, #16
340179e0:	af00      	add	r7, sp, #0
340179e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
340179e4:	687b      	ldr	r3, [r7, #4]
340179e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340179e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
340179ea:	68fb      	ldr	r3, [r7, #12]
340179ec:	2200      	movs	r2, #0
340179ee:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
340179f2:	68fb      	ldr	r3, [r7, #12]
340179f4:	2200      	movs	r2, #0
340179f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
340179fa:	68fb      	ldr	r3, [r7, #12]
340179fc:	2201      	movs	r2, #1
340179fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
34017a02:	68f8      	ldr	r0, [r7, #12]
34017a04:	f002 fb6c 	bl	3401a0e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
34017a08:	bf00      	nop
34017a0a:	3710      	adds	r7, #16
34017a0c:	46bd      	mov	sp, r7
34017a0e:	bd80      	pop	{r7, pc}

34017a10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
34017a10:	b480      	push	{r7}
34017a12:	b085      	sub	sp, #20
34017a14:	af00      	add	r7, sp, #0
34017a16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
34017a18:	687b      	ldr	r3, [r7, #4]
34017a1a:	681b      	ldr	r3, [r3, #0]
34017a1c:	695b      	ldr	r3, [r3, #20]
34017a1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
34017a20:	687b      	ldr	r3, [r7, #4]
34017a22:	681b      	ldr	r3, [r3, #0]
34017a24:	699a      	ldr	r2, [r3, #24]
34017a26:	687b      	ldr	r3, [r7, #4]
34017a28:	681b      	ldr	r3, [r3, #0]
34017a2a:	f042 0208 	orr.w	r2, r2, #8
34017a2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
34017a30:	687b      	ldr	r3, [r7, #4]
34017a32:	681b      	ldr	r3, [r3, #0]
34017a34:	699a      	ldr	r2, [r3, #24]
34017a36:	687b      	ldr	r3, [r7, #4]
34017a38:	681b      	ldr	r3, [r3, #0]
34017a3a:	f042 0210 	orr.w	r2, r2, #16
34017a3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
34017a40:	687b      	ldr	r3, [r7, #4]
34017a42:	681b      	ldr	r3, [r3, #0]
34017a44:	681a      	ldr	r2, [r3, #0]
34017a46:	687b      	ldr	r3, [r7, #4]
34017a48:	681b      	ldr	r3, [r3, #0]
34017a4a:	f022 0201 	bic.w	r2, r2, #1
34017a4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
34017a50:	687b      	ldr	r3, [r7, #4]
34017a52:	681b      	ldr	r3, [r3, #0]
34017a54:	691b      	ldr	r3, [r3, #16]
34017a56:	687a      	ldr	r2, [r7, #4]
34017a58:	6812      	ldr	r2, [r2, #0]
34017a5a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
34017a5e:	f023 0303 	bic.w	r3, r3, #3
34017a62:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34017a64:	687b      	ldr	r3, [r7, #4]
34017a66:	681b      	ldr	r3, [r3, #0]
34017a68:	689a      	ldr	r2, [r3, #8]
34017a6a:	687b      	ldr	r3, [r7, #4]
34017a6c:	681b      	ldr	r3, [r3, #0]
34017a6e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34017a72:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
34017a74:	687b      	ldr	r3, [r7, #4]
34017a76:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34017a7a:	b2db      	uxtb	r3, r3
34017a7c:	2b04      	cmp	r3, #4
34017a7e:	d014      	beq.n	34017aaa <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
34017a80:	68fb      	ldr	r3, [r7, #12]
34017a82:	f003 0320 	and.w	r3, r3, #32
34017a86:	2b00      	cmp	r3, #0
34017a88:	d00f      	beq.n	34017aaa <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
34017a8a:	687b      	ldr	r3, [r7, #4]
34017a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017a90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34017a94:	687b      	ldr	r3, [r7, #4]
34017a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
34017a9a:	687b      	ldr	r3, [r7, #4]
34017a9c:	681b      	ldr	r3, [r3, #0]
34017a9e:	699a      	ldr	r2, [r3, #24]
34017aa0:	687b      	ldr	r3, [r7, #4]
34017aa2:	681b      	ldr	r3, [r3, #0]
34017aa4:	f042 0220 	orr.w	r2, r2, #32
34017aa8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
34017aaa:	687b      	ldr	r3, [r7, #4]
34017aac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34017ab0:	b2db      	uxtb	r3, r3
34017ab2:	2b03      	cmp	r3, #3
34017ab4:	d02e      	beq.n	34017b14 <SPI_CloseTransfer+0x104>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
34017ab6:	68fb      	ldr	r3, [r7, #12]
34017ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34017abc:	2b00      	cmp	r3, #0
34017abe:	d00f      	beq.n	34017ae0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34017ac0:	687b      	ldr	r3, [r7, #4]
34017ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017ac6:	f043 0204 	orr.w	r2, r3, #4
34017aca:	687b      	ldr	r3, [r7, #4]
34017acc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34017ad0:	687b      	ldr	r3, [r7, #4]
34017ad2:	681b      	ldr	r3, [r3, #0]
34017ad4:	699a      	ldr	r2, [r3, #24]
34017ad6:	687b      	ldr	r3, [r7, #4]
34017ad8:	681b      	ldr	r3, [r3, #0]
34017ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34017ade:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
34017ae0:	687b      	ldr	r3, [r7, #4]
34017ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34017ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017ae8:	d114      	bne.n	34017b14 <SPI_CloseTransfer+0x104>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
34017aea:	68fb      	ldr	r3, [r7, #12]
34017aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34017af0:	2b00      	cmp	r3, #0
34017af2:	d00f      	beq.n	34017b14 <SPI_CloseTransfer+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
34017af4:	687b      	ldr	r3, [r7, #4]
34017af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017afa:	f043 0202 	orr.w	r2, r3, #2
34017afe:	687b      	ldr	r3, [r7, #4]
34017b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
34017b04:	687b      	ldr	r3, [r7, #4]
34017b06:	681b      	ldr	r3, [r3, #0]
34017b08:	699a      	ldr	r2, [r3, #24]
34017b0a:	687b      	ldr	r3, [r7, #4]
34017b0c:	681b      	ldr	r3, [r3, #0]
34017b0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
34017b12:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
34017b14:	68fb      	ldr	r3, [r7, #12]
34017b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34017b1a:	2b00      	cmp	r3, #0
34017b1c:	d00f      	beq.n	34017b3e <SPI_CloseTransfer+0x12e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34017b1e:	687b      	ldr	r3, [r7, #4]
34017b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017b24:	f043 0201 	orr.w	r2, r3, #1
34017b28:	687b      	ldr	r3, [r7, #4]
34017b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
34017b2e:	687b      	ldr	r3, [r7, #4]
34017b30:	681b      	ldr	r3, [r3, #0]
34017b32:	699a      	ldr	r2, [r3, #24]
34017b34:	687b      	ldr	r3, [r7, #4]
34017b36:	681b      	ldr	r3, [r3, #0]
34017b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34017b3c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
34017b3e:	68fb      	ldr	r3, [r7, #12]
34017b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34017b44:	2b00      	cmp	r3, #0
34017b46:	d00f      	beq.n	34017b68 <SPI_CloseTransfer+0x158>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
34017b48:	687b      	ldr	r3, [r7, #4]
34017b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34017b4e:	f043 0208 	orr.w	r2, r3, #8
34017b52:	687b      	ldr	r3, [r7, #4]
34017b54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
34017b58:	687b      	ldr	r3, [r7, #4]
34017b5a:	681b      	ldr	r3, [r3, #0]
34017b5c:	699a      	ldr	r2, [r3, #24]
34017b5e:	687b      	ldr	r3, [r7, #4]
34017b60:	681b      	ldr	r3, [r3, #0]
34017b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34017b66:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
34017b68:	687b      	ldr	r3, [r7, #4]
34017b6a:	2200      	movs	r2, #0
34017b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
34017b70:	687b      	ldr	r3, [r7, #4]
34017b72:	2200      	movs	r2, #0
34017b74:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
34017b78:	bf00      	nop
34017b7a:	3714      	adds	r7, #20
34017b7c:	46bd      	mov	sp, r7
34017b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34017b82:	4770      	bx	lr

34017b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34017b84:	b580      	push	{r7, lr}
34017b86:	b082      	sub	sp, #8
34017b88:	af00      	add	r7, sp, #0
34017b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34017b8c:	687b      	ldr	r3, [r7, #4]
34017b8e:	2b00      	cmp	r3, #0
34017b90:	d101      	bne.n	34017b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
34017b92:	2301      	movs	r3, #1
34017b94:	e16e      	b.n	34017e74 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34017b96:	687b      	ldr	r3, [r7, #4]
34017b98:	699b      	ldr	r3, [r3, #24]
34017b9a:	2b00      	cmp	r3, #0
34017b9c:	f000 8088 	beq.w	34017cb0 <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
34017ba0:	687b      	ldr	r3, [r7, #4]
34017ba2:	681b      	ldr	r3, [r3, #0]
34017ba4:	4a8f      	ldr	r2, [pc, #572]	@ (34017de4 <HAL_UART_Init+0x260>)
34017ba6:	4293      	cmp	r3, r2
34017ba8:	f000 80f5 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bac:	687b      	ldr	r3, [r7, #4]
34017bae:	681b      	ldr	r3, [r3, #0]
34017bb0:	4a8d      	ldr	r2, [pc, #564]	@ (34017de8 <HAL_UART_Init+0x264>)
34017bb2:	4293      	cmp	r3, r2
34017bb4:	f000 80ef 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bb8:	687b      	ldr	r3, [r7, #4]
34017bba:	681b      	ldr	r3, [r3, #0]
34017bbc:	4a8b      	ldr	r2, [pc, #556]	@ (34017dec <HAL_UART_Init+0x268>)
34017bbe:	4293      	cmp	r3, r2
34017bc0:	f000 80e9 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bc4:	687b      	ldr	r3, [r7, #4]
34017bc6:	681b      	ldr	r3, [r3, #0]
34017bc8:	4a89      	ldr	r2, [pc, #548]	@ (34017df0 <HAL_UART_Init+0x26c>)
34017bca:	4293      	cmp	r3, r2
34017bcc:	f000 80e3 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bd0:	687b      	ldr	r3, [r7, #4]
34017bd2:	681b      	ldr	r3, [r3, #0]
34017bd4:	4a87      	ldr	r2, [pc, #540]	@ (34017df4 <HAL_UART_Init+0x270>)
34017bd6:	4293      	cmp	r3, r2
34017bd8:	f000 80dd 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bdc:	687b      	ldr	r3, [r7, #4]
34017bde:	681b      	ldr	r3, [r3, #0]
34017be0:	4a85      	ldr	r2, [pc, #532]	@ (34017df8 <HAL_UART_Init+0x274>)
34017be2:	4293      	cmp	r3, r2
34017be4:	f000 80d7 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017be8:	687b      	ldr	r3, [r7, #4]
34017bea:	681b      	ldr	r3, [r3, #0]
34017bec:	4a83      	ldr	r2, [pc, #524]	@ (34017dfc <HAL_UART_Init+0x278>)
34017bee:	4293      	cmp	r3, r2
34017bf0:	f000 80d1 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017bf4:	687b      	ldr	r3, [r7, #4]
34017bf6:	681b      	ldr	r3, [r3, #0]
34017bf8:	4a81      	ldr	r2, [pc, #516]	@ (34017e00 <HAL_UART_Init+0x27c>)
34017bfa:	4293      	cmp	r3, r2
34017bfc:	f000 80cb 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c00:	687b      	ldr	r3, [r7, #4]
34017c02:	681b      	ldr	r3, [r3, #0]
34017c04:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34017c08:	f000 80c5 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c0c:	687b      	ldr	r3, [r7, #4]
34017c0e:	681b      	ldr	r3, [r3, #0]
34017c10:	4a7c      	ldr	r2, [pc, #496]	@ (34017e04 <HAL_UART_Init+0x280>)
34017c12:	4293      	cmp	r3, r2
34017c14:	f000 80bf 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c18:	687b      	ldr	r3, [r7, #4]
34017c1a:	681b      	ldr	r3, [r3, #0]
34017c1c:	4a7a      	ldr	r2, [pc, #488]	@ (34017e08 <HAL_UART_Init+0x284>)
34017c1e:	4293      	cmp	r3, r2
34017c20:	f000 80b9 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c24:	687b      	ldr	r3, [r7, #4]
34017c26:	681b      	ldr	r3, [r3, #0]
34017c28:	4a78      	ldr	r2, [pc, #480]	@ (34017e0c <HAL_UART_Init+0x288>)
34017c2a:	4293      	cmp	r3, r2
34017c2c:	f000 80b3 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c30:	687b      	ldr	r3, [r7, #4]
34017c32:	681b      	ldr	r3, [r3, #0]
34017c34:	4a76      	ldr	r2, [pc, #472]	@ (34017e10 <HAL_UART_Init+0x28c>)
34017c36:	4293      	cmp	r3, r2
34017c38:	f000 80ad 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c3c:	687b      	ldr	r3, [r7, #4]
34017c3e:	681b      	ldr	r3, [r3, #0]
34017c40:	4a74      	ldr	r2, [pc, #464]	@ (34017e14 <HAL_UART_Init+0x290>)
34017c42:	4293      	cmp	r3, r2
34017c44:	f000 80a7 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c48:	687b      	ldr	r3, [r7, #4]
34017c4a:	681b      	ldr	r3, [r3, #0]
34017c4c:	4a72      	ldr	r2, [pc, #456]	@ (34017e18 <HAL_UART_Init+0x294>)
34017c4e:	4293      	cmp	r3, r2
34017c50:	f000 80a1 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c54:	687b      	ldr	r3, [r7, #4]
34017c56:	681b      	ldr	r3, [r3, #0]
34017c58:	4a70      	ldr	r2, [pc, #448]	@ (34017e1c <HAL_UART_Init+0x298>)
34017c5a:	4293      	cmp	r3, r2
34017c5c:	f000 809b 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c60:	687b      	ldr	r3, [r7, #4]
34017c62:	681b      	ldr	r3, [r3, #0]
34017c64:	4a6e      	ldr	r2, [pc, #440]	@ (34017e20 <HAL_UART_Init+0x29c>)
34017c66:	4293      	cmp	r3, r2
34017c68:	f000 8095 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c6c:	687b      	ldr	r3, [r7, #4]
34017c6e:	681b      	ldr	r3, [r3, #0]
34017c70:	4a6c      	ldr	r2, [pc, #432]	@ (34017e24 <HAL_UART_Init+0x2a0>)
34017c72:	4293      	cmp	r3, r2
34017c74:	f000 808f 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c78:	687b      	ldr	r3, [r7, #4]
34017c7a:	681b      	ldr	r3, [r3, #0]
34017c7c:	4a6a      	ldr	r2, [pc, #424]	@ (34017e28 <HAL_UART_Init+0x2a4>)
34017c7e:	4293      	cmp	r3, r2
34017c80:	f000 8089 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c84:	687b      	ldr	r3, [r7, #4]
34017c86:	681b      	ldr	r3, [r3, #0]
34017c88:	4a68      	ldr	r2, [pc, #416]	@ (34017e2c <HAL_UART_Init+0x2a8>)
34017c8a:	4293      	cmp	r3, r2
34017c8c:	f000 8083 	beq.w	34017d96 <HAL_UART_Init+0x212>
34017c90:	687b      	ldr	r3, [r7, #4]
34017c92:	681b      	ldr	r3, [r3, #0]
34017c94:	4a66      	ldr	r2, [pc, #408]	@ (34017e30 <HAL_UART_Init+0x2ac>)
34017c96:	4293      	cmp	r3, r2
34017c98:	d07d      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017c9a:	687b      	ldr	r3, [r7, #4]
34017c9c:	681b      	ldr	r3, [r3, #0]
34017c9e:	4a65      	ldr	r2, [pc, #404]	@ (34017e34 <HAL_UART_Init+0x2b0>)
34017ca0:	4293      	cmp	r3, r2
34017ca2:	d078      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017ca4:	f240 113f 	movw	r1, #319	@ 0x13f
34017ca8:	4863      	ldr	r0, [pc, #396]	@ (34017e38 <HAL_UART_Init+0x2b4>)
34017caa:	f7e9 fc91 	bl	340015d0 <assert_failed>
34017cae:	e072      	b.n	34017d96 <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
34017cb0:	687b      	ldr	r3, [r7, #4]
34017cb2:	681b      	ldr	r3, [r3, #0]
34017cb4:	4a4b      	ldr	r2, [pc, #300]	@ (34017de4 <HAL_UART_Init+0x260>)
34017cb6:	4293      	cmp	r3, r2
34017cb8:	d06d      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cba:	687b      	ldr	r3, [r7, #4]
34017cbc:	681b      	ldr	r3, [r3, #0]
34017cbe:	4a4a      	ldr	r2, [pc, #296]	@ (34017de8 <HAL_UART_Init+0x264>)
34017cc0:	4293      	cmp	r3, r2
34017cc2:	d068      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cc4:	687b      	ldr	r3, [r7, #4]
34017cc6:	681b      	ldr	r3, [r3, #0]
34017cc8:	4a48      	ldr	r2, [pc, #288]	@ (34017dec <HAL_UART_Init+0x268>)
34017cca:	4293      	cmp	r3, r2
34017ccc:	d063      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cce:	687b      	ldr	r3, [r7, #4]
34017cd0:	681b      	ldr	r3, [r3, #0]
34017cd2:	4a47      	ldr	r2, [pc, #284]	@ (34017df0 <HAL_UART_Init+0x26c>)
34017cd4:	4293      	cmp	r3, r2
34017cd6:	d05e      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cd8:	687b      	ldr	r3, [r7, #4]
34017cda:	681b      	ldr	r3, [r3, #0]
34017cdc:	4a45      	ldr	r2, [pc, #276]	@ (34017df4 <HAL_UART_Init+0x270>)
34017cde:	4293      	cmp	r3, r2
34017ce0:	d059      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017ce2:	687b      	ldr	r3, [r7, #4]
34017ce4:	681b      	ldr	r3, [r3, #0]
34017ce6:	4a44      	ldr	r2, [pc, #272]	@ (34017df8 <HAL_UART_Init+0x274>)
34017ce8:	4293      	cmp	r3, r2
34017cea:	d054      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cec:	687b      	ldr	r3, [r7, #4]
34017cee:	681b      	ldr	r3, [r3, #0]
34017cf0:	4a42      	ldr	r2, [pc, #264]	@ (34017dfc <HAL_UART_Init+0x278>)
34017cf2:	4293      	cmp	r3, r2
34017cf4:	d04f      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017cf6:	687b      	ldr	r3, [r7, #4]
34017cf8:	681b      	ldr	r3, [r3, #0]
34017cfa:	4a41      	ldr	r2, [pc, #260]	@ (34017e00 <HAL_UART_Init+0x27c>)
34017cfc:	4293      	cmp	r3, r2
34017cfe:	d04a      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d00:	687b      	ldr	r3, [r7, #4]
34017d02:	681b      	ldr	r3, [r3, #0]
34017d04:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34017d08:	d045      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d0a:	687b      	ldr	r3, [r7, #4]
34017d0c:	681b      	ldr	r3, [r3, #0]
34017d0e:	4a3d      	ldr	r2, [pc, #244]	@ (34017e04 <HAL_UART_Init+0x280>)
34017d10:	4293      	cmp	r3, r2
34017d12:	d040      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d14:	687b      	ldr	r3, [r7, #4]
34017d16:	681b      	ldr	r3, [r3, #0]
34017d18:	4a3b      	ldr	r2, [pc, #236]	@ (34017e08 <HAL_UART_Init+0x284>)
34017d1a:	4293      	cmp	r3, r2
34017d1c:	d03b      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d1e:	687b      	ldr	r3, [r7, #4]
34017d20:	681b      	ldr	r3, [r3, #0]
34017d22:	4a3a      	ldr	r2, [pc, #232]	@ (34017e0c <HAL_UART_Init+0x288>)
34017d24:	4293      	cmp	r3, r2
34017d26:	d036      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d28:	687b      	ldr	r3, [r7, #4]
34017d2a:	681b      	ldr	r3, [r3, #0]
34017d2c:	4a38      	ldr	r2, [pc, #224]	@ (34017e10 <HAL_UART_Init+0x28c>)
34017d2e:	4293      	cmp	r3, r2
34017d30:	d031      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d32:	687b      	ldr	r3, [r7, #4]
34017d34:	681b      	ldr	r3, [r3, #0]
34017d36:	4a37      	ldr	r2, [pc, #220]	@ (34017e14 <HAL_UART_Init+0x290>)
34017d38:	4293      	cmp	r3, r2
34017d3a:	d02c      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d3c:	687b      	ldr	r3, [r7, #4]
34017d3e:	681b      	ldr	r3, [r3, #0]
34017d40:	4a35      	ldr	r2, [pc, #212]	@ (34017e18 <HAL_UART_Init+0x294>)
34017d42:	4293      	cmp	r3, r2
34017d44:	d027      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d46:	687b      	ldr	r3, [r7, #4]
34017d48:	681b      	ldr	r3, [r3, #0]
34017d4a:	4a34      	ldr	r2, [pc, #208]	@ (34017e1c <HAL_UART_Init+0x298>)
34017d4c:	4293      	cmp	r3, r2
34017d4e:	d022      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d50:	687b      	ldr	r3, [r7, #4]
34017d52:	681b      	ldr	r3, [r3, #0]
34017d54:	4a32      	ldr	r2, [pc, #200]	@ (34017e20 <HAL_UART_Init+0x29c>)
34017d56:	4293      	cmp	r3, r2
34017d58:	d01d      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d5a:	687b      	ldr	r3, [r7, #4]
34017d5c:	681b      	ldr	r3, [r3, #0]
34017d5e:	4a31      	ldr	r2, [pc, #196]	@ (34017e24 <HAL_UART_Init+0x2a0>)
34017d60:	4293      	cmp	r3, r2
34017d62:	d018      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d64:	687b      	ldr	r3, [r7, #4]
34017d66:	681b      	ldr	r3, [r3, #0]
34017d68:	4a2f      	ldr	r2, [pc, #188]	@ (34017e28 <HAL_UART_Init+0x2a4>)
34017d6a:	4293      	cmp	r3, r2
34017d6c:	d013      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d6e:	687b      	ldr	r3, [r7, #4]
34017d70:	681b      	ldr	r3, [r3, #0]
34017d72:	4a2e      	ldr	r2, [pc, #184]	@ (34017e2c <HAL_UART_Init+0x2a8>)
34017d74:	4293      	cmp	r3, r2
34017d76:	d00e      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d78:	687b      	ldr	r3, [r7, #4]
34017d7a:	681b      	ldr	r3, [r3, #0]
34017d7c:	4a2c      	ldr	r2, [pc, #176]	@ (34017e30 <HAL_UART_Init+0x2ac>)
34017d7e:	4293      	cmp	r3, r2
34017d80:	d009      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d82:	687b      	ldr	r3, [r7, #4]
34017d84:	681b      	ldr	r3, [r3, #0]
34017d86:	4a2b      	ldr	r2, [pc, #172]	@ (34017e34 <HAL_UART_Init+0x2b0>)
34017d88:	4293      	cmp	r3, r2
34017d8a:	d004      	beq.n	34017d96 <HAL_UART_Init+0x212>
34017d8c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
34017d90:	4829      	ldr	r0, [pc, #164]	@ (34017e38 <HAL_UART_Init+0x2b4>)
34017d92:	f7e9 fc1d 	bl	340015d0 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34017d96:	687b      	ldr	r3, [r7, #4]
34017d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34017d9c:	2b00      	cmp	r3, #0
34017d9e:	d106      	bne.n	34017dae <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
34017da0:	687b      	ldr	r3, [r7, #4]
34017da2:	2200      	movs	r2, #0
34017da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34017da8:	6878      	ldr	r0, [r7, #4]
34017daa:	f000 f867 	bl	34017e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
34017dae:	687b      	ldr	r3, [r7, #4]
34017db0:	2224      	movs	r2, #36	@ 0x24
34017db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34017db6:	687b      	ldr	r3, [r7, #4]
34017db8:	681b      	ldr	r3, [r3, #0]
34017dba:	681a      	ldr	r2, [r3, #0]
34017dbc:	687b      	ldr	r3, [r7, #4]
34017dbe:	681b      	ldr	r3, [r3, #0]
34017dc0:	f022 0201 	bic.w	r2, r2, #1
34017dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34017dc6:	687b      	ldr	r3, [r7, #4]
34017dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34017dca:	2b00      	cmp	r3, #0
34017dcc:	d002      	beq.n	34017dd4 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
34017dce:	6878      	ldr	r0, [r7, #4]
34017dd0:	f000 fbb8 	bl	34018544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34017dd4:	6878      	ldr	r0, [r7, #4]
34017dd6:	f000 f8e9 	bl	34017fac <UART_SetConfig>
34017dda:	4603      	mov	r3, r0
34017ddc:	2b01      	cmp	r3, #1
34017dde:	d12d      	bne.n	34017e3c <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
34017de0:	2301      	movs	r3, #1
34017de2:	e047      	b.n	34017e74 <HAL_UART_Init+0x2f0>
34017de4:	52001000 	.word	0x52001000
34017de8:	42001000 	.word	0x42001000
34017dec:	50004400 	.word	0x50004400
34017df0:	40004400 	.word	0x40004400
34017df4:	50004800 	.word	0x50004800
34017df8:	40004800 	.word	0x40004800
34017dfc:	50004c00 	.word	0x50004c00
34017e00:	40004c00 	.word	0x40004c00
34017e04:	40005000 	.word	0x40005000
34017e08:	52001400 	.word	0x52001400
34017e0c:	42001400 	.word	0x42001400
34017e10:	50007800 	.word	0x50007800
34017e14:	40007800 	.word	0x40007800
34017e18:	50007c00 	.word	0x50007c00
34017e1c:	40007c00 	.word	0x40007c00
34017e20:	52001800 	.word	0x52001800
34017e24:	42001800 	.word	0x42001800
34017e28:	52001c00 	.word	0x52001c00
34017e2c:	42001c00 	.word	0x42001c00
34017e30:	56000c00 	.word	0x56000c00
34017e34:	46000c00 	.word	0x46000c00
34017e38:	3401d8f4 	.word	0x3401d8f4
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
34017e3c:	687b      	ldr	r3, [r7, #4]
34017e3e:	681b      	ldr	r3, [r3, #0]
34017e40:	685a      	ldr	r2, [r3, #4]
34017e42:	687b      	ldr	r3, [r7, #4]
34017e44:	681b      	ldr	r3, [r3, #0]
34017e46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
34017e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
34017e4c:	687b      	ldr	r3, [r7, #4]
34017e4e:	681b      	ldr	r3, [r3, #0]
34017e50:	689a      	ldr	r2, [r3, #8]
34017e52:	687b      	ldr	r3, [r7, #4]
34017e54:	681b      	ldr	r3, [r3, #0]
34017e56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
34017e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
34017e5c:	687b      	ldr	r3, [r7, #4]
34017e5e:	681b      	ldr	r3, [r3, #0]
34017e60:	681a      	ldr	r2, [r3, #0]
34017e62:	687b      	ldr	r3, [r7, #4]
34017e64:	681b      	ldr	r3, [r3, #0]
34017e66:	f042 0201 	orr.w	r2, r2, #1
34017e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
34017e6c:	6878      	ldr	r0, [r7, #4]
34017e6e:	f000 fd33 	bl	340188d8 <UART_CheckIdleState>
34017e72:	4603      	mov	r3, r0
}
34017e74:	4618      	mov	r0, r3
34017e76:	3708      	adds	r7, #8
34017e78:	46bd      	mov	sp, r7
34017e7a:	bd80      	pop	{r7, pc}

34017e7c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
34017e7c:	b480      	push	{r7}
34017e7e:	b083      	sub	sp, #12
34017e80:	af00      	add	r7, sp, #0
34017e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
34017e84:	bf00      	nop
34017e86:	370c      	adds	r7, #12
34017e88:	46bd      	mov	sp, r7
34017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34017e8e:	4770      	bx	lr

34017e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34017e90:	b580      	push	{r7, lr}
34017e92:	b08a      	sub	sp, #40	@ 0x28
34017e94:	af02      	add	r7, sp, #8
34017e96:	60f8      	str	r0, [r7, #12]
34017e98:	60b9      	str	r1, [r7, #8]
34017e9a:	603b      	str	r3, [r7, #0]
34017e9c:	4613      	mov	r3, r2
34017e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
34017ea0:	68fb      	ldr	r3, [r7, #12]
34017ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34017ea6:	2b20      	cmp	r3, #32
34017ea8:	d17b      	bne.n	34017fa2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
34017eaa:	68bb      	ldr	r3, [r7, #8]
34017eac:	2b00      	cmp	r3, #0
34017eae:	d002      	beq.n	34017eb6 <HAL_UART_Transmit+0x26>
34017eb0:	88fb      	ldrh	r3, [r7, #6]
34017eb2:	2b00      	cmp	r3, #0
34017eb4:	d101      	bne.n	34017eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34017eb6:	2301      	movs	r3, #1
34017eb8:	e074      	b.n	34017fa4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
34017eba:	68fb      	ldr	r3, [r7, #12]
34017ebc:	2200      	movs	r2, #0
34017ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
34017ec2:	68fb      	ldr	r3, [r7, #12]
34017ec4:	2221      	movs	r2, #33	@ 0x21
34017ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
34017eca:	f7ee f8af 	bl	3400602c <HAL_GetTick>
34017ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
34017ed0:	68fb      	ldr	r3, [r7, #12]
34017ed2:	88fa      	ldrh	r2, [r7, #6]
34017ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34017ed8:	68fb      	ldr	r3, [r7, #12]
34017eda:	88fa      	ldrh	r2, [r7, #6]
34017edc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
34017ee0:	68fb      	ldr	r3, [r7, #12]
34017ee2:	689b      	ldr	r3, [r3, #8]
34017ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34017ee8:	d108      	bne.n	34017efc <HAL_UART_Transmit+0x6c>
34017eea:	68fb      	ldr	r3, [r7, #12]
34017eec:	691b      	ldr	r3, [r3, #16]
34017eee:	2b00      	cmp	r3, #0
34017ef0:	d104      	bne.n	34017efc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
34017ef2:	2300      	movs	r3, #0
34017ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
34017ef6:	68bb      	ldr	r3, [r7, #8]
34017ef8:	61bb      	str	r3, [r7, #24]
34017efa:	e003      	b.n	34017f04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
34017efc:	68bb      	ldr	r3, [r7, #8]
34017efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
34017f00:	2300      	movs	r3, #0
34017f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
34017f04:	e030      	b.n	34017f68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
34017f06:	683b      	ldr	r3, [r7, #0]
34017f08:	9300      	str	r3, [sp, #0]
34017f0a:	697b      	ldr	r3, [r7, #20]
34017f0c:	2200      	movs	r2, #0
34017f0e:	2180      	movs	r1, #128	@ 0x80
34017f10:	68f8      	ldr	r0, [r7, #12]
34017f12:	f000 fd8b 	bl	34018a2c <UART_WaitOnFlagUntilTimeout>
34017f16:	4603      	mov	r3, r0
34017f18:	2b00      	cmp	r3, #0
34017f1a:	d005      	beq.n	34017f28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
34017f1c:	68fb      	ldr	r3, [r7, #12]
34017f1e:	2220      	movs	r2, #32
34017f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
34017f24:	2303      	movs	r3, #3
34017f26:	e03d      	b.n	34017fa4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
34017f28:	69fb      	ldr	r3, [r7, #28]
34017f2a:	2b00      	cmp	r3, #0
34017f2c:	d10b      	bne.n	34017f46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
34017f2e:	69bb      	ldr	r3, [r7, #24]
34017f30:	881b      	ldrh	r3, [r3, #0]
34017f32:	461a      	mov	r2, r3
34017f34:	68fb      	ldr	r3, [r7, #12]
34017f36:	681b      	ldr	r3, [r3, #0]
34017f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
34017f3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
34017f3e:	69bb      	ldr	r3, [r7, #24]
34017f40:	3302      	adds	r3, #2
34017f42:	61bb      	str	r3, [r7, #24]
34017f44:	e007      	b.n	34017f56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
34017f46:	69fb      	ldr	r3, [r7, #28]
34017f48:	781a      	ldrb	r2, [r3, #0]
34017f4a:	68fb      	ldr	r3, [r7, #12]
34017f4c:	681b      	ldr	r3, [r3, #0]
34017f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
34017f50:	69fb      	ldr	r3, [r7, #28]
34017f52:	3301      	adds	r3, #1
34017f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
34017f56:	68fb      	ldr	r3, [r7, #12]
34017f58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34017f5c:	b29b      	uxth	r3, r3
34017f5e:	3b01      	subs	r3, #1
34017f60:	b29a      	uxth	r2, r3
34017f62:	68fb      	ldr	r3, [r7, #12]
34017f64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
34017f68:	68fb      	ldr	r3, [r7, #12]
34017f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34017f6e:	b29b      	uxth	r3, r3
34017f70:	2b00      	cmp	r3, #0
34017f72:	d1c8      	bne.n	34017f06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
34017f74:	683b      	ldr	r3, [r7, #0]
34017f76:	9300      	str	r3, [sp, #0]
34017f78:	697b      	ldr	r3, [r7, #20]
34017f7a:	2200      	movs	r2, #0
34017f7c:	2140      	movs	r1, #64	@ 0x40
34017f7e:	68f8      	ldr	r0, [r7, #12]
34017f80:	f000 fd54 	bl	34018a2c <UART_WaitOnFlagUntilTimeout>
34017f84:	4603      	mov	r3, r0
34017f86:	2b00      	cmp	r3, #0
34017f88:	d005      	beq.n	34017f96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
34017f8a:	68fb      	ldr	r3, [r7, #12]
34017f8c:	2220      	movs	r2, #32
34017f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
34017f92:	2303      	movs	r3, #3
34017f94:	e006      	b.n	34017fa4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
34017f96:	68fb      	ldr	r3, [r7, #12]
34017f98:	2220      	movs	r2, #32
34017f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
34017f9e:	2300      	movs	r3, #0
34017fa0:	e000      	b.n	34017fa4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
34017fa2:	2302      	movs	r3, #2
  }
}
34017fa4:	4618      	mov	r0, r3
34017fa6:	3720      	adds	r7, #32
34017fa8:	46bd      	mov	sp, r7
34017faa:	bd80      	pop	{r7, pc}

34017fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
34017fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34017fb0:	b090      	sub	sp, #64	@ 0x40
34017fb2:	af00      	add	r7, sp, #0
34017fb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34017fb6:	2300      	movs	r3, #0
34017fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34017fbc:	697b      	ldr	r3, [r7, #20]
34017fbe:	685b      	ldr	r3, [r3, #4]
34017fc0:	4a19      	ldr	r2, [pc, #100]	@ (34018028 <UART_SetConfig+0x7c>)
34017fc2:	4293      	cmp	r3, r2
34017fc4:	d904      	bls.n	34017fd0 <UART_SetConfig+0x24>
34017fc6:	f640 414f 	movw	r1, #3151	@ 0xc4f
34017fca:	4818      	ldr	r0, [pc, #96]	@ (3401802c <UART_SetConfig+0x80>)
34017fcc:	f7e9 fb00 	bl	340015d0 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34017fd0:	697b      	ldr	r3, [r7, #20]
34017fd2:	689b      	ldr	r3, [r3, #8]
34017fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017fd8:	d00d      	beq.n	34017ff6 <UART_SetConfig+0x4a>
34017fda:	697b      	ldr	r3, [r7, #20]
34017fdc:	689b      	ldr	r3, [r3, #8]
34017fde:	2b00      	cmp	r3, #0
34017fe0:	d009      	beq.n	34017ff6 <UART_SetConfig+0x4a>
34017fe2:	697b      	ldr	r3, [r7, #20]
34017fe4:	689b      	ldr	r3, [r3, #8]
34017fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34017fea:	d004      	beq.n	34017ff6 <UART_SetConfig+0x4a>
34017fec:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34017ff0:	480e      	ldr	r0, [pc, #56]	@ (3401802c <UART_SetConfig+0x80>)
34017ff2:	f7e9 faed 	bl	340015d0 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34017ff6:	697b      	ldr	r3, [r7, #20]
34017ff8:	681b      	ldr	r3, [r3, #0]
34017ffa:	4a0d      	ldr	r2, [pc, #52]	@ (34018030 <UART_SetConfig+0x84>)
34017ffc:	4293      	cmp	r3, r2
34017ffe:	d004      	beq.n	3401800a <UART_SetConfig+0x5e>
34018000:	697b      	ldr	r3, [r7, #20]
34018002:	681b      	ldr	r3, [r3, #0]
34018004:	4a0b      	ldr	r2, [pc, #44]	@ (34018034 <UART_SetConfig+0x88>)
34018006:	4293      	cmp	r3, r2
34018008:	d116      	bne.n	34018038 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3401800a:	697b      	ldr	r3, [r7, #20]
3401800c:	68db      	ldr	r3, [r3, #12]
3401800e:	2b00      	cmp	r3, #0
34018010:	d038      	beq.n	34018084 <UART_SetConfig+0xd8>
34018012:	697b      	ldr	r3, [r7, #20]
34018014:	68db      	ldr	r3, [r3, #12]
34018016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401801a:	d033      	beq.n	34018084 <UART_SetConfig+0xd8>
3401801c:	f640 4153 	movw	r1, #3155	@ 0xc53
34018020:	4802      	ldr	r0, [pc, #8]	@ (3401802c <UART_SetConfig+0x80>)
34018022:	f7e9 fad5 	bl	340015d0 <assert_failed>
34018026:	e02d      	b.n	34018084 <UART_SetConfig+0xd8>
34018028:	00bebc1f 	.word	0x00bebc1f
3401802c:	3401d8f4 	.word	0x3401d8f4
34018030:	56000c00 	.word	0x56000c00
34018034:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34018038:	697b      	ldr	r3, [r7, #20]
3401803a:	68db      	ldr	r3, [r3, #12]
3401803c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018040:	d012      	beq.n	34018068 <UART_SetConfig+0xbc>
34018042:	697b      	ldr	r3, [r7, #20]
34018044:	68db      	ldr	r3, [r3, #12]
34018046:	2b00      	cmp	r3, #0
34018048:	d00e      	beq.n	34018068 <UART_SetConfig+0xbc>
3401804a:	697b      	ldr	r3, [r7, #20]
3401804c:	68db      	ldr	r3, [r3, #12]
3401804e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34018052:	d009      	beq.n	34018068 <UART_SetConfig+0xbc>
34018054:	697b      	ldr	r3, [r7, #20]
34018056:	68db      	ldr	r3, [r3, #12]
34018058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401805c:	d004      	beq.n	34018068 <UART_SetConfig+0xbc>
3401805e:	f640 4157 	movw	r1, #3159	@ 0xc57
34018062:	4896      	ldr	r0, [pc, #600]	@ (340182bc <UART_SetConfig+0x310>)
34018064:	f7e9 fab4 	bl	340015d0 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34018068:	697b      	ldr	r3, [r7, #20]
3401806a:	6a1b      	ldr	r3, [r3, #32]
3401806c:	2b00      	cmp	r3, #0
3401806e:	d009      	beq.n	34018084 <UART_SetConfig+0xd8>
34018070:	697b      	ldr	r3, [r7, #20]
34018072:	6a1b      	ldr	r3, [r3, #32]
34018074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34018078:	d004      	beq.n	34018084 <UART_SetConfig+0xd8>
3401807a:	f640 4158 	movw	r1, #3160	@ 0xc58
3401807e:	488f      	ldr	r0, [pc, #572]	@ (340182bc <UART_SetConfig+0x310>)
34018080:	f7e9 faa6 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
34018084:	697b      	ldr	r3, [r7, #20]
34018086:	691b      	ldr	r3, [r3, #16]
34018088:	2b00      	cmp	r3, #0
3401808a:	d00e      	beq.n	340180aa <UART_SetConfig+0xfe>
3401808c:	697b      	ldr	r3, [r7, #20]
3401808e:	691b      	ldr	r3, [r3, #16]
34018090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34018094:	d009      	beq.n	340180aa <UART_SetConfig+0xfe>
34018096:	697b      	ldr	r3, [r7, #20]
34018098:	691b      	ldr	r3, [r3, #16]
3401809a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401809e:	d004      	beq.n	340180aa <UART_SetConfig+0xfe>
340180a0:	f640 415b 	movw	r1, #3163	@ 0xc5b
340180a4:	4885      	ldr	r0, [pc, #532]	@ (340182bc <UART_SetConfig+0x310>)
340180a6:	f7e9 fa93 	bl	340015d0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
340180aa:	697b      	ldr	r3, [r7, #20]
340180ac:	695b      	ldr	r3, [r3, #20]
340180ae:	f023 030c 	bic.w	r3, r3, #12
340180b2:	2b00      	cmp	r3, #0
340180b4:	d103      	bne.n	340180be <UART_SetConfig+0x112>
340180b6:	697b      	ldr	r3, [r7, #20]
340180b8:	695b      	ldr	r3, [r3, #20]
340180ba:	2b00      	cmp	r3, #0
340180bc:	d104      	bne.n	340180c8 <UART_SetConfig+0x11c>
340180be:	f640 415c 	movw	r1, #3164	@ 0xc5c
340180c2:	487e      	ldr	r0, [pc, #504]	@ (340182bc <UART_SetConfig+0x310>)
340180c4:	f7e9 fa84 	bl	340015d0 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
340180c8:	697b      	ldr	r3, [r7, #20]
340180ca:	699b      	ldr	r3, [r3, #24]
340180cc:	2b00      	cmp	r3, #0
340180ce:	d013      	beq.n	340180f8 <UART_SetConfig+0x14c>
340180d0:	697b      	ldr	r3, [r7, #20]
340180d2:	699b      	ldr	r3, [r3, #24]
340180d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340180d8:	d00e      	beq.n	340180f8 <UART_SetConfig+0x14c>
340180da:	697b      	ldr	r3, [r7, #20]
340180dc:	699b      	ldr	r3, [r3, #24]
340180de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340180e2:	d009      	beq.n	340180f8 <UART_SetConfig+0x14c>
340180e4:	697b      	ldr	r3, [r7, #20]
340180e6:	699b      	ldr	r3, [r3, #24]
340180e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340180ec:	d004      	beq.n	340180f8 <UART_SetConfig+0x14c>
340180ee:	f640 415d 	movw	r1, #3165	@ 0xc5d
340180f2:	4872      	ldr	r0, [pc, #456]	@ (340182bc <UART_SetConfig+0x310>)
340180f4:	f7e9 fa6c 	bl	340015d0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
340180f8:	697b      	ldr	r3, [r7, #20]
340180fa:	69db      	ldr	r3, [r3, #28]
340180fc:	2b00      	cmp	r3, #0
340180fe:	d009      	beq.n	34018114 <UART_SetConfig+0x168>
34018100:	697b      	ldr	r3, [r7, #20]
34018102:	69db      	ldr	r3, [r3, #28]
34018104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34018108:	d004      	beq.n	34018114 <UART_SetConfig+0x168>
3401810a:	f640 415e 	movw	r1, #3166	@ 0xc5e
3401810e:	486b      	ldr	r0, [pc, #428]	@ (340182bc <UART_SetConfig+0x310>)
34018110:	f7e9 fa5e 	bl	340015d0 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34018114:	697b      	ldr	r3, [r7, #20]
34018116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018118:	2b00      	cmp	r3, #0
3401811a:	d030      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401811c:	697b      	ldr	r3, [r7, #20]
3401811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018120:	2b01      	cmp	r3, #1
34018122:	d02c      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018124:	697b      	ldr	r3, [r7, #20]
34018126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018128:	2b02      	cmp	r3, #2
3401812a:	d028      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401812c:	697b      	ldr	r3, [r7, #20]
3401812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018130:	2b03      	cmp	r3, #3
34018132:	d024      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018134:	697b      	ldr	r3, [r7, #20]
34018136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018138:	2b04      	cmp	r3, #4
3401813a:	d020      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401813c:	697b      	ldr	r3, [r7, #20]
3401813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018140:	2b05      	cmp	r3, #5
34018142:	d01c      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018144:	697b      	ldr	r3, [r7, #20]
34018146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018148:	2b06      	cmp	r3, #6
3401814a:	d018      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401814c:	697b      	ldr	r3, [r7, #20]
3401814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018150:	2b07      	cmp	r3, #7
34018152:	d014      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018154:	697b      	ldr	r3, [r7, #20]
34018156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018158:	2b08      	cmp	r3, #8
3401815a:	d010      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401815c:	697b      	ldr	r3, [r7, #20]
3401815e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018160:	2b09      	cmp	r3, #9
34018162:	d00c      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018164:	697b      	ldr	r3, [r7, #20]
34018166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018168:	2b0a      	cmp	r3, #10
3401816a:	d008      	beq.n	3401817e <UART_SetConfig+0x1d2>
3401816c:	697b      	ldr	r3, [r7, #20]
3401816e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018170:	2b0b      	cmp	r3, #11
34018172:	d004      	beq.n	3401817e <UART_SetConfig+0x1d2>
34018174:	f640 415f 	movw	r1, #3167	@ 0xc5f
34018178:	4850      	ldr	r0, [pc, #320]	@ (340182bc <UART_SetConfig+0x310>)
3401817a:	f7e9 fa29 	bl	340015d0 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401817e:	697b      	ldr	r3, [r7, #20]
34018180:	689a      	ldr	r2, [r3, #8]
34018182:	697b      	ldr	r3, [r7, #20]
34018184:	691b      	ldr	r3, [r3, #16]
34018186:	431a      	orrs	r2, r3
34018188:	697b      	ldr	r3, [r7, #20]
3401818a:	695b      	ldr	r3, [r3, #20]
3401818c:	431a      	orrs	r2, r3
3401818e:	697b      	ldr	r3, [r7, #20]
34018190:	69db      	ldr	r3, [r3, #28]
34018192:	4313      	orrs	r3, r2
34018194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34018196:	697b      	ldr	r3, [r7, #20]
34018198:	681b      	ldr	r3, [r3, #0]
3401819a:	681a      	ldr	r2, [r3, #0]
3401819c:	4b48      	ldr	r3, [pc, #288]	@ (340182c0 <UART_SetConfig+0x314>)
3401819e:	4013      	ands	r3, r2
340181a0:	697a      	ldr	r2, [r7, #20]
340181a2:	6812      	ldr	r2, [r2, #0]
340181a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340181a6:	430b      	orrs	r3, r1
340181a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
340181aa:	697b      	ldr	r3, [r7, #20]
340181ac:	681b      	ldr	r3, [r3, #0]
340181ae:	685b      	ldr	r3, [r3, #4]
340181b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
340181b4:	697b      	ldr	r3, [r7, #20]
340181b6:	68da      	ldr	r2, [r3, #12]
340181b8:	697b      	ldr	r3, [r7, #20]
340181ba:	681b      	ldr	r3, [r3, #0]
340181bc:	430a      	orrs	r2, r1
340181be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
340181c0:	697b      	ldr	r3, [r7, #20]
340181c2:	699b      	ldr	r3, [r3, #24]
340181c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
340181c6:	697b      	ldr	r3, [r7, #20]
340181c8:	681b      	ldr	r3, [r3, #0]
340181ca:	4a3e      	ldr	r2, [pc, #248]	@ (340182c4 <UART_SetConfig+0x318>)
340181cc:	4293      	cmp	r3, r2
340181ce:	d009      	beq.n	340181e4 <UART_SetConfig+0x238>
340181d0:	697b      	ldr	r3, [r7, #20]
340181d2:	681b      	ldr	r3, [r3, #0]
340181d4:	4a3c      	ldr	r2, [pc, #240]	@ (340182c8 <UART_SetConfig+0x31c>)
340181d6:	4293      	cmp	r3, r2
340181d8:	d004      	beq.n	340181e4 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
340181da:	697b      	ldr	r3, [r7, #20]
340181dc:	6a1b      	ldr	r3, [r3, #32]
340181de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
340181e0:	4313      	orrs	r3, r2
340181e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
340181e4:	697b      	ldr	r3, [r7, #20]
340181e6:	681b      	ldr	r3, [r3, #0]
340181e8:	689b      	ldr	r3, [r3, #8]
340181ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
340181ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
340181f2:	697a      	ldr	r2, [r7, #20]
340181f4:	6812      	ldr	r2, [r2, #0]
340181f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340181f8:	430b      	orrs	r3, r1
340181fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
340181fc:	697b      	ldr	r3, [r7, #20]
340181fe:	681b      	ldr	r3, [r3, #0]
34018200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018202:	f023 010f 	bic.w	r1, r3, #15
34018206:	697b      	ldr	r3, [r7, #20]
34018208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3401820a:	697b      	ldr	r3, [r7, #20]
3401820c:	681b      	ldr	r3, [r3, #0]
3401820e:	430a      	orrs	r2, r1
34018210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
34018212:	697b      	ldr	r3, [r7, #20]
34018214:	681b      	ldr	r3, [r3, #0]
34018216:	4a2d      	ldr	r2, [pc, #180]	@ (340182cc <UART_SetConfig+0x320>)
34018218:	4293      	cmp	r3, r2
3401821a:	d106      	bne.n	3401822a <UART_SetConfig+0x27e>
3401821c:	f04f 0200 	mov.w	r2, #0
34018220:	f44f 7380 	mov.w	r3, #256	@ 0x100
34018224:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018228:	e092      	b.n	34018350 <UART_SetConfig+0x3a4>
3401822a:	697b      	ldr	r3, [r7, #20]
3401822c:	681b      	ldr	r3, [r3, #0]
3401822e:	4a28      	ldr	r2, [pc, #160]	@ (340182d0 <UART_SetConfig+0x324>)
34018230:	4293      	cmp	r3, r2
34018232:	d106      	bne.n	34018242 <UART_SetConfig+0x296>
34018234:	f04f 0200 	mov.w	r2, #0
34018238:	f44f 7300 	mov.w	r3, #512	@ 0x200
3401823c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018240:	e086      	b.n	34018350 <UART_SetConfig+0x3a4>
34018242:	697b      	ldr	r3, [r7, #20]
34018244:	681b      	ldr	r3, [r3, #0]
34018246:	4a23      	ldr	r2, [pc, #140]	@ (340182d4 <UART_SetConfig+0x328>)
34018248:	4293      	cmp	r3, r2
3401824a:	d106      	bne.n	3401825a <UART_SetConfig+0x2ae>
3401824c:	f04f 0200 	mov.w	r2, #0
34018250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34018254:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018258:	e07a      	b.n	34018350 <UART_SetConfig+0x3a4>
3401825a:	697b      	ldr	r3, [r7, #20]
3401825c:	681b      	ldr	r3, [r3, #0]
3401825e:	4a1e      	ldr	r2, [pc, #120]	@ (340182d8 <UART_SetConfig+0x32c>)
34018260:	4293      	cmp	r3, r2
34018262:	d106      	bne.n	34018272 <UART_SetConfig+0x2c6>
34018264:	f04f 0200 	mov.w	r2, #0
34018268:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3401826c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018270:	e06e      	b.n	34018350 <UART_SetConfig+0x3a4>
34018272:	697b      	ldr	r3, [r7, #20]
34018274:	681b      	ldr	r3, [r3, #0]
34018276:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401827a:	d106      	bne.n	3401828a <UART_SetConfig+0x2de>
3401827c:	f04f 0200 	mov.w	r2, #0
34018280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34018284:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018288:	e062      	b.n	34018350 <UART_SetConfig+0x3a4>
3401828a:	697b      	ldr	r3, [r7, #20]
3401828c:	681b      	ldr	r3, [r3, #0]
3401828e:	4a13      	ldr	r2, [pc, #76]	@ (340182dc <UART_SetConfig+0x330>)
34018290:	4293      	cmp	r3, r2
34018292:	d106      	bne.n	340182a2 <UART_SetConfig+0x2f6>
34018294:	f04f 0200 	mov.w	r2, #0
34018298:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401829c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340182a0:	e056      	b.n	34018350 <UART_SetConfig+0x3a4>
340182a2:	697b      	ldr	r3, [r7, #20]
340182a4:	681b      	ldr	r3, [r3, #0]
340182a6:	4a0e      	ldr	r2, [pc, #56]	@ (340182e0 <UART_SetConfig+0x334>)
340182a8:	4293      	cmp	r3, r2
340182aa:	d11b      	bne.n	340182e4 <UART_SetConfig+0x338>
340182ac:	f04f 0200 	mov.w	r2, #0
340182b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340182b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340182b8:	e04a      	b.n	34018350 <UART_SetConfig+0x3a4>
340182ba:	bf00      	nop
340182bc:	3401d8f4 	.word	0x3401d8f4
340182c0:	cfff69f3 	.word	0xcfff69f3
340182c4:	56000c00 	.word	0x56000c00
340182c8:	46000c00 	.word	0x46000c00
340182cc:	52001000 	.word	0x52001000
340182d0:	50004400 	.word	0x50004400
340182d4:	50004800 	.word	0x50004800
340182d8:	50004c00 	.word	0x50004c00
340182dc:	52001400 	.word	0x52001400
340182e0:	50007800 	.word	0x50007800
340182e4:	697b      	ldr	r3, [r7, #20]
340182e6:	681b      	ldr	r3, [r3, #0]
340182e8:	4a90      	ldr	r2, [pc, #576]	@ (3401852c <UART_SetConfig+0x580>)
340182ea:	4293      	cmp	r3, r2
340182ec:	d106      	bne.n	340182fc <UART_SetConfig+0x350>
340182ee:	f04f 0200 	mov.w	r2, #0
340182f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340182f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340182fa:	e029      	b.n	34018350 <UART_SetConfig+0x3a4>
340182fc:	697b      	ldr	r3, [r7, #20]
340182fe:	681b      	ldr	r3, [r3, #0]
34018300:	4a8b      	ldr	r2, [pc, #556]	@ (34018530 <UART_SetConfig+0x584>)
34018302:	4293      	cmp	r3, r2
34018304:	d106      	bne.n	34018314 <UART_SetConfig+0x368>
34018306:	f04f 0200 	mov.w	r2, #0
3401830a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3401830e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018312:	e01d      	b.n	34018350 <UART_SetConfig+0x3a4>
34018314:	697b      	ldr	r3, [r7, #20]
34018316:	681b      	ldr	r3, [r3, #0]
34018318:	4a86      	ldr	r2, [pc, #536]	@ (34018534 <UART_SetConfig+0x588>)
3401831a:	4293      	cmp	r3, r2
3401831c:	d106      	bne.n	3401832c <UART_SetConfig+0x380>
3401831e:	f04f 0200 	mov.w	r2, #0
34018322:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34018326:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3401832a:	e011      	b.n	34018350 <UART_SetConfig+0x3a4>
3401832c:	697b      	ldr	r3, [r7, #20]
3401832e:	681b      	ldr	r3, [r3, #0]
34018330:	4a81      	ldr	r2, [pc, #516]	@ (34018538 <UART_SetConfig+0x58c>)
34018332:	4293      	cmp	r3, r2
34018334:	d106      	bne.n	34018344 <UART_SetConfig+0x398>
34018336:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3401833a:	f04f 0300 	mov.w	r3, #0
3401833e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34018342:	e005      	b.n	34018350 <UART_SetConfig+0x3a4>
34018344:	f04f 0200 	mov.w	r2, #0
34018348:	f04f 0300 	mov.w	r3, #0
3401834c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
34018350:	697b      	ldr	r3, [r7, #20]
34018352:	681b      	ldr	r3, [r3, #0]
34018354:	4a78      	ldr	r2, [pc, #480]	@ (34018538 <UART_SetConfig+0x58c>)
34018356:	4293      	cmp	r3, r2
34018358:	d004      	beq.n	34018364 <UART_SetConfig+0x3b8>
3401835a:	697b      	ldr	r3, [r7, #20]
3401835c:	681b      	ldr	r3, [r3, #0]
3401835e:	4a77      	ldr	r2, [pc, #476]	@ (3401853c <UART_SetConfig+0x590>)
34018360:	4293      	cmp	r3, r2
34018362:	d166      	bne.n	34018432 <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34018364:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34018368:	f7fa f934 	bl	340125d4 <HAL_RCCEx_GetPeriphCLKFreq>
3401836c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3401836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018370:	2b00      	cmp	r3, #0
34018372:	f000 80c6 	beq.w	34018502 <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34018376:	697b      	ldr	r3, [r7, #20]
34018378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401837a:	4a71      	ldr	r2, [pc, #452]	@ (34018540 <UART_SetConfig+0x594>)
3401837c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34018380:	461a      	mov	r2, r3
34018382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018384:	fbb3 f3f2 	udiv	r3, r3, r2
34018388:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401838a:	697b      	ldr	r3, [r7, #20]
3401838c:	685a      	ldr	r2, [r3, #4]
3401838e:	4613      	mov	r3, r2
34018390:	005b      	lsls	r3, r3, #1
34018392:	4413      	add	r3, r2
34018394:	69fa      	ldr	r2, [r7, #28]
34018396:	429a      	cmp	r2, r3
34018398:	d305      	bcc.n	340183a6 <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3401839a:	697b      	ldr	r3, [r7, #20]
3401839c:	685b      	ldr	r3, [r3, #4]
3401839e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
340183a0:	69fa      	ldr	r2, [r7, #28]
340183a2:	429a      	cmp	r2, r3
340183a4:	d903      	bls.n	340183ae <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
340183a6:	2301      	movs	r3, #1
340183a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
340183ac:	e040      	b.n	34018430 <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
340183ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340183b0:	2200      	movs	r2, #0
340183b2:	60bb      	str	r3, [r7, #8]
340183b4:	60fa      	str	r2, [r7, #12]
340183b6:	697b      	ldr	r3, [r7, #20]
340183b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340183ba:	4a61      	ldr	r2, [pc, #388]	@ (34018540 <UART_SetConfig+0x594>)
340183bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
340183c0:	b29b      	uxth	r3, r3
340183c2:	2200      	movs	r2, #0
340183c4:	603b      	str	r3, [r7, #0]
340183c6:	607a      	str	r2, [r7, #4]
340183c8:	e9d7 2300 	ldrd	r2, r3, [r7]
340183cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
340183d0:	f7e8 f9e6 	bl	340007a0 <__aeabi_uldivmod>
340183d4:	4602      	mov	r2, r0
340183d6:	460b      	mov	r3, r1
340183d8:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
340183dc:	6979      	ldr	r1, [r7, #20]
340183de:	6849      	ldr	r1, [r1, #4]
340183e0:	0849      	lsrs	r1, r1, #1
340183e2:	2000      	movs	r0, #0
340183e4:	460c      	mov	r4, r1
340183e6:	4605      	mov	r5, r0
340183e8:	eb12 0804 	adds.w	r8, r2, r4
340183ec:	eb43 0905 	adc.w	r9, r3, r5
340183f0:	697b      	ldr	r3, [r7, #20]
340183f2:	685b      	ldr	r3, [r3, #4]
340183f4:	2200      	movs	r2, #0
340183f6:	469a      	mov	sl, r3
340183f8:	4693      	mov	fp, r2
340183fa:	4652      	mov	r2, sl
340183fc:	465b      	mov	r3, fp
340183fe:	4640      	mov	r0, r8
34018400:	4649      	mov	r1, r9
34018402:	f7e8 f9cd 	bl	340007a0 <__aeabi_uldivmod>
34018406:	4602      	mov	r2, r0
34018408:	460b      	mov	r3, r1
3401840a:	4613      	mov	r3, r2
3401840c:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3401840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34018414:	d308      	bcc.n	34018428 <UART_SetConfig+0x47c>
34018416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018418:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3401841c:	d204      	bcs.n	34018428 <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
3401841e:	697b      	ldr	r3, [r7, #20]
34018420:	681b      	ldr	r3, [r3, #0]
34018422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
34018424:	60da      	str	r2, [r3, #12]
34018426:	e003      	b.n	34018430 <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
34018428:	2301      	movs	r3, #1
3401842a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3401842e:	e068      	b.n	34018502 <UART_SetConfig+0x556>
34018430:	e067      	b.n	34018502 <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
34018432:	697b      	ldr	r3, [r7, #20]
34018434:	69db      	ldr	r3, [r3, #28]
34018436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3401843a:	d138      	bne.n	340184ae <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401843c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34018440:	f7fa f8c8 	bl	340125d4 <HAL_RCCEx_GetPeriphCLKFreq>
34018444:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
34018446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018448:	2b00      	cmp	r3, #0
3401844a:	d05a      	beq.n	34018502 <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401844c:	697b      	ldr	r3, [r7, #20]
3401844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018450:	4a3b      	ldr	r2, [pc, #236]	@ (34018540 <UART_SetConfig+0x594>)
34018452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34018456:	461a      	mov	r2, r3
34018458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401845a:	fbb3 f3f2 	udiv	r3, r3, r2
3401845e:	005a      	lsls	r2, r3, #1
34018460:	697b      	ldr	r3, [r7, #20]
34018462:	685b      	ldr	r3, [r3, #4]
34018464:	085b      	lsrs	r3, r3, #1
34018466:	441a      	add	r2, r3
34018468:	697b      	ldr	r3, [r7, #20]
3401846a:	685b      	ldr	r3, [r3, #4]
3401846c:	fbb2 f3f3 	udiv	r3, r2, r3
34018470:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34018472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018474:	2b0f      	cmp	r3, #15
34018476:	d916      	bls.n	340184a6 <UART_SetConfig+0x4fa>
34018478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401847a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401847e:	d212      	bcs.n	340184a6 <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34018480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018482:	b29b      	uxth	r3, r3
34018484:	f023 030f 	bic.w	r3, r3, #15
34018488:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3401848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401848c:	085b      	lsrs	r3, r3, #1
3401848e:	b29b      	uxth	r3, r3
34018490:	f003 0307 	and.w	r3, r3, #7
34018494:	b29a      	uxth	r2, r3
34018496:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
34018498:	4313      	orrs	r3, r2
3401849a:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3401849c:	697b      	ldr	r3, [r7, #20]
3401849e:	681b      	ldr	r3, [r3, #0]
340184a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
340184a2:	60da      	str	r2, [r3, #12]
340184a4:	e02d      	b.n	34018502 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
340184a6:	2301      	movs	r3, #1
340184a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
340184ac:	e029      	b.n	34018502 <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
340184ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
340184b2:	f7fa f88f 	bl	340125d4 <HAL_RCCEx_GetPeriphCLKFreq>
340184b6:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
340184b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340184ba:	2b00      	cmp	r3, #0
340184bc:	d021      	beq.n	34018502 <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
340184be:	697b      	ldr	r3, [r7, #20]
340184c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340184c2:	4a1f      	ldr	r2, [pc, #124]	@ (34018540 <UART_SetConfig+0x594>)
340184c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
340184c8:	461a      	mov	r2, r3
340184ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340184cc:	fbb3 f2f2 	udiv	r2, r3, r2
340184d0:	697b      	ldr	r3, [r7, #20]
340184d2:	685b      	ldr	r3, [r3, #4]
340184d4:	085b      	lsrs	r3, r3, #1
340184d6:	441a      	add	r2, r3
340184d8:	697b      	ldr	r3, [r7, #20]
340184da:	685b      	ldr	r3, [r3, #4]
340184dc:	fbb2 f3f3 	udiv	r3, r2, r3
340184e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
340184e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340184e4:	2b0f      	cmp	r3, #15
340184e6:	d909      	bls.n	340184fc <UART_SetConfig+0x550>
340184e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340184ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340184ee:	d205      	bcs.n	340184fc <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
340184f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340184f2:	b29a      	uxth	r2, r3
340184f4:	697b      	ldr	r3, [r7, #20]
340184f6:	681b      	ldr	r3, [r3, #0]
340184f8:	60da      	str	r2, [r3, #12]
340184fa:	e002      	b.n	34018502 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
340184fc:	2301      	movs	r3, #1
340184fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
34018502:	697b      	ldr	r3, [r7, #20]
34018504:	2201      	movs	r2, #1
34018506:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3401850a:	697b      	ldr	r3, [r7, #20]
3401850c:	2201      	movs	r2, #1
3401850e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
34018512:	697b      	ldr	r3, [r7, #20]
34018514:	2200      	movs	r2, #0
34018516:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
34018518:	697b      	ldr	r3, [r7, #20]
3401851a:	2200      	movs	r2, #0
3401851c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3401851e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
34018522:	4618      	mov	r0, r3
34018524:	3740      	adds	r7, #64	@ 0x40
34018526:	46bd      	mov	sp, r7
34018528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3401852c:	50007c00 	.word	0x50007c00
34018530:	52001800 	.word	0x52001800
34018534:	52001c00 	.word	0x52001c00
34018538:	56000c00 	.word	0x56000c00
3401853c:	46000c00 	.word	0x46000c00
34018540:	3401e318 	.word	0x3401e318

34018544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
34018544:	b580      	push	{r7, lr}
34018546:	b082      	sub	sp, #8
34018548:	af00      	add	r7, sp, #0
3401854a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401854c:	687b      	ldr	r3, [r7, #4]
3401854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018550:	2bff      	cmp	r3, #255	@ 0xff
34018552:	d904      	bls.n	3401855e <UART_AdvFeatureConfig+0x1a>
34018554:	f640 41e4 	movw	r1, #3300	@ 0xce4
34018558:	4890      	ldr	r0, [pc, #576]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
3401855a:	f7e9 f839 	bl	340015d0 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3401855e:	687b      	ldr	r3, [r7, #4]
34018560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018562:	f003 0308 	and.w	r3, r3, #8
34018566:	2b00      	cmp	r3, #0
34018568:	d018      	beq.n	3401859c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3401856a:	687b      	ldr	r3, [r7, #4]
3401856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401856e:	2b00      	cmp	r3, #0
34018570:	d009      	beq.n	34018586 <UART_AdvFeatureConfig+0x42>
34018572:	687b      	ldr	r3, [r7, #4]
34018574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34018576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3401857a:	d004      	beq.n	34018586 <UART_AdvFeatureConfig+0x42>
3401857c:	f640 41e9 	movw	r1, #3305	@ 0xce9
34018580:	4886      	ldr	r0, [pc, #536]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
34018582:	f7e9 f825 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
34018586:	687b      	ldr	r3, [r7, #4]
34018588:	681b      	ldr	r3, [r3, #0]
3401858a:	685b      	ldr	r3, [r3, #4]
3401858c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
34018590:	687b      	ldr	r3, [r7, #4]
34018592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34018594:	687b      	ldr	r3, [r7, #4]
34018596:	681b      	ldr	r3, [r3, #0]
34018598:	430a      	orrs	r2, r1
3401859a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3401859c:	687b      	ldr	r3, [r7, #4]
3401859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340185a0:	f003 0301 	and.w	r3, r3, #1
340185a4:	2b00      	cmp	r3, #0
340185a6:	d018      	beq.n	340185da <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
340185a8:	687b      	ldr	r3, [r7, #4]
340185aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340185ac:	2b00      	cmp	r3, #0
340185ae:	d009      	beq.n	340185c4 <UART_AdvFeatureConfig+0x80>
340185b0:	687b      	ldr	r3, [r7, #4]
340185b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340185b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340185b8:	d004      	beq.n	340185c4 <UART_AdvFeatureConfig+0x80>
340185ba:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
340185be:	4877      	ldr	r0, [pc, #476]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
340185c0:	f7e9 f806 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
340185c4:	687b      	ldr	r3, [r7, #4]
340185c6:	681b      	ldr	r3, [r3, #0]
340185c8:	685b      	ldr	r3, [r3, #4]
340185ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
340185ce:	687b      	ldr	r3, [r7, #4]
340185d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
340185d2:	687b      	ldr	r3, [r7, #4]
340185d4:	681b      	ldr	r3, [r3, #0]
340185d6:	430a      	orrs	r2, r1
340185d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
340185da:	687b      	ldr	r3, [r7, #4]
340185dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340185de:	f003 0302 	and.w	r3, r3, #2
340185e2:	2b00      	cmp	r3, #0
340185e4:	d018      	beq.n	34018618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
340185e6:	687b      	ldr	r3, [r7, #4]
340185e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340185ea:	2b00      	cmp	r3, #0
340185ec:	d009      	beq.n	34018602 <UART_AdvFeatureConfig+0xbe>
340185ee:	687b      	ldr	r3, [r7, #4]
340185f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340185f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340185f6:	d004      	beq.n	34018602 <UART_AdvFeatureConfig+0xbe>
340185f8:	f640 41f7 	movw	r1, #3319	@ 0xcf7
340185fc:	4867      	ldr	r0, [pc, #412]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
340185fe:	f7e8 ffe7 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
34018602:	687b      	ldr	r3, [r7, #4]
34018604:	681b      	ldr	r3, [r3, #0]
34018606:	685b      	ldr	r3, [r3, #4]
34018608:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401860c:	687b      	ldr	r3, [r7, #4]
3401860e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34018610:	687b      	ldr	r3, [r7, #4]
34018612:	681b      	ldr	r3, [r3, #0]
34018614:	430a      	orrs	r2, r1
34018616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
34018618:	687b      	ldr	r3, [r7, #4]
3401861a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401861c:	f003 0304 	and.w	r3, r3, #4
34018620:	2b00      	cmp	r3, #0
34018622:	d018      	beq.n	34018656 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
34018624:	687b      	ldr	r3, [r7, #4]
34018626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34018628:	2b00      	cmp	r3, #0
3401862a:	d009      	beq.n	34018640 <UART_AdvFeatureConfig+0xfc>
3401862c:	687b      	ldr	r3, [r7, #4]
3401862e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34018630:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34018634:	d004      	beq.n	34018640 <UART_AdvFeatureConfig+0xfc>
34018636:	f640 41fe 	movw	r1, #3326	@ 0xcfe
3401863a:	4858      	ldr	r0, [pc, #352]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
3401863c:	f7e8 ffc8 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
34018640:	687b      	ldr	r3, [r7, #4]
34018642:	681b      	ldr	r3, [r3, #0]
34018644:	685b      	ldr	r3, [r3, #4]
34018646:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3401864a:	687b      	ldr	r3, [r7, #4]
3401864c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3401864e:	687b      	ldr	r3, [r7, #4]
34018650:	681b      	ldr	r3, [r3, #0]
34018652:	430a      	orrs	r2, r1
34018654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
34018656:	687b      	ldr	r3, [r7, #4]
34018658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401865a:	f003 0310 	and.w	r3, r3, #16
3401865e:	2b00      	cmp	r3, #0
34018660:	d018      	beq.n	34018694 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
34018662:	687b      	ldr	r3, [r7, #4]
34018664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34018666:	2b00      	cmp	r3, #0
34018668:	d009      	beq.n	3401867e <UART_AdvFeatureConfig+0x13a>
3401866a:	687b      	ldr	r3, [r7, #4]
3401866c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3401866e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018672:	d004      	beq.n	3401867e <UART_AdvFeatureConfig+0x13a>
34018674:	f640 5105 	movw	r1, #3333	@ 0xd05
34018678:	4848      	ldr	r0, [pc, #288]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
3401867a:	f7e8 ffa9 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401867e:	687b      	ldr	r3, [r7, #4]
34018680:	681b      	ldr	r3, [r3, #0]
34018682:	689b      	ldr	r3, [r3, #8]
34018684:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
34018688:	687b      	ldr	r3, [r7, #4]
3401868a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3401868c:	687b      	ldr	r3, [r7, #4]
3401868e:	681b      	ldr	r3, [r3, #0]
34018690:	430a      	orrs	r2, r1
34018692:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
34018694:	687b      	ldr	r3, [r7, #4]
34018696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018698:	f003 0320 	and.w	r3, r3, #32
3401869c:	2b00      	cmp	r3, #0
3401869e:	d018      	beq.n	340186d2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
340186a0:	687b      	ldr	r3, [r7, #4]
340186a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340186a4:	2b00      	cmp	r3, #0
340186a6:	d009      	beq.n	340186bc <UART_AdvFeatureConfig+0x178>
340186a8:	687b      	ldr	r3, [r7, #4]
340186aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340186ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340186b0:	d004      	beq.n	340186bc <UART_AdvFeatureConfig+0x178>
340186b2:	f640 510d 	movw	r1, #3341	@ 0xd0d
340186b6:	4839      	ldr	r0, [pc, #228]	@ (3401879c <UART_AdvFeatureConfig+0x258>)
340186b8:	f7e8 ff8a 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
340186bc:	687b      	ldr	r3, [r7, #4]
340186be:	681b      	ldr	r3, [r3, #0]
340186c0:	689b      	ldr	r3, [r3, #8]
340186c2:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
340186c6:	687b      	ldr	r3, [r7, #4]
340186c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
340186ca:	687b      	ldr	r3, [r7, #4]
340186cc:	681b      	ldr	r3, [r3, #0]
340186ce:	430a      	orrs	r2, r1
340186d0:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
340186d2:	687b      	ldr	r3, [r7, #4]
340186d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340186d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340186da:	2b00      	cmp	r3, #0
340186dc:	f000 80d2 	beq.w	34018884 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
340186e0:	687b      	ldr	r3, [r7, #4]
340186e2:	681b      	ldr	r3, [r3, #0]
340186e4:	4a2e      	ldr	r2, [pc, #184]	@ (340187a0 <UART_AdvFeatureConfig+0x25c>)
340186e6:	4293      	cmp	r3, r2
340186e8:	f000 808b 	beq.w	34018802 <UART_AdvFeatureConfig+0x2be>
340186ec:	687b      	ldr	r3, [r7, #4]
340186ee:	681b      	ldr	r3, [r3, #0]
340186f0:	4a2c      	ldr	r2, [pc, #176]	@ (340187a4 <UART_AdvFeatureConfig+0x260>)
340186f2:	4293      	cmp	r3, r2
340186f4:	f000 8085 	beq.w	34018802 <UART_AdvFeatureConfig+0x2be>
340186f8:	687b      	ldr	r3, [r7, #4]
340186fa:	681b      	ldr	r3, [r3, #0]
340186fc:	4a2a      	ldr	r2, [pc, #168]	@ (340187a8 <UART_AdvFeatureConfig+0x264>)
340186fe:	4293      	cmp	r3, r2
34018700:	d07f      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018702:	687b      	ldr	r3, [r7, #4]
34018704:	681b      	ldr	r3, [r3, #0]
34018706:	4a29      	ldr	r2, [pc, #164]	@ (340187ac <UART_AdvFeatureConfig+0x268>)
34018708:	4293      	cmp	r3, r2
3401870a:	d07a      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401870c:	687b      	ldr	r3, [r7, #4]
3401870e:	681b      	ldr	r3, [r3, #0]
34018710:	4a27      	ldr	r2, [pc, #156]	@ (340187b0 <UART_AdvFeatureConfig+0x26c>)
34018712:	4293      	cmp	r3, r2
34018714:	d075      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018716:	687b      	ldr	r3, [r7, #4]
34018718:	681b      	ldr	r3, [r3, #0]
3401871a:	4a26      	ldr	r2, [pc, #152]	@ (340187b4 <UART_AdvFeatureConfig+0x270>)
3401871c:	4293      	cmp	r3, r2
3401871e:	d070      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018720:	687b      	ldr	r3, [r7, #4]
34018722:	681b      	ldr	r3, [r3, #0]
34018724:	4a24      	ldr	r2, [pc, #144]	@ (340187b8 <UART_AdvFeatureConfig+0x274>)
34018726:	4293      	cmp	r3, r2
34018728:	d06b      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401872a:	687b      	ldr	r3, [r7, #4]
3401872c:	681b      	ldr	r3, [r3, #0]
3401872e:	4a23      	ldr	r2, [pc, #140]	@ (340187bc <UART_AdvFeatureConfig+0x278>)
34018730:	4293      	cmp	r3, r2
34018732:	d066      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018734:	687b      	ldr	r3, [r7, #4]
34018736:	681b      	ldr	r3, [r3, #0]
34018738:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401873c:	d061      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401873e:	687b      	ldr	r3, [r7, #4]
34018740:	681b      	ldr	r3, [r3, #0]
34018742:	4a1f      	ldr	r2, [pc, #124]	@ (340187c0 <UART_AdvFeatureConfig+0x27c>)
34018744:	4293      	cmp	r3, r2
34018746:	d05c      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018748:	687b      	ldr	r3, [r7, #4]
3401874a:	681b      	ldr	r3, [r3, #0]
3401874c:	4a1d      	ldr	r2, [pc, #116]	@ (340187c4 <UART_AdvFeatureConfig+0x280>)
3401874e:	4293      	cmp	r3, r2
34018750:	d057      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018752:	687b      	ldr	r3, [r7, #4]
34018754:	681b      	ldr	r3, [r3, #0]
34018756:	4a1c      	ldr	r2, [pc, #112]	@ (340187c8 <UART_AdvFeatureConfig+0x284>)
34018758:	4293      	cmp	r3, r2
3401875a:	d052      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401875c:	687b      	ldr	r3, [r7, #4]
3401875e:	681b      	ldr	r3, [r3, #0]
34018760:	4a1a      	ldr	r2, [pc, #104]	@ (340187cc <UART_AdvFeatureConfig+0x288>)
34018762:	4293      	cmp	r3, r2
34018764:	d04d      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018766:	687b      	ldr	r3, [r7, #4]
34018768:	681b      	ldr	r3, [r3, #0]
3401876a:	4a19      	ldr	r2, [pc, #100]	@ (340187d0 <UART_AdvFeatureConfig+0x28c>)
3401876c:	4293      	cmp	r3, r2
3401876e:	d048      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018770:	687b      	ldr	r3, [r7, #4]
34018772:	681b      	ldr	r3, [r3, #0]
34018774:	4a17      	ldr	r2, [pc, #92]	@ (340187d4 <UART_AdvFeatureConfig+0x290>)
34018776:	4293      	cmp	r3, r2
34018778:	d043      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401877a:	687b      	ldr	r3, [r7, #4]
3401877c:	681b      	ldr	r3, [r3, #0]
3401877e:	4a16      	ldr	r2, [pc, #88]	@ (340187d8 <UART_AdvFeatureConfig+0x294>)
34018780:	4293      	cmp	r3, r2
34018782:	d03e      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018784:	687b      	ldr	r3, [r7, #4]
34018786:	681b      	ldr	r3, [r3, #0]
34018788:	4a14      	ldr	r2, [pc, #80]	@ (340187dc <UART_AdvFeatureConfig+0x298>)
3401878a:	4293      	cmp	r3, r2
3401878c:	d039      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
3401878e:	687b      	ldr	r3, [r7, #4]
34018790:	681b      	ldr	r3, [r3, #0]
34018792:	4a13      	ldr	r2, [pc, #76]	@ (340187e0 <UART_AdvFeatureConfig+0x29c>)
34018794:	4293      	cmp	r3, r2
34018796:	d034      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
34018798:	e024      	b.n	340187e4 <UART_AdvFeatureConfig+0x2a0>
3401879a:	bf00      	nop
3401879c:	3401d8f4 	.word	0x3401d8f4
340187a0:	52001000 	.word	0x52001000
340187a4:	42001000 	.word	0x42001000
340187a8:	50004400 	.word	0x50004400
340187ac:	40004400 	.word	0x40004400
340187b0:	50004800 	.word	0x50004800
340187b4:	40004800 	.word	0x40004800
340187b8:	50004c00 	.word	0x50004c00
340187bc:	40004c00 	.word	0x40004c00
340187c0:	40005000 	.word	0x40005000
340187c4:	52001400 	.word	0x52001400
340187c8:	42001400 	.word	0x42001400
340187cc:	50007800 	.word	0x50007800
340187d0:	40007800 	.word	0x40007800
340187d4:	50007c00 	.word	0x50007c00
340187d8:	40007c00 	.word	0x40007c00
340187dc:	52001800 	.word	0x52001800
340187e0:	42001800 	.word	0x42001800
340187e4:	687b      	ldr	r3, [r7, #4]
340187e6:	681b      	ldr	r3, [r3, #0]
340187e8:	4a38      	ldr	r2, [pc, #224]	@ (340188cc <UART_AdvFeatureConfig+0x388>)
340187ea:	4293      	cmp	r3, r2
340187ec:	d009      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
340187ee:	687b      	ldr	r3, [r7, #4]
340187f0:	681b      	ldr	r3, [r3, #0]
340187f2:	4a37      	ldr	r2, [pc, #220]	@ (340188d0 <UART_AdvFeatureConfig+0x38c>)
340187f4:	4293      	cmp	r3, r2
340187f6:	d004      	beq.n	34018802 <UART_AdvFeatureConfig+0x2be>
340187f8:	f640 5115 	movw	r1, #3349	@ 0xd15
340187fc:	4835      	ldr	r0, [pc, #212]	@ (340188d4 <UART_AdvFeatureConfig+0x390>)
340187fe:	f7e8 fee7 	bl	340015d0 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
34018802:	687b      	ldr	r3, [r7, #4]
34018804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34018806:	2b00      	cmp	r3, #0
34018808:	d009      	beq.n	3401881e <UART_AdvFeatureConfig+0x2da>
3401880a:	687b      	ldr	r3, [r7, #4]
3401880c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401880e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34018812:	d004      	beq.n	3401881e <UART_AdvFeatureConfig+0x2da>
34018814:	f640 5116 	movw	r1, #3350	@ 0xd16
34018818:	482e      	ldr	r0, [pc, #184]	@ (340188d4 <UART_AdvFeatureConfig+0x390>)
3401881a:	f7e8 fed9 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401881e:	687b      	ldr	r3, [r7, #4]
34018820:	681b      	ldr	r3, [r3, #0]
34018822:	685b      	ldr	r3, [r3, #4]
34018824:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
34018828:	687b      	ldr	r3, [r7, #4]
3401882a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3401882c:	687b      	ldr	r3, [r7, #4]
3401882e:	681b      	ldr	r3, [r3, #0]
34018830:	430a      	orrs	r2, r1
34018832:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
34018834:	687b      	ldr	r3, [r7, #4]
34018836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34018838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3401883c:	d122      	bne.n	34018884 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3401883e:	687b      	ldr	r3, [r7, #4]
34018840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018842:	2b00      	cmp	r3, #0
34018844:	d013      	beq.n	3401886e <UART_AdvFeatureConfig+0x32a>
34018846:	687b      	ldr	r3, [r7, #4]
34018848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401884a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401884e:	d00e      	beq.n	3401886e <UART_AdvFeatureConfig+0x32a>
34018850:	687b      	ldr	r3, [r7, #4]
34018852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34018858:	d009      	beq.n	3401886e <UART_AdvFeatureConfig+0x32a>
3401885a:	687b      	ldr	r3, [r7, #4]
3401885c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401885e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34018862:	d004      	beq.n	3401886e <UART_AdvFeatureConfig+0x32a>
34018864:	f640 511b 	movw	r1, #3355	@ 0xd1b
34018868:	481a      	ldr	r0, [pc, #104]	@ (340188d4 <UART_AdvFeatureConfig+0x390>)
3401886a:	f7e8 feb1 	bl	340015d0 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401886e:	687b      	ldr	r3, [r7, #4]
34018870:	681b      	ldr	r3, [r3, #0]
34018872:	685b      	ldr	r3, [r3, #4]
34018874:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
34018878:	687b      	ldr	r3, [r7, #4]
3401887a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3401887c:	687b      	ldr	r3, [r7, #4]
3401887e:	681b      	ldr	r3, [r3, #0]
34018880:	430a      	orrs	r2, r1
34018882:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
34018884:	687b      	ldr	r3, [r7, #4]
34018886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3401888c:	2b00      	cmp	r3, #0
3401888e:	d018      	beq.n	340188c2 <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
34018890:	687b      	ldr	r3, [r7, #4]
34018892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34018894:	2b00      	cmp	r3, #0
34018896:	d009      	beq.n	340188ac <UART_AdvFeatureConfig+0x368>
34018898:	687b      	ldr	r3, [r7, #4]
3401889a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401889c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
340188a0:	d004      	beq.n	340188ac <UART_AdvFeatureConfig+0x368>
340188a2:	f640 5123 	movw	r1, #3363	@ 0xd23
340188a6:	480b      	ldr	r0, [pc, #44]	@ (340188d4 <UART_AdvFeatureConfig+0x390>)
340188a8:	f7e8 fe92 	bl	340015d0 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
340188ac:	687b      	ldr	r3, [r7, #4]
340188ae:	681b      	ldr	r3, [r3, #0]
340188b0:	685b      	ldr	r3, [r3, #4]
340188b2:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
340188b6:	687b      	ldr	r3, [r7, #4]
340188b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340188ba:	687b      	ldr	r3, [r7, #4]
340188bc:	681b      	ldr	r3, [r3, #0]
340188be:	430a      	orrs	r2, r1
340188c0:	605a      	str	r2, [r3, #4]
  }
}
340188c2:	bf00      	nop
340188c4:	3708      	adds	r7, #8
340188c6:	46bd      	mov	sp, r7
340188c8:	bd80      	pop	{r7, pc}
340188ca:	bf00      	nop
340188cc:	52001c00 	.word	0x52001c00
340188d0:	42001c00 	.word	0x42001c00
340188d4:	3401d8f4 	.word	0x3401d8f4

340188d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
340188d8:	b580      	push	{r7, lr}
340188da:	b098      	sub	sp, #96	@ 0x60
340188dc:	af02      	add	r7, sp, #8
340188de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
340188e0:	687b      	ldr	r3, [r7, #4]
340188e2:	2200      	movs	r2, #0
340188e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
340188e8:	f7ed fba0 	bl	3400602c <HAL_GetTick>
340188ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
340188ee:	687b      	ldr	r3, [r7, #4]
340188f0:	681b      	ldr	r3, [r3, #0]
340188f2:	681b      	ldr	r3, [r3, #0]
340188f4:	f003 0308 	and.w	r3, r3, #8
340188f8:	2b08      	cmp	r3, #8
340188fa:	d12f      	bne.n	3401895c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
340188fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
34018900:	9300      	str	r3, [sp, #0]
34018902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018904:	2200      	movs	r2, #0
34018906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3401890a:	6878      	ldr	r0, [r7, #4]
3401890c:	f000 f88e 	bl	34018a2c <UART_WaitOnFlagUntilTimeout>
34018910:	4603      	mov	r3, r0
34018912:	2b00      	cmp	r3, #0
34018914:	d022      	beq.n	3401895c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
34018916:	687b      	ldr	r3, [r7, #4]
34018918:	681b      	ldr	r3, [r3, #0]
3401891a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3401891e:	e853 3f00 	ldrex	r3, [r3]
34018922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
34018924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34018926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3401892a:	653b      	str	r3, [r7, #80]	@ 0x50
3401892c:	687b      	ldr	r3, [r7, #4]
3401892e:	681b      	ldr	r3, [r3, #0]
34018930:	461a      	mov	r2, r3
34018932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018934:	647b      	str	r3, [r7, #68]	@ 0x44
34018936:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34018938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3401893a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3401893c:	e841 2300 	strex	r3, r2, [r1]
34018940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
34018942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34018944:	2b00      	cmp	r3, #0
34018946:	d1e6      	bne.n	34018916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
34018948:	687b      	ldr	r3, [r7, #4]
3401894a:	2220      	movs	r2, #32
3401894c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
34018950:	687b      	ldr	r3, [r7, #4]
34018952:	2200      	movs	r2, #0
34018954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
34018958:	2303      	movs	r3, #3
3401895a:	e063      	b.n	34018a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3401895c:	687b      	ldr	r3, [r7, #4]
3401895e:	681b      	ldr	r3, [r3, #0]
34018960:	681b      	ldr	r3, [r3, #0]
34018962:	f003 0304 	and.w	r3, r3, #4
34018966:	2b04      	cmp	r3, #4
34018968:	d149      	bne.n	340189fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401896a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401896e:	9300      	str	r3, [sp, #0]
34018970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018972:	2200      	movs	r2, #0
34018974:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34018978:	6878      	ldr	r0, [r7, #4]
3401897a:	f000 f857 	bl	34018a2c <UART_WaitOnFlagUntilTimeout>
3401897e:	4603      	mov	r3, r0
34018980:	2b00      	cmp	r3, #0
34018982:	d03c      	beq.n	340189fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34018984:	687b      	ldr	r3, [r7, #4]
34018986:	681b      	ldr	r3, [r3, #0]
34018988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401898a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401898c:	e853 3f00 	ldrex	r3, [r3]
34018990:	623b      	str	r3, [r7, #32]
   return(result);
34018992:	6a3b      	ldr	r3, [r7, #32]
34018994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34018998:	64fb      	str	r3, [r7, #76]	@ 0x4c
3401899a:	687b      	ldr	r3, [r7, #4]
3401899c:	681b      	ldr	r3, [r3, #0]
3401899e:	461a      	mov	r2, r3
340189a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340189a2:	633b      	str	r3, [r7, #48]	@ 0x30
340189a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340189a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
340189a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340189aa:	e841 2300 	strex	r3, r2, [r1]
340189ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
340189b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340189b2:	2b00      	cmp	r3, #0
340189b4:	d1e6      	bne.n	34018984 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
340189b6:	687b      	ldr	r3, [r7, #4]
340189b8:	681b      	ldr	r3, [r3, #0]
340189ba:	3308      	adds	r3, #8
340189bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340189be:	693b      	ldr	r3, [r7, #16]
340189c0:	e853 3f00 	ldrex	r3, [r3]
340189c4:	60fb      	str	r3, [r7, #12]
   return(result);
340189c6:	68fb      	ldr	r3, [r7, #12]
340189c8:	f023 0301 	bic.w	r3, r3, #1
340189cc:	64bb      	str	r3, [r7, #72]	@ 0x48
340189ce:	687b      	ldr	r3, [r7, #4]
340189d0:	681b      	ldr	r3, [r3, #0]
340189d2:	3308      	adds	r3, #8
340189d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
340189d6:	61fa      	str	r2, [r7, #28]
340189d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340189da:	69b9      	ldr	r1, [r7, #24]
340189dc:	69fa      	ldr	r2, [r7, #28]
340189de:	e841 2300 	strex	r3, r2, [r1]
340189e2:	617b      	str	r3, [r7, #20]
   return(result);
340189e4:	697b      	ldr	r3, [r7, #20]
340189e6:	2b00      	cmp	r3, #0
340189e8:	d1e5      	bne.n	340189b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
340189ea:	687b      	ldr	r3, [r7, #4]
340189ec:	2220      	movs	r2, #32
340189ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
340189f2:	687b      	ldr	r3, [r7, #4]
340189f4:	2200      	movs	r2, #0
340189f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
340189fa:	2303      	movs	r3, #3
340189fc:	e012      	b.n	34018a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
340189fe:	687b      	ldr	r3, [r7, #4]
34018a00:	2220      	movs	r2, #32
34018a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
34018a06:	687b      	ldr	r3, [r7, #4]
34018a08:	2220      	movs	r2, #32
34018a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34018a0e:	687b      	ldr	r3, [r7, #4]
34018a10:	2200      	movs	r2, #0
34018a12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
34018a14:	687b      	ldr	r3, [r7, #4]
34018a16:	2200      	movs	r2, #0
34018a18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
34018a1a:	687b      	ldr	r3, [r7, #4]
34018a1c:	2200      	movs	r2, #0
34018a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34018a22:	2300      	movs	r3, #0
}
34018a24:	4618      	mov	r0, r3
34018a26:	3758      	adds	r7, #88	@ 0x58
34018a28:	46bd      	mov	sp, r7
34018a2a:	bd80      	pop	{r7, pc}

34018a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
34018a2c:	b580      	push	{r7, lr}
34018a2e:	b084      	sub	sp, #16
34018a30:	af00      	add	r7, sp, #0
34018a32:	60f8      	str	r0, [r7, #12]
34018a34:	60b9      	str	r1, [r7, #8]
34018a36:	603b      	str	r3, [r7, #0]
34018a38:	4613      	mov	r3, r2
34018a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
34018a3c:	e04f      	b.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34018a3e:	69bb      	ldr	r3, [r7, #24]
34018a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34018a44:	d04b      	beq.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34018a46:	f7ed faf1 	bl	3400602c <HAL_GetTick>
34018a4a:	4602      	mov	r2, r0
34018a4c:	683b      	ldr	r3, [r7, #0]
34018a4e:	1ad3      	subs	r3, r2, r3
34018a50:	69ba      	ldr	r2, [r7, #24]
34018a52:	429a      	cmp	r2, r3
34018a54:	d302      	bcc.n	34018a5c <UART_WaitOnFlagUntilTimeout+0x30>
34018a56:	69bb      	ldr	r3, [r7, #24]
34018a58:	2b00      	cmp	r3, #0
34018a5a:	d101      	bne.n	34018a60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
34018a5c:	2303      	movs	r3, #3
34018a5e:	e04e      	b.n	34018afe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
34018a60:	68fb      	ldr	r3, [r7, #12]
34018a62:	681b      	ldr	r3, [r3, #0]
34018a64:	681b      	ldr	r3, [r3, #0]
34018a66:	f003 0304 	and.w	r3, r3, #4
34018a6a:	2b00      	cmp	r3, #0
34018a6c:	d037      	beq.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
34018a6e:	68bb      	ldr	r3, [r7, #8]
34018a70:	2b80      	cmp	r3, #128	@ 0x80
34018a72:	d034      	beq.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
34018a74:	68bb      	ldr	r3, [r7, #8]
34018a76:	2b40      	cmp	r3, #64	@ 0x40
34018a78:	d031      	beq.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
34018a7a:	68fb      	ldr	r3, [r7, #12]
34018a7c:	681b      	ldr	r3, [r3, #0]
34018a7e:	69db      	ldr	r3, [r3, #28]
34018a80:	f003 0308 	and.w	r3, r3, #8
34018a84:	2b08      	cmp	r3, #8
34018a86:	d110      	bne.n	34018aaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
34018a88:	68fb      	ldr	r3, [r7, #12]
34018a8a:	681b      	ldr	r3, [r3, #0]
34018a8c:	2208      	movs	r2, #8
34018a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34018a90:	68f8      	ldr	r0, [r7, #12]
34018a92:	f000 f838 	bl	34018b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
34018a96:	68fb      	ldr	r3, [r7, #12]
34018a98:	2208      	movs	r2, #8
34018a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34018a9e:	68fb      	ldr	r3, [r7, #12]
34018aa0:	2200      	movs	r2, #0
34018aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
34018aa6:	2301      	movs	r3, #1
34018aa8:	e029      	b.n	34018afe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
34018aaa:	68fb      	ldr	r3, [r7, #12]
34018aac:	681b      	ldr	r3, [r3, #0]
34018aae:	69db      	ldr	r3, [r3, #28]
34018ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34018ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34018ab8:	d111      	bne.n	34018ade <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
34018aba:	68fb      	ldr	r3, [r7, #12]
34018abc:	681b      	ldr	r3, [r3, #0]
34018abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34018ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34018ac4:	68f8      	ldr	r0, [r7, #12]
34018ac6:	f000 f81e 	bl	34018b06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
34018aca:	68fb      	ldr	r3, [r7, #12]
34018acc:	2220      	movs	r2, #32
34018ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34018ad2:	68fb      	ldr	r3, [r7, #12]
34018ad4:	2200      	movs	r2, #0
34018ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
34018ada:	2303      	movs	r3, #3
34018adc:	e00f      	b.n	34018afe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
34018ade:	68fb      	ldr	r3, [r7, #12]
34018ae0:	681b      	ldr	r3, [r3, #0]
34018ae2:	69da      	ldr	r2, [r3, #28]
34018ae4:	68bb      	ldr	r3, [r7, #8]
34018ae6:	4013      	ands	r3, r2
34018ae8:	68ba      	ldr	r2, [r7, #8]
34018aea:	429a      	cmp	r2, r3
34018aec:	bf0c      	ite	eq
34018aee:	2301      	moveq	r3, #1
34018af0:	2300      	movne	r3, #0
34018af2:	b2db      	uxtb	r3, r3
34018af4:	461a      	mov	r2, r3
34018af6:	79fb      	ldrb	r3, [r7, #7]
34018af8:	429a      	cmp	r2, r3
34018afa:	d0a0      	beq.n	34018a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
34018afc:	2300      	movs	r3, #0
}
34018afe:	4618      	mov	r0, r3
34018b00:	3710      	adds	r7, #16
34018b02:	46bd      	mov	sp, r7
34018b04:	bd80      	pop	{r7, pc}

34018b06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
34018b06:	b480      	push	{r7}
34018b08:	b095      	sub	sp, #84	@ 0x54
34018b0a:	af00      	add	r7, sp, #0
34018b0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34018b0e:	687b      	ldr	r3, [r7, #4]
34018b10:	681b      	ldr	r3, [r3, #0]
34018b12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34018b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34018b16:	e853 3f00 	ldrex	r3, [r3]
34018b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
34018b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34018b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34018b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
34018b24:	687b      	ldr	r3, [r7, #4]
34018b26:	681b      	ldr	r3, [r3, #0]
34018b28:	461a      	mov	r2, r3
34018b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34018b2c:	643b      	str	r3, [r7, #64]	@ 0x40
34018b2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34018b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34018b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34018b34:	e841 2300 	strex	r3, r2, [r1]
34018b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
34018b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34018b3c:	2b00      	cmp	r3, #0
34018b3e:	d1e6      	bne.n	34018b0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
34018b40:	687b      	ldr	r3, [r7, #4]
34018b42:	681b      	ldr	r3, [r3, #0]
34018b44:	3308      	adds	r3, #8
34018b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34018b48:	6a3b      	ldr	r3, [r7, #32]
34018b4a:	e853 3f00 	ldrex	r3, [r3]
34018b4e:	61fb      	str	r3, [r7, #28]
   return(result);
34018b50:	69fb      	ldr	r3, [r7, #28]
34018b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34018b56:	f023 0301 	bic.w	r3, r3, #1
34018b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
34018b5c:	687b      	ldr	r3, [r7, #4]
34018b5e:	681b      	ldr	r3, [r3, #0]
34018b60:	3308      	adds	r3, #8
34018b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34018b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
34018b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34018b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
34018b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34018b6c:	e841 2300 	strex	r3, r2, [r1]
34018b70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
34018b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018b74:	2b00      	cmp	r3, #0
34018b76:	d1e3      	bne.n	34018b40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34018b78:	687b      	ldr	r3, [r7, #4]
34018b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34018b7c:	2b01      	cmp	r3, #1
34018b7e:	d118      	bne.n	34018bb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
34018b80:	687b      	ldr	r3, [r7, #4]
34018b82:	681b      	ldr	r3, [r3, #0]
34018b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34018b86:	68fb      	ldr	r3, [r7, #12]
34018b88:	e853 3f00 	ldrex	r3, [r3]
34018b8c:	60bb      	str	r3, [r7, #8]
   return(result);
34018b8e:	68bb      	ldr	r3, [r7, #8]
34018b90:	f023 0310 	bic.w	r3, r3, #16
34018b94:	647b      	str	r3, [r7, #68]	@ 0x44
34018b96:	687b      	ldr	r3, [r7, #4]
34018b98:	681b      	ldr	r3, [r3, #0]
34018b9a:	461a      	mov	r2, r3
34018b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018b9e:	61bb      	str	r3, [r7, #24]
34018ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34018ba2:	6979      	ldr	r1, [r7, #20]
34018ba4:	69ba      	ldr	r2, [r7, #24]
34018ba6:	e841 2300 	strex	r3, r2, [r1]
34018baa:	613b      	str	r3, [r7, #16]
   return(result);
34018bac:	693b      	ldr	r3, [r7, #16]
34018bae:	2b00      	cmp	r3, #0
34018bb0:	d1e6      	bne.n	34018b80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34018bb2:	687b      	ldr	r3, [r7, #4]
34018bb4:	2220      	movs	r2, #32
34018bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34018bba:	687b      	ldr	r3, [r7, #4]
34018bbc:	2200      	movs	r2, #0
34018bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34018bc0:	687b      	ldr	r3, [r7, #4]
34018bc2:	2200      	movs	r2, #0
34018bc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
34018bc6:	bf00      	nop
34018bc8:	3754      	adds	r7, #84	@ 0x54
34018bca:	46bd      	mov	sp, r7
34018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
34018bd0:	4770      	bx	lr
	...

34018bd4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34018bd4:	b580      	push	{r7, lr}
34018bd6:	b086      	sub	sp, #24
34018bd8:	af02      	add	r7, sp, #8
34018bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34018bdc:	2300      	movs	r3, #0
34018bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
34018be0:	f7ed fa24 	bl	3400602c <HAL_GetTick>
34018be4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
34018be6:	687b      	ldr	r3, [r7, #4]
34018be8:	2b00      	cmp	r3, #0
34018bea:	d102      	bne.n	34018bf2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
34018bec:	2301      	movs	r3, #1
34018bee:	73fb      	strb	r3, [r7, #15]
34018bf0:	e2c8      	b.n	34019184 <HAL_XSPI_Init+0x5b0>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
34018bf2:	687b      	ldr	r3, [r7, #4]
34018bf4:	689b      	ldr	r3, [r3, #8]
34018bf6:	2b00      	cmp	r3, #0
34018bf8:	d008      	beq.n	34018c0c <HAL_XSPI_Init+0x38>
34018bfa:	687b      	ldr	r3, [r7, #4]
34018bfc:	689b      	ldr	r3, [r3, #8]
34018bfe:	2b40      	cmp	r3, #64	@ 0x40
34018c00:	d004      	beq.n	34018c0c <HAL_XSPI_Init+0x38>
34018c02:	f240 1161 	movw	r1, #353	@ 0x161
34018c06:	488a      	ldr	r0, [pc, #552]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018c08:	f7e8 fce2 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
34018c0c:	687b      	ldr	r3, [r7, #4]
34018c0e:	68db      	ldr	r3, [r3, #12]
34018c10:	2b00      	cmp	r3, #0
34018c12:	d01d      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c14:	687b      	ldr	r3, [r7, #4]
34018c16:	68db      	ldr	r3, [r3, #12]
34018c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34018c1c:	d018      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c1e:	687b      	ldr	r3, [r7, #4]
34018c20:	68db      	ldr	r3, [r3, #12]
34018c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34018c26:	d013      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c28:	687b      	ldr	r3, [r7, #4]
34018c2a:	68db      	ldr	r3, [r3, #12]
34018c2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34018c30:	d00e      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c32:	687b      	ldr	r3, [r7, #4]
34018c34:	68db      	ldr	r3, [r3, #12]
34018c36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34018c3a:	d009      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c3c:	687b      	ldr	r3, [r7, #4]
34018c3e:	68db      	ldr	r3, [r3, #12]
34018c40:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
34018c44:	d004      	beq.n	34018c50 <HAL_XSPI_Init+0x7c>
34018c46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
34018c4a:	4879      	ldr	r0, [pc, #484]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018c4c:	f7e8 fcc0 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
34018c50:	687b      	ldr	r3, [r7, #4]
34018c52:	691b      	ldr	r3, [r3, #16]
34018c54:	2b00      	cmp	r3, #0
34018c56:	f000 8081 	beq.w	34018d5c <HAL_XSPI_Init+0x188>
34018c5a:	687b      	ldr	r3, [r7, #4]
34018c5c:	691b      	ldr	r3, [r3, #16]
34018c5e:	2b01      	cmp	r3, #1
34018c60:	d07c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c62:	687b      	ldr	r3, [r7, #4]
34018c64:	691b      	ldr	r3, [r3, #16]
34018c66:	2b02      	cmp	r3, #2
34018c68:	d078      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c6a:	687b      	ldr	r3, [r7, #4]
34018c6c:	691b      	ldr	r3, [r3, #16]
34018c6e:	2b03      	cmp	r3, #3
34018c70:	d074      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c72:	687b      	ldr	r3, [r7, #4]
34018c74:	691b      	ldr	r3, [r3, #16]
34018c76:	2b04      	cmp	r3, #4
34018c78:	d070      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c7a:	687b      	ldr	r3, [r7, #4]
34018c7c:	691b      	ldr	r3, [r3, #16]
34018c7e:	2b05      	cmp	r3, #5
34018c80:	d06c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c82:	687b      	ldr	r3, [r7, #4]
34018c84:	691b      	ldr	r3, [r3, #16]
34018c86:	2b06      	cmp	r3, #6
34018c88:	d068      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c8a:	687b      	ldr	r3, [r7, #4]
34018c8c:	691b      	ldr	r3, [r3, #16]
34018c8e:	2b07      	cmp	r3, #7
34018c90:	d064      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c92:	687b      	ldr	r3, [r7, #4]
34018c94:	691b      	ldr	r3, [r3, #16]
34018c96:	2b08      	cmp	r3, #8
34018c98:	d060      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018c9a:	687b      	ldr	r3, [r7, #4]
34018c9c:	691b      	ldr	r3, [r3, #16]
34018c9e:	2b09      	cmp	r3, #9
34018ca0:	d05c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018ca2:	687b      	ldr	r3, [r7, #4]
34018ca4:	691b      	ldr	r3, [r3, #16]
34018ca6:	2b0a      	cmp	r3, #10
34018ca8:	d058      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018caa:	687b      	ldr	r3, [r7, #4]
34018cac:	691b      	ldr	r3, [r3, #16]
34018cae:	2b0b      	cmp	r3, #11
34018cb0:	d054      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cb2:	687b      	ldr	r3, [r7, #4]
34018cb4:	691b      	ldr	r3, [r3, #16]
34018cb6:	2b0c      	cmp	r3, #12
34018cb8:	d050      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cba:	687b      	ldr	r3, [r7, #4]
34018cbc:	691b      	ldr	r3, [r3, #16]
34018cbe:	2b0d      	cmp	r3, #13
34018cc0:	d04c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cc2:	687b      	ldr	r3, [r7, #4]
34018cc4:	691b      	ldr	r3, [r3, #16]
34018cc6:	2b0e      	cmp	r3, #14
34018cc8:	d048      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cca:	687b      	ldr	r3, [r7, #4]
34018ccc:	691b      	ldr	r3, [r3, #16]
34018cce:	2b0f      	cmp	r3, #15
34018cd0:	d044      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cd2:	687b      	ldr	r3, [r7, #4]
34018cd4:	691b      	ldr	r3, [r3, #16]
34018cd6:	2b10      	cmp	r3, #16
34018cd8:	d040      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cda:	687b      	ldr	r3, [r7, #4]
34018cdc:	691b      	ldr	r3, [r3, #16]
34018cde:	2b11      	cmp	r3, #17
34018ce0:	d03c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018ce2:	687b      	ldr	r3, [r7, #4]
34018ce4:	691b      	ldr	r3, [r3, #16]
34018ce6:	2b12      	cmp	r3, #18
34018ce8:	d038      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cea:	687b      	ldr	r3, [r7, #4]
34018cec:	691b      	ldr	r3, [r3, #16]
34018cee:	2b13      	cmp	r3, #19
34018cf0:	d034      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cf2:	687b      	ldr	r3, [r7, #4]
34018cf4:	691b      	ldr	r3, [r3, #16]
34018cf6:	2b14      	cmp	r3, #20
34018cf8:	d030      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018cfa:	687b      	ldr	r3, [r7, #4]
34018cfc:	691b      	ldr	r3, [r3, #16]
34018cfe:	2b15      	cmp	r3, #21
34018d00:	d02c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d02:	687b      	ldr	r3, [r7, #4]
34018d04:	691b      	ldr	r3, [r3, #16]
34018d06:	2b16      	cmp	r3, #22
34018d08:	d028      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d0a:	687b      	ldr	r3, [r7, #4]
34018d0c:	691b      	ldr	r3, [r3, #16]
34018d0e:	2b17      	cmp	r3, #23
34018d10:	d024      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d12:	687b      	ldr	r3, [r7, #4]
34018d14:	691b      	ldr	r3, [r3, #16]
34018d16:	2b18      	cmp	r3, #24
34018d18:	d020      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d1a:	687b      	ldr	r3, [r7, #4]
34018d1c:	691b      	ldr	r3, [r3, #16]
34018d1e:	2b19      	cmp	r3, #25
34018d20:	d01c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d22:	687b      	ldr	r3, [r7, #4]
34018d24:	691b      	ldr	r3, [r3, #16]
34018d26:	2b1a      	cmp	r3, #26
34018d28:	d018      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d2a:	687b      	ldr	r3, [r7, #4]
34018d2c:	691b      	ldr	r3, [r3, #16]
34018d2e:	2b1b      	cmp	r3, #27
34018d30:	d014      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d32:	687b      	ldr	r3, [r7, #4]
34018d34:	691b      	ldr	r3, [r3, #16]
34018d36:	2b1c      	cmp	r3, #28
34018d38:	d010      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d3a:	687b      	ldr	r3, [r7, #4]
34018d3c:	691b      	ldr	r3, [r3, #16]
34018d3e:	2b1d      	cmp	r3, #29
34018d40:	d00c      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d42:	687b      	ldr	r3, [r7, #4]
34018d44:	691b      	ldr	r3, [r3, #16]
34018d46:	2b1e      	cmp	r3, #30
34018d48:	d008      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d4a:	687b      	ldr	r3, [r7, #4]
34018d4c:	691b      	ldr	r3, [r3, #16]
34018d4e:	2b1f      	cmp	r3, #31
34018d50:	d004      	beq.n	34018d5c <HAL_XSPI_Init+0x188>
34018d52:	f240 1163 	movw	r1, #355	@ 0x163
34018d56:	4836      	ldr	r0, [pc, #216]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018d58:	f7e8 fc3a 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
34018d5c:	687b      	ldr	r3, [r7, #4]
34018d5e:	695b      	ldr	r3, [r3, #20]
34018d60:	2b00      	cmp	r3, #0
34018d62:	d003      	beq.n	34018d6c <HAL_XSPI_Init+0x198>
34018d64:	687b      	ldr	r3, [r7, #4]
34018d66:	695b      	ldr	r3, [r3, #20]
34018d68:	2b40      	cmp	r3, #64	@ 0x40
34018d6a:	d904      	bls.n	34018d76 <HAL_XSPI_Init+0x1a2>
34018d6c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34018d70:	482f      	ldr	r0, [pc, #188]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018d72:	f7e8 fc2d 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34018d76:	687b      	ldr	r3, [r7, #4]
34018d78:	699b      	ldr	r3, [r3, #24]
34018d7a:	2b00      	cmp	r3, #0
34018d7c:	d008      	beq.n	34018d90 <HAL_XSPI_Init+0x1bc>
34018d7e:	687b      	ldr	r3, [r7, #4]
34018d80:	699b      	ldr	r3, [r3, #24]
34018d82:	2b02      	cmp	r3, #2
34018d84:	d004      	beq.n	34018d90 <HAL_XSPI_Init+0x1bc>
34018d86:	f240 1165 	movw	r1, #357	@ 0x165
34018d8a:	4829      	ldr	r0, [pc, #164]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018d8c:	f7e8 fc20 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
34018d90:	687b      	ldr	r3, [r7, #4]
34018d92:	69db      	ldr	r3, [r3, #28]
34018d94:	2b00      	cmp	r3, #0
34018d96:	d008      	beq.n	34018daa <HAL_XSPI_Init+0x1d6>
34018d98:	687b      	ldr	r3, [r7, #4]
34018d9a:	69db      	ldr	r3, [r3, #28]
34018d9c:	2b01      	cmp	r3, #1
34018d9e:	d004      	beq.n	34018daa <HAL_XSPI_Init+0x1d6>
34018da0:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34018da4:	4822      	ldr	r0, [pc, #136]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018da6:	f7e8 fc13 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
34018daa:	687b      	ldr	r3, [r7, #4]
34018dac:	6a1b      	ldr	r3, [r3, #32]
34018dae:	2b00      	cmp	r3, #0
34018db0:	d018      	beq.n	34018de4 <HAL_XSPI_Init+0x210>
34018db2:	687b      	ldr	r3, [r7, #4]
34018db4:	6a1b      	ldr	r3, [r3, #32]
34018db6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34018dba:	d013      	beq.n	34018de4 <HAL_XSPI_Init+0x210>
34018dbc:	687b      	ldr	r3, [r7, #4]
34018dbe:	6a1b      	ldr	r3, [r3, #32]
34018dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34018dc4:	d00e      	beq.n	34018de4 <HAL_XSPI_Init+0x210>
34018dc6:	687b      	ldr	r3, [r7, #4]
34018dc8:	6a1b      	ldr	r3, [r3, #32]
34018dca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34018dce:	d009      	beq.n	34018de4 <HAL_XSPI_Init+0x210>
34018dd0:	687b      	ldr	r3, [r7, #4]
34018dd2:	6a1b      	ldr	r3, [r3, #32]
34018dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34018dd8:	d004      	beq.n	34018de4 <HAL_XSPI_Init+0x210>
34018dda:	f240 1167 	movw	r1, #359	@ 0x167
34018dde:	4814      	ldr	r0, [pc, #80]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018de0:	f7e8 fbf6 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
34018de4:	687b      	ldr	r3, [r7, #4]
34018de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018de8:	2bff      	cmp	r3, #255	@ 0xff
34018dea:	d904      	bls.n	34018df6 <HAL_XSPI_Init+0x222>
34018dec:	f44f 71b4 	mov.w	r1, #360	@ 0x168
34018df0:	480f      	ldr	r0, [pc, #60]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018df2:	f7e8 fbed 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
34018df6:	687b      	ldr	r3, [r7, #4]
34018df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018dfa:	2b00      	cmp	r3, #0
34018dfc:	d009      	beq.n	34018e12 <HAL_XSPI_Init+0x23e>
34018dfe:	687b      	ldr	r3, [r7, #4]
34018e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34018e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34018e06:	d004      	beq.n	34018e12 <HAL_XSPI_Init+0x23e>
34018e08:	f240 1169 	movw	r1, #361	@ 0x169
34018e0c:	4808      	ldr	r0, [pc, #32]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018e0e:	f7e8 fbdf 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
34018e12:	687b      	ldr	r3, [r7, #4]
34018e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018e16:	2b00      	cmp	r3, #0
34018e18:	d00c      	beq.n	34018e34 <HAL_XSPI_Init+0x260>
34018e1a:	687b      	ldr	r3, [r7, #4]
34018e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34018e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34018e22:	d007      	beq.n	34018e34 <HAL_XSPI_Init+0x260>
34018e24:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34018e28:	4801      	ldr	r0, [pc, #4]	@ (34018e30 <HAL_XSPI_Init+0x25c>)
34018e2a:	f7e8 fbd1 	bl	340015d0 <assert_failed>
34018e2e:	e001      	b.n	34018e34 <HAL_XSPI_Init+0x260>
34018e30:	3401d92c 	.word	0x3401d92c
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
34018e34:	687b      	ldr	r3, [r7, #4]
34018e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e38:	2b00      	cmp	r3, #0
34018e3a:	f000 8081 	beq.w	34018f40 <HAL_XSPI_Init+0x36c>
34018e3e:	687b      	ldr	r3, [r7, #4]
34018e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e42:	2b01      	cmp	r3, #1
34018e44:	d07c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e46:	687b      	ldr	r3, [r7, #4]
34018e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e4a:	2b02      	cmp	r3, #2
34018e4c:	d078      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e4e:	687b      	ldr	r3, [r7, #4]
34018e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e52:	2b03      	cmp	r3, #3
34018e54:	d074      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e56:	687b      	ldr	r3, [r7, #4]
34018e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e5a:	2b04      	cmp	r3, #4
34018e5c:	d070      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e5e:	687b      	ldr	r3, [r7, #4]
34018e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e62:	2b05      	cmp	r3, #5
34018e64:	d06c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e66:	687b      	ldr	r3, [r7, #4]
34018e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e6a:	2b06      	cmp	r3, #6
34018e6c:	d068      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e6e:	687b      	ldr	r3, [r7, #4]
34018e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e72:	2b07      	cmp	r3, #7
34018e74:	d064      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e76:	687b      	ldr	r3, [r7, #4]
34018e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e7a:	2b08      	cmp	r3, #8
34018e7c:	d060      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e7e:	687b      	ldr	r3, [r7, #4]
34018e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e82:	2b09      	cmp	r3, #9
34018e84:	d05c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e86:	687b      	ldr	r3, [r7, #4]
34018e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e8a:	2b0a      	cmp	r3, #10
34018e8c:	d058      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e8e:	687b      	ldr	r3, [r7, #4]
34018e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e92:	2b0b      	cmp	r3, #11
34018e94:	d054      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e96:	687b      	ldr	r3, [r7, #4]
34018e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018e9a:	2b0c      	cmp	r3, #12
34018e9c:	d050      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018e9e:	687b      	ldr	r3, [r7, #4]
34018ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018ea2:	2b0d      	cmp	r3, #13
34018ea4:	d04c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ea6:	687b      	ldr	r3, [r7, #4]
34018ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eaa:	2b0e      	cmp	r3, #14
34018eac:	d048      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018eae:	687b      	ldr	r3, [r7, #4]
34018eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eb2:	2b0f      	cmp	r3, #15
34018eb4:	d044      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018eb6:	687b      	ldr	r3, [r7, #4]
34018eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eba:	2b10      	cmp	r3, #16
34018ebc:	d040      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ebe:	687b      	ldr	r3, [r7, #4]
34018ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018ec2:	2b11      	cmp	r3, #17
34018ec4:	d03c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ec6:	687b      	ldr	r3, [r7, #4]
34018ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eca:	2b12      	cmp	r3, #18
34018ecc:	d038      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ece:	687b      	ldr	r3, [r7, #4]
34018ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018ed2:	2b13      	cmp	r3, #19
34018ed4:	d034      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ed6:	687b      	ldr	r3, [r7, #4]
34018ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eda:	2b14      	cmp	r3, #20
34018edc:	d030      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ede:	687b      	ldr	r3, [r7, #4]
34018ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018ee2:	2b15      	cmp	r3, #21
34018ee4:	d02c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ee6:	687b      	ldr	r3, [r7, #4]
34018ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018eea:	2b16      	cmp	r3, #22
34018eec:	d028      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018eee:	687b      	ldr	r3, [r7, #4]
34018ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018ef2:	2b17      	cmp	r3, #23
34018ef4:	d024      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018ef6:	687b      	ldr	r3, [r7, #4]
34018ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018efa:	2b18      	cmp	r3, #24
34018efc:	d020      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018efe:	687b      	ldr	r3, [r7, #4]
34018f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f02:	2b19      	cmp	r3, #25
34018f04:	d01c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f06:	687b      	ldr	r3, [r7, #4]
34018f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f0a:	2b1a      	cmp	r3, #26
34018f0c:	d018      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f0e:	687b      	ldr	r3, [r7, #4]
34018f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f12:	2b1b      	cmp	r3, #27
34018f14:	d014      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f16:	687b      	ldr	r3, [r7, #4]
34018f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f1a:	2b1c      	cmp	r3, #28
34018f1c:	d010      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f1e:	687b      	ldr	r3, [r7, #4]
34018f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f22:	2b1d      	cmp	r3, #29
34018f24:	d00c      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f26:	687b      	ldr	r3, [r7, #4]
34018f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f2a:	2b1e      	cmp	r3, #30
34018f2c:	d008      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f2e:	687b      	ldr	r3, [r7, #4]
34018f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34018f32:	2b1f      	cmp	r3, #31
34018f34:	d004      	beq.n	34018f40 <HAL_XSPI_Init+0x36c>
34018f36:	f240 116b 	movw	r1, #363	@ 0x16b
34018f3a:	4895      	ldr	r0, [pc, #596]	@ (34019190 <HAL_XSPI_Init+0x5bc>)
34018f3c:	f7e8 fb48 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
34018f40:	687b      	ldr	r3, [r7, #4]
34018f42:	685b      	ldr	r3, [r3, #4]
34018f44:	2b00      	cmp	r3, #0
34018f46:	d003      	beq.n	34018f50 <HAL_XSPI_Init+0x37c>
34018f48:	687b      	ldr	r3, [r7, #4]
34018f4a:	685b      	ldr	r3, [r3, #4]
34018f4c:	2b40      	cmp	r3, #64	@ 0x40
34018f4e:	d904      	bls.n	34018f5a <HAL_XSPI_Init+0x386>
34018f50:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
34018f54:	488e      	ldr	r0, [pc, #568]	@ (34019190 <HAL_XSPI_Init+0x5bc>)
34018f56:	f7e8 fb3b 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
34018f5a:	687b      	ldr	r3, [r7, #4]
34018f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34018f5e:	2bff      	cmp	r3, #255	@ 0xff
34018f60:	d904      	bls.n	34018f6c <HAL_XSPI_Init+0x398>
34018f62:	f240 116d 	movw	r1, #365	@ 0x16d
34018f66:	488a      	ldr	r0, [pc, #552]	@ (34019190 <HAL_XSPI_Init+0x5bc>)
34018f68:	f7e8 fb32 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
34018f6c:	687b      	ldr	r3, [r7, #4]
34018f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34018f70:	2b00      	cmp	r3, #0
34018f72:	d009      	beq.n	34018f88 <HAL_XSPI_Init+0x3b4>
34018f74:	687b      	ldr	r3, [r7, #4]
34018f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34018f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34018f7c:	d004      	beq.n	34018f88 <HAL_XSPI_Init+0x3b4>
34018f7e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34018f82:	4883      	ldr	r0, [pc, #524]	@ (34019190 <HAL_XSPI_Init+0x5bc>)
34018f84:	f7e8 fb24 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34018f88:	687b      	ldr	r3, [r7, #4]
34018f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34018f8c:	2b00      	cmp	r3, #0
34018f8e:	d009      	beq.n	34018fa4 <HAL_XSPI_Init+0x3d0>
34018f90:	687b      	ldr	r3, [r7, #4]
34018f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34018f94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34018f98:	d004      	beq.n	34018fa4 <HAL_XSPI_Init+0x3d0>
34018f9a:	f240 116f 	movw	r1, #367	@ 0x16f
34018f9e:	487c      	ldr	r0, [pc, #496]	@ (34019190 <HAL_XSPI_Init+0x5bc>)
34018fa0:	f7e8 fb16 	bl	340015d0 <assert_failed>
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34018fa4:	687b      	ldr	r3, [r7, #4]
34018fa6:	2200      	movs	r2, #0
34018fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
34018faa:	687b      	ldr	r3, [r7, #4]
34018fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34018fae:	2b00      	cmp	r3, #0
34018fb0:	f040 80e8 	bne.w	34019184 <HAL_XSPI_Init+0x5b0>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34018fb4:	6878      	ldr	r0, [r7, #4]
34018fb6:	f000 f8fb 	bl	340191b0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34018fba:	f241 3188 	movw	r1, #5000	@ 0x1388
34018fbe:	6878      	ldr	r0, [r7, #4]
34018fc0:	f000 fdc4 	bl	34019b4c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34018fc4:	687b      	ldr	r3, [r7, #4]
34018fc6:	681b      	ldr	r3, [r3, #0]
34018fc8:	689a      	ldr	r2, [r3, #8]
34018fca:	4b72      	ldr	r3, [pc, #456]	@ (34019194 <HAL_XSPI_Init+0x5c0>)
34018fcc:	4013      	ands	r3, r2
34018fce:	687a      	ldr	r2, [r7, #4]
34018fd0:	68d1      	ldr	r1, [r2, #12]
34018fd2:	687a      	ldr	r2, [r7, #4]
34018fd4:	6912      	ldr	r2, [r2, #16]
34018fd6:	0412      	lsls	r2, r2, #16
34018fd8:	4311      	orrs	r1, r2
34018fda:	687a      	ldr	r2, [r7, #4]
34018fdc:	6952      	ldr	r2, [r2, #20]
34018fde:	3a01      	subs	r2, #1
34018fe0:	0212      	lsls	r2, r2, #8
34018fe2:	4311      	orrs	r1, r2
34018fe4:	687a      	ldr	r2, [r7, #4]
34018fe6:	69d2      	ldr	r2, [r2, #28]
34018fe8:	4311      	orrs	r1, r2
34018fea:	687a      	ldr	r2, [r7, #4]
34018fec:	6812      	ldr	r2, [r2, #0]
34018fee:	430b      	orrs	r3, r1
34018ff0:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34018ff2:	687b      	ldr	r3, [r7, #4]
34018ff4:	681b      	ldr	r3, [r3, #0]
34018ff6:	68db      	ldr	r3, [r3, #12]
34018ff8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
34018ffc:	687b      	ldr	r3, [r7, #4]
34018ffe:	6a1a      	ldr	r2, [r3, #32]
34019000:	687b      	ldr	r3, [r7, #4]
34019002:	681b      	ldr	r3, [r3, #0]
34019004:	430a      	orrs	r2, r1
34019006:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
34019008:	687b      	ldr	r3, [r7, #4]
3401900a:	681b      	ldr	r3, [r3, #0]
3401900c:	691b      	ldr	r3, [r3, #16]
3401900e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
34019012:	687b      	ldr	r3, [r7, #4]
34019014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34019016:	041a      	lsls	r2, r3, #16
34019018:	687b      	ldr	r3, [r7, #4]
3401901a:	681b      	ldr	r3, [r3, #0]
3401901c:	430a      	orrs	r2, r1
3401901e:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34019020:	687b      	ldr	r3, [r7, #4]
34019022:	681b      	ldr	r3, [r3, #0]
34019024:	691b      	ldr	r3, [r3, #16]
34019026:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3401902a:	687b      	ldr	r3, [r7, #4]
3401902c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3401902e:	687b      	ldr	r3, [r7, #4]
34019030:	681b      	ldr	r3, [r3, #0]
34019032:	430a      	orrs	r2, r1
34019034:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
34019036:	687b      	ldr	r3, [r7, #4]
34019038:	681b      	ldr	r3, [r3, #0]
3401903a:	687a      	ldr	r2, [r7, #4]
3401903c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3401903e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34019040:	687b      	ldr	r3, [r7, #4]
34019042:	681b      	ldr	r3, [r3, #0]
34019044:	681b      	ldr	r3, [r3, #0]
34019046:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3401904a:	687b      	ldr	r3, [r7, #4]
3401904c:	685b      	ldr	r3, [r3, #4]
3401904e:	3b01      	subs	r3, #1
34019050:	021a      	lsls	r2, r3, #8
34019052:	687b      	ldr	r3, [r7, #4]
34019054:	681b      	ldr	r3, [r3, #0]
34019056:	430a      	orrs	r2, r1
34019058:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401905a:	687b      	ldr	r3, [r7, #4]
3401905c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3401905e:	9300      	str	r3, [sp, #0]
34019060:	68bb      	ldr	r3, [r7, #8]
34019062:	2200      	movs	r2, #0
34019064:	2120      	movs	r1, #32
34019066:	6878      	ldr	r0, [r7, #4]
34019068:	f000 fd7f 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
3401906c:	4603      	mov	r3, r0
3401906e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34019070:	7bfb      	ldrb	r3, [r7, #15]
34019072:	2b00      	cmp	r3, #0
34019074:	f040 8086 	bne.w	34019184 <HAL_XSPI_Init+0x5b0>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34019078:	687b      	ldr	r3, [r7, #4]
3401907a:	681b      	ldr	r3, [r3, #0]
3401907c:	68db      	ldr	r3, [r3, #12]
3401907e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34019082:	687b      	ldr	r3, [r7, #4]
34019084:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34019086:	687b      	ldr	r3, [r7, #4]
34019088:	681b      	ldr	r3, [r3, #0]
3401908a:	430a      	orrs	r2, r1
3401908c:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3401908e:	687b      	ldr	r3, [r7, #4]
34019090:	681b      	ldr	r3, [r3, #0]
34019092:	4a41      	ldr	r2, [pc, #260]	@ (34019198 <HAL_XSPI_Init+0x5c4>)
34019094:	4293      	cmp	r3, r2
34019096:	d018      	beq.n	340190ca <HAL_XSPI_Init+0x4f6>
34019098:	687b      	ldr	r3, [r7, #4]
3401909a:	681b      	ldr	r3, [r3, #0]
3401909c:	4a3f      	ldr	r2, [pc, #252]	@ (3401919c <HAL_XSPI_Init+0x5c8>)
3401909e:	4293      	cmp	r3, r2
340190a0:	d013      	beq.n	340190ca <HAL_XSPI_Init+0x4f6>
340190a2:	687b      	ldr	r3, [r7, #4]
340190a4:	681b      	ldr	r3, [r3, #0]
340190a6:	4a3e      	ldr	r2, [pc, #248]	@ (340191a0 <HAL_XSPI_Init+0x5cc>)
340190a8:	4293      	cmp	r3, r2
340190aa:	d00e      	beq.n	340190ca <HAL_XSPI_Init+0x4f6>
340190ac:	687b      	ldr	r3, [r7, #4]
340190ae:	681b      	ldr	r3, [r3, #0]
340190b0:	4a3c      	ldr	r2, [pc, #240]	@ (340191a4 <HAL_XSPI_Init+0x5d0>)
340190b2:	4293      	cmp	r3, r2
340190b4:	d009      	beq.n	340190ca <HAL_XSPI_Init+0x4f6>
340190b6:	687b      	ldr	r3, [r7, #4]
340190b8:	681b      	ldr	r3, [r3, #0]
340190ba:	4a3b      	ldr	r2, [pc, #236]	@ (340191a8 <HAL_XSPI_Init+0x5d4>)
340190bc:	4293      	cmp	r3, r2
340190be:	d004      	beq.n	340190ca <HAL_XSPI_Init+0x4f6>
340190c0:	687b      	ldr	r3, [r7, #4]
340190c2:	681b      	ldr	r3, [r3, #0]
340190c4:	4a39      	ldr	r2, [pc, #228]	@ (340191ac <HAL_XSPI_Init+0x5d8>)
340190c6:	4293      	cmp	r3, r2
340190c8:	d10f      	bne.n	340190ea <HAL_XSPI_Init+0x516>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
340190ca:	687b      	ldr	r3, [r7, #4]
340190cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340190ce:	9300      	str	r3, [sp, #0]
340190d0:	68bb      	ldr	r3, [r7, #8]
340190d2:	2200      	movs	r2, #0
340190d4:	2120      	movs	r1, #32
340190d6:	6878      	ldr	r0, [r7, #4]
340190d8:	f000 fd47 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
340190dc:	4603      	mov	r3, r0
340190de:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
340190e0:	7bfb      	ldrb	r3, [r7, #15]
340190e2:	2b00      	cmp	r3, #0
340190e4:	d001      	beq.n	340190ea <HAL_XSPI_Init+0x516>
          {
            return status;
340190e6:	7bfb      	ldrb	r3, [r7, #15]
340190e8:	e04d      	b.n	34019186 <HAL_XSPI_Init+0x5b2>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
340190ea:	687b      	ldr	r3, [r7, #4]
340190ec:	681b      	ldr	r3, [r3, #0]
340190ee:	681b      	ldr	r3, [r3, #0]
340190f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340190f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
340190f8:	687a      	ldr	r2, [r7, #4]
340190fa:	6891      	ldr	r1, [r2, #8]
340190fc:	687a      	ldr	r2, [r7, #4]
340190fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
34019100:	4311      	orrs	r1, r2
34019102:	687a      	ldr	r2, [r7, #4]
34019104:	6812      	ldr	r2, [r2, #0]
34019106:	430b      	orrs	r3, r1
34019108:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3401910a:	687b      	ldr	r3, [r7, #4]
3401910c:	681b      	ldr	r3, [r3, #0]
3401910e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34019112:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
34019116:	687b      	ldr	r3, [r7, #4]
34019118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3401911a:	687b      	ldr	r3, [r7, #4]
3401911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401911e:	431a      	orrs	r2, r3
34019120:	687b      	ldr	r3, [r7, #4]
34019122:	681b      	ldr	r3, [r3, #0]
34019124:	430a      	orrs	r2, r1
34019126:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3401912a:	687b      	ldr	r3, [r7, #4]
3401912c:	681b      	ldr	r3, [r3, #0]
3401912e:	681a      	ldr	r2, [r3, #0]
34019130:	687b      	ldr	r3, [r7, #4]
34019132:	681b      	ldr	r3, [r3, #0]
34019134:	f042 0201 	orr.w	r2, r2, #1
34019138:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3401913a:	687b      	ldr	r3, [r7, #4]
3401913c:	699b      	ldr	r3, [r3, #24]
3401913e:	2b02      	cmp	r3, #2
34019140:	d107      	bne.n	34019152 <HAL_XSPI_Init+0x57e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34019142:	687b      	ldr	r3, [r7, #4]
34019144:	681b      	ldr	r3, [r3, #0]
34019146:	689a      	ldr	r2, [r3, #8]
34019148:	687b      	ldr	r3, [r7, #4]
3401914a:	681b      	ldr	r3, [r3, #0]
3401914c:	f042 0202 	orr.w	r2, r2, #2
34019150:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34019152:	687b      	ldr	r3, [r7, #4]
34019154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34019156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401915a:	d107      	bne.n	3401916c <HAL_XSPI_Init+0x598>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3401915c:	687b      	ldr	r3, [r7, #4]
3401915e:	681b      	ldr	r3, [r3, #0]
34019160:	689a      	ldr	r2, [r3, #8]
34019162:	687b      	ldr	r3, [r7, #4]
34019164:	681b      	ldr	r3, [r3, #0]
34019166:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3401916a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401916c:	687b      	ldr	r3, [r7, #4]
3401916e:	68db      	ldr	r3, [r3, #12]
34019170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34019174:	d103      	bne.n	3401917e <HAL_XSPI_Init+0x5aa>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34019176:	687b      	ldr	r3, [r7, #4]
34019178:	2201      	movs	r2, #1
3401917a:	659a      	str	r2, [r3, #88]	@ 0x58
3401917c:	e002      	b.n	34019184 <HAL_XSPI_Init+0x5b0>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3401917e:	687b      	ldr	r3, [r7, #4]
34019180:	2202      	movs	r2, #2
34019182:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34019184:	7bfb      	ldrb	r3, [r7, #15]
}
34019186:	4618      	mov	r0, r3
34019188:	3710      	adds	r7, #16
3401918a:	46bd      	mov	sp, r7
3401918c:	bd80      	pop	{r7, pc}
3401918e:	bf00      	nop
34019190:	3401d92c 	.word	0x3401d92c
34019194:	f8e0c0fc 	.word	0xf8e0c0fc
34019198:	58025000 	.word	0x58025000
3401919c:	48025000 	.word	0x48025000
340191a0:	5802a000 	.word	0x5802a000
340191a4:	4802a000 	.word	0x4802a000
340191a8:	5802d000 	.word	0x5802d000
340191ac:	4802d000 	.word	0x4802d000

340191b0 <HAL_XSPI_MspInit>:
  * @brief  Initialize the XSPI MSP.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_MspInit(XSPI_HandleTypeDef *hxspi)
{
340191b0:	b480      	push	{r7}
340191b2:	b083      	sub	sp, #12
340191b4:	af00      	add	r7, sp, #0
340191b6:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_MspInit can be implemented in the user file
   */
}
340191b8:	bf00      	nop
340191ba:	370c      	adds	r7, #12
340191bc:	46bd      	mov	sp, r7
340191be:	f85d 7b04 	ldr.w	r7, [sp], #4
340191c2:	4770      	bx	lr

340191c4 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
340191c4:	b580      	push	{r7, lr}
340191c6:	b08a      	sub	sp, #40	@ 0x28
340191c8:	af02      	add	r7, sp, #8
340191ca:	60f8      	str	r0, [r7, #12]
340191cc:	60b9      	str	r1, [r7, #8]
340191ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
340191d0:	f7ec ff2c 	bl	3400602c <HAL_GetTick>
340191d4:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
340191d6:	68bb      	ldr	r3, [r7, #8]
340191d8:	681b      	ldr	r3, [r3, #0]
340191da:	2b00      	cmp	r3, #0
340191dc:	d010      	beq.n	34019200 <HAL_XSPI_Command+0x3c>
340191de:	68bb      	ldr	r3, [r7, #8]
340191e0:	681b      	ldr	r3, [r3, #0]
340191e2:	2b01      	cmp	r3, #1
340191e4:	d00c      	beq.n	34019200 <HAL_XSPI_Command+0x3c>
340191e6:	68bb      	ldr	r3, [r7, #8]
340191e8:	681b      	ldr	r3, [r3, #0]
340191ea:	2b02      	cmp	r3, #2
340191ec:	d008      	beq.n	34019200 <HAL_XSPI_Command+0x3c>
340191ee:	68bb      	ldr	r3, [r7, #8]
340191f0:	681b      	ldr	r3, [r3, #0]
340191f2:	2b03      	cmp	r3, #3
340191f4:	d004      	beq.n	34019200 <HAL_XSPI_Command+0x3c>
340191f6:	f240 313e 	movw	r1, #830	@ 0x33e
340191fa:	4887      	ldr	r0, [pc, #540]	@ (34019418 <HAL_XSPI_Command+0x254>)
340191fc:	f7e8 f9e8 	bl	340015d0 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34019200:	68fb      	ldr	r3, [r7, #12]
34019202:	689b      	ldr	r3, [r3, #8]
34019204:	2b00      	cmp	r3, #0
34019206:	d120      	bne.n	3401924a <HAL_XSPI_Command+0x86>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34019208:	68bb      	ldr	r3, [r7, #8]
3401920a:	685b      	ldr	r3, [r3, #4]
3401920c:	2b00      	cmp	r3, #0
3401920e:	d01c      	beq.n	3401924a <HAL_XSPI_Command+0x86>
34019210:	68bb      	ldr	r3, [r7, #8]
34019212:	685b      	ldr	r3, [r3, #4]
34019214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34019218:	d017      	beq.n	3401924a <HAL_XSPI_Command+0x86>
3401921a:	68bb      	ldr	r3, [r7, #8]
3401921c:	685b      	ldr	r3, [r3, #4]
3401921e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34019222:	d012      	beq.n	3401924a <HAL_XSPI_Command+0x86>
34019224:	68bb      	ldr	r3, [r7, #8]
34019226:	685b      	ldr	r3, [r3, #4]
34019228:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
3401922c:	d00d      	beq.n	3401924a <HAL_XSPI_Command+0x86>
3401922e:	68bb      	ldr	r3, [r7, #8]
34019230:	685b      	ldr	r3, [r3, #4]
34019232:	2b00      	cmp	r3, #0
34019234:	d009      	beq.n	3401924a <HAL_XSPI_Command+0x86>
34019236:	68bb      	ldr	r3, [r7, #8]
34019238:	685b      	ldr	r3, [r3, #4]
3401923a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
3401923e:	d004      	beq.n	3401924a <HAL_XSPI_Command+0x86>
34019240:	f240 3141 	movw	r1, #833	@ 0x341
34019244:	4874      	ldr	r0, [pc, #464]	@ (34019418 <HAL_XSPI_Command+0x254>)
34019246:	f7e8 f9c3 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3401924a:	68bb      	ldr	r3, [r7, #8]
3401924c:	68db      	ldr	r3, [r3, #12]
3401924e:	2b00      	cmp	r3, #0
34019250:	d014      	beq.n	3401927c <HAL_XSPI_Command+0xb8>
34019252:	68bb      	ldr	r3, [r7, #8]
34019254:	68db      	ldr	r3, [r3, #12]
34019256:	2b01      	cmp	r3, #1
34019258:	d010      	beq.n	3401927c <HAL_XSPI_Command+0xb8>
3401925a:	68bb      	ldr	r3, [r7, #8]
3401925c:	68db      	ldr	r3, [r3, #12]
3401925e:	2b02      	cmp	r3, #2
34019260:	d00c      	beq.n	3401927c <HAL_XSPI_Command+0xb8>
34019262:	68bb      	ldr	r3, [r7, #8]
34019264:	68db      	ldr	r3, [r3, #12]
34019266:	2b03      	cmp	r3, #3
34019268:	d008      	beq.n	3401927c <HAL_XSPI_Command+0xb8>
3401926a:	68bb      	ldr	r3, [r7, #8]
3401926c:	68db      	ldr	r3, [r3, #12]
3401926e:	2b04      	cmp	r3, #4
34019270:	d004      	beq.n	3401927c <HAL_XSPI_Command+0xb8>
34019272:	f44f 7151 	mov.w	r1, #836	@ 0x344
34019276:	4868      	ldr	r0, [pc, #416]	@ (34019418 <HAL_XSPI_Command+0x254>)
34019278:	f7e8 f9aa 	bl	340015d0 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401927c:	68bb      	ldr	r3, [r7, #8]
3401927e:	68db      	ldr	r3, [r3, #12]
34019280:	2b00      	cmp	r3, #0
34019282:	d021      	beq.n	340192c8 <HAL_XSPI_Command+0x104>
  {
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
34019284:	68bb      	ldr	r3, [r7, #8]
34019286:	691b      	ldr	r3, [r3, #16]
34019288:	2b00      	cmp	r3, #0
3401928a:	d010      	beq.n	340192ae <HAL_XSPI_Command+0xea>
3401928c:	68bb      	ldr	r3, [r7, #8]
3401928e:	691b      	ldr	r3, [r3, #16]
34019290:	2b10      	cmp	r3, #16
34019292:	d00c      	beq.n	340192ae <HAL_XSPI_Command+0xea>
34019294:	68bb      	ldr	r3, [r7, #8]
34019296:	691b      	ldr	r3, [r3, #16]
34019298:	2b20      	cmp	r3, #32
3401929a:	d008      	beq.n	340192ae <HAL_XSPI_Command+0xea>
3401929c:	68bb      	ldr	r3, [r7, #8]
3401929e:	691b      	ldr	r3, [r3, #16]
340192a0:	2b30      	cmp	r3, #48	@ 0x30
340192a2:	d004      	beq.n	340192ae <HAL_XSPI_Command+0xea>
340192a4:	f240 3147 	movw	r1, #839	@ 0x347
340192a8:	485b      	ldr	r0, [pc, #364]	@ (34019418 <HAL_XSPI_Command+0x254>)
340192aa:	f7e8 f991 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
340192ae:	68bb      	ldr	r3, [r7, #8]
340192b0:	695b      	ldr	r3, [r3, #20]
340192b2:	2b00      	cmp	r3, #0
340192b4:	d008      	beq.n	340192c8 <HAL_XSPI_Command+0x104>
340192b6:	68bb      	ldr	r3, [r7, #8]
340192b8:	695b      	ldr	r3, [r3, #20]
340192ba:	2b08      	cmp	r3, #8
340192bc:	d004      	beq.n	340192c8 <HAL_XSPI_Command+0x104>
340192be:	f44f 7152 	mov.w	r1, #840	@ 0x348
340192c2:	4855      	ldr	r0, [pc, #340]	@ (34019418 <HAL_XSPI_Command+0x254>)
340192c4:	f7e8 f984 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
340192c8:	68bb      	ldr	r3, [r7, #8]
340192ca:	69db      	ldr	r3, [r3, #28]
340192cc:	2b00      	cmp	r3, #0
340192ce:	d018      	beq.n	34019302 <HAL_XSPI_Command+0x13e>
340192d0:	68bb      	ldr	r3, [r7, #8]
340192d2:	69db      	ldr	r3, [r3, #28]
340192d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340192d8:	d013      	beq.n	34019302 <HAL_XSPI_Command+0x13e>
340192da:	68bb      	ldr	r3, [r7, #8]
340192dc:	69db      	ldr	r3, [r3, #28]
340192de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340192e2:	d00e      	beq.n	34019302 <HAL_XSPI_Command+0x13e>
340192e4:	68bb      	ldr	r3, [r7, #8]
340192e6:	69db      	ldr	r3, [r3, #28]
340192e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340192ec:	d009      	beq.n	34019302 <HAL_XSPI_Command+0x13e>
340192ee:	68bb      	ldr	r3, [r7, #8]
340192f0:	69db      	ldr	r3, [r3, #28]
340192f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340192f6:	d004      	beq.n	34019302 <HAL_XSPI_Command+0x13e>
340192f8:	f240 314b 	movw	r1, #843	@ 0x34b
340192fc:	4846      	ldr	r0, [pc, #280]	@ (34019418 <HAL_XSPI_Command+0x254>)
340192fe:	f7e8 f967 	bl	340015d0 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34019302:	68bb      	ldr	r3, [r7, #8]
34019304:	69db      	ldr	r3, [r3, #28]
34019306:	2b00      	cmp	r3, #0
34019308:	d025      	beq.n	34019356 <HAL_XSPI_Command+0x192>
  {
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401930a:	68bb      	ldr	r3, [r7, #8]
3401930c:	6a1b      	ldr	r3, [r3, #32]
3401930e:	2b00      	cmp	r3, #0
34019310:	d013      	beq.n	3401933a <HAL_XSPI_Command+0x176>
34019312:	68bb      	ldr	r3, [r7, #8]
34019314:	6a1b      	ldr	r3, [r3, #32]
34019316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401931a:	d00e      	beq.n	3401933a <HAL_XSPI_Command+0x176>
3401931c:	68bb      	ldr	r3, [r7, #8]
3401931e:	6a1b      	ldr	r3, [r3, #32]
34019320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34019324:	d009      	beq.n	3401933a <HAL_XSPI_Command+0x176>
34019326:	68bb      	ldr	r3, [r7, #8]
34019328:	6a1b      	ldr	r3, [r3, #32]
3401932a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3401932e:	d004      	beq.n	3401933a <HAL_XSPI_Command+0x176>
34019330:	f240 314e 	movw	r1, #846	@ 0x34e
34019334:	4838      	ldr	r0, [pc, #224]	@ (34019418 <HAL_XSPI_Command+0x254>)
34019336:	f7e8 f94b 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3401933a:	68bb      	ldr	r3, [r7, #8]
3401933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401933e:	2b00      	cmp	r3, #0
34019340:	d009      	beq.n	34019356 <HAL_XSPI_Command+0x192>
34019342:	68bb      	ldr	r3, [r7, #8]
34019344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401934a:	d004      	beq.n	34019356 <HAL_XSPI_Command+0x192>
3401934c:	f240 314f 	movw	r1, #847	@ 0x34f
34019350:	4831      	ldr	r0, [pc, #196]	@ (34019418 <HAL_XSPI_Command+0x254>)
34019352:	f7e8 f93d 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
34019356:	68bb      	ldr	r3, [r7, #8]
34019358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401935a:	2b00      	cmp	r3, #0
3401935c:	d018      	beq.n	34019390 <HAL_XSPI_Command+0x1cc>
3401935e:	68bb      	ldr	r3, [r7, #8]
34019360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34019366:	d013      	beq.n	34019390 <HAL_XSPI_Command+0x1cc>
34019368:	68bb      	ldr	r3, [r7, #8]
3401936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401936c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34019370:	d00e      	beq.n	34019390 <HAL_XSPI_Command+0x1cc>
34019372:	68bb      	ldr	r3, [r7, #8]
34019374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019376:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401937a:	d009      	beq.n	34019390 <HAL_XSPI_Command+0x1cc>
3401937c:	68bb      	ldr	r3, [r7, #8]
3401937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34019384:	d004      	beq.n	34019390 <HAL_XSPI_Command+0x1cc>
34019386:	f240 3152 	movw	r1, #850	@ 0x352
3401938a:	4823      	ldr	r0, [pc, #140]	@ (34019418 <HAL_XSPI_Command+0x254>)
3401938c:	f7e8 f920 	bl	340015d0 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34019390:	68bb      	ldr	r3, [r7, #8]
34019392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019394:	2b00      	cmp	r3, #0
34019396:	d025      	beq.n	340193e4 <HAL_XSPI_Command+0x220>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
34019398:	68bb      	ldr	r3, [r7, #8]
3401939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401939c:	2b00      	cmp	r3, #0
3401939e:	d013      	beq.n	340193c8 <HAL_XSPI_Command+0x204>
340193a0:	68bb      	ldr	r3, [r7, #8]
340193a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340193a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340193a8:	d00e      	beq.n	340193c8 <HAL_XSPI_Command+0x204>
340193aa:	68bb      	ldr	r3, [r7, #8]
340193ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340193ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340193b2:	d009      	beq.n	340193c8 <HAL_XSPI_Command+0x204>
340193b4:	68bb      	ldr	r3, [r7, #8]
340193b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340193b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340193bc:	d004      	beq.n	340193c8 <HAL_XSPI_Command+0x204>
340193be:	f240 3155 	movw	r1, #853	@ 0x355
340193c2:	4815      	ldr	r0, [pc, #84]	@ (34019418 <HAL_XSPI_Command+0x254>)
340193c4:	f7e8 f904 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
340193c8:	68bb      	ldr	r3, [r7, #8]
340193ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340193cc:	2b00      	cmp	r3, #0
340193ce:	d009      	beq.n	340193e4 <HAL_XSPI_Command+0x220>
340193d0:	68bb      	ldr	r3, [r7, #8]
340193d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340193d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
340193d8:	d004      	beq.n	340193e4 <HAL_XSPI_Command+0x220>
340193da:	f240 3156 	movw	r1, #854	@ 0x356
340193de:	480e      	ldr	r0, [pc, #56]	@ (34019418 <HAL_XSPI_Command+0x254>)
340193e0:	f7e8 f8f6 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
340193e4:	68fb      	ldr	r3, [r7, #12]
340193e6:	68db      	ldr	r3, [r3, #12]
340193e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340193ec:	d116      	bne.n	3401941c <HAL_XSPI_Command+0x258>
340193ee:	68bb      	ldr	r3, [r7, #8]
340193f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340193f2:	2b00      	cmp	r3, #0
340193f4:	d009      	beq.n	3401940a <HAL_XSPI_Command+0x246>
340193f6:	68bb      	ldr	r3, [r7, #8]
340193f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340193fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340193fe:	d004      	beq.n	3401940a <HAL_XSPI_Command+0x246>
34019400:	68bb      	ldr	r3, [r7, #8]
34019402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019404:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34019408:	d101      	bne.n	3401940e <HAL_XSPI_Command+0x24a>
3401940a:	2301      	movs	r3, #1
3401940c:	e000      	b.n	34019410 <HAL_XSPI_Command+0x24c>
3401940e:	2300      	movs	r3, #0
34019410:	f003 0301 	and.w	r3, r3, #1
34019414:	b2db      	uxtb	r3, r3
34019416:	e024      	b.n	34019462 <HAL_XSPI_Command+0x29e>
34019418:	3401d92c 	.word	0x3401d92c
3401941c:	68bb      	ldr	r3, [r7, #8]
3401941e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019420:	2b00      	cmp	r3, #0
34019422:	d018      	beq.n	34019456 <HAL_XSPI_Command+0x292>
34019424:	68bb      	ldr	r3, [r7, #8]
34019426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401942c:	d013      	beq.n	34019456 <HAL_XSPI_Command+0x292>
3401942e:	68bb      	ldr	r3, [r7, #8]
34019430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34019436:	d00e      	beq.n	34019456 <HAL_XSPI_Command+0x292>
34019438:	68bb      	ldr	r3, [r7, #8]
3401943a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401943c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34019440:	d009      	beq.n	34019456 <HAL_XSPI_Command+0x292>
34019442:	68bb      	ldr	r3, [r7, #8]
34019444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401944a:	d004      	beq.n	34019456 <HAL_XSPI_Command+0x292>
3401944c:	68bb      	ldr	r3, [r7, #8]
3401944e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019450:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34019454:	d101      	bne.n	3401945a <HAL_XSPI_Command+0x296>
34019456:	2301      	movs	r3, #1
34019458:	e000      	b.n	3401945c <HAL_XSPI_Command+0x298>
3401945a:	2300      	movs	r3, #0
3401945c:	f003 0301 	and.w	r3, r3, #1
34019460:	b2db      	uxtb	r3, r3
34019462:	2b00      	cmp	r3, #0
34019464:	d104      	bne.n	34019470 <HAL_XSPI_Command+0x2ac>
34019466:	f240 3159 	movw	r1, #857	@ 0x359
3401946a:	485e      	ldr	r0, [pc, #376]	@ (340195e4 <HAL_XSPI_Command+0x420>)
3401946c:	f7e8 f8b0 	bl	340015d0 <assert_failed>

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019470:	68bb      	ldr	r3, [r7, #8]
34019472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019474:	2b00      	cmp	r3, #0
34019476:	d023      	beq.n	340194c0 <HAL_XSPI_Command+0x2fc>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34019478:	68bb      	ldr	r3, [r7, #8]
3401947a:	681b      	ldr	r3, [r3, #0]
3401947c:	2b00      	cmp	r3, #0
3401947e:	d108      	bne.n	34019492 <HAL_XSPI_Command+0x2ce>
    {
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
34019480:	68bb      	ldr	r3, [r7, #8]
34019482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34019484:	2b00      	cmp	r3, #0
34019486:	d104      	bne.n	34019492 <HAL_XSPI_Command+0x2ce>
34019488:	f240 315f 	movw	r1, #863	@ 0x35f
3401948c:	4855      	ldr	r0, [pc, #340]	@ (340195e4 <HAL_XSPI_Command+0x420>)
3401948e:	f7e8 f89f 	bl	340015d0 <assert_failed>
    }
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
34019492:	68bb      	ldr	r3, [r7, #8]
34019494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34019496:	2b00      	cmp	r3, #0
34019498:	d009      	beq.n	340194ae <HAL_XSPI_Command+0x2ea>
3401949a:	68bb      	ldr	r3, [r7, #8]
3401949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401949e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340194a2:	d004      	beq.n	340194ae <HAL_XSPI_Command+0x2ea>
340194a4:	f240 3161 	movw	r1, #865	@ 0x361
340194a8:	484e      	ldr	r0, [pc, #312]	@ (340195e4 <HAL_XSPI_Command+0x420>)
340194aa:	f7e8 f891 	bl	340015d0 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
340194ae:	68bb      	ldr	r3, [r7, #8]
340194b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340194b2:	2b1f      	cmp	r3, #31
340194b4:	d904      	bls.n	340194c0 <HAL_XSPI_Command+0x2fc>
340194b6:	f240 3162 	movw	r1, #866	@ 0x362
340194ba:	484a      	ldr	r0, [pc, #296]	@ (340195e4 <HAL_XSPI_Command+0x420>)
340194bc:	f7e8 f888 	bl	340015d0 <assert_failed>
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
340194c0:	68bb      	ldr	r3, [r7, #8]
340194c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340194c4:	2b00      	cmp	r3, #0
340194c6:	d009      	beq.n	340194dc <HAL_XSPI_Command+0x318>
340194c8:	68bb      	ldr	r3, [r7, #8]
340194ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340194cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340194d0:	d004      	beq.n	340194dc <HAL_XSPI_Command+0x318>
340194d2:	f240 3165 	movw	r1, #869	@ 0x365
340194d6:	4843      	ldr	r0, [pc, #268]	@ (340195e4 <HAL_XSPI_Command+0x420>)
340194d8:	f7e8 f87a 	bl	340015d0 <assert_failed>

  /* Check the state of the driver */
  state = hxspi->State;
340194dc:	68fb      	ldr	r3, [r7, #12]
340194de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340194e0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
340194e2:	697b      	ldr	r3, [r7, #20]
340194e4:	2b02      	cmp	r3, #2
340194e6:	d104      	bne.n	340194f2 <HAL_XSPI_Command+0x32e>
340194e8:	68fb      	ldr	r3, [r7, #12]
340194ea:	68db      	ldr	r3, [r3, #12]
340194ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340194f0:	d115      	bne.n	3401951e <HAL_XSPI_Command+0x35a>
340194f2:	697b      	ldr	r3, [r7, #20]
340194f4:	2b14      	cmp	r3, #20
340194f6:	d107      	bne.n	34019508 <HAL_XSPI_Command+0x344>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
340194f8:	68bb      	ldr	r3, [r7, #8]
340194fa:	681b      	ldr	r3, [r3, #0]
340194fc:	2b02      	cmp	r3, #2
340194fe:	d00e      	beq.n	3401951e <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34019500:	68bb      	ldr	r3, [r7, #8]
34019502:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34019504:	2b03      	cmp	r3, #3
34019506:	d00a      	beq.n	3401951e <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34019508:	697b      	ldr	r3, [r7, #20]
3401950a:	2b24      	cmp	r3, #36	@ 0x24
3401950c:	d15e      	bne.n	340195cc <HAL_XSPI_Command+0x408>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3401950e:	68bb      	ldr	r3, [r7, #8]
34019510:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
34019512:	2b01      	cmp	r3, #1
34019514:	d003      	beq.n	3401951e <HAL_XSPI_Command+0x35a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
34019516:	68bb      	ldr	r3, [r7, #8]
34019518:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3401951a:	2b03      	cmp	r3, #3
3401951c:	d156      	bne.n	340195cc <HAL_XSPI_Command+0x408>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401951e:	687b      	ldr	r3, [r7, #4]
34019520:	9300      	str	r3, [sp, #0]
34019522:	69bb      	ldr	r3, [r7, #24]
34019524:	2200      	movs	r2, #0
34019526:	2120      	movs	r1, #32
34019528:	68f8      	ldr	r0, [r7, #12]
3401952a:	f000 fb1e 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
3401952e:	4603      	mov	r3, r0
34019530:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
34019532:	7ffb      	ldrb	r3, [r7, #31]
34019534:	2b00      	cmp	r3, #0
34019536:	d146      	bne.n	340195c6 <HAL_XSPI_Command+0x402>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34019538:	68fb      	ldr	r3, [r7, #12]
3401953a:	2200      	movs	r2, #0
3401953c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3401953e:	68b9      	ldr	r1, [r7, #8]
34019540:	68f8      	ldr	r0, [r7, #12]
34019542:	f000 fb49 	bl	34019bd8 <XSPI_ConfigCmd>
34019546:	4603      	mov	r3, r0
34019548:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3401954a:	7ffb      	ldrb	r3, [r7, #31]
3401954c:	2b00      	cmp	r3, #0
3401954e:	d143      	bne.n	340195d8 <HAL_XSPI_Command+0x414>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
34019550:	68bb      	ldr	r3, [r7, #8]
34019552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019554:	2b00      	cmp	r3, #0
34019556:	d10e      	bne.n	34019576 <HAL_XSPI_Command+0x3b2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34019558:	687b      	ldr	r3, [r7, #4]
3401955a:	9300      	str	r3, [sp, #0]
3401955c:	69bb      	ldr	r3, [r7, #24]
3401955e:	2200      	movs	r2, #0
34019560:	2120      	movs	r1, #32
34019562:	68f8      	ldr	r0, [r7, #12]
34019564:	f000 fb01 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
34019568:	4603      	mov	r3, r0
3401956a:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401956c:	68fb      	ldr	r3, [r7, #12]
3401956e:	681b      	ldr	r3, [r3, #0]
34019570:	2202      	movs	r2, #2
34019572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
34019574:	e030      	b.n	340195d8 <HAL_XSPI_Command+0x414>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34019576:	68bb      	ldr	r3, [r7, #8]
34019578:	681b      	ldr	r3, [r3, #0]
3401957a:	2b00      	cmp	r3, #0
3401957c:	d103      	bne.n	34019586 <HAL_XSPI_Command+0x3c2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401957e:	68fb      	ldr	r3, [r7, #12]
34019580:	2204      	movs	r2, #4
34019582:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34019584:	e028      	b.n	340195d8 <HAL_XSPI_Command+0x414>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
34019586:	68bb      	ldr	r3, [r7, #8]
34019588:	681b      	ldr	r3, [r3, #0]
3401958a:	2b01      	cmp	r3, #1
3401958c:	d10b      	bne.n	340195a6 <HAL_XSPI_Command+0x3e2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401958e:	68fb      	ldr	r3, [r7, #12]
34019590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34019592:	2b24      	cmp	r3, #36	@ 0x24
34019594:	d103      	bne.n	3401959e <HAL_XSPI_Command+0x3da>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34019596:	68fb      	ldr	r3, [r7, #12]
34019598:	2204      	movs	r2, #4
3401959a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3401959c:	e01c      	b.n	340195d8 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401959e:	68fb      	ldr	r3, [r7, #12]
340195a0:	2214      	movs	r2, #20
340195a2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
340195a4:	e018      	b.n	340195d8 <HAL_XSPI_Command+0x414>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
340195a6:	68bb      	ldr	r3, [r7, #8]
340195a8:	681b      	ldr	r3, [r3, #0]
340195aa:	2b02      	cmp	r3, #2
340195ac:	d114      	bne.n	340195d8 <HAL_XSPI_Command+0x414>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
340195ae:	68fb      	ldr	r3, [r7, #12]
340195b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340195b2:	2b14      	cmp	r3, #20
340195b4:	d103      	bne.n	340195be <HAL_XSPI_Command+0x3fa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
340195b6:	68fb      	ldr	r3, [r7, #12]
340195b8:	2204      	movs	r2, #4
340195ba:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
340195bc:	e00c      	b.n	340195d8 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
340195be:	68fb      	ldr	r3, [r7, #12]
340195c0:	2224      	movs	r2, #36	@ 0x24
340195c2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
340195c4:	e008      	b.n	340195d8 <HAL_XSPI_Command+0x414>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
340195c6:	2302      	movs	r3, #2
340195c8:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
340195ca:	e005      	b.n	340195d8 <HAL_XSPI_Command+0x414>
    }
  }
  else
  {
    status = HAL_ERROR;
340195cc:	2301      	movs	r3, #1
340195ce:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340195d0:	68fb      	ldr	r3, [r7, #12]
340195d2:	2210      	movs	r2, #16
340195d4:	65da      	str	r2, [r3, #92]	@ 0x5c
340195d6:	e000      	b.n	340195da <HAL_XSPI_Command+0x416>
    if (status == HAL_OK)
340195d8:	bf00      	nop
  }

  return status;
340195da:	7ffb      	ldrb	r3, [r7, #31]
}
340195dc:	4618      	mov	r0, r3
340195de:	3720      	adds	r7, #32
340195e0:	46bd      	mov	sp, r7
340195e2:	bd80      	pop	{r7, pc}
340195e4:	3401d92c 	.word	0x3401d92c

340195e8 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
340195e8:	b580      	push	{r7, lr}
340195ea:	b08a      	sub	sp, #40	@ 0x28
340195ec:	af02      	add	r7, sp, #8
340195ee:	60f8      	str	r0, [r7, #12]
340195f0:	60b9      	str	r1, [r7, #8]
340195f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340195f4:	f7ec fd1a 	bl	3400602c <HAL_GetTick>
340195f8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
340195fa:	68fb      	ldr	r3, [r7, #12]
340195fc:	681b      	ldr	r3, [r3, #0]
340195fe:	3350      	adds	r3, #80	@ 0x50
34019600:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
34019602:	68bb      	ldr	r3, [r7, #8]
34019604:	2b00      	cmp	r3, #0
34019606:	d105      	bne.n	34019614 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
34019608:	2301      	movs	r3, #1
3401960a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401960c:	68fb      	ldr	r3, [r7, #12]
3401960e:	2208      	movs	r2, #8
34019610:	65da      	str	r2, [r3, #92]	@ 0x5c
34019612:	e057      	b.n	340196c4 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34019614:	68fb      	ldr	r3, [r7, #12]
34019616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34019618:	2b04      	cmp	r3, #4
3401961a:	d14e      	bne.n	340196ba <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401961c:	68fb      	ldr	r3, [r7, #12]
3401961e:	681b      	ldr	r3, [r3, #0]
34019620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34019622:	1c5a      	adds	r2, r3, #1
34019624:	68fb      	ldr	r3, [r7, #12]
34019626:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
34019628:	68fb      	ldr	r3, [r7, #12]
3401962a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3401962c:	68fb      	ldr	r3, [r7, #12]
3401962e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
34019630:	68fb      	ldr	r3, [r7, #12]
34019632:	68ba      	ldr	r2, [r7, #8]
34019634:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
34019636:	68fb      	ldr	r3, [r7, #12]
34019638:	681b      	ldr	r3, [r3, #0]
3401963a:	681a      	ldr	r2, [r3, #0]
3401963c:	68fb      	ldr	r3, [r7, #12]
3401963e:	681b      	ldr	r3, [r3, #0]
34019640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34019644:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
34019646:	687b      	ldr	r3, [r7, #4]
34019648:	9300      	str	r3, [sp, #0]
3401964a:	69bb      	ldr	r3, [r7, #24]
3401964c:	2201      	movs	r2, #1
3401964e:	2104      	movs	r1, #4
34019650:	68f8      	ldr	r0, [r7, #12]
34019652:	f000 fa8a 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
34019656:	4603      	mov	r3, r0
34019658:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3401965a:	7ffb      	ldrb	r3, [r7, #31]
3401965c:	2b00      	cmp	r3, #0
3401965e:	d113      	bne.n	34019688 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
34019660:	68fb      	ldr	r3, [r7, #12]
34019662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34019664:	781a      	ldrb	r2, [r3, #0]
34019666:	697b      	ldr	r3, [r7, #20]
34019668:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401966a:	68fb      	ldr	r3, [r7, #12]
3401966c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401966e:	1c5a      	adds	r2, r3, #1
34019670:	68fb      	ldr	r3, [r7, #12]
34019672:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34019674:	68fb      	ldr	r3, [r7, #12]
34019676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34019678:	1e5a      	subs	r2, r3, #1
3401967a:	68fb      	ldr	r3, [r7, #12]
3401967c:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401967e:	68fb      	ldr	r3, [r7, #12]
34019680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34019682:	2b00      	cmp	r3, #0
34019684:	d1df      	bne.n	34019646 <HAL_XSPI_Transmit+0x5e>
34019686:	e000      	b.n	3401968a <HAL_XSPI_Transmit+0xa2>
          break;
34019688:	bf00      	nop

      if (status == HAL_OK)
3401968a:	7ffb      	ldrb	r3, [r7, #31]
3401968c:	2b00      	cmp	r3, #0
3401968e:	d119      	bne.n	340196c4 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
34019690:	687b      	ldr	r3, [r7, #4]
34019692:	9300      	str	r3, [sp, #0]
34019694:	69bb      	ldr	r3, [r7, #24]
34019696:	2201      	movs	r2, #1
34019698:	2102      	movs	r1, #2
3401969a:	68f8      	ldr	r0, [r7, #12]
3401969c:	f000 fa65 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
340196a0:	4603      	mov	r3, r0
340196a2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
340196a4:	7ffb      	ldrb	r3, [r7, #31]
340196a6:	2b00      	cmp	r3, #0
340196a8:	d10c      	bne.n	340196c4 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
340196aa:	68fb      	ldr	r3, [r7, #12]
340196ac:	681b      	ldr	r3, [r3, #0]
340196ae:	2202      	movs	r2, #2
340196b0:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
340196b2:	68fb      	ldr	r3, [r7, #12]
340196b4:	2202      	movs	r2, #2
340196b6:	659a      	str	r2, [r3, #88]	@ 0x58
340196b8:	e004      	b.n	340196c4 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
340196ba:	2301      	movs	r3, #1
340196bc:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340196be:	68fb      	ldr	r3, [r7, #12]
340196c0:	2210      	movs	r2, #16
340196c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
340196c4:	7ffb      	ldrb	r3, [r7, #31]
}
340196c6:	4618      	mov	r0, r3
340196c8:	3720      	adds	r7, #32
340196ca:	46bd      	mov	sp, r7
340196cc:	bd80      	pop	{r7, pc}

340196ce <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
340196ce:	b580      	push	{r7, lr}
340196d0:	b08c      	sub	sp, #48	@ 0x30
340196d2:	af02      	add	r7, sp, #8
340196d4:	60f8      	str	r0, [r7, #12]
340196d6:	60b9      	str	r1, [r7, #8]
340196d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340196da:	f7ec fca7 	bl	3400602c <HAL_GetTick>
340196de:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
340196e0:	68fb      	ldr	r3, [r7, #12]
340196e2:	681b      	ldr	r3, [r3, #0]
340196e4:	3350      	adds	r3, #80	@ 0x50
340196e6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
340196e8:	68fb      	ldr	r3, [r7, #12]
340196ea:	681b      	ldr	r3, [r3, #0]
340196ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340196ee:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
340196f0:	68fb      	ldr	r3, [r7, #12]
340196f2:	681b      	ldr	r3, [r3, #0]
340196f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340196f8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
340196fa:	68bb      	ldr	r3, [r7, #8]
340196fc:	2b00      	cmp	r3, #0
340196fe:	d106      	bne.n	3401970e <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
34019700:	2301      	movs	r3, #1
34019702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34019706:	68fb      	ldr	r3, [r7, #12]
34019708:	2208      	movs	r2, #8
3401970a:	65da      	str	r2, [r3, #92]	@ 0x5c
3401970c:	e07c      	b.n	34019808 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401970e:	68fb      	ldr	r3, [r7, #12]
34019710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34019712:	2b04      	cmp	r3, #4
34019714:	d172      	bne.n	340197fc <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
34019716:	68fb      	ldr	r3, [r7, #12]
34019718:	681b      	ldr	r3, [r3, #0]
3401971a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401971c:	1c5a      	adds	r2, r3, #1
3401971e:	68fb      	ldr	r3, [r7, #12]
34019720:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
34019722:	68fb      	ldr	r3, [r7, #12]
34019724:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34019726:	68fb      	ldr	r3, [r7, #12]
34019728:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3401972a:	68fb      	ldr	r3, [r7, #12]
3401972c:	68ba      	ldr	r2, [r7, #8]
3401972e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
34019730:	68fb      	ldr	r3, [r7, #12]
34019732:	681b      	ldr	r3, [r3, #0]
34019734:	681b      	ldr	r3, [r3, #0]
34019736:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3401973a:	68fb      	ldr	r3, [r7, #12]
3401973c:	681b      	ldr	r3, [r3, #0]
3401973e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
34019742:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34019744:	68fb      	ldr	r3, [r7, #12]
34019746:	68db      	ldr	r3, [r3, #12]
34019748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401974c:	d104      	bne.n	34019758 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3401974e:	68fb      	ldr	r3, [r7, #12]
34019750:	681b      	ldr	r3, [r3, #0]
34019752:	69ba      	ldr	r2, [r7, #24]
34019754:	649a      	str	r2, [r3, #72]	@ 0x48
34019756:	e011      	b.n	3401977c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
34019758:	68fb      	ldr	r3, [r7, #12]
3401975a:	681b      	ldr	r3, [r3, #0]
3401975c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34019760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34019764:	2b00      	cmp	r3, #0
34019766:	d004      	beq.n	34019772 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
34019768:	68fb      	ldr	r3, [r7, #12]
3401976a:	681b      	ldr	r3, [r3, #0]
3401976c:	69ba      	ldr	r2, [r7, #24]
3401976e:	649a      	str	r2, [r3, #72]	@ 0x48
34019770:	e004      	b.n	3401977c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34019772:	68fb      	ldr	r3, [r7, #12]
34019774:	681b      	ldr	r3, [r3, #0]
34019776:	697a      	ldr	r2, [r7, #20]
34019778:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3401977c:	687b      	ldr	r3, [r7, #4]
3401977e:	9300      	str	r3, [sp, #0]
34019780:	6a3b      	ldr	r3, [r7, #32]
34019782:	2201      	movs	r2, #1
34019784:	2106      	movs	r1, #6
34019786:	68f8      	ldr	r0, [r7, #12]
34019788:	f000 f9ef 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
3401978c:	4603      	mov	r3, r0
3401978e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
34019792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34019796:	2b00      	cmp	r3, #0
34019798:	d114      	bne.n	340197c4 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3401979a:	68fb      	ldr	r3, [r7, #12]
3401979c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401979e:	69fa      	ldr	r2, [r7, #28]
340197a0:	7812      	ldrb	r2, [r2, #0]
340197a2:	b2d2      	uxtb	r2, r2
340197a4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
340197a6:	68fb      	ldr	r3, [r7, #12]
340197a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340197aa:	1c5a      	adds	r2, r3, #1
340197ac:	68fb      	ldr	r3, [r7, #12]
340197ae:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
340197b0:	68fb      	ldr	r3, [r7, #12]
340197b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340197b4:	1e5a      	subs	r2, r3, #1
340197b6:	68fb      	ldr	r3, [r7, #12]
340197b8:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
340197ba:	68fb      	ldr	r3, [r7, #12]
340197bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340197be:	2b00      	cmp	r3, #0
340197c0:	d1dc      	bne.n	3401977c <HAL_XSPI_Receive+0xae>
340197c2:	e000      	b.n	340197c6 <HAL_XSPI_Receive+0xf8>
          break;
340197c4:	bf00      	nop

      if (status == HAL_OK)
340197c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
340197ca:	2b00      	cmp	r3, #0
340197cc:	d11c      	bne.n	34019808 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
340197ce:	687b      	ldr	r3, [r7, #4]
340197d0:	9300      	str	r3, [sp, #0]
340197d2:	6a3b      	ldr	r3, [r7, #32]
340197d4:	2201      	movs	r2, #1
340197d6:	2102      	movs	r1, #2
340197d8:	68f8      	ldr	r0, [r7, #12]
340197da:	f000 f9c6 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
340197de:	4603      	mov	r3, r0
340197e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
340197e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
340197e8:	2b00      	cmp	r3, #0
340197ea:	d10d      	bne.n	34019808 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
340197ec:	68fb      	ldr	r3, [r7, #12]
340197ee:	681b      	ldr	r3, [r3, #0]
340197f0:	2202      	movs	r2, #2
340197f2:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
340197f4:	68fb      	ldr	r3, [r7, #12]
340197f6:	2202      	movs	r2, #2
340197f8:	659a      	str	r2, [r3, #88]	@ 0x58
340197fa:	e005      	b.n	34019808 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
340197fc:	2301      	movs	r3, #1
340197fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34019802:	68fb      	ldr	r3, [r7, #12]
34019804:	2210      	movs	r2, #16
34019806:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34019808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3401980c:	4618      	mov	r0, r3
3401980e:	3728      	adds	r7, #40	@ 0x28
34019810:	46bd      	mov	sp, r7
34019812:	bd80      	pop	{r7, pc}

34019814 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
34019814:	b580      	push	{r7, lr}
34019816:	b08c      	sub	sp, #48	@ 0x30
34019818:	af02      	add	r7, sp, #8
3401981a:	60f8      	str	r0, [r7, #12]
3401981c:	60b9      	str	r1, [r7, #8]
3401981e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34019820:	f7ec fc04 	bl	3400602c <HAL_GetTick>
34019824:	6238      	str	r0, [r7, #32]
  uint32_t addr_reg = hxspi->Instance->AR;
34019826:	68fb      	ldr	r3, [r7, #12]
34019828:	681b      	ldr	r3, [r3, #0]
3401982a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401982c:	61fb      	str	r3, [r7, #28]
  uint32_t ir_reg = hxspi->Instance->IR;
3401982e:	68fb      	ldr	r3, [r7, #12]
34019830:	681b      	ldr	r3, [r3, #0]
34019832:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34019836:	61bb      	str	r3, [r7, #24]
#ifdef USE_FULL_ASSERT
  uint32_t dlr_reg = hxspi->Instance->DLR;
34019838:	68fb      	ldr	r3, [r7, #12]
3401983a:	681b      	ldr	r3, [r3, #0]
3401983c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401983e:	617b      	str	r3, [r7, #20]
#endif /* USE_FULL_ASSERT */

  /* Check the parameters of the autopolling configuration structure */
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
34019840:	68bb      	ldr	r3, [r7, #8]
34019842:	689b      	ldr	r3, [r3, #8]
34019844:	2b00      	cmp	r3, #0
34019846:	d009      	beq.n	3401985c <HAL_XSPI_AutoPolling+0x48>
34019848:	68bb      	ldr	r3, [r7, #8]
3401984a:	689b      	ldr	r3, [r3, #8]
3401984c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34019850:	d004      	beq.n	3401985c <HAL_XSPI_AutoPolling+0x48>
34019852:	f240 7134 	movw	r1, #1844	@ 0x734
34019856:	4853      	ldr	r0, [pc, #332]	@ (340199a4 <HAL_XSPI_AutoPolling+0x190>)
34019858:	f7e7 feba 	bl	340015d0 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3401985c:	68bb      	ldr	r3, [r7, #8]
3401985e:	68db      	ldr	r3, [r3, #12]
34019860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34019864:	d008      	beq.n	34019878 <HAL_XSPI_AutoPolling+0x64>
34019866:	68bb      	ldr	r3, [r7, #8]
34019868:	68db      	ldr	r3, [r3, #12]
3401986a:	2b00      	cmp	r3, #0
3401986c:	d004      	beq.n	34019878 <HAL_XSPI_AutoPolling+0x64>
3401986e:	f240 7135 	movw	r1, #1845	@ 0x735
34019872:	484c      	ldr	r0, [pc, #304]	@ (340199a4 <HAL_XSPI_AutoPolling+0x190>)
34019874:	f7e7 feac 	bl	340015d0 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
34019878:	68bb      	ldr	r3, [r7, #8]
3401987a:	691b      	ldr	r3, [r3, #16]
3401987c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34019880:	d304      	bcc.n	3401988c <HAL_XSPI_AutoPolling+0x78>
34019882:	f240 7136 	movw	r1, #1846	@ 0x736
34019886:	4847      	ldr	r0, [pc, #284]	@ (340199a4 <HAL_XSPI_AutoPolling+0x190>)
34019888:	f7e7 fea2 	bl	340015d0 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3401988c:	697b      	ldr	r3, [r7, #20]
3401988e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34019892:	d003      	beq.n	3401989c <HAL_XSPI_AutoPolling+0x88>
34019894:	697b      	ldr	r3, [r7, #20]
34019896:	3301      	adds	r3, #1
34019898:	2b04      	cmp	r3, #4
3401989a:	d904      	bls.n	340198a6 <HAL_XSPI_AutoPolling+0x92>
3401989c:	f240 7137 	movw	r1, #1847	@ 0x737
340198a0:	4840      	ldr	r0, [pc, #256]	@ (340199a4 <HAL_XSPI_AutoPolling+0x190>)
340198a2:	f7e7 fe95 	bl	340015d0 <assert_failed>

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
340198a6:	68fb      	ldr	r3, [r7, #12]
340198a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340198aa:	2b04      	cmp	r3, #4
340198ac:	d16c      	bne.n	34019988 <HAL_XSPI_AutoPolling+0x174>
340198ae:	68bb      	ldr	r3, [r7, #8]
340198b0:	68db      	ldr	r3, [r3, #12]
340198b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340198b6:	d167      	bne.n	34019988 <HAL_XSPI_AutoPolling+0x174>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
340198b8:	687b      	ldr	r3, [r7, #4]
340198ba:	9300      	str	r3, [sp, #0]
340198bc:	6a3b      	ldr	r3, [r7, #32]
340198be:	2200      	movs	r2, #0
340198c0:	2120      	movs	r1, #32
340198c2:	68f8      	ldr	r0, [r7, #12]
340198c4:	f000 f951 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
340198c8:	4603      	mov	r3, r0
340198ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status == HAL_OK)
340198ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
340198d2:	2b00      	cmp	r3, #0
340198d4:	d154      	bne.n	34019980 <HAL_XSPI_AutoPolling+0x16c>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
340198d6:	68fb      	ldr	r3, [r7, #12]
340198d8:	681b      	ldr	r3, [r3, #0]
340198da:	68ba      	ldr	r2, [r7, #8]
340198dc:	6812      	ldr	r2, [r2, #0]
340198de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
340198e2:	68fb      	ldr	r3, [r7, #12]
340198e4:	681b      	ldr	r3, [r3, #0]
340198e6:	68ba      	ldr	r2, [r7, #8]
340198e8:	6852      	ldr	r2, [r2, #4]
340198ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
340198ee:	68fb      	ldr	r3, [r7, #12]
340198f0:	681b      	ldr	r3, [r3, #0]
340198f2:	68ba      	ldr	r2, [r7, #8]
340198f4:	6912      	ldr	r2, [r2, #16]
340198f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
340198fa:	68fb      	ldr	r3, [r7, #12]
340198fc:	681b      	ldr	r3, [r3, #0]
340198fe:	681b      	ldr	r3, [r3, #0]
34019900:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
34019904:	68bb      	ldr	r3, [r7, #8]
34019906:	6899      	ldr	r1, [r3, #8]
34019908:	68bb      	ldr	r3, [r7, #8]
3401990a:	68db      	ldr	r3, [r3, #12]
3401990c:	430b      	orrs	r3, r1
3401990e:	431a      	orrs	r2, r3
34019910:	68fb      	ldr	r3, [r7, #12]
34019912:	681b      	ldr	r3, [r3, #0]
34019914:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
34019918:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401991a:	68fb      	ldr	r3, [r7, #12]
3401991c:	68db      	ldr	r3, [r3, #12]
3401991e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34019922:	d104      	bne.n	3401992e <HAL_XSPI_AutoPolling+0x11a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
34019924:	68fb      	ldr	r3, [r7, #12]
34019926:	681b      	ldr	r3, [r3, #0]
34019928:	69fa      	ldr	r2, [r7, #28]
3401992a:	649a      	str	r2, [r3, #72]	@ 0x48
3401992c:	e011      	b.n	34019952 <HAL_XSPI_AutoPolling+0x13e>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401992e:	68fb      	ldr	r3, [r7, #12]
34019930:	681b      	ldr	r3, [r3, #0]
34019932:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34019936:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3401993a:	2b00      	cmp	r3, #0
3401993c:	d004      	beq.n	34019948 <HAL_XSPI_AutoPolling+0x134>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401993e:	68fb      	ldr	r3, [r7, #12]
34019940:	681b      	ldr	r3, [r3, #0]
34019942:	69fa      	ldr	r2, [r7, #28]
34019944:	649a      	str	r2, [r3, #72]	@ 0x48
34019946:	e004      	b.n	34019952 <HAL_XSPI_AutoPolling+0x13e>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34019948:	68fb      	ldr	r3, [r7, #12]
3401994a:	681b      	ldr	r3, [r3, #0]
3401994c:	69ba      	ldr	r2, [r7, #24]
3401994e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
34019952:	687b      	ldr	r3, [r7, #4]
34019954:	9300      	str	r3, [sp, #0]
34019956:	6a3b      	ldr	r3, [r7, #32]
34019958:	2201      	movs	r2, #1
3401995a:	2108      	movs	r1, #8
3401995c:	68f8      	ldr	r0, [r7, #12]
3401995e:	f000 f904 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
34019962:	4603      	mov	r3, r0
34019964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      if (status == HAL_OK)
34019968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401996c:	2b00      	cmp	r3, #0
3401996e:	d112      	bne.n	34019996 <HAL_XSPI_AutoPolling+0x182>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
34019970:	68fb      	ldr	r3, [r7, #12]
34019972:	681b      	ldr	r3, [r3, #0]
34019974:	2208      	movs	r2, #8
34019976:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
34019978:	68fb      	ldr	r3, [r7, #12]
3401997a:	2202      	movs	r2, #2
3401997c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3401997e:	e00a      	b.n	34019996 <HAL_XSPI_AutoPolling+0x182>
      }
    }
    else
    {
      status = HAL_BUSY;
34019980:	2302      	movs	r3, #2
34019982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status == HAL_OK)
34019986:	e006      	b.n	34019996 <HAL_XSPI_AutoPolling+0x182>
    }
  }
  else
  {
    status = HAL_ERROR;
34019988:	2301      	movs	r3, #1
3401998a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401998e:	68fb      	ldr	r3, [r7, #12]
34019990:	2210      	movs	r2, #16
34019992:	65da      	str	r2, [r3, #92]	@ 0x5c
34019994:	e000      	b.n	34019998 <HAL_XSPI_AutoPolling+0x184>
    if (status == HAL_OK)
34019996:	bf00      	nop
  }

  return status;
34019998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3401999c:	4618      	mov	r0, r3
3401999e:	3728      	adds	r7, #40	@ 0x28
340199a0:	46bd      	mov	sp, r7
340199a2:	bd80      	pop	{r7, pc}
340199a4:	3401d92c 	.word	0x3401d92c

340199a8 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
340199a8:	b580      	push	{r7, lr}
340199aa:	b086      	sub	sp, #24
340199ac:	af02      	add	r7, sp, #8
340199ae:	6078      	str	r0, [r7, #4]
340199b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340199b2:	f7ec fb3b 	bl	3400602c <HAL_GetTick>
340199b6:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
340199b8:	683b      	ldr	r3, [r7, #0]
340199ba:	681b      	ldr	r3, [r3, #0]
340199bc:	2b00      	cmp	r3, #0
340199be:	d008      	beq.n	340199d2 <HAL_XSPI_MemoryMapped+0x2a>
340199c0:	683b      	ldr	r3, [r7, #0]
340199c2:	681b      	ldr	r3, [r3, #0]
340199c4:	2b08      	cmp	r3, #8
340199c6:	d004      	beq.n	340199d2 <HAL_XSPI_MemoryMapped+0x2a>
340199c8:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
340199cc:	4846      	ldr	r0, [pc, #280]	@ (34019ae8 <HAL_XSPI_MemoryMapped+0x140>)
340199ce:	f7e7 fdff 	bl	340015d0 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
340199d2:	683b      	ldr	r3, [r7, #0]
340199d4:	689b      	ldr	r3, [r3, #8]
340199d6:	2b00      	cmp	r3, #0
340199d8:	d009      	beq.n	340199ee <HAL_XSPI_MemoryMapped+0x46>
340199da:	683b      	ldr	r3, [r7, #0]
340199dc:	689b      	ldr	r3, [r3, #8]
340199de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340199e2:	d004      	beq.n	340199ee <HAL_XSPI_MemoryMapped+0x46>
340199e4:	f240 71c9 	movw	r1, #1993	@ 0x7c9
340199e8:	483f      	ldr	r0, [pc, #252]	@ (34019ae8 <HAL_XSPI_MemoryMapped+0x140>)
340199ea:	f7e7 fdf1 	bl	340015d0 <assert_failed>

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340199ee:	687b      	ldr	r3, [r7, #4]
340199f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340199f2:	2b04      	cmp	r3, #4
340199f4:	d16d      	bne.n	34019ad2 <HAL_XSPI_MemoryMapped+0x12a>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
340199f6:	687b      	ldr	r3, [r7, #4]
340199f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340199fa:	9300      	str	r3, [sp, #0]
340199fc:	68bb      	ldr	r3, [r7, #8]
340199fe:	2200      	movs	r2, #0
34019a00:	2120      	movs	r1, #32
34019a02:	6878      	ldr	r0, [r7, #4]
34019a04:	f000 f8b1 	bl	34019b6a <XSPI_WaitFlagStateUntilTimeout>
34019a08:	4603      	mov	r3, r0
34019a0a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
34019a0c:	7bfb      	ldrb	r3, [r7, #15]
34019a0e:	2b00      	cmp	r3, #0
34019a10:	d164      	bne.n	34019adc <HAL_XSPI_MemoryMapped+0x134>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
34019a12:	687b      	ldr	r3, [r7, #4]
34019a14:	2288      	movs	r2, #136	@ 0x88
34019a16:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
34019a18:	683b      	ldr	r3, [r7, #0]
34019a1a:	689b      	ldr	r3, [r3, #8]
34019a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34019a20:	d10b      	bne.n	34019a3a <HAL_XSPI_MemoryMapped+0x92>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
34019a22:	687b      	ldr	r3, [r7, #4]
34019a24:	681b      	ldr	r3, [r3, #0]
34019a26:	681b      	ldr	r3, [r3, #0]
34019a28:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
34019a2c:	683b      	ldr	r3, [r7, #0]
34019a2e:	689a      	ldr	r2, [r3, #8]
34019a30:	687b      	ldr	r3, [r7, #4]
34019a32:	681b      	ldr	r3, [r3, #0]
34019a34:	430a      	orrs	r2, r1
34019a36:	601a      	str	r2, [r3, #0]
34019a38:	e01b      	b.n	34019a72 <HAL_XSPI_MemoryMapped+0xca>
      }

      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
34019a3a:	683b      	ldr	r3, [r7, #0]
34019a3c:	68db      	ldr	r3, [r3, #12]
34019a3e:	2b00      	cmp	r3, #0
34019a40:	d009      	beq.n	34019a56 <HAL_XSPI_MemoryMapped+0xae>
34019a42:	683b      	ldr	r3, [r7, #0]
34019a44:	68db      	ldr	r3, [r3, #12]
34019a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34019a4a:	d004      	beq.n	34019a56 <HAL_XSPI_MemoryMapped+0xae>
34019a4c:	f240 71dd 	movw	r1, #2013	@ 0x7dd
34019a50:	4825      	ldr	r0, [pc, #148]	@ (34019ae8 <HAL_XSPI_MemoryMapped+0x140>)
34019a52:	f7e7 fdbd 	bl	340015d0 <assert_failed>

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
34019a56:	687b      	ldr	r3, [r7, #4]
34019a58:	681b      	ldr	r3, [r3, #0]
34019a5a:	681b      	ldr	r3, [r3, #0]
34019a5c:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
34019a60:	683b      	ldr	r3, [r7, #0]
34019a62:	689a      	ldr	r2, [r3, #8]
34019a64:	683b      	ldr	r3, [r7, #0]
34019a66:	68db      	ldr	r3, [r3, #12]
34019a68:	431a      	orrs	r2, r3
34019a6a:	687b      	ldr	r3, [r7, #4]
34019a6c:	681b      	ldr	r3, [r3, #0]
34019a6e:	430a      	orrs	r2, r1
34019a70:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
34019a72:	683b      	ldr	r3, [r7, #0]
34019a74:	681b      	ldr	r3, [r3, #0]
34019a76:	2b08      	cmp	r3, #8
34019a78:	d11b      	bne.n	34019ab2 <HAL_XSPI_MemoryMapped+0x10a>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
34019a7a:	683b      	ldr	r3, [r7, #0]
34019a7c:	685b      	ldr	r3, [r3, #4]
34019a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34019a82:	d304      	bcc.n	34019a8e <HAL_XSPI_MemoryMapped+0xe6>
34019a84:	f240 71e5 	movw	r1, #2021	@ 0x7e5
34019a88:	4817      	ldr	r0, [pc, #92]	@ (34019ae8 <HAL_XSPI_MemoryMapped+0x140>)
34019a8a:	f7e7 fda1 	bl	340015d0 <assert_failed>

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
34019a8e:	687b      	ldr	r3, [r7, #4]
34019a90:	681b      	ldr	r3, [r3, #0]
34019a92:	683a      	ldr	r2, [r7, #0]
34019a94:	6852      	ldr	r2, [r2, #4]
34019a96:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
34019a9a:	687b      	ldr	r3, [r7, #4]
34019a9c:	681b      	ldr	r3, [r3, #0]
34019a9e:	2210      	movs	r2, #16
34019aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
34019aa2:	687b      	ldr	r3, [r7, #4]
34019aa4:	681b      	ldr	r3, [r3, #0]
34019aa6:	681a      	ldr	r2, [r3, #0]
34019aa8:	687b      	ldr	r3, [r7, #4]
34019aaa:	681b      	ldr	r3, [r3, #0]
34019aac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
34019ab0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
34019ab2:	687b      	ldr	r3, [r7, #4]
34019ab4:	681b      	ldr	r3, [r3, #0]
34019ab6:	681b      	ldr	r3, [r3, #0]
34019ab8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34019abc:	f023 0308 	bic.w	r3, r3, #8
34019ac0:	683a      	ldr	r2, [r7, #0]
34019ac2:	6812      	ldr	r2, [r2, #0]
34019ac4:	431a      	orrs	r2, r3
34019ac6:	687b      	ldr	r3, [r7, #4]
34019ac8:	681b      	ldr	r3, [r3, #0]
34019aca:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
34019ace:	601a      	str	r2, [r3, #0]
34019ad0:	e004      	b.n	34019adc <HAL_XSPI_MemoryMapped+0x134>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
34019ad2:	2301      	movs	r3, #1
34019ad4:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34019ad6:	687b      	ldr	r3, [r7, #4]
34019ad8:	2210      	movs	r2, #16
34019ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34019adc:	7bfb      	ldrb	r3, [r7, #15]
}
34019ade:	4618      	mov	r0, r3
34019ae0:	3710      	adds	r7, #16
34019ae2:	46bd      	mov	sp, r7
34019ae4:	bd80      	pop	{r7, pc}
34019ae6:	bf00      	nop
34019ae8:	3401d92c 	.word	0x3401d92c

34019aec <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
34019aec:	b580      	push	{r7, lr}
34019aee:	b084      	sub	sp, #16
34019af0:	af00      	add	r7, sp, #0
34019af2:	6078      	str	r0, [r7, #4]
34019af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34019af6:	2300      	movs	r3, #0
34019af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
34019afa:	683b      	ldr	r3, [r7, #0]
34019afc:	2bff      	cmp	r3, #255	@ 0xff
34019afe:	d904      	bls.n	34019b0a <HAL_XSPI_SetClockPrescaler+0x1e>
34019b00:	f640 2193 	movw	r1, #2707	@ 0xa93
34019b04:	4810      	ldr	r0, [pc, #64]	@ (34019b48 <HAL_XSPI_SetClockPrescaler+0x5c>)
34019b06:	f7e7 fd63 	bl	340015d0 <assert_failed>

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
34019b0a:	687b      	ldr	r3, [r7, #4]
34019b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34019b0e:	f003 0308 	and.w	r3, r3, #8
34019b12:	2b00      	cmp	r3, #0
34019b14:	d10e      	bne.n	34019b34 <HAL_XSPI_SetClockPrescaler+0x48>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
34019b16:	687b      	ldr	r3, [r7, #4]
34019b18:	683a      	ldr	r2, [r7, #0]
34019b1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34019b1c:	687b      	ldr	r3, [r7, #4]
34019b1e:	681b      	ldr	r3, [r3, #0]
34019b20:	68db      	ldr	r3, [r3, #12]
34019b22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34019b26:	687b      	ldr	r3, [r7, #4]
34019b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34019b2a:	687b      	ldr	r3, [r7, #4]
34019b2c:	681b      	ldr	r3, [r3, #0]
34019b2e:	430a      	orrs	r2, r1
34019b30:	60da      	str	r2, [r3, #12]
34019b32:	e004      	b.n	34019b3e <HAL_XSPI_SetClockPrescaler+0x52>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
34019b34:	2301      	movs	r3, #1
34019b36:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34019b38:	687b      	ldr	r3, [r7, #4]
34019b3a:	2210      	movs	r2, #16
34019b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34019b3e:	7bfb      	ldrb	r3, [r7, #15]
}
34019b40:	4618      	mov	r0, r3
34019b42:	3710      	adds	r7, #16
34019b44:	46bd      	mov	sp, r7
34019b46:	bd80      	pop	{r7, pc}
34019b48:	3401d92c 	.word	0x3401d92c

34019b4c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
34019b4c:	b480      	push	{r7}
34019b4e:	b083      	sub	sp, #12
34019b50:	af00      	add	r7, sp, #0
34019b52:	6078      	str	r0, [r7, #4]
34019b54:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
34019b56:	687b      	ldr	r3, [r7, #4]
34019b58:	683a      	ldr	r2, [r7, #0]
34019b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
34019b5c:	2300      	movs	r3, #0
}
34019b5e:	4618      	mov	r0, r3
34019b60:	370c      	adds	r7, #12
34019b62:	46bd      	mov	sp, r7
34019b64:	f85d 7b04 	ldr.w	r7, [sp], #4
34019b68:	4770      	bx	lr

34019b6a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
34019b6a:	b580      	push	{r7, lr}
34019b6c:	b084      	sub	sp, #16
34019b6e:	af00      	add	r7, sp, #0
34019b70:	60f8      	str	r0, [r7, #12]
34019b72:	60b9      	str	r1, [r7, #8]
34019b74:	603b      	str	r3, [r7, #0]
34019b76:	4613      	mov	r3, r2
34019b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34019b7a:	e019      	b.n	34019bb0 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34019b7c:	69bb      	ldr	r3, [r7, #24]
34019b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34019b82:	d015      	beq.n	34019bb0 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34019b84:	f7ec fa52 	bl	3400602c <HAL_GetTick>
34019b88:	4602      	mov	r2, r0
34019b8a:	683b      	ldr	r3, [r7, #0]
34019b8c:	1ad3      	subs	r3, r2, r3
34019b8e:	69ba      	ldr	r2, [r7, #24]
34019b90:	429a      	cmp	r2, r3
34019b92:	d302      	bcc.n	34019b9a <XSPI_WaitFlagStateUntilTimeout+0x30>
34019b94:	69bb      	ldr	r3, [r7, #24]
34019b96:	2b00      	cmp	r3, #0
34019b98:	d10a      	bne.n	34019bb0 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
34019b9a:	68fb      	ldr	r3, [r7, #12]
34019b9c:	2202      	movs	r2, #2
34019b9e:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34019ba0:	68fb      	ldr	r3, [r7, #12]
34019ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34019ba4:	f043 0201 	orr.w	r2, r3, #1
34019ba8:	68fb      	ldr	r3, [r7, #12]
34019baa:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
34019bac:	2303      	movs	r3, #3
34019bae:	e00e      	b.n	34019bce <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34019bb0:	68fb      	ldr	r3, [r7, #12]
34019bb2:	681b      	ldr	r3, [r3, #0]
34019bb4:	6a1a      	ldr	r2, [r3, #32]
34019bb6:	68bb      	ldr	r3, [r7, #8]
34019bb8:	4013      	ands	r3, r2
34019bba:	2b00      	cmp	r3, #0
34019bbc:	bf14      	ite	ne
34019bbe:	2301      	movne	r3, #1
34019bc0:	2300      	moveq	r3, #0
34019bc2:	b2db      	uxtb	r3, r3
34019bc4:	461a      	mov	r2, r3
34019bc6:	79fb      	ldrb	r3, [r7, #7]
34019bc8:	429a      	cmp	r2, r3
34019bca:	d1d7      	bne.n	34019b7c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
34019bcc:	2300      	movs	r3, #0
}
34019bce:	4618      	mov	r0, r3
34019bd0:	3710      	adds	r7, #16
34019bd2:	46bd      	mov	sp, r7
34019bd4:	bd80      	pop	{r7, pc}
	...

34019bd8 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
34019bd8:	b580      	push	{r7, lr}
34019bda:	b088      	sub	sp, #32
34019bdc:	af00      	add	r7, sp, #0
34019bde:	6078      	str	r0, [r7, #4]
34019be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34019be2:	2300      	movs	r3, #0
34019be4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34019be6:	687b      	ldr	r3, [r7, #4]
34019be8:	681b      	ldr	r3, [r3, #0]
34019bea:	681a      	ldr	r2, [r3, #0]
34019bec:	687b      	ldr	r3, [r7, #4]
34019bee:	681b      	ldr	r3, [r3, #0]
34019bf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34019bf4:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34019bf6:	687b      	ldr	r3, [r7, #4]
34019bf8:	689b      	ldr	r3, [r3, #8]
34019bfa:	2b00      	cmp	r3, #0
34019bfc:	d12b      	bne.n	34019c56 <XSPI_ConfigCmd+0x7e>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34019bfe:	683b      	ldr	r3, [r7, #0]
34019c00:	685b      	ldr	r3, [r3, #4]
34019c02:	2b00      	cmp	r3, #0
34019c04:	d01c      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c06:	683b      	ldr	r3, [r7, #0]
34019c08:	685b      	ldr	r3, [r3, #4]
34019c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34019c0e:	d017      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c10:	683b      	ldr	r3, [r7, #0]
34019c12:	685b      	ldr	r3, [r3, #4]
34019c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34019c18:	d012      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c1a:	683b      	ldr	r3, [r7, #0]
34019c1c:	685b      	ldr	r3, [r3, #4]
34019c1e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
34019c22:	d00d      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c24:	683b      	ldr	r3, [r7, #0]
34019c26:	685b      	ldr	r3, [r3, #4]
34019c28:	2b00      	cmp	r3, #0
34019c2a:	d009      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c2c:	683b      	ldr	r3, [r7, #0]
34019c2e:	685b      	ldr	r3, [r3, #4]
34019c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34019c34:	d004      	beq.n	34019c40 <XSPI_ConfigCmd+0x68>
34019c36:	f640 41a4 	movw	r1, #3236	@ 0xca4
34019c3a:	4892      	ldr	r0, [pc, #584]	@ (34019e84 <XSPI_ConfigCmd+0x2ac>)
34019c3c:	f7e7 fcc8 	bl	340015d0 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
34019c40:	687b      	ldr	r3, [r7, #4]
34019c42:	681b      	ldr	r3, [r3, #0]
34019c44:	681b      	ldr	r3, [r3, #0]
34019c46:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
34019c4a:	683b      	ldr	r3, [r7, #0]
34019c4c:	685a      	ldr	r2, [r3, #4]
34019c4e:	687b      	ldr	r3, [r7, #4]
34019c50:	681b      	ldr	r3, [r3, #0]
34019c52:	430a      	orrs	r2, r1
34019c54:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34019c56:	683b      	ldr	r3, [r7, #0]
34019c58:	681b      	ldr	r3, [r3, #0]
34019c5a:	2b02      	cmp	r3, #2
34019c5c:	d114      	bne.n	34019c88 <XSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
34019c5e:	687b      	ldr	r3, [r7, #4]
34019c60:	681b      	ldr	r3, [r3, #0]
34019c62:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
34019c66:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
34019c68:	687b      	ldr	r3, [r7, #4]
34019c6a:	681b      	ldr	r3, [r3, #0]
34019c6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
34019c70:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
34019c72:	687b      	ldr	r3, [r7, #4]
34019c74:	681b      	ldr	r3, [r3, #0]
34019c76:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
34019c7a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
34019c7c:	687b      	ldr	r3, [r7, #4]
34019c7e:	681b      	ldr	r3, [r3, #0]
34019c80:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
34019c84:	60fb      	str	r3, [r7, #12]
34019c86:	e02c      	b.n	34019ce2 <XSPI_ConfigCmd+0x10a>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
34019c88:	683b      	ldr	r3, [r7, #0]
34019c8a:	681b      	ldr	r3, [r3, #0]
34019c8c:	2b03      	cmp	r3, #3
34019c8e:	d114      	bne.n	34019cba <XSPI_ConfigCmd+0xe2>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
34019c90:	687b      	ldr	r3, [r7, #4]
34019c92:	681b      	ldr	r3, [r3, #0]
34019c94:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
34019c98:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
34019c9a:	687b      	ldr	r3, [r7, #4]
34019c9c:	681b      	ldr	r3, [r3, #0]
34019c9e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
34019ca2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34019ca4:	687b      	ldr	r3, [r7, #4]
34019ca6:	681b      	ldr	r3, [r3, #0]
34019ca8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
34019cac:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
34019cae:	687b      	ldr	r3, [r7, #4]
34019cb0:	681b      	ldr	r3, [r3, #0]
34019cb2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
34019cb6:	60fb      	str	r3, [r7, #12]
34019cb8:	e013      	b.n	34019ce2 <XSPI_ConfigCmd+0x10a>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
34019cba:	687b      	ldr	r3, [r7, #4]
34019cbc:	681b      	ldr	r3, [r3, #0]
34019cbe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34019cc2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34019cc4:	687b      	ldr	r3, [r7, #4]
34019cc6:	681b      	ldr	r3, [r3, #0]
34019cc8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
34019ccc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
34019cce:	687b      	ldr	r3, [r7, #4]
34019cd0:	681b      	ldr	r3, [r3, #0]
34019cd2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
34019cd6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
34019cd8:	687b      	ldr	r3, [r7, #4]
34019cda:	681b      	ldr	r3, [r3, #0]
34019cdc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34019ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
34019ce2:	683b      	ldr	r3, [r7, #0]
34019ce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34019ce6:	69bb      	ldr	r3, [r7, #24]
34019ce8:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34019cea:	683b      	ldr	r3, [r7, #0]
34019cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019cee:	2b00      	cmp	r3, #0
34019cf0:	d012      	beq.n	34019d18 <XSPI_ConfigCmd+0x140>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
34019cf2:	683b      	ldr	r3, [r7, #0]
34019cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34019cf6:	68fb      	ldr	r3, [r7, #12]
34019cf8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
34019cfa:	69bb      	ldr	r3, [r7, #24]
34019cfc:	681b      	ldr	r3, [r3, #0]
34019cfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34019d02:	683b      	ldr	r3, [r7, #0]
34019d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
34019d06:	683b      	ldr	r3, [r7, #0]
34019d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34019d0a:	4319      	orrs	r1, r3
34019d0c:	683b      	ldr	r3, [r7, #0]
34019d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34019d10:	430b      	orrs	r3, r1
34019d12:	431a      	orrs	r2, r3
34019d14:	69bb      	ldr	r3, [r7, #24]
34019d16:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
34019d18:	697b      	ldr	r3, [r7, #20]
34019d1a:	681b      	ldr	r3, [r3, #0]
34019d1c:	f023 021f 	bic.w	r2, r3, #31
34019d20:	683b      	ldr	r3, [r7, #0]
34019d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34019d24:	431a      	orrs	r2, r3
34019d26:	697b      	ldr	r3, [r7, #20]
34019d28:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019d2a:	683b      	ldr	r3, [r7, #0]
34019d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019d2e:	2b00      	cmp	r3, #0
34019d30:	d009      	beq.n	34019d46 <XSPI_ConfigCmd+0x16e>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34019d32:	683b      	ldr	r3, [r7, #0]
34019d34:	681b      	ldr	r3, [r3, #0]
34019d36:	2b00      	cmp	r3, #0
34019d38:	d105      	bne.n	34019d46 <XSPI_ConfigCmd+0x16e>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
34019d3a:	683b      	ldr	r3, [r7, #0]
34019d3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
34019d3e:	687b      	ldr	r3, [r7, #4]
34019d40:	681b      	ldr	r3, [r3, #0]
34019d42:	3a01      	subs	r2, #1
34019d44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019d46:	683b      	ldr	r3, [r7, #0]
34019d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019d4a:	2b00      	cmp	r3, #0
34019d4c:	d01e      	beq.n	34019d8c <XSPI_ConfigCmd+0x1b4>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
34019d4e:	683b      	ldr	r3, [r7, #0]
34019d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34019d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34019d56:	d10a      	bne.n	34019d6e <XSPI_ConfigCmd+0x196>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34019d58:	687b      	ldr	r3, [r7, #4]
34019d5a:	681b      	ldr	r3, [r3, #0]
34019d5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34019d60:	687b      	ldr	r3, [r7, #4]
34019d62:	681b      	ldr	r3, [r3, #0]
34019d64:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34019d68:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
34019d6c:	e00e      	b.n	34019d8c <XSPI_ConfigCmd+0x1b4>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
34019d6e:	687b      	ldr	r3, [r7, #4]
34019d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34019d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34019d76:	d109      	bne.n	34019d8c <XSPI_ConfigCmd+0x1b4>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34019d78:	687b      	ldr	r3, [r7, #4]
34019d7a:	681b      	ldr	r3, [r3, #0]
34019d7c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34019d80:	687b      	ldr	r3, [r7, #4]
34019d82:	681b      	ldr	r3, [r3, #0]
34019d84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
34019d88:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34019d8c:	683b      	ldr	r3, [r7, #0]
34019d8e:	68db      	ldr	r3, [r3, #12]
34019d90:	2b00      	cmp	r3, #0
34019d92:	f000 809e 	beq.w	34019ed2 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34019d96:	683b      	ldr	r3, [r7, #0]
34019d98:	69db      	ldr	r3, [r3, #28]
34019d9a:	2b00      	cmp	r3, #0
34019d9c:	d055      	beq.n	34019e4a <XSPI_ConfigCmd+0x272>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019d9e:	683b      	ldr	r3, [r7, #0]
34019da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019da2:	2b00      	cmp	r3, #0
34019da4:	d01e      	beq.n	34019de4 <XSPI_ConfigCmd+0x20c>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34019da6:	69bb      	ldr	r3, [r7, #24]
34019da8:	681a      	ldr	r2, [r3, #0]
34019daa:	4b37      	ldr	r3, [pc, #220]	@ (34019e88 <XSPI_ConfigCmd+0x2b0>)
34019dac:	4013      	ands	r3, r2
34019dae:	683a      	ldr	r2, [r7, #0]
34019db0:	68d1      	ldr	r1, [r2, #12]
34019db2:	683a      	ldr	r2, [r7, #0]
34019db4:	6952      	ldr	r2, [r2, #20]
34019db6:	4311      	orrs	r1, r2
34019db8:	683a      	ldr	r2, [r7, #0]
34019dba:	6912      	ldr	r2, [r2, #16]
34019dbc:	4311      	orrs	r1, r2
34019dbe:	683a      	ldr	r2, [r7, #0]
34019dc0:	69d2      	ldr	r2, [r2, #28]
34019dc2:	4311      	orrs	r1, r2
34019dc4:	683a      	ldr	r2, [r7, #0]
34019dc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34019dc8:	4311      	orrs	r1, r2
34019dca:	683a      	ldr	r2, [r7, #0]
34019dcc:	6a12      	ldr	r2, [r2, #32]
34019dce:	4311      	orrs	r1, r2
34019dd0:	683a      	ldr	r2, [r7, #0]
34019dd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34019dd4:	4311      	orrs	r1, r2
34019dd6:	683a      	ldr	r2, [r7, #0]
34019dd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34019dda:	430a      	orrs	r2, r1
34019ddc:	431a      	orrs	r2, r3
34019dde:	69bb      	ldr	r3, [r7, #24]
34019de0:	601a      	str	r2, [r3, #0]
34019de2:	e028      	b.n	34019e36 <XSPI_ConfigCmd+0x25e>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34019de4:	69bb      	ldr	r3, [r7, #24]
34019de6:	681b      	ldr	r3, [r3, #0]
34019de8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34019dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34019df0:	683a      	ldr	r2, [r7, #0]
34019df2:	68d1      	ldr	r1, [r2, #12]
34019df4:	683a      	ldr	r2, [r7, #0]
34019df6:	6952      	ldr	r2, [r2, #20]
34019df8:	4311      	orrs	r1, r2
34019dfa:	683a      	ldr	r2, [r7, #0]
34019dfc:	6912      	ldr	r2, [r2, #16]
34019dfe:	4311      	orrs	r1, r2
34019e00:	683a      	ldr	r2, [r7, #0]
34019e02:	69d2      	ldr	r2, [r2, #28]
34019e04:	4311      	orrs	r1, r2
34019e06:	683a      	ldr	r2, [r7, #0]
34019e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34019e0a:	4311      	orrs	r1, r2
34019e0c:	683a      	ldr	r2, [r7, #0]
34019e0e:	6a12      	ldr	r2, [r2, #32]
34019e10:	430a      	orrs	r2, r1
34019e12:	431a      	orrs	r2, r3
34019e14:	69bb      	ldr	r3, [r7, #24]
34019e16:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34019e18:	687b      	ldr	r3, [r7, #4]
34019e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34019e20:	d109      	bne.n	34019e36 <XSPI_ConfigCmd+0x25e>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34019e22:	683b      	ldr	r3, [r7, #0]
34019e24:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34019e26:	2b08      	cmp	r3, #8
34019e28:	d105      	bne.n	34019e36 <XSPI_ConfigCmd+0x25e>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34019e2a:	69bb      	ldr	r3, [r7, #24]
34019e2c:	681b      	ldr	r3, [r3, #0]
34019e2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34019e32:	69bb      	ldr	r3, [r7, #24]
34019e34:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34019e36:	683b      	ldr	r3, [r7, #0]
34019e38:	689a      	ldr	r2, [r3, #8]
34019e3a:	693b      	ldr	r3, [r7, #16]
34019e3c:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
34019e3e:	687b      	ldr	r3, [r7, #4]
34019e40:	681b      	ldr	r3, [r3, #0]
34019e42:	683a      	ldr	r2, [r7, #0]
34019e44:	6992      	ldr	r2, [r2, #24]
34019e46:	649a      	str	r2, [r3, #72]	@ 0x48
34019e48:	e07d      	b.n	34019f46 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019e4a:	683b      	ldr	r3, [r7, #0]
34019e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019e4e:	2b00      	cmp	r3, #0
34019e50:	d01c      	beq.n	34019e8c <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
34019e52:	69bb      	ldr	r3, [r7, #24]
34019e54:	681b      	ldr	r3, [r3, #0]
34019e56:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34019e5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34019e5e:	683a      	ldr	r2, [r7, #0]
34019e60:	68d1      	ldr	r1, [r2, #12]
34019e62:	683a      	ldr	r2, [r7, #0]
34019e64:	6952      	ldr	r2, [r2, #20]
34019e66:	4311      	orrs	r1, r2
34019e68:	683a      	ldr	r2, [r7, #0]
34019e6a:	6912      	ldr	r2, [r2, #16]
34019e6c:	4311      	orrs	r1, r2
34019e6e:	683a      	ldr	r2, [r7, #0]
34019e70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34019e72:	4311      	orrs	r1, r2
34019e74:	683a      	ldr	r2, [r7, #0]
34019e76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34019e78:	430a      	orrs	r2, r1
34019e7a:	431a      	orrs	r2, r3
34019e7c:	69bb      	ldr	r3, [r7, #24]
34019e7e:	601a      	str	r2, [r3, #0]
34019e80:	e022      	b.n	34019ec8 <XSPI_ConfigCmd+0x2f0>
34019e82:	bf00      	nop
34019e84:	3401d92c 	.word	0x3401d92c
34019e88:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
34019e8c:	69bb      	ldr	r3, [r7, #24]
34019e8e:	681b      	ldr	r3, [r3, #0]
34019e90:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34019e94:	683b      	ldr	r3, [r7, #0]
34019e96:	68d9      	ldr	r1, [r3, #12]
34019e98:	683b      	ldr	r3, [r7, #0]
34019e9a:	695b      	ldr	r3, [r3, #20]
34019e9c:	4319      	orrs	r1, r3
34019e9e:	683b      	ldr	r3, [r7, #0]
34019ea0:	691b      	ldr	r3, [r3, #16]
34019ea2:	430b      	orrs	r3, r1
34019ea4:	431a      	orrs	r2, r3
34019ea6:	69bb      	ldr	r3, [r7, #24]
34019ea8:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34019eaa:	687b      	ldr	r3, [r7, #4]
34019eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34019eb2:	d109      	bne.n	34019ec8 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34019eb4:	683b      	ldr	r3, [r7, #0]
34019eb6:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34019eb8:	2b08      	cmp	r3, #8
34019eba:	d105      	bne.n	34019ec8 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34019ebc:	69bb      	ldr	r3, [r7, #24]
34019ebe:	681b      	ldr	r3, [r3, #0]
34019ec0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34019ec4:	69bb      	ldr	r3, [r7, #24]
34019ec6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34019ec8:	683b      	ldr	r3, [r7, #0]
34019eca:	689a      	ldr	r2, [r3, #8]
34019ecc:	693b      	ldr	r3, [r7, #16]
34019ece:	601a      	str	r2, [r3, #0]
34019ed0:	e039      	b.n	34019f46 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34019ed2:	683b      	ldr	r3, [r7, #0]
34019ed4:	69db      	ldr	r3, [r3, #28]
34019ed6:	2b00      	cmp	r3, #0
34019ed8:	d030      	beq.n	34019f3c <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34019eda:	683b      	ldr	r3, [r7, #0]
34019edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019ede:	2b00      	cmp	r3, #0
34019ee0:	d017      	beq.n	34019f12 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
34019ee2:	69bb      	ldr	r3, [r7, #24]
34019ee4:	681b      	ldr	r3, [r3, #0]
34019ee6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34019eea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34019eee:	683a      	ldr	r2, [r7, #0]
34019ef0:	69d1      	ldr	r1, [r2, #28]
34019ef2:	683a      	ldr	r2, [r7, #0]
34019ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34019ef6:	4311      	orrs	r1, r2
34019ef8:	683a      	ldr	r2, [r7, #0]
34019efa:	6a12      	ldr	r2, [r2, #32]
34019efc:	4311      	orrs	r1, r2
34019efe:	683a      	ldr	r2, [r7, #0]
34019f00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34019f02:	4311      	orrs	r1, r2
34019f04:	683a      	ldr	r2, [r7, #0]
34019f06:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34019f08:	430a      	orrs	r2, r1
34019f0a:	431a      	orrs	r2, r3
34019f0c:	69bb      	ldr	r3, [r7, #24]
34019f0e:	601a      	str	r2, [r3, #0]
34019f10:	e00e      	b.n	34019f30 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
34019f12:	69bb      	ldr	r3, [r7, #24]
34019f14:	681b      	ldr	r3, [r3, #0]
34019f16:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
34019f1a:	683b      	ldr	r3, [r7, #0]
34019f1c:	69d9      	ldr	r1, [r3, #28]
34019f1e:	683b      	ldr	r3, [r7, #0]
34019f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019f22:	4319      	orrs	r1, r3
34019f24:	683b      	ldr	r3, [r7, #0]
34019f26:	6a1b      	ldr	r3, [r3, #32]
34019f28:	430b      	orrs	r3, r1
34019f2a:	431a      	orrs	r2, r3
34019f2c:	69bb      	ldr	r3, [r7, #24]
34019f2e:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
34019f30:	687b      	ldr	r3, [r7, #4]
34019f32:	681b      	ldr	r3, [r3, #0]
34019f34:	683a      	ldr	r2, [r7, #0]
34019f36:	6992      	ldr	r2, [r2, #24]
34019f38:	649a      	str	r2, [r3, #72]	@ 0x48
34019f3a:	e004      	b.n	34019f46 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
34019f3c:	2301      	movs	r3, #1
34019f3e:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34019f40:	687b      	ldr	r3, [r7, #4]
34019f42:	2208      	movs	r2, #8
34019f44:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34019f46:	7ffb      	ldrb	r3, [r7, #31]
}
34019f48:	4618      	mov	r0, r3
34019f4a:	3720      	adds	r7, #32
34019f4c:	46bd      	mov	sp, r7
34019f4e:	bd80      	pop	{r7, pc}

34019f50 <CMW_CAMERA_GetDCMIPPHandle>:
static void CMW_CAMERA_PwrDown(void);
static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch);
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
34019f50:	b480      	push	{r7}
34019f52:	af00      	add	r7, sp, #0
    return &hcamera_dcmipp;
34019f54:	4b02      	ldr	r3, [pc, #8]	@ (34019f60 <CMW_CAMERA_GetDCMIPPHandle+0x10>)
}
34019f56:	4618      	mov	r0, r3
34019f58:	46bd      	mov	sp, r7
34019f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34019f5e:	4770      	bx	lr
34019f60:	3401eae4 	.word	0x3401eae4

34019f64 <CMW_CAMERA_PIPE_VsyncEventCallback>:
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
34019f64:	b480      	push	{r7}
34019f66:	b083      	sub	sp, #12
34019f68:	af00      	add	r7, sp, #0
34019f6a:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34019f6c:	2300      	movs	r3, #0
}
34019f6e:	4618      	mov	r0, r3
34019f70:	370c      	adds	r7, #12
34019f72:	46bd      	mov	sp, r7
34019f74:	f85d 7b04 	ldr.w	r7, [sp], #4
34019f78:	4770      	bx	lr

34019f7a <CMW_CAMERA_PIPE_FrameEventCallback>:
 * @brief  Frame Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
34019f7a:	b480      	push	{r7}
34019f7c:	b083      	sub	sp, #12
34019f7e:	af00      	add	r7, sp, #0
34019f80:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34019f82:	2300      	movs	r3, #0
}
34019f84:	4618      	mov	r0, r3
34019f86:	370c      	adds	r7, #12
34019f88:	46bd      	mov	sp, r7
34019f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34019f8e:	4770      	bx	lr

34019f90 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34019f90:	b580      	push	{r7, lr}
34019f92:	b082      	sub	sp, #8
34019f94:	af00      	add	r7, sp, #0
34019f96:	6078      	str	r0, [r7, #4]
34019f98:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
34019f9a:	4b08      	ldr	r3, [pc, #32]	@ (34019fbc <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34019f9c:	691b      	ldr	r3, [r3, #16]
34019f9e:	2b00      	cmp	r3, #0
34019fa0:	d004      	beq.n	34019fac <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34019fa2:	4b06      	ldr	r3, [pc, #24]	@ (34019fbc <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34019fa4:	691b      	ldr	r3, [r3, #16]
34019fa6:	6839      	ldr	r1, [r7, #0]
34019fa8:	4805      	ldr	r0, [pc, #20]	@ (34019fc0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x30>)
34019faa:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
34019fac:	6838      	ldr	r0, [r7, #0]
34019fae:	f7ff ffd9 	bl	34019f64 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34019fb2:	bf00      	nop
34019fb4:	3708      	adds	r7, #8
34019fb6:	46bd      	mov	sp, r7
34019fb8:	bd80      	pop	{r7, pc}
34019fba:	bf00      	nop
34019fbc:	3401eaf0 	.word	0x3401eaf0
34019fc0:	3401eb58 	.word	0x3401eb58

34019fc4 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34019fc4:	b580      	push	{r7, lr}
34019fc6:	b082      	sub	sp, #8
34019fc8:	af00      	add	r7, sp, #0
34019fca:	6078      	str	r0, [r7, #4]
34019fcc:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
34019fce:	4b08      	ldr	r3, [pc, #32]	@ (34019ff0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34019fd0:	695b      	ldr	r3, [r3, #20]
34019fd2:	2b00      	cmp	r3, #0
34019fd4:	d004      	beq.n	34019fe0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34019fd6:	4b06      	ldr	r3, [pc, #24]	@ (34019ff0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34019fd8:	695b      	ldr	r3, [r3, #20]
34019fda:	6839      	ldr	r1, [r7, #0]
34019fdc:	4805      	ldr	r0, [pc, #20]	@ (34019ff4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x30>)
34019fde:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
34019fe0:	6838      	ldr	r0, [r7, #0]
34019fe2:	f7ff ffca 	bl	34019f7a <CMW_CAMERA_PIPE_FrameEventCallback>
}
34019fe6:	bf00      	nop
34019fe8:	3708      	adds	r7, #8
34019fea:	46bd      	mov	sp, r7
34019fec:	bd80      	pop	{r7, pc}
34019fee:	bf00      	nop
34019ff0:	3401eaf0 	.word	0x3401eaf0
34019ff4:	3401eb58 	.word	0x3401eb58

34019ff8 <DMA2D_IRQHandler>:
                                   ctx->layers[0].size.height);
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
34019ff8:	b580      	push	{r7, lr}
34019ffa:	af00      	add	r7, sp, #0
  HAL_DMA2D_IRQHandler(dma2d_current);
34019ffc:	4b03      	ldr	r3, [pc, #12]	@ (3401a00c <DMA2D_IRQHandler+0x14>)
34019ffe:	681b      	ldr	r3, [r3, #0]
3401a000:	4618      	mov	r0, r3
3401a002:	f7ed fcca 	bl	3400799a <HAL_DMA2D_IRQHandler>
}
3401a006:	bf00      	nop
3401a008:	bd80      	pop	{r7, pc}
3401a00a:	bf00      	nop
3401a00c:	3401ec9c 	.word	0x3401ec9c

3401a010 <spi_transfert_data_deinit>:
  ctx->len = w * h * 2;
  LCD_CS_LOW();
}

static void spi_transfert_data_deinit(struct scrl_spi_ctx *ctx)
{
3401a010:	b480      	push	{r7}
3401a012:	b083      	sub	sp, #12
3401a014:	af00      	add	r7, sp, #0
3401a016:	6078      	str	r0, [r7, #4]
  LCD_CS_HIGH();
3401a018:	4b04      	ldr	r3, [pc, #16]	@ (3401a02c <spi_transfert_data_deinit+0x1c>)
3401a01a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3401a01e:	619a      	str	r2, [r3, #24]
}
3401a020:	bf00      	nop
3401a022:	370c      	adds	r7, #12
3401a024:	46bd      	mov	sp, r7
3401a026:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a02a:	4770      	bx	lr
3401a02c:	56020c00 	.word	0x56020c00

3401a030 <spi_transfert_data_chunck_start>:

static void spi_transfert_data_chunck_start(struct scrl_spi_ctx *ctx)
{
3401a030:	b580      	push	{r7, lr}
3401a032:	b084      	sub	sp, #16
3401a034:	af00      	add	r7, sp, #0
3401a036:	6078      	str	r0, [r7, #4]
  uint16_t size = MIN(ctx->len, 63 * 1024);
3401a038:	687b      	ldr	r3, [r7, #4]
3401a03a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3401a03e:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
3401a042:	bfa8      	it	ge
3401a044:	f44f 437c 	movge.w	r3, #64512	@ 0xfc00
3401a048:	81fb      	strh	r3, [r7, #14]
  int ret;

  ret = HAL_SPI_Transmit_DMA(&hspi, ctx->data, size);
3401a04a:	687b      	ldr	r3, [r7, #4]
3401a04c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3401a050:	89fa      	ldrh	r2, [r7, #14]
3401a052:	4619      	mov	r1, r3
3401a054:	4810      	ldr	r0, [pc, #64]	@ (3401a098 <spi_transfert_data_chunck_start+0x68>)
3401a056:	f7fd f893 	bl	34017180 <HAL_SPI_Transmit_DMA>
3401a05a:	4603      	mov	r3, r0
3401a05c:	60bb      	str	r3, [r7, #8]
  assert(ret == HAL_OK);
3401a05e:	68bb      	ldr	r3, [r7, #8]
3401a060:	2b00      	cmp	r3, #0
3401a062:	d005      	beq.n	3401a070 <spi_transfert_data_chunck_start+0x40>
3401a064:	4b0d      	ldr	r3, [pc, #52]	@ (3401a09c <spi_transfert_data_chunck_start+0x6c>)
3401a066:	4a0e      	ldr	r2, [pc, #56]	@ (3401a0a0 <spi_transfert_data_chunck_start+0x70>)
3401a068:	219e      	movs	r1, #158	@ 0x9e
3401a06a:	480e      	ldr	r0, [pc, #56]	@ (3401a0a4 <spi_transfert_data_chunck_start+0x74>)
3401a06c:	f000 fab6 	bl	3401a5dc <__assert_func>

  ctx->len -= size;
3401a070:	687b      	ldr	r3, [r7, #4]
3401a072:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3401a076:	89fb      	ldrh	r3, [r7, #14]
3401a078:	1ad2      	subs	r2, r2, r3
3401a07a:	687b      	ldr	r3, [r7, #4]
3401a07c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ctx->data += size;
3401a080:	687b      	ldr	r3, [r7, #4]
3401a082:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3401a086:	89fb      	ldrh	r3, [r7, #14]
3401a088:	441a      	add	r2, r3
3401a08a:	687b      	ldr	r3, [r7, #4]
3401a08c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
3401a090:	bf00      	nop
3401a092:	3710      	adds	r7, #16
3401a094:	46bd      	mov	sp, r7
3401a096:	bd80      	pop	{r7, pc}
3401a098:	3401ed58 	.word	0x3401ed58
3401a09c:	3401d9d8 	.word	0x3401d9d8
3401a0a0:	3401e330 	.word	0x3401e330
3401a0a4:	3401d9e8 	.word	0x3401d9e8

3401a0a8 <HAL_SPI_TxCpltCallback>:
  ret = xSemaphoreGive(ctx->dma_sem);
  assert(ret == pdTRUE);
}
#else
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
3401a0a8:	b580      	push	{r7, lr}
3401a0aa:	b084      	sub	sp, #16
3401a0ac:	af00      	add	r7, sp, #0
3401a0ae:	6078      	str	r0, [r7, #4]
  struct scrl_spi_ctx *ctx = &scrl_ctx;
3401a0b0:	4b0a      	ldr	r3, [pc, #40]	@ (3401a0dc <HAL_SPI_TxCpltCallback+0x34>)
3401a0b2:	60fb      	str	r3, [r7, #12]

  if (ctx->len) {
3401a0b4:	68fb      	ldr	r3, [r7, #12]
3401a0b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3401a0ba:	2b00      	cmp	r3, #0
3401a0bc:	d003      	beq.n	3401a0c6 <HAL_SPI_TxCpltCallback+0x1e>
    spi_transfert_data_chunck_start(ctx);
3401a0be:	68f8      	ldr	r0, [r7, #12]
3401a0c0:	f7ff ffb6 	bl	3401a030 <spi_transfert_data_chunck_start>
  } else {
    spi_transfert_data_deinit(ctx);
    ctx->is_screen_ready_to_update = 1;
  }
}
3401a0c4:	e006      	b.n	3401a0d4 <HAL_SPI_TxCpltCallback+0x2c>
    spi_transfert_data_deinit(ctx);
3401a0c6:	68f8      	ldr	r0, [r7, #12]
3401a0c8:	f7ff ffa2 	bl	3401a010 <spi_transfert_data_deinit>
    ctx->is_screen_ready_to_update = 1;
3401a0cc:	68fb      	ldr	r3, [r7, #12]
3401a0ce:	2201      	movs	r2, #1
3401a0d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
3401a0d4:	bf00      	nop
3401a0d6:	3710      	adds	r7, #16
3401a0d8:	46bd      	mov	sp, r7
3401a0da:	bd80      	pop	{r7, pc}
3401a0dc:	3401eca0 	.word	0x3401eca0

3401a0e0 <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
3401a0e0:	b580      	push	{r7, lr}
3401a0e2:	b082      	sub	sp, #8
3401a0e4:	af00      	add	r7, sp, #0
3401a0e6:	6078      	str	r0, [r7, #4]
  assert(0);
3401a0e8:	4b03      	ldr	r3, [pc, #12]	@ (3401a0f8 <HAL_SPI_ErrorCallback+0x18>)
3401a0ea:	4a04      	ldr	r2, [pc, #16]	@ (3401a0fc <HAL_SPI_ErrorCallback+0x1c>)
3401a0ec:	f44f 7123 	mov.w	r1, #652	@ 0x28c
3401a0f0:	4803      	ldr	r0, [pc, #12]	@ (3401a100 <HAL_SPI_ErrorCallback+0x20>)
3401a0f2:	f000 fa73 	bl	3401a5dc <__assert_func>
3401a0f6:	bf00      	nop
3401a0f8:	3401da70 	.word	0x3401da70
3401a0fc:	3401e350 	.word	0x3401e350
3401a100:	3401d9e8 	.word	0x3401d9e8

3401a104 <SPI5_IRQHandler>:
}

void SPI5_IRQHandler(void)
{
3401a104:	b580      	push	{r7, lr}
3401a106:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
3401a108:	4802      	ldr	r0, [pc, #8]	@ (3401a114 <SPI5_IRQHandler+0x10>)
3401a10a:	f7fd fa17 	bl	3401753c <HAL_SPI_IRQHandler>
}
3401a10e:	bf00      	nop
3401a110:	bd80      	pop	{r7, pc}
3401a112:	bf00      	nop
3401a114:	3401ed58 	.word	0x3401ed58

3401a118 <HPDMA1_Channel12_IRQHandler>:

void HPDMA1_Channel12_IRQHandler(void)
{
3401a118:	b580      	push	{r7, lr}
3401a11a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma);
3401a11c:	4802      	ldr	r0, [pc, #8]	@ (3401a128 <HPDMA1_Channel12_IRQHandler+0x10>)
3401a11e:	f7ed faa2 	bl	34007666 <HAL_DMA_IRQHandler>
}
3401a122:	bf00      	nop
3401a124:	bd80      	pop	{r7, pc}
3401a126:	bf00      	nop
3401a128:	3401ede8 	.word	0x3401ede8

3401a12c <EpochBlock_IsEpochBlob>:
  {
    return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
  }

  static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
  {
3401a12c:	b480      	push	{r7}
3401a12e:	b083      	sub	sp, #12
3401a130:	af00      	add	r7, sp, #0
3401a132:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_blob) != 0);
3401a134:	687b      	ldr	r3, [r7, #4]
3401a136:	8a1b      	ldrh	r3, [r3, #16]
3401a138:	f003 0304 	and.w	r3, r3, #4
3401a13c:	2b00      	cmp	r3, #0
3401a13e:	bf14      	ite	ne
3401a140:	2301      	movne	r3, #1
3401a142:	2300      	moveq	r3, #0
3401a144:	b2db      	uxtb	r3, r3
  }
3401a146:	4618      	mov	r0, r3
3401a148:	370c      	adds	r7, #12
3401a14a:	46bd      	mov	sp, r7
3401a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a150:	4770      	bx	lr
	...

3401a154 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3401a154:	b580      	push	{r7, lr}
3401a156:	b082      	sub	sp, #8
3401a158:	af00      	add	r7, sp, #0
3401a15a:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3401a15c:	6878      	ldr	r0, [r7, #4]
3401a15e:	f7ff ffe5 	bl	3401a12c <EpochBlock_IsEpochBlob>
3401a162:	4603      	mov	r3, r0
3401a164:	2b00      	cmp	r3, #0
3401a166:	d106      	bne.n	3401a176 <EpochBlock_EpochControllerUnit+0x22>
3401a168:	4b06      	ldr	r3, [pc, #24]	@ (3401a184 <EpochBlock_EpochControllerUnit+0x30>)
3401a16a:	4a07      	ldr	r2, [pc, #28]	@ (3401a188 <EpochBlock_EpochControllerUnit+0x34>)
3401a16c:	f240 212f 	movw	r1, #559	@ 0x22f
3401a170:	4806      	ldr	r0, [pc, #24]	@ (3401a18c <EpochBlock_EpochControllerUnit+0x38>)
3401a172:	f000 fa33 	bl	3401a5dc <__assert_func>
    return eb->wait_mask;
3401a176:	687b      	ldr	r3, [r7, #4]
3401a178:	68db      	ldr	r3, [r3, #12]
  }
3401a17a:	4618      	mov	r0, r3
3401a17c:	3708      	adds	r7, #8
3401a17e:	46bd      	mov	sp, r7
3401a180:	bd80      	pop	{r7, pc}
3401a182:	bf00      	nop
3401a184:	3401da80 	.word	0x3401da80
3401a188:	3401e368 	.word	0x3401e368
3401a18c:	3401da9c 	.word	0x3401da9c

3401a190 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
3401a190:	b480      	push	{r7}
3401a192:	af00      	add	r7, sp, #0
3401a194:	bf00      	nop
3401a196:	46bd      	mov	sp, r7
3401a198:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a19c:	4770      	bx	lr
	...

3401a1a0 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401a1a0:	b5b0      	push	{r4, r5, r7, lr}
3401a1a2:	b086      	sub	sp, #24
3401a1a4:	af00      	add	r7, sp, #0
3401a1a6:	6078      	str	r0, [r7, #4]
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3401a1a8:	687b      	ldr	r3, [r7, #4]
3401a1aa:	2b00      	cmp	r3, #0
3401a1ac:	f000 8095 	beq.w	3401a2da <__LL_ATON_RT_IrqErr+0x13a>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3401a1b0:	687a      	ldr	r2, [r7, #4]
3401a1b2:	4b4c      	ldr	r3, [pc, #304]	@ (3401a2e4 <__LL_ATON_RT_IrqErr+0x144>)
3401a1b4:	4013      	ands	r3, r2
3401a1b6:	2b00      	cmp	r3, #0
3401a1b8:	d013      	beq.n	3401a1e2 <__LL_ATON_RT_IrqErr+0x42>
    int64_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#else                    //(ATON_INT_NR <= 32)
    int32_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#endif                   //(ATON_INT_NR <= 32)

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));
3401a1ba:	687a      	ldr	r2, [r7, #4]
3401a1bc:	4b49      	ldr	r3, [pc, #292]	@ (3401a2e4 <__LL_ATON_RT_IrqErr+0x144>)
3401a1be:	4013      	ands	r3, r2
3401a1c0:	613b      	str	r3, [r7, #16]

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3401a1c2:	693b      	ldr	r3, [r7, #16]
3401a1c4:	425a      	negs	r2, r3
3401a1c6:	693b      	ldr	r3, [r7, #16]
3401a1c8:	4013      	ands	r3, r2
3401a1ca:	60fb      	str	r3, [r7, #12]
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3401a1cc:	68fb      	ldr	r3, [r7, #12]
3401a1ce:	031a      	lsls	r2, r3, #12
3401a1d0:	4b45      	ldr	r3, [pc, #276]	@ (3401a2e8 <__LL_ATON_RT_IrqErr+0x148>)
3401a1d2:	4413      	add	r3, r2
3401a1d4:	681b      	ldr	r3, [r3, #0]
3401a1d6:	60bb      	str	r3, [r7, #8]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3401a1d8:	68ba      	ldr	r2, [r7, #8]
3401a1da:	68f9      	ldr	r1, [r7, #12]
3401a1dc:	4843      	ldr	r0, [pc, #268]	@ (3401a2ec <__LL_ATON_RT_IrqErr+0x14c>)
3401a1de:	f001 f89d 	bl	3401b31c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3401a1e2:	687b      	ldr	r3, [r7, #4]
3401a1e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
3401a1e8:	2b00      	cmp	r3, #0
3401a1ea:	d002      	beq.n	3401a1f2 <__LL_ATON_RT_IrqErr+0x52>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3401a1ec:	4840      	ldr	r0, [pc, #256]	@ (3401a2f0 <__LL_ATON_RT_IrqErr+0x150>)
3401a1ee:	f001 f8fd 	bl	3401b3ec <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3401a1f2:	687b      	ldr	r3, [r7, #4]
3401a1f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
3401a1f8:	2b00      	cmp	r3, #0
3401a1fa:	d002      	beq.n	3401a202 <__LL_ATON_RT_IrqErr+0x62>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3401a1fc:	483d      	ldr	r0, [pc, #244]	@ (3401a2f4 <__LL_ATON_RT_IrqErr+0x154>)
3401a1fe:	f001 f8f5 	bl	3401b3ec <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3401a202:	687b      	ldr	r3, [r7, #4]
3401a204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3401a208:	2b00      	cmp	r3, #0
3401a20a:	d002      	beq.n	3401a212 <__LL_ATON_RT_IrqErr+0x72>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3401a20c:	483a      	ldr	r0, [pc, #232]	@ (3401a2f8 <__LL_ATON_RT_IrqErr+0x158>)
3401a20e:	f001 f8ed 	bl	3401b3ec <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3401a212:	687b      	ldr	r3, [r7, #4]
3401a214:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
3401a218:	2b00      	cmp	r3, #0
3401a21a:	d015      	beq.n	3401a248 <__LL_ATON_RT_IrqErr+0xa8>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3401a21c:	4837      	ldr	r0, [pc, #220]	@ (3401a2fc <__LL_ATON_RT_IrqErr+0x15c>)
3401a21e:	f001 f8e5 	bl	3401b3ec <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401a222:	2300      	movs	r3, #0
3401a224:	617b      	str	r3, [r7, #20]
3401a226:	e00c      	b.n	3401a242 <__LL_ATON_RT_IrqErr+0xa2>
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3401a228:	697b      	ldr	r3, [r7, #20]
3401a22a:	031a      	lsls	r2, r3, #12
3401a22c:	4b34      	ldr	r3, [pc, #208]	@ (3401a300 <__LL_ATON_RT_IrqErr+0x160>)
3401a22e:	4413      	add	r3, r2
3401a230:	681b      	ldr	r3, [r3, #0]
3401a232:	461a      	mov	r2, r3
3401a234:	6979      	ldr	r1, [r7, #20]
3401a236:	4833      	ldr	r0, [pc, #204]	@ (3401a304 <__LL_ATON_RT_IrqErr+0x164>)
3401a238:	f001 f870 	bl	3401b31c <iprintf>
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401a23c:	697b      	ldr	r3, [r7, #20]
3401a23e:	3301      	adds	r3, #1
3401a240:	617b      	str	r3, [r7, #20]
3401a242:	697b      	ldr	r3, [r7, #20]
3401a244:	2b01      	cmp	r3, #1
3401a246:	ddef      	ble.n	3401a228 <__LL_ATON_RT_IrqErr+0x88>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3401a248:	687b      	ldr	r3, [r7, #4]
3401a24a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3401a24e:	2b00      	cmp	r3, #0
3401a250:	d002      	beq.n	3401a258 <__LL_ATON_RT_IrqErr+0xb8>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3401a252:	482d      	ldr	r0, [pc, #180]	@ (3401a308 <__LL_ATON_RT_IrqErr+0x168>)
3401a254:	f001 f8ca 	bl	3401b3ec <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3401a258:	687b      	ldr	r3, [r7, #4]
3401a25a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401a25e:	2b00      	cmp	r3, #0
3401a260:	d011      	beq.n	3401a286 <__LL_ATON_RT_IrqErr+0xe6>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3401a262:	4b2a      	ldr	r3, [pc, #168]	@ (3401a30c <__LL_ATON_RT_IrqErr+0x16c>)
3401a264:	681b      	ldr	r3, [r3, #0]
3401a266:	4619      	mov	r1, r3
3401a268:	4829      	ldr	r0, [pc, #164]	@ (3401a310 <__LL_ATON_RT_IrqErr+0x170>)
3401a26a:	f001 f857 	bl	3401b31c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3401a26e:	4b29      	ldr	r3, [pc, #164]	@ (3401a314 <__LL_ATON_RT_IrqErr+0x174>)
3401a270:	681b      	ldr	r3, [r3, #0]
3401a272:	4619      	mov	r1, r3
3401a274:	4828      	ldr	r0, [pc, #160]	@ (3401a318 <__LL_ATON_RT_IrqErr+0x178>)
3401a276:	f001 f851 	bl	3401b31c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3401a27a:	4b28      	ldr	r3, [pc, #160]	@ (3401a31c <__LL_ATON_RT_IrqErr+0x17c>)
3401a27c:	681b      	ldr	r3, [r3, #0]
3401a27e:	4619      	mov	r1, r3
3401a280:	4827      	ldr	r0, [pc, #156]	@ (3401a320 <__LL_ATON_RT_IrqErr+0x180>)
3401a282:	f001 f84b 	bl	3401b31c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3401a286:	687b      	ldr	r3, [r7, #4]
3401a288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3401a28c:	2b00      	cmp	r3, #0
3401a28e:	d002      	beq.n	3401a296 <__LL_ATON_RT_IrqErr+0xf6>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3401a290:	4824      	ldr	r0, [pc, #144]	@ (3401a324 <__LL_ATON_RT_IrqErr+0x184>)
3401a292:	f001 f8ab 	bl	3401b3ec <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3401a296:	687b      	ldr	r3, [r7, #4]
3401a298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
3401a29c:	2b00      	cmp	r3, #0
3401a29e:	d002      	beq.n	3401a2a6 <__LL_ATON_RT_IrqErr+0x106>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3401a2a0:	4821      	ldr	r0, [pc, #132]	@ (3401a328 <__LL_ATON_RT_IrqErr+0x188>)
3401a2a2:	f001 f8a3 	bl	3401b3ec <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3401a2a6:	f7ff ff73 	bl	3401a190 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3401a2aa:	687b      	ldr	r3, [r7, #4]
3401a2ac:	2200      	movs	r2, #0
3401a2ae:	461c      	mov	r4, r3
3401a2b0:	4615      	mov	r5, r2
3401a2b2:	4622      	mov	r2, r4
3401a2b4:	462b      	mov	r3, r5
3401a2b6:	f240 314a 	movw	r1, #842	@ 0x34a
3401a2ba:	481c      	ldr	r0, [pc, #112]	@ (3401a32c <__LL_ATON_RT_IrqErr+0x18c>)
3401a2bc:	f001 f82e 	bl	3401b31c <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3401a2c0:	4b1b      	ldr	r3, [pc, #108]	@ (3401a330 <__LL_ATON_RT_IrqErr+0x190>)
3401a2c2:	681b      	ldr	r3, [r3, #0]
3401a2c4:	689b      	ldr	r3, [r3, #8]
3401a2c6:	4618      	mov	r0, r3
3401a2c8:	f000 ff40 	bl	3401b14c <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3401a2cc:	4b19      	ldr	r3, [pc, #100]	@ (3401a334 <__LL_ATON_RT_IrqErr+0x194>)
3401a2ce:	4a1a      	ldr	r2, [pc, #104]	@ (3401a338 <__LL_ATON_RT_IrqErr+0x198>)
3401a2d0:	f240 314e 	movw	r1, #846	@ 0x34e
3401a2d4:	4819      	ldr	r0, [pc, #100]	@ (3401a33c <__LL_ATON_RT_IrqErr+0x19c>)
3401a2d6:	f000 f981 	bl	3401a5dc <__assert_func>
    return;
3401a2da:	bf00      	nop
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3401a2dc:	3718      	adds	r7, #24
3401a2de:	46bd      	mov	sp, r7
3401a2e0:	bdb0      	pop	{r4, r5, r7, pc}
3401a2e2:	bf00      	nop
3401a2e4:	000ffc00 	.word	0x000ffc00
3401a2e8:	580e503c 	.word	0x580e503c
3401a2ec:	3401e0b8 	.word	0x3401e0b8
3401a2f0:	3401e0e8 	.word	0x3401e0e8
3401a2f4:	3401e110 	.word	0x3401e110
3401a2f8:	3401e134 	.word	0x3401e134
3401a2fc:	3401e154 	.word	0x3401e154
3401a300:	580e2010 	.word	0x580e2010
3401a304:	3401e16c 	.word	0x3401e16c
3401a308:	3401e184 	.word	0x3401e184
3401a30c:	580fe00c 	.word	0x580fe00c
3401a310:	3401e19c 	.word	0x3401e19c
3401a314:	580fe020 	.word	0x580fe020
3401a318:	3401e1d0 	.word	0x3401e1d0
3401a31c:	580fe01c 	.word	0x580fe01c
3401a320:	3401e1fc 	.word	0x3401e1fc
3401a324:	3401e220 	.word	0x3401e220
3401a328:	3401e244 	.word	0x3401e244
3401a32c:	3401e260 	.word	0x3401e260
3401a330:	3401e76c 	.word	0x3401e76c
3401a334:	3401e288 	.word	0x3401e288
3401a338:	3401e388 	.word	0x3401e388
3401a33c:	3401de24 	.word	0x3401de24

3401a340 <__LL_ATON_RT_IrqEpochBlock>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401a340:	b480      	push	{r7}
3401a342:	b087      	sub	sp, #28
3401a344:	af00      	add	r7, sp, #0
3401a346:	6078      	str	r0, [r7, #4]
   * consecutive bits within the `INTREG` register (and within all other interrupt controller registers, like e.g.
   * status/mask/clear)! */
  irqs >>= ATON_STRENG_INT(0);
  wait_irqs =
      irqs &
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3401a348:	4b1e      	ldr	r3, [pc, #120]	@ (3401a3c4 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401a34a:	681b      	ldr	r3, [r3, #0]
3401a34c:	685b      	ldr	r3, [r3, #4]
          ->wait_mask; /* treat only IRQs we are currently waiting for
3401a34e:	68db      	ldr	r3, [r3, #12]
  wait_irqs =
3401a350:	687a      	ldr	r2, [r7, #4]
3401a352:	4013      	ands	r3, r2
3401a354:	60fb      	str	r3, [r7, #12]
                          (Note: we might be running in a hybrid function which uses DMAs in parallel with a "normal"
                          ATON execution and we must not clear the IRQs of this "normal" ATON execution here) */
  if (wait_irqs)
3401a356:	68fb      	ldr	r3, [r7, #12]
3401a358:	2b00      	cmp	r3, #0
3401a35a:	d02d      	beq.n	3401a3b8 <__LL_ATON_RT_IrqEpochBlock+0x78>
  {
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401a35c:	4b19      	ldr	r3, [pc, #100]	@ (3401a3c4 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401a35e:	681b      	ldr	r3, [r3, #0]
3401a360:	69db      	ldr	r3, [r3, #28]
3401a362:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401a364:	2300      	movs	r3, #0
3401a366:	617b      	str	r3, [r7, #20]
3401a368:	e01f      	b.n	3401a3aa <__LL_ATON_RT_IrqEpochBlock+0x6a>
    {
      /* Handle event interrupts */
      if ((wait_irqs >> i) & 1)
3401a36a:	68fa      	ldr	r2, [r7, #12]
3401a36c:	697b      	ldr	r3, [r7, #20]
3401a36e:	fa22 f303 	lsr.w	r3, r2, r3
3401a372:	f003 0301 	and.w	r3, r3, #1
3401a376:	2b00      	cmp	r3, #0
3401a378:	d014      	beq.n	3401a3a4 <__LL_ATON_RT_IrqEpochBlock+0x64>
      { /* more future-proofed but less efficient alternative:
           `if (wait_irqs & ATON_STRENG_INT_MASK(i, 0, 0))`
         */
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3401a37a:	697b      	ldr	r3, [r7, #20]
3401a37c:	031a      	lsls	r2, r3, #12
3401a37e:	4b12      	ldr	r3, [pc, #72]	@ (3401a3c8 <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401a380:	4413      	add	r3, r2
3401a382:	681b      	ldr	r3, [r3, #0]
3401a384:	60bb      	str	r3, [r7, #8]
        ATON_STRENG_IRQ_SET(
3401a386:	697b      	ldr	r3, [r7, #20]
3401a388:	031a      	lsls	r2, r3, #12
3401a38a:	4b0f      	ldr	r3, [pc, #60]	@ (3401a3c8 <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401a38c:	4413      	add	r3, r2
3401a38e:	461a      	mov	r2, r3
3401a390:	68bb      	ldr	r3, [r7, #8]
3401a392:	6013      	str	r3, [r2, #0]
            i, strengIrqs); /* Acknowledge ATON interrupt source (i.e. stream engine #i) - could be more fine grain */

        /* Handle RT integration */
        _tmp_triggered_events |= (1 << i);
3401a394:	2201      	movs	r2, #1
3401a396:	697b      	ldr	r3, [r7, #20]
3401a398:	fa02 f303 	lsl.w	r3, r2, r3
3401a39c:	461a      	mov	r2, r3
3401a39e:	693b      	ldr	r3, [r7, #16]
3401a3a0:	4313      	orrs	r3, r2
3401a3a2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401a3a4:	697b      	ldr	r3, [r7, #20]
3401a3a6:	3301      	adds	r3, #1
3401a3a8:	617b      	str	r3, [r7, #20]
3401a3aa:	697b      	ldr	r3, [r7, #20]
3401a3ac:	2b09      	cmp	r3, #9
3401a3ae:	dddc      	ble.n	3401a36a <__LL_ATON_RT_IrqEpochBlock+0x2a>
      }
    }
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401a3b0:	4b04      	ldr	r3, [pc, #16]	@ (3401a3c4 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401a3b2:	681b      	ldr	r3, [r3, #0]
3401a3b4:	693a      	ldr	r2, [r7, #16]
3401a3b6:	61da      	str	r2, [r3, #28]
  }
}
3401a3b8:	bf00      	nop
3401a3ba:	371c      	adds	r7, #28
3401a3bc:	46bd      	mov	sp, r7
3401a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a3c2:	4770      	bx	lr
3401a3c4:	3401ee60 	.word	0x3401ee60
3401a3c8:	580e503c 	.word	0x580e503c

3401a3cc <__LL_ATON_RT_IrqEpochBlob>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401a3cc:	b580      	push	{r7, lr}
3401a3ce:	b086      	sub	sp, #24
3401a3d0:	af00      	add	r7, sp, #0
3401a3d2:	6078      	str	r0, [r7, #4]
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401a3d4:	4b1d      	ldr	r3, [pc, #116]	@ (3401a44c <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401a3d6:	681b      	ldr	r3, [r3, #0]
3401a3d8:	685b      	ldr	r3, [r3, #4]
3401a3da:	4618      	mov	r0, r3
3401a3dc:	f7ff feba 	bl	3401a154 <EpochBlock_EpochControllerUnit>
3401a3e0:	6178      	str	r0, [r7, #20]
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a3e2:	697b      	ldr	r3, [r7, #20]
3401a3e4:	2b00      	cmp	r3, #0
3401a3e6:	d006      	beq.n	3401a3f6 <__LL_ATON_RT_IrqEpochBlob+0x2a>
3401a3e8:	4b19      	ldr	r3, [pc, #100]	@ (3401a450 <__LL_ATON_RT_IrqEpochBlob+0x84>)
3401a3ea:	4a1a      	ldr	r2, [pc, #104]	@ (3401a454 <__LL_ATON_RT_IrqEpochBlob+0x88>)
3401a3ec:	f240 3191 	movw	r1, #913	@ 0x391
3401a3f0:	4819      	ldr	r0, [pc, #100]	@ (3401a458 <__LL_ATON_RT_IrqEpochBlob+0x8c>)
3401a3f2:	f000 f8f3 	bl	3401a5dc <__assert_func>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3401a3f6:	697b      	ldr	r3, [r7, #20]
3401a3f8:	2b00      	cmp	r3, #0
3401a3fa:	d007      	beq.n	3401a40c <__LL_ATON_RT_IrqEpochBlob+0x40>
3401a3fc:	697b      	ldr	r3, [r7, #20]
3401a3fe:	2b01      	cmp	r3, #1
3401a400:	d102      	bne.n	3401a408 <__LL_ATON_RT_IrqEpochBlob+0x3c>
3401a402:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401a406:	e003      	b.n	3401a410 <__LL_ATON_RT_IrqEpochBlob+0x44>
3401a408:	2300      	movs	r3, #0
3401a40a:	e001      	b.n	3401a410 <__LL_ATON_RT_IrqEpochBlob+0x44>
3401a40c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401a410:	687a      	ldr	r2, [r7, #4]
3401a412:	4013      	ands	r3, r2
3401a414:	2b00      	cmp	r3, #0
3401a416:	d015      	beq.n	3401a444 <__LL_ATON_RT_IrqEpochBlob+0x78>
  {
    /* Acknowledge interrupts in active epoch controller unit - could be more fine grain */
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3401a418:	4b10      	ldr	r3, [pc, #64]	@ (3401a45c <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401a41a:	681b      	ldr	r3, [r3, #0]
3401a41c:	613b      	str	r3, [r7, #16]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3401a41e:	4a0f      	ldr	r2, [pc, #60]	@ (3401a45c <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401a420:	693b      	ldr	r3, [r7, #16]
3401a422:	6013      	str	r3, [r2, #0]

    /* Handle RT integration */
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401a424:	4b09      	ldr	r3, [pc, #36]	@ (3401a44c <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401a426:	681b      	ldr	r3, [r3, #0]
3401a428:	69db      	ldr	r3, [r3, #28]
3401a42a:	60fb      	str	r3, [r7, #12]
    _tmp_triggered_events |= (1 << ecId);
3401a42c:	2201      	movs	r2, #1
3401a42e:	697b      	ldr	r3, [r7, #20]
3401a430:	fa02 f303 	lsl.w	r3, r2, r3
3401a434:	461a      	mov	r2, r3
3401a436:	68fb      	ldr	r3, [r7, #12]
3401a438:	4313      	orrs	r3, r2
3401a43a:	60fb      	str	r3, [r7, #12]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401a43c:	4b03      	ldr	r3, [pc, #12]	@ (3401a44c <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401a43e:	681b      	ldr	r3, [r3, #0]
3401a440:	68fa      	ldr	r2, [r7, #12]
3401a442:	61da      	str	r2, [r3, #28]
  }
}
3401a444:	bf00      	nop
3401a446:	3718      	adds	r7, #24
3401a448:	46bd      	mov	sp, r7
3401a44a:	bd80      	pop	{r7, pc}
3401a44c:	3401ee60 	.word	0x3401ee60
3401a450:	3401dee8 	.word	0x3401dee8
3401a454:	3401e3ac 	.word	0x3401e3ac
3401a458:	3401de24 	.word	0x3401de24
3401a45c:	580fe00c 	.word	0x580fe00c

3401a460 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3401a460:	b580      	push	{r7, lr}
3401a462:	b082      	sub	sp, #8
3401a464:	af00      	add	r7, sp, #0
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3401a466:	4b3d      	ldr	r3, [pc, #244]	@ (3401a55c <NPU0_IRQHandler+0xfc>)
3401a468:	681b      	ldr	r3, [r3, #0]
3401a46a:	607b      	str	r3, [r7, #4]
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3401a46c:	4b3c      	ldr	r3, [pc, #240]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a46e:	681b      	ldr	r3, [r3, #0]
3401a470:	2b00      	cmp	r3, #0
3401a472:	d045      	beq.n	3401a500 <NPU0_IRQHandler+0xa0>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3401a474:	4b3a      	ldr	r3, [pc, #232]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a476:	681b      	ldr	r3, [r3, #0]
3401a478:	685b      	ldr	r3, [r3, #4]
3401a47a:	2b00      	cmp	r3, #0
3401a47c:	d106      	bne.n	3401a48c <NPU0_IRQHandler+0x2c>
3401a47e:	4b39      	ldr	r3, [pc, #228]	@ (3401a564 <NPU0_IRQHandler+0x104>)
3401a480:	4a39      	ldr	r2, [pc, #228]	@ (3401a568 <NPU0_IRQHandler+0x108>)
3401a482:	f240 31b1 	movw	r1, #945	@ 0x3b1
3401a486:	4839      	ldr	r0, [pc, #228]	@ (3401a56c <NPU0_IRQHandler+0x10c>)
3401a488:	f000 f8a8 	bl	3401a5dc <__assert_func>

    /** OR-mask interrupts MUST be handled first **/
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401a48c:	4b34      	ldr	r3, [pc, #208]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a48e:	681b      	ldr	r3, [r3, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3401a490:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401a492:	4618      	mov	r0, r3
3401a494:	f7ff fe4a 	bl	3401a12c <EpochBlock_IsEpochBlob>
3401a498:	4603      	mov	r3, r0
3401a49a:	f083 0301 	eor.w	r3, r3, #1
3401a49e:	b2db      	uxtb	r3, r3
3401a4a0:	2b00      	cmp	r3, #0
3401a4a2:	d008      	beq.n	3401a4b6 <NPU0_IRQHandler+0x56>
    {
      __LL_ATON_RT_IrqErr(
3401a4a4:	687b      	ldr	r3, [r7, #4]
3401a4a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
3401a4aa:	f023 0303 	bic.w	r3, r3, #3
3401a4ae:	4618      	mov	r0, r3
3401a4b0:	f7ff fe76 	bl	3401a1a0 <__LL_ATON_RT_IrqErr>
3401a4b4:	e027      	b.n	3401a506 <NPU0_IRQHandler+0xa6>
          irqs & ~ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0)); /* exclude all streaming engine completion interrupts */
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401a4b6:	4b2a      	ldr	r3, [pc, #168]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a4b8:	681b      	ldr	r3, [r3, #0]
3401a4ba:	685b      	ldr	r3, [r3, #4]
3401a4bc:	4618      	mov	r0, r3
3401a4be:	f7ff fe49 	bl	3401a154 <EpochBlock_EpochControllerUnit>
3401a4c2:	6038      	str	r0, [r7, #0]
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a4c4:	683b      	ldr	r3, [r7, #0]
3401a4c6:	2b00      	cmp	r3, #0
3401a4c8:	d006      	beq.n	3401a4d8 <NPU0_IRQHandler+0x78>
3401a4ca:	4b29      	ldr	r3, [pc, #164]	@ (3401a570 <NPU0_IRQHandler+0x110>)
3401a4cc:	4a26      	ldr	r2, [pc, #152]	@ (3401a568 <NPU0_IRQHandler+0x108>)
3401a4ce:	f240 31be 	movw	r1, #958	@ 0x3be
3401a4d2:	4826      	ldr	r0, [pc, #152]	@ (3401a56c <NPU0_IRQHandler+0x10c>)
3401a4d4:	f000 f882 	bl	3401a5dc <__assert_func>

      // epoch blob handling based on epoch controller interrupt
      __LL_ATON_RT_IrqErr(
          irqs & ~ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK,
3401a4d8:	683b      	ldr	r3, [r7, #0]
3401a4da:	2b00      	cmp	r3, #0
3401a4dc:	d008      	beq.n	3401a4f0 <NPU0_IRQHandler+0x90>
3401a4de:	683b      	ldr	r3, [r7, #0]
3401a4e0:	2b01      	cmp	r3, #1
3401a4e2:	d102      	bne.n	3401a4ea <NPU0_IRQHandler+0x8a>
3401a4e4:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
3401a4e8:	e004      	b.n	3401a4f4 <NPU0_IRQHandler+0x94>
3401a4ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3401a4ee:	e001      	b.n	3401a4f4 <NPU0_IRQHandler+0x94>
3401a4f0:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
      __LL_ATON_RT_IrqErr(
3401a4f4:	687a      	ldr	r2, [r7, #4]
3401a4f6:	4013      	ands	r3, r2
3401a4f8:	4618      	mov	r0, r3
3401a4fa:	f7ff fe51 	bl	3401a1a0 <__LL_ATON_RT_IrqErr>
3401a4fe:	e002      	b.n	3401a506 <NPU0_IRQHandler+0xa6>
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3401a500:	6878      	ldr	r0, [r7, #4]
3401a502:	f7ff fe4d 	bl	3401a1a0 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a506:	4b16      	ldr	r3, [pc, #88]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a508:	681b      	ldr	r3, [r3, #0]
3401a50a:	2b00      	cmp	r3, #0
3401a50c:	d106      	bne.n	3401a51c <NPU0_IRQHandler+0xbc>
3401a50e:	4b19      	ldr	r3, [pc, #100]	@ (3401a574 <NPU0_IRQHandler+0x114>)
3401a510:	4a15      	ldr	r2, [pc, #84]	@ (3401a568 <NPU0_IRQHandler+0x108>)
3401a512:	f240 31d2 	movw	r1, #978	@ 0x3d2
3401a516:	4815      	ldr	r0, [pc, #84]	@ (3401a56c <NPU0_IRQHandler+0x10c>)
3401a518:	f000 f860 	bl	3401a5dc <__assert_func>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3401a51c:	4b10      	ldr	r3, [pc, #64]	@ (3401a560 <NPU0_IRQHandler+0x100>)
3401a51e:	681b      	ldr	r3, [r3, #0]
3401a520:	685b      	ldr	r3, [r3, #4]
3401a522:	4618      	mov	r0, r3
3401a524:	f7ff fe02 	bl	3401a12c <EpochBlock_IsEpochBlob>
3401a528:	4603      	mov	r3, r0
3401a52a:	f083 0301 	eor.w	r3, r3, #1
3401a52e:	b2db      	uxtb	r3, r3
3401a530:	2b00      	cmp	r3, #0
3401a532:	d003      	beq.n	3401a53c <NPU0_IRQHandler+0xdc>
  { // standard epoch block handling based on streaming engines
    __LL_ATON_RT_IrqEpochBlock(irqs);
3401a534:	6878      	ldr	r0, [r7, #4]
3401a536:	f7ff ff03 	bl	3401a340 <__LL_ATON_RT_IrqEpochBlock>
3401a53a:	e002      	b.n	3401a542 <NPU0_IRQHandler+0xe2>
  }
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM)
    __LL_ATON_RT_IrqEpochBlob(irqs);
3401a53c:	6878      	ldr	r0, [r7, #4]
3401a53e:	f7ff ff45 	bl	3401a3cc <__LL_ATON_RT_IrqEpochBlob>
  __ASM volatile ("dsb 0xF":::"memory");
3401a542:	f3bf 8f4f 	dsb	sy
}
3401a546:	bf00      	nop
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3401a548:	4a0b      	ldr	r2, [pc, #44]	@ (3401a578 <NPU0_IRQHandler+0x118>)
3401a54a:	687b      	ldr	r3, [r7, #4]
3401a54c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
3401a54e:	f3bf 8f4f 	dsb	sy
}
3401a552:	bf00      	nop
  /* Signal event */
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
3401a554:	bf00      	nop
}
3401a556:	3708      	adds	r7, #8
3401a558:	46bd      	mov	sp, r7
3401a55a:	bd80      	pop	{r7, pc}
3401a55c:	580e1008 	.word	0x580e1008
3401a560:	3401ee60 	.word	0x3401ee60
3401a564:	3401e28c 	.word	0x3401e28c
3401a568:	3401e39c 	.word	0x3401e39c
3401a56c:	3401de24 	.word	0x3401de24
3401a570:	3401dee8 	.word	0x3401dee8
3401a574:	3401dcbc 	.word	0x3401dcbc
3401a578:	580e1010 	.word	0x580e1010

3401a57c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3401a57c:	480f      	ldr	r0, [pc, #60]	@ (3401a5bc <LoopForever+0x4>)
  msr   MSPLIM, r0
3401a57e:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3401a582:	480f      	ldr	r0, [pc, #60]	@ (3401a5c0 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3401a584:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3401a586:	f7eb fa47 	bl	34005a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3401a58a:	480e      	ldr	r0, [pc, #56]	@ (3401a5c4 <LoopForever+0xc>)
  ldr r1, =_edata
3401a58c:	490e      	ldr	r1, [pc, #56]	@ (3401a5c8 <LoopForever+0x10>)
  ldr r2, =_sidata
3401a58e:	4a0f      	ldr	r2, [pc, #60]	@ (3401a5cc <LoopForever+0x14>)
  movs r3, #0
3401a590:	2300      	movs	r3, #0
  b LoopCopyDataInit
3401a592:	e002      	b.n	3401a59a <LoopCopyDataInit>

3401a594 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3401a594:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3401a596:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3401a598:	3304      	adds	r3, #4

3401a59a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3401a59a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3401a59c:	428c      	cmp	r4, r1
  bcc CopyDataInit
3401a59e:	d3f9      	bcc.n	3401a594 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3401a5a0:	4a0b      	ldr	r2, [pc, #44]	@ (3401a5d0 <LoopForever+0x18>)
  ldr r4, =_ebss
3401a5a2:	4c0c      	ldr	r4, [pc, #48]	@ (3401a5d4 <LoopForever+0x1c>)
  movs r3, #0
3401a5a4:	2300      	movs	r3, #0
  b LoopFillZerobss
3401a5a6:	e001      	b.n	3401a5ac <LoopFillZerobss>

3401a5a8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3401a5a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3401a5aa:	3204      	adds	r2, #4

3401a5ac <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3401a5ac:	42a2      	cmp	r2, r4
  bcc FillZerobss
3401a5ae:	d3fb      	bcc.n	3401a5a8 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3401a5b0:	f001 f864 	bl	3401b67c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3401a5b4:	f7e6 fc8e 	bl	34000ed4 <main>

3401a5b8 <LoopForever>:

LoopForever:
  b LoopForever
3401a5b8:	e7fe      	b.n	3401a5b8 <LoopForever>
3401a5ba:	0000      	.short	0x0000
  ldr   r0, =_sstack
3401a5bc:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3401a5c0:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3401a5c4:	3401e74c 	.word	0x3401e74c
  ldr r1, =_edata
3401a5c8:	3401e928 	.word	0x3401e928
  ldr r2, =_sidata
3401a5cc:	3401e74c 	.word	0x3401e74c
  ldr r2, =_sbss
3401a5d0:	3401e928 	.word	0x3401e928
  ldr r4, =_ebss
3401a5d4:	3401efb4 	.word	0x3401efb4

3401a5d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3401a5d8:	e7fe      	b.n	3401a5d8 <ADC1_2_IRQHandler>
	...

3401a5dc <__assert_func>:
3401a5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401a5de:	4614      	mov	r4, r2
3401a5e0:	461a      	mov	r2, r3
3401a5e2:	4b09      	ldr	r3, [pc, #36]	@ (3401a608 <__assert_func+0x2c>)
3401a5e4:	4605      	mov	r5, r0
3401a5e6:	681b      	ldr	r3, [r3, #0]
3401a5e8:	68d8      	ldr	r0, [r3, #12]
3401a5ea:	b14c      	cbz	r4, 3401a600 <__assert_func+0x24>
3401a5ec:	4b07      	ldr	r3, [pc, #28]	@ (3401a60c <__assert_func+0x30>)
3401a5ee:	9100      	str	r1, [sp, #0]
3401a5f0:	4907      	ldr	r1, [pc, #28]	@ (3401a610 <__assert_func+0x34>)
3401a5f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401a5f6:	462b      	mov	r3, r5
3401a5f8:	f000 fe60 	bl	3401b2bc <fiprintf>
3401a5fc:	f001 f880 	bl	3401b700 <abort>
3401a600:	4b04      	ldr	r3, [pc, #16]	@ (3401a614 <__assert_func+0x38>)
3401a602:	461c      	mov	r4, r3
3401a604:	e7f3      	b.n	3401a5ee <__assert_func+0x12>
3401a606:	bf00      	nop
3401a608:	3401e76c 	.word	0x3401e76c
3401a60c:	3401e3c6 	.word	0x3401e3c6
3401a610:	3401e3d3 	.word	0x3401e3d3
3401a614:	3401e401 	.word	0x3401e401

3401a618 <malloc>:
3401a618:	4b02      	ldr	r3, [pc, #8]	@ (3401a624 <malloc+0xc>)
3401a61a:	4601      	mov	r1, r0
3401a61c:	6818      	ldr	r0, [r3, #0]
3401a61e:	f000 b825 	b.w	3401a66c <_malloc_r>
3401a622:	bf00      	nop
3401a624:	3401e76c 	.word	0x3401e76c

3401a628 <sbrk_aligned>:
3401a628:	b570      	push	{r4, r5, r6, lr}
3401a62a:	4e0f      	ldr	r6, [pc, #60]	@ (3401a668 <sbrk_aligned+0x40>)
3401a62c:	460c      	mov	r4, r1
3401a62e:	4605      	mov	r5, r0
3401a630:	6831      	ldr	r1, [r6, #0]
3401a632:	b911      	cbnz	r1, 3401a63a <sbrk_aligned+0x12>
3401a634:	f000 fffa 	bl	3401b62c <_sbrk_r>
3401a638:	6030      	str	r0, [r6, #0]
3401a63a:	4621      	mov	r1, r4
3401a63c:	4628      	mov	r0, r5
3401a63e:	f000 fff5 	bl	3401b62c <_sbrk_r>
3401a642:	1c43      	adds	r3, r0, #1
3401a644:	d103      	bne.n	3401a64e <sbrk_aligned+0x26>
3401a646:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3401a64a:	4620      	mov	r0, r4
3401a64c:	bd70      	pop	{r4, r5, r6, pc}
3401a64e:	1cc4      	adds	r4, r0, #3
3401a650:	f024 0403 	bic.w	r4, r4, #3
3401a654:	42a0      	cmp	r0, r4
3401a656:	d0f8      	beq.n	3401a64a <sbrk_aligned+0x22>
3401a658:	1a21      	subs	r1, r4, r0
3401a65a:	4628      	mov	r0, r5
3401a65c:	f000 ffe6 	bl	3401b62c <_sbrk_r>
3401a660:	3001      	adds	r0, #1
3401a662:	d1f2      	bne.n	3401a64a <sbrk_aligned+0x22>
3401a664:	e7ef      	b.n	3401a646 <sbrk_aligned+0x1e>
3401a666:	bf00      	nop
3401a668:	3401ee64 	.word	0x3401ee64

3401a66c <_malloc_r>:
3401a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401a670:	1ccd      	adds	r5, r1, #3
3401a672:	4606      	mov	r6, r0
3401a674:	f025 0503 	bic.w	r5, r5, #3
3401a678:	3508      	adds	r5, #8
3401a67a:	2d0c      	cmp	r5, #12
3401a67c:	bf38      	it	cc
3401a67e:	250c      	movcc	r5, #12
3401a680:	2d00      	cmp	r5, #0
3401a682:	db01      	blt.n	3401a688 <_malloc_r+0x1c>
3401a684:	42a9      	cmp	r1, r5
3401a686:	d904      	bls.n	3401a692 <_malloc_r+0x26>
3401a688:	230c      	movs	r3, #12
3401a68a:	6033      	str	r3, [r6, #0]
3401a68c:	2000      	movs	r0, #0
3401a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401a692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3401a768 <_malloc_r+0xfc>
3401a696:	f000 f869 	bl	3401a76c <__malloc_lock>
3401a69a:	f8d8 3000 	ldr.w	r3, [r8]
3401a69e:	461c      	mov	r4, r3
3401a6a0:	bb44      	cbnz	r4, 3401a6f4 <_malloc_r+0x88>
3401a6a2:	4629      	mov	r1, r5
3401a6a4:	4630      	mov	r0, r6
3401a6a6:	f7ff ffbf 	bl	3401a628 <sbrk_aligned>
3401a6aa:	1c43      	adds	r3, r0, #1
3401a6ac:	4604      	mov	r4, r0
3401a6ae:	d158      	bne.n	3401a762 <_malloc_r+0xf6>
3401a6b0:	f8d8 4000 	ldr.w	r4, [r8]
3401a6b4:	4627      	mov	r7, r4
3401a6b6:	2f00      	cmp	r7, #0
3401a6b8:	d143      	bne.n	3401a742 <_malloc_r+0xd6>
3401a6ba:	2c00      	cmp	r4, #0
3401a6bc:	d04b      	beq.n	3401a756 <_malloc_r+0xea>
3401a6be:	6823      	ldr	r3, [r4, #0]
3401a6c0:	4639      	mov	r1, r7
3401a6c2:	4630      	mov	r0, r6
3401a6c4:	eb04 0903 	add.w	r9, r4, r3
3401a6c8:	f000 ffb0 	bl	3401b62c <_sbrk_r>
3401a6cc:	4581      	cmp	r9, r0
3401a6ce:	d142      	bne.n	3401a756 <_malloc_r+0xea>
3401a6d0:	6821      	ldr	r1, [r4, #0]
3401a6d2:	4630      	mov	r0, r6
3401a6d4:	1a6d      	subs	r5, r5, r1
3401a6d6:	4629      	mov	r1, r5
3401a6d8:	f7ff ffa6 	bl	3401a628 <sbrk_aligned>
3401a6dc:	3001      	adds	r0, #1
3401a6de:	d03a      	beq.n	3401a756 <_malloc_r+0xea>
3401a6e0:	6823      	ldr	r3, [r4, #0]
3401a6e2:	442b      	add	r3, r5
3401a6e4:	6023      	str	r3, [r4, #0]
3401a6e6:	f8d8 3000 	ldr.w	r3, [r8]
3401a6ea:	685a      	ldr	r2, [r3, #4]
3401a6ec:	bb62      	cbnz	r2, 3401a748 <_malloc_r+0xdc>
3401a6ee:	f8c8 7000 	str.w	r7, [r8]
3401a6f2:	e00f      	b.n	3401a714 <_malloc_r+0xa8>
3401a6f4:	6822      	ldr	r2, [r4, #0]
3401a6f6:	1b52      	subs	r2, r2, r5
3401a6f8:	d420      	bmi.n	3401a73c <_malloc_r+0xd0>
3401a6fa:	2a0b      	cmp	r2, #11
3401a6fc:	d917      	bls.n	3401a72e <_malloc_r+0xc2>
3401a6fe:	1961      	adds	r1, r4, r5
3401a700:	42a3      	cmp	r3, r4
3401a702:	6025      	str	r5, [r4, #0]
3401a704:	bf18      	it	ne
3401a706:	6059      	strne	r1, [r3, #4]
3401a708:	6863      	ldr	r3, [r4, #4]
3401a70a:	bf08      	it	eq
3401a70c:	f8c8 1000 	streq.w	r1, [r8]
3401a710:	5162      	str	r2, [r4, r5]
3401a712:	604b      	str	r3, [r1, #4]
3401a714:	4630      	mov	r0, r6
3401a716:	f000 f82f 	bl	3401a778 <__malloc_unlock>
3401a71a:	f104 000b 	add.w	r0, r4, #11
3401a71e:	1d23      	adds	r3, r4, #4
3401a720:	f020 0007 	bic.w	r0, r0, #7
3401a724:	1ac2      	subs	r2, r0, r3
3401a726:	bf1c      	itt	ne
3401a728:	1a1b      	subne	r3, r3, r0
3401a72a:	50a3      	strne	r3, [r4, r2]
3401a72c:	e7af      	b.n	3401a68e <_malloc_r+0x22>
3401a72e:	6862      	ldr	r2, [r4, #4]
3401a730:	42a3      	cmp	r3, r4
3401a732:	bf0c      	ite	eq
3401a734:	f8c8 2000 	streq.w	r2, [r8]
3401a738:	605a      	strne	r2, [r3, #4]
3401a73a:	e7eb      	b.n	3401a714 <_malloc_r+0xa8>
3401a73c:	4623      	mov	r3, r4
3401a73e:	6864      	ldr	r4, [r4, #4]
3401a740:	e7ae      	b.n	3401a6a0 <_malloc_r+0x34>
3401a742:	463c      	mov	r4, r7
3401a744:	687f      	ldr	r7, [r7, #4]
3401a746:	e7b6      	b.n	3401a6b6 <_malloc_r+0x4a>
3401a748:	461a      	mov	r2, r3
3401a74a:	685b      	ldr	r3, [r3, #4]
3401a74c:	42a3      	cmp	r3, r4
3401a74e:	d1fb      	bne.n	3401a748 <_malloc_r+0xdc>
3401a750:	2300      	movs	r3, #0
3401a752:	6053      	str	r3, [r2, #4]
3401a754:	e7de      	b.n	3401a714 <_malloc_r+0xa8>
3401a756:	230c      	movs	r3, #12
3401a758:	4630      	mov	r0, r6
3401a75a:	6033      	str	r3, [r6, #0]
3401a75c:	f000 f80c 	bl	3401a778 <__malloc_unlock>
3401a760:	e794      	b.n	3401a68c <_malloc_r+0x20>
3401a762:	6005      	str	r5, [r0, #0]
3401a764:	e7d6      	b.n	3401a714 <_malloc_r+0xa8>
3401a766:	bf00      	nop
3401a768:	3401ee68 	.word	0x3401ee68

3401a76c <__malloc_lock>:
3401a76c:	4801      	ldr	r0, [pc, #4]	@ (3401a774 <__malloc_lock+0x8>)
3401a76e:	f000 bfaa 	b.w	3401b6c6 <__retarget_lock_acquire_recursive>
3401a772:	bf00      	nop
3401a774:	3401efac 	.word	0x3401efac

3401a778 <__malloc_unlock>:
3401a778:	4801      	ldr	r0, [pc, #4]	@ (3401a780 <__malloc_unlock+0x8>)
3401a77a:	f000 bfa5 	b.w	3401b6c8 <__retarget_lock_release_recursive>
3401a77e:	bf00      	nop
3401a780:	3401efac 	.word	0x3401efac

3401a784 <__cvt>:
3401a784:	b5f0      	push	{r4, r5, r6, r7, lr}
3401a786:	ed2d 8b02 	vpush	{d8}
3401a78a:	eeb0 8b40 	vmov.f64	d8, d0
3401a78e:	b085      	sub	sp, #20
3401a790:	4617      	mov	r7, r2
3401a792:	460c      	mov	r4, r1
3401a794:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3401a796:	ee18 2a90 	vmov	r2, s17
3401a79a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401a79c:	f025 0520 	bic.w	r5, r5, #32
3401a7a0:	2a00      	cmp	r2, #0
3401a7a2:	bfb6      	itet	lt
3401a7a4:	222d      	movlt	r2, #45	@ 0x2d
3401a7a6:	2200      	movge	r2, #0
3401a7a8:	eeb1 8b40 	vneglt.f64	d8, d0
3401a7ac:	2d46      	cmp	r5, #70	@ 0x46
3401a7ae:	701a      	strb	r2, [r3, #0]
3401a7b0:	d004      	beq.n	3401a7bc <__cvt+0x38>
3401a7b2:	2d45      	cmp	r5, #69	@ 0x45
3401a7b4:	d100      	bne.n	3401a7b8 <__cvt+0x34>
3401a7b6:	3401      	adds	r4, #1
3401a7b8:	2102      	movs	r1, #2
3401a7ba:	e000      	b.n	3401a7be <__cvt+0x3a>
3401a7bc:	2103      	movs	r1, #3
3401a7be:	ab03      	add	r3, sp, #12
3401a7c0:	eeb0 0b48 	vmov.f64	d0, d8
3401a7c4:	4622      	mov	r2, r4
3401a7c6:	9301      	str	r3, [sp, #4]
3401a7c8:	ab02      	add	r3, sp, #8
3401a7ca:	9300      	str	r3, [sp, #0]
3401a7cc:	4633      	mov	r3, r6
3401a7ce:	f001 f82b 	bl	3401b828 <_dtoa_r>
3401a7d2:	2d47      	cmp	r5, #71	@ 0x47
3401a7d4:	d114      	bne.n	3401a800 <__cvt+0x7c>
3401a7d6:	07fb      	lsls	r3, r7, #31
3401a7d8:	d50a      	bpl.n	3401a7f0 <__cvt+0x6c>
3401a7da:	1902      	adds	r2, r0, r4
3401a7dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401a7e0:	2130      	movs	r1, #48	@ 0x30
3401a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a7e6:	bf08      	it	eq
3401a7e8:	9203      	streq	r2, [sp, #12]
3401a7ea:	9b03      	ldr	r3, [sp, #12]
3401a7ec:	4293      	cmp	r3, r2
3401a7ee:	d319      	bcc.n	3401a824 <__cvt+0xa0>
3401a7f0:	9b03      	ldr	r3, [sp, #12]
3401a7f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401a7f4:	1a1b      	subs	r3, r3, r0
3401a7f6:	6013      	str	r3, [r2, #0]
3401a7f8:	b005      	add	sp, #20
3401a7fa:	ecbd 8b02 	vpop	{d8}
3401a7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401a800:	2d46      	cmp	r5, #70	@ 0x46
3401a802:	eb00 0204 	add.w	r2, r0, r4
3401a806:	d1e9      	bne.n	3401a7dc <__cvt+0x58>
3401a808:	7803      	ldrb	r3, [r0, #0]
3401a80a:	2b30      	cmp	r3, #48	@ 0x30
3401a80c:	d107      	bne.n	3401a81e <__cvt+0x9a>
3401a80e:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a816:	bf1c      	itt	ne
3401a818:	f1c4 0401 	rsbne	r4, r4, #1
3401a81c:	6034      	strne	r4, [r6, #0]
3401a81e:	6833      	ldr	r3, [r6, #0]
3401a820:	441a      	add	r2, r3
3401a822:	e7db      	b.n	3401a7dc <__cvt+0x58>
3401a824:	1c5c      	adds	r4, r3, #1
3401a826:	9403      	str	r4, [sp, #12]
3401a828:	7019      	strb	r1, [r3, #0]
3401a82a:	e7de      	b.n	3401a7ea <__cvt+0x66>

3401a82c <__exponent>:
3401a82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401a82e:	2900      	cmp	r1, #0
3401a830:	7002      	strb	r2, [r0, #0]
3401a832:	bfba      	itte	lt
3401a834:	4249      	neglt	r1, r1
3401a836:	232d      	movlt	r3, #45	@ 0x2d
3401a838:	232b      	movge	r3, #43	@ 0x2b
3401a83a:	2909      	cmp	r1, #9
3401a83c:	7043      	strb	r3, [r0, #1]
3401a83e:	dd28      	ble.n	3401a892 <__exponent+0x66>
3401a840:	f10d 0307 	add.w	r3, sp, #7
3401a844:	270a      	movs	r7, #10
3401a846:	461d      	mov	r5, r3
3401a848:	461a      	mov	r2, r3
3401a84a:	3b01      	subs	r3, #1
3401a84c:	fbb1 f6f7 	udiv	r6, r1, r7
3401a850:	fb07 1416 	mls	r4, r7, r6, r1
3401a854:	3430      	adds	r4, #48	@ 0x30
3401a856:	f802 4c01 	strb.w	r4, [r2, #-1]
3401a85a:	460c      	mov	r4, r1
3401a85c:	4631      	mov	r1, r6
3401a85e:	2c63      	cmp	r4, #99	@ 0x63
3401a860:	dcf2      	bgt.n	3401a848 <__exponent+0x1c>
3401a862:	3130      	adds	r1, #48	@ 0x30
3401a864:	1e94      	subs	r4, r2, #2
3401a866:	f803 1c01 	strb.w	r1, [r3, #-1]
3401a86a:	1c41      	adds	r1, r0, #1
3401a86c:	4623      	mov	r3, r4
3401a86e:	42ab      	cmp	r3, r5
3401a870:	d30a      	bcc.n	3401a888 <__exponent+0x5c>
3401a872:	f10d 0309 	add.w	r3, sp, #9
3401a876:	1a9b      	subs	r3, r3, r2
3401a878:	42ac      	cmp	r4, r5
3401a87a:	bf88      	it	hi
3401a87c:	2300      	movhi	r3, #0
3401a87e:	3302      	adds	r3, #2
3401a880:	4403      	add	r3, r0
3401a882:	1a18      	subs	r0, r3, r0
3401a884:	b003      	add	sp, #12
3401a886:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401a888:	f813 6b01 	ldrb.w	r6, [r3], #1
3401a88c:	f801 6f01 	strb.w	r6, [r1, #1]!
3401a890:	e7ed      	b.n	3401a86e <__exponent+0x42>
3401a892:	2330      	movs	r3, #48	@ 0x30
3401a894:	3130      	adds	r1, #48	@ 0x30
3401a896:	7083      	strb	r3, [r0, #2]
3401a898:	1d03      	adds	r3, r0, #4
3401a89a:	70c1      	strb	r1, [r0, #3]
3401a89c:	e7f1      	b.n	3401a882 <__exponent+0x56>
	...

3401a8a0 <_printf_float>:
3401a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401a8a4:	b08d      	sub	sp, #52	@ 0x34
3401a8a6:	460c      	mov	r4, r1
3401a8a8:	4616      	mov	r6, r2
3401a8aa:	461f      	mov	r7, r3
3401a8ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3401a8b0:	4605      	mov	r5, r0
3401a8b2:	f000 fe83 	bl	3401b5bc <_localeconv_r>
3401a8b6:	f8d0 b000 	ldr.w	fp, [r0]
3401a8ba:	4658      	mov	r0, fp
3401a8bc:	f7e5 ff68 	bl	34000790 <strlen>
3401a8c0:	2300      	movs	r3, #0
3401a8c2:	f894 9018 	ldrb.w	r9, [r4, #24]
3401a8c6:	930a      	str	r3, [sp, #40]	@ 0x28
3401a8c8:	f8d8 3000 	ldr.w	r3, [r8]
3401a8cc:	6822      	ldr	r2, [r4, #0]
3401a8ce:	3307      	adds	r3, #7
3401a8d0:	9005      	str	r0, [sp, #20]
3401a8d2:	f023 0307 	bic.w	r3, r3, #7
3401a8d6:	f103 0108 	add.w	r1, r3, #8
3401a8da:	f8c8 1000 	str.w	r1, [r8]
3401a8de:	ed93 0b00 	vldr	d0, [r3]
3401a8e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401ab40 <_printf_float+0x2a0>
3401a8e6:	eeb0 7bc0 	vabs.f64	d7, d0
3401a8ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401a8ee:	eeb4 7b46 	vcmp.f64	d7, d6
3401a8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a8f6:	dd24      	ble.n	3401a942 <_printf_float+0xa2>
3401a8f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401a8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a900:	d502      	bpl.n	3401a908 <_printf_float+0x68>
3401a902:	232d      	movs	r3, #45	@ 0x2d
3401a904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401a908:	498f      	ldr	r1, [pc, #572]	@ (3401ab48 <_printf_float+0x2a8>)
3401a90a:	4b90      	ldr	r3, [pc, #576]	@ (3401ab4c <_printf_float+0x2ac>)
3401a90c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3401a910:	bf8c      	ite	hi
3401a912:	4688      	movhi	r8, r1
3401a914:	4698      	movls	r8, r3
3401a916:	f022 0204 	bic.w	r2, r2, #4
3401a91a:	2303      	movs	r3, #3
3401a91c:	f04f 0a00 	mov.w	sl, #0
3401a920:	6022      	str	r2, [r4, #0]
3401a922:	6123      	str	r3, [r4, #16]
3401a924:	4633      	mov	r3, r6
3401a926:	aa0b      	add	r2, sp, #44	@ 0x2c
3401a928:	4621      	mov	r1, r4
3401a92a:	4628      	mov	r0, r5
3401a92c:	9700      	str	r7, [sp, #0]
3401a92e:	f000 f9d1 	bl	3401acd4 <_printf_common>
3401a932:	3001      	adds	r0, #1
3401a934:	f040 8089 	bne.w	3401aa4a <_printf_float+0x1aa>
3401a938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a93c:	b00d      	add	sp, #52	@ 0x34
3401a93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401a942:	eeb4 0b40 	vcmp.f64	d0, d0
3401a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401a94a:	d709      	bvc.n	3401a960 <_printf_float+0xc0>
3401a94c:	ee10 3a90 	vmov	r3, s1
3401a950:	497f      	ldr	r1, [pc, #508]	@ (3401ab50 <_printf_float+0x2b0>)
3401a952:	2b00      	cmp	r3, #0
3401a954:	bfbc      	itt	lt
3401a956:	232d      	movlt	r3, #45	@ 0x2d
3401a958:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3401a95c:	4b7d      	ldr	r3, [pc, #500]	@ (3401ab54 <_printf_float+0x2b4>)
3401a95e:	e7d5      	b.n	3401a90c <_printf_float+0x6c>
3401a960:	6863      	ldr	r3, [r4, #4]
3401a962:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3401a966:	1c59      	adds	r1, r3, #1
3401a968:	d139      	bne.n	3401a9de <_printf_float+0x13e>
3401a96a:	2306      	movs	r3, #6
3401a96c:	6063      	str	r3, [r4, #4]
3401a96e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3401a972:	2300      	movs	r3, #0
3401a974:	4628      	mov	r0, r5
3401a976:	6022      	str	r2, [r4, #0]
3401a978:	9303      	str	r3, [sp, #12]
3401a97a:	ab0a      	add	r3, sp, #40	@ 0x28
3401a97c:	e9cd 9301 	strd	r9, r3, [sp, #4]
3401a980:	ab09      	add	r3, sp, #36	@ 0x24
3401a982:	9300      	str	r3, [sp, #0]
3401a984:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3401a988:	6861      	ldr	r1, [r4, #4]
3401a98a:	f7ff fefb 	bl	3401a784 <__cvt>
3401a98e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401a992:	4680      	mov	r8, r0
3401a994:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401a996:	d129      	bne.n	3401a9ec <_printf_float+0x14c>
3401a998:	1cc8      	adds	r0, r1, #3
3401a99a:	db02      	blt.n	3401a9a2 <_printf_float+0x102>
3401a99c:	6863      	ldr	r3, [r4, #4]
3401a99e:	4299      	cmp	r1, r3
3401a9a0:	dd41      	ble.n	3401aa26 <_printf_float+0x186>
3401a9a2:	f1a9 0902 	sub.w	r9, r9, #2
3401a9a6:	fa5f f989 	uxtb.w	r9, r9
3401a9aa:	3901      	subs	r1, #1
3401a9ac:	464a      	mov	r2, r9
3401a9ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401a9b2:	9109      	str	r1, [sp, #36]	@ 0x24
3401a9b4:	f7ff ff3a 	bl	3401a82c <__exponent>
3401a9b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401a9ba:	4682      	mov	sl, r0
3401a9bc:	1813      	adds	r3, r2, r0
3401a9be:	2a01      	cmp	r2, #1
3401a9c0:	6123      	str	r3, [r4, #16]
3401a9c2:	dc02      	bgt.n	3401a9ca <_printf_float+0x12a>
3401a9c4:	6822      	ldr	r2, [r4, #0]
3401a9c6:	07d2      	lsls	r2, r2, #31
3401a9c8:	d501      	bpl.n	3401a9ce <_printf_float+0x12e>
3401a9ca:	3301      	adds	r3, #1
3401a9cc:	6123      	str	r3, [r4, #16]
3401a9ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3401a9d2:	2b00      	cmp	r3, #0
3401a9d4:	d0a6      	beq.n	3401a924 <_printf_float+0x84>
3401a9d6:	232d      	movs	r3, #45	@ 0x2d
3401a9d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401a9dc:	e7a2      	b.n	3401a924 <_printf_float+0x84>
3401a9de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401a9e2:	d1c4      	bne.n	3401a96e <_printf_float+0xce>
3401a9e4:	2b00      	cmp	r3, #0
3401a9e6:	d1c2      	bne.n	3401a96e <_printf_float+0xce>
3401a9e8:	2301      	movs	r3, #1
3401a9ea:	e7bf      	b.n	3401a96c <_printf_float+0xcc>
3401a9ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401a9f0:	d9db      	bls.n	3401a9aa <_printf_float+0x10a>
3401a9f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3401a9f6:	d118      	bne.n	3401aa2a <_printf_float+0x18a>
3401a9f8:	2900      	cmp	r1, #0
3401a9fa:	6863      	ldr	r3, [r4, #4]
3401a9fc:	dd0b      	ble.n	3401aa16 <_printf_float+0x176>
3401a9fe:	6121      	str	r1, [r4, #16]
3401aa00:	b913      	cbnz	r3, 3401aa08 <_printf_float+0x168>
3401aa02:	6822      	ldr	r2, [r4, #0]
3401aa04:	07d0      	lsls	r0, r2, #31
3401aa06:	d502      	bpl.n	3401aa0e <_printf_float+0x16e>
3401aa08:	3301      	adds	r3, #1
3401aa0a:	440b      	add	r3, r1
3401aa0c:	6123      	str	r3, [r4, #16]
3401aa0e:	f04f 0a00 	mov.w	sl, #0
3401aa12:	65a1      	str	r1, [r4, #88]	@ 0x58
3401aa14:	e7db      	b.n	3401a9ce <_printf_float+0x12e>
3401aa16:	b913      	cbnz	r3, 3401aa1e <_printf_float+0x17e>
3401aa18:	6822      	ldr	r2, [r4, #0]
3401aa1a:	07d2      	lsls	r2, r2, #31
3401aa1c:	d501      	bpl.n	3401aa22 <_printf_float+0x182>
3401aa1e:	3302      	adds	r3, #2
3401aa20:	e7f4      	b.n	3401aa0c <_printf_float+0x16c>
3401aa22:	2301      	movs	r3, #1
3401aa24:	e7f2      	b.n	3401aa0c <_printf_float+0x16c>
3401aa26:	f04f 0967 	mov.w	r9, #103	@ 0x67
3401aa2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401aa2c:	4299      	cmp	r1, r3
3401aa2e:	db05      	blt.n	3401aa3c <_printf_float+0x19c>
3401aa30:	6823      	ldr	r3, [r4, #0]
3401aa32:	6121      	str	r1, [r4, #16]
3401aa34:	07d8      	lsls	r0, r3, #31
3401aa36:	d5ea      	bpl.n	3401aa0e <_printf_float+0x16e>
3401aa38:	1c4b      	adds	r3, r1, #1
3401aa3a:	e7e7      	b.n	3401aa0c <_printf_float+0x16c>
3401aa3c:	2900      	cmp	r1, #0
3401aa3e:	bfd4      	ite	le
3401aa40:	f1c1 0202 	rsble	r2, r1, #2
3401aa44:	2201      	movgt	r2, #1
3401aa46:	4413      	add	r3, r2
3401aa48:	e7e0      	b.n	3401aa0c <_printf_float+0x16c>
3401aa4a:	6823      	ldr	r3, [r4, #0]
3401aa4c:	055a      	lsls	r2, r3, #21
3401aa4e:	d407      	bmi.n	3401aa60 <_printf_float+0x1c0>
3401aa50:	6923      	ldr	r3, [r4, #16]
3401aa52:	4642      	mov	r2, r8
3401aa54:	4631      	mov	r1, r6
3401aa56:	4628      	mov	r0, r5
3401aa58:	47b8      	blx	r7
3401aa5a:	3001      	adds	r0, #1
3401aa5c:	d12a      	bne.n	3401aab4 <_printf_float+0x214>
3401aa5e:	e76b      	b.n	3401a938 <_printf_float+0x98>
3401aa60:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401aa64:	f240 80e0 	bls.w	3401ac28 <_printf_float+0x388>
3401aa68:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401aa6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401aa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401aa74:	d133      	bne.n	3401aade <_printf_float+0x23e>
3401aa76:	2301      	movs	r3, #1
3401aa78:	4a37      	ldr	r2, [pc, #220]	@ (3401ab58 <_printf_float+0x2b8>)
3401aa7a:	4631      	mov	r1, r6
3401aa7c:	4628      	mov	r0, r5
3401aa7e:	47b8      	blx	r7
3401aa80:	3001      	adds	r0, #1
3401aa82:	f43f af59 	beq.w	3401a938 <_printf_float+0x98>
3401aa86:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401aa8a:	4543      	cmp	r3, r8
3401aa8c:	db02      	blt.n	3401aa94 <_printf_float+0x1f4>
3401aa8e:	6823      	ldr	r3, [r4, #0]
3401aa90:	07d8      	lsls	r0, r3, #31
3401aa92:	d50f      	bpl.n	3401aab4 <_printf_float+0x214>
3401aa94:	9b05      	ldr	r3, [sp, #20]
3401aa96:	465a      	mov	r2, fp
3401aa98:	4631      	mov	r1, r6
3401aa9a:	4628      	mov	r0, r5
3401aa9c:	47b8      	blx	r7
3401aa9e:	3001      	adds	r0, #1
3401aaa0:	f43f af4a 	beq.w	3401a938 <_printf_float+0x98>
3401aaa4:	f04f 0900 	mov.w	r9, #0
3401aaa8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401aaac:	f104 0a1a 	add.w	sl, r4, #26
3401aab0:	45c8      	cmp	r8, r9
3401aab2:	dc09      	bgt.n	3401aac8 <_printf_float+0x228>
3401aab4:	6823      	ldr	r3, [r4, #0]
3401aab6:	079b      	lsls	r3, r3, #30
3401aab8:	f100 8107 	bmi.w	3401acca <_printf_float+0x42a>
3401aabc:	68e0      	ldr	r0, [r4, #12]
3401aabe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401aac0:	4298      	cmp	r0, r3
3401aac2:	bfb8      	it	lt
3401aac4:	4618      	movlt	r0, r3
3401aac6:	e739      	b.n	3401a93c <_printf_float+0x9c>
3401aac8:	2301      	movs	r3, #1
3401aaca:	4652      	mov	r2, sl
3401aacc:	4631      	mov	r1, r6
3401aace:	4628      	mov	r0, r5
3401aad0:	47b8      	blx	r7
3401aad2:	3001      	adds	r0, #1
3401aad4:	f43f af30 	beq.w	3401a938 <_printf_float+0x98>
3401aad8:	f109 0901 	add.w	r9, r9, #1
3401aadc:	e7e8      	b.n	3401aab0 <_printf_float+0x210>
3401aade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401aae0:	2b00      	cmp	r3, #0
3401aae2:	dc3b      	bgt.n	3401ab5c <_printf_float+0x2bc>
3401aae4:	2301      	movs	r3, #1
3401aae6:	4a1c      	ldr	r2, [pc, #112]	@ (3401ab58 <_printf_float+0x2b8>)
3401aae8:	4631      	mov	r1, r6
3401aaea:	4628      	mov	r0, r5
3401aaec:	47b8      	blx	r7
3401aaee:	3001      	adds	r0, #1
3401aaf0:	f43f af22 	beq.w	3401a938 <_printf_float+0x98>
3401aaf4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3401aaf8:	ea59 0303 	orrs.w	r3, r9, r3
3401aafc:	d102      	bne.n	3401ab04 <_printf_float+0x264>
3401aafe:	6823      	ldr	r3, [r4, #0]
3401ab00:	07d9      	lsls	r1, r3, #31
3401ab02:	d5d7      	bpl.n	3401aab4 <_printf_float+0x214>
3401ab04:	9b05      	ldr	r3, [sp, #20]
3401ab06:	465a      	mov	r2, fp
3401ab08:	4631      	mov	r1, r6
3401ab0a:	4628      	mov	r0, r5
3401ab0c:	47b8      	blx	r7
3401ab0e:	3001      	adds	r0, #1
3401ab10:	f43f af12 	beq.w	3401a938 <_printf_float+0x98>
3401ab14:	f04f 0a00 	mov.w	sl, #0
3401ab18:	f104 0b1a 	add.w	fp, r4, #26
3401ab1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ab1e:	425b      	negs	r3, r3
3401ab20:	4553      	cmp	r3, sl
3401ab22:	dc01      	bgt.n	3401ab28 <_printf_float+0x288>
3401ab24:	464b      	mov	r3, r9
3401ab26:	e794      	b.n	3401aa52 <_printf_float+0x1b2>
3401ab28:	2301      	movs	r3, #1
3401ab2a:	465a      	mov	r2, fp
3401ab2c:	4631      	mov	r1, r6
3401ab2e:	4628      	mov	r0, r5
3401ab30:	47b8      	blx	r7
3401ab32:	3001      	adds	r0, #1
3401ab34:	f43f af00 	beq.w	3401a938 <_printf_float+0x98>
3401ab38:	f10a 0a01 	add.w	sl, sl, #1
3401ab3c:	e7ee      	b.n	3401ab1c <_printf_float+0x27c>
3401ab3e:	bf00      	nop
3401ab40:	ffffffff 	.word	0xffffffff
3401ab44:	7fefffff 	.word	0x7fefffff
3401ab48:	3401e406 	.word	0x3401e406
3401ab4c:	3401e402 	.word	0x3401e402
3401ab50:	3401e40e 	.word	0x3401e40e
3401ab54:	3401e40a 	.word	0x3401e40a
3401ab58:	3401e412 	.word	0x3401e412
3401ab5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401ab5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401ab62:	4553      	cmp	r3, sl
3401ab64:	bfa8      	it	ge
3401ab66:	4653      	movge	r3, sl
3401ab68:	2b00      	cmp	r3, #0
3401ab6a:	4699      	mov	r9, r3
3401ab6c:	dc37      	bgt.n	3401abde <_printf_float+0x33e>
3401ab6e:	2300      	movs	r3, #0
3401ab70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401ab74:	f104 021a 	add.w	r2, r4, #26
3401ab78:	9307      	str	r3, [sp, #28]
3401ab7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401ab7c:	9907      	ldr	r1, [sp, #28]
3401ab7e:	9306      	str	r3, [sp, #24]
3401ab80:	eba3 0309 	sub.w	r3, r3, r9
3401ab84:	428b      	cmp	r3, r1
3401ab86:	dc31      	bgt.n	3401abec <_printf_float+0x34c>
3401ab88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ab8a:	459a      	cmp	sl, r3
3401ab8c:	dc3b      	bgt.n	3401ac06 <_printf_float+0x366>
3401ab8e:	6823      	ldr	r3, [r4, #0]
3401ab90:	07da      	lsls	r2, r3, #31
3401ab92:	d438      	bmi.n	3401ac06 <_printf_float+0x366>
3401ab94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ab96:	ebaa 0903 	sub.w	r9, sl, r3
3401ab9a:	9b06      	ldr	r3, [sp, #24]
3401ab9c:	ebaa 0303 	sub.w	r3, sl, r3
3401aba0:	4599      	cmp	r9, r3
3401aba2:	bfa8      	it	ge
3401aba4:	4699      	movge	r9, r3
3401aba6:	f1b9 0f00 	cmp.w	r9, #0
3401abaa:	dc34      	bgt.n	3401ac16 <_printf_float+0x376>
3401abac:	f04f 0800 	mov.w	r8, #0
3401abb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401abb4:	f104 0b1a 	add.w	fp, r4, #26
3401abb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401abba:	ebaa 0303 	sub.w	r3, sl, r3
3401abbe:	eba3 0309 	sub.w	r3, r3, r9
3401abc2:	4543      	cmp	r3, r8
3401abc4:	f77f af76 	ble.w	3401aab4 <_printf_float+0x214>
3401abc8:	2301      	movs	r3, #1
3401abca:	465a      	mov	r2, fp
3401abcc:	4631      	mov	r1, r6
3401abce:	4628      	mov	r0, r5
3401abd0:	47b8      	blx	r7
3401abd2:	3001      	adds	r0, #1
3401abd4:	f43f aeb0 	beq.w	3401a938 <_printf_float+0x98>
3401abd8:	f108 0801 	add.w	r8, r8, #1
3401abdc:	e7ec      	b.n	3401abb8 <_printf_float+0x318>
3401abde:	4642      	mov	r2, r8
3401abe0:	4631      	mov	r1, r6
3401abe2:	4628      	mov	r0, r5
3401abe4:	47b8      	blx	r7
3401abe6:	3001      	adds	r0, #1
3401abe8:	d1c1      	bne.n	3401ab6e <_printf_float+0x2ce>
3401abea:	e6a5      	b.n	3401a938 <_printf_float+0x98>
3401abec:	2301      	movs	r3, #1
3401abee:	4631      	mov	r1, r6
3401abf0:	4628      	mov	r0, r5
3401abf2:	9206      	str	r2, [sp, #24]
3401abf4:	47b8      	blx	r7
3401abf6:	3001      	adds	r0, #1
3401abf8:	f43f ae9e 	beq.w	3401a938 <_printf_float+0x98>
3401abfc:	9b07      	ldr	r3, [sp, #28]
3401abfe:	9a06      	ldr	r2, [sp, #24]
3401ac00:	3301      	adds	r3, #1
3401ac02:	9307      	str	r3, [sp, #28]
3401ac04:	e7b9      	b.n	3401ab7a <_printf_float+0x2da>
3401ac06:	9b05      	ldr	r3, [sp, #20]
3401ac08:	465a      	mov	r2, fp
3401ac0a:	4631      	mov	r1, r6
3401ac0c:	4628      	mov	r0, r5
3401ac0e:	47b8      	blx	r7
3401ac10:	3001      	adds	r0, #1
3401ac12:	d1bf      	bne.n	3401ab94 <_printf_float+0x2f4>
3401ac14:	e690      	b.n	3401a938 <_printf_float+0x98>
3401ac16:	9a06      	ldr	r2, [sp, #24]
3401ac18:	464b      	mov	r3, r9
3401ac1a:	4631      	mov	r1, r6
3401ac1c:	4628      	mov	r0, r5
3401ac1e:	4442      	add	r2, r8
3401ac20:	47b8      	blx	r7
3401ac22:	3001      	adds	r0, #1
3401ac24:	d1c2      	bne.n	3401abac <_printf_float+0x30c>
3401ac26:	e687      	b.n	3401a938 <_printf_float+0x98>
3401ac28:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401ac2c:	f1b9 0f01 	cmp.w	r9, #1
3401ac30:	dc01      	bgt.n	3401ac36 <_printf_float+0x396>
3401ac32:	07db      	lsls	r3, r3, #31
3401ac34:	d536      	bpl.n	3401aca4 <_printf_float+0x404>
3401ac36:	2301      	movs	r3, #1
3401ac38:	4642      	mov	r2, r8
3401ac3a:	4631      	mov	r1, r6
3401ac3c:	4628      	mov	r0, r5
3401ac3e:	47b8      	blx	r7
3401ac40:	3001      	adds	r0, #1
3401ac42:	f43f ae79 	beq.w	3401a938 <_printf_float+0x98>
3401ac46:	9b05      	ldr	r3, [sp, #20]
3401ac48:	465a      	mov	r2, fp
3401ac4a:	4631      	mov	r1, r6
3401ac4c:	4628      	mov	r0, r5
3401ac4e:	47b8      	blx	r7
3401ac50:	3001      	adds	r0, #1
3401ac52:	f43f ae71 	beq.w	3401a938 <_printf_float+0x98>
3401ac56:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3401ac5a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401ac5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401ac62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ac66:	d018      	beq.n	3401ac9a <_printf_float+0x3fa>
3401ac68:	464b      	mov	r3, r9
3401ac6a:	f108 0201 	add.w	r2, r8, #1
3401ac6e:	4631      	mov	r1, r6
3401ac70:	4628      	mov	r0, r5
3401ac72:	47b8      	blx	r7
3401ac74:	3001      	adds	r0, #1
3401ac76:	d10c      	bne.n	3401ac92 <_printf_float+0x3f2>
3401ac78:	e65e      	b.n	3401a938 <_printf_float+0x98>
3401ac7a:	2301      	movs	r3, #1
3401ac7c:	465a      	mov	r2, fp
3401ac7e:	4631      	mov	r1, r6
3401ac80:	4628      	mov	r0, r5
3401ac82:	47b8      	blx	r7
3401ac84:	3001      	adds	r0, #1
3401ac86:	f43f ae57 	beq.w	3401a938 <_printf_float+0x98>
3401ac8a:	f108 0801 	add.w	r8, r8, #1
3401ac8e:	45c8      	cmp	r8, r9
3401ac90:	dbf3      	blt.n	3401ac7a <_printf_float+0x3da>
3401ac92:	4653      	mov	r3, sl
3401ac94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401ac98:	e6dc      	b.n	3401aa54 <_printf_float+0x1b4>
3401ac9a:	f04f 0800 	mov.w	r8, #0
3401ac9e:	f104 0b1a 	add.w	fp, r4, #26
3401aca2:	e7f4      	b.n	3401ac8e <_printf_float+0x3ee>
3401aca4:	2301      	movs	r3, #1
3401aca6:	4642      	mov	r2, r8
3401aca8:	e7e1      	b.n	3401ac6e <_printf_float+0x3ce>
3401acaa:	2301      	movs	r3, #1
3401acac:	464a      	mov	r2, r9
3401acae:	4631      	mov	r1, r6
3401acb0:	4628      	mov	r0, r5
3401acb2:	47b8      	blx	r7
3401acb4:	3001      	adds	r0, #1
3401acb6:	f43f ae3f 	beq.w	3401a938 <_printf_float+0x98>
3401acba:	f108 0801 	add.w	r8, r8, #1
3401acbe:	68e3      	ldr	r3, [r4, #12]
3401acc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401acc2:	1a5b      	subs	r3, r3, r1
3401acc4:	4543      	cmp	r3, r8
3401acc6:	dcf0      	bgt.n	3401acaa <_printf_float+0x40a>
3401acc8:	e6f8      	b.n	3401aabc <_printf_float+0x21c>
3401acca:	f04f 0800 	mov.w	r8, #0
3401acce:	f104 0919 	add.w	r9, r4, #25
3401acd2:	e7f4      	b.n	3401acbe <_printf_float+0x41e>

3401acd4 <_printf_common>:
3401acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401acd8:	4616      	mov	r6, r2
3401acda:	4698      	mov	r8, r3
3401acdc:	688a      	ldr	r2, [r1, #8]
3401acde:	4607      	mov	r7, r0
3401ace0:	690b      	ldr	r3, [r1, #16]
3401ace2:	460c      	mov	r4, r1
3401ace4:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401ace8:	4293      	cmp	r3, r2
3401acea:	bfb8      	it	lt
3401acec:	4613      	movlt	r3, r2
3401acee:	6033      	str	r3, [r6, #0]
3401acf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401acf4:	b10a      	cbz	r2, 3401acfa <_printf_common+0x26>
3401acf6:	3301      	adds	r3, #1
3401acf8:	6033      	str	r3, [r6, #0]
3401acfa:	6823      	ldr	r3, [r4, #0]
3401acfc:	0699      	lsls	r1, r3, #26
3401acfe:	bf42      	ittt	mi
3401ad00:	6833      	ldrmi	r3, [r6, #0]
3401ad02:	3302      	addmi	r3, #2
3401ad04:	6033      	strmi	r3, [r6, #0]
3401ad06:	6825      	ldr	r5, [r4, #0]
3401ad08:	f015 0506 	ands.w	r5, r5, #6
3401ad0c:	d106      	bne.n	3401ad1c <_printf_common+0x48>
3401ad0e:	f104 0a19 	add.w	sl, r4, #25
3401ad12:	68e3      	ldr	r3, [r4, #12]
3401ad14:	6832      	ldr	r2, [r6, #0]
3401ad16:	1a9b      	subs	r3, r3, r2
3401ad18:	42ab      	cmp	r3, r5
3401ad1a:	dc2b      	bgt.n	3401ad74 <_printf_common+0xa0>
3401ad1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401ad20:	6822      	ldr	r2, [r4, #0]
3401ad22:	3b00      	subs	r3, #0
3401ad24:	bf18      	it	ne
3401ad26:	2301      	movne	r3, #1
3401ad28:	0692      	lsls	r2, r2, #26
3401ad2a:	d430      	bmi.n	3401ad8e <_printf_common+0xba>
3401ad2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401ad30:	4641      	mov	r1, r8
3401ad32:	4638      	mov	r0, r7
3401ad34:	47c8      	blx	r9
3401ad36:	3001      	adds	r0, #1
3401ad38:	d023      	beq.n	3401ad82 <_printf_common+0xae>
3401ad3a:	6823      	ldr	r3, [r4, #0]
3401ad3c:	341a      	adds	r4, #26
3401ad3e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401ad42:	f003 0306 	and.w	r3, r3, #6
3401ad46:	2b04      	cmp	r3, #4
3401ad48:	bf0a      	itet	eq
3401ad4a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401ad4e:	2500      	movne	r5, #0
3401ad50:	6833      	ldreq	r3, [r6, #0]
3401ad52:	f04f 0600 	mov.w	r6, #0
3401ad56:	bf08      	it	eq
3401ad58:	1aed      	subeq	r5, r5, r3
3401ad5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401ad5e:	bf08      	it	eq
3401ad60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401ad64:	4293      	cmp	r3, r2
3401ad66:	bfc4      	itt	gt
3401ad68:	1a9b      	subgt	r3, r3, r2
3401ad6a:	18ed      	addgt	r5, r5, r3
3401ad6c:	42b5      	cmp	r5, r6
3401ad6e:	d11a      	bne.n	3401ada6 <_printf_common+0xd2>
3401ad70:	2000      	movs	r0, #0
3401ad72:	e008      	b.n	3401ad86 <_printf_common+0xb2>
3401ad74:	2301      	movs	r3, #1
3401ad76:	4652      	mov	r2, sl
3401ad78:	4641      	mov	r1, r8
3401ad7a:	4638      	mov	r0, r7
3401ad7c:	47c8      	blx	r9
3401ad7e:	3001      	adds	r0, #1
3401ad80:	d103      	bne.n	3401ad8a <_printf_common+0xb6>
3401ad82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401ad8a:	3501      	adds	r5, #1
3401ad8c:	e7c1      	b.n	3401ad12 <_printf_common+0x3e>
3401ad8e:	18e1      	adds	r1, r4, r3
3401ad90:	1c5a      	adds	r2, r3, #1
3401ad92:	2030      	movs	r0, #48	@ 0x30
3401ad94:	3302      	adds	r3, #2
3401ad96:	4422      	add	r2, r4
3401ad98:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401ad9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401ada0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401ada4:	e7c2      	b.n	3401ad2c <_printf_common+0x58>
3401ada6:	2301      	movs	r3, #1
3401ada8:	4622      	mov	r2, r4
3401adaa:	4641      	mov	r1, r8
3401adac:	4638      	mov	r0, r7
3401adae:	47c8      	blx	r9
3401adb0:	3001      	adds	r0, #1
3401adb2:	d0e6      	beq.n	3401ad82 <_printf_common+0xae>
3401adb4:	3601      	adds	r6, #1
3401adb6:	e7d9      	b.n	3401ad6c <_printf_common+0x98>

3401adb8 <_printf_i>:
3401adb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401adbc:	7e0f      	ldrb	r7, [r1, #24]
3401adbe:	4691      	mov	r9, r2
3401adc0:	4680      	mov	r8, r0
3401adc2:	460c      	mov	r4, r1
3401adc4:	2f78      	cmp	r7, #120	@ 0x78
3401adc6:	469a      	mov	sl, r3
3401adc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401adca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401adce:	d807      	bhi.n	3401ade0 <_printf_i+0x28>
3401add0:	2f62      	cmp	r7, #98	@ 0x62
3401add2:	d80a      	bhi.n	3401adea <_printf_i+0x32>
3401add4:	2f00      	cmp	r7, #0
3401add6:	f000 80d1 	beq.w	3401af7c <_printf_i+0x1c4>
3401adda:	2f58      	cmp	r7, #88	@ 0x58
3401addc:	f000 80b8 	beq.w	3401af50 <_printf_i+0x198>
3401ade0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401ade4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401ade8:	e03a      	b.n	3401ae60 <_printf_i+0xa8>
3401adea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401adee:	2b15      	cmp	r3, #21
3401adf0:	d8f6      	bhi.n	3401ade0 <_printf_i+0x28>
3401adf2:	a101      	add	r1, pc, #4	@ (adr r1, 3401adf8 <_printf_i+0x40>)
3401adf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401adf8:	3401ae51 	.word	0x3401ae51
3401adfc:	3401ae65 	.word	0x3401ae65
3401ae00:	3401ade1 	.word	0x3401ade1
3401ae04:	3401ade1 	.word	0x3401ade1
3401ae08:	3401ade1 	.word	0x3401ade1
3401ae0c:	3401ade1 	.word	0x3401ade1
3401ae10:	3401ae65 	.word	0x3401ae65
3401ae14:	3401ade1 	.word	0x3401ade1
3401ae18:	3401ade1 	.word	0x3401ade1
3401ae1c:	3401ade1 	.word	0x3401ade1
3401ae20:	3401ade1 	.word	0x3401ade1
3401ae24:	3401af63 	.word	0x3401af63
3401ae28:	3401ae8f 	.word	0x3401ae8f
3401ae2c:	3401af1d 	.word	0x3401af1d
3401ae30:	3401ade1 	.word	0x3401ade1
3401ae34:	3401ade1 	.word	0x3401ade1
3401ae38:	3401af85 	.word	0x3401af85
3401ae3c:	3401ade1 	.word	0x3401ade1
3401ae40:	3401ae8f 	.word	0x3401ae8f
3401ae44:	3401ade1 	.word	0x3401ade1
3401ae48:	3401ade1 	.word	0x3401ade1
3401ae4c:	3401af25 	.word	0x3401af25
3401ae50:	6833      	ldr	r3, [r6, #0]
3401ae52:	1d1a      	adds	r2, r3, #4
3401ae54:	681b      	ldr	r3, [r3, #0]
3401ae56:	6032      	str	r2, [r6, #0]
3401ae58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401ae5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401ae60:	2301      	movs	r3, #1
3401ae62:	e09c      	b.n	3401af9e <_printf_i+0x1e6>
3401ae64:	6833      	ldr	r3, [r6, #0]
3401ae66:	6820      	ldr	r0, [r4, #0]
3401ae68:	1d19      	adds	r1, r3, #4
3401ae6a:	6031      	str	r1, [r6, #0]
3401ae6c:	0606      	lsls	r6, r0, #24
3401ae6e:	d501      	bpl.n	3401ae74 <_printf_i+0xbc>
3401ae70:	681d      	ldr	r5, [r3, #0]
3401ae72:	e003      	b.n	3401ae7c <_printf_i+0xc4>
3401ae74:	0645      	lsls	r5, r0, #25
3401ae76:	d5fb      	bpl.n	3401ae70 <_printf_i+0xb8>
3401ae78:	f9b3 5000 	ldrsh.w	r5, [r3]
3401ae7c:	2d00      	cmp	r5, #0
3401ae7e:	da03      	bge.n	3401ae88 <_printf_i+0xd0>
3401ae80:	232d      	movs	r3, #45	@ 0x2d
3401ae82:	426d      	negs	r5, r5
3401ae84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401ae88:	4858      	ldr	r0, [pc, #352]	@ (3401afec <_printf_i+0x234>)
3401ae8a:	230a      	movs	r3, #10
3401ae8c:	e011      	b.n	3401aeb2 <_printf_i+0xfa>
3401ae8e:	6821      	ldr	r1, [r4, #0]
3401ae90:	6833      	ldr	r3, [r6, #0]
3401ae92:	0608      	lsls	r0, r1, #24
3401ae94:	f853 5b04 	ldr.w	r5, [r3], #4
3401ae98:	d402      	bmi.n	3401aea0 <_printf_i+0xe8>
3401ae9a:	0649      	lsls	r1, r1, #25
3401ae9c:	bf48      	it	mi
3401ae9e:	b2ad      	uxthmi	r5, r5
3401aea0:	2f6f      	cmp	r7, #111	@ 0x6f
3401aea2:	6033      	str	r3, [r6, #0]
3401aea4:	4851      	ldr	r0, [pc, #324]	@ (3401afec <_printf_i+0x234>)
3401aea6:	bf14      	ite	ne
3401aea8:	230a      	movne	r3, #10
3401aeaa:	2308      	moveq	r3, #8
3401aeac:	2100      	movs	r1, #0
3401aeae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401aeb2:	6866      	ldr	r6, [r4, #4]
3401aeb4:	2e00      	cmp	r6, #0
3401aeb6:	60a6      	str	r6, [r4, #8]
3401aeb8:	db05      	blt.n	3401aec6 <_printf_i+0x10e>
3401aeba:	6821      	ldr	r1, [r4, #0]
3401aebc:	432e      	orrs	r6, r5
3401aebe:	f021 0104 	bic.w	r1, r1, #4
3401aec2:	6021      	str	r1, [r4, #0]
3401aec4:	d04b      	beq.n	3401af5e <_printf_i+0x1a6>
3401aec6:	4616      	mov	r6, r2
3401aec8:	fbb5 f1f3 	udiv	r1, r5, r3
3401aecc:	fb03 5711 	mls	r7, r3, r1, r5
3401aed0:	5dc7      	ldrb	r7, [r0, r7]
3401aed2:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401aed6:	462f      	mov	r7, r5
3401aed8:	460d      	mov	r5, r1
3401aeda:	42bb      	cmp	r3, r7
3401aedc:	d9f4      	bls.n	3401aec8 <_printf_i+0x110>
3401aede:	2b08      	cmp	r3, #8
3401aee0:	d10b      	bne.n	3401aefa <_printf_i+0x142>
3401aee2:	6823      	ldr	r3, [r4, #0]
3401aee4:	07df      	lsls	r7, r3, #31
3401aee6:	d508      	bpl.n	3401aefa <_printf_i+0x142>
3401aee8:	6923      	ldr	r3, [r4, #16]
3401aeea:	6861      	ldr	r1, [r4, #4]
3401aeec:	4299      	cmp	r1, r3
3401aeee:	bfde      	ittt	le
3401aef0:	2330      	movle	r3, #48	@ 0x30
3401aef2:	f806 3c01 	strble.w	r3, [r6, #-1]
3401aef6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3401aefa:	1b92      	subs	r2, r2, r6
3401aefc:	6122      	str	r2, [r4, #16]
3401aefe:	464b      	mov	r3, r9
3401af00:	aa03      	add	r2, sp, #12
3401af02:	4621      	mov	r1, r4
3401af04:	4640      	mov	r0, r8
3401af06:	f8cd a000 	str.w	sl, [sp]
3401af0a:	f7ff fee3 	bl	3401acd4 <_printf_common>
3401af0e:	3001      	adds	r0, #1
3401af10:	d14a      	bne.n	3401afa8 <_printf_i+0x1f0>
3401af12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401af16:	b004      	add	sp, #16
3401af18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401af1c:	6823      	ldr	r3, [r4, #0]
3401af1e:	f043 0320 	orr.w	r3, r3, #32
3401af22:	6023      	str	r3, [r4, #0]
3401af24:	2778      	movs	r7, #120	@ 0x78
3401af26:	4832      	ldr	r0, [pc, #200]	@ (3401aff0 <_printf_i+0x238>)
3401af28:	6823      	ldr	r3, [r4, #0]
3401af2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401af2e:	061f      	lsls	r7, r3, #24
3401af30:	6831      	ldr	r1, [r6, #0]
3401af32:	f851 5b04 	ldr.w	r5, [r1], #4
3401af36:	d402      	bmi.n	3401af3e <_printf_i+0x186>
3401af38:	065f      	lsls	r7, r3, #25
3401af3a:	bf48      	it	mi
3401af3c:	b2ad      	uxthmi	r5, r5
3401af3e:	6031      	str	r1, [r6, #0]
3401af40:	07d9      	lsls	r1, r3, #31
3401af42:	bf44      	itt	mi
3401af44:	f043 0320 	orrmi.w	r3, r3, #32
3401af48:	6023      	strmi	r3, [r4, #0]
3401af4a:	b11d      	cbz	r5, 3401af54 <_printf_i+0x19c>
3401af4c:	2310      	movs	r3, #16
3401af4e:	e7ad      	b.n	3401aeac <_printf_i+0xf4>
3401af50:	4826      	ldr	r0, [pc, #152]	@ (3401afec <_printf_i+0x234>)
3401af52:	e7e9      	b.n	3401af28 <_printf_i+0x170>
3401af54:	6823      	ldr	r3, [r4, #0]
3401af56:	f023 0320 	bic.w	r3, r3, #32
3401af5a:	6023      	str	r3, [r4, #0]
3401af5c:	e7f6      	b.n	3401af4c <_printf_i+0x194>
3401af5e:	4616      	mov	r6, r2
3401af60:	e7bd      	b.n	3401aede <_printf_i+0x126>
3401af62:	6833      	ldr	r3, [r6, #0]
3401af64:	6825      	ldr	r5, [r4, #0]
3401af66:	1d18      	adds	r0, r3, #4
3401af68:	6961      	ldr	r1, [r4, #20]
3401af6a:	6030      	str	r0, [r6, #0]
3401af6c:	062e      	lsls	r6, r5, #24
3401af6e:	681b      	ldr	r3, [r3, #0]
3401af70:	d501      	bpl.n	3401af76 <_printf_i+0x1be>
3401af72:	6019      	str	r1, [r3, #0]
3401af74:	e002      	b.n	3401af7c <_printf_i+0x1c4>
3401af76:	0668      	lsls	r0, r5, #25
3401af78:	d5fb      	bpl.n	3401af72 <_printf_i+0x1ba>
3401af7a:	8019      	strh	r1, [r3, #0]
3401af7c:	2300      	movs	r3, #0
3401af7e:	4616      	mov	r6, r2
3401af80:	6123      	str	r3, [r4, #16]
3401af82:	e7bc      	b.n	3401aefe <_printf_i+0x146>
3401af84:	6833      	ldr	r3, [r6, #0]
3401af86:	2100      	movs	r1, #0
3401af88:	1d1a      	adds	r2, r3, #4
3401af8a:	6032      	str	r2, [r6, #0]
3401af8c:	681e      	ldr	r6, [r3, #0]
3401af8e:	6862      	ldr	r2, [r4, #4]
3401af90:	4630      	mov	r0, r6
3401af92:	f000 fb9a 	bl	3401b6ca <memchr>
3401af96:	b108      	cbz	r0, 3401af9c <_printf_i+0x1e4>
3401af98:	1b80      	subs	r0, r0, r6
3401af9a:	6060      	str	r0, [r4, #4]
3401af9c:	6863      	ldr	r3, [r4, #4]
3401af9e:	6123      	str	r3, [r4, #16]
3401afa0:	2300      	movs	r3, #0
3401afa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401afa6:	e7aa      	b.n	3401aefe <_printf_i+0x146>
3401afa8:	6923      	ldr	r3, [r4, #16]
3401afaa:	4632      	mov	r2, r6
3401afac:	4649      	mov	r1, r9
3401afae:	4640      	mov	r0, r8
3401afb0:	47d0      	blx	sl
3401afb2:	3001      	adds	r0, #1
3401afb4:	d0ad      	beq.n	3401af12 <_printf_i+0x15a>
3401afb6:	6823      	ldr	r3, [r4, #0]
3401afb8:	079b      	lsls	r3, r3, #30
3401afba:	d413      	bmi.n	3401afe4 <_printf_i+0x22c>
3401afbc:	68e0      	ldr	r0, [r4, #12]
3401afbe:	9b03      	ldr	r3, [sp, #12]
3401afc0:	4298      	cmp	r0, r3
3401afc2:	bfb8      	it	lt
3401afc4:	4618      	movlt	r0, r3
3401afc6:	e7a6      	b.n	3401af16 <_printf_i+0x15e>
3401afc8:	2301      	movs	r3, #1
3401afca:	4632      	mov	r2, r6
3401afcc:	4649      	mov	r1, r9
3401afce:	4640      	mov	r0, r8
3401afd0:	47d0      	blx	sl
3401afd2:	3001      	adds	r0, #1
3401afd4:	d09d      	beq.n	3401af12 <_printf_i+0x15a>
3401afd6:	3501      	adds	r5, #1
3401afd8:	68e3      	ldr	r3, [r4, #12]
3401afda:	9903      	ldr	r1, [sp, #12]
3401afdc:	1a5b      	subs	r3, r3, r1
3401afde:	42ab      	cmp	r3, r5
3401afe0:	dcf2      	bgt.n	3401afc8 <_printf_i+0x210>
3401afe2:	e7eb      	b.n	3401afbc <_printf_i+0x204>
3401afe4:	2500      	movs	r5, #0
3401afe6:	f104 0619 	add.w	r6, r4, #25
3401afea:	e7f5      	b.n	3401afd8 <_printf_i+0x220>
3401afec:	3401e414 	.word	0x3401e414
3401aff0:	3401e425 	.word	0x3401e425

3401aff4 <__sflush_r>:
3401aff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3401aff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401affc:	0716      	lsls	r6, r2, #28
3401affe:	4605      	mov	r5, r0
3401b000:	460c      	mov	r4, r1
3401b002:	d454      	bmi.n	3401b0ae <__sflush_r+0xba>
3401b004:	684b      	ldr	r3, [r1, #4]
3401b006:	2b00      	cmp	r3, #0
3401b008:	dc02      	bgt.n	3401b010 <__sflush_r+0x1c>
3401b00a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3401b00c:	2b00      	cmp	r3, #0
3401b00e:	dd48      	ble.n	3401b0a2 <__sflush_r+0xae>
3401b010:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401b012:	2e00      	cmp	r6, #0
3401b014:	d045      	beq.n	3401b0a2 <__sflush_r+0xae>
3401b016:	2300      	movs	r3, #0
3401b018:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3401b01c:	682f      	ldr	r7, [r5, #0]
3401b01e:	6a21      	ldr	r1, [r4, #32]
3401b020:	602b      	str	r3, [r5, #0]
3401b022:	d030      	beq.n	3401b086 <__sflush_r+0x92>
3401b024:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3401b026:	89a3      	ldrh	r3, [r4, #12]
3401b028:	0759      	lsls	r1, r3, #29
3401b02a:	d505      	bpl.n	3401b038 <__sflush_r+0x44>
3401b02c:	6863      	ldr	r3, [r4, #4]
3401b02e:	1ad2      	subs	r2, r2, r3
3401b030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401b032:	b10b      	cbz	r3, 3401b038 <__sflush_r+0x44>
3401b034:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b036:	1ad2      	subs	r2, r2, r3
3401b038:	2300      	movs	r3, #0
3401b03a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401b03c:	6a21      	ldr	r1, [r4, #32]
3401b03e:	4628      	mov	r0, r5
3401b040:	47b0      	blx	r6
3401b042:	1c43      	adds	r3, r0, #1
3401b044:	89a3      	ldrh	r3, [r4, #12]
3401b046:	d106      	bne.n	3401b056 <__sflush_r+0x62>
3401b048:	6829      	ldr	r1, [r5, #0]
3401b04a:	291d      	cmp	r1, #29
3401b04c:	d82b      	bhi.n	3401b0a6 <__sflush_r+0xb2>
3401b04e:	4a2a      	ldr	r2, [pc, #168]	@ (3401b0f8 <__sflush_r+0x104>)
3401b050:	40ca      	lsrs	r2, r1
3401b052:	07d6      	lsls	r6, r2, #31
3401b054:	d527      	bpl.n	3401b0a6 <__sflush_r+0xb2>
3401b056:	2200      	movs	r2, #0
3401b058:	04d9      	lsls	r1, r3, #19
3401b05a:	6062      	str	r2, [r4, #4]
3401b05c:	6922      	ldr	r2, [r4, #16]
3401b05e:	6022      	str	r2, [r4, #0]
3401b060:	d504      	bpl.n	3401b06c <__sflush_r+0x78>
3401b062:	1c42      	adds	r2, r0, #1
3401b064:	d101      	bne.n	3401b06a <__sflush_r+0x76>
3401b066:	682b      	ldr	r3, [r5, #0]
3401b068:	b903      	cbnz	r3, 3401b06c <__sflush_r+0x78>
3401b06a:	6560      	str	r0, [r4, #84]	@ 0x54
3401b06c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401b06e:	602f      	str	r7, [r5, #0]
3401b070:	b1b9      	cbz	r1, 3401b0a2 <__sflush_r+0xae>
3401b072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401b076:	4299      	cmp	r1, r3
3401b078:	d002      	beq.n	3401b080 <__sflush_r+0x8c>
3401b07a:	4628      	mov	r0, r5
3401b07c:	f001 f932 	bl	3401c2e4 <_free_r>
3401b080:	2300      	movs	r3, #0
3401b082:	6363      	str	r3, [r4, #52]	@ 0x34
3401b084:	e00d      	b.n	3401b0a2 <__sflush_r+0xae>
3401b086:	2301      	movs	r3, #1
3401b088:	4628      	mov	r0, r5
3401b08a:	47b0      	blx	r6
3401b08c:	4602      	mov	r2, r0
3401b08e:	1c50      	adds	r0, r2, #1
3401b090:	d1c9      	bne.n	3401b026 <__sflush_r+0x32>
3401b092:	682b      	ldr	r3, [r5, #0]
3401b094:	2b00      	cmp	r3, #0
3401b096:	d0c6      	beq.n	3401b026 <__sflush_r+0x32>
3401b098:	2b1d      	cmp	r3, #29
3401b09a:	d001      	beq.n	3401b0a0 <__sflush_r+0xac>
3401b09c:	2b16      	cmp	r3, #22
3401b09e:	d11d      	bne.n	3401b0dc <__sflush_r+0xe8>
3401b0a0:	602f      	str	r7, [r5, #0]
3401b0a2:	2000      	movs	r0, #0
3401b0a4:	e021      	b.n	3401b0ea <__sflush_r+0xf6>
3401b0a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401b0aa:	b21b      	sxth	r3, r3
3401b0ac:	e01a      	b.n	3401b0e4 <__sflush_r+0xf0>
3401b0ae:	690f      	ldr	r7, [r1, #16]
3401b0b0:	2f00      	cmp	r7, #0
3401b0b2:	d0f6      	beq.n	3401b0a2 <__sflush_r+0xae>
3401b0b4:	0793      	lsls	r3, r2, #30
3401b0b6:	680e      	ldr	r6, [r1, #0]
3401b0b8:	600f      	str	r7, [r1, #0]
3401b0ba:	bf0c      	ite	eq
3401b0bc:	694b      	ldreq	r3, [r1, #20]
3401b0be:	2300      	movne	r3, #0
3401b0c0:	eba6 0807 	sub.w	r8, r6, r7
3401b0c4:	608b      	str	r3, [r1, #8]
3401b0c6:	f1b8 0f00 	cmp.w	r8, #0
3401b0ca:	ddea      	ble.n	3401b0a2 <__sflush_r+0xae>
3401b0cc:	4643      	mov	r3, r8
3401b0ce:	463a      	mov	r2, r7
3401b0d0:	6a21      	ldr	r1, [r4, #32]
3401b0d2:	4628      	mov	r0, r5
3401b0d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3401b0d6:	47b0      	blx	r6
3401b0d8:	2800      	cmp	r0, #0
3401b0da:	dc08      	bgt.n	3401b0ee <__sflush_r+0xfa>
3401b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401b0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401b0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401b0e8:	81a3      	strh	r3, [r4, #12]
3401b0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401b0ee:	4407      	add	r7, r0
3401b0f0:	eba8 0800 	sub.w	r8, r8, r0
3401b0f4:	e7e7      	b.n	3401b0c6 <__sflush_r+0xd2>
3401b0f6:	bf00      	nop
3401b0f8:	20400001 	.word	0x20400001

3401b0fc <_fflush_r>:
3401b0fc:	b538      	push	{r3, r4, r5, lr}
3401b0fe:	690b      	ldr	r3, [r1, #16]
3401b100:	4605      	mov	r5, r0
3401b102:	460c      	mov	r4, r1
3401b104:	b913      	cbnz	r3, 3401b10c <_fflush_r+0x10>
3401b106:	2500      	movs	r5, #0
3401b108:	4628      	mov	r0, r5
3401b10a:	bd38      	pop	{r3, r4, r5, pc}
3401b10c:	b118      	cbz	r0, 3401b116 <_fflush_r+0x1a>
3401b10e:	6a03      	ldr	r3, [r0, #32]
3401b110:	b90b      	cbnz	r3, 3401b116 <_fflush_r+0x1a>
3401b112:	f000 f8bb 	bl	3401b28c <__sinit>
3401b116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401b11a:	2b00      	cmp	r3, #0
3401b11c:	d0f3      	beq.n	3401b106 <_fflush_r+0xa>
3401b11e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3401b120:	07d0      	lsls	r0, r2, #31
3401b122:	d404      	bmi.n	3401b12e <_fflush_r+0x32>
3401b124:	0599      	lsls	r1, r3, #22
3401b126:	d402      	bmi.n	3401b12e <_fflush_r+0x32>
3401b128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401b12a:	f000 facc 	bl	3401b6c6 <__retarget_lock_acquire_recursive>
3401b12e:	4628      	mov	r0, r5
3401b130:	4621      	mov	r1, r4
3401b132:	f7ff ff5f 	bl	3401aff4 <__sflush_r>
3401b136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401b138:	4605      	mov	r5, r0
3401b13a:	07da      	lsls	r2, r3, #31
3401b13c:	d4e4      	bmi.n	3401b108 <_fflush_r+0xc>
3401b13e:	89a3      	ldrh	r3, [r4, #12]
3401b140:	059b      	lsls	r3, r3, #22
3401b142:	d4e1      	bmi.n	3401b108 <_fflush_r+0xc>
3401b144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401b146:	f000 fabf 	bl	3401b6c8 <__retarget_lock_release_recursive>
3401b14a:	e7dd      	b.n	3401b108 <_fflush_r+0xc>

3401b14c <fflush>:
3401b14c:	4601      	mov	r1, r0
3401b14e:	b920      	cbnz	r0, 3401b15a <fflush+0xe>
3401b150:	4a04      	ldr	r2, [pc, #16]	@ (3401b164 <fflush+0x18>)
3401b152:	4905      	ldr	r1, [pc, #20]	@ (3401b168 <fflush+0x1c>)
3401b154:	4805      	ldr	r0, [pc, #20]	@ (3401b16c <fflush+0x20>)
3401b156:	f000 b8c3 	b.w	3401b2e0 <_fwalk_sglue>
3401b15a:	4b05      	ldr	r3, [pc, #20]	@ (3401b170 <fflush+0x24>)
3401b15c:	6818      	ldr	r0, [r3, #0]
3401b15e:	f7ff bfcd 	b.w	3401b0fc <_fflush_r>
3401b162:	bf00      	nop
3401b164:	3401e760 	.word	0x3401e760
3401b168:	3401b0fd 	.word	0x3401b0fd
3401b16c:	3401e770 	.word	0x3401e770
3401b170:	3401e76c 	.word	0x3401e76c

3401b174 <std>:
3401b174:	2300      	movs	r3, #0
3401b176:	b510      	push	{r4, lr}
3401b178:	4604      	mov	r4, r0
3401b17a:	6083      	str	r3, [r0, #8]
3401b17c:	8181      	strh	r1, [r0, #12]
3401b17e:	4619      	mov	r1, r3
3401b180:	6643      	str	r3, [r0, #100]	@ 0x64
3401b182:	81c2      	strh	r2, [r0, #14]
3401b184:	2208      	movs	r2, #8
3401b186:	6183      	str	r3, [r0, #24]
3401b188:	e9c0 3300 	strd	r3, r3, [r0]
3401b18c:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401b190:	305c      	adds	r0, #92	@ 0x5c
3401b192:	f000 fa0b 	bl	3401b5ac <memset>
3401b196:	4b0d      	ldr	r3, [pc, #52]	@ (3401b1cc <std+0x58>)
3401b198:	6224      	str	r4, [r4, #32]
3401b19a:	6263      	str	r3, [r4, #36]	@ 0x24
3401b19c:	4b0c      	ldr	r3, [pc, #48]	@ (3401b1d0 <std+0x5c>)
3401b19e:	62a3      	str	r3, [r4, #40]	@ 0x28
3401b1a0:	4b0c      	ldr	r3, [pc, #48]	@ (3401b1d4 <std+0x60>)
3401b1a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401b1a4:	4b0c      	ldr	r3, [pc, #48]	@ (3401b1d8 <std+0x64>)
3401b1a6:	6323      	str	r3, [r4, #48]	@ 0x30
3401b1a8:	4b0c      	ldr	r3, [pc, #48]	@ (3401b1dc <std+0x68>)
3401b1aa:	429c      	cmp	r4, r3
3401b1ac:	d006      	beq.n	3401b1bc <std+0x48>
3401b1ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401b1b2:	4294      	cmp	r4, r2
3401b1b4:	d002      	beq.n	3401b1bc <std+0x48>
3401b1b6:	33d0      	adds	r3, #208	@ 0xd0
3401b1b8:	429c      	cmp	r4, r3
3401b1ba:	d105      	bne.n	3401b1c8 <std+0x54>
3401b1bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401b1c4:	f000 ba7e 	b.w	3401b6c4 <__retarget_lock_init_recursive>
3401b1c8:	bd10      	pop	{r4, pc}
3401b1ca:	bf00      	nop
3401b1cc:	3401b3fd 	.word	0x3401b3fd
3401b1d0:	3401b41f 	.word	0x3401b41f
3401b1d4:	3401b457 	.word	0x3401b457
3401b1d8:	3401b47b 	.word	0x3401b47b
3401b1dc:	3401ee6c 	.word	0x3401ee6c

3401b1e0 <stdio_exit_handler>:
3401b1e0:	4a02      	ldr	r2, [pc, #8]	@ (3401b1ec <stdio_exit_handler+0xc>)
3401b1e2:	4903      	ldr	r1, [pc, #12]	@ (3401b1f0 <stdio_exit_handler+0x10>)
3401b1e4:	4803      	ldr	r0, [pc, #12]	@ (3401b1f4 <stdio_exit_handler+0x14>)
3401b1e6:	f000 b87b 	b.w	3401b2e0 <_fwalk_sglue>
3401b1ea:	bf00      	nop
3401b1ec:	3401e760 	.word	0x3401e760
3401b1f0:	3401b0fd 	.word	0x3401b0fd
3401b1f4:	3401e770 	.word	0x3401e770

3401b1f8 <cleanup_stdio>:
3401b1f8:	6841      	ldr	r1, [r0, #4]
3401b1fa:	4b0c      	ldr	r3, [pc, #48]	@ (3401b22c <cleanup_stdio+0x34>)
3401b1fc:	4299      	cmp	r1, r3
3401b1fe:	b510      	push	{r4, lr}
3401b200:	4604      	mov	r4, r0
3401b202:	d001      	beq.n	3401b208 <cleanup_stdio+0x10>
3401b204:	f7ff ff7a 	bl	3401b0fc <_fflush_r>
3401b208:	68a1      	ldr	r1, [r4, #8]
3401b20a:	4b09      	ldr	r3, [pc, #36]	@ (3401b230 <cleanup_stdio+0x38>)
3401b20c:	4299      	cmp	r1, r3
3401b20e:	d002      	beq.n	3401b216 <cleanup_stdio+0x1e>
3401b210:	4620      	mov	r0, r4
3401b212:	f7ff ff73 	bl	3401b0fc <_fflush_r>
3401b216:	68e1      	ldr	r1, [r4, #12]
3401b218:	4b06      	ldr	r3, [pc, #24]	@ (3401b234 <cleanup_stdio+0x3c>)
3401b21a:	4299      	cmp	r1, r3
3401b21c:	d004      	beq.n	3401b228 <cleanup_stdio+0x30>
3401b21e:	4620      	mov	r0, r4
3401b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401b224:	f7ff bf6a 	b.w	3401b0fc <_fflush_r>
3401b228:	bd10      	pop	{r4, pc}
3401b22a:	bf00      	nop
3401b22c:	3401ee6c 	.word	0x3401ee6c
3401b230:	3401eed4 	.word	0x3401eed4
3401b234:	3401ef3c 	.word	0x3401ef3c

3401b238 <global_stdio_init.part.0>:
3401b238:	b510      	push	{r4, lr}
3401b23a:	4b0b      	ldr	r3, [pc, #44]	@ (3401b268 <global_stdio_init.part.0+0x30>)
3401b23c:	2104      	movs	r1, #4
3401b23e:	4c0b      	ldr	r4, [pc, #44]	@ (3401b26c <global_stdio_init.part.0+0x34>)
3401b240:	4a0b      	ldr	r2, [pc, #44]	@ (3401b270 <global_stdio_init.part.0+0x38>)
3401b242:	4620      	mov	r0, r4
3401b244:	601a      	str	r2, [r3, #0]
3401b246:	2200      	movs	r2, #0
3401b248:	f7ff ff94 	bl	3401b174 <std>
3401b24c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401b250:	2201      	movs	r2, #1
3401b252:	2109      	movs	r1, #9
3401b254:	f7ff ff8e 	bl	3401b174 <std>
3401b258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401b25c:	2202      	movs	r2, #2
3401b25e:	2112      	movs	r1, #18
3401b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401b264:	f7ff bf86 	b.w	3401b174 <std>
3401b268:	3401efa4 	.word	0x3401efa4
3401b26c:	3401ee6c 	.word	0x3401ee6c
3401b270:	3401b1e1 	.word	0x3401b1e1

3401b274 <__sfp_lock_acquire>:
3401b274:	4801      	ldr	r0, [pc, #4]	@ (3401b27c <__sfp_lock_acquire+0x8>)
3401b276:	f000 ba26 	b.w	3401b6c6 <__retarget_lock_acquire_recursive>
3401b27a:	bf00      	nop
3401b27c:	3401efad 	.word	0x3401efad

3401b280 <__sfp_lock_release>:
3401b280:	4801      	ldr	r0, [pc, #4]	@ (3401b288 <__sfp_lock_release+0x8>)
3401b282:	f000 ba21 	b.w	3401b6c8 <__retarget_lock_release_recursive>
3401b286:	bf00      	nop
3401b288:	3401efad 	.word	0x3401efad

3401b28c <__sinit>:
3401b28c:	b510      	push	{r4, lr}
3401b28e:	4604      	mov	r4, r0
3401b290:	f7ff fff0 	bl	3401b274 <__sfp_lock_acquire>
3401b294:	6a23      	ldr	r3, [r4, #32]
3401b296:	b11b      	cbz	r3, 3401b2a0 <__sinit+0x14>
3401b298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401b29c:	f7ff bff0 	b.w	3401b280 <__sfp_lock_release>
3401b2a0:	4b04      	ldr	r3, [pc, #16]	@ (3401b2b4 <__sinit+0x28>)
3401b2a2:	6223      	str	r3, [r4, #32]
3401b2a4:	4b04      	ldr	r3, [pc, #16]	@ (3401b2b8 <__sinit+0x2c>)
3401b2a6:	681b      	ldr	r3, [r3, #0]
3401b2a8:	2b00      	cmp	r3, #0
3401b2aa:	d1f5      	bne.n	3401b298 <__sinit+0xc>
3401b2ac:	f7ff ffc4 	bl	3401b238 <global_stdio_init.part.0>
3401b2b0:	e7f2      	b.n	3401b298 <__sinit+0xc>
3401b2b2:	bf00      	nop
3401b2b4:	3401b1f9 	.word	0x3401b1f9
3401b2b8:	3401efa4 	.word	0x3401efa4

3401b2bc <fiprintf>:
3401b2bc:	b40e      	push	{r1, r2, r3}
3401b2be:	b503      	push	{r0, r1, lr}
3401b2c0:	ab03      	add	r3, sp, #12
3401b2c2:	4601      	mov	r1, r0
3401b2c4:	4805      	ldr	r0, [pc, #20]	@ (3401b2dc <fiprintf+0x20>)
3401b2c6:	f853 2b04 	ldr.w	r2, [r3], #4
3401b2ca:	6800      	ldr	r0, [r0, #0]
3401b2cc:	9301      	str	r3, [sp, #4]
3401b2ce:	f001 fbff 	bl	3401cad0 <_vfiprintf_r>
3401b2d2:	b002      	add	sp, #8
3401b2d4:	f85d eb04 	ldr.w	lr, [sp], #4
3401b2d8:	b003      	add	sp, #12
3401b2da:	4770      	bx	lr
3401b2dc:	3401e76c 	.word	0x3401e76c

3401b2e0 <_fwalk_sglue>:
3401b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401b2e4:	4607      	mov	r7, r0
3401b2e6:	4688      	mov	r8, r1
3401b2e8:	4614      	mov	r4, r2
3401b2ea:	2600      	movs	r6, #0
3401b2ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401b2f0:	f1b9 0901 	subs.w	r9, r9, #1
3401b2f4:	d505      	bpl.n	3401b302 <_fwalk_sglue+0x22>
3401b2f6:	6824      	ldr	r4, [r4, #0]
3401b2f8:	2c00      	cmp	r4, #0
3401b2fa:	d1f7      	bne.n	3401b2ec <_fwalk_sglue+0xc>
3401b2fc:	4630      	mov	r0, r6
3401b2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401b302:	89ab      	ldrh	r3, [r5, #12]
3401b304:	2b01      	cmp	r3, #1
3401b306:	d907      	bls.n	3401b318 <_fwalk_sglue+0x38>
3401b308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401b30c:	3301      	adds	r3, #1
3401b30e:	d003      	beq.n	3401b318 <_fwalk_sglue+0x38>
3401b310:	4629      	mov	r1, r5
3401b312:	4638      	mov	r0, r7
3401b314:	47c0      	blx	r8
3401b316:	4306      	orrs	r6, r0
3401b318:	3568      	adds	r5, #104	@ 0x68
3401b31a:	e7e9      	b.n	3401b2f0 <_fwalk_sglue+0x10>

3401b31c <iprintf>:
3401b31c:	b40f      	push	{r0, r1, r2, r3}
3401b31e:	b507      	push	{r0, r1, r2, lr}
3401b320:	4906      	ldr	r1, [pc, #24]	@ (3401b33c <iprintf+0x20>)
3401b322:	ab04      	add	r3, sp, #16
3401b324:	6808      	ldr	r0, [r1, #0]
3401b326:	f853 2b04 	ldr.w	r2, [r3], #4
3401b32a:	6881      	ldr	r1, [r0, #8]
3401b32c:	9301      	str	r3, [sp, #4]
3401b32e:	f001 fbcf 	bl	3401cad0 <_vfiprintf_r>
3401b332:	b003      	add	sp, #12
3401b334:	f85d eb04 	ldr.w	lr, [sp], #4
3401b338:	b004      	add	sp, #16
3401b33a:	4770      	bx	lr
3401b33c:	3401e76c 	.word	0x3401e76c

3401b340 <_puts_r>:
3401b340:	6a03      	ldr	r3, [r0, #32]
3401b342:	b570      	push	{r4, r5, r6, lr}
3401b344:	4605      	mov	r5, r0
3401b346:	460e      	mov	r6, r1
3401b348:	6884      	ldr	r4, [r0, #8]
3401b34a:	b90b      	cbnz	r3, 3401b350 <_puts_r+0x10>
3401b34c:	f7ff ff9e 	bl	3401b28c <__sinit>
3401b350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401b352:	07db      	lsls	r3, r3, #31
3401b354:	d405      	bmi.n	3401b362 <_puts_r+0x22>
3401b356:	89a3      	ldrh	r3, [r4, #12]
3401b358:	0598      	lsls	r0, r3, #22
3401b35a:	d402      	bmi.n	3401b362 <_puts_r+0x22>
3401b35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401b35e:	f000 f9b2 	bl	3401b6c6 <__retarget_lock_acquire_recursive>
3401b362:	89a3      	ldrh	r3, [r4, #12]
3401b364:	0719      	lsls	r1, r3, #28
3401b366:	d502      	bpl.n	3401b36e <_puts_r+0x2e>
3401b368:	6923      	ldr	r3, [r4, #16]
3401b36a:	2b00      	cmp	r3, #0
3401b36c:	d135      	bne.n	3401b3da <_puts_r+0x9a>
3401b36e:	4621      	mov	r1, r4
3401b370:	4628      	mov	r0, r5
3401b372:	f000 f8c5 	bl	3401b500 <__swsetup_r>
3401b376:	b380      	cbz	r0, 3401b3da <_puts_r+0x9a>
3401b378:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3401b37c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401b37e:	07da      	lsls	r2, r3, #31
3401b380:	d405      	bmi.n	3401b38e <_puts_r+0x4e>
3401b382:	89a3      	ldrh	r3, [r4, #12]
3401b384:	059b      	lsls	r3, r3, #22
3401b386:	d402      	bmi.n	3401b38e <_puts_r+0x4e>
3401b388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401b38a:	f000 f99d 	bl	3401b6c8 <__retarget_lock_release_recursive>
3401b38e:	4628      	mov	r0, r5
3401b390:	bd70      	pop	{r4, r5, r6, pc}
3401b392:	2b00      	cmp	r3, #0
3401b394:	da04      	bge.n	3401b3a0 <_puts_r+0x60>
3401b396:	69a2      	ldr	r2, [r4, #24]
3401b398:	429a      	cmp	r2, r3
3401b39a:	dc17      	bgt.n	3401b3cc <_puts_r+0x8c>
3401b39c:	290a      	cmp	r1, #10
3401b39e:	d015      	beq.n	3401b3cc <_puts_r+0x8c>
3401b3a0:	6823      	ldr	r3, [r4, #0]
3401b3a2:	1c5a      	adds	r2, r3, #1
3401b3a4:	6022      	str	r2, [r4, #0]
3401b3a6:	7019      	strb	r1, [r3, #0]
3401b3a8:	68a3      	ldr	r3, [r4, #8]
3401b3aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401b3ae:	3b01      	subs	r3, #1
3401b3b0:	60a3      	str	r3, [r4, #8]
3401b3b2:	2900      	cmp	r1, #0
3401b3b4:	d1ed      	bne.n	3401b392 <_puts_r+0x52>
3401b3b6:	2b00      	cmp	r3, #0
3401b3b8:	da11      	bge.n	3401b3de <_puts_r+0x9e>
3401b3ba:	4622      	mov	r2, r4
3401b3bc:	210a      	movs	r1, #10
3401b3be:	4628      	mov	r0, r5
3401b3c0:	f000 f85f 	bl	3401b482 <__swbuf_r>
3401b3c4:	3001      	adds	r0, #1
3401b3c6:	d0d7      	beq.n	3401b378 <_puts_r+0x38>
3401b3c8:	250a      	movs	r5, #10
3401b3ca:	e7d7      	b.n	3401b37c <_puts_r+0x3c>
3401b3cc:	4622      	mov	r2, r4
3401b3ce:	4628      	mov	r0, r5
3401b3d0:	f000 f857 	bl	3401b482 <__swbuf_r>
3401b3d4:	3001      	adds	r0, #1
3401b3d6:	d1e7      	bne.n	3401b3a8 <_puts_r+0x68>
3401b3d8:	e7ce      	b.n	3401b378 <_puts_r+0x38>
3401b3da:	3e01      	subs	r6, #1
3401b3dc:	e7e4      	b.n	3401b3a8 <_puts_r+0x68>
3401b3de:	6823      	ldr	r3, [r4, #0]
3401b3e0:	1c5a      	adds	r2, r3, #1
3401b3e2:	6022      	str	r2, [r4, #0]
3401b3e4:	220a      	movs	r2, #10
3401b3e6:	701a      	strb	r2, [r3, #0]
3401b3e8:	e7ee      	b.n	3401b3c8 <_puts_r+0x88>
	...

3401b3ec <puts>:
3401b3ec:	4b02      	ldr	r3, [pc, #8]	@ (3401b3f8 <puts+0xc>)
3401b3ee:	4601      	mov	r1, r0
3401b3f0:	6818      	ldr	r0, [r3, #0]
3401b3f2:	f7ff bfa5 	b.w	3401b340 <_puts_r>
3401b3f6:	bf00      	nop
3401b3f8:	3401e76c 	.word	0x3401e76c

3401b3fc <__sread>:
3401b3fc:	b510      	push	{r4, lr}
3401b3fe:	460c      	mov	r4, r1
3401b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401b404:	f000 f900 	bl	3401b608 <_read_r>
3401b408:	2800      	cmp	r0, #0
3401b40a:	bfab      	itete	ge
3401b40c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3401b40e:	89a3      	ldrhlt	r3, [r4, #12]
3401b410:	181b      	addge	r3, r3, r0
3401b412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3401b416:	bfac      	ite	ge
3401b418:	6563      	strge	r3, [r4, #84]	@ 0x54
3401b41a:	81a3      	strhlt	r3, [r4, #12]
3401b41c:	bd10      	pop	{r4, pc}

3401b41e <__swrite>:
3401b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401b422:	461f      	mov	r7, r3
3401b424:	898b      	ldrh	r3, [r1, #12]
3401b426:	4605      	mov	r5, r0
3401b428:	460c      	mov	r4, r1
3401b42a:	05db      	lsls	r3, r3, #23
3401b42c:	4616      	mov	r6, r2
3401b42e:	d505      	bpl.n	3401b43c <__swrite+0x1e>
3401b430:	2302      	movs	r3, #2
3401b432:	2200      	movs	r2, #0
3401b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401b438:	f000 f8d4 	bl	3401b5e4 <_lseek_r>
3401b43c:	89a3      	ldrh	r3, [r4, #12]
3401b43e:	4632      	mov	r2, r6
3401b440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401b444:	4628      	mov	r0, r5
3401b446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401b44a:	81a3      	strh	r3, [r4, #12]
3401b44c:	463b      	mov	r3, r7
3401b44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3401b452:	f000 b8fb 	b.w	3401b64c <_write_r>

3401b456 <__sseek>:
3401b456:	b510      	push	{r4, lr}
3401b458:	460c      	mov	r4, r1
3401b45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401b45e:	f000 f8c1 	bl	3401b5e4 <_lseek_r>
3401b462:	1c43      	adds	r3, r0, #1
3401b464:	89a3      	ldrh	r3, [r4, #12]
3401b466:	bf15      	itete	ne
3401b468:	6560      	strne	r0, [r4, #84]	@ 0x54
3401b46a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3401b46e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3401b472:	81a3      	strheq	r3, [r4, #12]
3401b474:	bf18      	it	ne
3401b476:	81a3      	strhne	r3, [r4, #12]
3401b478:	bd10      	pop	{r4, pc}

3401b47a <__sclose>:
3401b47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401b47e:	f000 b8a1 	b.w	3401b5c4 <_close_r>

3401b482 <__swbuf_r>:
3401b482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401b484:	460e      	mov	r6, r1
3401b486:	4614      	mov	r4, r2
3401b488:	4605      	mov	r5, r0
3401b48a:	b118      	cbz	r0, 3401b494 <__swbuf_r+0x12>
3401b48c:	6a03      	ldr	r3, [r0, #32]
3401b48e:	b90b      	cbnz	r3, 3401b494 <__swbuf_r+0x12>
3401b490:	f7ff fefc 	bl	3401b28c <__sinit>
3401b494:	69a3      	ldr	r3, [r4, #24]
3401b496:	60a3      	str	r3, [r4, #8]
3401b498:	89a3      	ldrh	r3, [r4, #12]
3401b49a:	071a      	lsls	r2, r3, #28
3401b49c:	d501      	bpl.n	3401b4a2 <__swbuf_r+0x20>
3401b49e:	6923      	ldr	r3, [r4, #16]
3401b4a0:	b943      	cbnz	r3, 3401b4b4 <__swbuf_r+0x32>
3401b4a2:	4621      	mov	r1, r4
3401b4a4:	4628      	mov	r0, r5
3401b4a6:	f000 f82b 	bl	3401b500 <__swsetup_r>
3401b4aa:	b118      	cbz	r0, 3401b4b4 <__swbuf_r+0x32>
3401b4ac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3401b4b0:	4638      	mov	r0, r7
3401b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401b4b4:	6823      	ldr	r3, [r4, #0]
3401b4b6:	b2f6      	uxtb	r6, r6
3401b4b8:	6922      	ldr	r2, [r4, #16]
3401b4ba:	4637      	mov	r7, r6
3401b4bc:	1a98      	subs	r0, r3, r2
3401b4be:	6963      	ldr	r3, [r4, #20]
3401b4c0:	4283      	cmp	r3, r0
3401b4c2:	dc05      	bgt.n	3401b4d0 <__swbuf_r+0x4e>
3401b4c4:	4621      	mov	r1, r4
3401b4c6:	4628      	mov	r0, r5
3401b4c8:	f7ff fe18 	bl	3401b0fc <_fflush_r>
3401b4cc:	2800      	cmp	r0, #0
3401b4ce:	d1ed      	bne.n	3401b4ac <__swbuf_r+0x2a>
3401b4d0:	68a3      	ldr	r3, [r4, #8]
3401b4d2:	3b01      	subs	r3, #1
3401b4d4:	60a3      	str	r3, [r4, #8]
3401b4d6:	6823      	ldr	r3, [r4, #0]
3401b4d8:	1c5a      	adds	r2, r3, #1
3401b4da:	6022      	str	r2, [r4, #0]
3401b4dc:	701e      	strb	r6, [r3, #0]
3401b4de:	1c43      	adds	r3, r0, #1
3401b4e0:	6962      	ldr	r2, [r4, #20]
3401b4e2:	429a      	cmp	r2, r3
3401b4e4:	d004      	beq.n	3401b4f0 <__swbuf_r+0x6e>
3401b4e6:	89a3      	ldrh	r3, [r4, #12]
3401b4e8:	07db      	lsls	r3, r3, #31
3401b4ea:	d5e1      	bpl.n	3401b4b0 <__swbuf_r+0x2e>
3401b4ec:	2e0a      	cmp	r6, #10
3401b4ee:	d1df      	bne.n	3401b4b0 <__swbuf_r+0x2e>
3401b4f0:	4621      	mov	r1, r4
3401b4f2:	4628      	mov	r0, r5
3401b4f4:	f7ff fe02 	bl	3401b0fc <_fflush_r>
3401b4f8:	2800      	cmp	r0, #0
3401b4fa:	d0d9      	beq.n	3401b4b0 <__swbuf_r+0x2e>
3401b4fc:	e7d6      	b.n	3401b4ac <__swbuf_r+0x2a>
	...

3401b500 <__swsetup_r>:
3401b500:	b538      	push	{r3, r4, r5, lr}
3401b502:	4b29      	ldr	r3, [pc, #164]	@ (3401b5a8 <__swsetup_r+0xa8>)
3401b504:	4605      	mov	r5, r0
3401b506:	460c      	mov	r4, r1
3401b508:	6818      	ldr	r0, [r3, #0]
3401b50a:	b118      	cbz	r0, 3401b514 <__swsetup_r+0x14>
3401b50c:	6a03      	ldr	r3, [r0, #32]
3401b50e:	b90b      	cbnz	r3, 3401b514 <__swsetup_r+0x14>
3401b510:	f7ff febc 	bl	3401b28c <__sinit>
3401b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401b518:	0719      	lsls	r1, r3, #28
3401b51a:	d422      	bmi.n	3401b562 <__swsetup_r+0x62>
3401b51c:	06da      	lsls	r2, r3, #27
3401b51e:	d407      	bmi.n	3401b530 <__swsetup_r+0x30>
3401b520:	2209      	movs	r2, #9
3401b522:	602a      	str	r2, [r5, #0]
3401b524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401b528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401b52c:	81a3      	strh	r3, [r4, #12]
3401b52e:	e033      	b.n	3401b598 <__swsetup_r+0x98>
3401b530:	0758      	lsls	r0, r3, #29
3401b532:	d512      	bpl.n	3401b55a <__swsetup_r+0x5a>
3401b534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401b536:	b141      	cbz	r1, 3401b54a <__swsetup_r+0x4a>
3401b538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401b53c:	4299      	cmp	r1, r3
3401b53e:	d002      	beq.n	3401b546 <__swsetup_r+0x46>
3401b540:	4628      	mov	r0, r5
3401b542:	f000 fecf 	bl	3401c2e4 <_free_r>
3401b546:	2300      	movs	r3, #0
3401b548:	6363      	str	r3, [r4, #52]	@ 0x34
3401b54a:	89a3      	ldrh	r3, [r4, #12]
3401b54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3401b550:	81a3      	strh	r3, [r4, #12]
3401b552:	2300      	movs	r3, #0
3401b554:	6063      	str	r3, [r4, #4]
3401b556:	6923      	ldr	r3, [r4, #16]
3401b558:	6023      	str	r3, [r4, #0]
3401b55a:	89a3      	ldrh	r3, [r4, #12]
3401b55c:	f043 0308 	orr.w	r3, r3, #8
3401b560:	81a3      	strh	r3, [r4, #12]
3401b562:	6923      	ldr	r3, [r4, #16]
3401b564:	b94b      	cbnz	r3, 3401b57a <__swsetup_r+0x7a>
3401b566:	89a3      	ldrh	r3, [r4, #12]
3401b568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3401b56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401b570:	d003      	beq.n	3401b57a <__swsetup_r+0x7a>
3401b572:	4621      	mov	r1, r4
3401b574:	4628      	mov	r0, r5
3401b576:	f001 fbe8 	bl	3401cd4a <__smakebuf_r>
3401b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401b57e:	f013 0201 	ands.w	r2, r3, #1
3401b582:	d00a      	beq.n	3401b59a <__swsetup_r+0x9a>
3401b584:	2200      	movs	r2, #0
3401b586:	60a2      	str	r2, [r4, #8]
3401b588:	6962      	ldr	r2, [r4, #20]
3401b58a:	4252      	negs	r2, r2
3401b58c:	61a2      	str	r2, [r4, #24]
3401b58e:	6922      	ldr	r2, [r4, #16]
3401b590:	b942      	cbnz	r2, 3401b5a4 <__swsetup_r+0xa4>
3401b592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3401b596:	d1c5      	bne.n	3401b524 <__swsetup_r+0x24>
3401b598:	bd38      	pop	{r3, r4, r5, pc}
3401b59a:	0799      	lsls	r1, r3, #30
3401b59c:	bf58      	it	pl
3401b59e:	6962      	ldrpl	r2, [r4, #20]
3401b5a0:	60a2      	str	r2, [r4, #8]
3401b5a2:	e7f4      	b.n	3401b58e <__swsetup_r+0x8e>
3401b5a4:	2000      	movs	r0, #0
3401b5a6:	e7f7      	b.n	3401b598 <__swsetup_r+0x98>
3401b5a8:	3401e76c 	.word	0x3401e76c

3401b5ac <memset>:
3401b5ac:	4402      	add	r2, r0
3401b5ae:	4603      	mov	r3, r0
3401b5b0:	4293      	cmp	r3, r2
3401b5b2:	d100      	bne.n	3401b5b6 <memset+0xa>
3401b5b4:	4770      	bx	lr
3401b5b6:	f803 1b01 	strb.w	r1, [r3], #1
3401b5ba:	e7f9      	b.n	3401b5b0 <memset+0x4>

3401b5bc <_localeconv_r>:
3401b5bc:	4800      	ldr	r0, [pc, #0]	@ (3401b5c0 <_localeconv_r+0x4>)
3401b5be:	4770      	bx	lr
3401b5c0:	3401e8ac 	.word	0x3401e8ac

3401b5c4 <_close_r>:
3401b5c4:	b538      	push	{r3, r4, r5, lr}
3401b5c6:	2300      	movs	r3, #0
3401b5c8:	4d05      	ldr	r5, [pc, #20]	@ (3401b5e0 <_close_r+0x1c>)
3401b5ca:	4604      	mov	r4, r0
3401b5cc:	4608      	mov	r0, r1
3401b5ce:	602b      	str	r3, [r5, #0]
3401b5d0:	f7e6 f8b0 	bl	34001734 <_close>
3401b5d4:	1c43      	adds	r3, r0, #1
3401b5d6:	d102      	bne.n	3401b5de <_close_r+0x1a>
3401b5d8:	682b      	ldr	r3, [r5, #0]
3401b5da:	b103      	cbz	r3, 3401b5de <_close_r+0x1a>
3401b5dc:	6023      	str	r3, [r4, #0]
3401b5de:	bd38      	pop	{r3, r4, r5, pc}
3401b5e0:	3401efa8 	.word	0x3401efa8

3401b5e4 <_lseek_r>:
3401b5e4:	b538      	push	{r3, r4, r5, lr}
3401b5e6:	4604      	mov	r4, r0
3401b5e8:	4d06      	ldr	r5, [pc, #24]	@ (3401b604 <_lseek_r+0x20>)
3401b5ea:	4608      	mov	r0, r1
3401b5ec:	4611      	mov	r1, r2
3401b5ee:	2200      	movs	r2, #0
3401b5f0:	602a      	str	r2, [r5, #0]
3401b5f2:	461a      	mov	r2, r3
3401b5f4:	f7e6 f8c5 	bl	34001782 <_lseek>
3401b5f8:	1c43      	adds	r3, r0, #1
3401b5fa:	d102      	bne.n	3401b602 <_lseek_r+0x1e>
3401b5fc:	682b      	ldr	r3, [r5, #0]
3401b5fe:	b103      	cbz	r3, 3401b602 <_lseek_r+0x1e>
3401b600:	6023      	str	r3, [r4, #0]
3401b602:	bd38      	pop	{r3, r4, r5, pc}
3401b604:	3401efa8 	.word	0x3401efa8

3401b608 <_read_r>:
3401b608:	b538      	push	{r3, r4, r5, lr}
3401b60a:	4604      	mov	r4, r0
3401b60c:	4d06      	ldr	r5, [pc, #24]	@ (3401b628 <_read_r+0x20>)
3401b60e:	4608      	mov	r0, r1
3401b610:	4611      	mov	r1, r2
3401b612:	2200      	movs	r2, #0
3401b614:	602a      	str	r2, [r5, #0]
3401b616:	461a      	mov	r2, r3
3401b618:	f7e6 f86f 	bl	340016fa <_read>
3401b61c:	1c43      	adds	r3, r0, #1
3401b61e:	d102      	bne.n	3401b626 <_read_r+0x1e>
3401b620:	682b      	ldr	r3, [r5, #0]
3401b622:	b103      	cbz	r3, 3401b626 <_read_r+0x1e>
3401b624:	6023      	str	r3, [r4, #0]
3401b626:	bd38      	pop	{r3, r4, r5, pc}
3401b628:	3401efa8 	.word	0x3401efa8

3401b62c <_sbrk_r>:
3401b62c:	b538      	push	{r3, r4, r5, lr}
3401b62e:	2300      	movs	r3, #0
3401b630:	4d05      	ldr	r5, [pc, #20]	@ (3401b648 <_sbrk_r+0x1c>)
3401b632:	4604      	mov	r4, r0
3401b634:	4608      	mov	r0, r1
3401b636:	602b      	str	r3, [r5, #0]
3401b638:	f001 fc5e 	bl	3401cef8 <_sbrk>
3401b63c:	1c43      	adds	r3, r0, #1
3401b63e:	d102      	bne.n	3401b646 <_sbrk_r+0x1a>
3401b640:	682b      	ldr	r3, [r5, #0]
3401b642:	b103      	cbz	r3, 3401b646 <_sbrk_r+0x1a>
3401b644:	6023      	str	r3, [r4, #0]
3401b646:	bd38      	pop	{r3, r4, r5, pc}
3401b648:	3401efa8 	.word	0x3401efa8

3401b64c <_write_r>:
3401b64c:	b538      	push	{r3, r4, r5, lr}
3401b64e:	4604      	mov	r4, r0
3401b650:	4d06      	ldr	r5, [pc, #24]	@ (3401b66c <_write_r+0x20>)
3401b652:	4608      	mov	r0, r1
3401b654:	4611      	mov	r1, r2
3401b656:	2200      	movs	r2, #0
3401b658:	602a      	str	r2, [r5, #0]
3401b65a:	461a      	mov	r2, r3
3401b65c:	f7e5 fd82 	bl	34001164 <_write>
3401b660:	1c43      	adds	r3, r0, #1
3401b662:	d102      	bne.n	3401b66a <_write_r+0x1e>
3401b664:	682b      	ldr	r3, [r5, #0]
3401b666:	b103      	cbz	r3, 3401b66a <_write_r+0x1e>
3401b668:	6023      	str	r3, [r4, #0]
3401b66a:	bd38      	pop	{r3, r4, r5, pc}
3401b66c:	3401efa8 	.word	0x3401efa8

3401b670 <__errno>:
3401b670:	4b01      	ldr	r3, [pc, #4]	@ (3401b678 <__errno+0x8>)
3401b672:	6818      	ldr	r0, [r3, #0]
3401b674:	4770      	bx	lr
3401b676:	bf00      	nop
3401b678:	3401e76c 	.word	0x3401e76c

3401b67c <__libc_init_array>:
3401b67c:	b570      	push	{r4, r5, r6, lr}
3401b67e:	4d0d      	ldr	r5, [pc, #52]	@ (3401b6b4 <__libc_init_array+0x38>)
3401b680:	2600      	movs	r6, #0
3401b682:	4c0d      	ldr	r4, [pc, #52]	@ (3401b6b8 <__libc_init_array+0x3c>)
3401b684:	1b64      	subs	r4, r4, r5
3401b686:	10a4      	asrs	r4, r4, #2
3401b688:	42a6      	cmp	r6, r4
3401b68a:	d109      	bne.n	3401b6a0 <__libc_init_array+0x24>
3401b68c:	4d0b      	ldr	r5, [pc, #44]	@ (3401b6bc <__libc_init_array+0x40>)
3401b68e:	2600      	movs	r6, #0
3401b690:	4c0b      	ldr	r4, [pc, #44]	@ (3401b6c0 <__libc_init_array+0x44>)
3401b692:	f001 fc3f 	bl	3401cf14 <_init>
3401b696:	1b64      	subs	r4, r4, r5
3401b698:	10a4      	asrs	r4, r4, #2
3401b69a:	42a6      	cmp	r6, r4
3401b69c:	d105      	bne.n	3401b6aa <__libc_init_array+0x2e>
3401b69e:	bd70      	pop	{r4, r5, r6, pc}
3401b6a0:	f855 3b04 	ldr.w	r3, [r5], #4
3401b6a4:	3601      	adds	r6, #1
3401b6a6:	4798      	blx	r3
3401b6a8:	e7ee      	b.n	3401b688 <__libc_init_array+0xc>
3401b6aa:	f855 3b04 	ldr.w	r3, [r5], #4
3401b6ae:	3601      	adds	r6, #1
3401b6b0:	4798      	blx	r3
3401b6b2:	e7f2      	b.n	3401b69a <__libc_init_array+0x1e>
3401b6b4:	3401e744 	.word	0x3401e744
3401b6b8:	3401e744 	.word	0x3401e744
3401b6bc:	3401e744 	.word	0x3401e744
3401b6c0:	3401e748 	.word	0x3401e748

3401b6c4 <__retarget_lock_init_recursive>:
3401b6c4:	4770      	bx	lr

3401b6c6 <__retarget_lock_acquire_recursive>:
3401b6c6:	4770      	bx	lr

3401b6c8 <__retarget_lock_release_recursive>:
3401b6c8:	4770      	bx	lr

3401b6ca <memchr>:
3401b6ca:	b2c9      	uxtb	r1, r1
3401b6cc:	4603      	mov	r3, r0
3401b6ce:	4402      	add	r2, r0
3401b6d0:	b510      	push	{r4, lr}
3401b6d2:	4293      	cmp	r3, r2
3401b6d4:	4618      	mov	r0, r3
3401b6d6:	d101      	bne.n	3401b6dc <memchr+0x12>
3401b6d8:	2000      	movs	r0, #0
3401b6da:	e003      	b.n	3401b6e4 <memchr+0x1a>
3401b6dc:	7804      	ldrb	r4, [r0, #0]
3401b6de:	3301      	adds	r3, #1
3401b6e0:	428c      	cmp	r4, r1
3401b6e2:	d1f6      	bne.n	3401b6d2 <memchr+0x8>
3401b6e4:	bd10      	pop	{r4, pc}

3401b6e6 <memcpy>:
3401b6e6:	440a      	add	r2, r1
3401b6e8:	1e43      	subs	r3, r0, #1
3401b6ea:	4291      	cmp	r1, r2
3401b6ec:	d100      	bne.n	3401b6f0 <memcpy+0xa>
3401b6ee:	4770      	bx	lr
3401b6f0:	b510      	push	{r4, lr}
3401b6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
3401b6f6:	4291      	cmp	r1, r2
3401b6f8:	f803 4f01 	strb.w	r4, [r3, #1]!
3401b6fc:	d1f9      	bne.n	3401b6f2 <memcpy+0xc>
3401b6fe:	bd10      	pop	{r4, pc}

3401b700 <abort>:
3401b700:	2006      	movs	r0, #6
3401b702:	b508      	push	{r3, lr}
3401b704:	f001 fb86 	bl	3401ce14 <raise>
3401b708:	2001      	movs	r0, #1
3401b70a:	f7e5 ffeb 	bl	340016e4 <_exit>

3401b70e <quorem>:
3401b70e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401b712:	6903      	ldr	r3, [r0, #16]
3401b714:	4607      	mov	r7, r0
3401b716:	690c      	ldr	r4, [r1, #16]
3401b718:	42a3      	cmp	r3, r4
3401b71a:	f2c0 8083 	blt.w	3401b824 <quorem+0x116>
3401b71e:	3c01      	subs	r4, #1
3401b720:	f100 0514 	add.w	r5, r0, #20
3401b724:	f101 0814 	add.w	r8, r1, #20
3401b728:	00a3      	lsls	r3, r4, #2
3401b72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401b72e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3401b732:	9300      	str	r3, [sp, #0]
3401b734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401b738:	9301      	str	r3, [sp, #4]
3401b73a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3401b73e:	3301      	adds	r3, #1
3401b740:	429a      	cmp	r2, r3
3401b742:	fbb2 f6f3 	udiv	r6, r2, r3
3401b746:	d331      	bcc.n	3401b7ac <quorem+0x9e>
3401b748:	f04f 0a00 	mov.w	sl, #0
3401b74c:	46c4      	mov	ip, r8
3401b74e:	46ae      	mov	lr, r5
3401b750:	46d3      	mov	fp, sl
3401b752:	f85c 3b04 	ldr.w	r3, [ip], #4
3401b756:	b298      	uxth	r0, r3
3401b758:	45e1      	cmp	r9, ip
3401b75a:	ea4f 4313 	mov.w	r3, r3, lsr #16
3401b75e:	fb06 a000 	mla	r0, r6, r0, sl
3401b762:	ea4f 4210 	mov.w	r2, r0, lsr #16
3401b766:	b280      	uxth	r0, r0
3401b768:	fb06 2303 	mla	r3, r6, r3, r2
3401b76c:	f8de 2000 	ldr.w	r2, [lr]
3401b770:	b292      	uxth	r2, r2
3401b772:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401b776:	eba2 0200 	sub.w	r2, r2, r0
3401b77a:	b29b      	uxth	r3, r3
3401b77c:	f8de 0000 	ldr.w	r0, [lr]
3401b780:	445a      	add	r2, fp
3401b782:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3401b786:	b292      	uxth	r2, r2
3401b788:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3401b78c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3401b790:	ea4f 4b23 	mov.w	fp, r3, asr #16
3401b794:	f84e 2b04 	str.w	r2, [lr], #4
3401b798:	d2db      	bcs.n	3401b752 <quorem+0x44>
3401b79a:	9b00      	ldr	r3, [sp, #0]
3401b79c:	58eb      	ldr	r3, [r5, r3]
3401b79e:	b92b      	cbnz	r3, 3401b7ac <quorem+0x9e>
3401b7a0:	9b01      	ldr	r3, [sp, #4]
3401b7a2:	3b04      	subs	r3, #4
3401b7a4:	429d      	cmp	r5, r3
3401b7a6:	461a      	mov	r2, r3
3401b7a8:	d330      	bcc.n	3401b80c <quorem+0xfe>
3401b7aa:	613c      	str	r4, [r7, #16]
3401b7ac:	4638      	mov	r0, r7
3401b7ae:	f001 f859 	bl	3401c864 <__mcmp>
3401b7b2:	2800      	cmp	r0, #0
3401b7b4:	db26      	blt.n	3401b804 <quorem+0xf6>
3401b7b6:	4629      	mov	r1, r5
3401b7b8:	2000      	movs	r0, #0
3401b7ba:	f858 2b04 	ldr.w	r2, [r8], #4
3401b7be:	f8d1 c000 	ldr.w	ip, [r1]
3401b7c2:	fa1f fe82 	uxth.w	lr, r2
3401b7c6:	45c1      	cmp	r9, r8
3401b7c8:	fa1f f38c 	uxth.w	r3, ip
3401b7cc:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401b7d0:	eba3 030e 	sub.w	r3, r3, lr
3401b7d4:	4403      	add	r3, r0
3401b7d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3401b7da:	b29b      	uxth	r3, r3
3401b7dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3401b7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401b7e4:	ea4f 4022 	mov.w	r0, r2, asr #16
3401b7e8:	f841 3b04 	str.w	r3, [r1], #4
3401b7ec:	d2e5      	bcs.n	3401b7ba <quorem+0xac>
3401b7ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401b7f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401b7f6:	b922      	cbnz	r2, 3401b802 <quorem+0xf4>
3401b7f8:	3b04      	subs	r3, #4
3401b7fa:	429d      	cmp	r5, r3
3401b7fc:	461a      	mov	r2, r3
3401b7fe:	d30b      	bcc.n	3401b818 <quorem+0x10a>
3401b800:	613c      	str	r4, [r7, #16]
3401b802:	3601      	adds	r6, #1
3401b804:	4630      	mov	r0, r6
3401b806:	b003      	add	sp, #12
3401b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401b80c:	6812      	ldr	r2, [r2, #0]
3401b80e:	3b04      	subs	r3, #4
3401b810:	2a00      	cmp	r2, #0
3401b812:	d1ca      	bne.n	3401b7aa <quorem+0x9c>
3401b814:	3c01      	subs	r4, #1
3401b816:	e7c5      	b.n	3401b7a4 <quorem+0x96>
3401b818:	6812      	ldr	r2, [r2, #0]
3401b81a:	3b04      	subs	r3, #4
3401b81c:	2a00      	cmp	r2, #0
3401b81e:	d1ef      	bne.n	3401b800 <quorem+0xf2>
3401b820:	3c01      	subs	r4, #1
3401b822:	e7ea      	b.n	3401b7fa <quorem+0xec>
3401b824:	2000      	movs	r0, #0
3401b826:	e7ee      	b.n	3401b806 <quorem+0xf8>

3401b828 <_dtoa_r>:
3401b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401b82c:	69c7      	ldr	r7, [r0, #28]
3401b82e:	4681      	mov	r9, r0
3401b830:	ed2d 8b02 	vpush	{d8}
3401b834:	b091      	sub	sp, #68	@ 0x44
3401b836:	ec55 4b10 	vmov	r4, r5, d0
3401b83a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3401b83c:	9107      	str	r1, [sp, #28]
3401b83e:	9209      	str	r2, [sp, #36]	@ 0x24
3401b840:	930d      	str	r3, [sp, #52]	@ 0x34
3401b842:	ed8d 0b02 	vstr	d0, [sp, #8]
3401b846:	b97f      	cbnz	r7, 3401b868 <_dtoa_r+0x40>
3401b848:	2010      	movs	r0, #16
3401b84a:	f7fe fee5 	bl	3401a618 <malloc>
3401b84e:	4602      	mov	r2, r0
3401b850:	f8c9 001c 	str.w	r0, [r9, #28]
3401b854:	b920      	cbnz	r0, 3401b860 <_dtoa_r+0x38>
3401b856:	4ba0      	ldr	r3, [pc, #640]	@ (3401bad8 <_dtoa_r+0x2b0>)
3401b858:	21ef      	movs	r1, #239	@ 0xef
3401b85a:	48a0      	ldr	r0, [pc, #640]	@ (3401badc <_dtoa_r+0x2b4>)
3401b85c:	f7fe febe 	bl	3401a5dc <__assert_func>
3401b860:	e9c0 7701 	strd	r7, r7, [r0, #4]
3401b864:	6007      	str	r7, [r0, #0]
3401b866:	60c7      	str	r7, [r0, #12]
3401b868:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401b86c:	6819      	ldr	r1, [r3, #0]
3401b86e:	b159      	cbz	r1, 3401b888 <_dtoa_r+0x60>
3401b870:	685a      	ldr	r2, [r3, #4]
3401b872:	2301      	movs	r3, #1
3401b874:	4648      	mov	r0, r9
3401b876:	4093      	lsls	r3, r2
3401b878:	604a      	str	r2, [r1, #4]
3401b87a:	608b      	str	r3, [r1, #8]
3401b87c:	f000 fdbc 	bl	3401c3f8 <_Bfree>
3401b880:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401b884:	2200      	movs	r2, #0
3401b886:	601a      	str	r2, [r3, #0]
3401b888:	1e2b      	subs	r3, r5, #0
3401b88a:	bfb7      	itett	lt
3401b88c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3401b890:	2300      	movge	r3, #0
3401b892:	2201      	movlt	r2, #1
3401b894:	9303      	strlt	r3, [sp, #12]
3401b896:	bfac      	ite	ge
3401b898:	6033      	strge	r3, [r6, #0]
3401b89a:	6032      	strlt	r2, [r6, #0]
3401b89c:	4b90      	ldr	r3, [pc, #576]	@ (3401bae0 <_dtoa_r+0x2b8>)
3401b89e:	9e03      	ldr	r6, [sp, #12]
3401b8a0:	43b3      	bics	r3, r6
3401b8a2:	d110      	bne.n	3401b8c6 <_dtoa_r+0x9e>
3401b8a4:	f242 730f 	movw	r3, #9999	@ 0x270f
3401b8a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401b8aa:	6013      	str	r3, [r2, #0]
3401b8ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
3401b8b0:	4323      	orrs	r3, r4
3401b8b2:	f000 84e6 	beq.w	3401c282 <_dtoa_r+0xa5a>
3401b8b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b8b8:	4f8a      	ldr	r7, [pc, #552]	@ (3401bae4 <_dtoa_r+0x2bc>)
3401b8ba:	2b00      	cmp	r3, #0
3401b8bc:	f000 84e8 	beq.w	3401c290 <_dtoa_r+0xa68>
3401b8c0:	1cfb      	adds	r3, r7, #3
3401b8c2:	f000 bce3 	b.w	3401c28c <_dtoa_r+0xa64>
3401b8c6:	ed9d 8b02 	vldr	d8, [sp, #8]
3401b8ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b8d2:	d10a      	bne.n	3401b8ea <_dtoa_r+0xc2>
3401b8d4:	2301      	movs	r3, #1
3401b8d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401b8d8:	6013      	str	r3, [r2, #0]
3401b8da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401b8dc:	b113      	cbz	r3, 3401b8e4 <_dtoa_r+0xbc>
3401b8de:	4b82      	ldr	r3, [pc, #520]	@ (3401bae8 <_dtoa_r+0x2c0>)
3401b8e0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401b8e2:	6013      	str	r3, [r2, #0]
3401b8e4:	4f81      	ldr	r7, [pc, #516]	@ (3401baec <_dtoa_r+0x2c4>)
3401b8e6:	f000 bcd3 	b.w	3401c290 <_dtoa_r+0xa68>
3401b8ea:	aa0e      	add	r2, sp, #56	@ 0x38
3401b8ec:	eeb0 0b48 	vmov.f64	d0, d8
3401b8f0:	a90f      	add	r1, sp, #60	@ 0x3c
3401b8f2:	4648      	mov	r0, r9
3401b8f4:	f001 f86a 	bl	3401c9cc <__d2b>
3401b8f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401b8fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401b8fe:	9001      	str	r0, [sp, #4]
3401b900:	2b00      	cmp	r3, #0
3401b902:	d045      	beq.n	3401b990 <_dtoa_r+0x168>
3401b904:	ee18 1a90 	vmov	r1, s17
3401b908:	eeb0 7b48 	vmov.f64	d7, d8
3401b90c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3401b910:	2500      	movs	r5, #0
3401b912:	f3c1 0113 	ubfx	r1, r1, #0, #20
3401b916:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401b91a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401b91e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3401b922:	ee07 1a90 	vmov	s15, r1
3401b926:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3401bac0 <_dtoa_r+0x298>
3401b92a:	ee37 7b46 	vsub.f64	d7, d7, d6
3401b92e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3401bac8 <_dtoa_r+0x2a0>
3401b932:	eea7 6b05 	vfma.f64	d6, d7, d5
3401b936:	ee07 3a90 	vmov	s15, r3
3401b93a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3401b93e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3401bad0 <_dtoa_r+0x2a8>
3401b942:	eeb0 7b46 	vmov.f64	d7, d6
3401b946:	eea4 7b05 	vfma.f64	d7, d4, d5
3401b94a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3401b94e:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3401b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b956:	ee16 8a90 	vmov	r8, s13
3401b95a:	d508      	bpl.n	3401b96e <_dtoa_r+0x146>
3401b95c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3401b960:	eeb4 6b47 	vcmp.f64	d6, d7
3401b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b968:	bf18      	it	ne
3401b96a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3401b96e:	f1b8 0f16 	cmp.w	r8, #22
3401b972:	d82d      	bhi.n	3401b9d0 <_dtoa_r+0x1a8>
3401b974:	495e      	ldr	r1, [pc, #376]	@ (3401baf0 <_dtoa_r+0x2c8>)
3401b976:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3401b97a:	ed91 7b00 	vldr	d7, [r1]
3401b97e:	eeb4 8bc7 	vcmpe.f64	d8, d7
3401b982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b986:	d501      	bpl.n	3401b98c <_dtoa_r+0x164>
3401b988:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401b98c:	2100      	movs	r1, #0
3401b98e:	e020      	b.n	3401b9d2 <_dtoa_r+0x1aa>
3401b990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3401b992:	2501      	movs	r5, #1
3401b994:	4413      	add	r3, r2
3401b996:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401b99a:	2920      	cmp	r1, #32
3401b99c:	bfc9      	itett	gt
3401b99e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3401b9a2:	f1c1 0120 	rsble	r1, r1, #32
3401b9a6:	408e      	lslgt	r6, r1
3401b9a8:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401b9ac:	bfd8      	it	le
3401b9ae:	fa04 f101 	lslle.w	r1, r4, r1
3401b9b2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3401b9b6:	bfc4      	itt	gt
3401b9b8:	fa24 f101 	lsrgt.w	r1, r4, r1
3401b9bc:	4331      	orrgt	r1, r6
3401b9be:	ee07 1a90 	vmov	s15, r1
3401b9c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401b9c6:	ee17 1a90 	vmov	r1, s15
3401b9ca:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401b9ce:	e7a6      	b.n	3401b91e <_dtoa_r+0xf6>
3401b9d0:	2101      	movs	r1, #1
3401b9d2:	1ad2      	subs	r2, r2, r3
3401b9d4:	910c      	str	r1, [sp, #48]	@ 0x30
3401b9d6:	1e53      	subs	r3, r2, #1
3401b9d8:	9306      	str	r3, [sp, #24]
3401b9da:	bf49      	itett	mi
3401b9dc:	f1c2 0301 	rsbmi	r3, r2, #1
3401b9e0:	2300      	movpl	r3, #0
3401b9e2:	9304      	strmi	r3, [sp, #16]
3401b9e4:	2300      	movmi	r3, #0
3401b9e6:	bf54      	ite	pl
3401b9e8:	9304      	strpl	r3, [sp, #16]
3401b9ea:	9306      	strmi	r3, [sp, #24]
3401b9ec:	f1b8 0f00 	cmp.w	r8, #0
3401b9f0:	db16      	blt.n	3401ba20 <_dtoa_r+0x1f8>
3401b9f2:	9b06      	ldr	r3, [sp, #24]
3401b9f4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3401b9f8:	4443      	add	r3, r8
3401b9fa:	9306      	str	r3, [sp, #24]
3401b9fc:	2300      	movs	r3, #0
3401b9fe:	9a07      	ldr	r2, [sp, #28]
3401ba00:	2a09      	cmp	r2, #9
3401ba02:	d843      	bhi.n	3401ba8c <_dtoa_r+0x264>
3401ba04:	2a05      	cmp	r2, #5
3401ba06:	bfc5      	ittet	gt
3401ba08:	3a04      	subgt	r2, #4
3401ba0a:	2400      	movgt	r4, #0
3401ba0c:	2401      	movle	r4, #1
3401ba0e:	9207      	strgt	r2, [sp, #28]
3401ba10:	9a07      	ldr	r2, [sp, #28]
3401ba12:	3a02      	subs	r2, #2
3401ba14:	2a03      	cmp	r2, #3
3401ba16:	d844      	bhi.n	3401baa2 <_dtoa_r+0x27a>
3401ba18:	e8df f002 	tbb	[pc, r2]
3401ba1c:	0b173634 	.word	0x0b173634
3401ba20:	9b04      	ldr	r3, [sp, #16]
3401ba22:	2200      	movs	r2, #0
3401ba24:	eba3 0308 	sub.w	r3, r3, r8
3401ba28:	920a      	str	r2, [sp, #40]	@ 0x28
3401ba2a:	9304      	str	r3, [sp, #16]
3401ba2c:	f1c8 0300 	rsb	r3, r8, #0
3401ba30:	e7e5      	b.n	3401b9fe <_dtoa_r+0x1d6>
3401ba32:	2201      	movs	r2, #1
3401ba34:	9208      	str	r2, [sp, #32]
3401ba36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401ba38:	eb08 0b02 	add.w	fp, r8, r2
3401ba3c:	f10b 0a01 	add.w	sl, fp, #1
3401ba40:	4652      	mov	r2, sl
3401ba42:	2a01      	cmp	r2, #1
3401ba44:	bfb8      	it	lt
3401ba46:	2201      	movlt	r2, #1
3401ba48:	e006      	b.n	3401ba58 <_dtoa_r+0x230>
3401ba4a:	2201      	movs	r2, #1
3401ba4c:	9208      	str	r2, [sp, #32]
3401ba4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401ba50:	2a00      	cmp	r2, #0
3401ba52:	dd29      	ble.n	3401baa8 <_dtoa_r+0x280>
3401ba54:	4693      	mov	fp, r2
3401ba56:	4692      	mov	sl, r2
3401ba58:	f8d9 701c 	ldr.w	r7, [r9, #28]
3401ba5c:	2100      	movs	r1, #0
3401ba5e:	2004      	movs	r0, #4
3401ba60:	f100 0614 	add.w	r6, r0, #20
3401ba64:	4296      	cmp	r6, r2
3401ba66:	d926      	bls.n	3401bab6 <_dtoa_r+0x28e>
3401ba68:	6079      	str	r1, [r7, #4]
3401ba6a:	4648      	mov	r0, r9
3401ba6c:	9305      	str	r3, [sp, #20]
3401ba6e:	f000 fc83 	bl	3401c378 <_Balloc>
3401ba72:	9b05      	ldr	r3, [sp, #20]
3401ba74:	4607      	mov	r7, r0
3401ba76:	2800      	cmp	r0, #0
3401ba78:	d13e      	bne.n	3401baf8 <_dtoa_r+0x2d0>
3401ba7a:	4b1e      	ldr	r3, [pc, #120]	@ (3401baf4 <_dtoa_r+0x2cc>)
3401ba7c:	4602      	mov	r2, r0
3401ba7e:	f240 11af 	movw	r1, #431	@ 0x1af
3401ba82:	e6ea      	b.n	3401b85a <_dtoa_r+0x32>
3401ba84:	2200      	movs	r2, #0
3401ba86:	e7e1      	b.n	3401ba4c <_dtoa_r+0x224>
3401ba88:	2200      	movs	r2, #0
3401ba8a:	e7d3      	b.n	3401ba34 <_dtoa_r+0x20c>
3401ba8c:	2401      	movs	r4, #1
3401ba8e:	2200      	movs	r2, #0
3401ba90:	e9cd 2407 	strd	r2, r4, [sp, #28]
3401ba94:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3401ba98:	2100      	movs	r1, #0
3401ba9a:	2212      	movs	r2, #18
3401ba9c:	46da      	mov	sl, fp
3401ba9e:	9109      	str	r1, [sp, #36]	@ 0x24
3401baa0:	e7da      	b.n	3401ba58 <_dtoa_r+0x230>
3401baa2:	2201      	movs	r2, #1
3401baa4:	9208      	str	r2, [sp, #32]
3401baa6:	e7f5      	b.n	3401ba94 <_dtoa_r+0x26c>
3401baa8:	f04f 0b01 	mov.w	fp, #1
3401baac:	46da      	mov	sl, fp
3401baae:	465a      	mov	r2, fp
3401bab0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3401bab4:	e7d0      	b.n	3401ba58 <_dtoa_r+0x230>
3401bab6:	3101      	adds	r1, #1
3401bab8:	0040      	lsls	r0, r0, #1
3401baba:	e7d1      	b.n	3401ba60 <_dtoa_r+0x238>
3401babc:	f3af 8000 	nop.w
3401bac0:	636f4361 	.word	0x636f4361
3401bac4:	3fd287a7 	.word	0x3fd287a7
3401bac8:	8b60c8b3 	.word	0x8b60c8b3
3401bacc:	3fc68a28 	.word	0x3fc68a28
3401bad0:	509f79fb 	.word	0x509f79fb
3401bad4:	3fd34413 	.word	0x3fd34413
3401bad8:	3401e443 	.word	0x3401e443
3401badc:	3401e45a 	.word	0x3401e45a
3401bae0:	7ff00000 	.word	0x7ff00000
3401bae4:	3401e43f 	.word	0x3401e43f
3401bae8:	3401e413 	.word	0x3401e413
3401baec:	3401e412 	.word	0x3401e412
3401baf0:	3401e570 	.word	0x3401e570
3401baf4:	3401e4b2 	.word	0x3401e4b2
3401baf8:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401bafc:	f1ba 0f0e 	cmp.w	sl, #14
3401bb00:	6010      	str	r0, [r2, #0]
3401bb02:	d86e      	bhi.n	3401bbe2 <_dtoa_r+0x3ba>
3401bb04:	2c00      	cmp	r4, #0
3401bb06:	d06c      	beq.n	3401bbe2 <_dtoa_r+0x3ba>
3401bb08:	f1b8 0f00 	cmp.w	r8, #0
3401bb0c:	f340 80b4 	ble.w	3401bc78 <_dtoa_r+0x450>
3401bb10:	f008 010f 	and.w	r1, r8, #15
3401bb14:	4ac7      	ldr	r2, [pc, #796]	@ (3401be34 <_dtoa_r+0x60c>)
3401bb16:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401bb1a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401bb1e:	ea4f 1128 	mov.w	r1, r8, asr #4
3401bb22:	ed92 7b00 	vldr	d7, [r2]
3401bb26:	f000 809b 	beq.w	3401bc60 <_dtoa_r+0x438>
3401bb2a:	4ac3      	ldr	r2, [pc, #780]	@ (3401be38 <_dtoa_r+0x610>)
3401bb2c:	f001 010f 	and.w	r1, r1, #15
3401bb30:	ed92 6b08 	vldr	d6, [r2, #32]
3401bb34:	2203      	movs	r2, #3
3401bb36:	ee88 6b06 	vdiv.f64	d6, d8, d6
3401bb3a:	ed8d 6b02 	vstr	d6, [sp, #8]
3401bb3e:	48be      	ldr	r0, [pc, #760]	@ (3401be38 <_dtoa_r+0x610>)
3401bb40:	2900      	cmp	r1, #0
3401bb42:	f040 808f 	bne.w	3401bc64 <_dtoa_r+0x43c>
3401bb46:	ed9d 6b02 	vldr	d6, [sp, #8]
3401bb4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401bb4e:	ed8d 7b02 	vstr	d7, [sp, #8]
3401bb52:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401bb54:	ed9d 7b02 	vldr	d7, [sp, #8]
3401bb58:	2900      	cmp	r1, #0
3401bb5a:	f000 80b3 	beq.w	3401bcc4 <_dtoa_r+0x49c>
3401bb5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3401bb62:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bb6a:	f140 80ab 	bpl.w	3401bcc4 <_dtoa_r+0x49c>
3401bb6e:	f1ba 0f00 	cmp.w	sl, #0
3401bb72:	f000 80a7 	beq.w	3401bcc4 <_dtoa_r+0x49c>
3401bb76:	f1bb 0f00 	cmp.w	fp, #0
3401bb7a:	dd30      	ble.n	3401bbde <_dtoa_r+0x3b6>
3401bb7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3401bb80:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3401bb84:	3201      	adds	r2, #1
3401bb86:	465c      	mov	r4, fp
3401bb88:	9105      	str	r1, [sp, #20]
3401bb8a:	ee27 7b06 	vmul.f64	d7, d7, d6
3401bb8e:	ed8d 7b02 	vstr	d7, [sp, #8]
3401bb92:	ee07 2a90 	vmov	s15, r2
3401bb96:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401bb9a:	ed9d 6b02 	vldr	d6, [sp, #8]
3401bb9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3401bba2:	eea7 5b06 	vfma.f64	d5, d7, d6
3401bba6:	ee15 2a90 	vmov	r2, s11
3401bbaa:	ec51 0b15 	vmov	r0, r1, d5
3401bbae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3401bbb2:	2c00      	cmp	r4, #0
3401bbb4:	f040 808a 	bne.w	3401bccc <_dtoa_r+0x4a4>
3401bbb8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401bbbc:	ee36 6b47 	vsub.f64	d6, d6, d7
3401bbc0:	ec41 0b17 	vmov	d7, r0, r1
3401bbc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401bbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bbcc:	f300 826a 	bgt.w	3401c0a4 <_dtoa_r+0x87c>
3401bbd0:	eeb1 7b47 	vneg.f64	d7, d7
3401bbd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401bbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bbdc:	d423      	bmi.n	3401bc26 <_dtoa_r+0x3fe>
3401bbde:	ed8d 8b02 	vstr	d8, [sp, #8]
3401bbe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3401bbe4:	2a00      	cmp	r2, #0
3401bbe6:	f2c0 8129 	blt.w	3401be3c <_dtoa_r+0x614>
3401bbea:	f1b8 0f0e 	cmp.w	r8, #14
3401bbee:	f300 8125 	bgt.w	3401be3c <_dtoa_r+0x614>
3401bbf2:	4b90      	ldr	r3, [pc, #576]	@ (3401be34 <_dtoa_r+0x60c>)
3401bbf4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3401bbf8:	ed93 6b00 	vldr	d6, [r3]
3401bbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401bbfe:	2b00      	cmp	r3, #0
3401bc00:	f280 80c8 	bge.w	3401bd94 <_dtoa_r+0x56c>
3401bc04:	f1ba 0f00 	cmp.w	sl, #0
3401bc08:	f300 80c4 	bgt.w	3401bd94 <_dtoa_r+0x56c>
3401bc0c:	d10b      	bne.n	3401bc26 <_dtoa_r+0x3fe>
3401bc0e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401bc12:	ee26 6b07 	vmul.f64	d6, d6, d7
3401bc16:	ed9d 7b02 	vldr	d7, [sp, #8]
3401bc1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401bc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bc22:	f2c0 823c 	blt.w	3401c09e <_dtoa_r+0x876>
3401bc26:	2400      	movs	r4, #0
3401bc28:	4625      	mov	r5, r4
3401bc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401bc2c:	463e      	mov	r6, r7
3401bc2e:	43db      	mvns	r3, r3
3401bc30:	9305      	str	r3, [sp, #20]
3401bc32:	f04f 0800 	mov.w	r8, #0
3401bc36:	4621      	mov	r1, r4
3401bc38:	4648      	mov	r0, r9
3401bc3a:	f000 fbdd 	bl	3401c3f8 <_Bfree>
3401bc3e:	2d00      	cmp	r5, #0
3401bc40:	f000 80a2 	beq.w	3401bd88 <_dtoa_r+0x560>
3401bc44:	f1b8 0f00 	cmp.w	r8, #0
3401bc48:	d005      	beq.n	3401bc56 <_dtoa_r+0x42e>
3401bc4a:	45a8      	cmp	r8, r5
3401bc4c:	d003      	beq.n	3401bc56 <_dtoa_r+0x42e>
3401bc4e:	4641      	mov	r1, r8
3401bc50:	4648      	mov	r0, r9
3401bc52:	f000 fbd1 	bl	3401c3f8 <_Bfree>
3401bc56:	4629      	mov	r1, r5
3401bc58:	4648      	mov	r0, r9
3401bc5a:	f000 fbcd 	bl	3401c3f8 <_Bfree>
3401bc5e:	e093      	b.n	3401bd88 <_dtoa_r+0x560>
3401bc60:	2202      	movs	r2, #2
3401bc62:	e76c      	b.n	3401bb3e <_dtoa_r+0x316>
3401bc64:	07cc      	lsls	r4, r1, #31
3401bc66:	d504      	bpl.n	3401bc72 <_dtoa_r+0x44a>
3401bc68:	3201      	adds	r2, #1
3401bc6a:	ed90 6b00 	vldr	d6, [r0]
3401bc6e:	ee27 7b06 	vmul.f64	d7, d7, d6
3401bc72:	1049      	asrs	r1, r1, #1
3401bc74:	3008      	adds	r0, #8
3401bc76:	e763      	b.n	3401bb40 <_dtoa_r+0x318>
3401bc78:	d022      	beq.n	3401bcc0 <_dtoa_r+0x498>
3401bc7a:	f1c8 0100 	rsb	r1, r8, #0
3401bc7e:	4a6d      	ldr	r2, [pc, #436]	@ (3401be34 <_dtoa_r+0x60c>)
3401bc80:	2400      	movs	r4, #0
3401bc82:	f001 000f 	and.w	r0, r1, #15
3401bc86:	1109      	asrs	r1, r1, #4
3401bc88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401bc8c:	486a      	ldr	r0, [pc, #424]	@ (3401be38 <_dtoa_r+0x610>)
3401bc8e:	ed92 7b00 	vldr	d7, [r2]
3401bc92:	2202      	movs	r2, #2
3401bc94:	ee28 7b07 	vmul.f64	d7, d8, d7
3401bc98:	ed8d 7b02 	vstr	d7, [sp, #8]
3401bc9c:	b929      	cbnz	r1, 3401bcaa <_dtoa_r+0x482>
3401bc9e:	2c00      	cmp	r4, #0
3401bca0:	f43f af57 	beq.w	3401bb52 <_dtoa_r+0x32a>
3401bca4:	ed8d 7b02 	vstr	d7, [sp, #8]
3401bca8:	e753      	b.n	3401bb52 <_dtoa_r+0x32a>
3401bcaa:	07ce      	lsls	r6, r1, #31
3401bcac:	d505      	bpl.n	3401bcba <_dtoa_r+0x492>
3401bcae:	3201      	adds	r2, #1
3401bcb0:	2401      	movs	r4, #1
3401bcb2:	ed90 6b00 	vldr	d6, [r0]
3401bcb6:	ee27 7b06 	vmul.f64	d7, d7, d6
3401bcba:	1049      	asrs	r1, r1, #1
3401bcbc:	3008      	adds	r0, #8
3401bcbe:	e7ed      	b.n	3401bc9c <_dtoa_r+0x474>
3401bcc0:	2202      	movs	r2, #2
3401bcc2:	e746      	b.n	3401bb52 <_dtoa_r+0x32a>
3401bcc4:	4654      	mov	r4, sl
3401bcc6:	f8cd 8014 	str.w	r8, [sp, #20]
3401bcca:	e762      	b.n	3401bb92 <_dtoa_r+0x36a>
3401bccc:	4a59      	ldr	r2, [pc, #356]	@ (3401be34 <_dtoa_r+0x60c>)
3401bcce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3401bcd2:	443c      	add	r4, r7
3401bcd4:	ed12 4b02 	vldr	d4, [r2, #-8]
3401bcd8:	9a08      	ldr	r2, [sp, #32]
3401bcda:	ec41 0b17 	vmov	d7, r0, r1
3401bcde:	b34a      	cbz	r2, 3401bd34 <_dtoa_r+0x50c>
3401bce0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3401bce4:	463e      	mov	r6, r7
3401bce6:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401bcea:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401bcee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401bcf2:	ee35 7b47 	vsub.f64	d7, d5, d7
3401bcf6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401bcfa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401bcfe:	ee14 2a90 	vmov	r2, s9
3401bd02:	3230      	adds	r2, #48	@ 0x30
3401bd04:	ee36 6b45 	vsub.f64	d6, d6, d5
3401bd08:	f806 2b01 	strb.w	r2, [r6], #1
3401bd0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bd14:	d438      	bmi.n	3401bd88 <_dtoa_r+0x560>
3401bd16:	ee32 5b46 	vsub.f64	d5, d2, d6
3401bd1a:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401bd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bd22:	d46e      	bmi.n	3401be02 <_dtoa_r+0x5da>
3401bd24:	42a6      	cmp	r6, r4
3401bd26:	f43f af5a 	beq.w	3401bbde <_dtoa_r+0x3b6>
3401bd2a:	ee27 7b03 	vmul.f64	d7, d7, d3
3401bd2e:	ee26 6b03 	vmul.f64	d6, d6, d3
3401bd32:	e7e0      	b.n	3401bcf6 <_dtoa_r+0x4ce>
3401bd34:	ee27 7b04 	vmul.f64	d7, d7, d4
3401bd38:	4621      	mov	r1, r4
3401bd3a:	463e      	mov	r6, r7
3401bd3c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401bd40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401bd44:	ee14 2a90 	vmov	r2, s9
3401bd48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401bd4c:	3230      	adds	r2, #48	@ 0x30
3401bd4e:	ee36 6b45 	vsub.f64	d6, d6, d5
3401bd52:	f806 2b01 	strb.w	r2, [r6], #1
3401bd56:	42a6      	cmp	r6, r4
3401bd58:	d119      	bne.n	3401bd8e <_dtoa_r+0x566>
3401bd5a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3401bd5e:	ee37 4b05 	vadd.f64	d4, d7, d5
3401bd62:	eeb4 6bc4 	vcmpe.f64	d6, d4
3401bd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bd6a:	dc4a      	bgt.n	3401be02 <_dtoa_r+0x5da>
3401bd6c:	ee35 5b47 	vsub.f64	d5, d5, d7
3401bd70:	eeb4 6bc5 	vcmpe.f64	d6, d5
3401bd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bd78:	f57f af31 	bpl.w	3401bbde <_dtoa_r+0x3b6>
3401bd7c:	460e      	mov	r6, r1
3401bd7e:	3901      	subs	r1, #1
3401bd80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3401bd84:	2b30      	cmp	r3, #48	@ 0x30
3401bd86:	d0f9      	beq.n	3401bd7c <_dtoa_r+0x554>
3401bd88:	f8dd 8014 	ldr.w	r8, [sp, #20]
3401bd8c:	e027      	b.n	3401bdde <_dtoa_r+0x5b6>
3401bd8e:	ee26 6b03 	vmul.f64	d6, d6, d3
3401bd92:	e7d5      	b.n	3401bd40 <_dtoa_r+0x518>
3401bd94:	ed9d 7b02 	vldr	d7, [sp, #8]
3401bd98:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401bd9c:	463e      	mov	r6, r7
3401bd9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
3401bda2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3401bda6:	ee15 3a10 	vmov	r3, s10
3401bdaa:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401bdae:	3330      	adds	r3, #48	@ 0x30
3401bdb0:	eea3 7b46 	vfms.f64	d7, d3, d6
3401bdb4:	f806 3b01 	strb.w	r3, [r6], #1
3401bdb8:	1bf3      	subs	r3, r6, r7
3401bdba:	459a      	cmp	sl, r3
3401bdbc:	d132      	bne.n	3401be24 <_dtoa_r+0x5fc>
3401bdbe:	ee37 7b07 	vadd.f64	d7, d7, d7
3401bdc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bdca:	dc18      	bgt.n	3401bdfe <_dtoa_r+0x5d6>
3401bdcc:	eeb4 7b46 	vcmp.f64	d7, d6
3401bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401bdd4:	d103      	bne.n	3401bdde <_dtoa_r+0x5b6>
3401bdd6:	ee15 3a10 	vmov	r3, s10
3401bdda:	07db      	lsls	r3, r3, #31
3401bddc:	d40f      	bmi.n	3401bdfe <_dtoa_r+0x5d6>
3401bdde:	9901      	ldr	r1, [sp, #4]
3401bde0:	4648      	mov	r0, r9
3401bde2:	f000 fb09 	bl	3401c3f8 <_Bfree>
3401bde6:	2300      	movs	r3, #0
3401bde8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401bdea:	7033      	strb	r3, [r6, #0]
3401bdec:	f108 0301 	add.w	r3, r8, #1
3401bdf0:	6013      	str	r3, [r2, #0]
3401bdf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401bdf4:	2b00      	cmp	r3, #0
3401bdf6:	f000 824b 	beq.w	3401c290 <_dtoa_r+0xa68>
3401bdfa:	601e      	str	r6, [r3, #0]
3401bdfc:	e248      	b.n	3401c290 <_dtoa_r+0xa68>
3401bdfe:	f8cd 8014 	str.w	r8, [sp, #20]
3401be02:	4633      	mov	r3, r6
3401be04:	461e      	mov	r6, r3
3401be06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401be0a:	2a39      	cmp	r2, #57	@ 0x39
3401be0c:	d106      	bne.n	3401be1c <_dtoa_r+0x5f4>
3401be0e:	429f      	cmp	r7, r3
3401be10:	d1f8      	bne.n	3401be04 <_dtoa_r+0x5dc>
3401be12:	9a05      	ldr	r2, [sp, #20]
3401be14:	3201      	adds	r2, #1
3401be16:	9205      	str	r2, [sp, #20]
3401be18:	2230      	movs	r2, #48	@ 0x30
3401be1a:	703a      	strb	r2, [r7, #0]
3401be1c:	781a      	ldrb	r2, [r3, #0]
3401be1e:	3201      	adds	r2, #1
3401be20:	701a      	strb	r2, [r3, #0]
3401be22:	e7b1      	b.n	3401bd88 <_dtoa_r+0x560>
3401be24:	ee27 7b04 	vmul.f64	d7, d7, d4
3401be28:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401be2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401be30:	d1b5      	bne.n	3401bd9e <_dtoa_r+0x576>
3401be32:	e7d4      	b.n	3401bdde <_dtoa_r+0x5b6>
3401be34:	3401e570 	.word	0x3401e570
3401be38:	3401e548 	.word	0x3401e548
3401be3c:	9908      	ldr	r1, [sp, #32]
3401be3e:	2900      	cmp	r1, #0
3401be40:	f000 80e9 	beq.w	3401c016 <_dtoa_r+0x7ee>
3401be44:	9907      	ldr	r1, [sp, #28]
3401be46:	2901      	cmp	r1, #1
3401be48:	f300 80cb 	bgt.w	3401bfe2 <_dtoa_r+0x7ba>
3401be4c:	2d00      	cmp	r5, #0
3401be4e:	f000 80c4 	beq.w	3401bfda <_dtoa_r+0x7b2>
3401be52:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401be56:	461c      	mov	r4, r3
3401be58:	9e04      	ldr	r6, [sp, #16]
3401be5a:	9305      	str	r3, [sp, #20]
3401be5c:	2101      	movs	r1, #1
3401be5e:	9b04      	ldr	r3, [sp, #16]
3401be60:	4648      	mov	r0, r9
3401be62:	4413      	add	r3, r2
3401be64:	9304      	str	r3, [sp, #16]
3401be66:	9b06      	ldr	r3, [sp, #24]
3401be68:	4413      	add	r3, r2
3401be6a:	9306      	str	r3, [sp, #24]
3401be6c:	f000 fb7a 	bl	3401c564 <__i2b>
3401be70:	9b05      	ldr	r3, [sp, #20]
3401be72:	4605      	mov	r5, r0
3401be74:	b166      	cbz	r6, 3401be90 <_dtoa_r+0x668>
3401be76:	9a06      	ldr	r2, [sp, #24]
3401be78:	2a00      	cmp	r2, #0
3401be7a:	dd09      	ble.n	3401be90 <_dtoa_r+0x668>
3401be7c:	42b2      	cmp	r2, r6
3401be7e:	9904      	ldr	r1, [sp, #16]
3401be80:	bfa8      	it	ge
3401be82:	4632      	movge	r2, r6
3401be84:	1a89      	subs	r1, r1, r2
3401be86:	1ab6      	subs	r6, r6, r2
3401be88:	9104      	str	r1, [sp, #16]
3401be8a:	9906      	ldr	r1, [sp, #24]
3401be8c:	1a8a      	subs	r2, r1, r2
3401be8e:	9206      	str	r2, [sp, #24]
3401be90:	b30b      	cbz	r3, 3401bed6 <_dtoa_r+0x6ae>
3401be92:	9a08      	ldr	r2, [sp, #32]
3401be94:	2a00      	cmp	r2, #0
3401be96:	f000 80c5 	beq.w	3401c024 <_dtoa_r+0x7fc>
3401be9a:	2c00      	cmp	r4, #0
3401be9c:	f000 80bf 	beq.w	3401c01e <_dtoa_r+0x7f6>
3401bea0:	4629      	mov	r1, r5
3401bea2:	4622      	mov	r2, r4
3401bea4:	4648      	mov	r0, r9
3401bea6:	930b      	str	r3, [sp, #44]	@ 0x2c
3401bea8:	f000 fc16 	bl	3401c6d8 <__pow5mult>
3401beac:	9a01      	ldr	r2, [sp, #4]
3401beae:	4601      	mov	r1, r0
3401beb0:	4605      	mov	r5, r0
3401beb2:	4648      	mov	r0, r9
3401beb4:	f000 fb6c 	bl	3401c590 <__multiply>
3401beb8:	9901      	ldr	r1, [sp, #4]
3401beba:	9005      	str	r0, [sp, #20]
3401bebc:	4648      	mov	r0, r9
3401bebe:	f000 fa9b 	bl	3401c3f8 <_Bfree>
3401bec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401bec4:	1b1b      	subs	r3, r3, r4
3401bec6:	f000 80b0 	beq.w	3401c02a <_dtoa_r+0x802>
3401beca:	461a      	mov	r2, r3
3401becc:	9905      	ldr	r1, [sp, #20]
3401bece:	4648      	mov	r0, r9
3401bed0:	f000 fc02 	bl	3401c6d8 <__pow5mult>
3401bed4:	9001      	str	r0, [sp, #4]
3401bed6:	2101      	movs	r1, #1
3401bed8:	4648      	mov	r0, r9
3401beda:	f000 fb43 	bl	3401c564 <__i2b>
3401bede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401bee0:	4604      	mov	r4, r0
3401bee2:	2b00      	cmp	r3, #0
3401bee4:	f000 81da 	beq.w	3401c29c <_dtoa_r+0xa74>
3401bee8:	461a      	mov	r2, r3
3401beea:	4601      	mov	r1, r0
3401beec:	4648      	mov	r0, r9
3401beee:	f000 fbf3 	bl	3401c6d8 <__pow5mult>
3401bef2:	9b07      	ldr	r3, [sp, #28]
3401bef4:	4604      	mov	r4, r0
3401bef6:	2b01      	cmp	r3, #1
3401bef8:	f300 80a0 	bgt.w	3401c03c <_dtoa_r+0x814>
3401befc:	9b02      	ldr	r3, [sp, #8]
3401befe:	2b00      	cmp	r3, #0
3401bf00:	f040 8096 	bne.w	3401c030 <_dtoa_r+0x808>
3401bf04:	9b03      	ldr	r3, [sp, #12]
3401bf06:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401bf0a:	2a00      	cmp	r2, #0
3401bf0c:	f040 8092 	bne.w	3401c034 <_dtoa_r+0x80c>
3401bf10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3401bf14:	0d12      	lsrs	r2, r2, #20
3401bf16:	0512      	lsls	r2, r2, #20
3401bf18:	2a00      	cmp	r2, #0
3401bf1a:	f000 808d 	beq.w	3401c038 <_dtoa_r+0x810>
3401bf1e:	9b04      	ldr	r3, [sp, #16]
3401bf20:	3301      	adds	r3, #1
3401bf22:	9304      	str	r3, [sp, #16]
3401bf24:	9b06      	ldr	r3, [sp, #24]
3401bf26:	3301      	adds	r3, #1
3401bf28:	9306      	str	r3, [sp, #24]
3401bf2a:	2301      	movs	r3, #1
3401bf2c:	930b      	str	r3, [sp, #44]	@ 0x2c
3401bf2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401bf30:	2b00      	cmp	r3, #0
3401bf32:	f000 81b9 	beq.w	3401c2a8 <_dtoa_r+0xa80>
3401bf36:	6922      	ldr	r2, [r4, #16]
3401bf38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3401bf3c:	6910      	ldr	r0, [r2, #16]
3401bf3e:	f000 fac5 	bl	3401c4cc <__hi0bits>
3401bf42:	f1c0 0020 	rsb	r0, r0, #32
3401bf46:	9b06      	ldr	r3, [sp, #24]
3401bf48:	4418      	add	r0, r3
3401bf4a:	f010 001f 	ands.w	r0, r0, #31
3401bf4e:	f000 8081 	beq.w	3401c054 <_dtoa_r+0x82c>
3401bf52:	f1c0 0220 	rsb	r2, r0, #32
3401bf56:	2a04      	cmp	r2, #4
3401bf58:	dd73      	ble.n	3401c042 <_dtoa_r+0x81a>
3401bf5a:	f1c0 001c 	rsb	r0, r0, #28
3401bf5e:	9b04      	ldr	r3, [sp, #16]
3401bf60:	4403      	add	r3, r0
3401bf62:	4406      	add	r6, r0
3401bf64:	9304      	str	r3, [sp, #16]
3401bf66:	9b06      	ldr	r3, [sp, #24]
3401bf68:	4403      	add	r3, r0
3401bf6a:	9306      	str	r3, [sp, #24]
3401bf6c:	9b04      	ldr	r3, [sp, #16]
3401bf6e:	2b00      	cmp	r3, #0
3401bf70:	dd05      	ble.n	3401bf7e <_dtoa_r+0x756>
3401bf72:	461a      	mov	r2, r3
3401bf74:	9901      	ldr	r1, [sp, #4]
3401bf76:	4648      	mov	r0, r9
3401bf78:	f000 fc08 	bl	3401c78c <__lshift>
3401bf7c:	9001      	str	r0, [sp, #4]
3401bf7e:	9b06      	ldr	r3, [sp, #24]
3401bf80:	2b00      	cmp	r3, #0
3401bf82:	dd05      	ble.n	3401bf90 <_dtoa_r+0x768>
3401bf84:	4621      	mov	r1, r4
3401bf86:	461a      	mov	r2, r3
3401bf88:	4648      	mov	r0, r9
3401bf8a:	f000 fbff 	bl	3401c78c <__lshift>
3401bf8e:	4604      	mov	r4, r0
3401bf90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401bf92:	2b00      	cmp	r3, #0
3401bf94:	d060      	beq.n	3401c058 <_dtoa_r+0x830>
3401bf96:	4621      	mov	r1, r4
3401bf98:	9801      	ldr	r0, [sp, #4]
3401bf9a:	f000 fc63 	bl	3401c864 <__mcmp>
3401bf9e:	2800      	cmp	r0, #0
3401bfa0:	da5a      	bge.n	3401c058 <_dtoa_r+0x830>
3401bfa2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3401bfa6:	220a      	movs	r2, #10
3401bfa8:	9901      	ldr	r1, [sp, #4]
3401bfaa:	4648      	mov	r0, r9
3401bfac:	9305      	str	r3, [sp, #20]
3401bfae:	2300      	movs	r3, #0
3401bfb0:	f000 fa44 	bl	3401c43c <__multadd>
3401bfb4:	9b08      	ldr	r3, [sp, #32]
3401bfb6:	9001      	str	r0, [sp, #4]
3401bfb8:	2b00      	cmp	r3, #0
3401bfba:	f000 8177 	beq.w	3401c2ac <_dtoa_r+0xa84>
3401bfbe:	4629      	mov	r1, r5
3401bfc0:	2300      	movs	r3, #0
3401bfc2:	220a      	movs	r2, #10
3401bfc4:	4648      	mov	r0, r9
3401bfc6:	f000 fa39 	bl	3401c43c <__multadd>
3401bfca:	f1bb 0f00 	cmp.w	fp, #0
3401bfce:	4605      	mov	r5, r0
3401bfd0:	dc6e      	bgt.n	3401c0b0 <_dtoa_r+0x888>
3401bfd2:	9b07      	ldr	r3, [sp, #28]
3401bfd4:	2b02      	cmp	r3, #2
3401bfd6:	dc48      	bgt.n	3401c06a <_dtoa_r+0x842>
3401bfd8:	e06a      	b.n	3401c0b0 <_dtoa_r+0x888>
3401bfda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401bfdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3401bfe0:	e739      	b.n	3401be56 <_dtoa_r+0x62e>
3401bfe2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3401bfe6:	42a3      	cmp	r3, r4
3401bfe8:	db07      	blt.n	3401bffa <_dtoa_r+0x7d2>
3401bfea:	f1ba 0f00 	cmp.w	sl, #0
3401bfee:	eba3 0404 	sub.w	r4, r3, r4
3401bff2:	db0b      	blt.n	3401c00c <_dtoa_r+0x7e4>
3401bff4:	9e04      	ldr	r6, [sp, #16]
3401bff6:	4652      	mov	r2, sl
3401bff8:	e72f      	b.n	3401be5a <_dtoa_r+0x632>
3401bffa:	1ae2      	subs	r2, r4, r3
3401bffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401bffe:	9e04      	ldr	r6, [sp, #16]
3401c000:	4413      	add	r3, r2
3401c002:	4652      	mov	r2, sl
3401c004:	930a      	str	r3, [sp, #40]	@ 0x28
3401c006:	4623      	mov	r3, r4
3401c008:	2400      	movs	r4, #0
3401c00a:	e726      	b.n	3401be5a <_dtoa_r+0x632>
3401c00c:	9a04      	ldr	r2, [sp, #16]
3401c00e:	eba2 060a 	sub.w	r6, r2, sl
3401c012:	2200      	movs	r2, #0
3401c014:	e721      	b.n	3401be5a <_dtoa_r+0x632>
3401c016:	461c      	mov	r4, r3
3401c018:	9e04      	ldr	r6, [sp, #16]
3401c01a:	9d08      	ldr	r5, [sp, #32]
3401c01c:	e72a      	b.n	3401be74 <_dtoa_r+0x64c>
3401c01e:	9a01      	ldr	r2, [sp, #4]
3401c020:	9205      	str	r2, [sp, #20]
3401c022:	e752      	b.n	3401beca <_dtoa_r+0x6a2>
3401c024:	461a      	mov	r2, r3
3401c026:	9901      	ldr	r1, [sp, #4]
3401c028:	e751      	b.n	3401bece <_dtoa_r+0x6a6>
3401c02a:	9b05      	ldr	r3, [sp, #20]
3401c02c:	9301      	str	r3, [sp, #4]
3401c02e:	e752      	b.n	3401bed6 <_dtoa_r+0x6ae>
3401c030:	2300      	movs	r3, #0
3401c032:	e77b      	b.n	3401bf2c <_dtoa_r+0x704>
3401c034:	9b02      	ldr	r3, [sp, #8]
3401c036:	e779      	b.n	3401bf2c <_dtoa_r+0x704>
3401c038:	920b      	str	r2, [sp, #44]	@ 0x2c
3401c03a:	e778      	b.n	3401bf2e <_dtoa_r+0x706>
3401c03c:	2300      	movs	r3, #0
3401c03e:	930b      	str	r3, [sp, #44]	@ 0x2c
3401c040:	e779      	b.n	3401bf36 <_dtoa_r+0x70e>
3401c042:	d093      	beq.n	3401bf6c <_dtoa_r+0x744>
3401c044:	321c      	adds	r2, #28
3401c046:	9b04      	ldr	r3, [sp, #16]
3401c048:	4413      	add	r3, r2
3401c04a:	4416      	add	r6, r2
3401c04c:	9304      	str	r3, [sp, #16]
3401c04e:	9b06      	ldr	r3, [sp, #24]
3401c050:	4413      	add	r3, r2
3401c052:	e78a      	b.n	3401bf6a <_dtoa_r+0x742>
3401c054:	4602      	mov	r2, r0
3401c056:	e7f5      	b.n	3401c044 <_dtoa_r+0x81c>
3401c058:	f1ba 0f00 	cmp.w	sl, #0
3401c05c:	46d3      	mov	fp, sl
3401c05e:	f8cd 8014 	str.w	r8, [sp, #20]
3401c062:	dc21      	bgt.n	3401c0a8 <_dtoa_r+0x880>
3401c064:	9b07      	ldr	r3, [sp, #28]
3401c066:	2b02      	cmp	r3, #2
3401c068:	dd1e      	ble.n	3401c0a8 <_dtoa_r+0x880>
3401c06a:	f1bb 0f00 	cmp.w	fp, #0
3401c06e:	f47f addc 	bne.w	3401bc2a <_dtoa_r+0x402>
3401c072:	4621      	mov	r1, r4
3401c074:	465b      	mov	r3, fp
3401c076:	2205      	movs	r2, #5
3401c078:	4648      	mov	r0, r9
3401c07a:	f000 f9df 	bl	3401c43c <__multadd>
3401c07e:	4601      	mov	r1, r0
3401c080:	4604      	mov	r4, r0
3401c082:	9801      	ldr	r0, [sp, #4]
3401c084:	f000 fbee 	bl	3401c864 <__mcmp>
3401c088:	2800      	cmp	r0, #0
3401c08a:	f77f adce 	ble.w	3401bc2a <_dtoa_r+0x402>
3401c08e:	2331      	movs	r3, #49	@ 0x31
3401c090:	463e      	mov	r6, r7
3401c092:	f806 3b01 	strb.w	r3, [r6], #1
3401c096:	9b05      	ldr	r3, [sp, #20]
3401c098:	3301      	adds	r3, #1
3401c09a:	9305      	str	r3, [sp, #20]
3401c09c:	e5c9      	b.n	3401bc32 <_dtoa_r+0x40a>
3401c09e:	4654      	mov	r4, sl
3401c0a0:	f8cd 8014 	str.w	r8, [sp, #20]
3401c0a4:	4625      	mov	r5, r4
3401c0a6:	e7f2      	b.n	3401c08e <_dtoa_r+0x866>
3401c0a8:	9b08      	ldr	r3, [sp, #32]
3401c0aa:	2b00      	cmp	r3, #0
3401c0ac:	f000 8102 	beq.w	3401c2b4 <_dtoa_r+0xa8c>
3401c0b0:	2e00      	cmp	r6, #0
3401c0b2:	dd05      	ble.n	3401c0c0 <_dtoa_r+0x898>
3401c0b4:	4629      	mov	r1, r5
3401c0b6:	4632      	mov	r2, r6
3401c0b8:	4648      	mov	r0, r9
3401c0ba:	f000 fb67 	bl	3401c78c <__lshift>
3401c0be:	4605      	mov	r5, r0
3401c0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401c0c2:	2b00      	cmp	r3, #0
3401c0c4:	d058      	beq.n	3401c178 <_dtoa_r+0x950>
3401c0c6:	6869      	ldr	r1, [r5, #4]
3401c0c8:	4648      	mov	r0, r9
3401c0ca:	f000 f955 	bl	3401c378 <_Balloc>
3401c0ce:	4606      	mov	r6, r0
3401c0d0:	b928      	cbnz	r0, 3401c0de <_dtoa_r+0x8b6>
3401c0d2:	4b82      	ldr	r3, [pc, #520]	@ (3401c2dc <_dtoa_r+0xab4>)
3401c0d4:	4602      	mov	r2, r0
3401c0d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401c0da:	f7ff bbbe 	b.w	3401b85a <_dtoa_r+0x32>
3401c0de:	692a      	ldr	r2, [r5, #16]
3401c0e0:	f105 010c 	add.w	r1, r5, #12
3401c0e4:	300c      	adds	r0, #12
3401c0e6:	3202      	adds	r2, #2
3401c0e8:	0092      	lsls	r2, r2, #2
3401c0ea:	f7ff fafc 	bl	3401b6e6 <memcpy>
3401c0ee:	2201      	movs	r2, #1
3401c0f0:	4631      	mov	r1, r6
3401c0f2:	4648      	mov	r0, r9
3401c0f4:	f000 fb4a 	bl	3401c78c <__lshift>
3401c0f8:	1c7b      	adds	r3, r7, #1
3401c0fa:	46a8      	mov	r8, r5
3401c0fc:	4605      	mov	r5, r0
3401c0fe:	9304      	str	r3, [sp, #16]
3401c100:	eb07 030b 	add.w	r3, r7, fp
3401c104:	9309      	str	r3, [sp, #36]	@ 0x24
3401c106:	9b02      	ldr	r3, [sp, #8]
3401c108:	f003 0301 	and.w	r3, r3, #1
3401c10c:	9308      	str	r3, [sp, #32]
3401c10e:	9b04      	ldr	r3, [sp, #16]
3401c110:	4621      	mov	r1, r4
3401c112:	9801      	ldr	r0, [sp, #4]
3401c114:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3401c118:	f7ff faf9 	bl	3401b70e <quorem>
3401c11c:	4641      	mov	r1, r8
3401c11e:	9002      	str	r0, [sp, #8]
3401c120:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401c124:	9801      	ldr	r0, [sp, #4]
3401c126:	f000 fb9d 	bl	3401c864 <__mcmp>
3401c12a:	462a      	mov	r2, r5
3401c12c:	9006      	str	r0, [sp, #24]
3401c12e:	4621      	mov	r1, r4
3401c130:	4648      	mov	r0, r9
3401c132:	f000 fbb3 	bl	3401c89c <__mdiff>
3401c136:	68c2      	ldr	r2, [r0, #12]
3401c138:	4606      	mov	r6, r0
3401c13a:	b9fa      	cbnz	r2, 3401c17c <_dtoa_r+0x954>
3401c13c:	4601      	mov	r1, r0
3401c13e:	9801      	ldr	r0, [sp, #4]
3401c140:	f000 fb90 	bl	3401c864 <__mcmp>
3401c144:	4602      	mov	r2, r0
3401c146:	4631      	mov	r1, r6
3401c148:	4648      	mov	r0, r9
3401c14a:	920a      	str	r2, [sp, #40]	@ 0x28
3401c14c:	f000 f954 	bl	3401c3f8 <_Bfree>
3401c150:	9b07      	ldr	r3, [sp, #28]
3401c152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401c154:	9e04      	ldr	r6, [sp, #16]
3401c156:	ea42 0103 	orr.w	r1, r2, r3
3401c15a:	9b08      	ldr	r3, [sp, #32]
3401c15c:	4319      	orrs	r1, r3
3401c15e:	d10f      	bne.n	3401c180 <_dtoa_r+0x958>
3401c160:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401c164:	d028      	beq.n	3401c1b8 <_dtoa_r+0x990>
3401c166:	9b06      	ldr	r3, [sp, #24]
3401c168:	2b00      	cmp	r3, #0
3401c16a:	dd02      	ble.n	3401c172 <_dtoa_r+0x94a>
3401c16c:	9b02      	ldr	r3, [sp, #8]
3401c16e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3401c172:	f88b a000 	strb.w	sl, [fp]
3401c176:	e55e      	b.n	3401bc36 <_dtoa_r+0x40e>
3401c178:	4628      	mov	r0, r5
3401c17a:	e7bd      	b.n	3401c0f8 <_dtoa_r+0x8d0>
3401c17c:	2201      	movs	r2, #1
3401c17e:	e7e2      	b.n	3401c146 <_dtoa_r+0x91e>
3401c180:	9b06      	ldr	r3, [sp, #24]
3401c182:	2b00      	cmp	r3, #0
3401c184:	db04      	blt.n	3401c190 <_dtoa_r+0x968>
3401c186:	9907      	ldr	r1, [sp, #28]
3401c188:	430b      	orrs	r3, r1
3401c18a:	9908      	ldr	r1, [sp, #32]
3401c18c:	430b      	orrs	r3, r1
3401c18e:	d120      	bne.n	3401c1d2 <_dtoa_r+0x9aa>
3401c190:	2a00      	cmp	r2, #0
3401c192:	ddee      	ble.n	3401c172 <_dtoa_r+0x94a>
3401c194:	2201      	movs	r2, #1
3401c196:	9901      	ldr	r1, [sp, #4]
3401c198:	4648      	mov	r0, r9
3401c19a:	f000 faf7 	bl	3401c78c <__lshift>
3401c19e:	4621      	mov	r1, r4
3401c1a0:	9001      	str	r0, [sp, #4]
3401c1a2:	f000 fb5f 	bl	3401c864 <__mcmp>
3401c1a6:	2800      	cmp	r0, #0
3401c1a8:	dc03      	bgt.n	3401c1b2 <_dtoa_r+0x98a>
3401c1aa:	d1e2      	bne.n	3401c172 <_dtoa_r+0x94a>
3401c1ac:	f01a 0f01 	tst.w	sl, #1
3401c1b0:	d0df      	beq.n	3401c172 <_dtoa_r+0x94a>
3401c1b2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401c1b6:	d1d9      	bne.n	3401c16c <_dtoa_r+0x944>
3401c1b8:	2339      	movs	r3, #57	@ 0x39
3401c1ba:	f88b 3000 	strb.w	r3, [fp]
3401c1be:	4633      	mov	r3, r6
3401c1c0:	461e      	mov	r6, r3
3401c1c2:	3b01      	subs	r3, #1
3401c1c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3401c1c8:	2a39      	cmp	r2, #57	@ 0x39
3401c1ca:	d052      	beq.n	3401c272 <_dtoa_r+0xa4a>
3401c1cc:	3201      	adds	r2, #1
3401c1ce:	701a      	strb	r2, [r3, #0]
3401c1d0:	e531      	b.n	3401bc36 <_dtoa_r+0x40e>
3401c1d2:	2a00      	cmp	r2, #0
3401c1d4:	dd07      	ble.n	3401c1e6 <_dtoa_r+0x9be>
3401c1d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401c1da:	d0ed      	beq.n	3401c1b8 <_dtoa_r+0x990>
3401c1dc:	f10a 0301 	add.w	r3, sl, #1
3401c1e0:	f88b 3000 	strb.w	r3, [fp]
3401c1e4:	e527      	b.n	3401bc36 <_dtoa_r+0x40e>
3401c1e6:	9b04      	ldr	r3, [sp, #16]
3401c1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401c1ea:	f803 ac01 	strb.w	sl, [r3, #-1]
3401c1ee:	4293      	cmp	r3, r2
3401c1f0:	d029      	beq.n	3401c246 <_dtoa_r+0xa1e>
3401c1f2:	2300      	movs	r3, #0
3401c1f4:	220a      	movs	r2, #10
3401c1f6:	9901      	ldr	r1, [sp, #4]
3401c1f8:	4648      	mov	r0, r9
3401c1fa:	f000 f91f 	bl	3401c43c <__multadd>
3401c1fe:	45a8      	cmp	r8, r5
3401c200:	9001      	str	r0, [sp, #4]
3401c202:	f04f 0300 	mov.w	r3, #0
3401c206:	f04f 020a 	mov.w	r2, #10
3401c20a:	4641      	mov	r1, r8
3401c20c:	4648      	mov	r0, r9
3401c20e:	d107      	bne.n	3401c220 <_dtoa_r+0x9f8>
3401c210:	f000 f914 	bl	3401c43c <__multadd>
3401c214:	4680      	mov	r8, r0
3401c216:	4605      	mov	r5, r0
3401c218:	9b04      	ldr	r3, [sp, #16]
3401c21a:	3301      	adds	r3, #1
3401c21c:	9304      	str	r3, [sp, #16]
3401c21e:	e776      	b.n	3401c10e <_dtoa_r+0x8e6>
3401c220:	f000 f90c 	bl	3401c43c <__multadd>
3401c224:	4629      	mov	r1, r5
3401c226:	4680      	mov	r8, r0
3401c228:	2300      	movs	r3, #0
3401c22a:	220a      	movs	r2, #10
3401c22c:	4648      	mov	r0, r9
3401c22e:	f000 f905 	bl	3401c43c <__multadd>
3401c232:	4605      	mov	r5, r0
3401c234:	e7f0      	b.n	3401c218 <_dtoa_r+0x9f0>
3401c236:	f1bb 0f00 	cmp.w	fp, #0
3401c23a:	f04f 0800 	mov.w	r8, #0
3401c23e:	bfcc      	ite	gt
3401c240:	465e      	movgt	r6, fp
3401c242:	2601      	movle	r6, #1
3401c244:	443e      	add	r6, r7
3401c246:	2201      	movs	r2, #1
3401c248:	9901      	ldr	r1, [sp, #4]
3401c24a:	4648      	mov	r0, r9
3401c24c:	f000 fa9e 	bl	3401c78c <__lshift>
3401c250:	4621      	mov	r1, r4
3401c252:	9001      	str	r0, [sp, #4]
3401c254:	f000 fb06 	bl	3401c864 <__mcmp>
3401c258:	2800      	cmp	r0, #0
3401c25a:	dcb0      	bgt.n	3401c1be <_dtoa_r+0x996>
3401c25c:	d102      	bne.n	3401c264 <_dtoa_r+0xa3c>
3401c25e:	f01a 0f01 	tst.w	sl, #1
3401c262:	d1ac      	bne.n	3401c1be <_dtoa_r+0x996>
3401c264:	4633      	mov	r3, r6
3401c266:	461e      	mov	r6, r3
3401c268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401c26c:	2a30      	cmp	r2, #48	@ 0x30
3401c26e:	d0fa      	beq.n	3401c266 <_dtoa_r+0xa3e>
3401c270:	e4e1      	b.n	3401bc36 <_dtoa_r+0x40e>
3401c272:	429f      	cmp	r7, r3
3401c274:	d1a4      	bne.n	3401c1c0 <_dtoa_r+0x998>
3401c276:	9b05      	ldr	r3, [sp, #20]
3401c278:	3301      	adds	r3, #1
3401c27a:	9305      	str	r3, [sp, #20]
3401c27c:	2331      	movs	r3, #49	@ 0x31
3401c27e:	703b      	strb	r3, [r7, #0]
3401c280:	e4d9      	b.n	3401bc36 <_dtoa_r+0x40e>
3401c282:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401c284:	4f16      	ldr	r7, [pc, #88]	@ (3401c2e0 <_dtoa_r+0xab8>)
3401c286:	b11b      	cbz	r3, 3401c290 <_dtoa_r+0xa68>
3401c288:	f107 0308 	add.w	r3, r7, #8
3401c28c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401c28e:	6013      	str	r3, [r2, #0]
3401c290:	4638      	mov	r0, r7
3401c292:	b011      	add	sp, #68	@ 0x44
3401c294:	ecbd 8b02 	vpop	{d8}
3401c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c29c:	9b07      	ldr	r3, [sp, #28]
3401c29e:	2b01      	cmp	r3, #1
3401c2a0:	f77f ae2c 	ble.w	3401befc <_dtoa_r+0x6d4>
3401c2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401c2a6:	930b      	str	r3, [sp, #44]	@ 0x2c
3401c2a8:	2001      	movs	r0, #1
3401c2aa:	e64c      	b.n	3401bf46 <_dtoa_r+0x71e>
3401c2ac:	f1bb 0f00 	cmp.w	fp, #0
3401c2b0:	f77f aed8 	ble.w	3401c064 <_dtoa_r+0x83c>
3401c2b4:	463e      	mov	r6, r7
3401c2b6:	4621      	mov	r1, r4
3401c2b8:	9801      	ldr	r0, [sp, #4]
3401c2ba:	f7ff fa28 	bl	3401b70e <quorem>
3401c2be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401c2c2:	f806 ab01 	strb.w	sl, [r6], #1
3401c2c6:	1bf2      	subs	r2, r6, r7
3401c2c8:	4593      	cmp	fp, r2
3401c2ca:	ddb4      	ble.n	3401c236 <_dtoa_r+0xa0e>
3401c2cc:	2300      	movs	r3, #0
3401c2ce:	220a      	movs	r2, #10
3401c2d0:	9901      	ldr	r1, [sp, #4]
3401c2d2:	4648      	mov	r0, r9
3401c2d4:	f000 f8b2 	bl	3401c43c <__multadd>
3401c2d8:	9001      	str	r0, [sp, #4]
3401c2da:	e7ec      	b.n	3401c2b6 <_dtoa_r+0xa8e>
3401c2dc:	3401e4b2 	.word	0x3401e4b2
3401c2e0:	3401e436 	.word	0x3401e436

3401c2e4 <_free_r>:
3401c2e4:	b538      	push	{r3, r4, r5, lr}
3401c2e6:	4605      	mov	r5, r0
3401c2e8:	2900      	cmp	r1, #0
3401c2ea:	d041      	beq.n	3401c370 <_free_r+0x8c>
3401c2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
3401c2f0:	1f0c      	subs	r4, r1, #4
3401c2f2:	2b00      	cmp	r3, #0
3401c2f4:	bfb8      	it	lt
3401c2f6:	18e4      	addlt	r4, r4, r3
3401c2f8:	f7fe fa38 	bl	3401a76c <__malloc_lock>
3401c2fc:	4a1d      	ldr	r2, [pc, #116]	@ (3401c374 <_free_r+0x90>)
3401c2fe:	6813      	ldr	r3, [r2, #0]
3401c300:	b933      	cbnz	r3, 3401c310 <_free_r+0x2c>
3401c302:	6063      	str	r3, [r4, #4]
3401c304:	6014      	str	r4, [r2, #0]
3401c306:	4628      	mov	r0, r5
3401c308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401c30c:	f7fe ba34 	b.w	3401a778 <__malloc_unlock>
3401c310:	42a3      	cmp	r3, r4
3401c312:	d908      	bls.n	3401c326 <_free_r+0x42>
3401c314:	6820      	ldr	r0, [r4, #0]
3401c316:	1821      	adds	r1, r4, r0
3401c318:	428b      	cmp	r3, r1
3401c31a:	bf01      	itttt	eq
3401c31c:	6819      	ldreq	r1, [r3, #0]
3401c31e:	685b      	ldreq	r3, [r3, #4]
3401c320:	1809      	addeq	r1, r1, r0
3401c322:	6021      	streq	r1, [r4, #0]
3401c324:	e7ed      	b.n	3401c302 <_free_r+0x1e>
3401c326:	461a      	mov	r2, r3
3401c328:	685b      	ldr	r3, [r3, #4]
3401c32a:	b10b      	cbz	r3, 3401c330 <_free_r+0x4c>
3401c32c:	42a3      	cmp	r3, r4
3401c32e:	d9fa      	bls.n	3401c326 <_free_r+0x42>
3401c330:	6811      	ldr	r1, [r2, #0]
3401c332:	1850      	adds	r0, r2, r1
3401c334:	42a0      	cmp	r0, r4
3401c336:	d10b      	bne.n	3401c350 <_free_r+0x6c>
3401c338:	6820      	ldr	r0, [r4, #0]
3401c33a:	4401      	add	r1, r0
3401c33c:	1850      	adds	r0, r2, r1
3401c33e:	6011      	str	r1, [r2, #0]
3401c340:	4283      	cmp	r3, r0
3401c342:	d1e0      	bne.n	3401c306 <_free_r+0x22>
3401c344:	6818      	ldr	r0, [r3, #0]
3401c346:	685b      	ldr	r3, [r3, #4]
3401c348:	4408      	add	r0, r1
3401c34a:	6053      	str	r3, [r2, #4]
3401c34c:	6010      	str	r0, [r2, #0]
3401c34e:	e7da      	b.n	3401c306 <_free_r+0x22>
3401c350:	d902      	bls.n	3401c358 <_free_r+0x74>
3401c352:	230c      	movs	r3, #12
3401c354:	602b      	str	r3, [r5, #0]
3401c356:	e7d6      	b.n	3401c306 <_free_r+0x22>
3401c358:	6820      	ldr	r0, [r4, #0]
3401c35a:	1821      	adds	r1, r4, r0
3401c35c:	428b      	cmp	r3, r1
3401c35e:	bf02      	ittt	eq
3401c360:	6819      	ldreq	r1, [r3, #0]
3401c362:	685b      	ldreq	r3, [r3, #4]
3401c364:	1809      	addeq	r1, r1, r0
3401c366:	6063      	str	r3, [r4, #4]
3401c368:	bf08      	it	eq
3401c36a:	6021      	streq	r1, [r4, #0]
3401c36c:	6054      	str	r4, [r2, #4]
3401c36e:	e7ca      	b.n	3401c306 <_free_r+0x22>
3401c370:	bd38      	pop	{r3, r4, r5, pc}
3401c372:	bf00      	nop
3401c374:	3401ee68 	.word	0x3401ee68

3401c378 <_Balloc>:
3401c378:	b570      	push	{r4, r5, r6, lr}
3401c37a:	69c6      	ldr	r6, [r0, #28]
3401c37c:	4604      	mov	r4, r0
3401c37e:	460d      	mov	r5, r1
3401c380:	b976      	cbnz	r6, 3401c3a0 <_Balloc+0x28>
3401c382:	2010      	movs	r0, #16
3401c384:	f7fe f948 	bl	3401a618 <malloc>
3401c388:	4602      	mov	r2, r0
3401c38a:	61e0      	str	r0, [r4, #28]
3401c38c:	b920      	cbnz	r0, 3401c398 <_Balloc+0x20>
3401c38e:	4b18      	ldr	r3, [pc, #96]	@ (3401c3f0 <_Balloc+0x78>)
3401c390:	216b      	movs	r1, #107	@ 0x6b
3401c392:	4818      	ldr	r0, [pc, #96]	@ (3401c3f4 <_Balloc+0x7c>)
3401c394:	f7fe f922 	bl	3401a5dc <__assert_func>
3401c398:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401c39c:	6006      	str	r6, [r0, #0]
3401c39e:	60c6      	str	r6, [r0, #12]
3401c3a0:	69e6      	ldr	r6, [r4, #28]
3401c3a2:	68f3      	ldr	r3, [r6, #12]
3401c3a4:	b183      	cbz	r3, 3401c3c8 <_Balloc+0x50>
3401c3a6:	69e3      	ldr	r3, [r4, #28]
3401c3a8:	68db      	ldr	r3, [r3, #12]
3401c3aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3401c3ae:	b9b8      	cbnz	r0, 3401c3e0 <_Balloc+0x68>
3401c3b0:	2101      	movs	r1, #1
3401c3b2:	4620      	mov	r0, r4
3401c3b4:	fa01 f605 	lsl.w	r6, r1, r5
3401c3b8:	1d72      	adds	r2, r6, #5
3401c3ba:	0092      	lsls	r2, r2, #2
3401c3bc:	f000 fd68 	bl	3401ce90 <_calloc_r>
3401c3c0:	b160      	cbz	r0, 3401c3dc <_Balloc+0x64>
3401c3c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
3401c3c6:	e00e      	b.n	3401c3e6 <_Balloc+0x6e>
3401c3c8:	2221      	movs	r2, #33	@ 0x21
3401c3ca:	2104      	movs	r1, #4
3401c3cc:	4620      	mov	r0, r4
3401c3ce:	f000 fd5f 	bl	3401ce90 <_calloc_r>
3401c3d2:	69e3      	ldr	r3, [r4, #28]
3401c3d4:	60f0      	str	r0, [r6, #12]
3401c3d6:	68db      	ldr	r3, [r3, #12]
3401c3d8:	2b00      	cmp	r3, #0
3401c3da:	d1e4      	bne.n	3401c3a6 <_Balloc+0x2e>
3401c3dc:	2000      	movs	r0, #0
3401c3de:	bd70      	pop	{r4, r5, r6, pc}
3401c3e0:	6802      	ldr	r2, [r0, #0]
3401c3e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3401c3e6:	2300      	movs	r3, #0
3401c3e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
3401c3ec:	e7f7      	b.n	3401c3de <_Balloc+0x66>
3401c3ee:	bf00      	nop
3401c3f0:	3401e443 	.word	0x3401e443
3401c3f4:	3401e4c3 	.word	0x3401e4c3

3401c3f8 <_Bfree>:
3401c3f8:	b570      	push	{r4, r5, r6, lr}
3401c3fa:	69c6      	ldr	r6, [r0, #28]
3401c3fc:	4605      	mov	r5, r0
3401c3fe:	460c      	mov	r4, r1
3401c400:	b976      	cbnz	r6, 3401c420 <_Bfree+0x28>
3401c402:	2010      	movs	r0, #16
3401c404:	f7fe f908 	bl	3401a618 <malloc>
3401c408:	4602      	mov	r2, r0
3401c40a:	61e8      	str	r0, [r5, #28]
3401c40c:	b920      	cbnz	r0, 3401c418 <_Bfree+0x20>
3401c40e:	4b09      	ldr	r3, [pc, #36]	@ (3401c434 <_Bfree+0x3c>)
3401c410:	218f      	movs	r1, #143	@ 0x8f
3401c412:	4809      	ldr	r0, [pc, #36]	@ (3401c438 <_Bfree+0x40>)
3401c414:	f7fe f8e2 	bl	3401a5dc <__assert_func>
3401c418:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401c41c:	6006      	str	r6, [r0, #0]
3401c41e:	60c6      	str	r6, [r0, #12]
3401c420:	b13c      	cbz	r4, 3401c432 <_Bfree+0x3a>
3401c422:	69eb      	ldr	r3, [r5, #28]
3401c424:	6862      	ldr	r2, [r4, #4]
3401c426:	68db      	ldr	r3, [r3, #12]
3401c428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3401c42c:	6021      	str	r1, [r4, #0]
3401c42e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3401c432:	bd70      	pop	{r4, r5, r6, pc}
3401c434:	3401e443 	.word	0x3401e443
3401c438:	3401e4c3 	.word	0x3401e4c3

3401c43c <__multadd>:
3401c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c440:	f101 0c14 	add.w	ip, r1, #20
3401c444:	4607      	mov	r7, r0
3401c446:	460c      	mov	r4, r1
3401c448:	461e      	mov	r6, r3
3401c44a:	690d      	ldr	r5, [r1, #16]
3401c44c:	2000      	movs	r0, #0
3401c44e:	f8dc 3000 	ldr.w	r3, [ip]
3401c452:	3001      	adds	r0, #1
3401c454:	b299      	uxth	r1, r3
3401c456:	4285      	cmp	r5, r0
3401c458:	fb02 6101 	mla	r1, r2, r1, r6
3401c45c:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401c460:	ea4f 4311 	mov.w	r3, r1, lsr #16
3401c464:	b289      	uxth	r1, r1
3401c466:	fb02 3306 	mla	r3, r2, r6, r3
3401c46a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3401c46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401c472:	f84c 1b04 	str.w	r1, [ip], #4
3401c476:	dcea      	bgt.n	3401c44e <__multadd+0x12>
3401c478:	b30e      	cbz	r6, 3401c4be <__multadd+0x82>
3401c47a:	68a3      	ldr	r3, [r4, #8]
3401c47c:	42ab      	cmp	r3, r5
3401c47e:	dc19      	bgt.n	3401c4b4 <__multadd+0x78>
3401c480:	6861      	ldr	r1, [r4, #4]
3401c482:	4638      	mov	r0, r7
3401c484:	3101      	adds	r1, #1
3401c486:	f7ff ff77 	bl	3401c378 <_Balloc>
3401c48a:	4680      	mov	r8, r0
3401c48c:	b928      	cbnz	r0, 3401c49a <__multadd+0x5e>
3401c48e:	4602      	mov	r2, r0
3401c490:	4b0c      	ldr	r3, [pc, #48]	@ (3401c4c4 <__multadd+0x88>)
3401c492:	21ba      	movs	r1, #186	@ 0xba
3401c494:	480c      	ldr	r0, [pc, #48]	@ (3401c4c8 <__multadd+0x8c>)
3401c496:	f7fe f8a1 	bl	3401a5dc <__assert_func>
3401c49a:	6922      	ldr	r2, [r4, #16]
3401c49c:	f104 010c 	add.w	r1, r4, #12
3401c4a0:	300c      	adds	r0, #12
3401c4a2:	3202      	adds	r2, #2
3401c4a4:	0092      	lsls	r2, r2, #2
3401c4a6:	f7ff f91e 	bl	3401b6e6 <memcpy>
3401c4aa:	4621      	mov	r1, r4
3401c4ac:	4644      	mov	r4, r8
3401c4ae:	4638      	mov	r0, r7
3401c4b0:	f7ff ffa2 	bl	3401c3f8 <_Bfree>
3401c4b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3401c4b8:	3501      	adds	r5, #1
3401c4ba:	615e      	str	r6, [r3, #20]
3401c4bc:	6125      	str	r5, [r4, #16]
3401c4be:	4620      	mov	r0, r4
3401c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401c4c4:	3401e4b2 	.word	0x3401e4b2
3401c4c8:	3401e4c3 	.word	0x3401e4c3

3401c4cc <__hi0bits>:
3401c4cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3401c4d0:	4603      	mov	r3, r0
3401c4d2:	bf36      	itet	cc
3401c4d4:	0403      	lslcc	r3, r0, #16
3401c4d6:	2000      	movcs	r0, #0
3401c4d8:	2010      	movcc	r0, #16
3401c4da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401c4de:	bf3c      	itt	cc
3401c4e0:	021b      	lslcc	r3, r3, #8
3401c4e2:	3008      	addcc	r0, #8
3401c4e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401c4e8:	bf3c      	itt	cc
3401c4ea:	011b      	lslcc	r3, r3, #4
3401c4ec:	3004      	addcc	r0, #4
3401c4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401c4f2:	bf3c      	itt	cc
3401c4f4:	009b      	lslcc	r3, r3, #2
3401c4f6:	3002      	addcc	r0, #2
3401c4f8:	2b00      	cmp	r3, #0
3401c4fa:	db05      	blt.n	3401c508 <__hi0bits+0x3c>
3401c4fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3401c500:	f100 0001 	add.w	r0, r0, #1
3401c504:	bf08      	it	eq
3401c506:	2020      	moveq	r0, #32
3401c508:	4770      	bx	lr

3401c50a <__lo0bits>:
3401c50a:	6803      	ldr	r3, [r0, #0]
3401c50c:	4602      	mov	r2, r0
3401c50e:	f013 0007 	ands.w	r0, r3, #7
3401c512:	d00b      	beq.n	3401c52c <__lo0bits+0x22>
3401c514:	07d9      	lsls	r1, r3, #31
3401c516:	d421      	bmi.n	3401c55c <__lo0bits+0x52>
3401c518:	0798      	lsls	r0, r3, #30
3401c51a:	bf47      	ittee	mi
3401c51c:	085b      	lsrmi	r3, r3, #1
3401c51e:	2001      	movmi	r0, #1
3401c520:	089b      	lsrpl	r3, r3, #2
3401c522:	2002      	movpl	r0, #2
3401c524:	bf4c      	ite	mi
3401c526:	6013      	strmi	r3, [r2, #0]
3401c528:	6013      	strpl	r3, [r2, #0]
3401c52a:	4770      	bx	lr
3401c52c:	b299      	uxth	r1, r3
3401c52e:	b909      	cbnz	r1, 3401c534 <__lo0bits+0x2a>
3401c530:	0c1b      	lsrs	r3, r3, #16
3401c532:	2010      	movs	r0, #16
3401c534:	b2d9      	uxtb	r1, r3
3401c536:	b909      	cbnz	r1, 3401c53c <__lo0bits+0x32>
3401c538:	3008      	adds	r0, #8
3401c53a:	0a1b      	lsrs	r3, r3, #8
3401c53c:	0719      	lsls	r1, r3, #28
3401c53e:	bf04      	itt	eq
3401c540:	091b      	lsreq	r3, r3, #4
3401c542:	3004      	addeq	r0, #4
3401c544:	0799      	lsls	r1, r3, #30
3401c546:	bf04      	itt	eq
3401c548:	089b      	lsreq	r3, r3, #2
3401c54a:	3002      	addeq	r0, #2
3401c54c:	07d9      	lsls	r1, r3, #31
3401c54e:	d403      	bmi.n	3401c558 <__lo0bits+0x4e>
3401c550:	085b      	lsrs	r3, r3, #1
3401c552:	f100 0001 	add.w	r0, r0, #1
3401c556:	d003      	beq.n	3401c560 <__lo0bits+0x56>
3401c558:	6013      	str	r3, [r2, #0]
3401c55a:	4770      	bx	lr
3401c55c:	2000      	movs	r0, #0
3401c55e:	4770      	bx	lr
3401c560:	2020      	movs	r0, #32
3401c562:	4770      	bx	lr

3401c564 <__i2b>:
3401c564:	b510      	push	{r4, lr}
3401c566:	460c      	mov	r4, r1
3401c568:	2101      	movs	r1, #1
3401c56a:	f7ff ff05 	bl	3401c378 <_Balloc>
3401c56e:	4602      	mov	r2, r0
3401c570:	b928      	cbnz	r0, 3401c57e <__i2b+0x1a>
3401c572:	4b05      	ldr	r3, [pc, #20]	@ (3401c588 <__i2b+0x24>)
3401c574:	f240 1145 	movw	r1, #325	@ 0x145
3401c578:	4804      	ldr	r0, [pc, #16]	@ (3401c58c <__i2b+0x28>)
3401c57a:	f7fe f82f 	bl	3401a5dc <__assert_func>
3401c57e:	2301      	movs	r3, #1
3401c580:	6144      	str	r4, [r0, #20]
3401c582:	6103      	str	r3, [r0, #16]
3401c584:	bd10      	pop	{r4, pc}
3401c586:	bf00      	nop
3401c588:	3401e4b2 	.word	0x3401e4b2
3401c58c:	3401e4c3 	.word	0x3401e4c3

3401c590 <__multiply>:
3401c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c594:	4617      	mov	r7, r2
3401c596:	690a      	ldr	r2, [r1, #16]
3401c598:	4689      	mov	r9, r1
3401c59a:	b085      	sub	sp, #20
3401c59c:	693b      	ldr	r3, [r7, #16]
3401c59e:	429a      	cmp	r2, r3
3401c5a0:	bfa2      	ittt	ge
3401c5a2:	463b      	movge	r3, r7
3401c5a4:	460f      	movge	r7, r1
3401c5a6:	4699      	movge	r9, r3
3401c5a8:	693d      	ldr	r5, [r7, #16]
3401c5aa:	68bb      	ldr	r3, [r7, #8]
3401c5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
3401c5b0:	6879      	ldr	r1, [r7, #4]
3401c5b2:	eb05 060a 	add.w	r6, r5, sl
3401c5b6:	42b3      	cmp	r3, r6
3401c5b8:	bfb8      	it	lt
3401c5ba:	3101      	addlt	r1, #1
3401c5bc:	f7ff fedc 	bl	3401c378 <_Balloc>
3401c5c0:	b930      	cbnz	r0, 3401c5d0 <__multiply+0x40>
3401c5c2:	4602      	mov	r2, r0
3401c5c4:	4b42      	ldr	r3, [pc, #264]	@ (3401c6d0 <__multiply+0x140>)
3401c5c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401c5ca:	4842      	ldr	r0, [pc, #264]	@ (3401c6d4 <__multiply+0x144>)
3401c5cc:	f7fe f806 	bl	3401a5dc <__assert_func>
3401c5d0:	f100 0414 	add.w	r4, r0, #20
3401c5d4:	2200      	movs	r2, #0
3401c5d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3401c5da:	4623      	mov	r3, r4
3401c5dc:	4573      	cmp	r3, lr
3401c5de:	d320      	bcc.n	3401c622 <__multiply+0x92>
3401c5e0:	f107 0814 	add.w	r8, r7, #20
3401c5e4:	f109 0114 	add.w	r1, r9, #20
3401c5e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3401c5ec:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3401c5f0:	9302      	str	r3, [sp, #8]
3401c5f2:	1beb      	subs	r3, r5, r7
3401c5f4:	3715      	adds	r7, #21
3401c5f6:	3b15      	subs	r3, #21
3401c5f8:	f023 0303 	bic.w	r3, r3, #3
3401c5fc:	3304      	adds	r3, #4
3401c5fe:	42bd      	cmp	r5, r7
3401c600:	bf38      	it	cc
3401c602:	2304      	movcc	r3, #4
3401c604:	9301      	str	r3, [sp, #4]
3401c606:	9b02      	ldr	r3, [sp, #8]
3401c608:	9103      	str	r1, [sp, #12]
3401c60a:	428b      	cmp	r3, r1
3401c60c:	d80c      	bhi.n	3401c628 <__multiply+0x98>
3401c60e:	2e00      	cmp	r6, #0
3401c610:	dd03      	ble.n	3401c61a <__multiply+0x8a>
3401c612:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3401c616:	2b00      	cmp	r3, #0
3401c618:	d057      	beq.n	3401c6ca <__multiply+0x13a>
3401c61a:	6106      	str	r6, [r0, #16]
3401c61c:	b005      	add	sp, #20
3401c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c622:	f843 2b04 	str.w	r2, [r3], #4
3401c626:	e7d9      	b.n	3401c5dc <__multiply+0x4c>
3401c628:	f8b1 a000 	ldrh.w	sl, [r1]
3401c62c:	f1ba 0f00 	cmp.w	sl, #0
3401c630:	d021      	beq.n	3401c676 <__multiply+0xe6>
3401c632:	46c4      	mov	ip, r8
3401c634:	46a1      	mov	r9, r4
3401c636:	2700      	movs	r7, #0
3401c638:	f85c 2b04 	ldr.w	r2, [ip], #4
3401c63c:	f8d9 3000 	ldr.w	r3, [r9]
3401c640:	fa1f fb82 	uxth.w	fp, r2
3401c644:	4565      	cmp	r5, ip
3401c646:	b29b      	uxth	r3, r3
3401c648:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401c64c:	fb0a 330b 	mla	r3, sl, fp, r3
3401c650:	443b      	add	r3, r7
3401c652:	f8d9 7000 	ldr.w	r7, [r9]
3401c656:	ea4f 4717 	mov.w	r7, r7, lsr #16
3401c65a:	fb0a 7202 	mla	r2, sl, r2, r7
3401c65e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3401c662:	b29b      	uxth	r3, r3
3401c664:	ea4f 4712 	mov.w	r7, r2, lsr #16
3401c668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401c66c:	f849 3b04 	str.w	r3, [r9], #4
3401c670:	d8e2      	bhi.n	3401c638 <__multiply+0xa8>
3401c672:	9b01      	ldr	r3, [sp, #4]
3401c674:	50e7      	str	r7, [r4, r3]
3401c676:	9b03      	ldr	r3, [sp, #12]
3401c678:	3104      	adds	r1, #4
3401c67a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3401c67e:	f1b9 0f00 	cmp.w	r9, #0
3401c682:	d020      	beq.n	3401c6c6 <__multiply+0x136>
3401c684:	6823      	ldr	r3, [r4, #0]
3401c686:	4647      	mov	r7, r8
3401c688:	46a4      	mov	ip, r4
3401c68a:	f04f 0a00 	mov.w	sl, #0
3401c68e:	f8b7 b000 	ldrh.w	fp, [r7]
3401c692:	b29b      	uxth	r3, r3
3401c694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3401c698:	fb09 220b 	mla	r2, r9, fp, r2
3401c69c:	4452      	add	r2, sl
3401c69e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401c6a2:	f84c 3b04 	str.w	r3, [ip], #4
3401c6a6:	f857 3b04 	ldr.w	r3, [r7], #4
3401c6aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401c6ae:	f8bc 3000 	ldrh.w	r3, [ip]
3401c6b2:	42bd      	cmp	r5, r7
3401c6b4:	fb09 330a 	mla	r3, r9, sl, r3
3401c6b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3401c6bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401c6c0:	d8e5      	bhi.n	3401c68e <__multiply+0xfe>
3401c6c2:	9a01      	ldr	r2, [sp, #4]
3401c6c4:	50a3      	str	r3, [r4, r2]
3401c6c6:	3404      	adds	r4, #4
3401c6c8:	e79d      	b.n	3401c606 <__multiply+0x76>
3401c6ca:	3e01      	subs	r6, #1
3401c6cc:	e79f      	b.n	3401c60e <__multiply+0x7e>
3401c6ce:	bf00      	nop
3401c6d0:	3401e4b2 	.word	0x3401e4b2
3401c6d4:	3401e4c3 	.word	0x3401e4c3

3401c6d8 <__pow5mult>:
3401c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401c6dc:	4615      	mov	r5, r2
3401c6de:	f012 0203 	ands.w	r2, r2, #3
3401c6e2:	4607      	mov	r7, r0
3401c6e4:	460e      	mov	r6, r1
3401c6e6:	d007      	beq.n	3401c6f8 <__pow5mult+0x20>
3401c6e8:	3a01      	subs	r2, #1
3401c6ea:	4c25      	ldr	r4, [pc, #148]	@ (3401c780 <__pow5mult+0xa8>)
3401c6ec:	2300      	movs	r3, #0
3401c6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3401c6f2:	f7ff fea3 	bl	3401c43c <__multadd>
3401c6f6:	4606      	mov	r6, r0
3401c6f8:	10ad      	asrs	r5, r5, #2
3401c6fa:	d03d      	beq.n	3401c778 <__pow5mult+0xa0>
3401c6fc:	69fc      	ldr	r4, [r7, #28]
3401c6fe:	b97c      	cbnz	r4, 3401c720 <__pow5mult+0x48>
3401c700:	2010      	movs	r0, #16
3401c702:	f7fd ff89 	bl	3401a618 <malloc>
3401c706:	4602      	mov	r2, r0
3401c708:	61f8      	str	r0, [r7, #28]
3401c70a:	b928      	cbnz	r0, 3401c718 <__pow5mult+0x40>
3401c70c:	4b1d      	ldr	r3, [pc, #116]	@ (3401c784 <__pow5mult+0xac>)
3401c70e:	f240 11b3 	movw	r1, #435	@ 0x1b3
3401c712:	481d      	ldr	r0, [pc, #116]	@ (3401c788 <__pow5mult+0xb0>)
3401c714:	f7fd ff62 	bl	3401a5dc <__assert_func>
3401c718:	e9c0 4401 	strd	r4, r4, [r0, #4]
3401c71c:	6004      	str	r4, [r0, #0]
3401c71e:	60c4      	str	r4, [r0, #12]
3401c720:	f8d7 801c 	ldr.w	r8, [r7, #28]
3401c724:	f8d8 4008 	ldr.w	r4, [r8, #8]
3401c728:	b94c      	cbnz	r4, 3401c73e <__pow5mult+0x66>
3401c72a:	f240 2171 	movw	r1, #625	@ 0x271
3401c72e:	4638      	mov	r0, r7
3401c730:	f7ff ff18 	bl	3401c564 <__i2b>
3401c734:	2300      	movs	r3, #0
3401c736:	4604      	mov	r4, r0
3401c738:	f8c8 0008 	str.w	r0, [r8, #8]
3401c73c:	6003      	str	r3, [r0, #0]
3401c73e:	f04f 0900 	mov.w	r9, #0
3401c742:	07eb      	lsls	r3, r5, #31
3401c744:	d50a      	bpl.n	3401c75c <__pow5mult+0x84>
3401c746:	4631      	mov	r1, r6
3401c748:	4622      	mov	r2, r4
3401c74a:	4638      	mov	r0, r7
3401c74c:	f7ff ff20 	bl	3401c590 <__multiply>
3401c750:	4680      	mov	r8, r0
3401c752:	4631      	mov	r1, r6
3401c754:	4638      	mov	r0, r7
3401c756:	4646      	mov	r6, r8
3401c758:	f7ff fe4e 	bl	3401c3f8 <_Bfree>
3401c75c:	106d      	asrs	r5, r5, #1
3401c75e:	d00b      	beq.n	3401c778 <__pow5mult+0xa0>
3401c760:	6820      	ldr	r0, [r4, #0]
3401c762:	b938      	cbnz	r0, 3401c774 <__pow5mult+0x9c>
3401c764:	4622      	mov	r2, r4
3401c766:	4621      	mov	r1, r4
3401c768:	4638      	mov	r0, r7
3401c76a:	f7ff ff11 	bl	3401c590 <__multiply>
3401c76e:	6020      	str	r0, [r4, #0]
3401c770:	f8c0 9000 	str.w	r9, [r0]
3401c774:	4604      	mov	r4, r0
3401c776:	e7e4      	b.n	3401c742 <__pow5mult+0x6a>
3401c778:	4630      	mov	r0, r6
3401c77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401c77e:	bf00      	nop
3401c780:	3401e538 	.word	0x3401e538
3401c784:	3401e443 	.word	0x3401e443
3401c788:	3401e4c3 	.word	0x3401e4c3

3401c78c <__lshift>:
3401c78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401c790:	460c      	mov	r4, r1
3401c792:	4607      	mov	r7, r0
3401c794:	4691      	mov	r9, r2
3401c796:	ea4f 1a62 	mov.w	sl, r2, asr #5
3401c79a:	6923      	ldr	r3, [r4, #16]
3401c79c:	6849      	ldr	r1, [r1, #4]
3401c79e:	eb03 1862 	add.w	r8, r3, r2, asr #5
3401c7a2:	68a3      	ldr	r3, [r4, #8]
3401c7a4:	f108 0601 	add.w	r6, r8, #1
3401c7a8:	42b3      	cmp	r3, r6
3401c7aa:	db0b      	blt.n	3401c7c4 <__lshift+0x38>
3401c7ac:	4638      	mov	r0, r7
3401c7ae:	f7ff fde3 	bl	3401c378 <_Balloc>
3401c7b2:	4605      	mov	r5, r0
3401c7b4:	b948      	cbnz	r0, 3401c7ca <__lshift+0x3e>
3401c7b6:	4602      	mov	r2, r0
3401c7b8:	4b28      	ldr	r3, [pc, #160]	@ (3401c85c <__lshift+0xd0>)
3401c7ba:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401c7be:	4828      	ldr	r0, [pc, #160]	@ (3401c860 <__lshift+0xd4>)
3401c7c0:	f7fd ff0c 	bl	3401a5dc <__assert_func>
3401c7c4:	3101      	adds	r1, #1
3401c7c6:	005b      	lsls	r3, r3, #1
3401c7c8:	e7ee      	b.n	3401c7a8 <__lshift+0x1c>
3401c7ca:	2300      	movs	r3, #0
3401c7cc:	f100 0114 	add.w	r1, r0, #20
3401c7d0:	f100 0210 	add.w	r2, r0, #16
3401c7d4:	4618      	mov	r0, r3
3401c7d6:	4553      	cmp	r3, sl
3401c7d8:	db33      	blt.n	3401c842 <__lshift+0xb6>
3401c7da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401c7de:	f104 0314 	add.w	r3, r4, #20
3401c7e2:	6920      	ldr	r0, [r4, #16]
3401c7e4:	f019 091f 	ands.w	r9, r9, #31
3401c7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3401c7ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3401c7f0:	d02b      	beq.n	3401c84a <__lshift+0xbe>
3401c7f2:	f1c9 0e20 	rsb	lr, r9, #32
3401c7f6:	468a      	mov	sl, r1
3401c7f8:	2200      	movs	r2, #0
3401c7fa:	6818      	ldr	r0, [r3, #0]
3401c7fc:	fa00 f009 	lsl.w	r0, r0, r9
3401c800:	4310      	orrs	r0, r2
3401c802:	f84a 0b04 	str.w	r0, [sl], #4
3401c806:	f853 2b04 	ldr.w	r2, [r3], #4
3401c80a:	459c      	cmp	ip, r3
3401c80c:	fa22 f20e 	lsr.w	r2, r2, lr
3401c810:	d8f3      	bhi.n	3401c7fa <__lshift+0x6e>
3401c812:	ebac 0304 	sub.w	r3, ip, r4
3401c816:	f104 0015 	add.w	r0, r4, #21
3401c81a:	3b15      	subs	r3, #21
3401c81c:	f023 0303 	bic.w	r3, r3, #3
3401c820:	3304      	adds	r3, #4
3401c822:	4560      	cmp	r0, ip
3401c824:	bf88      	it	hi
3401c826:	2304      	movhi	r3, #4
3401c828:	50ca      	str	r2, [r1, r3]
3401c82a:	b10a      	cbz	r2, 3401c830 <__lshift+0xa4>
3401c82c:	f108 0602 	add.w	r6, r8, #2
3401c830:	3e01      	subs	r6, #1
3401c832:	4638      	mov	r0, r7
3401c834:	4621      	mov	r1, r4
3401c836:	612e      	str	r6, [r5, #16]
3401c838:	f7ff fdde 	bl	3401c3f8 <_Bfree>
3401c83c:	4628      	mov	r0, r5
3401c83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401c842:	3301      	adds	r3, #1
3401c844:	f842 0f04 	str.w	r0, [r2, #4]!
3401c848:	e7c5      	b.n	3401c7d6 <__lshift+0x4a>
3401c84a:	3904      	subs	r1, #4
3401c84c:	f853 2b04 	ldr.w	r2, [r3], #4
3401c850:	459c      	cmp	ip, r3
3401c852:	f841 2f04 	str.w	r2, [r1, #4]!
3401c856:	d8f9      	bhi.n	3401c84c <__lshift+0xc0>
3401c858:	e7ea      	b.n	3401c830 <__lshift+0xa4>
3401c85a:	bf00      	nop
3401c85c:	3401e4b2 	.word	0x3401e4b2
3401c860:	3401e4c3 	.word	0x3401e4c3

3401c864 <__mcmp>:
3401c864:	4603      	mov	r3, r0
3401c866:	690a      	ldr	r2, [r1, #16]
3401c868:	6900      	ldr	r0, [r0, #16]
3401c86a:	1a80      	subs	r0, r0, r2
3401c86c:	b530      	push	{r4, r5, lr}
3401c86e:	d10e      	bne.n	3401c88e <__mcmp+0x2a>
3401c870:	3314      	adds	r3, #20
3401c872:	3114      	adds	r1, #20
3401c874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3401c878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3401c87c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3401c880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3401c884:	4295      	cmp	r5, r2
3401c886:	d003      	beq.n	3401c890 <__mcmp+0x2c>
3401c888:	d205      	bcs.n	3401c896 <__mcmp+0x32>
3401c88a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c88e:	bd30      	pop	{r4, r5, pc}
3401c890:	42a3      	cmp	r3, r4
3401c892:	d3f3      	bcc.n	3401c87c <__mcmp+0x18>
3401c894:	e7fb      	b.n	3401c88e <__mcmp+0x2a>
3401c896:	2001      	movs	r0, #1
3401c898:	e7f9      	b.n	3401c88e <__mcmp+0x2a>
	...

3401c89c <__mdiff>:
3401c89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c8a0:	4689      	mov	r9, r1
3401c8a2:	4606      	mov	r6, r0
3401c8a4:	4611      	mov	r1, r2
3401c8a6:	4614      	mov	r4, r2
3401c8a8:	4648      	mov	r0, r9
3401c8aa:	f7ff ffdb 	bl	3401c864 <__mcmp>
3401c8ae:	1e05      	subs	r5, r0, #0
3401c8b0:	d112      	bne.n	3401c8d8 <__mdiff+0x3c>
3401c8b2:	4629      	mov	r1, r5
3401c8b4:	4630      	mov	r0, r6
3401c8b6:	f7ff fd5f 	bl	3401c378 <_Balloc>
3401c8ba:	4602      	mov	r2, r0
3401c8bc:	b928      	cbnz	r0, 3401c8ca <__mdiff+0x2e>
3401c8be:	4b41      	ldr	r3, [pc, #260]	@ (3401c9c4 <__mdiff+0x128>)
3401c8c0:	f240 2137 	movw	r1, #567	@ 0x237
3401c8c4:	4840      	ldr	r0, [pc, #256]	@ (3401c9c8 <__mdiff+0x12c>)
3401c8c6:	f7fd fe89 	bl	3401a5dc <__assert_func>
3401c8ca:	2301      	movs	r3, #1
3401c8cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401c8d0:	4610      	mov	r0, r2
3401c8d2:	b003      	add	sp, #12
3401c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c8d8:	bfbc      	itt	lt
3401c8da:	464b      	movlt	r3, r9
3401c8dc:	46a1      	movlt	r9, r4
3401c8de:	4630      	mov	r0, r6
3401c8e0:	bfb8      	it	lt
3401c8e2:	2501      	movlt	r5, #1
3401c8e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
3401c8e8:	bfb4      	ite	lt
3401c8ea:	461c      	movlt	r4, r3
3401c8ec:	2500      	movge	r5, #0
3401c8ee:	f7ff fd43 	bl	3401c378 <_Balloc>
3401c8f2:	4602      	mov	r2, r0
3401c8f4:	b918      	cbnz	r0, 3401c8fe <__mdiff+0x62>
3401c8f6:	4b33      	ldr	r3, [pc, #204]	@ (3401c9c4 <__mdiff+0x128>)
3401c8f8:	f240 2145 	movw	r1, #581	@ 0x245
3401c8fc:	e7e2      	b.n	3401c8c4 <__mdiff+0x28>
3401c8fe:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401c902:	f104 0e14 	add.w	lr, r4, #20
3401c906:	6926      	ldr	r6, [r4, #16]
3401c908:	f100 0b14 	add.w	fp, r0, #20
3401c90c:	60c5      	str	r5, [r0, #12]
3401c90e:	f109 0514 	add.w	r5, r9, #20
3401c912:	f109 0310 	add.w	r3, r9, #16
3401c916:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401c91a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401c91e:	46d9      	mov	r9, fp
3401c920:	f04f 0c00 	mov.w	ip, #0
3401c924:	9301      	str	r3, [sp, #4]
3401c926:	9b01      	ldr	r3, [sp, #4]
3401c928:	f85e 0b04 	ldr.w	r0, [lr], #4
3401c92c:	f853 af04 	ldr.w	sl, [r3, #4]!
3401c930:	4576      	cmp	r6, lr
3401c932:	9301      	str	r3, [sp, #4]
3401c934:	fa1f f38a 	uxth.w	r3, sl
3401c938:	4619      	mov	r1, r3
3401c93a:	b283      	uxth	r3, r0
3401c93c:	ea4f 4010 	mov.w	r0, r0, lsr #16
3401c940:	eba1 0303 	sub.w	r3, r1, r3
3401c944:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3401c948:	4463      	add	r3, ip
3401c94a:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401c94e:	b29b      	uxth	r3, r3
3401c950:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401c954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401c958:	f849 3b04 	str.w	r3, [r9], #4
3401c95c:	d8e3      	bhi.n	3401c926 <__mdiff+0x8a>
3401c95e:	1b33      	subs	r3, r6, r4
3401c960:	3415      	adds	r4, #21
3401c962:	3b15      	subs	r3, #21
3401c964:	f023 0303 	bic.w	r3, r3, #3
3401c968:	3304      	adds	r3, #4
3401c96a:	42a6      	cmp	r6, r4
3401c96c:	bf38      	it	cc
3401c96e:	2304      	movcc	r3, #4
3401c970:	441d      	add	r5, r3
3401c972:	445b      	add	r3, fp
3401c974:	462c      	mov	r4, r5
3401c976:	461e      	mov	r6, r3
3401c978:	4544      	cmp	r4, r8
3401c97a:	d30e      	bcc.n	3401c99a <__mdiff+0xfe>
3401c97c:	f108 0103 	add.w	r1, r8, #3
3401c980:	1b49      	subs	r1, r1, r5
3401c982:	3d03      	subs	r5, #3
3401c984:	f021 0103 	bic.w	r1, r1, #3
3401c988:	45a8      	cmp	r8, r5
3401c98a:	bf38      	it	cc
3401c98c:	2100      	movcc	r1, #0
3401c98e:	440b      	add	r3, r1
3401c990:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3401c994:	b199      	cbz	r1, 3401c9be <__mdiff+0x122>
3401c996:	6117      	str	r7, [r2, #16]
3401c998:	e79a      	b.n	3401c8d0 <__mdiff+0x34>
3401c99a:	f854 1b04 	ldr.w	r1, [r4], #4
3401c99e:	46e6      	mov	lr, ip
3401c9a0:	fa1f fc81 	uxth.w	ip, r1
3401c9a4:	0c08      	lsrs	r0, r1, #16
3401c9a6:	4471      	add	r1, lr
3401c9a8:	44f4      	add	ip, lr
3401c9aa:	b289      	uxth	r1, r1
3401c9ac:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401c9b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3401c9b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401c9b8:	f846 1b04 	str.w	r1, [r6], #4
3401c9bc:	e7dc      	b.n	3401c978 <__mdiff+0xdc>
3401c9be:	3f01      	subs	r7, #1
3401c9c0:	e7e6      	b.n	3401c990 <__mdiff+0xf4>
3401c9c2:	bf00      	nop
3401c9c4:	3401e4b2 	.word	0x3401e4b2
3401c9c8:	3401e4c3 	.word	0x3401e4c3

3401c9cc <__d2b>:
3401c9cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401c9d0:	460f      	mov	r7, r1
3401c9d2:	2101      	movs	r1, #1
3401c9d4:	4616      	mov	r6, r2
3401c9d6:	ec59 8b10 	vmov	r8, r9, d0
3401c9da:	f7ff fccd 	bl	3401c378 <_Balloc>
3401c9de:	4604      	mov	r4, r0
3401c9e0:	b930      	cbnz	r0, 3401c9f0 <__d2b+0x24>
3401c9e2:	4602      	mov	r2, r0
3401c9e4:	4b23      	ldr	r3, [pc, #140]	@ (3401ca74 <__d2b+0xa8>)
3401c9e6:	f240 310f 	movw	r1, #783	@ 0x30f
3401c9ea:	4823      	ldr	r0, [pc, #140]	@ (3401ca78 <__d2b+0xac>)
3401c9ec:	f7fd fdf6 	bl	3401a5dc <__assert_func>
3401c9f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
3401c9f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
3401c9f8:	b10d      	cbz	r5, 3401c9fe <__d2b+0x32>
3401c9fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401c9fe:	9301      	str	r3, [sp, #4]
3401ca00:	f1b8 0300 	subs.w	r3, r8, #0
3401ca04:	d023      	beq.n	3401ca4e <__d2b+0x82>
3401ca06:	4668      	mov	r0, sp
3401ca08:	9300      	str	r3, [sp, #0]
3401ca0a:	f7ff fd7e 	bl	3401c50a <__lo0bits>
3401ca0e:	e9dd 1200 	ldrd	r1, r2, [sp]
3401ca12:	b1d0      	cbz	r0, 3401ca4a <__d2b+0x7e>
3401ca14:	f1c0 0320 	rsb	r3, r0, #32
3401ca18:	fa02 f303 	lsl.w	r3, r2, r3
3401ca1c:	40c2      	lsrs	r2, r0
3401ca1e:	430b      	orrs	r3, r1
3401ca20:	9201      	str	r2, [sp, #4]
3401ca22:	6163      	str	r3, [r4, #20]
3401ca24:	9b01      	ldr	r3, [sp, #4]
3401ca26:	2b00      	cmp	r3, #0
3401ca28:	61a3      	str	r3, [r4, #24]
3401ca2a:	bf0c      	ite	eq
3401ca2c:	2201      	moveq	r2, #1
3401ca2e:	2202      	movne	r2, #2
3401ca30:	6122      	str	r2, [r4, #16]
3401ca32:	b1a5      	cbz	r5, 3401ca5e <__d2b+0x92>
3401ca34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3401ca38:	4405      	add	r5, r0
3401ca3a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401ca3e:	603d      	str	r5, [r7, #0]
3401ca40:	6030      	str	r0, [r6, #0]
3401ca42:	4620      	mov	r0, r4
3401ca44:	b003      	add	sp, #12
3401ca46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401ca4a:	6161      	str	r1, [r4, #20]
3401ca4c:	e7ea      	b.n	3401ca24 <__d2b+0x58>
3401ca4e:	a801      	add	r0, sp, #4
3401ca50:	f7ff fd5b 	bl	3401c50a <__lo0bits>
3401ca54:	9b01      	ldr	r3, [sp, #4]
3401ca56:	3020      	adds	r0, #32
3401ca58:	2201      	movs	r2, #1
3401ca5a:	6163      	str	r3, [r4, #20]
3401ca5c:	e7e8      	b.n	3401ca30 <__d2b+0x64>
3401ca5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3401ca62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401ca66:	6038      	str	r0, [r7, #0]
3401ca68:	6918      	ldr	r0, [r3, #16]
3401ca6a:	f7ff fd2f 	bl	3401c4cc <__hi0bits>
3401ca6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3401ca72:	e7e5      	b.n	3401ca40 <__d2b+0x74>
3401ca74:	3401e4b2 	.word	0x3401e4b2
3401ca78:	3401e4c3 	.word	0x3401e4c3

3401ca7c <__sfputc_r>:
3401ca7c:	6893      	ldr	r3, [r2, #8]
3401ca7e:	3b01      	subs	r3, #1
3401ca80:	2b00      	cmp	r3, #0
3401ca82:	b410      	push	{r4}
3401ca84:	6093      	str	r3, [r2, #8]
3401ca86:	da08      	bge.n	3401ca9a <__sfputc_r+0x1e>
3401ca88:	6994      	ldr	r4, [r2, #24]
3401ca8a:	42a3      	cmp	r3, r4
3401ca8c:	db01      	blt.n	3401ca92 <__sfputc_r+0x16>
3401ca8e:	290a      	cmp	r1, #10
3401ca90:	d103      	bne.n	3401ca9a <__sfputc_r+0x1e>
3401ca92:	f85d 4b04 	ldr.w	r4, [sp], #4
3401ca96:	f7fe bcf4 	b.w	3401b482 <__swbuf_r>
3401ca9a:	6813      	ldr	r3, [r2, #0]
3401ca9c:	1c58      	adds	r0, r3, #1
3401ca9e:	6010      	str	r0, [r2, #0]
3401caa0:	4608      	mov	r0, r1
3401caa2:	7019      	strb	r1, [r3, #0]
3401caa4:	f85d 4b04 	ldr.w	r4, [sp], #4
3401caa8:	4770      	bx	lr

3401caaa <__sfputs_r>:
3401caaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401caac:	4606      	mov	r6, r0
3401caae:	460f      	mov	r7, r1
3401cab0:	4614      	mov	r4, r2
3401cab2:	18d5      	adds	r5, r2, r3
3401cab4:	42ac      	cmp	r4, r5
3401cab6:	d101      	bne.n	3401cabc <__sfputs_r+0x12>
3401cab8:	2000      	movs	r0, #0
3401caba:	e007      	b.n	3401cacc <__sfputs_r+0x22>
3401cabc:	463a      	mov	r2, r7
3401cabe:	f814 1b01 	ldrb.w	r1, [r4], #1
3401cac2:	4630      	mov	r0, r6
3401cac4:	f7ff ffda 	bl	3401ca7c <__sfputc_r>
3401cac8:	1c43      	adds	r3, r0, #1
3401caca:	d1f3      	bne.n	3401cab4 <__sfputs_r+0xa>
3401cacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401cad0 <_vfiprintf_r>:
3401cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401cad4:	460d      	mov	r5, r1
3401cad6:	b09d      	sub	sp, #116	@ 0x74
3401cad8:	4614      	mov	r4, r2
3401cada:	4698      	mov	r8, r3
3401cadc:	4606      	mov	r6, r0
3401cade:	b118      	cbz	r0, 3401cae8 <_vfiprintf_r+0x18>
3401cae0:	6a03      	ldr	r3, [r0, #32]
3401cae2:	b90b      	cbnz	r3, 3401cae8 <_vfiprintf_r+0x18>
3401cae4:	f7fe fbd2 	bl	3401b28c <__sinit>
3401cae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401caea:	07d9      	lsls	r1, r3, #31
3401caec:	d405      	bmi.n	3401cafa <_vfiprintf_r+0x2a>
3401caee:	89ab      	ldrh	r3, [r5, #12]
3401caf0:	059a      	lsls	r2, r3, #22
3401caf2:	d402      	bmi.n	3401cafa <_vfiprintf_r+0x2a>
3401caf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401caf6:	f7fe fde6 	bl	3401b6c6 <__retarget_lock_acquire_recursive>
3401cafa:	89ab      	ldrh	r3, [r5, #12]
3401cafc:	071b      	lsls	r3, r3, #28
3401cafe:	d501      	bpl.n	3401cb04 <_vfiprintf_r+0x34>
3401cb00:	692b      	ldr	r3, [r5, #16]
3401cb02:	b99b      	cbnz	r3, 3401cb2c <_vfiprintf_r+0x5c>
3401cb04:	4629      	mov	r1, r5
3401cb06:	4630      	mov	r0, r6
3401cb08:	f7fe fcfa 	bl	3401b500 <__swsetup_r>
3401cb0c:	b170      	cbz	r0, 3401cb2c <_vfiprintf_r+0x5c>
3401cb0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401cb10:	07dc      	lsls	r4, r3, #31
3401cb12:	d504      	bpl.n	3401cb1e <_vfiprintf_r+0x4e>
3401cb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401cb18:	b01d      	add	sp, #116	@ 0x74
3401cb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401cb1e:	89ab      	ldrh	r3, [r5, #12]
3401cb20:	0598      	lsls	r0, r3, #22
3401cb22:	d4f7      	bmi.n	3401cb14 <_vfiprintf_r+0x44>
3401cb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401cb26:	f7fe fdcf 	bl	3401b6c8 <__retarget_lock_release_recursive>
3401cb2a:	e7f3      	b.n	3401cb14 <_vfiprintf_r+0x44>
3401cb2c:	2300      	movs	r3, #0
3401cb2e:	f8cd 800c 	str.w	r8, [sp, #12]
3401cb32:	f04f 0901 	mov.w	r9, #1
3401cb36:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401ccec <_vfiprintf_r+0x21c>
3401cb3a:	9309      	str	r3, [sp, #36]	@ 0x24
3401cb3c:	2320      	movs	r3, #32
3401cb3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3401cb42:	2330      	movs	r3, #48	@ 0x30
3401cb44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3401cb48:	4623      	mov	r3, r4
3401cb4a:	469a      	mov	sl, r3
3401cb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
3401cb50:	b10a      	cbz	r2, 3401cb56 <_vfiprintf_r+0x86>
3401cb52:	2a25      	cmp	r2, #37	@ 0x25
3401cb54:	d1f9      	bne.n	3401cb4a <_vfiprintf_r+0x7a>
3401cb56:	ebba 0b04 	subs.w	fp, sl, r4
3401cb5a:	d00b      	beq.n	3401cb74 <_vfiprintf_r+0xa4>
3401cb5c:	465b      	mov	r3, fp
3401cb5e:	4622      	mov	r2, r4
3401cb60:	4629      	mov	r1, r5
3401cb62:	4630      	mov	r0, r6
3401cb64:	f7ff ffa1 	bl	3401caaa <__sfputs_r>
3401cb68:	3001      	adds	r0, #1
3401cb6a:	f000 80a7 	beq.w	3401ccbc <_vfiprintf_r+0x1ec>
3401cb6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401cb70:	445a      	add	r2, fp
3401cb72:	9209      	str	r2, [sp, #36]	@ 0x24
3401cb74:	f89a 3000 	ldrb.w	r3, [sl]
3401cb78:	2b00      	cmp	r3, #0
3401cb7a:	f000 809f 	beq.w	3401ccbc <_vfiprintf_r+0x1ec>
3401cb7e:	2300      	movs	r3, #0
3401cb80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401cb84:	f10a 0a01 	add.w	sl, sl, #1
3401cb88:	9304      	str	r3, [sp, #16]
3401cb8a:	9307      	str	r3, [sp, #28]
3401cb8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401cb90:	931a      	str	r3, [sp, #104]	@ 0x68
3401cb92:	e9cd 2305 	strd	r2, r3, [sp, #20]
3401cb96:	4654      	mov	r4, sl
3401cb98:	2205      	movs	r2, #5
3401cb9a:	4854      	ldr	r0, [pc, #336]	@ (3401ccec <_vfiprintf_r+0x21c>)
3401cb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
3401cba0:	f7fe fd93 	bl	3401b6ca <memchr>
3401cba4:	9a04      	ldr	r2, [sp, #16]
3401cba6:	b9d8      	cbnz	r0, 3401cbe0 <_vfiprintf_r+0x110>
3401cba8:	06d1      	lsls	r1, r2, #27
3401cbaa:	bf44      	itt	mi
3401cbac:	2320      	movmi	r3, #32
3401cbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401cbb2:	0713      	lsls	r3, r2, #28
3401cbb4:	bf44      	itt	mi
3401cbb6:	232b      	movmi	r3, #43	@ 0x2b
3401cbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401cbbc:	f89a 3000 	ldrb.w	r3, [sl]
3401cbc0:	2b2a      	cmp	r3, #42	@ 0x2a
3401cbc2:	d015      	beq.n	3401cbf0 <_vfiprintf_r+0x120>
3401cbc4:	9a07      	ldr	r2, [sp, #28]
3401cbc6:	4654      	mov	r4, sl
3401cbc8:	2000      	movs	r0, #0
3401cbca:	f04f 0c0a 	mov.w	ip, #10
3401cbce:	4621      	mov	r1, r4
3401cbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
3401cbd4:	3b30      	subs	r3, #48	@ 0x30
3401cbd6:	2b09      	cmp	r3, #9
3401cbd8:	d94b      	bls.n	3401cc72 <_vfiprintf_r+0x1a2>
3401cbda:	b1b0      	cbz	r0, 3401cc0a <_vfiprintf_r+0x13a>
3401cbdc:	9207      	str	r2, [sp, #28]
3401cbde:	e014      	b.n	3401cc0a <_vfiprintf_r+0x13a>
3401cbe0:	eba0 0308 	sub.w	r3, r0, r8
3401cbe4:	46a2      	mov	sl, r4
3401cbe6:	fa09 f303 	lsl.w	r3, r9, r3
3401cbea:	4313      	orrs	r3, r2
3401cbec:	9304      	str	r3, [sp, #16]
3401cbee:	e7d2      	b.n	3401cb96 <_vfiprintf_r+0xc6>
3401cbf0:	9b03      	ldr	r3, [sp, #12]
3401cbf2:	1d19      	adds	r1, r3, #4
3401cbf4:	681b      	ldr	r3, [r3, #0]
3401cbf6:	2b00      	cmp	r3, #0
3401cbf8:	9103      	str	r1, [sp, #12]
3401cbfa:	bfbb      	ittet	lt
3401cbfc:	425b      	neglt	r3, r3
3401cbfe:	f042 0202 	orrlt.w	r2, r2, #2
3401cc02:	9307      	strge	r3, [sp, #28]
3401cc04:	9307      	strlt	r3, [sp, #28]
3401cc06:	bfb8      	it	lt
3401cc08:	9204      	strlt	r2, [sp, #16]
3401cc0a:	7823      	ldrb	r3, [r4, #0]
3401cc0c:	2b2e      	cmp	r3, #46	@ 0x2e
3401cc0e:	d10a      	bne.n	3401cc26 <_vfiprintf_r+0x156>
3401cc10:	7863      	ldrb	r3, [r4, #1]
3401cc12:	2b2a      	cmp	r3, #42	@ 0x2a
3401cc14:	d132      	bne.n	3401cc7c <_vfiprintf_r+0x1ac>
3401cc16:	9b03      	ldr	r3, [sp, #12]
3401cc18:	3402      	adds	r4, #2
3401cc1a:	1d1a      	adds	r2, r3, #4
3401cc1c:	681b      	ldr	r3, [r3, #0]
3401cc1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401cc22:	9203      	str	r2, [sp, #12]
3401cc24:	9305      	str	r3, [sp, #20]
3401cc26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401ccfc <_vfiprintf_r+0x22c>
3401cc2a:	2203      	movs	r2, #3
3401cc2c:	7821      	ldrb	r1, [r4, #0]
3401cc2e:	4650      	mov	r0, sl
3401cc30:	f7fe fd4b 	bl	3401b6ca <memchr>
3401cc34:	b138      	cbz	r0, 3401cc46 <_vfiprintf_r+0x176>
3401cc36:	eba0 000a 	sub.w	r0, r0, sl
3401cc3a:	2240      	movs	r2, #64	@ 0x40
3401cc3c:	9b04      	ldr	r3, [sp, #16]
3401cc3e:	3401      	adds	r4, #1
3401cc40:	4082      	lsls	r2, r0
3401cc42:	4313      	orrs	r3, r2
3401cc44:	9304      	str	r3, [sp, #16]
3401cc46:	f814 1b01 	ldrb.w	r1, [r4], #1
3401cc4a:	2206      	movs	r2, #6
3401cc4c:	4828      	ldr	r0, [pc, #160]	@ (3401ccf0 <_vfiprintf_r+0x220>)
3401cc4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3401cc52:	f7fe fd3a 	bl	3401b6ca <memchr>
3401cc56:	2800      	cmp	r0, #0
3401cc58:	d03f      	beq.n	3401ccda <_vfiprintf_r+0x20a>
3401cc5a:	4b26      	ldr	r3, [pc, #152]	@ (3401ccf4 <_vfiprintf_r+0x224>)
3401cc5c:	bb1b      	cbnz	r3, 3401cca6 <_vfiprintf_r+0x1d6>
3401cc5e:	9b03      	ldr	r3, [sp, #12]
3401cc60:	3307      	adds	r3, #7
3401cc62:	f023 0307 	bic.w	r3, r3, #7
3401cc66:	3308      	adds	r3, #8
3401cc68:	9303      	str	r3, [sp, #12]
3401cc6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401cc6c:	443b      	add	r3, r7
3401cc6e:	9309      	str	r3, [sp, #36]	@ 0x24
3401cc70:	e76a      	b.n	3401cb48 <_vfiprintf_r+0x78>
3401cc72:	fb0c 3202 	mla	r2, ip, r2, r3
3401cc76:	460c      	mov	r4, r1
3401cc78:	2001      	movs	r0, #1
3401cc7a:	e7a8      	b.n	3401cbce <_vfiprintf_r+0xfe>
3401cc7c:	2300      	movs	r3, #0
3401cc7e:	3401      	adds	r4, #1
3401cc80:	f04f 0c0a 	mov.w	ip, #10
3401cc84:	4619      	mov	r1, r3
3401cc86:	9305      	str	r3, [sp, #20]
3401cc88:	4620      	mov	r0, r4
3401cc8a:	f810 2b01 	ldrb.w	r2, [r0], #1
3401cc8e:	3a30      	subs	r2, #48	@ 0x30
3401cc90:	2a09      	cmp	r2, #9
3401cc92:	d903      	bls.n	3401cc9c <_vfiprintf_r+0x1cc>
3401cc94:	2b00      	cmp	r3, #0
3401cc96:	d0c6      	beq.n	3401cc26 <_vfiprintf_r+0x156>
3401cc98:	9105      	str	r1, [sp, #20]
3401cc9a:	e7c4      	b.n	3401cc26 <_vfiprintf_r+0x156>
3401cc9c:	fb0c 2101 	mla	r1, ip, r1, r2
3401cca0:	4604      	mov	r4, r0
3401cca2:	2301      	movs	r3, #1
3401cca4:	e7f0      	b.n	3401cc88 <_vfiprintf_r+0x1b8>
3401cca6:	ab03      	add	r3, sp, #12
3401cca8:	462a      	mov	r2, r5
3401ccaa:	a904      	add	r1, sp, #16
3401ccac:	4630      	mov	r0, r6
3401ccae:	9300      	str	r3, [sp, #0]
3401ccb0:	4b11      	ldr	r3, [pc, #68]	@ (3401ccf8 <_vfiprintf_r+0x228>)
3401ccb2:	f7fd fdf5 	bl	3401a8a0 <_printf_float>
3401ccb6:	4607      	mov	r7, r0
3401ccb8:	1c78      	adds	r0, r7, #1
3401ccba:	d1d6      	bne.n	3401cc6a <_vfiprintf_r+0x19a>
3401ccbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401ccbe:	07d9      	lsls	r1, r3, #31
3401ccc0:	d405      	bmi.n	3401ccce <_vfiprintf_r+0x1fe>
3401ccc2:	89ab      	ldrh	r3, [r5, #12]
3401ccc4:	059a      	lsls	r2, r3, #22
3401ccc6:	d402      	bmi.n	3401ccce <_vfiprintf_r+0x1fe>
3401ccc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401ccca:	f7fe fcfd 	bl	3401b6c8 <__retarget_lock_release_recursive>
3401ccce:	89ab      	ldrh	r3, [r5, #12]
3401ccd0:	065b      	lsls	r3, r3, #25
3401ccd2:	f53f af1f 	bmi.w	3401cb14 <_vfiprintf_r+0x44>
3401ccd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
3401ccd8:	e71e      	b.n	3401cb18 <_vfiprintf_r+0x48>
3401ccda:	ab03      	add	r3, sp, #12
3401ccdc:	462a      	mov	r2, r5
3401ccde:	a904      	add	r1, sp, #16
3401cce0:	4630      	mov	r0, r6
3401cce2:	9300      	str	r3, [sp, #0]
3401cce4:	4b04      	ldr	r3, [pc, #16]	@ (3401ccf8 <_vfiprintf_r+0x228>)
3401cce6:	f7fe f867 	bl	3401adb8 <_printf_i>
3401ccea:	e7e4      	b.n	3401ccb6 <_vfiprintf_r+0x1e6>
3401ccec:	3401e51c 	.word	0x3401e51c
3401ccf0:	3401e526 	.word	0x3401e526
3401ccf4:	3401a8a1 	.word	0x3401a8a1
3401ccf8:	3401caab 	.word	0x3401caab
3401ccfc:	3401e522 	.word	0x3401e522

3401cd00 <__swhatbuf_r>:
3401cd00:	b570      	push	{r4, r5, r6, lr}
3401cd02:	460c      	mov	r4, r1
3401cd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401cd08:	b096      	sub	sp, #88	@ 0x58
3401cd0a:	4615      	mov	r5, r2
3401cd0c:	2900      	cmp	r1, #0
3401cd0e:	461e      	mov	r6, r3
3401cd10:	da0c      	bge.n	3401cd2c <__swhatbuf_r+0x2c>
3401cd12:	89a3      	ldrh	r3, [r4, #12]
3401cd14:	2100      	movs	r1, #0
3401cd16:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401cd1a:	bf14      	ite	ne
3401cd1c:	2340      	movne	r3, #64	@ 0x40
3401cd1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401cd22:	2000      	movs	r0, #0
3401cd24:	6031      	str	r1, [r6, #0]
3401cd26:	602b      	str	r3, [r5, #0]
3401cd28:	b016      	add	sp, #88	@ 0x58
3401cd2a:	bd70      	pop	{r4, r5, r6, pc}
3401cd2c:	466a      	mov	r2, sp
3401cd2e:	f000 f879 	bl	3401ce24 <_fstat_r>
3401cd32:	2800      	cmp	r0, #0
3401cd34:	dbed      	blt.n	3401cd12 <__swhatbuf_r+0x12>
3401cd36:	9901      	ldr	r1, [sp, #4]
3401cd38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401cd3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3401cd40:	4259      	negs	r1, r3
3401cd42:	4159      	adcs	r1, r3
3401cd44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401cd48:	e7eb      	b.n	3401cd22 <__swhatbuf_r+0x22>

3401cd4a <__smakebuf_r>:
3401cd4a:	898b      	ldrh	r3, [r1, #12]
3401cd4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401cd4e:	079d      	lsls	r5, r3, #30
3401cd50:	4606      	mov	r6, r0
3401cd52:	460c      	mov	r4, r1
3401cd54:	d507      	bpl.n	3401cd66 <__smakebuf_r+0x1c>
3401cd56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401cd5a:	6023      	str	r3, [r4, #0]
3401cd5c:	6123      	str	r3, [r4, #16]
3401cd5e:	2301      	movs	r3, #1
3401cd60:	6163      	str	r3, [r4, #20]
3401cd62:	b003      	add	sp, #12
3401cd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401cd66:	ab01      	add	r3, sp, #4
3401cd68:	466a      	mov	r2, sp
3401cd6a:	f7ff ffc9 	bl	3401cd00 <__swhatbuf_r>
3401cd6e:	9f00      	ldr	r7, [sp, #0]
3401cd70:	4605      	mov	r5, r0
3401cd72:	4630      	mov	r0, r6
3401cd74:	4639      	mov	r1, r7
3401cd76:	f7fd fc79 	bl	3401a66c <_malloc_r>
3401cd7a:	b948      	cbnz	r0, 3401cd90 <__smakebuf_r+0x46>
3401cd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401cd80:	059a      	lsls	r2, r3, #22
3401cd82:	d4ee      	bmi.n	3401cd62 <__smakebuf_r+0x18>
3401cd84:	f023 0303 	bic.w	r3, r3, #3
3401cd88:	f043 0302 	orr.w	r3, r3, #2
3401cd8c:	81a3      	strh	r3, [r4, #12]
3401cd8e:	e7e2      	b.n	3401cd56 <__smakebuf_r+0xc>
3401cd90:	89a3      	ldrh	r3, [r4, #12]
3401cd92:	6020      	str	r0, [r4, #0]
3401cd94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401cd98:	81a3      	strh	r3, [r4, #12]
3401cd9a:	9b01      	ldr	r3, [sp, #4]
3401cd9c:	e9c4 0704 	strd	r0, r7, [r4, #16]
3401cda0:	b15b      	cbz	r3, 3401cdba <__smakebuf_r+0x70>
3401cda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401cda6:	4630      	mov	r0, r6
3401cda8:	f000 f84e 	bl	3401ce48 <_isatty_r>
3401cdac:	b128      	cbz	r0, 3401cdba <__smakebuf_r+0x70>
3401cdae:	89a3      	ldrh	r3, [r4, #12]
3401cdb0:	f023 0303 	bic.w	r3, r3, #3
3401cdb4:	f043 0301 	orr.w	r3, r3, #1
3401cdb8:	81a3      	strh	r3, [r4, #12]
3401cdba:	89a3      	ldrh	r3, [r4, #12]
3401cdbc:	431d      	orrs	r5, r3
3401cdbe:	81a5      	strh	r5, [r4, #12]
3401cdc0:	e7cf      	b.n	3401cd62 <__smakebuf_r+0x18>

3401cdc2 <_raise_r>:
3401cdc2:	291f      	cmp	r1, #31
3401cdc4:	b538      	push	{r3, r4, r5, lr}
3401cdc6:	4605      	mov	r5, r0
3401cdc8:	460c      	mov	r4, r1
3401cdca:	d904      	bls.n	3401cdd6 <_raise_r+0x14>
3401cdcc:	2316      	movs	r3, #22
3401cdce:	6003      	str	r3, [r0, #0]
3401cdd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401cdd4:	bd38      	pop	{r3, r4, r5, pc}
3401cdd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3401cdd8:	b112      	cbz	r2, 3401cde0 <_raise_r+0x1e>
3401cdda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401cdde:	b94b      	cbnz	r3, 3401cdf4 <_raise_r+0x32>
3401cde0:	4628      	mov	r0, r5
3401cde2:	f000 f853 	bl	3401ce8c <_getpid_r>
3401cde6:	4622      	mov	r2, r4
3401cde8:	4601      	mov	r1, r0
3401cdea:	4628      	mov	r0, r5
3401cdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401cdf0:	f000 b83a 	b.w	3401ce68 <_kill_r>
3401cdf4:	2b01      	cmp	r3, #1
3401cdf6:	d00a      	beq.n	3401ce0e <_raise_r+0x4c>
3401cdf8:	1c59      	adds	r1, r3, #1
3401cdfa:	d103      	bne.n	3401ce04 <_raise_r+0x42>
3401cdfc:	2316      	movs	r3, #22
3401cdfe:	6003      	str	r3, [r0, #0]
3401ce00:	2001      	movs	r0, #1
3401ce02:	e7e7      	b.n	3401cdd4 <_raise_r+0x12>
3401ce04:	2100      	movs	r1, #0
3401ce06:	4620      	mov	r0, r4
3401ce08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401ce0c:	4798      	blx	r3
3401ce0e:	2000      	movs	r0, #0
3401ce10:	e7e0      	b.n	3401cdd4 <_raise_r+0x12>
	...

3401ce14 <raise>:
3401ce14:	4b02      	ldr	r3, [pc, #8]	@ (3401ce20 <raise+0xc>)
3401ce16:	4601      	mov	r1, r0
3401ce18:	6818      	ldr	r0, [r3, #0]
3401ce1a:	f7ff bfd2 	b.w	3401cdc2 <_raise_r>
3401ce1e:	bf00      	nop
3401ce20:	3401e76c 	.word	0x3401e76c

3401ce24 <_fstat_r>:
3401ce24:	b538      	push	{r3, r4, r5, lr}
3401ce26:	2300      	movs	r3, #0
3401ce28:	4d06      	ldr	r5, [pc, #24]	@ (3401ce44 <_fstat_r+0x20>)
3401ce2a:	4604      	mov	r4, r0
3401ce2c:	4608      	mov	r0, r1
3401ce2e:	4611      	mov	r1, r2
3401ce30:	602b      	str	r3, [r5, #0]
3401ce32:	f7e4 fc8b 	bl	3400174c <_fstat>
3401ce36:	1c43      	adds	r3, r0, #1
3401ce38:	d102      	bne.n	3401ce40 <_fstat_r+0x1c>
3401ce3a:	682b      	ldr	r3, [r5, #0]
3401ce3c:	b103      	cbz	r3, 3401ce40 <_fstat_r+0x1c>
3401ce3e:	6023      	str	r3, [r4, #0]
3401ce40:	bd38      	pop	{r3, r4, r5, pc}
3401ce42:	bf00      	nop
3401ce44:	3401efa8 	.word	0x3401efa8

3401ce48 <_isatty_r>:
3401ce48:	b538      	push	{r3, r4, r5, lr}
3401ce4a:	2300      	movs	r3, #0
3401ce4c:	4d05      	ldr	r5, [pc, #20]	@ (3401ce64 <_isatty_r+0x1c>)
3401ce4e:	4604      	mov	r4, r0
3401ce50:	4608      	mov	r0, r1
3401ce52:	602b      	str	r3, [r5, #0]
3401ce54:	f7e4 fc8a 	bl	3400176c <_isatty>
3401ce58:	1c43      	adds	r3, r0, #1
3401ce5a:	d102      	bne.n	3401ce62 <_isatty_r+0x1a>
3401ce5c:	682b      	ldr	r3, [r5, #0]
3401ce5e:	b103      	cbz	r3, 3401ce62 <_isatty_r+0x1a>
3401ce60:	6023      	str	r3, [r4, #0]
3401ce62:	bd38      	pop	{r3, r4, r5, pc}
3401ce64:	3401efa8 	.word	0x3401efa8

3401ce68 <_kill_r>:
3401ce68:	b538      	push	{r3, r4, r5, lr}
3401ce6a:	2300      	movs	r3, #0
3401ce6c:	4d06      	ldr	r5, [pc, #24]	@ (3401ce88 <_kill_r+0x20>)
3401ce6e:	4604      	mov	r4, r0
3401ce70:	4608      	mov	r0, r1
3401ce72:	4611      	mov	r1, r2
3401ce74:	602b      	str	r3, [r5, #0]
3401ce76:	f7e4 fc25 	bl	340016c4 <_kill>
3401ce7a:	1c43      	adds	r3, r0, #1
3401ce7c:	d102      	bne.n	3401ce84 <_kill_r+0x1c>
3401ce7e:	682b      	ldr	r3, [r5, #0]
3401ce80:	b103      	cbz	r3, 3401ce84 <_kill_r+0x1c>
3401ce82:	6023      	str	r3, [r4, #0]
3401ce84:	bd38      	pop	{r3, r4, r5, pc}
3401ce86:	bf00      	nop
3401ce88:	3401efa8 	.word	0x3401efa8

3401ce8c <_getpid_r>:
3401ce8c:	f7e4 bc12 	b.w	340016b4 <_getpid>

3401ce90 <_calloc_r>:
3401ce90:	b570      	push	{r4, r5, r6, lr}
3401ce92:	fba1 5402 	umull	r5, r4, r1, r2
3401ce96:	b934      	cbnz	r4, 3401cea6 <_calloc_r+0x16>
3401ce98:	4629      	mov	r1, r5
3401ce9a:	f7fd fbe7 	bl	3401a66c <_malloc_r>
3401ce9e:	4606      	mov	r6, r0
3401cea0:	b928      	cbnz	r0, 3401ceae <_calloc_r+0x1e>
3401cea2:	4630      	mov	r0, r6
3401cea4:	bd70      	pop	{r4, r5, r6, pc}
3401cea6:	220c      	movs	r2, #12
3401cea8:	2600      	movs	r6, #0
3401ceaa:	6002      	str	r2, [r0, #0]
3401ceac:	e7f9      	b.n	3401cea2 <_calloc_r+0x12>
3401ceae:	462a      	mov	r2, r5
3401ceb0:	4621      	mov	r1, r4
3401ceb2:	f7fe fb7b 	bl	3401b5ac <memset>
3401ceb6:	e7f4      	b.n	3401cea2 <_calloc_r+0x12>

3401ceb8 <__ascii_mbtowc>:
3401ceb8:	b082      	sub	sp, #8
3401ceba:	b901      	cbnz	r1, 3401cebe <__ascii_mbtowc+0x6>
3401cebc:	a901      	add	r1, sp, #4
3401cebe:	b142      	cbz	r2, 3401ced2 <__ascii_mbtowc+0x1a>
3401cec0:	b14b      	cbz	r3, 3401ced6 <__ascii_mbtowc+0x1e>
3401cec2:	7813      	ldrb	r3, [r2, #0]
3401cec4:	600b      	str	r3, [r1, #0]
3401cec6:	7812      	ldrb	r2, [r2, #0]
3401cec8:	1e10      	subs	r0, r2, #0
3401ceca:	bf18      	it	ne
3401cecc:	2001      	movne	r0, #1
3401cece:	b002      	add	sp, #8
3401ced0:	4770      	bx	lr
3401ced2:	4610      	mov	r0, r2
3401ced4:	e7fb      	b.n	3401cece <__ascii_mbtowc+0x16>
3401ced6:	f06f 0001 	mvn.w	r0, #1
3401ceda:	e7f8      	b.n	3401cece <__ascii_mbtowc+0x16>

3401cedc <__ascii_wctomb>:
3401cedc:	4603      	mov	r3, r0
3401cede:	4608      	mov	r0, r1
3401cee0:	b141      	cbz	r1, 3401cef4 <__ascii_wctomb+0x18>
3401cee2:	2aff      	cmp	r2, #255	@ 0xff
3401cee4:	d904      	bls.n	3401cef0 <__ascii_wctomb+0x14>
3401cee6:	228a      	movs	r2, #138	@ 0x8a
3401cee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401ceec:	601a      	str	r2, [r3, #0]
3401ceee:	4770      	bx	lr
3401cef0:	2001      	movs	r0, #1
3401cef2:	700a      	strb	r2, [r1, #0]
3401cef4:	4770      	bx	lr
	...

3401cef8 <_sbrk>:
3401cef8:	4a04      	ldr	r2, [pc, #16]	@ (3401cf0c <_sbrk+0x14>)
3401cefa:	4603      	mov	r3, r0
3401cefc:	6811      	ldr	r1, [r2, #0]
3401cefe:	b909      	cbnz	r1, 3401cf04 <_sbrk+0xc>
3401cf00:	4903      	ldr	r1, [pc, #12]	@ (3401cf10 <_sbrk+0x18>)
3401cf02:	6011      	str	r1, [r2, #0]
3401cf04:	6810      	ldr	r0, [r2, #0]
3401cf06:	4403      	add	r3, r0
3401cf08:	6013      	str	r3, [r2, #0]
3401cf0a:	4770      	bx	lr
3401cf0c:	3401efb0 	.word	0x3401efb0
3401cf10:	3401efb8 	.word	0x3401efb8

3401cf14 <_init>:
3401cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401cf16:	bf00      	nop
3401cf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401cf1a:	bc08      	pop	{r3}
3401cf1c:	469e      	mov	lr, r3
3401cf1e:	4770      	bx	lr

3401cf20 <_fini>:
3401cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401cf22:	bf00      	nop
3401cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401cf26:	bc08      	pop	{r3}
3401cf28:	469e      	mov	lr, r3
3401cf2a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3401cf40 <SECURE_SystemCoreClockUpdate>:
3401cf40:	e97f e97f 	sg
3401cf44:	f7e8 bff6 	b.w	34005f34 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
