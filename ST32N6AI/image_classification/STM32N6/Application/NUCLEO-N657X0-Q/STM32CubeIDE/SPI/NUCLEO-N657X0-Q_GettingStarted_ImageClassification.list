
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d884  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3401dfe0  3401dfe0  0001dfe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000025ac  3401e000  3401e000  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  340205ac  340205ac  000207c8  2**0
                  CONTENTS
  5 .ARM          00000008  340205ac  340205ac  000205ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  340205b4  340207c8  000207c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  340205b4  340205b4  000205b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  340205b8  340205b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000020c  340205bc  340205bc  000205bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000006d8  340207c8  340207c8  000207c8  2**2
                  ALLOC
 11 ._user_heap_stack 00004200  34020ea0  34020ea0  000207c8  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043109  00000000  00000000  00020802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000633e  00000000  00000000  0006390b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003250  00000000  00000000  00069c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002742  00000000  00000000  0006cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00079d64  00000000  00000000  0006f5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eb98  00000000  00000000  000e9346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003a26d9  00000000  00000000  00127ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  004ca5b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e6f0  00000000  00000000  004ca5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000155  00000000  00000000  004d8cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	340207c8 	.word	0x340207c8
3400076c:	00000000 	.word	0x00000000
34000770:	3401dfbc 	.word	0x3401dfbc

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	340207cc 	.word	0x340207cc
3400078c:	3401dfbc 	.word	0x3401dfbc

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <update_weights_int8>:
    memcpy(NNweights, new_weights, Num_weights * sizeof(float));
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
    SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(float));
}

void update_weights_int8(int8_t* NNweights, const int8_t *new_weights,size_t Num_weights) {
34000b1c:	b580      	push	{r7, lr}
34000b1e:	b088      	sub	sp, #32
34000b20:	af00      	add	r7, sp, #0
34000b22:	60f8      	str	r0, [r7, #12]
34000b24:	60b9      	str	r1, [r7, #8]
34000b26:	607a      	str	r2, [r7, #4]
    memcpy(NNweights, new_weights, Num_weights * sizeof(int8_t));
34000b28:	687a      	ldr	r2, [r7, #4]
34000b2a:	68b9      	ldr	r1, [r7, #8]
34000b2c:	68f8      	ldr	r0, [r7, #12]
34000b2e:	f01b fe2c 	bl	3401c78a <memcpy>
    printf("Cleaning weights at %p, size %d\n\r", NNweights, Num_weights);
34000b32:	687a      	ldr	r2, [r7, #4]
34000b34:	68f9      	ldr	r1, [r7, #12]
34000b36:	4816      	ldr	r0, [pc, #88]	@ (34000b90 <update_weights_int8+0x74>)
34000b38:	f01b fa50 	bl	3401bfdc <iprintf>
	SCB_CleanDCache_by_Addr(NNweights, Num_weights * sizeof(int8_t));
34000b3c:	687b      	ldr	r3, [r7, #4]
34000b3e:	68fa      	ldr	r2, [r7, #12]
34000b40:	61fa      	str	r2, [r7, #28]
34000b42:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34000b44:	69bb      	ldr	r3, [r7, #24]
34000b46:	2b00      	cmp	r3, #0
34000b48:	dd1d      	ble.n	34000b86 <update_weights_int8+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000b4a:	69fb      	ldr	r3, [r7, #28]
34000b4c:	f003 021f 	and.w	r2, r3, #31
34000b50:	69bb      	ldr	r3, [r7, #24]
34000b52:	4413      	add	r3, r2
34000b54:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000b56:	69fb      	ldr	r3, [r7, #28]
34000b58:	613b      	str	r3, [r7, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34000b5a:	f3bf 8f4f 	dsb	sy
}
34000b5e:	bf00      	nop

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000b60:	4a0c      	ldr	r2, [pc, #48]	@ (34000b94 <update_weights_int8+0x78>)
34000b62:	693b      	ldr	r3, [r7, #16]
34000b64:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000b68:	693b      	ldr	r3, [r7, #16]
34000b6a:	3320      	adds	r3, #32
34000b6c:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34000b6e:	697b      	ldr	r3, [r7, #20]
34000b70:	3b20      	subs	r3, #32
34000b72:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
34000b74:	697b      	ldr	r3, [r7, #20]
34000b76:	2b00      	cmp	r3, #0
34000b78:	dcf2      	bgt.n	34000b60 <update_weights_int8+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
34000b7a:	f3bf 8f4f 	dsb	sy
}
34000b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34000b80:	f3bf 8f6f 	isb	sy
}
34000b84:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
34000b86:	bf00      	nop
}
34000b88:	bf00      	nop
34000b8a:	3720      	adds	r7, #32
34000b8c:	46bd      	mov	sp, r7
34000b8e:	bd80      	pop	{r7, pc}
34000b90:	3401e010 	.word	0x3401e010
34000b94:	e000ed00 	.word	0xe000ed00

34000b98 <calcAdresses>:

void calcAdresses(size_t insize, size_t outsize,size_t bytesOfType,volatile Matmul_info* infoStruct){
34000b98:	b480      	push	{r7}
34000b9a:	b087      	sub	sp, #28
34000b9c:	af00      	add	r7, sp, #0
34000b9e:	60f8      	str	r0, [r7, #12]
34000ba0:	60b9      	str	r1, [r7, #8]
34000ba2:	607a      	str	r2, [r7, #4]
34000ba4:	603b      	str	r3, [r7, #0]
	infoStruct->bytes = bytesOfType;
34000ba6:	687a      	ldr	r2, [r7, #4]
34000ba8:	683b      	ldr	r3, [r7, #0]
34000baa:	601a      	str	r2, [r3, #0]
	infoStruct->insize = insize;
34000bac:	68fa      	ldr	r2, [r7, #12]
34000bae:	683b      	ldr	r3, [r7, #0]
34000bb0:	605a      	str	r2, [r3, #4]
	infoStruct->outsize = outsize;
34000bb2:	68ba      	ldr	r2, [r7, #8]
34000bb4:	683b      	ldr	r3, [r7, #0]
34000bb6:	609a      	str	r2, [r3, #8]

	int inBytes = bytesOfType * insize;
34000bb8:	687b      	ldr	r3, [r7, #4]
34000bba:	68fa      	ldr	r2, [r7, #12]
34000bbc:	fb02 f303 	mul.w	r3, r2, r3
34000bc0:	617b      	str	r3, [r7, #20]
	int outBytes = bytesOfType * outsize;
34000bc2:	687b      	ldr	r3, [r7, #4]
34000bc4:	68ba      	ldr	r2, [r7, #8]
34000bc6:	fb02 f303 	mul.w	r3, r2, r3
34000bca:	613b      	str	r3, [r7, #16]

	infoStruct->weight_start = 0;
34000bcc:	683b      	ldr	r3, [r7, #0]
34000bce:	2200      	movs	r2, #0
34000bd0:	60da      	str	r2, [r3, #12]
	infoStruct->weight_end   = infoStruct->weight_start + inBytes * outBytes;
34000bd2:	683b      	ldr	r3, [r7, #0]
34000bd4:	68da      	ldr	r2, [r3, #12]
34000bd6:	697b      	ldr	r3, [r7, #20]
34000bd8:	6939      	ldr	r1, [r7, #16]
34000bda:	fb01 f303 	mul.w	r3, r1, r3
34000bde:	441a      	add	r2, r3
34000be0:	683b      	ldr	r3, [r7, #0]
34000be2:	611a      	str	r2, [r3, #16]
	infoStruct->weight_limit = infoStruct->weight_end + inBytes;
34000be4:	683b      	ldr	r3, [r7, #0]
34000be6:	691a      	ldr	r2, [r3, #16]
34000be8:	697b      	ldr	r3, [r7, #20]
34000bea:	441a      	add	r2, r3
34000bec:	683b      	ldr	r3, [r7, #0]
34000bee:	615a      	str	r2, [r3, #20]

	infoStruct->input_start = infoStruct->weight_limit ;
34000bf0:	683b      	ldr	r3, [r7, #0]
34000bf2:	695a      	ldr	r2, [r3, #20]
34000bf4:	683b      	ldr	r3, [r7, #0]
34000bf6:	619a      	str	r2, [r3, #24]
	infoStruct->input_end   = infoStruct->input_start + inBytes;
34000bf8:	683b      	ldr	r3, [r7, #0]
34000bfa:	699a      	ldr	r2, [r3, #24]
34000bfc:	697b      	ldr	r3, [r7, #20]
34000bfe:	441a      	add	r2, r3
34000c00:	683b      	ldr	r3, [r7, #0]
34000c02:	61da      	str	r2, [r3, #28]
	infoStruct->input_limit = infoStruct->input_end + inBytes;
34000c04:	683b      	ldr	r3, [r7, #0]
34000c06:	69da      	ldr	r2, [r3, #28]
34000c08:	697b      	ldr	r3, [r7, #20]
34000c0a:	441a      	add	r2, r3
34000c0c:	683b      	ldr	r3, [r7, #0]
34000c0e:	621a      	str	r2, [r3, #32]

	infoStruct->output_start = infoStruct->input_limit;
34000c10:	683b      	ldr	r3, [r7, #0]
34000c12:	6a1a      	ldr	r2, [r3, #32]
34000c14:	683b      	ldr	r3, [r7, #0]
34000c16:	625a      	str	r2, [r3, #36]	@ 0x24
	infoStruct->output_end   = infoStruct->output_start + outBytes;
34000c18:	683b      	ldr	r3, [r7, #0]
34000c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34000c1c:	693b      	ldr	r3, [r7, #16]
34000c1e:	441a      	add	r2, r3
34000c20:	683b      	ldr	r3, [r7, #0]
34000c22:	629a      	str	r2, [r3, #40]	@ 0x28
	infoStruct->output_limit = infoStruct->output_end + outBytes;
34000c24:	683b      	ldr	r3, [r7, #0]
34000c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34000c28:	693b      	ldr	r3, [r7, #16]
34000c2a:	441a      	add	r2, r3
34000c2c:	683b      	ldr	r3, [r7, #0]
34000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
34000c30:	bf00      	nop
34000c32:	371c      	adds	r7, #28
34000c34:	46bd      	mov	sp, r7
34000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c3a:	4770      	bx	lr

34000c3c <npu_matvec_int8_init>:

int npu_matvec_int8_init(size_t insize,size_t outsize){
34000c3c:	b580      	push	{r7, lr}
34000c3e:	b084      	sub	sp, #16
34000c40:	af00      	add	r7, sp, #0
34000c42:	6078      	str	r0, [r7, #4]
34000c44:	6039      	str	r1, [r7, #0]
	extern volatile Matmul_info matmulInfo_int;
	size_t insizeNPU = 0;
34000c46:	2300      	movs	r3, #0
34000c48:	60fb      	str	r3, [r7, #12]
	size_t outsizeNPU = 0;
34000c4a:	2300      	movs	r3, #0
34000c4c:	60bb      	str	r3, [r7, #8]

	// Calculate valid insize and outsize. At the moment only 8,16,24 are valid
	if((insize > 24) || (outsize > 24)){
34000c4e:	687b      	ldr	r3, [r7, #4]
34000c50:	2b18      	cmp	r3, #24
34000c52:	d802      	bhi.n	34000c5a <npu_matvec_int8_init+0x1e>
34000c54:	683b      	ldr	r3, [r7, #0]
34000c56:	2b18      	cmp	r3, #24
34000c58:	d905      	bls.n	34000c66 <npu_matvec_int8_init+0x2a>
		printf("Insize or Outsize too big. Has to be lower or equal to 24");
34000c5a:	481b      	ldr	r0, [pc, #108]	@ (34000cc8 <npu_matvec_int8_init+0x8c>)
34000c5c:	f01b f9be 	bl	3401bfdc <iprintf>
		return -1;
34000c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000c64:	e02c      	b.n	34000cc0 <npu_matvec_int8_init+0x84>
	}

	if((insize < 1) || (outsize < 1)){
34000c66:	687b      	ldr	r3, [r7, #4]
34000c68:	2b00      	cmp	r3, #0
34000c6a:	d002      	beq.n	34000c72 <npu_matvec_int8_init+0x36>
34000c6c:	683b      	ldr	r3, [r7, #0]
34000c6e:	2b00      	cmp	r3, #0
34000c70:	d105      	bne.n	34000c7e <npu_matvec_int8_init+0x42>
		printf("Insize or Outsize too small. Has to be higher or equal to 1");
34000c72:	4816      	ldr	r0, [pc, #88]	@ (34000ccc <npu_matvec_int8_init+0x90>)
34000c74:	f01b f9b2 	bl	3401bfdc <iprintf>
		return -1;
34000c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000c7c:	e020      	b.n	34000cc0 <npu_matvec_int8_init+0x84>
	}

	// Set insize to a valid size
	if((insize % 8) != 0){
34000c7e:	687b      	ldr	r3, [r7, #4]
34000c80:	f003 0307 	and.w	r3, r3, #7
34000c84:	2b00      	cmp	r3, #0
34000c86:	d005      	beq.n	34000c94 <npu_matvec_int8_init+0x58>
		insizeNPU = ((insize/8) + 1) * 8;
34000c88:	687b      	ldr	r3, [r7, #4]
34000c8a:	08db      	lsrs	r3, r3, #3
34000c8c:	3301      	adds	r3, #1
34000c8e:	00db      	lsls	r3, r3, #3
34000c90:	60fb      	str	r3, [r7, #12]
34000c92:	e001      	b.n	34000c98 <npu_matvec_int8_init+0x5c>
	}

	else{
		insizeNPU = insize;
34000c94:	687b      	ldr	r3, [r7, #4]
34000c96:	60fb      	str	r3, [r7, #12]
	}

	// Set outsize to a valid size
	if((outsize % 8) != 0){
34000c98:	683b      	ldr	r3, [r7, #0]
34000c9a:	f003 0307 	and.w	r3, r3, #7
34000c9e:	2b00      	cmp	r3, #0
34000ca0:	d005      	beq.n	34000cae <npu_matvec_int8_init+0x72>
		outsizeNPU = ((outsize/8) + 1) * 8;
34000ca2:	683b      	ldr	r3, [r7, #0]
34000ca4:	08db      	lsrs	r3, r3, #3
34000ca6:	3301      	adds	r3, #1
34000ca8:	00db      	lsls	r3, r3, #3
34000caa:	60bb      	str	r3, [r7, #8]
34000cac:	e001      	b.n	34000cb2 <npu_matvec_int8_init+0x76>
	}

	else{
		outsizeNPU = outsize;
34000cae:	683b      	ldr	r3, [r7, #0]
34000cb0:	60bb      	str	r3, [r7, #8]
	}

	// Calculate Adresses
	calcAdresses(insizeNPU,outsizeNPU,1,&matmulInfo_int);
34000cb2:	4b07      	ldr	r3, [pc, #28]	@ (34000cd0 <npu_matvec_int8_init+0x94>)
34000cb4:	2201      	movs	r2, #1
34000cb6:	68b9      	ldr	r1, [r7, #8]
34000cb8:	68f8      	ldr	r0, [r7, #12]
34000cba:	f7ff ff6d 	bl	34000b98 <calcAdresses>
	return 0;
34000cbe:	2300      	movs	r3, #0
}
34000cc0:	4618      	mov	r0, r3
34000cc2:	3710      	adds	r7, #16
34000cc4:	46bd      	mov	sp, r7
34000cc6:	bd80      	pop	{r7, pc}
34000cc8:	3401e034 	.word	0x3401e034
34000ccc:	3401e070 	.word	0x3401e070
34000cd0:	340207e4 	.word	0x340207e4

34000cd4 <npu_matvec_int8_run>:

int8_t* npu_matvec_int8_run(int8_t *inVec, size_t insizeVec, size_t outSize, int8_t *inMat){
34000cd4:	b580      	push	{r7, lr}
34000cd6:	b088      	sub	sp, #32
34000cd8:	af00      	add	r7, sp, #0
34000cda:	60f8      	str	r0, [r7, #12]
34000cdc:	60b9      	str	r1, [r7, #8]
34000cde:	607a      	str	r2, [r7, #4]
34000ce0:	603b      	str	r3, [r7, #0]
	//LL_ATON_DECLARE_NAMED_NN_INSTANCE_AND_INTERFACE(int8);
	extern volatile Matmul_info matmulInfo_int;

	// Prepare input buffer: 0x34200000UL is the base address
	memcpy((int8_t*)(0x34200000UL + matmulInfo_int.input_start), inVec, matmulInfo_int.insize);
34000ce2:	4b27      	ldr	r3, [pc, #156]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000ce4:	699b      	ldr	r3, [r3, #24]
34000ce6:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000cea:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
34000cee:	4618      	mov	r0, r3
34000cf0:	4b23      	ldr	r3, [pc, #140]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000cf2:	685b      	ldr	r3, [r3, #4]
34000cf4:	461a      	mov	r2, r3
34000cf6:	68f9      	ldr	r1, [r7, #12]
34000cf8:	f01b fd47 	bl	3401c78a <memcpy>
	SCB_CleanDCache_by_Addr((void*)(0x34200000UL + matmulInfo_int.input_start), insizeVec);
34000cfc:	4b20      	ldr	r3, [pc, #128]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000cfe:	699b      	ldr	r3, [r3, #24]
34000d00:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000d04:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
34000d08:	461a      	mov	r2, r3
34000d0a:	68bb      	ldr	r3, [r7, #8]
34000d0c:	61fa      	str	r2, [r7, #28]
34000d0e:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) {
34000d10:	69bb      	ldr	r3, [r7, #24]
34000d12:	2b00      	cmp	r3, #0
34000d14:	dd1d      	ble.n	34000d52 <npu_matvec_int8_run+0x7e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34000d16:	69fb      	ldr	r3, [r7, #28]
34000d18:	f003 021f 	and.w	r2, r3, #31
34000d1c:	69bb      	ldr	r3, [r7, #24]
34000d1e:	4413      	add	r3, r2
34000d20:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34000d22:	69fb      	ldr	r3, [r7, #28]
34000d24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
34000d26:	f3bf 8f4f 	dsb	sy
}
34000d2a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34000d2c:	4a15      	ldr	r2, [pc, #84]	@ (34000d84 <npu_matvec_int8_run+0xb0>)
34000d2e:	693b      	ldr	r3, [r7, #16]
34000d30:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34000d34:	693b      	ldr	r3, [r7, #16]
34000d36:	3320      	adds	r3, #32
34000d38:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34000d3a:	697b      	ldr	r3, [r7, #20]
34000d3c:	3b20      	subs	r3, #32
34000d3e:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
34000d40:	697b      	ldr	r3, [r7, #20]
34000d42:	2b00      	cmp	r3, #0
34000d44:	dcf2      	bgt.n	34000d2c <npu_matvec_int8_run+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
34000d46:	f3bf 8f4f 	dsb	sy
}
34000d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34000d4c:	f3bf 8f6f 	isb	sy
}
34000d50:	bf00      	nop
}
34000d52:	bf00      	nop

	// Prepare Matrix
	update_weights_int8((int8_t*)(0x34200000UL), inMat, insizeVec * outSize);
34000d54:	68bb      	ldr	r3, [r7, #8]
34000d56:	687a      	ldr	r2, [r7, #4]
34000d58:	fb02 f303 	mul.w	r3, r2, r3
34000d5c:	461a      	mov	r2, r3
34000d5e:	6839      	ldr	r1, [r7, #0]
34000d60:	4809      	ldr	r0, [pc, #36]	@ (34000d88 <npu_matvec_int8_run+0xb4>)
34000d62:	f7ff fedb 	bl	34000b1c <update_weights_int8>

	LL_ATON_RT_Main(&NN_Instance_int8);
34000d66:	4809      	ldr	r0, [pc, #36]	@ (34000d8c <npu_matvec_int8_run+0xb8>)
34000d68:	f019 f9f6 	bl	3401a158 <LL_ATON_RT_Main>

	return (int8_t*)(0x34200000UL + matmulInfo_int.output_start);
34000d6c:	4b04      	ldr	r3, [pc, #16]	@ (34000d80 <npu_matvec_int8_run+0xac>)
34000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34000d70:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
34000d74:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
}
34000d78:	4618      	mov	r0, r3
34000d7a:	3720      	adds	r7, #32
34000d7c:	46bd      	mov	sp, r7
34000d7e:	bd80      	pop	{r7, pc}
34000d80:	340207e4 	.word	0x340207e4
34000d84:	e000ed00 	.word	0xe000ed00
34000d88:	34200000 	.word	0x34200000
34000d8c:	340205bc 	.word	0x340205bc

34000d90 <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000d90:	b580      	push	{r7, lr}
34000d92:	b086      	sub	sp, #24
34000d94:	af00      	add	r7, sp, #0
34000d96:	6078      	str	r0, [r7, #4]
34000d98:	6039      	str	r1, [r7, #0]
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000d9a:	687b      	ldr	r3, [r7, #4]
34000d9c:	683a      	ldr	r2, [r7, #0]
34000d9e:	fb02 f303 	mul.w	r3, r2, r3
34000da2:	4618      	mov	r0, r3
34000da4:	f01a fa96 	bl	3401b2d4 <malloc>
34000da8:	4603      	mov	r3, r0
34000daa:	60fb      	str	r3, [r7, #12]
    if (identity == NULL) {
34000dac:	68fb      	ldr	r3, [r7, #12]
34000dae:	2b00      	cmp	r3, #0
34000db0:	d101      	bne.n	34000db6 <getIdentityWeights_int8+0x26>
        return NULL;
34000db2:	2300      	movs	r3, #0
34000db4:	e036      	b.n	34000e24 <getIdentityWeights_int8+0x94>
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000db6:	687b      	ldr	r3, [r7, #4]
34000db8:	683a      	ldr	r2, [r7, #0]
34000dba:	fb02 f303 	mul.w	r3, r2, r3
34000dbe:	461a      	mov	r2, r3
34000dc0:	2100      	movs	r1, #0
34000dc2:	68f8      	ldr	r0, [r7, #12]
34000dc4:	f01b fa52 	bl	3401c26c <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000dc8:	2300      	movs	r3, #0
34000dca:	617b      	str	r3, [r7, #20]
34000dcc:	e025      	b.n	34000e1a <getIdentityWeights_int8+0x8a>
        for (size_t j = 0; j < outsize; j++) {
34000dce:	2300      	movs	r3, #0
34000dd0:	613b      	str	r3, [r7, #16]
34000dd2:	e01b      	b.n	34000e0c <getIdentityWeights_int8+0x7c>
            if (i == j) {
34000dd4:	697a      	ldr	r2, [r7, #20]
34000dd6:	693b      	ldr	r3, [r7, #16]
34000dd8:	429a      	cmp	r2, r3
34000dda:	d10a      	bne.n	34000df2 <getIdentityWeights_int8+0x62>
//            	printf("%4d: 1",i * outsize + j);
                identity[i * outsize + j] = 1;  // Set diagonal to 1
34000ddc:	697b      	ldr	r3, [r7, #20]
34000dde:	683a      	ldr	r2, [r7, #0]
34000de0:	fb03 f202 	mul.w	r2, r3, r2
34000de4:	693b      	ldr	r3, [r7, #16]
34000de6:	4413      	add	r3, r2
34000de8:	68fa      	ldr	r2, [r7, #12]
34000dea:	4413      	add	r3, r2
34000dec:	2201      	movs	r2, #1
34000dee:	701a      	strb	r2, [r3, #0]
34000df0:	e009      	b.n	34000e06 <getIdentityWeights_int8+0x76>
            }
            else{
//            	printf("%4d: 0",i * outsize + j);
                identity[i * outsize + j] = 0;  // Set diagonal to 1
34000df2:	697b      	ldr	r3, [r7, #20]
34000df4:	683a      	ldr	r2, [r7, #0]
34000df6:	fb03 f202 	mul.w	r2, r3, r2
34000dfa:	693b      	ldr	r3, [r7, #16]
34000dfc:	4413      	add	r3, r2
34000dfe:	68fa      	ldr	r2, [r7, #12]
34000e00:	4413      	add	r3, r2
34000e02:	2200      	movs	r2, #0
34000e04:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < outsize; j++) {
34000e06:	693b      	ldr	r3, [r7, #16]
34000e08:	3301      	adds	r3, #1
34000e0a:	613b      	str	r3, [r7, #16]
34000e0c:	693a      	ldr	r2, [r7, #16]
34000e0e:	683b      	ldr	r3, [r7, #0]
34000e10:	429a      	cmp	r2, r3
34000e12:	d3df      	bcc.n	34000dd4 <getIdentityWeights_int8+0x44>
    for (size_t i = 0; i < insize; i++) {
34000e14:	697b      	ldr	r3, [r7, #20]
34000e16:	3301      	adds	r3, #1
34000e18:	617b      	str	r3, [r7, #20]
34000e1a:	697a      	ldr	r2, [r7, #20]
34000e1c:	687b      	ldr	r3, [r7, #4]
34000e1e:	429a      	cmp	r2, r3
34000e20:	d3d5      	bcc.n	34000dce <getIdentityWeights_int8+0x3e>
//	    }
//	    printf("\n\r");
//	}
//

    return identity;
34000e22:	68fb      	ldr	r3, [r7, #12]
}
34000e24:	4618      	mov	r0, r3
34000e26:	3718      	adds	r7, #24
34000e28:	46bd      	mov	sp, r7
34000e2a:	bd80      	pop	{r7, pc}

34000e2c <LL_ATON_Cache_MCU_Invalidate_Range>:
 */
#if defined(LL_ATON_RT_RELOC) && defined(BUILD_AI_NETWORK_RELOC)
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
34000e2c:	b580      	push	{r7, lr}
34000e2e:	b082      	sub	sp, #8
34000e30:	af00      	add	r7, sp, #0
34000e32:	6078      	str	r0, [r7, #4]
34000e34:	6039      	str	r1, [r7, #0]
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
34000e36:	687a      	ldr	r2, [r7, #4]
34000e38:	683b      	ldr	r3, [r7, #0]
34000e3a:	4413      	add	r3, r2
34000e3c:	4619      	mov	r1, r3
34000e3e:	6878      	ldr	r0, [r7, #4]
34000e40:	f000 ff34 	bl	34001cac <mcu_cache_invalidate_range>
    LL_ATON_OSAL_UNLOCK_MCU_CACHE();
  }
34000e44:	bf00      	nop
34000e46:	3708      	adds	r7, #8
34000e48:	46bd      	mov	sp, r7
34000e4a:	bd80      	pop	{r7, pc}

34000e4c <LL_ATON_Set_User_Input_Buffer_int8>:
/* index=3 file postfix=AXISRAM3 name=npuRAM3 offset=0x34200000  absolute_mode size=458752 READ_WRITE THROUGHPUT=HIGH LATENCY=LOW byte width=8 freq ratio=1.25 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=18.531 write_power=16.201 use4initializers=NO score=94  */
/* global pool 0 is ? */
/* index=0 file postfix=AXISRAM6 name=npuRAM6 offset=0x34350000  absolute_mode size=458744 READ_WRITE THROUGHPUT=HIGH LATENCY=LOW byte width=8 freq ratio=1.25 burst max length=MAXINT burst penalty=0 pipelined=ON cacheable=OFF read_power=19.006 write_power=15.79 use4initializers=NO score=94  */

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Input_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
{
34000e4c:	b480      	push	{r7}
34000e4e:	b085      	sub	sp, #20
34000e50:	af00      	add	r7, sp, #0
34000e52:	60f8      	str	r0, [r7, #12]
34000e54:	60b9      	str	r1, [r7, #8]
34000e56:	607a      	str	r2, [r7, #4]
  {
    return LL_ATON_User_IO_WRONG_INDEX;
34000e58:	2303      	movs	r3, #3
  }
}
34000e5a:	4618      	mov	r0, r3
34000e5c:	3714      	adds	r7, #20
34000e5e:	46bd      	mov	sp, r7
34000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e64:	4770      	bx	lr

34000e66 <LL_ATON_Get_User_Input_Buffer_int8>:

void *LL_ATON_Get_User_Input_Buffer_int8(uint32_t num)
{
34000e66:	b480      	push	{r7}
34000e68:	b083      	sub	sp, #12
34000e6a:	af00      	add	r7, sp, #0
34000e6c:	6078      	str	r0, [r7, #4]
  {
    return NULL;
34000e6e:	2300      	movs	r3, #0
  }
}
34000e70:	4618      	mov	r0, r3
34000e72:	370c      	adds	r7, #12
34000e74:	46bd      	mov	sp, r7
34000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e7a:	4770      	bx	lr

34000e7c <LL_ATON_Set_User_Output_Buffer_int8>:

LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_int8(uint32_t num, void* buffer, uint32_t size)
{
34000e7c:	b480      	push	{r7}
34000e7e:	b085      	sub	sp, #20
34000e80:	af00      	add	r7, sp, #0
34000e82:	60f8      	str	r0, [r7, #12]
34000e84:	60b9      	str	r1, [r7, #8]
34000e86:	607a      	str	r2, [r7, #4]
  {
    return LL_ATON_User_IO_WRONG_INDEX;
34000e88:	2303      	movs	r3, #3
  }
}
34000e8a:	4618      	mov	r0, r3
34000e8c:	3714      	adds	r7, #20
34000e8e:	46bd      	mov	sp, r7
34000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e94:	4770      	bx	lr

34000e96 <LL_ATON_Get_User_Output_Buffer_int8>:

void *LL_ATON_Get_User_Output_Buffer_int8(uint32_t num)
{
34000e96:	b480      	push	{r7}
34000e98:	b083      	sub	sp, #12
34000e9a:	af00      	add	r7, sp, #0
34000e9c:	6078      	str	r0, [r7, #4]
  {
    return NULL;
34000e9e:	2300      	movs	r3, #0
  }
}
34000ea0:	4618      	mov	r0, r3
34000ea2:	370c      	adds	r7, #12
34000ea4:	46bd      	mov	sp, r7
34000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eaa:	4770      	bx	lr

34000eac <LL_ATON_EC_Network_Init_int8>:

bool LL_ATON_EC_Network_Init_int8(void)
{
34000eac:	b480      	push	{r7}
34000eae:	af00      	add	r7, sp, #0
  return true;
34000eb0:	2301      	movs	r3, #1
}
34000eb2:	4618      	mov	r0, r3
34000eb4:	46bd      	mov	sp, r7
34000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eba:	4770      	bx	lr

34000ebc <LL_ATON_EC_Inference_Init_int8>:

bool LL_ATON_EC_Inference_Init_int8(void)
{
34000ebc:	b480      	push	{r7}
34000ebe:	af00      	add	r7, sp, #0
  return true;
34000ec0:	2301      	movs	r3, #1
}
34000ec2:	4618      	mov	r0, r3
34000ec4:	46bd      	mov	sp, r7
34000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eca:	4770      	bx	lr

34000ecc <LL_ATON_Start_EpochBlock_int8>:
/* scheduling epoch=0    nodes=5   ------------------------------------------------------------------- */

/* scheduling epoch=1    nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_Start_EpochBlock_int8(const void *epoch_block)
{
34000ecc:	b580      	push	{r7, lr}
34000ece:	b0c2      	sub	sp, #264	@ 0x108
34000ed0:	af00      	add	r7, sp, #0
34000ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
34000ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
34000eda:	6018      	str	r0, [r3, #0]

  LL_ATON_LIB_UNUSED(epoch_block);
  extern volatile Matmul_info matmulInfo_int;

  /* CONV_ACC_V2 configuration */
  LL_Convacc_InitTypeDef conv_init = {
34000edc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
34000ee0:	223c      	movs	r2, #60	@ 0x3c
34000ee2:	2100      	movs	r1, #0
34000ee4:	4618      	mov	r0, r3
34000ee6:	f01b f9c1 	bl	3401c26c <memset>
34000eea:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000eee:	2201      	movs	r2, #1
34000ef0:	f362 1305 	bfi	r3, r2, #4, #2
34000ef4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000ef8:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34000f00:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000f04:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
34000f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34000f0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
34000f10:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f14:	f043 0301 	orr.w	r3, r3, #1
34000f18:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f1c:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f20:	2201      	movs	r2, #1
34000f22:	f362 0383 	bfi	r3, r2, #2, #2
34000f26:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f2a:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
34000f2e:	2201      	movs	r2, #1
34000f30:	f362 1305 	bfi	r3, r2, #4, #2
34000f34:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
34000f38:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
34000f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34000f40:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
34000f44:	2301      	movs	r3, #1
34000f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34000f4a:	2301      	movs	r3, #1
34000f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34000f50:	2301      	movs	r3, #1
34000f52:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
34000f56:	2301      	movs	r3, #1
34000f58:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
    .raw_o = 0,
    .fWidth = 1,
    .fHeight = 1,
    .kernelWidth = 1,
    .kernelHeight = 1,
    .nKernels = matmulInfo_int.insize,
34000f5c:	4b5f      	ldr	r3, [pc, #380]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000f5e:	685b      	ldr	r3, [r3, #4]
  LL_Convacc_InitTypeDef conv_init = {
34000f60:	b2db      	uxtb	r3, r3
34000f62:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
    .batchDepth = matmulInfo_int.outsize,
34000f66:	4b5d      	ldr	r3, [pc, #372]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000f68:	689b      	ldr	r3, [r3, #8]
  LL_Convacc_InitTypeDef conv_init = {
34000f6a:	b29b      	uxth	r3, r3
34000f6c:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
34000f70:	2301      	movs	r3, #1
34000f72:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
34000f76:	2301      	movs	r3, #1
34000f78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    .left_crop = 0,
    .right_crop = 0,
    .top_crop = 0,
    .bot_crop = 0,
  };
  LL_Convacc_Init(0, &conv_init);
34000f7c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
34000f80:	4619      	mov	r1, r3
34000f82:	2000      	movs	r0, #0
34000f84:	f018 fc9e 	bl	340198c4 <LL_Convacc_Init>

  /* Input vector (1×16 int8) */
  LL_Streng_TensorInitTypeDef input_tensor = {
34000f88:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
34000f8c:	2240      	movs	r2, #64	@ 0x40
34000f8e:	2100      	movs	r1, #0
34000f90:	4618      	mov	r0, r3
34000f92:	f01b f96b 	bl	3401c26c <memset>
34000f96:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
34000f9a:	f043 0302 	orr.w	r3, r3, #2
34000f9e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
34000fa2:	4b4f      	ldr	r3, [pc, #316]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
34000fa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    .raw = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.input_start,
34000fa8:	4b4c      	ldr	r3, [pc, #304]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000faa:	699b      	ldr	r3, [r3, #24]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    .offset_end = matmulInfo_int.input_end,
34000fb0:	4b4a      	ldr	r3, [pc, #296]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000fb2:	69db      	ldr	r3, [r3, #28]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    .offset_limit = matmulInfo_int.input_limit,
34000fb8:	4b48      	ldr	r3, [pc, #288]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34000fba:	6a1b      	ldr	r3, [r3, #32]
  LL_Streng_TensorInitTypeDef input_tensor = {
34000fbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34000fc0:	2310      	movs	r3, #16
34000fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34000fc6:	2301      	movs	r3, #1
34000fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34000fcc:	2308      	movs	r3, #8
34000fce:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
34000fd2:	2308      	movs	r3, #8
34000fd4:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(1, &input_tensor, 1);
34000fd8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
34000fdc:	2201      	movs	r2, #1
34000fde:	4619      	mov	r1, r3
34000fe0:	2001      	movs	r0, #1
34000fe2:	f017 fe01 	bl	34018be8 <LL_Streng_TensorInit>

  /* Weight matrix (16×16 int8) */
  LL_Streng_TensorInitTypeDef weight_tensor = {
34000fe6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
34000fea:	2240      	movs	r2, #64	@ 0x40
34000fec:	2100      	movs	r1, #0
34000fee:	4618      	mov	r0, r3
34000ff0:	f01b f93c 	bl	3401c26c <memset>
34000ff4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
34000ff8:	f043 0302 	orr.w	r3, r3, #2
34000ffc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
34001000:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
34001004:	f043 0308 	orr.w	r3, r3, #8
34001008:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
3400100c:	4b34      	ldr	r3, [pc, #208]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
3400100e:	653b      	str	r3, [r7, #80]	@ 0x50
    .continuous = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.weight_start,
34001010:	4b32      	ldr	r3, [pc, #200]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001012:	68db      	ldr	r3, [r3, #12]
  LL_Streng_TensorInitTypeDef weight_tensor = {
34001014:	657b      	str	r3, [r7, #84]	@ 0x54
    .offset_end = matmulInfo_int.weight_end,
34001016:	4b31      	ldr	r3, [pc, #196]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001018:	691b      	ldr	r3, [r3, #16]
  LL_Streng_TensorInitTypeDef weight_tensor = {
3400101a:	65bb      	str	r3, [r7, #88]	@ 0x58
    .offset_limit = matmulInfo_int.weight_limit,
3400101c:	4b2f      	ldr	r3, [pc, #188]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400101e:	695b      	ldr	r3, [r3, #20]
  LL_Streng_TensorInitTypeDef weight_tensor = {
34001020:	65fb      	str	r3, [r7, #92]	@ 0x5c
34001022:	2301      	movs	r3, #1
34001024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34001028:	2308      	movs	r3, #8
3400102a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
3400102e:	2308      	movs	r3, #8
34001030:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(9, &weight_tensor, 1);
34001034:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
34001038:	2201      	movs	r2, #1
3400103a:	4619      	mov	r1, r3
3400103c:	2009      	movs	r0, #9
3400103e:	f017 fdd3 	bl	34018be8 <LL_Streng_TensorInit>

  /* Output vector (16×1 int8) */
  LL_Streng_TensorInitTypeDef output_tensor = {
34001042:	f107 030c 	add.w	r3, r7, #12
34001046:	2240      	movs	r2, #64	@ 0x40
34001048:	2100      	movs	r1, #0
3400104a:	4618      	mov	r0, r3
3400104c:	f01b f90e 	bl	3401c26c <memset>
34001050:	7b3b      	ldrb	r3, [r7, #12]
34001052:	f043 0301 	orr.w	r3, r3, #1
34001056:	733b      	strb	r3, [r7, #12]
34001058:	7b3b      	ldrb	r3, [r7, #12]
3400105a:	f043 0302 	orr.w	r3, r3, #2
3400105e:	733b      	strb	r3, [r7, #12]
34001060:	4b1f      	ldr	r3, [pc, #124]	@ (340010e0 <LL_ATON_Start_EpochBlock_int8+0x214>)
34001062:	613b      	str	r3, [r7, #16]
    .raw = 1,
    .noblk = 0,
    .align_right = 0,
    .nbits_unsigned = 0,
    .addr_base = { (unsigned char *)(0x34200000UL) },
    .offset_start = matmulInfo_int.output_start,
34001064:	4b1d      	ldr	r3, [pc, #116]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Streng_TensorInitTypeDef output_tensor = {
34001068:	617b      	str	r3, [r7, #20]
    .offset_end = matmulInfo_int.output_end,
3400106a:	4b1c      	ldr	r3, [pc, #112]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Streng_TensorInitTypeDef output_tensor = {
3400106e:	61bb      	str	r3, [r7, #24]
    .offset_limit = matmulInfo_int.output_limit,
34001070:	4b1a      	ldr	r3, [pc, #104]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
34001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Streng_TensorInitTypeDef output_tensor = {
34001074:	61fb      	str	r3, [r7, #28]
34001076:	2310      	movs	r3, #16
34001078:	637b      	str	r3, [r7, #52]	@ 0x34
3400107a:	2301      	movs	r3, #1
3400107c:	647b      	str	r3, [r7, #68]	@ 0x44
3400107e:	2308      	movs	r3, #8
34001080:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
34001084:	2308      	movs	r3, #8
34001086:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    .frame_loop_cnt = 0,
    .frame_tot_cnt = 1,
    .nbits_in = 8,
    .nbits_out = 8,
  };
  LL_Streng_TensorInit(3, &output_tensor, 1);
3400108a:	f107 030c 	add.w	r3, r7, #12
3400108e:	2201      	movs	r2, #1
34001090:	4619      	mov	r1, r3
34001092:	2003      	movs	r0, #3
34001094:	f017 fda8 	bl	34018be8 <LL_Streng_TensorInit>
  printf("Output Start: %d",matmulInfo_int.output_start);
34001098:	4b10      	ldr	r3, [pc, #64]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
3400109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400109c:	4619      	mov	r1, r3
3400109e:	4811      	ldr	r0, [pc, #68]	@ (340010e4 <LL_ATON_Start_EpochBlock_int8+0x218>)
340010a0:	f01a ff9c 	bl	3401bfdc <iprintf>
    // CONV output → DMA
    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Init(switch_init, 3);
340010a4:	2103      	movs	r1, #3
340010a6:	4810      	ldr	r0, [pc, #64]	@ (340010e8 <LL_ATON_Start_EpochBlock_int8+0x21c>)
340010a8:	f018 fbb6 	bl	34019818 <LL_Switch_Init>

  LL_ATON_Cache_MCU_Invalidate_Range((uintptr_t)(0x34200000UL + matmulInfo_int.input_start), matmulInfo_int.output_end - matmulInfo_int.input_start); /// Very Important!!
340010ac:	4b0b      	ldr	r3, [pc, #44]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010ae:	699b      	ldr	r3, [r3, #24]
340010b0:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
340010b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
340010b8:	4a08      	ldr	r2, [pc, #32]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
340010bc:	4a07      	ldr	r2, [pc, #28]	@ (340010dc <LL_ATON_Start_EpochBlock_int8+0x210>)
340010be:	6992      	ldr	r2, [r2, #24]
340010c0:	1a8a      	subs	r2, r1, r2
340010c2:	4611      	mov	r1, r2
340010c4:	4618      	mov	r0, r3
340010c6:	f7ff feb1 	bl	34000e2c <LL_ATON_Cache_MCU_Invalidate_Range>
    { {STRENG, 3} },
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_EnableUnits_Init(enable_units, 4);
340010ca:	2104      	movs	r1, #4
340010cc:	4807      	ldr	r0, [pc, #28]	@ (340010ec <LL_ATON_Start_EpochBlock_int8+0x220>)
340010ce:	f017 fb01 	bl	340186d4 <LL_ATON_EnableUnits_Init>
}
340010d2:	bf00      	nop
340010d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
340010d8:	46bd      	mov	sp, r7
340010da:	bd80      	pop	{r7, pc}
340010dc:	340207e4 	.word	0x340207e4
340010e0:	34200000 	.word	0x34200000
340010e4:	3401e0f4 	.word	0x3401e0f4
340010e8:	3401f824 	.word	0x3401f824
340010ec:	3401f854 	.word	0x3401f854

340010f0 <LL_ATON_End_EpochBlock_int8>:

static void LL_ATON_End_EpochBlock_int8(const void *epoch_block)
{
340010f0:	b580      	push	{r7, lr}
340010f2:	b082      	sub	sp, #8
340010f4:	af00      	add	r7, sp, #0
340010f6:	6078      	str	r0, [r7, #4]

    { LL_Switch_Init_Dest() = ATONN_DSTPORT(STRSWITCH, 0, STRENG, 3, 0),
      LL_Switch_Init_Source(0) = ATONN_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0),
      LL_Switch_Init_Context(0) = 1, LL_Switch_Init_Frames(0) = 0 },
  };
  LL_Switch_Deinit(switch_deinit, 3);
340010f8:	2103      	movs	r1, #3
340010fa:	4805      	ldr	r0, [pc, #20]	@ (34001110 <LL_ATON_End_EpochBlock_int8+0x20>)
340010fc:	f018 fbbe 	bl	3401987c <LL_Switch_Deinit>
    { {STRENG, 3} },
    { {CONVACC, 0} },
    { {STRENG, 1} },
    { {STRENG, 9} },
  };
  LL_ATON_DisableUnits_Init(disable_units, 4);
34001100:	2104      	movs	r1, #4
34001102:	4804      	ldr	r0, [pc, #16]	@ (34001114 <LL_ATON_End_EpochBlock_int8+0x24>)
34001104:	f017 fba8 	bl	34018858 <LL_ATON_DisableUnits_Init>
}
34001108:	bf00      	nop
3400110a:	3708      	adds	r7, #8
3400110c:	46bd      	mov	sp, r7
3400110e:	bd80      	pop	{r7, pc}
34001110:	3401f864 	.word	0x3401f864
34001114:	3401f894 	.word	0x3401f894

34001118 <LL_ATON_EpochBlockItems_int8>:

const EpochBlock_ItemTypeDef *LL_ATON_EpochBlockItems_int8(void) {
34001118:	b480      	push	{r7}
3400111a:	af00      	add	r7, sp, #0
      .flags = EpochBlock_Flags_last_eb,
    },
  };


  return ll_atonn_rt_epoch_block_array;
3400111c:	4b02      	ldr	r3, [pc, #8]	@ (34001128 <LL_ATON_EpochBlockItems_int8+0x10>)
}
3400111e:	4618      	mov	r0, r3
34001120:	46bd      	mov	sp, r7
34001122:	f85d 7b04 	ldr.w	r7, [sp], #4
34001126:	4770      	bx	lr
34001128:	3401f8a4 	.word	0x3401f8a4

3400112c <LL_ATON_Input_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Input_Buffers_Info_int8(void)
{
3400112c:	b580      	push	{r7, lr}
3400112e:	b09c      	sub	sp, #112	@ 0x70
34001130:	af00      	add	r7, sp, #0
  static const float buff_info_Gemm_2_conv_4_zero_off_8_quant_scale[] = { 0.00392139703035355 };
  static const int16_t buff_info_Gemm_2_conv_4_zero_off_8_quant_offset[] = { 0 };
  static const uint32_t buff_info__shape_16_1_1[] = { 1, 1, 1, 16 };
  static const uint32_t buff_info__mem_shape_F_16_1_1[] = { 16, 1, 1 };
#endif // LL_ATON_DBG_BUFFER_INFO_EXCLUDED == 0
  LL_Buffer_InfoTypeDef buff_info[] = {
34001132:	463b      	mov	r3, r7
34001134:	2270      	movs	r2, #112	@ 0x70
34001136:	2100      	movs	r1, #0
34001138:	4618      	mov	r0, r3
3400113a:	f01b f897 	bl	3401c26c <memset>
3400113e:	4b15      	ldr	r3, [pc, #84]	@ (34001194 <LL_ATON_Input_Buffers_Info_int8+0x68>)
34001140:	603b      	str	r3, [r7, #0]
34001142:	4b15      	ldr	r3, [pc, #84]	@ (34001198 <LL_ATON_Input_Buffers_Info_int8+0x6c>)
34001144:	607b      	str	r3, [r7, #4]
    {
      .name = "Input_0_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34001146:	4b15      	ldr	r3, [pc, #84]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
34001148:	699b      	ldr	r3, [r3, #24]
  LL_Buffer_InfoTypeDef buff_info[] = {
3400114a:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.input_end,
3400114c:	4b13      	ldr	r3, [pc, #76]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
3400114e:	69db      	ldr	r3, [r3, #28]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001150:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.input_limit,
34001152:	4b12      	ldr	r3, [pc, #72]	@ (3400119c <LL_ATON_Input_Buffers_Info_int8+0x70>)
34001154:	6a1b      	ldr	r3, [r3, #32]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001156:	613b      	str	r3, [r7, #16]
34001158:	2301      	movs	r3, #1
3400115a:	61bb      	str	r3, [r7, #24]
3400115c:	4b10      	ldr	r3, [pc, #64]	@ (340011a0 <LL_ATON_Input_Buffers_Info_int8+0x74>)
3400115e:	61fb      	str	r3, [r7, #28]
34001160:	2302      	movs	r3, #2
34001162:	843b      	strh	r3, [r7, #32]
34001164:	2303      	movs	r3, #3
34001166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
3400116a:	2307      	movs	r3, #7
3400116c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
34001170:	2304      	movs	r3, #4
34001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
34001176:	2308      	movs	r3, #8
34001178:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
3400117c:	4b09      	ldr	r3, [pc, #36]	@ (340011a4 <LL_ATON_Input_Buffers_Info_int8+0x78>)
3400117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001180:	4b09      	ldr	r3, [pc, #36]	@ (340011a8 <LL_ATON_Input_Buffers_Info_int8+0x7c>)
34001182:	633b      	str	r3, [r7, #48]	@ 0x30
34001184:	4b09      	ldr	r3, [pc, #36]	@ (340011ac <LL_ATON_Input_Buffers_Info_int8+0x80>)
34001186:	637b      	str	r3, [r7, #52]	@ 0x34
    {
      .name = NULL,
    }
  };

  return buff_info;
34001188:	2300      	movs	r3, #0
}
3400118a:	4618      	mov	r0, r3
3400118c:	3770      	adds	r7, #112	@ 0x70
3400118e:	46bd      	mov	sp, r7
34001190:	bd80      	pop	{r7, pc}
34001192:	bf00      	nop
34001194:	3401e108 	.word	0x3401e108
34001198:	34200000 	.word	0x34200000
3400119c:	340207e4 	.word	0x340207e4
340011a0:	3401f8cc 	.word	0x3401f8cc
340011a4:	3401f8d4 	.word	0x3401f8d4
340011a8:	3401f8e4 	.word	0x3401f8e4
340011ac:	3401f8e8 	.word	0x3401f8e8

340011b0 <LL_ATON_Output_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Output_Buffers_Info_int8(void)
{
340011b0:	b580      	push	{r7, lr}
340011b2:	b09c      	sub	sp, #112	@ 0x70
340011b4:	af00      	add	r7, sp, #0
	extern volatile Matmul_info matmulInfo_int;
  static const uint32_t buff_info__shape_1_16[] = { 1, 1, 16, 1 };
  static const uint32_t buff_info__mem_shape_U_1_16[] = { 1, 16 };
  static const float buff_info_Quantize_3_out_0_quant_scale[] = { 0.0269236713647842 };
  static const int16_t buff_info_Quantize_3_out_0_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
340011b6:	463b      	mov	r3, r7
340011b8:	2270      	movs	r2, #112	@ 0x70
340011ba:	2100      	movs	r1, #0
340011bc:	4618      	mov	r0, r3
340011be:	f01b f855 	bl	3401c26c <memset>
340011c2:	4b16      	ldr	r3, [pc, #88]	@ (3400121c <LL_ATON_Output_Buffers_Info_int8+0x6c>)
340011c4:	603b      	str	r3, [r7, #0]
340011c6:	4b16      	ldr	r3, [pc, #88]	@ (34001220 <LL_ATON_Output_Buffers_Info_int8+0x70>)
340011c8:	607b      	str	r3, [r7, #4]
    {
      .name = "Quantize_3_out_0",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
340011ca:	4b16      	ldr	r3, [pc, #88]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Buffer_InfoTypeDef buff_info[] = {
340011ce:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.output_end,
340011d0:	4b14      	ldr	r3, [pc, #80]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Buffer_InfoTypeDef buff_info[] = {
340011d4:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.output_limit,
340011d6:	4b13      	ldr	r3, [pc, #76]	@ (34001224 <LL_ATON_Output_Buffers_Info_int8+0x74>)
340011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Buffer_InfoTypeDef buff_info[] = {
340011da:	613b      	str	r3, [r7, #16]
340011dc:	2302      	movs	r3, #2
340011de:	82fb      	strh	r3, [r7, #22]
340011e0:	2301      	movs	r3, #1
340011e2:	61bb      	str	r3, [r7, #24]
340011e4:	4b10      	ldr	r3, [pc, #64]	@ (34001228 <LL_ATON_Output_Buffers_Info_int8+0x78>)
340011e6:	61fb      	str	r3, [r7, #28]
340011e8:	2302      	movs	r3, #2
340011ea:	843b      	strh	r3, [r7, #32]
340011ec:	2303      	movs	r3, #3
340011ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
340011f2:	2307      	movs	r3, #7
340011f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
340011f8:	2304      	movs	r3, #4
340011fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
340011fe:	2308      	movs	r3, #8
34001200:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
34001204:	4b09      	ldr	r3, [pc, #36]	@ (3400122c <LL_ATON_Output_Buffers_Info_int8+0x7c>)
34001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001208:	4b09      	ldr	r3, [pc, #36]	@ (34001230 <LL_ATON_Output_Buffers_Info_int8+0x80>)
3400120a:	633b      	str	r3, [r7, #48]	@ 0x30
3400120c:	4b09      	ldr	r3, [pc, #36]	@ (34001234 <LL_ATON_Output_Buffers_Info_int8+0x84>)
3400120e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
      .name = NULL,
    }
  };

  return buff_info;
34001210:	2300      	movs	r3, #0
}
34001212:	4618      	mov	r0, r3
34001214:	3770      	adds	r7, #112	@ 0x70
34001216:	46bd      	mov	sp, r7
34001218:	bd80      	pop	{r7, pc}
3400121a:	bf00      	nop
3400121c:	3401e118 	.word	0x3401e118
34001220:	34200000 	.word	0x34200000
34001224:	340207e4 	.word	0x340207e4
34001228:	3401f8ec 	.word	0x3401f8ec
3400122c:	3401f8f4 	.word	0x3401f8f4
34001230:	3401f904 	.word	0x3401f904
34001234:	3401f908 	.word	0x3401f908

34001238 <LL_ATON_Internal_Buffers_Info_int8>:

LL_Buffer_InfoTypeDef *LL_ATON_Internal_Buffers_Info_int8(void)
{
34001238:	b580      	push	{r7, lr}
3400123a:	b0aa      	sub	sp, #168	@ 0xa8
3400123c:	af00      	add	r7, sp, #0
  static const uint32_t buff_info__mem_shape_F_1_16_1_1[] = { 1, 16, 1, 1 };
  static const float buff_info_Gemm_2_reshape_x_2_quant_scale[] = { 0.00392139703035355 };
  static const int16_t buff_info_Gemm_2_reshape_x_2_quant_offset[] = { -128 };
  static const float buff_info_Gemm_2_conv_4_off_bias_out_13_quant_scale[] = { 0.0269236713647842 };
  static const int16_t buff_info_Gemm_2_conv_4_off_bias_out_13_quant_offset[] = { -128 };
  LL_Buffer_InfoTypeDef buff_info[] = {
3400123e:	463b      	mov	r3, r7
34001240:	22a8      	movs	r2, #168	@ 0xa8
34001242:	2100      	movs	r1, #0
34001244:	4618      	mov	r0, r3
34001246:	f01b f811 	bl	3401c26c <memset>
3400124a:	4b2d      	ldr	r3, [pc, #180]	@ (34001300 <LL_ATON_Internal_Buffers_Info_int8+0xc8>)
3400124c:	603b      	str	r3, [r7, #0]
3400124e:	4b2d      	ldr	r3, [pc, #180]	@ (34001304 <LL_ATON_Internal_Buffers_Info_int8+0xcc>)
34001250:	607b      	str	r3, [r7, #4]
    {
      .name = "Gemm_2_reshape_x_2",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.input_start,
34001252:	4b2d      	ldr	r3, [pc, #180]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
34001254:	699b      	ldr	r3, [r3, #24]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001256:	60bb      	str	r3, [r7, #8]
      .offset_end = matmulInfo_int.input_end,
34001258:	4b2b      	ldr	r3, [pc, #172]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
3400125a:	69db      	ldr	r3, [r3, #28]
  LL_Buffer_InfoTypeDef buff_info[] = {
3400125c:	60fb      	str	r3, [r7, #12]
      .offset_limit = matmulInfo_int.input_limit,
3400125e:	4b2a      	ldr	r3, [pc, #168]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
34001260:	6a1b      	ldr	r3, [r3, #32]
  LL_Buffer_InfoTypeDef buff_info[] = {
34001262:	613b      	str	r3, [r7, #16]
34001264:	2301      	movs	r3, #1
34001266:	82fb      	strh	r3, [r7, #22]
34001268:	2310      	movs	r3, #16
3400126a:	61bb      	str	r3, [r7, #24]
3400126c:	4b27      	ldr	r3, [pc, #156]	@ (3400130c <LL_ATON_Internal_Buffers_Info_int8+0xd4>)
3400126e:	61fb      	str	r3, [r7, #28]
34001270:	2304      	movs	r3, #4
34001272:	843b      	strh	r3, [r7, #32]
34001274:	2301      	movs	r3, #1
34001276:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
3400127a:	2303      	movs	r3, #3
3400127c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
34001280:	2307      	movs	r3, #7
34001282:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
34001286:	2304      	movs	r3, #4
34001288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
3400128c:	2308      	movs	r3, #8
3400128e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
34001292:	4b1f      	ldr	r3, [pc, #124]	@ (34001310 <LL_ATON_Internal_Buffers_Info_int8+0xd8>)
34001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001296:	4b1f      	ldr	r3, [pc, #124]	@ (34001314 <LL_ATON_Internal_Buffers_Info_int8+0xdc>)
34001298:	633b      	str	r3, [r7, #48]	@ 0x30
3400129a:	4b1f      	ldr	r3, [pc, #124]	@ (34001318 <LL_ATON_Internal_Buffers_Info_int8+0xe0>)
3400129c:	637b      	str	r3, [r7, #52]	@ 0x34
3400129e:	4b1f      	ldr	r3, [pc, #124]	@ (3400131c <LL_ATON_Internal_Buffers_Info_int8+0xe4>)
340012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
340012a2:	4b18      	ldr	r3, [pc, #96]	@ (34001304 <LL_ATON_Internal_Buffers_Info_int8+0xcc>)
340012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      .offset = buff_info_Gemm_2_reshape_x_2_quant_offset,
    },
    {
      .name = "Gemm_2_conv_4_off_bias_out_13",
      .addr_base = {(unsigned char *)(0x34200000UL) /* Equivalent hex address = 0x34200000UL */},
      .offset_start = matmulInfo_int.output_start,
340012a6:	4b18      	ldr	r3, [pc, #96]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  LL_Buffer_InfoTypeDef buff_info[] = {
340012aa:	643b      	str	r3, [r7, #64]	@ 0x40
      .offset_end = matmulInfo_int.output_end,
340012ac:	4b16      	ldr	r3, [pc, #88]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_Buffer_InfoTypeDef buff_info[] = {
340012b0:	647b      	str	r3, [r7, #68]	@ 0x44
      .offset_limit = matmulInfo_int.output_limit,
340012b2:	4b15      	ldr	r3, [pc, #84]	@ (34001308 <LL_ATON_Internal_Buffers_Info_int8+0xd0>)
340012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  LL_Buffer_InfoTypeDef buff_info[] = {
340012b6:	64bb      	str	r3, [r7, #72]	@ 0x48
340012b8:	2302      	movs	r3, #2
340012ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
340012be:	2310      	movs	r3, #16
340012c0:	653b      	str	r3, [r7, #80]	@ 0x50
340012c2:	4b12      	ldr	r3, [pc, #72]	@ (3400130c <LL_ATON_Internal_Buffers_Info_int8+0xd4>)
340012c4:	657b      	str	r3, [r7, #84]	@ 0x54
340012c6:	2304      	movs	r3, #4
340012c8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
340012cc:	2301      	movs	r3, #1
340012ce:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
340012d2:	2303      	movs	r3, #3
340012d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
340012d8:	2307      	movs	r3, #7
340012da:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
340012de:	2304      	movs	r3, #4
340012e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
340012e4:	2308      	movs	r3, #8
340012e6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
340012ea:	4b09      	ldr	r3, [pc, #36]	@ (34001310 <LL_ATON_Internal_Buffers_Info_int8+0xd8>)
340012ec:	667b      	str	r3, [r7, #100]	@ 0x64
340012ee:	4b0c      	ldr	r3, [pc, #48]	@ (34001320 <LL_ATON_Internal_Buffers_Info_int8+0xe8>)
340012f0:	66bb      	str	r3, [r7, #104]	@ 0x68
340012f2:	4b0c      	ldr	r3, [pc, #48]	@ (34001324 <LL_ATON_Internal_Buffers_Info_int8+0xec>)
340012f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    {
      .name = NULL,
    }
  };

  return buff_info;
340012f6:	2300      	movs	r3, #0
}
340012f8:	4618      	mov	r0, r3
340012fa:	37a8      	adds	r7, #168	@ 0xa8
340012fc:	46bd      	mov	sp, r7
340012fe:	bd80      	pop	{r7, pc}
34001300:	3401e12c 	.word	0x3401e12c
34001304:	34200000 	.word	0x34200000
34001308:	340207e4 	.word	0x340207e4
3400130c:	3401f90c 	.word	0x3401f90c
34001310:	3401f91c 	.word	0x3401f91c
34001314:	3401f92c 	.word	0x3401f92c
34001318:	3401f930 	.word	0x3401f930
3400131c:	3401e140 	.word	0x3401e140
34001320:	3401f934 	.word	0x3401f934
34001324:	3401f938 	.word	0x3401f938

34001328 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34001328:	b580      	push	{r7, lr}
3400132a:	b086      	sub	sp, #24
3400132c:	af00      	add	r7, sp, #0
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
3400132e:	4b21      	ldr	r3, [pc, #132]	@ (340013b4 <Fuse_Programming+0x8c>)
34001330:	607b      	str	r3, [r7, #4]

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
34001332:	237c      	movs	r3, #124	@ 0x7c
34001334:	617b      	str	r3, [r7, #20]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34001336:	f107 020c 	add.w	r2, r7, #12
3400133a:	1d3b      	adds	r3, r7, #4
3400133c:	6979      	ldr	r1, [r7, #20]
3400133e:	4618      	mov	r0, r3
34001340:	f002 fcfe 	bl	34003d40 <HAL_BSEC_OTP_Read>
34001344:	4603      	mov	r3, r0
34001346:	2b00      	cmp	r3, #0
34001348:	d12e      	bne.n	340013a8 <Fuse_Programming+0x80>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
3400134a:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
3400134e:	613b      	str	r3, [r7, #16]
    if ((data & bit_mask) != bit_mask)
34001350:	68fa      	ldr	r2, [r7, #12]
34001352:	693b      	ldr	r3, [r7, #16]
34001354:	4013      	ands	r3, r2
34001356:	693a      	ldr	r2, [r7, #16]
34001358:	429a      	cmp	r2, r3
3400135a:	d027      	beq.n	340013ac <Fuse_Programming+0x84>
    {
      data |= bit_mask;
3400135c:	68fa      	ldr	r2, [r7, #12]
3400135e:	693b      	ldr	r3, [r7, #16]
34001360:	4313      	orrs	r3, r2
34001362:	60fb      	str	r3, [r7, #12]
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34001364:	68fa      	ldr	r2, [r7, #12]
34001366:	1d38      	adds	r0, r7, #4
34001368:	2300      	movs	r3, #0
3400136a:	6979      	ldr	r1, [r7, #20]
3400136c:	f002 fd20 	bl	34003db0 <HAL_BSEC_OTP_Program>
34001370:	4603      	mov	r3, r0
34001372:	2b00      	cmp	r3, #0
34001374:	d115      	bne.n	340013a2 <Fuse_Programming+0x7a>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34001376:	f107 020c 	add.w	r2, r7, #12
3400137a:	1d3b      	adds	r3, r7, #4
3400137c:	6979      	ldr	r1, [r7, #20]
3400137e:	4618      	mov	r0, r3
34001380:	f002 fcde 	bl	34003d40 <HAL_BSEC_OTP_Read>
34001384:	4603      	mov	r3, r0
34001386:	2b00      	cmp	r3, #0
34001388:	d108      	bne.n	3400139c <Fuse_Programming+0x74>
        {
          if ((data & bit_mask) != bit_mask)
3400138a:	68fa      	ldr	r2, [r7, #12]
3400138c:	693b      	ldr	r3, [r7, #16]
3400138e:	4013      	ands	r3, r2
34001390:	693a      	ldr	r2, [r7, #16]
34001392:	429a      	cmp	r2, r3
34001394:	d00a      	beq.n	340013ac <Fuse_Programming+0x84>
          {
            /* Error : Fuse programming not taken in account */
            ErrorHandler();
34001396:	f000 f80f 	bl	340013b8 <ErrorHandler>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
3400139a:	e007      	b.n	340013ac <Fuse_Programming+0x84>
          ErrorHandler();
3400139c:	f000 f80c 	bl	340013b8 <ErrorHandler>
}
340013a0:	e004      	b.n	340013ac <Fuse_Programming+0x84>
        ErrorHandler();
340013a2:	f000 f809 	bl	340013b8 <ErrorHandler>
}
340013a6:	e001      	b.n	340013ac <Fuse_Programming+0x84>
    ErrorHandler();
340013a8:	f000 f806 	bl	340013b8 <ErrorHandler>
}
340013ac:	bf00      	nop
340013ae:	3718      	adds	r7, #24
340013b0:	46bd      	mov	sp, r7
340013b2:	bd80      	pop	{r7, pc}
340013b4:	56009000 	.word	0x56009000

340013b8 <ErrorHandler>:
/**
  * @brief  Handle error which occurs when calling HAL API
  * @retval None
  */
static void ErrorHandler(void)
{
340013b8:	b480      	push	{r7}
340013ba:	af00      	add	r7, sp, #0
  while(1);
340013bc:	bf00      	nop
340013be:	e7fd      	b.n	340013bc <ErrorHandler+0x4>

340013c0 <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
340013c0:	b480      	push	{r7}
340013c2:	b085      	sub	sp, #20
340013c4:	af00      	add	r7, sp, #0
340013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
340013c8:	4a07      	ldr	r2, [pc, #28]	@ (340013e8 <LL_MEM_EnableClock+0x28>)
340013ca:	687b      	ldr	r3, [r7, #4]
340013cc:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
340013d0:	4b05      	ldr	r3, [pc, #20]	@ (340013e8 <LL_MEM_EnableClock+0x28>)
340013d2:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
340013d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340013d8:	68fb      	ldr	r3, [r7, #12]
}
340013da:	bf00      	nop
340013dc:	3714      	adds	r7, #20
340013de:	46bd      	mov	sp, r7
340013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340013e4:	4770      	bx	lr
340013e6:	bf00      	nop
340013e8:	56028000 	.word	0x56028000

340013ec <LL_MEM_EnableClockLowPower>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
340013ec:	b480      	push	{r7}
340013ee:	b085      	sub	sp, #20
340013f0:	af00      	add	r7, sp, #0
340013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
340013f4:	4a07      	ldr	r2, [pc, #28]	@ (34001414 <LL_MEM_EnableClockLowPower+0x28>)
340013f6:	687b      	ldr	r3, [r7, #4]
340013f8:	f8c2 3a8c 	str.w	r3, [r2, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
340013fc:	4b05      	ldr	r3, [pc, #20]	@ (34001414 <LL_MEM_EnableClockLowPower+0x28>)
340013fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34001402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001404:	68fb      	ldr	r3, [r7, #12]
}
34001406:	bf00      	nop
34001408:	3714      	adds	r7, #20
3400140a:	46bd      	mov	sp, r7
3400140c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001410:	4770      	bx	lr
34001412:	bf00      	nop
34001414:	56028000 	.word	0x56028000

34001418 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_MDF1
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADF1
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
34001418:	b480      	push	{r7}
3400141a:	b085      	sub	sp, #20
3400141c:	af00      	add	r7, sp, #0
3400141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34001420:	4a07      	ldr	r2, [pc, #28]	@ (34001440 <LL_AHB2_GRP1_EnableClock+0x28>)
34001422:	687b      	ldr	r3, [r7, #4]
34001424:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB2ENR);
34001428:	4b05      	ldr	r3, [pc, #20]	@ (34001440 <LL_AHB2_GRP1_EnableClock+0x28>)
3400142a:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
3400142e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001430:	68fb      	ldr	r3, [r7, #12]
}
34001432:	bf00      	nop
34001434:	3714      	adds	r7, #20
34001436:	46bd      	mov	sp, r7
34001438:	f85d 7b04 	ldr.w	r7, [sp], #4
3400143c:	4770      	bx	lr
3400143e:	bf00      	nop
34001440:	56028000 	.word	0x56028000

34001444 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34001444:	b480      	push	{r7}
34001446:	b085      	sub	sp, #20
34001448:	af00      	add	r7, sp, #0
3400144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3400144c:	4a07      	ldr	r2, [pc, #28]	@ (3400146c <LL_AHB3_GRP1_EnableClock+0x28>)
3400144e:	687b      	ldr	r3, [r7, #4]
34001450:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34001454:	4b05      	ldr	r3, [pc, #20]	@ (3400146c <LL_AHB3_GRP1_EnableClock+0x28>)
34001456:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
3400145a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400145c:	68fb      	ldr	r3, [r7, #12]
}
3400145e:	bf00      	nop
34001460:	3714      	adds	r7, #20
34001462:	46bd      	mov	sp, r7
34001464:	f85d 7b04 	ldr.w	r7, [sp], #4
34001468:	4770      	bx	lr
3400146a:	bf00      	nop
3400146c:	56028000 	.word	0x56028000

34001470 <LL_AHB3_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
34001470:	b480      	push	{r7}
34001472:	b083      	sub	sp, #12
34001474:	af00      	add	r7, sp, #0
34001476:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34001478:	4a04      	ldr	r2, [pc, #16]	@ (3400148c <LL_AHB3_GRP1_ForceReset+0x1c>)
3400147a:	687b      	ldr	r3, [r7, #4]
3400147c:	f8c2 3a18 	str.w	r3, [r2, #2584]	@ 0xa18
}
34001480:	bf00      	nop
34001482:	370c      	adds	r7, #12
34001484:	46bd      	mov	sp, r7
34001486:	f85d 7b04 	ldr.w	r7, [sp], #4
3400148a:	4770      	bx	lr
3400148c:	56028000 	.word	0x56028000

34001490 <LL_AHB3_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
34001490:	b480      	push	{r7}
34001492:	b083      	sub	sp, #12
34001494:	af00      	add	r7, sp, #0
34001496:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34001498:	4b06      	ldr	r3, [pc, #24]	@ (340014b4 <LL_AHB3_GRP1_ReleaseReset+0x24>)
3400149a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400149e:	461a      	mov	r2, r3
340014a0:	687b      	ldr	r3, [r7, #4]
340014a2:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
}
340014a6:	bf00      	nop
340014a8:	370c      	adds	r7, #12
340014aa:	46bd      	mov	sp, r7
340014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340014b0:	4770      	bx	lr
340014b2:	bf00      	nop
340014b4:	56028000 	.word	0x56028000

340014b8 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
340014b8:	b480      	push	{r7}
340014ba:	b085      	sub	sp, #20
340014bc:	af00      	add	r7, sp, #0
340014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340014c0:	4a07      	ldr	r2, [pc, #28]	@ (340014e0 <LL_AHB5_GRP1_EnableClock+0x28>)
340014c2:	687b      	ldr	r3, [r7, #4]
340014c4:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
340014c8:	4b05      	ldr	r3, [pc, #20]	@ (340014e0 <LL_AHB5_GRP1_EnableClock+0x28>)
340014ca:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
340014ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340014d0:	68fb      	ldr	r3, [r7, #12]
}
340014d2:	bf00      	nop
340014d4:	3714      	adds	r7, #20
340014d6:	46bd      	mov	sp, r7
340014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340014dc:	4770      	bx	lr
340014de:	bf00      	nop
340014e0:	56028000 	.word	0x56028000

340014e4 <LL_AHB5_GRP1_ForceReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ForceReset(uint32_t Periphs)
{
340014e4:	b480      	push	{r7}
340014e6:	b083      	sub	sp, #12
340014e8:	af00      	add	r7, sp, #0
340014ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
340014ec:	4a04      	ldr	r2, [pc, #16]	@ (34001500 <LL_AHB5_GRP1_ForceReset+0x1c>)
340014ee:	687b      	ldr	r3, [r7, #4]
340014f0:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
340014f4:	bf00      	nop
340014f6:	370c      	adds	r7, #12
340014f8:	46bd      	mov	sp, r7
340014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340014fe:	4770      	bx	lr
34001500:	56028000 	.word	0x56028000

34001504 <LL_AHB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34001504:	b480      	push	{r7}
34001506:	b083      	sub	sp, #12
34001508:	af00      	add	r7, sp, #0
3400150a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400150c:	4b06      	ldr	r3, [pc, #24]	@ (34001528 <LL_AHB5_GRP1_ReleaseReset+0x24>)
3400150e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34001512:	461a      	mov	r2, r3
34001514:	687b      	ldr	r3, [r7, #4]
34001516:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
3400151a:	bf00      	nop
3400151c:	370c      	adds	r7, #12
3400151e:	46bd      	mov	sp, r7
34001520:	f85d 7b04 	ldr.w	r7, [sp], #4
34001524:	4770      	bx	lr
34001526:	bf00      	nop
34001528:	56028000 	.word	0x56028000

3400152c <LL_AHB5_GRP1_EnableClockLowPower>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
3400152c:	b480      	push	{r7}
3400152e:	b085      	sub	sp, #20
34001530:	af00      	add	r7, sp, #0
34001532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34001534:	4a07      	ldr	r2, [pc, #28]	@ (34001554 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34001536:	687b      	ldr	r3, [r7, #4]
34001538:	f8c2 3aa0 	str.w	r3, [r2, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
3400153c:	4b05      	ldr	r3, [pc, #20]	@ (34001554 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
3400153e:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34001542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001544:	68fb      	ldr	r3, [r7, #12]
}
34001546:	bf00      	nop
34001548:	3714      	adds	r7, #20
3400154a:	46bd      	mov	sp, r7
3400154c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001550:	4770      	bx	lr
34001552:	bf00      	nop
34001554:	56028000 	.word	0x56028000

34001558 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34001558:	b480      	push	{r7}
3400155a:	b085      	sub	sp, #20
3400155c:	af00      	add	r7, sp, #0
3400155e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34001560:	4a07      	ldr	r2, [pc, #28]	@ (34001580 <LL_APB2_GRP1_EnableClock+0x28>)
34001562:	687b      	ldr	r3, [r7, #4]
34001564:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34001568:	4b05      	ldr	r3, [pc, #20]	@ (34001580 <LL_APB2_GRP1_EnableClock+0x28>)
3400156a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3400156e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34001570:	68fb      	ldr	r3, [r7, #12]
}
34001572:	bf00      	nop
34001574:	3714      	adds	r7, #20
34001576:	46bd      	mov	sp, r7
34001578:	f85d 7b04 	ldr.w	r7, [sp], #4
3400157c:	4770      	bx	lr
3400157e:	bf00      	nop
34001580:	56028000 	.word	0x56028000

34001584 <LL_APB5_GRP1_EnableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34001584:	b480      	push	{r7}
34001586:	b085      	sub	sp, #20
34001588:	af00      	add	r7, sp, #0
3400158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400158c:	4a07      	ldr	r2, [pc, #28]	@ (340015ac <LL_APB5_GRP1_EnableClockLowPower+0x28>)
3400158e:	687b      	ldr	r3, [r7, #4]
34001590:	f8c2 3abc 	str.w	r3, [r2, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34001594:	4b05      	ldr	r3, [pc, #20]	@ (340015ac <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34001596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
3400159a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400159c:	68fb      	ldr	r3, [r7, #12]
}
3400159e:	bf00      	nop
340015a0:	3714      	adds	r7, #20
340015a2:	46bd      	mov	sp, r7
340015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340015a8:	4770      	bx	lr
340015aa:	bf00      	nop
340015ac:	56028000 	.word	0x56028000

340015b0 <LL_RCC_SetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
340015b0:	b480      	push	{r7}
340015b2:	b083      	sub	sp, #12
340015b4:	af00      	add	r7, sp, #0
340015b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
340015b8:	4b06      	ldr	r3, [pc, #24]	@ (340015d4 <LL_RCC_SetCpuClkSource+0x24>)
340015ba:	6a1b      	ldr	r3, [r3, #32]
340015bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
340015c0:	4904      	ldr	r1, [pc, #16]	@ (340015d4 <LL_RCC_SetCpuClkSource+0x24>)
340015c2:	687b      	ldr	r3, [r7, #4]
340015c4:	4313      	orrs	r3, r2
340015c6:	620b      	str	r3, [r1, #32]
}
340015c8:	bf00      	nop
340015ca:	370c      	adds	r7, #12
340015cc:	46bd      	mov	sp, r7
340015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340015d2:	4770      	bx	lr
340015d4:	56028000 	.word	0x56028000

340015d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
340015d8:	b480      	push	{r7}
340015da:	b083      	sub	sp, #12
340015dc:	af00      	add	r7, sp, #0
340015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
340015e0:	4b06      	ldr	r3, [pc, #24]	@ (340015fc <LL_RCC_SetSysClkSource+0x24>)
340015e2:	6a1b      	ldr	r3, [r3, #32]
340015e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340015e8:	4904      	ldr	r1, [pc, #16]	@ (340015fc <LL_RCC_SetSysClkSource+0x24>)
340015ea:	687b      	ldr	r3, [r7, #4]
340015ec:	4313      	orrs	r3, r2
340015ee:	620b      	str	r3, [r1, #32]
}
340015f0:	bf00      	nop
340015f2:	370c      	adds	r7, #12
340015f4:	46bd      	mov	sp, r7
340015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
340015fa:	4770      	bx	lr
340015fc:	56028000 	.word	0x56028000

34001600 <main>:
	uint32_t cycles = DWT->CYCCNT;
	return cycles;
}

int main(void)
{
34001600:	b580      	push	{r7, lr}
34001602:	af00      	add	r7, sp, #0
	main_MatMul();
34001604:	f000 f804 	bl	34001610 <main_MatMul>
34001608:	2300      	movs	r3, #0

}
3400160a:	4618      	mov	r0, r3
3400160c:	bd80      	pop	{r7, pc}
	...

34001610 <main_MatMul>:

int main_MatMul(void){
34001610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
34001614:	b08a      	sub	sp, #40	@ 0x28
34001616:	af00      	add	r7, sp, #0
	Hardware_init();
34001618:	f000 f85a 	bl	340016d0 <Hardware_init>
	printf("=== MatMul Main ===\n\r");
3400161c:	482a      	ldr	r0, [pc, #168]	@ (340016c8 <main_MatMul+0xb8>)
3400161e:	f01a fcdd 	bl	3401bfdc <iprintf>
	size_t insize = 8;
34001622:	2308      	movs	r3, #8
34001624:	61fb      	str	r3, [r7, #28]
	size_t outsize = 8;
34001626:	2308      	movs	r3, #8
34001628:	61bb      	str	r3, [r7, #24]

    int8_t inVec[insize];
3400162a:	69fb      	ldr	r3, [r7, #28]
3400162c:	461a      	mov	r2, r3
3400162e:	3a01      	subs	r2, #1
34001630:	617a      	str	r2, [r7, #20]
34001632:	2200      	movs	r2, #0
34001634:	4698      	mov	r8, r3
34001636:	4691      	mov	r9, r2
34001638:	2200      	movs	r2, #0
3400163a:	461c      	mov	r4, r3
3400163c:	4615      	mov	r5, r2
3400163e:	3307      	adds	r3, #7
34001640:	08db      	lsrs	r3, r3, #3
34001642:	00db      	lsls	r3, r3, #3
34001644:	ebad 0d03 	sub.w	sp, sp, r3
34001648:	466b      	mov	r3, sp
3400164a:	3300      	adds	r3, #0
3400164c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < insize; i++) {
3400164e:	2300      	movs	r3, #0
34001650:	627b      	str	r3, [r7, #36]	@ 0x24
34001652:	e00e      	b.n	34001672 <main_MatMul+0x62>
    	inVec[i] = (int8_t)((i) % 256);  // Example input: cycles through -128 to 127
34001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001656:	425a      	negs	r2, r3
34001658:	b2db      	uxtb	r3, r3
3400165a:	b2d2      	uxtb	r2, r2
3400165c:	ea53 b342 			@ <UNDEFINED> instruction: 0xea53b342
34001660:	b259      	sxtb	r1, r3
34001662:	693a      	ldr	r2, [r7, #16]
34001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001666:	4413      	add	r3, r2
34001668:	460a      	mov	r2, r1
3400166a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < insize; i++) {
3400166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400166e:	3301      	adds	r3, #1
34001670:	627b      	str	r3, [r7, #36]	@ 0x24
34001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001674:	69fa      	ldr	r2, [r7, #28]
34001676:	429a      	cmp	r2, r3
34001678:	d8ec      	bhi.n	34001654 <main_MatMul+0x44>
    }
    int8_t* identityWeights = getIdentityWeights_int8(insize,outsize);
3400167a:	69b9      	ldr	r1, [r7, #24]
3400167c:	69f8      	ldr	r0, [r7, #28]
3400167e:	f7ff fb87 	bl	34000d90 <getIdentityWeights_int8>
34001682:	60f8      	str	r0, [r7, #12]
    int8_t* outvector;

	npu_matvec_int8_init(insize,outsize);
34001684:	69b9      	ldr	r1, [r7, #24]
34001686:	69f8      	ldr	r0, [r7, #28]
34001688:	f7ff fad8 	bl	34000c3c <npu_matvec_int8_init>
	while(1){
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
3400168c:	68fb      	ldr	r3, [r7, #12]
3400168e:	69ba      	ldr	r2, [r7, #24]
34001690:	69f9      	ldr	r1, [r7, #28]
34001692:	6938      	ldr	r0, [r7, #16]
34001694:	f7ff fb1e 	bl	34000cd4 <npu_matvec_int8_run>
34001698:	60b8      	str	r0, [r7, #8]
		for(size_t i = 0;i < outsize;i++){
3400169a:	2300      	movs	r3, #0
3400169c:	623b      	str	r3, [r7, #32]
3400169e:	e00e      	b.n	340016be <main_MatMul+0xae>
			int8_t output = outvector[i];
340016a0:	68ba      	ldr	r2, [r7, #8]
340016a2:	6a3b      	ldr	r3, [r7, #32]
340016a4:	4413      	add	r3, r2
340016a6:	781b      	ldrb	r3, [r3, #0]
340016a8:	71fb      	strb	r3, [r7, #7]
			printf("Outpus %2d: %4d\n\r",i,output);
340016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
340016ae:	461a      	mov	r2, r3
340016b0:	6a39      	ldr	r1, [r7, #32]
340016b2:	4806      	ldr	r0, [pc, #24]	@ (340016cc <main_MatMul+0xbc>)
340016b4:	f01a fc92 	bl	3401bfdc <iprintf>
		for(size_t i = 0;i < outsize;i++){
340016b8:	6a3b      	ldr	r3, [r7, #32]
340016ba:	3301      	adds	r3, #1
340016bc:	623b      	str	r3, [r7, #32]
340016be:	6a3a      	ldr	r2, [r7, #32]
340016c0:	69bb      	ldr	r3, [r7, #24]
340016c2:	429a      	cmp	r2, r3
340016c4:	d3ec      	bcc.n	340016a0 <main_MatMul+0x90>
		outvector = npu_matvec_int8_run(inVec,insize,outsize,identityWeights);
340016c6:	e7e1      	b.n	3400168c <main_MatMul+0x7c>
340016c8:	3401e160 	.word	0x3401e160
340016cc:	3401e178 	.word	0x3401e178

340016d0 <Hardware_init>:
	}
}


static void Hardware_init(void)
{
340016d0:	b580      	push	{r7, lr}
340016d2:	b088      	sub	sp, #32
340016d4:	af00      	add	r7, sp, #0
  /* Power on ICACHE */
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
340016d6:	4b54      	ldr	r3, [pc, #336]	@ (34001828 <Hardware_init+0x158>)
340016d8:	681b      	ldr	r3, [r3, #0]
340016da:	4a53      	ldr	r2, [pc, #332]	@ (34001828 <Hardware_init+0x158>)
340016dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340016e0:	6013      	str	r3, [r2, #0]

  /* Set back system and CPU clock source to HSI */
  __HAL_RCC_CPUCLK_CONFIG(RCC_CPUCLKSOURCE_HSI);
340016e2:	2000      	movs	r0, #0
340016e4:	f7ff ff64 	bl	340015b0 <LL_RCC_SetCpuClkSource>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
340016e8:	2000      	movs	r0, #0
340016ea:	f7ff ff75 	bl	340015d8 <LL_RCC_SetSysClkSource>
  __HAL_RCC_USART1_CLK_ENABLE();
340016ee:	2010      	movs	r0, #16
340016f0:	f7ff ff32 	bl	34001558 <LL_APB2_GRP1_EnableClock>

  HAL_Init();
340016f4:	f002 fa8e 	bl	34003c14 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
340016f8:	4b4c      	ldr	r3, [pc, #304]	@ (3400182c <Hardware_init+0x15c>)
340016fa:	695b      	ldr	r3, [r3, #20]
340016fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34001700:	2b00      	cmp	r3, #0
34001702:	d11b      	bne.n	3400173c <Hardware_init+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
34001704:	f3bf 8f4f 	dsb	sy
}
34001708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400170a:	f3bf 8f6f 	isb	sy
}
3400170e:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34001710:	4b46      	ldr	r3, [pc, #280]	@ (3400182c <Hardware_init+0x15c>)
34001712:	2200      	movs	r2, #0
34001714:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34001718:	f3bf 8f4f 	dsb	sy
}
3400171c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400171e:	f3bf 8f6f 	isb	sy
}
34001722:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34001724:	4b41      	ldr	r3, [pc, #260]	@ (3400182c <Hardware_init+0x15c>)
34001726:	695b      	ldr	r3, [r3, #20]
34001728:	4a40      	ldr	r2, [pc, #256]	@ (3400182c <Hardware_init+0x15c>)
3400172a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3400172e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34001730:	f3bf 8f4f 	dsb	sy
}
34001734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001736:	f3bf 8f6f 	isb	sy
}
3400173a:	e000      	b.n	3400173e <Hardware_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3400173c:	bf00      	nop

  SCB_EnableICache();

#if defined(USE_DCACHE)
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
3400173e:	4b3a      	ldr	r3, [pc, #232]	@ (34001828 <Hardware_init+0x158>)
34001740:	681b      	ldr	r3, [r3, #0]
34001742:	4a39      	ldr	r2, [pc, #228]	@ (34001828 <Hardware_init+0x158>)
34001744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34001748:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3400174a:	4b38      	ldr	r3, [pc, #224]	@ (3400182c <Hardware_init+0x15c>)
3400174c:	695b      	ldr	r3, [r3, #20]
3400174e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34001752:	2b00      	cmp	r3, #0
34001754:	d138      	bne.n	340017c8 <Hardware_init+0xf8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34001756:	4b35      	ldr	r3, [pc, #212]	@ (3400182c <Hardware_init+0x15c>)
34001758:	2200      	movs	r2, #0
3400175a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400175e:	f3bf 8f4f 	dsb	sy
}
34001762:	bf00      	nop
    ccsidr = SCB->CCSIDR;
34001764:	4b31      	ldr	r3, [pc, #196]	@ (3400182c <Hardware_init+0x15c>)
34001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400176a:	61fb      	str	r3, [r7, #28]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3400176c:	69fb      	ldr	r3, [r7, #28]
3400176e:	0b5b      	lsrs	r3, r3, #13
34001770:	f3c3 030e 	ubfx	r3, r3, #0, #15
34001774:	61bb      	str	r3, [r7, #24]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34001776:	69fb      	ldr	r3, [r7, #28]
34001778:	08db      	lsrs	r3, r3, #3
3400177a:	f3c3 0309 	ubfx	r3, r3, #0, #10
3400177e:	617b      	str	r3, [r7, #20]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
34001780:	69bb      	ldr	r3, [r7, #24]
34001782:	015a      	lsls	r2, r3, #5
34001784:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34001788:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
3400178a:	697a      	ldr	r2, [r7, #20]
3400178c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3400178e:	4927      	ldr	r1, [pc, #156]	@ (3400182c <Hardware_init+0x15c>)
34001790:	4313      	orrs	r3, r2
34001792:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
34001796:	697b      	ldr	r3, [r7, #20]
34001798:	1e5a      	subs	r2, r3, #1
3400179a:	617a      	str	r2, [r7, #20]
3400179c:	2b00      	cmp	r3, #0
3400179e:	d1ef      	bne.n	34001780 <Hardware_init+0xb0>
    } while(sets-- != 0U);
340017a0:	69bb      	ldr	r3, [r7, #24]
340017a2:	1e5a      	subs	r2, r3, #1
340017a4:	61ba      	str	r2, [r7, #24]
340017a6:	2b00      	cmp	r3, #0
340017a8:	d1e5      	bne.n	34001776 <Hardware_init+0xa6>
  __ASM volatile ("dsb 0xF":::"memory");
340017aa:	f3bf 8f4f 	dsb	sy
}
340017ae:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
340017b0:	4b1e      	ldr	r3, [pc, #120]	@ (3400182c <Hardware_init+0x15c>)
340017b2:	695b      	ldr	r3, [r3, #20]
340017b4:	4a1d      	ldr	r2, [pc, #116]	@ (3400182c <Hardware_init+0x15c>)
340017b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
340017ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
340017bc:	f3bf 8f4f 	dsb	sy
}
340017c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
340017c2:	f3bf 8f6f 	isb	sy
}
340017c6:	e000      	b.n	340017ca <Hardware_init+0xfa>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
340017c8:	bf00      	nop
  SCB_EnableDCache();
#endif

  SystemClock_Config();
340017ca:	f000 f945 	bl	34001a58 <SystemClock_Config>

  NPURam_enable();
340017ce:	f000 f845 	bl	3400185c <NPURam_enable>
  Fuse_Programming();
340017d2:	f7ff fda9 	bl	34001328 <Fuse_Programming>
  NPUCache_config();
340017d6:	f000 f8bc 	bl	34001952 <NPUCache_config>

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
340017da:	2301      	movs	r3, #1
340017dc:	743b      	strb	r3, [r7, #16]
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
340017de:	2301      	movs	r3, #1
340017e0:	747b      	strb	r3, [r7, #17]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
340017e2:	f107 0310 	add.w	r3, r7, #16
340017e6:	4619      	mov	r1, r3
340017e8:	2000      	movs	r0, #0
340017ea:	f001 f9b7 	bl	34002b5c <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
340017ee:	2000      	movs	r0, #0
340017f0:	f001 fa9a 	bl	34002d28 <BSP_XSPI_NOR_EnableMemoryMappedMode>

  Security_Config();
340017f4:	f000 f8b6 	bl	34001964 <Security_Config>
  IAC_Config();
340017f8:	f000 f91a 	bl	34001a30 <IAC_Config>
  set_clk_sleep_mode();
340017fc:	f000 f876 	bl	340018ec <set_clk_sleep_mode>

  /*** Now initialize UART ***/
  COM_InitTypeDef com_config = {
34001800:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
34001804:	603b      	str	r3, [r7, #0]
34001806:	2300      	movs	r3, #0
34001808:	607b      	str	r3, [r7, #4]
3400180a:	2300      	movs	r3, #0
3400180c:	813b      	strh	r3, [r7, #8]
3400180e:	2300      	movs	r3, #0
34001810:	817b      	strh	r3, [r7, #10]
34001812:	2300      	movs	r3, #0
34001814:	81bb      	strh	r3, [r7, #12]
    .WordLength = UART_WORDLENGTH_8B,
    .StopBits = UART_STOPBITS_1,
    .Parity = UART_PARITY_NONE,
    .HwFlowCtl = UART_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &com_config);
34001816:	463b      	mov	r3, r7
34001818:	4619      	mov	r1, r3
3400181a:	2000      	movs	r0, #0
3400181c:	f001 f860 	bl	340028e0 <BSP_COM_Init>
}
34001820:	bf00      	nop
34001822:	3720      	adds	r7, #32
34001824:	46bd      	mov	sp, r7
34001826:	bd80      	pop	{r7, pc}
34001828:	e001e000 	.word	0xe001e000
3400182c:	e000ed00 	.word	0xe000ed00

34001830 <_write>:

int _write(int file, char *ptr, int len)
{
34001830:	b580      	push	{r7, lr}
34001832:	b084      	sub	sp, #16
34001834:	af00      	add	r7, sp, #0
34001836:	60f8      	str	r0, [r7, #12]
34001838:	60b9      	str	r1, [r7, #8]
3400183a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
3400183c:	687b      	ldr	r3, [r7, #4]
3400183e:	b29a      	uxth	r2, r3
34001840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001844:	68b9      	ldr	r1, [r7, #8]
34001846:	4804      	ldr	r0, [pc, #16]	@ (34001858 <_write+0x28>)
34001848:	f014 f97c 	bl	34015b44 <HAL_UART_Transmit>
    return len;
3400184c:	687b      	ldr	r3, [r7, #4]
}
3400184e:	4618      	mov	r0, r3
34001850:	3710      	adds	r7, #16
34001852:	46bd      	mov	sp, r7
34001854:	bd80      	pop	{r7, pc}
34001856:	bf00      	nop
34001858:	34020820 	.word	0x34020820

3400185c <NPURam_enable>:

static void NPURam_enable(void)
{
3400185c:	b580      	push	{r7, lr}
3400185e:	b084      	sub	sp, #16
34001860:	af00      	add	r7, sp, #0
  __HAL_RCC_NPU_CLK_ENABLE();
34001862:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001866:	f7ff fe27 	bl	340014b8 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_NPU_FORCE_RESET();
3400186a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3400186e:	f7ff fe39 	bl	340014e4 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_NPU_RELEASE_RESET();
34001872:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001876:	f7ff fe45 	bl	34001504 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable NPU RAMs (4x448KB) */
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3400187a:	2001      	movs	r0, #1
3400187c:	f7ff fda0 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34001880:	2002      	movs	r0, #2
34001882:	f7ff fd9d 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
34001886:	2004      	movs	r0, #4
34001888:	f7ff fd9a 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
3400188c:	2008      	movs	r0, #8
3400188e:	f7ff fd97 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_RAMCFG_CLK_ENABLE();
34001892:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34001896:	f7ff fdbf 	bl	34001418 <LL_AHB2_GRP1_EnableClock>
  RAMCFG_HandleTypeDef hramcfg = {0};
3400189a:	1d3b      	adds	r3, r7, #4
3400189c:	2200      	movs	r2, #0
3400189e:	601a      	str	r2, [r3, #0]
340018a0:	605a      	str	r2, [r3, #4]
340018a2:	609a      	str	r2, [r3, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
340018a4:	4b0d      	ldr	r3, [pc, #52]	@ (340018dc <NPURam_enable+0x80>)
340018a6:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018a8:	1d3b      	adds	r3, r7, #4
340018aa:	4618      	mov	r0, r3
340018ac:	f004 fcb0 	bl	34006210 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
340018b0:	4b0b      	ldr	r3, [pc, #44]	@ (340018e0 <NPURam_enable+0x84>)
340018b2:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018b4:	1d3b      	adds	r3, r7, #4
340018b6:	4618      	mov	r0, r3
340018b8:	f004 fcaa 	bl	34006210 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
340018bc:	4b09      	ldr	r3, [pc, #36]	@ (340018e4 <NPURam_enable+0x88>)
340018be:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018c0:	1d3b      	adds	r3, r7, #4
340018c2:	4618      	mov	r0, r3
340018c4:	f004 fca4 	bl	34006210 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
340018c8:	4b07      	ldr	r3, [pc, #28]	@ (340018e8 <NPURam_enable+0x8c>)
340018ca:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
340018cc:	1d3b      	adds	r3, r7, #4
340018ce:	4618      	mov	r0, r3
340018d0:	f004 fc9e 	bl	34006210 <HAL_RAMCFG_EnableAXISRAM>
}
340018d4:	bf00      	nop
340018d6:	3710      	adds	r7, #16
340018d8:	46bd      	mov	sp, r7
340018da:	bd80      	pop	{r7, pc}
340018dc:	52023100 	.word	0x52023100
340018e0:	52023180 	.word	0x52023180
340018e4:	52023200 	.word	0x52023200
340018e8:	52023280 	.word	0x52023280

340018ec <set_clk_sleep_mode>:

static void set_clk_sleep_mode(void)
{
340018ec:	b580      	push	{r7, lr}
340018ee:	af00      	add	r7, sp, #0
  /*** Enable sleep mode support during NPU inference *************************/
  /* Configure peripheral clocks to remain active during sleep mode */
  /* Keep all IP's enabled during WFE so they can wake up CPU. Fine tune
   * this if you want to save maximum power
   */
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
340018f0:	2020      	movs	r0, #32
340018f2:	f7ff fe1b 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
340018f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
340018fa:	f7ff fe17 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
340018fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001902:	f7ff fe13 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34001906:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3400190a:	f7ff fe0f 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
3400190e:	2002      	movs	r0, #2
34001910:	f7ff fe0c 	bl	3400152c <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DCMIPP_CLK_SLEEP_ENABLE();   /* For camera configuration retention */
34001914:	2004      	movs	r0, #4
34001916:	f7ff fe35 	bl	34001584 <LL_APB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CSI_CLK_SLEEP_ENABLE();      /* For camera configuration retention */
3400191a:	2040      	movs	r0, #64	@ 0x40
3400191c:	f7ff fe32 	bl	34001584 <LL_APB5_GRP1_EnableClockLowPower>

  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
34001920:	f44f 7000 	mov.w	r0, #512	@ 0x200
34001924:	f7ff fd62 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
34001928:	2080      	movs	r0, #128	@ 0x80
3400192a:	f7ff fd5f 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
3400192e:	f44f 7080 	mov.w	r0, #256	@ 0x100
34001932:	f7ff fd5b 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
34001936:	2001      	movs	r0, #1
34001938:	f7ff fd58 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
3400193c:	2002      	movs	r0, #2
3400193e:	f7ff fd55 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
34001942:	2004      	movs	r0, #4
34001944:	f7ff fd52 	bl	340013ec <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
34001948:	2008      	movs	r0, #8
3400194a:	f7ff fd4f 	bl	340013ec <LL_MEM_EnableClockLowPower>
}
3400194e:	bf00      	nop
34001950:	bd80      	pop	{r7, pc}

34001952 <NPUCache_config>:

static void NPUCache_config(void)
{
34001952:	b580      	push	{r7, lr}
34001954:	af00      	add	r7, sp, #0
  npu_cache_init();
34001956:	f000 f9eb 	bl	34001d30 <npu_cache_init>
  npu_cache_enable();
3400195a:	f000 f9f7 	bl	34001d4c <npu_cache_enable>
}
3400195e:	bf00      	nop
34001960:	bd80      	pop	{r7, pc}
	...

34001964 <Security_Config>:

static void Security_Config(void)
{
34001964:	b580      	push	{r7, lr}
34001966:	b082      	sub	sp, #8
34001968:	af00      	add	r7, sp, #0
  __HAL_RCC_RIFSC_CLK_ENABLE();
3400196a:	f44f 7000 	mov.w	r0, #512	@ 0x200
3400196e:	f7ff fd69 	bl	34001444 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
34001972:	463b      	mov	r3, r7
34001974:	2200      	movs	r2, #0
34001976:	601a      	str	r2, [r3, #0]
34001978:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
3400197a:	2302      	movs	r3, #2
3400197c:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3400197e:	2303      	movs	r3, #3
34001980:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001982:	463b      	mov	r3, r7
34001984:	4619      	mov	r1, r3
34001986:	2001      	movs	r0, #1
34001988:	f012 fe46 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3400198c:	463b      	mov	r3, r7
3400198e:	4619      	mov	r1, r3
34001990:	2008      	movs	r0, #8
34001992:	f012 fe41 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34001996:	463b      	mov	r3, r7
34001998:	4619      	mov	r1, r3
3400199a:	2009      	movs	r0, #9
3400199c:	f012 fe3c 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
340019a0:	463b      	mov	r3, r7
340019a2:	4619      	mov	r1, r3
340019a4:	200a      	movs	r0, #10
340019a6:	f012 fe37 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
340019aa:	463b      	mov	r3, r7
340019ac:	4619      	mov	r1, r3
340019ae:	200b      	movs	r0, #11
340019b0:	f012 fe32 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
340019b4:	463b      	mov	r3, r7
340019b6:	4619      	mov	r1, r3
340019b8:	2004      	movs	r0, #4
340019ba:	f012 fe2d 	bl	34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019be:	2103      	movs	r1, #3
340019c0:	4813      	ldr	r0, [pc, #76]	@ (34001a10 <Security_Config+0xac>)
340019c2:	f012 fed3 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019c6:	2103      	movs	r1, #3
340019c8:	4812      	ldr	r0, [pc, #72]	@ (34001a14 <Security_Config+0xb0>)
340019ca:	f012 fecf 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019ce:	2103      	movs	r1, #3
340019d0:	4811      	ldr	r0, [pc, #68]	@ (34001a18 <Security_Config+0xb4>)
340019d2:	f012 fecb 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019d6:	2103      	movs	r1, #3
340019d8:	4810      	ldr	r0, [pc, #64]	@ (34001a1c <Security_Config+0xb8>)
340019da:	f012 fec7 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019de:	2103      	movs	r1, #3
340019e0:	480f      	ldr	r0, [pc, #60]	@ (34001a20 <Security_Config+0xbc>)
340019e2:	f012 fec3 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019e6:	2103      	movs	r1, #3
340019e8:	480e      	ldr	r0, [pc, #56]	@ (34001a24 <Security_Config+0xc0>)
340019ea:	f012 febf 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019ee:	2103      	movs	r1, #3
340019f0:	480d      	ldr	r0, [pc, #52]	@ (34001a28 <Security_Config+0xc4>)
340019f2:	f012 febb 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019f6:	2103      	movs	r1, #3
340019f8:	480c      	ldr	r0, [pc, #48]	@ (34001a2c <Security_Config+0xc8>)
340019fa:	f012 feb7 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
340019fe:	2103      	movs	r1, #3
34001a00:	2004      	movs	r0, #4
34001a02:	f012 feb3 	bl	3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>
}
34001a06:	bf00      	nop
34001a08:	3708      	adds	r7, #8
34001a0a:	46bd      	mov	sp, r7
34001a0c:	bd80      	pop	{r7, pc}
34001a0e:	bf00      	nop
34001a10:	3000000a 	.word	0x3000000a
34001a14:	30000005 	.word	0x30000005
34001a18:	2000001c 	.word	0x2000001c
34001a1c:	2000001d 	.word	0x2000001d
34001a20:	30000006 	.word	0x30000006
34001a24:	30000007 	.word	0x30000007
34001a28:	30000008 	.word	0x30000008
34001a2c:	10000018 	.word	0x10000018

34001a30 <IAC_Config>:

static void IAC_Config(void)
{
34001a30:	b580      	push	{r7, lr}
34001a32:	af00      	add	r7, sp, #0
/* Configure IAC to trap illegal access events */
  __HAL_RCC_IAC_CLK_ENABLE();
34001a34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a38:	f7ff fd04 	bl	34001444 <LL_AHB3_GRP1_EnableClock>
  __HAL_RCC_IAC_FORCE_RESET();
34001a3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a40:	f7ff fd16 	bl	34001470 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_IAC_RELEASE_RESET();
34001a44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001a48:	f7ff fd22 	bl	34001490 <LL_AHB3_GRP1_ReleaseReset>
}
34001a4c:	bf00      	nop
34001a4e:	bd80      	pop	{r7, pc}

34001a50 <IAC_IRQHandler>:

void IAC_IRQHandler(void)
{
34001a50:	b480      	push	{r7}
34001a52:	af00      	add	r7, sp, #0
  while (1)
34001a54:	bf00      	nop
34001a56:	e7fd      	b.n	34001a54 <IAC_IRQHandler+0x4>

34001a58 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
34001a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
34001a5c:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
34001a60:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34001a62:	f507 730a 	add.w	r3, r7, #552	@ 0x228
34001a66:	2240      	movs	r2, #64	@ 0x40
34001a68:	2100      	movs	r1, #0
34001a6a:	4618      	mov	r0, r3
34001a6c:	f01a fbfe 	bl	3401c26c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34001a70:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001a74:	2298      	movs	r2, #152	@ 0x98
34001a76:	2100      	movs	r1, #0
34001a78:	4618      	mov	r0, r3
34001a7a:	f01a fbf7 	bl	3401c26c <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
34001a7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001a82:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001a86:	4618      	mov	r0, r3
34001a88:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34001a8c:	461a      	mov	r2, r3
34001a8e:	2100      	movs	r1, #0
34001a90:	f01a fbec 	bl	3401c26c <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34001a94:	2001      	movs	r0, #1
34001a96:	f000 fef7 	bl	34002888 <BSP_SMPS_Init>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34001a9a:	2300      	movs	r3, #0
34001a9c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  /* PLL1 = 64 x 25 / 2 = 800MHz */
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34001aa0:	2302      	movs	r3, #2
34001aa2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34001aa6:	2300      	movs	r3, #0
34001aa8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  RCC_OscInitStruct.PLL1.PLLM = 2;
34001aac:	2302      	movs	r3, #2
34001aae:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34001ab2:	2319      	movs	r3, #25
34001ab4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34001ab8:	2300      	movs	r3, #0
34001aba:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34001abe:	2301      	movs	r3, #1
34001ac0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34001ac4:	2301      	movs	r3, #1
34001ac6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
34001aca:	2302      	movs	r3, #2
34001acc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34001ad0:	2300      	movs	r3, #0
34001ad2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  RCC_OscInitStruct.PLL2.PLLM = 8;
34001ad6:	2308      	movs	r3, #8
34001ad8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
34001adc:	2300      	movs	r3, #0
34001ade:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  RCC_OscInitStruct.PLL2.PLLN = 125;
34001ae2:	237d      	movs	r3, #125	@ 0x7d
34001ae4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34001ae8:	2301      	movs	r3, #1
34001aea:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  RCC_OscInitStruct.PLL2.PLLP2 = 1;
34001aee:	2301      	movs	r3, #1
34001af0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34001af4:	2302      	movs	r3, #2
34001af6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
34001afa:	2300      	movs	r3, #0
34001afc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001b00:	2308      	movs	r3, #8
34001b02:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  RCC_OscInitStruct.PLL3.PLLN = 225;
34001b06:	23e1      	movs	r3, #225	@ 0xe1
34001b08:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
34001b0c:	2300      	movs	r3, #0
34001b0e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
34001b12:	2301      	movs	r3, #1
34001b14:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
34001b18:	2302      	movs	r3, #2
34001b1a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
34001b1e:	2302      	movs	r3, #2
34001b20:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
34001b24:	2300      	movs	r3, #0
34001b26:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  RCC_OscInitStruct.PLL4.PLLM = 8;
34001b2a:	2308      	movs	r3, #8
34001b2c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
34001b30:	2300      	movs	r3, #0
34001b32:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  RCC_OscInitStruct.PLL4.PLLN = 225;
34001b36:	23e1      	movs	r3, #225	@ 0xe1
34001b38:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
34001b3c:	2306      	movs	r3, #6
34001b3e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
34001b42:	2306      	movs	r3, #6
34001b44:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34001b48:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001b4c:	4618      	mov	r0, r3
34001b4e:	f004 fe37 	bl	340067c0 <HAL_RCC_OscConfig>
34001b52:	4603      	mov	r3, r0
34001b54:	2b00      	cmp	r3, #0
34001b56:	d001      	beq.n	34001b5c <SystemClock_Config+0x104>
  {
    while(1);
34001b58:	bf00      	nop
34001b5a:	e7fd      	b.n	34001b58 <SystemClock_Config+0x100>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK |
34001b5c:	237f      	movs	r3, #127	@ 0x7f
34001b5e:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34001b62:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34001b66:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34001b6a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34001b6e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001b72:	2300      	movs	r3, #0
34001b74:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34001b78:	2301      	movs	r3, #1
34001b7a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001b7e:	2300      	movs	r3, #0
34001b80:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34001b84:	2302      	movs	r3, #2
34001b86:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
34001b8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
34001b8e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34001b92:	2301      	movs	r3, #1
34001b94:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34001b98:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001b9c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34001ba0:	2301      	movs	r3, #1
34001ba2:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34001ba6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34001baa:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34001bae:	2300      	movs	r3, #0
34001bb0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34001bb4:	2300      	movs	r3, #0
34001bb6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34001bba:	2300      	movs	r3, #0
34001bbc:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34001bc0:	2300      	movs	r3, #0
34001bc2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34001bc6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
34001bca:	4618      	mov	r0, r3
34001bcc:	f005 fb18 	bl	34007200 <HAL_RCC_ClockConfig>
34001bd0:	4603      	mov	r3, r0
34001bd2:	2b00      	cmp	r3, #0
34001bd4:	d001      	beq.n	34001bda <SystemClock_Config+0x182>
  {
    while(1);
34001bd6:	bf00      	nop
34001bd8:	e7fd      	b.n	34001bd6 <SystemClock_Config+0x17e>
  }

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;
34001bda:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001bde:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
34001be2:	f04f 0200 	mov.w	r2, #0
34001be6:	f04f 0300 	mov.w	r3, #0
34001bea:	e9c1 2300 	strd	r2, r3, [r1]

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
34001bee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001bf2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
34001bfa:	4690      	mov	r8, r2
34001bfc:	f443 0980 	orr.w	r9, r3, #4194304	@ 0x400000
34001c00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c04:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c08:	e9c3 8900 	strd	r8, r9, [r3]
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
34001c0c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c10:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c14:	4a13      	ldr	r2, [pc, #76]	@ (34001c64 <SystemClock_Config+0x20c>)
34001c16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
34001c1a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c1e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
34001c26:	4614      	mov	r4, r2
34001c28:	f443 0500 	orr.w	r5, r3, #8388608	@ 0x800000
34001c2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c30:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c34:	e9c3 4500 	strd	r4, r5, [r3]
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
34001c38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001c3c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001c40:	4a09      	ldr	r2, [pc, #36]	@ (34001c68 <SystemClock_Config+0x210>)
34001c42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
34001c46:	463b      	mov	r3, r7
34001c48:	4618      	mov	r0, r3
34001c4a:	f007 fecf 	bl	340099ec <HAL_RCCEx_PeriphCLKConfig>
34001c4e:	4603      	mov	r3, r0
34001c50:	2b00      	cmp	r3, #0
34001c52:	d001      	beq.n	34001c58 <SystemClock_Config+0x200>
  {
    while (1);
34001c54:	bf00      	nop
34001c56:	e7fd      	b.n	34001c54 <SystemClock_Config+0x1fc>
  }
}
34001c58:	bf00      	nop
34001c5a:	f507 771a 	add.w	r7, r7, #616	@ 0x268
34001c5e:	46bd      	mov	sp, r7
34001c60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
34001c64:	03000014 	.word	0x03000014
34001c68:	03000414 	.word	0x03000414

34001c6c <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34001c6c:	b580      	push	{r7, lr}
34001c6e:	b082      	sub	sp, #8
34001c70:	af00      	add	r7, sp, #0
34001c72:	6078      	str	r0, [r7, #4]
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
34001c74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001c78:	f7ff fba2 	bl	340013c0 <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
34001c7c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c80:	f7ff fc1a 	bl	340014b8 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_CACHEAXI_FORCE_RESET();
34001c84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c88:	f7ff fc2c 	bl	340014e4 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
34001c8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001c90:	f7ff fc38 	bl	34001504 <LL_AHB5_GRP1_ReleaseReset>
}
34001c94:	bf00      	nop
34001c96:	3708      	adds	r7, #8
34001c98:	46bd      	mov	sp, r7
34001c9a:	bd80      	pop	{r7, pc}

34001c9c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
34001c9c:	b480      	push	{r7}
34001c9e:	b083      	sub	sp, #12
34001ca0:	af00      	add	r7, sp, #0
34001ca2:	6078      	str	r0, [r7, #4]
34001ca4:	6039      	str	r1, [r7, #0]
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001ca6:	be00      	bkpt	0x0000
  while (1)
34001ca8:	bf00      	nop
34001caa:	e7fd      	b.n	34001ca8 <assert_failed+0xc>

34001cac <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34001cac:	b480      	push	{r7}
34001cae:	b087      	sub	sp, #28
34001cb0:	af00      	add	r7, sp, #0
34001cb2:	6078      	str	r0, [r7, #4]
34001cb4:	6039      	str	r1, [r7, #0]

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (34001d2c <mcu_cache_invalidate_range+0x80>)
34001cb8:	695b      	ldr	r3, [r3, #20]
34001cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34001cbe:	2b00      	cmp	r3, #0
34001cc0:	d001      	beq.n	34001cc6 <mcu_cache_invalidate_range+0x1a>
34001cc2:	2301      	movs	r3, #1
34001cc4:	e000      	b.n	34001cc8 <mcu_cache_invalidate_range+0x1c>
#endif // (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)

  return 0;
34001cc6:	2300      	movs	r3, #0
  if(mcu_cache_enabled()) {
34001cc8:	2b00      	cmp	r3, #0
34001cca:	d027      	beq.n	34001d1c <mcu_cache_invalidate_range+0x70>
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34001ccc:	687b      	ldr	r3, [r7, #4]
34001cce:	6839      	ldr	r1, [r7, #0]
34001cd0:	687a      	ldr	r2, [r7, #4]
34001cd2:	1a8a      	subs	r2, r1, r2
34001cd4:	617b      	str	r3, [r7, #20]
34001cd6:	613a      	str	r2, [r7, #16]
    if ( dsize > 0 ) {
34001cd8:	693b      	ldr	r3, [r7, #16]
34001cda:	2b00      	cmp	r3, #0
34001cdc:	dd1d      	ble.n	34001d1a <mcu_cache_invalidate_range+0x6e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34001cde:	697b      	ldr	r3, [r7, #20]
34001ce0:	f003 021f 	and.w	r2, r3, #31
34001ce4:	693b      	ldr	r3, [r7, #16]
34001ce6:	4413      	add	r3, r2
34001ce8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
34001cea:	697b      	ldr	r3, [r7, #20]
34001cec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
34001cee:	f3bf 8f4f 	dsb	sy
}
34001cf2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (34001d2c <mcu_cache_invalidate_range+0x80>)
34001cf6:	68bb      	ldr	r3, [r7, #8]
34001cf8:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34001cfc:	68bb      	ldr	r3, [r7, #8]
34001cfe:	3320      	adds	r3, #32
34001d00:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
34001d02:	68fb      	ldr	r3, [r7, #12]
34001d04:	3b20      	subs	r3, #32
34001d06:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
34001d08:	68fb      	ldr	r3, [r7, #12]
34001d0a:	2b00      	cmp	r3, #0
34001d0c:	dcf2      	bgt.n	34001cf4 <mcu_cache_invalidate_range+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
34001d0e:	f3bf 8f4f 	dsb	sy
}
34001d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001d14:	f3bf 8f6f 	isb	sy
}
34001d18:	bf00      	nop
}
34001d1a:	bf00      	nop
  }
  return 0;
34001d1c:	2300      	movs	r3, #0
}
34001d1e:	4618      	mov	r0, r3
34001d20:	371c      	adds	r7, #28
34001d22:	46bd      	mov	sp, r7
34001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d28:	4770      	bx	lr
34001d2a:	bf00      	nop
34001d2c:	e000ed00 	.word	0xe000ed00

34001d30 <npu_cache_init>:
#include "stm32n6xx_hal_cacheaxi.h"

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
34001d30:	b580      	push	{r7, lr}
34001d32:	af00      	add	r7, sp, #0
  hcacheaxi_s.Instance = CACHEAXI;
34001d34:	4b03      	ldr	r3, [pc, #12]	@ (34001d44 <npu_cache_init+0x14>)
34001d36:	4a04      	ldr	r2, [pc, #16]	@ (34001d48 <npu_cache_init+0x18>)
34001d38:	601a      	str	r2, [r3, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001d3a:	4802      	ldr	r0, [pc, #8]	@ (34001d44 <npu_cache_init+0x14>)
34001d3c:	f002 f952 	bl	34003fe4 <HAL_CACHEAXI_Init>
}
34001d40:	bf00      	nop
34001d42:	bd80      	pop	{r7, pc}
34001d44:	34020814 	.word	0x34020814
34001d48:	580dfc00 	.word	0x580dfc00

34001d4c <npu_cache_enable>:

void npu_cache_enable(void)
{
34001d4c:	b580      	push	{r7, lr}
34001d4e:	b082      	sub	sp, #8
34001d50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34001d52:	4806      	ldr	r0, [pc, #24]	@ (34001d6c <npu_cache_enable+0x20>)
34001d54:	f002 f97c 	bl	34004050 <HAL_CACHEAXI_Enable>
34001d58:	4603      	mov	r3, r0
34001d5a:	71fb      	strb	r3, [r7, #7]
  } while (status == HAL_BUSY);
34001d5c:	79fb      	ldrb	r3, [r7, #7]
34001d5e:	2b02      	cmp	r3, #2
34001d60:	d0f7      	beq.n	34001d52 <npu_cache_enable+0x6>
}
34001d62:	bf00      	nop
34001d64:	bf00      	nop
34001d66:	3708      	adds	r7, #8
34001d68:	46bd      	mov	sp, r7
34001d6a:	bd80      	pop	{r7, pc}
34001d6c:	34020814 	.word	0x34020814

34001d70 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
34001d70:	b480      	push	{r7}
34001d72:	af00      	add	r7, sp, #0
}
34001d74:	bf00      	nop
34001d76:	46bd      	mov	sp, r7
34001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d7c:	4770      	bx	lr

34001d7e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
34001d7e:	b480      	push	{r7}
34001d80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
34001d82:	bf00      	nop
34001d84:	e7fd      	b.n	34001d82 <HardFault_Handler+0x4>

34001d86 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
34001d86:	b480      	push	{r7}
34001d88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001d8a:	bf00      	nop
34001d8c:	e7fd      	b.n	34001d8a <MemManage_Handler+0x4>

34001d8e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
34001d8e:	b480      	push	{r7}
34001d90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
34001d92:	bf00      	nop
34001d94:	e7fd      	b.n	34001d92 <BusFault_Handler+0x4>

34001d96 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
34001d96:	b480      	push	{r7}
34001d98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
34001d9a:	bf00      	nop
34001d9c:	e7fd      	b.n	34001d9a <UsageFault_Handler+0x4>

34001d9e <SecureFault_Handler>:
  * @brief  This function handles Secure Fault exception.
  * @param  None
  * @retval None
  */
void SecureFault_Handler(void)
{
34001d9e:	b480      	push	{r7}
34001da0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
34001da2:	bf00      	nop
34001da4:	e7fd      	b.n	34001da2 <SecureFault_Handler+0x4>

34001da6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
34001da6:	b480      	push	{r7}
34001da8:	af00      	add	r7, sp, #0
}
34001daa:	bf00      	nop
34001dac:	46bd      	mov	sp, r7
34001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
34001db2:	4770      	bx	lr

34001db4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
34001db4:	b480      	push	{r7}
34001db6:	af00      	add	r7, sp, #0
  while (1)
34001db8:	bf00      	nop
34001dba:	e7fd      	b.n	34001db8 <DebugMon_Handler+0x4>

34001dbc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
34001dbc:	b480      	push	{r7}
34001dbe:	af00      	add	r7, sp, #0
  while (1)
34001dc0:	bf00      	nop
34001dc2:	e7fd      	b.n	34001dc0 <PendSV_Handler+0x4>

34001dc4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
34001dc4:	b580      	push	{r7, lr}
34001dc6:	af00      	add	r7, sp, #0
  HAL_IncTick();
34001dc8:	f001 ff76 	bl	34003cb8 <HAL_IncTick>
}
34001dcc:	bf00      	nop
34001dce:	bd80      	pop	{r7, pc}

34001dd0 <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
34001dd0:	b580      	push	{r7, lr}
34001dd2:	b082      	sub	sp, #8
34001dd4:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001dd6:	f015 ff15 	bl	34017c04 <CMW_CAMERA_GetDCMIPPHandle>
34001dda:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
34001ddc:	6878      	ldr	r0, [r7, #4]
34001dde:	f002 fce5 	bl	340047ac <HAL_DCMIPP_CSI_IRQHandler>
}
34001de2:	bf00      	nop
34001de4:	3708      	adds	r7, #8
34001de6:	46bd      	mov	sp, r7
34001de8:	bd80      	pop	{r7, pc}

34001dea <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
34001dea:	b580      	push	{r7, lr}
34001dec:	b082      	sub	sp, #8
34001dee:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
34001df0:	f015 ff08 	bl	34017c04 <CMW_CAMERA_GetDCMIPPHandle>
34001df4:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001df6:	6878      	ldr	r0, [r7, #4]
34001df8:	f002 faf4 	bl	340043e4 <HAL_DCMIPP_IRQHandler>
34001dfc:	bf00      	nop
34001dfe:	3708      	adds	r7, #8
34001e00:	46bd      	mov	sp, r7
34001e02:	bd80      	pop	{r7, pc}

34001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
34001e04:	b480      	push	{r7}
34001e06:	af00      	add	r7, sp, #0
  return 1;
34001e08:	2301      	movs	r3, #1
}
34001e0a:	4618      	mov	r0, r3
34001e0c:	46bd      	mov	sp, r7
34001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001e12:	4770      	bx	lr

34001e14 <_kill>:

int _kill(int pid, int sig)
{
34001e14:	b580      	push	{r7, lr}
34001e16:	b082      	sub	sp, #8
34001e18:	af00      	add	r7, sp, #0
34001e1a:	6078      	str	r0, [r7, #4]
34001e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001e1e:	f01a fc79 	bl	3401c714 <__errno>
34001e22:	4603      	mov	r3, r0
34001e24:	2216      	movs	r2, #22
34001e26:	601a      	str	r2, [r3, #0]
  return -1;
34001e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001e2c:	4618      	mov	r0, r3
34001e2e:	3708      	adds	r7, #8
34001e30:	46bd      	mov	sp, r7
34001e32:	bd80      	pop	{r7, pc}

34001e34 <_exit>:

void _exit (int status)
{
34001e34:	b580      	push	{r7, lr}
34001e36:	b082      	sub	sp, #8
34001e38:	af00      	add	r7, sp, #0
34001e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
34001e3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34001e40:	6878      	ldr	r0, [r7, #4]
34001e42:	f7ff ffe7 	bl	34001e14 <_kill>
  while (1) {}    /* Make sure we hang here */
34001e46:	bf00      	nop
34001e48:	e7fd      	b.n	34001e46 <_exit+0x12>

34001e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001e4a:	b580      	push	{r7, lr}
34001e4c:	b086      	sub	sp, #24
34001e4e:	af00      	add	r7, sp, #0
34001e50:	60f8      	str	r0, [r7, #12]
34001e52:	60b9      	str	r1, [r7, #8]
34001e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001e56:	2300      	movs	r3, #0
34001e58:	617b      	str	r3, [r7, #20]
34001e5a:	e00a      	b.n	34001e72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
34001e5c:	f3af 8000 	nop.w
34001e60:	4601      	mov	r1, r0
34001e62:	68bb      	ldr	r3, [r7, #8]
34001e64:	1c5a      	adds	r2, r3, #1
34001e66:	60ba      	str	r2, [r7, #8]
34001e68:	b2ca      	uxtb	r2, r1
34001e6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001e6c:	697b      	ldr	r3, [r7, #20]
34001e6e:	3301      	adds	r3, #1
34001e70:	617b      	str	r3, [r7, #20]
34001e72:	697a      	ldr	r2, [r7, #20]
34001e74:	687b      	ldr	r3, [r7, #4]
34001e76:	429a      	cmp	r2, r3
34001e78:	dbf0      	blt.n	34001e5c <_read+0x12>
  }

  return len;
34001e7a:	687b      	ldr	r3, [r7, #4]
}
34001e7c:	4618      	mov	r0, r3
34001e7e:	3718      	adds	r7, #24
34001e80:	46bd      	mov	sp, r7
34001e82:	bd80      	pop	{r7, pc}

34001e84 <_close>:
  }
  return len;
}

int _close(int file)
{
34001e84:	b480      	push	{r7}
34001e86:	b083      	sub	sp, #12
34001e88:	af00      	add	r7, sp, #0
34001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34001e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001e90:	4618      	mov	r0, r3
34001e92:	370c      	adds	r7, #12
34001e94:	46bd      	mov	sp, r7
34001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
34001e9a:	4770      	bx	lr

34001e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
34001e9c:	b480      	push	{r7}
34001e9e:	b083      	sub	sp, #12
34001ea0:	af00      	add	r7, sp, #0
34001ea2:	6078      	str	r0, [r7, #4]
34001ea4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
34001ea6:	683b      	ldr	r3, [r7, #0]
34001ea8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34001eac:	605a      	str	r2, [r3, #4]
  return 0;
34001eae:	2300      	movs	r3, #0
}
34001eb0:	4618      	mov	r0, r3
34001eb2:	370c      	adds	r7, #12
34001eb4:	46bd      	mov	sp, r7
34001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34001eba:	4770      	bx	lr

34001ebc <_isatty>:

int _isatty(int file)
{
34001ebc:	b480      	push	{r7}
34001ebe:	b083      	sub	sp, #12
34001ec0:	af00      	add	r7, sp, #0
34001ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34001ec4:	2301      	movs	r3, #1
}
34001ec6:	4618      	mov	r0, r3
34001ec8:	370c      	adds	r7, #12
34001eca:	46bd      	mov	sp, r7
34001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ed0:	4770      	bx	lr

34001ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
34001ed2:	b480      	push	{r7}
34001ed4:	b085      	sub	sp, #20
34001ed6:	af00      	add	r7, sp, #0
34001ed8:	60f8      	str	r0, [r7, #12]
34001eda:	60b9      	str	r1, [r7, #8]
34001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
34001ede:	2300      	movs	r3, #0
}
34001ee0:	4618      	mov	r0, r3
34001ee2:	3714      	adds	r7, #20
34001ee4:	46bd      	mov	sp, r7
34001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
34001eea:	4770      	bx	lr

34001eec <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
34001eec:	b480      	push	{r7}
34001eee:	b083      	sub	sp, #12
34001ef0:	af00      	add	r7, sp, #0
34001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
34001ef4:	687b      	ldr	r3, [r7, #4]
34001ef6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34001efa:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
34001efc:	687b      	ldr	r3, [r7, #4]
34001efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34001f02:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
34001f04:	687b      	ldr	r3, [r7, #4]
34001f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001f0a:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001f0c:	687b      	ldr	r3, [r7, #4]
34001f0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001f12:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001f14:	687b      	ldr	r3, [r7, #4]
34001f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001f1a:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
34001f1c:	687b      	ldr	r3, [r7, #4]
34001f1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34001f22:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001f24:	687b      	ldr	r3, [r7, #4]
34001f26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001f2a:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
34001f2c:	687b      	ldr	r3, [r7, #4]
34001f2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34001f32:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001f34:	687b      	ldr	r3, [r7, #4]
34001f36:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34001f3a:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
34001f3c:	2300      	movs	r3, #0
};
34001f3e:	4618      	mov	r0, r3
34001f40:	370c      	adds	r7, #12
34001f42:	46bd      	mov	sp, r7
34001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
34001f48:	4770      	bx	lr

34001f4a <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
34001f4a:	b580      	push	{r7, lr}
34001f4c:	b09a      	sub	sp, #104	@ 0x68
34001f4e:	af00      	add	r7, sp, #0
34001f50:	6078      	str	r0, [r7, #4]
34001f52:	460b      	mov	r3, r1
34001f54:	70fb      	strb	r3, [r7, #3]
34001f56:	4613      	mov	r3, r2
34001f58:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
34001f5a:	f107 031c 	add.w	r3, r7, #28
34001f5e:	224c      	movs	r2, #76	@ 0x4c
34001f60:	2100      	movs	r1, #0
34001f62:	4618      	mov	r0, r3
34001f64:	f01a f982 	bl	3401c26c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001f68:	f107 0308 	add.w	r3, r7, #8
34001f6c:	2200      	movs	r2, #0
34001f6e:	601a      	str	r2, [r3, #0]
34001f70:	605a      	str	r2, [r3, #4]
34001f72:	609a      	str	r2, [r3, #8]
34001f74:	60da      	str	r2, [r3, #12]
34001f76:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001f78:	78fb      	ldrb	r3, [r7, #3]
34001f7a:	2b00      	cmp	r3, #0
34001f7c:	d105      	bne.n	34001f8a <MX25UM51245G_AutoPollingMemReady+0x40>
34001f7e:	78bb      	ldrb	r3, [r7, #2]
34001f80:	2b01      	cmp	r3, #1
34001f82:	d102      	bne.n	34001f8a <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
34001f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001f88:	e08b      	b.n	340020a2 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001f8a:	2300      	movs	r3, #0
34001f8c:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001f8e:	2300      	movs	r3, #0
34001f90:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001f92:	78fb      	ldrb	r3, [r7, #3]
34001f94:	2b00      	cmp	r3, #0
34001f96:	d101      	bne.n	34001f9c <MX25UM51245G_AutoPollingMemReady+0x52>
34001f98:	2301      	movs	r3, #1
34001f9a:	e000      	b.n	34001f9e <MX25UM51245G_AutoPollingMemReady+0x54>
34001f9c:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001fa0:	78bb      	ldrb	r3, [r7, #2]
34001fa2:	2b01      	cmp	r3, #1
34001fa4:	d101      	bne.n	34001faa <MX25UM51245G_AutoPollingMemReady+0x60>
34001fa6:	2308      	movs	r3, #8
34001fa8:	e000      	b.n	34001fac <MX25UM51245G_AutoPollingMemReady+0x62>
34001faa:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001fac:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001fae:	78fb      	ldrb	r3, [r7, #3]
34001fb0:	2b00      	cmp	r3, #0
34001fb2:	d101      	bne.n	34001fb8 <MX25UM51245G_AutoPollingMemReady+0x6e>
34001fb4:	2300      	movs	r3, #0
34001fb6:	e000      	b.n	34001fba <MX25UM51245G_AutoPollingMemReady+0x70>
34001fb8:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001fbc:	78fb      	ldrb	r3, [r7, #3]
34001fbe:	2b00      	cmp	r3, #0
34001fc0:	d101      	bne.n	34001fc6 <MX25UM51245G_AutoPollingMemReady+0x7c>
34001fc2:	2305      	movs	r3, #5
34001fc4:	e001      	b.n	34001fca <MX25UM51245G_AutoPollingMemReady+0x80>
34001fc6:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001fca:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001fcc:	78fb      	ldrb	r3, [r7, #3]
34001fce:	2b00      	cmp	r3, #0
34001fd0:	d101      	bne.n	34001fd6 <MX25UM51245G_AutoPollingMemReady+0x8c>
34001fd2:	2300      	movs	r3, #0
34001fd4:	e001      	b.n	34001fda <MX25UM51245G_AutoPollingMemReady+0x90>
34001fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001fdc:	78bb      	ldrb	r3, [r7, #2]
34001fde:	2b01      	cmp	r3, #1
34001fe0:	d102      	bne.n	34001fe8 <MX25UM51245G_AutoPollingMemReady+0x9e>
34001fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001fe6:	e000      	b.n	34001fea <MX25UM51245G_AutoPollingMemReady+0xa0>
34001fe8:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001fea:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001fec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address            = 0U;
34001ff2:	2300      	movs	r3, #0
34001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001ff6:	2300      	movs	r3, #0
34001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001ffa:	78fb      	ldrb	r3, [r7, #3]
34001ffc:	2b00      	cmp	r3, #0
34001ffe:	d102      	bne.n	34002006 <MX25UM51245G_AutoPollingMemReady+0xbc>
34002000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002004:	e001      	b.n	3400200a <MX25UM51245G_AutoPollingMemReady+0xc0>
34002006:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400200a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400200c:	78bb      	ldrb	r3, [r7, #2]
3400200e:	2b01      	cmp	r3, #1
34002010:	d102      	bne.n	34002018 <MX25UM51245G_AutoPollingMemReady+0xce>
34002012:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002016:	e000      	b.n	3400201a <MX25UM51245G_AutoPollingMemReady+0xd0>
34002018:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400201a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
3400201c:	78fb      	ldrb	r3, [r7, #3]
3400201e:	2b00      	cmp	r3, #0
34002020:	d006      	beq.n	34002030 <MX25UM51245G_AutoPollingMemReady+0xe6>
34002022:	78bb      	ldrb	r3, [r7, #2]
34002024:	2b01      	cmp	r3, #1
34002026:	d101      	bne.n	3400202c <MX25UM51245G_AutoPollingMemReady+0xe2>
34002028:	2305      	movs	r3, #5
3400202a:	e002      	b.n	34002032 <MX25UM51245G_AutoPollingMemReady+0xe8>
3400202c:	2304      	movs	r3, #4
3400202e:	e000      	b.n	34002032 <MX25UM51245G_AutoPollingMemReady+0xe8>
34002030:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34002032:	663b      	str	r3, [r7, #96]	@ 0x60
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34002034:	78bb      	ldrb	r3, [r7, #2]
34002036:	2b01      	cmp	r3, #1
34002038:	d101      	bne.n	3400203e <MX25UM51245G_AutoPollingMemReady+0xf4>
3400203a:	2302      	movs	r3, #2
3400203c:	e000      	b.n	34002040 <MX25UM51245G_AutoPollingMemReady+0xf6>
3400203e:	2301      	movs	r3, #1
34002040:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34002042:	78bb      	ldrb	r3, [r7, #2]
34002044:	2b01      	cmp	r3, #1
34002046:	d102      	bne.n	3400204e <MX25UM51245G_AutoPollingMemReady+0x104>
34002048:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400204c:	e000      	b.n	34002050 <MX25UM51245G_AutoPollingMemReady+0x106>
3400204e:	2300      	movs	r3, #0
34002050:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  s_config.MatchValue    = 0U;
34002052:	2300      	movs	r3, #0
34002054:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34002056:	2301      	movs	r3, #1
34002058:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
3400205a:	2300      	movs	r3, #0
3400205c:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
3400205e:	2310      	movs	r3, #16
34002060:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34002062:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34002066:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002068:	f107 031c 	add.w	r3, r7, #28
3400206c:	f241 3288 	movw	r2, #5000	@ 0x1388
34002070:	4619      	mov	r1, r3
34002072:	6878      	ldr	r0, [r7, #4]
34002074:	f014 ff00 	bl	34016e78 <HAL_XSPI_Command>
34002078:	4603      	mov	r3, r0
3400207a:	2b00      	cmp	r3, #0
3400207c:	d002      	beq.n	34002084 <MX25UM51245G_AutoPollingMemReady+0x13a>
  {
    return MX25UM51245G_ERROR;
3400207e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002082:	e00e      	b.n	340020a2 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002084:	f107 0308 	add.w	r3, r7, #8
34002088:	f241 3288 	movw	r2, #5000	@ 0x1388
3400208c:	4619      	mov	r1, r3
3400208e:	6878      	ldr	r0, [r7, #4]
34002090:	f015 fa1a 	bl	340174c8 <HAL_XSPI_AutoPolling>
34002094:	4603      	mov	r3, r0
34002096:	2b00      	cmp	r3, #0
34002098:	d002      	beq.n	340020a0 <MX25UM51245G_AutoPollingMemReady+0x156>
  {
    return MX25UM51245G_ERROR;
3400209a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400209e:	e000      	b.n	340020a2 <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  return MX25UM51245G_OK;
340020a0:	2300      	movs	r3, #0
}
340020a2:	4618      	mov	r0, r3
340020a4:	3768      	adds	r7, #104	@ 0x68
340020a6:	46bd      	mov	sp, r7
340020a8:	bd80      	pop	{r7, pc}

340020aa <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340020aa:	b580      	push	{r7, lr}
340020ac:	b09a      	sub	sp, #104	@ 0x68
340020ae:	af00      	add	r7, sp, #0
340020b0:	6078      	str	r0, [r7, #4]
340020b2:	460b      	mov	r3, r1
340020b4:	70fb      	strb	r3, [r7, #3]
340020b6:	4613      	mov	r3, r2
340020b8:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
340020ba:	f107 031c 	add.w	r3, r7, #28
340020be:	224c      	movs	r2, #76	@ 0x4c
340020c0:	2100      	movs	r1, #0
340020c2:	4618      	mov	r0, r3
340020c4:	f01a f8d2 	bl	3401c26c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340020c8:	f107 030c 	add.w	r3, r7, #12
340020cc:	2200      	movs	r2, #0
340020ce:	601a      	str	r2, [r3, #0]
340020d0:	605a      	str	r2, [r3, #4]
340020d2:	609a      	str	r2, [r3, #8]
340020d4:	60da      	str	r2, [r3, #12]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340020d6:	78fb      	ldrb	r3, [r7, #3]
340020d8:	2b01      	cmp	r3, #1
340020da:	d105      	bne.n	340020e8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
340020dc:	78bb      	ldrb	r3, [r7, #2]
340020de:	2b00      	cmp	r3, #0
340020e0:	d102      	bne.n	340020e8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
  {
    return MX25UM51245G_ERROR;
340020e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020e6:	e086      	b.n	340021f6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340020e8:	2301      	movs	r3, #1
340020ea:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340020ec:	2300      	movs	r3, #0
340020ee:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340020f0:	78fb      	ldrb	r3, [r7, #3]
340020f2:	2b00      	cmp	r3, #0
340020f4:	d101      	bne.n	340020fa <MX25UM51245G_EnableSTRMemoryMappedMode+0x50>
340020f6:	2301      	movs	r3, #1
340020f8:	e000      	b.n	340020fc <MX25UM51245G_EnableSTRMemoryMappedMode+0x52>
340020fa:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340020fe:	2300      	movs	r3, #0
34002100:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002102:	78fb      	ldrb	r3, [r7, #3]
34002104:	2b00      	cmp	r3, #0
34002106:	d101      	bne.n	3400210c <MX25UM51245G_EnableSTRMemoryMappedMode+0x62>
34002108:	2300      	movs	r3, #0
3400210a:	e000      	b.n	3400210e <MX25UM51245G_EnableSTRMemoryMappedMode+0x64>
3400210c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
34002110:	78fb      	ldrb	r3, [r7, #3]
34002112:	2b00      	cmp	r3, #0
34002114:	d106      	bne.n	34002124 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
34002116:	78bb      	ldrb	r3, [r7, #2]
34002118:	2b00      	cmp	r3, #0
3400211a:	d101      	bne.n	34002120 <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
3400211c:	230b      	movs	r3, #11
3400211e:	e003      	b.n	34002128 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34002120:	230c      	movs	r3, #12
34002122:	e001      	b.n	34002128 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34002124:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002128:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400212a:	78fb      	ldrb	r3, [r7, #3]
3400212c:	2b00      	cmp	r3, #0
3400212e:	d102      	bne.n	34002136 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
34002130:	f44f 7380 	mov.w	r3, #256	@ 0x100
34002134:	e001      	b.n	3400213a <MX25UM51245G_EnableSTRMemoryMappedMode+0x90>
34002136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400213a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
3400213c:	2300      	movs	r3, #0
3400213e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
34002140:	78bb      	ldrb	r3, [r7, #2]
34002142:	2b00      	cmp	r3, #0
34002144:	d102      	bne.n	3400214c <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
34002146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400214a:	e001      	b.n	34002150 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa6>
3400214c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34002150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002152:	2300      	movs	r3, #0
34002154:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34002156:	78fb      	ldrb	r3, [r7, #3]
34002158:	2b00      	cmp	r3, #0
3400215a:	d102      	bne.n	34002162 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
3400215c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002160:	e001      	b.n	34002166 <MX25UM51245G_EnableSTRMemoryMappedMode+0xbc>
34002162:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34002166:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
34002168:	2300      	movs	r3, #0
3400216a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
3400216c:	78fb      	ldrb	r3, [r7, #3]
3400216e:	2b00      	cmp	r3, #0
34002170:	d101      	bne.n	34002176 <MX25UM51245G_EnableSTRMemoryMappedMode+0xcc>
34002172:	2308      	movs	r3, #8
34002174:	e000      	b.n	34002178 <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
34002176:	2306      	movs	r3, #6
34002178:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400217a:	2300      	movs	r3, #0
3400217c:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400217e:	f107 031c 	add.w	r3, r7, #28
34002182:	f241 3288 	movw	r2, #5000	@ 0x1388
34002186:	4619      	mov	r1, r3
34002188:	6878      	ldr	r0, [r7, #4]
3400218a:	f014 fe75 	bl	34016e78 <HAL_XSPI_Command>
3400218e:	4603      	mov	r3, r0
34002190:	2b00      	cmp	r3, #0
34002192:	d002      	beq.n	3400219a <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
34002194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002198:	e02d      	b.n	340021f6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
3400219a:	2302      	movs	r3, #2
3400219c:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
3400219e:	78fb      	ldrb	r3, [r7, #3]
340021a0:	2b00      	cmp	r3, #0
340021a2:	d106      	bne.n	340021b2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
340021a4:	78bb      	ldrb	r3, [r7, #2]
340021a6:	2b00      	cmp	r3, #0
340021a8:	d101      	bne.n	340021ae <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
340021aa:	2302      	movs	r3, #2
340021ac:	e003      	b.n	340021b6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
340021ae:	2312      	movs	r3, #18
340021b0:	e001      	b.n	340021b6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
340021b2:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340021b6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles        = 0U;
340021b8:	2300      	movs	r3, #0
340021ba:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340021bc:	f107 031c 	add.w	r3, r7, #28
340021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
340021c4:	4619      	mov	r1, r3
340021c6:	6878      	ldr	r0, [r7, #4]
340021c8:	f014 fe56 	bl	34016e78 <HAL_XSPI_Command>
340021cc:	4603      	mov	r3, r0
340021ce:	2b00      	cmp	r3, #0
340021d0:	d002      	beq.n	340021d8 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
340021d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340021d6:	e00e      	b.n	340021f6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340021d8:	2300      	movs	r3, #0
340021da:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340021dc:	f107 030c 	add.w	r3, r7, #12
340021e0:	4619      	mov	r1, r3
340021e2:	6878      	ldr	r0, [r7, #4]
340021e4:	f015 fa3a 	bl	3401765c <HAL_XSPI_MemoryMapped>
340021e8:	4603      	mov	r3, r0
340021ea:	2b00      	cmp	r3, #0
340021ec:	d002      	beq.n	340021f4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
340021ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340021f2:	e000      	b.n	340021f6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
340021f4:	2300      	movs	r3, #0
}
340021f6:	4618      	mov	r0, r3
340021f8:	3768      	adds	r7, #104	@ 0x68
340021fa:	46bd      	mov	sp, r7
340021fc:	bd80      	pop	{r7, pc}

340021fe <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
340021fe:	b580      	push	{r7, lr}
34002200:	b09a      	sub	sp, #104	@ 0x68
34002202:	af00      	add	r7, sp, #0
34002204:	6078      	str	r0, [r7, #4]
34002206:	460b      	mov	r3, r1
34002208:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
3400220a:	f107 031c 	add.w	r3, r7, #28
3400220e:	224c      	movs	r2, #76	@ 0x4c
34002210:	2100      	movs	r1, #0
34002212:	4618      	mov	r0, r3
34002214:	f01a f82a 	bl	3401c26c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34002218:	f107 030c 	add.w	r3, r7, #12
3400221c:	2200      	movs	r2, #0
3400221e:	601a      	str	r2, [r3, #0]
34002220:	605a      	str	r2, [r3, #4]
34002222:	609a      	str	r2, [r3, #8]
34002224:	60da      	str	r2, [r3, #12]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34002226:	2301      	movs	r3, #1
34002228:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400222a:	2300      	movs	r3, #0
3400222c:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3400222e:	2304      	movs	r3, #4
34002230:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34002232:	2308      	movs	r3, #8
34002234:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34002236:	2310      	movs	r3, #16
34002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
3400223a:	f64e 6311 	movw	r3, #60945	@ 0xee11
3400223e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34002240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002244:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34002246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400224a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400224c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002252:	2300      	movs	r3, #0
34002254:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34002256:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400225a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3400225c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002260:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34002262:	2306      	movs	r3, #6
34002264:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34002266:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400226a:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400226c:	f107 031c 	add.w	r3, r7, #28
34002270:	f241 3288 	movw	r2, #5000	@ 0x1388
34002274:	4619      	mov	r1, r3
34002276:	6878      	ldr	r0, [r7, #4]
34002278:	f014 fdfe 	bl	34016e78 <HAL_XSPI_Command>
3400227c:	4603      	mov	r3, r0
3400227e:	2b00      	cmp	r3, #0
34002280:	d002      	beq.n	34002288 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
34002282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002286:	e025      	b.n	340022d4 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34002288:	2302      	movs	r3, #2
3400228a:	61fb      	str	r3, [r7, #28]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
3400228c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34002290:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles   = 0U;
34002292:	2300      	movs	r3, #0
34002294:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34002296:	2300      	movs	r3, #0
34002298:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400229a:	f107 031c 	add.w	r3, r7, #28
3400229e:	f241 3288 	movw	r2, #5000	@ 0x1388
340022a2:	4619      	mov	r1, r3
340022a4:	6878      	ldr	r0, [r7, #4]
340022a6:	f014 fde7 	bl	34016e78 <HAL_XSPI_Command>
340022aa:	4603      	mov	r3, r0
340022ac:	2b00      	cmp	r3, #0
340022ae:	d002      	beq.n	340022b6 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
340022b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340022b4:	e00e      	b.n	340022d4 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
340022b6:	2300      	movs	r3, #0
340022b8:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
340022ba:	f107 030c 	add.w	r3, r7, #12
340022be:	4619      	mov	r1, r3
340022c0:	6878      	ldr	r0, [r7, #4]
340022c2:	f015 f9cb 	bl	3401765c <HAL_XSPI_MemoryMapped>
340022c6:	4603      	mov	r3, r0
340022c8:	2b00      	cmp	r3, #0
340022ca:	d002      	beq.n	340022d2 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
340022cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340022d0:	e000      	b.n	340022d4 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
340022d2:	2300      	movs	r3, #0
}
340022d4:	4618      	mov	r0, r3
340022d6:	3768      	adds	r7, #104	@ 0x68
340022d8:	46bd      	mov	sp, r7
340022da:	bd80      	pop	{r7, pc}

340022dc <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340022dc:	b580      	push	{r7, lr}
340022de:	b09a      	sub	sp, #104	@ 0x68
340022e0:	af00      	add	r7, sp, #0
340022e2:	6078      	str	r0, [r7, #4]
340022e4:	460b      	mov	r3, r1
340022e6:	70fb      	strb	r3, [r7, #3]
340022e8:	4613      	mov	r3, r2
340022ea:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
340022ec:	f107 031c 	add.w	r3, r7, #28
340022f0:	224c      	movs	r2, #76	@ 0x4c
340022f2:	2100      	movs	r1, #0
340022f4:	4618      	mov	r0, r3
340022f6:	f019 ffb9 	bl	3401c26c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
340022fa:	f107 0308 	add.w	r3, r7, #8
340022fe:	2200      	movs	r2, #0
34002300:	601a      	str	r2, [r3, #0]
34002302:	605a      	str	r2, [r3, #4]
34002304:	609a      	str	r2, [r3, #8]
34002306:	60da      	str	r2, [r3, #12]
34002308:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
3400230a:	78fb      	ldrb	r3, [r7, #3]
3400230c:	2b00      	cmp	r3, #0
3400230e:	d105      	bne.n	3400231c <MX25UM51245G_WriteEnable+0x40>
34002310:	78bb      	ldrb	r3, [r7, #2]
34002312:	2b01      	cmp	r3, #1
34002314:	d102      	bne.n	3400231c <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
34002316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400231a:	e0a9      	b.n	34002470 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
3400231c:	2300      	movs	r3, #0
3400231e:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002320:	2300      	movs	r3, #0
34002322:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34002324:	78fb      	ldrb	r3, [r7, #3]
34002326:	2b00      	cmp	r3, #0
34002328:	d101      	bne.n	3400232e <MX25UM51245G_WriteEnable+0x52>
3400232a:	2301      	movs	r3, #1
3400232c:	e000      	b.n	34002330 <MX25UM51245G_WriteEnable+0x54>
3400232e:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002330:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34002332:	78bb      	ldrb	r3, [r7, #2]
34002334:	2b01      	cmp	r3, #1
34002336:	d101      	bne.n	3400233c <MX25UM51245G_WriteEnable+0x60>
34002338:	2308      	movs	r3, #8
3400233a:	e000      	b.n	3400233e <MX25UM51245G_WriteEnable+0x62>
3400233c:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400233e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002340:	78fb      	ldrb	r3, [r7, #3]
34002342:	2b00      	cmp	r3, #0
34002344:	d101      	bne.n	3400234a <MX25UM51245G_WriteEnable+0x6e>
34002346:	2300      	movs	r3, #0
34002348:	e000      	b.n	3400234c <MX25UM51245G_WriteEnable+0x70>
3400234a:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
3400234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
3400234e:	78fb      	ldrb	r3, [r7, #3]
34002350:	2b00      	cmp	r3, #0
34002352:	d101      	bne.n	34002358 <MX25UM51245G_WriteEnable+0x7c>
34002354:	2306      	movs	r3, #6
34002356:	e001      	b.n	3400235c <MX25UM51245G_WriteEnable+0x80>
34002358:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
3400235c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3400235e:	2300      	movs	r3, #0
34002360:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002362:	2300      	movs	r3, #0
34002364:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34002366:	2300      	movs	r3, #0
34002368:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
3400236a:	2300      	movs	r3, #0
3400236c:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400236e:	2300      	movs	r3, #0
34002370:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002372:	f107 031c 	add.w	r3, r7, #28
34002376:	f241 3288 	movw	r2, #5000	@ 0x1388
3400237a:	4619      	mov	r1, r3
3400237c:	6878      	ldr	r0, [r7, #4]
3400237e:	f014 fd7b 	bl	34016e78 <HAL_XSPI_Command>
34002382:	4603      	mov	r3, r0
34002384:	2b00      	cmp	r3, #0
34002386:	d002      	beq.n	3400238e <MX25UM51245G_WriteEnable+0xb2>
  {
    return MX25UM51245G_ERROR;
34002388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400238c:	e070      	b.n	34002470 <MX25UM51245G_WriteEnable+0x194>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
3400238e:	78fb      	ldrb	r3, [r7, #3]
34002390:	2b00      	cmp	r3, #0
34002392:	d101      	bne.n	34002398 <MX25UM51245G_WriteEnable+0xbc>
34002394:	2305      	movs	r3, #5
34002396:	e001      	b.n	3400239c <MX25UM51245G_WriteEnable+0xc0>
34002398:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
3400239c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400239e:	78fb      	ldrb	r3, [r7, #3]
340023a0:	2b00      	cmp	r3, #0
340023a2:	d101      	bne.n	340023a8 <MX25UM51245G_WriteEnable+0xcc>
340023a4:	2300      	movs	r3, #0
340023a6:	e001      	b.n	340023ac <MX25UM51245G_WriteEnable+0xd0>
340023a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340023ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
340023ae:	78bb      	ldrb	r3, [r7, #2]
340023b0:	2b01      	cmp	r3, #1
340023b2:	d102      	bne.n	340023ba <MX25UM51245G_WriteEnable+0xde>
340023b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
340023b8:	e000      	b.n	340023bc <MX25UM51245G_WriteEnable+0xe0>
340023ba:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340023bc:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
340023be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address        = 0U;
340023c4:	2300      	movs	r3, #0
340023c6:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
340023c8:	78fb      	ldrb	r3, [r7, #3]
340023ca:	2b00      	cmp	r3, #0
340023cc:	d102      	bne.n	340023d4 <MX25UM51245G_WriteEnable+0xf8>
340023ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340023d2:	e001      	b.n	340023d8 <MX25UM51245G_WriteEnable+0xfc>
340023d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
340023d8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
340023da:	78bb      	ldrb	r3, [r7, #2]
340023dc:	2b01      	cmp	r3, #1
340023de:	d102      	bne.n	340023e6 <MX25UM51245G_WriteEnable+0x10a>
340023e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
340023e4:	e000      	b.n	340023e8 <MX25UM51245G_WriteEnable+0x10c>
340023e6:	2300      	movs	r3, #0
340023e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
340023ea:	78fb      	ldrb	r3, [r7, #3]
340023ec:	2b00      	cmp	r3, #0
340023ee:	d006      	beq.n	340023fe <MX25UM51245G_WriteEnable+0x122>
340023f0:	78bb      	ldrb	r3, [r7, #2]
340023f2:	2b01      	cmp	r3, #1
340023f4:	d101      	bne.n	340023fa <MX25UM51245G_WriteEnable+0x11e>
340023f6:	2305      	movs	r3, #5
340023f8:	e002      	b.n	34002400 <MX25UM51245G_WriteEnable+0x124>
340023fa:	2304      	movs	r3, #4
340023fc:	e000      	b.n	34002400 <MX25UM51245G_WriteEnable+0x124>
340023fe:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34002400:	663b      	str	r3, [r7, #96]	@ 0x60
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34002402:	78bb      	ldrb	r3, [r7, #2]
34002404:	2b01      	cmp	r3, #1
34002406:	d101      	bne.n	3400240c <MX25UM51245G_WriteEnable+0x130>
34002408:	2302      	movs	r3, #2
3400240a:	e000      	b.n	3400240e <MX25UM51245G_WriteEnable+0x132>
3400240c:	2301      	movs	r3, #1
3400240e:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34002410:	78bb      	ldrb	r3, [r7, #2]
34002412:	2b01      	cmp	r3, #1
34002414:	d102      	bne.n	3400241c <MX25UM51245G_WriteEnable+0x140>
34002416:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400241a:	e000      	b.n	3400241e <MX25UM51245G_WriteEnable+0x142>
3400241c:	2300      	movs	r3, #0
3400241e:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002420:	f107 031c 	add.w	r3, r7, #28
34002424:	f241 3288 	movw	r2, #5000	@ 0x1388
34002428:	4619      	mov	r1, r3
3400242a:	6878      	ldr	r0, [r7, #4]
3400242c:	f014 fd24 	bl	34016e78 <HAL_XSPI_Command>
34002430:	4603      	mov	r3, r0
34002432:	2b00      	cmp	r3, #0
34002434:	d002      	beq.n	3400243c <MX25UM51245G_WriteEnable+0x160>
  {
    return MX25UM51245G_ERROR;
34002436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400243a:	e019      	b.n	34002470 <MX25UM51245G_WriteEnable+0x194>
  }

  s_config.MatchValue      = 2U;
3400243c:	2302      	movs	r3, #2
3400243e:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask       = 2U;
34002440:	2302      	movs	r3, #2
34002442:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34002444:	2300      	movs	r3, #0
34002446:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34002448:	2310      	movs	r3, #16
3400244a:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400244c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34002450:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002452:	f107 0308 	add.w	r3, r7, #8
34002456:	f241 3288 	movw	r2, #5000	@ 0x1388
3400245a:	4619      	mov	r1, r3
3400245c:	6878      	ldr	r0, [r7, #4]
3400245e:	f015 f833 	bl	340174c8 <HAL_XSPI_AutoPolling>
34002462:	4603      	mov	r3, r0
34002464:	2b00      	cmp	r3, #0
34002466:	d002      	beq.n	3400246e <MX25UM51245G_WriteEnable+0x192>
  {
    return MX25UM51245G_ERROR;
34002468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400246c:	e000      	b.n	34002470 <MX25UM51245G_WriteEnable+0x194>
  }

  return MX25UM51245G_OK;
3400246e:	2300      	movs	r3, #0
}
34002470:	4618      	mov	r0, r3
34002472:	3768      	adds	r7, #104	@ 0x68
34002474:	46bd      	mov	sp, r7
34002476:	bd80      	pop	{r7, pc}

34002478 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34002478:	b580      	push	{r7, lr}
3400247a:	b098      	sub	sp, #96	@ 0x60
3400247c:	af00      	add	r7, sp, #0
3400247e:	60f8      	str	r0, [r7, #12]
34002480:	607b      	str	r3, [r7, #4]
34002482:	460b      	mov	r3, r1
34002484:	72fb      	strb	r3, [r7, #11]
34002486:	4613      	mov	r3, r2
34002488:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
3400248a:	f107 0314 	add.w	r3, r7, #20
3400248e:	224c      	movs	r2, #76	@ 0x4c
34002490:	2100      	movs	r1, #0
34002492:	4618      	mov	r0, r3
34002494:	f019 feea 	bl	3401c26c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002498:	7afb      	ldrb	r3, [r7, #11]
3400249a:	2b00      	cmp	r3, #0
3400249c:	d105      	bne.n	340024aa <MX25UM51245G_WriteCfg2Register+0x32>
3400249e:	7abb      	ldrb	r3, [r7, #10]
340024a0:	2b01      	cmp	r3, #1
340024a2:	d102      	bne.n	340024aa <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
340024a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340024a8:	e075      	b.n	34002596 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340024aa:	2300      	movs	r3, #0
340024ac:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340024ae:	2300      	movs	r3, #0
340024b0:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340024b2:	7afb      	ldrb	r3, [r7, #11]
340024b4:	2b00      	cmp	r3, #0
340024b6:	d101      	bne.n	340024bc <MX25UM51245G_WriteCfg2Register+0x44>
340024b8:	2301      	movs	r3, #1
340024ba:	e000      	b.n	340024be <MX25UM51245G_WriteCfg2Register+0x46>
340024bc:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340024be:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340024c0:	7abb      	ldrb	r3, [r7, #10]
340024c2:	2b01      	cmp	r3, #1
340024c4:	d101      	bne.n	340024ca <MX25UM51245G_WriteCfg2Register+0x52>
340024c6:	2308      	movs	r3, #8
340024c8:	e000      	b.n	340024cc <MX25UM51245G_WriteCfg2Register+0x54>
340024ca:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340024ce:	7afb      	ldrb	r3, [r7, #11]
340024d0:	2b00      	cmp	r3, #0
340024d2:	d101      	bne.n	340024d8 <MX25UM51245G_WriteCfg2Register+0x60>
340024d4:	2300      	movs	r3, #0
340024d6:	e000      	b.n	340024da <MX25UM51245G_WriteCfg2Register+0x62>
340024d8:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340024da:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
340024dc:	7afb      	ldrb	r3, [r7, #11]
340024de:	2b00      	cmp	r3, #0
340024e0:	d101      	bne.n	340024e6 <MX25UM51245G_WriteCfg2Register+0x6e>
340024e2:	2372      	movs	r3, #114	@ 0x72
340024e4:	e001      	b.n	340024ea <MX25UM51245G_WriteCfg2Register+0x72>
340024e6:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340024ea:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
340024ec:	7afb      	ldrb	r3, [r7, #11]
340024ee:	2b00      	cmp	r3, #0
340024f0:	d102      	bne.n	340024f8 <MX25UM51245G_WriteCfg2Register+0x80>
340024f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
340024f6:	e001      	b.n	340024fc <MX25UM51245G_WriteCfg2Register+0x84>
340024f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340024fc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340024fe:	7abb      	ldrb	r3, [r7, #10]
34002500:	2b01      	cmp	r3, #1
34002502:	d102      	bne.n	3400250a <MX25UM51245G_WriteCfg2Register+0x92>
34002504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34002508:	e000      	b.n	3400250c <MX25UM51245G_WriteCfg2Register+0x94>
3400250a:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
3400250c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3400250e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002512:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = WriteAddr;
34002514:	687b      	ldr	r3, [r7, #4]
34002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002518:	2300      	movs	r3, #0
3400251a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400251c:	7afb      	ldrb	r3, [r7, #11]
3400251e:	2b00      	cmp	r3, #0
34002520:	d102      	bne.n	34002528 <MX25UM51245G_WriteCfg2Register+0xb0>
34002522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34002526:	e001      	b.n	3400252c <MX25UM51245G_WriteCfg2Register+0xb4>
34002528:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3400252c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
3400252e:	7abb      	ldrb	r3, [r7, #10]
34002530:	2b01      	cmp	r3, #1
34002532:	d102      	bne.n	3400253a <MX25UM51245G_WriteCfg2Register+0xc2>
34002534:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34002538:	e000      	b.n	3400253c <MX25UM51245G_WriteCfg2Register+0xc4>
3400253a:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
3400253c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
3400253e:	2300      	movs	r3, #0
34002540:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34002542:	7afb      	ldrb	r3, [r7, #11]
34002544:	2b00      	cmp	r3, #0
34002546:	d006      	beq.n	34002556 <MX25UM51245G_WriteCfg2Register+0xde>
34002548:	7abb      	ldrb	r3, [r7, #10]
3400254a:	2b01      	cmp	r3, #1
3400254c:	d101      	bne.n	34002552 <MX25UM51245G_WriteCfg2Register+0xda>
3400254e:	2302      	movs	r3, #2
34002550:	e002      	b.n	34002558 <MX25UM51245G_WriteCfg2Register+0xe0>
34002552:	2301      	movs	r3, #1
34002554:	e000      	b.n	34002558 <MX25UM51245G_WriteCfg2Register+0xe0>
34002556:	2301      	movs	r3, #1
34002558:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400255a:	2300      	movs	r3, #0
3400255c:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400255e:	f107 0314 	add.w	r3, r7, #20
34002562:	f241 3288 	movw	r2, #5000	@ 0x1388
34002566:	4619      	mov	r1, r3
34002568:	68f8      	ldr	r0, [r7, #12]
3400256a:	f014 fc85 	bl	34016e78 <HAL_XSPI_Command>
3400256e:	4603      	mov	r3, r0
34002570:	2b00      	cmp	r3, #0
34002572:	d002      	beq.n	3400257a <MX25UM51245G_WriteCfg2Register+0x102>
  {
    return MX25UM51245G_ERROR;
34002574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002578:	e00d      	b.n	34002596 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400257a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400257e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
34002582:	68f8      	ldr	r0, [r7, #12]
34002584:	f014 fe8a 	bl	3401729c <HAL_XSPI_Transmit>
34002588:	4603      	mov	r3, r0
3400258a:	2b00      	cmp	r3, #0
3400258c:	d002      	beq.n	34002594 <MX25UM51245G_WriteCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
3400258e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002592:	e000      	b.n	34002596 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  return MX25UM51245G_OK;
34002594:	2300      	movs	r3, #0
}
34002596:	4618      	mov	r0, r3
34002598:	3760      	adds	r7, #96	@ 0x60
3400259a:	46bd      	mov	sp, r7
3400259c:	bd80      	pop	{r7, pc}

3400259e <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
3400259e:	b580      	push	{r7, lr}
340025a0:	b098      	sub	sp, #96	@ 0x60
340025a2:	af00      	add	r7, sp, #0
340025a4:	60f8      	str	r0, [r7, #12]
340025a6:	607b      	str	r3, [r7, #4]
340025a8:	460b      	mov	r3, r1
340025aa:	72fb      	strb	r3, [r7, #11]
340025ac:	4613      	mov	r3, r2
340025ae:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
340025b0:	f107 0314 	add.w	r3, r7, #20
340025b4:	224c      	movs	r2, #76	@ 0x4c
340025b6:	2100      	movs	r1, #0
340025b8:	4618      	mov	r0, r3
340025ba:	f019 fe57 	bl	3401c26c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340025be:	7afb      	ldrb	r3, [r7, #11]
340025c0:	2b00      	cmp	r3, #0
340025c2:	d105      	bne.n	340025d0 <MX25UM51245G_ReadCfg2Register+0x32>
340025c4:	7abb      	ldrb	r3, [r7, #10]
340025c6:	2b01      	cmp	r3, #1
340025c8:	d102      	bne.n	340025d0 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
340025ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340025ce:	e07f      	b.n	340026d0 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340025d0:	2300      	movs	r3, #0
340025d2:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340025d4:	2300      	movs	r3, #0
340025d6:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340025d8:	7afb      	ldrb	r3, [r7, #11]
340025da:	2b00      	cmp	r3, #0
340025dc:	d101      	bne.n	340025e2 <MX25UM51245G_ReadCfg2Register+0x44>
340025de:	2301      	movs	r3, #1
340025e0:	e000      	b.n	340025e4 <MX25UM51245G_ReadCfg2Register+0x46>
340025e2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340025e4:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340025e6:	7abb      	ldrb	r3, [r7, #10]
340025e8:	2b01      	cmp	r3, #1
340025ea:	d101      	bne.n	340025f0 <MX25UM51245G_ReadCfg2Register+0x52>
340025ec:	2308      	movs	r3, #8
340025ee:	e000      	b.n	340025f2 <MX25UM51245G_ReadCfg2Register+0x54>
340025f0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340025f4:	7afb      	ldrb	r3, [r7, #11]
340025f6:	2b00      	cmp	r3, #0
340025f8:	d101      	bne.n	340025fe <MX25UM51245G_ReadCfg2Register+0x60>
340025fa:	2300      	movs	r3, #0
340025fc:	e000      	b.n	34002600 <MX25UM51245G_ReadCfg2Register+0x62>
340025fe:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002600:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
34002602:	7afb      	ldrb	r3, [r7, #11]
34002604:	2b00      	cmp	r3, #0
34002606:	d101      	bne.n	3400260c <MX25UM51245G_ReadCfg2Register+0x6e>
34002608:	2371      	movs	r3, #113	@ 0x71
3400260a:	e001      	b.n	34002610 <MX25UM51245G_ReadCfg2Register+0x72>
3400260c:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002610:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34002612:	7afb      	ldrb	r3, [r7, #11]
34002614:	2b00      	cmp	r3, #0
34002616:	d102      	bne.n	3400261e <MX25UM51245G_ReadCfg2Register+0x80>
34002618:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400261c:	e001      	b.n	34002622 <MX25UM51245G_ReadCfg2Register+0x84>
3400261e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002622:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34002624:	7abb      	ldrb	r3, [r7, #10]
34002626:	2b01      	cmp	r3, #1
34002628:	d102      	bne.n	34002630 <MX25UM51245G_ReadCfg2Register+0x92>
3400262a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400262e:	e000      	b.n	34002632 <MX25UM51245G_ReadCfg2Register+0x94>
34002630:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34002632:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34002634:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34002638:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = ReadAddr;
3400263a:	687b      	ldr	r3, [r7, #4]
3400263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400263e:	2300      	movs	r3, #0
34002640:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34002642:	7afb      	ldrb	r3, [r7, #11]
34002644:	2b00      	cmp	r3, #0
34002646:	d102      	bne.n	3400264e <MX25UM51245G_ReadCfg2Register+0xb0>
34002648:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400264c:	e001      	b.n	34002652 <MX25UM51245G_ReadCfg2Register+0xb4>
3400264e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34002652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34002654:	7abb      	ldrb	r3, [r7, #10]
34002656:	2b01      	cmp	r3, #1
34002658:	d102      	bne.n	34002660 <MX25UM51245G_ReadCfg2Register+0xc2>
3400265a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3400265e:	e000      	b.n	34002662 <MX25UM51245G_ReadCfg2Register+0xc4>
34002660:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34002662:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34002664:	7afb      	ldrb	r3, [r7, #11]
34002666:	2b00      	cmp	r3, #0
34002668:	d006      	beq.n	34002678 <MX25UM51245G_ReadCfg2Register+0xda>
3400266a:	7abb      	ldrb	r3, [r7, #10]
3400266c:	2b01      	cmp	r3, #1
3400266e:	d101      	bne.n	34002674 <MX25UM51245G_ReadCfg2Register+0xd6>
34002670:	2305      	movs	r3, #5
34002672:	e002      	b.n	3400267a <MX25UM51245G_ReadCfg2Register+0xdc>
34002674:	2304      	movs	r3, #4
34002676:	e000      	b.n	3400267a <MX25UM51245G_ReadCfg2Register+0xdc>
34002678:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400267a:	65bb      	str	r3, [r7, #88]	@ 0x58
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
3400267c:	7abb      	ldrb	r3, [r7, #10]
3400267e:	2b01      	cmp	r3, #1
34002680:	d101      	bne.n	34002686 <MX25UM51245G_ReadCfg2Register+0xe8>
34002682:	2302      	movs	r3, #2
34002684:	e000      	b.n	34002688 <MX25UM51245G_ReadCfg2Register+0xea>
34002686:	2301      	movs	r3, #1
34002688:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400268a:	7abb      	ldrb	r3, [r7, #10]
3400268c:	2b01      	cmp	r3, #1
3400268e:	d102      	bne.n	34002696 <MX25UM51245G_ReadCfg2Register+0xf8>
34002690:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34002694:	e000      	b.n	34002698 <MX25UM51245G_ReadCfg2Register+0xfa>
34002696:	2300      	movs	r3, #0
34002698:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400269a:	f107 0314 	add.w	r3, r7, #20
3400269e:	f241 3288 	movw	r2, #5000	@ 0x1388
340026a2:	4619      	mov	r1, r3
340026a4:	68f8      	ldr	r0, [r7, #12]
340026a6:	f014 fbe7 	bl	34016e78 <HAL_XSPI_Command>
340026aa:	4603      	mov	r3, r0
340026ac:	2b00      	cmp	r3, #0
340026ae:	d002      	beq.n	340026b6 <MX25UM51245G_ReadCfg2Register+0x118>
  {
    return MX25UM51245G_ERROR;
340026b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340026b4:	e00c      	b.n	340026d0 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
340026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
340026ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
340026bc:	68f8      	ldr	r0, [r7, #12]
340026be:	f014 fe60 	bl	34017382 <HAL_XSPI_Receive>
340026c2:	4603      	mov	r3, r0
340026c4:	2b00      	cmp	r3, #0
340026c6:	d002      	beq.n	340026ce <MX25UM51245G_ReadCfg2Register+0x130>
  {
    return MX25UM51245G_ERROR;
340026c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340026cc:	e000      	b.n	340026d0 <MX25UM51245G_ReadCfg2Register+0x132>
  }

  return MX25UM51245G_OK;
340026ce:	2300      	movs	r3, #0
}
340026d0:	4618      	mov	r0, r3
340026d2:	3760      	adds	r7, #96	@ 0x60
340026d4:	46bd      	mov	sp, r7
340026d6:	bd80      	pop	{r7, pc}

340026d8 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
340026d8:	b580      	push	{r7, lr}
340026da:	b096      	sub	sp, #88	@ 0x58
340026dc:	af00      	add	r7, sp, #0
340026de:	6078      	str	r0, [r7, #4]
340026e0:	460b      	mov	r3, r1
340026e2:	70fb      	strb	r3, [r7, #3]
340026e4:	4613      	mov	r3, r2
340026e6:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
340026e8:	f107 030c 	add.w	r3, r7, #12
340026ec:	224c      	movs	r2, #76	@ 0x4c
340026ee:	2100      	movs	r1, #0
340026f0:	4618      	mov	r0, r3
340026f2:	f019 fdbb 	bl	3401c26c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340026f6:	78fb      	ldrb	r3, [r7, #3]
340026f8:	2b00      	cmp	r3, #0
340026fa:	d105      	bne.n	34002708 <MX25UM51245G_ResetEnable+0x30>
340026fc:	78bb      	ldrb	r3, [r7, #2]
340026fe:	2b01      	cmp	r3, #1
34002700:	d102      	bne.n	34002708 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
34002702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002706:	e039      	b.n	3400277c <MX25UM51245G_ResetEnable+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002708:	2300      	movs	r3, #0
3400270a:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400270c:	2300      	movs	r3, #0
3400270e:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34002710:	78fb      	ldrb	r3, [r7, #3]
34002712:	2b00      	cmp	r3, #0
34002714:	d101      	bne.n	3400271a <MX25UM51245G_ResetEnable+0x42>
34002716:	2301      	movs	r3, #1
34002718:	e000      	b.n	3400271c <MX25UM51245G_ResetEnable+0x44>
3400271a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
3400271c:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400271e:	78bb      	ldrb	r3, [r7, #2]
34002720:	2b01      	cmp	r3, #1
34002722:	d101      	bne.n	34002728 <MX25UM51245G_ResetEnable+0x50>
34002724:	2308      	movs	r3, #8
34002726:	e000      	b.n	3400272a <MX25UM51245G_ResetEnable+0x52>
34002728:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
3400272a:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
3400272c:	78fb      	ldrb	r3, [r7, #3]
3400272e:	2b00      	cmp	r3, #0
34002730:	d101      	bne.n	34002736 <MX25UM51245G_ResetEnable+0x5e>
34002732:	2300      	movs	r3, #0
34002734:	e000      	b.n	34002738 <MX25UM51245G_ResetEnable+0x60>
34002736:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002738:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
3400273a:	78fb      	ldrb	r3, [r7, #3]
3400273c:	2b00      	cmp	r3, #0
3400273e:	d101      	bne.n	34002744 <MX25UM51245G_ResetEnable+0x6c>
34002740:	2366      	movs	r3, #102	@ 0x66
34002742:	e001      	b.n	34002748 <MX25UM51245G_ResetEnable+0x70>
34002744:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002748:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3400274a:	2300      	movs	r3, #0
3400274c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400274e:	2300      	movs	r3, #0
34002750:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34002752:	2300      	movs	r3, #0
34002754:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
34002756:	2300      	movs	r3, #0
34002758:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3400275a:	2300      	movs	r3, #0
3400275c:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400275e:	f107 030c 	add.w	r3, r7, #12
34002762:	f241 3288 	movw	r2, #5000	@ 0x1388
34002766:	4619      	mov	r1, r3
34002768:	6878      	ldr	r0, [r7, #4]
3400276a:	f014 fb85 	bl	34016e78 <HAL_XSPI_Command>
3400276e:	4603      	mov	r3, r0
34002770:	2b00      	cmp	r3, #0
34002772:	d002      	beq.n	3400277a <MX25UM51245G_ResetEnable+0xa2>
  {
    return MX25UM51245G_ERROR;
34002774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002778:	e000      	b.n	3400277c <MX25UM51245G_ResetEnable+0xa4>
  }

  return MX25UM51245G_OK;
3400277a:	2300      	movs	r3, #0
}
3400277c:	4618      	mov	r0, r3
3400277e:	3758      	adds	r7, #88	@ 0x58
34002780:	46bd      	mov	sp, r7
34002782:	bd80      	pop	{r7, pc}

34002784 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34002784:	b580      	push	{r7, lr}
34002786:	b096      	sub	sp, #88	@ 0x58
34002788:	af00      	add	r7, sp, #0
3400278a:	6078      	str	r0, [r7, #4]
3400278c:	460b      	mov	r3, r1
3400278e:	70fb      	strb	r3, [r7, #3]
34002790:	4613      	mov	r3, r2
34002792:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
34002794:	f107 030c 	add.w	r3, r7, #12
34002798:	224c      	movs	r2, #76	@ 0x4c
3400279a:	2100      	movs	r1, #0
3400279c:	4618      	mov	r0, r3
3400279e:	f019 fd65 	bl	3401c26c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340027a2:	78fb      	ldrb	r3, [r7, #3]
340027a4:	2b00      	cmp	r3, #0
340027a6:	d105      	bne.n	340027b4 <MX25UM51245G_ResetMemory+0x30>
340027a8:	78bb      	ldrb	r3, [r7, #2]
340027aa:	2b01      	cmp	r3, #1
340027ac:	d102      	bne.n	340027b4 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
340027ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340027b2:	e039      	b.n	34002828 <MX25UM51245G_ResetMemory+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340027b4:	2300      	movs	r3, #0
340027b6:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340027b8:	2300      	movs	r3, #0
340027ba:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340027bc:	78fb      	ldrb	r3, [r7, #3]
340027be:	2b00      	cmp	r3, #0
340027c0:	d101      	bne.n	340027c6 <MX25UM51245G_ResetMemory+0x42>
340027c2:	2301      	movs	r3, #1
340027c4:	e000      	b.n	340027c8 <MX25UM51245G_ResetMemory+0x44>
340027c6:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340027c8:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340027ca:	78bb      	ldrb	r3, [r7, #2]
340027cc:	2b01      	cmp	r3, #1
340027ce:	d101      	bne.n	340027d4 <MX25UM51245G_ResetMemory+0x50>
340027d0:	2308      	movs	r3, #8
340027d2:	e000      	b.n	340027d6 <MX25UM51245G_ResetMemory+0x52>
340027d4:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340027d6:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340027d8:	78fb      	ldrb	r3, [r7, #3]
340027da:	2b00      	cmp	r3, #0
340027dc:	d101      	bne.n	340027e2 <MX25UM51245G_ResetMemory+0x5e>
340027de:	2300      	movs	r3, #0
340027e0:	e000      	b.n	340027e4 <MX25UM51245G_ResetMemory+0x60>
340027e2:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340027e4:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
340027e6:	78fb      	ldrb	r3, [r7, #3]
340027e8:	2b00      	cmp	r3, #0
340027ea:	d101      	bne.n	340027f0 <MX25UM51245G_ResetMemory+0x6c>
340027ec:	2399      	movs	r3, #153	@ 0x99
340027ee:	e001      	b.n	340027f4 <MX25UM51245G_ResetMemory+0x70>
340027f0:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340027f4:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
340027f6:	2300      	movs	r3, #0
340027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
340027fa:	2300      	movs	r3, #0
340027fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
340027fe:	2300      	movs	r3, #0
34002800:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
34002802:	2300      	movs	r3, #0
34002804:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002806:	2300      	movs	r3, #0
34002808:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400280a:	f107 030c 	add.w	r3, r7, #12
3400280e:	f241 3288 	movw	r2, #5000	@ 0x1388
34002812:	4619      	mov	r1, r3
34002814:	6878      	ldr	r0, [r7, #4]
34002816:	f014 fb2f 	bl	34016e78 <HAL_XSPI_Command>
3400281a:	4603      	mov	r3, r0
3400281c:	2b00      	cmp	r3, #0
3400281e:	d002      	beq.n	34002826 <MX25UM51245G_ResetMemory+0xa2>
  {
    return MX25UM51245G_ERROR;
34002820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002824:	e000      	b.n	34002828 <MX25UM51245G_ResetMemory+0xa4>
  }

  return MX25UM51245G_OK;
34002826:	2300      	movs	r3, #0
}
34002828:	4618      	mov	r0, r3
3400282a:	3758      	adds	r7, #88	@ 0x58
3400282c:	46bd      	mov	sp, r7
3400282e:	bd80      	pop	{r7, pc}

34002830 <LL_AHB4_GRP1_EnableClock>:
{
34002830:	b480      	push	{r7}
34002832:	b085      	sub	sp, #20
34002834:	af00      	add	r7, sp, #0
34002836:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002838:	4a07      	ldr	r2, [pc, #28]	@ (34002858 <LL_AHB4_GRP1_EnableClock+0x28>)
3400283a:	687b      	ldr	r3, [r7, #4]
3400283c:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34002840:	4b05      	ldr	r3, [pc, #20]	@ (34002858 <LL_AHB4_GRP1_EnableClock+0x28>)
34002842:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002848:	68fb      	ldr	r3, [r7, #12]
}
3400284a:	bf00      	nop
3400284c:	3714      	adds	r7, #20
3400284e:	46bd      	mov	sp, r7
34002850:	f85d 7b04 	ldr.w	r7, [sp], #4
34002854:	4770      	bx	lr
34002856:	bf00      	nop
34002858:	56028000 	.word	0x56028000

3400285c <LL_APB2_GRP1_EnableClock>:
{
3400285c:	b480      	push	{r7}
3400285e:	b085      	sub	sp, #20
34002860:	af00      	add	r7, sp, #0
34002862:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
34002864:	4a07      	ldr	r2, [pc, #28]	@ (34002884 <LL_APB2_GRP1_EnableClock+0x28>)
34002866:	687b      	ldr	r3, [r7, #4]
34002868:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3400286c:	4b05      	ldr	r3, [pc, #20]	@ (34002884 <LL_APB2_GRP1_EnableClock+0x28>)
3400286e:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34002872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002874:	68fb      	ldr	r3, [r7, #12]
}
34002876:	bf00      	nop
34002878:	3714      	adds	r7, #20
3400287a:	46bd      	mov	sp, r7
3400287c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002880:	4770      	bx	lr
34002882:	bf00      	nop
34002884:	56028000 	.word	0x56028000

34002888 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34002888:	b580      	push	{r7, lr}
3400288a:	b088      	sub	sp, #32
3400288c:	af00      	add	r7, sp, #0
3400288e:	4603      	mov	r3, r0
34002890:	71fb      	strb	r3, [r7, #7]
  SMPS_GPIO_CLK_ENABLE();
34002892:	2002      	movs	r0, #2
34002894:	f7ff ffcc 	bl	34002830 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
34002898:	f107 030c 	add.w	r3, r7, #12
3400289c:	2200      	movs	r2, #0
3400289e:	601a      	str	r2, [r3, #0]
340028a0:	605a      	str	r2, [r3, #4]
340028a2:	609a      	str	r2, [r3, #8]
340028a4:	60da      	str	r2, [r3, #12]
340028a6:	611a      	str	r2, [r3, #16]
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
340028a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
340028ac:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
340028ae:	2301      	movs	r3, #1
340028b0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
340028b2:	2300      	movs	r3, #0
340028b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
340028b6:	2303      	movs	r3, #3
340028b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
340028ba:	f107 030c 	add.w	r3, r7, #12
340028be:	4619      	mov	r1, r3
340028c0:	4806      	ldr	r0, [pc, #24]	@ (340028dc <BSP_SMPS_Init+0x54>)
340028c2:	f003 f899 	bl	340059f8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
340028c6:	79fb      	ldrb	r3, [r7, #7]
340028c8:	461a      	mov	r2, r3
340028ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
340028ce:	4803      	ldr	r0, [pc, #12]	@ (340028dc <BSP_SMPS_Init+0x54>)
340028d0:	f003 fbf2 	bl	340060b8 <HAL_GPIO_WritePin>
}
340028d4:	bf00      	nop
340028d6:	3720      	adds	r7, #32
340028d8:	46bd      	mov	sp, r7
340028da:	bd80      	pop	{r7, pc}
340028dc:	56020400 	.word	0x56020400

340028e0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
340028e0:	b580      	push	{r7, lr}
340028e2:	b084      	sub	sp, #16
340028e4:	af00      	add	r7, sp, #0
340028e6:	4603      	mov	r3, r0
340028e8:	6039      	str	r1, [r7, #0]
340028ea:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
340028ec:	2300      	movs	r3, #0
340028ee:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
340028f0:	683b      	ldr	r3, [r7, #0]
340028f2:	2b00      	cmp	r3, #0
340028f4:	d103      	bne.n	340028fe <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
340028f6:	f06f 0301 	mvn.w	r3, #1
340028fa:	60fb      	str	r3, [r7, #12]
340028fc:	e029      	b.n	34002952 <BSP_COM_Init+0x72>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
340028fe:	79fa      	ldrb	r2, [r7, #7]
34002900:	79fb      	ldrb	r3, [r7, #7]
34002902:	4916      	ldr	r1, [pc, #88]	@ (3400295c <BSP_COM_Init+0x7c>)
34002904:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
34002908:	4915      	ldr	r1, [pc, #84]	@ (34002960 <BSP_COM_Init+0x80>)
3400290a:	2094      	movs	r0, #148	@ 0x94
3400290c:	fb00 f303 	mul.w	r3, r0, r3
34002910:	440b      	add	r3, r1
34002912:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
34002914:	79fb      	ldrb	r3, [r7, #7]
34002916:	2294      	movs	r2, #148	@ 0x94
34002918:	fb02 f303 	mul.w	r3, r2, r3
3400291c:	4a10      	ldr	r2, [pc, #64]	@ (34002960 <BSP_COM_Init+0x80>)
3400291e:	4413      	add	r3, r2
34002920:	4618      	mov	r0, r3
34002922:	f000 f853 	bl	340029cc <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (status == BSP_ERROR_NONE)
34002926:	68fb      	ldr	r3, [r7, #12]
34002928:	2b00      	cmp	r3, #0
3400292a:	d112      	bne.n	34002952 <BSP_COM_Init+0x72>
    {
      if (COM == COM1)
3400292c:	79fb      	ldrb	r3, [r7, #7]
3400292e:	2b00      	cmp	r3, #0
34002930:	d10f      	bne.n	34002952 <BSP_COM_Init+0x72>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
34002932:	79fb      	ldrb	r3, [r7, #7]
34002934:	2294      	movs	r2, #148	@ 0x94
34002936:	fb02 f303 	mul.w	r3, r2, r3
3400293a:	4a09      	ldr	r2, [pc, #36]	@ (34002960 <BSP_COM_Init+0x80>)
3400293c:	4413      	add	r3, r2
3400293e:	6839      	ldr	r1, [r7, #0]
34002940:	4618      	mov	r0, r3
34002942:	f000 f80f 	bl	34002964 <MX_USART1_Init>
34002946:	4603      	mov	r3, r0
34002948:	2b00      	cmp	r3, #0
3400294a:	d002      	beq.n	34002952 <BSP_COM_Init+0x72>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
3400294c:	f06f 0303 	mvn.w	r3, #3
34002950:	60fb      	str	r3, [r7, #12]
//        }
      }
    }
  }

  return status;
34002952:	68fb      	ldr	r3, [r7, #12]
}
34002954:	4618      	mov	r0, r3
34002956:	3710      	adds	r7, #16
34002958:	46bd      	mov	sp, r7
3400295a:	bd80      	pop	{r7, pc}
3400295c:	340205ec 	.word	0x340205ec
34002960:	34020820 	.word	0x34020820

34002964 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
34002964:	b580      	push	{r7, lr}
34002966:	b082      	sub	sp, #8
34002968:	af00      	add	r7, sp, #0
3400296a:	6078      	str	r0, [r7, #4]
3400296c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
3400296e:	4b16      	ldr	r3, [pc, #88]	@ (340029c8 <MX_USART1_Init+0x64>)
34002970:	681a      	ldr	r2, [r3, #0]
34002972:	687b      	ldr	r3, [r7, #4]
34002974:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34002976:	683b      	ldr	r3, [r7, #0]
34002978:	681a      	ldr	r2, [r3, #0]
3400297a:	687b      	ldr	r3, [r7, #4]
3400297c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
3400297e:	687b      	ldr	r3, [r7, #4]
34002980:	220c      	movs	r2, #12
34002982:	615a      	str	r2, [r3, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34002984:	683b      	ldr	r3, [r7, #0]
34002986:	895b      	ldrh	r3, [r3, #10]
34002988:	461a      	mov	r2, r3
3400298a:	687b      	ldr	r3, [r7, #4]
3400298c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
3400298e:	683b      	ldr	r3, [r7, #0]
34002990:	685a      	ldr	r2, [r3, #4]
34002992:	687b      	ldr	r3, [r7, #4]
34002994:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
34002996:	683b      	ldr	r3, [r7, #0]
34002998:	891b      	ldrh	r3, [r3, #8]
3400299a:	461a      	mov	r2, r3
3400299c:	687b      	ldr	r3, [r7, #4]
3400299e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
340029a0:	683b      	ldr	r3, [r7, #0]
340029a2:	899b      	ldrh	r3, [r3, #12]
340029a4:	461a      	mov	r2, r3
340029a6:	687b      	ldr	r3, [r7, #4]
340029a8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
340029aa:	687b      	ldr	r3, [r7, #4]
340029ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340029b0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
340029b2:	687b      	ldr	r3, [r7, #4]
340029b4:	2200      	movs	r2, #0
340029b6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
340029b8:	6878      	ldr	r0, [r7, #4]
340029ba:	f012 ff3d 	bl	34015838 <HAL_UART_Init>
340029be:	4603      	mov	r3, r0
}
340029c0:	4618      	mov	r0, r3
340029c2:	3708      	adds	r7, #8
340029c4:	46bd      	mov	sp, r7
340029c6:	bd80      	pop	{r7, pc}
340029c8:	340205ec 	.word	0x340205ec

340029cc <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
340029cc:	b580      	push	{r7, lr}
340029ce:	b090      	sub	sp, #64	@ 0x40
340029d0:	af00      	add	r7, sp, #0
340029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
340029d4:	f107 0320 	add.w	r3, r7, #32
340029d8:	2200      	movs	r2, #0
340029da:	601a      	str	r2, [r3, #0]
340029dc:	605a      	str	r2, [r3, #4]
340029de:	4b34      	ldr	r3, [pc, #208]	@ (34002ab0 <UART_MspInit+0xe4>)
340029e0:	623b      	str	r3, [r7, #32]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
340029e2:	f107 0318 	add.w	r3, r7, #24
340029e6:	2200      	movs	r2, #0
340029e8:	601a      	str	r2, [r3, #0]
340029ea:	605a      	str	r2, [r3, #4]
340029ec:	4b31      	ldr	r3, [pc, #196]	@ (34002ab4 <UART_MspInit+0xe8>)
340029ee:	61bb      	str	r3, [r7, #24]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN};
340029f0:	2300      	movs	r3, #0
340029f2:	617b      	str	r3, [r7, #20]
340029f4:	2320      	movs	r3, #32
340029f6:	82bb      	strh	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN};
340029f8:	2300      	movs	r3, #0
340029fa:	613b      	str	r3, [r7, #16]
340029fc:	2340      	movs	r3, #64	@ 0x40
340029fe:	823b      	strh	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
34002a00:	2307      	movs	r3, #7
34002a02:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
34002a04:	2307      	movs	r3, #7
34002a06:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34002a08:	687b      	ldr	r3, [r7, #4]
34002a0a:	681b      	ldr	r3, [r3, #0]
34002a0c:	4a2a      	ldr	r2, [pc, #168]	@ (34002ab8 <UART_MspInit+0xec>)
34002a0e:	4293      	cmp	r3, r2
34002a10:	d14a      	bne.n	34002aa8 <UART_MspInit+0xdc>
  {
    COM = COM1;
34002a12:	2300      	movs	r3, #0
34002a14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34002a18:	2010      	movs	r0, #16
34002a1a:	f7ff ff09 	bl	34002830 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
34002a1e:	2008      	movs	r0, #8
34002a20:	f7ff ff06 	bl	34002830 <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
34002a24:	2010      	movs	r0, #16
34002a26:	f7ff ff19 	bl	3400285c <LL_APB2_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
34002a2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a2e:	005b      	lsls	r3, r3, #1
34002a30:	3340      	adds	r3, #64	@ 0x40
34002a32:	443b      	add	r3, r7
34002a34:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
34002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34002a3a:	2302      	movs	r3, #2
34002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
34002a3e:	2302      	movs	r3, #2
34002a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
34002a42:	2301      	movs	r3, #1
34002a44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
34002a46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a4a:	3340      	adds	r3, #64	@ 0x40
34002a4c:	443b      	add	r3, r7
34002a4e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
34002a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34002a54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a58:	009b      	lsls	r3, r3, #2
34002a5a:	3340      	adds	r3, #64	@ 0x40
34002a5c:	443b      	add	r3, r7
34002a5e:	f853 3c20 	ldr.w	r3, [r3, #-32]
34002a62:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002a66:	4611      	mov	r1, r2
34002a68:	4618      	mov	r0, r3
34002a6a:	f002 ffc5 	bl	340059f8 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
34002a6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a72:	005b      	lsls	r3, r3, #1
34002a74:	3340      	adds	r3, #64	@ 0x40
34002a76:	443b      	add	r3, r7
34002a78:	f833 3c30 	ldrh.w	r3, [r3, #-48]
34002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
34002a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a82:	3340      	adds	r3, #64	@ 0x40
34002a84:	443b      	add	r3, r7
34002a86:	f813 3c38 	ldrb.w	r3, [r3, #-56]
34002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34002a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002a90:	009b      	lsls	r3, r3, #2
34002a92:	3340      	adds	r3, #64	@ 0x40
34002a94:	443b      	add	r3, r7
34002a96:	f853 3c28 	ldr.w	r3, [r3, #-40]
34002a9a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002a9e:	4611      	mov	r1, r2
34002aa0:	4618      	mov	r0, r3
34002aa2:	f002 ffa9 	bl	340059f8 <HAL_GPIO_Init>
34002aa6:	e000      	b.n	34002aaa <UART_MspInit+0xde>
      return;
34002aa8:	bf00      	nop
}
34002aaa:	3740      	adds	r7, #64	@ 0x40
34002aac:	46bd      	mov	sp, r7
34002aae:	bd80      	pop	{r7, pc}
34002ab0:	56021000 	.word	0x56021000
34002ab4:	56020c00 	.word	0x56020c00
34002ab8:	52001000 	.word	0x52001000

34002abc <LL_AHB4_GRP1_EnableClock>:
{
34002abc:	b480      	push	{r7}
34002abe:	b085      	sub	sp, #20
34002ac0:	af00      	add	r7, sp, #0
34002ac2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002ac4:	4a07      	ldr	r2, [pc, #28]	@ (34002ae4 <LL_AHB4_GRP1_EnableClock+0x28>)
34002ac6:	687b      	ldr	r3, [r7, #4]
34002ac8:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34002acc:	4b05      	ldr	r3, [pc, #20]	@ (34002ae4 <LL_AHB4_GRP1_EnableClock+0x28>)
34002ace:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002ad4:	68fb      	ldr	r3, [r7, #12]
}
34002ad6:	bf00      	nop
34002ad8:	3714      	adds	r7, #20
34002ada:	46bd      	mov	sp, r7
34002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ae0:	4770      	bx	lr
34002ae2:	bf00      	nop
34002ae4:	56028000 	.word	0x56028000

34002ae8 <LL_AHB5_GRP1_EnableClock>:
{
34002ae8:	b480      	push	{r7}
34002aea:	b085      	sub	sp, #20
34002aec:	af00      	add	r7, sp, #0
34002aee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34002af0:	4a07      	ldr	r2, [pc, #28]	@ (34002b10 <LL_AHB5_GRP1_EnableClock+0x28>)
34002af2:	687b      	ldr	r3, [r7, #4]
34002af4:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34002af8:	4b05      	ldr	r3, [pc, #20]	@ (34002b10 <LL_AHB5_GRP1_EnableClock+0x28>)
34002afa:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34002afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002b00:	68fb      	ldr	r3, [r7, #12]
}
34002b02:	bf00      	nop
34002b04:	3714      	adds	r7, #20
34002b06:	46bd      	mov	sp, r7
34002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b0c:	4770      	bx	lr
34002b0e:	bf00      	nop
34002b10:	56028000 	.word	0x56028000

34002b14 <LL_AHB5_GRP1_ForceReset>:
{
34002b14:	b480      	push	{r7}
34002b16:	b083      	sub	sp, #12
34002b18:	af00      	add	r7, sp, #0
34002b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34002b1c:	4a04      	ldr	r2, [pc, #16]	@ (34002b30 <LL_AHB5_GRP1_ForceReset+0x1c>)
34002b1e:	687b      	ldr	r3, [r7, #4]
34002b20:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34002b24:	bf00      	nop
34002b26:	370c      	adds	r7, #12
34002b28:	46bd      	mov	sp, r7
34002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b2e:	4770      	bx	lr
34002b30:	56028000 	.word	0x56028000

34002b34 <LL_AHB5_GRP1_ReleaseReset>:
{
34002b34:	b480      	push	{r7}
34002b36:	b083      	sub	sp, #12
34002b38:	af00      	add	r7, sp, #0
34002b3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34002b3c:	4b06      	ldr	r3, [pc, #24]	@ (34002b58 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34002b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34002b42:	461a      	mov	r2, r3
34002b44:	687b      	ldr	r3, [r7, #4]
34002b46:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34002b4a:	bf00      	nop
34002b4c:	370c      	adds	r7, #12
34002b4e:	46bd      	mov	sp, r7
34002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b54:	4770      	bx	lr
34002b56:	bf00      	nop
34002b58:	56028000 	.word	0x56028000

34002b5c <BSP_XSPI_NOR_Init>:
  * @param  Instance   XSPI Instance
  * @param  Init       XSPI Init structure
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_Init(uint32_t Instance, BSP_XSPI_NOR_Init_t *Init)
{
34002b5c:	b590      	push	{r4, r7, lr}
34002b5e:	b095      	sub	sp, #84	@ 0x54
34002b60:	af00      	add	r7, sp, #0
34002b62:	6078      	str	r0, [r7, #4]
34002b64:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_XSPI_NOR_Info_t pInfo;
  MX_XSPI_InitTypeDef xspi_init;

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002b66:	687b      	ldr	r3, [r7, #4]
34002b68:	2b00      	cmp	r3, #0
34002b6a:	d003      	beq.n	34002b74 <BSP_XSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002b6c:	f06f 0301 	mvn.w	r3, #1
34002b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002b72:	e080      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002b74:	4947      	ldr	r1, [pc, #284]	@ (34002c94 <BSP_XSPI_NOR_Init+0x138>)
34002b76:	687a      	ldr	r2, [r7, #4]
34002b78:	4613      	mov	r3, r2
34002b7a:	005b      	lsls	r3, r3, #1
34002b7c:	4413      	add	r3, r2
34002b7e:	440b      	add	r3, r1
34002b80:	781b      	ldrb	r3, [r3, #0]
34002b82:	2b00      	cmp	r3, #0
34002b84:	d175      	bne.n	34002c72 <BSP_XSPI_NOR_Init+0x116>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp XSPI initialization */
      XSPI_NOR_MspInit(&hxspi_nor[Instance]);
34002b86:	687b      	ldr	r3, [r7, #4]
34002b88:	2264      	movs	r2, #100	@ 0x64
34002b8a:	fb02 f303 	mul.w	r3, r2, r3
34002b8e:	4a42      	ldr	r2, [pc, #264]	@ (34002c98 <BSP_XSPI_NOR_Init+0x13c>)
34002b90:	4413      	add	r3, r2
34002b92:	4618      	mov	r0, r3
34002b94:	f000 f9b6 	bl	34002f04 <XSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
34002b98:	f107 031c 	add.w	r3, r7, #28
34002b9c:	4618      	mov	r0, r3
34002b9e:	f7ff f9a5 	bl	34001eec <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      xspi_init.ClockPrescaler = 3;
34002ba2:	2303      	movs	r3, #3
34002ba4:	613b      	str	r3, [r7, #16]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
34002ba6:	69fb      	ldr	r3, [r7, #28]
34002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34002baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34002bac:	fa93 f3a3 	rbit	r3, r3
34002bb0:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
34002bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34002bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
34002bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002bb8:	2b00      	cmp	r3, #0
34002bba:	d101      	bne.n	34002bc0 <BSP_XSPI_NOR_Init+0x64>
  {
    return 32U;
34002bbc:	2320      	movs	r3, #32
34002bbe:	e003      	b.n	34002bc8 <BSP_XSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
34002bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34002bc2:	fab3 f383 	clz	r3, r3
34002bc6:	b2db      	uxtb	r3, r3
34002bc8:	60fb      	str	r3, [r7, #12]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34002bca:	2300      	movs	r3, #0
34002bcc:	617b      	str	r3, [r7, #20]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
34002bce:	683b      	ldr	r3, [r7, #0]
34002bd0:	785b      	ldrb	r3, [r3, #1]
34002bd2:	61bb      	str	r3, [r7, #24]

      /* STM32 XSPI interface initialization */
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
34002bd4:	687b      	ldr	r3, [r7, #4]
34002bd6:	2264      	movs	r2, #100	@ 0x64
34002bd8:	fb02 f303 	mul.w	r3, r2, r3
34002bdc:	4a2e      	ldr	r2, [pc, #184]	@ (34002c98 <BSP_XSPI_NOR_Init+0x13c>)
34002bde:	4413      	add	r3, r2
34002be0:	f107 020c 	add.w	r2, r7, #12
34002be4:	4611      	mov	r1, r2
34002be6:	4618      	mov	r0, r3
34002be8:	f000 f858 	bl	34002c9c <MX_XSPI_NOR_Init>
34002bec:	4603      	mov	r3, r0
34002bee:	2b00      	cmp	r3, #0
34002bf0:	d003      	beq.n	34002bfa <BSP_XSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
34002bf2:	f06f 0303 	mvn.w	r3, #3
34002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002bf8:	e03d      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* XSPI memory reset */
      else if (XSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
34002bfa:	6878      	ldr	r0, [r7, #4]
34002bfc:	f000 fa50 	bl	340030a0 <XSPI_NOR_ResetMemory>
34002c00:	4603      	mov	r3, r0
34002c02:	2b00      	cmp	r3, #0
34002c04:	d003      	beq.n	34002c0e <BSP_XSPI_NOR_Init+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c06:	f06f 0304 	mvn.w	r3, #4
34002c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c0c:	e033      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002c0e:	687b      	ldr	r3, [r7, #4]
34002c10:	2264      	movs	r2, #100	@ 0x64
34002c12:	fb02 f303 	mul.w	r3, r2, r3
34002c16:	4a20      	ldr	r2, [pc, #128]	@ (34002c98 <BSP_XSPI_NOR_Init+0x13c>)
34002c18:	1898      	adds	r0, r3, r2
34002c1a:	491e      	ldr	r1, [pc, #120]	@ (34002c94 <BSP_XSPI_NOR_Init+0x138>)
34002c1c:	687a      	ldr	r2, [r7, #4]
34002c1e:	4613      	mov	r3, r2
34002c20:	005b      	lsls	r3, r3, #1
34002c22:	4413      	add	r3, r2
34002c24:	440b      	add	r3, r1
34002c26:	3301      	adds	r3, #1
34002c28:	7819      	ldrb	r1, [r3, #0]
34002c2a:	4c1a      	ldr	r4, [pc, #104]	@ (34002c94 <BSP_XSPI_NOR_Init+0x138>)
34002c2c:	687a      	ldr	r2, [r7, #4]
34002c2e:	4613      	mov	r3, r2
34002c30:	005b      	lsls	r3, r3, #1
34002c32:	4413      	add	r3, r2
34002c34:	4423      	add	r3, r4
34002c36:	3302      	adds	r3, #2
34002c38:	781b      	ldrb	r3, [r3, #0]
34002c3a:	461a      	mov	r2, r3
34002c3c:	f7ff f985 	bl	34001f4a <MX25UM51245G_AutoPollingMemReady>
34002c40:	4603      	mov	r3, r0
34002c42:	2b00      	cmp	r3, #0
34002c44:	d003      	beq.n	34002c4e <BSP_XSPI_NOR_Init+0xf2>
                                                Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c46:	f06f 0304 	mvn.w	r3, #4
34002c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c4c:	e013      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Configure the memory */
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34002c4e:	683b      	ldr	r3, [r7, #0]
34002c50:	7819      	ldrb	r1, [r3, #0]
34002c52:	683b      	ldr	r3, [r7, #0]
34002c54:	785b      	ldrb	r3, [r3, #1]
34002c56:	461a      	mov	r2, r3
34002c58:	6878      	ldr	r0, [r7, #4]
34002c5a:	f000 f8c7 	bl	34002dec <BSP_XSPI_NOR_ConfigFlash>
34002c5e:	4603      	mov	r3, r0
34002c60:	2b00      	cmp	r3, #0
34002c62:	d003      	beq.n	34002c6c <BSP_XSPI_NOR_Init+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002c64:	f06f 0304 	mvn.w	r3, #4
34002c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c6a:	e004      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
34002c6c:	2300      	movs	r3, #0
34002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002c70:	e001      	b.n	34002c76 <BSP_XSPI_NOR_Init+0x11a>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002c72:	2300      	movs	r3, #0
34002c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34002c76:	687b      	ldr	r3, [r7, #4]
34002c78:	2264      	movs	r2, #100	@ 0x64
34002c7a:	fb02 f303 	mul.w	r3, r2, r3
34002c7e:	4a06      	ldr	r2, [pc, #24]	@ (34002c98 <BSP_XSPI_NOR_Init+0x13c>)
34002c80:	4413      	add	r3, r2
34002c82:	2100      	movs	r1, #0
34002c84:	4618      	mov	r0, r3
34002c86:	f014 fd8b 	bl	340177a0 <HAL_XSPI_SetClockPrescaler>
  /* Return BSP status */
  return ret;
34002c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
34002c8c:	4618      	mov	r0, r3
34002c8e:	3754      	adds	r7, #84	@ 0x54
34002c90:	46bd      	mov	sp, r7
34002c92:	bd90      	pop	{r4, r7, pc}
34002c94:	340209ac 	.word	0x340209ac
34002c98:	34020948 	.word	0x34020948

34002c9c <MX_XSPI_NOR_Init>:
  * @param  hxspi          XSPI handle
  * @param  Init           XSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_XSPI_NOR_Init(XSPI_HandleTypeDef *hxspi, MX_XSPI_InitTypeDef *Init)
{
34002c9c:	b580      	push	{r7, lr}
34002c9e:	b082      	sub	sp, #8
34002ca0:	af00      	add	r7, sp, #0
34002ca2:	6078      	str	r0, [r7, #4]
34002ca4:	6039      	str	r1, [r7, #0]
  /* XSPI initialization */
  hxspi->Instance = XSPI2;
34002ca6:	687b      	ldr	r3, [r7, #4]
34002ca8:	4a1e      	ldr	r2, [pc, #120]	@ (34002d24 <MX_XSPI_NOR_Init+0x88>)
34002caa:	601a      	str	r2, [r3, #0]

  hxspi->Init.FifoThresholdByte       = 4;
34002cac:	687b      	ldr	r3, [r7, #4]
34002cae:	2204      	movs	r2, #4
34002cb0:	605a      	str	r2, [r3, #4]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
34002cb2:	687b      	ldr	r3, [r7, #4]
34002cb4:	2200      	movs	r2, #0
34002cb6:	609a      	str	r2, [r3, #8]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
34002cb8:	683b      	ldr	r3, [r7, #0]
34002cba:	681a      	ldr	r2, [r3, #0]
34002cbc:	687b      	ldr	r3, [r7, #4]
34002cbe:	611a      	str	r2, [r3, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
34002cc0:	687b      	ldr	r3, [r7, #4]
34002cc2:	2202      	movs	r2, #2
34002cc4:	615a      	str	r2, [r3, #20]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
34002cc6:	687b      	ldr	r3, [r7, #4]
34002cc8:	2200      	movs	r2, #0
34002cca:	619a      	str	r2, [r3, #24]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
34002ccc:	687b      	ldr	r3, [r7, #4]
34002cce:	2200      	movs	r2, #0
34002cd0:	61da      	str	r2, [r3, #28]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
34002cd2:	687b      	ldr	r3, [r7, #4]
34002cd4:	2200      	movs	r2, #0
34002cd6:	621a      	str	r2, [r3, #32]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
34002cd8:	683b      	ldr	r3, [r7, #0]
34002cda:	685a      	ldr	r2, [r3, #4]
34002cdc:	687b      	ldr	r3, [r7, #4]
34002cde:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
34002ce0:	683b      	ldr	r3, [r7, #0]
34002ce2:	689a      	ldr	r2, [r3, #8]
34002ce4:	687b      	ldr	r3, [r7, #4]
34002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary      = 0;
34002ce8:	687b      	ldr	r3, [r7, #4]
34002cea:	2200      	movs	r2, #0
34002cec:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (OCTOSPI_DCR1_DLYBYP)
  hxspi->Init.DelayBlockBypass           = HAL_XSPI_DELAY_BLOCK_BYPASS;
#endif /* OCTOSPI_DCR1_DLYBYP */

  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
34002cee:	683b      	ldr	r3, [r7, #0]
34002cf0:	68db      	ldr	r3, [r3, #12]
34002cf2:	2b01      	cmp	r3, #1
34002cf4:	d108      	bne.n	34002d08 <MX_XSPI_NOR_Init+0x6c>
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002cf6:	687b      	ldr	r3, [r7, #4]
34002cf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002cfc:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34002cfe:	687b      	ldr	r3, [r7, #4]
34002d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002d04:	62da      	str	r2, [r3, #44]	@ 0x2c
34002d06:	e005      	b.n	34002d14 <MX_XSPI_NOR_Init+0x78>
  }
  else
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002d08:	687b      	ldr	r3, [r7, #4]
34002d0a:	2200      	movs	r2, #0
34002d0c:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002d0e:	687b      	ldr	r3, [r7, #4]
34002d10:	2200      	movs	r2, #0
34002d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hxspi);
34002d14:	6878      	ldr	r0, [r7, #4]
34002d16:	f013 fdb7 	bl	34016888 <HAL_XSPI_Init>
34002d1a:	4603      	mov	r3, r0
}
34002d1c:	4618      	mov	r0, r3
34002d1e:	3708      	adds	r7, #8
34002d20:	46bd      	mov	sp, r7
34002d22:	bd80      	pop	{r7, pc}
34002d24:	5802a000 	.word	0x5802a000

34002d28 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the XSPI in memory-mapped mode
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
34002d28:	b580      	push	{r7, lr}
34002d2a:	b084      	sub	sp, #16
34002d2c:	af00      	add	r7, sp, #0
34002d2e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002d30:	2300      	movs	r3, #0
34002d32:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002d34:	687b      	ldr	r3, [r7, #4]
34002d36:	2b00      	cmp	r3, #0
34002d38:	d003      	beq.n	34002d42 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002d3a:	f06f 0301 	mvn.w	r3, #1
34002d3e:	60fb      	str	r3, [r7, #12]
34002d40:	e04b      	b.n	34002dda <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002d42:	4928      	ldr	r1, [pc, #160]	@ (34002de4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d44:	687a      	ldr	r2, [r7, #4]
34002d46:	4613      	mov	r3, r2
34002d48:	005b      	lsls	r3, r3, #1
34002d4a:	4413      	add	r3, r2
34002d4c:	440b      	add	r3, r1
34002d4e:	3302      	adds	r3, #2
34002d50:	781b      	ldrb	r3, [r3, #0]
34002d52:	2b00      	cmp	r3, #0
34002d54:	d121      	bne.n	34002d9a <BSP_XSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d56:	687b      	ldr	r3, [r7, #4]
34002d58:	2264      	movs	r2, #100	@ 0x64
34002d5a:	fb02 f303 	mul.w	r3, r2, r3
34002d5e:	4a22      	ldr	r2, [pc, #136]	@ (34002de8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002d60:	1898      	adds	r0, r3, r2
34002d62:	4920      	ldr	r1, [pc, #128]	@ (34002de4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d64:	687a      	ldr	r2, [r7, #4]
34002d66:	4613      	mov	r3, r2
34002d68:	005b      	lsls	r3, r3, #1
34002d6a:	4413      	add	r3, r2
34002d6c:	440b      	add	r3, r1
34002d6e:	3301      	adds	r3, #1
34002d70:	781b      	ldrb	r3, [r3, #0]
34002d72:	2201      	movs	r2, #1
34002d74:	4619      	mov	r1, r3
34002d76:	f7ff f998 	bl	340020aa <MX25UM51245G_EnableSTRMemoryMappedMode>
34002d7a:	4603      	mov	r3, r0
34002d7c:	2b00      	cmp	r3, #0
34002d7e:	d003      	beq.n	34002d88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002d80:	f06f 0304 	mvn.w	r3, #4
34002d84:	60fb      	str	r3, [r7, #12]
34002d86:	e028      	b.n	34002dda <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002d88:	4916      	ldr	r1, [pc, #88]	@ (34002de4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002d8a:	687a      	ldr	r2, [r7, #4]
34002d8c:	4613      	mov	r3, r2
34002d8e:	005b      	lsls	r3, r3, #1
34002d90:	4413      	add	r3, r2
34002d92:	440b      	add	r3, r1
34002d94:	2202      	movs	r2, #2
34002d96:	701a      	strb	r2, [r3, #0]
34002d98:	e01f      	b.n	34002dda <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
34002d9a:	687b      	ldr	r3, [r7, #4]
34002d9c:	2264      	movs	r2, #100	@ 0x64
34002d9e:	fb02 f303 	mul.w	r3, r2, r3
34002da2:	4a11      	ldr	r2, [pc, #68]	@ (34002de8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
34002da4:	1898      	adds	r0, r3, r2
34002da6:	490f      	ldr	r1, [pc, #60]	@ (34002de4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002da8:	687a      	ldr	r2, [r7, #4]
34002daa:	4613      	mov	r3, r2
34002dac:	005b      	lsls	r3, r3, #1
34002dae:	4413      	add	r3, r2
34002db0:	440b      	add	r3, r1
34002db2:	3301      	adds	r3, #1
34002db4:	781b      	ldrb	r3, [r3, #0]
34002db6:	4619      	mov	r1, r3
34002db8:	f7ff fa21 	bl	340021fe <MX25UM51245G_EnableDTRMemoryMappedMode>
34002dbc:	4603      	mov	r3, r0
34002dbe:	2b00      	cmp	r3, #0
34002dc0:	d003      	beq.n	34002dca <BSP_XSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Xspi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002dc2:	f06f 0304 	mvn.w	r3, #4
34002dc6:	60fb      	str	r3, [r7, #12]
34002dc8:	e007      	b.n	34002dda <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002dca:	4906      	ldr	r1, [pc, #24]	@ (34002de4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002dcc:	687a      	ldr	r2, [r7, #4]
34002dce:	4613      	mov	r3, r2
34002dd0:	005b      	lsls	r3, r3, #1
34002dd2:	4413      	add	r3, r2
34002dd4:	440b      	add	r3, r1
34002dd6:	2202      	movs	r2, #2
34002dd8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002dda:	68fb      	ldr	r3, [r7, #12]
}
34002ddc:	4618      	mov	r0, r3
34002dde:	3710      	adds	r7, #16
34002de0:	46bd      	mov	sp, r7
34002de2:	bd80      	pop	{r7, pc}
34002de4:	340209ac 	.word	0x340209ac
34002de8:	34020948 	.word	0x34020948

34002dec <BSP_XSPI_NOR_ConfigFlash>:
  * @param  Mode      XSPI mode
  * @param  Rate      XSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_ConfigFlash(uint32_t Instance, BSP_XSPI_NOR_Interface_t Mode, BSP_XSPI_NOR_Transfer_t Rate)
{
34002dec:	b580      	push	{r7, lr}
34002dee:	b084      	sub	sp, #16
34002df0:	af00      	add	r7, sp, #0
34002df2:	6078      	str	r0, [r7, #4]
34002df4:	460b      	mov	r3, r1
34002df6:	70fb      	strb	r3, [r7, #3]
34002df8:	4613      	mov	r3, r2
34002dfa:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
34002dfc:	2300      	movs	r3, #0
34002dfe:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002e00:	687b      	ldr	r3, [r7, #4]
34002e02:	2b00      	cmp	r3, #0
34002e04:	d003      	beq.n	34002e0e <BSP_XSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002e06:	f06f 0301 	mvn.w	r3, #1
34002e0a:	60fb      	str	r3, [r7, #12]
34002e0c:	e072      	b.n	34002ef4 <BSP_XSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
34002e0e:	493c      	ldr	r1, [pc, #240]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e10:	687a      	ldr	r2, [r7, #4]
34002e12:	4613      	mov	r3, r2
34002e14:	005b      	lsls	r3, r3, #1
34002e16:	4413      	add	r3, r2
34002e18:	440b      	add	r3, r1
34002e1a:	781b      	ldrb	r3, [r3, #0]
34002e1c:	2b02      	cmp	r3, #2
34002e1e:	d103      	bne.n	34002e28 <BSP_XSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
34002e20:	f06f 0319 	mvn.w	r3, #25
34002e24:	60fb      	str	r3, [r7, #12]
34002e26:	e065      	b.n	34002ef4 <BSP_XSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34002e28:	4935      	ldr	r1, [pc, #212]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e2a:	687a      	ldr	r2, [r7, #4]
34002e2c:	4613      	mov	r3, r2
34002e2e:	005b      	lsls	r3, r3, #1
34002e30:	4413      	add	r3, r2
34002e32:	440b      	add	r3, r1
34002e34:	3301      	adds	r3, #1
34002e36:	781b      	ldrb	r3, [r3, #0]
34002e38:	2b01      	cmp	r3, #1
34002e3a:	d12b      	bne.n	34002e94 <BSP_XSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_XSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34002e3c:	78fb      	ldrb	r3, [r7, #3]
34002e3e:	2b01      	cmp	r3, #1
34002e40:	d10a      	bne.n	34002e58 <BSP_XSPI_NOR_ConfigFlash+0x6c>
34002e42:	492f      	ldr	r1, [pc, #188]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e44:	687a      	ldr	r2, [r7, #4]
34002e46:	4613      	mov	r3, r2
34002e48:	005b      	lsls	r3, r3, #1
34002e4a:	4413      	add	r3, r2
34002e4c:	440b      	add	r3, r1
34002e4e:	3302      	adds	r3, #2
34002e50:	781b      	ldrb	r3, [r3, #0]
34002e52:	78ba      	ldrb	r2, [r7, #2]
34002e54:	429a      	cmp	r2, r3
34002e56:	d02d      	beq.n	34002eb4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002e58:	6878      	ldr	r0, [r7, #4]
34002e5a:	f000 fb7d 	bl	34003558 <XSPI_NOR_ExitOPIMode>
34002e5e:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
34002e60:	68fb      	ldr	r3, [r7, #12]
34002e62:	2b00      	cmp	r3, #0
34002e64:	d126      	bne.n	34002eb4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
34002e66:	78fb      	ldrb	r3, [r7, #3]
34002e68:	2b01      	cmp	r3, #1
34002e6a:	d123      	bne.n	34002eb4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
            {

              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002e6c:	4924      	ldr	r1, [pc, #144]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002e6e:	687a      	ldr	r2, [r7, #4]
34002e70:	4613      	mov	r3, r2
34002e72:	005b      	lsls	r3, r3, #1
34002e74:	4413      	add	r3, r2
34002e76:	440b      	add	r3, r1
34002e78:	3302      	adds	r3, #2
34002e7a:	781b      	ldrb	r3, [r3, #0]
34002e7c:	2b00      	cmp	r3, #0
34002e7e:	d104      	bne.n	34002e8a <BSP_XSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = XSPI_NOR_EnterDOPIMode(Instance);
34002e80:	6878      	ldr	r0, [r7, #4]
34002e82:	f000 f9ad 	bl	340031e0 <XSPI_NOR_EnterDOPIMode>
34002e86:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = XSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
34002e88:	e014      	b.n	34002eb4 <BSP_XSPI_NOR_ConfigFlash+0xc8>
                ret = XSPI_NOR_EnterSOPIMode(Instance);
34002e8a:	6878      	ldr	r0, [r7, #4]
34002e8c:	f000 fa98 	bl	340033c0 <XSPI_NOR_EnterSOPIMode>
34002e90:	60f8      	str	r0, [r7, #12]
          break;
34002e92:	e00f      	b.n	34002eb4 <BSP_XSPI_NOR_ConfigFlash+0xc8>

        case BSP_XSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
34002e94:	78fb      	ldrb	r3, [r7, #3]
34002e96:	2b01      	cmp	r3, #1
34002e98:	d10e      	bne.n	34002eb8 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
34002e9a:	78bb      	ldrb	r3, [r7, #2]
34002e9c:	2b00      	cmp	r3, #0
34002e9e:	d104      	bne.n	34002eaa <BSP_XSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = XSPI_NOR_EnterSOPIMode(Instance);
34002ea0:	6878      	ldr	r0, [r7, #4]
34002ea2:	f000 fa8d 	bl	340033c0 <XSPI_NOR_EnterSOPIMode>
34002ea6:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = XSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
34002ea8:	e006      	b.n	34002eb8 <BSP_XSPI_NOR_ConfigFlash+0xcc>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
34002eaa:	6878      	ldr	r0, [r7, #4]
34002eac:	f000 f998 	bl	340031e0 <XSPI_NOR_EnterDOPIMode>
34002eb0:	60f8      	str	r0, [r7, #12]
          break;
34002eb2:	e001      	b.n	34002eb8 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          break;
34002eb4:	bf00      	nop
34002eb6:	e000      	b.n	34002eba <BSP_XSPI_NOR_ConfigFlash+0xce>
          break;
34002eb8:	bf00      	nop
      }

      /* Update XSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
34002eba:	68fb      	ldr	r3, [r7, #12]
34002ebc:	2b00      	cmp	r3, #0
34002ebe:	d119      	bne.n	34002ef4 <BSP_XSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
34002ec0:	490f      	ldr	r1, [pc, #60]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002ec2:	687a      	ldr	r2, [r7, #4]
34002ec4:	4613      	mov	r3, r2
34002ec6:	005b      	lsls	r3, r3, #1
34002ec8:	4413      	add	r3, r2
34002eca:	440b      	add	r3, r1
34002ecc:	2201      	movs	r2, #1
34002ece:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
34002ed0:	490b      	ldr	r1, [pc, #44]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002ed2:	687a      	ldr	r2, [r7, #4]
34002ed4:	4613      	mov	r3, r2
34002ed6:	005b      	lsls	r3, r3, #1
34002ed8:	4413      	add	r3, r2
34002eda:	440b      	add	r3, r1
34002edc:	3301      	adds	r3, #1
34002ede:	78fa      	ldrb	r2, [r7, #3]
34002ee0:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
34002ee2:	4907      	ldr	r1, [pc, #28]	@ (34002f00 <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002ee4:	687a      	ldr	r2, [r7, #4]
34002ee6:	4613      	mov	r3, r2
34002ee8:	005b      	lsls	r3, r3, #1
34002eea:	4413      	add	r3, r2
34002eec:	440b      	add	r3, r1
34002eee:	3302      	adds	r3, #2
34002ef0:	78ba      	ldrb	r2, [r7, #2]
34002ef2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002ef4:	68fb      	ldr	r3, [r7, #12]
}
34002ef6:	4618      	mov	r0, r3
34002ef8:	3710      	adds	r7, #16
34002efa:	46bd      	mov	sp, r7
34002efc:	bd80      	pop	{r7, pc}
34002efe:	bf00      	nop
34002f00:	340209ac 	.word	0x340209ac

34002f04 <XSPI_NOR_MspInit>:
  * @brief  Initializes the XSPI MSP.
  * @param  hxspi XSPI handle
  * @retval None
  */
static void XSPI_NOR_MspInit(XSPI_HandleTypeDef *hxspi)
{
34002f04:	b580      	push	{r7, lr}
34002f06:	b088      	sub	sp, #32
34002f08:	af00      	add	r7, sp, #0
34002f0a:	6078      	str	r0, [r7, #4]

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

  /* Enable the XSPI memory interface clock */
  XSPI_CLK_ENABLE();
34002f0c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f10:	f7ff fdea 	bl	34002ae8 <LL_AHB5_GRP1_EnableClock>

  /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34002f14:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34002f18:	f7ff fdd0 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34002f1c:	f003 f968 	bl	340061f0 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
34002f20:	2101      	movs	r1, #1
34002f22:	2002      	movs	r0, #2
34002f24:	f003 f8f4 	bl	34006110 <HAL_PWREx_ConfigVddIORange>

  /* Reset the XSPI memory interface */
  XSPI_FORCE_RESET();
34002f28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f2c:	f7ff fdf2 	bl	34002b14 <LL_AHB5_GRP1_ForceReset>
  XSPI_RELEASE_RESET();
34002f30:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002f34:	f7ff fdfe 	bl	34002b34 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable GPIO clocks */
  XSPI_CLK_GPIO_CLK_ENABLE();
34002f38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f3c:	f7ff fdbe 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_DQS_GPIO_CLK_ENABLE();
34002f40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f44:	f7ff fdba 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_CS_GPIO_CLK_ENABLE();
34002f48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f4c:	f7ff fdb6 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
34002f50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f54:	f7ff fdb2 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34002f58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f5c:	f7ff fdae 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
34002f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f64:	f7ff fdaa 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34002f68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f6c:	f7ff fda6 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
34002f70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f74:	f7ff fda2 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34002f78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f7c:	f7ff fd9e 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
34002f80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f84:	f7ff fd9a 	bl	34002abc <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002f88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002f8c:	f7ff fd96 	bl	34002abc <LL_AHB4_GRP1_EnableClock>

  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
34002f90:	2302      	movs	r3, #2
34002f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34002f94:	2302      	movs	r3, #2
34002f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
34002f98:	2301      	movs	r3, #1
34002f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34002f9c:	2303      	movs	r3, #3
34002f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
34002fa0:	2309      	movs	r3, #9
34002fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
34002fa4:	f107 030c 	add.w	r3, r7, #12
34002fa8:	4619      	mov	r1, r3
34002faa:	483c      	ldr	r0, [pc, #240]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34002fac:	f002 fd24 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
34002fb0:	2340      	movs	r3, #64	@ 0x40
34002fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34002fb4:	2300      	movs	r3, #0
34002fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
34002fb8:	2309      	movs	r3, #9
34002fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
34002fbc:	f107 030c 	add.w	r3, r7, #12
34002fc0:	4619      	mov	r1, r3
34002fc2:	4836      	ldr	r0, [pc, #216]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34002fc4:	f002 fd18 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
34002fc8:	2304      	movs	r3, #4
34002fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
34002fcc:	2309      	movs	r3, #9
34002fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
34002fd0:	f107 030c 	add.w	r3, r7, #12
34002fd4:	4619      	mov	r1, r3
34002fd6:	4831      	ldr	r0, [pc, #196]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34002fd8:	f002 fd0e 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
34002fdc:	2308      	movs	r3, #8
34002fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
34002fe0:	2309      	movs	r3, #9
34002fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
34002fe4:	f107 030c 	add.w	r3, r7, #12
34002fe8:	4619      	mov	r1, r3
34002fea:	482c      	ldr	r0, [pc, #176]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34002fec:	f002 fd04 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
34002ff0:	2310      	movs	r3, #16
34002ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34002ff4:	2309      	movs	r3, #9
34002ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002ff8:	f107 030c 	add.w	r3, r7, #12
34002ffc:	4619      	mov	r1, r3
34002ffe:	4827      	ldr	r0, [pc, #156]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34003000:	f002 fcfa 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34003004:	2320      	movs	r3, #32
34003006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34003008:	2309      	movs	r3, #9
3400300a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
3400300c:	f107 030c 	add.w	r3, r7, #12
34003010:	4619      	mov	r1, r3
34003012:	4822      	ldr	r0, [pc, #136]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34003014:	f002 fcf0 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34003018:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400301c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
3400301e:	2309      	movs	r3, #9
34003020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
34003022:	f107 030c 	add.w	r3, r7, #12
34003026:	4619      	mov	r1, r3
34003028:	481c      	ldr	r0, [pc, #112]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
3400302a:	f002 fce5 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
3400302e:	f44f 7300 	mov.w	r3, #512	@ 0x200
34003032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34003034:	2309      	movs	r3, #9
34003036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34003038:	f107 030c 	add.w	r3, r7, #12
3400303c:	4619      	mov	r1, r3
3400303e:	4817      	ldr	r0, [pc, #92]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34003040:	f002 fcda 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34003044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34003048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
3400304a:	2309      	movs	r3, #9
3400304c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
3400304e:	f107 030c 	add.w	r3, r7, #12
34003052:	4619      	mov	r1, r3
34003054:	4811      	ldr	r0, [pc, #68]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34003056:	f002 fccf 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
3400305a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400305e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
34003060:	2309      	movs	r3, #9
34003062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34003064:	f107 030c 	add.w	r3, r7, #12
34003068:	4619      	mov	r1, r3
3400306a:	480c      	ldr	r0, [pc, #48]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
3400306c:	f002 fcc4 	bl	340059f8 <HAL_GPIO_Init>

  /* XSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
34003070:	2301      	movs	r3, #1
34003072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34003074:	2309      	movs	r3, #9
34003076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34003078:	f107 030c 	add.w	r3, r7, #12
3400307c:	4619      	mov	r1, r3
3400307e:	4807      	ldr	r0, [pc, #28]	@ (3400309c <XSPI_NOR_MspInit+0x198>)
34003080:	f002 fcba 	bl	340059f8 <HAL_GPIO_Init>

  /* Configure the NVIC for XSPI */
  /* NVIC configuration for XSPI interrupt */
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34003084:	2200      	movs	r2, #0
34003086:	210f      	movs	r1, #15
34003088:	20aa      	movs	r0, #170	@ 0xaa
3400308a:	f001 f92b 	bl	340042e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
3400308e:	20aa      	movs	r0, #170	@ 0xaa
34003090:	f001 f982 	bl	34004398 <HAL_NVIC_EnableIRQ>
}
34003094:	bf00      	nop
34003096:	3720      	adds	r7, #32
34003098:	46bd      	mov	sp, r7
3400309a:	bd80      	pop	{r7, pc}
3400309c:	56023400 	.word	0x56023400

340030a0 <XSPI_NOR_ResetMemory>:
  * @brief  This function reset the XSPI memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ResetMemory(uint32_t Instance)
{
340030a0:	b580      	push	{r7, lr}
340030a2:	b084      	sub	sp, #16
340030a4:	af00      	add	r7, sp, #0
340030a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
340030a8:	2300      	movs	r3, #0
340030aa:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340030ac:	687b      	ldr	r3, [r7, #4]
340030ae:	2b00      	cmp	r3, #0
340030b0:	d003      	beq.n	340030ba <XSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340030b2:	f06f 0301 	mvn.w	r3, #1
340030b6:	60fb      	str	r3, [r7, #12]
340030b8:	e088      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340030ba:	687b      	ldr	r3, [r7, #4]
340030bc:	2264      	movs	r2, #100	@ 0x64
340030be:	fb02 f303 	mul.w	r3, r2, r3
340030c2:	4a45      	ldr	r2, [pc, #276]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
340030c4:	4413      	add	r3, r2
340030c6:	2200      	movs	r2, #0
340030c8:	2100      	movs	r1, #0
340030ca:	4618      	mov	r0, r3
340030cc:	f7ff fb04 	bl	340026d8 <MX25UM51245G_ResetEnable>
340030d0:	4603      	mov	r3, r0
340030d2:	2b00      	cmp	r3, #0
340030d4:	d003      	beq.n	340030de <XSPI_NOR_ResetMemory+0x3e>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340030d6:	f06f 0304 	mvn.w	r3, #4
340030da:	60fb      	str	r3, [r7, #12]
340030dc:	e076      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340030de:	687b      	ldr	r3, [r7, #4]
340030e0:	2264      	movs	r2, #100	@ 0x64
340030e2:	fb02 f303 	mul.w	r3, r2, r3
340030e6:	4a3c      	ldr	r2, [pc, #240]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
340030e8:	4413      	add	r3, r2
340030ea:	2200      	movs	r2, #0
340030ec:	2100      	movs	r1, #0
340030ee:	4618      	mov	r0, r3
340030f0:	f7ff fb48 	bl	34002784 <MX25UM51245G_ResetMemory>
340030f4:	4603      	mov	r3, r0
340030f6:	2b00      	cmp	r3, #0
340030f8:	d003      	beq.n	34003102 <XSPI_NOR_ResetMemory+0x62>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340030fa:	f06f 0304 	mvn.w	r3, #4
340030fe:	60fb      	str	r3, [r7, #12]
34003100:	e064      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34003102:	687b      	ldr	r3, [r7, #4]
34003104:	2264      	movs	r2, #100	@ 0x64
34003106:	fb02 f303 	mul.w	r3, r2, r3
3400310a:	4a33      	ldr	r2, [pc, #204]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
3400310c:	4413      	add	r3, r2
3400310e:	2200      	movs	r2, #0
34003110:	2101      	movs	r1, #1
34003112:	4618      	mov	r0, r3
34003114:	f7ff fae0 	bl	340026d8 <MX25UM51245G_ResetEnable>
34003118:	4603      	mov	r3, r0
3400311a:	2b00      	cmp	r3, #0
3400311c:	d003      	beq.n	34003126 <XSPI_NOR_ResetMemory+0x86>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400311e:	f06f 0304 	mvn.w	r3, #4
34003122:	60fb      	str	r3, [r7, #12]
34003124:	e052      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34003126:	687b      	ldr	r3, [r7, #4]
34003128:	2264      	movs	r2, #100	@ 0x64
3400312a:	fb02 f303 	mul.w	r3, r2, r3
3400312e:	4a2a      	ldr	r2, [pc, #168]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
34003130:	4413      	add	r3, r2
34003132:	2200      	movs	r2, #0
34003134:	2101      	movs	r1, #1
34003136:	4618      	mov	r0, r3
34003138:	f7ff fb24 	bl	34002784 <MX25UM51245G_ResetMemory>
3400313c:	4603      	mov	r3, r0
3400313e:	2b00      	cmp	r3, #0
34003140:	d003      	beq.n	3400314a <XSPI_NOR_ResetMemory+0xaa>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003142:	f06f 0304 	mvn.w	r3, #4
34003146:	60fb      	str	r3, [r7, #12]
34003148:	e040      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400314a:	687b      	ldr	r3, [r7, #4]
3400314c:	2264      	movs	r2, #100	@ 0x64
3400314e:	fb02 f303 	mul.w	r3, r2, r3
34003152:	4a21      	ldr	r2, [pc, #132]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
34003154:	4413      	add	r3, r2
34003156:	2201      	movs	r2, #1
34003158:	2101      	movs	r1, #1
3400315a:	4618      	mov	r0, r3
3400315c:	f7ff fabc 	bl	340026d8 <MX25UM51245G_ResetEnable>
34003160:	4603      	mov	r3, r0
34003162:	2b00      	cmp	r3, #0
34003164:	d003      	beq.n	3400316e <XSPI_NOR_ResetMemory+0xce>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003166:	f06f 0304 	mvn.w	r3, #4
3400316a:	60fb      	str	r3, [r7, #12]
3400316c:	e02e      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400316e:	687b      	ldr	r3, [r7, #4]
34003170:	2264      	movs	r2, #100	@ 0x64
34003172:	fb02 f303 	mul.w	r3, r2, r3
34003176:	4a18      	ldr	r2, [pc, #96]	@ (340031d8 <XSPI_NOR_ResetMemory+0x138>)
34003178:	4413      	add	r3, r2
3400317a:	2201      	movs	r2, #1
3400317c:	2101      	movs	r1, #1
3400317e:	4618      	mov	r0, r3
34003180:	f7ff fb00 	bl	34002784 <MX25UM51245G_ResetMemory>
34003184:	4603      	mov	r3, r0
34003186:	2b00      	cmp	r3, #0
34003188:	d003      	beq.n	34003192 <XSPI_NOR_ResetMemory+0xf2>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400318a:	f06f 0304 	mvn.w	r3, #4
3400318e:	60fb      	str	r3, [r7, #12]
34003190:	e01c      	b.n	340031cc <XSPI_NOR_ResetMemory+0x12c>
  }
  else
  {
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34003192:	4912      	ldr	r1, [pc, #72]	@ (340031dc <XSPI_NOR_ResetMemory+0x13c>)
34003194:	687a      	ldr	r2, [r7, #4]
34003196:	4613      	mov	r3, r2
34003198:	005b      	lsls	r3, r3, #1
3400319a:	4413      	add	r3, r2
3400319c:	440b      	add	r3, r1
3400319e:	2201      	movs	r2, #1
340031a0:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
340031a2:	490e      	ldr	r1, [pc, #56]	@ (340031dc <XSPI_NOR_ResetMemory+0x13c>)
340031a4:	687a      	ldr	r2, [r7, #4]
340031a6:	4613      	mov	r3, r2
340031a8:	005b      	lsls	r3, r3, #1
340031aa:	4413      	add	r3, r2
340031ac:	440b      	add	r3, r1
340031ae:	3301      	adds	r3, #1
340031b0:	2200      	movs	r2, #0
340031b2:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
340031b4:	4909      	ldr	r1, [pc, #36]	@ (340031dc <XSPI_NOR_ResetMemory+0x13c>)
340031b6:	687a      	ldr	r2, [r7, #4]
340031b8:	4613      	mov	r3, r2
340031ba:	005b      	lsls	r3, r3, #1
340031bc:	4413      	add	r3, r2
340031be:	440b      	add	r3, r1
340031c0:	3302      	adds	r3, #2
340031c2:	2200      	movs	r2, #0
340031c4:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
340031c6:	2064      	movs	r0, #100	@ 0x64
340031c8:	f000 fd96 	bl	34003cf8 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
340031cc:	68fb      	ldr	r3, [r7, #12]
}
340031ce:	4618      	mov	r0, r3
340031d0:	3710      	adds	r7, #16
340031d2:	46bd      	mov	sp, r7
340031d4:	bd80      	pop	{r7, pc}
340031d6:	bf00      	nop
340031d8:	34020948 	.word	0x34020948
340031dc:	340209ac 	.word	0x340209ac

340031e0 <XSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
340031e0:	b590      	push	{r4, r7, lr}
340031e2:	b087      	sub	sp, #28
340031e4:	af02      	add	r7, sp, #8
340031e6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340031e8:	687b      	ldr	r3, [r7, #4]
340031ea:	2b00      	cmp	r3, #0
340031ec:	d003      	beq.n	340031f6 <XSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340031ee:	f06f 0301 	mvn.w	r3, #1
340031f2:	60fb      	str	r3, [r7, #12]
340031f4:	e0db      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340031f6:	687b      	ldr	r3, [r7, #4]
340031f8:	2264      	movs	r2, #100	@ 0x64
340031fa:	fb02 f303 	mul.w	r3, r2, r3
340031fe:	4a6e      	ldr	r2, [pc, #440]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003200:	1898      	adds	r0, r3, r2
34003202:	496e      	ldr	r1, [pc, #440]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
34003204:	687a      	ldr	r2, [r7, #4]
34003206:	4613      	mov	r3, r2
34003208:	005b      	lsls	r3, r3, #1
3400320a:	4413      	add	r3, r2
3400320c:	440b      	add	r3, r1
3400320e:	3301      	adds	r3, #1
34003210:	7819      	ldrb	r1, [r3, #0]
34003212:	4c6a      	ldr	r4, [pc, #424]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
34003214:	687a      	ldr	r2, [r7, #4]
34003216:	4613      	mov	r3, r2
34003218:	005b      	lsls	r3, r3, #1
3400321a:	4413      	add	r3, r2
3400321c:	4423      	add	r3, r4
3400321e:	3302      	adds	r3, #2
34003220:	781b      	ldrb	r3, [r3, #0]
34003222:	461a      	mov	r2, r3
34003224:	f7ff f85a 	bl	340022dc <MX25UM51245G_WriteEnable>
34003228:	4603      	mov	r3, r0
3400322a:	2b00      	cmp	r3, #0
3400322c:	d003      	beq.n	34003236 <XSPI_NOR_EnterDOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400322e:	f06f 0304 	mvn.w	r3, #4
34003232:	60fb      	str	r3, [r7, #12]
34003234:	e0bb      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003236:	687b      	ldr	r3, [r7, #4]
34003238:	2264      	movs	r2, #100	@ 0x64
3400323a:	fb02 f303 	mul.w	r3, r2, r3
3400323e:	4a5e      	ldr	r2, [pc, #376]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003240:	1898      	adds	r0, r3, r2
34003242:	495e      	ldr	r1, [pc, #376]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
34003244:	687a      	ldr	r2, [r7, #4]
34003246:	4613      	mov	r3, r2
34003248:	005b      	lsls	r3, r3, #1
3400324a:	4413      	add	r3, r2
3400324c:	440b      	add	r3, r1
3400324e:	3301      	adds	r3, #1
34003250:	7819      	ldrb	r1, [r3, #0]
34003252:	4c5a      	ldr	r4, [pc, #360]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
34003254:	687a      	ldr	r2, [r7, #4]
34003256:	4613      	mov	r3, r2
34003258:	005b      	lsls	r3, r3, #1
3400325a:	4413      	add	r3, r2
3400325c:	4423      	add	r3, r4
3400325e:	3302      	adds	r3, #2
34003260:	781a      	ldrb	r2, [r3, #0]
34003262:	2300      	movs	r3, #0
34003264:	9300      	str	r3, [sp, #0]
34003266:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400326a:	f7ff f905 	bl	34002478 <MX25UM51245G_WriteCfg2Register>
3400326e:	4603      	mov	r3, r0
34003270:	2b00      	cmp	r3, #0
34003272:	d003      	beq.n	3400327c <XSPI_NOR_EnterDOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003274:	f06f 0304 	mvn.w	r3, #4
34003278:	60fb      	str	r3, [r7, #12]
3400327a:	e098      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400327c:	687b      	ldr	r3, [r7, #4]
3400327e:	2264      	movs	r2, #100	@ 0x64
34003280:	fb02 f303 	mul.w	r3, r2, r3
34003284:	4a4c      	ldr	r2, [pc, #304]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003286:	1898      	adds	r0, r3, r2
34003288:	494c      	ldr	r1, [pc, #304]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400328a:	687a      	ldr	r2, [r7, #4]
3400328c:	4613      	mov	r3, r2
3400328e:	005b      	lsls	r3, r3, #1
34003290:	4413      	add	r3, r2
34003292:	440b      	add	r3, r1
34003294:	3301      	adds	r3, #1
34003296:	7819      	ldrb	r1, [r3, #0]
34003298:	4c48      	ldr	r4, [pc, #288]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
3400329a:	687a      	ldr	r2, [r7, #4]
3400329c:	4613      	mov	r3, r2
3400329e:	005b      	lsls	r3, r3, #1
340032a0:	4413      	add	r3, r2
340032a2:	4423      	add	r3, r4
340032a4:	3302      	adds	r3, #2
340032a6:	781b      	ldrb	r3, [r3, #0]
340032a8:	461a      	mov	r2, r3
340032aa:	f7ff f817 	bl	340022dc <MX25UM51245G_WriteEnable>
340032ae:	4603      	mov	r3, r0
340032b0:	2b00      	cmp	r3, #0
340032b2:	d003      	beq.n	340032bc <XSPI_NOR_EnterDOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340032b4:	f06f 0304 	mvn.w	r3, #4
340032b8:	60fb      	str	r3, [r7, #12]
340032ba:	e078      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340032bc:	687b      	ldr	r3, [r7, #4]
340032be:	2264      	movs	r2, #100	@ 0x64
340032c0:	fb02 f303 	mul.w	r3, r2, r3
340032c4:	4a3c      	ldr	r2, [pc, #240]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
340032c6:	1898      	adds	r0, r3, r2
340032c8:	493c      	ldr	r1, [pc, #240]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
340032ca:	687a      	ldr	r2, [r7, #4]
340032cc:	4613      	mov	r3, r2
340032ce:	005b      	lsls	r3, r3, #1
340032d0:	4413      	add	r3, r2
340032d2:	440b      	add	r3, r1
340032d4:	3301      	adds	r3, #1
340032d6:	7819      	ldrb	r1, [r3, #0]
340032d8:	4c38      	ldr	r4, [pc, #224]	@ (340033bc <XSPI_NOR_EnterDOPIMode+0x1dc>)
340032da:	687a      	ldr	r2, [r7, #4]
340032dc:	4613      	mov	r3, r2
340032de:	005b      	lsls	r3, r3, #1
340032e0:	4413      	add	r3, r2
340032e2:	4423      	add	r3, r4
340032e4:	3302      	adds	r3, #2
340032e6:	781a      	ldrb	r2, [r3, #0]
340032e8:	2302      	movs	r3, #2
340032ea:	9300      	str	r3, [sp, #0]
340032ec:	2300      	movs	r3, #0
340032ee:	f7ff f8c3 	bl	34002478 <MX25UM51245G_WriteCfg2Register>
340032f2:	4603      	mov	r3, r0
340032f4:	2b00      	cmp	r3, #0
340032f6:	d003      	beq.n	34003300 <XSPI_NOR_EnterDOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340032f8:	f06f 0304 	mvn.w	r3, #4
340032fc:	60fb      	str	r3, [r7, #12]
340032fe:	e056      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34003300:	2028      	movs	r0, #40	@ 0x28
34003302:	f000 fcf9 	bl	34003cf8 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34003306:	4a2c      	ldr	r2, [pc, #176]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003308:	687b      	ldr	r3, [r7, #4]
3400330a:	2164      	movs	r1, #100	@ 0x64
3400330c:	fb01 f303 	mul.w	r3, r1, r3
34003310:	4413      	add	r3, r2
34003312:	330c      	adds	r3, #12
34003314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34003318:	601a      	str	r2, [r3, #0]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400331a:	4a27      	ldr	r2, [pc, #156]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
3400331c:	687b      	ldr	r3, [r7, #4]
3400331e:	2164      	movs	r1, #100	@ 0x64
34003320:	fb01 f303 	mul.w	r3, r1, r3
34003324:	4413      	add	r3, r2
34003326:	332c      	adds	r3, #44	@ 0x2c
34003328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400332c:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400332e:	687b      	ldr	r3, [r7, #4]
34003330:	2264      	movs	r2, #100	@ 0x64
34003332:	fb02 f303 	mul.w	r3, r2, r3
34003336:	4a20      	ldr	r2, [pc, #128]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003338:	4413      	add	r3, r2
3400333a:	4618      	mov	r0, r3
3400333c:	f013 faa4 	bl	34016888 <HAL_XSPI_Init>
34003340:	4603      	mov	r3, r0
34003342:	2b00      	cmp	r3, #0
34003344:	d003      	beq.n	3400334e <XSPI_NOR_EnterDOPIMode+0x16e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34003346:	f06f 0303 	mvn.w	r3, #3
3400334a:	60fb      	str	r3, [r7, #12]
3400334c:	e02f      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400334e:	687b      	ldr	r3, [r7, #4]
34003350:	2264      	movs	r2, #100	@ 0x64
34003352:	fb02 f303 	mul.w	r3, r2, r3
34003356:	4a18      	ldr	r2, [pc, #96]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34003358:	4413      	add	r3, r2
3400335a:	2201      	movs	r2, #1
3400335c:	2101      	movs	r1, #1
3400335e:	4618      	mov	r0, r3
34003360:	f7fe fdf3 	bl	34001f4a <MX25UM51245G_AutoPollingMemReady>
34003364:	4603      	mov	r3, r0
34003366:	2b00      	cmp	r3, #0
34003368:	d003      	beq.n	34003372 <XSPI_NOR_EnterDOPIMode+0x192>
                                              BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400336a:	f06f 0304 	mvn.w	r3, #4
3400336e:	60fb      	str	r3, [r7, #12]
34003370:	e01d      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34003372:	687b      	ldr	r3, [r7, #4]
34003374:	2264      	movs	r2, #100	@ 0x64
34003376:	fb02 f303 	mul.w	r3, r2, r3
3400337a:	4a0f      	ldr	r2, [pc, #60]	@ (340033b8 <XSPI_NOR_EnterDOPIMode+0x1d8>)
3400337c:	1898      	adds	r0, r3, r2
3400337e:	f107 0308 	add.w	r3, r7, #8
34003382:	9300      	str	r3, [sp, #0]
34003384:	2300      	movs	r3, #0
34003386:	2201      	movs	r2, #1
34003388:	2101      	movs	r1, #1
3400338a:	f7ff f908 	bl	3400259e <MX25UM51245G_ReadCfg2Register>
3400338e:	4603      	mov	r3, r0
34003390:	2b00      	cmp	r3, #0
34003392:	d003      	beq.n	3400339c <XSPI_NOR_EnterDOPIMode+0x1bc>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003394:	f06f 0304 	mvn.w	r3, #4
34003398:	60fb      	str	r3, [r7, #12]
3400339a:	e008      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
3400339c:	7a3b      	ldrb	r3, [r7, #8]
3400339e:	2b02      	cmp	r3, #2
340033a0:	d003      	beq.n	340033aa <XSPI_NOR_EnterDOPIMode+0x1ca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340033a2:	f06f 0304 	mvn.w	r3, #4
340033a6:	60fb      	str	r3, [r7, #12]
340033a8:	e001      	b.n	340033ae <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
340033aa:	2300      	movs	r3, #0
340033ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
340033ae:	68fb      	ldr	r3, [r7, #12]
}
340033b0:	4618      	mov	r0, r3
340033b2:	3714      	adds	r7, #20
340033b4:	46bd      	mov	sp, r7
340033b6:	bd90      	pop	{r4, r7, pc}
340033b8:	34020948 	.word	0x34020948
340033bc:	340209ac 	.word	0x340209ac

340033c0 <XSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
340033c0:	b590      	push	{r4, r7, lr}
340033c2:	b087      	sub	sp, #28
340033c4:	af02      	add	r7, sp, #8
340033c6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340033c8:	687b      	ldr	r3, [r7, #4]
340033ca:	2b00      	cmp	r3, #0
340033cc:	d003      	beq.n	340033d6 <XSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340033ce:	f06f 0301 	mvn.w	r3, #1
340033d2:	60fb      	str	r3, [r7, #12]
340033d4:	e0b7      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340033d6:	687b      	ldr	r3, [r7, #4]
340033d8:	2264      	movs	r2, #100	@ 0x64
340033da:	fb02 f303 	mul.w	r3, r2, r3
340033de:	4a5c      	ldr	r2, [pc, #368]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
340033e0:	1898      	adds	r0, r3, r2
340033e2:	495c      	ldr	r1, [pc, #368]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
340033e4:	687a      	ldr	r2, [r7, #4]
340033e6:	4613      	mov	r3, r2
340033e8:	005b      	lsls	r3, r3, #1
340033ea:	4413      	add	r3, r2
340033ec:	440b      	add	r3, r1
340033ee:	3301      	adds	r3, #1
340033f0:	7819      	ldrb	r1, [r3, #0]
340033f2:	4c58      	ldr	r4, [pc, #352]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
340033f4:	687a      	ldr	r2, [r7, #4]
340033f6:	4613      	mov	r3, r2
340033f8:	005b      	lsls	r3, r3, #1
340033fa:	4413      	add	r3, r2
340033fc:	4423      	add	r3, r4
340033fe:	3302      	adds	r3, #2
34003400:	781b      	ldrb	r3, [r3, #0]
34003402:	461a      	mov	r2, r3
34003404:	f7fe ff6a 	bl	340022dc <MX25UM51245G_WriteEnable>
34003408:	4603      	mov	r3, r0
3400340a:	2b00      	cmp	r3, #0
3400340c:	d003      	beq.n	34003416 <XSPI_NOR_EnterSOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400340e:	f06f 0304 	mvn.w	r3, #4
34003412:	60fb      	str	r3, [r7, #12]
34003414:	e097      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003416:	687b      	ldr	r3, [r7, #4]
34003418:	2264      	movs	r2, #100	@ 0x64
3400341a:	fb02 f303 	mul.w	r3, r2, r3
3400341e:	4a4c      	ldr	r2, [pc, #304]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
34003420:	1898      	adds	r0, r3, r2
34003422:	494c      	ldr	r1, [pc, #304]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
34003424:	687a      	ldr	r2, [r7, #4]
34003426:	4613      	mov	r3, r2
34003428:	005b      	lsls	r3, r3, #1
3400342a:	4413      	add	r3, r2
3400342c:	440b      	add	r3, r1
3400342e:	3301      	adds	r3, #1
34003430:	7819      	ldrb	r1, [r3, #0]
34003432:	4c48      	ldr	r4, [pc, #288]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
34003434:	687a      	ldr	r2, [r7, #4]
34003436:	4613      	mov	r3, r2
34003438:	005b      	lsls	r3, r3, #1
3400343a:	4413      	add	r3, r2
3400343c:	4423      	add	r3, r4
3400343e:	3302      	adds	r3, #2
34003440:	781a      	ldrb	r2, [r3, #0]
34003442:	2300      	movs	r3, #0
34003444:	9300      	str	r3, [sp, #0]
34003446:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400344a:	f7ff f815 	bl	34002478 <MX25UM51245G_WriteCfg2Register>
3400344e:	4603      	mov	r3, r0
34003450:	2b00      	cmp	r3, #0
34003452:	d003      	beq.n	3400345c <XSPI_NOR_EnterSOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003454:	f06f 0304 	mvn.w	r3, #4
34003458:	60fb      	str	r3, [r7, #12]
3400345a:	e074      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400345c:	687b      	ldr	r3, [r7, #4]
3400345e:	2264      	movs	r2, #100	@ 0x64
34003460:	fb02 f303 	mul.w	r3, r2, r3
34003464:	4a3a      	ldr	r2, [pc, #232]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
34003466:	1898      	adds	r0, r3, r2
34003468:	493a      	ldr	r1, [pc, #232]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
3400346a:	687a      	ldr	r2, [r7, #4]
3400346c:	4613      	mov	r3, r2
3400346e:	005b      	lsls	r3, r3, #1
34003470:	4413      	add	r3, r2
34003472:	440b      	add	r3, r1
34003474:	3301      	adds	r3, #1
34003476:	7819      	ldrb	r1, [r3, #0]
34003478:	4c36      	ldr	r4, [pc, #216]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
3400347a:	687a      	ldr	r2, [r7, #4]
3400347c:	4613      	mov	r3, r2
3400347e:	005b      	lsls	r3, r3, #1
34003480:	4413      	add	r3, r2
34003482:	4423      	add	r3, r4
34003484:	3302      	adds	r3, #2
34003486:	781b      	ldrb	r3, [r3, #0]
34003488:	461a      	mov	r2, r3
3400348a:	f7fe ff27 	bl	340022dc <MX25UM51245G_WriteEnable>
3400348e:	4603      	mov	r3, r0
34003490:	2b00      	cmp	r3, #0
34003492:	d003      	beq.n	3400349c <XSPI_NOR_EnterSOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34003494:	f06f 0304 	mvn.w	r3, #4
34003498:	60fb      	str	r3, [r7, #12]
3400349a:	e054      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400349c:	687b      	ldr	r3, [r7, #4]
3400349e:	2264      	movs	r2, #100	@ 0x64
340034a0:	fb02 f303 	mul.w	r3, r2, r3
340034a4:	4a2a      	ldr	r2, [pc, #168]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
340034a6:	1898      	adds	r0, r3, r2
340034a8:	492a      	ldr	r1, [pc, #168]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
340034aa:	687a      	ldr	r2, [r7, #4]
340034ac:	4613      	mov	r3, r2
340034ae:	005b      	lsls	r3, r3, #1
340034b0:	4413      	add	r3, r2
340034b2:	440b      	add	r3, r1
340034b4:	3301      	adds	r3, #1
340034b6:	7819      	ldrb	r1, [r3, #0]
340034b8:	4c26      	ldr	r4, [pc, #152]	@ (34003554 <XSPI_NOR_EnterSOPIMode+0x194>)
340034ba:	687a      	ldr	r2, [r7, #4]
340034bc:	4613      	mov	r3, r2
340034be:	005b      	lsls	r3, r3, #1
340034c0:	4413      	add	r3, r2
340034c2:	4423      	add	r3, r4
340034c4:	3302      	adds	r3, #2
340034c6:	781a      	ldrb	r2, [r3, #0]
340034c8:	2301      	movs	r3, #1
340034ca:	9300      	str	r3, [sp, #0]
340034cc:	2300      	movs	r3, #0
340034ce:	f7fe ffd3 	bl	34002478 <MX25UM51245G_WriteCfg2Register>
340034d2:	4603      	mov	r3, r0
340034d4:	2b00      	cmp	r3, #0
340034d6:	d003      	beq.n	340034e0 <XSPI_NOR_EnterSOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340034d8:	f06f 0304 	mvn.w	r3, #4
340034dc:	60fb      	str	r3, [r7, #12]
340034de:	e032      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340034e0:	2028      	movs	r0, #40	@ 0x28
340034e2:	f000 fc09 	bl	34003cf8 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
340034e6:	687b      	ldr	r3, [r7, #4]
340034e8:	2264      	movs	r2, #100	@ 0x64
340034ea:	fb02 f303 	mul.w	r3, r2, r3
340034ee:	4a18      	ldr	r2, [pc, #96]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
340034f0:	4413      	add	r3, r2
340034f2:	2200      	movs	r2, #0
340034f4:	2101      	movs	r1, #1
340034f6:	4618      	mov	r0, r3
340034f8:	f7fe fd27 	bl	34001f4a <MX25UM51245G_AutoPollingMemReady>
340034fc:	4603      	mov	r3, r0
340034fe:	2b00      	cmp	r3, #0
34003500:	d003      	beq.n	3400350a <XSPI_NOR_EnterSOPIMode+0x14a>
                                         BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34003502:	f06f 0304 	mvn.w	r3, #4
34003506:	60fb      	str	r3, [r7, #12]
34003508:	e01d      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400350a:	687b      	ldr	r3, [r7, #4]
3400350c:	2264      	movs	r2, #100	@ 0x64
3400350e:	fb02 f303 	mul.w	r3, r2, r3
34003512:	4a0f      	ldr	r2, [pc, #60]	@ (34003550 <XSPI_NOR_EnterSOPIMode+0x190>)
34003514:	1898      	adds	r0, r3, r2
34003516:	f107 0308 	add.w	r3, r7, #8
3400351a:	9300      	str	r3, [sp, #0]
3400351c:	2300      	movs	r3, #0
3400351e:	2200      	movs	r2, #0
34003520:	2101      	movs	r1, #1
34003522:	f7ff f83c 	bl	3400259e <MX25UM51245G_ReadCfg2Register>
34003526:	4603      	mov	r3, r0
34003528:	2b00      	cmp	r3, #0
3400352a:	d003      	beq.n	34003534 <XSPI_NOR_EnterSOPIMode+0x174>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400352c:	f06f 0304 	mvn.w	r3, #4
34003530:	60fb      	str	r3, [r7, #12]
34003532:	e008      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34003534:	7a3b      	ldrb	r3, [r7, #8]
34003536:	2b01      	cmp	r3, #1
34003538:	d003      	beq.n	34003542 <XSPI_NOR_EnterSOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
3400353a:	f06f 0304 	mvn.w	r3, #4
3400353e:	60fb      	str	r3, [r7, #12]
34003540:	e001      	b.n	34003546 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else
    {
      ret = BSP_ERROR_NONE;
34003542:	2300      	movs	r3, #0
34003544:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34003546:	68fb      	ldr	r3, [r7, #12]
}
34003548:	4618      	mov	r0, r3
3400354a:	3714      	adds	r7, #20
3400354c:	46bd      	mov	sp, r7
3400354e:	bd90      	pop	{r4, r7, pc}
34003550:	34020948 	.word	0x34020948
34003554:	340209ac 	.word	0x340209ac

34003558 <XSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
34003558:	b590      	push	{r4, r7, lr}
3400355a:	b087      	sub	sp, #28
3400355c:	af02      	add	r7, sp, #8
3400355e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34003560:	2300      	movs	r3, #0
34003562:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34003564:	687b      	ldr	r3, [r7, #4]
34003566:	2b00      	cmp	r3, #0
34003568:	d003      	beq.n	34003572 <XSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
3400356a:	f06f 0301 	mvn.w	r3, #1
3400356e:	60fb      	str	r3, [r7, #12]
34003570:	e0a3      	b.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34003572:	687b      	ldr	r3, [r7, #4]
34003574:	2264      	movs	r2, #100	@ 0x64
34003576:	fb02 f303 	mul.w	r3, r2, r3
3400357a:	4a52      	ldr	r2, [pc, #328]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
3400357c:	1898      	adds	r0, r3, r2
3400357e:	4952      	ldr	r1, [pc, #328]	@ (340036c8 <XSPI_NOR_ExitOPIMode+0x170>)
34003580:	687a      	ldr	r2, [r7, #4]
34003582:	4613      	mov	r3, r2
34003584:	005b      	lsls	r3, r3, #1
34003586:	4413      	add	r3, r2
34003588:	440b      	add	r3, r1
3400358a:	3301      	adds	r3, #1
3400358c:	7819      	ldrb	r1, [r3, #0]
3400358e:	4c4e      	ldr	r4, [pc, #312]	@ (340036c8 <XSPI_NOR_ExitOPIMode+0x170>)
34003590:	687a      	ldr	r2, [r7, #4]
34003592:	4613      	mov	r3, r2
34003594:	005b      	lsls	r3, r3, #1
34003596:	4413      	add	r3, r2
34003598:	4423      	add	r3, r4
3400359a:	3302      	adds	r3, #2
3400359c:	781b      	ldrb	r3, [r3, #0]
3400359e:	461a      	mov	r2, r3
340035a0:	f7fe fe9c 	bl	340022dc <MX25UM51245G_WriteEnable>
340035a4:	4603      	mov	r3, r0
340035a6:	2b00      	cmp	r3, #0
340035a8:	d003      	beq.n	340035b2 <XSPI_NOR_ExitOPIMode+0x5a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340035aa:	f06f 0304 	mvn.w	r3, #4
340035ae:	60fb      	str	r3, [r7, #12]
340035b0:	e083      	b.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
340035b2:	2300      	movs	r3, #0
340035b4:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
340035b6:	2300      	movs	r3, #0
340035b8:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
340035ba:	687b      	ldr	r3, [r7, #4]
340035bc:	2264      	movs	r2, #100	@ 0x64
340035be:	fb02 f303 	mul.w	r3, r2, r3
340035c2:	4a40      	ldr	r2, [pc, #256]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
340035c4:	1898      	adds	r0, r3, r2
340035c6:	4940      	ldr	r1, [pc, #256]	@ (340036c8 <XSPI_NOR_ExitOPIMode+0x170>)
340035c8:	687a      	ldr	r2, [r7, #4]
340035ca:	4613      	mov	r3, r2
340035cc:	005b      	lsls	r3, r3, #1
340035ce:	4413      	add	r3, r2
340035d0:	440b      	add	r3, r1
340035d2:	3301      	adds	r3, #1
340035d4:	7819      	ldrb	r1, [r3, #0]
340035d6:	4c3c      	ldr	r4, [pc, #240]	@ (340036c8 <XSPI_NOR_ExitOPIMode+0x170>)
340035d8:	687a      	ldr	r2, [r7, #4]
340035da:	4613      	mov	r3, r2
340035dc:	005b      	lsls	r3, r3, #1
340035de:	4413      	add	r3, r2
340035e0:	4423      	add	r3, r4
340035e2:	3302      	adds	r3, #2
340035e4:	781a      	ldrb	r2, [r3, #0]
340035e6:	7a3b      	ldrb	r3, [r7, #8]
340035e8:	9300      	str	r3, [sp, #0]
340035ea:	2300      	movs	r3, #0
340035ec:	f7fe ff44 	bl	34002478 <MX25UM51245G_WriteCfg2Register>
340035f0:	4603      	mov	r3, r0
340035f2:	2b00      	cmp	r3, #0
340035f4:	d003      	beq.n	340035fe <XSPI_NOR_ExitOPIMode+0xa6>
                                       Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
340035f6:	f06f 0304 	mvn.w	r3, #4
340035fa:	60fb      	str	r3, [r7, #12]
340035fc:	e05d      	b.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
340035fe:	2028      	movs	r0, #40	@ 0x28
34003600:	f000 fb7a 	bl	34003cf8 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34003604:	4930      	ldr	r1, [pc, #192]	@ (340036c8 <XSPI_NOR_ExitOPIMode+0x170>)
34003606:	687a      	ldr	r2, [r7, #4]
34003608:	4613      	mov	r3, r2
3400360a:	005b      	lsls	r3, r3, #1
3400360c:	4413      	add	r3, r2
3400360e:	440b      	add	r3, r1
34003610:	3302      	adds	r3, #2
34003612:	781b      	ldrb	r3, [r3, #0]
34003614:	2b01      	cmp	r3, #1
34003616:	d120      	bne.n	3400365a <XSPI_NOR_ExitOPIMode+0x102>
      {
        /* Reconfigure the memory type of the peripheral */
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34003618:	4a2a      	ldr	r2, [pc, #168]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
3400361a:	687b      	ldr	r3, [r7, #4]
3400361c:	2164      	movs	r1, #100	@ 0x64
3400361e:	fb01 f303 	mul.w	r3, r1, r3
34003622:	4413      	add	r3, r2
34003624:	330c      	adds	r3, #12
34003626:	2200      	movs	r2, #0
34003628:	601a      	str	r2, [r3, #0]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3400362a:	4a26      	ldr	r2, [pc, #152]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
3400362c:	687b      	ldr	r3, [r7, #4]
3400362e:	2164      	movs	r1, #100	@ 0x64
34003630:	fb01 f303 	mul.w	r3, r1, r3
34003634:	4413      	add	r3, r2
34003636:	332c      	adds	r3, #44	@ 0x2c
34003638:	2200      	movs	r2, #0
3400363a:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400363c:	687b      	ldr	r3, [r7, #4]
3400363e:	2264      	movs	r2, #100	@ 0x64
34003640:	fb02 f303 	mul.w	r3, r2, r3
34003644:	4a1f      	ldr	r2, [pc, #124]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
34003646:	4413      	add	r3, r2
34003648:	4618      	mov	r0, r3
3400364a:	f013 f91d 	bl	34016888 <HAL_XSPI_Init>
3400364e:	4603      	mov	r3, r0
34003650:	2b00      	cmp	r3, #0
34003652:	d002      	beq.n	3400365a <XSPI_NOR_ExitOPIMode+0x102>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
34003654:	f06f 0303 	mvn.w	r3, #3
34003658:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
3400365a:	68fb      	ldr	r3, [r7, #12]
3400365c:	2b00      	cmp	r3, #0
3400365e:	d12c      	bne.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34003660:	687b      	ldr	r3, [r7, #4]
34003662:	2264      	movs	r2, #100	@ 0x64
34003664:	fb02 f303 	mul.w	r3, r2, r3
34003668:	4a16      	ldr	r2, [pc, #88]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
3400366a:	4413      	add	r3, r2
3400366c:	2200      	movs	r2, #0
3400366e:	2100      	movs	r1, #0
34003670:	4618      	mov	r0, r3
34003672:	f7fe fc6a 	bl	34001f4a <MX25UM51245G_AutoPollingMemReady>
34003676:	4603      	mov	r3, r0
34003678:	2b00      	cmp	r3, #0
3400367a:	d003      	beq.n	34003684 <XSPI_NOR_ExitOPIMode+0x12c>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
3400367c:	f06f 0304 	mvn.w	r3, #4
34003680:	60fb      	str	r3, [r7, #12]
34003682:	e01a      	b.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34003684:	687b      	ldr	r3, [r7, #4]
34003686:	2264      	movs	r2, #100	@ 0x64
34003688:	fb02 f303 	mul.w	r3, r2, r3
3400368c:	4a0d      	ldr	r2, [pc, #52]	@ (340036c4 <XSPI_NOR_ExitOPIMode+0x16c>)
3400368e:	1898      	adds	r0, r3, r2
34003690:	f107 0308 	add.w	r3, r7, #8
34003694:	9300      	str	r3, [sp, #0]
34003696:	2300      	movs	r3, #0
34003698:	2200      	movs	r2, #0
3400369a:	2100      	movs	r1, #0
3400369c:	f7fe ff7f 	bl	3400259e <MX25UM51245G_ReadCfg2Register>
340036a0:	4603      	mov	r3, r0
340036a2:	2b00      	cmp	r3, #0
340036a4:	d003      	beq.n	340036ae <XSPI_NOR_ExitOPIMode+0x156>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
340036a6:	f06f 0304 	mvn.w	r3, #4
340036aa:	60fb      	str	r3, [r7, #12]
340036ac:	e005      	b.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
        }
        else if (reg[0] != 0U)
340036ae:	7a3b      	ldrb	r3, [r7, #8]
340036b0:	2b00      	cmp	r3, #0
340036b2:	d002      	beq.n	340036ba <XSPI_NOR_ExitOPIMode+0x162>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
340036b4:	f06f 0304 	mvn.w	r3, #4
340036b8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
340036ba:	68fb      	ldr	r3, [r7, #12]
}
340036bc:	4618      	mov	r0, r3
340036be:	3714      	adds	r7, #20
340036c0:	46bd      	mov	sp, r7
340036c2:	bd90      	pop	{r4, r7, pc}
340036c4:	34020948 	.word	0x34020948
340036c8:	340209ac 	.word	0x340209ac

340036cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
340036cc:	b480      	push	{r7}
340036ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
340036d0:	4b6a      	ldr	r3, [pc, #424]	@ (3400387c <SystemInit+0x1b0>)
340036d2:	4a6b      	ldr	r2, [pc, #428]	@ (34003880 <SystemInit+0x1b4>)
340036d4:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340036d6:	4b6b      	ldr	r3, [pc, #428]	@ (34003884 <SystemInit+0x1b8>)
340036d8:	2201      	movs	r2, #1
340036da:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340036de:	4b69      	ldr	r3, [pc, #420]	@ (34003884 <SystemInit+0x1b8>)
340036e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340036e4:	461a      	mov	r2, r3
340036e6:	2301      	movs	r3, #1
340036e8:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
340036ec:	4b65      	ldr	r3, [pc, #404]	@ (34003884 <SystemInit+0x1b8>)
340036ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340036f2:	461a      	mov	r2, r3
340036f4:	2301      	movs	r3, #1
340036f6:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
340036fa:	4b63      	ldr	r3, [pc, #396]	@ (34003888 <SystemInit+0x1bc>)
340036fc:	2200      	movs	r2, #0
340036fe:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003700:	4b61      	ldr	r3, [pc, #388]	@ (34003888 <SystemInit+0x1bc>)
34003702:	2200      	movs	r2, #0
34003704:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003706:	4b60      	ldr	r3, [pc, #384]	@ (34003888 <SystemInit+0x1bc>)
34003708:	2200      	movs	r2, #0
3400370a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
3400370c:	4b5e      	ldr	r3, [pc, #376]	@ (34003888 <SystemInit+0x1bc>)
3400370e:	2201      	movs	r2, #1
34003710:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003712:	4b5d      	ldr	r3, [pc, #372]	@ (34003888 <SystemInit+0x1bc>)
34003714:	2200      	movs	r2, #0
34003716:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003718:	4b5b      	ldr	r3, [pc, #364]	@ (34003888 <SystemInit+0x1bc>)
3400371a:	2200      	movs	r2, #0
3400371c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
3400371e:	4b5a      	ldr	r3, [pc, #360]	@ (34003888 <SystemInit+0x1bc>)
34003720:	2202      	movs	r2, #2
34003722:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003724:	4b58      	ldr	r3, [pc, #352]	@ (34003888 <SystemInit+0x1bc>)
34003726:	2200      	movs	r2, #0
34003728:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400372a:	4b57      	ldr	r3, [pc, #348]	@ (34003888 <SystemInit+0x1bc>)
3400372c:	2200      	movs	r2, #0
3400372e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34003730:	4b55      	ldr	r3, [pc, #340]	@ (34003888 <SystemInit+0x1bc>)
34003732:	2203      	movs	r2, #3
34003734:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003736:	4b54      	ldr	r3, [pc, #336]	@ (34003888 <SystemInit+0x1bc>)
34003738:	2200      	movs	r2, #0
3400373a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400373c:	4b52      	ldr	r3, [pc, #328]	@ (34003888 <SystemInit+0x1bc>)
3400373e:	2200      	movs	r2, #0
34003740:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34003742:	4b51      	ldr	r3, [pc, #324]	@ (34003888 <SystemInit+0x1bc>)
34003744:	2204      	movs	r2, #4
34003746:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003748:	4b4f      	ldr	r3, [pc, #316]	@ (34003888 <SystemInit+0x1bc>)
3400374a:	2200      	movs	r2, #0
3400374c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400374e:	4b4e      	ldr	r3, [pc, #312]	@ (34003888 <SystemInit+0x1bc>)
34003750:	2200      	movs	r2, #0
34003752:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34003754:	4b4c      	ldr	r3, [pc, #304]	@ (34003888 <SystemInit+0x1bc>)
34003756:	2205      	movs	r2, #5
34003758:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400375a:	4b4b      	ldr	r3, [pc, #300]	@ (34003888 <SystemInit+0x1bc>)
3400375c:	2200      	movs	r2, #0
3400375e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003760:	4b49      	ldr	r3, [pc, #292]	@ (34003888 <SystemInit+0x1bc>)
34003762:	2200      	movs	r2, #0
34003764:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34003766:	4b48      	ldr	r3, [pc, #288]	@ (34003888 <SystemInit+0x1bc>)
34003768:	2206      	movs	r2, #6
3400376a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400376c:	4b46      	ldr	r3, [pc, #280]	@ (34003888 <SystemInit+0x1bc>)
3400376e:	2200      	movs	r2, #0
34003770:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003772:	4b45      	ldr	r3, [pc, #276]	@ (34003888 <SystemInit+0x1bc>)
34003774:	2200      	movs	r2, #0
34003776:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34003778:	4b43      	ldr	r3, [pc, #268]	@ (34003888 <SystemInit+0x1bc>)
3400377a:	2207      	movs	r2, #7
3400377c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400377e:	4b42      	ldr	r3, [pc, #264]	@ (34003888 <SystemInit+0x1bc>)
34003780:	2200      	movs	r2, #0
34003782:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003784:	4b40      	ldr	r3, [pc, #256]	@ (34003888 <SystemInit+0x1bc>)
34003786:	2200      	movs	r2, #0
34003788:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3400378a:	4b3e      	ldr	r3, [pc, #248]	@ (34003884 <SystemInit+0x1b8>)
3400378c:	2201      	movs	r2, #1
3400378e:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34003792:	4b3c      	ldr	r3, [pc, #240]	@ (34003884 <SystemInit+0x1b8>)
34003794:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34003798:	4b38      	ldr	r3, [pc, #224]	@ (3400387c <SystemInit+0x1b0>)
3400379a:	4a3c      	ldr	r2, [pc, #240]	@ (3400388c <SystemInit+0x1c0>)
3400379c:	689b      	ldr	r3, [r3, #8]
3400379e:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
340037a0:	4b3b      	ldr	r3, [pc, #236]	@ (34003890 <SystemInit+0x1c4>)
340037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340037a4:	4a3a      	ldr	r2, [pc, #232]	@ (34003890 <SystemInit+0x1c4>)
340037a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
340037aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
340037ac:	4b38      	ldr	r3, [pc, #224]	@ (34003890 <SystemInit+0x1c4>)
340037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340037b0:	4a37      	ldr	r2, [pc, #220]	@ (34003890 <SystemInit+0x1c4>)
340037b2:	f043 0310 	orr.w	r3, r3, #16
340037b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
340037b8:	4b35      	ldr	r3, [pc, #212]	@ (34003890 <SystemInit+0x1c4>)
340037ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
340037bc:	4b31      	ldr	r3, [pc, #196]	@ (34003884 <SystemInit+0x1b8>)
340037be:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
340037c2:	4a30      	ldr	r2, [pc, #192]	@ (34003884 <SystemInit+0x1b8>)
340037c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340037c8:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340037cc:	4b2d      	ldr	r3, [pc, #180]	@ (34003884 <SystemInit+0x1b8>)
340037ce:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340037d2:	4a2c      	ldr	r2, [pc, #176]	@ (34003884 <SystemInit+0x1b8>)
340037d4:	f043 0310 	orr.w	r3, r3, #16
340037d8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
340037dc:	4b29      	ldr	r3, [pc, #164]	@ (34003884 <SystemInit+0x1b8>)
340037de:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
340037e2:	4b28      	ldr	r3, [pc, #160]	@ (34003884 <SystemInit+0x1b8>)
340037e4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340037e8:	4a26      	ldr	r2, [pc, #152]	@ (34003884 <SystemInit+0x1b8>)
340037ea:	f023 0310 	bic.w	r3, r3, #16
340037ee:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340037f2:	4b24      	ldr	r3, [pc, #144]	@ (34003884 <SystemInit+0x1b8>)
340037f4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
340037f8:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
340037fc:	4b21      	ldr	r3, [pc, #132]	@ (34003884 <SystemInit+0x1b8>)
340037fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003802:	461a      	mov	r2, r3
34003804:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34003808:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3400380c:	4b1d      	ldr	r3, [pc, #116]	@ (34003884 <SystemInit+0x1b8>)
3400380e:	2201      	movs	r2, #1
34003810:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34003814:	4b1b      	ldr	r3, [pc, #108]	@ (34003884 <SystemInit+0x1b8>)
34003816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400381a:	461a      	mov	r2, r3
3400381c:	2301      	movs	r3, #1
3400381e:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34003822:	4b18      	ldr	r3, [pc, #96]	@ (34003884 <SystemInit+0x1b8>)
34003824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003828:	461a      	mov	r2, r3
3400382a:	2301      	movs	r3, #1
3400382c:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34003830:	4b14      	ldr	r3, [pc, #80]	@ (34003884 <SystemInit+0x1b8>)
34003832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003836:	461a      	mov	r2, r3
34003838:	2340      	movs	r3, #64	@ 0x40
3400383a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400383e:	4b13      	ldr	r3, [pc, #76]	@ (3400388c <SystemInit+0x1c0>)
34003840:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34003842:	4b10      	ldr	r3, [pc, #64]	@ (34003884 <SystemInit+0x1b8>)
34003844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003848:	461a      	mov	r2, r3
3400384a:	2301      	movs	r3, #1
3400384c:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34003850:	4b0a      	ldr	r3, [pc, #40]	@ (3400387c <SystemInit+0x1b0>)
34003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003856:	4a09      	ldr	r2, [pc, #36]	@ (3400387c <SystemInit+0x1b0>)
34003858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400385c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34003860:	4b0c      	ldr	r3, [pc, #48]	@ (34003894 <SystemInit+0x1c8>)
34003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003866:	4a0b      	ldr	r2, [pc, #44]	@ (34003894 <SystemInit+0x1c8>)
34003868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400386c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34003870:	bf00      	nop
34003872:	46bd      	mov	sp, r7
34003874:	f85d 7b04 	ldr.w	r7, [sp], #4
34003878:	4770      	bx	lr
3400387a:	bf00      	nop
3400387c:	e000ed00 	.word	0xe000ed00
34003880:	34000400 	.word	0x34000400
34003884:	56028000 	.word	0x56028000
34003888:	e000edd0 	.word	0xe000edd0
3400388c:	56008000 	.word	0x56008000
34003890:	56024800 	.word	0x56024800
34003894:	e002ed00 	.word	0xe002ed00

34003898 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34003898:	b480      	push	{r7}
3400389a:	b08d      	sub	sp, #52	@ 0x34
3400389c:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
3400389e:	2300      	movs	r3, #0
340038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
340038a2:	2300      	movs	r3, #0
340038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
340038a6:	2300      	movs	r3, #0
340038a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
340038aa:	2300      	movs	r3, #0
340038ac:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
340038ae:	2300      	movs	r3, #0
340038b0:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
340038b2:	2300      	movs	r3, #0
340038b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340038b6:	4b9b      	ldr	r3, [pc, #620]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340038b8:	6a1b      	ldr	r3, [r3, #32]
340038ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
340038be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340038c2:	d029      	beq.n	34003918 <SystemCoreClockUpdate+0x80>
340038c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340038c8:	f200 8180 	bhi.w	34003bcc <SystemCoreClockUpdate+0x334>
340038cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340038d0:	d01f      	beq.n	34003912 <SystemCoreClockUpdate+0x7a>
340038d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340038d6:	f200 8179 	bhi.w	34003bcc <SystemCoreClockUpdate+0x334>
340038da:	2b00      	cmp	r3, #0
340038dc:	d003      	beq.n	340038e6 <SystemCoreClockUpdate+0x4e>
340038de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340038e2:	d00a      	beq.n	340038fa <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
340038e4:	e172      	b.n	34003bcc <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340038e6:	4b8f      	ldr	r3, [pc, #572]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340038ea:	09db      	lsrs	r3, r3, #7
340038ec:	f003 0303 	and.w	r3, r3, #3
340038f0:	4a8d      	ldr	r2, [pc, #564]	@ (34003b28 <SystemCoreClockUpdate+0x290>)
340038f2:	fa22 f303 	lsr.w	r3, r2, r3
340038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340038f8:	e169      	b.n	34003bce <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340038fa:	4b8a      	ldr	r3, [pc, #552]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340038fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003902:	2b00      	cmp	r3, #0
34003904:	d102      	bne.n	3400390c <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34003906:	4b89      	ldr	r3, [pc, #548]	@ (34003b2c <SystemCoreClockUpdate+0x294>)
34003908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400390a:	e160      	b.n	34003bce <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
3400390c:	4b88      	ldr	r3, [pc, #544]	@ (34003b30 <SystemCoreClockUpdate+0x298>)
3400390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003910:	e15d      	b.n	34003bce <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
34003912:	4b88      	ldr	r3, [pc, #544]	@ (34003b34 <SystemCoreClockUpdate+0x29c>)
34003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003916:	e15a      	b.n	34003bce <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34003918:	4b82      	ldr	r3, [pc, #520]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
3400391a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400391e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34003922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003926:	d066      	beq.n	340039f6 <SystemCoreClockUpdate+0x15e>
34003928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400392c:	f200 8091 	bhi.w	34003a52 <SystemCoreClockUpdate+0x1ba>
34003930:	2b00      	cmp	r3, #0
34003932:	d003      	beq.n	3400393c <SystemCoreClockUpdate+0xa4>
34003934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003938:	d02f      	beq.n	3400399a <SystemCoreClockUpdate+0x102>
3400393a:	e08a      	b.n	34003a52 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3400393c:	4b79      	ldr	r3, [pc, #484]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
3400393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34003942:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34003944:	68fb      	ldr	r3, [r7, #12]
34003946:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3400394a:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
3400394c:	68fb      	ldr	r3, [r7, #12]
3400394e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003952:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003954:	693b      	ldr	r3, [r7, #16]
34003956:	2b00      	cmp	r3, #0
34003958:	f040 80a9 	bne.w	34003aae <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
3400395c:	68fb      	ldr	r3, [r7, #12]
3400395e:	0d1b      	lsrs	r3, r3, #20
34003960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003964:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34003966:	68fb      	ldr	r3, [r7, #12]
34003968:	0a1b      	lsrs	r3, r3, #8
3400396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3400396e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34003970:	4b6c      	ldr	r3, [pc, #432]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34003976:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400397a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3400397c:	4b69      	ldr	r3, [pc, #420]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
3400397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003982:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34003984:	68fb      	ldr	r3, [r7, #12]
34003986:	0edb      	lsrs	r3, r3, #27
34003988:	f003 0307 	and.w	r3, r3, #7
3400398c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
3400398e:	68fb      	ldr	r3, [r7, #12]
34003990:	0e1b      	lsrs	r3, r3, #24
34003992:	f003 0307 	and.w	r3, r3, #7
34003996:	61bb      	str	r3, [r7, #24]
      break;
34003998:	e089      	b.n	34003aae <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400399a:	4b62      	ldr	r3, [pc, #392]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
3400399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340039a0:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340039a2:	68fb      	ldr	r3, [r7, #12]
340039a4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340039a8:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
340039aa:	68fb      	ldr	r3, [r7, #12]
340039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340039b0:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340039b2:	693b      	ldr	r3, [r7, #16]
340039b4:	2b00      	cmp	r3, #0
340039b6:	d17c      	bne.n	34003ab2 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
340039b8:	68fb      	ldr	r3, [r7, #12]
340039ba:	0d1b      	lsrs	r3, r3, #20
340039bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340039c2:	68fb      	ldr	r3, [r7, #12]
340039c4:	0a1b      	lsrs	r3, r3, #8
340039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
340039ca:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340039cc:	4b55      	ldr	r3, [pc, #340]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340039d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340039d6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340039d8:	4b52      	ldr	r3, [pc, #328]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340039da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
340039de:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340039e0:	68fb      	ldr	r3, [r7, #12]
340039e2:	0edb      	lsrs	r3, r3, #27
340039e4:	f003 0307 	and.w	r3, r3, #7
340039e8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
340039ea:	68fb      	ldr	r3, [r7, #12]
340039ec:	0e1b      	lsrs	r3, r3, #24
340039ee:	f003 0307 	and.w	r3, r3, #7
340039f2:	61bb      	str	r3, [r7, #24]
      break;
340039f4:	e05d      	b.n	34003ab2 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340039f6:	4b4b      	ldr	r3, [pc, #300]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
340039f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340039fc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340039fe:	68fb      	ldr	r3, [r7, #12]
34003a00:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003a04:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34003a06:	68fb      	ldr	r3, [r7, #12]
34003a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003a0c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003a0e:	693b      	ldr	r3, [r7, #16]
34003a10:	2b00      	cmp	r3, #0
34003a12:	d150      	bne.n	34003ab6 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34003a14:	68fb      	ldr	r3, [r7, #12]
34003a16:	0d1b      	lsrs	r3, r3, #20
34003a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34003a1e:	68fb      	ldr	r3, [r7, #12]
34003a20:	0a1b      	lsrs	r3, r3, #8
34003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003a26:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34003a28:	4b3e      	ldr	r3, [pc, #248]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003a2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34003a2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003a32:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34003a34:	4b3b      	ldr	r3, [pc, #236]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003a3a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34003a3c:	68fb      	ldr	r3, [r7, #12]
34003a3e:	0edb      	lsrs	r3, r3, #27
34003a40:	f003 0307 	and.w	r3, r3, #7
34003a44:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34003a46:	68fb      	ldr	r3, [r7, #12]
34003a48:	0e1b      	lsrs	r3, r3, #24
34003a4a:	f003 0307 	and.w	r3, r3, #7
34003a4e:	61bb      	str	r3, [r7, #24]
      break;
34003a50:	e031      	b.n	34003ab6 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34003a52:	4b34      	ldr	r3, [pc, #208]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34003a58:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34003a5a:	68fb      	ldr	r3, [r7, #12]
34003a5c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003a60:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34003a62:	68fb      	ldr	r3, [r7, #12]
34003a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003a68:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003a6a:	693b      	ldr	r3, [r7, #16]
34003a6c:	2b00      	cmp	r3, #0
34003a6e:	d124      	bne.n	34003aba <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34003a70:	68fb      	ldr	r3, [r7, #12]
34003a72:	0d1b      	lsrs	r3, r3, #20
34003a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34003a7a:	68fb      	ldr	r3, [r7, #12]
34003a7c:	0a1b      	lsrs	r3, r3, #8
34003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003a82:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34003a84:	4b27      	ldr	r3, [pc, #156]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34003a8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003a8e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34003a90:	4b24      	ldr	r3, [pc, #144]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003a92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34003a96:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34003a98:	68fb      	ldr	r3, [r7, #12]
34003a9a:	0edb      	lsrs	r3, r3, #27
34003a9c:	f003 0307 	and.w	r3, r3, #7
34003aa0:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34003aa2:	68fb      	ldr	r3, [r7, #12]
34003aa4:	0e1b      	lsrs	r3, r3, #24
34003aa6:	f003 0307 	and.w	r3, r3, #7
34003aaa:	61bb      	str	r3, [r7, #24]
      break;
34003aac:	e005      	b.n	34003aba <SystemCoreClockUpdate+0x222>
      break;
34003aae:	bf00      	nop
34003ab0:	e004      	b.n	34003abc <SystemCoreClockUpdate+0x224>
      break;
34003ab2:	bf00      	nop
34003ab4:	e002      	b.n	34003abc <SystemCoreClockUpdate+0x224>
      break;
34003ab6:	bf00      	nop
34003ab8:	e000      	b.n	34003abc <SystemCoreClockUpdate+0x224>
      break;
34003aba:	bf00      	nop
    switch (pllsource)
34003abc:	697b      	ldr	r3, [r7, #20]
34003abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003ac2:	d02c      	beq.n	34003b1e <SystemCoreClockUpdate+0x286>
34003ac4:	697b      	ldr	r3, [r7, #20]
34003ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34003aca:	d839      	bhi.n	34003b40 <SystemCoreClockUpdate+0x2a8>
34003acc:	697b      	ldr	r3, [r7, #20]
34003ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003ad2:	d021      	beq.n	34003b18 <SystemCoreClockUpdate+0x280>
34003ad4:	697b      	ldr	r3, [r7, #20]
34003ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003ada:	d831      	bhi.n	34003b40 <SystemCoreClockUpdate+0x2a8>
34003adc:	697b      	ldr	r3, [r7, #20]
34003ade:	2b00      	cmp	r3, #0
34003ae0:	d004      	beq.n	34003aec <SystemCoreClockUpdate+0x254>
34003ae2:	697b      	ldr	r3, [r7, #20]
34003ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003ae8:	d00a      	beq.n	34003b00 <SystemCoreClockUpdate+0x268>
      break;
34003aea:	e029      	b.n	34003b40 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34003aec:	4b0d      	ldr	r3, [pc, #52]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34003af0:	09db      	lsrs	r3, r3, #7
34003af2:	f003 0303 	and.w	r3, r3, #3
34003af6:	4a0c      	ldr	r2, [pc, #48]	@ (34003b28 <SystemCoreClockUpdate+0x290>)
34003af8:	fa22 f303 	lsr.w	r3, r2, r3
34003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003afe:	e020      	b.n	34003b42 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34003b00:	4b08      	ldr	r3, [pc, #32]	@ (34003b24 <SystemCoreClockUpdate+0x28c>)
34003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003b08:	2b00      	cmp	r3, #0
34003b0a:	d102      	bne.n	34003b12 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34003b0c:	4b07      	ldr	r3, [pc, #28]	@ (34003b2c <SystemCoreClockUpdate+0x294>)
34003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b10:	e017      	b.n	34003b42 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
34003b12:	4b07      	ldr	r3, [pc, #28]	@ (34003b30 <SystemCoreClockUpdate+0x298>)
34003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b16:	e014      	b.n	34003b42 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34003b18:	4b06      	ldr	r3, [pc, #24]	@ (34003b34 <SystemCoreClockUpdate+0x29c>)
34003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b1c:	e011      	b.n	34003b42 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34003b1e:	4b06      	ldr	r3, [pc, #24]	@ (34003b38 <SystemCoreClockUpdate+0x2a0>)
34003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003b22:	e00e      	b.n	34003b42 <SystemCoreClockUpdate+0x2aa>
34003b24:	56028000 	.word	0x56028000
34003b28:	03d09000 	.word	0x03d09000
34003b2c:	003d0900 	.word	0x003d0900
34003b30:	00f42400 	.word	0x00f42400
34003b34:	02dc6c00 	.word	0x02dc6c00
34003b38:	00bb8000 	.word	0x00bb8000
34003b3c:	4b800000 	.word	0x4b800000
      break;
34003b40:	bf00      	nop
    if (pllbypass == 0U)
34003b42:	693b      	ldr	r3, [r7, #16]
34003b44:	2b00      	cmp	r3, #0
34003b46:	d134      	bne.n	34003bb2 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003b4a:	ee07 3a90 	vmov	s15, r3
34003b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34003b54:	ee07 3a90 	vmov	s15, r3
34003b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
34003b5c:	6a3b      	ldr	r3, [r7, #32]
34003b5e:	ee07 3a90 	vmov	s15, r3
34003b62:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34003b66:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34003b3c <SystemCoreClockUpdate+0x2a4>
34003b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
34003b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
34003b72:	ee67 6a27 	vmul.f32	s13, s14, s15
34003b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003b78:	ee07 3a90 	vmov	s15, r3
34003b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003b84:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34003b88:	69fb      	ldr	r3, [r7, #28]
34003b8a:	ee07 3a90 	vmov	s15, r3
34003b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34003b92:	69bb      	ldr	r3, [r7, #24]
34003b94:	ee07 3a90 	vmov	s15, r3
34003b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
34003b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
34003ba0:	edd7 6a02 	vldr	s13, [r7, #8]
34003ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34003bac:	ee17 3a90 	vmov	r3, s15
34003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (34003be0 <SystemCoreClockUpdate+0x348>)
34003bb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003bb8:	0c1b      	lsrs	r3, r3, #16
34003bba:	b2db      	uxtb	r3, r3
34003bbc:	3301      	adds	r3, #1
34003bbe:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34003bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34003bc2:	687b      	ldr	r3, [r7, #4]
34003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
34003bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003bca:	e000      	b.n	34003bce <SystemCoreClockUpdate+0x336>
    break;
34003bcc:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34003bce:	4a05      	ldr	r2, [pc, #20]	@ (34003be4 <SystemCoreClockUpdate+0x34c>)
34003bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003bd2:	6013      	str	r3, [r2, #0]
}
34003bd4:	bf00      	nop
34003bd6:	3734      	adds	r7, #52	@ 0x34
34003bd8:	46bd      	mov	sp, r7
34003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
34003bde:	4770      	bx	lr
34003be0:	56028000 	.word	0x56028000
34003be4:	340205f4 	.word	0x340205f4

34003be8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
34003be8:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34003bec:	b588      	push	{r3, r7, lr}
34003bee:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
34003bf0:	f7ff fe52 	bl	34003898 <SystemCoreClockUpdate>

  return SystemCoreClock;
34003bf4:	4b06      	ldr	r3, [pc, #24]	@ (34003c10 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34003bf6:	681b      	ldr	r3, [r3, #0]
}
34003bf8:	4618      	mov	r0, r3
34003bfa:	46bd      	mov	sp, r7
34003bfc:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
34003c00:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34003c04:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34003c08:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34003c0c:	4774      	bxns	lr
34003c0e:	bf00      	nop
34003c10:	340205f4 	.word	0x340205f4

34003c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34003c14:	b580      	push	{r7, lr}
34003c16:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34003c18:	2003      	movs	r0, #3
34003c1a:	f000 fb43 	bl	340042a4 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34003c1e:	f7ff fe3b 	bl	34003898 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34003c22:	200f      	movs	r0, #15
34003c24:	f000 f812 	bl	34003c4c <HAL_InitTick>
34003c28:	4603      	mov	r3, r0
34003c2a:	2b00      	cmp	r3, #0
34003c2c:	d001      	beq.n	34003c32 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34003c2e:	2301      	movs	r3, #1
34003c30:	e002      	b.n	34003c38 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34003c32:	f000 f803 	bl	34003c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34003c36:	2300      	movs	r3, #0
}
34003c38:	4618      	mov	r0, r3
34003c3a:	bd80      	pop	{r7, pc}

34003c3c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
34003c3c:	b480      	push	{r7}
34003c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
34003c40:	bf00      	nop
34003c42:	46bd      	mov	sp, r7
34003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
34003c48:	4770      	bx	lr
	...

34003c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34003c4c:	b580      	push	{r7, lr}
34003c4e:	b082      	sub	sp, #8
34003c50:	af00      	add	r7, sp, #0
34003c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34003c54:	4b15      	ldr	r3, [pc, #84]	@ (34003cac <HAL_InitTick+0x60>)
34003c56:	781b      	ldrb	r3, [r3, #0]
34003c58:	2b00      	cmp	r3, #0
34003c5a:	d101      	bne.n	34003c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34003c5c:	2301      	movs	r3, #1
34003c5e:	e021      	b.n	34003ca4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34003c60:	4b13      	ldr	r3, [pc, #76]	@ (34003cb0 <HAL_InitTick+0x64>)
34003c62:	681a      	ldr	r2, [r3, #0]
34003c64:	4b11      	ldr	r3, [pc, #68]	@ (34003cac <HAL_InitTick+0x60>)
34003c66:	781b      	ldrb	r3, [r3, #0]
34003c68:	4619      	mov	r1, r3
34003c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34003c6e:	fbb3 f3f1 	udiv	r3, r3, r1
34003c72:	fbb2 f3f3 	udiv	r3, r2, r3
34003c76:	4618      	mov	r0, r3
34003c78:	f000 fba8 	bl	340043cc <HAL_SYSTICK_Config>
34003c7c:	4603      	mov	r3, r0
34003c7e:	2b00      	cmp	r3, #0
34003c80:	d001      	beq.n	34003c86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34003c82:	2301      	movs	r3, #1
34003c84:	e00e      	b.n	34003ca4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34003c86:	687b      	ldr	r3, [r7, #4]
34003c88:	2b0f      	cmp	r3, #15
34003c8a:	d80a      	bhi.n	34003ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34003c8c:	2200      	movs	r2, #0
34003c8e:	6879      	ldr	r1, [r7, #4]
34003c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34003c94:	f000 fb26 	bl	340042e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34003c98:	4a06      	ldr	r2, [pc, #24]	@ (34003cb4 <HAL_InitTick+0x68>)
34003c9a:	687b      	ldr	r3, [r7, #4]
34003c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
34003c9e:	2300      	movs	r3, #0
34003ca0:	e000      	b.n	34003ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
34003ca2:	2301      	movs	r3, #1
}
34003ca4:	4618      	mov	r0, r3
34003ca6:	3708      	adds	r7, #8
34003ca8:	46bd      	mov	sp, r7
34003caa:	bd80      	pop	{r7, pc}
34003cac:	340205fc 	.word	0x340205fc
34003cb0:	340205f4 	.word	0x340205f4
34003cb4:	340205f8 	.word	0x340205f8

34003cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
34003cb8:	b480      	push	{r7}
34003cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
34003cbc:	4b06      	ldr	r3, [pc, #24]	@ (34003cd8 <HAL_IncTick+0x20>)
34003cbe:	781b      	ldrb	r3, [r3, #0]
34003cc0:	461a      	mov	r2, r3
34003cc2:	4b06      	ldr	r3, [pc, #24]	@ (34003cdc <HAL_IncTick+0x24>)
34003cc4:	681b      	ldr	r3, [r3, #0]
34003cc6:	4413      	add	r3, r2
34003cc8:	4a04      	ldr	r2, [pc, #16]	@ (34003cdc <HAL_IncTick+0x24>)
34003cca:	6013      	str	r3, [r2, #0]
}
34003ccc:	bf00      	nop
34003cce:	46bd      	mov	sp, r7
34003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34003cd4:	4770      	bx	lr
34003cd6:	bf00      	nop
34003cd8:	340205fc 	.word	0x340205fc
34003cdc:	340209b0 	.word	0x340209b0

34003ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34003ce0:	b480      	push	{r7}
34003ce2:	af00      	add	r7, sp, #0
  return uwTick;
34003ce4:	4b03      	ldr	r3, [pc, #12]	@ (34003cf4 <HAL_GetTick+0x14>)
34003ce6:	681b      	ldr	r3, [r3, #0]
}
34003ce8:	4618      	mov	r0, r3
34003cea:	46bd      	mov	sp, r7
34003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
34003cf0:	4770      	bx	lr
34003cf2:	bf00      	nop
34003cf4:	340209b0 	.word	0x340209b0

34003cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34003cf8:	b580      	push	{r7, lr}
34003cfa:	b084      	sub	sp, #16
34003cfc:	af00      	add	r7, sp, #0
34003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34003d00:	f7ff ffee 	bl	34003ce0 <HAL_GetTick>
34003d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34003d06:	687b      	ldr	r3, [r7, #4]
34003d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34003d0a:	68fb      	ldr	r3, [r7, #12]
34003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34003d10:	d005      	beq.n	34003d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34003d12:	4b0a      	ldr	r3, [pc, #40]	@ (34003d3c <HAL_Delay+0x44>)
34003d14:	781b      	ldrb	r3, [r3, #0]
34003d16:	461a      	mov	r2, r3
34003d18:	68fb      	ldr	r3, [r7, #12]
34003d1a:	4413      	add	r3, r2
34003d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34003d1e:	bf00      	nop
34003d20:	f7ff ffde 	bl	34003ce0 <HAL_GetTick>
34003d24:	4602      	mov	r2, r0
34003d26:	68bb      	ldr	r3, [r7, #8]
34003d28:	1ad3      	subs	r3, r2, r3
34003d2a:	68fa      	ldr	r2, [r7, #12]
34003d2c:	429a      	cmp	r2, r3
34003d2e:	d8f7      	bhi.n	34003d20 <HAL_Delay+0x28>
  {
  }
}
34003d30:	bf00      	nop
34003d32:	bf00      	nop
34003d34:	3710      	adds	r7, #16
34003d36:	46bd      	mov	sp, r7
34003d38:	bd80      	pop	{r7, pc}
34003d3a:	bf00      	nop
34003d3c:	340205fc 	.word	0x340205fc

34003d40 <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
34003d40:	b580      	push	{r7, lr}
34003d42:	b084      	sub	sp, #16
34003d44:	af00      	add	r7, sp, #0
34003d46:	60f8      	str	r0, [r7, #12]
34003d48:	60b9      	str	r1, [r7, #8]
34003d4a:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34003d4c:	68fb      	ldr	r3, [r7, #12]
34003d4e:	2b00      	cmp	r3, #0
34003d50:	d101      	bne.n	34003d56 <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
34003d52:	2301      	movs	r3, #1
34003d54:	e026      	b.n	34003da4 <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
34003d56:	687b      	ldr	r3, [r7, #4]
34003d58:	2b00      	cmp	r3, #0
34003d5a:	d004      	beq.n	34003d66 <HAL_BSEC_OTP_Read+0x26>
34003d5c:	68fb      	ldr	r3, [r7, #12]
34003d5e:	681b      	ldr	r3, [r3, #0]
34003d60:	4a12      	ldr	r2, [pc, #72]	@ (34003dac <HAL_BSEC_OTP_Read+0x6c>)
34003d62:	4293      	cmp	r3, r2
34003d64:	d004      	beq.n	34003d70 <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003d66:	68fb      	ldr	r3, [r7, #12]
34003d68:	2201      	movs	r2, #1
34003d6a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003d6c:	2301      	movs	r3, #1
34003d6e:	e019      	b.n	34003da4 <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
34003d70:	68bb      	ldr	r3, [r7, #8]
34003d72:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003d76:	d211      	bcs.n	34003d9c <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34003d78:	68b9      	ldr	r1, [r7, #8]
34003d7a:	68f8      	ldr	r0, [r7, #12]
34003d7c:	f000 f8ba 	bl	34003ef4 <HAL_BSEC_OTP_Reload>
34003d80:	4603      	mov	r3, r0
34003d82:	2b00      	cmp	r3, #0
34003d84:	d108      	bne.n	34003d98 <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34003d86:	68fb      	ldr	r3, [r7, #12]
34003d88:	681b      	ldr	r3, [r3, #0]
34003d8a:	68ba      	ldr	r2, [r7, #8]
34003d8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003d90:	687b      	ldr	r3, [r7, #4]
34003d92:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
34003d94:	2300      	movs	r3, #0
34003d96:	e005      	b.n	34003da4 <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
34003d98:	2301      	movs	r3, #1
34003d9a:	e003      	b.n	34003da4 <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003d9c:	68fb      	ldr	r3, [r7, #12]
34003d9e:	2201      	movs	r2, #1
34003da0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003da2:	2301      	movs	r3, #1
}
34003da4:	4618      	mov	r0, r3
34003da6:	3710      	adds	r7, #16
34003da8:	46bd      	mov	sp, r7
34003daa:	bd80      	pop	{r7, pc}
34003dac:	56009000 	.word	0x56009000

34003db0 <HAL_BSEC_OTP_Program>:
  * @param  Lock      Permanent lock value, this parameter is @ref BSEC_Permanent_Lock
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Program(BSEC_HandleTypeDef *hbsec, uint32_t FuseId, uint32_t FuseData, uint32_t Lock)
{
34003db0:	b580      	push	{r7, lr}
34003db2:	b088      	sub	sp, #32
34003db4:	af00      	add	r7, sp, #0
34003db6:	60f8      	str	r0, [r7, #12]
34003db8:	60b9      	str	r1, [r7, #8]
34003dba:	607a      	str	r2, [r7, #4]
34003dbc:	603b      	str	r3, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t read_data;
  uint32_t tick_start = HAL_GetTick();
34003dbe:	f7ff ff8f 	bl	34003ce0 <HAL_GetTick>
34003dc2:	61f8      	str	r0, [r7, #28]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003dc4:	68fb      	ldr	r3, [r7, #12]
34003dc6:	2b00      	cmp	r3, #0
34003dc8:	d101      	bne.n	34003dce <HAL_BSEC_OTP_Program+0x1e>
  {
    return HAL_ERROR;
34003dca:	2301      	movs	r3, #1
34003dcc:	e08a      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003dce:	68fb      	ldr	r3, [r7, #12]
34003dd0:	681b      	ldr	r3, [r3, #0]
34003dd2:	4a46      	ldr	r2, [pc, #280]	@ (34003eec <HAL_BSEC_OTP_Program+0x13c>)
34003dd4:	4293      	cmp	r3, r2
34003dd6:	d004      	beq.n	34003de2 <HAL_BSEC_OTP_Program+0x32>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003dd8:	68fb      	ldr	r3, [r7, #12]
34003dda:	2201      	movs	r2, #1
34003ddc:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003dde:	2301      	movs	r3, #1
34003de0:	e080      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the permanent lock */
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34003de2:	683b      	ldr	r3, [r7, #0]
34003de4:	2b00      	cmp	r3, #0
34003de6:	d008      	beq.n	34003dfa <HAL_BSEC_OTP_Program+0x4a>
34003de8:	683b      	ldr	r3, [r7, #0]
34003dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003dee:	d004      	beq.n	34003dfa <HAL_BSEC_OTP_Program+0x4a>
34003df0:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34003df4:	483e      	ldr	r0, [pc, #248]	@ (34003ef0 <HAL_BSEC_OTP_Program+0x140>)
34003df6:	f7fd ff51 	bl	34001c9c <assert_failed>

  /* Get the correct register value */
  if (FuseId < BSEC_NB_FUSES)
34003dfa:	68bb      	ldr	r3, [r7, #8]
34003dfc:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003e00:	d26a      	bcs.n	34003ed8 <HAL_BSEC_OTP_Program+0x128>
  {
    status_reg = FuseId / 32U;
34003e02:	68bb      	ldr	r3, [r7, #8]
34003e04:	095b      	lsrs	r3, r3, #5
34003e06:	61bb      	str	r3, [r7, #24]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003e08:	68bb      	ldr	r3, [r7, #8]
34003e0a:	f003 031f 	and.w	r3, r3, #31
34003e0e:	2201      	movs	r2, #1
34003e10:	fa02 f303 	lsl.w	r3, r2, r3
34003e14:	617b      	str	r3, [r7, #20]

    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34003e16:	68fb      	ldr	r3, [r7, #12]
34003e18:	681b      	ldr	r3, [r3, #0]
34003e1a:	69ba      	ldr	r2, [r7, #24]
34003e1c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
34003e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003e24:	697b      	ldr	r3, [r7, #20]
34003e26:	4013      	ands	r3, r2
34003e28:	2b00      	cmp	r3, #0
34003e2a:	d150      	bne.n	34003ece <HAL_BSEC_OTP_Program+0x11e>
    {
      /* Write data in register */
      hbsec->Instance->WDR = FuseData;
34003e2c:	68fb      	ldr	r3, [r7, #12]
34003e2e:	681b      	ldr	r3, [r3, #0]
34003e30:	687a      	ldr	r2, [r7, #4]
34003e32:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08

      /* Perform a program of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34003e36:	68fb      	ldr	r3, [r7, #12]
34003e38:	681b      	ldr	r3, [r3, #0]
34003e3a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003e3e:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003e42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003e46:	68b9      	ldr	r1, [r7, #8]
34003e48:	683a      	ldr	r2, [r7, #0]
34003e4a:	430a      	orrs	r2, r1
34003e4c:	431a      	orrs	r2, r3
34003e4e:	68fb      	ldr	r3, [r7, #12]
34003e50:	681b      	ldr	r3, [r3, #0]
34003e52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34003e56:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
                                         (FuseId | BSEC_OTPCR_PROG | Lock));

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003e5a:	e00c      	b.n	34003e76 <HAL_BSEC_OTP_Program+0xc6>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003e5c:	f7ff ff40 	bl	34003ce0 <HAL_GetTick>
34003e60:	4602      	mov	r2, r0
34003e62:	69fb      	ldr	r3, [r7, #28]
34003e64:	1ad3      	subs	r3, r2, r3
34003e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003e6a:	d904      	bls.n	34003e76 <HAL_BSEC_OTP_Program+0xc6>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003e6c:	68fb      	ldr	r3, [r7, #12]
34003e6e:	220a      	movs	r2, #10
34003e70:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003e72:	2301      	movs	r3, #1
34003e74:	e036      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003e76:	68fb      	ldr	r3, [r7, #12]
34003e78:	681b      	ldr	r3, [r3, #0]
34003e7a:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003e7e:	f003 0301 	and.w	r3, r3, #1
34003e82:	2b00      	cmp	r3, #0
34003e84:	d1ea      	bne.n	34003e5c <HAL_BSEC_OTP_Program+0xac>
        }
      }

      /* Check programming errors */
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34003e86:	68fb      	ldr	r3, [r7, #12]
34003e88:	681b      	ldr	r3, [r3, #0]
34003e8a:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003e92:	2b00      	cmp	r3, #0
34003e94:	d005      	beq.n	34003ea2 <HAL_BSEC_OTP_Program+0xf2>
      {
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003e96:	68fb      	ldr	r3, [r7, #12]
34003e98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003e9c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003e9e:	2301      	movs	r3, #1
34003ea0:	e020      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
      }

      /* Read back programmed data */
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
34003ea2:	f107 0310 	add.w	r3, r7, #16
34003ea6:	461a      	mov	r2, r3
34003ea8:	68b9      	ldr	r1, [r7, #8]
34003eaa:	68f8      	ldr	r0, [r7, #12]
34003eac:	f7ff ff48 	bl	34003d40 <HAL_BSEC_OTP_Read>
34003eb0:	4603      	mov	r3, r0
34003eb2:	2b00      	cmp	r3, #0
34003eb4:	d109      	bne.n	34003eca <HAL_BSEC_OTP_Program+0x11a>
      {
        /* Verify programmed data */
        if (read_data != FuseData)
34003eb6:	693b      	ldr	r3, [r7, #16]
34003eb8:	687a      	ldr	r2, [r7, #4]
34003eba:	429a      	cmp	r2, r3
34003ebc:	d011      	beq.n	34003ee2 <HAL_BSEC_OTP_Program+0x132>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34003ebe:	68fb      	ldr	r3, [r7, #12]
34003ec0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003ec4:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003ec6:	2301      	movs	r3, #1
34003ec8:	e00c      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
        }
      }
      else
      {
        return HAL_ERROR;
34003eca:	2301      	movs	r3, #1
34003ecc:	e00a      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
      }
    }
    else
    {
      /* Fuse is sticky programming locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003ece:	68fb      	ldr	r3, [r7, #12]
34003ed0:	2204      	movs	r2, #4
34003ed2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003ed4:	2301      	movs	r3, #1
34003ed6:	e005      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003ed8:	68fb      	ldr	r3, [r7, #12]
34003eda:	2201      	movs	r2, #1
34003edc:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003ede:	2301      	movs	r3, #1
34003ee0:	e000      	b.n	34003ee4 <HAL_BSEC_OTP_Program+0x134>
  }

  return HAL_OK;
34003ee2:	2300      	movs	r3, #0
}
34003ee4:	4618      	mov	r0, r3
34003ee6:	3720      	adds	r7, #32
34003ee8:	46bd      	mov	sp, r7
34003eea:	bd80      	pop	{r7, pc}
34003eec:	56009000 	.word	0x56009000
34003ef0:	3401e2a4 	.word	0x3401e2a4

34003ef4 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34003ef4:	b580      	push	{r7, lr}
34003ef6:	b086      	sub	sp, #24
34003ef8:	af00      	add	r7, sp, #0
34003efa:	6078      	str	r0, [r7, #4]
34003efc:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34003efe:	f7ff feef 	bl	34003ce0 <HAL_GetTick>
34003f02:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003f04:	687b      	ldr	r3, [r7, #4]
34003f06:	2b00      	cmp	r3, #0
34003f08:	d101      	bne.n	34003f0e <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34003f0a:	2301      	movs	r3, #1
34003f0c:	e063      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
34003f0e:	687b      	ldr	r3, [r7, #4]
34003f10:	681b      	ldr	r3, [r3, #0]
34003f12:	4a33      	ldr	r2, [pc, #204]	@ (34003fe0 <HAL_BSEC_OTP_Reload+0xec>)
34003f14:	4293      	cmp	r3, r2
34003f16:	d004      	beq.n	34003f22 <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003f18:	687b      	ldr	r3, [r7, #4]
34003f1a:	2201      	movs	r2, #1
34003f1c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003f1e:	2301      	movs	r3, #1
34003f20:	e059      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
34003f22:	683b      	ldr	r3, [r7, #0]
34003f24:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003f28:	d24f      	bcs.n	34003fca <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34003f2a:	683b      	ldr	r3, [r7, #0]
34003f2c:	095b      	lsrs	r3, r3, #5
34003f2e:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003f30:	683b      	ldr	r3, [r7, #0]
34003f32:	f003 031f 	and.w	r3, r3, #31
34003f36:	2201      	movs	r2, #1
34003f38:	fa02 f303 	lsl.w	r3, r2, r3
34003f3c:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34003f3e:	687b      	ldr	r3, [r7, #4]
34003f40:	681b      	ldr	r3, [r3, #0]
34003f42:	693a      	ldr	r2, [r7, #16]
34003f44:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34003f48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003f4c:	68fb      	ldr	r3, [r7, #12]
34003f4e:	4013      	ands	r3, r2
34003f50:	2b00      	cmp	r3, #0
34003f52:	d135      	bne.n	34003fc0 <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34003f54:	687b      	ldr	r3, [r7, #4]
34003f56:	681b      	ldr	r3, [r3, #0]
34003f58:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003f5c:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34003f60:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003f64:	687a      	ldr	r2, [r7, #4]
34003f66:	6812      	ldr	r2, [r2, #0]
34003f68:	6839      	ldr	r1, [r7, #0]
34003f6a:	430b      	orrs	r3, r1
34003f6c:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003f70:	e00c      	b.n	34003f8c <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003f72:	f7ff feb5 	bl	34003ce0 <HAL_GetTick>
34003f76:	4602      	mov	r2, r0
34003f78:	697b      	ldr	r3, [r7, #20]
34003f7a:	1ad3      	subs	r3, r2, r3
34003f7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003f80:	d904      	bls.n	34003f8c <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003f82:	687b      	ldr	r3, [r7, #4]
34003f84:	220a      	movs	r2, #10
34003f86:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003f88:	2301      	movs	r3, #1
34003f8a:	e024      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003f8c:	687b      	ldr	r3, [r7, #4]
34003f8e:	681b      	ldr	r3, [r3, #0]
34003f90:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003f94:	f003 0301 	and.w	r3, r3, #1
34003f98:	2b00      	cmp	r3, #0
34003f9a:	d1ea      	bne.n	34003f72 <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34003f9c:	687b      	ldr	r3, [r7, #4]
34003f9e:	681b      	ldr	r3, [r3, #0]
34003fa0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003fa4:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34003fa8:	2b00      	cmp	r3, #0
34003faa:	d013      	beq.n	34003fd4 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34003fac:	687b      	ldr	r3, [r7, #4]
34003fae:	681b      	ldr	r3, [r3, #0]
34003fb0:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34003fb4:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
34003fb8:	687b      	ldr	r3, [r7, #4]
34003fba:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
34003fbc:	2301      	movs	r3, #1
34003fbe:	e00a      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34003fc0:	687b      	ldr	r3, [r7, #4]
34003fc2:	2204      	movs	r2, #4
34003fc4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
34003fc6:	2301      	movs	r3, #1
34003fc8:	e005      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003fca:	687b      	ldr	r3, [r7, #4]
34003fcc:	2201      	movs	r2, #1
34003fce:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003fd0:	2301      	movs	r3, #1
34003fd2:	e000      	b.n	34003fd6 <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
34003fd4:	2300      	movs	r3, #0
}
34003fd6:	4618      	mov	r0, r3
34003fd8:	3718      	adds	r7, #24
34003fda:	46bd      	mov	sp, r7
34003fdc:	bd80      	pop	{r7, pc}
34003fde:	bf00      	nop
34003fe0:	56009000 	.word	0x56009000

34003fe4 <HAL_CACHEAXI_Init>:
  * @note   In case HAL_CACHEAXI_Init() returns HAL_BUSY because an invalidation
  *         procedure is ongoing, the application should call again HAL_CACHEAXI_Init()
  *         until it returns HAL_OK to have the CACHEAXI enabled
  */
HAL_StatusTypeDef  HAL_CACHEAXI_Init(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34003fe4:	b580      	push	{r7, lr}
34003fe6:	b084      	sub	sp, #16
34003fe8:	af00      	add	r7, sp, #0
34003fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the CACHEAXI handle allocation */
  if (hcacheaxi == NULL)
34003fec:	687b      	ldr	r3, [r7, #4]
34003fee:	2b00      	cmp	r3, #0
34003ff0:	d101      	bne.n	34003ff6 <HAL_CACHEAXI_Init+0x12>
  {
    return HAL_ERROR;
34003ff2:	2301      	movs	r3, #1
34003ff4:	e021      	b.n	3400403a <HAL_CACHEAXI_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003ff6:	687b      	ldr	r3, [r7, #4]
34003ff8:	681b      	ldr	r3, [r3, #0]
34003ffa:	4a12      	ldr	r2, [pc, #72]	@ (34004044 <HAL_CACHEAXI_Init+0x60>)
34003ffc:	4293      	cmp	r3, r2
34003ffe:	d008      	beq.n	34004012 <HAL_CACHEAXI_Init+0x2e>
34004000:	687b      	ldr	r3, [r7, #4]
34004002:	681b      	ldr	r3, [r3, #0]
34004004:	4a10      	ldr	r2, [pc, #64]	@ (34004048 <HAL_CACHEAXI_Init+0x64>)
34004006:	4293      	cmp	r3, r2
34004008:	d003      	beq.n	34004012 <HAL_CACHEAXI_Init+0x2e>
3400400a:	21bc      	movs	r1, #188	@ 0xbc
3400400c:	480f      	ldr	r0, [pc, #60]	@ (3400404c <HAL_CACHEAXI_Init+0x68>)
3400400e:	f7fd fe45 	bl	34001c9c <assert_failed>

  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34004012:	687b      	ldr	r3, [r7, #4]
34004014:	791b      	ldrb	r3, [r3, #4]
34004016:	b2db      	uxtb	r3, r3
34004018:	2b00      	cmp	r3, #0
3400401a:	d102      	bne.n	34004022 <HAL_CACHEAXI_Init+0x3e>

    /* Init the low level hardware */
    hcacheaxi->MspInitCallback(hcacheaxi);
#else
    /* Init the low level hardware */
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400401c:	6878      	ldr	r0, [r7, #4]
3400401e:	f7fd fe25 	bl	34001c6c <HAL_CACHEAXI_MspInit>
#endif /* USE_HAL_CACHEAXI_REGISTER_CALLBACKS */
  }

  /* Init the error code */
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34004022:	687b      	ldr	r3, [r7, #4]
34004024:	2200      	movs	r2, #0
34004026:	609a      	str	r2, [r3, #8]

  /* Init the CACHEAXI handle state */
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34004028:	687b      	ldr	r3, [r7, #4]
3400402a:	2201      	movs	r2, #1
3400402c:	711a      	strb	r2, [r3, #4]

  /* Enable the selected CACHEAXI peripheral */
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400402e:	6878      	ldr	r0, [r7, #4]
34004030:	f000 f80e 	bl	34004050 <HAL_CACHEAXI_Enable>
34004034:	4603      	mov	r3, r0
34004036:	73fb      	strb	r3, [r7, #15]

  return status;
34004038:	7bfb      	ldrb	r3, [r7, #15]
}
3400403a:	4618      	mov	r0, r3
3400403c:	3710      	adds	r7, #16
3400403e:	46bd      	mov	sp, r7
34004040:	bd80      	pop	{r7, pc}
34004042:	bf00      	nop
34004044:	580dfc00 	.word	0x580dfc00
34004048:	480dfc00 	.word	0x480dfc00
3400404c:	3401e350 	.word	0x3401e350

34004050 <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
34004050:	b580      	push	{r7, lr}
34004052:	b084      	sub	sp, #16
34004054:	af00      	add	r7, sp, #0
34004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34004058:	2300      	movs	r3, #0
3400405a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
3400405c:	687b      	ldr	r3, [r7, #4]
3400405e:	2b00      	cmp	r3, #0
34004060:	d101      	bne.n	34004066 <HAL_CACHEAXI_Enable+0x16>
  {
    return HAL_ERROR;
34004062:	2301      	movs	r3, #1
34004064:	e043      	b.n	340040ee <HAL_CACHEAXI_Enable+0x9e>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34004066:	687b      	ldr	r3, [r7, #4]
34004068:	681b      	ldr	r3, [r3, #0]
3400406a:	4a23      	ldr	r2, [pc, #140]	@ (340040f8 <HAL_CACHEAXI_Enable+0xa8>)
3400406c:	4293      	cmp	r3, r2
3400406e:	d009      	beq.n	34004084 <HAL_CACHEAXI_Enable+0x34>
34004070:	687b      	ldr	r3, [r7, #4]
34004072:	681b      	ldr	r3, [r3, #0]
34004074:	4a21      	ldr	r2, [pc, #132]	@ (340040fc <HAL_CACHEAXI_Enable+0xac>)
34004076:	4293      	cmp	r3, r2
34004078:	d004      	beq.n	34004084 <HAL_CACHEAXI_Enable+0x34>
3400407a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400407e:	4820      	ldr	r0, [pc, #128]	@ (34004100 <HAL_CACHEAXI_Enable+0xb0>)
34004080:	f7fd fe0c 	bl	34001c9c <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34004084:	687b      	ldr	r3, [r7, #4]
34004086:	681b      	ldr	r3, [r3, #0]
34004088:	685b      	ldr	r3, [r3, #4]
3400408a:	f003 0301 	and.w	r3, r3, #1
3400408e:	2b00      	cmp	r3, #0
34004090:	d01e      	beq.n	340040d0 <HAL_CACHEAXI_Enable+0x80>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
34004092:	f7ff fe25 	bl	34003ce0 <HAL_GetTick>
34004096:	60b8      	str	r0, [r7, #8]

    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34004098:	e013      	b.n	340040c2 <HAL_CACHEAXI_Enable+0x72>
    {
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
3400409a:	f7ff fe21 	bl	34003ce0 <HAL_GetTick>
3400409e:	4602      	mov	r2, r0
340040a0:	68bb      	ldr	r3, [r7, #8]
340040a2:	1ad3      	subs	r3, r2, r3
340040a4:	2b01      	cmp	r3, #1
340040a6:	d90c      	bls.n	340040c2 <HAL_CACHEAXI_Enable+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340040a8:	687b      	ldr	r3, [r7, #4]
340040aa:	681b      	ldr	r3, [r3, #0]
340040ac:	685b      	ldr	r3, [r3, #4]
340040ae:	f003 0301 	and.w	r3, r3, #1
340040b2:	2b00      	cmp	r3, #0
340040b4:	d105      	bne.n	340040c2 <HAL_CACHEAXI_Enable+0x72>
        {
          /* Update error code */
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340040b6:	687b      	ldr	r3, [r7, #4]
340040b8:	2210      	movs	r2, #16
340040ba:	609a      	str	r2, [r3, #8]
          /* Return error status */
          status =  HAL_ERROR;
340040bc:	2301      	movs	r3, #1
340040be:	73fb      	strb	r3, [r7, #15]
          break;
340040c0:	e006      	b.n	340040d0 <HAL_CACHEAXI_Enable+0x80>
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340040c2:	687b      	ldr	r3, [r7, #4]
340040c4:	681b      	ldr	r3, [r3, #0]
340040c6:	685b      	ldr	r3, [r3, #4]
340040c8:	f003 0301 	and.w	r3, r3, #1
340040cc:	2b00      	cmp	r3, #0
340040ce:	d1e4      	bne.n	3400409a <HAL_CACHEAXI_Enable+0x4a>
        }
      }
    }
  }

  if (status == HAL_OK)
340040d0:	7bfb      	ldrb	r3, [r7, #15]
340040d2:	2b00      	cmp	r3, #0
340040d4:	d10a      	bne.n	340040ec <HAL_CACHEAXI_Enable+0x9c>
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340040d6:	687b      	ldr	r3, [r7, #4]
340040d8:	2200      	movs	r2, #0
340040da:	609a      	str	r2, [r3, #8]
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340040dc:	687b      	ldr	r3, [r7, #4]
340040de:	681b      	ldr	r3, [r3, #0]
340040e0:	681a      	ldr	r2, [r3, #0]
340040e2:	687b      	ldr	r3, [r7, #4]
340040e4:	681b      	ldr	r3, [r3, #0]
340040e6:	f042 0201 	orr.w	r2, r2, #1
340040ea:	601a      	str	r2, [r3, #0]
  }

  return status;
340040ec:	7bfb      	ldrb	r3, [r7, #15]
}
340040ee:	4618      	mov	r0, r3
340040f0:	3710      	adds	r7, #16
340040f2:	46bd      	mov	sp, r7
340040f4:	bd80      	pop	{r7, pc}
340040f6:	bf00      	nop
340040f8:	580dfc00 	.word	0x580dfc00
340040fc:	480dfc00 	.word	0x480dfc00
34004100:	3401e350 	.word	0x3401e350

34004104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34004104:	b480      	push	{r7}
34004106:	b085      	sub	sp, #20
34004108:	af00      	add	r7, sp, #0
3400410a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
3400410c:	687b      	ldr	r3, [r7, #4]
3400410e:	f003 0307 	and.w	r3, r3, #7
34004112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34004114:	4b0c      	ldr	r3, [pc, #48]	@ (34004148 <__NVIC_SetPriorityGrouping+0x44>)
34004116:	68db      	ldr	r3, [r3, #12]
34004118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3400411a:	68ba      	ldr	r2, [r7, #8]
3400411c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34004120:	4013      	ands	r3, r2
34004122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34004124:	68fb      	ldr	r3, [r7, #12]
34004126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34004128:	68bb      	ldr	r3, [r7, #8]
3400412a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400412c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34004130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34004134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34004136:	4a04      	ldr	r2, [pc, #16]	@ (34004148 <__NVIC_SetPriorityGrouping+0x44>)
34004138:	68bb      	ldr	r3, [r7, #8]
3400413a:	60d3      	str	r3, [r2, #12]
}
3400413c:	bf00      	nop
3400413e:	3714      	adds	r7, #20
34004140:	46bd      	mov	sp, r7
34004142:	f85d 7b04 	ldr.w	r7, [sp], #4
34004146:	4770      	bx	lr
34004148:	e000ed00 	.word	0xe000ed00

3400414c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
3400414c:	b480      	push	{r7}
3400414e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34004150:	4b04      	ldr	r3, [pc, #16]	@ (34004164 <__NVIC_GetPriorityGrouping+0x18>)
34004152:	68db      	ldr	r3, [r3, #12]
34004154:	0a1b      	lsrs	r3, r3, #8
34004156:	f003 0307 	and.w	r3, r3, #7
}
3400415a:	4618      	mov	r0, r3
3400415c:	46bd      	mov	sp, r7
3400415e:	f85d 7b04 	ldr.w	r7, [sp], #4
34004162:	4770      	bx	lr
34004164:	e000ed00 	.word	0xe000ed00

34004168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34004168:	b480      	push	{r7}
3400416a:	b083      	sub	sp, #12
3400416c:	af00      	add	r7, sp, #0
3400416e:	4603      	mov	r3, r0
34004170:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34004172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34004176:	2b00      	cmp	r3, #0
34004178:	db0b      	blt.n	34004192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400417a:	88fb      	ldrh	r3, [r7, #6]
3400417c:	f003 021f 	and.w	r2, r3, #31
34004180:	4907      	ldr	r1, [pc, #28]	@ (340041a0 <__NVIC_EnableIRQ+0x38>)
34004182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34004186:	095b      	lsrs	r3, r3, #5
34004188:	2001      	movs	r0, #1
3400418a:	fa00 f202 	lsl.w	r2, r0, r2
3400418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34004192:	bf00      	nop
34004194:	370c      	adds	r7, #12
34004196:	46bd      	mov	sp, r7
34004198:	f85d 7b04 	ldr.w	r7, [sp], #4
3400419c:	4770      	bx	lr
3400419e:	bf00      	nop
340041a0:	e000e100 	.word	0xe000e100

340041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
340041a4:	b480      	push	{r7}
340041a6:	b083      	sub	sp, #12
340041a8:	af00      	add	r7, sp, #0
340041aa:	4603      	mov	r3, r0
340041ac:	6039      	str	r1, [r7, #0]
340041ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
340041b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340041b4:	2b00      	cmp	r3, #0
340041b6:	db0a      	blt.n	340041ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340041b8:	683b      	ldr	r3, [r7, #0]
340041ba:	b2da      	uxtb	r2, r3
340041bc:	490c      	ldr	r1, [pc, #48]	@ (340041f0 <__NVIC_SetPriority+0x4c>)
340041be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340041c2:	0112      	lsls	r2, r2, #4
340041c4:	b2d2      	uxtb	r2, r2
340041c6:	440b      	add	r3, r1
340041c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
340041cc:	e00a      	b.n	340041e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340041ce:	683b      	ldr	r3, [r7, #0]
340041d0:	b2da      	uxtb	r2, r3
340041d2:	4908      	ldr	r1, [pc, #32]	@ (340041f4 <__NVIC_SetPriority+0x50>)
340041d4:	88fb      	ldrh	r3, [r7, #6]
340041d6:	f003 030f 	and.w	r3, r3, #15
340041da:	3b04      	subs	r3, #4
340041dc:	0112      	lsls	r2, r2, #4
340041de:	b2d2      	uxtb	r2, r2
340041e0:	440b      	add	r3, r1
340041e2:	761a      	strb	r2, [r3, #24]
}
340041e4:	bf00      	nop
340041e6:	370c      	adds	r7, #12
340041e8:	46bd      	mov	sp, r7
340041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340041ee:	4770      	bx	lr
340041f0:	e000e100 	.word	0xe000e100
340041f4:	e000ed00 	.word	0xe000ed00

340041f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
340041f8:	b480      	push	{r7}
340041fa:	b089      	sub	sp, #36	@ 0x24
340041fc:	af00      	add	r7, sp, #0
340041fe:	60f8      	str	r0, [r7, #12]
34004200:	60b9      	str	r1, [r7, #8]
34004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34004204:	68fb      	ldr	r3, [r7, #12]
34004206:	f003 0307 	and.w	r3, r3, #7
3400420a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400420c:	69fb      	ldr	r3, [r7, #28]
3400420e:	f1c3 0307 	rsb	r3, r3, #7
34004212:	2b04      	cmp	r3, #4
34004214:	bf28      	it	cs
34004216:	2304      	movcs	r3, #4
34004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400421a:	69fb      	ldr	r3, [r7, #28]
3400421c:	3304      	adds	r3, #4
3400421e:	2b06      	cmp	r3, #6
34004220:	d902      	bls.n	34004228 <NVIC_EncodePriority+0x30>
34004222:	69fb      	ldr	r3, [r7, #28]
34004224:	3b03      	subs	r3, #3
34004226:	e000      	b.n	3400422a <NVIC_EncodePriority+0x32>
34004228:	2300      	movs	r3, #0
3400422a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400422c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34004230:	69bb      	ldr	r3, [r7, #24]
34004232:	fa02 f303 	lsl.w	r3, r2, r3
34004236:	43da      	mvns	r2, r3
34004238:	68bb      	ldr	r3, [r7, #8]
3400423a:	401a      	ands	r2, r3
3400423c:	697b      	ldr	r3, [r7, #20]
3400423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34004240:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34004244:	697b      	ldr	r3, [r7, #20]
34004246:	fa01 f303 	lsl.w	r3, r1, r3
3400424a:	43d9      	mvns	r1, r3
3400424c:	687b      	ldr	r3, [r7, #4]
3400424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34004250:	4313      	orrs	r3, r2
         );
}
34004252:	4618      	mov	r0, r3
34004254:	3724      	adds	r7, #36	@ 0x24
34004256:	46bd      	mov	sp, r7
34004258:	f85d 7b04 	ldr.w	r7, [sp], #4
3400425c:	4770      	bx	lr
	...

34004260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34004260:	b580      	push	{r7, lr}
34004262:	b082      	sub	sp, #8
34004264:	af00      	add	r7, sp, #0
34004266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34004268:	687b      	ldr	r3, [r7, #4]
3400426a:	3b01      	subs	r3, #1
3400426c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34004270:	d301      	bcc.n	34004276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34004272:	2301      	movs	r3, #1
34004274:	e00f      	b.n	34004296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34004276:	4a0a      	ldr	r2, [pc, #40]	@ (340042a0 <SysTick_Config+0x40>)
34004278:	687b      	ldr	r3, [r7, #4]
3400427a:	3b01      	subs	r3, #1
3400427c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
3400427e:	210f      	movs	r1, #15
34004280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34004284:	f7ff ff8e 	bl	340041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34004288:	4b05      	ldr	r3, [pc, #20]	@ (340042a0 <SysTick_Config+0x40>)
3400428a:	2200      	movs	r2, #0
3400428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3400428e:	4b04      	ldr	r3, [pc, #16]	@ (340042a0 <SysTick_Config+0x40>)
34004290:	2207      	movs	r2, #7
34004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34004294:	2300      	movs	r3, #0
}
34004296:	4618      	mov	r0, r3
34004298:	3708      	adds	r7, #8
3400429a:	46bd      	mov	sp, r7
3400429c:	bd80      	pop	{r7, pc}
3400429e:	bf00      	nop
340042a0:	e000e010 	.word	0xe000e010

340042a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
340042a4:	b580      	push	{r7, lr}
340042a6:	b082      	sub	sp, #8
340042a8:	af00      	add	r7, sp, #0
340042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
340042ac:	687b      	ldr	r3, [r7, #4]
340042ae:	2b07      	cmp	r3, #7
340042b0:	d00f      	beq.n	340042d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
340042b2:	687b      	ldr	r3, [r7, #4]
340042b4:	2b06      	cmp	r3, #6
340042b6:	d00c      	beq.n	340042d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
340042b8:	687b      	ldr	r3, [r7, #4]
340042ba:	2b05      	cmp	r3, #5
340042bc:	d009      	beq.n	340042d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
340042be:	687b      	ldr	r3, [r7, #4]
340042c0:	2b04      	cmp	r3, #4
340042c2:	d006      	beq.n	340042d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
340042c4:	687b      	ldr	r3, [r7, #4]
340042c6:	2b03      	cmp	r3, #3
340042c8:	d003      	beq.n	340042d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
340042ca:	21e6      	movs	r1, #230	@ 0xe6
340042cc:	4804      	ldr	r0, [pc, #16]	@ (340042e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
340042ce:	f7fd fce5 	bl	34001c9c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
340042d2:	6878      	ldr	r0, [r7, #4]
340042d4:	f7ff ff16 	bl	34004104 <__NVIC_SetPriorityGrouping>
}
340042d8:	bf00      	nop
340042da:	3708      	adds	r7, #8
340042dc:	46bd      	mov	sp, r7
340042de:	bd80      	pop	{r7, pc}
340042e0:	3401e400 	.word	0x3401e400

340042e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
340042e4:	b580      	push	{r7, lr}
340042e6:	b086      	sub	sp, #24
340042e8:	af00      	add	r7, sp, #0
340042ea:	4603      	mov	r3, r0
340042ec:	60b9      	str	r1, [r7, #8]
340042ee:	607a      	str	r2, [r7, #4]
340042f0:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
340042f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
340042f6:	f113 0f0c 	cmn.w	r3, #12
340042fa:	db04      	blt.n	34004306 <HAL_NVIC_SetPriority+0x22>
340042fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34004300:	f113 0f04 	cmn.w	r3, #4
34004304:	d103      	bne.n	3400430e <HAL_NVIC_SetPriority+0x2a>
34004306:	21ff      	movs	r1, #255	@ 0xff
34004308:	4822      	ldr	r0, [pc, #136]	@ (34004394 <HAL_NVIC_SetPriority+0xb0>)
3400430a:	f7fd fcc7 	bl	34001c9c <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
3400430e:	f7ff ff1d 	bl	3400414c <__NVIC_GetPriorityGrouping>
34004312:	4603      	mov	r3, r0
34004314:	f003 0307 	and.w	r3, r3, #7
34004318:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
3400431a:	697b      	ldr	r3, [r7, #20]
3400431c:	2b02      	cmp	r3, #2
3400431e:	d806      	bhi.n	3400432e <HAL_NVIC_SetPriority+0x4a>
34004320:	687b      	ldr	r3, [r7, #4]
34004322:	2b00      	cmp	r3, #0
34004324:	bf0c      	ite	eq
34004326:	2301      	moveq	r3, #1
34004328:	2300      	movne	r3, #0
3400432a:	b2db      	uxtb	r3, r3
3400432c:	e00a      	b.n	34004344 <HAL_NVIC_SetPriority+0x60>
3400432e:	697b      	ldr	r3, [r7, #20]
34004330:	3b03      	subs	r3, #3
34004332:	2201      	movs	r2, #1
34004334:	fa02 f303 	lsl.w	r3, r2, r3
34004338:	687a      	ldr	r2, [r7, #4]
3400433a:	429a      	cmp	r2, r3
3400433c:	bf34      	ite	cc
3400433e:	2301      	movcc	r3, #1
34004340:	2300      	movcs	r3, #0
34004342:	b2db      	uxtb	r3, r3
34004344:	2b00      	cmp	r3, #0
34004346:	d104      	bne.n	34004352 <HAL_NVIC_SetPriority+0x6e>
34004348:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400434c:	4811      	ldr	r0, [pc, #68]	@ (34004394 <HAL_NVIC_SetPriority+0xb0>)
3400434e:	f7fd fca5 	bl	34001c9c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34004352:	68bb      	ldr	r3, [r7, #8]
34004354:	2b0f      	cmp	r3, #15
34004356:	d808      	bhi.n	3400436a <HAL_NVIC_SetPriority+0x86>
34004358:	697b      	ldr	r3, [r7, #20]
3400435a:	f1c3 0307 	rsb	r3, r3, #7
3400435e:	2201      	movs	r2, #1
34004360:	fa02 f303 	lsl.w	r3, r2, r3
34004364:	68ba      	ldr	r2, [r7, #8]
34004366:	429a      	cmp	r2, r3
34004368:	d304      	bcc.n	34004374 <HAL_NVIC_SetPriority+0x90>
3400436a:	f240 1103 	movw	r1, #259	@ 0x103
3400436e:	4809      	ldr	r0, [pc, #36]	@ (34004394 <HAL_NVIC_SetPriority+0xb0>)
34004370:	f7fd fc94 	bl	34001c9c <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34004374:	687a      	ldr	r2, [r7, #4]
34004376:	68b9      	ldr	r1, [r7, #8]
34004378:	6978      	ldr	r0, [r7, #20]
3400437a:	f7ff ff3d 	bl	340041f8 <NVIC_EncodePriority>
3400437e:	4602      	mov	r2, r0
34004380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34004384:	4611      	mov	r1, r2
34004386:	4618      	mov	r0, r3
34004388:	f7ff ff0c 	bl	340041a4 <__NVIC_SetPriority>
}
3400438c:	bf00      	nop
3400438e:	3718      	adds	r7, #24
34004390:	46bd      	mov	sp, r7
34004392:	bd80      	pop	{r7, pc}
34004394:	3401e400 	.word	0x3401e400

34004398 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34004398:	b580      	push	{r7, lr}
3400439a:	b082      	sub	sp, #8
3400439c:	af00      	add	r7, sp, #0
3400439e:	4603      	mov	r3, r0
340043a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
340043a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340043a6:	2b00      	cmp	r3, #0
340043a8:	da04      	bge.n	340043b4 <HAL_NVIC_EnableIRQ+0x1c>
340043aa:	f240 1115 	movw	r1, #277	@ 0x115
340043ae:	4806      	ldr	r0, [pc, #24]	@ (340043c8 <HAL_NVIC_EnableIRQ+0x30>)
340043b0:	f7fd fc74 	bl	34001c9c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
340043b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340043b8:	4618      	mov	r0, r3
340043ba:	f7ff fed5 	bl	34004168 <__NVIC_EnableIRQ>
}
340043be:	bf00      	nop
340043c0:	3708      	adds	r7, #8
340043c2:	46bd      	mov	sp, r7
340043c4:	bd80      	pop	{r7, pc}
340043c6:	bf00      	nop
340043c8:	3401e400 	.word	0x3401e400

340043cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
340043cc:	b580      	push	{r7, lr}
340043ce:	b082      	sub	sp, #8
340043d0:	af00      	add	r7, sp, #0
340043d2:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
340043d4:	6878      	ldr	r0, [r7, #4]
340043d6:	f7ff ff43 	bl	34004260 <SysTick_Config>
340043da:	4603      	mov	r3, r0
}
340043dc:	4618      	mov	r0, r3
340043de:	3708      	adds	r7, #8
340043e0:	46bd      	mov	sp, r7
340043e2:	bd80      	pop	{r7, pc}

340043e4 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
340043e4:	b580      	push	{r7, lr}
340043e6:	b084      	sub	sp, #16
340043e8:	af00      	add	r7, sp, #0
340043ea:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340043ec:	687b      	ldr	r3, [r7, #4]
340043ee:	681b      	ldr	r3, [r3, #0]
340043f0:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
340043f4:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340043f6:	687b      	ldr	r3, [r7, #4]
340043f8:	681b      	ldr	r3, [r3, #0]
340043fa:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
340043fe:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34004400:	68fb      	ldr	r3, [r7, #12]
34004402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004406:	2b00      	cmp	r3, #0
34004408:	d01e      	beq.n	34004448 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
3400440a:	68bb      	ldr	r3, [r7, #8]
3400440c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004410:	2b00      	cmp	r3, #0
34004412:	d019      	beq.n	34004448 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34004414:	687b      	ldr	r3, [r7, #4]
34004416:	681b      	ldr	r3, [r3, #0]
34004418:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400441c:	687b      	ldr	r3, [r7, #4]
3400441e:	681b      	ldr	r3, [r3, #0]
34004420:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34004424:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34004428:	687b      	ldr	r3, [r7, #4]
3400442a:	689b      	ldr	r3, [r3, #8]
3400442c:	f043 0204 	orr.w	r2, r3, #4
34004430:	687b      	ldr	r3, [r7, #4]
34004432:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34004434:	687b      	ldr	r3, [r7, #4]
34004436:	681b      	ldr	r3, [r3, #0]
34004438:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400443c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34004440:	2100      	movs	r1, #0
34004442:	6878      	ldr	r0, [r7, #4]
34004444:	f000 fe67 	bl	34005116 <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34004448:	68fb      	ldr	r3, [r7, #12]
3400444a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400444e:	2b00      	cmp	r3, #0
34004450:	d00e      	beq.n	34004470 <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34004452:	68bb      	ldr	r3, [r7, #8]
34004454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004458:	2b00      	cmp	r3, #0
3400445a:	d009      	beq.n	34004470 <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
3400445c:	687b      	ldr	r3, [r7, #4]
3400445e:	681b      	ldr	r3, [r3, #0]
34004460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004464:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34004468:	2100      	movs	r1, #0
3400446a:	6878      	ldr	r0, [r7, #4]
3400446c:	f013 fbea 	bl	34017c44 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34004470:	68fb      	ldr	r3, [r7, #12]
34004472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004476:	2b00      	cmp	r3, #0
34004478:	d023      	beq.n	340044c2 <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
3400447a:	68bb      	ldr	r3, [r7, #8]
3400447c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004480:	2b00      	cmp	r3, #0
34004482:	d01e      	beq.n	340044c2 <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004484:	687b      	ldr	r3, [r7, #4]
34004486:	681b      	ldr	r3, [r3, #0]
34004488:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400448c:	f003 0304 	and.w	r3, r3, #4
34004490:	2b04      	cmp	r3, #4
34004492:	d10c      	bne.n	340044ae <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34004494:	687b      	ldr	r3, [r7, #4]
34004496:	681b      	ldr	r3, [r3, #0]
34004498:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400449c:	687b      	ldr	r3, [r7, #4]
3400449e:	681b      	ldr	r3, [r3, #0]
340044a0:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340044a4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340044a8:	687b      	ldr	r3, [r7, #4]
340044aa:	2201      	movs	r2, #1
340044ac:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340044ae:	687b      	ldr	r3, [r7, #4]
340044b0:	681b      	ldr	r3, [r3, #0]
340044b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
340044b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340044ba:	2100      	movs	r1, #0
340044bc:	6878      	ldr	r0, [r7, #4]
340044be:	f013 fbdb 	bl	34017c78 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
340044c2:	68fb      	ldr	r3, [r7, #12]
340044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340044c8:	2b00      	cmp	r3, #0
340044ca:	d00e      	beq.n	340044ea <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
340044cc:	68bb      	ldr	r3, [r7, #8]
340044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340044d2:	2b00      	cmp	r3, #0
340044d4:	d009      	beq.n	340044ea <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340044d6:	687b      	ldr	r3, [r7, #4]
340044d8:	681b      	ldr	r3, [r3, #0]
340044da:	f44f 7280 	mov.w	r2, #256	@ 0x100
340044de:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
340044e2:	2100      	movs	r1, #0
340044e4:	6878      	ldr	r0, [r7, #4]
340044e6:	f000 fe0b 	bl	34005100 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
340044ea:	68fb      	ldr	r3, [r7, #12]
340044ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
340044f0:	2b00      	cmp	r3, #0
340044f2:	d021      	beq.n	34004538 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
340044f4:	68bb      	ldr	r3, [r7, #8]
340044f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
340044fa:	2b00      	cmp	r3, #0
340044fc:	d01c      	beq.n	34004538 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
340044fe:	687b      	ldr	r3, [r7, #4]
34004500:	681b      	ldr	r3, [r3, #0]
34004502:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004506:	687b      	ldr	r3, [r7, #4]
34004508:	681b      	ldr	r3, [r3, #0]
3400450a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3400450e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34004512:	687b      	ldr	r3, [r7, #4]
34004514:	689b      	ldr	r3, [r3, #8]
34004516:	f043 0208 	orr.w	r2, r3, #8
3400451a:	687b      	ldr	r3, [r7, #4]
3400451c:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
3400451e:	687b      	ldr	r3, [r7, #4]
34004520:	681b      	ldr	r3, [r3, #0]
34004522:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34004526:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400452a:	687b      	ldr	r3, [r7, #4]
3400452c:	2204      	movs	r2, #4
3400452e:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34004530:	2100      	movs	r1, #0
34004532:	6878      	ldr	r0, [r7, #4]
34004534:	f000 fdfa 	bl	3400512c <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34004538:	68fb      	ldr	r3, [r7, #12]
3400453a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400453e:	2b00      	cmp	r3, #0
34004540:	d00e      	beq.n	34004560 <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34004542:	68bb      	ldr	r3, [r7, #8]
34004544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34004548:	2b00      	cmp	r3, #0
3400454a:	d009      	beq.n	34004560 <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400454c:	687b      	ldr	r3, [r7, #4]
3400454e:	681b      	ldr	r3, [r3, #0]
34004550:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34004554:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34004558:	2101      	movs	r1, #1
3400455a:	6878      	ldr	r0, [r7, #4]
3400455c:	f000 fdd0 	bl	34005100 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34004560:	68fb      	ldr	r3, [r7, #12]
34004562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34004566:	2b00      	cmp	r3, #0
34004568:	d00e      	beq.n	34004588 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
3400456a:	68bb      	ldr	r3, [r7, #8]
3400456c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34004570:	2b00      	cmp	r3, #0
34004572:	d009      	beq.n	34004588 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34004574:	687b      	ldr	r3, [r7, #4]
34004576:	681b      	ldr	r3, [r3, #0]
34004578:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400457c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34004580:	2101      	movs	r1, #1
34004582:	6878      	ldr	r0, [r7, #4]
34004584:	f013 fb5e 	bl	34017c44 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
34004588:	68fb      	ldr	r3, [r7, #12]
3400458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400458e:	2b00      	cmp	r3, #0
34004590:	d023      	beq.n	340045da <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34004592:	68bb      	ldr	r3, [r7, #8]
34004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34004598:	2b00      	cmp	r3, #0
3400459a:	d01e      	beq.n	340045da <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400459c:	687b      	ldr	r3, [r7, #4]
3400459e:	681b      	ldr	r3, [r3, #0]
340045a0:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
340045a4:	f003 0304 	and.w	r3, r3, #4
340045a8:	2b04      	cmp	r3, #4
340045aa:	d10c      	bne.n	340045c6 <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340045ac:	687b      	ldr	r3, [r7, #4]
340045ae:	681b      	ldr	r3, [r3, #0]
340045b0:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340045b4:	687b      	ldr	r3, [r7, #4]
340045b6:	681b      	ldr	r3, [r3, #0]
340045b8:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340045bc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340045c0:	687b      	ldr	r3, [r7, #4]
340045c2:	2201      	movs	r2, #1
340045c4:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340045c6:	687b      	ldr	r3, [r7, #4]
340045c8:	681b      	ldr	r3, [r3, #0]
340045ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
340045ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340045d2:	2101      	movs	r1, #1
340045d4:	6878      	ldr	r0, [r7, #4]
340045d6:	f013 fb4f 	bl	34017c78 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340045da:	68fb      	ldr	r3, [r7, #12]
340045dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
340045e0:	2b00      	cmp	r3, #0
340045e2:	d021      	beq.n	34004628 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340045e4:	68bb      	ldr	r3, [r7, #8]
340045e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
340045ea:	2b00      	cmp	r3, #0
340045ec:	d01c      	beq.n	34004628 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340045ee:	687b      	ldr	r3, [r7, #4]
340045f0:	681b      	ldr	r3, [r3, #0]
340045f2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340045f6:	687b      	ldr	r3, [r7, #4]
340045f8:	681b      	ldr	r3, [r3, #0]
340045fa:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
340045fe:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34004602:	687b      	ldr	r3, [r7, #4]
34004604:	689b      	ldr	r3, [r3, #8]
34004606:	f043 0210 	orr.w	r2, r3, #16
3400460a:	687b      	ldr	r3, [r7, #4]
3400460c:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
3400460e:	687b      	ldr	r3, [r7, #4]
34004610:	681b      	ldr	r3, [r3, #0]
34004612:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34004616:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400461a:	687b      	ldr	r3, [r7, #4]
3400461c:	2204      	movs	r2, #4
3400461e:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34004620:	2101      	movs	r1, #1
34004622:	6878      	ldr	r0, [r7, #4]
34004624:	f000 fd82 	bl	3400512c <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34004628:	68fb      	ldr	r3, [r7, #12]
3400462a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400462e:	2b00      	cmp	r3, #0
34004630:	d00e      	beq.n	34004650 <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34004632:	68bb      	ldr	r3, [r7, #8]
34004634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004638:	2b00      	cmp	r3, #0
3400463a:	d009      	beq.n	34004650 <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
3400463c:	687b      	ldr	r3, [r7, #4]
3400463e:	681b      	ldr	r3, [r3, #0]
34004640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34004644:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34004648:	2102      	movs	r1, #2
3400464a:	6878      	ldr	r0, [r7, #4]
3400464c:	f000 fd58 	bl	34005100 <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34004650:	68fb      	ldr	r3, [r7, #12]
34004652:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004656:	2b00      	cmp	r3, #0
34004658:	d00e      	beq.n	34004678 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
3400465a:	68bb      	ldr	r3, [r7, #8]
3400465c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004660:	2b00      	cmp	r3, #0
34004662:	d009      	beq.n	34004678 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34004664:	687b      	ldr	r3, [r7, #4]
34004666:	681b      	ldr	r3, [r3, #0]
34004668:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
3400466c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34004670:	2102      	movs	r1, #2
34004672:	6878      	ldr	r0, [r7, #4]
34004674:	f013 fae6 	bl	34017c44 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34004678:	68fb      	ldr	r3, [r7, #12]
3400467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
3400467e:	2b00      	cmp	r3, #0
34004680:	d023      	beq.n	340046ca <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34004682:	68bb      	ldr	r3, [r7, #8]
34004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004688:	2b00      	cmp	r3, #0
3400468a:	d01e      	beq.n	340046ca <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400468c:	687b      	ldr	r3, [r7, #4]
3400468e:	681b      	ldr	r3, [r3, #0]
34004690:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34004694:	f003 0304 	and.w	r3, r3, #4
34004698:	2b04      	cmp	r3, #4
3400469a:	d10c      	bne.n	340046b6 <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
3400469c:	687b      	ldr	r3, [r7, #4]
3400469e:	681b      	ldr	r3, [r3, #0]
340046a0:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340046a4:	687b      	ldr	r3, [r7, #4]
340046a6:	681b      	ldr	r3, [r3, #0]
340046a8:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
340046ac:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
340046b0:	687b      	ldr	r3, [r7, #4]
340046b2:	2201      	movs	r2, #1
340046b4:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
340046b6:	687b      	ldr	r3, [r7, #4]
340046b8:	681b      	ldr	r3, [r3, #0]
340046ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
340046be:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
340046c2:	2102      	movs	r1, #2
340046c4:	6878      	ldr	r0, [r7, #4]
340046c6:	f013 fad7 	bl	34017c78 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
340046ca:	68fb      	ldr	r3, [r7, #12]
340046cc:	2b00      	cmp	r3, #0
340046ce:	da1f      	bge.n	34004710 <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
340046d0:	68bb      	ldr	r3, [r7, #8]
340046d2:	2b00      	cmp	r3, #0
340046d4:	da1c      	bge.n	34004710 <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340046d6:	687b      	ldr	r3, [r7, #4]
340046d8:	681b      	ldr	r3, [r3, #0]
340046da:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340046de:	687b      	ldr	r3, [r7, #4]
340046e0:	681b      	ldr	r3, [r3, #0]
340046e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
340046e6:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
340046ea:	687b      	ldr	r3, [r7, #4]
340046ec:	689b      	ldr	r3, [r3, #8]
340046ee:	f043 0220 	orr.w	r2, r3, #32
340046f2:	687b      	ldr	r3, [r7, #4]
340046f4:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
340046f6:	687b      	ldr	r3, [r7, #4]
340046f8:	681b      	ldr	r3, [r3, #0]
340046fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
340046fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34004702:	687b      	ldr	r3, [r7, #4]
34004704:	2204      	movs	r2, #4
34004706:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34004708:	2102      	movs	r1, #2
3400470a:	6878      	ldr	r0, [r7, #4]
3400470c:	f000 fd0e 	bl	3400512c <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34004710:	68fb      	ldr	r3, [r7, #12]
34004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004716:	2b00      	cmp	r3, #0
34004718:	d01f      	beq.n	3400475a <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
3400471a:	68bb      	ldr	r3, [r7, #8]
3400471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004720:	2b00      	cmp	r3, #0
34004722:	d01a      	beq.n	3400475a <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34004724:	687b      	ldr	r3, [r7, #4]
34004726:	681b      	ldr	r3, [r3, #0]
34004728:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400472c:	687b      	ldr	r3, [r7, #4]
3400472e:	681b      	ldr	r3, [r3, #0]
34004730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34004734:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34004738:	687b      	ldr	r3, [r7, #4]
3400473a:	689b      	ldr	r3, [r3, #8]
3400473c:	f043 0202 	orr.w	r2, r3, #2
34004740:	687b      	ldr	r3, [r7, #4]
34004742:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34004744:	687b      	ldr	r3, [r7, #4]
34004746:	681b      	ldr	r3, [r3, #0]
34004748:	2240      	movs	r2, #64	@ 0x40
3400474a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400474e:	687b      	ldr	r3, [r7, #4]
34004750:	2204      	movs	r2, #4
34004752:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004754:	6878      	ldr	r0, [r7, #4]
34004756:	f000 fcf4 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
3400475a:	68fb      	ldr	r3, [r7, #12]
3400475c:	f003 0320 	and.w	r3, r3, #32
34004760:	2b00      	cmp	r3, #0
34004762:	d01f      	beq.n	340047a4 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34004764:	68bb      	ldr	r3, [r7, #8]
34004766:	f003 0320 	and.w	r3, r3, #32
3400476a:	2b00      	cmp	r3, #0
3400476c:	d01a      	beq.n	340047a4 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3400476e:	687b      	ldr	r3, [r7, #4]
34004770:	681b      	ldr	r3, [r3, #0]
34004772:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004776:	687b      	ldr	r3, [r7, #4]
34004778:	681b      	ldr	r3, [r3, #0]
3400477a:	f022 0220 	bic.w	r2, r2, #32
3400477e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34004782:	687b      	ldr	r3, [r7, #4]
34004784:	689b      	ldr	r3, [r3, #8]
34004786:	f043 0201 	orr.w	r2, r3, #1
3400478a:	687b      	ldr	r3, [r7, #4]
3400478c:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
3400478e:	687b      	ldr	r3, [r7, #4]
34004790:	681b      	ldr	r3, [r3, #0]
34004792:	2220      	movs	r2, #32
34004794:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004798:	687b      	ldr	r3, [r7, #4]
3400479a:	2204      	movs	r2, #4
3400479c:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3400479e:	6878      	ldr	r0, [r7, #4]
340047a0:	f000 fccf 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
340047a4:	bf00      	nop
340047a6:	3710      	adds	r7, #16
340047a8:	46bd      	mov	sp, r7
340047aa:	bd80      	pop	{r7, pc}

340047ac <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
340047ac:	b580      	push	{r7, lr}
340047ae:	b088      	sub	sp, #32
340047b0:	af00      	add	r7, sp, #0
340047b2:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
340047b4:	4bb1      	ldr	r3, [pc, #708]	@ (34004a7c <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
340047b6:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340047b8:	69fb      	ldr	r3, [r7, #28]
340047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340047be:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
340047c0:	69fb      	ldr	r3, [r7, #28]
340047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340047c6:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
340047c8:	69fb      	ldr	r3, [r7, #28]
340047ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047ce:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
340047d0:	69fb      	ldr	r3, [r7, #28]
340047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340047d6:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340047d8:	69bb      	ldr	r3, [r7, #24]
340047da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340047de:	2b00      	cmp	r3, #0
340047e0:	d014      	beq.n	3400480c <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
340047e2:	693b      	ldr	r3, [r7, #16]
340047e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340047e8:	2b00      	cmp	r3, #0
340047ea:	d00f      	beq.n	3400480c <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
340047ec:	69fb      	ldr	r3, [r7, #28]
340047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
340047f6:	69fb      	ldr	r3, [r7, #28]
340047f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
340047fc:	69fb      	ldr	r3, [r7, #28]
340047fe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34004802:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34004806:	6878      	ldr	r0, [r7, #4]
34004808:	f000 fcb0 	bl	3400516c <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
3400480c:	69bb      	ldr	r3, [r7, #24]
3400480e:	f003 0308 	and.w	r3, r3, #8
34004812:	2b00      	cmp	r3, #0
34004814:	d01c      	beq.n	34004850 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34004816:	693b      	ldr	r3, [r7, #16]
34004818:	f003 0308 	and.w	r3, r3, #8
3400481c:	2b00      	cmp	r3, #0
3400481e:	d017      	beq.n	34004850 <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004820:	687b      	ldr	r3, [r7, #4]
34004822:	681b      	ldr	r3, [r3, #0]
34004824:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004828:	f003 0304 	and.w	r3, r3, #4
3400482c:	2b04      	cmp	r3, #4
3400482e:	d107      	bne.n	34004840 <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34004830:	69fb      	ldr	r3, [r7, #28]
34004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004836:	f023 0208 	bic.w	r2, r3, #8
3400483a:	69fb      	ldr	r3, [r7, #28]
3400483c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34004840:	69fb      	ldr	r3, [r7, #28]
34004842:	2208      	movs	r2, #8
34004844:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34004848:	2103      	movs	r1, #3
3400484a:	6878      	ldr	r0, [r7, #4]
3400484c:	f000 fcc3 	bl	340051d6 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34004850:	69bb      	ldr	r3, [r7, #24]
34004852:	f003 0304 	and.w	r3, r3, #4
34004856:	2b00      	cmp	r3, #0
34004858:	d01c      	beq.n	34004894 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
3400485a:	693b      	ldr	r3, [r7, #16]
3400485c:	f003 0304 	and.w	r3, r3, #4
34004860:	2b00      	cmp	r3, #0
34004862:	d017      	beq.n	34004894 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004864:	687b      	ldr	r3, [r7, #4]
34004866:	681b      	ldr	r3, [r3, #0]
34004868:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400486c:	f003 0304 	and.w	r3, r3, #4
34004870:	2b04      	cmp	r3, #4
34004872:	d107      	bne.n	34004884 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34004874:	69fb      	ldr	r3, [r7, #28]
34004876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400487a:	f023 0204 	bic.w	r2, r3, #4
3400487e:	69fb      	ldr	r3, [r7, #28]
34004880:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34004884:	69fb      	ldr	r3, [r7, #28]
34004886:	2204      	movs	r2, #4
34004888:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
3400488c:	2102      	movs	r1, #2
3400488e:	6878      	ldr	r0, [r7, #4]
34004890:	f000 fca1 	bl	340051d6 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
34004894:	69bb      	ldr	r3, [r7, #24]
34004896:	f003 0302 	and.w	r3, r3, #2
3400489a:	2b00      	cmp	r3, #0
3400489c:	d01c      	beq.n	340048d8 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
3400489e:	693b      	ldr	r3, [r7, #16]
340048a0:	f003 0302 	and.w	r3, r3, #2
340048a4:	2b00      	cmp	r3, #0
340048a6:	d017      	beq.n	340048d8 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340048a8:	687b      	ldr	r3, [r7, #4]
340048aa:	681b      	ldr	r3, [r3, #0]
340048ac:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340048b0:	f003 0304 	and.w	r3, r3, #4
340048b4:	2b04      	cmp	r3, #4
340048b6:	d107      	bne.n	340048c8 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340048b8:	69fb      	ldr	r3, [r7, #28]
340048ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340048be:	f023 0202 	bic.w	r2, r3, #2
340048c2:	69fb      	ldr	r3, [r7, #28]
340048c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340048c8:	69fb      	ldr	r3, [r7, #28]
340048ca:	2202      	movs	r2, #2
340048cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340048d0:	2101      	movs	r1, #1
340048d2:	6878      	ldr	r0, [r7, #4]
340048d4:	f000 fc7f 	bl	340051d6 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340048d8:	69bb      	ldr	r3, [r7, #24]
340048da:	f003 0301 	and.w	r3, r3, #1
340048de:	2b00      	cmp	r3, #0
340048e0:	d01c      	beq.n	3400491c <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340048e2:	693b      	ldr	r3, [r7, #16]
340048e4:	f003 0301 	and.w	r3, r3, #1
340048e8:	2b00      	cmp	r3, #0
340048ea:	d017      	beq.n	3400491c <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340048ec:	687b      	ldr	r3, [r7, #4]
340048ee:	681b      	ldr	r3, [r3, #0]
340048f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340048f4:	f003 0304 	and.w	r3, r3, #4
340048f8:	2b04      	cmp	r3, #4
340048fa:	d107      	bne.n	3400490c <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
340048fc:	69fb      	ldr	r3, [r7, #28]
340048fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004902:	f023 0201 	bic.w	r2, r3, #1
34004906:	69fb      	ldr	r3, [r7, #28]
34004908:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
3400490c:	69fb      	ldr	r3, [r7, #28]
3400490e:	2201      	movs	r2, #1
34004910:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34004914:	2100      	movs	r1, #0
34004916:	6878      	ldr	r0, [r7, #4]
34004918:	f000 fc5d 	bl	340051d6 <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
3400491c:	69bb      	ldr	r3, [r7, #24]
3400491e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34004922:	2b00      	cmp	r3, #0
34004924:	d01d      	beq.n	34004962 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34004926:	693b      	ldr	r3, [r7, #16]
34004928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400492c:	2b00      	cmp	r3, #0
3400492e:	d018      	beq.n	34004962 <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004930:	687b      	ldr	r3, [r7, #4]
34004932:	681b      	ldr	r3, [r3, #0]
34004934:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004938:	f003 0304 	and.w	r3, r3, #4
3400493c:	2b04      	cmp	r3, #4
3400493e:	d107      	bne.n	34004950 <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34004940:	69fb      	ldr	r3, [r7, #28]
34004942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004946:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
3400494a:	69fb      	ldr	r3, [r7, #28]
3400494c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34004950:	69fb      	ldr	r3, [r7, #28]
34004952:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34004956:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3400495a:	2103      	movs	r1, #3
3400495c:	6878      	ldr	r0, [r7, #4]
3400495e:	f000 fc19 	bl	34005194 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34004962:	69bb      	ldr	r3, [r7, #24]
34004964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004968:	2b00      	cmp	r3, #0
3400496a:	d01d      	beq.n	340049a8 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
3400496c:	693b      	ldr	r3, [r7, #16]
3400496e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004972:	2b00      	cmp	r3, #0
34004974:	d018      	beq.n	340049a8 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004976:	687b      	ldr	r3, [r7, #4]
34004978:	681b      	ldr	r3, [r3, #0]
3400497a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400497e:	f003 0304 	and.w	r3, r3, #4
34004982:	2b04      	cmp	r3, #4
34004984:	d107      	bne.n	34004996 <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34004986:	69fb      	ldr	r3, [r7, #28]
34004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400498c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34004990:	69fb      	ldr	r3, [r7, #28]
34004992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34004996:	69fb      	ldr	r3, [r7, #28]
34004998:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400499c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340049a0:	2102      	movs	r1, #2
340049a2:	6878      	ldr	r0, [r7, #4]
340049a4:	f000 fbf6 	bl	34005194 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
340049a8:	69bb      	ldr	r3, [r7, #24]
340049aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340049ae:	2b00      	cmp	r3, #0
340049b0:	d01d      	beq.n	340049ee <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
340049b2:	693b      	ldr	r3, [r7, #16]
340049b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340049b8:	2b00      	cmp	r3, #0
340049ba:	d018      	beq.n	340049ee <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340049bc:	687b      	ldr	r3, [r7, #4]
340049be:	681b      	ldr	r3, [r3, #0]
340049c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340049c4:	f003 0304 	and.w	r3, r3, #4
340049c8:	2b04      	cmp	r3, #4
340049ca:	d107      	bne.n	340049dc <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
340049cc:	69fb      	ldr	r3, [r7, #28]
340049ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049d2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
340049d6:	69fb      	ldr	r3, [r7, #28]
340049d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
340049dc:	69fb      	ldr	r3, [r7, #28]
340049de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340049e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340049e6:	2101      	movs	r1, #1
340049e8:	6878      	ldr	r0, [r7, #4]
340049ea:	f000 fbd3 	bl	34005194 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340049ee:	69bb      	ldr	r3, [r7, #24]
340049f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340049f4:	2b00      	cmp	r3, #0
340049f6:	d01d      	beq.n	34004a34 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
340049f8:	693b      	ldr	r3, [r7, #16]
340049fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340049fe:	2b00      	cmp	r3, #0
34004a00:	d018      	beq.n	34004a34 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a02:	687b      	ldr	r3, [r7, #4]
34004a04:	681b      	ldr	r3, [r3, #0]
34004a06:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004a0a:	f003 0304 	and.w	r3, r3, #4
34004a0e:	2b04      	cmp	r3, #4
34004a10:	d107      	bne.n	34004a22 <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
34004a12:	69fb      	ldr	r3, [r7, #28]
34004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34004a1c:	69fb      	ldr	r3, [r7, #28]
34004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34004a22:	69fb      	ldr	r3, [r7, #28]
34004a24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34004a28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004a2c:	2100      	movs	r1, #0
34004a2e:	6878      	ldr	r0, [r7, #4]
34004a30:	f000 fbb0 	bl	34005194 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34004a34:	69bb      	ldr	r3, [r7, #24]
34004a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004a3a:	2b00      	cmp	r3, #0
34004a3c:	d020      	beq.n	34004a80 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34004a3e:	693b      	ldr	r3, [r7, #16]
34004a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004a44:	2b00      	cmp	r3, #0
34004a46:	d01b      	beq.n	34004a80 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a48:	687b      	ldr	r3, [r7, #4]
34004a4a:	681b      	ldr	r3, [r3, #0]
34004a4c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004a50:	f003 0304 	and.w	r3, r3, #4
34004a54:	2b04      	cmp	r3, #4
34004a56:	d107      	bne.n	34004a68 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34004a58:	69fb      	ldr	r3, [r7, #28]
34004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004a5e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34004a62:	69fb      	ldr	r3, [r7, #28]
34004a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34004a68:	69fb      	ldr	r3, [r7, #28]
34004a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004a6e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34004a72:	2103      	movs	r1, #3
34004a74:	6878      	ldr	r0, [r7, #4]
34004a76:	f000 fb98 	bl	340051aa <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
34004a7a:	e001      	b.n	34004a80 <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34004a7c:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34004a80:	69bb      	ldr	r3, [r7, #24]
34004a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004a86:	2b00      	cmp	r3, #0
34004a88:	d01d      	beq.n	34004ac6 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34004a8a:	693b      	ldr	r3, [r7, #16]
34004a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004a90:	2b00      	cmp	r3, #0
34004a92:	d018      	beq.n	34004ac6 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004a94:	687b      	ldr	r3, [r7, #4]
34004a96:	681b      	ldr	r3, [r3, #0]
34004a98:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004a9c:	f003 0304 	and.w	r3, r3, #4
34004aa0:	2b04      	cmp	r3, #4
34004aa2:	d107      	bne.n	34004ab4 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34004aa4:	69fb      	ldr	r3, [r7, #28]
34004aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004aaa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34004aae:	69fb      	ldr	r3, [r7, #28]
34004ab0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34004ab4:	69fb      	ldr	r3, [r7, #28]
34004ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004aba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34004abe:	2102      	movs	r1, #2
34004ac0:	6878      	ldr	r0, [r7, #4]
34004ac2:	f000 fb72 	bl	340051aa <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34004ac6:	69bb      	ldr	r3, [r7, #24]
34004ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004acc:	2b00      	cmp	r3, #0
34004ace:	d01d      	beq.n	34004b0c <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34004ad0:	693b      	ldr	r3, [r7, #16]
34004ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004ad6:	2b00      	cmp	r3, #0
34004ad8:	d018      	beq.n	34004b0c <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004ada:	687b      	ldr	r3, [r7, #4]
34004adc:	681b      	ldr	r3, [r3, #0]
34004ade:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004ae2:	f003 0304 	and.w	r3, r3, #4
34004ae6:	2b04      	cmp	r3, #4
34004ae8:	d107      	bne.n	34004afa <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34004aea:	69fb      	ldr	r3, [r7, #28]
34004aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004af0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004af4:	69fb      	ldr	r3, [r7, #28]
34004af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34004afa:	69fb      	ldr	r3, [r7, #28]
34004afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004b00:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34004b04:	2101      	movs	r1, #1
34004b06:	6878      	ldr	r0, [r7, #4]
34004b08:	f000 fb4f 	bl	340051aa <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34004b0c:	69bb      	ldr	r3, [r7, #24]
34004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004b12:	2b00      	cmp	r3, #0
34004b14:	d01d      	beq.n	34004b52 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34004b16:	693b      	ldr	r3, [r7, #16]
34004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004b1c:	2b00      	cmp	r3, #0
34004b1e:	d018      	beq.n	34004b52 <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004b20:	687b      	ldr	r3, [r7, #4]
34004b22:	681b      	ldr	r3, [r3, #0]
34004b24:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004b28:	f003 0304 	and.w	r3, r3, #4
34004b2c:	2b04      	cmp	r3, #4
34004b2e:	d107      	bne.n	34004b40 <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34004b30:	69fb      	ldr	r3, [r7, #28]
34004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004b3a:	69fb      	ldr	r3, [r7, #28]
34004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34004b40:	69fb      	ldr	r3, [r7, #28]
34004b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004b46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004b4a:	2100      	movs	r1, #0
34004b4c:	6878      	ldr	r0, [r7, #4]
34004b4e:	f000 fb2c 	bl	340051aa <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
34004b52:	69bb      	ldr	r3, [r7, #24]
34004b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004b58:	2b00      	cmp	r3, #0
34004b5a:	d01c      	beq.n	34004b96 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34004b5c:	693b      	ldr	r3, [r7, #16]
34004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004b62:	2b00      	cmp	r3, #0
34004b64:	d017      	beq.n	34004b96 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004b66:	687b      	ldr	r3, [r7, #4]
34004b68:	681b      	ldr	r3, [r3, #0]
34004b6a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004b6e:	f003 0304 	and.w	r3, r3, #4
34004b72:	2b04      	cmp	r3, #4
34004b74:	d107      	bne.n	34004b86 <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34004b76:	69fb      	ldr	r3, [r7, #28]
34004b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004b7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34004b80:	69fb      	ldr	r3, [r7, #28]
34004b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34004b86:	69fb      	ldr	r3, [r7, #28]
34004b88:	2280      	movs	r2, #128	@ 0x80
34004b8a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34004b8e:	2103      	movs	r1, #3
34004b90:	6878      	ldr	r0, [r7, #4]
34004b92:	f000 fb15 	bl	340051c0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
34004b96:	69bb      	ldr	r3, [r7, #24]
34004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004b9c:	2b00      	cmp	r3, #0
34004b9e:	d01c      	beq.n	34004bda <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34004ba0:	693b      	ldr	r3, [r7, #16]
34004ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004ba6:	2b00      	cmp	r3, #0
34004ba8:	d017      	beq.n	34004bda <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004baa:	687b      	ldr	r3, [r7, #4]
34004bac:	681b      	ldr	r3, [r3, #0]
34004bae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004bb2:	f003 0304 	and.w	r3, r3, #4
34004bb6:	2b04      	cmp	r3, #4
34004bb8:	d107      	bne.n	34004bca <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34004bba:	69fb      	ldr	r3, [r7, #28]
34004bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004bc0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
34004bc4:	69fb      	ldr	r3, [r7, #28]
34004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34004bca:	69fb      	ldr	r3, [r7, #28]
34004bcc:	2240      	movs	r2, #64	@ 0x40
34004bce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34004bd2:	2102      	movs	r1, #2
34004bd4:	6878      	ldr	r0, [r7, #4]
34004bd6:	f000 faf3 	bl	340051c0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34004bda:	69bb      	ldr	r3, [r7, #24]
34004bdc:	f003 0320 	and.w	r3, r3, #32
34004be0:	2b00      	cmp	r3, #0
34004be2:	d01c      	beq.n	34004c1e <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34004be4:	693b      	ldr	r3, [r7, #16]
34004be6:	f003 0320 	and.w	r3, r3, #32
34004bea:	2b00      	cmp	r3, #0
34004bec:	d017      	beq.n	34004c1e <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004bee:	687b      	ldr	r3, [r7, #4]
34004bf0:	681b      	ldr	r3, [r3, #0]
34004bf2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004bf6:	f003 0304 	and.w	r3, r3, #4
34004bfa:	2b04      	cmp	r3, #4
34004bfc:	d107      	bne.n	34004c0e <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34004bfe:	69fb      	ldr	r3, [r7, #28]
34004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c04:	f023 0220 	bic.w	r2, r3, #32
34004c08:	69fb      	ldr	r3, [r7, #28]
34004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34004c0e:	69fb      	ldr	r3, [r7, #28]
34004c10:	2220      	movs	r2, #32
34004c12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34004c16:	2101      	movs	r1, #1
34004c18:	6878      	ldr	r0, [r7, #4]
34004c1a:	f000 fad1 	bl	340051c0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34004c1e:	69bb      	ldr	r3, [r7, #24]
34004c20:	f003 0310 	and.w	r3, r3, #16
34004c24:	2b00      	cmp	r3, #0
34004c26:	d01c      	beq.n	34004c62 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34004c28:	693b      	ldr	r3, [r7, #16]
34004c2a:	f003 0310 	and.w	r3, r3, #16
34004c2e:	2b00      	cmp	r3, #0
34004c30:	d017      	beq.n	34004c62 <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004c32:	687b      	ldr	r3, [r7, #4]
34004c34:	681b      	ldr	r3, [r3, #0]
34004c36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004c3a:	f003 0304 	and.w	r3, r3, #4
34004c3e:	2b04      	cmp	r3, #4
34004c40:	d107      	bne.n	34004c52 <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34004c42:	69fb      	ldr	r3, [r7, #28]
34004c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c48:	f023 0210 	bic.w	r2, r3, #16
34004c4c:	69fb      	ldr	r3, [r7, #28]
34004c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34004c52:	69fb      	ldr	r3, [r7, #28]
34004c54:	2210      	movs	r2, #16
34004c56:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34004c5a:	2100      	movs	r1, #0
34004c5c:	6878      	ldr	r0, [r7, #4]
34004c5e:	f000 faaf 	bl	340051c0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34004c62:	69bb      	ldr	r3, [r7, #24]
34004c64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004c68:	2b00      	cmp	r3, #0
34004c6a:	d01a      	beq.n	34004ca2 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34004c6c:	693b      	ldr	r3, [r7, #16]
34004c6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004c72:	2b00      	cmp	r3, #0
34004c74:	d015      	beq.n	34004ca2 <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34004c76:	69fb      	ldr	r3, [r7, #28]
34004c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004c7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34004c80:	69fb      	ldr	r3, [r7, #28]
34004c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34004c86:	69fb      	ldr	r3, [r7, #28]
34004c88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004c8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34004c90:	687b      	ldr	r3, [r7, #4]
34004c92:	689b      	ldr	r3, [r3, #8]
34004c94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34004c98:	687b      	ldr	r3, [r7, #4]
34004c9a:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004c9c:	6878      	ldr	r0, [r7, #4]
34004c9e:	f000 fa50 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34004ca2:	69bb      	ldr	r3, [r7, #24]
34004ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004ca8:	2b00      	cmp	r3, #0
34004caa:	d01a      	beq.n	34004ce2 <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34004cac:	693b      	ldr	r3, [r7, #16]
34004cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34004cb2:	2b00      	cmp	r3, #0
34004cb4:	d015      	beq.n	34004ce2 <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34004cb6:	69fb      	ldr	r3, [r7, #28]
34004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004cbc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34004cc0:	69fb      	ldr	r3, [r7, #28]
34004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34004cc6:	69fb      	ldr	r3, [r7, #28]
34004cc8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34004ccc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34004cd0:	687b      	ldr	r3, [r7, #4]
34004cd2:	689b      	ldr	r3, [r3, #8]
34004cd4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34004cd8:	687b      	ldr	r3, [r7, #4]
34004cda:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004cdc:	6878      	ldr	r0, [r7, #4]
34004cde:	f000 fa30 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34004ce2:	69bb      	ldr	r3, [r7, #24]
34004ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004ce8:	2b00      	cmp	r3, #0
34004cea:	d01a      	beq.n	34004d22 <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34004cec:	693b      	ldr	r3, [r7, #16]
34004cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34004cf2:	2b00      	cmp	r3, #0
34004cf4:	d015      	beq.n	34004d22 <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34004cf6:	69fb      	ldr	r3, [r7, #28]
34004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004cfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
34004d00:	69fb      	ldr	r3, [r7, #28]
34004d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34004d06:	69fb      	ldr	r3, [r7, #28]
34004d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34004d0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34004d10:	687b      	ldr	r3, [r7, #4]
34004d12:	689b      	ldr	r3, [r3, #8]
34004d14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34004d18:	687b      	ldr	r3, [r7, #4]
34004d1a:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004d1c:	6878      	ldr	r0, [r7, #4]
34004d1e:	f000 fa10 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34004d22:	69bb      	ldr	r3, [r7, #24]
34004d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004d28:	2b00      	cmp	r3, #0
34004d2a:	d01a      	beq.n	34004d62 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34004d2c:	693b      	ldr	r3, [r7, #16]
34004d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004d32:	2b00      	cmp	r3, #0
34004d34:	d015      	beq.n	34004d62 <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34004d36:	69fb      	ldr	r3, [r7, #28]
34004d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34004d40:	69fb      	ldr	r3, [r7, #28]
34004d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34004d46:	69fb      	ldr	r3, [r7, #28]
34004d48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34004d4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34004d50:	687b      	ldr	r3, [r7, #4]
34004d52:	689b      	ldr	r3, [r3, #8]
34004d54:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34004d58:	687b      	ldr	r3, [r7, #4]
34004d5a:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004d5c:	6878      	ldr	r0, [r7, #4]
34004d5e:	f000 f9f0 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34004d62:	69bb      	ldr	r3, [r7, #24]
34004d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004d68:	2b00      	cmp	r3, #0
34004d6a:	d01a      	beq.n	34004da2 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34004d6c:	693b      	ldr	r3, [r7, #16]
34004d6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004d72:	2b00      	cmp	r3, #0
34004d74:	d015      	beq.n	34004da2 <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34004d76:	69fb      	ldr	r3, [r7, #28]
34004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004d7c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34004d80:	69fb      	ldr	r3, [r7, #28]
34004d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34004d86:	69fb      	ldr	r3, [r7, #28]
34004d88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004d8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34004d90:	687b      	ldr	r3, [r7, #4]
34004d92:	689b      	ldr	r3, [r3, #8]
34004d94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
34004d98:	687b      	ldr	r3, [r7, #4]
34004d9a:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004d9c:	6878      	ldr	r0, [r7, #4]
34004d9e:	f000 f9d0 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34004da2:	69bb      	ldr	r3, [r7, #24]
34004da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004da8:	2b00      	cmp	r3, #0
34004daa:	d01a      	beq.n	34004de2 <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34004dac:	693b      	ldr	r3, [r7, #16]
34004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34004db2:	2b00      	cmp	r3, #0
34004db4:	d015      	beq.n	34004de2 <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34004db6:	69fb      	ldr	r3, [r7, #28]
34004db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004dbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34004dc0:	69fb      	ldr	r3, [r7, #28]
34004dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34004dc6:	69fb      	ldr	r3, [r7, #28]
34004dc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34004dcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34004dd0:	687b      	ldr	r3, [r7, #4]
34004dd2:	689b      	ldr	r3, [r3, #8]
34004dd4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
34004dd8:	687b      	ldr	r3, [r7, #4]
34004dda:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004ddc:	6878      	ldr	r0, [r7, #4]
34004dde:	f000 f9b0 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34004de2:	69bb      	ldr	r3, [r7, #24]
34004de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004de8:	2b00      	cmp	r3, #0
34004dea:	d01a      	beq.n	34004e22 <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34004dec:	693b      	ldr	r3, [r7, #16]
34004dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34004df2:	2b00      	cmp	r3, #0
34004df4:	d015      	beq.n	34004e22 <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34004df6:	69fb      	ldr	r3, [r7, #28]
34004df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004dfc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34004e00:	69fb      	ldr	r3, [r7, #28]
34004e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34004e06:	69fb      	ldr	r3, [r7, #28]
34004e08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34004e0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34004e10:	687b      	ldr	r3, [r7, #4]
34004e12:	689b      	ldr	r3, [r3, #8]
34004e14:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34004e18:	687b      	ldr	r3, [r7, #4]
34004e1a:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004e1c:	6878      	ldr	r0, [r7, #4]
34004e1e:	f000 f990 	bl	34005142 <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34004e22:	697b      	ldr	r3, [r7, #20]
34004e24:	f003 0301 	and.w	r3, r3, #1
34004e28:	2b00      	cmp	r3, #0
34004e2a:	d01d      	beq.n	34004e68 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34004e2c:	68fb      	ldr	r3, [r7, #12]
34004e2e:	f003 0301 	and.w	r3, r3, #1
34004e32:	2b00      	cmp	r3, #0
34004e34:	d018      	beq.n	34004e68 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34004e36:	69fb      	ldr	r3, [r7, #28]
34004e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e3c:	f023 0201 	bic.w	r2, r3, #1
34004e40:	69fb      	ldr	r3, [r7, #28]
34004e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34004e46:	69fb      	ldr	r3, [r7, #28]
34004e48:	2201      	movs	r2, #1
34004e4a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004e4e:	687b      	ldr	r3, [r7, #4]
34004e50:	689b      	ldr	r3, [r3, #8]
34004e52:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004e56:	687b      	ldr	r3, [r7, #4]
34004e58:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004e5a:	687b      	ldr	r3, [r7, #4]
34004e5c:	2204      	movs	r2, #4
34004e5e:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004e60:	2101      	movs	r1, #1
34004e62:	6878      	ldr	r0, [r7, #4]
34004e64:	f000 f977 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34004e68:	697b      	ldr	r3, [r7, #20]
34004e6a:	f003 0302 	and.w	r3, r3, #2
34004e6e:	2b00      	cmp	r3, #0
34004e70:	d01d      	beq.n	34004eae <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34004e72:	68fb      	ldr	r3, [r7, #12]
34004e74:	f003 0302 	and.w	r3, r3, #2
34004e78:	2b00      	cmp	r3, #0
34004e7a:	d018      	beq.n	34004eae <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34004e7c:	69fb      	ldr	r3, [r7, #28]
34004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004e82:	f023 0202 	bic.w	r2, r3, #2
34004e86:	69fb      	ldr	r3, [r7, #28]
34004e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34004e8c:	69fb      	ldr	r3, [r7, #28]
34004e8e:	2202      	movs	r2, #2
34004e90:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004e94:	687b      	ldr	r3, [r7, #4]
34004e96:	689b      	ldr	r3, [r3, #8]
34004e98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004e9c:	687b      	ldr	r3, [r7, #4]
34004e9e:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004ea0:	687b      	ldr	r3, [r7, #4]
34004ea2:	2204      	movs	r2, #4
34004ea4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004ea6:	2101      	movs	r1, #1
34004ea8:	6878      	ldr	r0, [r7, #4]
34004eaa:	f000 f954 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34004eae:	697b      	ldr	r3, [r7, #20]
34004eb0:	f003 0304 	and.w	r3, r3, #4
34004eb4:	2b00      	cmp	r3, #0
34004eb6:	d01a      	beq.n	34004eee <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34004eb8:	68fb      	ldr	r3, [r7, #12]
34004eba:	f003 0304 	and.w	r3, r3, #4
34004ebe:	2b00      	cmp	r3, #0
34004ec0:	d015      	beq.n	34004eee <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34004ec2:	69fb      	ldr	r3, [r7, #28]
34004ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004ec8:	f023 0204 	bic.w	r2, r3, #4
34004ecc:	69fb      	ldr	r3, [r7, #28]
34004ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34004ed2:	69fb      	ldr	r3, [r7, #28]
34004ed4:	2204      	movs	r2, #4
34004ed6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34004eda:	687b      	ldr	r3, [r7, #4]
34004edc:	689b      	ldr	r3, [r3, #8]
34004ede:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34004ee2:	687b      	ldr	r3, [r7, #4]
34004ee4:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004ee6:	2101      	movs	r1, #1
34004ee8:	6878      	ldr	r0, [r7, #4]
34004eea:	f000 f934 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34004eee:	697b      	ldr	r3, [r7, #20]
34004ef0:	f003 0308 	and.w	r3, r3, #8
34004ef4:	2b00      	cmp	r3, #0
34004ef6:	d01a      	beq.n	34004f2e <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34004ef8:	68fb      	ldr	r3, [r7, #12]
34004efa:	f003 0308 	and.w	r3, r3, #8
34004efe:	2b00      	cmp	r3, #0
34004f00:	d015      	beq.n	34004f2e <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34004f02:	69fb      	ldr	r3, [r7, #28]
34004f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f08:	f023 0208 	bic.w	r2, r3, #8
34004f0c:	69fb      	ldr	r3, [r7, #28]
34004f0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34004f12:	69fb      	ldr	r3, [r7, #28]
34004f14:	2208      	movs	r2, #8
34004f16:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34004f1a:	687b      	ldr	r3, [r7, #4]
34004f1c:	689b      	ldr	r3, [r3, #8]
34004f1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34004f22:	687b      	ldr	r3, [r7, #4]
34004f24:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004f26:	2101      	movs	r1, #1
34004f28:	6878      	ldr	r0, [r7, #4]
34004f2a:	f000 f914 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34004f2e:	697b      	ldr	r3, [r7, #20]
34004f30:	f003 0310 	and.w	r3, r3, #16
34004f34:	2b00      	cmp	r3, #0
34004f36:	d01a      	beq.n	34004f6e <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34004f38:	68fb      	ldr	r3, [r7, #12]
34004f3a:	f003 0310 	and.w	r3, r3, #16
34004f3e:	2b00      	cmp	r3, #0
34004f40:	d015      	beq.n	34004f6e <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34004f42:	69fb      	ldr	r3, [r7, #28]
34004f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f48:	f023 0210 	bic.w	r2, r3, #16
34004f4c:	69fb      	ldr	r3, [r7, #28]
34004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34004f52:	69fb      	ldr	r3, [r7, #28]
34004f54:	2210      	movs	r2, #16
34004f56:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34004f5a:	687b      	ldr	r3, [r7, #4]
34004f5c:	689b      	ldr	r3, [r3, #8]
34004f5e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
34004f62:	687b      	ldr	r3, [r7, #4]
34004f64:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004f66:	2101      	movs	r1, #1
34004f68:	6878      	ldr	r0, [r7, #4]
34004f6a:	f000 f8f4 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34004f6e:	697b      	ldr	r3, [r7, #20]
34004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004f74:	2b00      	cmp	r3, #0
34004f76:	d01e      	beq.n	34004fb6 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34004f78:	68fb      	ldr	r3, [r7, #12]
34004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004f7e:	2b00      	cmp	r3, #0
34004f80:	d019      	beq.n	34004fb6 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34004f82:	69fb      	ldr	r3, [r7, #28]
34004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004f8c:	69fb      	ldr	r3, [r7, #28]
34004f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34004f92:	69fb      	ldr	r3, [r7, #28]
34004f94:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004f98:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34004f9c:	687b      	ldr	r3, [r7, #4]
34004f9e:	689b      	ldr	r3, [r3, #8]
34004fa0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004fa4:	687b      	ldr	r3, [r7, #4]
34004fa6:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004fa8:	687b      	ldr	r3, [r7, #4]
34004faa:	2204      	movs	r2, #4
34004fac:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004fae:	2102      	movs	r1, #2
34004fb0:	6878      	ldr	r0, [r7, #4]
34004fb2:	f000 f8d0 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34004fb6:	697b      	ldr	r3, [r7, #20]
34004fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004fbc:	2b00      	cmp	r3, #0
34004fbe:	d01e      	beq.n	34004ffe <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34004fc0:	68fb      	ldr	r3, [r7, #12]
34004fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004fc6:	2b00      	cmp	r3, #0
34004fc8:	d019      	beq.n	34004ffe <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34004fca:	69fb      	ldr	r3, [r7, #28]
34004fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004fd0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004fd4:	69fb      	ldr	r3, [r7, #28]
34004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34004fda:	69fb      	ldr	r3, [r7, #28]
34004fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004fe0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34004fe4:	687b      	ldr	r3, [r7, #4]
34004fe6:	689b      	ldr	r3, [r3, #8]
34004fe8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
34004fec:	687b      	ldr	r3, [r7, #4]
34004fee:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004ff0:	687b      	ldr	r3, [r7, #4]
34004ff2:	2204      	movs	r2, #4
34004ff4:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004ff6:	2102      	movs	r1, #2
34004ff8:	6878      	ldr	r0, [r7, #4]
34004ffa:	f000 f8ac 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34004ffe:	697b      	ldr	r3, [r7, #20]
34005000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005004:	2b00      	cmp	r3, #0
34005006:	d01b      	beq.n	34005040 <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34005008:	68fb      	ldr	r3, [r7, #12]
3400500a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400500e:	2b00      	cmp	r3, #0
34005010:	d016      	beq.n	34005040 <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34005012:	69fb      	ldr	r3, [r7, #28]
34005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005018:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
3400501c:	69fb      	ldr	r3, [r7, #28]
3400501e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34005022:	69fb      	ldr	r3, [r7, #28]
34005024:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34005028:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
3400502c:	687b      	ldr	r3, [r7, #4]
3400502e:	689b      	ldr	r3, [r3, #8]
34005030:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34005034:	687b      	ldr	r3, [r7, #4]
34005036:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34005038:	2102      	movs	r1, #2
3400503a:	6878      	ldr	r0, [r7, #4]
3400503c:	f000 f88b 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34005040:	697b      	ldr	r3, [r7, #20]
34005042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005046:	2b00      	cmp	r3, #0
34005048:	d01b      	beq.n	34005082 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
3400504a:	68fb      	ldr	r3, [r7, #12]
3400504c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005050:	2b00      	cmp	r3, #0
34005052:	d016      	beq.n	34005082 <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34005054:	69fb      	ldr	r3, [r7, #28]
34005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400505a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
3400505e:	69fb      	ldr	r3, [r7, #28]
34005060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34005064:	69fb      	ldr	r3, [r7, #28]
34005066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400506a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
3400506e:	687b      	ldr	r3, [r7, #4]
34005070:	689b      	ldr	r3, [r3, #8]
34005072:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34005076:	687b      	ldr	r3, [r7, #4]
34005078:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3400507a:	2102      	movs	r1, #2
3400507c:	6878      	ldr	r0, [r7, #4]
3400507e:	f000 f86a 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34005082:	697b      	ldr	r3, [r7, #20]
34005084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34005088:	2b00      	cmp	r3, #0
3400508a:	d01b      	beq.n	340050c4 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3400508c:	68fb      	ldr	r3, [r7, #12]
3400508e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34005092:	2b00      	cmp	r3, #0
34005094:	d016      	beq.n	340050c4 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34005096:	69fb      	ldr	r3, [r7, #28]
34005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400509c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
340050a0:	69fb      	ldr	r3, [r7, #28]
340050a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340050a6:	69fb      	ldr	r3, [r7, #28]
340050a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340050ac:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340050b0:	687b      	ldr	r3, [r7, #4]
340050b2:	689b      	ldr	r3, [r3, #8]
340050b4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
340050b8:	687b      	ldr	r3, [r7, #4]
340050ba:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340050bc:	2102      	movs	r1, #2
340050be:	6878      	ldr	r0, [r7, #4]
340050c0:	f000 f849 	bl	34005156 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340050c4:	69bb      	ldr	r3, [r7, #24]
340050c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340050ca:	2b00      	cmp	r3, #0
340050cc:	d014      	beq.n	340050f8 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340050ce:	693b      	ldr	r3, [r7, #16]
340050d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340050d4:	2b00      	cmp	r3, #0
340050d6:	d00f      	beq.n	340050f8 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340050d8:	69fb      	ldr	r3, [r7, #28]
340050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340050de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
340050e2:	69fb      	ldr	r3, [r7, #28]
340050e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340050e8:	69fb      	ldr	r3, [r7, #28]
340050ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340050ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340050f2:	6878      	ldr	r0, [r7, #4]
340050f4:	f000 f844 	bl	34005180 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
340050f8:	bf00      	nop
340050fa:	3720      	adds	r7, #32
340050fc:	46bd      	mov	sp, r7
340050fe:	bd80      	pop	{r7, pc}

34005100 <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34005100:	b480      	push	{r7}
34005102:	b083      	sub	sp, #12
34005104:	af00      	add	r7, sp, #0
34005106:	6078      	str	r0, [r7, #4]
34005108:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
3400510a:	bf00      	nop
3400510c:	370c      	adds	r7, #12
3400510e:	46bd      	mov	sp, r7
34005110:	f85d 7b04 	ldr.w	r7, [sp], #4
34005114:	4770      	bx	lr

34005116 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34005116:	b480      	push	{r7}
34005118:	b083      	sub	sp, #12
3400511a:	af00      	add	r7, sp, #0
3400511c:	6078      	str	r0, [r7, #4]
3400511e:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34005120:	bf00      	nop
34005122:	370c      	adds	r7, #12
34005124:	46bd      	mov	sp, r7
34005126:	f85d 7b04 	ldr.w	r7, [sp], #4
3400512a:	4770      	bx	lr

3400512c <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
3400512c:	b480      	push	{r7}
3400512e:	b083      	sub	sp, #12
34005130:	af00      	add	r7, sp, #0
34005132:	6078      	str	r0, [r7, #4]
34005134:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34005136:	bf00      	nop
34005138:	370c      	adds	r7, #12
3400513a:	46bd      	mov	sp, r7
3400513c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005140:	4770      	bx	lr

34005142 <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34005142:	b480      	push	{r7}
34005144:	b083      	sub	sp, #12
34005146:	af00      	add	r7, sp, #0
34005148:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
3400514a:	bf00      	nop
3400514c:	370c      	adds	r7, #12
3400514e:	46bd      	mov	sp, r7
34005150:	f85d 7b04 	ldr.w	r7, [sp], #4
34005154:	4770      	bx	lr

34005156 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
34005156:	b480      	push	{r7}
34005158:	b083      	sub	sp, #12
3400515a:	af00      	add	r7, sp, #0
3400515c:	6078      	str	r0, [r7, #4]
3400515e:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34005160:	bf00      	nop
34005162:	370c      	adds	r7, #12
34005164:	46bd      	mov	sp, r7
34005166:	f85d 7b04 	ldr.w	r7, [sp], #4
3400516a:	4770      	bx	lr

3400516c <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
3400516c:	b480      	push	{r7}
3400516e:	b083      	sub	sp, #12
34005170:	af00      	add	r7, sp, #0
34005172:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34005174:	bf00      	nop
34005176:	370c      	adds	r7, #12
34005178:	46bd      	mov	sp, r7
3400517a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400517e:	4770      	bx	lr

34005180 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34005180:	b480      	push	{r7}
34005182:	b083      	sub	sp, #12
34005184:	af00      	add	r7, sp, #0
34005186:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34005188:	bf00      	nop
3400518a:	370c      	adds	r7, #12
3400518c:	46bd      	mov	sp, r7
3400518e:	f85d 7b04 	ldr.w	r7, [sp], #4
34005192:	4770      	bx	lr

34005194 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34005194:	b480      	push	{r7}
34005196:	b083      	sub	sp, #12
34005198:	af00      	add	r7, sp, #0
3400519a:	6078      	str	r0, [r7, #4]
3400519c:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
3400519e:	bf00      	nop
340051a0:	370c      	adds	r7, #12
340051a2:	46bd      	mov	sp, r7
340051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340051a8:	4770      	bx	lr

340051aa <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
340051aa:	b480      	push	{r7}
340051ac:	b083      	sub	sp, #12
340051ae:	af00      	add	r7, sp, #0
340051b0:	6078      	str	r0, [r7, #4]
340051b2:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
340051b4:	bf00      	nop
340051b6:	370c      	adds	r7, #12
340051b8:	46bd      	mov	sp, r7
340051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340051be:	4770      	bx	lr

340051c0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
340051c0:	b480      	push	{r7}
340051c2:	b083      	sub	sp, #12
340051c4:	af00      	add	r7, sp, #0
340051c6:	6078      	str	r0, [r7, #4]
340051c8:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
340051ca:	bf00      	nop
340051cc:	370c      	adds	r7, #12
340051ce:	46bd      	mov	sp, r7
340051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340051d4:	4770      	bx	lr

340051d6 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
340051d6:	b480      	push	{r7}
340051d8:	b083      	sub	sp, #12
340051da:	af00      	add	r7, sp, #0
340051dc:	6078      	str	r0, [r7, #4]
340051de:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
340051e0:	bf00      	nop
340051e2:	370c      	adds	r7, #12
340051e4:	46bd      	mov	sp, r7
340051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340051ea:	4770      	bx	lr

340051ec <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
340051ec:	b580      	push	{r7, lr}
340051ee:	b084      	sub	sp, #16
340051f0:	af00      	add	r7, sp, #0
340051f2:	60f8      	str	r0, [r7, #12]
340051f4:	60b9      	str	r1, [r7, #8]
340051f6:	607a      	str	r2, [r7, #4]
340051f8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
340051fa:	68fb      	ldr	r3, [r7, #12]
340051fc:	2b00      	cmp	r3, #0
340051fe:	d101      	bne.n	34005204 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
34005200:	2301      	movs	r3, #1
34005202:	e05b      	b.n	340052bc <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
34005204:	683b      	ldr	r3, [r7, #0]
34005206:	2b00      	cmp	r3, #0
34005208:	d003      	beq.n	34005212 <HAL_DMA_Start_IT+0x26>
3400520a:	683b      	ldr	r3, [r7, #0]
3400520c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34005210:	d304      	bcc.n	3400521c <HAL_DMA_Start_IT+0x30>
34005212:	f240 2143 	movw	r1, #579	@ 0x243
34005216:	482b      	ldr	r0, [pc, #172]	@ (340052c4 <HAL_DMA_Start_IT+0xd8>)
34005218:	f7fc fd40 	bl	34001c9c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
3400521c:	68fb      	ldr	r3, [r7, #12]
3400521e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
34005222:	2b01      	cmp	r3, #1
34005224:	d101      	bne.n	3400522a <HAL_DMA_Start_IT+0x3e>
34005226:	2302      	movs	r3, #2
34005228:	e048      	b.n	340052bc <HAL_DMA_Start_IT+0xd0>
3400522a:	68fb      	ldr	r3, [r7, #12]
3400522c:	2201      	movs	r2, #1
3400522e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
34005232:	68fb      	ldr	r3, [r7, #12]
34005234:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005238:	b2db      	uxtb	r3, r3
3400523a:	2b01      	cmp	r3, #1
3400523c:	d136      	bne.n	340052ac <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
3400523e:	68fb      	ldr	r3, [r7, #12]
34005240:	2202      	movs	r2, #2
34005242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
34005246:	68fb      	ldr	r3, [r7, #12]
34005248:	2200      	movs	r2, #0
3400524a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
3400524c:	683b      	ldr	r3, [r7, #0]
3400524e:	687a      	ldr	r2, [r7, #4]
34005250:	68b9      	ldr	r1, [r7, #8]
34005252:	68f8      	ldr	r0, [r7, #12]
34005254:	f000 f9d6 	bl	34005604 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34005258:	68fb      	ldr	r3, [r7, #12]
3400525a:	681b      	ldr	r3, [r3, #0]
3400525c:	695a      	ldr	r2, [r3, #20]
3400525e:	68fb      	ldr	r3, [r7, #12]
34005260:	681b      	ldr	r3, [r3, #0]
34005262:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
34005266:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
34005268:	68fb      	ldr	r3, [r7, #12]
3400526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400526c:	2b00      	cmp	r3, #0
3400526e:	d007      	beq.n	34005280 <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34005270:	68fb      	ldr	r3, [r7, #12]
34005272:	681b      	ldr	r3, [r3, #0]
34005274:	695a      	ldr	r2, [r3, #20]
34005276:	68fb      	ldr	r3, [r7, #12]
34005278:	681b      	ldr	r3, [r3, #0]
3400527a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
3400527e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
34005280:	68fb      	ldr	r3, [r7, #12]
34005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005284:	2b00      	cmp	r3, #0
34005286:	d007      	beq.n	34005298 <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
34005288:	68fb      	ldr	r3, [r7, #12]
3400528a:	681b      	ldr	r3, [r3, #0]
3400528c:	695a      	ldr	r2, [r3, #20]
3400528e:	68fb      	ldr	r3, [r7, #12]
34005290:	681b      	ldr	r3, [r3, #0]
34005292:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34005296:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
34005298:	68fb      	ldr	r3, [r7, #12]
3400529a:	681b      	ldr	r3, [r3, #0]
3400529c:	695a      	ldr	r2, [r3, #20]
3400529e:	68fb      	ldr	r3, [r7, #12]
340052a0:	681b      	ldr	r3, [r3, #0]
340052a2:	f042 0201 	orr.w	r2, r2, #1
340052a6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
340052a8:	2300      	movs	r3, #0
340052aa:	e007      	b.n	340052bc <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
340052ac:	68fb      	ldr	r3, [r7, #12]
340052ae:	2240      	movs	r2, #64	@ 0x40
340052b0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
340052b2:	68fb      	ldr	r3, [r7, #12]
340052b4:	2200      	movs	r2, #0
340052b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
340052ba:	2301      	movs	r3, #1
}
340052bc:	4618      	mov	r0, r3
340052be:	3710      	adds	r7, #16
340052c0:	46bd      	mov	sp, r7
340052c2:	bd80      	pop	{r7, pc}
340052c4:	3401e4ac 	.word	0x3401e4ac

340052c8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
340052c8:	b480      	push	{r7}
340052ca:	b083      	sub	sp, #12
340052cc:	af00      	add	r7, sp, #0
340052ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
340052d0:	687b      	ldr	r3, [r7, #4]
340052d2:	2b00      	cmp	r3, #0
340052d4:	d101      	bne.n	340052da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
340052d6:	2301      	movs	r3, #1
340052d8:	e019      	b.n	3400530e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
340052da:	687b      	ldr	r3, [r7, #4]
340052dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340052e0:	b2db      	uxtb	r3, r3
340052e2:	2b02      	cmp	r3, #2
340052e4:	d004      	beq.n	340052f0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
340052e6:	687b      	ldr	r3, [r7, #4]
340052e8:	2220      	movs	r2, #32
340052ea:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
340052ec:	2301      	movs	r3, #1
340052ee:	e00e      	b.n	3400530e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
340052f0:	687b      	ldr	r3, [r7, #4]
340052f2:	2204      	movs	r2, #4
340052f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
340052f8:	687b      	ldr	r3, [r7, #4]
340052fa:	681b      	ldr	r3, [r3, #0]
340052fc:	695b      	ldr	r3, [r3, #20]
340052fe:	687a      	ldr	r2, [r7, #4]
34005300:	6812      	ldr	r2, [r2, #0]
34005302:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34005306:	f043 0304 	orr.w	r3, r3, #4
3400530a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
3400530c:	2300      	movs	r3, #0
}
3400530e:	4618      	mov	r0, r3
34005310:	370c      	adds	r7, #12
34005312:	46bd      	mov	sp, r7
34005314:	f85d 7b04 	ldr.w	r7, [sp], #4
34005318:	4770      	bx	lr

3400531a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
3400531a:	b580      	push	{r7, lr}
3400531c:	b086      	sub	sp, #24
3400531e:	af00      	add	r7, sp, #0
34005320:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
34005322:	687b      	ldr	r3, [r7, #4]
34005324:	681b      	ldr	r3, [r3, #0]
34005326:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
3400532a:	f023 030f 	bic.w	r3, r3, #15
3400532e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
34005330:	687b      	ldr	r3, [r7, #4]
34005332:	681b      	ldr	r3, [r3, #0]
34005334:	f3c3 030b 	ubfx	r3, r3, #0, #12
34005338:	3b50      	subs	r3, #80	@ 0x50
3400533a:	09db      	lsrs	r3, r3, #7
3400533c:	f003 031f 	and.w	r3, r3, #31
34005340:	2201      	movs	r2, #1
34005342:	fa02 f303 	lsl.w	r3, r2, r3
34005346:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
34005348:	697b      	ldr	r3, [r7, #20]
3400534a:	68db      	ldr	r3, [r3, #12]
3400534c:	693a      	ldr	r2, [r7, #16]
3400534e:	4013      	ands	r3, r2
34005350:	60fb      	str	r3, [r7, #12]
#if defined (CPU_IN_SECURE_STATE)
  uint32_t global_active_flag_s = IS_DMA_GLOBAL_ACTIVE_FLAG_S(p_dma_instance, global_it_flag);
34005352:	697b      	ldr	r3, [r7, #20]
34005354:	691b      	ldr	r3, [r3, #16]
34005356:	693a      	ldr	r2, [r7, #16]
34005358:	4013      	ands	r3, r2
3400535a:	60bb      	str	r3, [r7, #8]
#endif /* CPU_IN_SECURE_STATE */

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
3400535c:	68bb      	ldr	r3, [r7, #8]
3400535e:	2b00      	cmp	r3, #0
34005360:	d103      	bne.n	3400536a <HAL_DMA_IRQHandler+0x50>
34005362:	68fb      	ldr	r3, [r7, #12]
34005364:	2b00      	cmp	r3, #0
34005366:	f000 813b 	beq.w	340055e0 <HAL_DMA_IRQHandler+0x2c6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
3400536a:	687b      	ldr	r3, [r7, #4]
3400536c:	681b      	ldr	r3, [r3, #0]
3400536e:	691b      	ldr	r3, [r3, #16]
34005370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005374:	2b00      	cmp	r3, #0
34005376:	d011      	beq.n	3400539c <HAL_DMA_IRQHandler+0x82>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
34005378:	687b      	ldr	r3, [r7, #4]
3400537a:	681b      	ldr	r3, [r3, #0]
3400537c:	695b      	ldr	r3, [r3, #20]
3400537e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005382:	2b00      	cmp	r3, #0
34005384:	d00a      	beq.n	3400539c <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
34005386:	687b      	ldr	r3, [r7, #4]
34005388:	681b      	ldr	r3, [r3, #0]
3400538a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400538e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
34005390:	687b      	ldr	r3, [r7, #4]
34005392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34005394:	f043 0201 	orr.w	r2, r3, #1
34005398:	687b      	ldr	r3, [r7, #4]
3400539a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
3400539c:	687b      	ldr	r3, [r7, #4]
3400539e:	681b      	ldr	r3, [r3, #0]
340053a0:	691b      	ldr	r3, [r3, #16]
340053a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340053a6:	2b00      	cmp	r3, #0
340053a8:	d011      	beq.n	340053ce <HAL_DMA_IRQHandler+0xb4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
340053aa:	687b      	ldr	r3, [r7, #4]
340053ac:	681b      	ldr	r3, [r3, #0]
340053ae:	695b      	ldr	r3, [r3, #20]
340053b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340053b4:	2b00      	cmp	r3, #0
340053b6:	d00a      	beq.n	340053ce <HAL_DMA_IRQHandler+0xb4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
340053b8:	687b      	ldr	r3, [r7, #4]
340053ba:	681b      	ldr	r3, [r3, #0]
340053bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
340053c0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
340053c2:	687b      	ldr	r3, [r7, #4]
340053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340053c6:	f043 0202 	orr.w	r2, r3, #2
340053ca:	687b      	ldr	r3, [r7, #4]
340053cc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
340053ce:	687b      	ldr	r3, [r7, #4]
340053d0:	681b      	ldr	r3, [r3, #0]
340053d2:	691b      	ldr	r3, [r3, #16]
340053d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340053d8:	2b00      	cmp	r3, #0
340053da:	d011      	beq.n	34005400 <HAL_DMA_IRQHandler+0xe6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
340053dc:	687b      	ldr	r3, [r7, #4]
340053de:	681b      	ldr	r3, [r3, #0]
340053e0:	695b      	ldr	r3, [r3, #20]
340053e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340053e6:	2b00      	cmp	r3, #0
340053e8:	d00a      	beq.n	34005400 <HAL_DMA_IRQHandler+0xe6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
340053ea:	687b      	ldr	r3, [r7, #4]
340053ec:	681b      	ldr	r3, [r3, #0]
340053ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340053f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
340053f4:	687b      	ldr	r3, [r7, #4]
340053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340053f8:	f043 0204 	orr.w	r2, r3, #4
340053fc:	687b      	ldr	r3, [r7, #4]
340053fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
34005400:	687b      	ldr	r3, [r7, #4]
34005402:	681b      	ldr	r3, [r3, #0]
34005404:	691b      	ldr	r3, [r3, #16]
34005406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400540a:	2b00      	cmp	r3, #0
3400540c:	d011      	beq.n	34005432 <HAL_DMA_IRQHandler+0x118>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
3400540e:	687b      	ldr	r3, [r7, #4]
34005410:	681b      	ldr	r3, [r3, #0]
34005412:	695b      	ldr	r3, [r3, #20]
34005414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34005418:	2b00      	cmp	r3, #0
3400541a:	d00a      	beq.n	34005432 <HAL_DMA_IRQHandler+0x118>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
3400541c:	687b      	ldr	r3, [r7, #4]
3400541e:	681b      	ldr	r3, [r3, #0]
34005420:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34005424:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
34005426:	687b      	ldr	r3, [r7, #4]
34005428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3400542a:	f043 0208 	orr.w	r2, r3, #8
3400542e:	687b      	ldr	r3, [r7, #4]
34005430:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
34005432:	687b      	ldr	r3, [r7, #4]
34005434:	681b      	ldr	r3, [r3, #0]
34005436:	691b      	ldr	r3, [r3, #16]
34005438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400543c:	2b00      	cmp	r3, #0
3400543e:	d013      	beq.n	34005468 <HAL_DMA_IRQHandler+0x14e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
34005440:	687b      	ldr	r3, [r7, #4]
34005442:	681b      	ldr	r3, [r3, #0]
34005444:	695b      	ldr	r3, [r3, #20]
34005446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400544a:	2b00      	cmp	r3, #0
3400544c:	d00c      	beq.n	34005468 <HAL_DMA_IRQHandler+0x14e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
3400544e:	687b      	ldr	r3, [r7, #4]
34005450:	681b      	ldr	r3, [r3, #0]
34005452:	f44f 7200 	mov.w	r2, #512	@ 0x200
34005456:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
34005458:	687b      	ldr	r3, [r7, #4]
3400545a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400545c:	2b00      	cmp	r3, #0
3400545e:	d003      	beq.n	34005468 <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
34005460:	687b      	ldr	r3, [r7, #4]
34005462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005464:	6878      	ldr	r0, [r7, #4]
34005466:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
34005468:	687b      	ldr	r3, [r7, #4]
3400546a:	681b      	ldr	r3, [r3, #0]
3400546c:	691b      	ldr	r3, [r3, #16]
3400546e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005472:	2b00      	cmp	r3, #0
34005474:	d04c      	beq.n	34005510 <HAL_DMA_IRQHandler+0x1f6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
34005476:	687b      	ldr	r3, [r7, #4]
34005478:	681b      	ldr	r3, [r3, #0]
3400547a:	695b      	ldr	r3, [r3, #20]
3400547c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005480:	2b00      	cmp	r3, #0
34005482:	d045      	beq.n	34005510 <HAL_DMA_IRQHandler+0x1f6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
34005484:	687b      	ldr	r3, [r7, #4]
34005486:	681b      	ldr	r3, [r3, #0]
34005488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3400548c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
3400548e:	687b      	ldr	r3, [r7, #4]
34005490:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34005494:	b2db      	uxtb	r3, r3
34005496:	2b04      	cmp	r3, #4
34005498:	d12e      	bne.n	340054f8 <HAL_DMA_IRQHandler+0x1de>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
3400549a:	687b      	ldr	r3, [r7, #4]
3400549c:	681b      	ldr	r3, [r3, #0]
3400549e:	695a      	ldr	r2, [r3, #20]
340054a0:	687b      	ldr	r3, [r7, #4]
340054a2:	681b      	ldr	r3, [r3, #0]
340054a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340054a8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
340054aa:	687b      	ldr	r3, [r7, #4]
340054ac:	681b      	ldr	r3, [r3, #0]
340054ae:	695a      	ldr	r2, [r3, #20]
340054b0:	687b      	ldr	r3, [r7, #4]
340054b2:	681b      	ldr	r3, [r3, #0]
340054b4:	f042 0202 	orr.w	r2, r2, #2
340054b8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
340054ba:	687b      	ldr	r3, [r7, #4]
340054bc:	2201      	movs	r2, #1
340054be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340054c2:	687b      	ldr	r3, [r7, #4]
340054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340054c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340054ca:	2b00      	cmp	r3, #0
340054cc:	d007      	beq.n	340054de <HAL_DMA_IRQHandler+0x1c4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340054ce:	687b      	ldr	r3, [r7, #4]
340054d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340054d2:	2201      	movs	r2, #1
340054d4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
340054d6:	687b      	ldr	r3, [r7, #4]
340054d8:	681b      	ldr	r3, [r3, #0]
340054da:	2200      	movs	r2, #0
340054dc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
340054de:	687b      	ldr	r3, [r7, #4]
340054e0:	2200      	movs	r2, #0
340054e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
340054e6:	687b      	ldr	r3, [r7, #4]
340054e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340054ea:	2b00      	cmp	r3, #0
340054ec:	d07a      	beq.n	340055e4 <HAL_DMA_IRQHandler+0x2ca>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
340054ee:	687b      	ldr	r3, [r7, #4]
340054f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
340054f2:	6878      	ldr	r0, [r7, #4]
340054f4:	4798      	blx	r3
        }

        return;
340054f6:	e075      	b.n	340055e4 <HAL_DMA_IRQHandler+0x2ca>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
340054f8:	687b      	ldr	r3, [r7, #4]
340054fa:	2205      	movs	r2, #5
340054fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
34005500:	687b      	ldr	r3, [r7, #4]
34005502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005504:	2b00      	cmp	r3, #0
34005506:	d003      	beq.n	34005510 <HAL_DMA_IRQHandler+0x1f6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
34005508:	687b      	ldr	r3, [r7, #4]
3400550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400550c:	6878      	ldr	r0, [r7, #4]
3400550e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
34005510:	687b      	ldr	r3, [r7, #4]
34005512:	681b      	ldr	r3, [r3, #0]
34005514:	691b      	ldr	r3, [r3, #16]
34005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400551a:	2b00      	cmp	r3, #0
3400551c:	d039      	beq.n	34005592 <HAL_DMA_IRQHandler+0x278>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
3400551e:	687b      	ldr	r3, [r7, #4]
34005520:	681b      	ldr	r3, [r3, #0]
34005522:	695b      	ldr	r3, [r3, #20]
34005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34005528:	2b00      	cmp	r3, #0
3400552a:	d032      	beq.n	34005592 <HAL_DMA_IRQHandler+0x278>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
3400552c:	687b      	ldr	r3, [r7, #4]
3400552e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34005530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34005534:	2b00      	cmp	r3, #0
34005536:	d012      	beq.n	3400555e <HAL_DMA_IRQHandler+0x244>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
34005538:	687b      	ldr	r3, [r7, #4]
3400553a:	681b      	ldr	r3, [r3, #0]
3400553c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400553e:	2b00      	cmp	r3, #0
34005540:	d116      	bne.n	34005570 <HAL_DMA_IRQHandler+0x256>
        {
          if (hdma->Instance->CBR1 == 0U)
34005542:	687b      	ldr	r3, [r7, #4]
34005544:	681b      	ldr	r3, [r3, #0]
34005546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005548:	2b00      	cmp	r3, #0
3400554a:	d111      	bne.n	34005570 <HAL_DMA_IRQHandler+0x256>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
3400554c:	687b      	ldr	r3, [r7, #4]
3400554e:	2201      	movs	r2, #1
34005550:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34005554:	687b      	ldr	r3, [r7, #4]
34005556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005558:	2201      	movs	r2, #1
3400555a:	731a      	strb	r2, [r3, #12]
3400555c:	e008      	b.n	34005570 <HAL_DMA_IRQHandler+0x256>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
3400555e:	687b      	ldr	r3, [r7, #4]
34005560:	681b      	ldr	r3, [r3, #0]
34005562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005564:	2b00      	cmp	r3, #0
34005566:	d103      	bne.n	34005570 <HAL_DMA_IRQHandler+0x256>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
34005568:	687b      	ldr	r3, [r7, #4]
3400556a:	2201      	movs	r2, #1
3400556c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
34005570:	687b      	ldr	r3, [r7, #4]
34005572:	681b      	ldr	r3, [r3, #0]
34005574:	f44f 7240 	mov.w	r2, #768	@ 0x300
34005578:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
3400557a:	687b      	ldr	r3, [r7, #4]
3400557c:	2200      	movs	r2, #0
3400557e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
34005582:	687b      	ldr	r3, [r7, #4]
34005584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34005586:	2b00      	cmp	r3, #0
34005588:	d003      	beq.n	34005592 <HAL_DMA_IRQHandler+0x278>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
3400558a:	687b      	ldr	r3, [r7, #4]
3400558c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400558e:	6878      	ldr	r0, [r7, #4]
34005590:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
34005592:	687b      	ldr	r3, [r7, #4]
34005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34005596:	2b00      	cmp	r3, #0
34005598:	d025      	beq.n	340055e6 <HAL_DMA_IRQHandler+0x2cc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
3400559a:	687b      	ldr	r3, [r7, #4]
3400559c:	681b      	ldr	r3, [r3, #0]
3400559e:	695a      	ldr	r2, [r3, #20]
340055a0:	687b      	ldr	r3, [r7, #4]
340055a2:	681b      	ldr	r3, [r3, #0]
340055a4:	f042 0202 	orr.w	r2, r2, #2
340055a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
340055aa:	687b      	ldr	r3, [r7, #4]
340055ac:	2201      	movs	r2, #1
340055ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340055b2:	687b      	ldr	r3, [r7, #4]
340055b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340055ba:	2b00      	cmp	r3, #0
340055bc:	d003      	beq.n	340055c6 <HAL_DMA_IRQHandler+0x2ac>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
340055be:	687b      	ldr	r3, [r7, #4]
340055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340055c2:	2201      	movs	r2, #1
340055c4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
340055c6:	687b      	ldr	r3, [r7, #4]
340055c8:	2200      	movs	r2, #0
340055ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
340055ce:	687b      	ldr	r3, [r7, #4]
340055d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
340055d2:	2b00      	cmp	r3, #0
340055d4:	d007      	beq.n	340055e6 <HAL_DMA_IRQHandler+0x2cc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
340055d6:	687b      	ldr	r3, [r7, #4]
340055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
340055da:	6878      	ldr	r0, [r7, #4]
340055dc:	4798      	blx	r3
340055de:	e002      	b.n	340055e6 <HAL_DMA_IRQHandler+0x2cc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
340055e0:	bf00      	nop
340055e2:	e000      	b.n	340055e6 <HAL_DMA_IRQHandler+0x2cc>
        return;
340055e4:	bf00      	nop
    }
  }
}
340055e6:	3718      	adds	r7, #24
340055e8:	46bd      	mov	sp, r7
340055ea:	bd80      	pop	{r7, pc}

340055ec <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
340055ec:	b480      	push	{r7}
340055ee:	b083      	sub	sp, #12
340055f0:	af00      	add	r7, sp, #0
340055f2:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
340055f4:	687b      	ldr	r3, [r7, #4]
340055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
340055f8:	4618      	mov	r0, r3
340055fa:	370c      	adds	r7, #12
340055fc:	46bd      	mov	sp, r7
340055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34005602:	4770      	bx	lr

34005604 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
34005604:	b480      	push	{r7}
34005606:	b085      	sub	sp, #20
34005608:	af00      	add	r7, sp, #0
3400560a:	60f8      	str	r0, [r7, #12]
3400560c:	60b9      	str	r1, [r7, #8]
3400560e:	607a      	str	r2, [r7, #4]
34005610:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
34005612:	68fb      	ldr	r3, [r7, #12]
34005614:	681b      	ldr	r3, [r3, #0]
34005616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005618:	0c1b      	lsrs	r3, r3, #16
3400561a:	041b      	lsls	r3, r3, #16
3400561c:	683a      	ldr	r2, [r7, #0]
3400561e:	b291      	uxth	r1, r2
34005620:	68fa      	ldr	r2, [r7, #12]
34005622:	6812      	ldr	r2, [r2, #0]
34005624:	430b      	orrs	r3, r1
34005626:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34005628:	68fb      	ldr	r3, [r7, #12]
3400562a:	681b      	ldr	r3, [r3, #0]
3400562c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34005630:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
34005632:	68fb      	ldr	r3, [r7, #12]
34005634:	681b      	ldr	r3, [r3, #0]
34005636:	68ba      	ldr	r2, [r7, #8]
34005638:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
3400563a:	68fb      	ldr	r3, [r7, #12]
3400563c:	681b      	ldr	r3, [r3, #0]
3400563e:	687a      	ldr	r2, [r7, #4]
34005640:	651a      	str	r2, [r3, #80]	@ 0x50
}
34005642:	bf00      	nop
34005644:	3714      	adds	r7, #20
34005646:	46bd      	mov	sp, r7
34005648:	f85d 7b04 	ldr.w	r7, [sp], #4
3400564c:	4770      	bx	lr

3400564e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
3400564e:	b580      	push	{r7, lr}
34005650:	b084      	sub	sp, #16
34005652:	af00      	add	r7, sp, #0
34005654:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34005656:	687b      	ldr	r3, [r7, #4]
34005658:	681b      	ldr	r3, [r3, #0]
3400565a:	685b      	ldr	r3, [r3, #4]
3400565c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
3400565e:	687b      	ldr	r3, [r7, #4]
34005660:	681b      	ldr	r3, [r3, #0]
34005662:	681b      	ldr	r3, [r3, #0]
34005664:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34005666:	68fb      	ldr	r3, [r7, #12]
34005668:	f003 0301 	and.w	r3, r3, #1
3400566c:	2b00      	cmp	r3, #0
3400566e:	d026      	beq.n	340056be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
34005670:	68bb      	ldr	r3, [r7, #8]
34005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34005676:	2b00      	cmp	r3, #0
34005678:	d021      	beq.n	340056be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
3400567a:	687b      	ldr	r3, [r7, #4]
3400567c:	681b      	ldr	r3, [r3, #0]
3400567e:	681a      	ldr	r2, [r3, #0]
34005680:	687b      	ldr	r3, [r7, #4]
34005682:	681b      	ldr	r3, [r3, #0]
34005684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34005688:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
3400568a:	687b      	ldr	r3, [r7, #4]
3400568c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400568e:	f043 0201 	orr.w	r2, r3, #1
34005692:	687b      	ldr	r3, [r7, #4]
34005694:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
34005696:	687b      	ldr	r3, [r7, #4]
34005698:	681b      	ldr	r3, [r3, #0]
3400569a:	2201      	movs	r2, #1
3400569c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400569e:	687b      	ldr	r3, [r7, #4]
340056a0:	2204      	movs	r2, #4
340056a2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340056a6:	687b      	ldr	r3, [r7, #4]
340056a8:	2200      	movs	r2, #0
340056aa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
340056ae:	687b      	ldr	r3, [r7, #4]
340056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340056b2:	2b00      	cmp	r3, #0
340056b4:	d003      	beq.n	340056be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
340056b6:	687b      	ldr	r3, [r7, #4]
340056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340056ba:	6878      	ldr	r0, [r7, #4]
340056bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
340056be:	68fb      	ldr	r3, [r7, #12]
340056c0:	f003 0320 	and.w	r3, r3, #32
340056c4:	2b00      	cmp	r3, #0
340056c6:	d026      	beq.n	34005716 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
340056c8:	68bb      	ldr	r3, [r7, #8]
340056ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340056ce:	2b00      	cmp	r3, #0
340056d0:	d021      	beq.n	34005716 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
340056d2:	687b      	ldr	r3, [r7, #4]
340056d4:	681b      	ldr	r3, [r3, #0]
340056d6:	681a      	ldr	r2, [r3, #0]
340056d8:	687b      	ldr	r3, [r7, #4]
340056da:	681b      	ldr	r3, [r3, #0]
340056dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
340056e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
340056e2:	687b      	ldr	r3, [r7, #4]
340056e4:	681b      	ldr	r3, [r3, #0]
340056e6:	2220      	movs	r2, #32
340056e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340056ea:	687b      	ldr	r3, [r7, #4]
340056ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
340056ee:	f043 0202 	orr.w	r2, r3, #2
340056f2:	687b      	ldr	r3, [r7, #4]
340056f4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
340056f6:	687b      	ldr	r3, [r7, #4]
340056f8:	2204      	movs	r2, #4
340056fa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340056fe:	687b      	ldr	r3, [r7, #4]
34005700:	2200      	movs	r2, #0
34005702:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34005706:	687b      	ldr	r3, [r7, #4]
34005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400570a:	2b00      	cmp	r3, #0
3400570c:	d003      	beq.n	34005716 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
3400570e:	687b      	ldr	r3, [r7, #4]
34005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005712:	6878      	ldr	r0, [r7, #4]
34005714:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34005716:	68fb      	ldr	r3, [r7, #12]
34005718:	f003 0308 	and.w	r3, r3, #8
3400571c:	2b00      	cmp	r3, #0
3400571e:	d026      	beq.n	3400576e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
34005720:	68bb      	ldr	r3, [r7, #8]
34005722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005726:	2b00      	cmp	r3, #0
34005728:	d021      	beq.n	3400576e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
3400572a:	687b      	ldr	r3, [r7, #4]
3400572c:	681b      	ldr	r3, [r3, #0]
3400572e:	681a      	ldr	r2, [r3, #0]
34005730:	687b      	ldr	r3, [r7, #4]
34005732:	681b      	ldr	r3, [r3, #0]
34005734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34005738:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
3400573a:	687b      	ldr	r3, [r7, #4]
3400573c:	681b      	ldr	r3, [r3, #0]
3400573e:	2208      	movs	r2, #8
34005740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34005742:	687b      	ldr	r3, [r7, #4]
34005744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005746:	f043 0204 	orr.w	r2, r3, #4
3400574a:	687b      	ldr	r3, [r7, #4]
3400574c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400574e:	687b      	ldr	r3, [r7, #4]
34005750:	2204      	movs	r2, #4
34005752:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005756:	687b      	ldr	r3, [r7, #4]
34005758:	2200      	movs	r2, #0
3400575a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
3400575e:	687b      	ldr	r3, [r7, #4]
34005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005762:	2b00      	cmp	r3, #0
34005764:	d003      	beq.n	3400576e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34005766:	687b      	ldr	r3, [r7, #4]
34005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400576a:	6878      	ldr	r0, [r7, #4]
3400576c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
3400576e:	68fb      	ldr	r3, [r7, #12]
34005770:	f003 0304 	and.w	r3, r3, #4
34005774:	2b00      	cmp	r3, #0
34005776:	d013      	beq.n	340057a0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
34005778:	68bb      	ldr	r3, [r7, #8]
3400577a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400577e:	2b00      	cmp	r3, #0
34005780:	d00e      	beq.n	340057a0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
34005782:	687b      	ldr	r3, [r7, #4]
34005784:	681b      	ldr	r3, [r3, #0]
34005786:	681a      	ldr	r2, [r3, #0]
34005788:	687b      	ldr	r3, [r7, #4]
3400578a:	681b      	ldr	r3, [r3, #0]
3400578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34005790:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
34005792:	687b      	ldr	r3, [r7, #4]
34005794:	681b      	ldr	r3, [r3, #0]
34005796:	2204      	movs	r2, #4
34005798:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
3400579a:	6878      	ldr	r0, [r7, #4]
3400579c:	f000 f853 	bl	34005846 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
340057a0:	68fb      	ldr	r3, [r7, #12]
340057a2:	f003 0302 	and.w	r3, r3, #2
340057a6:	2b00      	cmp	r3, #0
340057a8:	d024      	beq.n	340057f4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
340057aa:	68bb      	ldr	r3, [r7, #8]
340057ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340057b0:	2b00      	cmp	r3, #0
340057b2:	d01f      	beq.n	340057f4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
340057b4:	687b      	ldr	r3, [r7, #4]
340057b6:	681b      	ldr	r3, [r3, #0]
340057b8:	681a      	ldr	r2, [r3, #0]
340057ba:	687b      	ldr	r3, [r7, #4]
340057bc:	681b      	ldr	r3, [r3, #0]
340057be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340057c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
340057c4:	687b      	ldr	r3, [r7, #4]
340057c6:	681b      	ldr	r3, [r3, #0]
340057c8:	2202      	movs	r2, #2
340057ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340057cc:	687b      	ldr	r3, [r7, #4]
340057ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340057d0:	687b      	ldr	r3, [r7, #4]
340057d2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
340057d4:	687b      	ldr	r3, [r7, #4]
340057d6:	2201      	movs	r2, #1
340057d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340057dc:	687b      	ldr	r3, [r7, #4]
340057de:	2200      	movs	r2, #0
340057e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
340057e4:	687b      	ldr	r3, [r7, #4]
340057e6:	6a1b      	ldr	r3, [r3, #32]
340057e8:	2b00      	cmp	r3, #0
340057ea:	d003      	beq.n	340057f4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
340057ec:	687b      	ldr	r3, [r7, #4]
340057ee:	6a1b      	ldr	r3, [r3, #32]
340057f0:	6878      	ldr	r0, [r7, #4]
340057f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
340057f4:	68fb      	ldr	r3, [r7, #12]
340057f6:	f003 0310 	and.w	r3, r3, #16
340057fa:	2b00      	cmp	r3, #0
340057fc:	d01f      	beq.n	3400583e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
340057fe:	68bb      	ldr	r3, [r7, #8]
34005800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34005804:	2b00      	cmp	r3, #0
34005806:	d01a      	beq.n	3400583e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34005808:	687b      	ldr	r3, [r7, #4]
3400580a:	681b      	ldr	r3, [r3, #0]
3400580c:	681a      	ldr	r2, [r3, #0]
3400580e:	687b      	ldr	r3, [r7, #4]
34005810:	681b      	ldr	r3, [r3, #0]
34005812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34005816:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34005818:	687b      	ldr	r3, [r7, #4]
3400581a:	681b      	ldr	r3, [r3, #0]
3400581c:	2210      	movs	r2, #16
3400581e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
34005820:	687b      	ldr	r3, [r7, #4]
34005822:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34005824:	687b      	ldr	r3, [r7, #4]
34005826:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34005828:	687b      	ldr	r3, [r7, #4]
3400582a:	2201      	movs	r2, #1
3400582c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005830:	687b      	ldr	r3, [r7, #4]
34005832:	2200      	movs	r2, #0
34005834:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34005838:	6878      	ldr	r0, [r7, #4]
3400583a:	f000 f80e 	bl	3400585a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
3400583e:	bf00      	nop
34005840:	3710      	adds	r7, #16
34005842:	46bd      	mov	sp, r7
34005844:	bd80      	pop	{r7, pc}

34005846 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
34005846:	b480      	push	{r7}
34005848:	b083      	sub	sp, #12
3400584a:	af00      	add	r7, sp, #0
3400584c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
3400584e:	bf00      	nop
34005850:	370c      	adds	r7, #12
34005852:	46bd      	mov	sp, r7
34005854:	f85d 7b04 	ldr.w	r7, [sp], #4
34005858:	4770      	bx	lr

3400585a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
3400585a:	b480      	push	{r7}
3400585c:	b083      	sub	sp, #12
3400585e:	af00      	add	r7, sp, #0
34005860:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
34005862:	bf00      	nop
34005864:	370c      	adds	r7, #12
34005866:	46bd      	mov	sp, r7
34005868:	f85d 7b04 	ldr.w	r7, [sp], #4
3400586c:	4770      	bx	lr

3400586e <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
3400586e:	b580      	push	{r7, lr}
34005870:	b086      	sub	sp, #24
34005872:	af00      	add	r7, sp, #0
34005874:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
34005876:	687b      	ldr	r3, [r7, #4]
34005878:	2b00      	cmp	r3, #0
3400587a:	d003      	beq.n	34005884 <HAL_DMAEx_List_Start_IT+0x16>
3400587c:	687b      	ldr	r3, [r7, #4]
3400587e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005880:	2b00      	cmp	r3, #0
34005882:	d101      	bne.n	34005888 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
34005884:	2301      	movs	r3, #1
34005886:	e082      	b.n	3400598e <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
34005888:	687b      	ldr	r3, [r7, #4]
3400588a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3400588e:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
34005890:	687b      	ldr	r3, [r7, #4]
34005892:	681b      	ldr	r3, [r3, #0]
34005894:	695b      	ldr	r3, [r3, #20]
34005896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400589a:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
3400589c:	7dfb      	ldrb	r3, [r7, #23]
3400589e:	2b01      	cmp	r3, #1
340058a0:	d005      	beq.n	340058ae <HAL_DMAEx_List_Start_IT+0x40>
340058a2:	7dfb      	ldrb	r3, [r7, #23]
340058a4:	2b02      	cmp	r3, #2
340058a6:	d16a      	bne.n	3400597e <HAL_DMAEx_List_Start_IT+0x110>
340058a8:	693b      	ldr	r3, [r7, #16]
340058aa:	2b00      	cmp	r3, #0
340058ac:	d067      	beq.n	3400597e <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
340058ae:	687b      	ldr	r3, [r7, #4]
340058b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340058b4:	b2db      	uxtb	r3, r3
340058b6:	2b01      	cmp	r3, #1
340058b8:	d157      	bne.n	3400596a <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
340058ba:	687b      	ldr	r3, [r7, #4]
340058bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
340058c0:	2b01      	cmp	r3, #1
340058c2:	d101      	bne.n	340058c8 <HAL_DMAEx_List_Start_IT+0x5a>
340058c4:	2302      	movs	r3, #2
340058c6:	e062      	b.n	3400598e <HAL_DMAEx_List_Start_IT+0x120>
340058c8:	687b      	ldr	r3, [r7, #4]
340058ca:	2201      	movs	r2, #1
340058cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
340058d0:	687b      	ldr	r3, [r7, #4]
340058d2:	2202      	movs	r2, #2
340058d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
340058d8:	687b      	ldr	r3, [r7, #4]
340058da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340058dc:	2202      	movs	r2, #2
340058de:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
340058e0:	687b      	ldr	r3, [r7, #4]
340058e2:	2200      	movs	r2, #0
340058e4:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
340058e6:	687b      	ldr	r3, [r7, #4]
340058e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340058ea:	2200      	movs	r2, #0
340058ec:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
340058ee:	687b      	ldr	r3, [r7, #4]
340058f0:	681b      	ldr	r3, [r3, #0]
340058f2:	695a      	ldr	r2, [r3, #20]
340058f4:	687b      	ldr	r3, [r7, #4]
340058f6:	681b      	ldr	r3, [r3, #0]
340058f8:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
340058fc:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
340058fe:	687b      	ldr	r3, [r7, #4]
34005900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005902:	2b00      	cmp	r3, #0
34005904:	d007      	beq.n	34005916 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34005906:	687b      	ldr	r3, [r7, #4]
34005908:	681b      	ldr	r3, [r3, #0]
3400590a:	695a      	ldr	r2, [r3, #20]
3400590c:	687b      	ldr	r3, [r7, #4]
3400590e:	681b      	ldr	r3, [r3, #0]
34005910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34005914:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
34005916:	687b      	ldr	r3, [r7, #4]
34005918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400591a:	2b00      	cmp	r3, #0
3400591c:	d007      	beq.n	3400592e <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
3400591e:	687b      	ldr	r3, [r7, #4]
34005920:	681b      	ldr	r3, [r3, #0]
34005922:	695a      	ldr	r2, [r3, #20]
34005924:	687b      	ldr	r3, [r7, #4]
34005926:	681b      	ldr	r3, [r3, #0]
34005928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
3400592c:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
3400592e:	687b      	ldr	r3, [r7, #4]
34005930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005932:	681b      	ldr	r3, [r3, #0]
34005934:	f107 010c 	add.w	r1, r7, #12
34005938:	2200      	movs	r2, #0
3400593a:	4618      	mov	r0, r3
3400593c:	f000 f82c 	bl	34005998 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
34005940:	687b      	ldr	r3, [r7, #4]
34005942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005944:	681b      	ldr	r3, [r3, #0]
34005946:	4619      	mov	r1, r3
34005948:	687b      	ldr	r3, [r7, #4]
3400594a:	681a      	ldr	r2, [r3, #0]
3400594c:	0c0b      	lsrs	r3, r1, #16
3400594e:	041b      	lsls	r3, r3, #16
34005950:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
34005952:	687b      	ldr	r3, [r7, #4]
34005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005956:	681b      	ldr	r3, [r3, #0]
34005958:	461a      	mov	r2, r3
3400595a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
3400595e:	4013      	ands	r3, r2
34005960:	68f9      	ldr	r1, [r7, #12]
34005962:	687a      	ldr	r2, [r7, #4]
34005964:	6812      	ldr	r2, [r2, #0]
34005966:	430b      	orrs	r3, r1
34005968:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
3400596a:	687b      	ldr	r3, [r7, #4]
3400596c:	681b      	ldr	r3, [r3, #0]
3400596e:	695a      	ldr	r2, [r3, #20]
34005970:	687b      	ldr	r3, [r7, #4]
34005972:	681b      	ldr	r3, [r3, #0]
34005974:	f042 0201 	orr.w	r2, r2, #1
34005978:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
3400597a:	2300      	movs	r3, #0
3400597c:	e007      	b.n	3400598e <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
3400597e:	687b      	ldr	r3, [r7, #4]
34005980:	2240      	movs	r2, #64	@ 0x40
34005982:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34005984:	687b      	ldr	r3, [r7, #4]
34005986:	2200      	movs	r2, #0
34005988:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
3400598c:	2301      	movs	r3, #1
}
3400598e:	4618      	mov	r0, r3
34005990:	3718      	adds	r7, #24
34005992:	46bd      	mov	sp, r7
34005994:	bd80      	pop	{r7, pc}
	...

34005998 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
34005998:	b480      	push	{r7}
3400599a:	b085      	sub	sp, #20
3400599c:	af00      	add	r7, sp, #0
3400599e:	60f8      	str	r0, [r7, #12]
340059a0:	60b9      	str	r1, [r7, #8]
340059a2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
340059a4:	68fb      	ldr	r3, [r7, #12]
340059a6:	6a1b      	ldr	r3, [r3, #32]
340059a8:	f003 0302 	and.w	r3, r3, #2
340059ac:	2b00      	cmp	r3, #0
340059ae:	d00c      	beq.n	340059ca <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
340059b0:	68bb      	ldr	r3, [r7, #8]
340059b2:	2b00      	cmp	r3, #0
340059b4:	d002      	beq.n	340059bc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
340059b6:	68bb      	ldr	r3, [r7, #8]
340059b8:	4a0d      	ldr	r2, [pc, #52]	@ (340059f0 <DMA_List_GetCLLRNodeInfo+0x58>)
340059ba:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
340059bc:	687b      	ldr	r3, [r7, #4]
340059be:	2b00      	cmp	r3, #0
340059c0:	d00f      	beq.n	340059e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
340059c2:	687b      	ldr	r3, [r7, #4]
340059c4:	2207      	movs	r2, #7
340059c6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
340059c8:	e00b      	b.n	340059e2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
340059ca:	68bb      	ldr	r3, [r7, #8]
340059cc:	2b00      	cmp	r3, #0
340059ce:	d002      	beq.n	340059d6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
340059d0:	68bb      	ldr	r3, [r7, #8]
340059d2:	4a08      	ldr	r2, [pc, #32]	@ (340059f4 <DMA_List_GetCLLRNodeInfo+0x5c>)
340059d4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
340059d6:	687b      	ldr	r3, [r7, #4]
340059d8:	2b00      	cmp	r3, #0
340059da:	d002      	beq.n	340059e2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
340059dc:	687b      	ldr	r3, [r7, #4]
340059de:	2205      	movs	r2, #5
340059e0:	601a      	str	r2, [r3, #0]
}
340059e2:	bf00      	nop
340059e4:	3714      	adds	r7, #20
340059e6:	46bd      	mov	sp, r7
340059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340059ec:	4770      	bx	lr
340059ee:	bf00      	nop
340059f0:	fe010000 	.word	0xfe010000
340059f4:	f8010000 	.word	0xf8010000

340059f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
340059f8:	b580      	push	{r7, lr}
340059fa:	b086      	sub	sp, #24
340059fc:	af00      	add	r7, sp, #0
340059fe:	6078      	str	r0, [r7, #4]
34005a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34005a02:	2300      	movs	r3, #0
34005a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34005a06:	687b      	ldr	r3, [r7, #4]
34005a08:	4a5b      	ldr	r2, [pc, #364]	@ (34005b78 <HAL_GPIO_Init+0x180>)
34005a0a:	4293      	cmp	r3, r2
34005a0c:	d05f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a0e:	687b      	ldr	r3, [r7, #4]
34005a10:	4a5a      	ldr	r2, [pc, #360]	@ (34005b7c <HAL_GPIO_Init+0x184>)
34005a12:	4293      	cmp	r3, r2
34005a14:	d05b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a16:	687b      	ldr	r3, [r7, #4]
34005a18:	4a59      	ldr	r2, [pc, #356]	@ (34005b80 <HAL_GPIO_Init+0x188>)
34005a1a:	4293      	cmp	r3, r2
34005a1c:	d057      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a1e:	687b      	ldr	r3, [r7, #4]
34005a20:	4a58      	ldr	r2, [pc, #352]	@ (34005b84 <HAL_GPIO_Init+0x18c>)
34005a22:	4293      	cmp	r3, r2
34005a24:	d053      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a26:	687b      	ldr	r3, [r7, #4]
34005a28:	4a57      	ldr	r2, [pc, #348]	@ (34005b88 <HAL_GPIO_Init+0x190>)
34005a2a:	4293      	cmp	r3, r2
34005a2c:	d04f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a2e:	687b      	ldr	r3, [r7, #4]
34005a30:	4a56      	ldr	r2, [pc, #344]	@ (34005b8c <HAL_GPIO_Init+0x194>)
34005a32:	4293      	cmp	r3, r2
34005a34:	d04b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a36:	687b      	ldr	r3, [r7, #4]
34005a38:	4a55      	ldr	r2, [pc, #340]	@ (34005b90 <HAL_GPIO_Init+0x198>)
34005a3a:	4293      	cmp	r3, r2
34005a3c:	d047      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a3e:	687b      	ldr	r3, [r7, #4]
34005a40:	4a54      	ldr	r2, [pc, #336]	@ (34005b94 <HAL_GPIO_Init+0x19c>)
34005a42:	4293      	cmp	r3, r2
34005a44:	d043      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a46:	687b      	ldr	r3, [r7, #4]
34005a48:	4a53      	ldr	r2, [pc, #332]	@ (34005b98 <HAL_GPIO_Init+0x1a0>)
34005a4a:	4293      	cmp	r3, r2
34005a4c:	d03f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a4e:	687b      	ldr	r3, [r7, #4]
34005a50:	4a52      	ldr	r2, [pc, #328]	@ (34005b9c <HAL_GPIO_Init+0x1a4>)
34005a52:	4293      	cmp	r3, r2
34005a54:	d03b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a56:	687b      	ldr	r3, [r7, #4]
34005a58:	4a51      	ldr	r2, [pc, #324]	@ (34005ba0 <HAL_GPIO_Init+0x1a8>)
34005a5a:	4293      	cmp	r3, r2
34005a5c:	d037      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a5e:	687b      	ldr	r3, [r7, #4]
34005a60:	4a50      	ldr	r2, [pc, #320]	@ (34005ba4 <HAL_GPIO_Init+0x1ac>)
34005a62:	4293      	cmp	r3, r2
34005a64:	d033      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a66:	687b      	ldr	r3, [r7, #4]
34005a68:	4a4f      	ldr	r2, [pc, #316]	@ (34005ba8 <HAL_GPIO_Init+0x1b0>)
34005a6a:	4293      	cmp	r3, r2
34005a6c:	d02f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a6e:	687b      	ldr	r3, [r7, #4]
34005a70:	4a4e      	ldr	r2, [pc, #312]	@ (34005bac <HAL_GPIO_Init+0x1b4>)
34005a72:	4293      	cmp	r3, r2
34005a74:	d02b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a76:	687b      	ldr	r3, [r7, #4]
34005a78:	4a4d      	ldr	r2, [pc, #308]	@ (34005bb0 <HAL_GPIO_Init+0x1b8>)
34005a7a:	4293      	cmp	r3, r2
34005a7c:	d027      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a7e:	687b      	ldr	r3, [r7, #4]
34005a80:	4a4c      	ldr	r2, [pc, #304]	@ (34005bb4 <HAL_GPIO_Init+0x1bc>)
34005a82:	4293      	cmp	r3, r2
34005a84:	d023      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a86:	687b      	ldr	r3, [r7, #4]
34005a88:	4a4b      	ldr	r2, [pc, #300]	@ (34005bb8 <HAL_GPIO_Init+0x1c0>)
34005a8a:	4293      	cmp	r3, r2
34005a8c:	d01f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a8e:	687b      	ldr	r3, [r7, #4]
34005a90:	4a4a      	ldr	r2, [pc, #296]	@ (34005bbc <HAL_GPIO_Init+0x1c4>)
34005a92:	4293      	cmp	r3, r2
34005a94:	d01b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a96:	687b      	ldr	r3, [r7, #4]
34005a98:	4a49      	ldr	r2, [pc, #292]	@ (34005bc0 <HAL_GPIO_Init+0x1c8>)
34005a9a:	4293      	cmp	r3, r2
34005a9c:	d017      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005a9e:	687b      	ldr	r3, [r7, #4]
34005aa0:	4a48      	ldr	r2, [pc, #288]	@ (34005bc4 <HAL_GPIO_Init+0x1cc>)
34005aa2:	4293      	cmp	r3, r2
34005aa4:	d013      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005aa6:	687b      	ldr	r3, [r7, #4]
34005aa8:	4a47      	ldr	r2, [pc, #284]	@ (34005bc8 <HAL_GPIO_Init+0x1d0>)
34005aaa:	4293      	cmp	r3, r2
34005aac:	d00f      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005aae:	687b      	ldr	r3, [r7, #4]
34005ab0:	4a46      	ldr	r2, [pc, #280]	@ (34005bcc <HAL_GPIO_Init+0x1d4>)
34005ab2:	4293      	cmp	r3, r2
34005ab4:	d00b      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005ab6:	687b      	ldr	r3, [r7, #4]
34005ab8:	4a45      	ldr	r2, [pc, #276]	@ (34005bd0 <HAL_GPIO_Init+0x1d8>)
34005aba:	4293      	cmp	r3, r2
34005abc:	d007      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005abe:	687b      	ldr	r3, [r7, #4]
34005ac0:	4a44      	ldr	r2, [pc, #272]	@ (34005bd4 <HAL_GPIO_Init+0x1dc>)
34005ac2:	4293      	cmp	r3, r2
34005ac4:	d003      	beq.n	34005ace <HAL_GPIO_Init+0xd6>
34005ac6:	21ad      	movs	r1, #173	@ 0xad
34005ac8:	4843      	ldr	r0, [pc, #268]	@ (34005bd8 <HAL_GPIO_Init+0x1e0>)
34005aca:	f7fc f8e7 	bl	34001c9c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34005ace:	683b      	ldr	r3, [r7, #0]
34005ad0:	681b      	ldr	r3, [r3, #0]
34005ad2:	b29b      	uxth	r3, r3
34005ad4:	2b00      	cmp	r3, #0
34005ad6:	d004      	beq.n	34005ae2 <HAL_GPIO_Init+0xea>
34005ad8:	683b      	ldr	r3, [r7, #0]
34005ada:	681b      	ldr	r3, [r3, #0]
34005adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34005ae0:	d303      	bcc.n	34005aea <HAL_GPIO_Init+0xf2>
34005ae2:	21ae      	movs	r1, #174	@ 0xae
34005ae4:	483c      	ldr	r0, [pc, #240]	@ (34005bd8 <HAL_GPIO_Init+0x1e0>)
34005ae6:	f7fc f8d9 	bl	34001c9c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34005aea:	683b      	ldr	r3, [r7, #0]
34005aec:	685b      	ldr	r3, [r3, #4]
34005aee:	2b00      	cmp	r3, #0
34005af0:	f000 82bb 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005af4:	683b      	ldr	r3, [r7, #0]
34005af6:	685b      	ldr	r3, [r3, #4]
34005af8:	2b01      	cmp	r3, #1
34005afa:	f000 82b6 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005afe:	683b      	ldr	r3, [r7, #0]
34005b00:	685b      	ldr	r3, [r3, #4]
34005b02:	2b11      	cmp	r3, #17
34005b04:	f000 82b1 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b08:	683b      	ldr	r3, [r7, #0]
34005b0a:	685b      	ldr	r3, [r3, #4]
34005b0c:	2b02      	cmp	r3, #2
34005b0e:	f000 82ac 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b12:	683b      	ldr	r3, [r7, #0]
34005b14:	685b      	ldr	r3, [r3, #4]
34005b16:	2b12      	cmp	r3, #18
34005b18:	f000 82a7 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b1c:	683b      	ldr	r3, [r7, #0]
34005b1e:	685b      	ldr	r3, [r3, #4]
34005b20:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34005b24:	f000 82a1 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b28:	683b      	ldr	r3, [r7, #0]
34005b2a:	685b      	ldr	r3, [r3, #4]
34005b2c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34005b30:	f000 829b 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b34:	683b      	ldr	r3, [r7, #0]
34005b36:	685b      	ldr	r3, [r3, #4]
34005b38:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34005b3c:	f000 8295 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b40:	683b      	ldr	r3, [r7, #0]
34005b42:	685b      	ldr	r3, [r3, #4]
34005b44:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34005b48:	f000 828f 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b4c:	683b      	ldr	r3, [r7, #0]
34005b4e:	685b      	ldr	r3, [r3, #4]
34005b50:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34005b54:	f000 8289 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b58:	683b      	ldr	r3, [r7, #0]
34005b5a:	685b      	ldr	r3, [r3, #4]
34005b5c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
34005b60:	f000 8283 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b64:	683b      	ldr	r3, [r7, #0]
34005b66:	685b      	ldr	r3, [r3, #4]
34005b68:	2b03      	cmp	r3, #3
34005b6a:	f000 827e 	beq.w	3400606a <HAL_GPIO_Init+0x672>
34005b6e:	21af      	movs	r1, #175	@ 0xaf
34005b70:	4819      	ldr	r0, [pc, #100]	@ (34005bd8 <HAL_GPIO_Init+0x1e0>)
34005b72:	f7fc f893 	bl	34001c9c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34005b76:	e278      	b.n	3400606a <HAL_GPIO_Init+0x672>
34005b78:	56020000 	.word	0x56020000
34005b7c:	46020000 	.word	0x46020000
34005b80:	56020400 	.word	0x56020400
34005b84:	46020400 	.word	0x46020400
34005b88:	56020800 	.word	0x56020800
34005b8c:	46020800 	.word	0x46020800
34005b90:	56020c00 	.word	0x56020c00
34005b94:	46020c00 	.word	0x46020c00
34005b98:	56021000 	.word	0x56021000
34005b9c:	46021000 	.word	0x46021000
34005ba0:	56021400 	.word	0x56021400
34005ba4:	46021400 	.word	0x46021400
34005ba8:	56021800 	.word	0x56021800
34005bac:	46021800 	.word	0x46021800
34005bb0:	56021c00 	.word	0x56021c00
34005bb4:	46021c00 	.word	0x46021c00
34005bb8:	56023400 	.word	0x56023400
34005bbc:	46023400 	.word	0x46023400
34005bc0:	56023800 	.word	0x56023800
34005bc4:	46023800 	.word	0x46023800
34005bc8:	56023c00 	.word	0x56023c00
34005bcc:	46023c00 	.word	0x46023c00
34005bd0:	56024000 	.word	0x56024000
34005bd4:	46024000 	.word	0x46024000
34005bd8:	3401e554 	.word	0x3401e554
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34005bdc:	683b      	ldr	r3, [r7, #0]
34005bde:	681a      	ldr	r2, [r3, #0]
34005be0:	2101      	movs	r1, #1
34005be2:	697b      	ldr	r3, [r7, #20]
34005be4:	fa01 f303 	lsl.w	r3, r1, r3
34005be8:	4013      	ands	r3, r2
34005bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34005bec:	68fb      	ldr	r3, [r7, #12]
34005bee:	2b00      	cmp	r3, #0
34005bf0:	f000 8238 	beq.w	34006064 <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34005bf4:	683b      	ldr	r3, [r7, #0]
34005bf6:	685b      	ldr	r3, [r3, #4]
34005bf8:	f003 0303 	and.w	r3, r3, #3
34005bfc:	2b01      	cmp	r3, #1
34005bfe:	d005      	beq.n	34005c0c <HAL_GPIO_Init+0x214>
34005c00:	683b      	ldr	r3, [r7, #0]
34005c02:	685b      	ldr	r3, [r3, #4]
34005c04:	f003 0303 	and.w	r3, r3, #3
34005c08:	2b02      	cmp	r3, #2
34005c0a:	d144      	bne.n	34005c96 <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34005c0c:	683b      	ldr	r3, [r7, #0]
34005c0e:	68db      	ldr	r3, [r3, #12]
34005c10:	2b00      	cmp	r3, #0
34005c12:	d00f      	beq.n	34005c34 <HAL_GPIO_Init+0x23c>
34005c14:	683b      	ldr	r3, [r7, #0]
34005c16:	68db      	ldr	r3, [r3, #12]
34005c18:	2b01      	cmp	r3, #1
34005c1a:	d00b      	beq.n	34005c34 <HAL_GPIO_Init+0x23c>
34005c1c:	683b      	ldr	r3, [r7, #0]
34005c1e:	68db      	ldr	r3, [r3, #12]
34005c20:	2b02      	cmp	r3, #2
34005c22:	d007      	beq.n	34005c34 <HAL_GPIO_Init+0x23c>
34005c24:	683b      	ldr	r3, [r7, #0]
34005c26:	68db      	ldr	r3, [r3, #12]
34005c28:	2b03      	cmp	r3, #3
34005c2a:	d003      	beq.n	34005c34 <HAL_GPIO_Init+0x23c>
34005c2c:	21be      	movs	r1, #190	@ 0xbe
34005c2e:	4896      	ldr	r0, [pc, #600]	@ (34005e88 <HAL_GPIO_Init+0x490>)
34005c30:	f7fc f834 	bl	34001c9c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34005c34:	687b      	ldr	r3, [r7, #4]
34005c36:	689b      	ldr	r3, [r3, #8]
34005c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005c3a:	697b      	ldr	r3, [r7, #20]
34005c3c:	005b      	lsls	r3, r3, #1
34005c3e:	2203      	movs	r2, #3
34005c40:	fa02 f303 	lsl.w	r3, r2, r3
34005c44:	43db      	mvns	r3, r3
34005c46:	693a      	ldr	r2, [r7, #16]
34005c48:	4013      	ands	r3, r2
34005c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005c4c:	683b      	ldr	r3, [r7, #0]
34005c4e:	68da      	ldr	r2, [r3, #12]
34005c50:	697b      	ldr	r3, [r7, #20]
34005c52:	005b      	lsls	r3, r3, #1
34005c54:	fa02 f303 	lsl.w	r3, r2, r3
34005c58:	693a      	ldr	r2, [r7, #16]
34005c5a:	4313      	orrs	r3, r2
34005c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34005c5e:	687b      	ldr	r3, [r7, #4]
34005c60:	693a      	ldr	r2, [r7, #16]
34005c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34005c64:	687b      	ldr	r3, [r7, #4]
34005c66:	685b      	ldr	r3, [r3, #4]
34005c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34005c6a:	2201      	movs	r2, #1
34005c6c:	697b      	ldr	r3, [r7, #20]
34005c6e:	fa02 f303 	lsl.w	r3, r2, r3
34005c72:	43db      	mvns	r3, r3
34005c74:	693a      	ldr	r2, [r7, #16]
34005c76:	4013      	ands	r3, r2
34005c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34005c7a:	683b      	ldr	r3, [r7, #0]
34005c7c:	685b      	ldr	r3, [r3, #4]
34005c7e:	091b      	lsrs	r3, r3, #4
34005c80:	f003 0201 	and.w	r2, r3, #1
34005c84:	697b      	ldr	r3, [r7, #20]
34005c86:	fa02 f303 	lsl.w	r3, r2, r3
34005c8a:	693a      	ldr	r2, [r7, #16]
34005c8c:	4313      	orrs	r3, r2
34005c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34005c90:	687b      	ldr	r3, [r7, #4]
34005c92:	693a      	ldr	r2, [r7, #16]
34005c94:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005c96:	683b      	ldr	r3, [r7, #0]
34005c98:	685b      	ldr	r3, [r3, #4]
34005c9a:	f003 0303 	and.w	r3, r3, #3
34005c9e:	2b03      	cmp	r3, #3
34005ca0:	d109      	bne.n	34005cb6 <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005ca2:	683b      	ldr	r3, [r7, #0]
34005ca4:	685b      	ldr	r3, [r3, #4]
34005ca6:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34005caa:	2b03      	cmp	r3, #3
34005cac:	d12b      	bne.n	34005d06 <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34005cae:	683b      	ldr	r3, [r7, #0]
34005cb0:	689b      	ldr	r3, [r3, #8]
34005cb2:	2b01      	cmp	r3, #1
34005cb4:	d027      	beq.n	34005d06 <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34005cb6:	683b      	ldr	r3, [r7, #0]
34005cb8:	689b      	ldr	r3, [r3, #8]
34005cba:	2b00      	cmp	r3, #0
34005cbc:	d00b      	beq.n	34005cd6 <HAL_GPIO_Init+0x2de>
34005cbe:	683b      	ldr	r3, [r7, #0]
34005cc0:	689b      	ldr	r3, [r3, #8]
34005cc2:	2b01      	cmp	r3, #1
34005cc4:	d007      	beq.n	34005cd6 <HAL_GPIO_Init+0x2de>
34005cc6:	683b      	ldr	r3, [r7, #0]
34005cc8:	689b      	ldr	r3, [r3, #8]
34005cca:	2b02      	cmp	r3, #2
34005ccc:	d003      	beq.n	34005cd6 <HAL_GPIO_Init+0x2de>
34005cce:	21d1      	movs	r1, #209	@ 0xd1
34005cd0:	486d      	ldr	r0, [pc, #436]	@ (34005e88 <HAL_GPIO_Init+0x490>)
34005cd2:	f7fb ffe3 	bl	34001c9c <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34005cd6:	687b      	ldr	r3, [r7, #4]
34005cd8:	68db      	ldr	r3, [r3, #12]
34005cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34005cdc:	697b      	ldr	r3, [r7, #20]
34005cde:	005b      	lsls	r3, r3, #1
34005ce0:	2203      	movs	r2, #3
34005ce2:	fa02 f303 	lsl.w	r3, r2, r3
34005ce6:	43db      	mvns	r3, r3
34005ce8:	693a      	ldr	r2, [r7, #16]
34005cea:	4013      	ands	r3, r2
34005cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34005cee:	683b      	ldr	r3, [r7, #0]
34005cf0:	689a      	ldr	r2, [r3, #8]
34005cf2:	697b      	ldr	r3, [r7, #20]
34005cf4:	005b      	lsls	r3, r3, #1
34005cf6:	fa02 f303 	lsl.w	r3, r2, r3
34005cfa:	693a      	ldr	r2, [r7, #16]
34005cfc:	4313      	orrs	r3, r2
34005cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34005d00:	687b      	ldr	r3, [r7, #4]
34005d02:	693a      	ldr	r2, [r7, #16]
34005d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34005d06:	683b      	ldr	r3, [r7, #0]
34005d08:	685b      	ldr	r3, [r3, #4]
34005d0a:	f003 0303 	and.w	r3, r3, #3
34005d0e:	2b02      	cmp	r3, #2
34005d10:	f040 8090 	bne.w	34005e34 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34005d14:	687b      	ldr	r3, [r7, #4]
34005d16:	4a5d      	ldr	r2, [pc, #372]	@ (34005e8c <HAL_GPIO_Init+0x494>)
34005d18:	4293      	cmp	r3, r2
34005d1a:	d05f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d1c:	687b      	ldr	r3, [r7, #4]
34005d1e:	4a5c      	ldr	r2, [pc, #368]	@ (34005e90 <HAL_GPIO_Init+0x498>)
34005d20:	4293      	cmp	r3, r2
34005d22:	d05b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d24:	687b      	ldr	r3, [r7, #4]
34005d26:	4a5b      	ldr	r2, [pc, #364]	@ (34005e94 <HAL_GPIO_Init+0x49c>)
34005d28:	4293      	cmp	r3, r2
34005d2a:	d057      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d2c:	687b      	ldr	r3, [r7, #4]
34005d2e:	4a5a      	ldr	r2, [pc, #360]	@ (34005e98 <HAL_GPIO_Init+0x4a0>)
34005d30:	4293      	cmp	r3, r2
34005d32:	d053      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d34:	687b      	ldr	r3, [r7, #4]
34005d36:	4a59      	ldr	r2, [pc, #356]	@ (34005e9c <HAL_GPIO_Init+0x4a4>)
34005d38:	4293      	cmp	r3, r2
34005d3a:	d04f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d3c:	687b      	ldr	r3, [r7, #4]
34005d3e:	4a58      	ldr	r2, [pc, #352]	@ (34005ea0 <HAL_GPIO_Init+0x4a8>)
34005d40:	4293      	cmp	r3, r2
34005d42:	d04b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d44:	687b      	ldr	r3, [r7, #4]
34005d46:	4a57      	ldr	r2, [pc, #348]	@ (34005ea4 <HAL_GPIO_Init+0x4ac>)
34005d48:	4293      	cmp	r3, r2
34005d4a:	d047      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d4c:	687b      	ldr	r3, [r7, #4]
34005d4e:	4a56      	ldr	r2, [pc, #344]	@ (34005ea8 <HAL_GPIO_Init+0x4b0>)
34005d50:	4293      	cmp	r3, r2
34005d52:	d043      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d54:	687b      	ldr	r3, [r7, #4]
34005d56:	4a55      	ldr	r2, [pc, #340]	@ (34005eac <HAL_GPIO_Init+0x4b4>)
34005d58:	4293      	cmp	r3, r2
34005d5a:	d03f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d5c:	687b      	ldr	r3, [r7, #4]
34005d5e:	4a54      	ldr	r2, [pc, #336]	@ (34005eb0 <HAL_GPIO_Init+0x4b8>)
34005d60:	4293      	cmp	r3, r2
34005d62:	d03b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d64:	687b      	ldr	r3, [r7, #4]
34005d66:	4a53      	ldr	r2, [pc, #332]	@ (34005eb4 <HAL_GPIO_Init+0x4bc>)
34005d68:	4293      	cmp	r3, r2
34005d6a:	d037      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d6c:	687b      	ldr	r3, [r7, #4]
34005d6e:	4a52      	ldr	r2, [pc, #328]	@ (34005eb8 <HAL_GPIO_Init+0x4c0>)
34005d70:	4293      	cmp	r3, r2
34005d72:	d033      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d74:	687b      	ldr	r3, [r7, #4]
34005d76:	4a51      	ldr	r2, [pc, #324]	@ (34005ebc <HAL_GPIO_Init+0x4c4>)
34005d78:	4293      	cmp	r3, r2
34005d7a:	d02f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d7c:	687b      	ldr	r3, [r7, #4]
34005d7e:	4a50      	ldr	r2, [pc, #320]	@ (34005ec0 <HAL_GPIO_Init+0x4c8>)
34005d80:	4293      	cmp	r3, r2
34005d82:	d02b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d84:	687b      	ldr	r3, [r7, #4]
34005d86:	4a4f      	ldr	r2, [pc, #316]	@ (34005ec4 <HAL_GPIO_Init+0x4cc>)
34005d88:	4293      	cmp	r3, r2
34005d8a:	d027      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d8c:	687b      	ldr	r3, [r7, #4]
34005d8e:	4a4e      	ldr	r2, [pc, #312]	@ (34005ec8 <HAL_GPIO_Init+0x4d0>)
34005d90:	4293      	cmp	r3, r2
34005d92:	d023      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d94:	687b      	ldr	r3, [r7, #4]
34005d96:	4a4d      	ldr	r2, [pc, #308]	@ (34005ecc <HAL_GPIO_Init+0x4d4>)
34005d98:	4293      	cmp	r3, r2
34005d9a:	d01f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005d9c:	687b      	ldr	r3, [r7, #4]
34005d9e:	4a4c      	ldr	r2, [pc, #304]	@ (34005ed0 <HAL_GPIO_Init+0x4d8>)
34005da0:	4293      	cmp	r3, r2
34005da2:	d01b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005da4:	687b      	ldr	r3, [r7, #4]
34005da6:	4a4b      	ldr	r2, [pc, #300]	@ (34005ed4 <HAL_GPIO_Init+0x4dc>)
34005da8:	4293      	cmp	r3, r2
34005daa:	d017      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005dac:	687b      	ldr	r3, [r7, #4]
34005dae:	4a4a      	ldr	r2, [pc, #296]	@ (34005ed8 <HAL_GPIO_Init+0x4e0>)
34005db0:	4293      	cmp	r3, r2
34005db2:	d013      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005db4:	687b      	ldr	r3, [r7, #4]
34005db6:	4a49      	ldr	r2, [pc, #292]	@ (34005edc <HAL_GPIO_Init+0x4e4>)
34005db8:	4293      	cmp	r3, r2
34005dba:	d00f      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005dbc:	687b      	ldr	r3, [r7, #4]
34005dbe:	4a48      	ldr	r2, [pc, #288]	@ (34005ee0 <HAL_GPIO_Init+0x4e8>)
34005dc0:	4293      	cmp	r3, r2
34005dc2:	d00b      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005dc4:	687b      	ldr	r3, [r7, #4]
34005dc6:	4a47      	ldr	r2, [pc, #284]	@ (34005ee4 <HAL_GPIO_Init+0x4ec>)
34005dc8:	4293      	cmp	r3, r2
34005dca:	d007      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005dcc:	687b      	ldr	r3, [r7, #4]
34005dce:	4a46      	ldr	r2, [pc, #280]	@ (34005ee8 <HAL_GPIO_Init+0x4f0>)
34005dd0:	4293      	cmp	r3, r2
34005dd2:	d003      	beq.n	34005ddc <HAL_GPIO_Init+0x3e4>
34005dd4:	21de      	movs	r1, #222	@ 0xde
34005dd6:	482c      	ldr	r0, [pc, #176]	@ (34005e88 <HAL_GPIO_Init+0x490>)
34005dd8:	f7fb ff60 	bl	34001c9c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34005ddc:	683b      	ldr	r3, [r7, #0]
34005dde:	691b      	ldr	r3, [r3, #16]
34005de0:	2b0f      	cmp	r3, #15
34005de2:	d903      	bls.n	34005dec <HAL_GPIO_Init+0x3f4>
34005de4:	21df      	movs	r1, #223	@ 0xdf
34005de6:	4828      	ldr	r0, [pc, #160]	@ (34005e88 <HAL_GPIO_Init+0x490>)
34005de8:	f7fb ff58 	bl	34001c9c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34005dec:	697b      	ldr	r3, [r7, #20]
34005dee:	08da      	lsrs	r2, r3, #3
34005df0:	687b      	ldr	r3, [r7, #4]
34005df2:	3208      	adds	r2, #8
34005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34005df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005dfa:	697b      	ldr	r3, [r7, #20]
34005dfc:	f003 0307 	and.w	r3, r3, #7
34005e00:	009b      	lsls	r3, r3, #2
34005e02:	220f      	movs	r2, #15
34005e04:	fa02 f303 	lsl.w	r3, r2, r3
34005e08:	43db      	mvns	r3, r3
34005e0a:	693a      	ldr	r2, [r7, #16]
34005e0c:	4013      	ands	r3, r2
34005e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005e10:	683b      	ldr	r3, [r7, #0]
34005e12:	691a      	ldr	r2, [r3, #16]
34005e14:	697b      	ldr	r3, [r7, #20]
34005e16:	f003 0307 	and.w	r3, r3, #7
34005e1a:	009b      	lsls	r3, r3, #2
34005e1c:	fa02 f303 	lsl.w	r3, r2, r3
34005e20:	693a      	ldr	r2, [r7, #16]
34005e22:	4313      	orrs	r3, r2
34005e24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34005e26:	697b      	ldr	r3, [r7, #20]
34005e28:	08da      	lsrs	r2, r3, #3
34005e2a:	687b      	ldr	r3, [r7, #4]
34005e2c:	3208      	adds	r2, #8
34005e2e:	6939      	ldr	r1, [r7, #16]
34005e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34005e34:	687b      	ldr	r3, [r7, #4]
34005e36:	681b      	ldr	r3, [r3, #0]
34005e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34005e3a:	697b      	ldr	r3, [r7, #20]
34005e3c:	005b      	lsls	r3, r3, #1
34005e3e:	2203      	movs	r2, #3
34005e40:	fa02 f303 	lsl.w	r3, r2, r3
34005e44:	43db      	mvns	r3, r3
34005e46:	693a      	ldr	r2, [r7, #16]
34005e48:	4013      	ands	r3, r2
34005e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34005e4c:	683b      	ldr	r3, [r7, #0]
34005e4e:	685b      	ldr	r3, [r3, #4]
34005e50:	f003 0203 	and.w	r2, r3, #3
34005e54:	697b      	ldr	r3, [r7, #20]
34005e56:	005b      	lsls	r3, r3, #1
34005e58:	fa02 f303 	lsl.w	r3, r2, r3
34005e5c:	693a      	ldr	r2, [r7, #16]
34005e5e:	4313      	orrs	r3, r2
34005e60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34005e62:	687b      	ldr	r3, [r7, #4]
34005e64:	693a      	ldr	r2, [r7, #16]
34005e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34005e68:	683b      	ldr	r3, [r7, #0]
34005e6a:	685b      	ldr	r3, [r3, #4]
34005e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34005e70:	2b00      	cmp	r3, #0
34005e72:	f000 80f7 	beq.w	34006064 <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34005e76:	4a1d      	ldr	r2, [pc, #116]	@ (34005eec <HAL_GPIO_Init+0x4f4>)
34005e78:	697b      	ldr	r3, [r7, #20]
34005e7a:	089b      	lsrs	r3, r3, #2
34005e7c:	3318      	adds	r3, #24
34005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34005e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005e84:	697b      	ldr	r3, [r7, #20]
34005e86:	e033      	b.n	34005ef0 <HAL_GPIO_Init+0x4f8>
34005e88:	3401e554 	.word	0x3401e554
34005e8c:	56020000 	.word	0x56020000
34005e90:	46020000 	.word	0x46020000
34005e94:	56020400 	.word	0x56020400
34005e98:	46020400 	.word	0x46020400
34005e9c:	56020800 	.word	0x56020800
34005ea0:	46020800 	.word	0x46020800
34005ea4:	56020c00 	.word	0x56020c00
34005ea8:	46020c00 	.word	0x46020c00
34005eac:	56021000 	.word	0x56021000
34005eb0:	46021000 	.word	0x46021000
34005eb4:	56021400 	.word	0x56021400
34005eb8:	46021400 	.word	0x46021400
34005ebc:	56021800 	.word	0x56021800
34005ec0:	46021800 	.word	0x46021800
34005ec4:	56021c00 	.word	0x56021c00
34005ec8:	46021c00 	.word	0x46021c00
34005ecc:	56023400 	.word	0x56023400
34005ed0:	46023400 	.word	0x46023400
34005ed4:	56023800 	.word	0x56023800
34005ed8:	46023800 	.word	0x46023800
34005edc:	56023c00 	.word	0x56023c00
34005ee0:	46023c00 	.word	0x46023c00
34005ee4:	56024000 	.word	0x56024000
34005ee8:	46024000 	.word	0x46024000
34005eec:	56025000 	.word	0x56025000
34005ef0:	f003 0303 	and.w	r3, r3, #3
34005ef4:	00db      	lsls	r3, r3, #3
34005ef6:	220f      	movs	r2, #15
34005ef8:	fa02 f303 	lsl.w	r3, r2, r3
34005efc:	43db      	mvns	r3, r3
34005efe:	693a      	ldr	r2, [r7, #16]
34005f00:	4013      	ands	r3, r2
34005f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005f04:	687b      	ldr	r3, [r7, #4]
34005f06:	4a5f      	ldr	r2, [pc, #380]	@ (34006084 <HAL_GPIO_Init+0x68c>)
34005f08:	4293      	cmp	r3, r2
34005f0a:	d043      	beq.n	34005f94 <HAL_GPIO_Init+0x59c>
34005f0c:	687b      	ldr	r3, [r7, #4]
34005f0e:	4a5e      	ldr	r2, [pc, #376]	@ (34006088 <HAL_GPIO_Init+0x690>)
34005f10:	4293      	cmp	r3, r2
34005f12:	d03d      	beq.n	34005f90 <HAL_GPIO_Init+0x598>
34005f14:	687b      	ldr	r3, [r7, #4]
34005f16:	4a5d      	ldr	r2, [pc, #372]	@ (3400608c <HAL_GPIO_Init+0x694>)
34005f18:	4293      	cmp	r3, r2
34005f1a:	d037      	beq.n	34005f8c <HAL_GPIO_Init+0x594>
34005f1c:	687b      	ldr	r3, [r7, #4]
34005f1e:	4a5c      	ldr	r2, [pc, #368]	@ (34006090 <HAL_GPIO_Init+0x698>)
34005f20:	4293      	cmp	r3, r2
34005f22:	d031      	beq.n	34005f88 <HAL_GPIO_Init+0x590>
34005f24:	687b      	ldr	r3, [r7, #4]
34005f26:	4a5b      	ldr	r2, [pc, #364]	@ (34006094 <HAL_GPIO_Init+0x69c>)
34005f28:	4293      	cmp	r3, r2
34005f2a:	d02b      	beq.n	34005f84 <HAL_GPIO_Init+0x58c>
34005f2c:	687b      	ldr	r3, [r7, #4]
34005f2e:	4a5a      	ldr	r2, [pc, #360]	@ (34006098 <HAL_GPIO_Init+0x6a0>)
34005f30:	4293      	cmp	r3, r2
34005f32:	d025      	beq.n	34005f80 <HAL_GPIO_Init+0x588>
34005f34:	687b      	ldr	r3, [r7, #4]
34005f36:	4a59      	ldr	r2, [pc, #356]	@ (3400609c <HAL_GPIO_Init+0x6a4>)
34005f38:	4293      	cmp	r3, r2
34005f3a:	d01f      	beq.n	34005f7c <HAL_GPIO_Init+0x584>
34005f3c:	687b      	ldr	r3, [r7, #4]
34005f3e:	4a58      	ldr	r2, [pc, #352]	@ (340060a0 <HAL_GPIO_Init+0x6a8>)
34005f40:	4293      	cmp	r3, r2
34005f42:	d019      	beq.n	34005f78 <HAL_GPIO_Init+0x580>
34005f44:	687b      	ldr	r3, [r7, #4]
34005f46:	4a57      	ldr	r2, [pc, #348]	@ (340060a4 <HAL_GPIO_Init+0x6ac>)
34005f48:	4293      	cmp	r3, r2
34005f4a:	d013      	beq.n	34005f74 <HAL_GPIO_Init+0x57c>
34005f4c:	687b      	ldr	r3, [r7, #4]
34005f4e:	4a56      	ldr	r2, [pc, #344]	@ (340060a8 <HAL_GPIO_Init+0x6b0>)
34005f50:	4293      	cmp	r3, r2
34005f52:	d00d      	beq.n	34005f70 <HAL_GPIO_Init+0x578>
34005f54:	687b      	ldr	r3, [r7, #4]
34005f56:	4a55      	ldr	r2, [pc, #340]	@ (340060ac <HAL_GPIO_Init+0x6b4>)
34005f58:	4293      	cmp	r3, r2
34005f5a:	d007      	beq.n	34005f6c <HAL_GPIO_Init+0x574>
34005f5c:	687b      	ldr	r3, [r7, #4]
34005f5e:	4a54      	ldr	r2, [pc, #336]	@ (340060b0 <HAL_GPIO_Init+0x6b8>)
34005f60:	4293      	cmp	r3, r2
34005f62:	d101      	bne.n	34005f68 <HAL_GPIO_Init+0x570>
34005f64:	230b      	movs	r3, #11
34005f66:	e016      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f68:	2310      	movs	r3, #16
34005f6a:	e014      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f6c:	230a      	movs	r3, #10
34005f6e:	e012      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f70:	2309      	movs	r3, #9
34005f72:	e010      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f74:	2308      	movs	r3, #8
34005f76:	e00e      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f78:	2307      	movs	r3, #7
34005f7a:	e00c      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f7c:	2306      	movs	r3, #6
34005f7e:	e00a      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f80:	2305      	movs	r3, #5
34005f82:	e008      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f84:	2304      	movs	r3, #4
34005f86:	e006      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f88:	2303      	movs	r3, #3
34005f8a:	e004      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f8c:	2302      	movs	r3, #2
34005f8e:	e002      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f90:	2301      	movs	r3, #1
34005f92:	e000      	b.n	34005f96 <HAL_GPIO_Init+0x59e>
34005f94:	2300      	movs	r3, #0
34005f96:	697a      	ldr	r2, [r7, #20]
34005f98:	f002 0203 	and.w	r2, r2, #3
34005f9c:	00d2      	lsls	r2, r2, #3
34005f9e:	4093      	lsls	r3, r2
34005fa0:	693a      	ldr	r2, [r7, #16]
34005fa2:	4313      	orrs	r3, r2
34005fa4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34005fa6:	4943      	ldr	r1, [pc, #268]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34005fa8:	697b      	ldr	r3, [r7, #20]
34005faa:	089b      	lsrs	r3, r3, #2
34005fac:	3318      	adds	r3, #24
34005fae:	693a      	ldr	r2, [r7, #16]
34005fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34005fb4:	4b3f      	ldr	r3, [pc, #252]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34005fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005fbc:	68fb      	ldr	r3, [r7, #12]
34005fbe:	43db      	mvns	r3, r3
34005fc0:	693a      	ldr	r2, [r7, #16]
34005fc2:	4013      	ands	r3, r2
34005fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34005fc6:	683b      	ldr	r3, [r7, #0]
34005fc8:	685b      	ldr	r3, [r3, #4]
34005fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34005fce:	2b00      	cmp	r3, #0
34005fd0:	d003      	beq.n	34005fda <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
34005fd2:	693a      	ldr	r2, [r7, #16]
34005fd4:	68fb      	ldr	r3, [r7, #12]
34005fd6:	4313      	orrs	r3, r2
34005fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34005fda:	4a36      	ldr	r2, [pc, #216]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34005fdc:	693b      	ldr	r3, [r7, #16]
34005fde:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34005fe2:	4b34      	ldr	r3, [pc, #208]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34005fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005fea:	68fb      	ldr	r3, [r7, #12]
34005fec:	43db      	mvns	r3, r3
34005fee:	693a      	ldr	r2, [r7, #16]
34005ff0:	4013      	ands	r3, r2
34005ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34005ff4:	683b      	ldr	r3, [r7, #0]
34005ff6:	685b      	ldr	r3, [r3, #4]
34005ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34005ffc:	2b00      	cmp	r3, #0
34005ffe:	d003      	beq.n	34006008 <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
34006000:	693a      	ldr	r2, [r7, #16]
34006002:	68fb      	ldr	r3, [r7, #12]
34006004:	4313      	orrs	r3, r2
34006006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34006008:	4a2a      	ldr	r2, [pc, #168]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
3400600a:	693b      	ldr	r3, [r7, #16]
3400600c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34006010:	4b28      	ldr	r3, [pc, #160]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34006012:	681b      	ldr	r3, [r3, #0]
34006014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34006016:	68fb      	ldr	r3, [r7, #12]
34006018:	43db      	mvns	r3, r3
3400601a:	693a      	ldr	r2, [r7, #16]
3400601c:	4013      	ands	r3, r2
3400601e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34006020:	683b      	ldr	r3, [r7, #0]
34006022:	685b      	ldr	r3, [r3, #4]
34006024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34006028:	2b00      	cmp	r3, #0
3400602a:	d003      	beq.n	34006034 <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
3400602c:	693a      	ldr	r2, [r7, #16]
3400602e:	68fb      	ldr	r3, [r7, #12]
34006030:	4313      	orrs	r3, r2
34006032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34006034:	4a1f      	ldr	r2, [pc, #124]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34006036:	693b      	ldr	r3, [r7, #16]
34006038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
3400603a:	4b1e      	ldr	r3, [pc, #120]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
3400603c:	685b      	ldr	r3, [r3, #4]
3400603e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34006040:	68fb      	ldr	r3, [r7, #12]
34006042:	43db      	mvns	r3, r3
34006044:	693a      	ldr	r2, [r7, #16]
34006046:	4013      	ands	r3, r2
34006048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
3400604a:	683b      	ldr	r3, [r7, #0]
3400604c:	685b      	ldr	r3, [r3, #4]
3400604e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34006052:	2b00      	cmp	r3, #0
34006054:	d003      	beq.n	3400605e <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
34006056:	693a      	ldr	r2, [r7, #16]
34006058:	68fb      	ldr	r3, [r7, #12]
3400605a:	4313      	orrs	r3, r2
3400605c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
3400605e:	4a15      	ldr	r2, [pc, #84]	@ (340060b4 <HAL_GPIO_Init+0x6bc>)
34006060:	693b      	ldr	r3, [r7, #16]
34006062:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34006064:	697b      	ldr	r3, [r7, #20]
34006066:	3301      	adds	r3, #1
34006068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3400606a:	683b      	ldr	r3, [r7, #0]
3400606c:	681a      	ldr	r2, [r3, #0]
3400606e:	697b      	ldr	r3, [r7, #20]
34006070:	fa22 f303 	lsr.w	r3, r2, r3
34006074:	2b00      	cmp	r3, #0
34006076:	f47f adb1 	bne.w	34005bdc <HAL_GPIO_Init+0x1e4>
  }
}
3400607a:	bf00      	nop
3400607c:	bf00      	nop
3400607e:	3718      	adds	r7, #24
34006080:	46bd      	mov	sp, r7
34006082:	bd80      	pop	{r7, pc}
34006084:	56020000 	.word	0x56020000
34006088:	56020400 	.word	0x56020400
3400608c:	56020800 	.word	0x56020800
34006090:	56020c00 	.word	0x56020c00
34006094:	56021000 	.word	0x56021000
34006098:	56021400 	.word	0x56021400
3400609c:	56021800 	.word	0x56021800
340060a0:	56021c00 	.word	0x56021c00
340060a4:	56023400 	.word	0x56023400
340060a8:	56023800 	.word	0x56023800
340060ac:	56023c00 	.word	0x56023c00
340060b0:	56024000 	.word	0x56024000
340060b4:	56025000 	.word	0x56025000

340060b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340060b8:	b580      	push	{r7, lr}
340060ba:	b082      	sub	sp, #8
340060bc:	af00      	add	r7, sp, #0
340060be:	6078      	str	r0, [r7, #4]
340060c0:	460b      	mov	r3, r1
340060c2:	807b      	strh	r3, [r7, #2]
340060c4:	4613      	mov	r3, r2
340060c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340060c8:	887b      	ldrh	r3, [r7, #2]
340060ca:	2b00      	cmp	r3, #0
340060cc:	d104      	bne.n	340060d8 <HAL_GPIO_WritePin+0x20>
340060ce:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
340060d2:	480e      	ldr	r0, [pc, #56]	@ (3400610c <HAL_GPIO_WritePin+0x54>)
340060d4:	f7fb fde2 	bl	34001c9c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
340060d8:	787b      	ldrb	r3, [r7, #1]
340060da:	2b00      	cmp	r3, #0
340060dc:	d007      	beq.n	340060ee <HAL_GPIO_WritePin+0x36>
340060de:	787b      	ldrb	r3, [r7, #1]
340060e0:	2b01      	cmp	r3, #1
340060e2:	d004      	beq.n	340060ee <HAL_GPIO_WritePin+0x36>
340060e4:	f240 11a1 	movw	r1, #417	@ 0x1a1
340060e8:	4808      	ldr	r0, [pc, #32]	@ (3400610c <HAL_GPIO_WritePin+0x54>)
340060ea:	f7fb fdd7 	bl	34001c9c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
340060ee:	787b      	ldrb	r3, [r7, #1]
340060f0:	2b00      	cmp	r3, #0
340060f2:	d003      	beq.n	340060fc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
340060f4:	887a      	ldrh	r2, [r7, #2]
340060f6:	687b      	ldr	r3, [r7, #4]
340060f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
340060fa:	e002      	b.n	34006102 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
340060fc:	887a      	ldrh	r2, [r7, #2]
340060fe:	687b      	ldr	r3, [r7, #4]
34006100:	629a      	str	r2, [r3, #40]	@ 0x28
}
34006102:	bf00      	nop
34006104:	3708      	adds	r7, #8
34006106:	46bd      	mov	sp, r7
34006108:	bd80      	pop	{r7, pc}
3400610a:	bf00      	nop
3400610c:	3401e554 	.word	0x3401e554

34006110 <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
34006110:	b580      	push	{r7, lr}
34006112:	b082      	sub	sp, #8
34006114:	af00      	add	r7, sp, #0
34006116:	6078      	str	r0, [r7, #4]
34006118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
3400611a:	687b      	ldr	r3, [r7, #4]
3400611c:	2b00      	cmp	r3, #0
3400611e:	d010      	beq.n	34006142 <HAL_PWREx_ConfigVddIORange+0x32>
34006120:	687b      	ldr	r3, [r7, #4]
34006122:	2b01      	cmp	r3, #1
34006124:	d00d      	beq.n	34006142 <HAL_PWREx_ConfigVddIORange+0x32>
34006126:	687b      	ldr	r3, [r7, #4]
34006128:	2b02      	cmp	r3, #2
3400612a:	d00a      	beq.n	34006142 <HAL_PWREx_ConfigVddIORange+0x32>
3400612c:	687b      	ldr	r3, [r7, #4]
3400612e:	2b03      	cmp	r3, #3
34006130:	d007      	beq.n	34006142 <HAL_PWREx_ConfigVddIORange+0x32>
34006132:	687b      	ldr	r3, [r7, #4]
34006134:	2b04      	cmp	r3, #4
34006136:	d004      	beq.n	34006142 <HAL_PWREx_ConfigVddIORange+0x32>
34006138:	f240 316a 	movw	r1, #874	@ 0x36a
3400613c:	482a      	ldr	r0, [pc, #168]	@ (340061e8 <HAL_PWREx_ConfigVddIORange+0xd8>)
3400613e:	f7fb fdad 	bl	34001c9c <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34006142:	683b      	ldr	r3, [r7, #0]
34006144:	2b00      	cmp	r3, #0
34006146:	d007      	beq.n	34006158 <HAL_PWREx_ConfigVddIORange+0x48>
34006148:	683b      	ldr	r3, [r7, #0]
3400614a:	2b01      	cmp	r3, #1
3400614c:	d004      	beq.n	34006158 <HAL_PWREx_ConfigVddIORange+0x48>
3400614e:	f240 316b 	movw	r1, #875	@ 0x36b
34006152:	4825      	ldr	r0, [pc, #148]	@ (340061e8 <HAL_PWREx_ConfigVddIORange+0xd8>)
34006154:	f7fb fda2 	bl	34001c9c <assert_failed>

  switch (VddIOPort)
34006158:	687b      	ldr	r3, [r7, #4]
3400615a:	2b04      	cmp	r3, #4
3400615c:	d83e      	bhi.n	340061dc <HAL_PWREx_ConfigVddIORange+0xcc>
3400615e:	a201      	add	r2, pc, #4	@ (adr r2, 34006164 <HAL_PWREx_ConfigVddIORange+0x54>)
34006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34006164:	34006179 	.word	0x34006179
34006168:	3400618d 	.word	0x3400618d
3400616c:	340061a1 	.word	0x340061a1
34006170:	340061b5 	.word	0x340061b5
34006174:	340061c9 	.word	0x340061c9
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34006178:	4b1c      	ldr	r3, [pc, #112]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
3400617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400617c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34006180:	683b      	ldr	r3, [r7, #0]
34006182:	061b      	lsls	r3, r3, #24
34006184:	4919      	ldr	r1, [pc, #100]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
34006186:	4313      	orrs	r3, r2
34006188:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
3400618a:	e028      	b.n	340061de <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
3400618c:	4b17      	ldr	r3, [pc, #92]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
3400618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34006190:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34006194:	683b      	ldr	r3, [r7, #0]
34006196:	065b      	lsls	r3, r3, #25
34006198:	4914      	ldr	r1, [pc, #80]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
3400619a:	4313      	orrs	r3, r2
3400619c:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
3400619e:	e01e      	b.n	340061de <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
340061a0:	4b12      	ldr	r3, [pc, #72]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340061a4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
340061a8:	683b      	ldr	r3, [r7, #0]
340061aa:	069b      	lsls	r3, r3, #26
340061ac:	490f      	ldr	r1, [pc, #60]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061ae:	4313      	orrs	r3, r2
340061b0:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
340061b2:	e014      	b.n	340061de <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
340061b4:	4b0d      	ldr	r3, [pc, #52]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340061b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340061bc:	683b      	ldr	r3, [r7, #0]
340061be:	061b      	lsls	r3, r3, #24
340061c0:	490a      	ldr	r1, [pc, #40]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061c2:	4313      	orrs	r3, r2
340061c4:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
340061c6:	e00a      	b.n	340061de <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
340061c8:	4b08      	ldr	r3, [pc, #32]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340061cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340061d0:	683b      	ldr	r3, [r7, #0]
340061d2:	061b      	lsls	r3, r3, #24
340061d4:	4905      	ldr	r1, [pc, #20]	@ (340061ec <HAL_PWREx_ConfigVddIORange+0xdc>)
340061d6:	4313      	orrs	r3, r2
340061d8:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
340061da:	e000      	b.n	340061de <HAL_PWREx_ConfigVddIORange+0xce>

    default:
      break;
340061dc:	bf00      	nop
  }
}
340061de:	bf00      	nop
340061e0:	3708      	adds	r7, #8
340061e2:	46bd      	mov	sp, r7
340061e4:	bd80      	pop	{r7, pc}
340061e6:	bf00      	nop
340061e8:	3401e600 	.word	0x3401e600
340061ec:	56024800 	.word	0x56024800

340061f0 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
340061f0:	b480      	push	{r7}
340061f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
340061f4:	4b05      	ldr	r3, [pc, #20]	@ (3400620c <HAL_PWREx_EnableVddIO3+0x1c>)
340061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340061f8:	4a04      	ldr	r2, [pc, #16]	@ (3400620c <HAL_PWREx_EnableVddIO3+0x1c>)
340061fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340061fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34006200:	bf00      	nop
34006202:	46bd      	mov	sp, r7
34006204:	f85d 7b04 	ldr.w	r7, [sp], #4
34006208:	4770      	bx	lr
3400620a:	bf00      	nop
3400620c:	56024800 	.word	0x56024800

34006210 <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34006210:	b580      	push	{r7, lr}
34006212:	b082      	sub	sp, #8
34006214:	af00      	add	r7, sp, #0
34006216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34006218:	687b      	ldr	r3, [r7, #4]
3400621a:	681b      	ldr	r3, [r3, #0]
3400621c:	4a20      	ldr	r2, [pc, #128]	@ (340062a0 <HAL_RAMCFG_EnableAXISRAM+0x90>)
3400621e:	4293      	cmp	r3, r2
34006220:	d031      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006222:	687b      	ldr	r3, [r7, #4]
34006224:	681b      	ldr	r3, [r3, #0]
34006226:	4a1f      	ldr	r2, [pc, #124]	@ (340062a4 <HAL_RAMCFG_EnableAXISRAM+0x94>)
34006228:	4293      	cmp	r3, r2
3400622a:	d02c      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400622c:	687b      	ldr	r3, [r7, #4]
3400622e:	681b      	ldr	r3, [r3, #0]
34006230:	4a1d      	ldr	r2, [pc, #116]	@ (340062a8 <HAL_RAMCFG_EnableAXISRAM+0x98>)
34006232:	4293      	cmp	r3, r2
34006234:	d027      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006236:	687b      	ldr	r3, [r7, #4]
34006238:	681b      	ldr	r3, [r3, #0]
3400623a:	4a1c      	ldr	r2, [pc, #112]	@ (340062ac <HAL_RAMCFG_EnableAXISRAM+0x9c>)
3400623c:	4293      	cmp	r3, r2
3400623e:	d022      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006240:	687b      	ldr	r3, [r7, #4]
34006242:	681b      	ldr	r3, [r3, #0]
34006244:	4a1a      	ldr	r2, [pc, #104]	@ (340062b0 <HAL_RAMCFG_EnableAXISRAM+0xa0>)
34006246:	4293      	cmp	r3, r2
34006248:	d01d      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400624a:	687b      	ldr	r3, [r7, #4]
3400624c:	681b      	ldr	r3, [r3, #0]
3400624e:	4a19      	ldr	r2, [pc, #100]	@ (340062b4 <HAL_RAMCFG_EnableAXISRAM+0xa4>)
34006250:	4293      	cmp	r3, r2
34006252:	d018      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006254:	687b      	ldr	r3, [r7, #4]
34006256:	681b      	ldr	r3, [r3, #0]
34006258:	4a17      	ldr	r2, [pc, #92]	@ (340062b8 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
3400625a:	4293      	cmp	r3, r2
3400625c:	d013      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400625e:	687b      	ldr	r3, [r7, #4]
34006260:	681b      	ldr	r3, [r3, #0]
34006262:	4a16      	ldr	r2, [pc, #88]	@ (340062bc <HAL_RAMCFG_EnableAXISRAM+0xac>)
34006264:	4293      	cmp	r3, r2
34006266:	d00e      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006268:	687b      	ldr	r3, [r7, #4]
3400626a:	681b      	ldr	r3, [r3, #0]
3400626c:	4a14      	ldr	r2, [pc, #80]	@ (340062c0 <HAL_RAMCFG_EnableAXISRAM+0xb0>)
3400626e:	4293      	cmp	r3, r2
34006270:	d009      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
34006272:	687b      	ldr	r3, [r7, #4]
34006274:	681b      	ldr	r3, [r3, #0]
34006276:	4a13      	ldr	r2, [pc, #76]	@ (340062c4 <HAL_RAMCFG_EnableAXISRAM+0xb4>)
34006278:	4293      	cmp	r3, r2
3400627a:	d004      	beq.n	34006286 <HAL_RAMCFG_EnableAXISRAM+0x76>
3400627c:	f240 4107 	movw	r1, #1031	@ 0x407
34006280:	4811      	ldr	r0, [pc, #68]	@ (340062c8 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
34006282:	f7fb fd0b 	bl	34001c9c <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34006286:	687b      	ldr	r3, [r7, #4]
34006288:	681b      	ldr	r3, [r3, #0]
3400628a:	681a      	ldr	r2, [r3, #0]
3400628c:	687b      	ldr	r3, [r7, #4]
3400628e:	681b      	ldr	r3, [r3, #0]
34006290:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
34006294:	601a      	str	r2, [r3, #0]
}
34006296:	bf00      	nop
34006298:	3708      	adds	r7, #8
3400629a:	46bd      	mov	sp, r7
3400629c:	bd80      	pop	{r7, pc}
3400629e:	bf00      	nop
340062a0:	52023080 	.word	0x52023080
340062a4:	42023080 	.word	0x42023080
340062a8:	52023100 	.word	0x52023100
340062ac:	42023100 	.word	0x42023100
340062b0:	52023180 	.word	0x52023180
340062b4:	42023180 	.word	0x42023180
340062b8:	52023200 	.word	0x52023200
340062bc:	42023200 	.word	0x42023200
340062c0:	52023280 	.word	0x52023280
340062c4:	42023280 	.word	0x42023280
340062c8:	3401e6ac 	.word	0x3401e6ac

340062cc <LL_RCC_HSE_IsReady>:
{
340062cc:	b480      	push	{r7}
340062ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340062d0:	4b06      	ldr	r3, [pc, #24]	@ (340062ec <LL_RCC_HSE_IsReady+0x20>)
340062d2:	685b      	ldr	r3, [r3, #4]
340062d4:	f003 0310 	and.w	r3, r3, #16
340062d8:	2b00      	cmp	r3, #0
340062da:	d001      	beq.n	340062e0 <LL_RCC_HSE_IsReady+0x14>
340062dc:	2301      	movs	r3, #1
340062de:	e000      	b.n	340062e2 <LL_RCC_HSE_IsReady+0x16>
340062e0:	2300      	movs	r3, #0
}
340062e2:	4618      	mov	r0, r3
340062e4:	46bd      	mov	sp, r7
340062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340062ea:	4770      	bx	lr
340062ec:	56028000 	.word	0x56028000

340062f0 <LL_RCC_HSI_Enable>:
{
340062f0:	b480      	push	{r7}
340062f2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
340062f4:	4b04      	ldr	r3, [pc, #16]	@ (34006308 <LL_RCC_HSI_Enable+0x18>)
340062f6:	2208      	movs	r2, #8
340062f8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340062fc:	bf00      	nop
340062fe:	46bd      	mov	sp, r7
34006300:	f85d 7b04 	ldr.w	r7, [sp], #4
34006304:	4770      	bx	lr
34006306:	bf00      	nop
34006308:	56028000 	.word	0x56028000

3400630c <LL_RCC_HSI_Disable>:
{
3400630c:	b480      	push	{r7}
3400630e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34006310:	4b05      	ldr	r3, [pc, #20]	@ (34006328 <LL_RCC_HSI_Disable+0x1c>)
34006312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006316:	461a      	mov	r2, r3
34006318:	2308      	movs	r3, #8
3400631a:	6013      	str	r3, [r2, #0]
}
3400631c:	bf00      	nop
3400631e:	46bd      	mov	sp, r7
34006320:	f85d 7b04 	ldr.w	r7, [sp], #4
34006324:	4770      	bx	lr
34006326:	bf00      	nop
34006328:	56028000 	.word	0x56028000

3400632c <LL_RCC_HSI_IsReady>:
{
3400632c:	b480      	push	{r7}
3400632e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34006330:	4b06      	ldr	r3, [pc, #24]	@ (3400634c <LL_RCC_HSI_IsReady+0x20>)
34006332:	685b      	ldr	r3, [r3, #4]
34006334:	f003 0308 	and.w	r3, r3, #8
34006338:	2b00      	cmp	r3, #0
3400633a:	d001      	beq.n	34006340 <LL_RCC_HSI_IsReady+0x14>
3400633c:	2301      	movs	r3, #1
3400633e:	e000      	b.n	34006342 <LL_RCC_HSI_IsReady+0x16>
34006340:	2300      	movs	r3, #0
}
34006342:	4618      	mov	r0, r3
34006344:	46bd      	mov	sp, r7
34006346:	f85d 7b04 	ldr.w	r7, [sp], #4
3400634a:	4770      	bx	lr
3400634c:	56028000 	.word	0x56028000

34006350 <LL_RCC_HSI_SetDivider>:
{
34006350:	b480      	push	{r7}
34006352:	b083      	sub	sp, #12
34006354:	af00      	add	r7, sp, #0
34006356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34006358:	4b06      	ldr	r3, [pc, #24]	@ (34006374 <LL_RCC_HSI_SetDivider+0x24>)
3400635a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400635c:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34006360:	4904      	ldr	r1, [pc, #16]	@ (34006374 <LL_RCC_HSI_SetDivider+0x24>)
34006362:	687b      	ldr	r3, [r7, #4]
34006364:	4313      	orrs	r3, r2
34006366:	648b      	str	r3, [r1, #72]	@ 0x48
}
34006368:	bf00      	nop
3400636a:	370c      	adds	r7, #12
3400636c:	46bd      	mov	sp, r7
3400636e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006372:	4770      	bx	lr
34006374:	56028000 	.word	0x56028000

34006378 <LL_RCC_HSI_GetDivider>:
{
34006378:	b480      	push	{r7}
3400637a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3400637c:	4b04      	ldr	r3, [pc, #16]	@ (34006390 <LL_RCC_HSI_GetDivider+0x18>)
3400637e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34006380:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34006384:	4618      	mov	r0, r3
34006386:	46bd      	mov	sp, r7
34006388:	f85d 7b04 	ldr.w	r7, [sp], #4
3400638c:	4770      	bx	lr
3400638e:	bf00      	nop
34006390:	56028000 	.word	0x56028000

34006394 <LL_RCC_HSI_SetCalibTrimming>:
{
34006394:	b480      	push	{r7}
34006396:	b083      	sub	sp, #12
34006398:	af00      	add	r7, sp, #0
3400639a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
3400639c:	4b07      	ldr	r3, [pc, #28]	@ (340063bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
3400639e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340063a0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
340063a4:	687b      	ldr	r3, [r7, #4]
340063a6:	041b      	lsls	r3, r3, #16
340063a8:	4904      	ldr	r1, [pc, #16]	@ (340063bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
340063aa:	4313      	orrs	r3, r2
340063ac:	648b      	str	r3, [r1, #72]	@ 0x48
}
340063ae:	bf00      	nop
340063b0:	370c      	adds	r7, #12
340063b2:	46bd      	mov	sp, r7
340063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
340063b8:	4770      	bx	lr
340063ba:	bf00      	nop
340063bc:	56028000 	.word	0x56028000

340063c0 <LL_RCC_MSI_Enable>:
{
340063c0:	b480      	push	{r7}
340063c2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
340063c4:	4b04      	ldr	r3, [pc, #16]	@ (340063d8 <LL_RCC_MSI_Enable+0x18>)
340063c6:	2204      	movs	r2, #4
340063c8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340063cc:	bf00      	nop
340063ce:	46bd      	mov	sp, r7
340063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340063d4:	4770      	bx	lr
340063d6:	bf00      	nop
340063d8:	56028000 	.word	0x56028000

340063dc <LL_RCC_MSI_Disable>:
{
340063dc:	b480      	push	{r7}
340063de:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
340063e0:	4b05      	ldr	r3, [pc, #20]	@ (340063f8 <LL_RCC_MSI_Disable+0x1c>)
340063e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340063e6:	461a      	mov	r2, r3
340063e8:	2304      	movs	r3, #4
340063ea:	6013      	str	r3, [r2, #0]
}
340063ec:	bf00      	nop
340063ee:	46bd      	mov	sp, r7
340063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340063f4:	4770      	bx	lr
340063f6:	bf00      	nop
340063f8:	56028000 	.word	0x56028000

340063fc <LL_RCC_MSI_IsReady>:
{
340063fc:	b480      	push	{r7}
340063fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34006400:	4b06      	ldr	r3, [pc, #24]	@ (3400641c <LL_RCC_MSI_IsReady+0x20>)
34006402:	685b      	ldr	r3, [r3, #4]
34006404:	f003 0304 	and.w	r3, r3, #4
34006408:	2b00      	cmp	r3, #0
3400640a:	d001      	beq.n	34006410 <LL_RCC_MSI_IsReady+0x14>
3400640c:	2301      	movs	r3, #1
3400640e:	e000      	b.n	34006412 <LL_RCC_MSI_IsReady+0x16>
34006410:	2300      	movs	r3, #0
}
34006412:	4618      	mov	r0, r3
34006414:	46bd      	mov	sp, r7
34006416:	f85d 7b04 	ldr.w	r7, [sp], #4
3400641a:	4770      	bx	lr
3400641c:	56028000 	.word	0x56028000

34006420 <LL_RCC_MSI_SetFrequency>:
{
34006420:	b480      	push	{r7}
34006422:	b083      	sub	sp, #12
34006424:	af00      	add	r7, sp, #0
34006426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34006428:	4b06      	ldr	r3, [pc, #24]	@ (34006444 <LL_RCC_MSI_SetFrequency+0x24>)
3400642a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400642c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34006430:	4904      	ldr	r1, [pc, #16]	@ (34006444 <LL_RCC_MSI_SetFrequency+0x24>)
34006432:	687b      	ldr	r3, [r7, #4]
34006434:	4313      	orrs	r3, r2
34006436:	644b      	str	r3, [r1, #68]	@ 0x44
}
34006438:	bf00      	nop
3400643a:	370c      	adds	r7, #12
3400643c:	46bd      	mov	sp, r7
3400643e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006442:	4770      	bx	lr
34006444:	56028000 	.word	0x56028000

34006448 <LL_RCC_MSI_GetFrequency>:
{
34006448:	b480      	push	{r7}
3400644a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3400644c:	4b04      	ldr	r3, [pc, #16]	@ (34006460 <LL_RCC_MSI_GetFrequency+0x18>)
3400644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34006454:	4618      	mov	r0, r3
34006456:	46bd      	mov	sp, r7
34006458:	f85d 7b04 	ldr.w	r7, [sp], #4
3400645c:	4770      	bx	lr
3400645e:	bf00      	nop
34006460:	56028000 	.word	0x56028000

34006464 <LL_RCC_MSI_SetCalibTrimming>:
{
34006464:	b480      	push	{r7}
34006466:	b083      	sub	sp, #12
34006468:	af00      	add	r7, sp, #0
3400646a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3400646c:	4b07      	ldr	r3, [pc, #28]	@ (3400648c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3400646e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006470:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34006474:	687b      	ldr	r3, [r7, #4]
34006476:	041b      	lsls	r3, r3, #16
34006478:	4904      	ldr	r1, [pc, #16]	@ (3400648c <LL_RCC_MSI_SetCalibTrimming+0x28>)
3400647a:	4313      	orrs	r3, r2
3400647c:	644b      	str	r3, [r1, #68]	@ 0x44
}
3400647e:	bf00      	nop
34006480:	370c      	adds	r7, #12
34006482:	46bd      	mov	sp, r7
34006484:	f85d 7b04 	ldr.w	r7, [sp], #4
34006488:	4770      	bx	lr
3400648a:	bf00      	nop
3400648c:	56028000 	.word	0x56028000

34006490 <LL_RCC_LSE_IsReady>:
{
34006490:	b480      	push	{r7}
34006492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34006494:	4b06      	ldr	r3, [pc, #24]	@ (340064b0 <LL_RCC_LSE_IsReady+0x20>)
34006496:	685b      	ldr	r3, [r3, #4]
34006498:	f003 0302 	and.w	r3, r3, #2
3400649c:	2b00      	cmp	r3, #0
3400649e:	d001      	beq.n	340064a4 <LL_RCC_LSE_IsReady+0x14>
340064a0:	2301      	movs	r3, #1
340064a2:	e000      	b.n	340064a6 <LL_RCC_LSE_IsReady+0x16>
340064a4:	2300      	movs	r3, #0
}
340064a6:	4618      	mov	r0, r3
340064a8:	46bd      	mov	sp, r7
340064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
340064ae:	4770      	bx	lr
340064b0:	56028000 	.word	0x56028000

340064b4 <LL_RCC_LSI_Enable>:
{
340064b4:	b480      	push	{r7}
340064b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
340064b8:	4b04      	ldr	r3, [pc, #16]	@ (340064cc <LL_RCC_LSI_Enable+0x18>)
340064ba:	2201      	movs	r2, #1
340064bc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
340064c0:	bf00      	nop
340064c2:	46bd      	mov	sp, r7
340064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
340064c8:	4770      	bx	lr
340064ca:	bf00      	nop
340064cc:	56028000 	.word	0x56028000

340064d0 <LL_RCC_LSI_Disable>:
{
340064d0:	b480      	push	{r7}
340064d2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340064d4:	4b05      	ldr	r3, [pc, #20]	@ (340064ec <LL_RCC_LSI_Disable+0x1c>)
340064d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340064da:	461a      	mov	r2, r3
340064dc:	2301      	movs	r3, #1
340064de:	6013      	str	r3, [r2, #0]
}
340064e0:	bf00      	nop
340064e2:	46bd      	mov	sp, r7
340064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
340064e8:	4770      	bx	lr
340064ea:	bf00      	nop
340064ec:	56028000 	.word	0x56028000

340064f0 <LL_RCC_LSI_IsReady>:
{
340064f0:	b480      	push	{r7}
340064f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340064f4:	4b04      	ldr	r3, [pc, #16]	@ (34006508 <LL_RCC_LSI_IsReady+0x18>)
340064f6:	685b      	ldr	r3, [r3, #4]
340064f8:	f003 0301 	and.w	r3, r3, #1
}
340064fc:	4618      	mov	r0, r3
340064fe:	46bd      	mov	sp, r7
34006500:	f85d 7b04 	ldr.w	r7, [sp], #4
34006504:	4770      	bx	lr
34006506:	bf00      	nop
34006508:	56028000 	.word	0x56028000

3400650c <LL_RCC_GetCpuClkSource>:
{
3400650c:	b480      	push	{r7}
3400650e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34006510:	4b04      	ldr	r3, [pc, #16]	@ (34006524 <LL_RCC_GetCpuClkSource+0x18>)
34006512:	6a1b      	ldr	r3, [r3, #32]
34006514:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34006518:	4618      	mov	r0, r3
3400651a:	46bd      	mov	sp, r7
3400651c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006520:	4770      	bx	lr
34006522:	bf00      	nop
34006524:	56028000 	.word	0x56028000

34006528 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34006528:	b480      	push	{r7}
3400652a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3400652c:	4b04      	ldr	r3, [pc, #16]	@ (34006540 <LL_RCC_GetSysClkSource+0x18>)
3400652e:	6a1b      	ldr	r3, [r3, #32]
34006530:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006534:	4618      	mov	r0, r3
34006536:	46bd      	mov	sp, r7
34006538:	f85d 7b04 	ldr.w	r7, [sp], #4
3400653c:	4770      	bx	lr
3400653e:	bf00      	nop
34006540:	56028000 	.word	0x56028000

34006544 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34006544:	b480      	push	{r7}
34006546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34006548:	4b04      	ldr	r3, [pc, #16]	@ (3400655c <LL_RCC_PLL1_GetSource+0x18>)
3400654a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400654e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34006552:	4618      	mov	r0, r3
34006554:	46bd      	mov	sp, r7
34006556:	f85d 7b04 	ldr.w	r7, [sp], #4
3400655a:	4770      	bx	lr
3400655c:	56028000 	.word	0x56028000

34006560 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34006560:	b480      	push	{r7}
34006562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34006564:	4b07      	ldr	r3, [pc, #28]	@ (34006584 <LL_RCC_PLL1_IsReady+0x24>)
34006566:	685b      	ldr	r3, [r3, #4]
34006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400656c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006570:	d101      	bne.n	34006576 <LL_RCC_PLL1_IsReady+0x16>
34006572:	2301      	movs	r3, #1
34006574:	e000      	b.n	34006578 <LL_RCC_PLL1_IsReady+0x18>
34006576:	2300      	movs	r3, #0
}
34006578:	4618      	mov	r0, r3
3400657a:	46bd      	mov	sp, r7
3400657c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006580:	4770      	bx	lr
34006582:	bf00      	nop
34006584:	56028000 	.word	0x56028000

34006588 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34006588:	b480      	push	{r7}
3400658a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400658c:	4b07      	ldr	r3, [pc, #28]	@ (340065ac <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3400658e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34006592:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34006596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400659a:	d101      	bne.n	340065a0 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3400659c:	2301      	movs	r3, #1
3400659e:	e000      	b.n	340065a2 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
340065a0:	2300      	movs	r3, #0
}
340065a2:	4618      	mov	r0, r3
340065a4:	46bd      	mov	sp, r7
340065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340065aa:	4770      	bx	lr
340065ac:	56028000 	.word	0x56028000

340065b0 <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
340065b0:	b480      	push	{r7}
340065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340065b4:	4b04      	ldr	r3, [pc, #16]	@ (340065c8 <LL_RCC_PLL2_GetSource+0x18>)
340065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340065ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340065be:	4618      	mov	r0, r3
340065c0:	46bd      	mov	sp, r7
340065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340065c6:	4770      	bx	lr
340065c8:	56028000 	.word	0x56028000

340065cc <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
340065cc:	b480      	push	{r7}
340065ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340065d0:	4b07      	ldr	r3, [pc, #28]	@ (340065f0 <LL_RCC_PLL2_IsReady+0x24>)
340065d2:	685b      	ldr	r3, [r3, #4]
340065d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340065dc:	d101      	bne.n	340065e2 <LL_RCC_PLL2_IsReady+0x16>
340065de:	2301      	movs	r3, #1
340065e0:	e000      	b.n	340065e4 <LL_RCC_PLL2_IsReady+0x18>
340065e2:	2300      	movs	r3, #0
}
340065e4:	4618      	mov	r0, r3
340065e6:	46bd      	mov	sp, r7
340065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340065ec:	4770      	bx	lr
340065ee:	bf00      	nop
340065f0:	56028000 	.word	0x56028000

340065f4 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
340065f4:	b480      	push	{r7}
340065f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340065f8:	4b07      	ldr	r3, [pc, #28]	@ (34006618 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
340065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340065fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34006602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34006606:	d101      	bne.n	3400660c <LL_RCC_PLL2_IsEnabledBypass+0x18>
34006608:	2301      	movs	r3, #1
3400660a:	e000      	b.n	3400660e <LL_RCC_PLL2_IsEnabledBypass+0x1a>
3400660c:	2300      	movs	r3, #0
}
3400660e:	4618      	mov	r0, r3
34006610:	46bd      	mov	sp, r7
34006612:	f85d 7b04 	ldr.w	r7, [sp], #4
34006616:	4770      	bx	lr
34006618:	56028000 	.word	0x56028000

3400661c <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
3400661c:	b480      	push	{r7}
3400661e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34006620:	4b04      	ldr	r3, [pc, #16]	@ (34006634 <LL_RCC_PLL3_GetSource+0x18>)
34006622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34006626:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3400662a:	4618      	mov	r0, r3
3400662c:	46bd      	mov	sp, r7
3400662e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006632:	4770      	bx	lr
34006634:	56028000 	.word	0x56028000

34006638 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34006638:	b480      	push	{r7}
3400663a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3400663c:	4b07      	ldr	r3, [pc, #28]	@ (3400665c <LL_RCC_PLL3_IsReady+0x24>)
3400663e:	685b      	ldr	r3, [r3, #4]
34006640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34006648:	d101      	bne.n	3400664e <LL_RCC_PLL3_IsReady+0x16>
3400664a:	2301      	movs	r3, #1
3400664c:	e000      	b.n	34006650 <LL_RCC_PLL3_IsReady+0x18>
3400664e:	2300      	movs	r3, #0
}
34006650:	4618      	mov	r0, r3
34006652:	46bd      	mov	sp, r7
34006654:	f85d 7b04 	ldr.w	r7, [sp], #4
34006658:	4770      	bx	lr
3400665a:	bf00      	nop
3400665c:	56028000 	.word	0x56028000

34006660 <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34006660:	b480      	push	{r7}
34006662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34006664:	4b07      	ldr	r3, [pc, #28]	@ (34006684 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34006666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400666a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400666e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34006672:	d101      	bne.n	34006678 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34006674:	2301      	movs	r3, #1
34006676:	e000      	b.n	3400667a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34006678:	2300      	movs	r3, #0
}
3400667a:	4618      	mov	r0, r3
3400667c:	46bd      	mov	sp, r7
3400667e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006682:	4770      	bx	lr
34006684:	56028000 	.word	0x56028000

34006688 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34006688:	b480      	push	{r7}
3400668a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3400668c:	4b04      	ldr	r3, [pc, #16]	@ (340066a0 <LL_RCC_PLL4_GetSource+0x18>)
3400668e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34006692:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34006696:	4618      	mov	r0, r3
34006698:	46bd      	mov	sp, r7
3400669a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400669e:	4770      	bx	lr
340066a0:	56028000 	.word	0x56028000

340066a4 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
340066a4:	b480      	push	{r7}
340066a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340066a8:	4b07      	ldr	r3, [pc, #28]	@ (340066c8 <LL_RCC_PLL4_IsReady+0x24>)
340066aa:	685b      	ldr	r3, [r3, #4]
340066ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340066b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340066b4:	d101      	bne.n	340066ba <LL_RCC_PLL4_IsReady+0x16>
340066b6:	2301      	movs	r3, #1
340066b8:	e000      	b.n	340066bc <LL_RCC_PLL4_IsReady+0x18>
340066ba:	2300      	movs	r3, #0
}
340066bc:	4618      	mov	r0, r3
340066be:	46bd      	mov	sp, r7
340066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
340066c4:	4770      	bx	lr
340066c6:	bf00      	nop
340066c8:	56028000 	.word	0x56028000

340066cc <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
340066cc:	b480      	push	{r7}
340066ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340066d0:	4b07      	ldr	r3, [pc, #28]	@ (340066f0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340066d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340066d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340066da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340066de:	d101      	bne.n	340066e4 <LL_RCC_PLL4_IsEnabledBypass+0x18>
340066e0:	2301      	movs	r3, #1
340066e2:	e000      	b.n	340066e6 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340066e4:	2300      	movs	r3, #0
}
340066e6:	4618      	mov	r0, r3
340066e8:	46bd      	mov	sp, r7
340066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340066ee:	4770      	bx	lr
340066f0:	56028000 	.word	0x56028000

340066f4 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
340066f4:	b480      	push	{r7}
340066f6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
340066f8:	4b04      	ldr	r3, [pc, #16]	@ (3400670c <LL_RCC_IC1_Enable+0x18>)
340066fa:	2201      	movs	r2, #1
340066fc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34006700:	bf00      	nop
34006702:	46bd      	mov	sp, r7
34006704:	f85d 7b04 	ldr.w	r7, [sp], #4
34006708:	4770      	bx	lr
3400670a:	bf00      	nop
3400670c:	56028000 	.word	0x56028000

34006710 <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
34006710:	b480      	push	{r7}
34006712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34006714:	4b04      	ldr	r3, [pc, #16]	@ (34006728 <LL_RCC_IC1_GetSource+0x18>)
34006716:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400671a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400671e:	4618      	mov	r0, r3
34006720:	46bd      	mov	sp, r7
34006722:	f85d 7b04 	ldr.w	r7, [sp], #4
34006726:	4770      	bx	lr
34006728:	56028000 	.word	0x56028000

3400672c <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
3400672c:	b480      	push	{r7}
3400672e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34006730:	4b05      	ldr	r3, [pc, #20]	@ (34006748 <LL_RCC_IC1_GetDivider+0x1c>)
34006732:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34006736:	0c1b      	lsrs	r3, r3, #16
34006738:	b2db      	uxtb	r3, r3
3400673a:	3301      	adds	r3, #1
}
3400673c:	4618      	mov	r0, r3
3400673e:	46bd      	mov	sp, r7
34006740:	f85d 7b04 	ldr.w	r7, [sp], #4
34006744:	4770      	bx	lr
34006746:	bf00      	nop
34006748:	56028000 	.word	0x56028000

3400674c <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
3400674c:	b480      	push	{r7}
3400674e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34006750:	4b04      	ldr	r3, [pc, #16]	@ (34006764 <LL_RCC_IC2_GetSource+0x18>)
34006752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34006756:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400675a:	4618      	mov	r0, r3
3400675c:	46bd      	mov	sp, r7
3400675e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006762:	4770      	bx	lr
34006764:	56028000 	.word	0x56028000

34006768 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34006768:	b480      	push	{r7}
3400676a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3400676c:	4b05      	ldr	r3, [pc, #20]	@ (34006784 <LL_RCC_IC2_GetDivider+0x1c>)
3400676e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34006772:	0c1b      	lsrs	r3, r3, #16
34006774:	b2db      	uxtb	r3, r3
34006776:	3301      	adds	r3, #1
}
34006778:	4618      	mov	r0, r3
3400677a:	46bd      	mov	sp, r7
3400677c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006780:	4770      	bx	lr
34006782:	bf00      	nop
34006784:	56028000 	.word	0x56028000

34006788 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34006788:	b480      	push	{r7}
3400678a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3400678c:	4b04      	ldr	r3, [pc, #16]	@ (340067a0 <LL_RCC_IC6_GetSource+0x18>)
3400678e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34006792:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006796:	4618      	mov	r0, r3
34006798:	46bd      	mov	sp, r7
3400679a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400679e:	4770      	bx	lr
340067a0:	56028000 	.word	0x56028000

340067a4 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
340067a4:	b480      	push	{r7}
340067a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340067a8:	4b04      	ldr	r3, [pc, #16]	@ (340067bc <LL_RCC_IC11_GetSource+0x18>)
340067aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340067ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340067b2:	4618      	mov	r0, r3
340067b4:	46bd      	mov	sp, r7
340067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340067ba:	4770      	bx	lr
340067bc:	56028000 	.word	0x56028000

340067c0 <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
340067c0:	b580      	push	{r7, lr}
340067c2:	b0a2      	sub	sp, #136	@ 0x88
340067c4:	af00      	add	r7, sp, #0
340067c6:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
340067c8:	687b      	ldr	r3, [r7, #4]
340067ca:	2b00      	cmp	r3, #0
340067cc:	d102      	bne.n	340067d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
340067ce:	2301      	movs	r3, #1
340067d0:	f000 bd10 	b.w	340071f4 <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340067d4:	687b      	ldr	r3, [r7, #4]
340067d6:	681b      	ldr	r3, [r3, #0]
340067d8:	2b00      	cmp	r3, #0
340067da:	d022      	beq.n	34006822 <HAL_RCC_OscConfig+0x62>
340067dc:	687b      	ldr	r3, [r7, #4]
340067de:	681b      	ldr	r3, [r3, #0]
340067e0:	f003 0301 	and.w	r3, r3, #1
340067e4:	2b00      	cmp	r3, #0
340067e6:	d11c      	bne.n	34006822 <HAL_RCC_OscConfig+0x62>
340067e8:	687b      	ldr	r3, [r7, #4]
340067ea:	681b      	ldr	r3, [r3, #0]
340067ec:	f003 0302 	and.w	r3, r3, #2
340067f0:	2b00      	cmp	r3, #0
340067f2:	d116      	bne.n	34006822 <HAL_RCC_OscConfig+0x62>
340067f4:	687b      	ldr	r3, [r7, #4]
340067f6:	681b      	ldr	r3, [r3, #0]
340067f8:	f003 0310 	and.w	r3, r3, #16
340067fc:	2b00      	cmp	r3, #0
340067fe:	d110      	bne.n	34006822 <HAL_RCC_OscConfig+0x62>
34006800:	687b      	ldr	r3, [r7, #4]
34006802:	681b      	ldr	r3, [r3, #0]
34006804:	f003 0308 	and.w	r3, r3, #8
34006808:	2b00      	cmp	r3, #0
3400680a:	d10a      	bne.n	34006822 <HAL_RCC_OscConfig+0x62>
3400680c:	687b      	ldr	r3, [r7, #4]
3400680e:	681b      	ldr	r3, [r3, #0]
34006810:	f003 0304 	and.w	r3, r3, #4
34006814:	2b00      	cmp	r3, #0
34006816:	d104      	bne.n	34006822 <HAL_RCC_OscConfig+0x62>
34006818:	f44f 71b9 	mov.w	r1, #370	@ 0x172
3400681c:	4892      	ldr	r0, [pc, #584]	@ (34006a68 <HAL_RCC_OscConfig+0x2a8>)
3400681e:	f7fb fa3d 	bl	34001c9c <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
34006822:	f7ff fe73 	bl	3400650c <LL_RCC_GetCpuClkSource>
34006826:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
3400682a:	f7ff fe7d 	bl	34006528 <LL_RCC_GetSysClkSource>
3400682e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
34006832:	f7ff fe87 	bl	34006544 <LL_RCC_PLL1_GetSource>
34006836:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34006838:	f7ff feba 	bl	340065b0 <LL_RCC_PLL2_GetSource>
3400683c:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3400683e:	f7ff feed 	bl	3400661c <LL_RCC_PLL3_GetSource>
34006842:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34006844:	f7ff ff20 	bl	34006688 <LL_RCC_PLL4_GetSource>
34006848:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
3400684a:	4b88      	ldr	r3, [pc, #544]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400684c:	685b      	ldr	r3, [r3, #4]
3400684e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34006850:	687b      	ldr	r3, [r7, #4]
34006852:	681b      	ldr	r3, [r3, #0]
34006854:	f003 0301 	and.w	r3, r3, #1
34006858:	2b00      	cmp	r3, #0
3400685a:	f000 80c3 	beq.w	340069e4 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
3400685e:	687b      	ldr	r3, [r7, #4]
34006860:	685b      	ldr	r3, [r3, #4]
34006862:	2b00      	cmp	r3, #0
34006864:	d013      	beq.n	3400688e <HAL_RCC_OscConfig+0xce>
34006866:	687b      	ldr	r3, [r7, #4]
34006868:	685b      	ldr	r3, [r3, #4]
3400686a:	2b10      	cmp	r3, #16
3400686c:	d00f      	beq.n	3400688e <HAL_RCC_OscConfig+0xce>
3400686e:	687b      	ldr	r3, [r7, #4]
34006870:	685b      	ldr	r3, [r3, #4]
34006872:	f248 0210 	movw	r2, #32784	@ 0x8010
34006876:	4293      	cmp	r3, r2
34006878:	d009      	beq.n	3400688e <HAL_RCC_OscConfig+0xce>
3400687a:	687b      	ldr	r3, [r7, #4]
3400687c:	685b      	ldr	r3, [r3, #4]
3400687e:	4a7c      	ldr	r2, [pc, #496]	@ (34006a70 <HAL_RCC_OscConfig+0x2b0>)
34006880:	4293      	cmp	r3, r2
34006882:	d004      	beq.n	3400688e <HAL_RCC_OscConfig+0xce>
34006884:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34006888:	4877      	ldr	r0, [pc, #476]	@ (34006a68 <HAL_RCC_OscConfig+0x2a8>)
3400688a:	f7fb fa07 	bl	34001c9c <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400688e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34006896:	d028      	beq.n	340068ea <HAL_RCC_OscConfig+0x12a>
34006898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3400689c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068a0:	d023      	beq.n	340068ea <HAL_RCC_OscConfig+0x12a>
340068a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
340068a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068a8:	d104      	bne.n	340068b4 <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340068aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340068b0:	2b00      	cmp	r3, #0
340068b2:	d11a      	bne.n	340068ea <HAL_RCC_OscConfig+0x12a>
340068b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
340068b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068ba:	d104      	bne.n	340068c6 <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340068bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340068c2:	2b00      	cmp	r3, #0
340068c4:	d111      	bne.n	340068ea <HAL_RCC_OscConfig+0x12a>
340068c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340068c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068cc:	d104      	bne.n	340068d8 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340068ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340068d4:	2b00      	cmp	r3, #0
340068d6:	d108      	bne.n	340068ea <HAL_RCC_OscConfig+0x12a>
340068d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340068da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340068de:	d10b      	bne.n	340068f8 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340068e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340068e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340068e6:	2b00      	cmp	r3, #0
340068e8:	d006      	beq.n	340068f8 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340068ea:	687b      	ldr	r3, [r7, #4]
340068ec:	685b      	ldr	r3, [r3, #4]
340068ee:	2b00      	cmp	r3, #0
340068f0:	d178      	bne.n	340069e4 <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
340068f2:	2301      	movs	r3, #1
340068f4:	f000 bc7e 	b.w	340071f4 <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340068f8:	687b      	ldr	r3, [r7, #4]
340068fa:	685b      	ldr	r3, [r3, #4]
340068fc:	2b10      	cmp	r3, #16
340068fe:	d104      	bne.n	3400690a <HAL_RCC_OscConfig+0x14a>
34006900:	4b5a      	ldr	r3, [pc, #360]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006902:	2210      	movs	r2, #16
34006904:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006908:	e043      	b.n	34006992 <HAL_RCC_OscConfig+0x1d2>
3400690a:	687b      	ldr	r3, [r7, #4]
3400690c:	685b      	ldr	r3, [r3, #4]
3400690e:	2b00      	cmp	r3, #0
34006910:	d10c      	bne.n	3400692c <HAL_RCC_OscConfig+0x16c>
34006912:	4b56      	ldr	r3, [pc, #344]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006918:	461a      	mov	r2, r3
3400691a:	2310      	movs	r3, #16
3400691c:	6013      	str	r3, [r2, #0]
3400691e:	4b53      	ldr	r3, [pc, #332]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006922:	4a52      	ldr	r2, [pc, #328]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006924:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006928:	6553      	str	r3, [r2, #84]	@ 0x54
3400692a:	e032      	b.n	34006992 <HAL_RCC_OscConfig+0x1d2>
3400692c:	687b      	ldr	r3, [r7, #4]
3400692e:	685b      	ldr	r3, [r3, #4]
34006930:	f248 0210 	movw	r2, #32784	@ 0x8010
34006934:	4293      	cmp	r3, r2
34006936:	d110      	bne.n	3400695a <HAL_RCC_OscConfig+0x19a>
34006938:	4b4c      	ldr	r3, [pc, #304]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400693c:	4a4b      	ldr	r2, [pc, #300]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400693e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006942:	6553      	str	r3, [r2, #84]	@ 0x54
34006944:	4b49      	ldr	r3, [pc, #292]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006948:	4a48      	ldr	r2, [pc, #288]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400694a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400694e:	6553      	str	r3, [r2, #84]	@ 0x54
34006950:	4b46      	ldr	r3, [pc, #280]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006952:	2210      	movs	r2, #16
34006954:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006958:	e01b      	b.n	34006992 <HAL_RCC_OscConfig+0x1d2>
3400695a:	687b      	ldr	r3, [r7, #4]
3400695c:	685b      	ldr	r3, [r3, #4]
3400695e:	4a44      	ldr	r2, [pc, #272]	@ (34006a70 <HAL_RCC_OscConfig+0x2b0>)
34006960:	4293      	cmp	r3, r2
34006962:	d10a      	bne.n	3400697a <HAL_RCC_OscConfig+0x1ba>
34006964:	4b41      	ldr	r3, [pc, #260]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006968:	4a40      	ldr	r2, [pc, #256]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400696a:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
3400696e:	6553      	str	r3, [r2, #84]	@ 0x54
34006970:	4b3e      	ldr	r3, [pc, #248]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006972:	2210      	movs	r2, #16
34006974:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006978:	e00b      	b.n	34006992 <HAL_RCC_OscConfig+0x1d2>
3400697a:	4b3c      	ldr	r3, [pc, #240]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400697c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006980:	461a      	mov	r2, r3
34006982:	2310      	movs	r3, #16
34006984:	6013      	str	r3, [r2, #0]
34006986:	4b39      	ldr	r3, [pc, #228]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
34006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400698a:	4a38      	ldr	r2, [pc, #224]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
3400698c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006990:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006992:	f7fd f9a5 	bl	34003ce0 <HAL_GetTick>
34006996:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34006998:	687b      	ldr	r3, [r7, #4]
3400699a:	685b      	ldr	r3, [r3, #4]
3400699c:	2b00      	cmp	r3, #0
3400699e:	d01b      	beq.n	340069d8 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340069a0:	e009      	b.n	340069b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340069a2:	f7fd f99d 	bl	34003ce0 <HAL_GetTick>
340069a6:	4602      	mov	r2, r0
340069a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340069aa:	1ad3      	subs	r3, r2, r3
340069ac:	2b64      	cmp	r3, #100	@ 0x64
340069ae:	d902      	bls.n	340069b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
340069b0:	2303      	movs	r3, #3
340069b2:	f000 bc1f 	b.w	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340069b6:	4b2d      	ldr	r3, [pc, #180]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
340069b8:	685b      	ldr	r3, [r3, #4]
340069ba:	f003 0310 	and.w	r3, r3, #16
340069be:	2b00      	cmp	r3, #0
340069c0:	d0ef      	beq.n	340069a2 <HAL_RCC_OscConfig+0x1e2>
340069c2:	e00f      	b.n	340069e4 <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340069c4:	f7fd f98c 	bl	34003ce0 <HAL_GetTick>
340069c8:	4602      	mov	r2, r0
340069ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340069cc:	1ad3      	subs	r3, r2, r3
340069ce:	2b64      	cmp	r3, #100	@ 0x64
340069d0:	d902      	bls.n	340069d8 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
340069d2:	2303      	movs	r3, #3
340069d4:	f000 bc0e 	b.w	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340069d8:	4b24      	ldr	r3, [pc, #144]	@ (34006a6c <HAL_RCC_OscConfig+0x2ac>)
340069da:	685b      	ldr	r3, [r3, #4]
340069dc:	f003 0310 	and.w	r3, r3, #16
340069e0:	2b00      	cmp	r3, #0
340069e2:	d1ef      	bne.n	340069c4 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340069e4:	687b      	ldr	r3, [r7, #4]
340069e6:	681b      	ldr	r3, [r3, #0]
340069e8:	f003 0302 	and.w	r3, r3, #2
340069ec:	2b00      	cmp	r3, #0
340069ee:	f000 80c3 	beq.w	34006b78 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340069f2:	687b      	ldr	r3, [r7, #4]
340069f4:	68db      	ldr	r3, [r3, #12]
340069f6:	2b00      	cmp	r3, #0
340069f8:	d008      	beq.n	34006a0c <HAL_RCC_OscConfig+0x24c>
340069fa:	687b      	ldr	r3, [r7, #4]
340069fc:	68db      	ldr	r3, [r3, #12]
340069fe:	2b08      	cmp	r3, #8
34006a00:	d004      	beq.n	34006a0c <HAL_RCC_OscConfig+0x24c>
34006a02:	f240 11b5 	movw	r1, #437	@ 0x1b5
34006a06:	4818      	ldr	r0, [pc, #96]	@ (34006a68 <HAL_RCC_OscConfig+0x2a8>)
34006a08:	f7fb f948 	bl	34001c9c <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34006a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006a10:	2b00      	cmp	r3, #0
34006a12:	d023      	beq.n	34006a5c <HAL_RCC_OscConfig+0x29c>
34006a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006a18:	2b00      	cmp	r3, #0
34006a1a:	d01f      	beq.n	34006a5c <HAL_RCC_OscConfig+0x29c>
34006a1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34006a1e:	2b00      	cmp	r3, #0
34006a20:	d104      	bne.n	34006a2c <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34006a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006a28:	2b00      	cmp	r3, #0
34006a2a:	d117      	bne.n	34006a5c <HAL_RCC_OscConfig+0x29c>
34006a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34006a2e:	2b00      	cmp	r3, #0
34006a30:	d104      	bne.n	34006a3c <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34006a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006a38:	2b00      	cmp	r3, #0
34006a3a:	d10f      	bne.n	34006a5c <HAL_RCC_OscConfig+0x29c>
34006a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34006a3e:	2b00      	cmp	r3, #0
34006a40:	d104      	bne.n	34006a4c <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34006a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006a48:	2b00      	cmp	r3, #0
34006a4a:	d107      	bne.n	34006a5c <HAL_RCC_OscConfig+0x29c>
34006a4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34006a4e:	2b00      	cmp	r3, #0
34006a50:	d13b      	bne.n	34006aca <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34006a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006a58:	2b00      	cmp	r3, #0
34006a5a:	d036      	beq.n	34006aca <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006a5c:	687b      	ldr	r3, [r7, #4]
34006a5e:	68db      	ldr	r3, [r3, #12]
34006a60:	2b00      	cmp	r3, #0
34006a62:	d107      	bne.n	34006a74 <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
34006a64:	2301      	movs	r3, #1
34006a66:	e3c5      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
34006a68:	3401e758 	.word	0x3401e758
34006a6c:	56028000 	.word	0x56028000
34006a70:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34006a74:	687b      	ldr	r3, [r7, #4]
34006a76:	691b      	ldr	r3, [r3, #16]
34006a78:	2b00      	cmp	r3, #0
34006a7a:	d012      	beq.n	34006aa2 <HAL_RCC_OscConfig+0x2e2>
34006a7c:	687b      	ldr	r3, [r7, #4]
34006a7e:	691b      	ldr	r3, [r3, #16]
34006a80:	2b80      	cmp	r3, #128	@ 0x80
34006a82:	d00e      	beq.n	34006aa2 <HAL_RCC_OscConfig+0x2e2>
34006a84:	687b      	ldr	r3, [r7, #4]
34006a86:	691b      	ldr	r3, [r3, #16]
34006a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006a8c:	d009      	beq.n	34006aa2 <HAL_RCC_OscConfig+0x2e2>
34006a8e:	687b      	ldr	r3, [r7, #4]
34006a90:	691b      	ldr	r3, [r3, #16]
34006a92:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34006a96:	d004      	beq.n	34006aa2 <HAL_RCC_OscConfig+0x2e2>
34006a98:	f240 11c7 	movw	r1, #455	@ 0x1c7
34006a9c:	48a2      	ldr	r0, [pc, #648]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006a9e:	f7fb f8fd 	bl	34001c9c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34006aa2:	687b      	ldr	r3, [r7, #4]
34006aa4:	695b      	ldr	r3, [r3, #20]
34006aa6:	2b7f      	cmp	r3, #127	@ 0x7f
34006aa8:	d904      	bls.n	34006ab4 <HAL_RCC_OscConfig+0x2f4>
34006aaa:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34006aae:	489e      	ldr	r0, [pc, #632]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006ab0:	f7fb f8f4 	bl	34001c9c <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006ab4:	687b      	ldr	r3, [r7, #4]
34006ab6:	691b      	ldr	r3, [r3, #16]
34006ab8:	4618      	mov	r0, r3
34006aba:	f7ff fc49 	bl	34006350 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34006abe:	687b      	ldr	r3, [r7, #4]
34006ac0:	695b      	ldr	r3, [r3, #20]
34006ac2:	4618      	mov	r0, r3
34006ac4:	f7ff fc66 	bl	34006394 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006ac8:	e056      	b.n	34006b78 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34006aca:	687b      	ldr	r3, [r7, #4]
34006acc:	68db      	ldr	r3, [r3, #12]
34006ace:	2b00      	cmp	r3, #0
34006ad0:	d03e      	beq.n	34006b50 <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34006ad2:	687b      	ldr	r3, [r7, #4]
34006ad4:	691b      	ldr	r3, [r3, #16]
34006ad6:	2b00      	cmp	r3, #0
34006ad8:	d012      	beq.n	34006b00 <HAL_RCC_OscConfig+0x340>
34006ada:	687b      	ldr	r3, [r7, #4]
34006adc:	691b      	ldr	r3, [r3, #16]
34006ade:	2b80      	cmp	r3, #128	@ 0x80
34006ae0:	d00e      	beq.n	34006b00 <HAL_RCC_OscConfig+0x340>
34006ae2:	687b      	ldr	r3, [r7, #4]
34006ae4:	691b      	ldr	r3, [r3, #16]
34006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006aea:	d009      	beq.n	34006b00 <HAL_RCC_OscConfig+0x340>
34006aec:	687b      	ldr	r3, [r7, #4]
34006aee:	691b      	ldr	r3, [r3, #16]
34006af0:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34006af4:	d004      	beq.n	34006b00 <HAL_RCC_OscConfig+0x340>
34006af6:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34006afa:	488b      	ldr	r0, [pc, #556]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006afc:	f7fb f8ce 	bl	34001c9c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34006b00:	687b      	ldr	r3, [r7, #4]
34006b02:	695b      	ldr	r3, [r3, #20]
34006b04:	2b7f      	cmp	r3, #127	@ 0x7f
34006b06:	d904      	bls.n	34006b12 <HAL_RCC_OscConfig+0x352>
34006b08:	f240 11d7 	movw	r1, #471	@ 0x1d7
34006b0c:	4886      	ldr	r0, [pc, #536]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006b0e:	f7fb f8c5 	bl	34001c9c <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34006b12:	f7ff fbed 	bl	340062f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006b16:	f7fd f8e3 	bl	34003ce0 <HAL_GetTick>
34006b1a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34006b1c:	e008      	b.n	34006b30 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006b1e:	f7fd f8df 	bl	34003ce0 <HAL_GetTick>
34006b22:	4602      	mov	r2, r0
34006b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006b26:	1ad3      	subs	r3, r2, r3
34006b28:	2b01      	cmp	r3, #1
34006b2a:	d901      	bls.n	34006b30 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
34006b2c:	2303      	movs	r3, #3
34006b2e:	e361      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
34006b30:	f7ff fbfc 	bl	3400632c <LL_RCC_HSI_IsReady>
34006b34:	4603      	mov	r3, r0
34006b36:	2b00      	cmp	r3, #0
34006b38:	d0f1      	beq.n	34006b1e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006b3a:	687b      	ldr	r3, [r7, #4]
34006b3c:	691b      	ldr	r3, [r3, #16]
34006b3e:	4618      	mov	r0, r3
34006b40:	f7ff fc06 	bl	34006350 <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34006b44:	687b      	ldr	r3, [r7, #4]
34006b46:	695b      	ldr	r3, [r3, #20]
34006b48:	4618      	mov	r0, r3
34006b4a:	f7ff fc23 	bl	34006394 <LL_RCC_HSI_SetCalibTrimming>
34006b4e:	e013      	b.n	34006b78 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
34006b50:	f7ff fbdc 	bl	3400630c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006b54:	f7fd f8c4 	bl	34003ce0 <HAL_GetTick>
34006b58:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34006b5a:	e008      	b.n	34006b6e <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006b5c:	f7fd f8c0 	bl	34003ce0 <HAL_GetTick>
34006b60:	4602      	mov	r2, r0
34006b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006b64:	1ad3      	subs	r3, r2, r3
34006b66:	2b01      	cmp	r3, #1
34006b68:	d901      	bls.n	34006b6e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
34006b6a:	2303      	movs	r3, #3
34006b6c:	e342      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
34006b6e:	f7ff fbdd 	bl	3400632c <LL_RCC_HSI_IsReady>
34006b72:	4603      	mov	r3, r0
34006b74:	2b00      	cmp	r3, #0
34006b76:	d1f1      	bne.n	34006b5c <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34006b78:	687b      	ldr	r3, [r7, #4]
34006b7a:	681b      	ldr	r3, [r3, #0]
34006b7c:	f003 0310 	and.w	r3, r3, #16
34006b80:	2b00      	cmp	r3, #0
34006b82:	f000 809e 	beq.w	34006cc2 <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34006b86:	687b      	ldr	r3, [r7, #4]
34006b88:	69db      	ldr	r3, [r3, #28]
34006b8a:	2b00      	cmp	r3, #0
34006b8c:	d008      	beq.n	34006ba0 <HAL_RCC_OscConfig+0x3e0>
34006b8e:	687b      	ldr	r3, [r7, #4]
34006b90:	69db      	ldr	r3, [r3, #28]
34006b92:	2b04      	cmp	r3, #4
34006b94:	d004      	beq.n	34006ba0 <HAL_RCC_OscConfig+0x3e0>
34006b96:	f240 2105 	movw	r1, #517	@ 0x205
34006b9a:	4863      	ldr	r0, [pc, #396]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006b9c:	f7fb f87e 	bl	34001c9c <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34006ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34006ba8:	d028      	beq.n	34006bfc <HAL_RCC_OscConfig+0x43c>
34006baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bb2:	d023      	beq.n	34006bfc <HAL_RCC_OscConfig+0x43c>
34006bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bba:	d104      	bne.n	34006bc6 <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34006bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006bc2:	2b00      	cmp	r3, #0
34006bc4:	d11a      	bne.n	34006bfc <HAL_RCC_OscConfig+0x43c>
34006bc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34006bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bcc:	d104      	bne.n	34006bd8 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34006bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006bd4:	2b00      	cmp	r3, #0
34006bd6:	d111      	bne.n	34006bfc <HAL_RCC_OscConfig+0x43c>
34006bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34006bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bde:	d104      	bne.n	34006bea <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34006be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006be6:	2b00      	cmp	r3, #0
34006be8:	d108      	bne.n	34006bfc <HAL_RCC_OscConfig+0x43c>
34006bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34006bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bf0:	d119      	bne.n	34006c26 <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34006bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006bf8:	2b00      	cmp	r3, #0
34006bfa:	d014      	beq.n	34006c26 <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006bfc:	687b      	ldr	r3, [r7, #4]
34006bfe:	69db      	ldr	r3, [r3, #28]
34006c00:	2b00      	cmp	r3, #0
34006c02:	d101      	bne.n	34006c08 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
34006c04:	2301      	movs	r3, #1
34006c06:	e2f5      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006c08:	687b      	ldr	r3, [r7, #4]
34006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c0c:	2b1f      	cmp	r3, #31
34006c0e:	d904      	bls.n	34006c1a <HAL_RCC_OscConfig+0x45a>
34006c10:	f44f 7106 	mov.w	r1, #536	@ 0x218
34006c14:	4844      	ldr	r0, [pc, #272]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006c16:	f7fb f841 	bl	34001c9c <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006c1a:	687b      	ldr	r3, [r7, #4]
34006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c1e:	4618      	mov	r0, r3
34006c20:	f7ff fc20 	bl	34006464 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006c24:	e04d      	b.n	34006cc2 <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34006c26:	687b      	ldr	r3, [r7, #4]
34006c28:	69db      	ldr	r3, [r3, #28]
34006c2a:	2b00      	cmp	r3, #0
34006c2c:	d035      	beq.n	34006c9a <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34006c2e:	687b      	ldr	r3, [r7, #4]
34006c30:	6a1b      	ldr	r3, [r3, #32]
34006c32:	2b00      	cmp	r3, #0
34006c34:	d009      	beq.n	34006c4a <HAL_RCC_OscConfig+0x48a>
34006c36:	687b      	ldr	r3, [r7, #4]
34006c38:	6a1b      	ldr	r3, [r3, #32]
34006c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34006c3e:	d004      	beq.n	34006c4a <HAL_RCC_OscConfig+0x48a>
34006c40:	f44f 7109 	mov.w	r1, #548	@ 0x224
34006c44:	4838      	ldr	r0, [pc, #224]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006c46:	f7fb f829 	bl	34001c9c <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006c4a:	687b      	ldr	r3, [r7, #4]
34006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c4e:	2b1f      	cmp	r3, #31
34006c50:	d904      	bls.n	34006c5c <HAL_RCC_OscConfig+0x49c>
34006c52:	f240 2125 	movw	r1, #549	@ 0x225
34006c56:	4834      	ldr	r0, [pc, #208]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006c58:	f7fb f820 	bl	34001c9c <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34006c5c:	687b      	ldr	r3, [r7, #4]
34006c5e:	6a1b      	ldr	r3, [r3, #32]
34006c60:	4618      	mov	r0, r3
34006c62:	f7ff fbdd 	bl	34006420 <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34006c66:	f7ff fbab 	bl	340063c0 <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006c6a:	f7fd f839 	bl	34003ce0 <HAL_GetTick>
34006c6e:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
34006c70:	e008      	b.n	34006c84 <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006c72:	f7fd f835 	bl	34003ce0 <HAL_GetTick>
34006c76:	4602      	mov	r2, r0
34006c78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006c7a:	1ad3      	subs	r3, r2, r3
34006c7c:	2b01      	cmp	r3, #1
34006c7e:	d901      	bls.n	34006c84 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
34006c80:	2303      	movs	r3, #3
34006c82:	e2b7      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
34006c84:	f7ff fbba 	bl	340063fc <LL_RCC_MSI_IsReady>
34006c88:	4603      	mov	r3, r0
34006c8a:	2b00      	cmp	r3, #0
34006c8c:	d0f1      	beq.n	34006c72 <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006c8e:	687b      	ldr	r3, [r7, #4]
34006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c92:	4618      	mov	r0, r3
34006c94:	f7ff fbe6 	bl	34006464 <LL_RCC_MSI_SetCalibTrimming>
34006c98:	e013      	b.n	34006cc2 <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34006c9a:	f7ff fb9f 	bl	340063dc <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006c9e:	f7fd f81f 	bl	34003ce0 <HAL_GetTick>
34006ca2:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
34006ca4:	e008      	b.n	34006cb8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34006ca6:	f7fd f81b 	bl	34003ce0 <HAL_GetTick>
34006caa:	4602      	mov	r2, r0
34006cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006cae:	1ad3      	subs	r3, r2, r3
34006cb0:	2b01      	cmp	r3, #1
34006cb2:	d901      	bls.n	34006cb8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
34006cb4:	2303      	movs	r3, #3
34006cb6:	e29d      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
34006cb8:	f7ff fba0 	bl	340063fc <LL_RCC_MSI_IsReady>
34006cbc:	4603      	mov	r3, r0
34006cbe:	2b00      	cmp	r3, #0
34006cc0:	d1f1      	bne.n	34006ca6 <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34006cc2:	687b      	ldr	r3, [r7, #4]
34006cc4:	681b      	ldr	r3, [r3, #0]
34006cc6:	f003 0308 	and.w	r3, r3, #8
34006cca:	2b00      	cmp	r3, #0
34006ccc:	d03c      	beq.n	34006d48 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34006cce:	687b      	ldr	r3, [r7, #4]
34006cd0:	699b      	ldr	r3, [r3, #24]
34006cd2:	2b00      	cmp	r3, #0
34006cd4:	d008      	beq.n	34006ce8 <HAL_RCC_OscConfig+0x528>
34006cd6:	687b      	ldr	r3, [r7, #4]
34006cd8:	699b      	ldr	r3, [r3, #24]
34006cda:	2b01      	cmp	r3, #1
34006cdc:	d004      	beq.n	34006ce8 <HAL_RCC_OscConfig+0x528>
34006cde:	f240 2155 	movw	r1, #597	@ 0x255
34006ce2:	4811      	ldr	r0, [pc, #68]	@ (34006d28 <HAL_RCC_OscConfig+0x568>)
34006ce4:	f7fa ffda 	bl	34001c9c <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34006ce8:	687b      	ldr	r3, [r7, #4]
34006cea:	699b      	ldr	r3, [r3, #24]
34006cec:	2b00      	cmp	r3, #0
34006cee:	d014      	beq.n	34006d1a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34006cf0:	f7ff fbe0 	bl	340064b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006cf4:	f7fc fff4 	bl	34003ce0 <HAL_GetTick>
34006cf8:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34006cfa:	e008      	b.n	34006d0e <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006cfc:	f7fc fff0 	bl	34003ce0 <HAL_GetTick>
34006d00:	4602      	mov	r2, r0
34006d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006d04:	1ad3      	subs	r3, r2, r3
34006d06:	2b01      	cmp	r3, #1
34006d08:	d901      	bls.n	34006d0e <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
34006d0a:	2303      	movs	r3, #3
34006d0c:	e272      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
34006d0e:	f7ff fbef 	bl	340064f0 <LL_RCC_LSI_IsReady>
34006d12:	4603      	mov	r3, r0
34006d14:	2b00      	cmp	r3, #0
34006d16:	d0f1      	beq.n	34006cfc <HAL_RCC_OscConfig+0x53c>
34006d18:	e016      	b.n	34006d48 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34006d1a:	f7ff fbd9 	bl	340064d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006d1e:	f7fc ffdf 	bl	34003ce0 <HAL_GetTick>
34006d22:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34006d24:	e00b      	b.n	34006d3e <HAL_RCC_OscConfig+0x57e>
34006d26:	bf00      	nop
34006d28:	3401e758 	.word	0x3401e758
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006d2c:	f7fc ffd8 	bl	34003ce0 <HAL_GetTick>
34006d30:	4602      	mov	r2, r0
34006d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006d34:	1ad3      	subs	r3, r2, r3
34006d36:	2b01      	cmp	r3, #1
34006d38:	d901      	bls.n	34006d3e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
34006d3a:	2303      	movs	r3, #3
34006d3c:	e25a      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
34006d3e:	f7ff fbd7 	bl	340064f0 <LL_RCC_LSI_IsReady>
34006d42:	4603      	mov	r3, r0
34006d44:	2b00      	cmp	r3, #0
34006d46:	d1f1      	bne.n	34006d2c <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34006d48:	687b      	ldr	r3, [r7, #4]
34006d4a:	681b      	ldr	r3, [r3, #0]
34006d4c:	f003 0304 	and.w	r3, r3, #4
34006d50:	2b00      	cmp	r3, #0
34006d52:	f000 80a4 	beq.w	34006e9e <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34006d56:	687b      	ldr	r3, [r7, #4]
34006d58:	689b      	ldr	r3, [r3, #8]
34006d5a:	2b00      	cmp	r3, #0
34006d5c:	d013      	beq.n	34006d86 <HAL_RCC_OscConfig+0x5c6>
34006d5e:	687b      	ldr	r3, [r7, #4]
34006d60:	689b      	ldr	r3, [r3, #8]
34006d62:	2b02      	cmp	r3, #2
34006d64:	d00f      	beq.n	34006d86 <HAL_RCC_OscConfig+0x5c6>
34006d66:	687b      	ldr	r3, [r7, #4]
34006d68:	689b      	ldr	r3, [r3, #8]
34006d6a:	f248 0202 	movw	r2, #32770	@ 0x8002
34006d6e:	4293      	cmp	r3, r2
34006d70:	d009      	beq.n	34006d86 <HAL_RCC_OscConfig+0x5c6>
34006d72:	687b      	ldr	r3, [r7, #4]
34006d74:	689b      	ldr	r3, [r3, #8]
34006d76:	4a9b      	ldr	r2, [pc, #620]	@ (34006fe4 <HAL_RCC_OscConfig+0x824>)
34006d78:	4293      	cmp	r3, r2
34006d7a:	d004      	beq.n	34006d86 <HAL_RCC_OscConfig+0x5c6>
34006d7c:	f44f 7120 	mov.w	r1, #640	@ 0x280
34006d80:	4899      	ldr	r0, [pc, #612]	@ (34006fe8 <HAL_RCC_OscConfig+0x828>)
34006d82:	f7fa ff8b 	bl	34001c9c <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34006d86:	687b      	ldr	r3, [r7, #4]
34006d88:	689b      	ldr	r3, [r3, #8]
34006d8a:	2b02      	cmp	r3, #2
34006d8c:	d104      	bne.n	34006d98 <HAL_RCC_OscConfig+0x5d8>
34006d8e:	4b97      	ldr	r3, [pc, #604]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006d90:	2202      	movs	r2, #2
34006d92:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006d96:	e055      	b.n	34006e44 <HAL_RCC_OscConfig+0x684>
34006d98:	687b      	ldr	r3, [r7, #4]
34006d9a:	689b      	ldr	r3, [r3, #8]
34006d9c:	2b00      	cmp	r3, #0
34006d9e:	d112      	bne.n	34006dc6 <HAL_RCC_OscConfig+0x606>
34006da0:	4b92      	ldr	r3, [pc, #584]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006da6:	461a      	mov	r2, r3
34006da8:	2302      	movs	r3, #2
34006daa:	6013      	str	r3, [r2, #0]
34006dac:	4b8f      	ldr	r3, [pc, #572]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006db0:	4a8e      	ldr	r2, [pc, #568]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006db6:	6413      	str	r3, [r2, #64]	@ 0x40
34006db8:	4b8c      	ldr	r3, [pc, #560]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006dbc:	4a8b      	ldr	r2, [pc, #556]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006dc2:	6413      	str	r3, [r2, #64]	@ 0x40
34006dc4:	e03e      	b.n	34006e44 <HAL_RCC_OscConfig+0x684>
34006dc6:	687b      	ldr	r3, [r7, #4]
34006dc8:	689b      	ldr	r3, [r3, #8]
34006dca:	f248 0202 	movw	r2, #32770	@ 0x8002
34006dce:	4293      	cmp	r3, r2
34006dd0:	d110      	bne.n	34006df4 <HAL_RCC_OscConfig+0x634>
34006dd2:	4b86      	ldr	r3, [pc, #536]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006dd6:	4a85      	ldr	r2, [pc, #532]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006ddc:	6413      	str	r3, [r2, #64]	@ 0x40
34006dde:	4b83      	ldr	r3, [pc, #524]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006de2:	4a82      	ldr	r2, [pc, #520]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006de8:	6413      	str	r3, [r2, #64]	@ 0x40
34006dea:	4b80      	ldr	r3, [pc, #512]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006dec:	2202      	movs	r2, #2
34006dee:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006df2:	e027      	b.n	34006e44 <HAL_RCC_OscConfig+0x684>
34006df4:	687b      	ldr	r3, [r7, #4]
34006df6:	689b      	ldr	r3, [r3, #8]
34006df8:	4a7a      	ldr	r2, [pc, #488]	@ (34006fe4 <HAL_RCC_OscConfig+0x824>)
34006dfa:	4293      	cmp	r3, r2
34006dfc:	d110      	bne.n	34006e20 <HAL_RCC_OscConfig+0x660>
34006dfe:	4b7b      	ldr	r3, [pc, #492]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e02:	4a7a      	ldr	r2, [pc, #488]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006e08:	6413      	str	r3, [r2, #64]	@ 0x40
34006e0a:	4b78      	ldr	r3, [pc, #480]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e0e:	4a77      	ldr	r2, [pc, #476]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34006e14:	6413      	str	r3, [r2, #64]	@ 0x40
34006e16:	4b75      	ldr	r3, [pc, #468]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e18:	2202      	movs	r2, #2
34006e1a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006e1e:	e011      	b.n	34006e44 <HAL_RCC_OscConfig+0x684>
34006e20:	4b72      	ldr	r3, [pc, #456]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006e26:	461a      	mov	r2, r3
34006e28:	2302      	movs	r3, #2
34006e2a:	6013      	str	r3, [r2, #0]
34006e2c:	4b6f      	ldr	r3, [pc, #444]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e30:	4a6e      	ldr	r2, [pc, #440]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006e36:	6413      	str	r3, [r2, #64]	@ 0x40
34006e38:	4b6c      	ldr	r3, [pc, #432]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006e3c:	4a6b      	ldr	r2, [pc, #428]	@ (34006fec <HAL_RCC_OscConfig+0x82c>)
34006e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34006e42:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34006e44:	687b      	ldr	r3, [r7, #4]
34006e46:	689b      	ldr	r3, [r3, #8]
34006e48:	2b00      	cmp	r3, #0
34006e4a:	d014      	beq.n	34006e76 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006e4c:	f7fc ff48 	bl	34003ce0 <HAL_GetTick>
34006e50:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
34006e52:	e00a      	b.n	34006e6a <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006e54:	f7fc ff44 	bl	34003ce0 <HAL_GetTick>
34006e58:	4602      	mov	r2, r0
34006e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006e5c:	1ad3      	subs	r3, r2, r3
34006e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
34006e62:	4293      	cmp	r3, r2
34006e64:	d901      	bls.n	34006e6a <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
34006e66:	2303      	movs	r3, #3
34006e68:	e1c4      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
34006e6a:	f7ff fb11 	bl	34006490 <LL_RCC_LSE_IsReady>
34006e6e:	4603      	mov	r3, r0
34006e70:	2b00      	cmp	r3, #0
34006e72:	d0ef      	beq.n	34006e54 <HAL_RCC_OscConfig+0x694>
34006e74:	e013      	b.n	34006e9e <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006e76:	f7fc ff33 	bl	34003ce0 <HAL_GetTick>
34006e7a:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34006e7c:	e00a      	b.n	34006e94 <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006e7e:	f7fc ff2f 	bl	34003ce0 <HAL_GetTick>
34006e82:	4602      	mov	r2, r0
34006e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006e86:	1ad3      	subs	r3, r2, r3
34006e88:	f241 3288 	movw	r2, #5000	@ 0x1388
34006e8c:	4293      	cmp	r3, r2
34006e8e:	d901      	bls.n	34006e94 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
34006e90:	2303      	movs	r3, #3
34006e92:	e1af      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
34006e94:	f7ff fafc 	bl	34006490 <LL_RCC_LSE_IsReady>
34006e98:	4603      	mov	r3, r0
34006e9a:	2b00      	cmp	r3, #0
34006e9c:	d1ef      	bne.n	34006e7e <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34006e9e:	687b      	ldr	r3, [r7, #4]
34006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006ea2:	2b00      	cmp	r3, #0
34006ea4:	d010      	beq.n	34006ec8 <HAL_RCC_OscConfig+0x708>
34006ea6:	687b      	ldr	r3, [r7, #4]
34006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eaa:	2b01      	cmp	r3, #1
34006eac:	d00c      	beq.n	34006ec8 <HAL_RCC_OscConfig+0x708>
34006eae:	687b      	ldr	r3, [r7, #4]
34006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eb2:	2b02      	cmp	r3, #2
34006eb4:	d008      	beq.n	34006ec8 <HAL_RCC_OscConfig+0x708>
34006eb6:	687b      	ldr	r3, [r7, #4]
34006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006eba:	2b03      	cmp	r3, #3
34006ebc:	d004      	beq.n	34006ec8 <HAL_RCC_OscConfig+0x708>
34006ebe:	f240 21a5 	movw	r1, #677	@ 0x2a5
34006ec2:	4849      	ldr	r0, [pc, #292]	@ (34006fe8 <HAL_RCC_OscConfig+0x828>)
34006ec4:	f7fa feea 	bl	34001c9c <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34006ec8:	687b      	ldr	r3, [r7, #4]
34006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006ecc:	2b00      	cmp	r3, #0
34006ece:	d04c      	beq.n	34006f6a <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34006ed0:	687b      	ldr	r3, [r7, #4]
34006ed2:	3328      	adds	r3, #40	@ 0x28
34006ed4:	4619      	mov	r1, r3
34006ed6:	2000      	movs	r0, #0
34006ed8:	f001 f8e0 	bl	3400809c <RCC_PLL_IsNewConfig>
34006edc:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34006ede:	f7ff fb3f 	bl	34006560 <LL_RCC_PLL1_IsReady>
34006ee2:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34006ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34006ee6:	2b01      	cmp	r3, #1
34006ee8:	d130      	bne.n	34006f4c <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006eea:	f7ff fc11 	bl	34006710 <LL_RCC_IC1_GetSource>
34006eee:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006ef0:	f7ff fc2c 	bl	3400674c <LL_RCC_IC2_GetSource>
34006ef4:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006ef6:	f7ff fc47 	bl	34006788 <LL_RCC_IC6_GetSource>
34006efa:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006efc:	f7ff fc52 	bl	340067a4 <LL_RCC_IC11_GetSource>
34006f00:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34006f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006f06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006f0a:	d104      	bne.n	34006f16 <HAL_RCC_OscConfig+0x756>
34006f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
34006f0e:	2b00      	cmp	r3, #0
34006f10:	d101      	bne.n	34006f16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
34006f12:	2301      	movs	r3, #1
34006f14:	e16e      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f1e:	d10a      	bne.n	34006f36 <HAL_RCC_OscConfig+0x776>
34006f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34006f22:	2b00      	cmp	r3, #0
34006f24:	d005      	beq.n	34006f32 <HAL_RCC_OscConfig+0x772>
34006f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34006f28:	2b00      	cmp	r3, #0
34006f2a:	d002      	beq.n	34006f32 <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34006f2e:	2b00      	cmp	r3, #0
34006f30:	d101      	bne.n	34006f36 <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34006f32:	2301      	movs	r3, #1
34006f34:	e15e      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34006f36:	687b      	ldr	r3, [r7, #4]
34006f38:	3328      	adds	r3, #40	@ 0x28
34006f3a:	4619      	mov	r1, r3
34006f3c:	2000      	movs	r0, #0
34006f3e:	f000 fedd 	bl	34007cfc <RCC_PLL_Config>
34006f42:	4603      	mov	r3, r0
34006f44:	2b00      	cmp	r3, #0
34006f46:	d010      	beq.n	34006f6a <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006f48:	2301      	movs	r3, #1
34006f4a:	e153      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34006f4c:	687b      	ldr	r3, [r7, #4]
34006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006f50:	2b02      	cmp	r3, #2
34006f52:	d10a      	bne.n	34006f6a <HAL_RCC_OscConfig+0x7aa>
34006f54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34006f56:	2b00      	cmp	r3, #0
34006f58:	d107      	bne.n	34006f6a <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34006f5a:	2000      	movs	r0, #0
34006f5c:	f001 f872 	bl	34008044 <RCC_PLL_Enable>
34006f60:	4603      	mov	r3, r0
34006f62:	2b00      	cmp	r3, #0
34006f64:	d001      	beq.n	34006f6a <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006f66:	2301      	movs	r3, #1
34006f68:	e144      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34006f6a:	687b      	ldr	r3, [r7, #4]
34006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f6e:	2b00      	cmp	r3, #0
34006f70:	d010      	beq.n	34006f94 <HAL_RCC_OscConfig+0x7d4>
34006f72:	687b      	ldr	r3, [r7, #4]
34006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f76:	2b01      	cmp	r3, #1
34006f78:	d00c      	beq.n	34006f94 <HAL_RCC_OscConfig+0x7d4>
34006f7a:	687b      	ldr	r3, [r7, #4]
34006f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f7e:	2b02      	cmp	r3, #2
34006f80:	d008      	beq.n	34006f94 <HAL_RCC_OscConfig+0x7d4>
34006f82:	687b      	ldr	r3, [r7, #4]
34006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f86:	2b03      	cmp	r3, #3
34006f88:	d004      	beq.n	34006f94 <HAL_RCC_OscConfig+0x7d4>
34006f8a:	f240 21d3 	movw	r1, #723	@ 0x2d3
34006f8e:	4816      	ldr	r0, [pc, #88]	@ (34006fe8 <HAL_RCC_OscConfig+0x828>)
34006f90:	f7fa fe84 	bl	34001c9c <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34006f94:	687b      	ldr	r3, [r7, #4]
34006f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006f98:	2b00      	cmp	r3, #0
34006f9a:	d056      	beq.n	3400704a <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34006f9c:	687b      	ldr	r3, [r7, #4]
34006f9e:	3344      	adds	r3, #68	@ 0x44
34006fa0:	4619      	mov	r1, r3
34006fa2:	2001      	movs	r0, #1
34006fa4:	f001 f87a 	bl	3400809c <RCC_PLL_IsNewConfig>
34006fa8:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34006faa:	f7ff fb0f 	bl	340065cc <LL_RCC_PLL2_IsReady>
34006fae:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34006fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34006fb2:	2b01      	cmp	r3, #1
34006fb4:	d13a      	bne.n	3400702c <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006fb6:	f7ff fbab 	bl	34006710 <LL_RCC_IC1_GetSource>
34006fba:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006fbc:	f7ff fbc6 	bl	3400674c <LL_RCC_IC2_GetSource>
34006fc0:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006fc2:	f7ff fbe1 	bl	34006788 <LL_RCC_IC6_GetSource>
34006fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006fc8:	f7ff fbec 	bl	340067a4 <LL_RCC_IC11_GetSource>
34006fcc:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34006fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006fd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006fd6:	d10b      	bne.n	34006ff0 <HAL_RCC_OscConfig+0x830>
34006fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34006fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006fde:	d107      	bne.n	34006ff0 <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
34006fe0:	2301      	movs	r3, #1
34006fe2:	e107      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
34006fe4:	00018002 	.word	0x00018002
34006fe8:	3401e758 	.word	0x3401e758
34006fec:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34006ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006ff4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006ff8:	d10d      	bne.n	34007016 <HAL_RCC_OscConfig+0x856>
34006ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34006ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007000:	d007      	beq.n	34007012 <HAL_RCC_OscConfig+0x852>
34007002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34007004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007008:	d003      	beq.n	34007012 <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3400700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3400700c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007010:	d101      	bne.n	34007016 <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34007012:	2301      	movs	r3, #1
34007014:	e0ee      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34007016:	687b      	ldr	r3, [r7, #4]
34007018:	3344      	adds	r3, #68	@ 0x44
3400701a:	4619      	mov	r1, r3
3400701c:	2001      	movs	r0, #1
3400701e:	f000 fe6d 	bl	34007cfc <RCC_PLL_Config>
34007022:	4603      	mov	r3, r0
34007024:	2b00      	cmp	r3, #0
34007026:	d010      	beq.n	3400704a <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34007028:	2301      	movs	r3, #1
3400702a:	e0e3      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
3400702c:	687b      	ldr	r3, [r7, #4]
3400702e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34007030:	2b02      	cmp	r3, #2
34007032:	d10a      	bne.n	3400704a <HAL_RCC_OscConfig+0x88a>
34007034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34007036:	2b00      	cmp	r3, #0
34007038:	d107      	bne.n	3400704a <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3400703a:	2001      	movs	r0, #1
3400703c:	f001 f802 	bl	34008044 <RCC_PLL_Enable>
34007040:	4603      	mov	r3, r0
34007042:	2b00      	cmp	r3, #0
34007044:	d001      	beq.n	3400704a <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34007046:	2301      	movs	r3, #1
34007048:	e0d4      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
3400704a:	687b      	ldr	r3, [r7, #4]
3400704c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400704e:	2b00      	cmp	r3, #0
34007050:	d010      	beq.n	34007074 <HAL_RCC_OscConfig+0x8b4>
34007052:	687b      	ldr	r3, [r7, #4]
34007054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007056:	2b01      	cmp	r3, #1
34007058:	d00c      	beq.n	34007074 <HAL_RCC_OscConfig+0x8b4>
3400705a:	687b      	ldr	r3, [r7, #4]
3400705c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400705e:	2b02      	cmp	r3, #2
34007060:	d008      	beq.n	34007074 <HAL_RCC_OscConfig+0x8b4>
34007062:	687b      	ldr	r3, [r7, #4]
34007064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007066:	2b03      	cmp	r3, #3
34007068:	d004      	beq.n	34007074 <HAL_RCC_OscConfig+0x8b4>
3400706a:	f240 3101 	movw	r1, #769	@ 0x301
3400706e:	4863      	ldr	r0, [pc, #396]	@ (340071fc <HAL_RCC_OscConfig+0xa3c>)
34007070:	f7fa fe14 	bl	34001c9c <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34007074:	687b      	ldr	r3, [r7, #4]
34007076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007078:	2b00      	cmp	r3, #0
3400707a:	d050      	beq.n	3400711e <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
3400707c:	687b      	ldr	r3, [r7, #4]
3400707e:	3360      	adds	r3, #96	@ 0x60
34007080:	4619      	mov	r1, r3
34007082:	2002      	movs	r0, #2
34007084:	f001 f80a 	bl	3400809c <RCC_PLL_IsNewConfig>
34007088:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
3400708a:	f7ff fa69 	bl	34006560 <LL_RCC_PLL1_IsReady>
3400708e:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34007092:	2b01      	cmp	r3, #1
34007094:	d134      	bne.n	34007100 <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34007096:	f7ff fb3b 	bl	34006710 <LL_RCC_IC1_GetSource>
3400709a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
3400709c:	f7ff fb56 	bl	3400674c <LL_RCC_IC2_GetSource>
340070a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340070a2:	f7ff fb71 	bl	34006788 <LL_RCC_IC6_GetSource>
340070a6:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340070a8:	f7ff fb7c 	bl	340067a4 <LL_RCC_IC11_GetSource>
340070ac:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340070ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340070b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340070b6:	d105      	bne.n	340070c4 <HAL_RCC_OscConfig+0x904>
340070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340070ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070be:	d101      	bne.n	340070c4 <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
340070c0:	2301      	movs	r3, #1
340070c2:	e097      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340070c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340070c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340070cc:	d10d      	bne.n	340070ea <HAL_RCC_OscConfig+0x92a>
340070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340070d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070d4:	d007      	beq.n	340070e6 <HAL_RCC_OscConfig+0x926>
340070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340070d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070dc:	d003      	beq.n	340070e6 <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340070de:	6a3b      	ldr	r3, [r7, #32]
340070e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340070e4:	d101      	bne.n	340070ea <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
340070e6:	2301      	movs	r3, #1
340070e8:	e084      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340070ea:	687b      	ldr	r3, [r7, #4]
340070ec:	3360      	adds	r3, #96	@ 0x60
340070ee:	4619      	mov	r1, r3
340070f0:	2002      	movs	r0, #2
340070f2:	f000 fe03 	bl	34007cfc <RCC_PLL_Config>
340070f6:	4603      	mov	r3, r0
340070f8:	2b00      	cmp	r3, #0
340070fa:	d010      	beq.n	3400711e <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
340070fc:	2301      	movs	r3, #1
340070fe:	e079      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34007100:	687b      	ldr	r3, [r7, #4]
34007102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34007104:	2b02      	cmp	r3, #2
34007106:	d10a      	bne.n	3400711e <HAL_RCC_OscConfig+0x95e>
34007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3400710a:	2b00      	cmp	r3, #0
3400710c:	d107      	bne.n	3400711e <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
3400710e:	2002      	movs	r0, #2
34007110:	f000 ff98 	bl	34008044 <RCC_PLL_Enable>
34007114:	4603      	mov	r3, r0
34007116:	2b00      	cmp	r3, #0
34007118:	d001      	beq.n	3400711e <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
3400711a:	2301      	movs	r3, #1
3400711c:	e06a      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
3400711e:	687b      	ldr	r3, [r7, #4]
34007120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34007122:	2b00      	cmp	r3, #0
34007124:	d010      	beq.n	34007148 <HAL_RCC_OscConfig+0x988>
34007126:	687b      	ldr	r3, [r7, #4]
34007128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400712a:	2b01      	cmp	r3, #1
3400712c:	d00c      	beq.n	34007148 <HAL_RCC_OscConfig+0x988>
3400712e:	687b      	ldr	r3, [r7, #4]
34007130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34007132:	2b02      	cmp	r3, #2
34007134:	d008      	beq.n	34007148 <HAL_RCC_OscConfig+0x988>
34007136:	687b      	ldr	r3, [r7, #4]
34007138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400713a:	2b03      	cmp	r3, #3
3400713c:	d004      	beq.n	34007148 <HAL_RCC_OscConfig+0x988>
3400713e:	f240 312e 	movw	r1, #814	@ 0x32e
34007142:	482e      	ldr	r0, [pc, #184]	@ (340071fc <HAL_RCC_OscConfig+0xa3c>)
34007144:	f7fa fdaa 	bl	34001c9c <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34007148:	687b      	ldr	r3, [r7, #4]
3400714a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400714c:	2b00      	cmp	r3, #0
3400714e:	d050      	beq.n	340071f2 <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34007150:	687b      	ldr	r3, [r7, #4]
34007152:	337c      	adds	r3, #124	@ 0x7c
34007154:	4619      	mov	r1, r3
34007156:	2003      	movs	r0, #3
34007158:	f000 ffa0 	bl	3400809c <RCC_PLL_IsNewConfig>
3400715c:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
3400715e:	f7ff faa1 	bl	340066a4 <LL_RCC_PLL4_IsReady>
34007162:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34007164:	69fb      	ldr	r3, [r7, #28]
34007166:	2b01      	cmp	r3, #1
34007168:	d134      	bne.n	340071d4 <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3400716a:	f7ff fad1 	bl	34006710 <LL_RCC_IC1_GetSource>
3400716e:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34007170:	f7ff faec 	bl	3400674c <LL_RCC_IC2_GetSource>
34007174:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34007176:	f7ff fb07 	bl	34006788 <LL_RCC_IC6_GetSource>
3400717a:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3400717c:	f7ff fb12 	bl	340067a4 <LL_RCC_IC11_GetSource>
34007180:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34007182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34007186:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400718a:	d105      	bne.n	34007198 <HAL_RCC_OscConfig+0x9d8>
3400718c:	697b      	ldr	r3, [r7, #20]
3400718e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007192:	d101      	bne.n	34007198 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
34007194:	2301      	movs	r3, #1
34007196:	e02d      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34007198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3400719c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071a0:	d10d      	bne.n	340071be <HAL_RCC_OscConfig+0x9fe>
340071a2:	693b      	ldr	r3, [r7, #16]
340071a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071a8:	d007      	beq.n	340071ba <HAL_RCC_OscConfig+0x9fa>
340071aa:	68fb      	ldr	r3, [r7, #12]
340071ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071b0:	d003      	beq.n	340071ba <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
340071b2:	68bb      	ldr	r3, [r7, #8]
340071b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340071b8:	d101      	bne.n	340071be <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
340071ba:	2301      	movs	r3, #1
340071bc:	e01a      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
340071be:	687b      	ldr	r3, [r7, #4]
340071c0:	337c      	adds	r3, #124	@ 0x7c
340071c2:	4619      	mov	r1, r3
340071c4:	2003      	movs	r0, #3
340071c6:	f000 fd99 	bl	34007cfc <RCC_PLL_Config>
340071ca:	4603      	mov	r3, r0
340071cc:	2b00      	cmp	r3, #0
340071ce:	d010      	beq.n	340071f2 <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
340071d0:	2301      	movs	r3, #1
340071d2:	e00f      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
340071d4:	687b      	ldr	r3, [r7, #4]
340071d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340071d8:	2b02      	cmp	r3, #2
340071da:	d10a      	bne.n	340071f2 <HAL_RCC_OscConfig+0xa32>
340071dc:	69bb      	ldr	r3, [r7, #24]
340071de:	2b00      	cmp	r3, #0
340071e0:	d107      	bne.n	340071f2 <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
340071e2:	2003      	movs	r0, #3
340071e4:	f000 ff2e 	bl	34008044 <RCC_PLL_Enable>
340071e8:	4603      	mov	r3, r0
340071ea:	2b00      	cmp	r3, #0
340071ec:	d001      	beq.n	340071f2 <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
340071ee:	2301      	movs	r3, #1
340071f0:	e000      	b.n	340071f4 <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
340071f2:	2300      	movs	r3, #0
}
340071f4:	4618      	mov	r0, r3
340071f6:	3788      	adds	r7, #136	@ 0x88
340071f8:	46bd      	mov	sp, r7
340071fa:	bd80      	pop	{r7, pc}
340071fc:	3401e758 	.word	0x3401e758

34007200 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34007200:	b580      	push	{r7, lr}
34007202:	b084      	sub	sp, #16
34007204:	af00      	add	r7, sp, #0
34007206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34007208:	687b      	ldr	r3, [r7, #4]
3400720a:	2b00      	cmp	r3, #0
3400720c:	d102      	bne.n	34007214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
3400720e:	2301      	movs	r3, #1
34007210:	f000 bc6d 	b.w	34007aee <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34007214:	687b      	ldr	r3, [r7, #4]
34007216:	681b      	ldr	r3, [r3, #0]
34007218:	2b7f      	cmp	r3, #127	@ 0x7f
3400721a:	d904      	bls.n	34007226 <HAL_RCC_ClockConfig+0x26>
3400721c:	f240 317e 	movw	r1, #894	@ 0x37e
34007220:	4880      	ldr	r0, [pc, #512]	@ (34007424 <HAL_RCC_ClockConfig+0x224>)
34007222:	f7fa fd3b 	bl	34001c9c <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34007226:	687b      	ldr	r3, [r7, #4]
34007228:	681b      	ldr	r3, [r3, #0]
3400722a:	f003 0308 	and.w	r3, r3, #8
3400722e:	2b00      	cmp	r3, #0
34007230:	d035      	beq.n	3400729e <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34007232:	687b      	ldr	r3, [r7, #4]
34007234:	691b      	ldr	r3, [r3, #16]
34007236:	2b00      	cmp	r3, #0
34007238:	d020      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
3400723a:	687b      	ldr	r3, [r7, #4]
3400723c:	691b      	ldr	r3, [r3, #16]
3400723e:	2b01      	cmp	r3, #1
34007240:	d01c      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
34007242:	687b      	ldr	r3, [r7, #4]
34007244:	691b      	ldr	r3, [r3, #16]
34007246:	2b02      	cmp	r3, #2
34007248:	d018      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
3400724a:	687b      	ldr	r3, [r7, #4]
3400724c:	691b      	ldr	r3, [r3, #16]
3400724e:	2b03      	cmp	r3, #3
34007250:	d014      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
34007252:	687b      	ldr	r3, [r7, #4]
34007254:	691b      	ldr	r3, [r3, #16]
34007256:	2b04      	cmp	r3, #4
34007258:	d010      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
3400725a:	687b      	ldr	r3, [r7, #4]
3400725c:	691b      	ldr	r3, [r3, #16]
3400725e:	2b05      	cmp	r3, #5
34007260:	d00c      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
34007262:	687b      	ldr	r3, [r7, #4]
34007264:	691b      	ldr	r3, [r3, #16]
34007266:	2b06      	cmp	r3, #6
34007268:	d008      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
3400726a:	687b      	ldr	r3, [r7, #4]
3400726c:	691b      	ldr	r3, [r3, #16]
3400726e:	2b07      	cmp	r3, #7
34007270:	d004      	beq.n	3400727c <HAL_RCC_ClockConfig+0x7c>
34007272:	f240 3185 	movw	r1, #901	@ 0x385
34007276:	486b      	ldr	r0, [pc, #428]	@ (34007424 <HAL_RCC_ClockConfig+0x224>)
34007278:	f7fa fd10 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3400727c:	687b      	ldr	r3, [r7, #4]
3400727e:	691a      	ldr	r2, [r3, #16]
34007280:	4b69      	ldr	r3, [pc, #420]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007284:	f003 0307 	and.w	r3, r3, #7
34007288:	429a      	cmp	r2, r3
3400728a:	d908      	bls.n	3400729e <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3400728c:	4b66      	ldr	r3, [pc, #408]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
3400728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007290:	f023 0207 	bic.w	r2, r3, #7
34007294:	687b      	ldr	r3, [r7, #4]
34007296:	691b      	ldr	r3, [r3, #16]
34007298:	4963      	ldr	r1, [pc, #396]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
3400729a:	4313      	orrs	r3, r2
3400729c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3400729e:	687b      	ldr	r3, [r7, #4]
340072a0:	681b      	ldr	r3, [r3, #0]
340072a2:	f003 0310 	and.w	r3, r3, #16
340072a6:	2b00      	cmp	r3, #0
340072a8:	d035      	beq.n	34007316 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340072aa:	687b      	ldr	r3, [r7, #4]
340072ac:	695b      	ldr	r3, [r3, #20]
340072ae:	2b00      	cmp	r3, #0
340072b0:	d020      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072b2:	687b      	ldr	r3, [r7, #4]
340072b4:	695b      	ldr	r3, [r3, #20]
340072b6:	2b10      	cmp	r3, #16
340072b8:	d01c      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072ba:	687b      	ldr	r3, [r7, #4]
340072bc:	695b      	ldr	r3, [r3, #20]
340072be:	2b20      	cmp	r3, #32
340072c0:	d018      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072c2:	687b      	ldr	r3, [r7, #4]
340072c4:	695b      	ldr	r3, [r3, #20]
340072c6:	2b30      	cmp	r3, #48	@ 0x30
340072c8:	d014      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072ca:	687b      	ldr	r3, [r7, #4]
340072cc:	695b      	ldr	r3, [r3, #20]
340072ce:	2b40      	cmp	r3, #64	@ 0x40
340072d0:	d010      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072d2:	687b      	ldr	r3, [r7, #4]
340072d4:	695b      	ldr	r3, [r3, #20]
340072d6:	2b50      	cmp	r3, #80	@ 0x50
340072d8:	d00c      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072da:	687b      	ldr	r3, [r7, #4]
340072dc:	695b      	ldr	r3, [r3, #20]
340072de:	2b60      	cmp	r3, #96	@ 0x60
340072e0:	d008      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072e2:	687b      	ldr	r3, [r7, #4]
340072e4:	695b      	ldr	r3, [r3, #20]
340072e6:	2b70      	cmp	r3, #112	@ 0x70
340072e8:	d004      	beq.n	340072f4 <HAL_RCC_ClockConfig+0xf4>
340072ea:	f240 318f 	movw	r1, #911	@ 0x38f
340072ee:	484d      	ldr	r0, [pc, #308]	@ (34007424 <HAL_RCC_ClockConfig+0x224>)
340072f0:	f7fa fcd4 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340072f4:	687b      	ldr	r3, [r7, #4]
340072f6:	695a      	ldr	r2, [r3, #20]
340072f8:	4b4b      	ldr	r3, [pc, #300]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
340072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340072fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34007300:	429a      	cmp	r2, r3
34007302:	d908      	bls.n	34007316 <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34007304:	4b48      	ldr	r3, [pc, #288]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007308:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
3400730c:	687b      	ldr	r3, [r7, #4]
3400730e:	695b      	ldr	r3, [r3, #20]
34007310:	4945      	ldr	r1, [pc, #276]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007312:	4313      	orrs	r3, r2
34007314:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34007316:	687b      	ldr	r3, [r7, #4]
34007318:	681b      	ldr	r3, [r3, #0]
3400731a:	f003 0320 	and.w	r3, r3, #32
3400731e:	2b00      	cmp	r3, #0
34007320:	d03c      	beq.n	3400739c <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34007322:	687b      	ldr	r3, [r7, #4]
34007324:	699b      	ldr	r3, [r3, #24]
34007326:	2b00      	cmp	r3, #0
34007328:	d027      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
3400732a:	687b      	ldr	r3, [r7, #4]
3400732c:	699b      	ldr	r3, [r3, #24]
3400732e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34007332:	d022      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
34007334:	687b      	ldr	r3, [r7, #4]
34007336:	699b      	ldr	r3, [r3, #24]
34007338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400733c:	d01d      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
3400733e:	687b      	ldr	r3, [r7, #4]
34007340:	699b      	ldr	r3, [r3, #24]
34007342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34007346:	d018      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
34007348:	687b      	ldr	r3, [r7, #4]
3400734a:	699b      	ldr	r3, [r3, #24]
3400734c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34007350:	d013      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
34007352:	687b      	ldr	r3, [r7, #4]
34007354:	699b      	ldr	r3, [r3, #24]
34007356:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
3400735a:	d00e      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
3400735c:	687b      	ldr	r3, [r7, #4]
3400735e:	699b      	ldr	r3, [r3, #24]
34007360:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34007364:	d009      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
34007366:	687b      	ldr	r3, [r7, #4]
34007368:	699b      	ldr	r3, [r3, #24]
3400736a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
3400736e:	d004      	beq.n	3400737a <HAL_RCC_ClockConfig+0x17a>
34007370:	f240 3199 	movw	r1, #921	@ 0x399
34007374:	482b      	ldr	r0, [pc, #172]	@ (34007424 <HAL_RCC_ClockConfig+0x224>)
34007376:	f7fa fc91 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3400737a:	687b      	ldr	r3, [r7, #4]
3400737c:	699a      	ldr	r2, [r3, #24]
3400737e:	4b2a      	ldr	r3, [pc, #168]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007382:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34007386:	429a      	cmp	r2, r3
34007388:	d908      	bls.n	3400739c <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
3400738a:	4b27      	ldr	r3, [pc, #156]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
3400738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400738e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34007392:	687b      	ldr	r3, [r7, #4]
34007394:	699b      	ldr	r3, [r3, #24]
34007396:	4924      	ldr	r1, [pc, #144]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007398:	4313      	orrs	r3, r2
3400739a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3400739c:	687b      	ldr	r3, [r7, #4]
3400739e:	681b      	ldr	r3, [r3, #0]
340073a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340073a4:	2b00      	cmp	r3, #0
340073a6:	d041      	beq.n	3400742c <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
340073a8:	687b      	ldr	r3, [r7, #4]
340073aa:	69db      	ldr	r3, [r3, #28]
340073ac:	2b00      	cmp	r3, #0
340073ae:	d027      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073b0:	687b      	ldr	r3, [r7, #4]
340073b2:	69db      	ldr	r3, [r3, #28]
340073b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340073b8:	d022      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073ba:	687b      	ldr	r3, [r7, #4]
340073bc:	69db      	ldr	r3, [r3, #28]
340073be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340073c2:	d01d      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073c4:	687b      	ldr	r3, [r7, #4]
340073c6:	69db      	ldr	r3, [r3, #28]
340073c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340073cc:	d018      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073ce:	687b      	ldr	r3, [r7, #4]
340073d0:	69db      	ldr	r3, [r3, #28]
340073d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340073d6:	d013      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073d8:	687b      	ldr	r3, [r7, #4]
340073da:	69db      	ldr	r3, [r3, #28]
340073dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340073e0:	d00e      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073e2:	687b      	ldr	r3, [r7, #4]
340073e4:	69db      	ldr	r3, [r3, #28]
340073e6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340073ea:	d009      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073ec:	687b      	ldr	r3, [r7, #4]
340073ee:	69db      	ldr	r3, [r3, #28]
340073f0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340073f4:	d004      	beq.n	34007400 <HAL_RCC_ClockConfig+0x200>
340073f6:	f240 31a3 	movw	r1, #931	@ 0x3a3
340073fa:	480a      	ldr	r0, [pc, #40]	@ (34007424 <HAL_RCC_ClockConfig+0x224>)
340073fc:	f7fa fc4e 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34007400:	687b      	ldr	r3, [r7, #4]
34007402:	69da      	ldr	r2, [r3, #28]
34007404:	4b08      	ldr	r3, [pc, #32]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007408:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3400740c:	429a      	cmp	r2, r3
3400740e:	d90d      	bls.n	3400742c <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34007410:	4b05      	ldr	r3, [pc, #20]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
34007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007414:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007418:	687b      	ldr	r3, [r7, #4]
3400741a:	69db      	ldr	r3, [r3, #28]
3400741c:	4902      	ldr	r1, [pc, #8]	@ (34007428 <HAL_RCC_ClockConfig+0x228>)
3400741e:	4313      	orrs	r3, r2
34007420:	624b      	str	r3, [r1, #36]	@ 0x24
34007422:	e003      	b.n	3400742c <HAL_RCC_ClockConfig+0x22c>
34007424:	3401e758 	.word	0x3401e758
34007428:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3400742c:	687b      	ldr	r3, [r7, #4]
3400742e:	681b      	ldr	r3, [r3, #0]
34007430:	f003 0304 	and.w	r3, r3, #4
34007434:	2b00      	cmp	r3, #0
34007436:	d03c      	beq.n	340074b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007438:	687b      	ldr	r3, [r7, #4]
3400743a:	68db      	ldr	r3, [r3, #12]
3400743c:	2b00      	cmp	r3, #0
3400743e:	d027      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
34007440:	687b      	ldr	r3, [r7, #4]
34007442:	68db      	ldr	r3, [r3, #12]
34007444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007448:	d022      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
3400744a:	687b      	ldr	r3, [r7, #4]
3400744c:	68db      	ldr	r3, [r3, #12]
3400744e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007452:	d01d      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
34007454:	687b      	ldr	r3, [r7, #4]
34007456:	68db      	ldr	r3, [r3, #12]
34007458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400745c:	d018      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
3400745e:	687b      	ldr	r3, [r7, #4]
34007460:	68db      	ldr	r3, [r3, #12]
34007462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34007466:	d013      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
34007468:	687b      	ldr	r3, [r7, #4]
3400746a:	68db      	ldr	r3, [r3, #12]
3400746c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
34007470:	d00e      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
34007472:	687b      	ldr	r3, [r7, #4]
34007474:	68db      	ldr	r3, [r3, #12]
34007476:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
3400747a:	d009      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
3400747c:	687b      	ldr	r3, [r7, #4]
3400747e:	68db      	ldr	r3, [r3, #12]
34007480:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
34007484:	d004      	beq.n	34007490 <HAL_RCC_ClockConfig+0x290>
34007486:	f240 31ad 	movw	r1, #941	@ 0x3ad
3400748a:	4874      	ldr	r0, [pc, #464]	@ (3400765c <HAL_RCC_ClockConfig+0x45c>)
3400748c:	f7fa fc06 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34007490:	687b      	ldr	r3, [r7, #4]
34007492:	68da      	ldr	r2, [r3, #12]
34007494:	4b72      	ldr	r3, [pc, #456]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
34007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007498:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3400749c:	429a      	cmp	r2, r3
3400749e:	d908      	bls.n	340074b2 <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340074a0:	4b6f      	ldr	r3, [pc, #444]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
340074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340074a4:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340074a8:	687b      	ldr	r3, [r7, #4]
340074aa:	68db      	ldr	r3, [r3, #12]
340074ac:	496c      	ldr	r1, [pc, #432]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
340074ae:	4313      	orrs	r3, r2
340074b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
340074b2:	687b      	ldr	r3, [r7, #4]
340074b4:	681b      	ldr	r3, [r3, #0]
340074b6:	f003 0301 	and.w	r3, r3, #1
340074ba:	2b00      	cmp	r3, #0
340074bc:	f000 80a2 	beq.w	34007604 <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
340074c0:	687b      	ldr	r3, [r7, #4]
340074c2:	685b      	ldr	r3, [r3, #4]
340074c4:	2b00      	cmp	r3, #0
340074c6:	d013      	beq.n	340074f0 <HAL_RCC_ClockConfig+0x2f0>
340074c8:	687b      	ldr	r3, [r7, #4]
340074ca:	685b      	ldr	r3, [r3, #4]
340074cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340074d0:	d00e      	beq.n	340074f0 <HAL_RCC_ClockConfig+0x2f0>
340074d2:	687b      	ldr	r3, [r7, #4]
340074d4:	685b      	ldr	r3, [r3, #4]
340074d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340074da:	d009      	beq.n	340074f0 <HAL_RCC_ClockConfig+0x2f0>
340074dc:	687b      	ldr	r3, [r7, #4]
340074de:	685b      	ldr	r3, [r3, #4]
340074e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340074e4:	d004      	beq.n	340074f0 <HAL_RCC_ClockConfig+0x2f0>
340074e6:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
340074ea:	485c      	ldr	r0, [pc, #368]	@ (3400765c <HAL_RCC_ClockConfig+0x45c>)
340074ec:	f7fa fbd6 	bl	34001c9c <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
340074f0:	687b      	ldr	r3, [r7, #4]
340074f2:	685b      	ldr	r3, [r3, #4]
340074f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340074f8:	d106      	bne.n	34007508 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
340074fa:	f7fe fee7 	bl	340062cc <LL_RCC_HSE_IsReady>
340074fe:	4603      	mov	r3, r0
34007500:	2b00      	cmp	r3, #0
34007502:	d15a      	bne.n	340075ba <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34007504:	2301      	movs	r3, #1
34007506:	e2f2      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34007508:	687b      	ldr	r3, [r7, #4]
3400750a:	685b      	ldr	r3, [r3, #4]
3400750c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007510:	d140      	bne.n	34007594 <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34007512:	687b      	ldr	r3, [r7, #4]
34007514:	6a1b      	ldr	r3, [r3, #32]
34007516:	2b00      	cmp	r3, #0
34007518:	d013      	beq.n	34007542 <HAL_RCC_ClockConfig+0x342>
3400751a:	687b      	ldr	r3, [r7, #4]
3400751c:	6a1b      	ldr	r3, [r3, #32]
3400751e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007522:	d00e      	beq.n	34007542 <HAL_RCC_ClockConfig+0x342>
34007524:	687b      	ldr	r3, [r7, #4]
34007526:	6a1b      	ldr	r3, [r3, #32]
34007528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400752c:	d009      	beq.n	34007542 <HAL_RCC_ClockConfig+0x342>
3400752e:	687b      	ldr	r3, [r7, #4]
34007530:	6a1b      	ldr	r3, [r3, #32]
34007532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007536:	d004      	beq.n	34007542 <HAL_RCC_ClockConfig+0x342>
34007538:	f240 31c7 	movw	r1, #967	@ 0x3c7
3400753c:	4847      	ldr	r0, [pc, #284]	@ (3400765c <HAL_RCC_ClockConfig+0x45c>)
3400753e:	f7fa fbad 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34007542:	687b      	ldr	r3, [r7, #4]
34007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007546:	2b00      	cmp	r3, #0
34007548:	d004      	beq.n	34007554 <HAL_RCC_ClockConfig+0x354>
3400754a:	687b      	ldr	r3, [r7, #4]
3400754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400754e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007552:	d904      	bls.n	3400755e <HAL_RCC_ClockConfig+0x35e>
34007554:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34007558:	4840      	ldr	r0, [pc, #256]	@ (3400765c <HAL_RCC_ClockConfig+0x45c>)
3400755a:	f7fa fb9f 	bl	34001c9c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
3400755e:	f7ff f8d7 	bl	34006710 <LL_RCC_IC1_GetSource>
34007562:	4602      	mov	r2, r0
34007564:	687b      	ldr	r3, [r7, #4]
34007566:	6a1b      	ldr	r3, [r3, #32]
34007568:	4619      	mov	r1, r3
3400756a:	4610      	mov	r0, r2
3400756c:	f000 fe4a 	bl	34008204 <RCC_IC_CheckPLLSources>
34007570:	4603      	mov	r3, r0
34007572:	2b01      	cmp	r3, #1
34007574:	d001      	beq.n	3400757a <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
34007576:	2301      	movs	r3, #1
34007578:	e2b9      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
3400757a:	687b      	ldr	r3, [r7, #4]
3400757c:	6a1a      	ldr	r2, [r3, #32]
3400757e:	687b      	ldr	r3, [r7, #4]
34007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007582:	3b01      	subs	r3, #1
34007584:	041b      	lsls	r3, r3, #16
34007586:	4936      	ldr	r1, [pc, #216]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
34007588:	4313      	orrs	r3, r2
3400758a:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
3400758e:	f7ff f8b1 	bl	340066f4 <LL_RCC_IC1_Enable>
34007592:	e012      	b.n	340075ba <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34007594:	687b      	ldr	r3, [r7, #4]
34007596:	685b      	ldr	r3, [r3, #4]
34007598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400759c:	d106      	bne.n	340075ac <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3400759e:	f7fe ff2d 	bl	340063fc <LL_RCC_MSI_IsReady>
340075a2:	4603      	mov	r3, r0
340075a4:	2b00      	cmp	r3, #0
340075a6:	d108      	bne.n	340075ba <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340075a8:	2301      	movs	r3, #1
340075aa:	e2a0      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
340075ac:	f7fe febe 	bl	3400632c <LL_RCC_HSI_IsReady>
340075b0:	4603      	mov	r3, r0
340075b2:	2b00      	cmp	r3, #0
340075b4:	d101      	bne.n	340075ba <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
340075b6:	2301      	movs	r3, #1
340075b8:	e299      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
340075ba:	4b29      	ldr	r3, [pc, #164]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
340075bc:	6a1b      	ldr	r3, [r3, #32]
340075be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
340075c2:	687b      	ldr	r3, [r7, #4]
340075c4:	685b      	ldr	r3, [r3, #4]
340075c6:	4926      	ldr	r1, [pc, #152]	@ (34007660 <HAL_RCC_ClockConfig+0x460>)
340075c8:	4313      	orrs	r3, r2
340075ca:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
340075cc:	f7fc fb88 	bl	34003ce0 <HAL_GetTick>
340075d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340075d2:	e00a      	b.n	340075ea <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340075d4:	f7fc fb84 	bl	34003ce0 <HAL_GetTick>
340075d8:	4602      	mov	r2, r0
340075da:	68fb      	ldr	r3, [r7, #12]
340075dc:	1ad3      	subs	r3, r2, r3
340075de:	f241 3288 	movw	r2, #5000	@ 0x1388
340075e2:	4293      	cmp	r3, r2
340075e4:	d901      	bls.n	340075ea <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
340075e6:	2303      	movs	r3, #3
340075e8:	e281      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340075ea:	f7fe ff8f 	bl	3400650c <LL_RCC_GetCpuClkSource>
340075ee:	4602      	mov	r2, r0
340075f0:	687b      	ldr	r3, [r7, #4]
340075f2:	685b      	ldr	r3, [r3, #4]
340075f4:	011b      	lsls	r3, r3, #4
340075f6:	429a      	cmp	r2, r3
340075f8:	d1ec      	bne.n	340075d4 <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
340075fa:	f000 fa83 	bl	34007b04 <HAL_RCC_GetCpuClockFreq>
340075fe:	4603      	mov	r3, r0
34007600:	4a18      	ldr	r2, [pc, #96]	@ (34007664 <HAL_RCC_ClockConfig+0x464>)
34007602:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34007604:	687b      	ldr	r3, [r7, #4]
34007606:	681b      	ldr	r3, [r3, #0]
34007608:	f003 0302 	and.w	r3, r3, #2
3400760c:	2b00      	cmp	r3, #0
3400760e:	f000 8127 	beq.w	34007860 <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34007612:	687b      	ldr	r3, [r7, #4]
34007614:	689b      	ldr	r3, [r3, #8]
34007616:	2b00      	cmp	r3, #0
34007618:	d013      	beq.n	34007642 <HAL_RCC_ClockConfig+0x442>
3400761a:	687b      	ldr	r3, [r7, #4]
3400761c:	689b      	ldr	r3, [r3, #8]
3400761e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34007622:	d00e      	beq.n	34007642 <HAL_RCC_ClockConfig+0x442>
34007624:	687b      	ldr	r3, [r7, #4]
34007626:	689b      	ldr	r3, [r3, #8]
34007628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400762c:	d009      	beq.n	34007642 <HAL_RCC_ClockConfig+0x442>
3400762e:	687b      	ldr	r3, [r7, #4]
34007630:	689b      	ldr	r3, [r3, #8]
34007632:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34007636:	d004      	beq.n	34007642 <HAL_RCC_ClockConfig+0x442>
34007638:	f240 4101 	movw	r1, #1025	@ 0x401
3400763c:	4807      	ldr	r0, [pc, #28]	@ (3400765c <HAL_RCC_ClockConfig+0x45c>)
3400763e:	f7fa fb2d 	bl	34001c9c <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34007642:	687b      	ldr	r3, [r7, #4]
34007644:	689b      	ldr	r3, [r3, #8]
34007646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400764a:	d10d      	bne.n	34007668 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
3400764c:	f7fe fe3e 	bl	340062cc <LL_RCC_HSE_IsReady>
34007650:	4603      	mov	r3, r0
34007652:	2b00      	cmp	r3, #0
34007654:	f040 80e0 	bne.w	34007818 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007658:	2301      	movs	r3, #1
3400765a:	e248      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
3400765c:	3401e758 	.word	0x3401e758
34007660:	56028000 	.word	0x56028000
34007664:	340205f4 	.word	0x340205f4
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34007668:	687b      	ldr	r3, [r7, #4]
3400766a:	689b      	ldr	r3, [r3, #8]
3400766c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34007670:	f040 80c0 	bne.w	340077f4 <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34007674:	687b      	ldr	r3, [r7, #4]
34007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007678:	2b00      	cmp	r3, #0
3400767a:	d013      	beq.n	340076a4 <HAL_RCC_ClockConfig+0x4a4>
3400767c:	687b      	ldr	r3, [r7, #4]
3400767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007684:	d00e      	beq.n	340076a4 <HAL_RCC_ClockConfig+0x4a4>
34007686:	687b      	ldr	r3, [r7, #4]
34007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400768a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400768e:	d009      	beq.n	340076a4 <HAL_RCC_ClockConfig+0x4a4>
34007690:	687b      	ldr	r3, [r7, #4]
34007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007698:	d004      	beq.n	340076a4 <HAL_RCC_ClockConfig+0x4a4>
3400769a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
3400769e:	486a      	ldr	r0, [pc, #424]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
340076a0:	f7fa fafc 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
340076a4:	687b      	ldr	r3, [r7, #4]
340076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340076a8:	2b00      	cmp	r3, #0
340076aa:	d004      	beq.n	340076b6 <HAL_RCC_ClockConfig+0x4b6>
340076ac:	687b      	ldr	r3, [r7, #4]
340076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340076b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340076b4:	d904      	bls.n	340076c0 <HAL_RCC_ClockConfig+0x4c0>
340076b6:	f240 4111 	movw	r1, #1041	@ 0x411
340076ba:	4863      	ldr	r0, [pc, #396]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
340076bc:	f7fa faee 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
340076c0:	687b      	ldr	r3, [r7, #4]
340076c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076c4:	2b00      	cmp	r3, #0
340076c6:	d013      	beq.n	340076f0 <HAL_RCC_ClockConfig+0x4f0>
340076c8:	687b      	ldr	r3, [r7, #4]
340076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340076d0:	d00e      	beq.n	340076f0 <HAL_RCC_ClockConfig+0x4f0>
340076d2:	687b      	ldr	r3, [r7, #4]
340076d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340076da:	d009      	beq.n	340076f0 <HAL_RCC_ClockConfig+0x4f0>
340076dc:	687b      	ldr	r3, [r7, #4]
340076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340076e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340076e4:	d004      	beq.n	340076f0 <HAL_RCC_ClockConfig+0x4f0>
340076e6:	f240 4112 	movw	r1, #1042	@ 0x412
340076ea:	4857      	ldr	r0, [pc, #348]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
340076ec:	f7fa fad6 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
340076f0:	687b      	ldr	r3, [r7, #4]
340076f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340076f4:	2b00      	cmp	r3, #0
340076f6:	d004      	beq.n	34007702 <HAL_RCC_ClockConfig+0x502>
340076f8:	687b      	ldr	r3, [r7, #4]
340076fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340076fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007700:	d904      	bls.n	3400770c <HAL_RCC_ClockConfig+0x50c>
34007702:	f240 4113 	movw	r1, #1043	@ 0x413
34007706:	4850      	ldr	r0, [pc, #320]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
34007708:	f7fa fac8 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
3400770c:	687b      	ldr	r3, [r7, #4]
3400770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007710:	2b00      	cmp	r3, #0
34007712:	d013      	beq.n	3400773c <HAL_RCC_ClockConfig+0x53c>
34007714:	687b      	ldr	r3, [r7, #4]
34007716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400771c:	d00e      	beq.n	3400773c <HAL_RCC_ClockConfig+0x53c>
3400771e:	687b      	ldr	r3, [r7, #4]
34007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007726:	d009      	beq.n	3400773c <HAL_RCC_ClockConfig+0x53c>
34007728:	687b      	ldr	r3, [r7, #4]
3400772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400772c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007730:	d004      	beq.n	3400773c <HAL_RCC_ClockConfig+0x53c>
34007732:	f240 4114 	movw	r1, #1044	@ 0x414
34007736:	4844      	ldr	r0, [pc, #272]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
34007738:	f7fa fab0 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
3400773c:	687b      	ldr	r3, [r7, #4]
3400773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007740:	2b00      	cmp	r3, #0
34007742:	d004      	beq.n	3400774e <HAL_RCC_ClockConfig+0x54e>
34007744:	687b      	ldr	r3, [r7, #4]
34007746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400774c:	d904      	bls.n	34007758 <HAL_RCC_ClockConfig+0x558>
3400774e:	f240 4115 	movw	r1, #1045	@ 0x415
34007752:	483d      	ldr	r0, [pc, #244]	@ (34007848 <HAL_RCC_ClockConfig+0x648>)
34007754:	f7fa faa2 	bl	34001c9c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34007758:	f7fe fff8 	bl	3400674c <LL_RCC_IC2_GetSource>
3400775c:	4602      	mov	r2, r0
3400775e:	687b      	ldr	r3, [r7, #4]
34007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34007762:	4619      	mov	r1, r3
34007764:	4610      	mov	r0, r2
34007766:	f000 fd4d 	bl	34008204 <RCC_IC_CheckPLLSources>
3400776a:	4603      	mov	r3, r0
3400776c:	2b01      	cmp	r3, #1
3400776e:	d001      	beq.n	34007774 <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
34007770:	2301      	movs	r3, #1
34007772:	e1bc      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34007774:	f7ff f808 	bl	34006788 <LL_RCC_IC6_GetSource>
34007778:	4602      	mov	r2, r0
3400777a:	687b      	ldr	r3, [r7, #4]
3400777c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3400777e:	4619      	mov	r1, r3
34007780:	4610      	mov	r0, r2
34007782:	f000 fd3f 	bl	34008204 <RCC_IC_CheckPLLSources>
34007786:	4603      	mov	r3, r0
34007788:	2b01      	cmp	r3, #1
3400778a:	d001      	beq.n	34007790 <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
3400778c:	2301      	movs	r3, #1
3400778e:	e1ae      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34007790:	f7ff f808 	bl	340067a4 <LL_RCC_IC11_GetSource>
34007794:	4602      	mov	r2, r0
34007796:	687b      	ldr	r3, [r7, #4]
34007798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400779a:	4619      	mov	r1, r3
3400779c:	4610      	mov	r0, r2
3400779e:	f000 fd31 	bl	34008204 <RCC_IC_CheckPLLSources>
340077a2:	4603      	mov	r3, r0
340077a4:	2b01      	cmp	r3, #1
340077a6:	d001      	beq.n	340077ac <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
340077a8:	2301      	movs	r3, #1
340077aa:	e1a0      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340077ac:	687b      	ldr	r3, [r7, #4]
340077ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340077b0:	687b      	ldr	r3, [r7, #4]
340077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340077b4:	3b01      	subs	r3, #1
340077b6:	041b      	lsls	r3, r3, #16
340077b8:	4924      	ldr	r1, [pc, #144]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
340077ba:	4313      	orrs	r3, r2
340077bc:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
340077c0:	687b      	ldr	r3, [r7, #4]
340077c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340077c4:	687b      	ldr	r3, [r7, #4]
340077c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340077c8:	3b01      	subs	r3, #1
340077ca:	041b      	lsls	r3, r3, #16
340077cc:	491f      	ldr	r1, [pc, #124]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
340077ce:	4313      	orrs	r3, r2
340077d0:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340077d4:	687b      	ldr	r3, [r7, #4]
340077d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340077d8:	687b      	ldr	r3, [r7, #4]
340077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340077dc:	3b01      	subs	r3, #1
340077de:	041b      	lsls	r3, r3, #16
340077e0:	491a      	ldr	r1, [pc, #104]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
340077e2:	4313      	orrs	r3, r2
340077e4:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340077e8:	4b18      	ldr	r3, [pc, #96]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
340077ea:	f240 4222 	movw	r2, #1058	@ 0x422
340077ee:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
340077f2:	e011      	b.n	34007818 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
340077f4:	687b      	ldr	r3, [r7, #4]
340077f6:	689b      	ldr	r3, [r3, #8]
340077f8:	2b00      	cmp	r3, #0
340077fa:	d106      	bne.n	3400780a <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
340077fc:	f7fe fd96 	bl	3400632c <LL_RCC_HSI_IsReady>
34007800:	4603      	mov	r3, r0
34007802:	2b00      	cmp	r3, #0
34007804:	d108      	bne.n	34007818 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007806:	2301      	movs	r3, #1
34007808:	e171      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
3400780a:	f7fe fdf7 	bl	340063fc <LL_RCC_MSI_IsReady>
3400780e:	4603      	mov	r3, r0
34007810:	2b00      	cmp	r3, #0
34007812:	d101      	bne.n	34007818 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007814:	2301      	movs	r3, #1
34007816:	e16a      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34007818:	4b0c      	ldr	r3, [pc, #48]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
3400781a:	6a1b      	ldr	r3, [r3, #32]
3400781c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34007820:	687b      	ldr	r3, [r7, #4]
34007822:	689b      	ldr	r3, [r3, #8]
34007824:	4909      	ldr	r1, [pc, #36]	@ (3400784c <HAL_RCC_ClockConfig+0x64c>)
34007826:	4313      	orrs	r3, r2
34007828:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
3400782a:	f7fc fa59 	bl	34003ce0 <HAL_GetTick>
3400782e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007830:	e00e      	b.n	34007850 <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34007832:	f7fc fa55 	bl	34003ce0 <HAL_GetTick>
34007836:	4602      	mov	r2, r0
34007838:	68fb      	ldr	r3, [r7, #12]
3400783a:	1ad3      	subs	r3, r2, r3
3400783c:	f241 3288 	movw	r2, #5000	@ 0x1388
34007840:	4293      	cmp	r3, r2
34007842:	d905      	bls.n	34007850 <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
34007844:	2303      	movs	r3, #3
34007846:	e152      	b.n	34007aee <HAL_RCC_ClockConfig+0x8ee>
34007848:	3401e758 	.word	0x3401e758
3400784c:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34007850:	f7fe fe6a 	bl	34006528 <LL_RCC_GetSysClkSource>
34007854:	4602      	mov	r2, r0
34007856:	687b      	ldr	r3, [r7, #4]
34007858:	689b      	ldr	r3, [r3, #8]
3400785a:	011b      	lsls	r3, r3, #4
3400785c:	429a      	cmp	r2, r3
3400785e:	d1e8      	bne.n	34007832 <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34007860:	687b      	ldr	r3, [r7, #4]
34007862:	681b      	ldr	r3, [r3, #0]
34007864:	f003 0304 	and.w	r3, r3, #4
34007868:	2b00      	cmp	r3, #0
3400786a:	d03c      	beq.n	340078e6 <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3400786c:	687b      	ldr	r3, [r7, #4]
3400786e:	68db      	ldr	r3, [r3, #12]
34007870:	2b00      	cmp	r3, #0
34007872:	d027      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
34007874:	687b      	ldr	r3, [r7, #4]
34007876:	68db      	ldr	r3, [r3, #12]
34007878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400787c:	d022      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
3400787e:	687b      	ldr	r3, [r7, #4]
34007880:	68db      	ldr	r3, [r3, #12]
34007882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007886:	d01d      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
34007888:	687b      	ldr	r3, [r7, #4]
3400788a:	68db      	ldr	r3, [r3, #12]
3400788c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007890:	d018      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
34007892:	687b      	ldr	r3, [r7, #4]
34007894:	68db      	ldr	r3, [r3, #12]
34007896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3400789a:	d013      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
3400789c:	687b      	ldr	r3, [r7, #4]
3400789e:	68db      	ldr	r3, [r3, #12]
340078a0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
340078a4:	d00e      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
340078a6:	687b      	ldr	r3, [r7, #4]
340078a8:	68db      	ldr	r3, [r3, #12]
340078aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
340078ae:	d009      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
340078b0:	687b      	ldr	r3, [r7, #4]
340078b2:	68db      	ldr	r3, [r3, #12]
340078b4:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
340078b8:	d004      	beq.n	340078c4 <HAL_RCC_ClockConfig+0x6c4>
340078ba:	f44f 618b 	mov.w	r1, #1112	@ 0x458
340078be:	488e      	ldr	r0, [pc, #568]	@ (34007af8 <HAL_RCC_ClockConfig+0x8f8>)
340078c0:	f7fa f9ec 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
340078c4:	687b      	ldr	r3, [r7, #4]
340078c6:	68da      	ldr	r2, [r3, #12]
340078c8:	4b8c      	ldr	r3, [pc, #560]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078cc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340078d0:	429a      	cmp	r2, r3
340078d2:	d208      	bcs.n	340078e6 <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340078d4:	4b89      	ldr	r3, [pc, #548]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340078d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340078d8:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340078dc:	687b      	ldr	r3, [r7, #4]
340078de:	68db      	ldr	r3, [r3, #12]
340078e0:	4986      	ldr	r1, [pc, #536]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340078e2:	4313      	orrs	r3, r2
340078e4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340078e6:	687b      	ldr	r3, [r7, #4]
340078e8:	681b      	ldr	r3, [r3, #0]
340078ea:	f003 0308 	and.w	r3, r3, #8
340078ee:	2b00      	cmp	r3, #0
340078f0:	d035      	beq.n	3400795e <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340078f2:	687b      	ldr	r3, [r7, #4]
340078f4:	691b      	ldr	r3, [r3, #16]
340078f6:	2b00      	cmp	r3, #0
340078f8:	d020      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
340078fa:	687b      	ldr	r3, [r7, #4]
340078fc:	691b      	ldr	r3, [r3, #16]
340078fe:	2b01      	cmp	r3, #1
34007900:	d01c      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
34007902:	687b      	ldr	r3, [r7, #4]
34007904:	691b      	ldr	r3, [r3, #16]
34007906:	2b02      	cmp	r3, #2
34007908:	d018      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
3400790a:	687b      	ldr	r3, [r7, #4]
3400790c:	691b      	ldr	r3, [r3, #16]
3400790e:	2b03      	cmp	r3, #3
34007910:	d014      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
34007912:	687b      	ldr	r3, [r7, #4]
34007914:	691b      	ldr	r3, [r3, #16]
34007916:	2b04      	cmp	r3, #4
34007918:	d010      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
3400791a:	687b      	ldr	r3, [r7, #4]
3400791c:	691b      	ldr	r3, [r3, #16]
3400791e:	2b05      	cmp	r3, #5
34007920:	d00c      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
34007922:	687b      	ldr	r3, [r7, #4]
34007924:	691b      	ldr	r3, [r3, #16]
34007926:	2b06      	cmp	r3, #6
34007928:	d008      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
3400792a:	687b      	ldr	r3, [r7, #4]
3400792c:	691b      	ldr	r3, [r3, #16]
3400792e:	2b07      	cmp	r3, #7
34007930:	d004      	beq.n	3400793c <HAL_RCC_ClockConfig+0x73c>
34007932:	f240 4163 	movw	r1, #1123	@ 0x463
34007936:	4870      	ldr	r0, [pc, #448]	@ (34007af8 <HAL_RCC_ClockConfig+0x8f8>)
34007938:	f7fa f9b0 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3400793c:	687b      	ldr	r3, [r7, #4]
3400793e:	691a      	ldr	r2, [r3, #16]
34007940:	4b6e      	ldr	r3, [pc, #440]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007944:	f003 0307 	and.w	r3, r3, #7
34007948:	429a      	cmp	r2, r3
3400794a:	d208      	bcs.n	3400795e <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3400794c:	4b6b      	ldr	r3, [pc, #428]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
3400794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007950:	f023 0207 	bic.w	r2, r3, #7
34007954:	687b      	ldr	r3, [r7, #4]
34007956:	691b      	ldr	r3, [r3, #16]
34007958:	4968      	ldr	r1, [pc, #416]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
3400795a:	4313      	orrs	r3, r2
3400795c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3400795e:	687b      	ldr	r3, [r7, #4]
34007960:	681b      	ldr	r3, [r3, #0]
34007962:	f003 0310 	and.w	r3, r3, #16
34007966:	2b00      	cmp	r3, #0
34007968:	d035      	beq.n	340079d6 <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
3400796a:	687b      	ldr	r3, [r7, #4]
3400796c:	695b      	ldr	r3, [r3, #20]
3400796e:	2b00      	cmp	r3, #0
34007970:	d020      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
34007972:	687b      	ldr	r3, [r7, #4]
34007974:	695b      	ldr	r3, [r3, #20]
34007976:	2b10      	cmp	r3, #16
34007978:	d01c      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
3400797a:	687b      	ldr	r3, [r7, #4]
3400797c:	695b      	ldr	r3, [r3, #20]
3400797e:	2b20      	cmp	r3, #32
34007980:	d018      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
34007982:	687b      	ldr	r3, [r7, #4]
34007984:	695b      	ldr	r3, [r3, #20]
34007986:	2b30      	cmp	r3, #48	@ 0x30
34007988:	d014      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
3400798a:	687b      	ldr	r3, [r7, #4]
3400798c:	695b      	ldr	r3, [r3, #20]
3400798e:	2b40      	cmp	r3, #64	@ 0x40
34007990:	d010      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
34007992:	687b      	ldr	r3, [r7, #4]
34007994:	695b      	ldr	r3, [r3, #20]
34007996:	2b50      	cmp	r3, #80	@ 0x50
34007998:	d00c      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
3400799a:	687b      	ldr	r3, [r7, #4]
3400799c:	695b      	ldr	r3, [r3, #20]
3400799e:	2b60      	cmp	r3, #96	@ 0x60
340079a0:	d008      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
340079a2:	687b      	ldr	r3, [r7, #4]
340079a4:	695b      	ldr	r3, [r3, #20]
340079a6:	2b70      	cmp	r3, #112	@ 0x70
340079a8:	d004      	beq.n	340079b4 <HAL_RCC_ClockConfig+0x7b4>
340079aa:	f240 416d 	movw	r1, #1133	@ 0x46d
340079ae:	4852      	ldr	r0, [pc, #328]	@ (34007af8 <HAL_RCC_ClockConfig+0x8f8>)
340079b0:	f7fa f974 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340079b4:	687b      	ldr	r3, [r7, #4]
340079b6:	695a      	ldr	r2, [r3, #20]
340079b8:	4b50      	ldr	r3, [pc, #320]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340079c0:	429a      	cmp	r2, r3
340079c2:	d208      	bcs.n	340079d6 <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340079c4:	4b4d      	ldr	r3, [pc, #308]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340079c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
340079cc:	687b      	ldr	r3, [r7, #4]
340079ce:	695b      	ldr	r3, [r3, #20]
340079d0:	494a      	ldr	r1, [pc, #296]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
340079d2:	4313      	orrs	r3, r2
340079d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340079d6:	687b      	ldr	r3, [r7, #4]
340079d8:	681b      	ldr	r3, [r3, #0]
340079da:	f003 0320 	and.w	r3, r3, #32
340079de:	2b00      	cmp	r3, #0
340079e0:	d03c      	beq.n	34007a5c <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340079e2:	687b      	ldr	r3, [r7, #4]
340079e4:	699b      	ldr	r3, [r3, #24]
340079e6:	2b00      	cmp	r3, #0
340079e8:	d027      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
340079ea:	687b      	ldr	r3, [r7, #4]
340079ec:	699b      	ldr	r3, [r3, #24]
340079ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340079f2:	d022      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
340079f4:	687b      	ldr	r3, [r7, #4]
340079f6:	699b      	ldr	r3, [r3, #24]
340079f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340079fc:	d01d      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
340079fe:	687b      	ldr	r3, [r7, #4]
34007a00:	699b      	ldr	r3, [r3, #24]
34007a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34007a06:	d018      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
34007a08:	687b      	ldr	r3, [r7, #4]
34007a0a:	699b      	ldr	r3, [r3, #24]
34007a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34007a10:	d013      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
34007a12:	687b      	ldr	r3, [r7, #4]
34007a14:	699b      	ldr	r3, [r3, #24]
34007a16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007a1a:	d00e      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
34007a1c:	687b      	ldr	r3, [r7, #4]
34007a1e:	699b      	ldr	r3, [r3, #24]
34007a20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34007a24:	d009      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
34007a26:	687b      	ldr	r3, [r7, #4]
34007a28:	699b      	ldr	r3, [r3, #24]
34007a2a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34007a2e:	d004      	beq.n	34007a3a <HAL_RCC_ClockConfig+0x83a>
34007a30:	f240 4177 	movw	r1, #1143	@ 0x477
34007a34:	4830      	ldr	r0, [pc, #192]	@ (34007af8 <HAL_RCC_ClockConfig+0x8f8>)
34007a36:	f7fa f931 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007a3a:	687b      	ldr	r3, [r7, #4]
34007a3c:	699a      	ldr	r2, [r3, #24]
34007a3e:	4b2f      	ldr	r3, [pc, #188]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a42:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34007a46:	429a      	cmp	r2, r3
34007a48:	d208      	bcs.n	34007a5c <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007a4a:	4b2c      	ldr	r3, [pc, #176]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007a4e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34007a52:	687b      	ldr	r3, [r7, #4]
34007a54:	699b      	ldr	r3, [r3, #24]
34007a56:	4929      	ldr	r1, [pc, #164]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007a58:	4313      	orrs	r3, r2
34007a5a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34007a5c:	687b      	ldr	r3, [r7, #4]
34007a5e:	681b      	ldr	r3, [r3, #0]
34007a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34007a64:	2b00      	cmp	r3, #0
34007a66:	d03c      	beq.n	34007ae2 <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34007a68:	687b      	ldr	r3, [r7, #4]
34007a6a:	69db      	ldr	r3, [r3, #28]
34007a6c:	2b00      	cmp	r3, #0
34007a6e:	d027      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007a70:	687b      	ldr	r3, [r7, #4]
34007a72:	69db      	ldr	r3, [r3, #28]
34007a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007a78:	d022      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007a7a:	687b      	ldr	r3, [r7, #4]
34007a7c:	69db      	ldr	r3, [r3, #28]
34007a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34007a82:	d01d      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007a84:	687b      	ldr	r3, [r7, #4]
34007a86:	69db      	ldr	r3, [r3, #28]
34007a88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007a8c:	d018      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007a8e:	687b      	ldr	r3, [r7, #4]
34007a90:	69db      	ldr	r3, [r3, #28]
34007a92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34007a96:	d013      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007a98:	687b      	ldr	r3, [r7, #4]
34007a9a:	69db      	ldr	r3, [r3, #28]
34007a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34007aa0:	d00e      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007aa2:	687b      	ldr	r3, [r7, #4]
34007aa4:	69db      	ldr	r3, [r3, #28]
34007aa6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34007aaa:	d009      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007aac:	687b      	ldr	r3, [r7, #4]
34007aae:	69db      	ldr	r3, [r3, #28]
34007ab0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34007ab4:	d004      	beq.n	34007ac0 <HAL_RCC_ClockConfig+0x8c0>
34007ab6:	f240 4181 	movw	r1, #1153	@ 0x481
34007aba:	480f      	ldr	r0, [pc, #60]	@ (34007af8 <HAL_RCC_ClockConfig+0x8f8>)
34007abc:	f7fa f8ee 	bl	34001c9c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34007ac0:	687b      	ldr	r3, [r7, #4]
34007ac2:	69da      	ldr	r2, [r3, #28]
34007ac4:	4b0d      	ldr	r3, [pc, #52]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007ac8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34007acc:	429a      	cmp	r2, r3
34007ace:	d208      	bcs.n	34007ae2 <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34007ad0:	4b0a      	ldr	r3, [pc, #40]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007ad4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007ad8:	687b      	ldr	r3, [r7, #4]
34007ada:	69db      	ldr	r3, [r3, #28]
34007adc:	4907      	ldr	r1, [pc, #28]	@ (34007afc <HAL_RCC_ClockConfig+0x8fc>)
34007ade:	4313      	orrs	r3, r2
34007ae0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34007ae2:	4b07      	ldr	r3, [pc, #28]	@ (34007b00 <HAL_RCC_ClockConfig+0x900>)
34007ae4:	681b      	ldr	r3, [r3, #0]
34007ae6:	4618      	mov	r0, r3
34007ae8:	f7fc f8b0 	bl	34003c4c <HAL_InitTick>
34007aec:	4603      	mov	r3, r0
}
34007aee:	4618      	mov	r0, r3
34007af0:	3710      	adds	r7, #16
34007af2:	46bd      	mov	sp, r7
34007af4:	bd80      	pop	{r7, pc}
34007af6:	bf00      	nop
34007af8:	3401e758 	.word	0x3401e758
34007afc:	56028000 	.word	0x56028000
34007b00:	340205f8 	.word	0x340205f8

34007b04 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34007b04:	b580      	push	{r7, lr}
34007b06:	b082      	sub	sp, #8
34007b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007b0a:	2300      	movs	r3, #0
34007b0c:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34007b0e:	f7fe fcfd 	bl	3400650c <LL_RCC_GetCpuClkSource>
34007b12:	4603      	mov	r3, r0
34007b14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007b18:	d025      	beq.n	34007b66 <HAL_RCC_GetCpuClockFreq+0x62>
34007b1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007b1e:	d860      	bhi.n	34007be2 <HAL_RCC_GetCpuClockFreq+0xde>
34007b20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007b24:	d01c      	beq.n	34007b60 <HAL_RCC_GetCpuClockFreq+0x5c>
34007b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007b2a:	d85a      	bhi.n	34007be2 <HAL_RCC_GetCpuClockFreq+0xde>
34007b2c:	2b00      	cmp	r3, #0
34007b2e:	d003      	beq.n	34007b38 <HAL_RCC_GetCpuClockFreq+0x34>
34007b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007b34:	d009      	beq.n	34007b4a <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007b36:	e054      	b.n	34007be2 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007b38:	f7fe fc1e 	bl	34006378 <LL_RCC_HSI_GetDivider>
34007b3c:	4603      	mov	r3, r0
34007b3e:	09db      	lsrs	r3, r3, #7
34007b40:	4a2b      	ldr	r2, [pc, #172]	@ (34007bf0 <HAL_RCC_GetCpuClockFreq+0xec>)
34007b42:	fa22 f303 	lsr.w	r3, r2, r3
34007b46:	607b      	str	r3, [r7, #4]
      break;
34007b48:	e04c      	b.n	34007be4 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007b4a:	f7fe fc7d 	bl	34006448 <LL_RCC_MSI_GetFrequency>
34007b4e:	4603      	mov	r3, r0
34007b50:	2b00      	cmp	r3, #0
34007b52:	d102      	bne.n	34007b5a <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34007b54:	4b27      	ldr	r3, [pc, #156]	@ (34007bf4 <HAL_RCC_GetCpuClockFreq+0xf0>)
34007b56:	607b      	str	r3, [r7, #4]
      break;
34007b58:	e044      	b.n	34007be4 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34007b5a:	4b27      	ldr	r3, [pc, #156]	@ (34007bf8 <HAL_RCC_GetCpuClockFreq+0xf4>)
34007b5c:	607b      	str	r3, [r7, #4]
      break;
34007b5e:	e041      	b.n	34007be4 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34007b60:	4b26      	ldr	r3, [pc, #152]	@ (34007bfc <HAL_RCC_GetCpuClockFreq+0xf8>)
34007b62:	607b      	str	r3, [r7, #4]
      break;
34007b64:	e03e      	b.n	34007be4 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34007b66:	f7fe fde1 	bl	3400672c <LL_RCC_IC1_GetDivider>
34007b6a:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34007b6c:	f7fe fdd0 	bl	34006710 <LL_RCC_IC1_GetSource>
34007b70:	4603      	mov	r3, r0
34007b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b76:	d029      	beq.n	34007bcc <HAL_RCC_GetCpuClockFreq+0xc8>
34007b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b7c:	d82f      	bhi.n	34007bde <HAL_RCC_GetCpuClockFreq+0xda>
34007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b82:	d01a      	beq.n	34007bba <HAL_RCC_GetCpuClockFreq+0xb6>
34007b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b88:	d829      	bhi.n	34007bde <HAL_RCC_GetCpuClockFreq+0xda>
34007b8a:	2b00      	cmp	r3, #0
34007b8c:	d003      	beq.n	34007b96 <HAL_RCC_GetCpuClockFreq+0x92>
34007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007b92:	d009      	beq.n	34007ba8 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34007b94:	e023      	b.n	34007bde <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007b96:	f009 f813 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34007b9a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007b9c:	687a      	ldr	r2, [r7, #4]
34007b9e:	683b      	ldr	r3, [r7, #0]
34007ba0:	fbb2 f3f3 	udiv	r3, r2, r3
34007ba4:	607b      	str	r3, [r7, #4]
          break;
34007ba6:	e01b      	b.n	34007be0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007ba8:	f009 f850 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34007bac:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bae:	687a      	ldr	r2, [r7, #4]
34007bb0:	683b      	ldr	r3, [r7, #0]
34007bb2:	fbb2 f3f3 	udiv	r3, r2, r3
34007bb6:	607b      	str	r3, [r7, #4]
          break;
34007bb8:	e012      	b.n	34007be0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007bba:	f009 f88d 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34007bbe:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bc0:	687a      	ldr	r2, [r7, #4]
34007bc2:	683b      	ldr	r3, [r7, #0]
34007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
34007bc8:	607b      	str	r3, [r7, #4]
          break;
34007bca:	e009      	b.n	34007be0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007bcc:	f009 f8ca 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34007bd0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007bd2:	687a      	ldr	r2, [r7, #4]
34007bd4:	683b      	ldr	r3, [r7, #0]
34007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
34007bda:	607b      	str	r3, [r7, #4]
          break;
34007bdc:	e000      	b.n	34007be0 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34007bde:	bf00      	nop
      break;
34007be0:	e000      	b.n	34007be4 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34007be2:	bf00      	nop
  }

  return frequency;
34007be4:	687b      	ldr	r3, [r7, #4]
}
34007be6:	4618      	mov	r0, r3
34007be8:	3708      	adds	r7, #8
34007bea:	46bd      	mov	sp, r7
34007bec:	bd80      	pop	{r7, pc}
34007bee:	bf00      	nop
34007bf0:	03d09000 	.word	0x03d09000
34007bf4:	003d0900 	.word	0x003d0900
34007bf8:	00f42400 	.word	0x00f42400
34007bfc:	02dc6c00 	.word	0x02dc6c00

34007c00 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34007c00:	b580      	push	{r7, lr}
34007c02:	b082      	sub	sp, #8
34007c04:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007c06:	2300      	movs	r3, #0
34007c08:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34007c0a:	f7fe fc8d 	bl	34006528 <LL_RCC_GetSysClkSource>
34007c0e:	4603      	mov	r3, r0
34007c10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c14:	d025      	beq.n	34007c62 <HAL_RCC_GetSysClockFreq+0x62>
34007c16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c1a:	d860      	bhi.n	34007cde <HAL_RCC_GetSysClockFreq+0xde>
34007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c20:	d01c      	beq.n	34007c5c <HAL_RCC_GetSysClockFreq+0x5c>
34007c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c26:	d85a      	bhi.n	34007cde <HAL_RCC_GetSysClockFreq+0xde>
34007c28:	2b00      	cmp	r3, #0
34007c2a:	d003      	beq.n	34007c34 <HAL_RCC_GetSysClockFreq+0x34>
34007c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007c30:	d009      	beq.n	34007c46 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007c32:	e054      	b.n	34007cde <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007c34:	f7fe fba0 	bl	34006378 <LL_RCC_HSI_GetDivider>
34007c38:	4603      	mov	r3, r0
34007c3a:	09db      	lsrs	r3, r3, #7
34007c3c:	4a2b      	ldr	r2, [pc, #172]	@ (34007cec <HAL_RCC_GetSysClockFreq+0xec>)
34007c3e:	fa22 f303 	lsr.w	r3, r2, r3
34007c42:	607b      	str	r3, [r7, #4]
      break;
34007c44:	e04c      	b.n	34007ce0 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007c46:	f7fe fbff 	bl	34006448 <LL_RCC_MSI_GetFrequency>
34007c4a:	4603      	mov	r3, r0
34007c4c:	2b00      	cmp	r3, #0
34007c4e:	d102      	bne.n	34007c56 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34007c50:	4b27      	ldr	r3, [pc, #156]	@ (34007cf0 <HAL_RCC_GetSysClockFreq+0xf0>)
34007c52:	607b      	str	r3, [r7, #4]
      break;
34007c54:	e044      	b.n	34007ce0 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34007c56:	4b27      	ldr	r3, [pc, #156]	@ (34007cf4 <HAL_RCC_GetSysClockFreq+0xf4>)
34007c58:	607b      	str	r3, [r7, #4]
      break;
34007c5a:	e041      	b.n	34007ce0 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34007c5c:	4b26      	ldr	r3, [pc, #152]	@ (34007cf8 <HAL_RCC_GetSysClockFreq+0xf8>)
34007c5e:	607b      	str	r3, [r7, #4]
      break;
34007c60:	e03e      	b.n	34007ce0 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34007c62:	f7fe fd81 	bl	34006768 <LL_RCC_IC2_GetDivider>
34007c66:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34007c68:	f7fe fd70 	bl	3400674c <LL_RCC_IC2_GetSource>
34007c6c:	4603      	mov	r3, r0
34007c6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c72:	d029      	beq.n	34007cc8 <HAL_RCC_GetSysClockFreq+0xc8>
34007c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007c78:	d82f      	bhi.n	34007cda <HAL_RCC_GetSysClockFreq+0xda>
34007c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c7e:	d01a      	beq.n	34007cb6 <HAL_RCC_GetSysClockFreq+0xb6>
34007c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007c84:	d829      	bhi.n	34007cda <HAL_RCC_GetSysClockFreq+0xda>
34007c86:	2b00      	cmp	r3, #0
34007c88:	d003      	beq.n	34007c92 <HAL_RCC_GetSysClockFreq+0x92>
34007c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007c8e:	d009      	beq.n	34007ca4 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34007c90:	e023      	b.n	34007cda <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007c92:	f008 ff95 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34007c96:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007c98:	687a      	ldr	r2, [r7, #4]
34007c9a:	683b      	ldr	r3, [r7, #0]
34007c9c:	fbb2 f3f3 	udiv	r3, r2, r3
34007ca0:	607b      	str	r3, [r7, #4]
          break;
34007ca2:	e01b      	b.n	34007cdc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007ca4:	f008 ffd2 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34007ca8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007caa:	687a      	ldr	r2, [r7, #4]
34007cac:	683b      	ldr	r3, [r7, #0]
34007cae:	fbb2 f3f3 	udiv	r3, r2, r3
34007cb2:	607b      	str	r3, [r7, #4]
          break;
34007cb4:	e012      	b.n	34007cdc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007cb6:	f009 f80f 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34007cba:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007cbc:	687a      	ldr	r2, [r7, #4]
34007cbe:	683b      	ldr	r3, [r7, #0]
34007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
34007cc4:	607b      	str	r3, [r7, #4]
          break;
34007cc6:	e009      	b.n	34007cdc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007cc8:	f009 f84c 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34007ccc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34007cce:	687a      	ldr	r2, [r7, #4]
34007cd0:	683b      	ldr	r3, [r7, #0]
34007cd2:	fbb2 f3f3 	udiv	r3, r2, r3
34007cd6:	607b      	str	r3, [r7, #4]
          break;
34007cd8:	e000      	b.n	34007cdc <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34007cda:	bf00      	nop
      break;
34007cdc:	e000      	b.n	34007ce0 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34007cde:	bf00      	nop
  }

  return frequency;
34007ce0:	687b      	ldr	r3, [r7, #4]
}
34007ce2:	4618      	mov	r0, r3
34007ce4:	3708      	adds	r7, #8
34007ce6:	46bd      	mov	sp, r7
34007ce8:	bd80      	pop	{r7, pc}
34007cea:	bf00      	nop
34007cec:	03d09000 	.word	0x03d09000
34007cf0:	003d0900 	.word	0x003d0900
34007cf4:	00f42400 	.word	0x00f42400
34007cf8:	02dc6c00 	.word	0x02dc6c00

34007cfc <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34007cfc:	b580      	push	{r7, lr}
34007cfe:	b088      	sub	sp, #32
34007d00:	af00      	add	r7, sp, #0
34007d02:	6078      	str	r0, [r7, #4]
34007d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34007d06:	2300      	movs	r3, #0
34007d08:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34007d0a:	687b      	ldr	r3, [r7, #4]
34007d0c:	011a      	lsls	r2, r3, #4
34007d0e:	4b9a      	ldr	r3, [pc, #616]	@ (34007f78 <RCC_PLL_Config+0x27c>)
34007d10:	4413      	add	r3, r2
34007d12:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34007d14:	687b      	ldr	r3, [r7, #4]
34007d16:	011a      	lsls	r2, r3, #4
34007d18:	4b98      	ldr	r3, [pc, #608]	@ (34007f7c <RCC_PLL_Config+0x280>)
34007d1a:	4413      	add	r3, r2
34007d1c:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34007d1e:	687b      	ldr	r3, [r7, #4]
34007d20:	011a      	lsls	r2, r3, #4
34007d22:	4b97      	ldr	r3, [pc, #604]	@ (34007f80 <RCC_PLL_Config+0x284>)
34007d24:	4413      	add	r3, r2
34007d26:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34007d28:	683b      	ldr	r3, [r7, #0]
34007d2a:	681b      	ldr	r3, [r3, #0]
34007d2c:	2b02      	cmp	r3, #2
34007d2e:	f040 80e9 	bne.w	34007f04 <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007d32:	683b      	ldr	r3, [r7, #0]
34007d34:	685b      	ldr	r3, [r3, #4]
34007d36:	2b00      	cmp	r3, #0
34007d38:	d013      	beq.n	34007d62 <RCC_PLL_Config+0x66>
34007d3a:	683b      	ldr	r3, [r7, #0]
34007d3c:	685b      	ldr	r3, [r3, #4]
34007d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007d42:	d00e      	beq.n	34007d62 <RCC_PLL_Config+0x66>
34007d44:	683b      	ldr	r3, [r7, #0]
34007d46:	685b      	ldr	r3, [r3, #4]
34007d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007d4c:	d009      	beq.n	34007d62 <RCC_PLL_Config+0x66>
34007d4e:	683b      	ldr	r3, [r7, #0]
34007d50:	685b      	ldr	r3, [r3, #4]
34007d52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007d56:	d004      	beq.n	34007d62 <RCC_PLL_Config+0x66>
34007d58:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34007d5c:	4889      	ldr	r0, [pc, #548]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007d5e:	f7f9 ff9d 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34007d62:	683b      	ldr	r3, [r7, #0]
34007d64:	68db      	ldr	r3, [r3, #12]
34007d66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34007d6a:	d304      	bcc.n	34007d76 <RCC_PLL_Config+0x7a>
34007d6c:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34007d70:	4884      	ldr	r0, [pc, #528]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007d72:	f7f9 ff93 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34007d76:	683b      	ldr	r3, [r7, #0]
34007d78:	689b      	ldr	r3, [r3, #8]
34007d7a:	2b00      	cmp	r3, #0
34007d7c:	d003      	beq.n	34007d86 <RCC_PLL_Config+0x8a>
34007d7e:	683b      	ldr	r3, [r7, #0]
34007d80:	689b      	ldr	r3, [r3, #8]
34007d82:	2b3f      	cmp	r3, #63	@ 0x3f
34007d84:	d904      	bls.n	34007d90 <RCC_PLL_Config+0x94>
34007d86:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34007d8a:	487e      	ldr	r0, [pc, #504]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007d8c:	f7f9 ff86 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34007d90:	683b      	ldr	r3, [r7, #0]
34007d92:	691b      	ldr	r3, [r3, #16]
34007d94:	2b09      	cmp	r3, #9
34007d96:	d905      	bls.n	34007da4 <RCC_PLL_Config+0xa8>
34007d98:	683b      	ldr	r3, [r7, #0]
34007d9a:	691b      	ldr	r3, [r3, #16]
34007d9c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
34007da0:	4293      	cmp	r3, r2
34007da2:	d904      	bls.n	34007dae <RCC_PLL_Config+0xb2>
34007da4:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34007da8:	4876      	ldr	r0, [pc, #472]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007daa:	f7f9 ff77 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34007dae:	683b      	ldr	r3, [r7, #0]
34007db0:	695b      	ldr	r3, [r3, #20]
34007db2:	2b00      	cmp	r3, #0
34007db4:	d003      	beq.n	34007dbe <RCC_PLL_Config+0xc2>
34007db6:	683b      	ldr	r3, [r7, #0]
34007db8:	695b      	ldr	r3, [r3, #20]
34007dba:	2b07      	cmp	r3, #7
34007dbc:	d904      	bls.n	34007dc8 <RCC_PLL_Config+0xcc>
34007dbe:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34007dc2:	4870      	ldr	r0, [pc, #448]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007dc4:	f7f9 ff6a 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34007dc8:	683b      	ldr	r3, [r7, #0]
34007dca:	699b      	ldr	r3, [r3, #24]
34007dcc:	2b00      	cmp	r3, #0
34007dce:	d003      	beq.n	34007dd8 <RCC_PLL_Config+0xdc>
34007dd0:	683b      	ldr	r3, [r7, #0]
34007dd2:	699b      	ldr	r3, [r3, #24]
34007dd4:	2b07      	cmp	r3, #7
34007dd6:	d904      	bls.n	34007de2 <RCC_PLL_Config+0xe6>
34007dd8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34007ddc:	4869      	ldr	r0, [pc, #420]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007dde:	f7f9 ff5d 	bl	34001c9c <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007de2:	4a69      	ldr	r2, [pc, #420]	@ (34007f88 <RCC_PLL_Config+0x28c>)
34007de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007de8:	687b      	ldr	r3, [r7, #4]
34007dea:	fa01 f303 	lsl.w	r3, r1, r3
34007dee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007df4:	f7fb ff74 	bl	34003ce0 <HAL_GetTick>
34007df8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007dfa:	e008      	b.n	34007e0e <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007dfc:	f7fb ff70 	bl	34003ce0 <HAL_GetTick>
34007e00:	4602      	mov	r2, r0
34007e02:	68fb      	ldr	r3, [r7, #12]
34007e04:	1ad3      	subs	r3, r2, r3
34007e06:	2b01      	cmp	r3, #1
34007e08:	d901      	bls.n	34007e0e <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
34007e0a:	2303      	movs	r3, #3
34007e0c:	e114      	b.n	34008038 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007e0e:	4b5e      	ldr	r3, [pc, #376]	@ (34007f88 <RCC_PLL_Config+0x28c>)
34007e10:	685a      	ldr	r2, [r3, #4]
34007e12:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e16:	687b      	ldr	r3, [r7, #4]
34007e18:	fa01 f303 	lsl.w	r3, r1, r3
34007e1c:	401a      	ands	r2, r3
34007e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007e22:	687b      	ldr	r3, [r7, #4]
34007e24:	fa01 f303 	lsl.w	r3, r1, r3
34007e28:	429a      	cmp	r2, r3
34007e2a:	d0e7      	beq.n	34007dfc <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34007e2c:	693b      	ldr	r3, [r7, #16]
34007e2e:	681b      	ldr	r3, [r3, #0]
34007e30:	f043 0204 	orr.w	r2, r3, #4
34007e34:	693b      	ldr	r3, [r7, #16]
34007e36:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007e38:	69bb      	ldr	r3, [r7, #24]
34007e3a:	681b      	ldr	r3, [r3, #0]
34007e3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34007e40:	69bb      	ldr	r3, [r7, #24]
34007e42:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34007e44:	69bb      	ldr	r3, [r7, #24]
34007e46:	681a      	ldr	r2, [r3, #0]
34007e48:	4b50      	ldr	r3, [pc, #320]	@ (34007f8c <RCC_PLL_Config+0x290>)
34007e4a:	4013      	ands	r3, r2
34007e4c:	683a      	ldr	r2, [r7, #0]
34007e4e:	6851      	ldr	r1, [r2, #4]
34007e50:	683a      	ldr	r2, [r7, #0]
34007e52:	6892      	ldr	r2, [r2, #8]
34007e54:	0512      	lsls	r2, r2, #20
34007e56:	4311      	orrs	r1, r2
34007e58:	683a      	ldr	r2, [r7, #0]
34007e5a:	6912      	ldr	r2, [r2, #16]
34007e5c:	0212      	lsls	r2, r2, #8
34007e5e:	430a      	orrs	r2, r1
34007e60:	431a      	orrs	r2, r3
34007e62:	69bb      	ldr	r3, [r7, #24]
34007e64:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34007e66:	693b      	ldr	r3, [r7, #16]
34007e68:	681b      	ldr	r3, [r3, #0]
34007e6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34007e6e:	683b      	ldr	r3, [r7, #0]
34007e70:	695b      	ldr	r3, [r3, #20]
34007e72:	06d9      	lsls	r1, r3, #27
34007e74:	683b      	ldr	r3, [r7, #0]
34007e76:	699b      	ldr	r3, [r3, #24]
34007e78:	061b      	lsls	r3, r3, #24
34007e7a:	430b      	orrs	r3, r1
34007e7c:	431a      	orrs	r2, r3
34007e7e:	693b      	ldr	r3, [r7, #16]
34007e80:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34007e82:	697b      	ldr	r3, [r7, #20]
34007e84:	681b      	ldr	r3, [r3, #0]
34007e86:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34007e8a:	683b      	ldr	r3, [r7, #0]
34007e8c:	68db      	ldr	r3, [r3, #12]
34007e8e:	431a      	orrs	r2, r3
34007e90:	697b      	ldr	r3, [r7, #20]
34007e92:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34007e94:	693b      	ldr	r3, [r7, #16]
34007e96:	681b      	ldr	r3, [r3, #0]
34007e98:	f023 0208 	bic.w	r2, r3, #8
34007e9c:	693b      	ldr	r3, [r7, #16]
34007e9e:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
34007ea0:	683b      	ldr	r3, [r7, #0]
34007ea2:	68db      	ldr	r3, [r3, #12]
34007ea4:	2b00      	cmp	r3, #0
34007ea6:	d005      	beq.n	34007eb4 <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34007ea8:	693b      	ldr	r3, [r7, #16]
34007eaa:	681b      	ldr	r3, [r3, #0]
34007eac:	f043 020a 	orr.w	r2, r3, #10
34007eb0:	693b      	ldr	r3, [r7, #16]
34007eb2:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34007eb4:	693b      	ldr	r3, [r7, #16]
34007eb6:	681b      	ldr	r3, [r3, #0]
34007eb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34007ebc:	f043 0301 	orr.w	r3, r3, #1
34007ec0:	693a      	ldr	r2, [r7, #16]
34007ec2:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34007ec4:	4a30      	ldr	r2, [pc, #192]	@ (34007f88 <RCC_PLL_Config+0x28c>)
34007ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007eca:	687b      	ldr	r3, [r7, #4]
34007ecc:	fa01 f303 	lsl.w	r3, r1, r3
34007ed0:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007ed4:	f7fb ff04 	bl	34003ce0 <HAL_GetTick>
34007ed8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007eda:	e008      	b.n	34007eee <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007edc:	f7fb ff00 	bl	34003ce0 <HAL_GetTick>
34007ee0:	4602      	mov	r2, r0
34007ee2:	68fb      	ldr	r3, [r7, #12]
34007ee4:	1ad3      	subs	r3, r2, r3
34007ee6:	2b01      	cmp	r3, #1
34007ee8:	d901      	bls.n	34007eee <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
34007eea:	2303      	movs	r3, #3
34007eec:	e0a4      	b.n	34008038 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007eee:	4b26      	ldr	r3, [pc, #152]	@ (34007f88 <RCC_PLL_Config+0x28c>)
34007ef0:	685a      	ldr	r2, [r3, #4]
34007ef2:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007ef6:	687b      	ldr	r3, [r7, #4]
34007ef8:	fa01 f303 	lsl.w	r3, r1, r3
34007efc:	4013      	ands	r3, r2
34007efe:	2b00      	cmp	r3, #0
34007f00:	d0ec      	beq.n	34007edc <RCC_PLL_Config+0x1e0>
34007f02:	e098      	b.n	34008036 <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34007f04:	683b      	ldr	r3, [r7, #0]
34007f06:	681b      	ldr	r3, [r3, #0]
34007f08:	2b03      	cmp	r3, #3
34007f0a:	d15f      	bne.n	34007fcc <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007f0c:	683b      	ldr	r3, [r7, #0]
34007f0e:	685b      	ldr	r3, [r3, #4]
34007f10:	2b00      	cmp	r3, #0
34007f12:	d013      	beq.n	34007f3c <RCC_PLL_Config+0x240>
34007f14:	683b      	ldr	r3, [r7, #0]
34007f16:	685b      	ldr	r3, [r3, #4]
34007f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007f1c:	d00e      	beq.n	34007f3c <RCC_PLL_Config+0x240>
34007f1e:	683b      	ldr	r3, [r7, #0]
34007f20:	685b      	ldr	r3, [r3, #4]
34007f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007f26:	d009      	beq.n	34007f3c <RCC_PLL_Config+0x240>
34007f28:	683b      	ldr	r3, [r7, #0]
34007f2a:	685b      	ldr	r3, [r3, #4]
34007f2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007f30:	d004      	beq.n	34007f3c <RCC_PLL_Config+0x240>
34007f32:	f640 013f 	movw	r1, #2111	@ 0x83f
34007f36:	4813      	ldr	r0, [pc, #76]	@ (34007f84 <RCC_PLL_Config+0x288>)
34007f38:	f7f9 feb0 	bl	34001c9c <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34007f3c:	683b      	ldr	r3, [r7, #0]
34007f3e:	685b      	ldr	r3, [r3, #4]
34007f40:	4618      	mov	r0, r3
34007f42:	f000 f925 	bl	34008190 <RCC_PLL_Source_IsReady>
34007f46:	4603      	mov	r3, r0
34007f48:	2b01      	cmp	r3, #1
34007f4a:	d13c      	bne.n	34007fc6 <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007f4c:	4a0e      	ldr	r2, [pc, #56]	@ (34007f88 <RCC_PLL_Config+0x28c>)
34007f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007f52:	687b      	ldr	r3, [r7, #4]
34007f54:	fa01 f303 	lsl.w	r3, r1, r3
34007f58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007f5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34007f5e:	f7fb febf 	bl	34003ce0 <HAL_GetTick>
34007f62:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007f64:	e014      	b.n	34007f90 <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007f66:	f7fb febb 	bl	34003ce0 <HAL_GetTick>
34007f6a:	4602      	mov	r2, r0
34007f6c:	68fb      	ldr	r3, [r7, #12]
34007f6e:	1ad3      	subs	r3, r2, r3
34007f70:	2b01      	cmp	r3, #1
34007f72:	d90d      	bls.n	34007f90 <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
34007f74:	2303      	movs	r3, #3
34007f76:	e05f      	b.n	34008038 <RCC_PLL_Config+0x33c>
34007f78:	56028080 	.word	0x56028080
34007f7c:	56028084 	.word	0x56028084
34007f80:	56028088 	.word	0x56028088
34007f84:	3401e758 	.word	0x3401e758
34007f88:	56028000 	.word	0x56028000
34007f8c:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007f90:	4b2b      	ldr	r3, [pc, #172]	@ (34008040 <RCC_PLL_Config+0x344>)
34007f92:	685a      	ldr	r2, [r3, #4]
34007f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007f98:	687b      	ldr	r3, [r7, #4]
34007f9a:	fa01 f303 	lsl.w	r3, r1, r3
34007f9e:	401a      	ands	r2, r3
34007fa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007fa4:	687b      	ldr	r3, [r7, #4]
34007fa6:	fa01 f303 	lsl.w	r3, r1, r3
34007faa:	429a      	cmp	r2, r3
34007fac:	d0db      	beq.n	34007f66 <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34007fae:	69bb      	ldr	r3, [r7, #24]
34007fb0:	681b      	ldr	r3, [r3, #0]
34007fb2:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
34007fb6:	683b      	ldr	r3, [r7, #0]
34007fb8:	685b      	ldr	r3, [r3, #4]
34007fba:	4313      	orrs	r3, r2
34007fbc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34007fc0:	69bb      	ldr	r3, [r7, #24]
34007fc2:	601a      	str	r2, [r3, #0]
34007fc4:	e037      	b.n	34008036 <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
34007fc6:	2301      	movs	r3, #1
34007fc8:	77fb      	strb	r3, [r7, #31]
34007fca:	e034      	b.n	34008036 <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34007fcc:	683b      	ldr	r3, [r7, #0]
34007fce:	681b      	ldr	r3, [r3, #0]
34007fd0:	2b01      	cmp	r3, #1
34007fd2:	d130      	bne.n	34008036 <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34007fd4:	693b      	ldr	r3, [r7, #16]
34007fd6:	681b      	ldr	r3, [r3, #0]
34007fd8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34007fdc:	693b      	ldr	r3, [r7, #16]
34007fde:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007fe0:	4a17      	ldr	r2, [pc, #92]	@ (34008040 <RCC_PLL_Config+0x344>)
34007fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007fe6:	687b      	ldr	r3, [r7, #4]
34007fe8:	fa01 f303 	lsl.w	r3, r1, r3
34007fec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007ff2:	f7fb fe75 	bl	34003ce0 <HAL_GetTick>
34007ff6:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007ff8:	e008      	b.n	3400800c <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007ffa:	f7fb fe71 	bl	34003ce0 <HAL_GetTick>
34007ffe:	4602      	mov	r2, r0
34008000:	68fb      	ldr	r3, [r7, #12]
34008002:	1ad3      	subs	r3, r2, r3
34008004:	2b01      	cmp	r3, #1
34008006:	d901      	bls.n	3400800c <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
34008008:	2303      	movs	r3, #3
3400800a:	e015      	b.n	34008038 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400800c:	4b0c      	ldr	r3, [pc, #48]	@ (34008040 <RCC_PLL_Config+0x344>)
3400800e:	685a      	ldr	r2, [r3, #4]
34008010:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008014:	687b      	ldr	r3, [r7, #4]
34008016:	fa01 f303 	lsl.w	r3, r1, r3
3400801a:	401a      	ands	r2, r3
3400801c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008020:	687b      	ldr	r3, [r7, #4]
34008022:	fa01 f303 	lsl.w	r3, r1, r3
34008026:	429a      	cmp	r2, r3
34008028:	d0e7      	beq.n	34007ffa <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3400802a:	69bb      	ldr	r3, [r7, #24]
3400802c:	681b      	ldr	r3, [r3, #0]
3400802e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34008032:	69bb      	ldr	r3, [r7, #24]
34008034:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34008036:	7ffb      	ldrb	r3, [r7, #31]
}
34008038:	4618      	mov	r0, r3
3400803a:	3720      	adds	r7, #32
3400803c:	46bd      	mov	sp, r7
3400803e:	bd80      	pop	{r7, pc}
34008040:	56028000 	.word	0x56028000

34008044 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34008044:	b580      	push	{r7, lr}
34008046:	b084      	sub	sp, #16
34008048:	af00      	add	r7, sp, #0
3400804a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
3400804c:	2300      	movs	r3, #0
3400804e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34008050:	4a11      	ldr	r2, [pc, #68]	@ (34008098 <RCC_PLL_Enable+0x54>)
34008052:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008056:	687b      	ldr	r3, [r7, #4]
34008058:	fa01 f303 	lsl.w	r3, r1, r3
3400805c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34008060:	f7fb fe3e 	bl	34003ce0 <HAL_GetTick>
34008064:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34008066:	e008      	b.n	3400807a <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34008068:	f7fb fe3a 	bl	34003ce0 <HAL_GetTick>
3400806c:	4602      	mov	r2, r0
3400806e:	68bb      	ldr	r3, [r7, #8]
34008070:	1ad3      	subs	r3, r2, r3
34008072:	2b01      	cmp	r3, #1
34008074:	d901      	bls.n	3400807a <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34008076:	2303      	movs	r3, #3
34008078:	e00a      	b.n	34008090 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3400807a:	4b07      	ldr	r3, [pc, #28]	@ (34008098 <RCC_PLL_Enable+0x54>)
3400807c:	685a      	ldr	r2, [r3, #4]
3400807e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008082:	687b      	ldr	r3, [r7, #4]
34008084:	fa01 f303 	lsl.w	r3, r1, r3
34008088:	4013      	ands	r3, r2
3400808a:	2b00      	cmp	r3, #0
3400808c:	d0ec      	beq.n	34008068 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3400808e:	7bfb      	ldrb	r3, [r7, #15]
}
34008090:	4618      	mov	r0, r3
34008092:	3710      	adds	r7, #16
34008094:	46bd      	mov	sp, r7
34008096:	bd80      	pop	{r7, pc}
34008098:	56028000 	.word	0x56028000

3400809c <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3400809c:	b480      	push	{r7}
3400809e:	b089      	sub	sp, #36	@ 0x24
340080a0:	af00      	add	r7, sp, #0
340080a2:	6078      	str	r0, [r7, #4]
340080a4:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
340080a6:	2300      	movs	r3, #0
340080a8:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340080aa:	687b      	ldr	r3, [r7, #4]
340080ac:	011a      	lsls	r2, r3, #4
340080ae:	4b34      	ldr	r3, [pc, #208]	@ (34008180 <RCC_PLL_IsNewConfig+0xe4>)
340080b0:	4413      	add	r3, r2
340080b2:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340080b4:	687b      	ldr	r3, [r7, #4]
340080b6:	011a      	lsls	r2, r3, #4
340080b8:	4b32      	ldr	r3, [pc, #200]	@ (34008184 <RCC_PLL_IsNewConfig+0xe8>)
340080ba:	4413      	add	r3, r2
340080bc:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340080be:	687b      	ldr	r3, [r7, #4]
340080c0:	011a      	lsls	r2, r3, #4
340080c2:	4b31      	ldr	r3, [pc, #196]	@ (34008188 <RCC_PLL_IsNewConfig+0xec>)
340080c4:	4413      	add	r3, r2
340080c6:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340080c8:	697b      	ldr	r3, [r7, #20]
340080ca:	681b      	ldr	r3, [r3, #0]
340080cc:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
340080d0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
340080d4:	683a      	ldr	r2, [r7, #0]
340080d6:	6851      	ldr	r1, [r2, #4]
340080d8:	683a      	ldr	r2, [r7, #0]
340080da:	6892      	ldr	r2, [r2, #8]
340080dc:	0512      	lsls	r2, r2, #20
340080de:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340080e0:	683a      	ldr	r2, [r7, #0]
340080e2:	6912      	ldr	r2, [r2, #16]
340080e4:	0212      	lsls	r2, r2, #8
340080e6:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340080e8:	4293      	cmp	r3, r2
340080ea:	d002      	beq.n	340080f2 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
340080ec:	2301      	movs	r3, #1
340080ee:	61fb      	str	r3, [r7, #28]
340080f0:	e03e      	b.n	34008170 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
340080f2:	693b      	ldr	r3, [r7, #16]
340080f4:	681b      	ldr	r3, [r3, #0]
340080f6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
340080fa:	683b      	ldr	r3, [r7, #0]
340080fc:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
340080fe:	429a      	cmp	r2, r3
34008100:	d002      	beq.n	34008108 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
34008102:	2301      	movs	r3, #1
34008104:	61fb      	str	r3, [r7, #28]
34008106:	e033      	b.n	34008170 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34008108:	68fb      	ldr	r3, [r7, #12]
3400810a:	681b      	ldr	r3, [r3, #0]
3400810c:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34008110:	683b      	ldr	r3, [r7, #0]
34008112:	695b      	ldr	r3, [r3, #20]
34008114:	06d9      	lsls	r1, r3, #27
34008116:	683b      	ldr	r3, [r7, #0]
34008118:	699b      	ldr	r3, [r3, #24]
3400811a:	061b      	lsls	r3, r3, #24
3400811c:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3400811e:	429a      	cmp	r2, r3
34008120:	d002      	beq.n	34008128 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
34008122:	2301      	movs	r3, #1
34008124:	61fb      	str	r3, [r7, #28]
34008126:	e023      	b.n	34008170 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34008128:	4b18      	ldr	r3, [pc, #96]	@ (3400818c <RCC_PLL_IsNewConfig+0xf0>)
3400812a:	685a      	ldr	r2, [r3, #4]
3400812c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34008130:	687b      	ldr	r3, [r7, #4]
34008132:	fa01 f303 	lsl.w	r3, r1, r3
34008136:	401a      	ands	r2, r3
34008138:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400813c:	687b      	ldr	r3, [r7, #4]
3400813e:	fa01 f303 	lsl.w	r3, r1, r3
34008142:	429a      	cmp	r2, r3
34008144:	d102      	bne.n	3400814c <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
34008146:	2302      	movs	r3, #2
34008148:	61bb      	str	r3, [r7, #24]
3400814a:	e00a      	b.n	34008162 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3400814c:	697b      	ldr	r3, [r7, #20]
3400814e:	681b      	ldr	r3, [r3, #0]
34008150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008154:	2b00      	cmp	r3, #0
34008156:	d002      	beq.n	3400815e <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34008158:	2303      	movs	r3, #3
3400815a:	61bb      	str	r3, [r7, #24]
3400815c:	e001      	b.n	34008162 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
3400815e:	2301      	movs	r3, #1
34008160:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34008162:	683b      	ldr	r3, [r7, #0]
34008164:	681b      	ldr	r3, [r3, #0]
34008166:	69ba      	ldr	r2, [r7, #24]
34008168:	429a      	cmp	r2, r3
3400816a:	d001      	beq.n	34008170 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
3400816c:	2301      	movs	r3, #1
3400816e:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34008170:	69fb      	ldr	r3, [r7, #28]
}
34008172:	4618      	mov	r0, r3
34008174:	3724      	adds	r7, #36	@ 0x24
34008176:	46bd      	mov	sp, r7
34008178:	f85d 7b04 	ldr.w	r7, [sp], #4
3400817c:	4770      	bx	lr
3400817e:	bf00      	nop
34008180:	56028080 	.word	0x56028080
34008184:	56028084 	.word	0x56028084
34008188:	56028088 	.word	0x56028088
3400818c:	56028000 	.word	0x56028000

34008190 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34008190:	b580      	push	{r7, lr}
34008192:	b084      	sub	sp, #16
34008194:	af00      	add	r7, sp, #0
34008196:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
34008198:	2301      	movs	r3, #1
3400819a:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
3400819c:	687b      	ldr	r3, [r7, #4]
3400819e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081a2:	d01b      	beq.n	340081dc <RCC_PLL_Source_IsReady+0x4c>
340081a4:	687b      	ldr	r3, [r7, #4]
340081a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081aa:	d81f      	bhi.n	340081ec <RCC_PLL_Source_IsReady+0x5c>
340081ac:	687b      	ldr	r3, [r7, #4]
340081ae:	2b00      	cmp	r3, #0
340081b0:	d004      	beq.n	340081bc <RCC_PLL_Source_IsReady+0x2c>
340081b2:	687b      	ldr	r3, [r7, #4]
340081b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340081b8:	d008      	beq.n	340081cc <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
340081ba:	e017      	b.n	340081ec <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
340081bc:	f7fe f8b6 	bl	3400632c <LL_RCC_HSI_IsReady>
340081c0:	4603      	mov	r3, r0
340081c2:	2b00      	cmp	r3, #0
340081c4:	d114      	bne.n	340081f0 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
340081c6:	2300      	movs	r3, #0
340081c8:	60fb      	str	r3, [r7, #12]
      break;
340081ca:	e011      	b.n	340081f0 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
340081cc:	f7fe f916 	bl	340063fc <LL_RCC_MSI_IsReady>
340081d0:	4603      	mov	r3, r0
340081d2:	2b00      	cmp	r3, #0
340081d4:	d10e      	bne.n	340081f4 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
340081d6:	2300      	movs	r3, #0
340081d8:	60fb      	str	r3, [r7, #12]
      break;
340081da:	e00b      	b.n	340081f4 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
340081dc:	f7fe f876 	bl	340062cc <LL_RCC_HSE_IsReady>
340081e0:	4603      	mov	r3, r0
340081e2:	2b00      	cmp	r3, #0
340081e4:	d108      	bne.n	340081f8 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
340081e6:	2300      	movs	r3, #0
340081e8:	60fb      	str	r3, [r7, #12]
      break;
340081ea:	e005      	b.n	340081f8 <RCC_PLL_Source_IsReady+0x68>
      break;
340081ec:	bf00      	nop
340081ee:	e004      	b.n	340081fa <RCC_PLL_Source_IsReady+0x6a>
      break;
340081f0:	bf00      	nop
340081f2:	e002      	b.n	340081fa <RCC_PLL_Source_IsReady+0x6a>
      break;
340081f4:	bf00      	nop
340081f6:	e000      	b.n	340081fa <RCC_PLL_Source_IsReady+0x6a>
      break;
340081f8:	bf00      	nop
  }

  return ret;
340081fa:	68fb      	ldr	r3, [r7, #12]
}
340081fc:	4618      	mov	r0, r3
340081fe:	3710      	adds	r7, #16
34008200:	46bd      	mov	sp, r7
34008202:	bd80      	pop	{r7, pc}

34008204 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
34008204:	b580      	push	{r7, lr}
34008206:	b084      	sub	sp, #16
34008208:	af00      	add	r7, sp, #0
3400820a:	6078      	str	r0, [r7, #4]
3400820c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
3400820e:	2301      	movs	r3, #1
34008210:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34008212:	687b      	ldr	r3, [r7, #4]
34008214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008218:	d03a      	beq.n	34008290 <RCC_IC_CheckPLLSources+0x8c>
3400821a:	687b      	ldr	r3, [r7, #4]
3400821c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008220:	d843      	bhi.n	340082aa <RCC_IC_CheckPLLSources+0xa6>
34008222:	687b      	ldr	r3, [r7, #4]
34008224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008228:	d025      	beq.n	34008276 <RCC_IC_CheckPLLSources+0x72>
3400822a:	687b      	ldr	r3, [r7, #4]
3400822c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008230:	d83b      	bhi.n	340082aa <RCC_IC_CheckPLLSources+0xa6>
34008232:	687b      	ldr	r3, [r7, #4]
34008234:	2b00      	cmp	r3, #0
34008236:	d004      	beq.n	34008242 <RCC_IC_CheckPLLSources+0x3e>
34008238:	687b      	ldr	r3, [r7, #4]
3400823a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400823e:	d00d      	beq.n	3400825c <RCC_IC_CheckPLLSources+0x58>
34008240:	e033      	b.n	340082aa <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34008242:	f7fe f98d 	bl	34006560 <LL_RCC_PLL1_IsReady>
34008246:	4603      	mov	r3, r0
34008248:	2b00      	cmp	r3, #0
3400824a:	d131      	bne.n	340082b0 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
3400824c:	f7fe f99c 	bl	34006588 <LL_RCC_PLL1_IsEnabledBypass>
34008250:	4603      	mov	r3, r0
34008252:	2b00      	cmp	r3, #0
34008254:	d12c      	bne.n	340082b0 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
34008256:	2300      	movs	r3, #0
34008258:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400825a:	e029      	b.n	340082b0 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3400825c:	f7fe f9b6 	bl	340065cc <LL_RCC_PLL2_IsReady>
34008260:	4603      	mov	r3, r0
34008262:	2b00      	cmp	r3, #0
34008264:	d126      	bne.n	340082b4 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34008266:	f7fe f9c5 	bl	340065f4 <LL_RCC_PLL2_IsEnabledBypass>
3400826a:	4603      	mov	r3, r0
3400826c:	2b00      	cmp	r3, #0
3400826e:	d121      	bne.n	340082b4 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34008270:	2300      	movs	r3, #0
34008272:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008274:	e01e      	b.n	340082b4 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34008276:	f7fe f9df 	bl	34006638 <LL_RCC_PLL3_IsReady>
3400827a:	4603      	mov	r3, r0
3400827c:	2b00      	cmp	r3, #0
3400827e:	d11b      	bne.n	340082b8 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34008280:	f7fe f9ee 	bl	34006660 <LL_RCC_PLL3_IsEnabledBypass>
34008284:	4603      	mov	r3, r0
34008286:	2b00      	cmp	r3, #0
34008288:	d116      	bne.n	340082b8 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3400828a:	2300      	movs	r3, #0
3400828c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400828e:	e013      	b.n	340082b8 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34008290:	f7fe fa08 	bl	340066a4 <LL_RCC_PLL4_IsReady>
34008294:	4603      	mov	r3, r0
34008296:	2b00      	cmp	r3, #0
34008298:	d110      	bne.n	340082bc <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3400829a:	f7fe fa17 	bl	340066cc <LL_RCC_PLL4_IsEnabledBypass>
3400829e:	4603      	mov	r3, r0
340082a0:	2b00      	cmp	r3, #0
340082a2:	d10b      	bne.n	340082bc <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
340082a4:	2300      	movs	r3, #0
340082a6:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
340082a8:	e008      	b.n	340082bc <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
340082aa:	2300      	movs	r3, #0
340082ac:	60fb      	str	r3, [r7, #12]
      break;
340082ae:	e006      	b.n	340082be <RCC_IC_CheckPLLSources+0xba>
      break;
340082b0:	bf00      	nop
340082b2:	e004      	b.n	340082be <RCC_IC_CheckPLLSources+0xba>
      break;
340082b4:	bf00      	nop
340082b6:	e002      	b.n	340082be <RCC_IC_CheckPLLSources+0xba>
      break;
340082b8:	bf00      	nop
340082ba:	e000      	b.n	340082be <RCC_IC_CheckPLLSources+0xba>
      break;
340082bc:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
340082be:	683b      	ldr	r3, [r7, #0]
340082c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340082c4:	d03a      	beq.n	3400833c <RCC_IC_CheckPLLSources+0x138>
340082c6:	683b      	ldr	r3, [r7, #0]
340082c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340082cc:	d843      	bhi.n	34008356 <RCC_IC_CheckPLLSources+0x152>
340082ce:	683b      	ldr	r3, [r7, #0]
340082d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340082d4:	d025      	beq.n	34008322 <RCC_IC_CheckPLLSources+0x11e>
340082d6:	683b      	ldr	r3, [r7, #0]
340082d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340082dc:	d83b      	bhi.n	34008356 <RCC_IC_CheckPLLSources+0x152>
340082de:	683b      	ldr	r3, [r7, #0]
340082e0:	2b00      	cmp	r3, #0
340082e2:	d004      	beq.n	340082ee <RCC_IC_CheckPLLSources+0xea>
340082e4:	683b      	ldr	r3, [r7, #0]
340082e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340082ea:	d00d      	beq.n	34008308 <RCC_IC_CheckPLLSources+0x104>
340082ec:	e033      	b.n	34008356 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
340082ee:	f7fe f937 	bl	34006560 <LL_RCC_PLL1_IsReady>
340082f2:	4603      	mov	r3, r0
340082f4:	2b00      	cmp	r3, #0
340082f6:	d131      	bne.n	3400835c <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
340082f8:	f7fe f946 	bl	34006588 <LL_RCC_PLL1_IsEnabledBypass>
340082fc:	4603      	mov	r3, r0
340082fe:	2b00      	cmp	r3, #0
34008300:	d12c      	bne.n	3400835c <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
34008302:	2300      	movs	r3, #0
34008304:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008306:	e029      	b.n	3400835c <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34008308:	f7fe f960 	bl	340065cc <LL_RCC_PLL2_IsReady>
3400830c:	4603      	mov	r3, r0
3400830e:	2b00      	cmp	r3, #0
34008310:	d126      	bne.n	34008360 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34008312:	f7fe f96f 	bl	340065f4 <LL_RCC_PLL2_IsEnabledBypass>
34008316:	4603      	mov	r3, r0
34008318:	2b00      	cmp	r3, #0
3400831a:	d121      	bne.n	34008360 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
3400831c:	2300      	movs	r3, #0
3400831e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008320:	e01e      	b.n	34008360 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34008322:	f7fe f989 	bl	34006638 <LL_RCC_PLL3_IsReady>
34008326:	4603      	mov	r3, r0
34008328:	2b00      	cmp	r3, #0
3400832a:	d11b      	bne.n	34008364 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
3400832c:	f7fe f998 	bl	34006660 <LL_RCC_PLL3_IsEnabledBypass>
34008330:	4603      	mov	r3, r0
34008332:	2b00      	cmp	r3, #0
34008334:	d116      	bne.n	34008364 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
34008336:	2300      	movs	r3, #0
34008338:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3400833a:	e013      	b.n	34008364 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
3400833c:	f7fe f9b2 	bl	340066a4 <LL_RCC_PLL4_IsReady>
34008340:	4603      	mov	r3, r0
34008342:	2b00      	cmp	r3, #0
34008344:	d110      	bne.n	34008368 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34008346:	f7fe f9c1 	bl	340066cc <LL_RCC_PLL4_IsEnabledBypass>
3400834a:	4603      	mov	r3, r0
3400834c:	2b00      	cmp	r3, #0
3400834e:	d10b      	bne.n	34008368 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34008350:	2300      	movs	r3, #0
34008352:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34008354:	e008      	b.n	34008368 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
34008356:	2300      	movs	r3, #0
34008358:	60fb      	str	r3, [r7, #12]
      break;
3400835a:	e006      	b.n	3400836a <RCC_IC_CheckPLLSources+0x166>
      break;
3400835c:	bf00      	nop
3400835e:	e004      	b.n	3400836a <RCC_IC_CheckPLLSources+0x166>
      break;
34008360:	bf00      	nop
34008362:	e002      	b.n	3400836a <RCC_IC_CheckPLLSources+0x166>
      break;
34008364:	bf00      	nop
34008366:	e000      	b.n	3400836a <RCC_IC_CheckPLLSources+0x166>
      break;
34008368:	bf00      	nop
  }

  return ret;
3400836a:	68fb      	ldr	r3, [r7, #12]
}
3400836c:	4618      	mov	r0, r3
3400836e:	3710      	adds	r7, #16
34008370:	46bd      	mov	sp, r7
34008372:	bd80      	pop	{r7, pc}

34008374 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34008374:	b480      	push	{r7}
34008376:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34008378:	4b05      	ldr	r3, [pc, #20]	@ (34008390 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3400837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400837c:	4a04      	ldr	r2, [pc, #16]	@ (34008390 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3400837e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34008382:	6553      	str	r3, [r2, #84]	@ 0x54
}
34008384:	bf00      	nop
34008386:	46bd      	mov	sp, r7
34008388:	f85d 7b04 	ldr.w	r7, [sp], #4
3400838c:	4770      	bx	lr
3400838e:	bf00      	nop
34008390:	56028000 	.word	0x56028000

34008394 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34008394:	b480      	push	{r7}
34008396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34008398:	4b05      	ldr	r3, [pc, #20]	@ (340083b0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3400839a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400839c:	4a04      	ldr	r2, [pc, #16]	@ (340083b0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3400839e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340083a2:	6553      	str	r3, [r2, #84]	@ 0x54
}
340083a4:	bf00      	nop
340083a6:	46bd      	mov	sp, r7
340083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340083ac:	4770      	bx	lr
340083ae:	bf00      	nop
340083b0:	56028000 	.word	0x56028000

340083b4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
340083b4:	b480      	push	{r7}
340083b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
340083b8:	4b06      	ldr	r3, [pc, #24]	@ (340083d4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
340083ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340083bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340083c0:	2b40      	cmp	r3, #64	@ 0x40
340083c2:	d101      	bne.n	340083c8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
340083c4:	2301      	movs	r3, #1
340083c6:	e000      	b.n	340083ca <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
340083c8:	2300      	movs	r3, #0
}
340083ca:	4618      	mov	r0, r3
340083cc:	46bd      	mov	sp, r7
340083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340083d2:	4770      	bx	lr
340083d4:	56028000 	.word	0x56028000

340083d8 <LL_RCC_HSE_IsReady>:
{
340083d8:	b480      	push	{r7}
340083da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340083dc:	4b06      	ldr	r3, [pc, #24]	@ (340083f8 <LL_RCC_HSE_IsReady+0x20>)
340083de:	685b      	ldr	r3, [r3, #4]
340083e0:	f003 0310 	and.w	r3, r3, #16
340083e4:	2b00      	cmp	r3, #0
340083e6:	d001      	beq.n	340083ec <LL_RCC_HSE_IsReady+0x14>
340083e8:	2301      	movs	r3, #1
340083ea:	e000      	b.n	340083ee <LL_RCC_HSE_IsReady+0x16>
340083ec:	2300      	movs	r3, #0
}
340083ee:	4618      	mov	r0, r3
340083f0:	46bd      	mov	sp, r7
340083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340083f6:	4770      	bx	lr
340083f8:	56028000 	.word	0x56028000

340083fc <LL_RCC_HSI_IsReady>:
{
340083fc:	b480      	push	{r7}
340083fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34008400:	4b06      	ldr	r3, [pc, #24]	@ (3400841c <LL_RCC_HSI_IsReady+0x20>)
34008402:	685b      	ldr	r3, [r3, #4]
34008404:	f003 0308 	and.w	r3, r3, #8
34008408:	2b00      	cmp	r3, #0
3400840a:	d001      	beq.n	34008410 <LL_RCC_HSI_IsReady+0x14>
3400840c:	2301      	movs	r3, #1
3400840e:	e000      	b.n	34008412 <LL_RCC_HSI_IsReady+0x16>
34008410:	2300      	movs	r3, #0
}
34008412:	4618      	mov	r0, r3
34008414:	46bd      	mov	sp, r7
34008416:	f85d 7b04 	ldr.w	r7, [sp], #4
3400841a:	4770      	bx	lr
3400841c:	56028000 	.word	0x56028000

34008420 <LL_RCC_HSI_GetDivider>:
{
34008420:	b480      	push	{r7}
34008422:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34008424:	4b04      	ldr	r3, [pc, #16]	@ (34008438 <LL_RCC_HSI_GetDivider+0x18>)
34008426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34008428:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
3400842c:	4618      	mov	r0, r3
3400842e:	46bd      	mov	sp, r7
34008430:	f85d 7b04 	ldr.w	r7, [sp], #4
34008434:	4770      	bx	lr
34008436:	bf00      	nop
34008438:	56028000 	.word	0x56028000

3400843c <LL_RCC_MSI_IsReady>:
{
3400843c:	b480      	push	{r7}
3400843e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34008440:	4b06      	ldr	r3, [pc, #24]	@ (3400845c <LL_RCC_MSI_IsReady+0x20>)
34008442:	685b      	ldr	r3, [r3, #4]
34008444:	f003 0304 	and.w	r3, r3, #4
34008448:	2b00      	cmp	r3, #0
3400844a:	d001      	beq.n	34008450 <LL_RCC_MSI_IsReady+0x14>
3400844c:	2301      	movs	r3, #1
3400844e:	e000      	b.n	34008452 <LL_RCC_MSI_IsReady+0x16>
34008450:	2300      	movs	r3, #0
}
34008452:	4618      	mov	r0, r3
34008454:	46bd      	mov	sp, r7
34008456:	f85d 7b04 	ldr.w	r7, [sp], #4
3400845a:	4770      	bx	lr
3400845c:	56028000 	.word	0x56028000

34008460 <LL_RCC_MSI_GetFrequency>:
{
34008460:	b480      	push	{r7}
34008462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34008464:	4b04      	ldr	r3, [pc, #16]	@ (34008478 <LL_RCC_MSI_GetFrequency+0x18>)
34008466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34008468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3400846c:	4618      	mov	r0, r3
3400846e:	46bd      	mov	sp, r7
34008470:	f85d 7b04 	ldr.w	r7, [sp], #4
34008474:	4770      	bx	lr
34008476:	bf00      	nop
34008478:	56028000 	.word	0x56028000

3400847c <LL_RCC_LSE_IsReady>:
{
3400847c:	b480      	push	{r7}
3400847e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34008480:	4b06      	ldr	r3, [pc, #24]	@ (3400849c <LL_RCC_LSE_IsReady+0x20>)
34008482:	685b      	ldr	r3, [r3, #4]
34008484:	f003 0302 	and.w	r3, r3, #2
34008488:	2b00      	cmp	r3, #0
3400848a:	d001      	beq.n	34008490 <LL_RCC_LSE_IsReady+0x14>
3400848c:	2301      	movs	r3, #1
3400848e:	e000      	b.n	34008492 <LL_RCC_LSE_IsReady+0x16>
34008490:	2300      	movs	r3, #0
}
34008492:	4618      	mov	r0, r3
34008494:	46bd      	mov	sp, r7
34008496:	f85d 7b04 	ldr.w	r7, [sp], #4
3400849a:	4770      	bx	lr
3400849c:	56028000 	.word	0x56028000

340084a0 <LL_RCC_LSI_IsReady>:
{
340084a0:	b480      	push	{r7}
340084a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340084a4:	4b04      	ldr	r3, [pc, #16]	@ (340084b8 <LL_RCC_LSI_IsReady+0x18>)
340084a6:	685b      	ldr	r3, [r3, #4]
340084a8:	f003 0301 	and.w	r3, r3, #1
}
340084ac:	4618      	mov	r0, r3
340084ae:	46bd      	mov	sp, r7
340084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
340084b4:	4770      	bx	lr
340084b6:	bf00      	nop
340084b8:	56028000 	.word	0x56028000

340084bc <LL_RCC_GetAHBPrescaler>:
{
340084bc:	b480      	push	{r7}
340084be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340084c0:	4b04      	ldr	r3, [pc, #16]	@ (340084d4 <LL_RCC_GetAHBPrescaler+0x18>)
340084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340084c4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
340084c8:	4618      	mov	r0, r3
340084ca:	46bd      	mov	sp, r7
340084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340084d0:	4770      	bx	lr
340084d2:	bf00      	nop
340084d4:	56028000 	.word	0x56028000

340084d8 <LL_RCC_GetAPB1Prescaler>:
{
340084d8:	b480      	push	{r7}
340084da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340084dc:	4b04      	ldr	r3, [pc, #16]	@ (340084f0 <LL_RCC_GetAPB1Prescaler+0x18>)
340084de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340084e0:	f003 0307 	and.w	r3, r3, #7
}
340084e4:	4618      	mov	r0, r3
340084e6:	46bd      	mov	sp, r7
340084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340084ec:	4770      	bx	lr
340084ee:	bf00      	nop
340084f0:	56028000 	.word	0x56028000

340084f4 <LL_RCC_GetAPB2Prescaler>:
{
340084f4:	b480      	push	{r7}
340084f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340084f8:	4b04      	ldr	r3, [pc, #16]	@ (3400850c <LL_RCC_GetAPB2Prescaler+0x18>)
340084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340084fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34008500:	4618      	mov	r0, r3
34008502:	46bd      	mov	sp, r7
34008504:	f85d 7b04 	ldr.w	r7, [sp], #4
34008508:	4770      	bx	lr
3400850a:	bf00      	nop
3400850c:	56028000 	.word	0x56028000

34008510 <LL_RCC_GetAPB4Prescaler>:
{
34008510:	b480      	push	{r7}
34008512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34008514:	4b04      	ldr	r3, [pc, #16]	@ (34008528 <LL_RCC_GetAPB4Prescaler+0x18>)
34008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008518:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
3400851c:	4618      	mov	r0, r3
3400851e:	46bd      	mov	sp, r7
34008520:	f85d 7b04 	ldr.w	r7, [sp], #4
34008524:	4770      	bx	lr
34008526:	bf00      	nop
34008528:	56028000 	.word	0x56028000

3400852c <LL_RCC_GetAPB5Prescaler>:
{
3400852c:	b480      	push	{r7}
3400852e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34008530:	4b04      	ldr	r3, [pc, #16]	@ (34008544 <LL_RCC_GetAPB5Prescaler+0x18>)
34008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008534:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008538:	4618      	mov	r0, r3
3400853a:	46bd      	mov	sp, r7
3400853c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008540:	4770      	bx	lr
34008542:	bf00      	nop
34008544:	56028000 	.word	0x56028000

34008548 <LL_RCC_SetClockSource>:
{
34008548:	b480      	push	{r7}
3400854a:	b085      	sub	sp, #20
3400854c:	af00      	add	r7, sp, #0
3400854e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34008550:	687b      	ldr	r3, [r7, #4]
34008552:	b2da      	uxtb	r2, r3
34008554:	4b10      	ldr	r3, [pc, #64]	@ (34008598 <LL_RCC_SetClockSource+0x50>)
34008556:	4413      	add	r3, r2
34008558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3400855a:	68fb      	ldr	r3, [r7, #12]
3400855c:	681a      	ldr	r2, [r3, #0]
3400855e:	687b      	ldr	r3, [r7, #4]
34008560:	0e19      	lsrs	r1, r3, #24
34008562:	687b      	ldr	r3, [r7, #4]
34008564:	0a1b      	lsrs	r3, r3, #8
34008566:	f003 031f 	and.w	r3, r3, #31
3400856a:	fa01 f303 	lsl.w	r3, r1, r3
3400856e:	43db      	mvns	r3, r3
34008570:	401a      	ands	r2, r3
34008572:	687b      	ldr	r3, [r7, #4]
34008574:	0c1b      	lsrs	r3, r3, #16
34008576:	b2d9      	uxtb	r1, r3
34008578:	687b      	ldr	r3, [r7, #4]
3400857a:	0a1b      	lsrs	r3, r3, #8
3400857c:	f003 031f 	and.w	r3, r3, #31
34008580:	fa01 f303 	lsl.w	r3, r1, r3
34008584:	431a      	orrs	r2, r3
34008586:	68fb      	ldr	r3, [r7, #12]
34008588:	601a      	str	r2, [r3, #0]
}
3400858a:	bf00      	nop
3400858c:	3714      	adds	r7, #20
3400858e:	46bd      	mov	sp, r7
34008590:	f85d 7b04 	ldr.w	r7, [sp], #4
34008594:	4770      	bx	lr
34008596:	bf00      	nop
34008598:	56028144 	.word	0x56028144

3400859c <LL_RCC_GetADCPrescaler>:
{
3400859c:	b480      	push	{r7}
3400859e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
340085a0:	4b04      	ldr	r3, [pc, #16]	@ (340085b4 <LL_RCC_GetADCPrescaler+0x18>)
340085a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340085a6:	0a1b      	lsrs	r3, r3, #8
340085a8:	b2db      	uxtb	r3, r3
}
340085aa:	4618      	mov	r0, r3
340085ac:	46bd      	mov	sp, r7
340085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
340085b2:	4770      	bx	lr
340085b4:	56028000 	.word	0x56028000

340085b8 <LL_RCC_SetADFClockSource>:
{
340085b8:	b480      	push	{r7}
340085ba:	b083      	sub	sp, #12
340085bc:	af00      	add	r7, sp, #0
340085be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
340085c0:	4b07      	ldr	r3, [pc, #28]	@ (340085e0 <LL_RCC_SetADFClockSource+0x28>)
340085c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340085c6:	f023 0207 	bic.w	r2, r3, #7
340085ca:	4905      	ldr	r1, [pc, #20]	@ (340085e0 <LL_RCC_SetADFClockSource+0x28>)
340085cc:	687b      	ldr	r3, [r7, #4]
340085ce:	4313      	orrs	r3, r2
340085d0:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
340085d4:	bf00      	nop
340085d6:	370c      	adds	r7, #12
340085d8:	46bd      	mov	sp, r7
340085da:	f85d 7b04 	ldr.w	r7, [sp], #4
340085de:	4770      	bx	lr
340085e0:	56028000 	.word	0x56028000

340085e4 <LL_RCC_SetCLKPClockSource>:
{
340085e4:	b480      	push	{r7}
340085e6:	b083      	sub	sp, #12
340085e8:	af00      	add	r7, sp, #0
340085ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340085ec:	4b07      	ldr	r3, [pc, #28]	@ (3400860c <LL_RCC_SetCLKPClockSource+0x28>)
340085ee:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340085f2:	f023 0207 	bic.w	r2, r3, #7
340085f6:	4905      	ldr	r1, [pc, #20]	@ (3400860c <LL_RCC_SetCLKPClockSource+0x28>)
340085f8:	687b      	ldr	r3, [r7, #4]
340085fa:	4313      	orrs	r3, r2
340085fc:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008600:	bf00      	nop
34008602:	370c      	adds	r7, #12
34008604:	46bd      	mov	sp, r7
34008606:	f85d 7b04 	ldr.w	r7, [sp], #4
3400860a:	4770      	bx	lr
3400860c:	56028000 	.word	0x56028000

34008610 <LL_RCC_SetDCMIPPClockSource>:
{
34008610:	b480      	push	{r7}
34008612:	b083      	sub	sp, #12
34008614:	af00      	add	r7, sp, #0
34008616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34008618:	4b07      	ldr	r3, [pc, #28]	@ (34008638 <LL_RCC_SetDCMIPPClockSource+0x28>)
3400861a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400861e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34008622:	4905      	ldr	r1, [pc, #20]	@ (34008638 <LL_RCC_SetDCMIPPClockSource+0x28>)
34008624:	687b      	ldr	r3, [r7, #4]
34008626:	4313      	orrs	r3, r2
34008628:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
3400862c:	bf00      	nop
3400862e:	370c      	adds	r7, #12
34008630:	46bd      	mov	sp, r7
34008632:	f85d 7b04 	ldr.w	r7, [sp], #4
34008636:	4770      	bx	lr
34008638:	56028000 	.word	0x56028000

3400863c <LL_RCC_SetETHClockSource>:
{
3400863c:	b480      	push	{r7}
3400863e:	b083      	sub	sp, #12
34008640:	af00      	add	r7, sp, #0
34008642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34008644:	4b07      	ldr	r3, [pc, #28]	@ (34008664 <LL_RCC_SetETHClockSource+0x28>)
34008646:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400864a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3400864e:	4905      	ldr	r1, [pc, #20]	@ (34008664 <LL_RCC_SetETHClockSource+0x28>)
34008650:	687b      	ldr	r3, [r7, #4]
34008652:	4313      	orrs	r3, r2
34008654:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008658:	bf00      	nop
3400865a:	370c      	adds	r7, #12
3400865c:	46bd      	mov	sp, r7
3400865e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008662:	4770      	bx	lr
34008664:	56028000 	.word	0x56028000

34008668 <LL_RCC_SetETHPHYInterface>:
{
34008668:	b480      	push	{r7}
3400866a:	b083      	sub	sp, #12
3400866c:	af00      	add	r7, sp, #0
3400866e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34008670:	4b07      	ldr	r3, [pc, #28]	@ (34008690 <LL_RCC_SetETHPHYInterface+0x28>)
34008672:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008676:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400867a:	4905      	ldr	r1, [pc, #20]	@ (34008690 <LL_RCC_SetETHPHYInterface+0x28>)
3400867c:	687b      	ldr	r3, [r7, #4]
3400867e:	4313      	orrs	r3, r2
34008680:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008684:	bf00      	nop
34008686:	370c      	adds	r7, #12
34008688:	46bd      	mov	sp, r7
3400868a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400868e:	4770      	bx	lr
34008690:	56028000 	.word	0x56028000

34008694 <LL_RCC_GetETH1PTPDivider>:
{
34008694:	b480      	push	{r7}
34008696:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34008698:	4b04      	ldr	r3, [pc, #16]	@ (340086ac <LL_RCC_GetETH1PTPDivider+0x18>)
3400869a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400869e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
340086a2:	4618      	mov	r0, r3
340086a4:	46bd      	mov	sp, r7
340086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340086aa:	4770      	bx	lr
340086ac:	56028000 	.word	0x56028000

340086b0 <LL_RCC_SetETHREFRXClockSource>:
{
340086b0:	b480      	push	{r7}
340086b2:	b083      	sub	sp, #12
340086b4:	af00      	add	r7, sp, #0
340086b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
340086b8:	4b07      	ldr	r3, [pc, #28]	@ (340086d8 <LL_RCC_SetETHREFRXClockSource+0x28>)
340086ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340086be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
340086c2:	4905      	ldr	r1, [pc, #20]	@ (340086d8 <LL_RCC_SetETHREFRXClockSource+0x28>)
340086c4:	687b      	ldr	r3, [r7, #4]
340086c6:	4313      	orrs	r3, r2
340086c8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340086cc:	bf00      	nop
340086ce:	370c      	adds	r7, #12
340086d0:	46bd      	mov	sp, r7
340086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
340086d6:	4770      	bx	lr
340086d8:	56028000 	.word	0x56028000

340086dc <LL_RCC_SetETHREFTXClockSource>:
{
340086dc:	b480      	push	{r7}
340086de:	b083      	sub	sp, #12
340086e0:	af00      	add	r7, sp, #0
340086e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
340086e4:	4b07      	ldr	r3, [pc, #28]	@ (34008704 <LL_RCC_SetETHREFTXClockSource+0x28>)
340086e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340086ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340086ee:	4905      	ldr	r1, [pc, #20]	@ (34008704 <LL_RCC_SetETHREFTXClockSource+0x28>)
340086f0:	687b      	ldr	r3, [r7, #4]
340086f2:	4313      	orrs	r3, r2
340086f4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340086f8:	bf00      	nop
340086fa:	370c      	adds	r7, #12
340086fc:	46bd      	mov	sp, r7
340086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34008702:	4770      	bx	lr
34008704:	56028000 	.word	0x56028000

34008708 <LL_RCC_SetFDCANClockSource>:
{
34008708:	b480      	push	{r7}
3400870a:	b083      	sub	sp, #12
3400870c:	af00      	add	r7, sp, #0
3400870e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34008710:	4b07      	ldr	r3, [pc, #28]	@ (34008730 <LL_RCC_SetFDCANClockSource+0x28>)
34008712:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008716:	f023 0203 	bic.w	r2, r3, #3
3400871a:	4905      	ldr	r1, [pc, #20]	@ (34008730 <LL_RCC_SetFDCANClockSource+0x28>)
3400871c:	687b      	ldr	r3, [r7, #4]
3400871e:	4313      	orrs	r3, r2
34008720:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34008724:	bf00      	nop
34008726:	370c      	adds	r7, #12
34008728:	46bd      	mov	sp, r7
3400872a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400872e:	4770      	bx	lr
34008730:	56028000 	.word	0x56028000

34008734 <LL_RCC_SetFMCClockSource>:
{
34008734:	b480      	push	{r7}
34008736:	b083      	sub	sp, #12
34008738:	af00      	add	r7, sp, #0
3400873a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
3400873c:	4b07      	ldr	r3, [pc, #28]	@ (3400875c <LL_RCC_SetFMCClockSource+0x28>)
3400873e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008742:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34008746:	4905      	ldr	r1, [pc, #20]	@ (3400875c <LL_RCC_SetFMCClockSource+0x28>)
34008748:	687b      	ldr	r3, [r7, #4]
3400874a:	4313      	orrs	r3, r2
3400874c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34008750:	bf00      	nop
34008752:	370c      	adds	r7, #12
34008754:	46bd      	mov	sp, r7
34008756:	f85d 7b04 	ldr.w	r7, [sp], #4
3400875a:	4770      	bx	lr
3400875c:	56028000 	.word	0x56028000

34008760 <LL_RCC_SetI2CClockSource>:
{
34008760:	b580      	push	{r7, lr}
34008762:	b082      	sub	sp, #8
34008764:	af00      	add	r7, sp, #0
34008766:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008768:	6878      	ldr	r0, [r7, #4]
3400876a:	f7ff feed 	bl	34008548 <LL_RCC_SetClockSource>
}
3400876e:	bf00      	nop
34008770:	3708      	adds	r7, #8
34008772:	46bd      	mov	sp, r7
34008774:	bd80      	pop	{r7, pc}

34008776 <LL_RCC_SetI3CClockSource>:
{
34008776:	b580      	push	{r7, lr}
34008778:	b082      	sub	sp, #8
3400877a:	af00      	add	r7, sp, #0
3400877c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400877e:	6878      	ldr	r0, [r7, #4]
34008780:	f7ff fee2 	bl	34008548 <LL_RCC_SetClockSource>
}
34008784:	bf00      	nop
34008786:	3708      	adds	r7, #8
34008788:	46bd      	mov	sp, r7
3400878a:	bd80      	pop	{r7, pc}

3400878c <LL_RCC_SetLPTIMClockSource>:
{
3400878c:	b580      	push	{r7, lr}
3400878e:	b082      	sub	sp, #8
34008790:	af00      	add	r7, sp, #0
34008792:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008794:	6878      	ldr	r0, [r7, #4]
34008796:	f7ff fed7 	bl	34008548 <LL_RCC_SetClockSource>
}
3400879a:	bf00      	nop
3400879c:	3708      	adds	r7, #8
3400879e:	46bd      	mov	sp, r7
340087a0:	bd80      	pop	{r7, pc}
	...

340087a4 <LL_RCC_SetLPUARTClockSource>:
{
340087a4:	b480      	push	{r7}
340087a6:	b083      	sub	sp, #12
340087a8:	af00      	add	r7, sp, #0
340087aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
340087ac:	4b07      	ldr	r3, [pc, #28]	@ (340087cc <LL_RCC_SetLPUARTClockSource+0x28>)
340087ae:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340087b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
340087b6:	4905      	ldr	r1, [pc, #20]	@ (340087cc <LL_RCC_SetLPUARTClockSource+0x28>)
340087b8:	687b      	ldr	r3, [r7, #4]
340087ba:	4313      	orrs	r3, r2
340087bc:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
340087c0:	bf00      	nop
340087c2:	370c      	adds	r7, #12
340087c4:	46bd      	mov	sp, r7
340087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340087ca:	4770      	bx	lr
340087cc:	56028000 	.word	0x56028000

340087d0 <LL_RCC_SetLTDCClockSource>:
{
340087d0:	b480      	push	{r7}
340087d2:	b083      	sub	sp, #12
340087d4:	af00      	add	r7, sp, #0
340087d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340087d8:	4b07      	ldr	r3, [pc, #28]	@ (340087f8 <LL_RCC_SetLTDCClockSource+0x28>)
340087da:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340087de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340087e2:	4905      	ldr	r1, [pc, #20]	@ (340087f8 <LL_RCC_SetLTDCClockSource+0x28>)
340087e4:	687b      	ldr	r3, [r7, #4]
340087e6:	4313      	orrs	r3, r2
340087e8:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
340087ec:	bf00      	nop
340087ee:	370c      	adds	r7, #12
340087f0:	46bd      	mov	sp, r7
340087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340087f6:	4770      	bx	lr
340087f8:	56028000 	.word	0x56028000

340087fc <LL_RCC_SetMDFClockSource>:
{
340087fc:	b480      	push	{r7}
340087fe:	b083      	sub	sp, #12
34008800:	af00      	add	r7, sp, #0
34008802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34008804:	4b07      	ldr	r3, [pc, #28]	@ (34008824 <LL_RCC_SetMDFClockSource+0x28>)
34008806:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400880a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400880e:	4905      	ldr	r1, [pc, #20]	@ (34008824 <LL_RCC_SetMDFClockSource+0x28>)
34008810:	687b      	ldr	r3, [r7, #4]
34008812:	4313      	orrs	r3, r2
34008814:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34008818:	bf00      	nop
3400881a:	370c      	adds	r7, #12
3400881c:	46bd      	mov	sp, r7
3400881e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008822:	4770      	bx	lr
34008824:	56028000 	.word	0x56028000

34008828 <LL_RCC_SetOTGPHYClockSource>:
{
34008828:	b580      	push	{r7, lr}
3400882a:	b082      	sub	sp, #8
3400882c:	af00      	add	r7, sp, #0
3400882e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008830:	6878      	ldr	r0, [r7, #4]
34008832:	f7ff fe89 	bl	34008548 <LL_RCC_SetClockSource>
}
34008836:	bf00      	nop
34008838:	3708      	adds	r7, #8
3400883a:	46bd      	mov	sp, r7
3400883c:	bd80      	pop	{r7, pc}

3400883e <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3400883e:	b580      	push	{r7, lr}
34008840:	b082      	sub	sp, #8
34008842:	af00      	add	r7, sp, #0
34008844:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008846:	6878      	ldr	r0, [r7, #4]
34008848:	f7ff fe7e 	bl	34008548 <LL_RCC_SetClockSource>
}
3400884c:	bf00      	nop
3400884e:	3708      	adds	r7, #8
34008850:	46bd      	mov	sp, r7
34008852:	bd80      	pop	{r7, pc}

34008854 <LL_RCC_SetPSSIClockSource>:
{
34008854:	b480      	push	{r7}
34008856:	b083      	sub	sp, #12
34008858:	af00      	add	r7, sp, #0
3400885a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3400885c:	4b07      	ldr	r3, [pc, #28]	@ (3400887c <LL_RCC_SetPSSIClockSource+0x28>)
3400885e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008862:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34008866:	4905      	ldr	r1, [pc, #20]	@ (3400887c <LL_RCC_SetPSSIClockSource+0x28>)
34008868:	687b      	ldr	r3, [r7, #4]
3400886a:	4313      	orrs	r3, r2
3400886c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008870:	bf00      	nop
34008872:	370c      	adds	r7, #12
34008874:	46bd      	mov	sp, r7
34008876:	f85d 7b04 	ldr.w	r7, [sp], #4
3400887a:	4770      	bx	lr
3400887c:	56028000 	.word	0x56028000

34008880 <LL_RCC_SetSAIClockSource>:
{
34008880:	b580      	push	{r7, lr}
34008882:	b082      	sub	sp, #8
34008884:	af00      	add	r7, sp, #0
34008886:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008888:	6878      	ldr	r0, [r7, #4]
3400888a:	f7ff fe5d 	bl	34008548 <LL_RCC_SetClockSource>
}
3400888e:	bf00      	nop
34008890:	3708      	adds	r7, #8
34008892:	46bd      	mov	sp, r7
34008894:	bd80      	pop	{r7, pc}

34008896 <LL_RCC_SetSDMMCClockSource>:
{
34008896:	b580      	push	{r7, lr}
34008898:	b082      	sub	sp, #8
3400889a:	af00      	add	r7, sp, #0
3400889c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400889e:	6878      	ldr	r0, [r7, #4]
340088a0:	f7ff fe52 	bl	34008548 <LL_RCC_SetClockSource>
}
340088a4:	bf00      	nop
340088a6:	3708      	adds	r7, #8
340088a8:	46bd      	mov	sp, r7
340088aa:	bd80      	pop	{r7, pc}

340088ac <LL_RCC_SetSPDIFRXClockSource>:
{
340088ac:	b480      	push	{r7}
340088ae:	b083      	sub	sp, #12
340088b0:	af00      	add	r7, sp, #0
340088b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
340088b4:	4b07      	ldr	r3, [pc, #28]	@ (340088d4 <LL_RCC_SetSPDIFRXClockSource+0x28>)
340088b6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
340088ba:	f023 0207 	bic.w	r2, r3, #7
340088be:	4905      	ldr	r1, [pc, #20]	@ (340088d4 <LL_RCC_SetSPDIFRXClockSource+0x28>)
340088c0:	687b      	ldr	r3, [r7, #4]
340088c2:	4313      	orrs	r3, r2
340088c4:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
340088c8:	bf00      	nop
340088ca:	370c      	adds	r7, #12
340088cc:	46bd      	mov	sp, r7
340088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340088d2:	4770      	bx	lr
340088d4:	56028000 	.word	0x56028000

340088d8 <LL_RCC_SetSPIClockSource>:
{
340088d8:	b580      	push	{r7, lr}
340088da:	b082      	sub	sp, #8
340088dc:	af00      	add	r7, sp, #0
340088de:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340088e0:	6878      	ldr	r0, [r7, #4]
340088e2:	f7ff fe31 	bl	34008548 <LL_RCC_SetClockSource>
}
340088e6:	bf00      	nop
340088e8:	3708      	adds	r7, #8
340088ea:	46bd      	mov	sp, r7
340088ec:	bd80      	pop	{r7, pc}

340088ee <LL_RCC_SetUSARTClockSource>:
{
340088ee:	b580      	push	{r7, lr}
340088f0:	b082      	sub	sp, #8
340088f2:	af00      	add	r7, sp, #0
340088f4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340088f6:	6878      	ldr	r0, [r7, #4]
340088f8:	f7ff fe26 	bl	34008548 <LL_RCC_SetClockSource>
}
340088fc:	bf00      	nop
340088fe:	3708      	adds	r7, #8
34008900:	46bd      	mov	sp, r7
34008902:	bd80      	pop	{r7, pc}

34008904 <LL_RCC_SetXSPIClockSource>:
{
34008904:	b580      	push	{r7, lr}
34008906:	b082      	sub	sp, #8
34008908:	af00      	add	r7, sp, #0
3400890a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400890c:	6878      	ldr	r0, [r7, #4]
3400890e:	f7ff fe1b 	bl	34008548 <LL_RCC_SetClockSource>
}
34008912:	bf00      	nop
34008914:	3708      	adds	r7, #8
34008916:	46bd      	mov	sp, r7
34008918:	bd80      	pop	{r7, pc}
	...

3400891c <LL_RCC_GetClockSource>:
{
3400891c:	b480      	push	{r7}
3400891e:	b085      	sub	sp, #20
34008920:	af00      	add	r7, sp, #0
34008922:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34008924:	687b      	ldr	r3, [r7, #4]
34008926:	b2da      	uxtb	r2, r3
34008928:	4b0e      	ldr	r3, [pc, #56]	@ (34008964 <LL_RCC_GetClockSource+0x48>)
3400892a:	4413      	add	r3, r2
3400892c:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3400892e:	68fb      	ldr	r3, [r7, #12]
34008930:	681a      	ldr	r2, [r3, #0]
34008932:	687b      	ldr	r3, [r7, #4]
34008934:	0e19      	lsrs	r1, r3, #24
34008936:	687b      	ldr	r3, [r7, #4]
34008938:	0a1b      	lsrs	r3, r3, #8
3400893a:	f003 031f 	and.w	r3, r3, #31
3400893e:	fa01 f303 	lsl.w	r3, r1, r3
34008942:	401a      	ands	r2, r3
34008944:	687b      	ldr	r3, [r7, #4]
34008946:	0a1b      	lsrs	r3, r3, #8
34008948:	f003 031f 	and.w	r3, r3, #31
3400894c:	fa22 f303 	lsr.w	r3, r2, r3
34008950:	041a      	lsls	r2, r3, #16
34008952:	687b      	ldr	r3, [r7, #4]
34008954:	4313      	orrs	r3, r2
}
34008956:	4618      	mov	r0, r3
34008958:	3714      	adds	r7, #20
3400895a:	46bd      	mov	sp, r7
3400895c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008960:	4770      	bx	lr
34008962:	bf00      	nop
34008964:	56028144 	.word	0x56028144

34008968 <LL_RCC_GetADCClockSource>:
{
34008968:	b480      	push	{r7}
3400896a:	b083      	sub	sp, #12
3400896c:	af00      	add	r7, sp, #0
3400896e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34008970:	4b05      	ldr	r3, [pc, #20]	@ (34008988 <LL_RCC_GetADCClockSource+0x20>)
34008972:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3400897a:	4618      	mov	r0, r3
3400897c:	370c      	adds	r7, #12
3400897e:	46bd      	mov	sp, r7
34008980:	f85d 7b04 	ldr.w	r7, [sp], #4
34008984:	4770      	bx	lr
34008986:	bf00      	nop
34008988:	56028000 	.word	0x56028000

3400898c <LL_RCC_GetADFClockSource>:
{
3400898c:	b480      	push	{r7}
3400898e:	b083      	sub	sp, #12
34008990:	af00      	add	r7, sp, #0
34008992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34008994:	4b05      	ldr	r3, [pc, #20]	@ (340089ac <LL_RCC_GetADFClockSource+0x20>)
34008996:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400899a:	f003 0307 	and.w	r3, r3, #7
}
3400899e:	4618      	mov	r0, r3
340089a0:	370c      	adds	r7, #12
340089a2:	46bd      	mov	sp, r7
340089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340089a8:	4770      	bx	lr
340089aa:	bf00      	nop
340089ac:	56028000 	.word	0x56028000

340089b0 <LL_RCC_GetCLKPClockSource>:
{
340089b0:	b480      	push	{r7}
340089b2:	b083      	sub	sp, #12
340089b4:	af00      	add	r7, sp, #0
340089b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340089b8:	4b05      	ldr	r3, [pc, #20]	@ (340089d0 <LL_RCC_GetCLKPClockSource+0x20>)
340089ba:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340089be:	f003 0307 	and.w	r3, r3, #7
}
340089c2:	4618      	mov	r0, r3
340089c4:	370c      	adds	r7, #12
340089c6:	46bd      	mov	sp, r7
340089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340089cc:	4770      	bx	lr
340089ce:	bf00      	nop
340089d0:	56028000 	.word	0x56028000

340089d4 <LL_RCC_GetDCMIPPClockSource>:
{
340089d4:	b480      	push	{r7}
340089d6:	b083      	sub	sp, #12
340089d8:	af00      	add	r7, sp, #0
340089da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
340089dc:	4b05      	ldr	r3, [pc, #20]	@ (340089f4 <LL_RCC_GetDCMIPPClockSource+0x20>)
340089de:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340089e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
340089e6:	4618      	mov	r0, r3
340089e8:	370c      	adds	r7, #12
340089ea:	46bd      	mov	sp, r7
340089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340089f0:	4770      	bx	lr
340089f2:	bf00      	nop
340089f4:	56028000 	.word	0x56028000

340089f8 <LL_RCC_GetETHClockSource>:
{
340089f8:	b480      	push	{r7}
340089fa:	b083      	sub	sp, #12
340089fc:	af00      	add	r7, sp, #0
340089fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34008a00:	4b05      	ldr	r3, [pc, #20]	@ (34008a18 <LL_RCC_GetETHClockSource+0x20>)
34008a02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008a06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34008a0a:	4618      	mov	r0, r3
34008a0c:	370c      	adds	r7, #12
34008a0e:	46bd      	mov	sp, r7
34008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a14:	4770      	bx	lr
34008a16:	bf00      	nop
34008a18:	56028000 	.word	0x56028000

34008a1c <LL_RCC_GetETHPTPClockSource>:
{
34008a1c:	b480      	push	{r7}
34008a1e:	b083      	sub	sp, #12
34008a20:	af00      	add	r7, sp, #0
34008a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34008a24:	4b05      	ldr	r3, [pc, #20]	@ (34008a3c <LL_RCC_GetETHPTPClockSource+0x20>)
34008a26:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008a2a:	f003 0303 	and.w	r3, r3, #3
}
34008a2e:	4618      	mov	r0, r3
34008a30:	370c      	adds	r7, #12
34008a32:	46bd      	mov	sp, r7
34008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a38:	4770      	bx	lr
34008a3a:	bf00      	nop
34008a3c:	56028000 	.word	0x56028000

34008a40 <LL_RCC_GetFDCANClockSource>:
{
34008a40:	b480      	push	{r7}
34008a42:	b083      	sub	sp, #12
34008a44:	af00      	add	r7, sp, #0
34008a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34008a48:	4b05      	ldr	r3, [pc, #20]	@ (34008a60 <LL_RCC_GetFDCANClockSource+0x20>)
34008a4a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008a4e:	f003 0303 	and.w	r3, r3, #3
}
34008a52:	4618      	mov	r0, r3
34008a54:	370c      	adds	r7, #12
34008a56:	46bd      	mov	sp, r7
34008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a5c:	4770      	bx	lr
34008a5e:	bf00      	nop
34008a60:	56028000 	.word	0x56028000

34008a64 <LL_RCC_GetFMCClockSource>:
{
34008a64:	b480      	push	{r7}
34008a66:	b083      	sub	sp, #12
34008a68:	af00      	add	r7, sp, #0
34008a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34008a6c:	4b05      	ldr	r3, [pc, #20]	@ (34008a84 <LL_RCC_GetFMCClockSource+0x20>)
34008a6e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008a72:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008a76:	4618      	mov	r0, r3
34008a78:	370c      	adds	r7, #12
34008a7a:	46bd      	mov	sp, r7
34008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a80:	4770      	bx	lr
34008a82:	bf00      	nop
34008a84:	56028000 	.word	0x56028000

34008a88 <LL_RCC_GetI2CClockSource>:
{
34008a88:	b580      	push	{r7, lr}
34008a8a:	b082      	sub	sp, #8
34008a8c:	af00      	add	r7, sp, #0
34008a8e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008a90:	6878      	ldr	r0, [r7, #4]
34008a92:	f7ff ff43 	bl	3400891c <LL_RCC_GetClockSource>
34008a96:	4603      	mov	r3, r0
}
34008a98:	4618      	mov	r0, r3
34008a9a:	3708      	adds	r7, #8
34008a9c:	46bd      	mov	sp, r7
34008a9e:	bd80      	pop	{r7, pc}

34008aa0 <LL_RCC_GetI3CClockSource>:
{
34008aa0:	b580      	push	{r7, lr}
34008aa2:	b082      	sub	sp, #8
34008aa4:	af00      	add	r7, sp, #0
34008aa6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008aa8:	6878      	ldr	r0, [r7, #4]
34008aaa:	f7ff ff37 	bl	3400891c <LL_RCC_GetClockSource>
34008aae:	4603      	mov	r3, r0
}
34008ab0:	4618      	mov	r0, r3
34008ab2:	3708      	adds	r7, #8
34008ab4:	46bd      	mov	sp, r7
34008ab6:	bd80      	pop	{r7, pc}

34008ab8 <LL_RCC_GetLPTIMClockSource>:
{
34008ab8:	b580      	push	{r7, lr}
34008aba:	b082      	sub	sp, #8
34008abc:	af00      	add	r7, sp, #0
34008abe:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008ac0:	6878      	ldr	r0, [r7, #4]
34008ac2:	f7ff ff2b 	bl	3400891c <LL_RCC_GetClockSource>
34008ac6:	4603      	mov	r3, r0
}
34008ac8:	4618      	mov	r0, r3
34008aca:	3708      	adds	r7, #8
34008acc:	46bd      	mov	sp, r7
34008ace:	bd80      	pop	{r7, pc}

34008ad0 <LL_RCC_GetLPUARTClockSource>:
{
34008ad0:	b480      	push	{r7}
34008ad2:	b083      	sub	sp, #12
34008ad4:	af00      	add	r7, sp, #0
34008ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34008ad8:	4b05      	ldr	r3, [pc, #20]	@ (34008af0 <LL_RCC_GetLPUARTClockSource+0x20>)
34008ada:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34008ade:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34008ae2:	4618      	mov	r0, r3
34008ae4:	370c      	adds	r7, #12
34008ae6:	46bd      	mov	sp, r7
34008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aec:	4770      	bx	lr
34008aee:	bf00      	nop
34008af0:	56028000 	.word	0x56028000

34008af4 <LL_RCC_GetLTDCClockSource>:
{
34008af4:	b480      	push	{r7}
34008af6:	b083      	sub	sp, #12
34008af8:	af00      	add	r7, sp, #0
34008afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34008afc:	4b05      	ldr	r3, [pc, #20]	@ (34008b14 <LL_RCC_GetLTDCClockSource+0x20>)
34008afe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34008b02:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34008b06:	4618      	mov	r0, r3
34008b08:	370c      	adds	r7, #12
34008b0a:	46bd      	mov	sp, r7
34008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b10:	4770      	bx	lr
34008b12:	bf00      	nop
34008b14:	56028000 	.word	0x56028000

34008b18 <LL_RCC_GetMDFClockSource>:
{
34008b18:	b480      	push	{r7}
34008b1a:	b083      	sub	sp, #12
34008b1c:	af00      	add	r7, sp, #0
34008b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34008b20:	4b05      	ldr	r3, [pc, #20]	@ (34008b38 <LL_RCC_GetMDFClockSource+0x20>)
34008b22:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34008b26:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008b2a:	4618      	mov	r0, r3
34008b2c:	370c      	adds	r7, #12
34008b2e:	46bd      	mov	sp, r7
34008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b34:	4770      	bx	lr
34008b36:	bf00      	nop
34008b38:	56028000 	.word	0x56028000

34008b3c <LL_RCC_GetPSSIClockSource>:
{
34008b3c:	b480      	push	{r7}
34008b3e:	b083      	sub	sp, #12
34008b40:	af00      	add	r7, sp, #0
34008b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34008b44:	4b05      	ldr	r3, [pc, #20]	@ (34008b5c <LL_RCC_GetPSSIClockSource+0x20>)
34008b46:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008b4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008b4e:	4618      	mov	r0, r3
34008b50:	370c      	adds	r7, #12
34008b52:	46bd      	mov	sp, r7
34008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b58:	4770      	bx	lr
34008b5a:	bf00      	nop
34008b5c:	56028000 	.word	0x56028000

34008b60 <LL_RCC_GetSAIClockSource>:
{
34008b60:	b580      	push	{r7, lr}
34008b62:	b082      	sub	sp, #8
34008b64:	af00      	add	r7, sp, #0
34008b66:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008b68:	6878      	ldr	r0, [r7, #4]
34008b6a:	f7ff fed7 	bl	3400891c <LL_RCC_GetClockSource>
34008b6e:	4603      	mov	r3, r0
}
34008b70:	4618      	mov	r0, r3
34008b72:	3708      	adds	r7, #8
34008b74:	46bd      	mov	sp, r7
34008b76:	bd80      	pop	{r7, pc}

34008b78 <LL_RCC_GetSDMMCClockSource>:
{
34008b78:	b580      	push	{r7, lr}
34008b7a:	b082      	sub	sp, #8
34008b7c:	af00      	add	r7, sp, #0
34008b7e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008b80:	6878      	ldr	r0, [r7, #4]
34008b82:	f7ff fecb 	bl	3400891c <LL_RCC_GetClockSource>
34008b86:	4603      	mov	r3, r0
}
34008b88:	4618      	mov	r0, r3
34008b8a:	3708      	adds	r7, #8
34008b8c:	46bd      	mov	sp, r7
34008b8e:	bd80      	pop	{r7, pc}

34008b90 <LL_RCC_GetSPDIFRXClockSource>:
{
34008b90:	b480      	push	{r7}
34008b92:	b083      	sub	sp, #12
34008b94:	af00      	add	r7, sp, #0
34008b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34008b98:	4b05      	ldr	r3, [pc, #20]	@ (34008bb0 <LL_RCC_GetSPDIFRXClockSource+0x20>)
34008b9a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34008b9e:	f003 0307 	and.w	r3, r3, #7
}
34008ba2:	4618      	mov	r0, r3
34008ba4:	370c      	adds	r7, #12
34008ba6:	46bd      	mov	sp, r7
34008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bac:	4770      	bx	lr
34008bae:	bf00      	nop
34008bb0:	56028000 	.word	0x56028000

34008bb4 <LL_RCC_GetSPIClockSource>:
{
34008bb4:	b580      	push	{r7, lr}
34008bb6:	b082      	sub	sp, #8
34008bb8:	af00      	add	r7, sp, #0
34008bba:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bbc:	6878      	ldr	r0, [r7, #4]
34008bbe:	f7ff fead 	bl	3400891c <LL_RCC_GetClockSource>
34008bc2:	4603      	mov	r3, r0
}
34008bc4:	4618      	mov	r0, r3
34008bc6:	3708      	adds	r7, #8
34008bc8:	46bd      	mov	sp, r7
34008bca:	bd80      	pop	{r7, pc}

34008bcc <LL_RCC_GetUSARTClockSource>:
{
34008bcc:	b580      	push	{r7, lr}
34008bce:	b082      	sub	sp, #8
34008bd0:	af00      	add	r7, sp, #0
34008bd2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bd4:	6878      	ldr	r0, [r7, #4]
34008bd6:	f7ff fea1 	bl	3400891c <LL_RCC_GetClockSource>
34008bda:	4603      	mov	r3, r0
}
34008bdc:	4618      	mov	r0, r3
34008bde:	3708      	adds	r7, #8
34008be0:	46bd      	mov	sp, r7
34008be2:	bd80      	pop	{r7, pc}

34008be4 <LL_RCC_GetUARTClockSource>:
{
34008be4:	b580      	push	{r7, lr}
34008be6:	b082      	sub	sp, #8
34008be8:	af00      	add	r7, sp, #0
34008bea:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008bec:	6878      	ldr	r0, [r7, #4]
34008bee:	f7ff fe95 	bl	3400891c <LL_RCC_GetClockSource>
34008bf2:	4603      	mov	r3, r0
}
34008bf4:	4618      	mov	r0, r3
34008bf6:	3708      	adds	r7, #8
34008bf8:	46bd      	mov	sp, r7
34008bfa:	bd80      	pop	{r7, pc}

34008bfc <LL_RCC_GetUSBClockSource>:
{
34008bfc:	b580      	push	{r7, lr}
34008bfe:	b082      	sub	sp, #8
34008c00:	af00      	add	r7, sp, #0
34008c02:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008c04:	6878      	ldr	r0, [r7, #4]
34008c06:	f7ff fe89 	bl	3400891c <LL_RCC_GetClockSource>
34008c0a:	4603      	mov	r3, r0
}
34008c0c:	4618      	mov	r0, r3
34008c0e:	3708      	adds	r7, #8
34008c10:	46bd      	mov	sp, r7
34008c12:	bd80      	pop	{r7, pc}

34008c14 <LL_RCC_GetXSPIClockSource>:
{
34008c14:	b580      	push	{r7, lr}
34008c16:	b082      	sub	sp, #8
34008c18:	af00      	add	r7, sp, #0
34008c1a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008c1c:	6878      	ldr	r0, [r7, #4]
34008c1e:	f7ff fe7d 	bl	3400891c <LL_RCC_GetClockSource>
34008c22:	4603      	mov	r3, r0
}
34008c24:	4618      	mov	r0, r3
34008c26:	3708      	adds	r7, #8
34008c28:	46bd      	mov	sp, r7
34008c2a:	bd80      	pop	{r7, pc}

34008c2c <LL_RCC_SetRTCClockSource>:
{
34008c2c:	b480      	push	{r7}
34008c2e:	b083      	sub	sp, #12
34008c30:	af00      	add	r7, sp, #0
34008c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34008c34:	4b07      	ldr	r3, [pc, #28]	@ (34008c54 <LL_RCC_SetRTCClockSource+0x28>)
34008c36:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34008c3e:	4905      	ldr	r1, [pc, #20]	@ (34008c54 <LL_RCC_SetRTCClockSource+0x28>)
34008c40:	687b      	ldr	r3, [r7, #4]
34008c42:	4313      	orrs	r3, r2
34008c44:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008c48:	bf00      	nop
34008c4a:	370c      	adds	r7, #12
34008c4c:	46bd      	mov	sp, r7
34008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c52:	4770      	bx	lr
34008c54:	56028000 	.word	0x56028000

34008c58 <LL_RCC_GetRTCClockSource>:
{
34008c58:	b480      	push	{r7}
34008c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34008c5c:	4b04      	ldr	r3, [pc, #16]	@ (34008c70 <LL_RCC_GetRTCClockSource+0x18>)
34008c5e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34008c66:	4618      	mov	r0, r3
34008c68:	46bd      	mov	sp, r7
34008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c6e:	4770      	bx	lr
34008c70:	56028000 	.word	0x56028000

34008c74 <LL_RCC_SetRTC_HSEPrescaler>:
{
34008c74:	b480      	push	{r7}
34008c76:	b083      	sub	sp, #12
34008c78:	af00      	add	r7, sp, #0
34008c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34008c7c:	4b07      	ldr	r3, [pc, #28]	@ (34008c9c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008c7e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008c82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34008c86:	4905      	ldr	r1, [pc, #20]	@ (34008c9c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008c88:	687b      	ldr	r3, [r7, #4]
34008c8a:	4313      	orrs	r3, r2
34008c8c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008c90:	bf00      	nop
34008c92:	370c      	adds	r7, #12
34008c94:	46bd      	mov	sp, r7
34008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c9a:	4770      	bx	lr
34008c9c:	56028000 	.word	0x56028000

34008ca0 <LL_RCC_SetTIMPrescaler>:
{
34008ca0:	b480      	push	{r7}
34008ca2:	b083      	sub	sp, #12
34008ca4:	af00      	add	r7, sp, #0
34008ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34008ca8:	4b07      	ldr	r3, [pc, #28]	@ (34008cc8 <LL_RCC_SetTIMPrescaler+0x28>)
34008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008cac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34008cb0:	687b      	ldr	r3, [r7, #4]
34008cb2:	061b      	lsls	r3, r3, #24
34008cb4:	4904      	ldr	r1, [pc, #16]	@ (34008cc8 <LL_RCC_SetTIMPrescaler+0x28>)
34008cb6:	4313      	orrs	r3, r2
34008cb8:	624b      	str	r3, [r1, #36]	@ 0x24
}
34008cba:	bf00      	nop
34008cbc:	370c      	adds	r7, #12
34008cbe:	46bd      	mov	sp, r7
34008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cc4:	4770      	bx	lr
34008cc6:	bf00      	nop
34008cc8:	56028000 	.word	0x56028000

34008ccc <LL_RCC_GetTIMPrescaler>:
{
34008ccc:	b480      	push	{r7}
34008cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34008cd0:	4b04      	ldr	r3, [pc, #16]	@ (34008ce4 <LL_RCC_GetTIMPrescaler+0x18>)
34008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34008cd4:	0e1b      	lsrs	r3, r3, #24
34008cd6:	f003 0303 	and.w	r3, r3, #3
}
34008cda:	4618      	mov	r0, r3
34008cdc:	46bd      	mov	sp, r7
34008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ce2:	4770      	bx	lr
34008ce4:	56028000 	.word	0x56028000

34008ce8 <LL_RCC_PLL1_GetSource>:
{
34008ce8:	b480      	push	{r7}
34008cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34008cec:	4b04      	ldr	r3, [pc, #16]	@ (34008d00 <LL_RCC_PLL1_GetSource+0x18>)
34008cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008cf2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008cf6:	4618      	mov	r0, r3
34008cf8:	46bd      	mov	sp, r7
34008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cfe:	4770      	bx	lr
34008d00:	56028000 	.word	0x56028000

34008d04 <LL_RCC_PLL1_IsReady>:
{
34008d04:	b480      	push	{r7}
34008d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008d08:	4b07      	ldr	r3, [pc, #28]	@ (34008d28 <LL_RCC_PLL1_IsReady+0x24>)
34008d0a:	685b      	ldr	r3, [r3, #4]
34008d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008d14:	d101      	bne.n	34008d1a <LL_RCC_PLL1_IsReady+0x16>
34008d16:	2301      	movs	r3, #1
34008d18:	e000      	b.n	34008d1c <LL_RCC_PLL1_IsReady+0x18>
34008d1a:	2300      	movs	r3, #0
}
34008d1c:	4618      	mov	r0, r3
34008d1e:	46bd      	mov	sp, r7
34008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d24:	4770      	bx	lr
34008d26:	bf00      	nop
34008d28:	56028000 	.word	0x56028000

34008d2c <LL_RCC_PLL1_IsEnabledBypass>:
{
34008d2c:	b480      	push	{r7}
34008d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34008d30:	4b07      	ldr	r3, [pc, #28]	@ (34008d50 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008d3e:	d101      	bne.n	34008d44 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34008d40:	2301      	movs	r3, #1
34008d42:	e000      	b.n	34008d46 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34008d44:	2300      	movs	r3, #0
}
34008d46:	4618      	mov	r0, r3
34008d48:	46bd      	mov	sp, r7
34008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d4e:	4770      	bx	lr
34008d50:	56028000 	.word	0x56028000

34008d54 <LL_RCC_PLL1_GetN>:
{
34008d54:	b480      	push	{r7}
34008d56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008d58:	4b05      	ldr	r3, [pc, #20]	@ (34008d70 <LL_RCC_PLL1_GetN+0x1c>)
34008d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d5e:	0a1b      	lsrs	r3, r3, #8
34008d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008d64:	4618      	mov	r0, r3
34008d66:	46bd      	mov	sp, r7
34008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d6c:	4770      	bx	lr
34008d6e:	bf00      	nop
34008d70:	56028000 	.word	0x56028000

34008d74 <LL_RCC_PLL1_GetM>:
{
34008d74:	b480      	push	{r7}
34008d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008d78:	4b05      	ldr	r3, [pc, #20]	@ (34008d90 <LL_RCC_PLL1_GetM+0x1c>)
34008d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008d7e:	0d1b      	lsrs	r3, r3, #20
34008d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008d84:	4618      	mov	r0, r3
34008d86:	46bd      	mov	sp, r7
34008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d8c:	4770      	bx	lr
34008d8e:	bf00      	nop
34008d90:	56028000 	.word	0x56028000

34008d94 <LL_RCC_PLL1_GetP1>:
{
34008d94:	b480      	push	{r7}
34008d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34008d98:	4b05      	ldr	r3, [pc, #20]	@ (34008db0 <LL_RCC_PLL1_GetP1+0x1c>)
34008d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008d9e:	0edb      	lsrs	r3, r3, #27
34008da0:	f003 0307 	and.w	r3, r3, #7
}
34008da4:	4618      	mov	r0, r3
34008da6:	46bd      	mov	sp, r7
34008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dac:	4770      	bx	lr
34008dae:	bf00      	nop
34008db0:	56028000 	.word	0x56028000

34008db4 <LL_RCC_PLL1_GetP2>:
{
34008db4:	b480      	push	{r7}
34008db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34008db8:	4b05      	ldr	r3, [pc, #20]	@ (34008dd0 <LL_RCC_PLL1_GetP2+0x1c>)
34008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008dbe:	0e1b      	lsrs	r3, r3, #24
34008dc0:	f003 0307 	and.w	r3, r3, #7
}
34008dc4:	4618      	mov	r0, r3
34008dc6:	46bd      	mov	sp, r7
34008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dcc:	4770      	bx	lr
34008dce:	bf00      	nop
34008dd0:	56028000 	.word	0x56028000

34008dd4 <LL_RCC_PLL1P_IsEnabled>:
{
34008dd4:	b480      	push	{r7}
34008dd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34008dd8:	4b07      	ldr	r3, [pc, #28]	@ (34008df8 <LL_RCC_PLL1P_IsEnabled+0x24>)
34008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34008dde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008de6:	d101      	bne.n	34008dec <LL_RCC_PLL1P_IsEnabled+0x18>
34008de8:	2301      	movs	r3, #1
34008dea:	e000      	b.n	34008dee <LL_RCC_PLL1P_IsEnabled+0x1a>
34008dec:	2300      	movs	r3, #0
}
34008dee:	4618      	mov	r0, r3
34008df0:	46bd      	mov	sp, r7
34008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
34008df6:	4770      	bx	lr
34008df8:	56028000 	.word	0x56028000

34008dfc <LL_RCC_PLL1_GetFRACN>:
{
34008dfc:	b480      	push	{r7}
34008dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34008e00:	4b04      	ldr	r3, [pc, #16]	@ (34008e14 <LL_RCC_PLL1_GetFRACN+0x18>)
34008e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34008e06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008e0a:	4618      	mov	r0, r3
34008e0c:	46bd      	mov	sp, r7
34008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e12:	4770      	bx	lr
34008e14:	56028000 	.word	0x56028000

34008e18 <LL_RCC_PLL2_GetSource>:
{
34008e18:	b480      	push	{r7}
34008e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008e1c:	4b04      	ldr	r3, [pc, #16]	@ (34008e30 <LL_RCC_PLL2_GetSource+0x18>)
34008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e22:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008e26:	4618      	mov	r0, r3
34008e28:	46bd      	mov	sp, r7
34008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e2e:	4770      	bx	lr
34008e30:	56028000 	.word	0x56028000

34008e34 <LL_RCC_PLL2_IsReady>:
{
34008e34:	b480      	push	{r7}
34008e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008e38:	4b07      	ldr	r3, [pc, #28]	@ (34008e58 <LL_RCC_PLL2_IsReady+0x24>)
34008e3a:	685b      	ldr	r3, [r3, #4]
34008e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008e44:	d101      	bne.n	34008e4a <LL_RCC_PLL2_IsReady+0x16>
34008e46:	2301      	movs	r3, #1
34008e48:	e000      	b.n	34008e4c <LL_RCC_PLL2_IsReady+0x18>
34008e4a:	2300      	movs	r3, #0
}
34008e4c:	4618      	mov	r0, r3
34008e4e:	46bd      	mov	sp, r7
34008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e54:	4770      	bx	lr
34008e56:	bf00      	nop
34008e58:	56028000 	.word	0x56028000

34008e5c <LL_RCC_PLL2_IsEnabledBypass>:
{
34008e5c:	b480      	push	{r7}
34008e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34008e60:	4b07      	ldr	r3, [pc, #28]	@ (34008e80 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34008e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008e6e:	d101      	bne.n	34008e74 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34008e70:	2301      	movs	r3, #1
34008e72:	e000      	b.n	34008e76 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34008e74:	2300      	movs	r3, #0
}
34008e76:	4618      	mov	r0, r3
34008e78:	46bd      	mov	sp, r7
34008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e7e:	4770      	bx	lr
34008e80:	56028000 	.word	0x56028000

34008e84 <LL_RCC_PLL2_GetN>:
{
34008e84:	b480      	push	{r7}
34008e86:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008e88:	4b05      	ldr	r3, [pc, #20]	@ (34008ea0 <LL_RCC_PLL2_GetN+0x1c>)
34008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008e8e:	0a1b      	lsrs	r3, r3, #8
34008e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008e94:	4618      	mov	r0, r3
34008e96:	46bd      	mov	sp, r7
34008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e9c:	4770      	bx	lr
34008e9e:	bf00      	nop
34008ea0:	56028000 	.word	0x56028000

34008ea4 <LL_RCC_PLL2_GetM>:
{
34008ea4:	b480      	push	{r7}
34008ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34008ea8:	4b05      	ldr	r3, [pc, #20]	@ (34008ec0 <LL_RCC_PLL2_GetM+0x1c>)
34008eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008eae:	0d1b      	lsrs	r3, r3, #20
34008eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008eb4:	4618      	mov	r0, r3
34008eb6:	46bd      	mov	sp, r7
34008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ebc:	4770      	bx	lr
34008ebe:	bf00      	nop
34008ec0:	56028000 	.word	0x56028000

34008ec4 <LL_RCC_PLL2_GetP1>:
{
34008ec4:	b480      	push	{r7}
34008ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34008ec8:	4b05      	ldr	r3, [pc, #20]	@ (34008ee0 <LL_RCC_PLL2_GetP1+0x1c>)
34008eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008ece:	0edb      	lsrs	r3, r3, #27
34008ed0:	f003 0307 	and.w	r3, r3, #7
}
34008ed4:	4618      	mov	r0, r3
34008ed6:	46bd      	mov	sp, r7
34008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008edc:	4770      	bx	lr
34008ede:	bf00      	nop
34008ee0:	56028000 	.word	0x56028000

34008ee4 <LL_RCC_PLL2_GetP2>:
{
34008ee4:	b480      	push	{r7}
34008ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34008ee8:	4b05      	ldr	r3, [pc, #20]	@ (34008f00 <LL_RCC_PLL2_GetP2+0x1c>)
34008eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008eee:	0e1b      	lsrs	r3, r3, #24
34008ef0:	f003 0307 	and.w	r3, r3, #7
}
34008ef4:	4618      	mov	r0, r3
34008ef6:	46bd      	mov	sp, r7
34008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008efc:	4770      	bx	lr
34008efe:	bf00      	nop
34008f00:	56028000 	.word	0x56028000

34008f04 <LL_RCC_PLL2P_IsEnabled>:
{
34008f04:	b480      	push	{r7}
34008f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34008f08:	4b07      	ldr	r3, [pc, #28]	@ (34008f28 <LL_RCC_PLL2P_IsEnabled+0x24>)
34008f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34008f0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008f16:	d101      	bne.n	34008f1c <LL_RCC_PLL2P_IsEnabled+0x18>
34008f18:	2301      	movs	r3, #1
34008f1a:	e000      	b.n	34008f1e <LL_RCC_PLL2P_IsEnabled+0x1a>
34008f1c:	2300      	movs	r3, #0
}
34008f1e:	4618      	mov	r0, r3
34008f20:	46bd      	mov	sp, r7
34008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f26:	4770      	bx	lr
34008f28:	56028000 	.word	0x56028000

34008f2c <LL_RCC_PLL2_GetFRACN>:
{
34008f2c:	b480      	push	{r7}
34008f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34008f30:	4b04      	ldr	r3, [pc, #16]	@ (34008f44 <LL_RCC_PLL2_GetFRACN+0x18>)
34008f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34008f36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008f3a:	4618      	mov	r0, r3
34008f3c:	46bd      	mov	sp, r7
34008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f42:	4770      	bx	lr
34008f44:	56028000 	.word	0x56028000

34008f48 <LL_RCC_PLL3_GetSource>:
{
34008f48:	b480      	push	{r7}
34008f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008f4c:	4b04      	ldr	r3, [pc, #16]	@ (34008f60 <LL_RCC_PLL3_GetSource+0x18>)
34008f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008f52:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008f56:	4618      	mov	r0, r3
34008f58:	46bd      	mov	sp, r7
34008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f5e:	4770      	bx	lr
34008f60:	56028000 	.word	0x56028000

34008f64 <LL_RCC_PLL3_IsReady>:
{
34008f64:	b480      	push	{r7}
34008f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008f68:	4b07      	ldr	r3, [pc, #28]	@ (34008f88 <LL_RCC_PLL3_IsReady+0x24>)
34008f6a:	685b      	ldr	r3, [r3, #4]
34008f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34008f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34008f74:	d101      	bne.n	34008f7a <LL_RCC_PLL3_IsReady+0x16>
34008f76:	2301      	movs	r3, #1
34008f78:	e000      	b.n	34008f7c <LL_RCC_PLL3_IsReady+0x18>
34008f7a:	2300      	movs	r3, #0
}
34008f7c:	4618      	mov	r0, r3
34008f7e:	46bd      	mov	sp, r7
34008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f84:	4770      	bx	lr
34008f86:	bf00      	nop
34008f88:	56028000 	.word	0x56028000

34008f8c <LL_RCC_PLL3_IsEnabledBypass>:
{
34008f8c:	b480      	push	{r7}
34008f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34008f90:	4b07      	ldr	r3, [pc, #28]	@ (34008fb0 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34008f92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34008f9e:	d101      	bne.n	34008fa4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34008fa0:	2301      	movs	r3, #1
34008fa2:	e000      	b.n	34008fa6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34008fa4:	2300      	movs	r3, #0
}
34008fa6:	4618      	mov	r0, r3
34008fa8:	46bd      	mov	sp, r7
34008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fae:	4770      	bx	lr
34008fb0:	56028000 	.word	0x56028000

34008fb4 <LL_RCC_PLL3_GetN>:
{
34008fb4:	b480      	push	{r7}
34008fb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34008fb8:	4b05      	ldr	r3, [pc, #20]	@ (34008fd0 <LL_RCC_PLL3_GetN+0x1c>)
34008fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008fbe:	0a1b      	lsrs	r3, r3, #8
34008fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008fc4:	4618      	mov	r0, r3
34008fc6:	46bd      	mov	sp, r7
34008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fcc:	4770      	bx	lr
34008fce:	bf00      	nop
34008fd0:	56028000 	.word	0x56028000

34008fd4 <LL_RCC_PLL3_GetM>:
{
34008fd4:	b480      	push	{r7}
34008fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34008fd8:	4b05      	ldr	r3, [pc, #20]	@ (34008ff0 <LL_RCC_PLL3_GetM+0x1c>)
34008fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34008fde:	0d1b      	lsrs	r3, r3, #20
34008fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008fe4:	4618      	mov	r0, r3
34008fe6:	46bd      	mov	sp, r7
34008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fec:	4770      	bx	lr
34008fee:	bf00      	nop
34008ff0:	56028000 	.word	0x56028000

34008ff4 <LL_RCC_PLL3_GetP1>:
{
34008ff4:	b480      	push	{r7}
34008ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008ff8:	4b05      	ldr	r3, [pc, #20]	@ (34009010 <LL_RCC_PLL3_GetP1+0x1c>)
34008ffa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34008ffe:	0edb      	lsrs	r3, r3, #27
34009000:	f003 0307 	and.w	r3, r3, #7
}
34009004:	4618      	mov	r0, r3
34009006:	46bd      	mov	sp, r7
34009008:	f85d 7b04 	ldr.w	r7, [sp], #4
3400900c:	4770      	bx	lr
3400900e:	bf00      	nop
34009010:	56028000 	.word	0x56028000

34009014 <LL_RCC_PLL3_GetP2>:
{
34009014:	b480      	push	{r7}
34009016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34009018:	4b05      	ldr	r3, [pc, #20]	@ (34009030 <LL_RCC_PLL3_GetP2+0x1c>)
3400901a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400901e:	0e1b      	lsrs	r3, r3, #24
34009020:	f003 0307 	and.w	r3, r3, #7
}
34009024:	4618      	mov	r0, r3
34009026:	46bd      	mov	sp, r7
34009028:	f85d 7b04 	ldr.w	r7, [sp], #4
3400902c:	4770      	bx	lr
3400902e:	bf00      	nop
34009030:	56028000 	.word	0x56028000

34009034 <LL_RCC_PLL3P_IsEnabled>:
{
34009034:	b480      	push	{r7}
34009036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34009038:	4b07      	ldr	r3, [pc, #28]	@ (34009058 <LL_RCC_PLL3P_IsEnabled+0x24>)
3400903a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400903e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34009042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34009046:	d101      	bne.n	3400904c <LL_RCC_PLL3P_IsEnabled+0x18>
34009048:	2301      	movs	r3, #1
3400904a:	e000      	b.n	3400904e <LL_RCC_PLL3P_IsEnabled+0x1a>
3400904c:	2300      	movs	r3, #0
}
3400904e:	4618      	mov	r0, r3
34009050:	46bd      	mov	sp, r7
34009052:	f85d 7b04 	ldr.w	r7, [sp], #4
34009056:	4770      	bx	lr
34009058:	56028000 	.word	0x56028000

3400905c <LL_RCC_PLL3_GetFRACN>:
{
3400905c:	b480      	push	{r7}
3400905e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34009060:	4b04      	ldr	r3, [pc, #16]	@ (34009074 <LL_RCC_PLL3_GetFRACN+0x18>)
34009062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34009066:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400906a:	4618      	mov	r0, r3
3400906c:	46bd      	mov	sp, r7
3400906e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009072:	4770      	bx	lr
34009074:	56028000 	.word	0x56028000

34009078 <LL_RCC_PLL4_GetSource>:
{
34009078:	b480      	push	{r7}
3400907a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3400907c:	4b04      	ldr	r3, [pc, #16]	@ (34009090 <LL_RCC_PLL4_GetSource+0x18>)
3400907e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34009082:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34009086:	4618      	mov	r0, r3
34009088:	46bd      	mov	sp, r7
3400908a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400908e:	4770      	bx	lr
34009090:	56028000 	.word	0x56028000

34009094 <LL_RCC_PLL4_IsReady>:
{
34009094:	b480      	push	{r7}
34009096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34009098:	4b07      	ldr	r3, [pc, #28]	@ (340090b8 <LL_RCC_PLL4_IsReady+0x24>)
3400909a:	685b      	ldr	r3, [r3, #4]
3400909c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340090a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340090a4:	d101      	bne.n	340090aa <LL_RCC_PLL4_IsReady+0x16>
340090a6:	2301      	movs	r3, #1
340090a8:	e000      	b.n	340090ac <LL_RCC_PLL4_IsReady+0x18>
340090aa:	2300      	movs	r3, #0
}
340090ac:	4618      	mov	r0, r3
340090ae:	46bd      	mov	sp, r7
340090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
340090b4:	4770      	bx	lr
340090b6:	bf00      	nop
340090b8:	56028000 	.word	0x56028000

340090bc <LL_RCC_PLL4_IsEnabledBypass>:
{
340090bc:	b480      	push	{r7}
340090be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340090c0:	4b07      	ldr	r3, [pc, #28]	@ (340090e0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340090c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340090c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340090ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340090ce:	d101      	bne.n	340090d4 <LL_RCC_PLL4_IsEnabledBypass+0x18>
340090d0:	2301      	movs	r3, #1
340090d2:	e000      	b.n	340090d6 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340090d4:	2300      	movs	r3, #0
}
340090d6:	4618      	mov	r0, r3
340090d8:	46bd      	mov	sp, r7
340090da:	f85d 7b04 	ldr.w	r7, [sp], #4
340090de:	4770      	bx	lr
340090e0:	56028000 	.word	0x56028000

340090e4 <LL_RCC_PLL4_GetN>:
{
340090e4:	b480      	push	{r7}
340090e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340090e8:	4b05      	ldr	r3, [pc, #20]	@ (34009100 <LL_RCC_PLL4_GetN+0x1c>)
340090ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340090ee:	0a1b      	lsrs	r3, r3, #8
340090f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
340090f4:	4618      	mov	r0, r3
340090f6:	46bd      	mov	sp, r7
340090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340090fc:	4770      	bx	lr
340090fe:	bf00      	nop
34009100:	56028000 	.word	0x56028000

34009104 <LL_RCC_PLL4_GetM>:
{
34009104:	b480      	push	{r7}
34009106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34009108:	4b05      	ldr	r3, [pc, #20]	@ (34009120 <LL_RCC_PLL4_GetM+0x1c>)
3400910a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400910e:	0d1b      	lsrs	r3, r3, #20
34009110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34009114:	4618      	mov	r0, r3
34009116:	46bd      	mov	sp, r7
34009118:	f85d 7b04 	ldr.w	r7, [sp], #4
3400911c:	4770      	bx	lr
3400911e:	bf00      	nop
34009120:	56028000 	.word	0x56028000

34009124 <LL_RCC_PLL4_GetP1>:
{
34009124:	b480      	push	{r7}
34009126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34009128:	4b05      	ldr	r3, [pc, #20]	@ (34009140 <LL_RCC_PLL4_GetP1+0x1c>)
3400912a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400912e:	0edb      	lsrs	r3, r3, #27
34009130:	f003 0307 	and.w	r3, r3, #7
}
34009134:	4618      	mov	r0, r3
34009136:	46bd      	mov	sp, r7
34009138:	f85d 7b04 	ldr.w	r7, [sp], #4
3400913c:	4770      	bx	lr
3400913e:	bf00      	nop
34009140:	56028000 	.word	0x56028000

34009144 <LL_RCC_PLL4_GetP2>:
{
34009144:	b480      	push	{r7}
34009146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34009148:	4b05      	ldr	r3, [pc, #20]	@ (34009160 <LL_RCC_PLL4_GetP2+0x1c>)
3400914a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400914e:	0e1b      	lsrs	r3, r3, #24
34009150:	f003 0307 	and.w	r3, r3, #7
}
34009154:	4618      	mov	r0, r3
34009156:	46bd      	mov	sp, r7
34009158:	f85d 7b04 	ldr.w	r7, [sp], #4
3400915c:	4770      	bx	lr
3400915e:	bf00      	nop
34009160:	56028000 	.word	0x56028000

34009164 <LL_RCC_PLL4P_IsEnabled>:
{
34009164:	b480      	push	{r7}
34009166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34009168:	4b07      	ldr	r3, [pc, #28]	@ (34009188 <LL_RCC_PLL4P_IsEnabled+0x24>)
3400916a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400916e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34009172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34009176:	d101      	bne.n	3400917c <LL_RCC_PLL4P_IsEnabled+0x18>
34009178:	2301      	movs	r3, #1
3400917a:	e000      	b.n	3400917e <LL_RCC_PLL4P_IsEnabled+0x1a>
3400917c:	2300      	movs	r3, #0
}
3400917e:	4618      	mov	r0, r3
34009180:	46bd      	mov	sp, r7
34009182:	f85d 7b04 	ldr.w	r7, [sp], #4
34009186:	4770      	bx	lr
34009188:	56028000 	.word	0x56028000

3400918c <LL_RCC_PLL4_GetFRACN>:
{
3400918c:	b480      	push	{r7}
3400918e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34009190:	4b04      	ldr	r3, [pc, #16]	@ (340091a4 <LL_RCC_PLL4_GetFRACN+0x18>)
34009192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34009196:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3400919a:	4618      	mov	r0, r3
3400919c:	46bd      	mov	sp, r7
3400919e:	f85d 7b04 	ldr.w	r7, [sp], #4
340091a2:	4770      	bx	lr
340091a4:	56028000 	.word	0x56028000

340091a8 <LL_RCC_IC3_Enable>:
{
340091a8:	b480      	push	{r7}
340091aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340091ac:	4b04      	ldr	r3, [pc, #16]	@ (340091c0 <LL_RCC_IC3_Enable+0x18>)
340091ae:	2204      	movs	r2, #4
340091b0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340091b4:	bf00      	nop
340091b6:	46bd      	mov	sp, r7
340091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340091bc:	4770      	bx	lr
340091be:	bf00      	nop
340091c0:	56028000 	.word	0x56028000

340091c4 <LL_RCC_IC3_IsEnabled>:
{
340091c4:	b480      	push	{r7}
340091c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
340091c8:	4b07      	ldr	r3, [pc, #28]	@ (340091e8 <LL_RCC_IC3_IsEnabled+0x24>)
340091ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340091ce:	f003 0304 	and.w	r3, r3, #4
340091d2:	2b04      	cmp	r3, #4
340091d4:	d101      	bne.n	340091da <LL_RCC_IC3_IsEnabled+0x16>
340091d6:	2301      	movs	r3, #1
340091d8:	e000      	b.n	340091dc <LL_RCC_IC3_IsEnabled+0x18>
340091da:	2300      	movs	r3, #0
}
340091dc:	4618      	mov	r0, r3
340091de:	46bd      	mov	sp, r7
340091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340091e4:	4770      	bx	lr
340091e6:	bf00      	nop
340091e8:	56028000 	.word	0x56028000

340091ec <LL_RCC_IC3_GetSource>:
{
340091ec:	b480      	push	{r7}
340091ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
340091f0:	4b04      	ldr	r3, [pc, #16]	@ (34009204 <LL_RCC_IC3_GetSource+0x18>)
340091f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
340091f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340091fa:	4618      	mov	r0, r3
340091fc:	46bd      	mov	sp, r7
340091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009202:	4770      	bx	lr
34009204:	56028000 	.word	0x56028000

34009208 <LL_RCC_IC3_GetDivider>:
{
34009208:	b480      	push	{r7}
3400920a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3400920c:	4b05      	ldr	r3, [pc, #20]	@ (34009224 <LL_RCC_IC3_GetDivider+0x1c>)
3400920e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34009212:	0c1b      	lsrs	r3, r3, #16
34009214:	b2db      	uxtb	r3, r3
34009216:	3301      	adds	r3, #1
}
34009218:	4618      	mov	r0, r3
3400921a:	46bd      	mov	sp, r7
3400921c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009220:	4770      	bx	lr
34009222:	bf00      	nop
34009224:	56028000 	.word	0x56028000

34009228 <LL_RCC_IC4_Enable>:
{
34009228:	b480      	push	{r7}
3400922a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3400922c:	4b04      	ldr	r3, [pc, #16]	@ (34009240 <LL_RCC_IC4_Enable+0x18>)
3400922e:	2208      	movs	r2, #8
34009230:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009234:	bf00      	nop
34009236:	46bd      	mov	sp, r7
34009238:	f85d 7b04 	ldr.w	r7, [sp], #4
3400923c:	4770      	bx	lr
3400923e:	bf00      	nop
34009240:	56028000 	.word	0x56028000

34009244 <LL_RCC_IC4_IsEnabled>:
{
34009244:	b480      	push	{r7}
34009246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34009248:	4b07      	ldr	r3, [pc, #28]	@ (34009268 <LL_RCC_IC4_IsEnabled+0x24>)
3400924a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400924e:	f003 0308 	and.w	r3, r3, #8
34009252:	2b08      	cmp	r3, #8
34009254:	d101      	bne.n	3400925a <LL_RCC_IC4_IsEnabled+0x16>
34009256:	2301      	movs	r3, #1
34009258:	e000      	b.n	3400925c <LL_RCC_IC4_IsEnabled+0x18>
3400925a:	2300      	movs	r3, #0
}
3400925c:	4618      	mov	r0, r3
3400925e:	46bd      	mov	sp, r7
34009260:	f85d 7b04 	ldr.w	r7, [sp], #4
34009264:	4770      	bx	lr
34009266:	bf00      	nop
34009268:	56028000 	.word	0x56028000

3400926c <LL_RCC_IC4_GetSource>:
{
3400926c:	b480      	push	{r7}
3400926e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34009270:	4b04      	ldr	r3, [pc, #16]	@ (34009284 <LL_RCC_IC4_GetSource+0x18>)
34009272:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34009276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400927a:	4618      	mov	r0, r3
3400927c:	46bd      	mov	sp, r7
3400927e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009282:	4770      	bx	lr
34009284:	56028000 	.word	0x56028000

34009288 <LL_RCC_IC4_GetDivider>:
{
34009288:	b480      	push	{r7}
3400928a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3400928c:	4b05      	ldr	r3, [pc, #20]	@ (340092a4 <LL_RCC_IC4_GetDivider+0x1c>)
3400928e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34009292:	0c1b      	lsrs	r3, r3, #16
34009294:	b2db      	uxtb	r3, r3
34009296:	3301      	adds	r3, #1
}
34009298:	4618      	mov	r0, r3
3400929a:	46bd      	mov	sp, r7
3400929c:	f85d 7b04 	ldr.w	r7, [sp], #4
340092a0:	4770      	bx	lr
340092a2:	bf00      	nop
340092a4:	56028000 	.word	0x56028000

340092a8 <LL_RCC_IC5_Enable>:
{
340092a8:	b480      	push	{r7}
340092aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340092ac:	4b04      	ldr	r3, [pc, #16]	@ (340092c0 <LL_RCC_IC5_Enable+0x18>)
340092ae:	2210      	movs	r2, #16
340092b0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340092b4:	bf00      	nop
340092b6:	46bd      	mov	sp, r7
340092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340092bc:	4770      	bx	lr
340092be:	bf00      	nop
340092c0:	56028000 	.word	0x56028000

340092c4 <LL_RCC_IC5_IsEnabled>:
{
340092c4:	b480      	push	{r7}
340092c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340092c8:	4b07      	ldr	r3, [pc, #28]	@ (340092e8 <LL_RCC_IC5_IsEnabled+0x24>)
340092ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340092ce:	f003 0310 	and.w	r3, r3, #16
340092d2:	2b10      	cmp	r3, #16
340092d4:	d101      	bne.n	340092da <LL_RCC_IC5_IsEnabled+0x16>
340092d6:	2301      	movs	r3, #1
340092d8:	e000      	b.n	340092dc <LL_RCC_IC5_IsEnabled+0x18>
340092da:	2300      	movs	r3, #0
}
340092dc:	4618      	mov	r0, r3
340092de:	46bd      	mov	sp, r7
340092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340092e4:	4770      	bx	lr
340092e6:	bf00      	nop
340092e8:	56028000 	.word	0x56028000

340092ec <LL_RCC_IC5_GetSource>:
{
340092ec:	b480      	push	{r7}
340092ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340092f0:	4b04      	ldr	r3, [pc, #16]	@ (34009304 <LL_RCC_IC5_GetSource+0x18>)
340092f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
340092f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340092fa:	4618      	mov	r0, r3
340092fc:	46bd      	mov	sp, r7
340092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009302:	4770      	bx	lr
34009304:	56028000 	.word	0x56028000

34009308 <LL_RCC_IC5_GetDivider>:
{
34009308:	b480      	push	{r7}
3400930a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3400930c:	4b05      	ldr	r3, [pc, #20]	@ (34009324 <LL_RCC_IC5_GetDivider+0x1c>)
3400930e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34009312:	0c1b      	lsrs	r3, r3, #16
34009314:	b2db      	uxtb	r3, r3
34009316:	3301      	adds	r3, #1
}
34009318:	4618      	mov	r0, r3
3400931a:	46bd      	mov	sp, r7
3400931c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009320:	4770      	bx	lr
34009322:	bf00      	nop
34009324:	56028000 	.word	0x56028000

34009328 <LL_RCC_IC7_Enable>:
{
34009328:	b480      	push	{r7}
3400932a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3400932c:	4b04      	ldr	r3, [pc, #16]	@ (34009340 <LL_RCC_IC7_Enable+0x18>)
3400932e:	2240      	movs	r2, #64	@ 0x40
34009330:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009334:	bf00      	nop
34009336:	46bd      	mov	sp, r7
34009338:	f85d 7b04 	ldr.w	r7, [sp], #4
3400933c:	4770      	bx	lr
3400933e:	bf00      	nop
34009340:	56028000 	.word	0x56028000

34009344 <LL_RCC_IC7_IsEnabled>:
{
34009344:	b480      	push	{r7}
34009346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34009348:	4b07      	ldr	r3, [pc, #28]	@ (34009368 <LL_RCC_IC7_IsEnabled+0x24>)
3400934a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400934e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34009352:	2b40      	cmp	r3, #64	@ 0x40
34009354:	d101      	bne.n	3400935a <LL_RCC_IC7_IsEnabled+0x16>
34009356:	2301      	movs	r3, #1
34009358:	e000      	b.n	3400935c <LL_RCC_IC7_IsEnabled+0x18>
3400935a:	2300      	movs	r3, #0
}
3400935c:	4618      	mov	r0, r3
3400935e:	46bd      	mov	sp, r7
34009360:	f85d 7b04 	ldr.w	r7, [sp], #4
34009364:	4770      	bx	lr
34009366:	bf00      	nop
34009368:	56028000 	.word	0x56028000

3400936c <LL_RCC_IC7_GetSource>:
{
3400936c:	b480      	push	{r7}
3400936e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34009370:	4b04      	ldr	r3, [pc, #16]	@ (34009384 <LL_RCC_IC7_GetSource+0x18>)
34009372:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34009376:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400937a:	4618      	mov	r0, r3
3400937c:	46bd      	mov	sp, r7
3400937e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009382:	4770      	bx	lr
34009384:	56028000 	.word	0x56028000

34009388 <LL_RCC_IC7_GetDivider>:
{
34009388:	b480      	push	{r7}
3400938a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
3400938c:	4b05      	ldr	r3, [pc, #20]	@ (340093a4 <LL_RCC_IC7_GetDivider+0x1c>)
3400938e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34009392:	0c1b      	lsrs	r3, r3, #16
34009394:	b2db      	uxtb	r3, r3
34009396:	3301      	adds	r3, #1
}
34009398:	4618      	mov	r0, r3
3400939a:	46bd      	mov	sp, r7
3400939c:	f85d 7b04 	ldr.w	r7, [sp], #4
340093a0:	4770      	bx	lr
340093a2:	bf00      	nop
340093a4:	56028000 	.word	0x56028000

340093a8 <LL_RCC_IC8_Enable>:
{
340093a8:	b480      	push	{r7}
340093aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340093ac:	4b04      	ldr	r3, [pc, #16]	@ (340093c0 <LL_RCC_IC8_Enable+0x18>)
340093ae:	2280      	movs	r2, #128	@ 0x80
340093b0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340093b4:	bf00      	nop
340093b6:	46bd      	mov	sp, r7
340093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340093bc:	4770      	bx	lr
340093be:	bf00      	nop
340093c0:	56028000 	.word	0x56028000

340093c4 <LL_RCC_IC8_IsEnabled>:
{
340093c4:	b480      	push	{r7}
340093c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340093c8:	4b07      	ldr	r3, [pc, #28]	@ (340093e8 <LL_RCC_IC8_IsEnabled+0x24>)
340093ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340093ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340093d2:	2b80      	cmp	r3, #128	@ 0x80
340093d4:	d101      	bne.n	340093da <LL_RCC_IC8_IsEnabled+0x16>
340093d6:	2301      	movs	r3, #1
340093d8:	e000      	b.n	340093dc <LL_RCC_IC8_IsEnabled+0x18>
340093da:	2300      	movs	r3, #0
}
340093dc:	4618      	mov	r0, r3
340093de:	46bd      	mov	sp, r7
340093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340093e4:	4770      	bx	lr
340093e6:	bf00      	nop
340093e8:	56028000 	.word	0x56028000

340093ec <LL_RCC_IC8_GetSource>:
{
340093ec:	b480      	push	{r7}
340093ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340093f0:	4b04      	ldr	r3, [pc, #16]	@ (34009404 <LL_RCC_IC8_GetSource+0x18>)
340093f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
340093f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340093fa:	4618      	mov	r0, r3
340093fc:	46bd      	mov	sp, r7
340093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009402:	4770      	bx	lr
34009404:	56028000 	.word	0x56028000

34009408 <LL_RCC_IC8_GetDivider>:
{
34009408:	b480      	push	{r7}
3400940a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
3400940c:	4b05      	ldr	r3, [pc, #20]	@ (34009424 <LL_RCC_IC8_GetDivider+0x1c>)
3400940e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34009412:	0c1b      	lsrs	r3, r3, #16
34009414:	b2db      	uxtb	r3, r3
34009416:	3301      	adds	r3, #1
}
34009418:	4618      	mov	r0, r3
3400941a:	46bd      	mov	sp, r7
3400941c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009420:	4770      	bx	lr
34009422:	bf00      	nop
34009424:	56028000 	.word	0x56028000

34009428 <LL_RCC_IC9_Enable>:
{
34009428:	b480      	push	{r7}
3400942a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3400942c:	4b04      	ldr	r3, [pc, #16]	@ (34009440 <LL_RCC_IC9_Enable+0x18>)
3400942e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34009432:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009436:	bf00      	nop
34009438:	46bd      	mov	sp, r7
3400943a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400943e:	4770      	bx	lr
34009440:	56028000 	.word	0x56028000

34009444 <LL_RCC_IC9_IsEnabled>:
{
34009444:	b480      	push	{r7}
34009446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34009448:	4b07      	ldr	r3, [pc, #28]	@ (34009468 <LL_RCC_IC9_IsEnabled+0x24>)
3400944a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400944e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34009452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009456:	d101      	bne.n	3400945c <LL_RCC_IC9_IsEnabled+0x18>
34009458:	2301      	movs	r3, #1
3400945a:	e000      	b.n	3400945e <LL_RCC_IC9_IsEnabled+0x1a>
3400945c:	2300      	movs	r3, #0
}
3400945e:	4618      	mov	r0, r3
34009460:	46bd      	mov	sp, r7
34009462:	f85d 7b04 	ldr.w	r7, [sp], #4
34009466:	4770      	bx	lr
34009468:	56028000 	.word	0x56028000

3400946c <LL_RCC_IC9_GetSource>:
{
3400946c:	b480      	push	{r7}
3400946e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34009470:	4b04      	ldr	r3, [pc, #16]	@ (34009484 <LL_RCC_IC9_GetSource+0x18>)
34009472:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400947a:	4618      	mov	r0, r3
3400947c:	46bd      	mov	sp, r7
3400947e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009482:	4770      	bx	lr
34009484:	56028000 	.word	0x56028000

34009488 <LL_RCC_IC9_GetDivider>:
{
34009488:	b480      	push	{r7}
3400948a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
3400948c:	4b05      	ldr	r3, [pc, #20]	@ (340094a4 <LL_RCC_IC9_GetDivider+0x1c>)
3400948e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34009492:	0c1b      	lsrs	r3, r3, #16
34009494:	b2db      	uxtb	r3, r3
34009496:	3301      	adds	r3, #1
}
34009498:	4618      	mov	r0, r3
3400949a:	46bd      	mov	sp, r7
3400949c:	f85d 7b04 	ldr.w	r7, [sp], #4
340094a0:	4770      	bx	lr
340094a2:	bf00      	nop
340094a4:	56028000 	.word	0x56028000

340094a8 <LL_RCC_IC10_Enable>:
{
340094a8:	b480      	push	{r7}
340094aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340094ac:	4b04      	ldr	r3, [pc, #16]	@ (340094c0 <LL_RCC_IC10_Enable+0x18>)
340094ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
340094b2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340094b6:	bf00      	nop
340094b8:	46bd      	mov	sp, r7
340094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340094be:	4770      	bx	lr
340094c0:	56028000 	.word	0x56028000

340094c4 <LL_RCC_IC10_IsEnabled>:
{
340094c4:	b480      	push	{r7}
340094c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340094c8:	4b07      	ldr	r3, [pc, #28]	@ (340094e8 <LL_RCC_IC10_IsEnabled+0x24>)
340094ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340094ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340094d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340094d6:	d101      	bne.n	340094dc <LL_RCC_IC10_IsEnabled+0x18>
340094d8:	2301      	movs	r3, #1
340094da:	e000      	b.n	340094de <LL_RCC_IC10_IsEnabled+0x1a>
340094dc:	2300      	movs	r3, #0
}
340094de:	4618      	mov	r0, r3
340094e0:	46bd      	mov	sp, r7
340094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340094e6:	4770      	bx	lr
340094e8:	56028000 	.word	0x56028000

340094ec <LL_RCC_IC10_GetSource>:
{
340094ec:	b480      	push	{r7}
340094ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340094f0:	4b04      	ldr	r3, [pc, #16]	@ (34009504 <LL_RCC_IC10_GetSource+0x18>)
340094f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340094f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340094fa:	4618      	mov	r0, r3
340094fc:	46bd      	mov	sp, r7
340094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009502:	4770      	bx	lr
34009504:	56028000 	.word	0x56028000

34009508 <LL_RCC_IC10_GetDivider>:
{
34009508:	b480      	push	{r7}
3400950a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3400950c:	4b05      	ldr	r3, [pc, #20]	@ (34009524 <LL_RCC_IC10_GetDivider+0x1c>)
3400950e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34009512:	0c1b      	lsrs	r3, r3, #16
34009514:	b2db      	uxtb	r3, r3
34009516:	3301      	adds	r3, #1
}
34009518:	4618      	mov	r0, r3
3400951a:	46bd      	mov	sp, r7
3400951c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009520:	4770      	bx	lr
34009522:	bf00      	nop
34009524:	56028000 	.word	0x56028000

34009528 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34009528:	b480      	push	{r7}
3400952a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
3400952c:	4b04      	ldr	r3, [pc, #16]	@ (34009540 <LL_RCC_IC12_Enable+0x18>)
3400952e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34009532:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009536:	bf00      	nop
34009538:	46bd      	mov	sp, r7
3400953a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400953e:	4770      	bx	lr
34009540:	56028000 	.word	0x56028000

34009544 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34009544:	b480      	push	{r7}
34009546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34009548:	4b07      	ldr	r3, [pc, #28]	@ (34009568 <LL_RCC_IC12_IsEnabled+0x24>)
3400954a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400954e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34009552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34009556:	d101      	bne.n	3400955c <LL_RCC_IC12_IsEnabled+0x18>
34009558:	2301      	movs	r3, #1
3400955a:	e000      	b.n	3400955e <LL_RCC_IC12_IsEnabled+0x1a>
3400955c:	2300      	movs	r3, #0
}
3400955e:	4618      	mov	r0, r3
34009560:	46bd      	mov	sp, r7
34009562:	f85d 7b04 	ldr.w	r7, [sp], #4
34009566:	4770      	bx	lr
34009568:	56028000 	.word	0x56028000

3400956c <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
3400956c:	b480      	push	{r7}
3400956e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34009570:	4b04      	ldr	r3, [pc, #16]	@ (34009584 <LL_RCC_IC12_GetSource+0x18>)
34009572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34009576:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400957a:	4618      	mov	r0, r3
3400957c:	46bd      	mov	sp, r7
3400957e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009582:	4770      	bx	lr
34009584:	56028000 	.word	0x56028000

34009588 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34009588:	b480      	push	{r7}
3400958a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3400958c:	4b05      	ldr	r3, [pc, #20]	@ (340095a4 <LL_RCC_IC12_GetDivider+0x1c>)
3400958e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34009592:	0c1b      	lsrs	r3, r3, #16
34009594:	b2db      	uxtb	r3, r3
34009596:	3301      	adds	r3, #1
}
34009598:	4618      	mov	r0, r3
3400959a:	46bd      	mov	sp, r7
3400959c:	f85d 7b04 	ldr.w	r7, [sp], #4
340095a0:	4770      	bx	lr
340095a2:	bf00      	nop
340095a4:	56028000 	.word	0x56028000

340095a8 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
340095a8:	b480      	push	{r7}
340095aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
340095ac:	4b04      	ldr	r3, [pc, #16]	@ (340095c0 <LL_RCC_IC13_Enable+0x18>)
340095ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340095b2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340095b6:	bf00      	nop
340095b8:	46bd      	mov	sp, r7
340095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340095be:	4770      	bx	lr
340095c0:	56028000 	.word	0x56028000

340095c4 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
340095c4:	b480      	push	{r7}
340095c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
340095c8:	4b07      	ldr	r3, [pc, #28]	@ (340095e8 <LL_RCC_IC13_IsEnabled+0x24>)
340095ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340095ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340095d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340095d6:	d101      	bne.n	340095dc <LL_RCC_IC13_IsEnabled+0x18>
340095d8:	2301      	movs	r3, #1
340095da:	e000      	b.n	340095de <LL_RCC_IC13_IsEnabled+0x1a>
340095dc:	2300      	movs	r3, #0
}
340095de:	4618      	mov	r0, r3
340095e0:	46bd      	mov	sp, r7
340095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340095e6:	4770      	bx	lr
340095e8:	56028000 	.word	0x56028000

340095ec <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
340095ec:	b480      	push	{r7}
340095ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340095f0:	4b04      	ldr	r3, [pc, #16]	@ (34009604 <LL_RCC_IC13_GetSource+0x18>)
340095f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340095f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340095fa:	4618      	mov	r0, r3
340095fc:	46bd      	mov	sp, r7
340095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009602:	4770      	bx	lr
34009604:	56028000 	.word	0x56028000

34009608 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34009608:	b480      	push	{r7}
3400960a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3400960c:	4b05      	ldr	r3, [pc, #20]	@ (34009624 <LL_RCC_IC13_GetDivider+0x1c>)
3400960e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34009612:	0c1b      	lsrs	r3, r3, #16
34009614:	b2db      	uxtb	r3, r3
34009616:	3301      	adds	r3, #1
}
34009618:	4618      	mov	r0, r3
3400961a:	46bd      	mov	sp, r7
3400961c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009620:	4770      	bx	lr
34009622:	bf00      	nop
34009624:	56028000 	.word	0x56028000

34009628 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34009628:	b480      	push	{r7}
3400962a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3400962c:	4b04      	ldr	r3, [pc, #16]	@ (34009640 <LL_RCC_IC14_Enable+0x18>)
3400962e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34009632:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009636:	bf00      	nop
34009638:	46bd      	mov	sp, r7
3400963a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400963e:	4770      	bx	lr
34009640:	56028000 	.word	0x56028000

34009644 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34009644:	b480      	push	{r7}
34009646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34009648:	4b07      	ldr	r3, [pc, #28]	@ (34009668 <LL_RCC_IC14_IsEnabled+0x24>)
3400964a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400964e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34009652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34009656:	d101      	bne.n	3400965c <LL_RCC_IC14_IsEnabled+0x18>
34009658:	2301      	movs	r3, #1
3400965a:	e000      	b.n	3400965e <LL_RCC_IC14_IsEnabled+0x1a>
3400965c:	2300      	movs	r3, #0
}
3400965e:	4618      	mov	r0, r3
34009660:	46bd      	mov	sp, r7
34009662:	f85d 7b04 	ldr.w	r7, [sp], #4
34009666:	4770      	bx	lr
34009668:	56028000 	.word	0x56028000

3400966c <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
3400966c:	b480      	push	{r7}
3400966e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34009670:	4b04      	ldr	r3, [pc, #16]	@ (34009684 <LL_RCC_IC14_GetSource+0x18>)
34009672:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34009676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400967a:	4618      	mov	r0, r3
3400967c:	46bd      	mov	sp, r7
3400967e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009682:	4770      	bx	lr
34009684:	56028000 	.word	0x56028000

34009688 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34009688:	b480      	push	{r7}
3400968a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
3400968c:	4b05      	ldr	r3, [pc, #20]	@ (340096a4 <LL_RCC_IC14_GetDivider+0x1c>)
3400968e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34009692:	0c1b      	lsrs	r3, r3, #16
34009694:	b2db      	uxtb	r3, r3
34009696:	3301      	adds	r3, #1
}
34009698:	4618      	mov	r0, r3
3400969a:	46bd      	mov	sp, r7
3400969c:	f85d 7b04 	ldr.w	r7, [sp], #4
340096a0:	4770      	bx	lr
340096a2:	bf00      	nop
340096a4:	56028000 	.word	0x56028000

340096a8 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
340096a8:	b480      	push	{r7}
340096aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340096ac:	4b04      	ldr	r3, [pc, #16]	@ (340096c0 <LL_RCC_IC15_Enable+0x18>)
340096ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340096b2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340096b6:	bf00      	nop
340096b8:	46bd      	mov	sp, r7
340096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340096be:	4770      	bx	lr
340096c0:	56028000 	.word	0x56028000

340096c4 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
340096c4:	b480      	push	{r7}
340096c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340096c8:	4b07      	ldr	r3, [pc, #28]	@ (340096e8 <LL_RCC_IC15_IsEnabled+0x24>)
340096ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340096ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340096d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340096d6:	d101      	bne.n	340096dc <LL_RCC_IC15_IsEnabled+0x18>
340096d8:	2301      	movs	r3, #1
340096da:	e000      	b.n	340096de <LL_RCC_IC15_IsEnabled+0x1a>
340096dc:	2300      	movs	r3, #0
}
340096de:	4618      	mov	r0, r3
340096e0:	46bd      	mov	sp, r7
340096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340096e6:	4770      	bx	lr
340096e8:	56028000 	.word	0x56028000

340096ec <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
340096ec:	b480      	push	{r7}
340096ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340096f0:	4b04      	ldr	r3, [pc, #16]	@ (34009704 <LL_RCC_IC15_GetSource+0x18>)
340096f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340096f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340096fa:	4618      	mov	r0, r3
340096fc:	46bd      	mov	sp, r7
340096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009702:	4770      	bx	lr
34009704:	56028000 	.word	0x56028000

34009708 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34009708:	b480      	push	{r7}
3400970a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
3400970c:	4b05      	ldr	r3, [pc, #20]	@ (34009724 <LL_RCC_IC15_GetDivider+0x1c>)
3400970e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009712:	0c1b      	lsrs	r3, r3, #16
34009714:	b2db      	uxtb	r3, r3
34009716:	3301      	adds	r3, #1
}
34009718:	4618      	mov	r0, r3
3400971a:	46bd      	mov	sp, r7
3400971c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009720:	4770      	bx	lr
34009722:	bf00      	nop
34009724:	56028000 	.word	0x56028000

34009728 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34009728:	b480      	push	{r7}
3400972a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
3400972c:	4b04      	ldr	r3, [pc, #16]	@ (34009740 <LL_RCC_IC16_Enable+0x18>)
3400972e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34009732:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009736:	bf00      	nop
34009738:	46bd      	mov	sp, r7
3400973a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400973e:	4770      	bx	lr
34009740:	56028000 	.word	0x56028000

34009744 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34009744:	b480      	push	{r7}
34009746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009748:	4b07      	ldr	r3, [pc, #28]	@ (34009768 <LL_RCC_IC16_IsEnabled+0x24>)
3400974a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400974e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34009752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34009756:	d101      	bne.n	3400975c <LL_RCC_IC16_IsEnabled+0x18>
34009758:	2301      	movs	r3, #1
3400975a:	e000      	b.n	3400975e <LL_RCC_IC16_IsEnabled+0x1a>
3400975c:	2300      	movs	r3, #0
}
3400975e:	4618      	mov	r0, r3
34009760:	46bd      	mov	sp, r7
34009762:	f85d 7b04 	ldr.w	r7, [sp], #4
34009766:	4770      	bx	lr
34009768:	56028000 	.word	0x56028000

3400976c <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
3400976c:	b480      	push	{r7}
3400976e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34009770:	4b04      	ldr	r3, [pc, #16]	@ (34009784 <LL_RCC_IC16_GetSource+0x18>)
34009772:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34009776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400977a:	4618      	mov	r0, r3
3400977c:	46bd      	mov	sp, r7
3400977e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009782:	4770      	bx	lr
34009784:	56028000 	.word	0x56028000

34009788 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34009788:	b480      	push	{r7}
3400978a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3400978c:	4b05      	ldr	r3, [pc, #20]	@ (340097a4 <LL_RCC_IC16_GetDivider+0x1c>)
3400978e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34009792:	0c1b      	lsrs	r3, r3, #16
34009794:	b2db      	uxtb	r3, r3
34009796:	3301      	adds	r3, #1
}
34009798:	4618      	mov	r0, r3
3400979a:	46bd      	mov	sp, r7
3400979c:	f85d 7b04 	ldr.w	r7, [sp], #4
340097a0:	4770      	bx	lr
340097a2:	bf00      	nop
340097a4:	56028000 	.word	0x56028000

340097a8 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
340097a8:	b480      	push	{r7}
340097aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340097ac:	4b04      	ldr	r3, [pc, #16]	@ (340097c0 <LL_RCC_IC17_Enable+0x18>)
340097ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340097b2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340097b6:	bf00      	nop
340097b8:	46bd      	mov	sp, r7
340097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340097be:	4770      	bx	lr
340097c0:	56028000 	.word	0x56028000

340097c4 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
340097c4:	b480      	push	{r7}
340097c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
340097c8:	4b07      	ldr	r3, [pc, #28]	@ (340097e8 <LL_RCC_IC17_IsEnabled+0x24>)
340097ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340097ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340097d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340097d6:	d101      	bne.n	340097dc <LL_RCC_IC17_IsEnabled+0x18>
340097d8:	2301      	movs	r3, #1
340097da:	e000      	b.n	340097de <LL_RCC_IC17_IsEnabled+0x1a>
340097dc:	2300      	movs	r3, #0
}
340097de:	4618      	mov	r0, r3
340097e0:	46bd      	mov	sp, r7
340097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340097e6:	4770      	bx	lr
340097e8:	56028000 	.word	0x56028000

340097ec <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
340097ec:	b480      	push	{r7}
340097ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340097f0:	4b04      	ldr	r3, [pc, #16]	@ (34009804 <LL_RCC_IC17_GetSource+0x18>)
340097f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340097f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340097fa:	4618      	mov	r0, r3
340097fc:	46bd      	mov	sp, r7
340097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009802:	4770      	bx	lr
34009804:	56028000 	.word	0x56028000

34009808 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34009808:	b480      	push	{r7}
3400980a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3400980c:	4b05      	ldr	r3, [pc, #20]	@ (34009824 <LL_RCC_IC17_GetDivider+0x1c>)
3400980e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34009812:	0c1b      	lsrs	r3, r3, #16
34009814:	b2db      	uxtb	r3, r3
34009816:	3301      	adds	r3, #1
}
34009818:	4618      	mov	r0, r3
3400981a:	46bd      	mov	sp, r7
3400981c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009820:	4770      	bx	lr
34009822:	bf00      	nop
34009824:	56028000 	.word	0x56028000

34009828 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34009828:	b480      	push	{r7}
3400982a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
3400982c:	4b04      	ldr	r3, [pc, #16]	@ (34009840 <LL_RCC_IC18_Enable+0x18>)
3400982e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34009832:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009836:	bf00      	nop
34009838:	46bd      	mov	sp, r7
3400983a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400983e:	4770      	bx	lr
34009840:	56028000 	.word	0x56028000

34009844 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34009844:	b480      	push	{r7}
34009846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009848:	4b07      	ldr	r3, [pc, #28]	@ (34009868 <LL_RCC_IC18_IsEnabled+0x24>)
3400984a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400984e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34009852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009856:	d101      	bne.n	3400985c <LL_RCC_IC18_IsEnabled+0x18>
34009858:	2301      	movs	r3, #1
3400985a:	e000      	b.n	3400985e <LL_RCC_IC18_IsEnabled+0x1a>
3400985c:	2300      	movs	r3, #0
}
3400985e:	4618      	mov	r0, r3
34009860:	46bd      	mov	sp, r7
34009862:	f85d 7b04 	ldr.w	r7, [sp], #4
34009866:	4770      	bx	lr
34009868:	56028000 	.word	0x56028000

3400986c <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
3400986c:	b480      	push	{r7}
3400986e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34009870:	4b04      	ldr	r3, [pc, #16]	@ (34009884 <LL_RCC_IC18_GetSource+0x18>)
34009872:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34009876:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400987a:	4618      	mov	r0, r3
3400987c:	46bd      	mov	sp, r7
3400987e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009882:	4770      	bx	lr
34009884:	56028000 	.word	0x56028000

34009888 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34009888:	b480      	push	{r7}
3400988a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3400988c:	4b05      	ldr	r3, [pc, #20]	@ (340098a4 <LL_RCC_IC18_GetDivider+0x1c>)
3400988e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34009892:	0c1b      	lsrs	r3, r3, #16
34009894:	b2db      	uxtb	r3, r3
34009896:	3301      	adds	r3, #1
}
34009898:	4618      	mov	r0, r3
3400989a:	46bd      	mov	sp, r7
3400989c:	f85d 7b04 	ldr.w	r7, [sp], #4
340098a0:	4770      	bx	lr
340098a2:	bf00      	nop
340098a4:	56028000 	.word	0x56028000

340098a8 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
340098a8:	b480      	push	{r7}
340098aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340098ac:	4b04      	ldr	r3, [pc, #16]	@ (340098c0 <LL_RCC_IC19_Enable+0x18>)
340098ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340098b2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340098b6:	bf00      	nop
340098b8:	46bd      	mov	sp, r7
340098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340098be:	4770      	bx	lr
340098c0:	56028000 	.word	0x56028000

340098c4 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
340098c4:	b480      	push	{r7}
340098c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340098c8:	4b07      	ldr	r3, [pc, #28]	@ (340098e8 <LL_RCC_IC19_IsEnabled+0x24>)
340098ca:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340098ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340098d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340098d6:	d101      	bne.n	340098dc <LL_RCC_IC19_IsEnabled+0x18>
340098d8:	2301      	movs	r3, #1
340098da:	e000      	b.n	340098de <LL_RCC_IC19_IsEnabled+0x1a>
340098dc:	2300      	movs	r3, #0
}
340098de:	4618      	mov	r0, r3
340098e0:	46bd      	mov	sp, r7
340098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340098e6:	4770      	bx	lr
340098e8:	56028000 	.word	0x56028000

340098ec <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
340098ec:	b480      	push	{r7}
340098ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340098f0:	4b04      	ldr	r3, [pc, #16]	@ (34009904 <LL_RCC_IC19_GetSource+0x18>)
340098f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340098f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340098fa:	4618      	mov	r0, r3
340098fc:	46bd      	mov	sp, r7
340098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34009902:	4770      	bx	lr
34009904:	56028000 	.word	0x56028000

34009908 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34009908:	b480      	push	{r7}
3400990a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3400990c:	4b05      	ldr	r3, [pc, #20]	@ (34009924 <LL_RCC_IC19_GetDivider+0x1c>)
3400990e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34009912:	0c1b      	lsrs	r3, r3, #16
34009914:	b2db      	uxtb	r3, r3
34009916:	3301      	adds	r3, #1
}
34009918:	4618      	mov	r0, r3
3400991a:	46bd      	mov	sp, r7
3400991c:	f85d 7b04 	ldr.w	r7, [sp], #4
34009920:	4770      	bx	lr
34009922:	bf00      	nop
34009924:	56028000 	.word	0x56028000

34009928 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34009928:	b480      	push	{r7}
3400992a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3400992c:	4b04      	ldr	r3, [pc, #16]	@ (34009940 <LL_RCC_IC20_Enable+0x18>)
3400992e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34009932:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009936:	bf00      	nop
34009938:	46bd      	mov	sp, r7
3400993a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400993e:	4770      	bx	lr
34009940:	56028000 	.word	0x56028000

34009944 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34009944:	b480      	push	{r7}
34009946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009948:	4b07      	ldr	r3, [pc, #28]	@ (34009968 <LL_RCC_IC20_IsEnabled+0x24>)
3400994a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400994e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34009952:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34009956:	d101      	bne.n	3400995c <LL_RCC_IC20_IsEnabled+0x18>
34009958:	2301      	movs	r3, #1
3400995a:	e000      	b.n	3400995e <LL_RCC_IC20_IsEnabled+0x1a>
3400995c:	2300      	movs	r3, #0
}
3400995e:	4618      	mov	r0, r3
34009960:	46bd      	mov	sp, r7
34009962:	f85d 7b04 	ldr.w	r7, [sp], #4
34009966:	4770      	bx	lr
34009968:	56028000 	.word	0x56028000

3400996c <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
3400996c:	b480      	push	{r7}
3400996e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34009970:	4b04      	ldr	r3, [pc, #16]	@ (34009984 <LL_RCC_IC20_GetSource+0x18>)
34009972:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34009976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400997a:	4618      	mov	r0, r3
3400997c:	46bd      	mov	sp, r7
3400997e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009982:	4770      	bx	lr
34009984:	56028000 	.word	0x56028000

34009988 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34009988:	b480      	push	{r7}
3400998a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400998c:	4b05      	ldr	r3, [pc, #20]	@ (340099a4 <LL_RCC_IC20_GetDivider+0x1c>)
3400998e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34009992:	0c1b      	lsrs	r3, r3, #16
34009994:	b2db      	uxtb	r3, r3
34009996:	3301      	adds	r3, #1
}
34009998:	4618      	mov	r0, r3
3400999a:	46bd      	mov	sp, r7
3400999c:	f85d 7b04 	ldr.w	r7, [sp], #4
340099a0:	4770      	bx	lr
340099a2:	bf00      	nop
340099a4:	56028000 	.word	0x56028000

340099a8 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
340099a8:	b480      	push	{r7}
340099aa:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340099ac:	4b04      	ldr	r3, [pc, #16]	@ (340099c0 <LL_RCC_CLKP_Enable+0x18>)
340099ae:	2240      	movs	r2, #64	@ 0x40
340099b0:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
340099b4:	bf00      	nop
340099b6:	46bd      	mov	sp, r7
340099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
340099bc:	4770      	bx	lr
340099be:	bf00      	nop
340099c0:	56028000 	.word	0x56028000

340099c4 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
340099c4:	b480      	push	{r7}
340099c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340099c8:	4b07      	ldr	r3, [pc, #28]	@ (340099e8 <LL_RCC_CLKP_IsEnabled+0x24>)
340099ca:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
340099ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340099d2:	2b40      	cmp	r3, #64	@ 0x40
340099d4:	d101      	bne.n	340099da <LL_RCC_CLKP_IsEnabled+0x16>
340099d6:	2301      	movs	r3, #1
340099d8:	e000      	b.n	340099dc <LL_RCC_CLKP_IsEnabled+0x18>
340099da:	2300      	movs	r3, #0
}
340099dc:	4618      	mov	r0, r3
340099de:	46bd      	mov	sp, r7
340099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340099e4:	4770      	bx	lr
340099e6:	bf00      	nop
340099e8:	56028000 	.word	0x56028000

340099ec <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
340099ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
340099f0:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
340099f4:	af00      	add	r7, sp, #0
340099f6:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
340099fa:	2300      	movs	r3, #0
340099fc:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34009a00:	2300      	movs	r3, #0
34009a02:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34009a06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a0e:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
34009a12:	2500      	movs	r5, #0
34009a14:	ea54 0305 	orrs.w	r3, r4, r5
34009a18:	f040 83e0 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a24:	f04f 0800 	mov.w	r8, #0
34009a28:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
34009a2c:	ea58 0309 	orrs.w	r3, r8, r9
34009a30:	f040 83d4 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a3c:	f04f 0a00 	mov.w	sl, #0
34009a40:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
34009a44:	ea5a 030b 	orrs.w	r3, sl, fp
34009a48:	f040 83c8 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a54:	2100      	movs	r1, #0
34009a56:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
34009a5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34009a5e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
34009a62:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
34009a66:	4603      	mov	r3, r0
34009a68:	460a      	mov	r2, r1
34009a6a:	4313      	orrs	r3, r2
34009a6c:	f040 83b6 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a78:	f002 0304 	and.w	r3, r2, #4
34009a7c:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
34009a80:	2300      	movs	r3, #0
34009a82:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
34009a86:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
34009a8a:	4603      	mov	r3, r0
34009a8c:	460a      	mov	r2, r1
34009a8e:	4313      	orrs	r3, r2
34009a90:	f040 83a4 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a9c:	f002 0301 	and.w	r3, r2, #1
34009aa0:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
34009aa4:	2300      	movs	r3, #0
34009aa6:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
34009aaa:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
34009aae:	4603      	mov	r3, r0
34009ab0:	460a      	mov	r2, r1
34009ab2:	4313      	orrs	r3, r2
34009ab4:	f040 8392 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ac0:	f002 0302 	and.w	r3, r2, #2
34009ac4:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
34009ac8:	2300      	movs	r3, #0
34009aca:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
34009ace:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
34009ad2:	4603      	mov	r3, r0
34009ad4:	460a      	mov	r2, r1
34009ad6:	4313      	orrs	r3, r2
34009ad8:	f040 8380 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009adc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ae4:	f002 0308 	and.w	r3, r2, #8
34009ae8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
34009aec:	2300      	movs	r3, #0
34009aee:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
34009af2:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
34009af6:	4603      	mov	r3, r0
34009af8:	460a      	mov	r2, r1
34009afa:	4313      	orrs	r3, r2
34009afc:	f040 836e 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b08:	f002 0310 	and.w	r3, r2, #16
34009b0c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
34009b10:	2300      	movs	r3, #0
34009b12:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
34009b16:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
34009b1a:	4603      	mov	r3, r0
34009b1c:	460a      	mov	r2, r1
34009b1e:	4313      	orrs	r3, r2
34009b20:	f040 835c 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b2c:	f002 0320 	and.w	r3, r2, #32
34009b30:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
34009b34:	2300      	movs	r3, #0
34009b36:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
34009b3a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
34009b3e:	4603      	mov	r3, r0
34009b40:	460a      	mov	r2, r1
34009b42:	4313      	orrs	r3, r2
34009b44:	f040 834a 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b50:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34009b54:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
34009b58:	2300      	movs	r3, #0
34009b5a:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
34009b5e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
34009b62:	4603      	mov	r3, r0
34009b64:	460a      	mov	r2, r1
34009b66:	4313      	orrs	r3, r2
34009b68:	f040 8338 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34009b78:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
34009b7c:	2300      	movs	r3, #0
34009b7e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
34009b82:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
34009b86:	4603      	mov	r3, r0
34009b88:	460a      	mov	r2, r1
34009b8a:	4313      	orrs	r3, r2
34009b8c:	f040 8326 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009b90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
34009b98:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34009b9c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
34009ba0:	2300      	movs	r3, #0
34009ba2:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
34009ba6:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
34009baa:	4603      	mov	r3, r0
34009bac:	460a      	mov	r2, r1
34009bae:	4313      	orrs	r3, r2
34009bb0:	f040 8314 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009bbc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34009bc0:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
34009bc4:	2300      	movs	r3, #0
34009bc6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
34009bca:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
34009bce:	4603      	mov	r3, r0
34009bd0:	460a      	mov	r2, r1
34009bd2:	4313      	orrs	r3, r2
34009bd4:	f040 8302 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009be0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
34009be4:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
34009be8:	2300      	movs	r3, #0
34009bea:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
34009bee:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
34009bf2:	4603      	mov	r3, r0
34009bf4:	460a      	mov	r2, r1
34009bf6:	4313      	orrs	r3, r2
34009bf8:	f040 82f0 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c04:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34009c08:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
34009c0c:	2300      	movs	r3, #0
34009c0e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
34009c12:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
34009c16:	4603      	mov	r3, r0
34009c18:	460a      	mov	r2, r1
34009c1a:	4313      	orrs	r3, r2
34009c1c:	f040 82de 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c28:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34009c2c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
34009c30:	2300      	movs	r3, #0
34009c32:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
34009c36:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
34009c3a:	4603      	mov	r3, r0
34009c3c:	460a      	mov	r2, r1
34009c3e:	4313      	orrs	r3, r2
34009c40:	f040 82cc 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34009c50:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
34009c54:	2300      	movs	r3, #0
34009c56:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
34009c5a:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
34009c5e:	4603      	mov	r3, r0
34009c60:	460a      	mov	r2, r1
34009c62:	4313      	orrs	r3, r2
34009c64:	f040 82ba 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34009c74:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
34009c78:	2300      	movs	r3, #0
34009c7a:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
34009c7e:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
34009c82:	4603      	mov	r3, r0
34009c84:	460a      	mov	r2, r1
34009c86:	4313      	orrs	r3, r2
34009c88:	f040 82a8 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009c8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
34009c94:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34009c98:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
34009c9c:	2300      	movs	r3, #0
34009c9e:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
34009ca2:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
34009ca6:	4603      	mov	r3, r0
34009ca8:	460a      	mov	r2, r1
34009caa:	4313      	orrs	r3, r2
34009cac:	f040 8296 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009cb8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34009cbc:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
34009cc0:	2300      	movs	r3, #0
34009cc2:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
34009cc6:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
34009cca:	4603      	mov	r3, r0
34009ccc:	460a      	mov	r2, r1
34009cce:	4313      	orrs	r3, r2
34009cd0:	f040 8284 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009cdc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34009ce0:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
34009ce4:	2300      	movs	r3, #0
34009ce6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
34009cea:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
34009cee:	4603      	mov	r3, r0
34009cf0:	460a      	mov	r2, r1
34009cf2:	4313      	orrs	r3, r2
34009cf4:	f040 8272 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009cf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34009d04:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
34009d08:	2300      	movs	r3, #0
34009d0a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
34009d0e:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
34009d12:	4603      	mov	r3, r0
34009d14:	460a      	mov	r2, r1
34009d16:	4313      	orrs	r3, r2
34009d18:	f040 8260 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34009d28:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
34009d2c:	2300      	movs	r3, #0
34009d2e:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
34009d32:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
34009d36:	4603      	mov	r3, r0
34009d38:	460a      	mov	r2, r1
34009d3a:	4313      	orrs	r3, r2
34009d3c:	f040 824e 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d48:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34009d4c:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
34009d50:	2300      	movs	r3, #0
34009d52:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
34009d56:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
34009d5a:	4603      	mov	r3, r0
34009d5c:	460a      	mov	r2, r1
34009d5e:	4313      	orrs	r3, r2
34009d60:	f040 823c 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34009d70:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
34009d74:	2300      	movs	r3, #0
34009d76:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
34009d7a:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
34009d7e:	4603      	mov	r3, r0
34009d80:	460a      	mov	r2, r1
34009d82:	4313      	orrs	r3, r2
34009d84:	f040 822a 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009d88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009d90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34009d94:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
34009d98:	2300      	movs	r3, #0
34009d9a:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
34009d9e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
34009da2:	4603      	mov	r3, r0
34009da4:	460a      	mov	r2, r1
34009da6:	4313      	orrs	r3, r2
34009da8:	f040 8218 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009dac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009db4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34009db8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
34009dbc:	2300      	movs	r3, #0
34009dbe:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
34009dc2:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
34009dc6:	4603      	mov	r3, r0
34009dc8:	460a      	mov	r2, r1
34009dca:	4313      	orrs	r3, r2
34009dcc:	f040 8206 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009dd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
34009ddc:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
34009de0:	2300      	movs	r3, #0
34009de2:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
34009de6:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
34009dea:	4603      	mov	r3, r0
34009dec:	460a      	mov	r2, r1
34009dee:	4313      	orrs	r3, r2
34009df0:	f040 81f4 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009df4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009dfc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34009e00:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
34009e04:	2300      	movs	r3, #0
34009e06:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
34009e0a:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
34009e0e:	4603      	mov	r3, r0
34009e10:	460a      	mov	r2, r1
34009e12:	4313      	orrs	r3, r2
34009e14:	f040 81e2 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e20:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009e24:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
34009e28:	2300      	movs	r3, #0
34009e2a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
34009e2e:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
34009e32:	4603      	mov	r3, r0
34009e34:	460a      	mov	r2, r1
34009e36:	4313      	orrs	r3, r2
34009e38:	f040 81d0 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34009e48:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
34009e4c:	2300      	movs	r3, #0
34009e4e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
34009e52:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
34009e56:	4603      	mov	r3, r0
34009e58:	460a      	mov	r2, r1
34009e5a:	4313      	orrs	r3, r2
34009e5c:	f040 81be 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34009e6c:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
34009e70:	2300      	movs	r3, #0
34009e72:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
34009e76:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
34009e7a:	4603      	mov	r3, r0
34009e7c:	460a      	mov	r2, r1
34009e7e:	4313      	orrs	r3, r2
34009e80:	f040 81ac 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009e84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
34009e8c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34009e90:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
34009e94:	2300      	movs	r3, #0
34009e96:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
34009e9a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
34009e9e:	4603      	mov	r3, r0
34009ea0:	460a      	mov	r2, r1
34009ea2:	4313      	orrs	r3, r2
34009ea4:	f040 819a 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ea8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
34009eb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34009eb4:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
34009eb8:	2300      	movs	r3, #0
34009eba:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
34009ebe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
34009ec2:	4603      	mov	r3, r0
34009ec4:	460a      	mov	r2, r1
34009ec6:	4313      	orrs	r3, r2
34009ec8:	f040 8188 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ecc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ed4:	2100      	movs	r1, #0
34009ed6:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
34009eda:	f003 0301 	and.w	r3, r3, #1
34009ede:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
34009ee2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
34009ee6:	4603      	mov	r3, r0
34009ee8:	460a      	mov	r2, r1
34009eea:	4313      	orrs	r3, r2
34009eec:	f040 8176 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ef8:	2100      	movs	r1, #0
34009efa:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
34009efe:	f003 0302 	and.w	r3, r3, #2
34009f02:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
34009f06:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
34009f0a:	4603      	mov	r3, r0
34009f0c:	460a      	mov	r2, r1
34009f0e:	4313      	orrs	r3, r2
34009f10:	f040 8164 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f1c:	2100      	movs	r1, #0
34009f1e:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
34009f22:	f003 0304 	and.w	r3, r3, #4
34009f26:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
34009f2a:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
34009f2e:	4603      	mov	r3, r0
34009f30:	460a      	mov	r2, r1
34009f32:	4313      	orrs	r3, r2
34009f34:	f040 8152 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f40:	2100      	movs	r1, #0
34009f42:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
34009f46:	f003 0308 	and.w	r3, r3, #8
34009f4a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
34009f4e:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
34009f52:	4603      	mov	r3, r0
34009f54:	460a      	mov	r2, r1
34009f56:	4313      	orrs	r3, r2
34009f58:	f040 8140 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f64:	2100      	movs	r1, #0
34009f66:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
34009f6a:	f003 0310 	and.w	r3, r3, #16
34009f6e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
34009f72:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
34009f76:	4603      	mov	r3, r0
34009f78:	460a      	mov	r2, r1
34009f7a:	4313      	orrs	r3, r2
34009f7c:	f040 812e 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009f80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
34009f88:	2100      	movs	r1, #0
34009f8a:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
34009f8e:	f003 0320 	and.w	r3, r3, #32
34009f92:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
34009f96:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
34009f9a:	4603      	mov	r3, r0
34009f9c:	460a      	mov	r2, r1
34009f9e:	4313      	orrs	r3, r2
34009fa0:	f040 811c 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fac:	2100      	movs	r1, #0
34009fae:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
34009fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34009fb6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
34009fba:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
34009fbe:	4603      	mov	r3, r0
34009fc0:	460a      	mov	r2, r1
34009fc2:	4313      	orrs	r3, r2
34009fc4:	f040 810a 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009fd0:	2100      	movs	r1, #0
34009fd2:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
34009fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34009fda:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
34009fde:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
34009fe2:	4603      	mov	r3, r0
34009fe4:	460a      	mov	r2, r1
34009fe6:	4313      	orrs	r3, r2
34009fe8:	f040 80f8 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009fec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ff4:	2100      	movs	r1, #0
34009ff6:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
34009ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34009ffe:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
3400a002:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
3400a006:	4603      	mov	r3, r0
3400a008:	460a      	mov	r2, r1
3400a00a:	4313      	orrs	r3, r2
3400a00c:	f040 80e6 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a014:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a018:	2100      	movs	r1, #0
3400a01a:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
3400a01e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400a022:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
3400a026:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
3400a02a:	4603      	mov	r3, r0
3400a02c:	460a      	mov	r2, r1
3400a02e:	4313      	orrs	r3, r2
3400a030:	f040 80d4 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a038:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a03c:	2100      	movs	r1, #0
3400a03e:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
3400a042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400a046:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
3400a04a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
3400a04e:	4603      	mov	r3, r0
3400a050:	460a      	mov	r2, r1
3400a052:	4313      	orrs	r3, r2
3400a054:	f040 80c2 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a060:	2100      	movs	r1, #0
3400a062:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
3400a066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400a06a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
3400a06e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
3400a072:	4603      	mov	r3, r0
3400a074:	460a      	mov	r2, r1
3400a076:	4313      	orrs	r3, r2
3400a078:	f040 80b0 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a07c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a080:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a084:	2100      	movs	r1, #0
3400a086:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
3400a08a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400a08e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
3400a092:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
3400a096:	4603      	mov	r3, r0
3400a098:	460a      	mov	r2, r1
3400a09a:	4313      	orrs	r3, r2
3400a09c:	f040 809e 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0a8:	2100      	movs	r1, #0
3400a0aa:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
3400a0ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400a0b2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
3400a0b6:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
3400a0ba:	4603      	mov	r3, r0
3400a0bc:	460a      	mov	r2, r1
3400a0be:	4313      	orrs	r3, r2
3400a0c0:	f040 808c 	bne.w	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0cc:	2100      	movs	r1, #0
3400a0ce:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
3400a0d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400a0d6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
3400a0da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
3400a0de:	4603      	mov	r3, r0
3400a0e0:	460a      	mov	r2, r1
3400a0e2:	4313      	orrs	r3, r2
3400a0e4:	d17a      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a0e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a0ee:	2100      	movs	r1, #0
3400a0f0:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
3400a0f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400a0f8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
3400a0fc:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
3400a100:	4603      	mov	r3, r0
3400a102:	460a      	mov	r2, r1
3400a104:	4313      	orrs	r3, r2
3400a106:	d169      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a110:	2100      	movs	r1, #0
3400a112:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
3400a116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400a11a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
3400a11e:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
3400a122:	4603      	mov	r3, r0
3400a124:	460a      	mov	r2, r1
3400a126:	4313      	orrs	r3, r2
3400a128:	d158      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a12a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a132:	2100      	movs	r1, #0
3400a134:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
3400a138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400a13c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
3400a140:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
3400a144:	4603      	mov	r3, r0
3400a146:	460a      	mov	r2, r1
3400a148:	4313      	orrs	r3, r2
3400a14a:	d147      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a14c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a150:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a154:	2100      	movs	r1, #0
3400a156:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
3400a15a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400a15e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
3400a162:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
3400a166:	4603      	mov	r3, r0
3400a168:	460a      	mov	r2, r1
3400a16a:	4313      	orrs	r3, r2
3400a16c:	d136      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a16e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a172:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a176:	2100      	movs	r1, #0
3400a178:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
3400a17c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400a180:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
3400a184:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
3400a188:	4603      	mov	r3, r0
3400a18a:	460a      	mov	r2, r1
3400a18c:	4313      	orrs	r3, r2
3400a18e:	d125      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a190:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a194:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a198:	2100      	movs	r1, #0
3400a19a:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
3400a19e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400a1a2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
3400a1a6:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
3400a1aa:	4603      	mov	r3, r0
3400a1ac:	460a      	mov	r2, r1
3400a1ae:	4313      	orrs	r3, r2
3400a1b0:	d114      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a1b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a1ba:	2100      	movs	r1, #0
3400a1bc:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
3400a1c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400a1c4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
3400a1c8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
3400a1cc:	4603      	mov	r3, r0
3400a1ce:	460a      	mov	r2, r1
3400a1d0:	4313      	orrs	r3, r2
3400a1d2:	d103      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400a1d4:	2188      	movs	r1, #136	@ 0x88
3400a1d6:	48d3      	ldr	r0, [pc, #844]	@ (3400a524 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
3400a1d8:	f7f7 fd60 	bl	34001c9c <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
3400a1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a1e4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
3400a1e8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
3400a1ec:	2300      	movs	r3, #0
3400a1ee:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
3400a1f2:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
3400a1f6:	4603      	mov	r3, r0
3400a1f8:	460a      	mov	r2, r1
3400a1fa:	4313      	orrs	r3, r2
3400a1fc:	f000 82b5 	beq.w	3400a76a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3400a200:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a204:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a20c:	f000 8240 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a210:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a214:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400a21c:	f000 8238 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a220:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a224:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a22c:	f000 8230 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a234:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a238:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
3400a23c:	f000 8228 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a244:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a248:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
3400a24c:	f000 8220 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a250:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a254:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a258:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
3400a25c:	f000 8218 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a264:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a268:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
3400a26c:	f000 8210 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a270:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a274:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a278:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
3400a27c:	f000 8208 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a284:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a288:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
3400a28c:	f000 8200 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a294:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a298:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
3400a29c:	f000 81f8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2a4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2a8:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
3400a2ac:	f000 81f0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2b4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2b8:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
3400a2bc:	f000 81e8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2c4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2c8:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
3400a2cc:	f000 81e0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2d4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2d8:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
3400a2dc:	f000 81d8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2e4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2e8:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
3400a2ec:	f000 81d0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2f4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a2f8:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
3400a2fc:	f000 81c8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a300:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a304:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a308:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
3400a30c:	f000 81c0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a314:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a318:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
3400a31c:	f000 81b8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a324:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a328:	4b7f      	ldr	r3, [pc, #508]	@ (3400a528 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3400a32a:	429a      	cmp	r2, r3
3400a32c:	f000 81b0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a334:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a338:	4b7c      	ldr	r3, [pc, #496]	@ (3400a52c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3400a33a:	429a      	cmp	r2, r3
3400a33c:	f000 81a8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a344:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a348:	4b79      	ldr	r3, [pc, #484]	@ (3400a530 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
3400a34a:	429a      	cmp	r2, r3
3400a34c:	f000 81a0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a354:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a358:	4b76      	ldr	r3, [pc, #472]	@ (3400a534 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3400a35a:	429a      	cmp	r2, r3
3400a35c:	f000 8198 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a364:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a368:	4b73      	ldr	r3, [pc, #460]	@ (3400a538 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3400a36a:	429a      	cmp	r2, r3
3400a36c:	f000 8190 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a370:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a374:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a378:	4b70      	ldr	r3, [pc, #448]	@ (3400a53c <HAL_RCCEx_PeriphCLKConfig+0xb50>)
3400a37a:	429a      	cmp	r2, r3
3400a37c:	f000 8188 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a384:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a388:	4b6d      	ldr	r3, [pc, #436]	@ (3400a540 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
3400a38a:	429a      	cmp	r2, r3
3400a38c:	f000 8180 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a390:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a394:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a398:	4b6a      	ldr	r3, [pc, #424]	@ (3400a544 <HAL_RCCEx_PeriphCLKConfig+0xb58>)
3400a39a:	429a      	cmp	r2, r3
3400a39c:	f000 8178 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3a4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3a8:	4b67      	ldr	r3, [pc, #412]	@ (3400a548 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
3400a3aa:	429a      	cmp	r2, r3
3400a3ac:	f000 8170 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3b4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3b8:	4b64      	ldr	r3, [pc, #400]	@ (3400a54c <HAL_RCCEx_PeriphCLKConfig+0xb60>)
3400a3ba:	429a      	cmp	r2, r3
3400a3bc:	f000 8168 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3c4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3c8:	4b61      	ldr	r3, [pc, #388]	@ (3400a550 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
3400a3ca:	429a      	cmp	r2, r3
3400a3cc:	f000 8160 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3d4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3d8:	4b5e      	ldr	r3, [pc, #376]	@ (3400a554 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
3400a3da:	429a      	cmp	r2, r3
3400a3dc:	f000 8158 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3e4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3e8:	4b5b      	ldr	r3, [pc, #364]	@ (3400a558 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
3400a3ea:	429a      	cmp	r2, r3
3400a3ec:	f000 8150 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3f4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a3f8:	4b58      	ldr	r3, [pc, #352]	@ (3400a55c <HAL_RCCEx_PeriphCLKConfig+0xb70>)
3400a3fa:	429a      	cmp	r2, r3
3400a3fc:	f000 8148 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a404:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a408:	4b55      	ldr	r3, [pc, #340]	@ (3400a560 <HAL_RCCEx_PeriphCLKConfig+0xb74>)
3400a40a:	429a      	cmp	r2, r3
3400a40c:	f000 8140 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a414:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a418:	4b52      	ldr	r3, [pc, #328]	@ (3400a564 <HAL_RCCEx_PeriphCLKConfig+0xb78>)
3400a41a:	429a      	cmp	r2, r3
3400a41c:	f000 8138 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a424:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a428:	4b4f      	ldr	r3, [pc, #316]	@ (3400a568 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
3400a42a:	429a      	cmp	r2, r3
3400a42c:	f000 8130 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a430:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a434:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a438:	4b4c      	ldr	r3, [pc, #304]	@ (3400a56c <HAL_RCCEx_PeriphCLKConfig+0xb80>)
3400a43a:	429a      	cmp	r2, r3
3400a43c:	f000 8128 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a440:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a444:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a448:	4b49      	ldr	r3, [pc, #292]	@ (3400a570 <HAL_RCCEx_PeriphCLKConfig+0xb84>)
3400a44a:	429a      	cmp	r2, r3
3400a44c:	f000 8120 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a454:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a458:	4b46      	ldr	r3, [pc, #280]	@ (3400a574 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
3400a45a:	429a      	cmp	r2, r3
3400a45c:	f000 8118 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a460:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a464:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a468:	4b43      	ldr	r3, [pc, #268]	@ (3400a578 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
3400a46a:	429a      	cmp	r2, r3
3400a46c:	f000 8110 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a470:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a474:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a478:	4b40      	ldr	r3, [pc, #256]	@ (3400a57c <HAL_RCCEx_PeriphCLKConfig+0xb90>)
3400a47a:	429a      	cmp	r2, r3
3400a47c:	f000 8108 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a484:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a488:	4b3d      	ldr	r3, [pc, #244]	@ (3400a580 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
3400a48a:	429a      	cmp	r2, r3
3400a48c:	f000 8100 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a490:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a494:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a498:	4b3a      	ldr	r3, [pc, #232]	@ (3400a584 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
3400a49a:	429a      	cmp	r2, r3
3400a49c:	f000 80f8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4a4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4a8:	4b37      	ldr	r3, [pc, #220]	@ (3400a588 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
3400a4aa:	429a      	cmp	r2, r3
3400a4ac:	f000 80f0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4b4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4b8:	4b34      	ldr	r3, [pc, #208]	@ (3400a58c <HAL_RCCEx_PeriphCLKConfig+0xba0>)
3400a4ba:	429a      	cmp	r2, r3
3400a4bc:	f000 80e8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4c4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4c8:	4b31      	ldr	r3, [pc, #196]	@ (3400a590 <HAL_RCCEx_PeriphCLKConfig+0xba4>)
3400a4ca:	429a      	cmp	r2, r3
3400a4cc:	f000 80e0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4d4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4d8:	4b2e      	ldr	r3, [pc, #184]	@ (3400a594 <HAL_RCCEx_PeriphCLKConfig+0xba8>)
3400a4da:	429a      	cmp	r2, r3
3400a4dc:	f000 80d8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4e4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4e8:	4b2b      	ldr	r3, [pc, #172]	@ (3400a598 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
3400a4ea:	429a      	cmp	r2, r3
3400a4ec:	f000 80d0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a4f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4f4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a4f8:	4b28      	ldr	r3, [pc, #160]	@ (3400a59c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
3400a4fa:	429a      	cmp	r2, r3
3400a4fc:	f000 80c8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a500:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a504:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a508:	4b25      	ldr	r3, [pc, #148]	@ (3400a5a0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
3400a50a:	429a      	cmp	r2, r3
3400a50c:	f000 80c0 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a510:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a514:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a518:	4b22      	ldr	r3, [pc, #136]	@ (3400a5a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
3400a51a:	429a      	cmp	r2, r3
3400a51c:	f000 80b8 	beq.w	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a520:	e042      	b.n	3400a5a8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
3400a522:	bf00      	nop
3400a524:	3401e800 	.word	0x3401e800
3400a528:	00010300 	.word	0x00010300
3400a52c:	00011300 	.word	0x00011300
3400a530:	00012300 	.word	0x00012300
3400a534:	00013300 	.word	0x00013300
3400a538:	00014300 	.word	0x00014300
3400a53c:	00015300 	.word	0x00015300
3400a540:	00016300 	.word	0x00016300
3400a544:	00017300 	.word	0x00017300
3400a548:	00018300 	.word	0x00018300
3400a54c:	00019300 	.word	0x00019300
3400a550:	0001a300 	.word	0x0001a300
3400a554:	0001b300 	.word	0x0001b300
3400a558:	0001c300 	.word	0x0001c300
3400a55c:	0001d300 	.word	0x0001d300
3400a560:	0001e300 	.word	0x0001e300
3400a564:	0001f300 	.word	0x0001f300
3400a568:	00020300 	.word	0x00020300
3400a56c:	00021300 	.word	0x00021300
3400a570:	00022300 	.word	0x00022300
3400a574:	00023300 	.word	0x00023300
3400a578:	00024300 	.word	0x00024300
3400a57c:	00025300 	.word	0x00025300
3400a580:	00026300 	.word	0x00026300
3400a584:	00027300 	.word	0x00027300
3400a588:	00028300 	.word	0x00028300
3400a58c:	00029300 	.word	0x00029300
3400a590:	0002a300 	.word	0x0002a300
3400a594:	0002b300 	.word	0x0002b300
3400a598:	0002c300 	.word	0x0002c300
3400a59c:	0002d300 	.word	0x0002d300
3400a5a0:	0002e300 	.word	0x0002e300
3400a5a4:	0002f300 	.word	0x0002f300
3400a5a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ac:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5b0:	4bb4      	ldr	r3, [pc, #720]	@ (3400a884 <HAL_RCCEx_PeriphCLKConfig+0xe98>)
3400a5b2:	429a      	cmp	r2, r3
3400a5b4:	d06c      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ba:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5be:	4bb2      	ldr	r3, [pc, #712]	@ (3400a888 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
3400a5c0:	429a      	cmp	r2, r3
3400a5c2:	d065      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5c8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5cc:	4baf      	ldr	r3, [pc, #700]	@ (3400a88c <HAL_RCCEx_PeriphCLKConfig+0xea0>)
3400a5ce:	429a      	cmp	r2, r3
3400a5d0:	d05e      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5d6:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5da:	4bad      	ldr	r3, [pc, #692]	@ (3400a890 <HAL_RCCEx_PeriphCLKConfig+0xea4>)
3400a5dc:	429a      	cmp	r2, r3
3400a5de:	d057      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5e4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5e8:	4baa      	ldr	r3, [pc, #680]	@ (3400a894 <HAL_RCCEx_PeriphCLKConfig+0xea8>)
3400a5ea:	429a      	cmp	r2, r3
3400a5ec:	d050      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5f2:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a5f6:	4ba8      	ldr	r3, [pc, #672]	@ (3400a898 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
3400a5f8:	429a      	cmp	r2, r3
3400a5fa:	d049      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a5fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a600:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a604:	4ba5      	ldr	r3, [pc, #660]	@ (3400a89c <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
3400a606:	429a      	cmp	r2, r3
3400a608:	d042      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a60a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a60e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a612:	4ba3      	ldr	r3, [pc, #652]	@ (3400a8a0 <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
3400a614:	429a      	cmp	r2, r3
3400a616:	d03b      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a61c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a620:	4ba0      	ldr	r3, [pc, #640]	@ (3400a8a4 <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
3400a622:	429a      	cmp	r2, r3
3400a624:	d034      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a626:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a62a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a62e:	4b9e      	ldr	r3, [pc, #632]	@ (3400a8a8 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
3400a630:	429a      	cmp	r2, r3
3400a632:	d02d      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a638:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a63c:	4b9b      	ldr	r3, [pc, #620]	@ (3400a8ac <HAL_RCCEx_PeriphCLKConfig+0xec0>)
3400a63e:	429a      	cmp	r2, r3
3400a640:	d026      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a642:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a646:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a64a:	4b99      	ldr	r3, [pc, #612]	@ (3400a8b0 <HAL_RCCEx_PeriphCLKConfig+0xec4>)
3400a64c:	429a      	cmp	r2, r3
3400a64e:	d01f      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a654:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a658:	4b96      	ldr	r3, [pc, #600]	@ (3400a8b4 <HAL_RCCEx_PeriphCLKConfig+0xec8>)
3400a65a:	429a      	cmp	r2, r3
3400a65c:	d018      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a65e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a662:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a666:	4b94      	ldr	r3, [pc, #592]	@ (3400a8b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
3400a668:	429a      	cmp	r2, r3
3400a66a:	d011      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a66c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a670:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a674:	4b91      	ldr	r3, [pc, #580]	@ (3400a8bc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
3400a676:	429a      	cmp	r2, r3
3400a678:	d00a      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a67a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a67e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
3400a682:	4b8f      	ldr	r3, [pc, #572]	@ (3400a8c0 <HAL_RCCEx_PeriphCLKConfig+0xed4>)
3400a684:	429a      	cmp	r2, r3
3400a686:	d003      	beq.n	3400a690 <HAL_RCCEx_PeriphCLKConfig+0xca4>
3400a688:	218e      	movs	r1, #142	@ 0x8e
3400a68a:	488e      	ldr	r0, [pc, #568]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a68c:	f7f7 fb06 	bl	34001c9c <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
3400a690:	f7fe fae2 	bl	34008c58 <LL_RCC_GetRTCClockSource>
3400a694:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3400a698:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a69c:	2b00      	cmp	r3, #0
3400a69e:	d018      	beq.n	3400a6d2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
3400a6a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6a4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a6a8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
3400a6ac:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
3400a6b0:	4293      	cmp	r3, r2
3400a6b2:	d00e      	beq.n	3400a6d2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
3400a6b4:	4b84      	ldr	r3, [pc, #528]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a6b8:	4a83      	ldr	r2, [pc, #524]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6ba:	f043 0301 	orr.w	r3, r3, #1
3400a6be:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3400a6c0:	4b81      	ldr	r3, [pc, #516]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
3400a6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a6c4:	f003 0301 	and.w	r3, r3, #1
3400a6c8:	2b00      	cmp	r3, #0
3400a6ca:	d102      	bne.n	3400a6d2 <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
3400a6cc:	2301      	movs	r3, #1
3400a6ce:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3400a6d2:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a6d6:	2b00      	cmp	r3, #0
3400a6d8:	d143      	bne.n	3400a762 <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3400a6da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6de:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a6e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a6e6:	d117      	bne.n	3400a718 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
3400a6e8:	f7f9 fafa 	bl	34003ce0 <HAL_GetTick>
3400a6ec:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
3400a6f0:	e00d      	b.n	3400a70e <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400a6f2:	f7f9 faf5 	bl	34003ce0 <HAL_GetTick>
3400a6f6:	4602      	mov	r2, r0
3400a6f8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3400a6fc:	1ad2      	subs	r2, r2, r3
3400a6fe:	f241 3388 	movw	r3, #5000	@ 0x1388
3400a702:	429a      	cmp	r2, r3
3400a704:	d903      	bls.n	3400a70e <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
3400a706:	2303      	movs	r3, #3
3400a708:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3400a70c:	e004      	b.n	3400a718 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3400a70e:	f7fd feb5 	bl	3400847c <LL_RCC_LSE_IsReady>
3400a712:	4603      	mov	r3, r0
3400a714:	2b00      	cmp	r3, #0
3400a716:	d0ec      	beq.n	3400a6f2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
3400a718:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a71c:	2b00      	cmp	r3, #0
3400a71e:	d11b      	bne.n	3400a758 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3400a720:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a724:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a72c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a730:	d108      	bne.n	3400a744 <HAL_RCCEx_PeriphCLKConfig+0xd58>
3400a732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a736:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a73a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400a73e:	4618      	mov	r0, r3
3400a740:	f7fe fa98 	bl	34008c74 <LL_RCC_SetRTC_HSEPrescaler>
3400a744:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a748:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a74c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a750:	4618      	mov	r0, r3
3400a752:	f7fe fa6b 	bl	34008c2c <LL_RCC_SetRTCClockSource>
3400a756:	e008      	b.n	3400a76a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
3400a758:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a75c:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
3400a760:	e003      	b.n	3400a76a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3400a762:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a766:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400a76a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a772:	f002 0304 	and.w	r3, r2, #4
3400a776:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3400a77a:	2300      	movs	r3, #0
3400a77c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
3400a780:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
3400a784:	4603      	mov	r3, r0
3400a786:	460a      	mov	r2, r1
3400a788:	4313      	orrs	r3, r2
3400a78a:	f000 81dc 	beq.w	3400ab46 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400a78e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a792:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a796:	2b00      	cmp	r3, #0
3400a798:	d02d      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a79a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a79e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7a2:	2b01      	cmp	r3, #1
3400a7a4:	d027      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7ae:	2b02      	cmp	r3, #2
3400a7b0:	d021      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7ba:	2b03      	cmp	r3, #3
3400a7bc:	d01b      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7c6:	2b04      	cmp	r3, #4
3400a7c8:	d015      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7d2:	2b05      	cmp	r3, #5
3400a7d4:	d00f      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7de:	2b06      	cmp	r3, #6
3400a7e0:	d009      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7ea:	2b07      	cmp	r3, #7
3400a7ec:	d003      	beq.n	3400a7f6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a7ee:	21d4      	movs	r1, #212	@ 0xd4
3400a7f0:	4834      	ldr	r0, [pc, #208]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a7f2:	f7f7 fa53 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3400a7f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a7fe:	2b04      	cmp	r3, #4
3400a800:	d166      	bne.n	3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400a802:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a808:	2b00      	cmp	r3, #0
3400a80a:	d015      	beq.n	3400a838 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a80c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a816:	d00f      	beq.n	3400a838 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a822:	d009      	beq.n	3400a838 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a824:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a82a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a82e:	d003      	beq.n	3400a838 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a830:	21d9      	movs	r1, #217	@ 0xd9
3400a832:	4824      	ldr	r0, [pc, #144]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a834:	f7f7 fa32 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400a838:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a83e:	2b00      	cmp	r3, #0
3400a840:	d005      	beq.n	3400a84e <HAL_RCCEx_PeriphCLKConfig+0xe62>
3400a842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a84c:	d903      	bls.n	3400a856 <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3400a84e:	21da      	movs	r1, #218	@ 0xda
3400a850:	481c      	ldr	r0, [pc, #112]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a852:	f7f7 fa23 	bl	34001c9c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400a856:	4b1d      	ldr	r3, [pc, #116]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a858:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400a85c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a860:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a868:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400a86a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a870:	3b01      	subs	r3, #1
3400a872:	041b      	lsls	r3, r3, #16
3400a874:	4313      	orrs	r3, r2
3400a876:	4a15      	ldr	r2, [pc, #84]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a878:	430b      	orrs	r3, r1
3400a87a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400a87e:	f7fe fd13 	bl	340092a8 <LL_RCC_IC5_Enable>
3400a882:	e159      	b.n	3400ab38 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a884:	00030300 	.word	0x00030300
3400a888:	00031300 	.word	0x00031300
3400a88c:	00032300 	.word	0x00032300
3400a890:	00033300 	.word	0x00033300
3400a894:	00034300 	.word	0x00034300
3400a898:	00035300 	.word	0x00035300
3400a89c:	00036300 	.word	0x00036300
3400a8a0:	00037300 	.word	0x00037300
3400a8a4:	00038300 	.word	0x00038300
3400a8a8:	00039300 	.word	0x00039300
3400a8ac:	0003a300 	.word	0x0003a300
3400a8b0:	0003b300 	.word	0x0003b300
3400a8b4:	0003c300 	.word	0x0003c300
3400a8b8:	0003d300 	.word	0x0003d300
3400a8bc:	0003e300 	.word	0x0003e300
3400a8c0:	0003f300 	.word	0x0003f300
3400a8c4:	3401e800 	.word	0x3401e800
3400a8c8:	56024800 	.word	0x56024800
3400a8cc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3400a8d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a8d8:	2b05      	cmp	r3, #5
3400a8da:	d140      	bne.n	3400a95e <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400a8dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a8e2:	2b00      	cmp	r3, #0
3400a8e4:	d015      	beq.n	3400a912 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a8e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a8ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a8f0:	d00f      	beq.n	3400a912 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a8f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a8f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a8fc:	d009      	beq.n	3400a912 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a8fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a904:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a908:	d003      	beq.n	3400a912 <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a90a:	21e6      	movs	r1, #230	@ 0xe6
3400a90c:	4860      	ldr	r0, [pc, #384]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a90e:	f7f7 f9c5 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400a912:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a918:	2b00      	cmp	r3, #0
3400a91a:	d005      	beq.n	3400a928 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3400a91c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a926:	d903      	bls.n	3400a930 <HAL_RCCEx_PeriphCLKConfig+0xf44>
3400a928:	21e7      	movs	r1, #231	@ 0xe7
3400a92a:	4859      	ldr	r0, [pc, #356]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a92c:	f7f7 f9b6 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400a930:	4b58      	ldr	r3, [pc, #352]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400a936:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a93a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a93e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400a944:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a94a:	3b01      	subs	r3, #1
3400a94c:	041b      	lsls	r3, r3, #16
3400a94e:	4313      	orrs	r3, r2
3400a950:	4a50      	ldr	r2, [pc, #320]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a952:	430b      	orrs	r3, r1
3400a954:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400a958:	f7fe fda6 	bl	340094a8 <LL_RCC_IC10_Enable>
3400a95c:	e0ec      	b.n	3400ab38 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400a95e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a962:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a966:	2b06      	cmp	r3, #6
3400a968:	d140      	bne.n	3400a9ec <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400a96a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a96e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a970:	2b00      	cmp	r3, #0
3400a972:	d015      	beq.n	3400a9a0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a97a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a97e:	d00f      	beq.n	3400a9a0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a980:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a98a:	d009      	beq.n	3400a9a0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a98c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a996:	d003      	beq.n	3400a9a0 <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a998:	21f3      	movs	r1, #243	@ 0xf3
3400a99a:	483d      	ldr	r0, [pc, #244]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a99c:	f7f7 f97e 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400a9a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9a6:	2b00      	cmp	r3, #0
3400a9a8:	d005      	beq.n	3400a9b6 <HAL_RCCEx_PeriphCLKConfig+0xfca>
3400a9aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a9b4:	d903      	bls.n	3400a9be <HAL_RCCEx_PeriphCLKConfig+0xfd2>
3400a9b6:	21f4      	movs	r1, #244	@ 0xf4
3400a9b8:	4835      	ldr	r0, [pc, #212]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a9ba:	f7f7 f96f 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400a9be:	4b35      	ldr	r3, [pc, #212]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a9c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400a9c4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a9c8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400a9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a9d8:	3b01      	subs	r3, #1
3400a9da:	041b      	lsls	r3, r3, #16
3400a9dc:	4313      	orrs	r3, r2
3400a9de:	4a2d      	ldr	r2, [pc, #180]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a9e0:	430b      	orrs	r3, r1
3400a9e2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400a9e6:	f7fe fe5f 	bl	340096a8 <LL_RCC_IC15_Enable>
3400a9ea:	e0a5      	b.n	3400ab38 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3400a9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a9f4:	2b03      	cmp	r3, #3
3400a9f6:	d14f      	bne.n	3400aa98 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400a9f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa00:	2b00      	cmp	r3, #0
3400aa02:	d019      	beq.n	3400aa38 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aa10:	d012      	beq.n	3400aa38 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aa1e:	d00b      	beq.n	3400aa38 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400aa28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aa2c:	d004      	beq.n	3400aa38 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400aa2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400aa32:	4817      	ldr	r0, [pc, #92]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400aa34:	f7f7 f932 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400aa38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa40:	2b00      	cmp	r3, #0
3400aa42:	d006      	beq.n	3400aa52 <HAL_RCCEx_PeriphCLKConfig+0x1066>
3400aa44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aa50:	d904      	bls.n	3400aa5c <HAL_RCCEx_PeriphCLKConfig+0x1070>
3400aa52:	f240 1101 	movw	r1, #257	@ 0x101
3400aa56:	480e      	ldr	r0, [pc, #56]	@ (3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400aa58:	f7f7 f920 	bl	34001c9c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400aa5c:	4b0d      	ldr	r3, [pc, #52]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400aa5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400aa62:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aa66:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400aa6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400aa72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400aa7a:	3b01      	subs	r3, #1
3400aa7c:	041b      	lsls	r3, r3, #16
3400aa7e:	4313      	orrs	r3, r2
3400aa80:	4a04      	ldr	r2, [pc, #16]	@ (3400aa94 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400aa82:	430b      	orrs	r3, r1
3400aa84:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400aa88:	f7fe ff0e 	bl	340098a8 <LL_RCC_IC19_Enable>
3400aa8c:	e054      	b.n	3400ab38 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400aa8e:	bf00      	nop
3400aa90:	3401e800 	.word	0x3401e800
3400aa94:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3400aa98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400aaa0:	2b07      	cmp	r3, #7
3400aaa2:	d149      	bne.n	3400ab38 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400aaa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aaac:	2b00      	cmp	r3, #0
3400aaae:	d019      	beq.n	3400aae4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aab0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aab4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aabc:	d012      	beq.n	3400aae4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aabe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aac2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aaca:	d00b      	beq.n	3400aae4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aacc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400aad4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aad8:	d004      	beq.n	3400aae4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400aada:	f240 110d 	movw	r1, #269	@ 0x10d
3400aade:	487d      	ldr	r0, [pc, #500]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aae0:	f7f7 f8dc 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400aae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400aaec:	2b00      	cmp	r3, #0
3400aaee:	d006      	beq.n	3400aafe <HAL_RCCEx_PeriphCLKConfig+0x1112>
3400aaf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400aaf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aafc:	d904      	bls.n	3400ab08 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3400aafe:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400ab02:	4874      	ldr	r0, [pc, #464]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ab04:	f7f7 f8ca 	bl	34001c9c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400ab08:	4b73      	ldr	r3, [pc, #460]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ab0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400ab0e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ab12:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ab16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400ab1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400ab26:	3b01      	subs	r3, #1
3400ab28:	041b      	lsls	r3, r3, #16
3400ab2a:	4313      	orrs	r3, r2
3400ab2c:	4a6a      	ldr	r2, [pc, #424]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ab2e:	430b      	orrs	r3, r1
3400ab30:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400ab34:	f7fe fef8 	bl	34009928 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3400ab38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400ab40:	4618      	mov	r0, r3
3400ab42:	f7fd fd4f 	bl	340085e4 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400ab46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ab4e:	2100      	movs	r1, #0
3400ab50:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
3400ab54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3400ab58:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3400ab5c:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
3400ab60:	4603      	mov	r3, r0
3400ab62:	460a      	mov	r2, r1
3400ab64:	4313      	orrs	r3, r2
3400ab66:	f000 80d1 	beq.w	3400ad0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400ab6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab72:	4b5a      	ldr	r3, [pc, #360]	@ (3400acdc <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
3400ab74:	429a      	cmp	r2, r3
3400ab76:	d019      	beq.n	3400abac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab80:	4b57      	ldr	r3, [pc, #348]	@ (3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
3400ab82:	429a      	cmp	r2, r3
3400ab84:	d012      	beq.n	3400abac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab8a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab8e:	4b55      	ldr	r3, [pc, #340]	@ (3400ace4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400ab90:	429a      	cmp	r2, r3
3400ab92:	d00b      	beq.n	3400abac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400ab94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ab9c:	4b52      	ldr	r3, [pc, #328]	@ (3400ace8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400ab9e:	429a      	cmp	r2, r3
3400aba0:	d004      	beq.n	3400abac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400aba2:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400aba6:	484b      	ldr	r0, [pc, #300]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aba8:	f7f7 f878 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400abac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abb0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400abb4:	4b4b      	ldr	r3, [pc, #300]	@ (3400ace4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400abb6:	429a      	cmp	r2, r3
3400abb8:	d142      	bne.n	3400ac40 <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400abba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abbe:	699b      	ldr	r3, [r3, #24]
3400abc0:	2b00      	cmp	r3, #0
3400abc2:	d016      	beq.n	3400abf2 <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abc8:	699b      	ldr	r3, [r3, #24]
3400abca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abce:	d010      	beq.n	3400abf2 <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abd4:	699b      	ldr	r3, [r3, #24]
3400abd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400abda:	d00a      	beq.n	3400abf2 <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abe0:	699b      	ldr	r3, [r3, #24]
3400abe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400abe6:	d004      	beq.n	3400abf2 <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400abe8:	f240 1129 	movw	r1, #297	@ 0x129
3400abec:	4839      	ldr	r0, [pc, #228]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400abee:	f7f7 f855 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400abf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abf6:	69db      	ldr	r3, [r3, #28]
3400abf8:	2b00      	cmp	r3, #0
3400abfa:	d005      	beq.n	3400ac08 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3400abfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac00:	69db      	ldr	r3, [r3, #28]
3400ac02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ac06:	d904      	bls.n	3400ac12 <HAL_RCCEx_PeriphCLKConfig+0x1226>
3400ac08:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400ac0c:	4831      	ldr	r0, [pc, #196]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ac0e:	f7f7 f845 	bl	34001c9c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400ac12:	4b31      	ldr	r3, [pc, #196]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ac14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400ac18:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ac1c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ac20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac24:	699a      	ldr	r2, [r3, #24]
3400ac26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac2a:	69db      	ldr	r3, [r3, #28]
3400ac2c:	3b01      	subs	r3, #1
3400ac2e:	041b      	lsls	r3, r3, #16
3400ac30:	4313      	orrs	r3, r2
3400ac32:	4a29      	ldr	r2, [pc, #164]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400ac34:	430b      	orrs	r3, r1
3400ac36:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400ac3a:	f7fe fab5 	bl	340091a8 <LL_RCC_IC3_Enable>
3400ac3e:	e05e      	b.n	3400acfe <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400ac40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400ac48:	4b27      	ldr	r3, [pc, #156]	@ (3400ace8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400ac4a:	429a      	cmp	r2, r3
3400ac4c:	d14e      	bne.n	3400acec <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400ac4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac52:	6a1b      	ldr	r3, [r3, #32]
3400ac54:	2b00      	cmp	r3, #0
3400ac56:	d016      	beq.n	3400ac86 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac5c:	6a1b      	ldr	r3, [r3, #32]
3400ac5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ac62:	d010      	beq.n	3400ac86 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac68:	6a1b      	ldr	r3, [r3, #32]
3400ac6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ac6e:	d00a      	beq.n	3400ac86 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac74:	6a1b      	ldr	r3, [r3, #32]
3400ac76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ac7a:	d004      	beq.n	3400ac86 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400ac7c:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400ac80:	4814      	ldr	r0, [pc, #80]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400ac82:	f7f7 f80b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ac86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac8c:	2b00      	cmp	r3, #0
3400ac8e:	d005      	beq.n	3400ac9c <HAL_RCCEx_PeriphCLKConfig+0x12b0>
3400ac90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ac9a:	d904      	bls.n	3400aca6 <HAL_RCCEx_PeriphCLKConfig+0x12ba>
3400ac9c:	f240 1137 	movw	r1, #311	@ 0x137
3400aca0:	480c      	ldr	r0, [pc, #48]	@ (3400acd4 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400aca2:	f7f6 fffb 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400aca6:	4b0c      	ldr	r3, [pc, #48]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400aca8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400acac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400acb0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400acb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acb8:	6a1a      	ldr	r2, [r3, #32]
3400acba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400acc0:	3b01      	subs	r3, #1
3400acc2:	041b      	lsls	r3, r3, #16
3400acc4:	4313      	orrs	r3, r2
3400acc6:	4a04      	ldr	r2, [pc, #16]	@ (3400acd8 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400acc8:	430b      	orrs	r3, r1
3400acca:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400acce:	f7fe faab 	bl	34009228 <LL_RCC_IC4_Enable>
3400acd2:	e014      	b.n	3400acfe <HAL_RCCEx_PeriphCLKConfig+0x1312>
3400acd4:	3401e800 	.word	0x3401e800
3400acd8:	56028000 	.word	0x56028000
3400acdc:	03000014 	.word	0x03000014
3400ace0:	03010014 	.word	0x03010014
3400ace4:	03020014 	.word	0x03020014
3400ace8:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400acec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acf0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400acf4:	4baf      	ldr	r3, [pc, #700]	@ (3400afb4 <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
3400acf6:	429a      	cmp	r2, r3
3400acf8:	d101      	bne.n	3400acfe <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3400acfa:	f7fe fe55 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3400acfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3400ad06:	4618      	mov	r0, r3
3400ad08:	f7fd fdfc 	bl	34008904 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400ad0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ad14:	2100      	movs	r1, #0
3400ad16:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3400ad1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400ad1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3400ad22:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3400ad26:	4603      	mov	r3, r0
3400ad28:	460a      	mov	r2, r1
3400ad2a:	4313      	orrs	r3, r2
3400ad2c:	f000 80c5 	beq.w	3400aeba <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400ad30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad38:	4b9f      	ldr	r3, [pc, #636]	@ (3400afb8 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3400ad3a:	429a      	cmp	r2, r3
3400ad3c:	d019      	beq.n	3400ad72 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad46:	4b9d      	ldr	r3, [pc, #628]	@ (3400afbc <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400ad48:	429a      	cmp	r2, r3
3400ad4a:	d012      	beq.n	3400ad72 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad54:	4b9a      	ldr	r3, [pc, #616]	@ (3400afc0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ad56:	429a      	cmp	r2, r3
3400ad58:	d00b      	beq.n	3400ad72 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad62:	4b98      	ldr	r3, [pc, #608]	@ (3400afc4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400ad64:	429a      	cmp	r2, r3
3400ad66:	d004      	beq.n	3400ad72 <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400ad68:	f240 1151 	movw	r1, #337	@ 0x151
3400ad6c:	4896      	ldr	r0, [pc, #600]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ad6e:	f7f6 ff95 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400ad72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ad7a:	4b91      	ldr	r3, [pc, #580]	@ (3400afc0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400ad7c:	429a      	cmp	r2, r3
3400ad7e:	d142      	bne.n	3400ae06 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400ad80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad84:	699b      	ldr	r3, [r3, #24]
3400ad86:	2b00      	cmp	r3, #0
3400ad88:	d016      	beq.n	3400adb8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ad8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad8e:	699b      	ldr	r3, [r3, #24]
3400ad90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad94:	d010      	beq.n	3400adb8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ad96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad9a:	699b      	ldr	r3, [r3, #24]
3400ad9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ada0:	d00a      	beq.n	3400adb8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400ada2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ada6:	699b      	ldr	r3, [r3, #24]
3400ada8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400adac:	d004      	beq.n	3400adb8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400adae:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400adb2:	4885      	ldr	r0, [pc, #532]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400adb4:	f7f6 ff72 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400adb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adbc:	69db      	ldr	r3, [r3, #28]
3400adbe:	2b00      	cmp	r3, #0
3400adc0:	d005      	beq.n	3400adce <HAL_RCCEx_PeriphCLKConfig+0x13e2>
3400adc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adc6:	69db      	ldr	r3, [r3, #28]
3400adc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400adcc:	d904      	bls.n	3400add8 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
3400adce:	f240 1157 	movw	r1, #343	@ 0x157
3400add2:	487d      	ldr	r0, [pc, #500]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400add4:	f7f6 ff62 	bl	34001c9c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400add8:	4b7c      	ldr	r3, [pc, #496]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400adda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400adde:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ade2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ade6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adea:	699a      	ldr	r2, [r3, #24]
3400adec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adf0:	69db      	ldr	r3, [r3, #28]
3400adf2:	3b01      	subs	r3, #1
3400adf4:	041b      	lsls	r3, r3, #16
3400adf6:	4313      	orrs	r3, r2
3400adf8:	4a74      	ldr	r2, [pc, #464]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400adfa:	430b      	orrs	r3, r1
3400adfc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400ae00:	f7fe f9d2 	bl	340091a8 <LL_RCC_IC3_Enable>
3400ae04:	e052      	b.n	3400aeac <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400ae06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400ae0e:	4b6d      	ldr	r3, [pc, #436]	@ (3400afc4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400ae10:	429a      	cmp	r2, r3
3400ae12:	d142      	bne.n	3400ae9a <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400ae14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae18:	6a1b      	ldr	r3, [r3, #32]
3400ae1a:	2b00      	cmp	r3, #0
3400ae1c:	d016      	beq.n	3400ae4c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae22:	6a1b      	ldr	r3, [r3, #32]
3400ae24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ae28:	d010      	beq.n	3400ae4c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae2e:	6a1b      	ldr	r3, [r3, #32]
3400ae30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ae34:	d00a      	beq.n	3400ae4c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae3a:	6a1b      	ldr	r3, [r3, #32]
3400ae3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ae40:	d004      	beq.n	3400ae4c <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400ae42:	f240 1163 	movw	r1, #355	@ 0x163
3400ae46:	4860      	ldr	r0, [pc, #384]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ae48:	f7f6 ff28 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400ae4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae52:	2b00      	cmp	r3, #0
3400ae54:	d005      	beq.n	3400ae62 <HAL_RCCEx_PeriphCLKConfig+0x1476>
3400ae56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ae60:	d904      	bls.n	3400ae6c <HAL_RCCEx_PeriphCLKConfig+0x1480>
3400ae62:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400ae66:	4858      	ldr	r0, [pc, #352]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400ae68:	f7f6 ff18 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400ae6c:	4b57      	ldr	r3, [pc, #348]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ae6e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400ae72:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ae76:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ae7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae7e:	6a1a      	ldr	r2, [r3, #32]
3400ae80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ae86:	3b01      	subs	r3, #1
3400ae88:	041b      	lsls	r3, r3, #16
3400ae8a:	4313      	orrs	r3, r2
3400ae8c:	4a4f      	ldr	r2, [pc, #316]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400ae8e:	430b      	orrs	r3, r1
3400ae90:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ae94:	f7fe f9c8 	bl	34009228 <LL_RCC_IC4_Enable>
3400ae98:	e008      	b.n	3400aeac <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400ae9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400aea2:	4b46      	ldr	r3, [pc, #280]	@ (3400afbc <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400aea4:	429a      	cmp	r2, r3
3400aea6:	d101      	bne.n	3400aeac <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
3400aea8:	f7fe fd7e 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3400aeac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aeb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400aeb4:	4618      	mov	r0, r3
3400aeb6:	f7fd fd25 	bl	34008904 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400aeba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
3400aec2:	2100      	movs	r1, #0
3400aec4:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400aec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400aecc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3400aed0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400aed4:	4603      	mov	r3, r0
3400aed6:	460a      	mov	r2, r1
3400aed8:	4313      	orrs	r3, r2
3400aeda:	f000 80db 	beq.w	3400b094 <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3400aede:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aee2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400aee6:	4b3a      	ldr	r3, [pc, #232]	@ (3400afd0 <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
3400aee8:	429a      	cmp	r2, r3
3400aeea:	d019      	beq.n	3400af20 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400aeec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aef0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400aef4:	4b37      	ldr	r3, [pc, #220]	@ (3400afd4 <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
3400aef6:	429a      	cmp	r2, r3
3400aef8:	d012      	beq.n	3400af20 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400aefa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aefe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af02:	4b35      	ldr	r3, [pc, #212]	@ (3400afd8 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400af04:	429a      	cmp	r2, r3
3400af06:	d00b      	beq.n	3400af20 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400af08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af0c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af10:	4b32      	ldr	r3, [pc, #200]	@ (3400afdc <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
3400af12:	429a      	cmp	r2, r3
3400af14:	d004      	beq.n	3400af20 <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400af16:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400af1a:	482b      	ldr	r0, [pc, #172]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af1c:	f7f6 febe 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400af20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af24:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400af28:	4b2b      	ldr	r3, [pc, #172]	@ (3400afd8 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400af2a:	429a      	cmp	r2, r3
3400af2c:	d158      	bne.n	3400afe0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400af2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af32:	699b      	ldr	r3, [r3, #24]
3400af34:	2b00      	cmp	r3, #0
3400af36:	d016      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af3c:	699b      	ldr	r3, [r3, #24]
3400af3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400af42:	d010      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af48:	699b      	ldr	r3, [r3, #24]
3400af4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400af4e:	d00a      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af54:	699b      	ldr	r3, [r3, #24]
3400af56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400af5a:	d004      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400af5c:	f240 1183 	movw	r1, #387	@ 0x183
3400af60:	4819      	ldr	r0, [pc, #100]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af62:	f7f6 fe9b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400af66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af6a:	69db      	ldr	r3, [r3, #28]
3400af6c:	2b00      	cmp	r3, #0
3400af6e:	d005      	beq.n	3400af7c <HAL_RCCEx_PeriphCLKConfig+0x1590>
3400af70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af74:	69db      	ldr	r3, [r3, #28]
3400af76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400af7a:	d904      	bls.n	3400af86 <HAL_RCCEx_PeriphCLKConfig+0x159a>
3400af7c:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400af80:	4811      	ldr	r0, [pc, #68]	@ (3400afc8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400af82:	f7f6 fe8b 	bl	34001c9c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400af86:	4b11      	ldr	r3, [pc, #68]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400af88:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400af8c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400af90:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400af94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af98:	699a      	ldr	r2, [r3, #24]
3400af9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af9e:	69db      	ldr	r3, [r3, #28]
3400afa0:	3b01      	subs	r3, #1
3400afa2:	041b      	lsls	r3, r3, #16
3400afa4:	4313      	orrs	r3, r2
3400afa6:	4a09      	ldr	r2, [pc, #36]	@ (3400afcc <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400afa8:	430b      	orrs	r3, r1
3400afaa:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400afae:	f7fe f8fb 	bl	340091a8 <LL_RCC_IC3_Enable>
3400afb2:	e068      	b.n	3400b086 <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400afb4:	03010014 	.word	0x03010014
3400afb8:	03000414 	.word	0x03000414
3400afbc:	03010414 	.word	0x03010414
3400afc0:	03020414 	.word	0x03020414
3400afc4:	03030414 	.word	0x03030414
3400afc8:	3401e800 	.word	0x3401e800
3400afcc:	56028000 	.word	0x56028000
3400afd0:	03000814 	.word	0x03000814
3400afd4:	03010814 	.word	0x03010814
3400afd8:	03020814 	.word	0x03020814
3400afdc:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400afe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afe4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400afe8:	4b8b      	ldr	r3, [pc, #556]	@ (3400b218 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
3400afea:	429a      	cmp	r2, r3
3400afec:	d142      	bne.n	3400b074 <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400afee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aff2:	6a1b      	ldr	r3, [r3, #32]
3400aff4:	2b00      	cmp	r3, #0
3400aff6:	d016      	beq.n	3400b026 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400aff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400affc:	6a1b      	ldr	r3, [r3, #32]
3400affe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b002:	d010      	beq.n	3400b026 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b004:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b008:	6a1b      	ldr	r3, [r3, #32]
3400b00a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b00e:	d00a      	beq.n	3400b026 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b014:	6a1b      	ldr	r3, [r3, #32]
3400b016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b01a:	d004      	beq.n	3400b026 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400b01c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400b020:	487e      	ldr	r0, [pc, #504]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b022:	f7f6 fe3b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b026:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b02c:	2b00      	cmp	r3, #0
3400b02e:	d005      	beq.n	3400b03c <HAL_RCCEx_PeriphCLKConfig+0x1650>
3400b030:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b03a:	d904      	bls.n	3400b046 <HAL_RCCEx_PeriphCLKConfig+0x165a>
3400b03c:	f240 1191 	movw	r1, #401	@ 0x191
3400b040:	4876      	ldr	r0, [pc, #472]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b042:	f7f6 fe2b 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b046:	4b76      	ldr	r3, [pc, #472]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b048:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b04c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b050:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b054:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b058:	6a1a      	ldr	r2, [r3, #32]
3400b05a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b060:	3b01      	subs	r3, #1
3400b062:	041b      	lsls	r3, r3, #16
3400b064:	4313      	orrs	r3, r2
3400b066:	4a6e      	ldr	r2, [pc, #440]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b068:	430b      	orrs	r3, r1
3400b06a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b06e:	f7fe f8db 	bl	34009228 <LL_RCC_IC4_Enable>
3400b072:	e008      	b.n	3400b086 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400b074:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b078:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400b07c:	4b69      	ldr	r3, [pc, #420]	@ (3400b224 <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3400b07e:	429a      	cmp	r2, r3
3400b080:	d101      	bne.n	3400b086 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
3400b082:	f7fe fc91 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3400b086:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b08a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400b08e:	4618      	mov	r0, r3
3400b090:	f7fd fc38 	bl	34008904 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400b094:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b098:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b09c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3400b0a0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3400b0a4:	2300      	movs	r3, #0
3400b0a6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3400b0aa:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3400b0ae:	4603      	mov	r3, r0
3400b0b0:	460a      	mov	r2, r1
3400b0b2:	4313      	orrs	r3, r2
3400b0b4:	f000 80c7 	beq.w	3400b246 <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400b0b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0c0:	2b00      	cmp	r3, #0
3400b0c2:	d016      	beq.n	3400b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0cc:	2b10      	cmp	r3, #16
3400b0ce:	d010      	beq.n	3400b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0d8:	2b20      	cmp	r3, #32
3400b0da:	d00a      	beq.n	3400b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0e4:	2b30      	cmp	r3, #48	@ 0x30
3400b0e6:	d004      	beq.n	3400b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400b0e8:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400b0ec:	484b      	ldr	r0, [pc, #300]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b0ee:	f7f6 fdd5 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400b0f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b0fa:	2b20      	cmp	r3, #32
3400b0fc:	d142      	bne.n	3400b184 <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400b0fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b102:	699b      	ldr	r3, [r3, #24]
3400b104:	2b00      	cmp	r3, #0
3400b106:	d016      	beq.n	3400b136 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b10c:	699b      	ldr	r3, [r3, #24]
3400b10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b112:	d010      	beq.n	3400b136 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b114:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b118:	699b      	ldr	r3, [r3, #24]
3400b11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b11e:	d00a      	beq.n	3400b136 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b124:	699b      	ldr	r3, [r3, #24]
3400b126:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b12a:	d004      	beq.n	3400b136 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400b12c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400b130:	483a      	ldr	r0, [pc, #232]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b132:	f7f6 fdb3 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400b136:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b13a:	69db      	ldr	r3, [r3, #28]
3400b13c:	2b00      	cmp	r3, #0
3400b13e:	d005      	beq.n	3400b14c <HAL_RCCEx_PeriphCLKConfig+0x1760>
3400b140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b144:	69db      	ldr	r3, [r3, #28]
3400b146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b14a:	d904      	bls.n	3400b156 <HAL_RCCEx_PeriphCLKConfig+0x176a>
3400b14c:	f240 11b1 	movw	r1, #433	@ 0x1b1
3400b150:	4832      	ldr	r0, [pc, #200]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b152:	f7f6 fda3 	bl	34001c9c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400b156:	4b32      	ldr	r3, [pc, #200]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b158:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b15c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b160:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b168:	699a      	ldr	r2, [r3, #24]
3400b16a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b16e:	69db      	ldr	r3, [r3, #28]
3400b170:	3b01      	subs	r3, #1
3400b172:	041b      	lsls	r3, r3, #16
3400b174:	4313      	orrs	r3, r2
3400b176:	4a2a      	ldr	r2, [pc, #168]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b178:	430b      	orrs	r3, r1
3400b17a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400b17e:	f7fe f813 	bl	340091a8 <LL_RCC_IC3_Enable>
3400b182:	e059      	b.n	3400b238 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3400b184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b188:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b18c:	2b30      	cmp	r3, #48	@ 0x30
3400b18e:	d14b      	bne.n	3400b228 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b190:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b194:	6a1b      	ldr	r3, [r3, #32]
3400b196:	2b00      	cmp	r3, #0
3400b198:	d016      	beq.n	3400b1c8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b19a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b19e:	6a1b      	ldr	r3, [r3, #32]
3400b1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b1a4:	d010      	beq.n	3400b1c8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1aa:	6a1b      	ldr	r3, [r3, #32]
3400b1ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b1b0:	d00a      	beq.n	3400b1c8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1b6:	6a1b      	ldr	r3, [r3, #32]
3400b1b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b1bc:	d004      	beq.n	3400b1c8 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400b1be:	f240 11bd 	movw	r1, #445	@ 0x1bd
3400b1c2:	4816      	ldr	r0, [pc, #88]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b1c4:	f7f6 fd6a 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b1c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b1ce:	2b00      	cmp	r3, #0
3400b1d0:	d005      	beq.n	3400b1de <HAL_RCCEx_PeriphCLKConfig+0x17f2>
3400b1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b1d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b1dc:	d904      	bls.n	3400b1e8 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
3400b1de:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400b1e2:	480e      	ldr	r0, [pc, #56]	@ (3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400b1e4:	f7f6 fd5a 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b1e8:	4b0d      	ldr	r3, [pc, #52]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b1ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b1ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b1f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b1f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1fa:	6a1a      	ldr	r2, [r3, #32]
3400b1fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b202:	3b01      	subs	r3, #1
3400b204:	041b      	lsls	r3, r3, #16
3400b206:	4313      	orrs	r3, r2
3400b208:	4a05      	ldr	r2, [pc, #20]	@ (3400b220 <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400b20a:	430b      	orrs	r3, r1
3400b20c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b210:	f7fe f80a 	bl	34009228 <LL_RCC_IC4_Enable>
3400b214:	e010      	b.n	3400b238 <HAL_RCCEx_PeriphCLKConfig+0x184c>
3400b216:	bf00      	nop
3400b218:	03030814 	.word	0x03030814
3400b21c:	3401e800 	.word	0x3401e800
3400b220:	56028000 	.word	0x56028000
3400b224:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3400b228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b22c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b230:	2b10      	cmp	r3, #16
3400b232:	d101      	bne.n	3400b238 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
3400b234:	f7fe fbb8 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3400b238:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b23c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400b240:	4618      	mov	r0, r3
3400b242:	f7fd fa77 	bl	34008734 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3400b246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b24e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400b252:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3400b256:	2300      	movs	r3, #0
3400b258:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3400b25c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3400b260:	4603      	mov	r3, r0
3400b262:	460a      	mov	r2, r1
3400b264:	4313      	orrs	r3, r2
3400b266:	f000 80c5 	beq.w	3400b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400b26a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b26e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b272:	4b9f      	ldr	r3, [pc, #636]	@ (3400b4f0 <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
3400b274:	429a      	cmp	r2, r3
3400b276:	d019      	beq.n	3400b2ac <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b278:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b27c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b280:	4b9c      	ldr	r3, [pc, #624]	@ (3400b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b282:	429a      	cmp	r2, r3
3400b284:	d012      	beq.n	3400b2ac <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b286:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b28a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b28e:	4b9a      	ldr	r3, [pc, #616]	@ (3400b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b290:	429a      	cmp	r2, r3
3400b292:	d00b      	beq.n	3400b2ac <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b294:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b298:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b29c:	4b97      	ldr	r3, [pc, #604]	@ (3400b4fc <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b29e:	429a      	cmp	r2, r3
3400b2a0:	d004      	beq.n	3400b2ac <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400b2a2:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400b2a6:	4896      	ldr	r0, [pc, #600]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b2a8:	f7f6 fcf8 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400b2ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2b0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b2b4:	4b90      	ldr	r3, [pc, #576]	@ (3400b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400b2b6:	429a      	cmp	r2, r3
3400b2b8:	d142      	bne.n	3400b340 <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b2ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2be:	6a1b      	ldr	r3, [r3, #32]
3400b2c0:	2b00      	cmp	r3, #0
3400b2c2:	d016      	beq.n	3400b2f2 <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2c8:	6a1b      	ldr	r3, [r3, #32]
3400b2ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b2ce:	d010      	beq.n	3400b2f2 <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2d4:	6a1b      	ldr	r3, [r3, #32]
3400b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b2da:	d00a      	beq.n	3400b2f2 <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2e0:	6a1b      	ldr	r3, [r3, #32]
3400b2e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b2e6:	d004      	beq.n	3400b2f2 <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400b2e8:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400b2ec:	4884      	ldr	r0, [pc, #528]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b2ee:	f7f6 fcd5 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b2f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b2f8:	2b00      	cmp	r3, #0
3400b2fa:	d005      	beq.n	3400b308 <HAL_RCCEx_PeriphCLKConfig+0x191c>
3400b2fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b306:	d904      	bls.n	3400b312 <HAL_RCCEx_PeriphCLKConfig+0x1926>
3400b308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400b30c:	487c      	ldr	r0, [pc, #496]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b30e:	f7f6 fcc5 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b312:	4b7c      	ldr	r3, [pc, #496]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b314:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b318:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b31c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b324:	6a1a      	ldr	r2, [r3, #32]
3400b326:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b32c:	3b01      	subs	r3, #1
3400b32e:	041b      	lsls	r3, r3, #16
3400b330:	4313      	orrs	r3, r2
3400b332:	4a74      	ldr	r2, [pc, #464]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b334:	430b      	orrs	r3, r1
3400b336:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b33a:	f7fd ff75 	bl	34009228 <LL_RCC_IC4_Enable>
3400b33e:	e052      	b.n	3400b3e6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3400b340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b344:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b348:	4b6c      	ldr	r3, [pc, #432]	@ (3400b4fc <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400b34a:	429a      	cmp	r2, r3
3400b34c:	d142      	bne.n	3400b3d4 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b34e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b354:	2b00      	cmp	r3, #0
3400b356:	d016      	beq.n	3400b386 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b358:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b35e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b362:	d010      	beq.n	3400b386 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b364:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b36e:	d00a      	beq.n	3400b386 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b370:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b376:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b37a:	d004      	beq.n	3400b386 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400b37c:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400b380:	485f      	ldr	r0, [pc, #380]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b382:	f7f6 fc8b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b386:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b38c:	2b00      	cmp	r3, #0
3400b38e:	d005      	beq.n	3400b39c <HAL_RCCEx_PeriphCLKConfig+0x19b0>
3400b390:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b39a:	d904      	bls.n	3400b3a6 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
3400b39c:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400b3a0:	4857      	ldr	r0, [pc, #348]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b3a2:	f7f6 fc7b 	bl	34001c9c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b3a6:	4b57      	ldr	r3, [pc, #348]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b3a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b3ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b3b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b3ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b3c0:	3b01      	subs	r3, #1
3400b3c2:	041b      	lsls	r3, r3, #16
3400b3c4:	4313      	orrs	r3, r2
3400b3c6:	4a4f      	ldr	r2, [pc, #316]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b3c8:	430b      	orrs	r3, r1
3400b3ca:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b3ce:	f7fd ff6b 	bl	340092a8 <LL_RCC_IC5_Enable>
3400b3d2:	e008      	b.n	3400b3e6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400b3d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3d8:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400b3dc:	4b45      	ldr	r3, [pc, #276]	@ (3400b4f4 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400b3de:	429a      	cmp	r2, r3
3400b3e0:	d101      	bne.n	3400b3e6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
3400b3e2:	f7fe fae1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3400b3e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3ea:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3400b3ee:	4618      	mov	r0, r3
3400b3f0:	f7fd fa51 	bl	34008896 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400b3f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b3fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400b400:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3400b404:	2300      	movs	r3, #0
3400b406:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3400b40a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3400b40e:	4603      	mov	r3, r0
3400b410:	460a      	mov	r2, r1
3400b412:	4313      	orrs	r3, r2
3400b414:	f000 80da 	beq.w	3400b5cc <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400b418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b41c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b420:	4b39      	ldr	r3, [pc, #228]	@ (3400b508 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
3400b422:	429a      	cmp	r2, r3
3400b424:	d019      	beq.n	3400b45a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b426:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b42a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b42e:	4b37      	ldr	r3, [pc, #220]	@ (3400b50c <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
3400b430:	429a      	cmp	r2, r3
3400b432:	d012      	beq.n	3400b45a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b434:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b438:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b43c:	4b34      	ldr	r3, [pc, #208]	@ (3400b510 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b43e:	429a      	cmp	r2, r3
3400b440:	d00b      	beq.n	3400b45a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b442:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b446:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b44a:	4b32      	ldr	r3, [pc, #200]	@ (3400b514 <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
3400b44c:	429a      	cmp	r2, r3
3400b44e:	d004      	beq.n	3400b45a <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400b450:	f240 2105 	movw	r1, #517	@ 0x205
3400b454:	482a      	ldr	r0, [pc, #168]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b456:	f7f6 fc21 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400b45a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b45e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b462:	4b2b      	ldr	r3, [pc, #172]	@ (3400b510 <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400b464:	429a      	cmp	r2, r3
3400b466:	d157      	bne.n	3400b518 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400b468:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b46c:	6a1b      	ldr	r3, [r3, #32]
3400b46e:	2b00      	cmp	r3, #0
3400b470:	d016      	beq.n	3400b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b472:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b476:	6a1b      	ldr	r3, [r3, #32]
3400b478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b47c:	d010      	beq.n	3400b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b47e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b482:	6a1b      	ldr	r3, [r3, #32]
3400b484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b488:	d00a      	beq.n	3400b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b48a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b48e:	6a1b      	ldr	r3, [r3, #32]
3400b490:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b494:	d004      	beq.n	3400b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400b496:	f240 210a 	movw	r1, #522	@ 0x20a
3400b49a:	4819      	ldr	r0, [pc, #100]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b49c:	f7f6 fbfe 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400b4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4a6:	2b00      	cmp	r3, #0
3400b4a8:	d005      	beq.n	3400b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1aca>
3400b4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b4b4:	d904      	bls.n	3400b4c0 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
3400b4b6:	f240 210b 	movw	r1, #523	@ 0x20b
3400b4ba:	4811      	ldr	r0, [pc, #68]	@ (3400b500 <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400b4bc:	f7f6 fbee 	bl	34001c9c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400b4c0:	4b10      	ldr	r3, [pc, #64]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b4c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b4c6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b4ca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b4ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4d2:	6a1a      	ldr	r2, [r3, #32]
3400b4d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400b4da:	3b01      	subs	r3, #1
3400b4dc:	041b      	lsls	r3, r3, #16
3400b4de:	4313      	orrs	r3, r2
3400b4e0:	4a08      	ldr	r2, [pc, #32]	@ (3400b504 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400b4e2:	430b      	orrs	r3, r1
3400b4e4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400b4e8:	f7fd fe9e 	bl	34009228 <LL_RCC_IC4_Enable>
3400b4ec:	e067      	b.n	3400b5be <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
3400b4ee:	bf00      	nop
3400b4f0:	0300001c 	.word	0x0300001c
3400b4f4:	0301001c 	.word	0x0301001c
3400b4f8:	0302001c 	.word	0x0302001c
3400b4fc:	0303001c 	.word	0x0303001c
3400b500:	3401e800 	.word	0x3401e800
3400b504:	56028000 	.word	0x56028000
3400b508:	0300041c 	.word	0x0300041c
3400b50c:	0301041c 	.word	0x0301041c
3400b510:	0302041c 	.word	0x0302041c
3400b514:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400b518:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b51c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b520:	4ba0      	ldr	r3, [pc, #640]	@ (3400b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
3400b522:	429a      	cmp	r2, r3
3400b524:	d142      	bne.n	3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400b526:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b52c:	2b00      	cmp	r3, #0
3400b52e:	d016      	beq.n	3400b55e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b530:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b53a:	d010      	beq.n	3400b55e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b546:	d00a      	beq.n	3400b55e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b548:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400b54e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b552:	d004      	beq.n	3400b55e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400b554:	f240 2117 	movw	r1, #535	@ 0x217
3400b558:	4893      	ldr	r0, [pc, #588]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b55a:	f7f6 fb9f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400b55e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b564:	2b00      	cmp	r3, #0
3400b566:	d005      	beq.n	3400b574 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
3400b568:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b572:	d904      	bls.n	3400b57e <HAL_RCCEx_PeriphCLKConfig+0x1b92>
3400b574:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400b578:	488b      	ldr	r0, [pc, #556]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b57a:	f7f6 fb8f 	bl	34001c9c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400b57e:	4b8b      	ldr	r3, [pc, #556]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b584:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b588:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b58c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b592:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b598:	3b01      	subs	r3, #1
3400b59a:	041b      	lsls	r3, r3, #16
3400b59c:	4313      	orrs	r3, r2
3400b59e:	4a83      	ldr	r2, [pc, #524]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b5a0:	430b      	orrs	r3, r1
3400b5a2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400b5a6:	f7fd fe7f 	bl	340092a8 <LL_RCC_IC5_Enable>
3400b5aa:	e008      	b.n	3400b5be <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400b5ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400b5b4:	4b7e      	ldr	r3, [pc, #504]	@ (3400b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
3400b5b6:	429a      	cmp	r2, r3
3400b5b8:	d101      	bne.n	3400b5be <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
3400b5ba:	f7fe f9f5 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3400b5be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5c2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3400b5c6:	4618      	mov	r0, r3
3400b5c8:	f7fd f965 	bl	34008896 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400b5cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b5d4:	f002 0301 	and.w	r3, r2, #1
3400b5d8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3400b5dc:	2300      	movs	r3, #0
3400b5de:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3400b5e2:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3400b5e6:	4603      	mov	r3, r0
3400b5e8:	460a      	mov	r2, r1
3400b5ea:	4313      	orrs	r3, r2
3400b5ec:	f000 8100 	beq.w	3400b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400b5f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b5f8:	2b00      	cmp	r3, #0
3400b5fa:	d02e      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b5fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b604:	2b10      	cmp	r3, #16
3400b606:	d028      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b60c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b610:	2b20      	cmp	r3, #32
3400b612:	d022      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b614:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b618:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b61c:	2b30      	cmp	r3, #48	@ 0x30
3400b61e:	d01c      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b624:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b628:	2b40      	cmp	r3, #64	@ 0x40
3400b62a:	d016      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b62c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b630:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b634:	2b50      	cmp	r3, #80	@ 0x50
3400b636:	d010      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b63c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b640:	2b60      	cmp	r3, #96	@ 0x60
3400b642:	d00a      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b644:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b648:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b64c:	2b70      	cmp	r3, #112	@ 0x70
3400b64e:	d004      	beq.n	3400b65a <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400b650:	f240 2132 	movw	r1, #562	@ 0x232
3400b654:	4854      	ldr	r0, [pc, #336]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b656:	f7f6 fb21 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400b65a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b65e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b662:	2b00      	cmp	r3, #0
3400b664:	d006      	beq.n	3400b674 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
3400b666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b66a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b672:	d904      	bls.n	3400b67e <HAL_RCCEx_PeriphCLKConfig+0x1c92>
3400b674:	f240 2133 	movw	r1, #563	@ 0x233
3400b678:	484b      	ldr	r0, [pc, #300]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b67a:	f7f6 fb0f 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400b67e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b686:	2b20      	cmp	r3, #32
3400b688:	d142      	bne.n	3400b710 <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b68a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b690:	2b00      	cmp	r3, #0
3400b692:	d016      	beq.n	3400b6c2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b69a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b69e:	d010      	beq.n	3400b6c2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b6a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b6aa:	d00a      	beq.n	3400b6c2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b6b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b6b6:	d004      	beq.n	3400b6c2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400b6b8:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400b6bc:	483a      	ldr	r0, [pc, #232]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b6be:	f7f6 faed 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b6c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6c8:	2b00      	cmp	r3, #0
3400b6ca:	d005      	beq.n	3400b6d8 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
3400b6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b6d6:	d904      	bls.n	3400b6e2 <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
3400b6d8:	f240 2139 	movw	r1, #569	@ 0x239
3400b6dc:	4832      	ldr	r0, [pc, #200]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b6de:	f7f6 fadd 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b6e2:	4b32      	ldr	r3, [pc, #200]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b6e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b6e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b6ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b6f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b6f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b6fc:	3b01      	subs	r3, #1
3400b6fe:	041b      	lsls	r3, r3, #16
3400b700:	4313      	orrs	r3, r2
3400b702:	4a2a      	ldr	r2, [pc, #168]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b704:	430b      	orrs	r3, r1
3400b706:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b70a:	f7fd fe0d 	bl	34009328 <LL_RCC_IC7_Enable>
3400b70e:	e059      	b.n	3400b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3400b710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b714:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b718:	2b30      	cmp	r3, #48	@ 0x30
3400b71a:	d14b      	bne.n	3400b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b722:	2b00      	cmp	r3, #0
3400b724:	d016      	beq.n	3400b754 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b726:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b72c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b730:	d010      	beq.n	3400b754 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b73c:	d00a      	beq.n	3400b754 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b73e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b748:	d004      	beq.n	3400b754 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b74a:	f240 2145 	movw	r1, #581	@ 0x245
3400b74e:	4816      	ldr	r0, [pc, #88]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b750:	f7f6 faa4 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b754:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b75a:	2b00      	cmp	r3, #0
3400b75c:	d005      	beq.n	3400b76a <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3400b75e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b768:	d904      	bls.n	3400b774 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3400b76a:	f240 2146 	movw	r1, #582	@ 0x246
3400b76e:	480e      	ldr	r0, [pc, #56]	@ (3400b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b770:	f7f6 fa94 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b774:	4b0d      	ldr	r3, [pc, #52]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b77a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b77e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b782:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b788:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b78e:	3b01      	subs	r3, #1
3400b790:	041b      	lsls	r3, r3, #16
3400b792:	4313      	orrs	r3, r2
3400b794:	4a05      	ldr	r2, [pc, #20]	@ (3400b7ac <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b796:	430b      	orrs	r3, r1
3400b798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b79c:	f7fd fe04 	bl	340093a8 <LL_RCC_IC8_Enable>
3400b7a0:	e010      	b.n	3400b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
3400b7a2:	bf00      	nop
3400b7a4:	0303041c 	.word	0x0303041c
3400b7a8:	3401e800 	.word	0x3401e800
3400b7ac:	56028000 	.word	0x56028000
3400b7b0:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400b7b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b7bc:	2b10      	cmp	r3, #16
3400b7be:	d101      	bne.n	3400b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
3400b7c0:	f7fe f8f2 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400b7c4:	4b77      	ldr	r3, [pc, #476]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b7c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400b7ca:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3400b7ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3400b7d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b7da:	3b01      	subs	r3, #1
3400b7dc:	021a      	lsls	r2, r3, #8
3400b7de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b7e6:	4313      	orrs	r3, r2
3400b7e8:	4a6e      	ldr	r2, [pc, #440]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b7ea:	430b      	orrs	r3, r1
3400b7ec:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400b7f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b7f8:	f002 0302 	and.w	r3, r2, #2
3400b7fc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3400b800:	2300      	movs	r3, #0
3400b802:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3400b806:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3400b80a:	4603      	mov	r3, r0
3400b80c:	460a      	mov	r2, r1
3400b80e:	4313      	orrs	r3, r2
3400b810:	f000 80db 	beq.w	3400b9ca <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400b814:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b818:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b81c:	2b00      	cmp	r3, #0
3400b81e:	d02e      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b824:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b828:	2b01      	cmp	r3, #1
3400b82a:	d028      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b834:	2b02      	cmp	r3, #2
3400b836:	d022      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b838:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b83c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b840:	2b03      	cmp	r3, #3
3400b842:	d01c      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b844:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b84c:	2b04      	cmp	r3, #4
3400b84e:	d016      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b854:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b858:	2b05      	cmp	r3, #5
3400b85a:	d010      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b860:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b864:	2b06      	cmp	r3, #6
3400b866:	d00a      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b86c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b870:	2b07      	cmp	r3, #7
3400b872:	d004      	beq.n	3400b87e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b874:	f240 2161 	movw	r1, #609	@ 0x261
3400b878:	484b      	ldr	r0, [pc, #300]	@ (3400b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b87a:	f7f6 fa0f 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400b87e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b882:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b886:	2b02      	cmp	r3, #2
3400b888:	d142      	bne.n	3400b910 <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b88a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b890:	2b00      	cmp	r3, #0
3400b892:	d016      	beq.n	3400b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b89a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b89e:	d010      	beq.n	3400b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b8a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b8aa:	d00a      	beq.n	3400b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b8b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b8b6:	d004      	beq.n	3400b8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b8b8:	f240 2166 	movw	r1, #614	@ 0x266
3400b8bc:	483a      	ldr	r0, [pc, #232]	@ (3400b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b8be:	f7f6 f9ed 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b8c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b8c8:	2b00      	cmp	r3, #0
3400b8ca:	d005      	beq.n	3400b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
3400b8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b8d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b8d6:	d904      	bls.n	3400b8e2 <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
3400b8d8:	f240 2167 	movw	r1, #615	@ 0x267
3400b8dc:	4832      	ldr	r0, [pc, #200]	@ (3400b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b8de:	f7f6 f9dd 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b8e2:	4b30      	ldr	r3, [pc, #192]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b8e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b8e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b8ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b8f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b8f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b8fc:	3b01      	subs	r3, #1
3400b8fe:	041b      	lsls	r3, r3, #16
3400b900:	4313      	orrs	r3, r2
3400b902:	4a28      	ldr	r2, [pc, #160]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b904:	430b      	orrs	r3, r1
3400b906:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b90a:	f7fd fd0d 	bl	34009328 <LL_RCC_IC7_Enable>
3400b90e:	e055      	b.n	3400b9bc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400b910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b914:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b918:	2b03      	cmp	r3, #3
3400b91a:	d147      	bne.n	3400b9ac <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b91c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b922:	2b00      	cmp	r3, #0
3400b924:	d016      	beq.n	3400b954 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b926:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b92c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b930:	d010      	beq.n	3400b954 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b932:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b93c:	d00a      	beq.n	3400b954 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b93e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b948:	d004      	beq.n	3400b954 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b94a:	f240 2173 	movw	r1, #627	@ 0x273
3400b94e:	4816      	ldr	r0, [pc, #88]	@ (3400b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b950:	f7f6 f9a4 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b95a:	2b00      	cmp	r3, #0
3400b95c:	d005      	beq.n	3400b96a <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3400b95e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b968:	d904      	bls.n	3400b974 <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3400b96a:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400b96e:	480e      	ldr	r0, [pc, #56]	@ (3400b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b970:	f7f6 f994 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b974:	4b0b      	ldr	r3, [pc, #44]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b97a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b97e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b982:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b988:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b98e:	3b01      	subs	r3, #1
3400b990:	041b      	lsls	r3, r3, #16
3400b992:	4313      	orrs	r3, r2
3400b994:	4a03      	ldr	r2, [pc, #12]	@ (3400b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b996:	430b      	orrs	r3, r1
3400b998:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b99c:	f7fd fd04 	bl	340093a8 <LL_RCC_IC8_Enable>
3400b9a0:	e00c      	b.n	3400b9bc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
3400b9a2:	bf00      	nop
3400b9a4:	56028000 	.word	0x56028000
3400b9a8:	3401e800 	.word	0x3401e800
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400b9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b9b4:	2b01      	cmp	r3, #1
3400b9b6:	d101      	bne.n	3400b9bc <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
3400b9b8:	f7fd fff6 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3400b9bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b9c4:	4618      	mov	r0, r3
3400b9c6:	f7fc fdf7 	bl	340085b8 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400b9ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b9d2:	f002 0308 	and.w	r3, r2, #8
3400b9d6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3400b9da:	2300      	movs	r3, #0
3400b9dc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3400b9e0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3400b9e4:	4603      	mov	r3, r0
3400b9e6:	460a      	mov	r2, r1
3400b9e8:	4313      	orrs	r3, r2
3400b9ea:	d049      	beq.n	3400ba80 <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
3400b9ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b9f4:	2b00      	cmp	r3, #0
3400b9f6:	d019      	beq.n	3400ba2c <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b9f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ba04:	d012      	beq.n	3400ba2c <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ba12:	d00b      	beq.n	3400ba2c <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400ba1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ba20:	d004      	beq.n	3400ba2c <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400ba22:	f240 218e 	movw	r1, #654	@ 0x28e
3400ba26:	489e      	ldr	r0, [pc, #632]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba28:	f7f6 f938 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400ba2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba34:	2b00      	cmp	r3, #0
3400ba36:	d006      	beq.n	3400ba46 <HAL_RCCEx_PeriphCLKConfig+0x205a>
3400ba38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ba44:	d904      	bls.n	3400ba50 <HAL_RCCEx_PeriphCLKConfig+0x2064>
3400ba46:	f240 218f 	movw	r1, #655	@ 0x28f
3400ba4a:	4895      	ldr	r0, [pc, #596]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400ba4c:	f7f6 f926 	bl	34001c9c <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400ba50:	4b94      	ldr	r3, [pc, #592]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400ba56:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ba5a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ba5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba62:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400ba66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400ba6e:	3b01      	subs	r3, #1
3400ba70:	041b      	lsls	r3, r3, #16
3400ba72:	4313      	orrs	r3, r2
3400ba74:	4a8b      	ldr	r2, [pc, #556]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400ba76:	430b      	orrs	r3, r1
3400ba78:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3400ba7c:	f7fd fed4 	bl	34009828 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400ba80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ba88:	f002 0310 	and.w	r3, r2, #16
3400ba8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3400ba90:	2300      	movs	r3, #0
3400ba92:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3400ba96:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3400ba9a:	4603      	mov	r3, r0
3400ba9c:	460a      	mov	r2, r1
3400ba9e:	4313      	orrs	r3, r2
3400baa0:	f000 8082 	beq.w	3400bba8 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400baa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baa8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400baac:	2b00      	cmp	r3, #0
3400baae:	d019      	beq.n	3400bae4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bab0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bab4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400babc:	d012      	beq.n	3400bae4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400babe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bac2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400baca:	d00b      	beq.n	3400bae4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bacc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bad0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bad4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400bad8:	d004      	beq.n	3400bae4 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400bada:	f240 219d 	movw	r1, #669	@ 0x29d
3400bade:	4870      	ldr	r0, [pc, #448]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bae0:	f7f6 f8dc 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400bae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bae8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400baec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400baf0:	d14a      	bne.n	3400bb88 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
3400baf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bafa:	2b00      	cmp	r3, #0
3400bafc:	d019      	beq.n	3400bb32 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bafe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bb0a:	d012      	beq.n	3400bb32 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bb18:	d00b      	beq.n	3400bb32 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400bb22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bb26:	d004      	beq.n	3400bb32 <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400bb28:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400bb2c:	485c      	ldr	r0, [pc, #368]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bb2e:	f7f6 f8b5 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
3400bb32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb3a:	2b00      	cmp	r3, #0
3400bb3c:	d006      	beq.n	3400bb4c <HAL_RCCEx_PeriphCLKConfig+0x2160>
3400bb3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bb4a:	d904      	bls.n	3400bb56 <HAL_RCCEx_PeriphCLKConfig+0x216a>
3400bb4c:	f240 21a3 	movw	r1, #675	@ 0x2a3
3400bb50:	4853      	ldr	r0, [pc, #332]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bb52:	f7f6 f8a3 	bl	34001c9c <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3400bb56:	4b53      	ldr	r3, [pc, #332]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bb58:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400bb5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bb60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bb64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400bb6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400bb74:	3b01      	subs	r3, #1
3400bb76:	041b      	lsls	r3, r3, #16
3400bb78:	4313      	orrs	r3, r2
3400bb7a:	4a4a      	ldr	r2, [pc, #296]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bb7c:	430b      	orrs	r3, r1
3400bb7e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3400bb82:	f7fd fe11 	bl	340097a8 <LL_RCC_IC17_Enable>
3400bb86:	e008      	b.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400bb88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bb90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bb94:	d101      	bne.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
3400bb96:	f7fd ff07 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3400bb9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400bba2:	4618      	mov	r0, r3
3400bba4:	f7fc fd34 	bl	34008610 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400bba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bbb0:	f002 0320 	and.w	r3, r2, #32
3400bbb4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3400bbb8:	2300      	movs	r3, #0
3400bbba:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3400bbbe:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3400bbc2:	4603      	mov	r3, r0
3400bbc4:	460a      	mov	r2, r1
3400bbc6:	4313      	orrs	r3, r2
3400bbc8:	d07e      	beq.n	3400bcc8 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400bbca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbd2:	2b00      	cmp	r3, #0
3400bbd4:	d019      	beq.n	3400bc0a <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400bbe2:	d012      	beq.n	3400bc0a <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbe8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400bbf0:	d00b      	beq.n	3400bc0a <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bbf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbf6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bbfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400bbfe:	d004      	beq.n	3400bc0a <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400bc00:	f240 21bd 	movw	r1, #701	@ 0x2bd
3400bc04:	4826      	ldr	r0, [pc, #152]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc06:	f7f6 f849 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400bc0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bc12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400bc16:	d147      	bne.n	3400bca8 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400bc18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc1e:	2b00      	cmp	r3, #0
3400bc20:	d016      	beq.n	3400bc50 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bc2c:	d010      	beq.n	3400bc50 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bc38:	d00a      	beq.n	3400bc50 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400bc40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bc44:	d004      	beq.n	3400bc50 <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400bc46:	f240 21c2 	movw	r1, #706	@ 0x2c2
3400bc4a:	4815      	ldr	r0, [pc, #84]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc4c:	f7f6 f826 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
3400bc50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc56:	2b00      	cmp	r3, #0
3400bc58:	d005      	beq.n	3400bc66 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400bc5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bc64:	d904      	bls.n	3400bc70 <HAL_RCCEx_PeriphCLKConfig+0x2284>
3400bc66:	f240 21c3 	movw	r1, #707	@ 0x2c3
3400bc6a:	480d      	ldr	r0, [pc, #52]	@ (3400bca0 <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400bc6c:	f7f6 f816 	bl	34001c9c <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400bc70:	4b0c      	ldr	r3, [pc, #48]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bc72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400bc76:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bc7a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bc7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3400bc84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400bc8a:	3b01      	subs	r3, #1
3400bc8c:	041b      	lsls	r3, r3, #16
3400bc8e:	4313      	orrs	r3, r2
3400bc90:	4a04      	ldr	r2, [pc, #16]	@ (3400bca4 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400bc92:	430b      	orrs	r3, r1
3400bc94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3400bc98:	f7fd fc46 	bl	34009528 <LL_RCC_IC12_Enable>
3400bc9c:	e00d      	b.n	3400bcba <HAL_RCCEx_PeriphCLKConfig+0x22ce>
3400bc9e:	bf00      	nop
3400bca0:	3401e800 	.word	0x3401e800
3400bca4:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400bca8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bcb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400bcb4:	d101      	bne.n	3400bcba <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
3400bcb6:	f7fd fe77 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3400bcba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcbe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400bcc2:	4618      	mov	r0, r3
3400bcc4:	f7fc fcba 	bl	3400863c <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400bcc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bcd0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400bcd4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3400bcd8:	2300      	movs	r3, #0
3400bcda:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3400bcde:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3400bce2:	4603      	mov	r3, r0
3400bce4:	460a      	mov	r2, r1
3400bce6:	4313      	orrs	r3, r2
3400bce8:	d01f      	beq.n	3400bd2a <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400bcea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bcf2:	2b00      	cmp	r3, #0
3400bcf4:	d012      	beq.n	3400bd1c <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bcf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcfa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bcfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400bd02:	d00b      	beq.n	3400bd1c <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bd04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bd0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400bd10:	d004      	beq.n	3400bd1c <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400bd12:	f240 21dd 	movw	r1, #733	@ 0x2dd
3400bd16:	48c1      	ldr	r0, [pc, #772]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bd18:	f7f5 ffc0 	bl	34001c9c <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3400bd1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd20:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400bd24:	4618      	mov	r0, r3
3400bd26:	f7fc fc9f 	bl	34008668 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3400bd2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd32:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400bd36:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3400bd3a:	2300      	movs	r3, #0
3400bd3c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3400bd40:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3400bd44:	4603      	mov	r3, r0
3400bd46:	460a      	mov	r2, r1
3400bd48:	4313      	orrs	r3, r2
3400bd4a:	d018      	beq.n	3400bd7e <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3400bd4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd54:	2b00      	cmp	r3, #0
3400bd56:	d00b      	beq.n	3400bd70 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bd58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400bd64:	d004      	beq.n	3400bd70 <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400bd66:	f240 21e7 	movw	r1, #743	@ 0x2e7
3400bd6a:	48ac      	ldr	r0, [pc, #688]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bd6c:	f7f5 ff96 	bl	34001c9c <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3400bd70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400bd78:	4618      	mov	r0, r3
3400bd7a:	f7fc fc99 	bl	340086b0 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400bd7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd86:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400bd8a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3400bd8e:	2300      	movs	r3, #0
3400bd90:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3400bd94:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3400bd98:	4603      	mov	r3, r0
3400bd9a:	460a      	mov	r2, r1
3400bd9c:	4313      	orrs	r3, r2
3400bd9e:	d018      	beq.n	3400bdd2 <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
3400bda0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bda4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bda8:	2b00      	cmp	r3, #0
3400bdaa:	d00b      	beq.n	3400bdc4 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bdac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bdb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400bdb8:	d004      	beq.n	3400bdc4 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400bdba:	f240 21f1 	movw	r1, #753	@ 0x2f1
3400bdbe:	4897      	ldr	r0, [pc, #604]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bdc0:	f7f5 ff6c 	bl	34001c9c <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3400bdc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400bdcc:	4618      	mov	r0, r3
3400bdce:	f7fc fc85 	bl	340086dc <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400bdd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bdda:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400bdde:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3400bde2:	2300      	movs	r3, #0
3400bde4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3400bde8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400bdec:	4603      	mov	r3, r0
3400bdee:	460a      	mov	r2, r1
3400bdf0:	4313      	orrs	r3, r2
3400bdf2:	f000 8093 	beq.w	3400bf1c <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
3400bdf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdfa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bdfe:	2b00      	cmp	r3, #0
3400be00:	d016      	beq.n	3400be30 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be0a:	2b01      	cmp	r3, #1
3400be0c:	d010      	beq.n	3400be30 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be16:	2b02      	cmp	r3, #2
3400be18:	d00a      	beq.n	3400be30 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be22:	2b03      	cmp	r3, #3
3400be24:	d004      	beq.n	3400be30 <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400be26:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400be2a:	487c      	ldr	r0, [pc, #496]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be2c:	f7f5 ff36 	bl	34001c9c <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
3400be30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400be38:	2b00      	cmp	r3, #0
3400be3a:	d005      	beq.n	3400be48 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3400be3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400be44:	2b10      	cmp	r3, #16
3400be46:	d904      	bls.n	3400be52 <HAL_RCCEx_PeriphCLKConfig+0x2466>
3400be48:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3400be4c:	4873      	ldr	r0, [pc, #460]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be4e:	f7f5 ff25 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3400be52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400be5a:	2b02      	cmp	r3, #2
3400be5c:	d142      	bne.n	3400bee4 <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3400be5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be64:	2b00      	cmp	r3, #0
3400be66:	d016      	beq.n	3400be96 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400be72:	d010      	beq.n	3400be96 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400be7e:	d00a      	beq.n	3400be96 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400be86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400be8a:	d004      	beq.n	3400be96 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400be8c:	f240 3101 	movw	r1, #769	@ 0x301
3400be90:	4862      	ldr	r0, [pc, #392]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400be92:	f7f5 ff03 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3400be96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400be9c:	2b00      	cmp	r3, #0
3400be9e:	d005      	beq.n	3400beac <HAL_RCCEx_PeriphCLKConfig+0x24c0>
3400bea0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400beaa:	d904      	bls.n	3400beb6 <HAL_RCCEx_PeriphCLKConfig+0x24ca>
3400beac:	f240 3102 	movw	r1, #770	@ 0x302
3400beb0:	485a      	ldr	r0, [pc, #360]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400beb2:	f7f5 fef3 	bl	34001c9c <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400beb6:	4b5a      	ldr	r3, [pc, #360]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400beb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400bebc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bec0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bec4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bec8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3400beca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400bed0:	3b01      	subs	r3, #1
3400bed2:	041b      	lsls	r3, r3, #16
3400bed4:	4313      	orrs	r3, r2
3400bed6:	4a52      	ldr	r2, [pc, #328]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bed8:	430b      	orrs	r3, r1
3400beda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3400bede:	f7fd fb63 	bl	340095a8 <LL_RCC_IC13_Enable>
3400bee2:	e007      	b.n	3400bef4 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400bee4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bee8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400beec:	2b01      	cmp	r3, #1
3400beee:	d101      	bne.n	3400bef4 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
3400bef0:	f7fd fd5a 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400bef4:	4b4a      	ldr	r3, [pc, #296]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bef6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400befa:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3400befe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400bf06:	3b01      	subs	r3, #1
3400bf08:	011a      	lsls	r2, r3, #4
3400bf0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400bf12:	4313      	orrs	r3, r2
3400bf14:	4a42      	ldr	r2, [pc, #264]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bf16:	430b      	orrs	r3, r1
3400bf18:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3400bf1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf24:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400bf28:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3400bf2c:	2300      	movs	r3, #0
3400bf2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3400bf32:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3400bf36:	4603      	mov	r3, r0
3400bf38:	460a      	mov	r2, r1
3400bf3a:	4313      	orrs	r3, r2
3400bf3c:	f000 8081 	beq.w	3400c042 <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3400bf40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf48:	2b00      	cmp	r3, #0
3400bf4a:	d016      	beq.n	3400bf7a <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf54:	2b01      	cmp	r3, #1
3400bf56:	d010      	beq.n	3400bf7a <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf60:	2b02      	cmp	r3, #2
3400bf62:	d00a      	beq.n	3400bf7a <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf6c:	2b03      	cmp	r3, #3
3400bf6e:	d004      	beq.n	3400bf7a <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400bf70:	f240 311d 	movw	r1, #797	@ 0x31d
3400bf74:	4829      	ldr	r0, [pc, #164]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bf76:	f7f5 fe91 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3400bf7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400bf82:	2b02      	cmp	r3, #2
3400bf84:	d14e      	bne.n	3400c024 <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400bf86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bf8e:	2b00      	cmp	r3, #0
3400bf90:	d019      	beq.n	3400bfc6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bf92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bf9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bf9e:	d012      	beq.n	3400bfc6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bfa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bfac:	d00b      	beq.n	3400bfc6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400bfb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bfba:	d004      	beq.n	3400bfc6 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400bfbc:	f240 3122 	movw	r1, #802	@ 0x322
3400bfc0:	4816      	ldr	r0, [pc, #88]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bfc2:	f7f5 fe6b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400bfc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bfce:	2b00      	cmp	r3, #0
3400bfd0:	d006      	beq.n	3400bfe0 <HAL_RCCEx_PeriphCLKConfig+0x25f4>
3400bfd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400bfda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bfde:	d904      	bls.n	3400bfea <HAL_RCCEx_PeriphCLKConfig+0x25fe>
3400bfe0:	f240 3123 	movw	r1, #803	@ 0x323
3400bfe4:	480d      	ldr	r0, [pc, #52]	@ (3400c01c <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400bfe6:	f7f5 fe59 	bl	34001c9c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400bfea:	4b0d      	ldr	r3, [pc, #52]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400bfec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400bff0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bff4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bffc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400c000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400c008:	3b01      	subs	r3, #1
3400c00a:	041b      	lsls	r3, r3, #16
3400c00c:	4313      	orrs	r3, r2
3400c00e:	4a04      	ldr	r2, [pc, #16]	@ (3400c020 <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400c010:	430b      	orrs	r3, r1
3400c012:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400c016:	f7fd fc47 	bl	340098a8 <LL_RCC_IC19_Enable>
3400c01a:	e00b      	b.n	3400c034 <HAL_RCCEx_PeriphCLKConfig+0x2648>
3400c01c:	3401e800 	.word	0x3401e800
3400c020:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400c024:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400c02c:	2b01      	cmp	r3, #1
3400c02e:	d101      	bne.n	3400c034 <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
3400c030:	f7fd fcba 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3400c034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400c03c:	4618      	mov	r0, r3
3400c03e:	f7fc fb63 	bl	34008708 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3400c042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c046:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c04a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400c04e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3400c052:	2300      	movs	r3, #0
3400c054:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3400c058:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400c05c:	4603      	mov	r3, r0
3400c05e:	460a      	mov	r2, r1
3400c060:	4313      	orrs	r3, r2
3400c062:	f000 80d3 	beq.w	3400c20c <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3400c066:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c06a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c06e:	4bad      	ldr	r3, [pc, #692]	@ (3400c324 <HAL_RCCEx_PeriphCLKConfig+0x2938>)
3400c070:	429a      	cmp	r2, r3
3400c072:	d027      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c074:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c078:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c07c:	4baa      	ldr	r3, [pc, #680]	@ (3400c328 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400c07e:	429a      	cmp	r2, r3
3400c080:	d020      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c082:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c086:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c08a:	4ba8      	ldr	r3, [pc, #672]	@ (3400c32c <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400c08c:	429a      	cmp	r2, r3
3400c08e:	d019      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c090:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c094:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c098:	4ba5      	ldr	r3, [pc, #660]	@ (3400c330 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400c09a:	429a      	cmp	r2, r3
3400c09c:	d012      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c09e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0a6:	4ba3      	ldr	r3, [pc, #652]	@ (3400c334 <HAL_RCCEx_PeriphCLKConfig+0x2948>)
3400c0a8:	429a      	cmp	r2, r3
3400c0aa:	d00b      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c0ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0b4:	4ba0      	ldr	r3, [pc, #640]	@ (3400c338 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
3400c0b6:	429a      	cmp	r2, r3
3400c0b8:	d004      	beq.n	3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400c0ba:	f240 313d 	movw	r1, #829	@ 0x33d
3400c0be:	489f      	ldr	r0, [pc, #636]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c0c0:	f7f5 fdec 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400c0c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c0cc:	4b97      	ldr	r3, [pc, #604]	@ (3400c32c <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400c0ce:	429a      	cmp	r2, r3
3400c0d0:	d142      	bne.n	3400c158 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c0d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0d8:	2b00      	cmp	r3, #0
3400c0da:	d016      	beq.n	3400c10a <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c0e6:	d010      	beq.n	3400c10a <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c0f2:	d00a      	beq.n	3400c10a <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c0f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c0fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c0fe:	d004      	beq.n	3400c10a <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400c100:	f240 3142 	movw	r1, #834	@ 0x342
3400c104:	488d      	ldr	r0, [pc, #564]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c106:	f7f5 fdc9 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c10a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c10e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c110:	2b00      	cmp	r3, #0
3400c112:	d005      	beq.n	3400c120 <HAL_RCCEx_PeriphCLKConfig+0x2734>
3400c114:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c11a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c11e:	d904      	bls.n	3400c12a <HAL_RCCEx_PeriphCLKConfig+0x273e>
3400c120:	f240 3143 	movw	r1, #835	@ 0x343
3400c124:	4885      	ldr	r0, [pc, #532]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c126:	f7f5 fdb9 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c12a:	4b85      	ldr	r3, [pc, #532]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c12c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c130:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c134:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c13c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c13e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c144:	3b01      	subs	r3, #1
3400c146:	041b      	lsls	r3, r3, #16
3400c148:	4313      	orrs	r3, r2
3400c14a:	4a7d      	ldr	r2, [pc, #500]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c14c:	430b      	orrs	r3, r1
3400c14e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c152:	f7fd f9a9 	bl	340094a8 <LL_RCC_IC10_Enable>
3400c156:	e052      	b.n	3400c1fe <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400c158:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c15c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c160:	4b73      	ldr	r3, [pc, #460]	@ (3400c330 <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400c162:	429a      	cmp	r2, r3
3400c164:	d142      	bne.n	3400c1ec <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c166:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c16a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c16c:	2b00      	cmp	r3, #0
3400c16e:	d016      	beq.n	3400c19e <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c170:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c17a:	d010      	beq.n	3400c19e <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c17c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c186:	d00a      	beq.n	3400c19e <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c188:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c18e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c192:	d004      	beq.n	3400c19e <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400c194:	f240 314f 	movw	r1, #847	@ 0x34f
3400c198:	4868      	ldr	r0, [pc, #416]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c19a:	f7f5 fd7f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c19e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1a4:	2b00      	cmp	r3, #0
3400c1a6:	d005      	beq.n	3400c1b4 <HAL_RCCEx_PeriphCLKConfig+0x27c8>
3400c1a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c1b2:	d904      	bls.n	3400c1be <HAL_RCCEx_PeriphCLKConfig+0x27d2>
3400c1b4:	f44f 7154 	mov.w	r1, #848	@ 0x350
3400c1b8:	4860      	ldr	r0, [pc, #384]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c1ba:	f7f5 fd6f 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c1be:	4b60      	ldr	r3, [pc, #384]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c1c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c1c4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c1c8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c1cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c1d8:	3b01      	subs	r3, #1
3400c1da:	041b      	lsls	r3, r3, #16
3400c1dc:	4313      	orrs	r3, r2
3400c1de:	4a58      	ldr	r2, [pc, #352]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c1e0:	430b      	orrs	r3, r1
3400c1e2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c1e6:	f7fd fa5f 	bl	340096a8 <LL_RCC_IC15_Enable>
3400c1ea:	e008      	b.n	3400c1fe <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400c1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400c1f4:	4b4c      	ldr	r3, [pc, #304]	@ (3400c328 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400c1f6:	429a      	cmp	r2, r3
3400c1f8:	d101      	bne.n	3400c1fe <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
3400c1fa:	f7fd fbd5 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3400c1fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c206:	4618      	mov	r0, r3
3400c208:	f7fc faaa 	bl	34008760 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3400c20c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c210:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c214:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400c218:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3400c21c:	2300      	movs	r3, #0
3400c21e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3400c222:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3400c226:	4603      	mov	r3, r0
3400c228:	460a      	mov	r2, r1
3400c22a:	4313      	orrs	r3, r2
3400c22c:	f000 80f0 	beq.w	3400c410 <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400c230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c234:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c238:	4b42      	ldr	r3, [pc, #264]	@ (3400c344 <HAL_RCCEx_PeriphCLKConfig+0x2958>)
3400c23a:	429a      	cmp	r2, r3
3400c23c:	d027      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c23e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c242:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c246:	4b40      	ldr	r3, [pc, #256]	@ (3400c348 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
3400c248:	429a      	cmp	r2, r3
3400c24a:	d020      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c24c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c250:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c254:	4b3d      	ldr	r3, [pc, #244]	@ (3400c34c <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c256:	429a      	cmp	r2, r3
3400c258:	d019      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c25a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c25e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c262:	4b3b      	ldr	r3, [pc, #236]	@ (3400c350 <HAL_RCCEx_PeriphCLKConfig+0x2964>)
3400c264:	429a      	cmp	r2, r3
3400c266:	d012      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c268:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c26c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c270:	4b38      	ldr	r3, [pc, #224]	@ (3400c354 <HAL_RCCEx_PeriphCLKConfig+0x2968>)
3400c272:	429a      	cmp	r2, r3
3400c274:	d00b      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c276:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c27a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c27e:	4b36      	ldr	r3, [pc, #216]	@ (3400c358 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
3400c280:	429a      	cmp	r2, r3
3400c282:	d004      	beq.n	3400c28e <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400c284:	f240 316a 	movw	r1, #874	@ 0x36a
3400c288:	482c      	ldr	r0, [pc, #176]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c28a:	f7f5 fd07 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3400c28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c292:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c296:	4b2d      	ldr	r3, [pc, #180]	@ (3400c34c <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400c298:	429a      	cmp	r2, r3
3400c29a:	d15f      	bne.n	3400c35c <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2a2:	2b00      	cmp	r3, #0
3400c2a4:	d016      	beq.n	3400c2d4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c2b0:	d010      	beq.n	3400c2d4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c2bc:	d00a      	beq.n	3400c2d4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c2c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c2c8:	d004      	beq.n	3400c2d4 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400c2ca:	f240 316f 	movw	r1, #879	@ 0x36f
3400c2ce:	481b      	ldr	r0, [pc, #108]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c2d0:	f7f5 fce4 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c2d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2da:	2b00      	cmp	r3, #0
3400c2dc:	d005      	beq.n	3400c2ea <HAL_RCCEx_PeriphCLKConfig+0x28fe>
3400c2de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c2e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c2e8:	d904      	bls.n	3400c2f4 <HAL_RCCEx_PeriphCLKConfig+0x2908>
3400c2ea:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400c2ee:	4813      	ldr	r0, [pc, #76]	@ (3400c33c <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400c2f0:	f7f5 fcd4 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c2f4:	4b12      	ldr	r3, [pc, #72]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c2f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c2fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c2fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c302:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c308:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c30e:	3b01      	subs	r3, #1
3400c310:	041b      	lsls	r3, r3, #16
3400c312:	4313      	orrs	r3, r2
3400c314:	4a0a      	ldr	r2, [pc, #40]	@ (3400c340 <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400c316:	430b      	orrs	r3, r1
3400c318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c31c:	f7fd f8c4 	bl	340094a8 <LL_RCC_IC10_Enable>
3400c320:	e06f      	b.n	3400c402 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
3400c322:	bf00      	nop
3400c324:	0700000c 	.word	0x0700000c
3400c328:	0701000c 	.word	0x0701000c
3400c32c:	0702000c 	.word	0x0702000c
3400c330:	0703000c 	.word	0x0703000c
3400c334:	0704000c 	.word	0x0704000c
3400c338:	0705000c 	.word	0x0705000c
3400c33c:	3401e800 	.word	0x3401e800
3400c340:	56028000 	.word	0x56028000
3400c344:	0700040c 	.word	0x0700040c
3400c348:	0701040c 	.word	0x0701040c
3400c34c:	0702040c 	.word	0x0702040c
3400c350:	0703040c 	.word	0x0703040c
3400c354:	0704040c 	.word	0x0704040c
3400c358:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400c35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c360:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c364:	4b95      	ldr	r3, [pc, #596]	@ (3400c5bc <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
3400c366:	429a      	cmp	r2, r3
3400c368:	d142      	bne.n	3400c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c36a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c36e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c370:	2b00      	cmp	r3, #0
3400c372:	d016      	beq.n	3400c3a2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c374:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c37a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c37e:	d010      	beq.n	3400c3a2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c38a:	d00a      	beq.n	3400c3a2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c38c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c396:	d004      	beq.n	3400c3a2 <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400c398:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400c39c:	4888      	ldr	r0, [pc, #544]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c39e:	f7f5 fc7d 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c3a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3a8:	2b00      	cmp	r3, #0
3400c3aa:	d005      	beq.n	3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
3400c3ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c3b6:	d904      	bls.n	3400c3c2 <HAL_RCCEx_PeriphCLKConfig+0x29d6>
3400c3b8:	f240 317d 	movw	r1, #893	@ 0x37d
3400c3bc:	4880      	ldr	r0, [pc, #512]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c3be:	f7f5 fc6d 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c3c2:	4b80      	ldr	r3, [pc, #512]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c3c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c3c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c3cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3d4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c3d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c3dc:	3b01      	subs	r3, #1
3400c3de:	041b      	lsls	r3, r3, #16
3400c3e0:	4313      	orrs	r3, r2
3400c3e2:	4a78      	ldr	r2, [pc, #480]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c3e4:	430b      	orrs	r3, r1
3400c3e6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c3ea:	f7fd f95d 	bl	340096a8 <LL_RCC_IC15_Enable>
3400c3ee:	e008      	b.n	3400c402 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400c3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3f4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400c3f8:	4b73      	ldr	r3, [pc, #460]	@ (3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
3400c3fa:	429a      	cmp	r2, r3
3400c3fc:	d101      	bne.n	3400c402 <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
3400c3fe:	f7fd fad3 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3400c402:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c406:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400c40a:	4618      	mov	r0, r3
3400c40c:	f7fc f9a8 	bl	34008760 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3400c410:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c414:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c418:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400c41c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3400c420:	2300      	movs	r3, #0
3400c422:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400c426:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3400c42a:	4603      	mov	r3, r0
3400c42c:	460a      	mov	r2, r1
3400c42e:	4313      	orrs	r3, r2
3400c430:	f000 80e8 	beq.w	3400c604 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3400c434:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c438:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c43c:	4b63      	ldr	r3, [pc, #396]	@ (3400c5cc <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
3400c43e:	429a      	cmp	r2, r3
3400c440:	d027      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c442:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c446:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c44a:	4b61      	ldr	r3, [pc, #388]	@ (3400c5d0 <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
3400c44c:	429a      	cmp	r2, r3
3400c44e:	d020      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c450:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c454:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c458:	4b5e      	ldr	r3, [pc, #376]	@ (3400c5d4 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c45a:	429a      	cmp	r2, r3
3400c45c:	d019      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c45e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c462:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c466:	4b5c      	ldr	r3, [pc, #368]	@ (3400c5d8 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c468:	429a      	cmp	r2, r3
3400c46a:	d012      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c46c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c470:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c474:	4b59      	ldr	r3, [pc, #356]	@ (3400c5dc <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
3400c476:	429a      	cmp	r2, r3
3400c478:	d00b      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c47a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c47e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c482:	4b57      	ldr	r3, [pc, #348]	@ (3400c5e0 <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
3400c484:	429a      	cmp	r2, r3
3400c486:	d004      	beq.n	3400c492 <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400c488:	f240 3197 	movw	r1, #919	@ 0x397
3400c48c:	484c      	ldr	r0, [pc, #304]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c48e:	f7f5 fc05 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3400c492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c496:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c49a:	4b4e      	ldr	r3, [pc, #312]	@ (3400c5d4 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400c49c:	429a      	cmp	r2, r3
3400c49e:	d142      	bne.n	3400c526 <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4a6:	2b00      	cmp	r3, #0
3400c4a8:	d016      	beq.n	3400c4d8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c4b4:	d010      	beq.n	3400c4d8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c4c0:	d00a      	beq.n	3400c4d8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c4c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c4cc:	d004      	beq.n	3400c4d8 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400c4ce:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3400c4d2:	483b      	ldr	r0, [pc, #236]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c4d4:	f7f5 fbe2 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c4d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4de:	2b00      	cmp	r3, #0
3400c4e0:	d005      	beq.n	3400c4ee <HAL_RCCEx_PeriphCLKConfig+0x2b02>
3400c4e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c4e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c4ec:	d904      	bls.n	3400c4f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
3400c4ee:	f240 319d 	movw	r1, #925	@ 0x39d
3400c4f2:	4833      	ldr	r0, [pc, #204]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c4f4:	f7f5 fbd2 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c4f8:	4b32      	ldr	r3, [pc, #200]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c4fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c4fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c502:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c506:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c50a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c50c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c512:	3b01      	subs	r3, #1
3400c514:	041b      	lsls	r3, r3, #16
3400c516:	4313      	orrs	r3, r2
3400c518:	4a2a      	ldr	r2, [pc, #168]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c51a:	430b      	orrs	r3, r1
3400c51c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c520:	f7fc ffc2 	bl	340094a8 <LL_RCC_IC10_Enable>
3400c524:	e067      	b.n	3400c5f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400c526:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c52a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c52e:	4b2a      	ldr	r3, [pc, #168]	@ (3400c5d8 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400c530:	429a      	cmp	r2, r3
3400c532:	d157      	bne.n	3400c5e4 <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c534:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c53a:	2b00      	cmp	r3, #0
3400c53c:	d016      	beq.n	3400c56c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c53e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c548:	d010      	beq.n	3400c56c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c54e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c554:	d00a      	beq.n	3400c56c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c556:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c55a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c55c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c560:	d004      	beq.n	3400c56c <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400c562:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400c566:	4816      	ldr	r0, [pc, #88]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c568:	f7f5 fb98 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c56c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c572:	2b00      	cmp	r3, #0
3400c574:	d005      	beq.n	3400c582 <HAL_RCCEx_PeriphCLKConfig+0x2b96>
3400c576:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c57a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c57c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c580:	d904      	bls.n	3400c58c <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
3400c582:	f240 31aa 	movw	r1, #938	@ 0x3aa
3400c586:	480e      	ldr	r0, [pc, #56]	@ (3400c5c0 <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400c588:	f7f5 fb88 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c58c:	4b0d      	ldr	r3, [pc, #52]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c58e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c592:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c596:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c59a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c59e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c5a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c5a6:	3b01      	subs	r3, #1
3400c5a8:	041b      	lsls	r3, r3, #16
3400c5aa:	4313      	orrs	r3, r2
3400c5ac:	4a05      	ldr	r2, [pc, #20]	@ (3400c5c4 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400c5ae:	430b      	orrs	r3, r1
3400c5b0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c5b4:	f7fd f878 	bl	340096a8 <LL_RCC_IC15_Enable>
3400c5b8:	e01d      	b.n	3400c5f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
3400c5ba:	bf00      	nop
3400c5bc:	0703040c 	.word	0x0703040c
3400c5c0:	3401e800 	.word	0x3401e800
3400c5c4:	56028000 	.word	0x56028000
3400c5c8:	0701040c 	.word	0x0701040c
3400c5cc:	0700080c 	.word	0x0700080c
3400c5d0:	0701080c 	.word	0x0701080c
3400c5d4:	0702080c 	.word	0x0702080c
3400c5d8:	0703080c 	.word	0x0703080c
3400c5dc:	0704080c 	.word	0x0704080c
3400c5e0:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400c5e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400c5ec:	4b70      	ldr	r3, [pc, #448]	@ (3400c7b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
3400c5ee:	429a      	cmp	r2, r3
3400c5f0:	d101      	bne.n	3400c5f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
3400c5f2:	f7fd f9d9 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3400c5f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400c5fe:	4618      	mov	r0, r3
3400c600:	f7fc f8ae 	bl	34008760 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3400c604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c608:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c60c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400c610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3400c614:	2300      	movs	r3, #0
3400c616:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400c61a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400c61e:	4603      	mov	r3, r0
3400c620:	460a      	mov	r2, r1
3400c622:	4313      	orrs	r3, r2
3400c624:	f000 80e6 	beq.w	3400c7f4 <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400c628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c62c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c630:	4b60      	ldr	r3, [pc, #384]	@ (3400c7b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
3400c632:	429a      	cmp	r2, r3
3400c634:	d027      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c636:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c63a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c63e:	4b5e      	ldr	r3, [pc, #376]	@ (3400c7b8 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
3400c640:	429a      	cmp	r2, r3
3400c642:	d020      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c644:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c648:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c64c:	4b5b      	ldr	r3, [pc, #364]	@ (3400c7bc <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c64e:	429a      	cmp	r2, r3
3400c650:	d019      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c652:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c656:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c65a:	4b59      	ldr	r3, [pc, #356]	@ (3400c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c65c:	429a      	cmp	r2, r3
3400c65e:	d012      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c660:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c664:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c668:	4b56      	ldr	r3, [pc, #344]	@ (3400c7c4 <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
3400c66a:	429a      	cmp	r2, r3
3400c66c:	d00b      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c66e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c672:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c676:	4b54      	ldr	r3, [pc, #336]	@ (3400c7c8 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
3400c678:	429a      	cmp	r2, r3
3400c67a:	d004      	beq.n	3400c686 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400c67c:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400c680:	4852      	ldr	r0, [pc, #328]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c682:	f7f5 fb0b 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3400c686:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c68a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c68e:	4b4b      	ldr	r3, [pc, #300]	@ (3400c7bc <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400c690:	429a      	cmp	r2, r3
3400c692:	d142      	bne.n	3400c71a <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c69a:	2b00      	cmp	r3, #0
3400c69c:	d016      	beq.n	3400c6cc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c69e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c6a8:	d010      	beq.n	3400c6cc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c6b4:	d00a      	beq.n	3400c6cc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c6bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c6c0:	d004      	beq.n	3400c6cc <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400c6c2:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400c6c6:	4841      	ldr	r0, [pc, #260]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c6c8:	f7f5 fae8 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6d2:	2b00      	cmp	r3, #0
3400c6d4:	d005      	beq.n	3400c6e2 <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
3400c6d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c6dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c6e0:	d904      	bls.n	3400c6ec <HAL_RCCEx_PeriphCLKConfig+0x2d00>
3400c6e2:	f240 31ca 	movw	r1, #970	@ 0x3ca
3400c6e6:	4839      	ldr	r0, [pc, #228]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c6e8:	f7f5 fad8 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c6ec:	4b38      	ldr	r3, [pc, #224]	@ (3400c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c6ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c6f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c6f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c700:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c706:	3b01      	subs	r3, #1
3400c708:	041b      	lsls	r3, r3, #16
3400c70a:	4313      	orrs	r3, r2
3400c70c:	4a30      	ldr	r2, [pc, #192]	@ (3400c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c70e:	430b      	orrs	r3, r1
3400c710:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c714:	f7fc fec8 	bl	340094a8 <LL_RCC_IC10_Enable>
3400c718:	e065      	b.n	3400c7e6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400c71a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c71e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c722:	4b27      	ldr	r3, [pc, #156]	@ (3400c7c0 <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c724:	429a      	cmp	r2, r3
3400c726:	d155      	bne.n	3400c7d4 <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c728:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c72c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c72e:	2b00      	cmp	r3, #0
3400c730:	d016      	beq.n	3400c760 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c732:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c73c:	d010      	beq.n	3400c760 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c73e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c748:	d00a      	beq.n	3400c760 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c74a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c74e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c750:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c754:	d004      	beq.n	3400c760 <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c756:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400c75a:	481c      	ldr	r0, [pc, #112]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c75c:	f7f5 fa9e 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c760:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c766:	2b00      	cmp	r3, #0
3400c768:	d005      	beq.n	3400c776 <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3400c76a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c76e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c774:	d904      	bls.n	3400c780 <HAL_RCCEx_PeriphCLKConfig+0x2d94>
3400c776:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400c77a:	4814      	ldr	r0, [pc, #80]	@ (3400c7cc <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c77c:	f7f5 fa8e 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c780:	4b13      	ldr	r3, [pc, #76]	@ (3400c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c782:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c786:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c78a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c78e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c792:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c79a:	3b01      	subs	r3, #1
3400c79c:	041b      	lsls	r3, r3, #16
3400c79e:	4313      	orrs	r3, r2
3400c7a0:	4a0b      	ldr	r2, [pc, #44]	@ (3400c7d0 <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c7a2:	430b      	orrs	r3, r1
3400c7a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c7a8:	f7fc ff7e 	bl	340096a8 <LL_RCC_IC15_Enable>
3400c7ac:	e01b      	b.n	3400c7e6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
3400c7ae:	bf00      	nop
3400c7b0:	0701080c 	.word	0x0701080c
3400c7b4:	07000c0c 	.word	0x07000c0c
3400c7b8:	07010c0c 	.word	0x07010c0c
3400c7bc:	07020c0c 	.word	0x07020c0c
3400c7c0:	07030c0c 	.word	0x07030c0c
3400c7c4:	07040c0c 	.word	0x07040c0c
3400c7c8:	07050c0c 	.word	0x07050c0c
3400c7cc:	3401e800 	.word	0x3401e800
3400c7d0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400c7d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7d8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c7dc:	4b70      	ldr	r3, [pc, #448]	@ (3400c9a0 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400c7de:	429a      	cmp	r2, r3
3400c7e0:	d101      	bne.n	3400c7e6 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
3400c7e2:	f7fd f8e1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3400c7e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400c7ee:	4618      	mov	r0, r3
3400c7f0:	f7fb ffb6 	bl	34008760 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400c7f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c7fc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400c800:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400c804:	2300      	movs	r3, #0
3400c806:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3400c80a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3400c80e:	4603      	mov	r3, r0
3400c810:	460a      	mov	r2, r1
3400c812:	4313      	orrs	r3, r2
3400c814:	f000 80e6 	beq.w	3400c9e4 <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400c818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c81c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c820:	4b60      	ldr	r3, [pc, #384]	@ (3400c9a4 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
3400c822:	429a      	cmp	r2, r3
3400c824:	d027      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c826:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c82a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c82e:	4b5e      	ldr	r3, [pc, #376]	@ (3400c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
3400c830:	429a      	cmp	r2, r3
3400c832:	d020      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c838:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c83c:	4b5b      	ldr	r3, [pc, #364]	@ (3400c9ac <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c83e:	429a      	cmp	r2, r3
3400c840:	d019      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c846:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c84a:	4b59      	ldr	r3, [pc, #356]	@ (3400c9b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c84c:	429a      	cmp	r2, r3
3400c84e:	d012      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c854:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c858:	4b56      	ldr	r3, [pc, #344]	@ (3400c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3400c85a:	429a      	cmp	r2, r3
3400c85c:	d00b      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c85e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c862:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c866:	4b54      	ldr	r3, [pc, #336]	@ (3400c9b8 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400c868:	429a      	cmp	r2, r3
3400c86a:	d004      	beq.n	3400c876 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c86c:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400c870:	4852      	ldr	r0, [pc, #328]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c872:	f7f5 fa13 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400c876:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c87a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c87e:	4b4b      	ldr	r3, [pc, #300]	@ (3400c9ac <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c880:	429a      	cmp	r2, r3
3400c882:	d142      	bne.n	3400c90a <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c88a:	2b00      	cmp	r3, #0
3400c88c:	d016      	beq.n	3400c8bc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c88e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c898:	d010      	beq.n	3400c8bc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c89a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c8a4:	d00a      	beq.n	3400c8bc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c8a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c8ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c8b0:	d004      	beq.n	3400c8bc <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c8b2:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3400c8b6:	4841      	ldr	r0, [pc, #260]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c8b8:	f7f5 f9f0 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c8bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8c2:	2b00      	cmp	r3, #0
3400c8c4:	d005      	beq.n	3400c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
3400c8c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c8d0:	d904      	bls.n	3400c8dc <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
3400c8d2:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400c8d6:	4839      	ldr	r0, [pc, #228]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c8d8:	f7f5 f9e0 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c8dc:	4b38      	ldr	r3, [pc, #224]	@ (3400c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c8de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c8e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c8e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c8ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c8f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c8f6:	3b01      	subs	r3, #1
3400c8f8:	041b      	lsls	r3, r3, #16
3400c8fa:	4313      	orrs	r3, r2
3400c8fc:	4a30      	ldr	r2, [pc, #192]	@ (3400c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c8fe:	430b      	orrs	r3, r1
3400c900:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c904:	f7fc fdd0 	bl	340094a8 <LL_RCC_IC10_Enable>
3400c908:	e065      	b.n	3400c9d6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400c90a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c90e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c912:	4b27      	ldr	r3, [pc, #156]	@ (3400c9b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c914:	429a      	cmp	r2, r3
3400c916:	d155      	bne.n	3400c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c91c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c91e:	2b00      	cmp	r3, #0
3400c920:	d016      	beq.n	3400c950 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c922:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c92c:	d010      	beq.n	3400c950 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c92e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c938:	d00a      	beq.n	3400c950 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c93a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c93e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c944:	d004      	beq.n	3400c950 <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c946:	f240 4103 	movw	r1, #1027	@ 0x403
3400c94a:	481c      	ldr	r0, [pc, #112]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c94c:	f7f5 f9a6 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c950:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c956:	2b00      	cmp	r3, #0
3400c958:	d005      	beq.n	3400c966 <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3400c95a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c95e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c964:	d904      	bls.n	3400c970 <HAL_RCCEx_PeriphCLKConfig+0x2f84>
3400c966:	f240 4104 	movw	r1, #1028	@ 0x404
3400c96a:	4814      	ldr	r0, [pc, #80]	@ (3400c9bc <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c96c:	f7f5 f996 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c970:	4b13      	ldr	r3, [pc, #76]	@ (3400c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c972:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c976:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c97a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c97e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c982:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c984:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c98a:	3b01      	subs	r3, #1
3400c98c:	041b      	lsls	r3, r3, #16
3400c98e:	4313      	orrs	r3, r2
3400c990:	4a0b      	ldr	r2, [pc, #44]	@ (3400c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c992:	430b      	orrs	r3, r1
3400c994:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c998:	f7fc fe86 	bl	340096a8 <LL_RCC_IC15_Enable>
3400c99c:	e01b      	b.n	3400c9d6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
3400c99e:	bf00      	nop
3400c9a0:	07010c0c 	.word	0x07010c0c
3400c9a4:	0700100c 	.word	0x0700100c
3400c9a8:	0701100c 	.word	0x0701100c
3400c9ac:	0702100c 	.word	0x0702100c
3400c9b0:	0703100c 	.word	0x0703100c
3400c9b4:	0704100c 	.word	0x0704100c
3400c9b8:	0705100c 	.word	0x0705100c
3400c9bc:	3401e800 	.word	0x3401e800
3400c9c0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400c9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9c8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c9cc:	4b70      	ldr	r3, [pc, #448]	@ (3400cb90 <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
3400c9ce:	429a      	cmp	r2, r3
3400c9d0:	d101      	bne.n	3400c9d6 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
3400c9d2:	f7fc ffe9 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3400c9d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400c9de:	4618      	mov	r0, r3
3400c9e0:	f7fb fec9 	bl	34008776 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400c9e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c9ec:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400c9f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3400c9f4:	2300      	movs	r3, #0
3400c9f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3400c9fa:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3400c9fe:	4603      	mov	r3, r0
3400ca00:	460a      	mov	r2, r1
3400ca02:	4313      	orrs	r3, r2
3400ca04:	f000 80e6 	beq.w	3400cbd4 <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3400ca08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca0c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca10:	4b60      	ldr	r3, [pc, #384]	@ (3400cb94 <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
3400ca12:	429a      	cmp	r2, r3
3400ca14:	d027      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca1a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca1e:	4b5e      	ldr	r3, [pc, #376]	@ (3400cb98 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
3400ca20:	429a      	cmp	r2, r3
3400ca22:	d020      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca28:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca2c:	4b5b      	ldr	r3, [pc, #364]	@ (3400cb9c <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400ca2e:	429a      	cmp	r2, r3
3400ca30:	d019      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca36:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca3a:	4b59      	ldr	r3, [pc, #356]	@ (3400cba0 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400ca3c:	429a      	cmp	r2, r3
3400ca3e:	d012      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca44:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca48:	4b56      	ldr	r3, [pc, #344]	@ (3400cba4 <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3400ca4a:	429a      	cmp	r2, r3
3400ca4c:	d00b      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca52:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca56:	4b54      	ldr	r3, [pc, #336]	@ (3400cba8 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
3400ca58:	429a      	cmp	r2, r3
3400ca5a:	d004      	beq.n	3400ca66 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400ca5c:	f240 411e 	movw	r1, #1054	@ 0x41e
3400ca60:	4852      	ldr	r0, [pc, #328]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400ca62:	f7f5 f91b 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3400ca66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca6a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400ca6e:	4b4b      	ldr	r3, [pc, #300]	@ (3400cb9c <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400ca70:	429a      	cmp	r2, r3
3400ca72:	d142      	bne.n	3400cafa <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400ca74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca7a:	2b00      	cmp	r3, #0
3400ca7c:	d016      	beq.n	3400caac <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ca88:	d010      	beq.n	3400caac <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ca94:	d00a      	beq.n	3400caac <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400ca96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ca9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400caa0:	d004      	beq.n	3400caac <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400caa2:	f240 4123 	movw	r1, #1059	@ 0x423
3400caa6:	4841      	ldr	r0, [pc, #260]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400caa8:	f7f5 f8f8 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400caac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cab2:	2b00      	cmp	r3, #0
3400cab4:	d005      	beq.n	3400cac2 <HAL_RCCEx_PeriphCLKConfig+0x30d6>
3400cab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400caba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cabc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cac0:	d904      	bls.n	3400cacc <HAL_RCCEx_PeriphCLKConfig+0x30e0>
3400cac2:	f240 4124 	movw	r1, #1060	@ 0x424
3400cac6:	4839      	ldr	r0, [pc, #228]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cac8:	f7f5 f8e8 	bl	34001c9c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400cacc:	4b38      	ldr	r3, [pc, #224]	@ (3400cbb0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400cad2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cad6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cada:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cade:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400cae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400cae6:	3b01      	subs	r3, #1
3400cae8:	041b      	lsls	r3, r3, #16
3400caea:	4313      	orrs	r3, r2
3400caec:	4a30      	ldr	r2, [pc, #192]	@ (3400cbb0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400caee:	430b      	orrs	r3, r1
3400caf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400caf4:	f7fc fcd8 	bl	340094a8 <LL_RCC_IC10_Enable>
3400caf8:	e065      	b.n	3400cbc6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3400cafa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cafe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400cb02:	4b27      	ldr	r3, [pc, #156]	@ (3400cba0 <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400cb04:	429a      	cmp	r2, r3
3400cb06:	d155      	bne.n	3400cbb4 <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cb08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb0e:	2b00      	cmp	r3, #0
3400cb10:	d016      	beq.n	3400cb40 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cb1c:	d010      	beq.n	3400cb40 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cb28:	d00a      	beq.n	3400cb40 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cb30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cb34:	d004      	beq.n	3400cb40 <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400cb36:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3400cb3a:	481c      	ldr	r0, [pc, #112]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cb3c:	f7f5 f8ae 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cb40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb46:	2b00      	cmp	r3, #0
3400cb48:	d005      	beq.n	3400cb56 <HAL_RCCEx_PeriphCLKConfig+0x316a>
3400cb4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cb54:	d904      	bls.n	3400cb60 <HAL_RCCEx_PeriphCLKConfig+0x3174>
3400cb56:	f240 4131 	movw	r1, #1073	@ 0x431
3400cb5a:	4814      	ldr	r0, [pc, #80]	@ (3400cbac <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400cb5c:	f7f5 f89e 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cb60:	4b13      	ldr	r3, [pc, #76]	@ (3400cbb0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cb62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cb66:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cb6a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cb6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb72:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cb74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb7a:	3b01      	subs	r3, #1
3400cb7c:	041b      	lsls	r3, r3, #16
3400cb7e:	4313      	orrs	r3, r2
3400cb80:	4a0b      	ldr	r2, [pc, #44]	@ (3400cbb0 <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400cb82:	430b      	orrs	r3, r1
3400cb84:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cb88:	f7fc fd8e 	bl	340096a8 <LL_RCC_IC15_Enable>
3400cb8c:	e01b      	b.n	3400cbc6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
3400cb8e:	bf00      	nop
3400cb90:	0701100c 	.word	0x0701100c
3400cb94:	0700140c 	.word	0x0700140c
3400cb98:	0701140c 	.word	0x0701140c
3400cb9c:	0702140c 	.word	0x0702140c
3400cba0:	0703140c 	.word	0x0703140c
3400cba4:	0704140c 	.word	0x0704140c
3400cba8:	0705140c 	.word	0x0705140c
3400cbac:	3401e800 	.word	0x3401e800
3400cbb0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400cbb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbb8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400cbbc:	4b98      	ldr	r3, [pc, #608]	@ (3400ce20 <HAL_RCCEx_PeriphCLKConfig+0x3434>)
3400cbbe:	429a      	cmp	r2, r3
3400cbc0:	d101      	bne.n	3400cbc6 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
3400cbc2:	f7fc fef1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3400cbc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cbce:	4618      	mov	r0, r3
3400cbd0:	f7fb fdd1 	bl	34008776 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3400cbd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cbdc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400cbe0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3400cbe4:	2300      	movs	r3, #0
3400cbe6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3400cbea:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3400cbee:	4603      	mov	r3, r0
3400cbf0:	460a      	mov	r2, r1
3400cbf2:	4313      	orrs	r3, r2
3400cbf4:	f000 8089 	beq.w	3400cd0a <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400cbf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbfc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc00:	4b88      	ldr	r3, [pc, #544]	@ (3400ce24 <HAL_RCCEx_PeriphCLKConfig+0x3438>)
3400cc02:	429a      	cmp	r2, r3
3400cc04:	d027      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc0e:	4b86      	ldr	r3, [pc, #536]	@ (3400ce28 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400cc10:	429a      	cmp	r2, r3
3400cc12:	d020      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc18:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc1c:	4b83      	ldr	r3, [pc, #524]	@ (3400ce2c <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400cc1e:	429a      	cmp	r2, r3
3400cc20:	d019      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc26:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc2a:	4b81      	ldr	r3, [pc, #516]	@ (3400ce30 <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3400cc2c:	429a      	cmp	r2, r3
3400cc2e:	d012      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc34:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc38:	4b7e      	ldr	r3, [pc, #504]	@ (3400ce34 <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3400cc3a:	429a      	cmp	r2, r3
3400cc3c:	d00b      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc42:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc46:	4b7c      	ldr	r3, [pc, #496]	@ (3400ce38 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
3400cc48:	429a      	cmp	r2, r3
3400cc4a:	d004      	beq.n	3400cc56 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400cc4c:	f240 414b 	movw	r1, #1099	@ 0x44b
3400cc50:	487a      	ldr	r0, [pc, #488]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cc52:	f7f5 f823 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400cc56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400cc5e:	4b73      	ldr	r3, [pc, #460]	@ (3400ce2c <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400cc60:	429a      	cmp	r2, r3
3400cc62:	d142      	bne.n	3400ccea <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cc64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc6a:	2b00      	cmp	r3, #0
3400cc6c:	d016      	beq.n	3400cc9c <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cc78:	d010      	beq.n	3400cc9c <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cc84:	d00a      	beq.n	3400cc9c <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cc8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cc90:	d004      	beq.n	3400cc9c <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400cc92:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3400cc96:	4869      	ldr	r0, [pc, #420]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cc98:	f7f5 f800 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cc9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cca2:	2b00      	cmp	r3, #0
3400cca4:	d005      	beq.n	3400ccb2 <HAL_RCCEx_PeriphCLKConfig+0x32c6>
3400cca6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ccb0:	d904      	bls.n	3400ccbc <HAL_RCCEx_PeriphCLKConfig+0x32d0>
3400ccb2:	f240 4151 	movw	r1, #1105	@ 0x451
3400ccb6:	4861      	ldr	r0, [pc, #388]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400ccb8:	f7f4 fff0 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400ccbc:	4b60      	ldr	r3, [pc, #384]	@ (3400ce40 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400ccbe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400ccc2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ccc6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ccca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ccd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ccd6:	3b01      	subs	r3, #1
3400ccd8:	041b      	lsls	r3, r3, #16
3400ccda:	4313      	orrs	r3, r2
3400ccdc:	4a58      	ldr	r2, [pc, #352]	@ (3400ce40 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400ccde:	430b      	orrs	r3, r1
3400cce0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cce4:	f7fc fce0 	bl	340096a8 <LL_RCC_IC15_Enable>
3400cce8:	e008      	b.n	3400ccfc <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400ccea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccee:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400ccf2:	4b4d      	ldr	r3, [pc, #308]	@ (3400ce28 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400ccf4:	429a      	cmp	r2, r3
3400ccf6:	d101      	bne.n	3400ccfc <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
3400ccf8:	f7fc fe56 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3400ccfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd00:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400cd04:	4618      	mov	r0, r3
3400cd06:	f7fb fd41 	bl	3400878c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400cd0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cd12:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400cd16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3400cd1a:	2300      	movs	r3, #0
3400cd1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3400cd20:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400cd24:	4603      	mov	r3, r0
3400cd26:	460a      	mov	r2, r1
3400cd28:	4313      	orrs	r3, r2
3400cd2a:	f000 80a7 	beq.w	3400ce7c <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400cd2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd36:	4b43      	ldr	r3, [pc, #268]	@ (3400ce44 <HAL_RCCEx_PeriphCLKConfig+0x3458>)
3400cd38:	429a      	cmp	r2, r3
3400cd3a:	d027      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd40:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd44:	4b40      	ldr	r3, [pc, #256]	@ (3400ce48 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
3400cd46:	429a      	cmp	r2, r3
3400cd48:	d020      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd4e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd52:	4b3e      	ldr	r3, [pc, #248]	@ (3400ce4c <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cd54:	429a      	cmp	r2, r3
3400cd56:	d019      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd60:	4b3b      	ldr	r3, [pc, #236]	@ (3400ce50 <HAL_RCCEx_PeriphCLKConfig+0x3464>)
3400cd62:	429a      	cmp	r2, r3
3400cd64:	d012      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd6a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd6e:	4b39      	ldr	r3, [pc, #228]	@ (3400ce54 <HAL_RCCEx_PeriphCLKConfig+0x3468>)
3400cd70:	429a      	cmp	r2, r3
3400cd72:	d00b      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd78:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd7c:	4b36      	ldr	r3, [pc, #216]	@ (3400ce58 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3400cd7e:	429a      	cmp	r2, r3
3400cd80:	d004      	beq.n	3400cd8c <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400cd82:	f240 416b 	movw	r1, #1131	@ 0x46b
3400cd86:	482d      	ldr	r0, [pc, #180]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cd88:	f7f4 ff88 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3400cd8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd90:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400cd94:	4b2d      	ldr	r3, [pc, #180]	@ (3400ce4c <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400cd96:	429a      	cmp	r2, r3
3400cd98:	d160      	bne.n	3400ce5c <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cd9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cda0:	2b00      	cmp	r3, #0
3400cda2:	d016      	beq.n	3400cdd2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cda4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cda8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cdae:	d010      	beq.n	3400cdd2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cdba:	d00a      	beq.n	3400cdd2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cdc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cdc6:	d004      	beq.n	3400cdd2 <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400cdc8:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400cdcc:	481b      	ldr	r0, [pc, #108]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cdce:	f7f4 ff65 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cdd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cdd8:	2b00      	cmp	r3, #0
3400cdda:	d005      	beq.n	3400cde8 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
3400cddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cde0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cde2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cde6:	d904      	bls.n	3400cdf2 <HAL_RCCEx_PeriphCLKConfig+0x3406>
3400cde8:	f240 4171 	movw	r1, #1137	@ 0x471
3400cdec:	4813      	ldr	r0, [pc, #76]	@ (3400ce3c <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400cdee:	f7f4 ff55 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cdf2:	4b13      	ldr	r3, [pc, #76]	@ (3400ce40 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400cdf4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cdf8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cdfc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ce00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce04:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400ce06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400ce0c:	3b01      	subs	r3, #1
3400ce0e:	041b      	lsls	r3, r3, #16
3400ce10:	4313      	orrs	r3, r2
3400ce12:	4a0b      	ldr	r2, [pc, #44]	@ (3400ce40 <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400ce14:	430b      	orrs	r3, r1
3400ce16:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400ce1a:	f7fc fc45 	bl	340096a8 <LL_RCC_IC15_Enable>
3400ce1e:	e026      	b.n	3400ce6e <HAL_RCCEx_PeriphCLKConfig+0x3482>
3400ce20:	0701140c 	.word	0x0701140c
3400ce24:	0700082c 	.word	0x0700082c
3400ce28:	0701082c 	.word	0x0701082c
3400ce2c:	0702082c 	.word	0x0702082c
3400ce30:	0703082c 	.word	0x0703082c
3400ce34:	0704082c 	.word	0x0704082c
3400ce38:	0705082c 	.word	0x0705082c
3400ce3c:	3401e800 	.word	0x3401e800
3400ce40:	56028000 	.word	0x56028000
3400ce44:	07000c2c 	.word	0x07000c2c
3400ce48:	07010c2c 	.word	0x07010c2c
3400ce4c:	07020c2c 	.word	0x07020c2c
3400ce50:	07030c2c 	.word	0x07030c2c
3400ce54:	07040c2c 	.word	0x07040c2c
3400ce58:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400ce5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce60:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400ce64:	4b98      	ldr	r3, [pc, #608]	@ (3400d0c8 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
3400ce66:	429a      	cmp	r2, r3
3400ce68:	d101      	bne.n	3400ce6e <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3400ce6a:	f7fc fd9d 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3400ce6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce72:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400ce76:	4618      	mov	r0, r3
3400ce78:	f7fb fc88 	bl	3400878c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3400ce7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ce84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400ce88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3400ce8c:	2300      	movs	r3, #0
3400ce8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3400ce92:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3400ce96:	4603      	mov	r3, r0
3400ce98:	460a      	mov	r2, r1
3400ce9a:	4313      	orrs	r3, r2
3400ce9c:	f000 8089 	beq.w	3400cfb2 <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400cea0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cea4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cea8:	4b88      	ldr	r3, [pc, #544]	@ (3400d0cc <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
3400ceaa:	429a      	cmp	r2, r3
3400ceac:	d027      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ceae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ceb6:	4b86      	ldr	r3, [pc, #536]	@ (3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400ceb8:	429a      	cmp	r2, r3
3400ceba:	d020      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cebc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cec0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cec4:	4b83      	ldr	r3, [pc, #524]	@ (3400d0d4 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400cec6:	429a      	cmp	r2, r3
3400cec8:	d019      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ceca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cece:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ced2:	4b81      	ldr	r3, [pc, #516]	@ (3400d0d8 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
3400ced4:	429a      	cmp	r2, r3
3400ced6:	d012      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400ced8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cedc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cee0:	4b7e      	ldr	r3, [pc, #504]	@ (3400d0dc <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
3400cee2:	429a      	cmp	r2, r3
3400cee4:	d00b      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cee6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400ceee:	4b7c      	ldr	r3, [pc, #496]	@ (3400d0e0 <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
3400cef0:	429a      	cmp	r2, r3
3400cef2:	d004      	beq.n	3400cefe <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400cef4:	f240 418b 	movw	r1, #1163	@ 0x48b
3400cef8:	487a      	ldr	r0, [pc, #488]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cefa:	f7f4 fecf 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400cefe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf02:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cf06:	4b73      	ldr	r3, [pc, #460]	@ (3400d0d4 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400cf08:	429a      	cmp	r2, r3
3400cf0a:	d142      	bne.n	3400cf92 <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cf0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf12:	2b00      	cmp	r3, #0
3400cf14:	d016      	beq.n	3400cf44 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cf20:	d010      	beq.n	3400cf44 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cf2c:	d00a      	beq.n	3400cf44 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cf34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cf38:	d004      	beq.n	3400cf44 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400cf3a:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3400cf3e:	4869      	ldr	r0, [pc, #420]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cf40:	f7f4 feac 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400cf44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf4a:	2b00      	cmp	r3, #0
3400cf4c:	d005      	beq.n	3400cf5a <HAL_RCCEx_PeriphCLKConfig+0x356e>
3400cf4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cf58:	d904      	bls.n	3400cf64 <HAL_RCCEx_PeriphCLKConfig+0x3578>
3400cf5a:	f240 4191 	movw	r1, #1169	@ 0x491
3400cf5e:	4861      	ldr	r0, [pc, #388]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400cf60:	f7f4 fe9c 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cf64:	4b60      	ldr	r3, [pc, #384]	@ (3400d0e8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cf66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cf6a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cf6e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cf72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf76:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cf78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cf7e:	3b01      	subs	r3, #1
3400cf80:	041b      	lsls	r3, r3, #16
3400cf82:	4313      	orrs	r3, r2
3400cf84:	4a58      	ldr	r2, [pc, #352]	@ (3400d0e8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400cf86:	430b      	orrs	r3, r1
3400cf88:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cf8c:	f7fc fb8c 	bl	340096a8 <LL_RCC_IC15_Enable>
3400cf90:	e008      	b.n	3400cfa4 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400cf92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf96:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400cf9a:	4b4d      	ldr	r3, [pc, #308]	@ (3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400cf9c:	429a      	cmp	r2, r3
3400cf9e:	d101      	bne.n	3400cfa4 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
3400cfa0:	f7fc fd02 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3400cfa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400cfac:	4618      	mov	r0, r3
3400cfae:	f7fb fbed 	bl	3400878c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400cfb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cfba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400cfbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3400cfc2:	2300      	movs	r3, #0
3400cfc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400cfc8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3400cfcc:	4603      	mov	r3, r0
3400cfce:	460a      	mov	r2, r1
3400cfd0:	4313      	orrs	r3, r2
3400cfd2:	f000 80a7 	beq.w	3400d124 <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
3400cfd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfda:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cfde:	4b43      	ldr	r3, [pc, #268]	@ (3400d0ec <HAL_RCCEx_PeriphCLKConfig+0x3700>)
3400cfe0:	429a      	cmp	r2, r3
3400cfe2:	d027      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cfe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfe8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cfec:	4b40      	ldr	r3, [pc, #256]	@ (3400d0f0 <HAL_RCCEx_PeriphCLKConfig+0x3704>)
3400cfee:	429a      	cmp	r2, r3
3400cff0:	d020      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400cff2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cff6:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400cffa:	4b3e      	ldr	r3, [pc, #248]	@ (3400d0f4 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400cffc:	429a      	cmp	r2, r3
3400cffe:	d019      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d000:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d004:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d008:	4b3b      	ldr	r3, [pc, #236]	@ (3400d0f8 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3400d00a:	429a      	cmp	r2, r3
3400d00c:	d012      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d00e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d012:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d016:	4b39      	ldr	r3, [pc, #228]	@ (3400d0fc <HAL_RCCEx_PeriphCLKConfig+0x3710>)
3400d018:	429a      	cmp	r2, r3
3400d01a:	d00b      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d01c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d020:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d024:	4b36      	ldr	r3, [pc, #216]	@ (3400d100 <HAL_RCCEx_PeriphCLKConfig+0x3714>)
3400d026:	429a      	cmp	r2, r3
3400d028:	d004      	beq.n	3400d034 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400d02a:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3400d02e:	482d      	ldr	r0, [pc, #180]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d030:	f7f4 fe34 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400d034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d038:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d03c:	4b2d      	ldr	r3, [pc, #180]	@ (3400d0f4 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400d03e:	429a      	cmp	r2, r3
3400d040:	d160      	bne.n	3400d104 <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400d042:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d048:	2b00      	cmp	r3, #0
3400d04a:	d016      	beq.n	3400d07a <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d04c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d056:	d010      	beq.n	3400d07a <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d058:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d05c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d05e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d062:	d00a      	beq.n	3400d07a <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d06a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d06e:	d004      	beq.n	3400d07a <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400d070:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400d074:	481b      	ldr	r0, [pc, #108]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d076:	f7f4 fe11 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400d07a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d07e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d080:	2b00      	cmp	r3, #0
3400d082:	d005      	beq.n	3400d090 <HAL_RCCEx_PeriphCLKConfig+0x36a4>
3400d084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d08a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d08e:	d904      	bls.n	3400d09a <HAL_RCCEx_PeriphCLKConfig+0x36ae>
3400d090:	f240 41b1 	movw	r1, #1201	@ 0x4b1
3400d094:	4813      	ldr	r0, [pc, #76]	@ (3400d0e4 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400d096:	f7f4 fe01 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400d09a:	4b13      	ldr	r3, [pc, #76]	@ (3400d0e8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400d09c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400d0a0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d0a4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d0a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0ac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400d0ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d0b4:	3b01      	subs	r3, #1
3400d0b6:	041b      	lsls	r3, r3, #16
3400d0b8:	4313      	orrs	r3, r2
3400d0ba:	4a0b      	ldr	r2, [pc, #44]	@ (3400d0e8 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400d0bc:	430b      	orrs	r3, r1
3400d0be:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400d0c2:	f7fc faf1 	bl	340096a8 <LL_RCC_IC15_Enable>
3400d0c6:	e026      	b.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x372a>
3400d0c8:	07010c2c 	.word	0x07010c2c
3400d0cc:	0700102c 	.word	0x0700102c
3400d0d0:	0701102c 	.word	0x0701102c
3400d0d4:	0702102c 	.word	0x0702102c
3400d0d8:	0703102c 	.word	0x0703102c
3400d0dc:	0704102c 	.word	0x0704102c
3400d0e0:	0705102c 	.word	0x0705102c
3400d0e4:	3401e800 	.word	0x3401e800
3400d0e8:	56028000 	.word	0x56028000
3400d0ec:	0700142c 	.word	0x0700142c
3400d0f0:	0701142c 	.word	0x0701142c
3400d0f4:	0702142c 	.word	0x0702142c
3400d0f8:	0703142c 	.word	0x0703142c
3400d0fc:	0704142c 	.word	0x0704142c
3400d100:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400d104:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d108:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400d10c:	4b9b      	ldr	r3, [pc, #620]	@ (3400d37c <HAL_RCCEx_PeriphCLKConfig+0x3990>)
3400d10e:	429a      	cmp	r2, r3
3400d110:	d101      	bne.n	3400d116 <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
3400d112:	f7fc fc49 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3400d116:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d11a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400d11e:	4618      	mov	r0, r3
3400d120:	f7fb fb34 	bl	3400878c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400d124:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d128:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d12c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400d130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3400d134:	2300      	movs	r3, #0
3400d136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3400d13a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3400d13e:	4603      	mov	r3, r0
3400d140:	460a      	mov	r2, r1
3400d142:	4313      	orrs	r3, r2
3400d144:	f000 8089 	beq.w	3400d25a <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400d148:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d14c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d150:	4b8b      	ldr	r3, [pc, #556]	@ (3400d380 <HAL_RCCEx_PeriphCLKConfig+0x3994>)
3400d152:	429a      	cmp	r2, r3
3400d154:	d027      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d156:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d15a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d15e:	4b89      	ldr	r3, [pc, #548]	@ (3400d384 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400d160:	429a      	cmp	r2, r3
3400d162:	d020      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d168:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d16c:	4b86      	ldr	r3, [pc, #536]	@ (3400d388 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400d16e:	429a      	cmp	r2, r3
3400d170:	d019      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d172:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d176:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d17a:	4b84      	ldr	r3, [pc, #528]	@ (3400d38c <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
3400d17c:	429a      	cmp	r2, r3
3400d17e:	d012      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d180:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d184:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d188:	4b81      	ldr	r3, [pc, #516]	@ (3400d390 <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
3400d18a:	429a      	cmp	r2, r3
3400d18c:	d00b      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d18e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d192:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d196:	4b7f      	ldr	r3, [pc, #508]	@ (3400d394 <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
3400d198:	429a      	cmp	r2, r3
3400d19a:	d004      	beq.n	3400d1a6 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400d19c:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400d1a0:	487d      	ldr	r0, [pc, #500]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d1a2:	f7f4 fd7b 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400d1a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d1ae:	4b76      	ldr	r3, [pc, #472]	@ (3400d388 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400d1b0:	429a      	cmp	r2, r3
3400d1b2:	d142      	bne.n	3400d23a <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400d1b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1ba:	2b00      	cmp	r3, #0
3400d1bc:	d016      	beq.n	3400d1ec <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d1c8:	d010      	beq.n	3400d1ec <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d1d4:	d00a      	beq.n	3400d1ec <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400d1dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d1e0:	d004      	beq.n	3400d1ec <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400d1e2:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400d1e6:	486c      	ldr	r0, [pc, #432]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d1e8:	f7f4 fd58 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400d1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d1f2:	2b00      	cmp	r3, #0
3400d1f4:	d005      	beq.n	3400d202 <HAL_RCCEx_PeriphCLKConfig+0x3816>
3400d1f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d1fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d200:	d904      	bls.n	3400d20c <HAL_RCCEx_PeriphCLKConfig+0x3820>
3400d202:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400d206:	4864      	ldr	r0, [pc, #400]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d208:	f7f4 fd48 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400d20c:	4b63      	ldr	r3, [pc, #396]	@ (3400d39c <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d20e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400d212:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d216:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d21a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d21e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400d220:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400d226:	3b01      	subs	r3, #1
3400d228:	041b      	lsls	r3, r3, #16
3400d22a:	4313      	orrs	r3, r2
3400d22c:	4a5b      	ldr	r2, [pc, #364]	@ (3400d39c <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d22e:	430b      	orrs	r3, r1
3400d230:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400d234:	f7fc fa38 	bl	340096a8 <LL_RCC_IC15_Enable>
3400d238:	e008      	b.n	3400d24c <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400d23a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d23e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400d242:	4b50      	ldr	r3, [pc, #320]	@ (3400d384 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400d244:	429a      	cmp	r2, r3
3400d246:	d101      	bne.n	3400d24c <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
3400d248:	f7fc fbae 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3400d24c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d250:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d254:	4618      	mov	r0, r3
3400d256:	f7fb fa99 	bl	3400878c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400d25a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d262:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400d266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3400d26a:	2300      	movs	r3, #0
3400d26c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3400d270:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400d274:	4603      	mov	r3, r0
3400d276:	460a      	mov	r2, r1
3400d278:	4313      	orrs	r3, r2
3400d27a:	f000 80eb 	beq.w	3400d454 <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3400d27e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d282:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d286:	2b00      	cmp	r3, #0
3400d288:	d02e      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d28a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d28e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d296:	d027      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d29c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d2a4:	d020      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d2b2:	d019      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400d2c0:	d012      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400d2ce:	d00b      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400d2dc:	d004      	beq.n	3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400d2de:	f240 41eb 	movw	r1, #1259	@ 0x4eb
3400d2e2:	482d      	ldr	r0, [pc, #180]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d2e4:	f7f4 fcda 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400d2e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d2f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400d2f4:	d154      	bne.n	3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400d2f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d2fc:	2b00      	cmp	r3, #0
3400d2fe:	d016      	beq.n	3400d32e <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d300:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d30a:	d010      	beq.n	3400d32e <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d30c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d316:	d00a      	beq.n	3400d32e <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d31c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d31e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d322:	d004      	beq.n	3400d32e <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400d324:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3400d328:	481b      	ldr	r0, [pc, #108]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d32a:	f7f4 fcb7 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400d32e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d334:	2b00      	cmp	r3, #0
3400d336:	d005      	beq.n	3400d344 <HAL_RCCEx_PeriphCLKConfig+0x3958>
3400d338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d33c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d33e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d342:	d904      	bls.n	3400d34e <HAL_RCCEx_PeriphCLKConfig+0x3962>
3400d344:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3400d348:	4813      	ldr	r0, [pc, #76]	@ (3400d398 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400d34a:	f7f4 fca7 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400d34e:	4b13      	ldr	r3, [pc, #76]	@ (3400d39c <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d350:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400d354:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d358:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400d362:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d368:	3b01      	subs	r3, #1
3400d36a:	041b      	lsls	r3, r3, #16
3400d36c:	4313      	orrs	r3, r2
3400d36e:	4a0b      	ldr	r2, [pc, #44]	@ (3400d39c <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400d370:	430b      	orrs	r3, r1
3400d372:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400d376:	f7fc f857 	bl	34009428 <LL_RCC_IC9_Enable>
3400d37a:	e064      	b.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
3400d37c:	0701142c 	.word	0x0701142c
3400d380:	0700182c 	.word	0x0700182c
3400d384:	0701182c 	.word	0x0701182c
3400d388:	0702182c 	.word	0x0702182c
3400d38c:	0703182c 	.word	0x0703182c
3400d390:	0704182c 	.word	0x0704182c
3400d394:	0705182c 	.word	0x0705182c
3400d398:	3401e800 	.word	0x3401e800
3400d39c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400d3a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d3a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400d3ac:	d142      	bne.n	3400d434 <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400d3ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3b4:	2b00      	cmp	r3, #0
3400d3b6:	d016      	beq.n	3400d3e6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d3c2:	d010      	beq.n	3400d3e6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d3ce:	d00a      	beq.n	3400d3e6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400d3d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d3da:	d004      	beq.n	3400d3e6 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400d3dc:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400d3e0:	48b2      	ldr	r0, [pc, #712]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d3e2:	f7f4 fc5b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400d3e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d3ec:	2b00      	cmp	r3, #0
3400d3ee:	d005      	beq.n	3400d3fc <HAL_RCCEx_PeriphCLKConfig+0x3a10>
3400d3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d3fa:	d904      	bls.n	3400d406 <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
3400d3fc:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400d400:	48aa      	ldr	r0, [pc, #680]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d402:	f7f4 fc4b 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400d406:	4baa      	ldr	r3, [pc, #680]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d408:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400d40c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d410:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d414:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d418:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400d41a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d41e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400d420:	3b01      	subs	r3, #1
3400d422:	041b      	lsls	r3, r3, #16
3400d424:	4313      	orrs	r3, r2
3400d426:	4aa2      	ldr	r2, [pc, #648]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d428:	430b      	orrs	r3, r1
3400d42a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400d42e:	f7fc f8fb 	bl	34009628 <LL_RCC_IC14_Enable>
3400d432:	e008      	b.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400d434:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d438:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d43c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d440:	d101      	bne.n	3400d446 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
3400d442:	f7fc fab1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3400d446:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d44a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400d44e:	4618      	mov	r0, r3
3400d450:	f7fb f9a8 	bl	340087a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400d454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d458:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d45c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400d460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400d464:	2300      	movs	r3, #0
3400d466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3400d46a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3400d46e:	4603      	mov	r3, r0
3400d470:	460a      	mov	r2, r1
3400d472:	4313      	orrs	r3, r2
3400d474:	f000 8082 	beq.w	3400d57c <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400d478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d47c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d480:	2b00      	cmp	r3, #0
3400d482:	d019      	beq.n	3400d4b8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d488:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d48c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d490:	d012      	beq.n	3400d4b8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d496:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d49a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d49e:	d00b      	beq.n	3400d4b8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d4a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400d4ac:	d004      	beq.n	3400d4b8 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400d4ae:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400d4b2:	487e      	ldr	r0, [pc, #504]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d4b4:	f7f4 fbf2 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400d4b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4bc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d4c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400d4c4:	d14a      	bne.n	3400d55c <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400d4c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4ce:	2b00      	cmp	r3, #0
3400d4d0:	d019      	beq.n	3400d506 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d4de:	d012      	beq.n	3400d506 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d4ec:	d00b      	beq.n	3400d506 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400d4f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d4fa:	d004      	beq.n	3400d506 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400d4fc:	f240 511d 	movw	r1, #1309	@ 0x51d
3400d500:	486a      	ldr	r0, [pc, #424]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d502:	f7f4 fbcb 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400d506:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d50a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d50e:	2b00      	cmp	r3, #0
3400d510:	d006      	beq.n	3400d520 <HAL_RCCEx_PeriphCLKConfig+0x3b34>
3400d512:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d51a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d51e:	d904      	bls.n	3400d52a <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
3400d520:	f240 511e 	movw	r1, #1310	@ 0x51e
3400d524:	4861      	ldr	r0, [pc, #388]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d526:	f7f4 fbb9 	bl	34001c9c <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400d52a:	4b61      	ldr	r3, [pc, #388]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d52c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400d530:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d534:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d53c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400d540:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400d548:	3b01      	subs	r3, #1
3400d54a:	041b      	lsls	r3, r3, #16
3400d54c:	4313      	orrs	r3, r2
3400d54e:	4a58      	ldr	r2, [pc, #352]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d550:	430b      	orrs	r3, r1
3400d552:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3400d556:	f7fc f8e7 	bl	34009728 <LL_RCC_IC16_Enable>
3400d55a:	e008      	b.n	3400d56e <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400d55c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d560:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400d568:	d101      	bne.n	3400d56e <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
3400d56a:	f7fc fa1d 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3400d56e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d572:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400d576:	4618      	mov	r0, r3
3400d578:	f7fb f92a 	bl	340087d0 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400d57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d580:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d584:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400d588:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400d58c:	2300      	movs	r3, #0
3400d58e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3400d592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3400d596:	4603      	mov	r3, r0
3400d598:	460a      	mov	r2, r1
3400d59a:	4313      	orrs	r3, r2
3400d59c:	f000 80e4 	beq.w	3400d768 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400d5a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5a8:	2b00      	cmp	r3, #0
3400d5aa:	d035      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d5b8:	d02e      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5be:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d5c6:	d027      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d5d4:	d020      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5da:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400d5e2:	d019      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400d5f0:	d012      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d5f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d5fa:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400d5fe:	d00b      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d604:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d608:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400d60c:	d004      	beq.n	3400d618 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400d60e:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400d612:	4826      	ldr	r0, [pc, #152]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d614:	f7f4 fb42 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3400d618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d61c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400d624:	d146      	bne.n	3400d6b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d626:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d62c:	2b00      	cmp	r3, #0
3400d62e:	d016      	beq.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d630:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d63a:	d010      	beq.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d646:	d00a      	beq.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d648:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d64e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d652:	d004      	beq.n	3400d65e <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400d654:	f240 513d 	movw	r1, #1341	@ 0x53d
3400d658:	4814      	ldr	r0, [pc, #80]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d65a:	f7f4 fb1f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d65e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d664:	2b00      	cmp	r3, #0
3400d666:	d005      	beq.n	3400d674 <HAL_RCCEx_PeriphCLKConfig+0x3c88>
3400d668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d672:	d904      	bls.n	3400d67e <HAL_RCCEx_PeriphCLKConfig+0x3c92>
3400d674:	f240 513e 	movw	r1, #1342	@ 0x53e
3400d678:	480c      	ldr	r0, [pc, #48]	@ (3400d6ac <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400d67a:	f7f4 fb0f 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d67e:	4b0c      	ldr	r3, [pc, #48]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d680:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d684:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d688:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d68c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d692:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d698:	3b01      	subs	r3, #1
3400d69a:	041b      	lsls	r3, r3, #16
3400d69c:	4313      	orrs	r3, r2
3400d69e:	4a04      	ldr	r2, [pc, #16]	@ (3400d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400d6a0:	430b      	orrs	r3, r1
3400d6a2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d6a6:	f7fb fe3f 	bl	34009328 <LL_RCC_IC7_Enable>
3400d6aa:	e056      	b.n	3400d75a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
3400d6ac:	3401e800 	.word	0x3401e800
3400d6b0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3400d6b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d6bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400d6c0:	d142      	bne.n	3400d748 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d6c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6c8:	2b00      	cmp	r3, #0
3400d6ca:	d016      	beq.n	3400d6fa <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d6d6:	d010      	beq.n	3400d6fa <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d6e2:	d00a      	beq.n	3400d6fa <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d6ee:	d004      	beq.n	3400d6fa <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400d6f0:	f240 514a 	movw	r1, #1354	@ 0x54a
3400d6f4:	48b0      	ldr	r0, [pc, #704]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d6f6:	f7f4 fad1 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d700:	2b00      	cmp	r3, #0
3400d702:	d005      	beq.n	3400d710 <HAL_RCCEx_PeriphCLKConfig+0x3d24>
3400d704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d70a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d70e:	d904      	bls.n	3400d71a <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
3400d710:	f240 514b 	movw	r1, #1355	@ 0x54b
3400d714:	48a8      	ldr	r0, [pc, #672]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d716:	f7f4 fac1 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d71a:	4ba8      	ldr	r3, [pc, #672]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d71c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d720:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d724:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d728:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d72c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d72e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d734:	3b01      	subs	r3, #1
3400d736:	041b      	lsls	r3, r3, #16
3400d738:	4313      	orrs	r3, r2
3400d73a:	4aa0      	ldr	r2, [pc, #640]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d73c:	430b      	orrs	r3, r1
3400d73e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d742:	f7fb fe31 	bl	340093a8 <LL_RCC_IC8_Enable>
3400d746:	e008      	b.n	3400d75a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400d748:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d74c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d754:	d101      	bne.n	3400d75a <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
3400d756:	f7fc f927 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3400d75a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d75e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d762:	4618      	mov	r0, r3
3400d764:	f7fb f84a 	bl	340087fc <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400d768:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d76c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d770:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400d774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3400d778:	2300      	movs	r3, #0
3400d77a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3400d77e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3400d782:	4603      	mov	r3, r0
3400d784:	460a      	mov	r2, r1
3400d786:	4313      	orrs	r3, r2
3400d788:	d07c      	beq.n	3400d884 <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400d78a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d78e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d792:	2b00      	cmp	r3, #0
3400d794:	d016      	beq.n	3400d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d796:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d79a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d79e:	2b10      	cmp	r3, #16
3400d7a0:	d010      	beq.n	3400d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7aa:	2b20      	cmp	r3, #32
3400d7ac:	d00a      	beq.n	3400d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7b6:	2b30      	cmp	r3, #48	@ 0x30
3400d7b8:	d004      	beq.n	3400d7c4 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d7ba:	f240 5165 	movw	r1, #1381	@ 0x565
3400d7be:	487e      	ldr	r0, [pc, #504]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d7c0:	f7f4 fa6c 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400d7c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d7cc:	2b20      	cmp	r3, #32
3400d7ce:	d14a      	bne.n	3400d866 <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400d7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7d8:	2b00      	cmp	r3, #0
3400d7da:	d019      	beq.n	3400d810 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d7dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d7e8:	d012      	beq.n	3400d810 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d7ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d7f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d7f6:	d00b      	beq.n	3400d810 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d7f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d804:	d004      	beq.n	3400d810 <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d806:	f240 516a 	movw	r1, #1386	@ 0x56a
3400d80a:	486b      	ldr	r0, [pc, #428]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d80c:	f7f4 fa46 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400d810:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d818:	2b00      	cmp	r3, #0
3400d81a:	d006      	beq.n	3400d82a <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3400d81c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d828:	d904      	bls.n	3400d834 <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3400d82a:	f240 516b 	movw	r1, #1387	@ 0x56b
3400d82e:	4862      	ldr	r0, [pc, #392]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d830:	f7f4 fa34 	bl	34001c9c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400d834:	4b61      	ldr	r3, [pc, #388]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d836:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d83a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d83e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d842:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d846:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400d84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d84e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d852:	3b01      	subs	r3, #1
3400d854:	041b      	lsls	r3, r3, #16
3400d856:	4313      	orrs	r3, r2
3400d858:	4a58      	ldr	r2, [pc, #352]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d85a:	430b      	orrs	r3, r1
3400d85c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400d860:	f7fc f862 	bl	34009928 <LL_RCC_IC20_Enable>
3400d864:	e007      	b.n	3400d876 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400d866:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d86a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d86e:	2b10      	cmp	r3, #16
3400d870:	d101      	bne.n	3400d876 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
3400d872:	f7fc f899 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3400d876:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d87a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d87e:	4618      	mov	r0, r3
3400d880:	f7fa ffe8 	bl	34008854 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400d884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d888:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d88c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400d890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3400d894:	2300      	movs	r3, #0
3400d896:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3400d89a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3400d89e:	4603      	mov	r3, r0
3400d8a0:	460a      	mov	r2, r1
3400d8a2:	4313      	orrs	r3, r2
3400d8a4:	f000 80f6 	beq.w	3400da94 <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3400d8a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ac:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8b0:	4b43      	ldr	r3, [pc, #268]	@ (3400d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
3400d8b2:	429a      	cmp	r2, r3
3400d8b4:	d035      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ba:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8be:	4b41      	ldr	r3, [pc, #260]	@ (3400d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
3400d8c0:	429a      	cmp	r2, r3
3400d8c2:	d02e      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8cc:	4b3e      	ldr	r3, [pc, #248]	@ (3400d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d8ce:	429a      	cmp	r2, r3
3400d8d0:	d027      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8d6:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8da:	4b3c      	ldr	r3, [pc, #240]	@ (3400d9cc <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
3400d8dc:	429a      	cmp	r2, r3
3400d8de:	d020      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8e4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8e8:	4b39      	ldr	r3, [pc, #228]	@ (3400d9d0 <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
3400d8ea:	429a      	cmp	r2, r3
3400d8ec:	d019      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8f2:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d8f6:	4b37      	ldr	r3, [pc, #220]	@ (3400d9d4 <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
3400d8f8:	429a      	cmp	r2, r3
3400d8fa:	d012      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d8fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d900:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d904:	4b34      	ldr	r3, [pc, #208]	@ (3400d9d8 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
3400d906:	429a      	cmp	r2, r3
3400d908:	d00b      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d90a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d90e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d912:	4b32      	ldr	r3, [pc, #200]	@ (3400d9dc <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
3400d914:	429a      	cmp	r2, r3
3400d916:	d004      	beq.n	3400d922 <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d918:	f240 5185 	movw	r1, #1413	@ 0x585
3400d91c:	4826      	ldr	r0, [pc, #152]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d91e:	f7f4 f9bd 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400d922:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d926:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d92a:	4b27      	ldr	r3, [pc, #156]	@ (3400d9c8 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d92c:	429a      	cmp	r2, r3
3400d92e:	d157      	bne.n	3400d9e0 <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d936:	2b00      	cmp	r3, #0
3400d938:	d016      	beq.n	3400d968 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d93a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d944:	d010      	beq.n	3400d968 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d946:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d94c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d950:	d00a      	beq.n	3400d968 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d952:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d95c:	d004      	beq.n	3400d968 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d95e:	f240 518a 	movw	r1, #1418	@ 0x58a
3400d962:	4815      	ldr	r0, [pc, #84]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d964:	f7f4 f99a 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d968:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d96e:	2b00      	cmp	r3, #0
3400d970:	d005      	beq.n	3400d97e <HAL_RCCEx_PeriphCLKConfig+0x3f92>
3400d972:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d97c:	d904      	bls.n	3400d988 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3400d97e:	f240 518b 	movw	r1, #1419	@ 0x58b
3400d982:	480d      	ldr	r0, [pc, #52]	@ (3400d9b8 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d984:	f7f4 f98a 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d988:	4b0c      	ldr	r3, [pc, #48]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d98a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d98e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d992:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d996:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d99a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d9a2:	3b01      	subs	r3, #1
3400d9a4:	041b      	lsls	r3, r3, #16
3400d9a6:	4313      	orrs	r3, r2
3400d9a8:	4a04      	ldr	r2, [pc, #16]	@ (3400d9bc <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d9aa:	430b      	orrs	r3, r1
3400d9ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d9b0:	f7fb fcba 	bl	34009328 <LL_RCC_IC7_Enable>
3400d9b4:	e067      	b.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x409a>
3400d9b6:	bf00      	nop
3400d9b8:	3401e800 	.word	0x3401e800
3400d9bc:	56028000 	.word	0x56028000
3400d9c0:	07001418 	.word	0x07001418
3400d9c4:	07011418 	.word	0x07011418
3400d9c8:	07021418 	.word	0x07021418
3400d9cc:	07031418 	.word	0x07031418
3400d9d0:	07041418 	.word	0x07041418
3400d9d4:	07051418 	.word	0x07051418
3400d9d8:	07061418 	.word	0x07061418
3400d9dc:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3400d9e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9e4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d9e8:	4b9c      	ldr	r3, [pc, #624]	@ (3400dc5c <HAL_RCCEx_PeriphCLKConfig+0x4270>)
3400d9ea:	429a      	cmp	r2, r3
3400d9ec:	d142      	bne.n	3400da74 <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d9ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9f4:	2b00      	cmp	r3, #0
3400d9f6:	d016      	beq.n	3400da26 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d9f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d9fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400da02:	d010      	beq.n	3400da26 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400da0e:	d00a      	beq.n	3400da26 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400da1a:	d004      	beq.n	3400da26 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400da1c:	f240 5197 	movw	r1, #1431	@ 0x597
3400da20:	488f      	ldr	r0, [pc, #572]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400da22:	f7f4 f93b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400da26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da2c:	2b00      	cmp	r3, #0
3400da2e:	d005      	beq.n	3400da3c <HAL_RCCEx_PeriphCLKConfig+0x4050>
3400da30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400da3a:	d904      	bls.n	3400da46 <HAL_RCCEx_PeriphCLKConfig+0x405a>
3400da3c:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
3400da40:	4887      	ldr	r0, [pc, #540]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400da42:	f7f4 f92b 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400da46:	4b87      	ldr	r3, [pc, #540]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400da4c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400da50:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400da54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400da5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da60:	3b01      	subs	r3, #1
3400da62:	041b      	lsls	r3, r3, #16
3400da64:	4313      	orrs	r3, r2
3400da66:	4a7f      	ldr	r2, [pc, #508]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400da68:	430b      	orrs	r3, r1
3400da6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400da6e:	f7fb fc9b 	bl	340093a8 <LL_RCC_IC8_Enable>
3400da72:	e008      	b.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3400da74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da78:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400da7c:	4b7a      	ldr	r3, [pc, #488]	@ (3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3400da7e:	429a      	cmp	r2, r3
3400da80:	d101      	bne.n	3400da86 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
3400da82:	f7fb ff91 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3400da86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da8a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3400da8e:	4618      	mov	r0, r3
3400da90:	f7fa fef6 	bl	34008880 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400da94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da98:	e9d3 2300 	ldrd	r2, r3, [r3]
3400da9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400daa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3400daa4:	2300      	movs	r3, #0
3400daa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3400daaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3400daae:	4603      	mov	r3, r0
3400dab0:	460a      	mov	r2, r1
3400dab2:	4313      	orrs	r3, r2
3400dab4:	f000 80fa 	beq.w	3400dcac <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400dab8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dabc:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dac0:	4b6a      	ldr	r3, [pc, #424]	@ (3400dc6c <HAL_RCCEx_PeriphCLKConfig+0x4280>)
3400dac2:	429a      	cmp	r2, r3
3400dac4:	d035      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dac6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daca:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dace:	4b68      	ldr	r3, [pc, #416]	@ (3400dc70 <HAL_RCCEx_PeriphCLKConfig+0x4284>)
3400dad0:	429a      	cmp	r2, r3
3400dad2:	d02e      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dad8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dadc:	4b65      	ldr	r3, [pc, #404]	@ (3400dc74 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400dade:	429a      	cmp	r2, r3
3400dae0:	d027      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dae6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400daea:	4b63      	ldr	r3, [pc, #396]	@ (3400dc78 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400daec:	429a      	cmp	r2, r3
3400daee:	d020      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400daf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daf4:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400daf8:	4b60      	ldr	r3, [pc, #384]	@ (3400dc7c <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3400dafa:	429a      	cmp	r2, r3
3400dafc:	d019      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400dafe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db02:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db06:	4b5e      	ldr	r3, [pc, #376]	@ (3400dc80 <HAL_RCCEx_PeriphCLKConfig+0x4294>)
3400db08:	429a      	cmp	r2, r3
3400db0a:	d012      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db10:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db14:	4b5b      	ldr	r3, [pc, #364]	@ (3400dc84 <HAL_RCCEx_PeriphCLKConfig+0x4298>)
3400db16:	429a      	cmp	r2, r3
3400db18:	d00b      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db1e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db22:	4b59      	ldr	r3, [pc, #356]	@ (3400dc88 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
3400db24:	429a      	cmp	r2, r3
3400db26:	d004      	beq.n	3400db32 <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400db28:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400db2c:	484c      	ldr	r0, [pc, #304]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db2e:	f7f4 f8b5 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400db32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db36:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400db3a:	4b4e      	ldr	r3, [pc, #312]	@ (3400dc74 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400db3c:	429a      	cmp	r2, r3
3400db3e:	d142      	bne.n	3400dbc6 <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400db40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db46:	2b00      	cmp	r3, #0
3400db48:	d016      	beq.n	3400db78 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400db54:	d010      	beq.n	3400db78 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400db60:	d00a      	beq.n	3400db78 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400db68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400db6c:	d004      	beq.n	3400db78 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400db6e:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400db72:	483b      	ldr	r0, [pc, #236]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db74:	f7f4 f892 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400db78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db7e:	2b00      	cmp	r3, #0
3400db80:	d005      	beq.n	3400db8e <HAL_RCCEx_PeriphCLKConfig+0x41a2>
3400db82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400db88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400db8c:	d904      	bls.n	3400db98 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3400db8e:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400db92:	4833      	ldr	r0, [pc, #204]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400db94:	f7f4 f882 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400db98:	4b32      	ldr	r3, [pc, #200]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400db9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400db9e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dba2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dba6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400dbac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dbb2:	3b01      	subs	r3, #1
3400dbb4:	041b      	lsls	r3, r3, #16
3400dbb6:	4313      	orrs	r3, r2
3400dbb8:	4a2a      	ldr	r2, [pc, #168]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dbba:	430b      	orrs	r3, r1
3400dbbc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400dbc0:	f7fb fbb2 	bl	34009328 <LL_RCC_IC7_Enable>
3400dbc4:	e06b      	b.n	3400dc9e <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3400dbc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbca:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dbce:	4b2a      	ldr	r3, [pc, #168]	@ (3400dc78 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400dbd0:	429a      	cmp	r2, r3
3400dbd2:	d15b      	bne.n	3400dc8c <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dbd4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbda:	2b00      	cmp	r3, #0
3400dbdc:	d016      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dbe8:	d010      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dbf4:	d00a      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dbf6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dbfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dc00:	d004      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400dc02:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400dc06:	4816      	ldr	r0, [pc, #88]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400dc08:	f7f4 f848 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dc0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc12:	2b00      	cmp	r3, #0
3400dc14:	d005      	beq.n	3400dc22 <HAL_RCCEx_PeriphCLKConfig+0x4236>
3400dc16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dc20:	d904      	bls.n	3400dc2c <HAL_RCCEx_PeriphCLKConfig+0x4240>
3400dc22:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400dc26:	480e      	ldr	r0, [pc, #56]	@ (3400dc60 <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400dc28:	f7f4 f838 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dc2c:	4b0d      	ldr	r3, [pc, #52]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dc2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dc32:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dc36:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dc3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dc40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc46:	3b01      	subs	r3, #1
3400dc48:	041b      	lsls	r3, r3, #16
3400dc4a:	4313      	orrs	r3, r2
3400dc4c:	4a05      	ldr	r2, [pc, #20]	@ (3400dc64 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400dc4e:	430b      	orrs	r3, r1
3400dc50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dc54:	f7fb fba8 	bl	340093a8 <LL_RCC_IC8_Enable>
3400dc58:	e021      	b.n	3400dc9e <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3400dc5a:	bf00      	nop
3400dc5c:	07031418 	.word	0x07031418
3400dc60:	3401e800 	.word	0x3401e800
3400dc64:	56028000 	.word	0x56028000
3400dc68:	07011418 	.word	0x07011418
3400dc6c:	07001818 	.word	0x07001818
3400dc70:	07011818 	.word	0x07011818
3400dc74:	07021818 	.word	0x07021818
3400dc78:	07031818 	.word	0x07031818
3400dc7c:	07041818 	.word	0x07041818
3400dc80:	07051818 	.word	0x07051818
3400dc84:	07061818 	.word	0x07061818
3400dc88:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3400dc8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc90:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400dc94:	4b6f      	ldr	r3, [pc, #444]	@ (3400de54 <HAL_RCCEx_PeriphCLKConfig+0x4468>)
3400dc96:	429a      	cmp	r2, r3
3400dc98:	d101      	bne.n	3400dc9e <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
3400dc9a:	f7fb fe85 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3400dc9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dca2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3400dca6:	4618      	mov	r0, r3
3400dca8:	f7fa fdea 	bl	34008880 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3400dcac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400dcb4:	2100      	movs	r1, #0
3400dcb6:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3400dcba:	f003 0301 	and.w	r3, r3, #1
3400dcbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3400dcc2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3400dcc6:	4603      	mov	r3, r0
3400dcc8:	460a      	mov	r2, r1
3400dcca:	4313      	orrs	r3, r2
3400dccc:	f000 80d7 	beq.w	3400de7e <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3400dcd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcd4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dcd8:	2b00      	cmp	r3, #0
3400dcda:	d028      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dcdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dce0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dce4:	2b01      	cmp	r3, #1
3400dce6:	d022      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dce8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcec:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dcf0:	2b02      	cmp	r3, #2
3400dcf2:	d01c      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dcf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcf8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dcfc:	2b03      	cmp	r3, #3
3400dcfe:	d016      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd04:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd08:	2b04      	cmp	r3, #4
3400dd0a:	d010      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd10:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd14:	2b05      	cmp	r3, #5
3400dd16:	d00a      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd20:	2b06      	cmp	r3, #6
3400dd22:	d004      	beq.n	3400dd2e <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400dd24:	f240 51df 	movw	r1, #1503	@ 0x5df
3400dd28:	484b      	ldr	r0, [pc, #300]	@ (3400de58 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd2a:	f7f3 ffb7 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3400dd2e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd32:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400dd36:	2b02      	cmp	r3, #2
3400dd38:	d142      	bne.n	3400ddc0 <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400dd3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd40:	2b00      	cmp	r3, #0
3400dd42:	d016      	beq.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dd4e:	d010      	beq.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dd5a:	d00a      	beq.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400dd62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dd66:	d004      	beq.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400dd68:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400dd6c:	483a      	ldr	r0, [pc, #232]	@ (3400de58 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd6e:	f7f3 ff95 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400dd72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dd78:	2b00      	cmp	r3, #0
3400dd7a:	d005      	beq.n	3400dd88 <HAL_RCCEx_PeriphCLKConfig+0x439c>
3400dd7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400dd82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dd86:	d904      	bls.n	3400dd92 <HAL_RCCEx_PeriphCLKConfig+0x43a6>
3400dd88:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3400dd8c:	4832      	ldr	r0, [pc, #200]	@ (3400de58 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400dd8e:	f7f3 ff85 	bl	34001c9c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400dd92:	4b32      	ldr	r3, [pc, #200]	@ (3400de5c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400dd94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400dd98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dd9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dda0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dda4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400dda6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400ddac:	3b01      	subs	r3, #1
3400ddae:	041b      	lsls	r3, r3, #16
3400ddb0:	4313      	orrs	r3, r2
3400ddb2:	4a2a      	ldr	r2, [pc, #168]	@ (3400de5c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400ddb4:	430b      	orrs	r3, r1
3400ddb6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400ddba:	f7fb fab5 	bl	34009328 <LL_RCC_IC7_Enable>
3400ddbe:	e057      	b.n	3400de70 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3400ddc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddc4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400ddc8:	2b03      	cmp	r3, #3
3400ddca:	d149      	bne.n	3400de60 <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400ddcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ddd2:	2b00      	cmp	r3, #0
3400ddd4:	d016      	beq.n	3400de04 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dde0:	d010      	beq.n	3400de04 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400dde2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dde6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dde8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ddec:	d00a      	beq.n	3400de04 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400ddf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ddf8:	d004      	beq.n	3400de04 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400ddfa:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3400ddfe:	4816      	ldr	r0, [pc, #88]	@ (3400de58 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400de00:	f7f3 ff4c 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400de04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de0a:	2b00      	cmp	r3, #0
3400de0c:	d005      	beq.n	3400de1a <HAL_RCCEx_PeriphCLKConfig+0x442e>
3400de0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400de18:	d904      	bls.n	3400de24 <HAL_RCCEx_PeriphCLKConfig+0x4438>
3400de1a:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3400de1e:	480e      	ldr	r0, [pc, #56]	@ (3400de58 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400de20:	f7f3 ff3c 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400de24:	4b0d      	ldr	r3, [pc, #52]	@ (3400de5c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400de26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400de2a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400de2e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400de32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400de38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400de3e:	3b01      	subs	r3, #1
3400de40:	041b      	lsls	r3, r3, #16
3400de42:	4313      	orrs	r3, r2
3400de44:	4a05      	ldr	r2, [pc, #20]	@ (3400de5c <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400de46:	430b      	orrs	r3, r1
3400de48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400de4c:	f7fb faac 	bl	340093a8 <LL_RCC_IC8_Enable>
3400de50:	e00e      	b.n	3400de70 <HAL_RCCEx_PeriphCLKConfig+0x4484>
3400de52:	bf00      	nop
3400de54:	07011818 	.word	0x07011818
3400de58:	3401e800 	.word	0x3401e800
3400de5c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3400de60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de64:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400de68:	2b01      	cmp	r3, #1
3400de6a:	d101      	bne.n	3400de70 <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
3400de6c:	f7fb fd9c 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3400de70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de74:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400de78:	4618      	mov	r0, r3
3400de7a:	f7fa fd17 	bl	340088ac <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400de7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de82:	e9d3 2300 	ldrd	r2, r3, [r3]
3400de86:	2100      	movs	r1, #0
3400de88:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3400de8c:	f003 0302 	and.w	r3, r3, #2
3400de90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3400de94:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3400de98:	4603      	mov	r3, r0
3400de9a:	460a      	mov	r2, r1
3400de9c:	4313      	orrs	r3, r2
3400de9e:	f000 80da 	beq.w	3400e056 <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3400dea2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dea6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400deaa:	4bb4      	ldr	r3, [pc, #720]	@ (3400e17c <HAL_RCCEx_PeriphCLKConfig+0x4790>)
3400deac:	429a      	cmp	r2, r3
3400deae:	d02e      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400deb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deb4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400deb8:	4bb1      	ldr	r3, [pc, #708]	@ (3400e180 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400deba:	429a      	cmp	r2, r3
3400debc:	d027      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400debe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dec2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dec6:	4baf      	ldr	r3, [pc, #700]	@ (3400e184 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400dec8:	429a      	cmp	r2, r3
3400deca:	d020      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400decc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ded0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400ded4:	4bac      	ldr	r3, [pc, #688]	@ (3400e188 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400ded6:	429a      	cmp	r2, r3
3400ded8:	d019      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400deda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dede:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dee2:	4baa      	ldr	r3, [pc, #680]	@ (3400e18c <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
3400dee4:	429a      	cmp	r2, r3
3400dee6:	d012      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400dee8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deec:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400def0:	4ba7      	ldr	r3, [pc, #668]	@ (3400e190 <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
3400def2:	429a      	cmp	r2, r3
3400def4:	d00b      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400def6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400defa:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400defe:	4ba5      	ldr	r3, [pc, #660]	@ (3400e194 <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
3400df00:	429a      	cmp	r2, r3
3400df02:	d004      	beq.n	3400df0e <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400df04:	f240 610c 	movw	r1, #1548	@ 0x60c
3400df08:	48a3      	ldr	r0, [pc, #652]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df0a:	f7f3 fec7 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400df0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df12:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400df16:	4b9b      	ldr	r3, [pc, #620]	@ (3400e184 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400df18:	429a      	cmp	r2, r3
3400df1a:	d142      	bne.n	3400dfa2 <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400df1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df22:	2b00      	cmp	r3, #0
3400df24:	d016      	beq.n	3400df54 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400df30:	d010      	beq.n	3400df54 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400df3c:	d00a      	beq.n	3400df54 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400df44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400df48:	d004      	beq.n	3400df54 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400df4a:	f240 6111 	movw	r1, #1553	@ 0x611
3400df4e:	4892      	ldr	r0, [pc, #584]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df50:	f7f3 fea4 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400df54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df5a:	2b00      	cmp	r3, #0
3400df5c:	d005      	beq.n	3400df6a <HAL_RCCEx_PeriphCLKConfig+0x457e>
3400df5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400df68:	d904      	bls.n	3400df74 <HAL_RCCEx_PeriphCLKConfig+0x4588>
3400df6a:	f240 6112 	movw	r1, #1554	@ 0x612
3400df6e:	488a      	ldr	r0, [pc, #552]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400df70:	f7f3 fe94 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400df74:	4b89      	ldr	r3, [pc, #548]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400df7a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400df7e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400df82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400df88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400df8e:	3b01      	subs	r3, #1
3400df90:	041b      	lsls	r3, r3, #16
3400df92:	4313      	orrs	r3, r2
3400df94:	4a81      	ldr	r2, [pc, #516]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400df96:	430b      	orrs	r3, r1
3400df98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400df9c:	f7fb fa04 	bl	340093a8 <LL_RCC_IC8_Enable>
3400dfa0:	e052      	b.n	3400e048 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3400dfa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfa6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400dfaa:	4b77      	ldr	r3, [pc, #476]	@ (3400e188 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400dfac:	429a      	cmp	r2, r3
3400dfae:	d142      	bne.n	3400e036 <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dfb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfb6:	2b00      	cmp	r3, #0
3400dfb8:	d016      	beq.n	3400dfe8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dfc4:	d010      	beq.n	3400dfe8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dfd0:	d00a      	beq.n	3400dfe8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dfd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dfdc:	d004      	beq.n	3400dfe8 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400dfde:	f240 611e 	movw	r1, #1566	@ 0x61e
3400dfe2:	486d      	ldr	r0, [pc, #436]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400dfe4:	f7f3 fe5a 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400dfe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dfee:	2b00      	cmp	r3, #0
3400dff0:	d005      	beq.n	3400dffe <HAL_RCCEx_PeriphCLKConfig+0x4612>
3400dff2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dffc:	d904      	bls.n	3400e008 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3400dffe:	f240 611f 	movw	r1, #1567	@ 0x61f
3400e002:	4865      	ldr	r0, [pc, #404]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e004:	f7f3 fe4a 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e008:	4b64      	ldr	r3, [pc, #400]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e00a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e00e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e012:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e016:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e01a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e01c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e022:	3b01      	subs	r3, #1
3400e024:	041b      	lsls	r3, r3, #16
3400e026:	4313      	orrs	r3, r2
3400e028:	4a5c      	ldr	r2, [pc, #368]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e02a:	430b      	orrs	r3, r1
3400e02c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e030:	f7fb f9fa 	bl	34009428 <LL_RCC_IC9_Enable>
3400e034:	e008      	b.n	3400e048 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3400e036:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e03a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400e03e:	4b50      	ldr	r3, [pc, #320]	@ (3400e180 <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400e040:	429a      	cmp	r2, r3
3400e042:	d101      	bne.n	3400e048 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
3400e044:	f7fb fcb0 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3400e048:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e04c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3400e050:	4618      	mov	r0, r3
3400e052:	f7fa fc41 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3400e056:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e05e:	2100      	movs	r1, #0
3400e060:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3400e064:	f003 0304 	and.w	r3, r3, #4
3400e068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3400e06c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3400e070:	4603      	mov	r3, r0
3400e072:	460a      	mov	r2, r1
3400e074:	4313      	orrs	r3, r2
3400e076:	f000 80fb 	beq.w	3400e270 <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3400e07a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e07e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e082:	4b47      	ldr	r3, [pc, #284]	@ (3400e1a0 <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
3400e084:	429a      	cmp	r2, r3
3400e086:	d02e      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e088:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e08c:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e090:	4b44      	ldr	r3, [pc, #272]	@ (3400e1a4 <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
3400e092:	429a      	cmp	r2, r3
3400e094:	d027      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e096:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e09a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e09e:	4b42      	ldr	r3, [pc, #264]	@ (3400e1a8 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400e0a0:	429a      	cmp	r2, r3
3400e0a2:	d020      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0a8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0ac:	4b3f      	ldr	r3, [pc, #252]	@ (3400e1ac <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
3400e0ae:	429a      	cmp	r2, r3
3400e0b0:	d019      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0b6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0ba:	4b3d      	ldr	r3, [pc, #244]	@ (3400e1b0 <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
3400e0bc:	429a      	cmp	r2, r3
3400e0be:	d012      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0c4:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0c8:	4b3a      	ldr	r3, [pc, #232]	@ (3400e1b4 <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
3400e0ca:	429a      	cmp	r2, r3
3400e0cc:	d00b      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0d2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0d6:	4b38      	ldr	r3, [pc, #224]	@ (3400e1b8 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
3400e0d8:	429a      	cmp	r2, r3
3400e0da:	d004      	beq.n	3400e0e6 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400e0dc:	f240 6139 	movw	r1, #1593	@ 0x639
3400e0e0:	482d      	ldr	r0, [pc, #180]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e0e2:	f7f3 fddb 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400e0e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0ea:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e0ee:	4b2e      	ldr	r3, [pc, #184]	@ (3400e1a8 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400e0f0:	429a      	cmp	r2, r3
3400e0f2:	d163      	bne.n	3400e1bc <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e0f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e0fa:	2b00      	cmp	r3, #0
3400e0fc:	d016      	beq.n	3400e12c <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e0fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e108:	d010      	beq.n	3400e12c <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e10a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e114:	d00a      	beq.n	3400e12c <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e116:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e11c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e120:	d004      	beq.n	3400e12c <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400e122:	f240 613e 	movw	r1, #1598	@ 0x63e
3400e126:	481c      	ldr	r0, [pc, #112]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e128:	f7f3 fdb8 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e12c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e132:	2b00      	cmp	r3, #0
3400e134:	d005      	beq.n	3400e142 <HAL_RCCEx_PeriphCLKConfig+0x4756>
3400e136:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e13c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e140:	d904      	bls.n	3400e14c <HAL_RCCEx_PeriphCLKConfig+0x4760>
3400e142:	f240 613f 	movw	r1, #1599	@ 0x63f
3400e146:	4814      	ldr	r0, [pc, #80]	@ (3400e198 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400e148:	f7f3 fda8 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e14c:	4b13      	ldr	r3, [pc, #76]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e152:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e156:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e15a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e15e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e166:	3b01      	subs	r3, #1
3400e168:	041b      	lsls	r3, r3, #16
3400e16a:	4313      	orrs	r3, r2
3400e16c:	4a0b      	ldr	r2, [pc, #44]	@ (3400e19c <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400e16e:	430b      	orrs	r3, r1
3400e170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e174:	f7fb f918 	bl	340093a8 <LL_RCC_IC8_Enable>
3400e178:	e073      	b.n	3400e262 <HAL_RCCEx_PeriphCLKConfig+0x4876>
3400e17a:	bf00      	nop
3400e17c:	07000420 	.word	0x07000420
3400e180:	07010420 	.word	0x07010420
3400e184:	07020420 	.word	0x07020420
3400e188:	07030420 	.word	0x07030420
3400e18c:	07040420 	.word	0x07040420
3400e190:	07050420 	.word	0x07050420
3400e194:	07060420 	.word	0x07060420
3400e198:	3401e800 	.word	0x3401e800
3400e19c:	56028000 	.word	0x56028000
3400e1a0:	07000820 	.word	0x07000820
3400e1a4:	07010820 	.word	0x07010820
3400e1a8:	07020820 	.word	0x07020820
3400e1ac:	07030820 	.word	0x07030820
3400e1b0:	07040820 	.word	0x07040820
3400e1b4:	07050820 	.word	0x07050820
3400e1b8:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3400e1bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1c0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e1c4:	4b98      	ldr	r3, [pc, #608]	@ (3400e428 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
3400e1c6:	429a      	cmp	r2, r3
3400e1c8:	d142      	bne.n	3400e250 <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e1ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1d0:	2b00      	cmp	r3, #0
3400e1d2:	d016      	beq.n	3400e202 <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e1de:	d010      	beq.n	3400e202 <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e1ea:	d00a      	beq.n	3400e202 <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e1f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e1f6:	d004      	beq.n	3400e202 <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400e1f8:	f240 614b 	movw	r1, #1611	@ 0x64b
3400e1fc:	488b      	ldr	r0, [pc, #556]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e1fe:	f7f3 fd4d 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e202:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e208:	2b00      	cmp	r3, #0
3400e20a:	d005      	beq.n	3400e218 <HAL_RCCEx_PeriphCLKConfig+0x482c>
3400e20c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e216:	d904      	bls.n	3400e222 <HAL_RCCEx_PeriphCLKConfig+0x4836>
3400e218:	f240 614c 	movw	r1, #1612	@ 0x64c
3400e21c:	4883      	ldr	r0, [pc, #524]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e21e:	f7f3 fd3d 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e222:	4b83      	ldr	r3, [pc, #524]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e228:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e22c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e236:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e23a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e23c:	3b01      	subs	r3, #1
3400e23e:	041b      	lsls	r3, r3, #16
3400e240:	4313      	orrs	r3, r2
3400e242:	4a7b      	ldr	r2, [pc, #492]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e244:	430b      	orrs	r3, r1
3400e246:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e24a:	f7fb f8ed 	bl	34009428 <LL_RCC_IC9_Enable>
3400e24e:	e008      	b.n	3400e262 <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3400e250:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e254:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400e258:	4b76      	ldr	r3, [pc, #472]	@ (3400e434 <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
3400e25a:	429a      	cmp	r2, r3
3400e25c:	d101      	bne.n	3400e262 <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
3400e25e:	f7fb fba3 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3400e262:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e266:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3400e26a:	4618      	mov	r0, r3
3400e26c:	f7fa fb34 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400e270:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e274:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e278:	2100      	movs	r1, #0
3400e27a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3400e27e:	f003 0308 	and.w	r3, r3, #8
3400e282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3400e286:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3400e28a:	4603      	mov	r3, r0
3400e28c:	460a      	mov	r2, r1
3400e28e:	4313      	orrs	r3, r2
3400e290:	f000 80f0 	beq.w	3400e474 <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400e294:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e298:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e29c:	4b66      	ldr	r3, [pc, #408]	@ (3400e438 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
3400e29e:	429a      	cmp	r2, r3
3400e2a0:	d02e      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2a6:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2aa:	4b64      	ldr	r3, [pc, #400]	@ (3400e43c <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
3400e2ac:	429a      	cmp	r2, r3
3400e2ae:	d027      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2b4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2b8:	4b61      	ldr	r3, [pc, #388]	@ (3400e440 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e2ba:	429a      	cmp	r2, r3
3400e2bc:	d020      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2c2:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2c6:	4b5f      	ldr	r3, [pc, #380]	@ (3400e444 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e2c8:	429a      	cmp	r2, r3
3400e2ca:	d019      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2d0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2d4:	4b5c      	ldr	r3, [pc, #368]	@ (3400e448 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
3400e2d6:	429a      	cmp	r2, r3
3400e2d8:	d012      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2de:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2e2:	4b5a      	ldr	r3, [pc, #360]	@ (3400e44c <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
3400e2e4:	429a      	cmp	r2, r3
3400e2e6:	d00b      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ec:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e2f0:	4b57      	ldr	r3, [pc, #348]	@ (3400e450 <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
3400e2f2:	429a      	cmp	r2, r3
3400e2f4:	d004      	beq.n	3400e300 <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400e2f6:	f240 6166 	movw	r1, #1638	@ 0x666
3400e2fa:	484c      	ldr	r0, [pc, #304]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e2fc:	f7f3 fcce 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400e300:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e304:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e308:	4b4d      	ldr	r3, [pc, #308]	@ (3400e440 <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400e30a:	429a      	cmp	r2, r3
3400e30c:	d142      	bne.n	3400e394 <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e30e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e314:	2b00      	cmp	r3, #0
3400e316:	d016      	beq.n	3400e346 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e318:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e31e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e322:	d010      	beq.n	3400e346 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e324:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e32a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e32e:	d00a      	beq.n	3400e346 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e33a:	d004      	beq.n	3400e346 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400e33c:	f240 616b 	movw	r1, #1643	@ 0x66b
3400e340:	483a      	ldr	r0, [pc, #232]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e342:	f7f3 fcab 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e346:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e34c:	2b00      	cmp	r3, #0
3400e34e:	d005      	beq.n	3400e35c <HAL_RCCEx_PeriphCLKConfig+0x4970>
3400e350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e35a:	d904      	bls.n	3400e366 <HAL_RCCEx_PeriphCLKConfig+0x497a>
3400e35c:	f240 616c 	movw	r1, #1644	@ 0x66c
3400e360:	4832      	ldr	r0, [pc, #200]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e362:	f7f3 fc9b 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e366:	4b32      	ldr	r3, [pc, #200]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e36c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e370:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e374:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e37a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e380:	3b01      	subs	r3, #1
3400e382:	041b      	lsls	r3, r3, #16
3400e384:	4313      	orrs	r3, r2
3400e386:	4a2a      	ldr	r2, [pc, #168]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e388:	430b      	orrs	r3, r1
3400e38a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e38e:	f7fb f80b 	bl	340093a8 <LL_RCC_IC8_Enable>
3400e392:	e068      	b.n	3400e466 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3400e394:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e398:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e39c:	4b29      	ldr	r3, [pc, #164]	@ (3400e444 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400e39e:	429a      	cmp	r2, r3
3400e3a0:	d158      	bne.n	3400e454 <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e3a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3a8:	2b00      	cmp	r3, #0
3400e3aa:	d016      	beq.n	3400e3da <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e3b6:	d010      	beq.n	3400e3da <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e3c2:	d00a      	beq.n	3400e3da <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e3ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e3ce:	d004      	beq.n	3400e3da <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400e3d0:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3400e3d4:	4815      	ldr	r0, [pc, #84]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e3d6:	f7f3 fc61 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e3da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e3e0:	2b00      	cmp	r3, #0
3400e3e2:	d005      	beq.n	3400e3f0 <HAL_RCCEx_PeriphCLKConfig+0x4a04>
3400e3e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e3ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e3ee:	d904      	bls.n	3400e3fa <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
3400e3f0:	f240 6179 	movw	r1, #1657	@ 0x679
3400e3f4:	480d      	ldr	r0, [pc, #52]	@ (3400e42c <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400e3f6:	f7f3 fc51 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e3fa:	4b0d      	ldr	r3, [pc, #52]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e3fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e400:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e404:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e408:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e40c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e40e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e414:	3b01      	subs	r3, #1
3400e416:	041b      	lsls	r3, r3, #16
3400e418:	4313      	orrs	r3, r2
3400e41a:	4a05      	ldr	r2, [pc, #20]	@ (3400e430 <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400e41c:	430b      	orrs	r3, r1
3400e41e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e422:	f7fb f801 	bl	34009428 <LL_RCC_IC9_Enable>
3400e426:	e01e      	b.n	3400e466 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
3400e428:	07030820 	.word	0x07030820
3400e42c:	3401e800 	.word	0x3401e800
3400e430:	56028000 	.word	0x56028000
3400e434:	07010820 	.word	0x07010820
3400e438:	07000c20 	.word	0x07000c20
3400e43c:	07010c20 	.word	0x07010c20
3400e440:	07020c20 	.word	0x07020c20
3400e444:	07030c20 	.word	0x07030c20
3400e448:	07040c20 	.word	0x07040c20
3400e44c:	07050c20 	.word	0x07050c20
3400e450:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3400e454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e458:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400e45c:	4b73      	ldr	r3, [pc, #460]	@ (3400e62c <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
3400e45e:	429a      	cmp	r2, r3
3400e460:	d101      	bne.n	3400e466 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
3400e462:	f7fb faa1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3400e466:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e46a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3400e46e:	4618      	mov	r0, r3
3400e470:	f7fa fa32 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400e474:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e478:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e47c:	2100      	movs	r1, #0
3400e47e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3400e482:	f003 0310 	and.w	r3, r3, #16
3400e486:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3400e48a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3400e48e:	4603      	mov	r3, r0
3400e490:	460a      	mov	r2, r1
3400e492:	4313      	orrs	r3, r2
3400e494:	f000 80ee 	beq.w	3400e674 <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400e498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e49c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4a0:	4b63      	ldr	r3, [pc, #396]	@ (3400e630 <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
3400e4a2:	429a      	cmp	r2, r3
3400e4a4:	d02e      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4aa:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4ae:	4b61      	ldr	r3, [pc, #388]	@ (3400e634 <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
3400e4b0:	429a      	cmp	r2, r3
3400e4b2:	d027      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4bc:	4b5e      	ldr	r3, [pc, #376]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e4be:	429a      	cmp	r2, r3
3400e4c0:	d020      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4ca:	4b5c      	ldr	r3, [pc, #368]	@ (3400e63c <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e4cc:	429a      	cmp	r2, r3
3400e4ce:	d019      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4d8:	4b59      	ldr	r3, [pc, #356]	@ (3400e640 <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
3400e4da:	429a      	cmp	r2, r3
3400e4dc:	d012      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4e6:	4b57      	ldr	r3, [pc, #348]	@ (3400e644 <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
3400e4e8:	429a      	cmp	r2, r3
3400e4ea:	d00b      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e4f4:	4b54      	ldr	r3, [pc, #336]	@ (3400e648 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
3400e4f6:	429a      	cmp	r2, r3
3400e4f8:	d004      	beq.n	3400e504 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400e4fa:	f240 6193 	movw	r1, #1683	@ 0x693
3400e4fe:	4853      	ldr	r0, [pc, #332]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e500:	f7f3 fbcc 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400e504:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e508:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e50c:	4b4a      	ldr	r3, [pc, #296]	@ (3400e638 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400e50e:	429a      	cmp	r2, r3
3400e510:	d142      	bne.n	3400e598 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e512:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e518:	2b00      	cmp	r3, #0
3400e51a:	d016      	beq.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e51c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e526:	d010      	beq.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e528:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e52c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e52e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e532:	d00a      	beq.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e534:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e53a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e53e:	d004      	beq.n	3400e54a <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400e540:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400e544:	4841      	ldr	r0, [pc, #260]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e546:	f7f3 fba9 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e54e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e550:	2b00      	cmp	r3, #0
3400e552:	d005      	beq.n	3400e560 <HAL_RCCEx_PeriphCLKConfig+0x4b74>
3400e554:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e55e:	d904      	bls.n	3400e56a <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
3400e560:	f240 6199 	movw	r1, #1689	@ 0x699
3400e564:	4839      	ldr	r0, [pc, #228]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e566:	f7f3 fb99 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e56a:	4b39      	ldr	r3, [pc, #228]	@ (3400e650 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e56c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e570:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e574:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e578:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e57c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e57e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e584:	3b01      	subs	r3, #1
3400e586:	041b      	lsls	r3, r3, #16
3400e588:	4313      	orrs	r3, r2
3400e58a:	4a31      	ldr	r2, [pc, #196]	@ (3400e650 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e58c:	430b      	orrs	r3, r1
3400e58e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e592:	f7fa ff49 	bl	34009428 <LL_RCC_IC9_Enable>
3400e596:	e066      	b.n	3400e666 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3400e598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e59c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e5a0:	4b26      	ldr	r3, [pc, #152]	@ (3400e63c <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400e5a2:	429a      	cmp	r2, r3
3400e5a4:	d156      	bne.n	3400e654 <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5ac:	2b00      	cmp	r3, #0
3400e5ae:	d016      	beq.n	3400e5de <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e5ba:	d010      	beq.n	3400e5de <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e5c6:	d00a      	beq.n	3400e5de <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e5ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e5d2:	d004      	beq.n	3400e5de <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400e5d4:	f240 61a5 	movw	r1, #1701	@ 0x6a5
3400e5d8:	481c      	ldr	r0, [pc, #112]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e5da:	f7f3 fb5f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e5de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5e4:	2b00      	cmp	r3, #0
3400e5e6:	d005      	beq.n	3400e5f4 <HAL_RCCEx_PeriphCLKConfig+0x4c08>
3400e5e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e5ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e5f2:	d904      	bls.n	3400e5fe <HAL_RCCEx_PeriphCLKConfig+0x4c12>
3400e5f4:	f240 61a6 	movw	r1, #1702	@ 0x6a6
3400e5f8:	4814      	ldr	r0, [pc, #80]	@ (3400e64c <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400e5fa:	f7f3 fb4f 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e5fe:	4b14      	ldr	r3, [pc, #80]	@ (3400e650 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e600:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e604:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e608:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e60c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e610:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e612:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e618:	3b01      	subs	r3, #1
3400e61a:	041b      	lsls	r3, r3, #16
3400e61c:	4313      	orrs	r3, r2
3400e61e:	4a0c      	ldr	r2, [pc, #48]	@ (3400e650 <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400e620:	430b      	orrs	r3, r1
3400e622:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e626:	f7fa ffff 	bl	34009628 <LL_RCC_IC14_Enable>
3400e62a:	e01c      	b.n	3400e666 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
3400e62c:	07010c20 	.word	0x07010c20
3400e630:	07001020 	.word	0x07001020
3400e634:	07011020 	.word	0x07011020
3400e638:	07021020 	.word	0x07021020
3400e63c:	07031020 	.word	0x07031020
3400e640:	07041020 	.word	0x07041020
3400e644:	07051020 	.word	0x07051020
3400e648:	07061020 	.word	0x07061020
3400e64c:	3401e800 	.word	0x3401e800
3400e650:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3400e654:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e658:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400e65c:	4b73      	ldr	r3, [pc, #460]	@ (3400e82c <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
3400e65e:	429a      	cmp	r2, r3
3400e660:	d101      	bne.n	3400e666 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
3400e662:	f7fb f9a1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3400e666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e66a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3400e66e:	4618      	mov	r0, r3
3400e670:	f7fa f932 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400e674:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e678:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e67c:	2100      	movs	r1, #0
3400e67e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3400e682:	f003 0320 	and.w	r3, r3, #32
3400e686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3400e68a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3400e68e:	4603      	mov	r3, r0
3400e690:	460a      	mov	r2, r1
3400e692:	4313      	orrs	r3, r2
3400e694:	f000 80ee 	beq.w	3400e874 <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
3400e698:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e69c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6a0:	4b63      	ldr	r3, [pc, #396]	@ (3400e830 <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
3400e6a2:	429a      	cmp	r2, r3
3400e6a4:	d02e      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6aa:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6ae:	4b61      	ldr	r3, [pc, #388]	@ (3400e834 <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
3400e6b0:	429a      	cmp	r2, r3
3400e6b2:	d027      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6b8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6bc:	4b5e      	ldr	r3, [pc, #376]	@ (3400e838 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e6be:	429a      	cmp	r2, r3
3400e6c0:	d020      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6c6:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6ca:	4b5c      	ldr	r3, [pc, #368]	@ (3400e83c <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e6cc:	429a      	cmp	r2, r3
3400e6ce:	d019      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6d4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6d8:	4b59      	ldr	r3, [pc, #356]	@ (3400e840 <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
3400e6da:	429a      	cmp	r2, r3
3400e6dc:	d012      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6e2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6e6:	4b57      	ldr	r3, [pc, #348]	@ (3400e844 <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
3400e6e8:	429a      	cmp	r2, r3
3400e6ea:	d00b      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6f0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e6f4:	4b54      	ldr	r3, [pc, #336]	@ (3400e848 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
3400e6f6:	429a      	cmp	r2, r3
3400e6f8:	d004      	beq.n	3400e704 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e6fa:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3400e6fe:	4853      	ldr	r0, [pc, #332]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e700:	f7f3 facc 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3400e704:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e708:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e70c:	4b4a      	ldr	r3, [pc, #296]	@ (3400e838 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e70e:	429a      	cmp	r2, r3
3400e710:	d142      	bne.n	3400e798 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e718:	2b00      	cmp	r3, #0
3400e71a:	d016      	beq.n	3400e74a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e71c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e726:	d010      	beq.n	3400e74a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e728:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e72c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e72e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e732:	d00a      	beq.n	3400e74a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e734:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e73a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e73e:	d004      	beq.n	3400e74a <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e740:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3400e744:	4841      	ldr	r0, [pc, #260]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e746:	f7f3 faa9 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e74a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e750:	2b00      	cmp	r3, #0
3400e752:	d005      	beq.n	3400e760 <HAL_RCCEx_PeriphCLKConfig+0x4d74>
3400e754:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e75e:	d904      	bls.n	3400e76a <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
3400e760:	f240 61c6 	movw	r1, #1734	@ 0x6c6
3400e764:	4839      	ldr	r0, [pc, #228]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e766:	f7f3 fa99 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e76a:	4b39      	ldr	r3, [pc, #228]	@ (3400e850 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e76c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e770:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e774:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e778:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e77c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e77e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e784:	3b01      	subs	r3, #1
3400e786:	041b      	lsls	r3, r3, #16
3400e788:	4313      	orrs	r3, r2
3400e78a:	4a31      	ldr	r2, [pc, #196]	@ (3400e850 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e78c:	430b      	orrs	r3, r1
3400e78e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e792:	f7fa fe49 	bl	34009428 <LL_RCC_IC9_Enable>
3400e796:	e066      	b.n	3400e866 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3400e798:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e79c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e7a0:	4b26      	ldr	r3, [pc, #152]	@ (3400e83c <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e7a2:	429a      	cmp	r2, r3
3400e7a4:	d156      	bne.n	3400e854 <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e7a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7ac:	2b00      	cmp	r3, #0
3400e7ae:	d016      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e7ba:	d010      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e7c6:	d00a      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e7ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e7d2:	d004      	beq.n	3400e7de <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e7d4:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3400e7d8:	481c      	ldr	r0, [pc, #112]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e7da:	f7f3 fa5f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e7de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e7e4:	2b00      	cmp	r3, #0
3400e7e6:	d005      	beq.n	3400e7f4 <HAL_RCCEx_PeriphCLKConfig+0x4e08>
3400e7e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e7ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e7f2:	d904      	bls.n	3400e7fe <HAL_RCCEx_PeriphCLKConfig+0x4e12>
3400e7f4:	f240 61d3 	movw	r1, #1747	@ 0x6d3
3400e7f8:	4814      	ldr	r0, [pc, #80]	@ (3400e84c <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e7fa:	f7f3 fa4f 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e7fe:	4b14      	ldr	r3, [pc, #80]	@ (3400e850 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e800:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e804:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e808:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e80c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e810:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e812:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e818:	3b01      	subs	r3, #1
3400e81a:	041b      	lsls	r3, r3, #16
3400e81c:	4313      	orrs	r3, r2
3400e81e:	4a0c      	ldr	r2, [pc, #48]	@ (3400e850 <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e820:	430b      	orrs	r3, r1
3400e822:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e826:	f7fa feff 	bl	34009628 <LL_RCC_IC14_Enable>
3400e82a:	e01c      	b.n	3400e866 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
3400e82c:	07011020 	.word	0x07011020
3400e830:	07001420 	.word	0x07001420
3400e834:	07011420 	.word	0x07011420
3400e838:	07021420 	.word	0x07021420
3400e83c:	07031420 	.word	0x07031420
3400e840:	07041420 	.word	0x07041420
3400e844:	07051420 	.word	0x07051420
3400e848:	07061420 	.word	0x07061420
3400e84c:	3401e800 	.word	0x3401e800
3400e850:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3400e854:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e858:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e85c:	4b72      	ldr	r3, [pc, #456]	@ (3400ea28 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
3400e85e:	429a      	cmp	r2, r3
3400e860:	d101      	bne.n	3400e866 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
3400e862:	f7fb f8a1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3400e866:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e86a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400e86e:	4618      	mov	r0, r3
3400e870:	f7fa f832 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400e874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e878:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e87c:	2100      	movs	r1, #0
3400e87e:	67b9      	str	r1, [r7, #120]	@ 0x78
3400e880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400e884:	67fb      	str	r3, [r7, #124]	@ 0x7c
3400e886:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3400e88a:	4603      	mov	r3, r0
3400e88c:	460a      	mov	r2, r1
3400e88e:	4313      	orrs	r3, r2
3400e890:	f000 80ee 	beq.w	3400ea70 <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400e894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e898:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e89c:	4b63      	ldr	r3, [pc, #396]	@ (3400ea2c <HAL_RCCEx_PeriphCLKConfig+0x5040>)
3400e89e:	429a      	cmp	r2, r3
3400e8a0:	d02e      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8a6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8aa:	4b61      	ldr	r3, [pc, #388]	@ (3400ea30 <HAL_RCCEx_PeriphCLKConfig+0x5044>)
3400e8ac:	429a      	cmp	r2, r3
3400e8ae:	d027      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8b4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8b8:	4b5e      	ldr	r3, [pc, #376]	@ (3400ea34 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e8ba:	429a      	cmp	r2, r3
3400e8bc:	d020      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8c2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8c6:	4b5c      	ldr	r3, [pc, #368]	@ (3400ea38 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e8c8:	429a      	cmp	r2, r3
3400e8ca:	d019      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8d0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8d4:	4b59      	ldr	r3, [pc, #356]	@ (3400ea3c <HAL_RCCEx_PeriphCLKConfig+0x5050>)
3400e8d6:	429a      	cmp	r2, r3
3400e8d8:	d012      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8de:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8e2:	4b57      	ldr	r3, [pc, #348]	@ (3400ea40 <HAL_RCCEx_PeriphCLKConfig+0x5054>)
3400e8e4:	429a      	cmp	r2, r3
3400e8e6:	d00b      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8ec:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e8f0:	4b54      	ldr	r3, [pc, #336]	@ (3400ea44 <HAL_RCCEx_PeriphCLKConfig+0x5058>)
3400e8f2:	429a      	cmp	r2, r3
3400e8f4:	d004      	beq.n	3400e900 <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e8f6:	f240 61ed 	movw	r1, #1773	@ 0x6ed
3400e8fa:	4853      	ldr	r0, [pc, #332]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e8fc:	f7f3 f9ce 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400e900:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e904:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e908:	4b4a      	ldr	r3, [pc, #296]	@ (3400ea34 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e90a:	429a      	cmp	r2, r3
3400e90c:	d142      	bne.n	3400e994 <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e90e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e914:	2b00      	cmp	r3, #0
3400e916:	d016      	beq.n	3400e946 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e918:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e91e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e922:	d010      	beq.n	3400e946 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e924:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e92a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e92e:	d00a      	beq.n	3400e946 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e93a:	d004      	beq.n	3400e946 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e93c:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3400e940:	4841      	ldr	r0, [pc, #260]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e942:	f7f3 f9ab 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e946:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e94c:	2b00      	cmp	r3, #0
3400e94e:	d005      	beq.n	3400e95c <HAL_RCCEx_PeriphCLKConfig+0x4f70>
3400e950:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e95a:	d904      	bls.n	3400e966 <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
3400e95c:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3400e960:	4839      	ldr	r0, [pc, #228]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e962:	f7f3 f99b 	bl	34001c9c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e966:	4b39      	ldr	r3, [pc, #228]	@ (3400ea4c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e96c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e970:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e97a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e97e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e980:	3b01      	subs	r3, #1
3400e982:	041b      	lsls	r3, r3, #16
3400e984:	4313      	orrs	r3, r2
3400e986:	4a31      	ldr	r2, [pc, #196]	@ (3400ea4c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e988:	430b      	orrs	r3, r1
3400e98a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e98e:	f7fa fd0b 	bl	340093a8 <LL_RCC_IC8_Enable>
3400e992:	e066      	b.n	3400ea62 <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3400e994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e998:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e99c:	4b26      	ldr	r3, [pc, #152]	@ (3400ea38 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e99e:	429a      	cmp	r2, r3
3400e9a0:	d156      	bne.n	3400ea50 <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e9a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9a8:	2b00      	cmp	r3, #0
3400e9aa:	d016      	beq.n	3400e9da <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e9b6:	d010      	beq.n	3400e9da <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e9c2:	d00a      	beq.n	3400e9da <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e9ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e9ce:	d004      	beq.n	3400e9da <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e9d0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
3400e9d4:	481c      	ldr	r0, [pc, #112]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e9d6:	f7f3 f961 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e9da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e9e0:	2b00      	cmp	r3, #0
3400e9e2:	d005      	beq.n	3400e9f0 <HAL_RCCEx_PeriphCLKConfig+0x5004>
3400e9e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e9ee:	d904      	bls.n	3400e9fa <HAL_RCCEx_PeriphCLKConfig+0x500e>
3400e9f0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
3400e9f4:	4814      	ldr	r0, [pc, #80]	@ (3400ea48 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e9f6:	f7f3 f951 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e9fa:	4b14      	ldr	r3, [pc, #80]	@ (3400ea4c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e9fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ea00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ea04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ea08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ea0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ea14:	3b01      	subs	r3, #1
3400ea16:	041b      	lsls	r3, r3, #16
3400ea18:	4313      	orrs	r3, r2
3400ea1a:	4a0c      	ldr	r2, [pc, #48]	@ (3400ea4c <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400ea1c:	430b      	orrs	r3, r1
3400ea1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ea22:	f7fa fd01 	bl	34009428 <LL_RCC_IC9_Enable>
3400ea26:	e01c      	b.n	3400ea62 <HAL_RCCEx_PeriphCLKConfig+0x5076>
3400ea28:	07011420 	.word	0x07011420
3400ea2c:	07001820 	.word	0x07001820
3400ea30:	07011820 	.word	0x07011820
3400ea34:	07021820 	.word	0x07021820
3400ea38:	07031820 	.word	0x07031820
3400ea3c:	07041820 	.word	0x07041820
3400ea40:	07051820 	.word	0x07051820
3400ea44:	07061820 	.word	0x07061820
3400ea48:	3401e800 	.word	0x3401e800
3400ea4c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3400ea50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea54:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400ea58:	4b72      	ldr	r3, [pc, #456]	@ (3400ec24 <HAL_RCCEx_PeriphCLKConfig+0x5238>)
3400ea5a:	429a      	cmp	r2, r3
3400ea5c:	d101      	bne.n	3400ea62 <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
3400ea5e:	f7fa ffa3 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3400ea62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea66:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400ea6a:	4618      	mov	r0, r3
3400ea6c:	f7f9 ff34 	bl	340088d8 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3400ea70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ea78:	2100      	movs	r1, #0
3400ea7a:	6739      	str	r1, [r7, #112]	@ 0x70
3400ea7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400ea80:	677b      	str	r3, [r7, #116]	@ 0x74
3400ea82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3400ea86:	4603      	mov	r3, r0
3400ea88:	460a      	mov	r2, r1
3400ea8a:	4313      	orrs	r3, r2
3400ea8c:	f000 80ee 	beq.w	3400ec6c <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
3400ea90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea94:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ea98:	4b63      	ldr	r3, [pc, #396]	@ (3400ec28 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
3400ea9a:	429a      	cmp	r2, r3
3400ea9c:	d02e      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400ea9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaa2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaa6:	4b61      	ldr	r3, [pc, #388]	@ (3400ec2c <HAL_RCCEx_PeriphCLKConfig+0x5240>)
3400eaa8:	429a      	cmp	r2, r3
3400eaaa:	d027      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eaac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eab0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eab4:	4b5e      	ldr	r3, [pc, #376]	@ (3400ec30 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400eab6:	429a      	cmp	r2, r3
3400eab8:	d020      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eaba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eabe:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eac2:	4b5c      	ldr	r3, [pc, #368]	@ (3400ec34 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400eac4:	429a      	cmp	r2, r3
3400eac6:	d019      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eac8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eacc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ead0:	4b59      	ldr	r3, [pc, #356]	@ (3400ec38 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
3400ead2:	429a      	cmp	r2, r3
3400ead4:	d012      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400ead6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eada:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eade:	4b57      	ldr	r3, [pc, #348]	@ (3400ec3c <HAL_RCCEx_PeriphCLKConfig+0x5250>)
3400eae0:	429a      	cmp	r2, r3
3400eae2:	d00b      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eae8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eaec:	4b54      	ldr	r3, [pc, #336]	@ (3400ec40 <HAL_RCCEx_PeriphCLKConfig+0x5254>)
3400eaee:	429a      	cmp	r2, r3
3400eaf0:	d004      	beq.n	3400eafc <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400eaf2:	f240 711a 	movw	r1, #1818	@ 0x71a
3400eaf6:	4853      	ldr	r0, [pc, #332]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eaf8:	f7f3 f8d0 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3400eafc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb00:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eb04:	4b4a      	ldr	r3, [pc, #296]	@ (3400ec30 <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400eb06:	429a      	cmp	r2, r3
3400eb08:	d142      	bne.n	3400eb90 <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400eb0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb10:	2b00      	cmp	r3, #0
3400eb12:	d016      	beq.n	3400eb42 <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eb1e:	d010      	beq.n	3400eb42 <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eb2a:	d00a      	beq.n	3400eb42 <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400eb32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eb36:	d004      	beq.n	3400eb42 <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400eb38:	f240 711f 	movw	r1, #1823	@ 0x71f
3400eb3c:	4841      	ldr	r0, [pc, #260]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eb3e:	f7f3 f8ad 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400eb42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb48:	2b00      	cmp	r3, #0
3400eb4a:	d005      	beq.n	3400eb58 <HAL_RCCEx_PeriphCLKConfig+0x516c>
3400eb4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eb56:	d904      	bls.n	3400eb62 <HAL_RCCEx_PeriphCLKConfig+0x5176>
3400eb58:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3400eb5c:	4839      	ldr	r0, [pc, #228]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400eb5e:	f7f3 f89d 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400eb62:	4b39      	ldr	r3, [pc, #228]	@ (3400ec48 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400eb64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400eb68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eb6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eb70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400eb76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400eb7c:	3b01      	subs	r3, #1
3400eb7e:	041b      	lsls	r3, r3, #16
3400eb80:	4313      	orrs	r3, r2
3400eb82:	4a31      	ldr	r2, [pc, #196]	@ (3400ec48 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400eb84:	430b      	orrs	r3, r1
3400eb86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400eb8a:	f7fa fc4d 	bl	34009428 <LL_RCC_IC9_Enable>
3400eb8e:	e066      	b.n	3400ec5e <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3400eb90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb94:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400eb98:	4b26      	ldr	r3, [pc, #152]	@ (3400ec34 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400eb9a:	429a      	cmp	r2, r3
3400eb9c:	d156      	bne.n	3400ec4c <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400eb9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eba4:	2b00      	cmp	r3, #0
3400eba6:	d016      	beq.n	3400ebd6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400eba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ebb2:	d010      	beq.n	3400ebd6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ebbe:	d00a      	beq.n	3400ebd6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ebc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ebca:	d004      	beq.n	3400ebd6 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400ebcc:	f240 712c 	movw	r1, #1836	@ 0x72c
3400ebd0:	481c      	ldr	r0, [pc, #112]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400ebd2:	f7f3 f863 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ebd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebdc:	2b00      	cmp	r3, #0
3400ebde:	d005      	beq.n	3400ebec <HAL_RCCEx_PeriphCLKConfig+0x5200>
3400ebe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ebe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ebea:	d904      	bls.n	3400ebf6 <HAL_RCCEx_PeriphCLKConfig+0x520a>
3400ebec:	f240 712d 	movw	r1, #1837	@ 0x72d
3400ebf0:	4814      	ldr	r0, [pc, #80]	@ (3400ec44 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400ebf2:	f7f3 f853 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400ebf6:	4b14      	ldr	r3, [pc, #80]	@ (3400ec48 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400ebf8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ebfc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ec00:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ec04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ec0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ec10:	3b01      	subs	r3, #1
3400ec12:	041b      	lsls	r3, r3, #16
3400ec14:	4313      	orrs	r3, r2
3400ec16:	4a0c      	ldr	r2, [pc, #48]	@ (3400ec48 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400ec18:	430b      	orrs	r3, r1
3400ec1a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ec1e:	f7fa fd03 	bl	34009628 <LL_RCC_IC14_Enable>
3400ec22:	e01c      	b.n	3400ec5e <HAL_RCCEx_PeriphCLKConfig+0x5272>
3400ec24:	07011820 	.word	0x07011820
3400ec28:	07000030 	.word	0x07000030
3400ec2c:	07010030 	.word	0x07010030
3400ec30:	07020030 	.word	0x07020030
3400ec34:	07030030 	.word	0x07030030
3400ec38:	07040030 	.word	0x07040030
3400ec3c:	07050030 	.word	0x07050030
3400ec40:	07060030 	.word	0x07060030
3400ec44:	3401e800 	.word	0x3401e800
3400ec48:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3400ec4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec50:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400ec54:	4b72      	ldr	r3, [pc, #456]	@ (3400ee20 <HAL_RCCEx_PeriphCLKConfig+0x5434>)
3400ec56:	429a      	cmp	r2, r3
3400ec58:	d101      	bne.n	3400ec5e <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
3400ec5a:	f7fa fea5 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3400ec5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec62:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400ec66:	4618      	mov	r0, r3
3400ec68:	f7f9 fe41 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3400ec6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ec74:	2100      	movs	r1, #0
3400ec76:	66b9      	str	r1, [r7, #104]	@ 0x68
3400ec78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400ec7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
3400ec7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3400ec82:	4603      	mov	r3, r0
3400ec84:	460a      	mov	r2, r1
3400ec86:	4313      	orrs	r3, r2
3400ec88:	f000 80ee 	beq.w	3400ee68 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3400ec8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec90:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ec94:	4b63      	ldr	r3, [pc, #396]	@ (3400ee24 <HAL_RCCEx_PeriphCLKConfig+0x5438>)
3400ec96:	429a      	cmp	r2, r3
3400ec98:	d02e      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ec9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec9e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eca2:	4b61      	ldr	r3, [pc, #388]	@ (3400ee28 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
3400eca4:	429a      	cmp	r2, r3
3400eca6:	d027      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400eca8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecac:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecb0:	4b5e      	ldr	r3, [pc, #376]	@ (3400ee2c <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400ecb2:	429a      	cmp	r2, r3
3400ecb4:	d020      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecba:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecbe:	4b5c      	ldr	r3, [pc, #368]	@ (3400ee30 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400ecc0:	429a      	cmp	r2, r3
3400ecc2:	d019      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecc8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400eccc:	4b59      	ldr	r3, [pc, #356]	@ (3400ee34 <HAL_RCCEx_PeriphCLKConfig+0x5448>)
3400ecce:	429a      	cmp	r2, r3
3400ecd0:	d012      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecd6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ecda:	4b57      	ldr	r3, [pc, #348]	@ (3400ee38 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
3400ecdc:	429a      	cmp	r2, r3
3400ecde:	d00b      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ece0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ece4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ece8:	4b54      	ldr	r3, [pc, #336]	@ (3400ee3c <HAL_RCCEx_PeriphCLKConfig+0x5450>)
3400ecea:	429a      	cmp	r2, r3
3400ecec:	d004      	beq.n	3400ecf8 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400ecee:	f240 7147 	movw	r1, #1863	@ 0x747
3400ecf2:	4853      	ldr	r0, [pc, #332]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ecf4:	f7f2 ffd2 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3400ecf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecfc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ed00:	4b4a      	ldr	r3, [pc, #296]	@ (3400ee2c <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400ed02:	429a      	cmp	r2, r3
3400ed04:	d142      	bne.n	3400ed8c <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ed06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed0c:	2b00      	cmp	r3, #0
3400ed0e:	d016      	beq.n	3400ed3e <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ed1a:	d010      	beq.n	3400ed3e <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ed26:	d00a      	beq.n	3400ed3e <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ed2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ed32:	d004      	beq.n	3400ed3e <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400ed34:	f240 714c 	movw	r1, #1868	@ 0x74c
3400ed38:	4841      	ldr	r0, [pc, #260]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ed3a:	f7f2 ffaf 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ed3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed44:	2b00      	cmp	r3, #0
3400ed46:	d005      	beq.n	3400ed54 <HAL_RCCEx_PeriphCLKConfig+0x5368>
3400ed48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ed52:	d904      	bls.n	3400ed5e <HAL_RCCEx_PeriphCLKConfig+0x5372>
3400ed54:	f240 714d 	movw	r1, #1869	@ 0x74d
3400ed58:	4839      	ldr	r0, [pc, #228]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400ed5a:	f7f2 ff9f 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ed5e:	4b39      	ldr	r3, [pc, #228]	@ (3400ee44 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ed60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ed64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ed68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ed6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ed72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ed78:	3b01      	subs	r3, #1
3400ed7a:	041b      	lsls	r3, r3, #16
3400ed7c:	4313      	orrs	r3, r2
3400ed7e:	4a31      	ldr	r2, [pc, #196]	@ (3400ee44 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ed80:	430b      	orrs	r3, r1
3400ed82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ed86:	f7fa fb4f 	bl	34009428 <LL_RCC_IC9_Enable>
3400ed8a:	e066      	b.n	3400ee5a <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3400ed8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed90:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ed94:	4b26      	ldr	r3, [pc, #152]	@ (3400ee30 <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400ed96:	429a      	cmp	r2, r3
3400ed98:	d156      	bne.n	3400ee48 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ed9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eda0:	2b00      	cmp	r3, #0
3400eda2:	d016      	beq.n	3400edd2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400eda4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400edae:	d010      	beq.n	3400edd2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400edba:	d00a      	beq.n	3400edd2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400edc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400edc6:	d004      	beq.n	3400edd2 <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400edc8:	f240 7159 	movw	r1, #1881	@ 0x759
3400edcc:	481c      	ldr	r0, [pc, #112]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400edce:	f7f2 ff65 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400edd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400edd8:	2b00      	cmp	r3, #0
3400edda:	d005      	beq.n	3400ede8 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
3400eddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ede0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ede2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ede6:	d904      	bls.n	3400edf2 <HAL_RCCEx_PeriphCLKConfig+0x5406>
3400ede8:	f240 715a 	movw	r1, #1882	@ 0x75a
3400edec:	4814      	ldr	r0, [pc, #80]	@ (3400ee40 <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400edee:	f7f2 ff55 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400edf2:	4b14      	ldr	r3, [pc, #80]	@ (3400ee44 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400edf4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400edf8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400edfc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ee00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ee06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ee0c:	3b01      	subs	r3, #1
3400ee0e:	041b      	lsls	r3, r3, #16
3400ee10:	4313      	orrs	r3, r2
3400ee12:	4a0c      	ldr	r2, [pc, #48]	@ (3400ee44 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400ee14:	430b      	orrs	r3, r1
3400ee16:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ee1a:	f7fa fc05 	bl	34009628 <LL_RCC_IC14_Enable>
3400ee1e:	e01c      	b.n	3400ee5a <HAL_RCCEx_PeriphCLKConfig+0x546e>
3400ee20:	07010030 	.word	0x07010030
3400ee24:	07000430 	.word	0x07000430
3400ee28:	07010430 	.word	0x07010430
3400ee2c:	07020430 	.word	0x07020430
3400ee30:	07030430 	.word	0x07030430
3400ee34:	07040430 	.word	0x07040430
3400ee38:	07050430 	.word	0x07050430
3400ee3c:	07060430 	.word	0x07060430
3400ee40:	3401e800 	.word	0x3401e800
3400ee44:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3400ee48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee4c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400ee50:	4b72      	ldr	r3, [pc, #456]	@ (3400f01c <HAL_RCCEx_PeriphCLKConfig+0x5630>)
3400ee52:	429a      	cmp	r2, r3
3400ee54:	d101      	bne.n	3400ee5a <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
3400ee56:	f7fa fda7 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3400ee5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400ee62:	4618      	mov	r0, r3
3400ee64:	f7f9 fd43 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3400ee68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ee70:	2100      	movs	r1, #0
3400ee72:	6639      	str	r1, [r7, #96]	@ 0x60
3400ee74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400ee78:	667b      	str	r3, [r7, #100]	@ 0x64
3400ee7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3400ee7e:	4603      	mov	r3, r0
3400ee80:	460a      	mov	r2, r1
3400ee82:	4313      	orrs	r3, r2
3400ee84:	f000 80ee 	beq.w	3400f064 <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3400ee88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee8c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ee90:	4b63      	ldr	r3, [pc, #396]	@ (3400f020 <HAL_RCCEx_PeriphCLKConfig+0x5634>)
3400ee92:	429a      	cmp	r2, r3
3400ee94:	d02e      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400ee96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee9a:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ee9e:	4b61      	ldr	r3, [pc, #388]	@ (3400f024 <HAL_RCCEx_PeriphCLKConfig+0x5638>)
3400eea0:	429a      	cmp	r2, r3
3400eea2:	d027      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eea8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eeac:	4b5e      	ldr	r3, [pc, #376]	@ (3400f028 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400eeae:	429a      	cmp	r2, r3
3400eeb0:	d020      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eeb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeb6:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eeba:	4b5c      	ldr	r3, [pc, #368]	@ (3400f02c <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400eebc:	429a      	cmp	r2, r3
3400eebe:	d019      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eec0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eec4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eec8:	4b59      	ldr	r3, [pc, #356]	@ (3400f030 <HAL_RCCEx_PeriphCLKConfig+0x5644>)
3400eeca:	429a      	cmp	r2, r3
3400eecc:	d012      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eed2:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eed6:	4b57      	ldr	r3, [pc, #348]	@ (3400f034 <HAL_RCCEx_PeriphCLKConfig+0x5648>)
3400eed8:	429a      	cmp	r2, r3
3400eeda:	d00b      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eedc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eee0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eee4:	4b54      	ldr	r3, [pc, #336]	@ (3400f038 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
3400eee6:	429a      	cmp	r2, r3
3400eee8:	d004      	beq.n	3400eef4 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400eeea:	f240 7174 	movw	r1, #1908	@ 0x774
3400eeee:	4853      	ldr	r0, [pc, #332]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400eef0:	f7f2 fed4 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3400eef4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eef8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400eefc:	4b4a      	ldr	r3, [pc, #296]	@ (3400f028 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400eefe:	429a      	cmp	r2, r3
3400ef00:	d142      	bne.n	3400ef88 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ef02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef08:	2b00      	cmp	r3, #0
3400ef0a:	d016      	beq.n	3400ef3a <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ef16:	d010      	beq.n	3400ef3a <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ef22:	d00a      	beq.n	3400ef3a <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ef2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ef2e:	d004      	beq.n	3400ef3a <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400ef30:	f240 7179 	movw	r1, #1913	@ 0x779
3400ef34:	4841      	ldr	r0, [pc, #260]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ef36:	f7f2 feb1 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ef3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef40:	2b00      	cmp	r3, #0
3400ef42:	d005      	beq.n	3400ef50 <HAL_RCCEx_PeriphCLKConfig+0x5564>
3400ef44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ef4e:	d904      	bls.n	3400ef5a <HAL_RCCEx_PeriphCLKConfig+0x556e>
3400ef50:	f240 717a 	movw	r1, #1914	@ 0x77a
3400ef54:	4839      	ldr	r0, [pc, #228]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400ef56:	f7f2 fea1 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ef5a:	4b39      	ldr	r3, [pc, #228]	@ (3400f040 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ef5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ef60:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ef64:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ef68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ef6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ef74:	3b01      	subs	r3, #1
3400ef76:	041b      	lsls	r3, r3, #16
3400ef78:	4313      	orrs	r3, r2
3400ef7a:	4a31      	ldr	r2, [pc, #196]	@ (3400f040 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400ef7c:	430b      	orrs	r3, r1
3400ef7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ef82:	f7fa fa51 	bl	34009428 <LL_RCC_IC9_Enable>
3400ef86:	e066      	b.n	3400f056 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3400ef88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef8c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400ef90:	4b26      	ldr	r3, [pc, #152]	@ (3400f02c <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400ef92:	429a      	cmp	r2, r3
3400ef94:	d156      	bne.n	3400f044 <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ef96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ef9c:	2b00      	cmp	r3, #0
3400ef9e:	d016      	beq.n	3400efce <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400efaa:	d010      	beq.n	3400efce <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400efb6:	d00a      	beq.n	3400efce <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400efbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400efc2:	d004      	beq.n	3400efce <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400efc4:	f240 7186 	movw	r1, #1926	@ 0x786
3400efc8:	481c      	ldr	r0, [pc, #112]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400efca:	f7f2 fe67 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400efce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efd4:	2b00      	cmp	r3, #0
3400efd6:	d005      	beq.n	3400efe4 <HAL_RCCEx_PeriphCLKConfig+0x55f8>
3400efd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400efde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400efe2:	d904      	bls.n	3400efee <HAL_RCCEx_PeriphCLKConfig+0x5602>
3400efe4:	f240 7187 	movw	r1, #1927	@ 0x787
3400efe8:	4814      	ldr	r0, [pc, #80]	@ (3400f03c <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400efea:	f7f2 fe57 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400efee:	4b14      	ldr	r3, [pc, #80]	@ (3400f040 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400eff0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400eff4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eff8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400effc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f000:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f008:	3b01      	subs	r3, #1
3400f00a:	041b      	lsls	r3, r3, #16
3400f00c:	4313      	orrs	r3, r2
3400f00e:	4a0c      	ldr	r2, [pc, #48]	@ (3400f040 <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400f010:	430b      	orrs	r3, r1
3400f012:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f016:	f7fa fb07 	bl	34009628 <LL_RCC_IC14_Enable>
3400f01a:	e01c      	b.n	3400f056 <HAL_RCCEx_PeriphCLKConfig+0x566a>
3400f01c:	07010430 	.word	0x07010430
3400f020:	07000830 	.word	0x07000830
3400f024:	07010830 	.word	0x07010830
3400f028:	07020830 	.word	0x07020830
3400f02c:	07030830 	.word	0x07030830
3400f030:	07040830 	.word	0x07040830
3400f034:	07050830 	.word	0x07050830
3400f038:	07060830 	.word	0x07060830
3400f03c:	3401e800 	.word	0x3401e800
3400f040:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3400f044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f048:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400f04c:	4b72      	ldr	r3, [pc, #456]	@ (3400f218 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3400f04e:	429a      	cmp	r2, r3
3400f050:	d101      	bne.n	3400f056 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
3400f052:	f7fa fca9 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3400f056:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f05a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3400f05e:	4618      	mov	r0, r3
3400f060:	f7f9 fc45 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3400f064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f068:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f06c:	2100      	movs	r1, #0
3400f06e:	65b9      	str	r1, [r7, #88]	@ 0x58
3400f070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400f074:	65fb      	str	r3, [r7, #92]	@ 0x5c
3400f076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3400f07a:	4603      	mov	r3, r0
3400f07c:	460a      	mov	r2, r1
3400f07e:	4313      	orrs	r3, r2
3400f080:	f000 80ee 	beq.w	3400f260 <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
3400f084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f088:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f08c:	4b63      	ldr	r3, [pc, #396]	@ (3400f21c <HAL_RCCEx_PeriphCLKConfig+0x5830>)
3400f08e:	429a      	cmp	r2, r3
3400f090:	d02e      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f092:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f096:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f09a:	4b61      	ldr	r3, [pc, #388]	@ (3400f220 <HAL_RCCEx_PeriphCLKConfig+0x5834>)
3400f09c:	429a      	cmp	r2, r3
3400f09e:	d027      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0a4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0a8:	4b5e      	ldr	r3, [pc, #376]	@ (3400f224 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400f0aa:	429a      	cmp	r2, r3
3400f0ac:	d020      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0b2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0b6:	4b5c      	ldr	r3, [pc, #368]	@ (3400f228 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400f0b8:	429a      	cmp	r2, r3
3400f0ba:	d019      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0c0:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0c4:	4b59      	ldr	r3, [pc, #356]	@ (3400f22c <HAL_RCCEx_PeriphCLKConfig+0x5840>)
3400f0c6:	429a      	cmp	r2, r3
3400f0c8:	d012      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ce:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0d2:	4b57      	ldr	r3, [pc, #348]	@ (3400f230 <HAL_RCCEx_PeriphCLKConfig+0x5844>)
3400f0d4:	429a      	cmp	r2, r3
3400f0d6:	d00b      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0dc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0e0:	4b54      	ldr	r3, [pc, #336]	@ (3400f234 <HAL_RCCEx_PeriphCLKConfig+0x5848>)
3400f0e2:	429a      	cmp	r2, r3
3400f0e4:	d004      	beq.n	3400f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400f0e6:	f240 71a1 	movw	r1, #1953	@ 0x7a1
3400f0ea:	4853      	ldr	r0, [pc, #332]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f0ec:	f7f2 fdd6 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3400f0f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0f4:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f0f8:	4b4a      	ldr	r3, [pc, #296]	@ (3400f224 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400f0fa:	429a      	cmp	r2, r3
3400f0fc:	d142      	bne.n	3400f184 <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f0fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f104:	2b00      	cmp	r3, #0
3400f106:	d016      	beq.n	3400f136 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f112:	d010      	beq.n	3400f136 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f114:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f11e:	d00a      	beq.n	3400f136 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f126:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f12a:	d004      	beq.n	3400f136 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400f12c:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3400f130:	4841      	ldr	r0, [pc, #260]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f132:	f7f2 fdb3 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f136:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f13a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f13c:	2b00      	cmp	r3, #0
3400f13e:	d005      	beq.n	3400f14c <HAL_RCCEx_PeriphCLKConfig+0x5760>
3400f140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f14a:	d904      	bls.n	3400f156 <HAL_RCCEx_PeriphCLKConfig+0x576a>
3400f14c:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3400f150:	4839      	ldr	r0, [pc, #228]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f152:	f7f2 fda3 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f156:	4b39      	ldr	r3, [pc, #228]	@ (3400f23c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f15c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f160:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f164:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f16a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f16e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f170:	3b01      	subs	r3, #1
3400f172:	041b      	lsls	r3, r3, #16
3400f174:	4313      	orrs	r3, r2
3400f176:	4a31      	ldr	r2, [pc, #196]	@ (3400f23c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f178:	430b      	orrs	r3, r1
3400f17a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f17e:	f7fa f953 	bl	34009428 <LL_RCC_IC9_Enable>
3400f182:	e066      	b.n	3400f252 <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3400f184:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f188:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f18c:	4b26      	ldr	r3, [pc, #152]	@ (3400f228 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400f18e:	429a      	cmp	r2, r3
3400f190:	d156      	bne.n	3400f240 <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f192:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f198:	2b00      	cmp	r3, #0
3400f19a:	d016      	beq.n	3400f1ca <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f19c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f1a6:	d010      	beq.n	3400f1ca <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f1b2:	d00a      	beq.n	3400f1ca <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f1ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f1be:	d004      	beq.n	3400f1ca <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400f1c0:	f240 71b3 	movw	r1, #1971	@ 0x7b3
3400f1c4:	481c      	ldr	r0, [pc, #112]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f1c6:	f7f2 fd69 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f1ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1d0:	2b00      	cmp	r3, #0
3400f1d2:	d005      	beq.n	3400f1e0 <HAL_RCCEx_PeriphCLKConfig+0x57f4>
3400f1d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f1de:	d904      	bls.n	3400f1ea <HAL_RCCEx_PeriphCLKConfig+0x57fe>
3400f1e0:	f240 71b4 	movw	r1, #1972	@ 0x7b4
3400f1e4:	4814      	ldr	r0, [pc, #80]	@ (3400f238 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400f1e6:	f7f2 fd59 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f1ea:	4b14      	ldr	r3, [pc, #80]	@ (3400f23c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f1ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f1f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f1f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f1f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f1fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f204:	3b01      	subs	r3, #1
3400f206:	041b      	lsls	r3, r3, #16
3400f208:	4313      	orrs	r3, r2
3400f20a:	4a0c      	ldr	r2, [pc, #48]	@ (3400f23c <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400f20c:	430b      	orrs	r3, r1
3400f20e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f212:	f7fa fa09 	bl	34009628 <LL_RCC_IC14_Enable>
3400f216:	e01c      	b.n	3400f252 <HAL_RCCEx_PeriphCLKConfig+0x5866>
3400f218:	07010830 	.word	0x07010830
3400f21c:	07000c30 	.word	0x07000c30
3400f220:	07010c30 	.word	0x07010c30
3400f224:	07020c30 	.word	0x07020c30
3400f228:	07030c30 	.word	0x07030c30
3400f22c:	07040c30 	.word	0x07040c30
3400f230:	07050c30 	.word	0x07050c30
3400f234:	07060c30 	.word	0x07060c30
3400f238:	3401e800 	.word	0x3401e800
3400f23c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400f240:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f244:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400f248:	4b72      	ldr	r3, [pc, #456]	@ (3400f414 <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
3400f24a:	429a      	cmp	r2, r3
3400f24c:	d101      	bne.n	3400f252 <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
3400f24e:	f7fa fbab 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3400f252:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f256:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400f25a:	4618      	mov	r0, r3
3400f25c:	f7f9 fb47 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3400f260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f264:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f268:	2100      	movs	r1, #0
3400f26a:	6539      	str	r1, [r7, #80]	@ 0x50
3400f26c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400f270:	657b      	str	r3, [r7, #84]	@ 0x54
3400f272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3400f276:	4603      	mov	r3, r0
3400f278:	460a      	mov	r2, r1
3400f27a:	4313      	orrs	r3, r2
3400f27c:	f000 80ee 	beq.w	3400f45c <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3400f280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f284:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f288:	4b63      	ldr	r3, [pc, #396]	@ (3400f418 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
3400f28a:	429a      	cmp	r2, r3
3400f28c:	d02e      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f292:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f296:	4b61      	ldr	r3, [pc, #388]	@ (3400f41c <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
3400f298:	429a      	cmp	r2, r3
3400f29a:	d027      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f29c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2a0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400f420 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f2a6:	429a      	cmp	r2, r3
3400f2a8:	d020      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2ae:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400f424 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f2b4:	429a      	cmp	r2, r3
3400f2b6:	d019      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2bc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2c0:	4b59      	ldr	r3, [pc, #356]	@ (3400f428 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
3400f2c2:	429a      	cmp	r2, r3
3400f2c4:	d012      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2ca:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2ce:	4b57      	ldr	r3, [pc, #348]	@ (3400f42c <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
3400f2d0:	429a      	cmp	r2, r3
3400f2d2:	d00b      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2d8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2dc:	4b54      	ldr	r3, [pc, #336]	@ (3400f430 <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
3400f2de:	429a      	cmp	r2, r3
3400f2e0:	d004      	beq.n	3400f2ec <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400f2e2:	f240 71ce 	movw	r1, #1998	@ 0x7ce
3400f2e6:	4853      	ldr	r0, [pc, #332]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f2e8:	f7f2 fcd8 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3400f2ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2f0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f2f4:	4b4a      	ldr	r3, [pc, #296]	@ (3400f420 <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400f2f6:	429a      	cmp	r2, r3
3400f2f8:	d142      	bne.n	3400f380 <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f300:	2b00      	cmp	r3, #0
3400f302:	d016      	beq.n	3400f332 <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f30e:	d010      	beq.n	3400f332 <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f31a:	d00a      	beq.n	3400f332 <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f31c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f326:	d004      	beq.n	3400f332 <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400f328:	f240 71d3 	movw	r1, #2003	@ 0x7d3
3400f32c:	4841      	ldr	r0, [pc, #260]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f32e:	f7f2 fcb5 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f332:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f338:	2b00      	cmp	r3, #0
3400f33a:	d005      	beq.n	3400f348 <HAL_RCCEx_PeriphCLKConfig+0x595c>
3400f33c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f346:	d904      	bls.n	3400f352 <HAL_RCCEx_PeriphCLKConfig+0x5966>
3400f348:	f240 71d4 	movw	r1, #2004	@ 0x7d4
3400f34c:	4839      	ldr	r0, [pc, #228]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f34e:	f7f2 fca5 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f352:	4b39      	ldr	r3, [pc, #228]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f354:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f358:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f35c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f366:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f36a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f36c:	3b01      	subs	r3, #1
3400f36e:	041b      	lsls	r3, r3, #16
3400f370:	4313      	orrs	r3, r2
3400f372:	4a31      	ldr	r2, [pc, #196]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f374:	430b      	orrs	r3, r1
3400f376:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f37a:	f7fa f855 	bl	34009428 <LL_RCC_IC9_Enable>
3400f37e:	e066      	b.n	3400f44e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3400f380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f384:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f388:	4b26      	ldr	r3, [pc, #152]	@ (3400f424 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400f38a:	429a      	cmp	r2, r3
3400f38c:	d156      	bne.n	3400f43c <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f38e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f394:	2b00      	cmp	r3, #0
3400f396:	d016      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f39e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f3a2:	d010      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f3ae:	d00a      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f3b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f3ba:	d004      	beq.n	3400f3c6 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400f3bc:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400f3c0:	481c      	ldr	r0, [pc, #112]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f3c2:	f7f2 fc6b 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f3c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3cc:	2b00      	cmp	r3, #0
3400f3ce:	d005      	beq.n	3400f3dc <HAL_RCCEx_PeriphCLKConfig+0x59f0>
3400f3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f3d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f3da:	d904      	bls.n	3400f3e6 <HAL_RCCEx_PeriphCLKConfig+0x59fa>
3400f3dc:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3400f3e0:	4814      	ldr	r0, [pc, #80]	@ (3400f434 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400f3e2:	f7f2 fc5b 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f3e6:	4b14      	ldr	r3, [pc, #80]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f3e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f3ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f3f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f3f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f3fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f400:	3b01      	subs	r3, #1
3400f402:	041b      	lsls	r3, r3, #16
3400f404:	4313      	orrs	r3, r2
3400f406:	4a0c      	ldr	r2, [pc, #48]	@ (3400f438 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400f408:	430b      	orrs	r3, r1
3400f40a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f40e:	f7fa f90b 	bl	34009628 <LL_RCC_IC14_Enable>
3400f412:	e01c      	b.n	3400f44e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
3400f414:	07010c30 	.word	0x07010c30
3400f418:	07001030 	.word	0x07001030
3400f41c:	07011030 	.word	0x07011030
3400f420:	07021030 	.word	0x07021030
3400f424:	07031030 	.word	0x07031030
3400f428:	07041030 	.word	0x07041030
3400f42c:	07051030 	.word	0x07051030
3400f430:	07061030 	.word	0x07061030
3400f434:	3401e800 	.word	0x3401e800
3400f438:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3400f43c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f440:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400f444:	4b72      	ldr	r3, [pc, #456]	@ (3400f610 <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
3400f446:	429a      	cmp	r2, r3
3400f448:	d101      	bne.n	3400f44e <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
3400f44a:	f7fa faad 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3400f44e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f452:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3400f456:	4618      	mov	r0, r3
3400f458:	f7f9 fa49 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3400f45c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f460:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f464:	2100      	movs	r1, #0
3400f466:	64b9      	str	r1, [r7, #72]	@ 0x48
3400f468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400f46c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400f46e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3400f472:	4603      	mov	r3, r0
3400f474:	460a      	mov	r2, r1
3400f476:	4313      	orrs	r3, r2
3400f478:	f000 80ee 	beq.w	3400f658 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
3400f47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f480:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f484:	4b63      	ldr	r3, [pc, #396]	@ (3400f614 <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
3400f486:	429a      	cmp	r2, r3
3400f488:	d02e      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f48a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f48e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f492:	4b61      	ldr	r3, [pc, #388]	@ (3400f618 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
3400f494:	429a      	cmp	r2, r3
3400f496:	d027      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f498:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f49c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4a0:	4b5e      	ldr	r3, [pc, #376]	@ (3400f61c <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f4a2:	429a      	cmp	r2, r3
3400f4a4:	d020      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4aa:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4ae:	4b5c      	ldr	r3, [pc, #368]	@ (3400f620 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f4b0:	429a      	cmp	r2, r3
3400f4b2:	d019      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4b8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4bc:	4b59      	ldr	r3, [pc, #356]	@ (3400f624 <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
3400f4be:	429a      	cmp	r2, r3
3400f4c0:	d012      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4c6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4ca:	4b57      	ldr	r3, [pc, #348]	@ (3400f628 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
3400f4cc:	429a      	cmp	r2, r3
3400f4ce:	d00b      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4d4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4d8:	4b54      	ldr	r3, [pc, #336]	@ (3400f62c <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
3400f4da:	429a      	cmp	r2, r3
3400f4dc:	d004      	beq.n	3400f4e8 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400f4de:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400f4e2:	4853      	ldr	r0, [pc, #332]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f4e4:	f7f2 fbda 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3400f4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4ec:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f4f0:	4b4a      	ldr	r3, [pc, #296]	@ (3400f61c <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400f4f2:	429a      	cmp	r2, r3
3400f4f4:	d142      	bne.n	3400f57c <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f4f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f4fc:	2b00      	cmp	r3, #0
3400f4fe:	d016      	beq.n	3400f52e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f500:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f50a:	d010      	beq.n	3400f52e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f50c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f516:	d00a      	beq.n	3400f52e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f518:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f51c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f51e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f522:	d004      	beq.n	3400f52e <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400f524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400f528:	4841      	ldr	r0, [pc, #260]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f52a:	f7f2 fbb7 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f52e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f534:	2b00      	cmp	r3, #0
3400f536:	d005      	beq.n	3400f544 <HAL_RCCEx_PeriphCLKConfig+0x5b58>
3400f538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f53e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f542:	d904      	bls.n	3400f54e <HAL_RCCEx_PeriphCLKConfig+0x5b62>
3400f544:	f640 0101 	movw	r1, #2049	@ 0x801
3400f548:	4839      	ldr	r0, [pc, #228]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f54a:	f7f2 fba7 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f54e:	4b39      	ldr	r3, [pc, #228]	@ (3400f634 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f554:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f558:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f55c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f562:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f568:	3b01      	subs	r3, #1
3400f56a:	041b      	lsls	r3, r3, #16
3400f56c:	4313      	orrs	r3, r2
3400f56e:	4a31      	ldr	r2, [pc, #196]	@ (3400f634 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f570:	430b      	orrs	r3, r1
3400f572:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f576:	f7f9 ff57 	bl	34009428 <LL_RCC_IC9_Enable>
3400f57a:	e066      	b.n	3400f64a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3400f57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f580:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f584:	4b26      	ldr	r3, [pc, #152]	@ (3400f620 <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400f586:	429a      	cmp	r2, r3
3400f588:	d156      	bne.n	3400f638 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f58a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f58e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f590:	2b00      	cmp	r3, #0
3400f592:	d016      	beq.n	3400f5c2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f594:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f59a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f59e:	d010      	beq.n	3400f5c2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f5a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f5aa:	d00a      	beq.n	3400f5c2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f5b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f5b6:	d004      	beq.n	3400f5c2 <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400f5b8:	f640 010d 	movw	r1, #2061	@ 0x80d
3400f5bc:	481c      	ldr	r0, [pc, #112]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f5be:	f7f2 fb6d 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f5c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5c8:	2b00      	cmp	r3, #0
3400f5ca:	d005      	beq.n	3400f5d8 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
3400f5cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f5d6:	d904      	bls.n	3400f5e2 <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
3400f5d8:	f640 010e 	movw	r1, #2062	@ 0x80e
3400f5dc:	4814      	ldr	r0, [pc, #80]	@ (3400f630 <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400f5de:	f7f2 fb5d 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f5e2:	4b14      	ldr	r3, [pc, #80]	@ (3400f634 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f5e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f5e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f5ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f5f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f5f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f5fc:	3b01      	subs	r3, #1
3400f5fe:	041b      	lsls	r3, r3, #16
3400f600:	4313      	orrs	r3, r2
3400f602:	4a0c      	ldr	r2, [pc, #48]	@ (3400f634 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400f604:	430b      	orrs	r3, r1
3400f606:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f60a:	f7fa f80d 	bl	34009628 <LL_RCC_IC14_Enable>
3400f60e:	e01c      	b.n	3400f64a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
3400f610:	07011030 	.word	0x07011030
3400f614:	07001430 	.word	0x07001430
3400f618:	07011430 	.word	0x07011430
3400f61c:	07021430 	.word	0x07021430
3400f620:	07031430 	.word	0x07031430
3400f624:	07041430 	.word	0x07041430
3400f628:	07051430 	.word	0x07051430
3400f62c:	07061430 	.word	0x07061430
3400f630:	3401e800 	.word	0x3401e800
3400f634:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400f638:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f63c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400f640:	4b72      	ldr	r3, [pc, #456]	@ (3400f80c <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
3400f642:	429a      	cmp	r2, r3
3400f644:	d101      	bne.n	3400f64a <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
3400f646:	f7fa f9af 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3400f64a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f64e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400f652:	4618      	mov	r0, r3
3400f654:	f7f9 f94b 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3400f658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f660:	2100      	movs	r1, #0
3400f662:	6439      	str	r1, [r7, #64]	@ 0x40
3400f664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400f668:	647b      	str	r3, [r7, #68]	@ 0x44
3400f66a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3400f66e:	4603      	mov	r3, r0
3400f670:	460a      	mov	r2, r1
3400f672:	4313      	orrs	r3, r2
3400f674:	f000 80ee 	beq.w	3400f854 <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
3400f678:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f67c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f680:	4b63      	ldr	r3, [pc, #396]	@ (3400f810 <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
3400f682:	429a      	cmp	r2, r3
3400f684:	d02e      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f686:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f68a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f68e:	4b61      	ldr	r3, [pc, #388]	@ (3400f814 <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
3400f690:	429a      	cmp	r2, r3
3400f692:	d027      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f698:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f69c:	4b5e      	ldr	r3, [pc, #376]	@ (3400f818 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f69e:	429a      	cmp	r2, r3
3400f6a0:	d020      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6a6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6aa:	4b5c      	ldr	r3, [pc, #368]	@ (3400f81c <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f6ac:	429a      	cmp	r2, r3
3400f6ae:	d019      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6b4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6b8:	4b59      	ldr	r3, [pc, #356]	@ (3400f820 <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
3400f6ba:	429a      	cmp	r2, r3
3400f6bc:	d012      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6c2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6c6:	4b57      	ldr	r3, [pc, #348]	@ (3400f824 <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
3400f6c8:	429a      	cmp	r2, r3
3400f6ca:	d00b      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6d0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6d4:	4b54      	ldr	r3, [pc, #336]	@ (3400f828 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
3400f6d6:	429a      	cmp	r2, r3
3400f6d8:	d004      	beq.n	3400f6e4 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400f6da:	f640 0128 	movw	r1, #2088	@ 0x828
3400f6de:	4853      	ldr	r0, [pc, #332]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f6e0:	f7f2 fadc 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3400f6e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6e8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f6ec:	4b4a      	ldr	r3, [pc, #296]	@ (3400f818 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400f6ee:	429a      	cmp	r2, r3
3400f6f0:	d142      	bne.n	3400f778 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f6f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f6f8:	2b00      	cmp	r3, #0
3400f6fa:	d016      	beq.n	3400f72a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f6fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f706:	d010      	beq.n	3400f72a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f708:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f70c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f70e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f712:	d00a      	beq.n	3400f72a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f714:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f71a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f71e:	d004      	beq.n	3400f72a <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f720:	f640 012d 	movw	r1, #2093	@ 0x82d
3400f724:	4841      	ldr	r0, [pc, #260]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f726:	f7f2 fab9 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f72a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f72e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f730:	2b00      	cmp	r3, #0
3400f732:	d005      	beq.n	3400f740 <HAL_RCCEx_PeriphCLKConfig+0x5d54>
3400f734:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f73a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f73e:	d904      	bls.n	3400f74a <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
3400f740:	f640 012e 	movw	r1, #2094	@ 0x82e
3400f744:	4839      	ldr	r0, [pc, #228]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f746:	f7f2 faa9 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f74a:	4b39      	ldr	r3, [pc, #228]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f74c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f750:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f754:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f758:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f75c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f75e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f764:	3b01      	subs	r3, #1
3400f766:	041b      	lsls	r3, r3, #16
3400f768:	4313      	orrs	r3, r2
3400f76a:	4a31      	ldr	r2, [pc, #196]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f76c:	430b      	orrs	r3, r1
3400f76e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f772:	f7f9 fe59 	bl	34009428 <LL_RCC_IC9_Enable>
3400f776:	e066      	b.n	3400f846 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400f778:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f77c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f780:	4b26      	ldr	r3, [pc, #152]	@ (3400f81c <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f782:	429a      	cmp	r2, r3
3400f784:	d156      	bne.n	3400f834 <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f786:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f78a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f78c:	2b00      	cmp	r3, #0
3400f78e:	d016      	beq.n	3400f7be <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f79a:	d010      	beq.n	3400f7be <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f79c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f7a6:	d00a      	beq.n	3400f7be <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f7a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f7ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f7b2:	d004      	beq.n	3400f7be <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f7b4:	f640 013a 	movw	r1, #2106	@ 0x83a
3400f7b8:	481c      	ldr	r0, [pc, #112]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f7ba:	f7f2 fa6f 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f7be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7c4:	2b00      	cmp	r3, #0
3400f7c6:	d005      	beq.n	3400f7d4 <HAL_RCCEx_PeriphCLKConfig+0x5de8>
3400f7c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f7d2:	d904      	bls.n	3400f7de <HAL_RCCEx_PeriphCLKConfig+0x5df2>
3400f7d4:	f640 013b 	movw	r1, #2107	@ 0x83b
3400f7d8:	4814      	ldr	r0, [pc, #80]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f7da:	f7f2 fa5f 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f7de:	4b14      	ldr	r3, [pc, #80]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f7e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f7e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f7e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f7ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f7f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f7f8:	3b01      	subs	r3, #1
3400f7fa:	041b      	lsls	r3, r3, #16
3400f7fc:	4313      	orrs	r3, r2
3400f7fe:	4a0c      	ldr	r2, [pc, #48]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f800:	430b      	orrs	r3, r1
3400f802:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f806:	f7f9 ff0f 	bl	34009628 <LL_RCC_IC14_Enable>
3400f80a:	e01c      	b.n	3400f846 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
3400f80c:	07011430 	.word	0x07011430
3400f810:	07001830 	.word	0x07001830
3400f814:	07011830 	.word	0x07011830
3400f818:	07021830 	.word	0x07021830
3400f81c:	07031830 	.word	0x07031830
3400f820:	07041830 	.word	0x07041830
3400f824:	07051830 	.word	0x07051830
3400f828:	07061830 	.word	0x07061830
3400f82c:	3401e800 	.word	0x3401e800
3400f830:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400f834:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f838:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f83c:	4b72      	ldr	r3, [pc, #456]	@ (3400fa08 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
3400f83e:	429a      	cmp	r2, r3
3400f840:	d101      	bne.n	3400f846 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
3400f842:	f7fa f8b1 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3400f846:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f84a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3400f84e:	4618      	mov	r0, r3
3400f850:	f7f9 f84d 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3400f854:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f858:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f85c:	2100      	movs	r1, #0
3400f85e:	63b9      	str	r1, [r7, #56]	@ 0x38
3400f860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400f864:	63fb      	str	r3, [r7, #60]	@ 0x3c
3400f866:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3400f86a:	4603      	mov	r3, r0
3400f86c:	460a      	mov	r2, r1
3400f86e:	4313      	orrs	r3, r2
3400f870:	f000 80ee 	beq.w	3400fa50 <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
3400f874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f878:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f87c:	4b63      	ldr	r3, [pc, #396]	@ (3400fa0c <HAL_RCCEx_PeriphCLKConfig+0x6020>)
3400f87e:	429a      	cmp	r2, r3
3400f880:	d02e      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f882:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f886:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f88a:	4b61      	ldr	r3, [pc, #388]	@ (3400fa10 <HAL_RCCEx_PeriphCLKConfig+0x6024>)
3400f88c:	429a      	cmp	r2, r3
3400f88e:	d027      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f890:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f894:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f898:	4b5e      	ldr	r3, [pc, #376]	@ (3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f89a:	429a      	cmp	r2, r3
3400f89c:	d020      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f89e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8a2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8a6:	4b5c      	ldr	r3, [pc, #368]	@ (3400fa18 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f8a8:	429a      	cmp	r2, r3
3400f8aa:	d019      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8b0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8b4:	4b59      	ldr	r3, [pc, #356]	@ (3400fa1c <HAL_RCCEx_PeriphCLKConfig+0x6030>)
3400f8b6:	429a      	cmp	r2, r3
3400f8b8:	d012      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8be:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8c2:	4b57      	ldr	r3, [pc, #348]	@ (3400fa20 <HAL_RCCEx_PeriphCLKConfig+0x6034>)
3400f8c4:	429a      	cmp	r2, r3
3400f8c6:	d00b      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8cc:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8d0:	4b54      	ldr	r3, [pc, #336]	@ (3400fa24 <HAL_RCCEx_PeriphCLKConfig+0x6038>)
3400f8d2:	429a      	cmp	r2, r3
3400f8d4:	d004      	beq.n	3400f8e0 <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f8d6:	f640 0155 	movw	r1, #2133	@ 0x855
3400f8da:	4853      	ldr	r0, [pc, #332]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f8dc:	f7f2 f9de 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3400f8e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8e4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f8e8:	4b4a      	ldr	r3, [pc, #296]	@ (3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f8ea:	429a      	cmp	r2, r3
3400f8ec:	d142      	bne.n	3400f974 <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f8ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8f4:	2b00      	cmp	r3, #0
3400f8f6:	d016      	beq.n	3400f926 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f8fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f902:	d010      	beq.n	3400f926 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f904:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f90a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f90e:	d00a      	beq.n	3400f926 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f91a:	d004      	beq.n	3400f926 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f91c:	f640 015a 	movw	r1, #2138	@ 0x85a
3400f920:	4841      	ldr	r0, [pc, #260]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f922:	f7f2 f9bb 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f926:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f92a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f92c:	2b00      	cmp	r3, #0
3400f92e:	d005      	beq.n	3400f93c <HAL_RCCEx_PeriphCLKConfig+0x5f50>
3400f930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f93a:	d904      	bls.n	3400f946 <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
3400f93c:	f640 015b 	movw	r1, #2139	@ 0x85b
3400f940:	4839      	ldr	r0, [pc, #228]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f942:	f7f2 f9ab 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f946:	4b39      	ldr	r3, [pc, #228]	@ (3400fa2c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f948:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f94c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f950:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f95a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f960:	3b01      	subs	r3, #1
3400f962:	041b      	lsls	r3, r3, #16
3400f964:	4313      	orrs	r3, r2
3400f966:	4a31      	ldr	r2, [pc, #196]	@ (3400fa2c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f968:	430b      	orrs	r3, r1
3400f96a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f96e:	f7f9 fd5b 	bl	34009428 <LL_RCC_IC9_Enable>
3400f972:	e066      	b.n	3400fa42 <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400f974:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f978:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f97c:	4b26      	ldr	r3, [pc, #152]	@ (3400fa18 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f97e:	429a      	cmp	r2, r3
3400f980:	d156      	bne.n	3400fa30 <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f982:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f988:	2b00      	cmp	r3, #0
3400f98a:	d016      	beq.n	3400f9ba <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f98c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f996:	d010      	beq.n	3400f9ba <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f998:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f9a2:	d00a      	beq.n	3400f9ba <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f9a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f9aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f9ae:	d004      	beq.n	3400f9ba <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f9b0:	f640 0167 	movw	r1, #2151	@ 0x867
3400f9b4:	481c      	ldr	r0, [pc, #112]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f9b6:	f7f2 f971 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f9ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9c0:	2b00      	cmp	r3, #0
3400f9c2:	d005      	beq.n	3400f9d0 <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
3400f9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f9ce:	d904      	bls.n	3400f9da <HAL_RCCEx_PeriphCLKConfig+0x5fee>
3400f9d0:	f640 0168 	movw	r1, #2152	@ 0x868
3400f9d4:	4814      	ldr	r0, [pc, #80]	@ (3400fa28 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f9d6:	f7f2 f961 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f9da:	4b14      	ldr	r3, [pc, #80]	@ (3400fa2c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f9dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f9e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f9e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f9e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f9ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f9f4:	3b01      	subs	r3, #1
3400f9f6:	041b      	lsls	r3, r3, #16
3400f9f8:	4313      	orrs	r3, r2
3400f9fa:	4a0c      	ldr	r2, [pc, #48]	@ (3400fa2c <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f9fc:	430b      	orrs	r3, r1
3400f9fe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fa02:	f7f9 fe11 	bl	34009628 <LL_RCC_IC14_Enable>
3400fa06:	e01c      	b.n	3400fa42 <HAL_RCCEx_PeriphCLKConfig+0x6056>
3400fa08:	07011830 	.word	0x07011830
3400fa0c:	07001c30 	.word	0x07001c30
3400fa10:	07011c30 	.word	0x07011c30
3400fa14:	07021c30 	.word	0x07021c30
3400fa18:	07031c30 	.word	0x07031c30
3400fa1c:	07041c30 	.word	0x07041c30
3400fa20:	07051c30 	.word	0x07051c30
3400fa24:	07061c30 	.word	0x07061c30
3400fa28:	3401e800 	.word	0x3401e800
3400fa2c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400fa30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa34:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400fa38:	4b72      	ldr	r3, [pc, #456]	@ (3400fc04 <HAL_RCCEx_PeriphCLKConfig+0x6218>)
3400fa3a:	429a      	cmp	r2, r3
3400fa3c:	d101      	bne.n	3400fa42 <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
3400fa3e:	f7f9 ffb3 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3400fa42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa46:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3400fa4a:	4618      	mov	r0, r3
3400fa4c:	f7f8 ff4f 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3400fa50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa54:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fa58:	2100      	movs	r1, #0
3400fa5a:	6339      	str	r1, [r7, #48]	@ 0x30
3400fa5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400fa60:	637b      	str	r3, [r7, #52]	@ 0x34
3400fa62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400fa66:	4603      	mov	r3, r0
3400fa68:	460a      	mov	r2, r1
3400fa6a:	4313      	orrs	r3, r2
3400fa6c:	f000 80ee 	beq.w	3400fc4c <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400fa70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa74:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa78:	4a63      	ldr	r2, [pc, #396]	@ (3400fc08 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
3400fa7a:	4293      	cmp	r3, r2
3400fa7c:	d02e      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fa7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa82:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa86:	4a61      	ldr	r2, [pc, #388]	@ (3400fc0c <HAL_RCCEx_PeriphCLKConfig+0x6220>)
3400fa88:	4293      	cmp	r3, r2
3400fa8a:	d027      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fa8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa90:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fa94:	4a5e      	ldr	r2, [pc, #376]	@ (3400fc10 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400fa96:	4293      	cmp	r3, r2
3400fa98:	d020      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fa9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa9e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400faa2:	4a5c      	ldr	r2, [pc, #368]	@ (3400fc14 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400faa4:	4293      	cmp	r3, r2
3400faa6:	d019      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400faa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faac:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fab0:	4a59      	ldr	r2, [pc, #356]	@ (3400fc18 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
3400fab2:	4293      	cmp	r3, r2
3400fab4:	d012      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fab6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faba:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fabe:	4a57      	ldr	r2, [pc, #348]	@ (3400fc1c <HAL_RCCEx_PeriphCLKConfig+0x6230>)
3400fac0:	4293      	cmp	r3, r2
3400fac2:	d00b      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fac4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fac8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400facc:	4a54      	ldr	r2, [pc, #336]	@ (3400fc20 <HAL_RCCEx_PeriphCLKConfig+0x6234>)
3400face:	4293      	cmp	r3, r2
3400fad0:	d004      	beq.n	3400fadc <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400fad2:	f640 0182 	movw	r1, #2178	@ 0x882
3400fad6:	4853      	ldr	r0, [pc, #332]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fad8:	f7f2 f8e0 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3400fadc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fae0:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fae4:	4a4a      	ldr	r2, [pc, #296]	@ (3400fc10 <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400fae6:	4293      	cmp	r3, r2
3400fae8:	d142      	bne.n	3400fb70 <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400faea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400faf0:	2b00      	cmp	r3, #0
3400faf2:	d016      	beq.n	3400fb22 <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400faf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fafa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fafe:	d010      	beq.n	3400fb22 <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fb06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fb0a:	d00a      	beq.n	3400fb22 <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fb12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fb16:	d004      	beq.n	3400fb22 <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400fb18:	f640 0187 	movw	r1, #2183	@ 0x887
3400fb1c:	4841      	ldr	r0, [pc, #260]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fb1e:	f7f2 f8bd 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400fb22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb28:	2b00      	cmp	r3, #0
3400fb2a:	d005      	beq.n	3400fb38 <HAL_RCCEx_PeriphCLKConfig+0x614c>
3400fb2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fb36:	d904      	bls.n	3400fb42 <HAL_RCCEx_PeriphCLKConfig+0x6156>
3400fb38:	f640 0188 	movw	r1, #2184	@ 0x888
3400fb3c:	4839      	ldr	r0, [pc, #228]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fb3e:	f7f2 f8ad 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400fb42:	4b39      	ldr	r3, [pc, #228]	@ (3400fc28 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fb44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400fb48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fb4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fb50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400fb56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fb5c:	3b01      	subs	r3, #1
3400fb5e:	041b      	lsls	r3, r3, #16
3400fb60:	4313      	orrs	r3, r2
3400fb62:	4a31      	ldr	r2, [pc, #196]	@ (3400fc28 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fb64:	430b      	orrs	r3, r1
3400fb66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400fb6a:	f7f9 fc5d 	bl	34009428 <LL_RCC_IC9_Enable>
3400fb6e:	e066      	b.n	3400fc3e <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3400fb70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb74:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fb78:	4a26      	ldr	r2, [pc, #152]	@ (3400fc14 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400fb7a:	4293      	cmp	r3, r2
3400fb7c:	d156      	bne.n	3400fc2c <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400fb7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb84:	2b00      	cmp	r3, #0
3400fb86:	d016      	beq.n	3400fbb6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fb88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fb92:	d010      	beq.n	3400fbb6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fb94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fb9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fb9e:	d00a      	beq.n	3400fbb6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fba6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fbaa:	d004      	beq.n	3400fbb6 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400fbac:	f640 0194 	movw	r1, #2196	@ 0x894
3400fbb0:	481c      	ldr	r0, [pc, #112]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fbb2:	f7f2 f873 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400fbb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbbc:	2b00      	cmp	r3, #0
3400fbbe:	d005      	beq.n	3400fbcc <HAL_RCCEx_PeriphCLKConfig+0x61e0>
3400fbc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fbca:	d904      	bls.n	3400fbd6 <HAL_RCCEx_PeriphCLKConfig+0x61ea>
3400fbcc:	f640 0195 	movw	r1, #2197	@ 0x895
3400fbd0:	4814      	ldr	r0, [pc, #80]	@ (3400fc24 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400fbd2:	f7f2 f863 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400fbd6:	4b14      	ldr	r3, [pc, #80]	@ (3400fc28 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fbd8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400fbdc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400fbe0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400fbe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbe8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400fbea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fbee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fbf0:	3b01      	subs	r3, #1
3400fbf2:	041b      	lsls	r3, r3, #16
3400fbf4:	4313      	orrs	r3, r2
3400fbf6:	4a0c      	ldr	r2, [pc, #48]	@ (3400fc28 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400fbf8:	430b      	orrs	r3, r1
3400fbfa:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fbfe:	f7f9 fd13 	bl	34009628 <LL_RCC_IC14_Enable>
3400fc02:	e01c      	b.n	3400fc3e <HAL_RCCEx_PeriphCLKConfig+0x6252>
3400fc04:	07011c30 	.word	0x07011c30
3400fc08:	07000034 	.word	0x07000034
3400fc0c:	07010034 	.word	0x07010034
3400fc10:	07020034 	.word	0x07020034
3400fc14:	07030034 	.word	0x07030034
3400fc18:	07040034 	.word	0x07040034
3400fc1c:	07050034 	.word	0x07050034
3400fc20:	07060034 	.word	0x07060034
3400fc24:	3401e800 	.word	0x3401e800
3400fc28:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3400fc2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc30:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fc34:	4ab7      	ldr	r2, [pc, #732]	@ (3400ff14 <HAL_RCCEx_PeriphCLKConfig+0x6528>)
3400fc36:	4293      	cmp	r3, r2
3400fc38:	d101      	bne.n	3400fc3e <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
3400fc3a:	f7f9 feb5 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3400fc3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc42:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400fc46:	4618      	mov	r0, r3
3400fc48:	f7f8 fe51 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3400fc4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fc54:	2100      	movs	r1, #0
3400fc56:	62b9      	str	r1, [r7, #40]	@ 0x28
3400fc58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400fc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400fc5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3400fc62:	4603      	mov	r3, r0
3400fc64:	460a      	mov	r2, r1
3400fc66:	4313      	orrs	r3, r2
3400fc68:	f000 80da 	beq.w	3400fe20 <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3400fc6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc70:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc74:	4aa8      	ldr	r2, [pc, #672]	@ (3400ff18 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
3400fc76:	4293      	cmp	r3, r2
3400fc78:	d02e      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc7e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc82:	4aa6      	ldr	r2, [pc, #664]	@ (3400ff1c <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fc84:	4293      	cmp	r3, r2
3400fc86:	d027      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc8c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc90:	4aa3      	ldr	r2, [pc, #652]	@ (3400ff20 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400fc92:	4293      	cmp	r3, r2
3400fc94:	d020      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fc96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fc9a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fc9e:	4aa1      	ldr	r2, [pc, #644]	@ (3400ff24 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fca0:	4293      	cmp	r3, r2
3400fca2:	d019      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fca4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fca8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcac:	4a9e      	ldr	r2, [pc, #632]	@ (3400ff28 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
3400fcae:	4293      	cmp	r3, r2
3400fcb0:	d012      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcb6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcba:	4a9c      	ldr	r2, [pc, #624]	@ (3400ff2c <HAL_RCCEx_PeriphCLKConfig+0x6540>)
3400fcbc:	4293      	cmp	r3, r2
3400fcbe:	d00b      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcc4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fcc8:	4a99      	ldr	r2, [pc, #612]	@ (3400ff30 <HAL_RCCEx_PeriphCLKConfig+0x6544>)
3400fcca:	4293      	cmp	r3, r2
3400fccc:	d004      	beq.n	3400fcd8 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400fcce:	f640 01af 	movw	r1, #2223	@ 0x8af
3400fcd2:	4898      	ldr	r0, [pc, #608]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fcd4:	f7f1 ffe2 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3400fcd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcdc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fce0:	4a8f      	ldr	r2, [pc, #572]	@ (3400ff20 <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400fce2:	4293      	cmp	r3, r2
3400fce4:	d142      	bne.n	3400fd6c <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400fce6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fcec:	2b00      	cmp	r3, #0
3400fcee:	d016      	beq.n	3400fd1e <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fcf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fcf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fcf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fcfa:	d010      	beq.n	3400fd1e <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fcfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fd02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fd06:	d00a      	beq.n	3400fd1e <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fd08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400fd0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fd12:	d004      	beq.n	3400fd1e <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400fd14:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3400fd18:	4886      	ldr	r0, [pc, #536]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fd1a:	f7f1 ffbf 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400fd1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fd24:	2b00      	cmp	r3, #0
3400fd26:	d005      	beq.n	3400fd34 <HAL_RCCEx_PeriphCLKConfig+0x6348>
3400fd28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400fd2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fd32:	d904      	bls.n	3400fd3e <HAL_RCCEx_PeriphCLKConfig+0x6352>
3400fd34:	f640 01b5 	movw	r1, #2229	@ 0x8b5
3400fd38:	487e      	ldr	r0, [pc, #504]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fd3a:	f7f1 ffaf 	bl	34001c9c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400fd3e:	4b7e      	ldr	r3, [pc, #504]	@ (3400ff38 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fd40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400fd44:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fd48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fd4c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fd50:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3400fd52:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fd56:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3400fd58:	3a01      	subs	r2, #1
3400fd5a:	0412      	lsls	r2, r2, #16
3400fd5c:	430a      	orrs	r2, r1
3400fd5e:	4976      	ldr	r1, [pc, #472]	@ (3400ff38 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fd60:	4313      	orrs	r3, r2
3400fd62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400fd66:	f7f9 fb5f 	bl	34009428 <LL_RCC_IC9_Enable>
3400fd6a:	e052      	b.n	3400fe12 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3400fd6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd70:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fd74:	4a6b      	ldr	r2, [pc, #428]	@ (3400ff24 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400fd76:	4293      	cmp	r3, r2
3400fd78:	d142      	bne.n	3400fe00 <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400fd7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd80:	2b00      	cmp	r3, #0
3400fd82:	d016      	beq.n	3400fdb2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fd84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fd8e:	d010      	beq.n	3400fdb2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fd90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fd96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fd9a:	d00a      	beq.n	3400fdb2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fd9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fda0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400fda2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fda6:	d004      	beq.n	3400fdb2 <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400fda8:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3400fdac:	4861      	ldr	r0, [pc, #388]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fdae:	f7f1 ff75 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400fdb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fdb8:	2b00      	cmp	r3, #0
3400fdba:	d005      	beq.n	3400fdc8 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
3400fdbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fdc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400fdc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fdc6:	d904      	bls.n	3400fdd2 <HAL_RCCEx_PeriphCLKConfig+0x63e6>
3400fdc8:	f640 01c2 	movw	r1, #2242	@ 0x8c2
3400fdcc:	4859      	ldr	r0, [pc, #356]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fdce:	f7f1 ff65 	bl	34001c9c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400fdd2:	4b59      	ldr	r3, [pc, #356]	@ (3400ff38 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fdd4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400fdd8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fddc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fde0:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fde4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3400fde6:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fdea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3400fdec:	3a01      	subs	r2, #1
3400fdee:	0412      	lsls	r2, r2, #16
3400fdf0:	430a      	orrs	r2, r1
3400fdf2:	4951      	ldr	r1, [pc, #324]	@ (3400ff38 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400fdf4:	4313      	orrs	r3, r2
3400fdf6:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400fdfa:	f7f9 fc15 	bl	34009628 <LL_RCC_IC14_Enable>
3400fdfe:	e008      	b.n	3400fe12 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3400fe00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe04:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fe08:	4a44      	ldr	r2, [pc, #272]	@ (3400ff1c <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400fe0a:	4293      	cmp	r3, r2
3400fe0c:	d101      	bne.n	3400fe12 <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3400fe0e:	f7f9 fdcb 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3400fe12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe16:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400fe1a:	4618      	mov	r0, r3
3400fe1c:	f7f8 fd67 	bl	340088ee <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3400fe20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe24:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fe28:	2100      	movs	r1, #0
3400fe2a:	6239      	str	r1, [r7, #32]
3400fe2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400fe30:	627b      	str	r3, [r7, #36]	@ 0x24
3400fe32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3400fe36:	4603      	mov	r3, r0
3400fe38:	460a      	mov	r2, r1
3400fe3a:	4313      	orrs	r3, r2
3400fe3c:	d02e      	beq.n	3400fe9c <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400fe3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe42:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe46:	4a3d      	ldr	r2, [pc, #244]	@ (3400ff3c <HAL_RCCEx_PeriphCLKConfig+0x6550>)
3400fe48:	4293      	cmp	r3, r2
3400fe4a:	d012      	beq.n	3400fe72 <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe50:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe54:	4a3a      	ldr	r2, [pc, #232]	@ (3400ff40 <HAL_RCCEx_PeriphCLKConfig+0x6554>)
3400fe56:	4293      	cmp	r3, r2
3400fe58:	d00b      	beq.n	3400fe72 <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe5e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe62:	4a38      	ldr	r2, [pc, #224]	@ (3400ff44 <HAL_RCCEx_PeriphCLKConfig+0x6558>)
3400fe64:	4293      	cmp	r3, r2
3400fe66:	d004      	beq.n	3400fe72 <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400fe68:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3400fe6c:	4831      	ldr	r0, [pc, #196]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400fe6e:	f7f1 ff15 	bl	34001c9c <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400fe72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe76:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fe7e:	4618      	mov	r0, r3
3400fe80:	f7f8 fcdd 	bl	3400883e <LL_RCC_SetOTGPHYCKREFClockSource>
3400fe84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fe88:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400fe8c:	0fdb      	lsrs	r3, r3, #31
3400fe8e:	2b01      	cmp	r3, #1
3400fe90:	d102      	bne.n	3400fe98 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
3400fe92:	f7f8 fa7f 	bl	34008394 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fe96:	e001      	b.n	3400fe9c <HAL_RCCEx_PeriphCLKConfig+0x64b0>
3400fe98:	f7f8 fa6c 	bl	34008374 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400fe9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
3400fea4:	2100      	movs	r1, #0
3400fea6:	61b9      	str	r1, [r7, #24]
3400fea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400feac:	61fb      	str	r3, [r7, #28]
3400feae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3400feb2:	4603      	mov	r3, r0
3400feb4:	460a      	mov	r2, r1
3400feb6:	4313      	orrs	r3, r2
3400feb8:	d04e      	beq.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400feba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400febe:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fec2:	4a21      	ldr	r2, [pc, #132]	@ (3400ff48 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
3400fec4:	4293      	cmp	r3, r2
3400fec6:	d012      	beq.n	3400feee <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fec8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fecc:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fed0:	4a1e      	ldr	r2, [pc, #120]	@ (3400ff4c <HAL_RCCEx_PeriphCLKConfig+0x6560>)
3400fed2:	4293      	cmp	r3, r2
3400fed4:	d00b      	beq.n	3400feee <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fed6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400feda:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fede:	4a1c      	ldr	r2, [pc, #112]	@ (3400ff50 <HAL_RCCEx_PeriphCLKConfig+0x6564>)
3400fee0:	4293      	cmp	r3, r2
3400fee2:	d004      	beq.n	3400feee <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400fee4:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3400fee8:	4812      	ldr	r0, [pc, #72]	@ (3400ff34 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400feea:	f7f1 fed7 	bl	34001c9c <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400feee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fef2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400fef6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fefa:	4618      	mov	r0, r3
3400fefc:	f7f8 fc9f 	bl	3400883e <LL_RCC_SetOTGPHYCKREFClockSource>
3400ff00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff04:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400ff08:	0fdb      	lsrs	r3, r3, #31
3400ff0a:	2b01      	cmp	r3, #1
3400ff0c:	d122      	bne.n	3400ff54 <HAL_RCCEx_PeriphCLKConfig+0x6568>
3400ff0e:	f7f8 fa41 	bl	34008394 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400ff12:	e021      	b.n	3400ff58 <HAL_RCCEx_PeriphCLKConfig+0x656c>
3400ff14:	07010034 	.word	0x07010034
3400ff18:	07000434 	.word	0x07000434
3400ff1c:	07010434 	.word	0x07010434
3400ff20:	07020434 	.word	0x07020434
3400ff24:	07030434 	.word	0x07030434
3400ff28:	07040434 	.word	0x07040434
3400ff2c:	07050434 	.word	0x07050434
3400ff30:	07060434 	.word	0x07060434
3400ff34:	3401e800 	.word	0x3401e800
3400ff38:	56028000 	.word	0x56028000
3400ff3c:	01001014 	.word	0x01001014
3400ff40:	01011014 	.word	0x01011014
3400ff44:	81011014 	.word	0x81011014
3400ff48:	01001814 	.word	0x01001814
3400ff4c:	01011814 	.word	0x01011814
3400ff50:	81011814 	.word	0x81011814
3400ff54:	f7f8 fa0e 	bl	34008374 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3400ff58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ff60:	2100      	movs	r1, #0
3400ff62:	6139      	str	r1, [r7, #16]
3400ff64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400ff68:	617b      	str	r3, [r7, #20]
3400ff6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3400ff6e:	4603      	mov	r3, r0
3400ff70:	460a      	mov	r2, r1
3400ff72:	4313      	orrs	r3, r2
3400ff74:	f000 8090 	beq.w	34010098 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3400ff78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff7c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ff80:	4ab5      	ldr	r2, [pc, #724]	@ (34010258 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
3400ff82:	4293      	cmp	r3, r2
3400ff84:	d020      	beq.n	3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ff86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff8a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ff8e:	4ab3      	ldr	r2, [pc, #716]	@ (3401025c <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400ff90:	4293      	cmp	r3, r2
3400ff92:	d019      	beq.n	3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ff94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ff98:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ff9c:	4ab0      	ldr	r2, [pc, #704]	@ (34010260 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400ff9e:	4293      	cmp	r3, r2
3400ffa0:	d012      	beq.n	3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffa6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffaa:	4aae      	ldr	r2, [pc, #696]	@ (34010264 <HAL_RCCEx_PeriphCLKConfig+0x6878>)
3400ffac:	4293      	cmp	r3, r2
3400ffae:	d00b      	beq.n	3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffb4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffb8:	4aab      	ldr	r2, [pc, #684]	@ (34010268 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
3400ffba:	4293      	cmp	r3, r2
3400ffbc:	d004      	beq.n	3400ffc8 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400ffbe:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3400ffc2:	48aa      	ldr	r0, [pc, #680]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400ffc4:	f7f1 fe6a 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3400ffc8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffcc:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400ffd0:	4aa3      	ldr	r2, [pc, #652]	@ (34010260 <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400ffd2:	4293      	cmp	r3, r2
3400ffd4:	d142      	bne.n	3401005c <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ffd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ffdc:	2b00      	cmp	r3, #0
3400ffde:	d016      	beq.n	3401000e <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400ffe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ffe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ffe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ffea:	d010      	beq.n	3401000e <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400ffec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fff6:	d00a      	beq.n	3401000e <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400fff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fffe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010002:	d004      	beq.n	3401000e <HAL_RCCEx_PeriphCLKConfig+0x6622>
34010004:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34010008:	4898      	ldr	r0, [pc, #608]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401000a:	f7f1 fe47 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401000e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34010014:	2b00      	cmp	r3, #0
34010016:	d005      	beq.n	34010024 <HAL_RCCEx_PeriphCLKConfig+0x6638>
34010018:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401001c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401001e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010022:	d904      	bls.n	3401002e <HAL_RCCEx_PeriphCLKConfig+0x6642>
34010024:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34010028:	4890      	ldr	r0, [pc, #576]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401002a:	f7f1 fe37 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401002e:	4b90      	ldr	r3, [pc, #576]	@ (34010270 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010030:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34010034:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34010038:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401003c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010040:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34010042:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010046:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34010048:	3a01      	subs	r2, #1
3401004a:	0412      	lsls	r2, r2, #16
3401004c:	430a      	orrs	r2, r1
3401004e:	4988      	ldr	r1, [pc, #544]	@ (34010270 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010050:	4313      	orrs	r3, r2
34010052:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34010056:	f7f9 fb27 	bl	340096a8 <LL_RCC_IC15_Enable>
3401005a:	e008      	b.n	3401006e <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3401005c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010060:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34010064:	4a7d      	ldr	r2, [pc, #500]	@ (3401025c <HAL_RCCEx_PeriphCLKConfig+0x6870>)
34010066:	4293      	cmp	r3, r2
34010068:	d101      	bne.n	3401006e <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
3401006a:	f7f9 fc9d 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3401006e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010072:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34010076:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3401007a:	4618      	mov	r0, r3
3401007c:	f7f8 fbd4 	bl	34008828 <LL_RCC_SetOTGPHYClockSource>
34010080:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010084:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34010088:	0fdb      	lsrs	r3, r3, #31
3401008a:	2b01      	cmp	r3, #1
3401008c:	d102      	bne.n	34010094 <HAL_RCCEx_PeriphCLKConfig+0x66a8>
3401008e:	f7f8 f981 	bl	34008394 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34010092:	e001      	b.n	34010098 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
34010094:	f7f8 f96e 	bl	34008374 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34010098:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401009c:	e9d3 2300 	ldrd	r2, r3, [r3]
340100a0:	2100      	movs	r1, #0
340100a2:	60b9      	str	r1, [r7, #8]
340100a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340100a8:	60fb      	str	r3, [r7, #12]
340100aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
340100ae:	4603      	mov	r3, r0
340100b0:	460a      	mov	r2, r1
340100b2:	4313      	orrs	r3, r2
340100b4:	f000 8090 	beq.w	340101d8 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
340100b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100bc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100c0:	4a6c      	ldr	r2, [pc, #432]	@ (34010274 <HAL_RCCEx_PeriphCLKConfig+0x6888>)
340100c2:	4293      	cmp	r3, r2
340100c4:	d020      	beq.n	34010108 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100ca:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100ce:	4a6a      	ldr	r2, [pc, #424]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
340100d0:	4293      	cmp	r3, r2
340100d2:	d019      	beq.n	34010108 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100d8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100dc:	4a67      	ldr	r2, [pc, #412]	@ (3401027c <HAL_RCCEx_PeriphCLKConfig+0x6890>)
340100de:	4293      	cmp	r3, r2
340100e0:	d012      	beq.n	34010108 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100ea:	4a65      	ldr	r2, [pc, #404]	@ (34010280 <HAL_RCCEx_PeriphCLKConfig+0x6894>)
340100ec:	4293      	cmp	r3, r2
340100ee:	d00b      	beq.n	34010108 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340100f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340100f8:	4a62      	ldr	r2, [pc, #392]	@ (34010284 <HAL_RCCEx_PeriphCLKConfig+0x6898>)
340100fa:	4293      	cmp	r3, r2
340100fc:	d004      	beq.n	34010108 <HAL_RCCEx_PeriphCLKConfig+0x671c>
340100fe:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34010102:	485a      	ldr	r0, [pc, #360]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
34010104:	f7f1 fdca 	bl	34001c9c <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34010108:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401010c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34010110:	4a5a      	ldr	r2, [pc, #360]	@ (3401027c <HAL_RCCEx_PeriphCLKConfig+0x6890>)
34010112:	4293      	cmp	r3, r2
34010114:	d142      	bne.n	3401019c <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34010116:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401011a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401011c:	2b00      	cmp	r3, #0
3401011e:	d016      	beq.n	3401014e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34010126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401012a:	d010      	beq.n	3401014e <HAL_RCCEx_PeriphCLKConfig+0x6762>
3401012c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34010132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010136:	d00a      	beq.n	3401014e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401013c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3401013e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010142:	d004      	beq.n	3401014e <HAL_RCCEx_PeriphCLKConfig+0x6762>
34010144:	f640 1115 	movw	r1, #2325	@ 0x915
34010148:	4848      	ldr	r0, [pc, #288]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401014a:	f7f1 fda7 	bl	34001c9c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401014e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34010154:	2b00      	cmp	r3, #0
34010156:	d005      	beq.n	34010164 <HAL_RCCEx_PeriphCLKConfig+0x6778>
34010158:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401015c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401015e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010162:	d904      	bls.n	3401016e <HAL_RCCEx_PeriphCLKConfig+0x6782>
34010164:	f640 1116 	movw	r1, #2326	@ 0x916
34010168:	4840      	ldr	r0, [pc, #256]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401016a:	f7f1 fd97 	bl	34001c9c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401016e:	4b40      	ldr	r3, [pc, #256]	@ (34010270 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010170:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34010174:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34010178:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401017c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010180:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34010182:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
34010186:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34010188:	3a01      	subs	r2, #1
3401018a:	0412      	lsls	r2, r2, #16
3401018c:	430a      	orrs	r2, r1
3401018e:	4938      	ldr	r1, [pc, #224]	@ (34010270 <HAL_RCCEx_PeriphCLKConfig+0x6884>)
34010190:	4313      	orrs	r3, r2
34010192:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34010196:	f7f9 fa87 	bl	340096a8 <LL_RCC_IC15_Enable>
3401019a:	e008      	b.n	340101ae <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3401019c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101a0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101a4:	4a34      	ldr	r2, [pc, #208]	@ (34010278 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
340101a6:	4293      	cmp	r3, r2
340101a8:	d101      	bne.n	340101ae <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
340101aa:	f7f9 fbfd 	bl	340099a8 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340101ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101b2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340101ba:	4618      	mov	r0, r3
340101bc:	f7f8 fb34 	bl	34008828 <LL_RCC_SetOTGPHYClockSource>
340101c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101c4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
340101c8:	0fdb      	lsrs	r3, r3, #31
340101ca:	2b01      	cmp	r3, #1
340101cc:	d102      	bne.n	340101d4 <HAL_RCCEx_PeriphCLKConfig+0x67e8>
340101ce:	f7f8 f8e1 	bl	34008394 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
340101d2:	e001      	b.n	340101d8 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
340101d4:	f7f8 f8ce 	bl	34008374 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340101d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101dc:	e9d3 2300 	ldrd	r2, r3, [r3]
340101e0:	2100      	movs	r1, #0
340101e2:	6039      	str	r1, [r7, #0]
340101e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340101e8:	607b      	str	r3, [r7, #4]
340101ea:	e9d7 0100 	ldrd	r0, r1, [r7]
340101ee:	4603      	mov	r3, r0
340101f0:	460a      	mov	r2, r1
340101f2:	4313      	orrs	r3, r2
340101f4:	d023      	beq.n	3401023e <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340101f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340101fa:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
340101fe:	2b00      	cmp	r3, #0
34010200:	d016      	beq.n	34010230 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34010202:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010206:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3401020a:	2b01      	cmp	r3, #1
3401020c:	d010      	beq.n	34010230 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401020e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010212:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010216:	2b02      	cmp	r3, #2
34010218:	d00a      	beq.n	34010230 <HAL_RCCEx_PeriphCLKConfig+0x6844>
3401021a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3401021e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010222:	2b03      	cmp	r3, #3
34010224:	d004      	beq.n	34010230 <HAL_RCCEx_PeriphCLKConfig+0x6844>
34010226:	f44f 6113 	mov.w	r1, #2352	@ 0x930
3401022a:	4810      	ldr	r0, [pc, #64]	@ (3401026c <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3401022c:	f7f1 fd36 	bl	34001c9c <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34010230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34010234:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34010238:	4618      	mov	r0, r3
3401023a:	f7f8 fd31 	bl	34008ca0 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3401023e:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
34010242:	2b00      	cmp	r3, #0
34010244:	d101      	bne.n	3401024a <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
34010246:	2300      	movs	r3, #0
34010248:	e000      	b.n	3401024c <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
3401024a:	2301      	movs	r3, #1
}
3401024c:	4618      	mov	r0, r3
3401024e:	f507 7764 	add.w	r7, r7, #912	@ 0x390
34010252:	46bd      	mov	sp, r7
34010254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34010258:	03000c14 	.word	0x03000c14
3401025c:	03010c14 	.word	0x03010c14
34010260:	03020c14 	.word	0x03020c14
34010264:	03030c14 	.word	0x03030c14
34010268:	83030c14 	.word	0x83030c14
3401026c:	3401e800 	.word	0x3401e800
34010270:	56028000 	.word	0x56028000
34010274:	03001414 	.word	0x03001414
34010278:	03011414 	.word	0x03011414
3401027c:	03021414 	.word	0x03021414
34010280:	03031414 	.word	0x03031414
34010284:	83031414 	.word	0x83031414

34010288 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34010288:	b590      	push	{r4, r7, lr}
3401028a:	b085      	sub	sp, #20
3401028c:	af00      	add	r7, sp, #0
3401028e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34010292:	2100      	movs	r1, #0
34010294:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34010296:	e9d7 0100 	ldrd	r0, r1, [r7]
3401029a:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
3401029e:	ea50 0104 	orrs.w	r1, r0, r4
340102a2:	f000 8436 	beq.w	34010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
340102a6:	e9d7 0100 	ldrd	r0, r1, [r7]
340102aa:	2801      	cmp	r0, #1
340102ac:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
340102b0:	f080 8434 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102b4:	e9d7 0100 	ldrd	r0, r1, [r7]
340102b8:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
340102bc:	ea50 0104 	orrs.w	r1, r0, r4
340102c0:	f000 8422 	beq.w	34010b08 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
340102c4:	e9d7 0100 	ldrd	r0, r1, [r7]
340102c8:	2801      	cmp	r0, #1
340102ca:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
340102ce:	f080 8425 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102d2:	e9d7 0100 	ldrd	r0, r1, [r7]
340102d6:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
340102da:	ea50 0104 	orrs.w	r1, r0, r4
340102de:	f000 840e 	beq.w	34010afe <HAL_RCCEx_GetPeriphCLKFreq+0x876>
340102e2:	e9d7 0100 	ldrd	r0, r1, [r7]
340102e6:	2801      	cmp	r0, #1
340102e8:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
340102ec:	f080 8416 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340102f0:	e9d7 0100 	ldrd	r0, r1, [r7]
340102f4:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
340102f8:	ea50 0104 	orrs.w	r1, r0, r4
340102fc:	f000 83fa 	beq.w	34010af4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34010300:	e9d7 0100 	ldrd	r0, r1, [r7]
34010304:	2801      	cmp	r0, #1
34010306:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
3401030a:	f080 8407 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401030e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010312:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34010316:	ea50 0104 	orrs.w	r1, r0, r4
3401031a:	f000 83e6 	beq.w	34010aea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3401031e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010322:	2801      	cmp	r0, #1
34010324:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34010328:	f080 83f8 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401032c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010330:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34010334:	ea50 0104 	orrs.w	r1, r0, r4
34010338:	f000 83d2 	beq.w	34010ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3401033c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010340:	2801      	cmp	r0, #1
34010342:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34010346:	f080 83e9 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401034a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401034e:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34010352:	ea50 0104 	orrs.w	r1, r0, r4
34010356:	f000 83be 	beq.w	34010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3401035a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401035e:	2801      	cmp	r0, #1
34010360:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34010364:	f080 83da 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010368:	e9d7 0100 	ldrd	r0, r1, [r7]
3401036c:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34010370:	ea50 0104 	orrs.w	r1, r0, r4
34010374:	f000 83aa 	beq.w	34010acc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34010378:	e9d7 0100 	ldrd	r0, r1, [r7]
3401037c:	2801      	cmp	r0, #1
3401037e:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34010382:	f080 83cb 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010386:	e9d7 0100 	ldrd	r0, r1, [r7]
3401038a:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
3401038e:	ea50 0104 	orrs.w	r1, r0, r4
34010392:	f000 8396 	beq.w	34010ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
34010396:	e9d7 0100 	ldrd	r0, r1, [r7]
3401039a:	2801      	cmp	r0, #1
3401039c:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
340103a0:	f080 83bc 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103a4:	e9d7 0100 	ldrd	r0, r1, [r7]
340103a8:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
340103ac:	ea50 0104 	orrs.w	r1, r0, r4
340103b0:	f000 8382 	beq.w	34010ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
340103b4:	e9d7 0100 	ldrd	r0, r1, [r7]
340103b8:	2801      	cmp	r0, #1
340103ba:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
340103be:	f080 83ad 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103c2:	e9d7 0100 	ldrd	r0, r1, [r7]
340103c6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
340103ca:	ea50 0104 	orrs.w	r1, r0, r4
340103ce:	f000 836e 	beq.w	34010aae <HAL_RCCEx_GetPeriphCLKFreq+0x826>
340103d2:	e9d7 0100 	ldrd	r0, r1, [r7]
340103d6:	2801      	cmp	r0, #1
340103d8:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
340103dc:	f080 839e 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103e0:	e9d7 0100 	ldrd	r0, r1, [r7]
340103e4:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
340103e8:	ea50 0104 	orrs.w	r1, r0, r4
340103ec:	f000 835a 	beq.w	34010aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
340103f0:	e9d7 0100 	ldrd	r0, r1, [r7]
340103f4:	2801      	cmp	r0, #1
340103f6:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
340103fa:	f080 838f 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340103fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34010402:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
34010406:	ea50 0104 	orrs.w	r1, r0, r4
3401040a:	f000 8346 	beq.w	34010a9a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3401040e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010412:	2801      	cmp	r0, #1
34010414:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34010418:	f080 8380 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401041c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010420:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34010424:	ea50 0104 	orrs.w	r1, r0, r4
34010428:	f000 8332 	beq.w	34010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3401042c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010430:	2801      	cmp	r0, #1
34010432:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34010436:	f080 8371 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401043a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401043e:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
34010442:	ea50 0104 	orrs.w	r1, r0, r4
34010446:	f000 831e 	beq.w	34010a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3401044a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401044e:	2801      	cmp	r0, #1
34010450:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
34010454:	f080 8362 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010458:	e9d7 0100 	ldrd	r0, r1, [r7]
3401045c:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34010460:	ea50 0104 	orrs.w	r1, r0, r4
34010464:	f000 830a 	beq.w	34010a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34010468:	e9d7 0100 	ldrd	r0, r1, [r7]
3401046c:	2801      	cmp	r0, #1
3401046e:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
34010472:	f080 8353 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010476:	e9d7 0100 	ldrd	r0, r1, [r7]
3401047a:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
3401047e:	ea50 0104 	orrs.w	r1, r0, r4
34010482:	f000 82f6 	beq.w	34010a72 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
34010486:	e9d7 0100 	ldrd	r0, r1, [r7]
3401048a:	2801      	cmp	r0, #1
3401048c:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34010490:	f080 8344 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010494:	e9d7 0100 	ldrd	r0, r1, [r7]
34010498:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
3401049c:	ea50 0104 	orrs.w	r1, r0, r4
340104a0:	f000 82e2 	beq.w	34010a68 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
340104a4:	e9d7 0100 	ldrd	r0, r1, [r7]
340104a8:	2801      	cmp	r0, #1
340104aa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
340104ae:	f080 8335 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104b2:	e9d7 0100 	ldrd	r0, r1, [r7]
340104b6:	f1a1 0420 	sub.w	r4, r1, #32
340104ba:	ea50 0104 	orrs.w	r1, r0, r4
340104be:	f000 82ce 	beq.w	34010a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
340104c2:	e9d7 0100 	ldrd	r0, r1, [r7]
340104c6:	2801      	cmp	r0, #1
340104c8:	f171 0120 	sbcs.w	r1, r1, #32
340104cc:	f080 8326 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104d0:	e9d7 0100 	ldrd	r0, r1, [r7]
340104d4:	f1a1 0410 	sub.w	r4, r1, #16
340104d8:	ea50 0104 	orrs.w	r1, r0, r4
340104dc:	f000 82ba 	beq.w	34010a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
340104e0:	e9d7 0100 	ldrd	r0, r1, [r7]
340104e4:	2801      	cmp	r0, #1
340104e6:	f171 0110 	sbcs.w	r1, r1, #16
340104ea:	f080 8317 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340104ee:	e9d7 0100 	ldrd	r0, r1, [r7]
340104f2:	f1a1 0408 	sub.w	r4, r1, #8
340104f6:	ea50 0104 	orrs.w	r1, r0, r4
340104fa:	f000 82a6 	beq.w	34010a4a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
340104fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34010502:	2801      	cmp	r0, #1
34010504:	f171 0108 	sbcs.w	r1, r1, #8
34010508:	f080 8308 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401050c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010510:	1f0c      	subs	r4, r1, #4
34010512:	ea50 0104 	orrs.w	r1, r0, r4
34010516:	f000 8293 	beq.w	34010a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3401051a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401051e:	2801      	cmp	r0, #1
34010520:	f171 0104 	sbcs.w	r1, r1, #4
34010524:	f080 82fa 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010528:	e9d7 0100 	ldrd	r0, r1, [r7]
3401052c:	1e8c      	subs	r4, r1, #2
3401052e:	ea50 0104 	orrs.w	r1, r0, r4
34010532:	f000 8280 	beq.w	34010a36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34010536:	e9d7 0100 	ldrd	r0, r1, [r7]
3401053a:	2801      	cmp	r0, #1
3401053c:	f171 0102 	sbcs.w	r1, r1, #2
34010540:	f080 82ec 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010544:	e9d7 0100 	ldrd	r0, r1, [r7]
34010548:	1e4c      	subs	r4, r1, #1
3401054a:	ea50 0104 	orrs.w	r1, r0, r4
3401054e:	f000 826d 	beq.w	34010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
34010552:	e9d7 0100 	ldrd	r0, r1, [r7]
34010556:	2801      	cmp	r0, #1
34010558:	f171 0101 	sbcs.w	r1, r1, #1
3401055c:	f080 82de 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010560:	e9d7 0100 	ldrd	r0, r1, [r7]
34010564:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34010568:	4321      	orrs	r1, r4
3401056a:	f000 825a 	beq.w	34010a22 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3401056e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010572:	4cda      	ldr	r4, [pc, #872]	@ (340108dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
34010574:	42a0      	cmp	r0, r4
34010576:	f171 0100 	sbcs.w	r1, r1, #0
3401057a:	f080 82cf 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401057e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010582:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
34010586:	4321      	orrs	r1, r4
34010588:	f000 8246 	beq.w	34010a18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
3401058c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010590:	4cd3      	ldr	r4, [pc, #844]	@ (340108e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
34010592:	42a0      	cmp	r0, r4
34010594:	f171 0100 	sbcs.w	r1, r1, #0
34010598:	f080 82c0 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401059c:	e9d7 0100 	ldrd	r0, r1, [r7]
340105a0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
340105a4:	4321      	orrs	r1, r4
340105a6:	f000 8232 	beq.w	34010a0e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
340105aa:	e9d7 0100 	ldrd	r0, r1, [r7]
340105ae:	4ccd      	ldr	r4, [pc, #820]	@ (340108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
340105b0:	42a0      	cmp	r0, r4
340105b2:	f171 0100 	sbcs.w	r1, r1, #0
340105b6:	f080 82b1 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340105be:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
340105c2:	4321      	orrs	r1, r4
340105c4:	f000 821e 	beq.w	34010a04 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
340105c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340105cc:	4cc6      	ldr	r4, [pc, #792]	@ (340108e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
340105ce:	42a0      	cmp	r0, r4
340105d0:	f171 0100 	sbcs.w	r1, r1, #0
340105d4:	f080 82a2 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105d8:	e9d7 0100 	ldrd	r0, r1, [r7]
340105dc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
340105e0:	4321      	orrs	r1, r4
340105e2:	f000 820b 	beq.w	340109fc <HAL_RCCEx_GetPeriphCLKFreq+0x774>
340105e6:	e9d7 0100 	ldrd	r0, r1, [r7]
340105ea:	4cc0      	ldr	r4, [pc, #768]	@ (340108ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
340105ec:	42a0      	cmp	r0, r4
340105ee:	f171 0100 	sbcs.w	r1, r1, #0
340105f2:	f080 8293 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340105f6:	e9d7 0100 	ldrd	r0, r1, [r7]
340105fa:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
340105fe:	4321      	orrs	r1, r4
34010600:	f000 81f7 	beq.w	340109f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34010604:	e9d7 0100 	ldrd	r0, r1, [r7]
34010608:	4cb9      	ldr	r4, [pc, #740]	@ (340108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3401060a:	42a0      	cmp	r0, r4
3401060c:	f171 0100 	sbcs.w	r1, r1, #0
34010610:	f080 8284 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010614:	e9d7 0100 	ldrd	r0, r1, [r7]
34010618:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
3401061c:	4321      	orrs	r1, r4
3401061e:	f000 81e2 	beq.w	340109e6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34010622:	e9d7 0100 	ldrd	r0, r1, [r7]
34010626:	4cb3      	ldr	r4, [pc, #716]	@ (340108f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34010628:	42a0      	cmp	r0, r4
3401062a:	f171 0100 	sbcs.w	r1, r1, #0
3401062e:	f080 8275 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010632:	e9d7 0100 	ldrd	r0, r1, [r7]
34010636:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3401063a:	4321      	orrs	r1, r4
3401063c:	f000 81cd 	beq.w	340109da <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34010640:	e9d7 0100 	ldrd	r0, r1, [r7]
34010644:	4cac      	ldr	r4, [pc, #688]	@ (340108f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34010646:	42a0      	cmp	r0, r4
34010648:	f171 0100 	sbcs.w	r1, r1, #0
3401064c:	f080 8266 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010650:	e9d7 0100 	ldrd	r0, r1, [r7]
34010654:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34010658:	4321      	orrs	r1, r4
3401065a:	f000 81b8 	beq.w	340109ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
3401065e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010662:	4ca6      	ldr	r4, [pc, #664]	@ (340108fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
34010664:	42a0      	cmp	r0, r4
34010666:	f171 0100 	sbcs.w	r1, r1, #0
3401066a:	f080 8257 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401066e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010672:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
34010676:	4321      	orrs	r1, r4
34010678:	f000 81a4 	beq.w	340109c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
3401067c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010680:	4c9f      	ldr	r4, [pc, #636]	@ (34010900 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
34010682:	42a0      	cmp	r0, r4
34010684:	f171 0100 	sbcs.w	r1, r1, #0
34010688:	f080 8248 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401068c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010690:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
34010694:	4321      	orrs	r1, r4
34010696:	f000 8190 	beq.w	340109ba <HAL_RCCEx_GetPeriphCLKFreq+0x732>
3401069a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401069e:	4c99      	ldr	r4, [pc, #612]	@ (34010904 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
340106a0:	42a0      	cmp	r0, r4
340106a2:	f171 0100 	sbcs.w	r1, r1, #0
340106a6:	f080 8239 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106aa:	e9d7 0100 	ldrd	r0, r1, [r7]
340106ae:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
340106b2:	4321      	orrs	r1, r4
340106b4:	f000 817c 	beq.w	340109b0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
340106b8:	e9d7 0100 	ldrd	r0, r1, [r7]
340106bc:	4c92      	ldr	r4, [pc, #584]	@ (34010908 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
340106be:	42a0      	cmp	r0, r4
340106c0:	f171 0100 	sbcs.w	r1, r1, #0
340106c4:	f080 822a 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106c8:	e9d7 0100 	ldrd	r0, r1, [r7]
340106cc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
340106d0:	4321      	orrs	r1, r4
340106d2:	f000 8168 	beq.w	340109a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
340106d6:	e9d7 0100 	ldrd	r0, r1, [r7]
340106da:	4c8c      	ldr	r4, [pc, #560]	@ (3401090c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
340106dc:	42a0      	cmp	r0, r4
340106de:	f171 0100 	sbcs.w	r1, r1, #0
340106e2:	f080 821b 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340106e6:	e9d7 0100 	ldrd	r0, r1, [r7]
340106ea:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
340106ee:	4321      	orrs	r1, r4
340106f0:	f000 8154 	beq.w	3401099c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
340106f4:	e9d7 0100 	ldrd	r0, r1, [r7]
340106f8:	4c85      	ldr	r4, [pc, #532]	@ (34010910 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
340106fa:	42a0      	cmp	r0, r4
340106fc:	f171 0100 	sbcs.w	r1, r1, #0
34010700:	f080 820c 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010704:	e9d7 0100 	ldrd	r0, r1, [r7]
34010708:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
3401070c:	4321      	orrs	r1, r4
3401070e:	f000 8140 	beq.w	34010992 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34010712:	e9d7 0100 	ldrd	r0, r1, [r7]
34010716:	4c7f      	ldr	r4, [pc, #508]	@ (34010914 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34010718:	42a0      	cmp	r0, r4
3401071a:	f171 0100 	sbcs.w	r1, r1, #0
3401071e:	f080 81fd 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010722:	e9d7 0100 	ldrd	r0, r1, [r7]
34010726:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3401072a:	4321      	orrs	r1, r4
3401072c:	f000 812c 	beq.w	34010988 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34010730:	e9d7 0100 	ldrd	r0, r1, [r7]
34010734:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34010738:	f171 0100 	sbcs.w	r1, r1, #0
3401073c:	f080 81ee 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010740:	e9d7 0100 	ldrd	r0, r1, [r7]
34010744:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34010748:	4321      	orrs	r1, r4
3401074a:	f000 8118 	beq.w	3401097e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3401074e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010752:	f248 0401 	movw	r4, #32769	@ 0x8001
34010756:	42a0      	cmp	r0, r4
34010758:	f171 0100 	sbcs.w	r1, r1, #0
3401075c:	f080 81de 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010760:	e9d7 0100 	ldrd	r0, r1, [r7]
34010764:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34010768:	4321      	orrs	r1, r4
3401076a:	f000 8103 	beq.w	34010974 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3401076e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010772:	f244 0401 	movw	r4, #16385	@ 0x4001
34010776:	42a0      	cmp	r0, r4
34010778:	f171 0100 	sbcs.w	r1, r1, #0
3401077c:	f080 81ce 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010780:	e9d7 0100 	ldrd	r0, r1, [r7]
34010784:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34010788:	4321      	orrs	r1, r4
3401078a:	f000 80ee 	beq.w	3401096a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3401078e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010792:	f242 0401 	movw	r4, #8193	@ 0x2001
34010796:	42a0      	cmp	r0, r4
34010798:	f171 0100 	sbcs.w	r1, r1, #0
3401079c:	f080 81be 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107a0:	e9d7 0100 	ldrd	r0, r1, [r7]
340107a4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
340107a8:	4321      	orrs	r1, r4
340107aa:	f000 80d9 	beq.w	34010960 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340107ae:	e9d7 0100 	ldrd	r0, r1, [r7]
340107b2:	f241 0401 	movw	r4, #4097	@ 0x1001
340107b6:	42a0      	cmp	r0, r4
340107b8:	f171 0100 	sbcs.w	r1, r1, #0
340107bc:	f080 81ae 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107c0:	e9d7 0100 	ldrd	r0, r1, [r7]
340107c4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
340107c8:	4321      	orrs	r1, r4
340107ca:	f000 80c4 	beq.w	34010956 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
340107ce:	e9d7 0100 	ldrd	r0, r1, [r7]
340107d2:	f640 0401 	movw	r4, #2049	@ 0x801
340107d6:	42a0      	cmp	r0, r4
340107d8:	f171 0100 	sbcs.w	r1, r1, #0
340107dc:	f080 819e 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340107e0:	e9d7 0100 	ldrd	r0, r1, [r7]
340107e4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
340107e8:	4321      	orrs	r1, r4
340107ea:	f000 80af 	beq.w	3401094c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340107ee:	e9d7 0100 	ldrd	r0, r1, [r7]
340107f2:	f240 4401 	movw	r4, #1025	@ 0x401
340107f6:	42a0      	cmp	r0, r4
340107f8:	f171 0100 	sbcs.w	r1, r1, #0
340107fc:	f080 818e 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010800:	e9d7 0100 	ldrd	r0, r1, [r7]
34010804:	2821      	cmp	r0, #33	@ 0x21
34010806:	f171 0100 	sbcs.w	r1, r1, #0
3401080a:	d255      	bcs.n	340108b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
3401080c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010810:	4301      	orrs	r1, r0
34010812:	f000 8183 	beq.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010816:	e9d7 0100 	ldrd	r0, r1, [r7]
3401081a:	1e42      	subs	r2, r0, #1
3401081c:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
34010820:	2a20      	cmp	r2, #32
34010822:	f173 0100 	sbcs.w	r1, r3, #0
34010826:	f080 8179 	bcs.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401082a:	2a1f      	cmp	r2, #31
3401082c:	f200 8176 	bhi.w	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010830:	a101      	add	r1, pc, #4	@ (adr r1, 34010838 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34010832:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34010836:	bf00      	nop
34010838:	340108c7 	.word	0x340108c7
3401083c:	340108d1 	.word	0x340108d1
34010840:	34010b1d 	.word	0x34010b1d
34010844:	34010921 	.word	0x34010921
34010848:	34010b1d 	.word	0x34010b1d
3401084c:	34010b1d 	.word	0x34010b1d
34010850:	34010b1d 	.word	0x34010b1d
34010854:	34010919 	.word	0x34010919
34010858:	34010b1d 	.word	0x34010b1d
3401085c:	34010b1d 	.word	0x34010b1d
34010860:	34010b1d 	.word	0x34010b1d
34010864:	34010b1d 	.word	0x34010b1d
34010868:	34010b1d 	.word	0x34010b1d
3401086c:	34010b1d 	.word	0x34010b1d
34010870:	34010b1d 	.word	0x34010b1d
34010874:	3401092b 	.word	0x3401092b
34010878:	34010b1d 	.word	0x34010b1d
3401087c:	34010b1d 	.word	0x34010b1d
34010880:	34010b1d 	.word	0x34010b1d
34010884:	34010b1d 	.word	0x34010b1d
34010888:	34010b1d 	.word	0x34010b1d
3401088c:	34010b1d 	.word	0x34010b1d
34010890:	34010b1d 	.word	0x34010b1d
34010894:	34010b1d 	.word	0x34010b1d
34010898:	34010b1d 	.word	0x34010b1d
3401089c:	34010b1d 	.word	0x34010b1d
340108a0:	34010b1d 	.word	0x34010b1d
340108a4:	34010b1d 	.word	0x34010b1d
340108a8:	34010b1d 	.word	0x34010b1d
340108ac:	34010b1d 	.word	0x34010b1d
340108b0:	34010b1d 	.word	0x34010b1d
340108b4:	34010937 	.word	0x34010937
340108b8:	e9d7 2300 	ldrd	r2, r3, [r7]
340108bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
340108c0:	430b      	orrs	r3, r1
340108c2:	d03e      	beq.n	34010942 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
340108c4:	e12a      	b.n	34010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
340108c6:	2070      	movs	r0, #112	@ 0x70
340108c8:	f000 fb90 	bl	34010fec <RCCEx_GetADCCLKFreq>
340108cc:	60f8      	str	r0, [r7, #12]
      break;
340108ce:	e126      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
340108d0:	2007      	movs	r0, #7
340108d2:	f000 fc8d 	bl	340111f0 <RCCEx_GetADFCLKFreq>
340108d6:	60f8      	str	r0, [r7, #12]
      break;
340108d8:	e121      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
340108da:	bf00      	nop
340108dc:	80000001 	.word	0x80000001
340108e0:	40000001 	.word	0x40000001
340108e4:	20000001 	.word	0x20000001
340108e8:	10000001 	.word	0x10000001
340108ec:	08000001 	.word	0x08000001
340108f0:	04000001 	.word	0x04000001
340108f4:	02000001 	.word	0x02000001
340108f8:	01000001 	.word	0x01000001
340108fc:	00800001 	.word	0x00800001
34010900:	00400001 	.word	0x00400001
34010904:	00200001 	.word	0x00200001
34010908:	00100001 	.word	0x00100001
3401090c:	00080001 	.word	0x00080001
34010910:	00040001 	.word	0x00040001
34010914:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34010918:	f000 ff0c 	bl	34011734 <RCCEx_GetCSICLKFreq>
3401091c:	60f8      	str	r0, [r7, #12]
      break;
3401091e:	e0fe      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34010920:	2007      	movs	r0, #7
34010922:	f000 fd51 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34010926:	60f8      	str	r0, [r7, #12]
      break;
34010928:	e0f9      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
3401092a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3401092e:	f000 ff4d 	bl	340117cc <RCCEx_GetDCMIPPCLKFreq>
34010932:	60f8      	str	r0, [r7, #12]
      break;
34010934:	e0f3      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34010936:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
3401093a:	f000 ffd1 	bl	340118e0 <RCCEx_GetETH1CLKFreq>
3401093e:	60f8      	str	r0, [r7, #12]
      break;
34010940:	e0ed      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34010942:	2003      	movs	r0, #3
34010944:	f001 f84c 	bl	340119e0 <RCCEx_GetETH1PTPCLKFreq>
34010948:	60f8      	str	r0, [r7, #12]
      break;
3401094a:	e0e8      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
3401094c:	2003      	movs	r0, #3
3401094e:	f001 f8cb 	bl	34011ae8 <RCCEx_GetFDCANCLKFreq>
34010952:	60f8      	str	r0, [r7, #12]
      break;
34010954:	e0e3      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34010956:	2030      	movs	r0, #48	@ 0x30
34010958:	f001 f946 	bl	34011be8 <RCCEx_GetFMCCLKFreq>
3401095c:	60f8      	str	r0, [r7, #12]
      break;
3401095e:	e0de      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34010960:	4871      	ldr	r0, [pc, #452]	@ (34010b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34010962:	f001 f9f9 	bl	34011d58 <RCCEx_GetI2CCLKFreq>
34010966:	60f8      	str	r0, [r7, #12]
      break;
34010968:	e0d9      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3401096a:	4870      	ldr	r0, [pc, #448]	@ (34010b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
3401096c:	f001 f9f4 	bl	34011d58 <RCCEx_GetI2CCLKFreq>
34010970:	60f8      	str	r0, [r7, #12]
      break;
34010972:	e0d4      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34010974:	486e      	ldr	r0, [pc, #440]	@ (34010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34010976:	f001 f9ef 	bl	34011d58 <RCCEx_GetI2CCLKFreq>
3401097a:	60f8      	str	r0, [r7, #12]
      break;
3401097c:	e0cf      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3401097e:	486d      	ldr	r0, [pc, #436]	@ (34010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34010980:	f001 f9ea 	bl	34011d58 <RCCEx_GetI2CCLKFreq>
34010984:	60f8      	str	r0, [r7, #12]
      break;
34010986:	e0ca      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34010988:	486b      	ldr	r0, [pc, #428]	@ (34010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
3401098a:	f001 fb8d 	bl	340120a8 <RCCEx_GetI3CCLKFreq>
3401098e:	60f8      	str	r0, [r7, #12]
      break;
34010990:	e0c5      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34010992:	486a      	ldr	r0, [pc, #424]	@ (34010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34010994:	f001 fb88 	bl	340120a8 <RCCEx_GetI3CCLKFreq>
34010998:	60f8      	str	r0, [r7, #12]
      break;
3401099a:	e0c0      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3401099c:	4868      	ldr	r0, [pc, #416]	@ (34010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
3401099e:	f001 fcb7 	bl	34012310 <RCCEx_GetLPTIMCLKFreq>
340109a2:	60f8      	str	r0, [r7, #12]
      break;
340109a4:	e0bb      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
340109a6:	4867      	ldr	r0, [pc, #412]	@ (34010b44 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
340109a8:	f001 fcb2 	bl	34012310 <RCCEx_GetLPTIMCLKFreq>
340109ac:	60f8      	str	r0, [r7, #12]
      break;
340109ae:	e0b6      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
340109b0:	4865      	ldr	r0, [pc, #404]	@ (34010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
340109b2:	f001 fcad 	bl	34012310 <RCCEx_GetLPTIMCLKFreq>
340109b6:	60f8      	str	r0, [r7, #12]
      break;
340109b8:	e0b1      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340109ba:	4864      	ldr	r0, [pc, #400]	@ (34010b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
340109bc:	f001 fca8 	bl	34012310 <RCCEx_GetLPTIMCLKFreq>
340109c0:	60f8      	str	r0, [r7, #12]
      break;
340109c2:	e0ac      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340109c4:	4862      	ldr	r0, [pc, #392]	@ (34010b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
340109c6:	f001 fca3 	bl	34012310 <RCCEx_GetLPTIMCLKFreq>
340109ca:	60f8      	str	r0, [r7, #12]
      break;
340109cc:	e0a7      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
340109ce:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
340109d2:	f001 fe47 	bl	34012664 <RCCEx_GetLPUARTCLKFreq>
340109d6:	60f8      	str	r0, [r7, #12]
      break;
340109d8:	e0a1      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
340109da:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
340109de:	f001 ff43 	bl	34012868 <RCCEx_GetLTDCCLKFreq>
340109e2:	60f8      	str	r0, [r7, #12]
      break;
340109e4:	e09b      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
340109e6:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
340109ea:	f001 ffc7 	bl	3401297c <RCCEx_GetMDFCLKFreq>
340109ee:	60f8      	str	r0, [r7, #12]
      break;
340109f0:	e095      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
340109f2:	2030      	movs	r0, #48	@ 0x30
340109f4:	f002 f8cc 	bl	34012b90 <RCCEx_GetPSSICLKFreq>
340109f8:	60f8      	str	r0, [r7, #12]
      break;
340109fa:	e090      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
340109fc:	f002 f94a 	bl	34012c94 <RCCEx_GetRTCCLKFreq>
34010a00:	60f8      	str	r0, [r7, #12]
      break;
34010a02:	e08c      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34010a04:	4853      	ldr	r0, [pc, #332]	@ (34010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34010a06:	f002 f997 	bl	34012d38 <RCCEx_GetSAICLKFreq>
34010a0a:	60f8      	str	r0, [r7, #12]
      break;
34010a0c:	e087      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34010a0e:	4852      	ldr	r0, [pc, #328]	@ (34010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34010a10:	f002 f992 	bl	34012d38 <RCCEx_GetSAICLKFreq>
34010a14:	60f8      	str	r0, [r7, #12]
      break;
34010a16:	e082      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34010a18:	4850      	ldr	r0, [pc, #320]	@ (34010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34010a1a:	f002 faf3 	bl	34013004 <RCCEx_GetSDMMCCLKFreq>
34010a1e:	60f8      	str	r0, [r7, #12]
      break;
34010a20:	e07d      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34010a22:	484f      	ldr	r0, [pc, #316]	@ (34010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34010a24:	f002 faee 	bl	34013004 <RCCEx_GetSDMMCCLKFreq>
34010a28:	60f8      	str	r0, [r7, #12]
      break;
34010a2a:	e078      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34010a2c:	2007      	movs	r0, #7
34010a2e:	f002 fbd3 	bl	340131d8 <RCCEx_GetSPDIFRXCLKFreq>
34010a32:	60f8      	str	r0, [r7, #12]
      break;
34010a34:	e073      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34010a36:	484b      	ldr	r0, [pc, #300]	@ (34010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34010a38:	f002 fcb2 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a3c:	60f8      	str	r0, [r7, #12]
      break;
34010a3e:	e06e      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34010a40:	4849      	ldr	r0, [pc, #292]	@ (34010b68 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34010a42:	f002 fcad 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a46:	60f8      	str	r0, [r7, #12]
      break;
34010a48:	e069      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34010a4a:	4848      	ldr	r0, [pc, #288]	@ (34010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34010a4c:	f002 fca8 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a50:	60f8      	str	r0, [r7, #12]
      break;
34010a52:	e064      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34010a54:	4846      	ldr	r0, [pc, #280]	@ (34010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34010a56:	f002 fca3 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a5a:	60f8      	str	r0, [r7, #12]
      break;
34010a5c:	e05f      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34010a5e:	4845      	ldr	r0, [pc, #276]	@ (34010b74 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34010a60:	f002 fc9e 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a64:	60f8      	str	r0, [r7, #12]
      break;
34010a66:	e05a      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34010a68:	4843      	ldr	r0, [pc, #268]	@ (34010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34010a6a:	f002 fc99 	bl	340133a0 <RCCEx_GetSPICLKFreq>
34010a6e:	60f8      	str	r0, [r7, #12]
      break;
34010a70:	e055      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34010a72:	4842      	ldr	r0, [pc, #264]	@ (34010b7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34010a74:	f003 f990 	bl	34013d98 <RCCEx_GetUSARTCLKFreq>
34010a78:	60f8      	str	r0, [r7, #12]
      break;
34010a7a:	e050      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34010a7c:	4840      	ldr	r0, [pc, #256]	@ (34010b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34010a7e:	f003 f98b 	bl	34013d98 <RCCEx_GetUSARTCLKFreq>
34010a82:	60f8      	str	r0, [r7, #12]
      break;
34010a84:	e04b      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34010a86:	483f      	ldr	r0, [pc, #252]	@ (34010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34010a88:	f003 f986 	bl	34013d98 <RCCEx_GetUSARTCLKFreq>
34010a8c:	60f8      	str	r0, [r7, #12]
      break;
34010a8e:	e046      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34010a90:	483d      	ldr	r0, [pc, #244]	@ (34010b88 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34010a92:	f002 ff57 	bl	34013944 <RCCEx_GetUARTCLKFreq>
34010a96:	60f8      	str	r0, [r7, #12]
      break;
34010a98:	e041      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34010a9a:	483c      	ldr	r0, [pc, #240]	@ (34010b8c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34010a9c:	f002 ff52 	bl	34013944 <RCCEx_GetUARTCLKFreq>
34010aa0:	60f8      	str	r0, [r7, #12]
      break;
34010aa2:	e03c      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34010aa4:	483a      	ldr	r0, [pc, #232]	@ (34010b90 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34010aa6:	f003 f977 	bl	34013d98 <RCCEx_GetUSARTCLKFreq>
34010aaa:	60f8      	str	r0, [r7, #12]
      break;
34010aac:	e037      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34010aae:	4839      	ldr	r0, [pc, #228]	@ (34010b94 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34010ab0:	f002 ff48 	bl	34013944 <RCCEx_GetUARTCLKFreq>
34010ab4:	60f8      	str	r0, [r7, #12]
      break;
34010ab6:	e032      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34010ab8:	4837      	ldr	r0, [pc, #220]	@ (34010b98 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34010aba:	f002 ff43 	bl	34013944 <RCCEx_GetUARTCLKFreq>
34010abe:	60f8      	str	r0, [r7, #12]
      break;
34010ac0:	e02d      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34010ac2:	4836      	ldr	r0, [pc, #216]	@ (34010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34010ac4:	f002 ff3e 	bl	34013944 <RCCEx_GetUARTCLKFreq>
34010ac8:	60f8      	str	r0, [r7, #12]
      break;
34010aca:	e028      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34010acc:	4834      	ldr	r0, [pc, #208]	@ (34010ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34010ace:	f003 f963 	bl	34013d98 <RCCEx_GetUSARTCLKFreq>
34010ad2:	60f8      	str	r0, [r7, #12]
      break;
34010ad4:	e023      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34010ad6:	4833      	ldr	r0, [pc, #204]	@ (34010ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34010ad8:	f003 fc3e 	bl	34014358 <RCCEx_GetOTGPHYCKREFCLKFreq>
34010adc:	60f8      	str	r0, [r7, #12]
      break;
34010ade:	e01e      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34010ae0:	4831      	ldr	r0, [pc, #196]	@ (34010ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34010ae2:	f003 fb83 	bl	340141ec <RCCEx_GetOTGPHYCLKFreq>
34010ae6:	60f8      	str	r0, [r7, #12]
      break;
34010ae8:	e019      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34010aea:	4830      	ldr	r0, [pc, #192]	@ (34010bac <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34010aec:	f003 fc34 	bl	34014358 <RCCEx_GetOTGPHYCKREFCLKFreq>
34010af0:	60f8      	str	r0, [r7, #12]
      break;
34010af2:	e014      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34010af4:	482e      	ldr	r0, [pc, #184]	@ (34010bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34010af6:	f003 fb79 	bl	340141ec <RCCEx_GetOTGPHYCLKFreq>
34010afa:	60f8      	str	r0, [r7, #12]
      break;
34010afc:	e00f      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34010afe:	482d      	ldr	r0, [pc, #180]	@ (34010bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34010b00:	f003 fc7a 	bl	340143f8 <RCCEx_GetXSPICLKFreq>
34010b04:	60f8      	str	r0, [r7, #12]
      break;
34010b06:	e00a      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34010b08:	482b      	ldr	r0, [pc, #172]	@ (34010bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34010b0a:	f003 fc75 	bl	340143f8 <RCCEx_GetXSPICLKFreq>
34010b0e:	60f8      	str	r0, [r7, #12]
      break;
34010b10:	e005      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34010b12:	482a      	ldr	r0, [pc, #168]	@ (34010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34010b14:	f003 fc70 	bl	340143f8 <RCCEx_GetXSPICLKFreq>
34010b18:	60f8      	str	r0, [r7, #12]
      break;
34010b1a:	e000      	b.n	34010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34010b1c:	bf00      	nop
  }

  return frequency;
34010b1e:	68fb      	ldr	r3, [r7, #12]
}
34010b20:	4618      	mov	r0, r3
34010b22:	3714      	adds	r7, #20
34010b24:	46bd      	mov	sp, r7
34010b26:	bd90      	pop	{r4, r7, pc}
34010b28:	0700000c 	.word	0x0700000c
34010b2c:	0700040c 	.word	0x0700040c
34010b30:	0700080c 	.word	0x0700080c
34010b34:	07000c0c 	.word	0x07000c0c
34010b38:	0700100c 	.word	0x0700100c
34010b3c:	0700140c 	.word	0x0700140c
34010b40:	0700082c 	.word	0x0700082c
34010b44:	07000c2c 	.word	0x07000c2c
34010b48:	0700102c 	.word	0x0700102c
34010b4c:	0700142c 	.word	0x0700142c
34010b50:	0700182c 	.word	0x0700182c
34010b54:	07001418 	.word	0x07001418
34010b58:	07001818 	.word	0x07001818
34010b5c:	0300001c 	.word	0x0300001c
34010b60:	0300041c 	.word	0x0300041c
34010b64:	07000420 	.word	0x07000420
34010b68:	07000820 	.word	0x07000820
34010b6c:	07000c20 	.word	0x07000c20
34010b70:	07001020 	.word	0x07001020
34010b74:	07001420 	.word	0x07001420
34010b78:	07001820 	.word	0x07001820
34010b7c:	07000030 	.word	0x07000030
34010b80:	07000430 	.word	0x07000430
34010b84:	07000830 	.word	0x07000830
34010b88:	07000c30 	.word	0x07000c30
34010b8c:	07001030 	.word	0x07001030
34010b90:	07001430 	.word	0x07001430
34010b94:	07001830 	.word	0x07001830
34010b98:	07001c30 	.word	0x07001c30
34010b9c:	07000034 	.word	0x07000034
34010ba0:	07000434 	.word	0x07000434
34010ba4:	01001014 	.word	0x01001014
34010ba8:	03000c14 	.word	0x03000c14
34010bac:	01001814 	.word	0x01001814
34010bb0:	03001414 	.word	0x03001414
34010bb4:	03000014 	.word	0x03000014
34010bb8:	03000414 	.word	0x03000414
34010bbc:	03000814 	.word	0x03000814

34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34010bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
34010bc2:	b087      	sub	sp, #28
34010bc4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010bc6:	2300      	movs	r3, #0
34010bc8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34010bca:	f7f8 f89b 	bl	34008d04 <LL_RCC_PLL1_IsReady>
34010bce:	4603      	mov	r3, r0
34010bd0:	2b00      	cmp	r3, #0
34010bd2:	d02a      	beq.n	34010c2a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34010bd4:	f7f8 f8fe 	bl	34008dd4 <LL_RCC_PLL1P_IsEnabled>
34010bd8:	4603      	mov	r3, r0
34010bda:	2b00      	cmp	r3, #0
34010bdc:	d031      	beq.n	34010c42 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010bde:	f7f8 f883 	bl	34008ce8 <LL_RCC_PLL1_GetSource>
34010be2:	4603      	mov	r3, r0
34010be4:	4618      	mov	r0, r3
34010be6:	f000 f957 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010bea:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010bec:	68bb      	ldr	r3, [r7, #8]
34010bee:	2b00      	cmp	r3, #0
34010bf0:	d027      	beq.n	34010c42 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
34010bf2:	f7f8 f8bf 	bl	34008d74 <LL_RCC_PLL1_GetM>
34010bf6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010bf8:	687b      	ldr	r3, [r7, #4]
34010bfa:	2b00      	cmp	r3, #0
34010bfc:	d021      	beq.n	34010c42 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34010bfe:	f7f8 f8a9 	bl	34008d54 <LL_RCC_PLL1_GetN>
34010c02:	4605      	mov	r5, r0
34010c04:	f7f8 f8fa 	bl	34008dfc <LL_RCC_PLL1_GetFRACN>
34010c08:	4606      	mov	r6, r0
34010c0a:	f7f8 f8c3 	bl	34008d94 <LL_RCC_PLL1_GetP1>
34010c0e:	4604      	mov	r4, r0
34010c10:	f7f8 f8d0 	bl	34008db4 <LL_RCC_PLL1_GetP2>
34010c14:	4603      	mov	r3, r0
34010c16:	9301      	str	r3, [sp, #4]
34010c18:	9400      	str	r4, [sp, #0]
34010c1a:	4633      	mov	r3, r6
34010c1c:	462a      	mov	r2, r5
34010c1e:	6879      	ldr	r1, [r7, #4]
34010c20:	68b8      	ldr	r0, [r7, #8]
34010c22:	f000 f997 	bl	34010f54 <RCCEx_CalcPLLFreq>
34010c26:	60f8      	str	r0, [r7, #12]
34010c28:	e00b      	b.n	34010c42 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34010c2a:	f7f8 f87f 	bl	34008d2c <LL_RCC_PLL1_IsEnabledBypass>
34010c2e:	4603      	mov	r3, r0
34010c30:	2b00      	cmp	r3, #0
34010c32:	d006      	beq.n	34010c42 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010c34:	f7f8 f858 	bl	34008ce8 <LL_RCC_PLL1_GetSource>
34010c38:	4603      	mov	r3, r0
34010c3a:	4618      	mov	r0, r3
34010c3c:	f000 f92c 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010c40:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010c42:	68fb      	ldr	r3, [r7, #12]
}
34010c44:	4618      	mov	r0, r3
34010c46:	3714      	adds	r7, #20
34010c48:	46bd      	mov	sp, r7
34010c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010c4c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34010c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
34010c4e:	b087      	sub	sp, #28
34010c50:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010c52:	2300      	movs	r3, #0
34010c54:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34010c56:	f7f8 f8ed 	bl	34008e34 <LL_RCC_PLL2_IsReady>
34010c5a:	4603      	mov	r3, r0
34010c5c:	2b00      	cmp	r3, #0
34010c5e:	d02a      	beq.n	34010cb6 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34010c60:	f7f8 f950 	bl	34008f04 <LL_RCC_PLL2P_IsEnabled>
34010c64:	4603      	mov	r3, r0
34010c66:	2b00      	cmp	r3, #0
34010c68:	d031      	beq.n	34010cce <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010c6a:	f7f8 f8d5 	bl	34008e18 <LL_RCC_PLL2_GetSource>
34010c6e:	4603      	mov	r3, r0
34010c70:	4618      	mov	r0, r3
34010c72:	f000 f911 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010c76:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010c78:	68bb      	ldr	r3, [r7, #8]
34010c7a:	2b00      	cmp	r3, #0
34010c7c:	d027      	beq.n	34010cce <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
34010c7e:	f7f8 f911 	bl	34008ea4 <LL_RCC_PLL2_GetM>
34010c82:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010c84:	687b      	ldr	r3, [r7, #4]
34010c86:	2b00      	cmp	r3, #0
34010c88:	d021      	beq.n	34010cce <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34010c8a:	f7f8 f8fb 	bl	34008e84 <LL_RCC_PLL2_GetN>
34010c8e:	4605      	mov	r5, r0
34010c90:	f7f8 f94c 	bl	34008f2c <LL_RCC_PLL2_GetFRACN>
34010c94:	4606      	mov	r6, r0
34010c96:	f7f8 f915 	bl	34008ec4 <LL_RCC_PLL2_GetP1>
34010c9a:	4604      	mov	r4, r0
34010c9c:	f7f8 f922 	bl	34008ee4 <LL_RCC_PLL2_GetP2>
34010ca0:	4603      	mov	r3, r0
34010ca2:	9301      	str	r3, [sp, #4]
34010ca4:	9400      	str	r4, [sp, #0]
34010ca6:	4633      	mov	r3, r6
34010ca8:	462a      	mov	r2, r5
34010caa:	6879      	ldr	r1, [r7, #4]
34010cac:	68b8      	ldr	r0, [r7, #8]
34010cae:	f000 f951 	bl	34010f54 <RCCEx_CalcPLLFreq>
34010cb2:	60f8      	str	r0, [r7, #12]
34010cb4:	e00b      	b.n	34010cce <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34010cb6:	f7f8 f8d1 	bl	34008e5c <LL_RCC_PLL2_IsEnabledBypass>
34010cba:	4603      	mov	r3, r0
34010cbc:	2b00      	cmp	r3, #0
34010cbe:	d006      	beq.n	34010cce <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010cc0:	f7f8 f8aa 	bl	34008e18 <LL_RCC_PLL2_GetSource>
34010cc4:	4603      	mov	r3, r0
34010cc6:	4618      	mov	r0, r3
34010cc8:	f000 f8e6 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010ccc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010cce:	68fb      	ldr	r3, [r7, #12]
}
34010cd0:	4618      	mov	r0, r3
34010cd2:	3714      	adds	r7, #20
34010cd4:	46bd      	mov	sp, r7
34010cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34010cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
34010cda:	b087      	sub	sp, #28
34010cdc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010cde:	2300      	movs	r3, #0
34010ce0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34010ce2:	f7f8 f93f 	bl	34008f64 <LL_RCC_PLL3_IsReady>
34010ce6:	4603      	mov	r3, r0
34010ce8:	2b00      	cmp	r3, #0
34010cea:	d02a      	beq.n	34010d42 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34010cec:	f7f8 f9a2 	bl	34009034 <LL_RCC_PLL3P_IsEnabled>
34010cf0:	4603      	mov	r3, r0
34010cf2:	2b00      	cmp	r3, #0
34010cf4:	d031      	beq.n	34010d5a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010cf6:	f7f8 f927 	bl	34008f48 <LL_RCC_PLL3_GetSource>
34010cfa:	4603      	mov	r3, r0
34010cfc:	4618      	mov	r0, r3
34010cfe:	f000 f8cb 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010d02:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010d04:	68bb      	ldr	r3, [r7, #8]
34010d06:	2b00      	cmp	r3, #0
34010d08:	d027      	beq.n	34010d5a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34010d0a:	f7f8 f963 	bl	34008fd4 <LL_RCC_PLL3_GetM>
34010d0e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010d10:	687b      	ldr	r3, [r7, #4]
34010d12:	2b00      	cmp	r3, #0
34010d14:	d021      	beq.n	34010d5a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34010d16:	f7f8 f94d 	bl	34008fb4 <LL_RCC_PLL3_GetN>
34010d1a:	4605      	mov	r5, r0
34010d1c:	f7f8 f99e 	bl	3400905c <LL_RCC_PLL3_GetFRACN>
34010d20:	4606      	mov	r6, r0
34010d22:	f7f8 f967 	bl	34008ff4 <LL_RCC_PLL3_GetP1>
34010d26:	4604      	mov	r4, r0
34010d28:	f7f8 f974 	bl	34009014 <LL_RCC_PLL3_GetP2>
34010d2c:	4603      	mov	r3, r0
34010d2e:	9301      	str	r3, [sp, #4]
34010d30:	9400      	str	r4, [sp, #0]
34010d32:	4633      	mov	r3, r6
34010d34:	462a      	mov	r2, r5
34010d36:	6879      	ldr	r1, [r7, #4]
34010d38:	68b8      	ldr	r0, [r7, #8]
34010d3a:	f000 f90b 	bl	34010f54 <RCCEx_CalcPLLFreq>
34010d3e:	60f8      	str	r0, [r7, #12]
34010d40:	e00b      	b.n	34010d5a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34010d42:	f7f8 f923 	bl	34008f8c <LL_RCC_PLL3_IsEnabledBypass>
34010d46:	4603      	mov	r3, r0
34010d48:	2b00      	cmp	r3, #0
34010d4a:	d006      	beq.n	34010d5a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010d4c:	f7f8 f8fc 	bl	34008f48 <LL_RCC_PLL3_GetSource>
34010d50:	4603      	mov	r3, r0
34010d52:	4618      	mov	r0, r3
34010d54:	f000 f8a0 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010d58:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010d5a:	68fb      	ldr	r3, [r7, #12]
}
34010d5c:	4618      	mov	r0, r3
34010d5e:	3714      	adds	r7, #20
34010d60:	46bd      	mov	sp, r7
34010d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010d64 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34010d64:	b5f0      	push	{r4, r5, r6, r7, lr}
34010d66:	b087      	sub	sp, #28
34010d68:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010d6a:	2300      	movs	r3, #0
34010d6c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
34010d6e:	f7f8 f991 	bl	34009094 <LL_RCC_PLL4_IsReady>
34010d72:	4603      	mov	r3, r0
34010d74:	2b00      	cmp	r3, #0
34010d76:	d02a      	beq.n	34010dce <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34010d78:	f7f8 f9f4 	bl	34009164 <LL_RCC_PLL4P_IsEnabled>
34010d7c:	4603      	mov	r3, r0
34010d7e:	2b00      	cmp	r3, #0
34010d80:	d031      	beq.n	34010de6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010d82:	f7f8 f979 	bl	34009078 <LL_RCC_PLL4_GetSource>
34010d86:	4603      	mov	r3, r0
34010d88:	4618      	mov	r0, r3
34010d8a:	f000 f885 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010d8e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010d90:	68bb      	ldr	r3, [r7, #8]
34010d92:	2b00      	cmp	r3, #0
34010d94:	d027      	beq.n	34010de6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
34010d96:	f7f8 f9b5 	bl	34009104 <LL_RCC_PLL4_GetM>
34010d9a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010d9c:	687b      	ldr	r3, [r7, #4]
34010d9e:	2b00      	cmp	r3, #0
34010da0:	d021      	beq.n	34010de6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34010da2:	f7f8 f99f 	bl	340090e4 <LL_RCC_PLL4_GetN>
34010da6:	4605      	mov	r5, r0
34010da8:	f7f8 f9f0 	bl	3400918c <LL_RCC_PLL4_GetFRACN>
34010dac:	4606      	mov	r6, r0
34010dae:	f7f8 f9b9 	bl	34009124 <LL_RCC_PLL4_GetP1>
34010db2:	4604      	mov	r4, r0
34010db4:	f7f8 f9c6 	bl	34009144 <LL_RCC_PLL4_GetP2>
34010db8:	4603      	mov	r3, r0
34010dba:	9301      	str	r3, [sp, #4]
34010dbc:	9400      	str	r4, [sp, #0]
34010dbe:	4633      	mov	r3, r6
34010dc0:	462a      	mov	r2, r5
34010dc2:	6879      	ldr	r1, [r7, #4]
34010dc4:	68b8      	ldr	r0, [r7, #8]
34010dc6:	f000 f8c5 	bl	34010f54 <RCCEx_CalcPLLFreq>
34010dca:	60f8      	str	r0, [r7, #12]
34010dcc:	e00b      	b.n	34010de6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34010dce:	f7f8 f975 	bl	340090bc <LL_RCC_PLL4_IsEnabledBypass>
34010dd2:	4603      	mov	r3, r0
34010dd4:	2b00      	cmp	r3, #0
34010dd6:	d006      	beq.n	34010de6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34010dd8:	f7f8 f94e 	bl	34009078 <LL_RCC_PLL4_GetSource>
34010ddc:	4603      	mov	r3, r0
34010dde:	4618      	mov	r0, r3
34010de0:	f000 f85a 	bl	34010e98 <RCCEx_GetPLLSourceFreq>
34010de4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010de6:	68fb      	ldr	r3, [r7, #12]
}
34010de8:	4618      	mov	r0, r3
34010dea:	3714      	adds	r7, #20
34010dec:	46bd      	mov	sp, r7
34010dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010df0 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34010df0:	b580      	push	{r7, lr}
34010df2:	b082      	sub	sp, #8
34010df4:	af00      	add	r7, sp, #0
34010df6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34010df8:	f7f7 fb60 	bl	340084bc <LL_RCC_GetAHBPrescaler>
34010dfc:	4603      	mov	r3, r0
34010dfe:	0d1b      	lsrs	r3, r3, #20
34010e00:	f003 0307 	and.w	r3, r3, #7
34010e04:	687a      	ldr	r2, [r7, #4]
34010e06:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e0a:	4618      	mov	r0, r3
34010e0c:	3708      	adds	r7, #8
34010e0e:	46bd      	mov	sp, r7
34010e10:	bd80      	pop	{r7, pc}

34010e12 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34010e12:	b580      	push	{r7, lr}
34010e14:	b082      	sub	sp, #8
34010e16:	af00      	add	r7, sp, #0
34010e18:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34010e1a:	f7f7 fb5d 	bl	340084d8 <LL_RCC_GetAPB1Prescaler>
34010e1e:	4603      	mov	r3, r0
34010e20:	f003 0307 	and.w	r3, r3, #7
34010e24:	687a      	ldr	r2, [r7, #4]
34010e26:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e2a:	4618      	mov	r0, r3
34010e2c:	3708      	adds	r7, #8
34010e2e:	46bd      	mov	sp, r7
34010e30:	bd80      	pop	{r7, pc}

34010e32 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34010e32:	b580      	push	{r7, lr}
34010e34:	b082      	sub	sp, #8
34010e36:	af00      	add	r7, sp, #0
34010e38:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34010e3a:	f7f7 fb5b 	bl	340084f4 <LL_RCC_GetAPB2Prescaler>
34010e3e:	4603      	mov	r3, r0
34010e40:	091b      	lsrs	r3, r3, #4
34010e42:	f003 0307 	and.w	r3, r3, #7
34010e46:	687a      	ldr	r2, [r7, #4]
34010e48:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e4c:	4618      	mov	r0, r3
34010e4e:	3708      	adds	r7, #8
34010e50:	46bd      	mov	sp, r7
34010e52:	bd80      	pop	{r7, pc}

34010e54 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34010e54:	b580      	push	{r7, lr}
34010e56:	b082      	sub	sp, #8
34010e58:	af00      	add	r7, sp, #0
34010e5a:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34010e5c:	f7f7 fb58 	bl	34008510 <LL_RCC_GetAPB4Prescaler>
34010e60:	4603      	mov	r3, r0
34010e62:	0b1b      	lsrs	r3, r3, #12
34010e64:	f003 0307 	and.w	r3, r3, #7
34010e68:	687a      	ldr	r2, [r7, #4]
34010e6a:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e6e:	4618      	mov	r0, r3
34010e70:	3708      	adds	r7, #8
34010e72:	46bd      	mov	sp, r7
34010e74:	bd80      	pop	{r7, pc}

34010e76 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34010e76:	b580      	push	{r7, lr}
34010e78:	b082      	sub	sp, #8
34010e7a:	af00      	add	r7, sp, #0
34010e7c:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34010e7e:	f7f7 fb55 	bl	3400852c <LL_RCC_GetAPB5Prescaler>
34010e82:	4603      	mov	r3, r0
34010e84:	0c1b      	lsrs	r3, r3, #16
34010e86:	f003 0307 	and.w	r3, r3, #7
34010e8a:	687a      	ldr	r2, [r7, #4]
34010e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
34010e90:	4618      	mov	r0, r3
34010e92:	3708      	adds	r7, #8
34010e94:	46bd      	mov	sp, r7
34010e96:	bd80      	pop	{r7, pc}

34010e98 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34010e98:	b580      	push	{r7, lr}
34010e9a:	b084      	sub	sp, #16
34010e9c:	af00      	add	r7, sp, #0
34010e9e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34010ea0:	2300      	movs	r3, #0
34010ea2:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34010ea4:	687b      	ldr	r3, [r7, #4]
34010ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010eaa:	d039      	beq.n	34010f20 <RCCEx_GetPLLSourceFreq+0x88>
34010eac:	687b      	ldr	r3, [r7, #4]
34010eae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010eb2:	d838      	bhi.n	34010f26 <RCCEx_GetPLLSourceFreq+0x8e>
34010eb4:	687b      	ldr	r3, [r7, #4]
34010eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010eba:	d029      	beq.n	34010f10 <RCCEx_GetPLLSourceFreq+0x78>
34010ebc:	687b      	ldr	r3, [r7, #4]
34010ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010ec2:	d830      	bhi.n	34010f26 <RCCEx_GetPLLSourceFreq+0x8e>
34010ec4:	687b      	ldr	r3, [r7, #4]
34010ec6:	2b00      	cmp	r3, #0
34010ec8:	d004      	beq.n	34010ed4 <RCCEx_GetPLLSourceFreq+0x3c>
34010eca:	687b      	ldr	r3, [r7, #4]
34010ecc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010ed0:	d00e      	beq.n	34010ef0 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34010ed2:	e028      	b.n	34010f26 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34010ed4:	f7f7 fa92 	bl	340083fc <LL_RCC_HSI_IsReady>
34010ed8:	4603      	mov	r3, r0
34010eda:	2b00      	cmp	r3, #0
34010edc:	d025      	beq.n	34010f2a <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010ede:	f7f7 fa9f 	bl	34008420 <LL_RCC_HSI_GetDivider>
34010ee2:	4603      	mov	r3, r0
34010ee4:	09db      	lsrs	r3, r3, #7
34010ee6:	4a16      	ldr	r2, [pc, #88]	@ (34010f40 <RCCEx_GetPLLSourceFreq+0xa8>)
34010ee8:	fa22 f303 	lsr.w	r3, r2, r3
34010eec:	60fb      	str	r3, [r7, #12]
      break;
34010eee:	e01c      	b.n	34010f2a <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34010ef0:	f7f7 faa4 	bl	3400843c <LL_RCC_MSI_IsReady>
34010ef4:	4603      	mov	r3, r0
34010ef6:	2b00      	cmp	r3, #0
34010ef8:	d019      	beq.n	34010f2e <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34010efa:	f7f7 fab1 	bl	34008460 <LL_RCC_MSI_GetFrequency>
34010efe:	4603      	mov	r3, r0
34010f00:	2b00      	cmp	r3, #0
34010f02:	d102      	bne.n	34010f0a <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34010f04:	4b0f      	ldr	r3, [pc, #60]	@ (34010f44 <RCCEx_GetPLLSourceFreq+0xac>)
34010f06:	60fb      	str	r3, [r7, #12]
      break;
34010f08:	e011      	b.n	34010f2e <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34010f0a:	4b0f      	ldr	r3, [pc, #60]	@ (34010f48 <RCCEx_GetPLLSourceFreq+0xb0>)
34010f0c:	60fb      	str	r3, [r7, #12]
      break;
34010f0e:	e00e      	b.n	34010f2e <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34010f10:	f7f7 fa62 	bl	340083d8 <LL_RCC_HSE_IsReady>
34010f14:	4603      	mov	r3, r0
34010f16:	2b00      	cmp	r3, #0
34010f18:	d00b      	beq.n	34010f32 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34010f1a:	4b0c      	ldr	r3, [pc, #48]	@ (34010f4c <RCCEx_GetPLLSourceFreq+0xb4>)
34010f1c:	60fb      	str	r3, [r7, #12]
      break;
34010f1e:	e008      	b.n	34010f32 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34010f20:	4b0b      	ldr	r3, [pc, #44]	@ (34010f50 <RCCEx_GetPLLSourceFreq+0xb8>)
34010f22:	60fb      	str	r3, [r7, #12]
      break;
34010f24:	e006      	b.n	34010f34 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f26:	bf00      	nop
34010f28:	e004      	b.n	34010f34 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f2a:	bf00      	nop
34010f2c:	e002      	b.n	34010f34 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f2e:	bf00      	nop
34010f30:	e000      	b.n	34010f34 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010f32:	bf00      	nop
  }

  return pllinputfreq;
34010f34:	68fb      	ldr	r3, [r7, #12]
}
34010f36:	4618      	mov	r0, r3
34010f38:	3710      	adds	r7, #16
34010f3a:	46bd      	mov	sp, r7
34010f3c:	bd80      	pop	{r7, pc}
34010f3e:	bf00      	nop
34010f40:	03d09000 	.word	0x03d09000
34010f44:	003d0900 	.word	0x003d0900
34010f48:	00f42400 	.word	0x00f42400
34010f4c:	02dc6c00 	.word	0x02dc6c00
34010f50:	00bb8000 	.word	0x00bb8000

34010f54 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34010f54:	b480      	push	{r7}
34010f56:	b087      	sub	sp, #28
34010f58:	af00      	add	r7, sp, #0
34010f5a:	60f8      	str	r0, [r7, #12]
34010f5c:	60b9      	str	r1, [r7, #8]
34010f5e:	607a      	str	r2, [r7, #4]
34010f60:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34010f62:	68fb      	ldr	r3, [r7, #12]
34010f64:	ee07 3a90 	vmov	s15, r3
34010f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010f6c:	687b      	ldr	r3, [r7, #4]
34010f6e:	ee07 3a90 	vmov	s15, r3
34010f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
34010f76:	683b      	ldr	r3, [r7, #0]
34010f78:	ee07 3a90 	vmov	s15, r3
34010f7c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34010f80:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34010fe8 <RCCEx_CalcPLLFreq+0x94>
34010f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
34010f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
34010f8c:	ee67 6a27 	vmul.f32	s13, s14, s15
34010f90:	68bb      	ldr	r3, [r7, #8]
34010f92:	ee07 3a90 	vmov	s15, r3
34010f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010f9e:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
34010fa2:	6a3b      	ldr	r3, [r7, #32]
34010fa4:	ee07 3a90 	vmov	s15, r3
34010fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010fac:	edd7 6a05 	vldr	s13, [r7, #20]
34010fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010fb4:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
34010fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34010fba:	ee07 3a90 	vmov	s15, r3
34010fbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010fc2:	edd7 6a05 	vldr	s13, [r7, #20]
34010fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010fca:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
34010fce:	edd7 7a05 	vldr	s15, [r7, #20]
34010fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34010fd6:	ee17 3a90 	vmov	r3, s15
}
34010fda:	4618      	mov	r0, r3
34010fdc:	371c      	adds	r7, #28
34010fde:	46bd      	mov	sp, r7
34010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
34010fe4:	4770      	bx	lr
34010fe6:	bf00      	nop
34010fe8:	4b800000 	.word	0x4b800000

34010fec <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
34010fec:	b590      	push	{r4, r7, lr}
34010fee:	b085      	sub	sp, #20
34010ff0:	af00      	add	r7, sp, #0
34010ff2:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34010ff4:	2300      	movs	r3, #0
34010ff6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34010ff8:	6878      	ldr	r0, [r7, #4]
34010ffa:	f7f7 fcb5 	bl	34008968 <LL_RCC_GetADCClockSource>
34010ffe:	4603      	mov	r3, r0
34011000:	2b70      	cmp	r3, #112	@ 0x70
34011002:	f000 80d1 	beq.w	340111a8 <RCCEx_GetADCCLKFreq+0x1bc>
34011006:	2b70      	cmp	r3, #112	@ 0x70
34011008:	f200 80d8 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
3401100c:	2b60      	cmp	r3, #96	@ 0x60
3401100e:	f000 80c8 	beq.w	340111a2 <RCCEx_GetADCCLKFreq+0x1b6>
34011012:	2b60      	cmp	r3, #96	@ 0x60
34011014:	f200 80d2 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
34011018:	2b50      	cmp	r3, #80	@ 0x50
3401101a:	f000 80ac 	beq.w	34011176 <RCCEx_GetADCCLKFreq+0x18a>
3401101e:	2b50      	cmp	r3, #80	@ 0x50
34011020:	f200 80cc 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
34011024:	2b40      	cmp	r3, #64	@ 0x40
34011026:	f000 80b4 	beq.w	34011192 <RCCEx_GetADCCLKFreq+0x1a6>
3401102a:	2b40      	cmp	r3, #64	@ 0x40
3401102c:	f200 80c6 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
34011030:	2b30      	cmp	r3, #48	@ 0x30
34011032:	d05d      	beq.n	340110f0 <RCCEx_GetADCCLKFreq+0x104>
34011034:	2b30      	cmp	r3, #48	@ 0x30
34011036:	f200 80c1 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
3401103a:	2b20      	cmp	r3, #32
3401103c:	d014      	beq.n	34011068 <RCCEx_GetADCCLKFreq+0x7c>
3401103e:	2b20      	cmp	r3, #32
34011040:	f200 80bc 	bhi.w	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
34011044:	2b00      	cmp	r3, #0
34011046:	d002      	beq.n	3401104e <RCCEx_GetADCCLKFreq+0x62>
34011048:	2b10      	cmp	r3, #16
3401104a:	d008      	beq.n	3401105e <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3401104c:	e0b6      	b.n	340111bc <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401104e:	f7f6 fdd7 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011052:	4603      	mov	r3, r0
34011054:	4618      	mov	r0, r3
34011056:	f7ff fecb 	bl	34010df0 <RCCEx_GetHCLKFreq>
3401105a:	60f8      	str	r0, [r7, #12]
      break;
3401105c:	e0b7      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401105e:	2007      	movs	r0, #7
34011060:	f000 f9b2 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011064:	60f8      	str	r0, [r7, #12]
      break;
34011066:	e0b2      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34011068:	f7f8 f96c 	bl	34009344 <LL_RCC_IC7_IsEnabled>
3401106c:	4603      	mov	r3, r0
3401106e:	2b00      	cmp	r3, #0
34011070:	f000 80a6 	beq.w	340111c0 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34011074:	f7f8 f988 	bl	34009388 <LL_RCC_IC7_GetDivider>
34011078:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3401107a:	f7f8 f977 	bl	3400936c <LL_RCC_IC7_GetSource>
3401107e:	4603      	mov	r3, r0
34011080:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011084:	d029      	beq.n	340110da <RCCEx_GetADCCLKFreq+0xee>
34011086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401108a:	d82f      	bhi.n	340110ec <RCCEx_GetADCCLKFreq+0x100>
3401108c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011090:	d01a      	beq.n	340110c8 <RCCEx_GetADCCLKFreq+0xdc>
34011092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011096:	d829      	bhi.n	340110ec <RCCEx_GetADCCLKFreq+0x100>
34011098:	2b00      	cmp	r3, #0
3401109a:	d003      	beq.n	340110a4 <RCCEx_GetADCCLKFreq+0xb8>
3401109c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340110a0:	d009      	beq.n	340110b6 <RCCEx_GetADCCLKFreq+0xca>
            break;
340110a2:	e023      	b.n	340110ec <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340110a4:	f7ff fd8c 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340110a8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110aa:	68fa      	ldr	r2, [r7, #12]
340110ac:	68bb      	ldr	r3, [r7, #8]
340110ae:	fbb2 f3f3 	udiv	r3, r2, r3
340110b2:	60fb      	str	r3, [r7, #12]
            break;
340110b4:	e01b      	b.n	340110ee <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340110b6:	f7ff fdc9 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340110ba:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110bc:	68fa      	ldr	r2, [r7, #12]
340110be:	68bb      	ldr	r3, [r7, #8]
340110c0:	fbb2 f3f3 	udiv	r3, r2, r3
340110c4:	60fb      	str	r3, [r7, #12]
            break;
340110c6:	e012      	b.n	340110ee <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340110c8:	f7ff fe06 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340110cc:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110ce:	68fa      	ldr	r2, [r7, #12]
340110d0:	68bb      	ldr	r3, [r7, #8]
340110d2:	fbb2 f3f3 	udiv	r3, r2, r3
340110d6:	60fb      	str	r3, [r7, #12]
            break;
340110d8:	e009      	b.n	340110ee <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340110da:	f7ff fe43 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340110de:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340110e0:	68fa      	ldr	r2, [r7, #12]
340110e2:	68bb      	ldr	r3, [r7, #8]
340110e4:	fbb2 f3f3 	udiv	r3, r2, r3
340110e8:	60fb      	str	r3, [r7, #12]
            break;
340110ea:	e000      	b.n	340110ee <RCCEx_GetADCCLKFreq+0x102>
            break;
340110ec:	bf00      	nop
      break;
340110ee:	e067      	b.n	340111c0 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340110f0:	f7f8 f968 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
340110f4:	4603      	mov	r3, r0
340110f6:	2b00      	cmp	r3, #0
340110f8:	d064      	beq.n	340111c4 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
340110fa:	f7f8 f985 	bl	34009408 <LL_RCC_IC8_GetDivider>
340110fe:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34011100:	f7f8 f974 	bl	340093ec <LL_RCC_IC8_GetSource>
34011104:	4603      	mov	r3, r0
34011106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401110a:	d029      	beq.n	34011160 <RCCEx_GetADCCLKFreq+0x174>
3401110c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011110:	d82f      	bhi.n	34011172 <RCCEx_GetADCCLKFreq+0x186>
34011112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011116:	d01a      	beq.n	3401114e <RCCEx_GetADCCLKFreq+0x162>
34011118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401111c:	d829      	bhi.n	34011172 <RCCEx_GetADCCLKFreq+0x186>
3401111e:	2b00      	cmp	r3, #0
34011120:	d003      	beq.n	3401112a <RCCEx_GetADCCLKFreq+0x13e>
34011122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011126:	d009      	beq.n	3401113c <RCCEx_GetADCCLKFreq+0x150>
            break;
34011128:	e023      	b.n	34011172 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401112a:	f7ff fd49 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401112e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34011130:	68fa      	ldr	r2, [r7, #12]
34011132:	68bb      	ldr	r3, [r7, #8]
34011134:	fbb2 f3f3 	udiv	r3, r2, r3
34011138:	60fb      	str	r3, [r7, #12]
            break;
3401113a:	e01b      	b.n	34011174 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401113c:	f7ff fd86 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011140:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34011142:	68fa      	ldr	r2, [r7, #12]
34011144:	68bb      	ldr	r3, [r7, #8]
34011146:	fbb2 f3f3 	udiv	r3, r2, r3
3401114a:	60fb      	str	r3, [r7, #12]
            break;
3401114c:	e012      	b.n	34011174 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401114e:	f7ff fdc3 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011152:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34011154:	68fa      	ldr	r2, [r7, #12]
34011156:	68bb      	ldr	r3, [r7, #8]
34011158:	fbb2 f3f3 	udiv	r3, r2, r3
3401115c:	60fb      	str	r3, [r7, #12]
            break;
3401115e:	e009      	b.n	34011174 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011160:	f7ff fe00 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011164:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34011166:	68fa      	ldr	r2, [r7, #12]
34011168:	68bb      	ldr	r3, [r7, #8]
3401116a:	fbb2 f3f3 	udiv	r3, r2, r3
3401116e:	60fb      	str	r3, [r7, #12]
            break;
34011170:	e000      	b.n	34011174 <RCCEx_GetADCCLKFreq+0x188>
            break;
34011172:	bf00      	nop
      break;
34011174:	e026      	b.n	340111c4 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34011176:	f7f7 f941 	bl	340083fc <LL_RCC_HSI_IsReady>
3401117a:	4603      	mov	r3, r0
3401117c:	2b00      	cmp	r3, #0
3401117e:	d023      	beq.n	340111c8 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011180:	f7f7 f94e 	bl	34008420 <LL_RCC_HSI_GetDivider>
34011184:	4603      	mov	r3, r0
34011186:	09db      	lsrs	r3, r3, #7
34011188:	4a16      	ldr	r2, [pc, #88]	@ (340111e4 <RCCEx_GetADCCLKFreq+0x1f8>)
3401118a:	fa22 f303 	lsr.w	r3, r2, r3
3401118e:	60fb      	str	r3, [r7, #12]
      break;
34011190:	e01a      	b.n	340111c8 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34011192:	f7f7 f953 	bl	3400843c <LL_RCC_MSI_IsReady>
34011196:	4603      	mov	r3, r0
34011198:	2b00      	cmp	r3, #0
3401119a:	d017      	beq.n	340111cc <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
3401119c:	4b12      	ldr	r3, [pc, #72]	@ (340111e8 <RCCEx_GetADCCLKFreq+0x1fc>)
3401119e:	60fb      	str	r3, [r7, #12]
      break;
340111a0:	e014      	b.n	340111cc <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
340111a2:	4b12      	ldr	r3, [pc, #72]	@ (340111ec <RCCEx_GetADCCLKFreq+0x200>)
340111a4:	60fb      	str	r3, [r7, #12]
      break;
340111a6:	e012      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
340111a8:	f7f6 fd2a 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340111ac:	4604      	mov	r4, r0
340111ae:	f7f7 fd8d 	bl	34008ccc <LL_RCC_GetTIMPrescaler>
340111b2:	4603      	mov	r3, r0
340111b4:	fa24 f303 	lsr.w	r3, r4, r3
340111b8:	60fb      	str	r3, [r7, #12]
      break;
340111ba:	e008      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111bc:	bf00      	nop
340111be:	e006      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111c0:	bf00      	nop
340111c2:	e004      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111c4:	bf00      	nop
340111c6:	e002      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111c8:	bf00      	nop
340111ca:	e000      	b.n	340111ce <RCCEx_GetADCCLKFreq+0x1e2>
      break;
340111cc:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
340111ce:	f7f7 f9e5 	bl	3400859c <LL_RCC_GetADCPrescaler>
340111d2:	4603      	mov	r3, r0
340111d4:	3301      	adds	r3, #1
340111d6:	68fa      	ldr	r2, [r7, #12]
340111d8:	fbb2 f3f3 	udiv	r3, r2, r3
}
340111dc:	4618      	mov	r0, r3
340111de:	3714      	adds	r7, #20
340111e0:	46bd      	mov	sp, r7
340111e2:	bd90      	pop	{r4, r7, pc}
340111e4:	03d09000 	.word	0x03d09000
340111e8:	003d0900 	.word	0x003d0900
340111ec:	00bb8000 	.word	0x00bb8000

340111f0 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
340111f0:	b590      	push	{r4, r7, lr}
340111f2:	b085      	sub	sp, #20
340111f4:	af00      	add	r7, sp, #0
340111f6:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
340111f8:	2300      	movs	r3, #0
340111fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
340111fc:	6878      	ldr	r0, [r7, #4]
340111fe:	f7f7 fbc5 	bl	3400898c <LL_RCC_GetADFClockSource>
34011202:	4603      	mov	r3, r0
34011204:	2b07      	cmp	r3, #7
34011206:	f200 80ca 	bhi.w	3401139e <RCCEx_GetADFCLKFreq+0x1ae>
3401120a:	a201      	add	r2, pc, #4	@ (adr r2, 34011210 <RCCEx_GetADFCLKFreq+0x20>)
3401120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011210:	34011231 	.word	0x34011231
34011214:	34011241 	.word	0x34011241
34011218:	3401124b 	.word	0x3401124b
3401121c:	340112d3 	.word	0x340112d3
34011220:	34011375 	.word	0x34011375
34011224:	34011359 	.word	0x34011359
34011228:	34011385 	.word	0x34011385
3401122c:	3401138b 	.word	0x3401138b
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011230:	f7f6 fce6 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011234:	4603      	mov	r3, r0
34011236:	4618      	mov	r0, r3
34011238:	f7ff fdda 	bl	34010df0 <RCCEx_GetHCLKFreq>
3401123c:	60f8      	str	r0, [r7, #12]
      break;
3401123e:	e0b7      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011240:	2007      	movs	r0, #7
34011242:	f000 f8c1 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011246:	60f8      	str	r0, [r7, #12]
      break;
34011248:	e0b2      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401124a:	f7f8 f87b 	bl	34009344 <LL_RCC_IC7_IsEnabled>
3401124e:	4603      	mov	r3, r0
34011250:	2b00      	cmp	r3, #0
34011252:	f000 80a6 	beq.w	340113a2 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34011256:	f7f8 f897 	bl	34009388 <LL_RCC_IC7_GetDivider>
3401125a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3401125c:	f7f8 f886 	bl	3400936c <LL_RCC_IC7_GetSource>
34011260:	4603      	mov	r3, r0
34011262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011266:	d029      	beq.n	340112bc <RCCEx_GetADFCLKFreq+0xcc>
34011268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401126c:	d82f      	bhi.n	340112ce <RCCEx_GetADFCLKFreq+0xde>
3401126e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011272:	d01a      	beq.n	340112aa <RCCEx_GetADFCLKFreq+0xba>
34011274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011278:	d829      	bhi.n	340112ce <RCCEx_GetADFCLKFreq+0xde>
3401127a:	2b00      	cmp	r3, #0
3401127c:	d003      	beq.n	34011286 <RCCEx_GetADFCLKFreq+0x96>
3401127e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011282:	d009      	beq.n	34011298 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011284:	e023      	b.n	340112ce <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011286:	f7ff fc9b 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401128a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401128c:	68fa      	ldr	r2, [r7, #12]
3401128e:	68bb      	ldr	r3, [r7, #8]
34011290:	fbb2 f3f3 	udiv	r3, r2, r3
34011294:	60fb      	str	r3, [r7, #12]
            break;
34011296:	e01b      	b.n	340112d0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011298:	f7ff fcd8 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401129c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401129e:	68fa      	ldr	r2, [r7, #12]
340112a0:	68bb      	ldr	r3, [r7, #8]
340112a2:	fbb2 f3f3 	udiv	r3, r2, r3
340112a6:	60fb      	str	r3, [r7, #12]
            break;
340112a8:	e012      	b.n	340112d0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340112aa:	f7ff fd15 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340112ae:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340112b0:	68fa      	ldr	r2, [r7, #12]
340112b2:	68bb      	ldr	r3, [r7, #8]
340112b4:	fbb2 f3f3 	udiv	r3, r2, r3
340112b8:	60fb      	str	r3, [r7, #12]
            break;
340112ba:	e009      	b.n	340112d0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340112bc:	f7ff fd52 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340112c0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340112c2:	68fa      	ldr	r2, [r7, #12]
340112c4:	68bb      	ldr	r3, [r7, #8]
340112c6:	fbb2 f3f3 	udiv	r3, r2, r3
340112ca:	60fb      	str	r3, [r7, #12]
            break;
340112cc:	e000      	b.n	340112d0 <RCCEx_GetADFCLKFreq+0xe0>
            break;
340112ce:	bf00      	nop
        }
      }
      break;
340112d0:	e067      	b.n	340113a2 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340112d2:	f7f8 f877 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
340112d6:	4603      	mov	r3, r0
340112d8:	2b00      	cmp	r3, #0
340112da:	d064      	beq.n	340113a6 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340112dc:	f7f8 f894 	bl	34009408 <LL_RCC_IC8_GetDivider>
340112e0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340112e2:	f7f8 f883 	bl	340093ec <LL_RCC_IC8_GetSource>
340112e6:	4603      	mov	r3, r0
340112e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112ec:	d029      	beq.n	34011342 <RCCEx_GetADFCLKFreq+0x152>
340112ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340112f2:	d82f      	bhi.n	34011354 <RCCEx_GetADFCLKFreq+0x164>
340112f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340112f8:	d01a      	beq.n	34011330 <RCCEx_GetADFCLKFreq+0x140>
340112fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340112fe:	d829      	bhi.n	34011354 <RCCEx_GetADFCLKFreq+0x164>
34011300:	2b00      	cmp	r3, #0
34011302:	d003      	beq.n	3401130c <RCCEx_GetADFCLKFreq+0x11c>
34011304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011308:	d009      	beq.n	3401131e <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401130a:	e023      	b.n	34011354 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401130c:	f7ff fc58 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011310:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011312:	68fa      	ldr	r2, [r7, #12]
34011314:	68bb      	ldr	r3, [r7, #8]
34011316:	fbb2 f3f3 	udiv	r3, r2, r3
3401131a:	60fb      	str	r3, [r7, #12]
            break;
3401131c:	e01b      	b.n	34011356 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401131e:	f7ff fc95 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011322:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011324:	68fa      	ldr	r2, [r7, #12]
34011326:	68bb      	ldr	r3, [r7, #8]
34011328:	fbb2 f3f3 	udiv	r3, r2, r3
3401132c:	60fb      	str	r3, [r7, #12]
            break;
3401132e:	e012      	b.n	34011356 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011330:	f7ff fcd2 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011334:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011336:	68fa      	ldr	r2, [r7, #12]
34011338:	68bb      	ldr	r3, [r7, #8]
3401133a:	fbb2 f3f3 	udiv	r3, r2, r3
3401133e:	60fb      	str	r3, [r7, #12]
            break;
34011340:	e009      	b.n	34011356 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011342:	f7ff fd0f 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011346:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34011348:	68fa      	ldr	r2, [r7, #12]
3401134a:	68bb      	ldr	r3, [r7, #8]
3401134c:	fbb2 f3f3 	udiv	r3, r2, r3
34011350:	60fb      	str	r3, [r7, #12]
            break;
34011352:	e000      	b.n	34011356 <RCCEx_GetADFCLKFreq+0x166>
            break;
34011354:	bf00      	nop
        }
      }
      break;
34011356:	e026      	b.n	340113a6 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011358:	f7f7 f850 	bl	340083fc <LL_RCC_HSI_IsReady>
3401135c:	4603      	mov	r3, r0
3401135e:	2b00      	cmp	r3, #0
34011360:	d023      	beq.n	340113aa <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011362:	f7f7 f85d 	bl	34008420 <LL_RCC_HSI_GetDivider>
34011366:	4603      	mov	r3, r0
34011368:	09db      	lsrs	r3, r3, #7
3401136a:	4a14      	ldr	r2, [pc, #80]	@ (340113bc <RCCEx_GetADFCLKFreq+0x1cc>)
3401136c:	fa22 f303 	lsr.w	r3, r2, r3
34011370:	60fb      	str	r3, [r7, #12]
      }
      break;
34011372:	e01a      	b.n	340113aa <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34011374:	f7f7 f862 	bl	3400843c <LL_RCC_MSI_IsReady>
34011378:	4603      	mov	r3, r0
3401137a:	2b00      	cmp	r3, #0
3401137c:	d017      	beq.n	340113ae <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
3401137e:	4b10      	ldr	r3, [pc, #64]	@ (340113c0 <RCCEx_GetADFCLKFreq+0x1d0>)
34011380:	60fb      	str	r3, [r7, #12]
      }
      break;
34011382:	e014      	b.n	340113ae <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34011384:	4b0f      	ldr	r3, [pc, #60]	@ (340113c4 <RCCEx_GetADFCLKFreq+0x1d4>)
34011386:	60fb      	str	r3, [r7, #12]
      break;
34011388:	e012      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401138a:	f7f6 fc39 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
3401138e:	4604      	mov	r4, r0
34011390:	f7f7 fc9c 	bl	34008ccc <LL_RCC_GetTIMPrescaler>
34011394:	4603      	mov	r3, r0
34011396:	fa24 f303 	lsr.w	r3, r4, r3
3401139a:	60fb      	str	r3, [r7, #12]
      break;
3401139c:	e008      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
3401139e:	bf00      	nop
340113a0:	e006      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113a2:	bf00      	nop
340113a4:	e004      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113a6:	bf00      	nop
340113a8:	e002      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113aa:	bf00      	nop
340113ac:	e000      	b.n	340113b0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
340113ae:	bf00      	nop
  }

  return adf_frequency;
340113b0:	68fb      	ldr	r3, [r7, #12]
}
340113b2:	4618      	mov	r0, r3
340113b4:	3714      	adds	r7, #20
340113b6:	46bd      	mov	sp, r7
340113b8:	bd90      	pop	{r4, r7, pc}
340113ba:	bf00      	nop
340113bc:	03d09000 	.word	0x03d09000
340113c0:	003d0900 	.word	0x003d0900
340113c4:	00bb8000 	.word	0x00bb8000

340113c8 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
340113c8:	b580      	push	{r7, lr}
340113ca:	b084      	sub	sp, #16
340113cc:	af00      	add	r7, sp, #0
340113ce:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340113d0:	2300      	movs	r3, #0
340113d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
340113d4:	f7f8 faf6 	bl	340099c4 <LL_RCC_CLKP_IsEnabled>
340113d8:	4603      	mov	r3, r0
340113da:	2b01      	cmp	r3, #1
340113dc:	f040 81a5 	bne.w	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340113e0:	6878      	ldr	r0, [r7, #4]
340113e2:	f7f7 fae5 	bl	340089b0 <LL_RCC_GetCLKPClockSource>
340113e6:	4603      	mov	r3, r0
340113e8:	2b07      	cmp	r3, #7
340113ea:	f200 818d 	bhi.w	34011708 <RCCEx_GetCLKPCLKFreq+0x340>
340113ee:	a201      	add	r2, pc, #4	@ (adr r2, 340113f4 <RCCEx_GetCLKPCLKFreq+0x2c>)
340113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340113f4:	34011415 	.word	0x34011415
340113f8:	34011433 	.word	0x34011433
340113fc:	34011445 	.word	0x34011445
34011400:	340115ef 	.word	0x340115ef
34011404:	34011457 	.word	0x34011457
34011408:	340114df 	.word	0x340114df
3401140c:	34011567 	.word	0x34011567
34011410:	34011677 	.word	0x34011677
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34011414:	f7f6 fff2 	bl	340083fc <LL_RCC_HSI_IsReady>
34011418:	4603      	mov	r3, r0
3401141a:	2b00      	cmp	r3, #0
3401141c:	f000 8176 	beq.w	3401170c <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011420:	f7f6 fffe 	bl	34008420 <LL_RCC_HSI_GetDivider>
34011424:	4603      	mov	r3, r0
34011426:	09db      	lsrs	r3, r3, #7
34011428:	4aa1      	ldr	r2, [pc, #644]	@ (340116b0 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3401142a:	fa22 f303 	lsr.w	r3, r2, r3
3401142e:	60fb      	str	r3, [r7, #12]
        }
        break;
34011430:	e16c      	b.n	3401170c <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34011432:	f7f7 f803 	bl	3400843c <LL_RCC_MSI_IsReady>
34011436:	4603      	mov	r3, r0
34011438:	2b00      	cmp	r3, #0
3401143a:	f000 8169 	beq.w	34011710 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3401143e:	4b9d      	ldr	r3, [pc, #628]	@ (340116b4 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34011440:	60fb      	str	r3, [r7, #12]
        }
        break;
34011442:	e165      	b.n	34011710 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34011444:	f7f6 ffc8 	bl	340083d8 <LL_RCC_HSE_IsReady>
34011448:	4603      	mov	r3, r0
3401144a:	2b00      	cmp	r3, #0
3401144c:	f000 8162 	beq.w	34011714 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34011450:	4b99      	ldr	r3, [pc, #612]	@ (340116b8 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34011452:	60fb      	str	r3, [r7, #12]
        }
        break;
34011454:	e15e      	b.n	34011714 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34011456:	f7f7 ff35 	bl	340092c4 <LL_RCC_IC5_IsEnabled>
3401145a:	4603      	mov	r3, r0
3401145c:	2b00      	cmp	r3, #0
3401145e:	f000 815b 	beq.w	34011718 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34011462:	f7f7 ff51 	bl	34009308 <LL_RCC_IC5_GetDivider>
34011466:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34011468:	f7f7 ff40 	bl	340092ec <LL_RCC_IC5_GetSource>
3401146c:	4603      	mov	r3, r0
3401146e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011472:	d029      	beq.n	340114c8 <RCCEx_GetCLKPCLKFreq+0x100>
34011474:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011478:	d82f      	bhi.n	340114da <RCCEx_GetCLKPCLKFreq+0x112>
3401147a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401147e:	d01a      	beq.n	340114b6 <RCCEx_GetCLKPCLKFreq+0xee>
34011480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011484:	d829      	bhi.n	340114da <RCCEx_GetCLKPCLKFreq+0x112>
34011486:	2b00      	cmp	r3, #0
34011488:	d003      	beq.n	34011492 <RCCEx_GetCLKPCLKFreq+0xca>
3401148a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401148e:	d009      	beq.n	340114a4 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011490:	e023      	b.n	340114da <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011492:	f7ff fb95 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011496:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011498:	68fa      	ldr	r2, [r7, #12]
3401149a:	68bb      	ldr	r3, [r7, #8]
3401149c:	fbb2 f3f3 	udiv	r3, r2, r3
340114a0:	60fb      	str	r3, [r7, #12]
              break;
340114a2:	e01b      	b.n	340114dc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340114a4:	f7ff fbd2 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340114a8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114aa:	68fa      	ldr	r2, [r7, #12]
340114ac:	68bb      	ldr	r3, [r7, #8]
340114ae:	fbb2 f3f3 	udiv	r3, r2, r3
340114b2:	60fb      	str	r3, [r7, #12]
              break;
340114b4:	e012      	b.n	340114dc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340114b6:	f7ff fc0f 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340114ba:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114bc:	68fa      	ldr	r2, [r7, #12]
340114be:	68bb      	ldr	r3, [r7, #8]
340114c0:	fbb2 f3f3 	udiv	r3, r2, r3
340114c4:	60fb      	str	r3, [r7, #12]
              break;
340114c6:	e009      	b.n	340114dc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340114c8:	f7ff fc4c 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340114cc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340114ce:	68fa      	ldr	r2, [r7, #12]
340114d0:	68bb      	ldr	r3, [r7, #8]
340114d2:	fbb2 f3f3 	udiv	r3, r2, r3
340114d6:	60fb      	str	r3, [r7, #12]
              break;
340114d8:	e000      	b.n	340114dc <RCCEx_GetCLKPCLKFreq+0x114>
              break;
340114da:	bf00      	nop
          }
        }
        break;
340114dc:	e11c      	b.n	34011718 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
340114de:	f7f7 fff1 	bl	340094c4 <LL_RCC_IC10_IsEnabled>
340114e2:	4603      	mov	r3, r0
340114e4:	2b00      	cmp	r3, #0
340114e6:	f000 8119 	beq.w	3401171c <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
340114ea:	f7f8 f80d 	bl	34009508 <LL_RCC_IC10_GetDivider>
340114ee:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
340114f0:	f7f7 fffc 	bl	340094ec <LL_RCC_IC10_GetSource>
340114f4:	4603      	mov	r3, r0
340114f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340114fa:	d029      	beq.n	34011550 <RCCEx_GetCLKPCLKFreq+0x188>
340114fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011500:	d82f      	bhi.n	34011562 <RCCEx_GetCLKPCLKFreq+0x19a>
34011502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011506:	d01a      	beq.n	3401153e <RCCEx_GetCLKPCLKFreq+0x176>
34011508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401150c:	d829      	bhi.n	34011562 <RCCEx_GetCLKPCLKFreq+0x19a>
3401150e:	2b00      	cmp	r3, #0
34011510:	d003      	beq.n	3401151a <RCCEx_GetCLKPCLKFreq+0x152>
34011512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011516:	d009      	beq.n	3401152c <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011518:	e023      	b.n	34011562 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401151a:	f7ff fb51 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401151e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011520:	68fa      	ldr	r2, [r7, #12]
34011522:	68bb      	ldr	r3, [r7, #8]
34011524:	fbb2 f3f3 	udiv	r3, r2, r3
34011528:	60fb      	str	r3, [r7, #12]
              break;
3401152a:	e01b      	b.n	34011564 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401152c:	f7ff fb8e 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011530:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011532:	68fa      	ldr	r2, [r7, #12]
34011534:	68bb      	ldr	r3, [r7, #8]
34011536:	fbb2 f3f3 	udiv	r3, r2, r3
3401153a:	60fb      	str	r3, [r7, #12]
              break;
3401153c:	e012      	b.n	34011564 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401153e:	f7ff fbcb 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011542:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011544:	68fa      	ldr	r2, [r7, #12]
34011546:	68bb      	ldr	r3, [r7, #8]
34011548:	fbb2 f3f3 	udiv	r3, r2, r3
3401154c:	60fb      	str	r3, [r7, #12]
              break;
3401154e:	e009      	b.n	34011564 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011550:	f7ff fc08 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011554:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011556:	68fa      	ldr	r2, [r7, #12]
34011558:	68bb      	ldr	r3, [r7, #8]
3401155a:	fbb2 f3f3 	udiv	r3, r2, r3
3401155e:	60fb      	str	r3, [r7, #12]
              break;
34011560:	e000      	b.n	34011564 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34011562:	bf00      	nop
          }
        }
        break;
34011564:	e0da      	b.n	3401171c <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34011566:	f7f8 f8ad 	bl	340096c4 <LL_RCC_IC15_IsEnabled>
3401156a:	4603      	mov	r3, r0
3401156c:	2b00      	cmp	r3, #0
3401156e:	f000 80d7 	beq.w	34011720 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
34011572:	f7f8 f8c9 	bl	34009708 <LL_RCC_IC15_GetDivider>
34011576:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34011578:	f7f8 f8b8 	bl	340096ec <LL_RCC_IC15_GetSource>
3401157c:	4603      	mov	r3, r0
3401157e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011582:	d029      	beq.n	340115d8 <RCCEx_GetCLKPCLKFreq+0x210>
34011584:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011588:	d82f      	bhi.n	340115ea <RCCEx_GetCLKPCLKFreq+0x222>
3401158a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401158e:	d01a      	beq.n	340115c6 <RCCEx_GetCLKPCLKFreq+0x1fe>
34011590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011594:	d829      	bhi.n	340115ea <RCCEx_GetCLKPCLKFreq+0x222>
34011596:	2b00      	cmp	r3, #0
34011598:	d003      	beq.n	340115a2 <RCCEx_GetCLKPCLKFreq+0x1da>
3401159a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401159e:	d009      	beq.n	340115b4 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340115a0:	e023      	b.n	340115ea <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340115a2:	f7ff fb0d 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340115a6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115a8:	68fa      	ldr	r2, [r7, #12]
340115aa:	68bb      	ldr	r3, [r7, #8]
340115ac:	fbb2 f3f3 	udiv	r3, r2, r3
340115b0:	60fb      	str	r3, [r7, #12]
              break;
340115b2:	e01b      	b.n	340115ec <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340115b4:	f7ff fb4a 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340115b8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115ba:	68fa      	ldr	r2, [r7, #12]
340115bc:	68bb      	ldr	r3, [r7, #8]
340115be:	fbb2 f3f3 	udiv	r3, r2, r3
340115c2:	60fb      	str	r3, [r7, #12]
              break;
340115c4:	e012      	b.n	340115ec <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340115c6:	f7ff fb87 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340115ca:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115cc:	68fa      	ldr	r2, [r7, #12]
340115ce:	68bb      	ldr	r3, [r7, #8]
340115d0:	fbb2 f3f3 	udiv	r3, r2, r3
340115d4:	60fb      	str	r3, [r7, #12]
              break;
340115d6:	e009      	b.n	340115ec <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340115d8:	f7ff fbc4 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340115dc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340115de:	68fa      	ldr	r2, [r7, #12]
340115e0:	68bb      	ldr	r3, [r7, #8]
340115e2:	fbb2 f3f3 	udiv	r3, r2, r3
340115e6:	60fb      	str	r3, [r7, #12]
              break;
340115e8:	e000      	b.n	340115ec <RCCEx_GetCLKPCLKFreq+0x224>
              break;
340115ea:	bf00      	nop
          }
        }
        break;
340115ec:	e098      	b.n	34011720 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
340115ee:	f7f8 f969 	bl	340098c4 <LL_RCC_IC19_IsEnabled>
340115f2:	4603      	mov	r3, r0
340115f4:	2b00      	cmp	r3, #0
340115f6:	f000 8095 	beq.w	34011724 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
340115fa:	f7f8 f985 	bl	34009908 <LL_RCC_IC19_GetDivider>
340115fe:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34011600:	f7f8 f974 	bl	340098ec <LL_RCC_IC19_GetSource>
34011604:	4603      	mov	r3, r0
34011606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401160a:	d029      	beq.n	34011660 <RCCEx_GetCLKPCLKFreq+0x298>
3401160c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011610:	d82f      	bhi.n	34011672 <RCCEx_GetCLKPCLKFreq+0x2aa>
34011612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011616:	d01a      	beq.n	3401164e <RCCEx_GetCLKPCLKFreq+0x286>
34011618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401161c:	d829      	bhi.n	34011672 <RCCEx_GetCLKPCLKFreq+0x2aa>
3401161e:	2b00      	cmp	r3, #0
34011620:	d003      	beq.n	3401162a <RCCEx_GetCLKPCLKFreq+0x262>
34011622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011626:	d009      	beq.n	3401163c <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34011628:	e023      	b.n	34011672 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401162a:	f7ff fac9 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401162e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011630:	68fa      	ldr	r2, [r7, #12]
34011632:	68bb      	ldr	r3, [r7, #8]
34011634:	fbb2 f3f3 	udiv	r3, r2, r3
34011638:	60fb      	str	r3, [r7, #12]
              break;
3401163a:	e01b      	b.n	34011674 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401163c:	f7ff fb06 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011640:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011642:	68fa      	ldr	r2, [r7, #12]
34011644:	68bb      	ldr	r3, [r7, #8]
34011646:	fbb2 f3f3 	udiv	r3, r2, r3
3401164a:	60fb      	str	r3, [r7, #12]
              break;
3401164c:	e012      	b.n	34011674 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401164e:	f7ff fb43 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011652:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011654:	68fa      	ldr	r2, [r7, #12]
34011656:	68bb      	ldr	r3, [r7, #8]
34011658:	fbb2 f3f3 	udiv	r3, r2, r3
3401165c:	60fb      	str	r3, [r7, #12]
              break;
3401165e:	e009      	b.n	34011674 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011660:	f7ff fb80 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011664:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011666:	68fa      	ldr	r2, [r7, #12]
34011668:	68bb      	ldr	r3, [r7, #8]
3401166a:	fbb2 f3f3 	udiv	r3, r2, r3
3401166e:	60fb      	str	r3, [r7, #12]
              break;
34011670:	e000      	b.n	34011674 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
34011672:	bf00      	nop
          }
        }
        break;
34011674:	e056      	b.n	34011724 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
34011676:	f7f8 f965 	bl	34009944 <LL_RCC_IC20_IsEnabled>
3401167a:	4603      	mov	r3, r0
3401167c:	2b00      	cmp	r3, #0
3401167e:	d053      	beq.n	34011728 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34011680:	f7f8 f982 	bl	34009988 <LL_RCC_IC20_GetDivider>
34011684:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
34011686:	f7f8 f971 	bl	3400996c <LL_RCC_IC20_GetSource>
3401168a:	4603      	mov	r3, r0
3401168c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011690:	d02f      	beq.n	340116f2 <RCCEx_GetCLKPCLKFreq+0x32a>
34011692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011696:	d835      	bhi.n	34011704 <RCCEx_GetCLKPCLKFreq+0x33c>
34011698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401169c:	d020      	beq.n	340116e0 <RCCEx_GetCLKPCLKFreq+0x318>
3401169e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340116a2:	d82f      	bhi.n	34011704 <RCCEx_GetCLKPCLKFreq+0x33c>
340116a4:	2b00      	cmp	r3, #0
340116a6:	d009      	beq.n	340116bc <RCCEx_GetCLKPCLKFreq+0x2f4>
340116a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340116ac:	d00f      	beq.n	340116ce <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
340116ae:	e029      	b.n	34011704 <RCCEx_GetCLKPCLKFreq+0x33c>
340116b0:	03d09000 	.word	0x03d09000
340116b4:	003d0900 	.word	0x003d0900
340116b8:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340116bc:	f7ff fa80 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340116c0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116c2:	68fa      	ldr	r2, [r7, #12]
340116c4:	68bb      	ldr	r3, [r7, #8]
340116c6:	fbb2 f3f3 	udiv	r3, r2, r3
340116ca:	60fb      	str	r3, [r7, #12]
              break;
340116cc:	e01b      	b.n	34011706 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340116ce:	f7ff fabd 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340116d2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116d4:	68fa      	ldr	r2, [r7, #12]
340116d6:	68bb      	ldr	r3, [r7, #8]
340116d8:	fbb2 f3f3 	udiv	r3, r2, r3
340116dc:	60fb      	str	r3, [r7, #12]
              break;
340116de:	e012      	b.n	34011706 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340116e0:	f7ff fafa 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340116e4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116e6:	68fa      	ldr	r2, [r7, #12]
340116e8:	68bb      	ldr	r3, [r7, #8]
340116ea:	fbb2 f3f3 	udiv	r3, r2, r3
340116ee:	60fb      	str	r3, [r7, #12]
              break;
340116f0:	e009      	b.n	34011706 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340116f2:	f7ff fb37 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340116f6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
340116f8:	68fa      	ldr	r2, [r7, #12]
340116fa:	68bb      	ldr	r3, [r7, #8]
340116fc:	fbb2 f3f3 	udiv	r3, r2, r3
34011700:	60fb      	str	r3, [r7, #12]
              break;
34011702:	e000      	b.n	34011706 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34011704:	bf00      	nop
          }
        }
        break;
34011706:	e00f      	b.n	34011728 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34011708:	bf00      	nop
3401170a:	e00e      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401170c:	bf00      	nop
3401170e:	e00c      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011710:	bf00      	nop
34011712:	e00a      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011714:	bf00      	nop
34011716:	e008      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011718:	bf00      	nop
3401171a:	e006      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401171c:	bf00      	nop
3401171e:	e004      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011720:	bf00      	nop
34011722:	e002      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011724:	bf00      	nop
34011726:	e000      	b.n	3401172a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011728:	bf00      	nop
    }
  }

  return clkp_frequency;
3401172a:	68fb      	ldr	r3, [r7, #12]
}
3401172c:	4618      	mov	r0, r3
3401172e:	3710      	adds	r7, #16
34011730:	46bd      	mov	sp, r7
34011732:	bd80      	pop	{r7, pc}

34011734 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34011734:	b580      	push	{r7, lr}
34011736:	b082      	sub	sp, #8
34011738:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3401173a:	2300      	movs	r3, #0
3401173c:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3401173e:	f7f8 f881 	bl	34009844 <LL_RCC_IC18_IsEnabled>
34011742:	4603      	mov	r3, r0
34011744:	2b00      	cmp	r3, #0
34011746:	d03c      	beq.n	340117c2 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34011748:	f7f8 f89e 	bl	34009888 <LL_RCC_IC18_GetDivider>
3401174c:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3401174e:	f7f8 f88d 	bl	3400986c <LL_RCC_IC18_GetSource>
34011752:	4603      	mov	r3, r0
34011754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011758:	d029      	beq.n	340117ae <RCCEx_GetCSICLKFreq+0x7a>
3401175a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401175e:	d82f      	bhi.n	340117c0 <RCCEx_GetCSICLKFreq+0x8c>
34011760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011764:	d01a      	beq.n	3401179c <RCCEx_GetCSICLKFreq+0x68>
34011766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401176a:	d829      	bhi.n	340117c0 <RCCEx_GetCSICLKFreq+0x8c>
3401176c:	2b00      	cmp	r3, #0
3401176e:	d003      	beq.n	34011778 <RCCEx_GetCSICLKFreq+0x44>
34011770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011774:	d009      	beq.n	3401178a <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34011776:	e023      	b.n	340117c0 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011778:	f7ff fa22 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401177c:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3401177e:	687a      	ldr	r2, [r7, #4]
34011780:	683b      	ldr	r3, [r7, #0]
34011782:	fbb2 f3f3 	udiv	r3, r2, r3
34011786:	607b      	str	r3, [r7, #4]
        break;
34011788:	e01b      	b.n	340117c2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401178a:	f7ff fa5f 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401178e:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
34011790:	687a      	ldr	r2, [r7, #4]
34011792:	683b      	ldr	r3, [r7, #0]
34011794:	fbb2 f3f3 	udiv	r3, r2, r3
34011798:	607b      	str	r3, [r7, #4]
        break;
3401179a:	e012      	b.n	340117c2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401179c:	f7ff fa9c 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340117a0:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340117a2:	687a      	ldr	r2, [r7, #4]
340117a4:	683b      	ldr	r3, [r7, #0]
340117a6:	fbb2 f3f3 	udiv	r3, r2, r3
340117aa:	607b      	str	r3, [r7, #4]
        break;
340117ac:	e009      	b.n	340117c2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340117ae:	f7ff fad9 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340117b2:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340117b4:	687a      	ldr	r2, [r7, #4]
340117b6:	683b      	ldr	r3, [r7, #0]
340117b8:	fbb2 f3f3 	udiv	r3, r2, r3
340117bc:	607b      	str	r3, [r7, #4]
        break;
340117be:	e000      	b.n	340117c2 <RCCEx_GetCSICLKFreq+0x8e>
        break;
340117c0:	bf00      	nop
    }
  }

  return clkp_frequency;
340117c2:	687b      	ldr	r3, [r7, #4]
}
340117c4:	4618      	mov	r0, r3
340117c6:	3708      	adds	r7, #8
340117c8:	46bd      	mov	sp, r7
340117ca:	bd80      	pop	{r7, pc}

340117cc <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
340117cc:	b580      	push	{r7, lr}
340117ce:	b084      	sub	sp, #16
340117d0:	af00      	add	r7, sp, #0
340117d2:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
340117d4:	2300      	movs	r3, #0
340117d6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340117d8:	6878      	ldr	r0, [r7, #4]
340117da:	f7f7 f8fb 	bl	340089d4 <LL_RCC_GetDCMIPPClockSource>
340117de:	4603      	mov	r3, r0
340117e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340117e4:	d062      	beq.n	340118ac <RCCEx_GetDCMIPPCLKFreq+0xe0>
340117e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340117ea:	d86d      	bhi.n	340118c8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340117ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340117f0:	d019      	beq.n	34011826 <RCCEx_GetDCMIPPCLKFreq+0x5a>
340117f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340117f6:	d867      	bhi.n	340118c8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340117f8:	2b00      	cmp	r3, #0
340117fa:	d003      	beq.n	34011804 <RCCEx_GetDCMIPPCLKFreq+0x38>
340117fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34011800:	d00c      	beq.n	3401181c <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011802:	e061      	b.n	340118c8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011804:	f7f6 f9fc 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011808:	4603      	mov	r3, r0
3401180a:	4618      	mov	r0, r3
3401180c:	f7ff faf0 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011810:	4603      	mov	r3, r0
34011812:	4618      	mov	r0, r3
34011814:	f7ff fb2f 	bl	34010e76 <RCCEx_GetPCLK5Freq>
34011818:	60f8      	str	r0, [r7, #12]
      break;
3401181a:	e05a      	b.n	340118d2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401181c:	2007      	movs	r0, #7
3401181e:	f7ff fdd3 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011822:	60f8      	str	r0, [r7, #12]
      break;
34011824:	e055      	b.n	340118d2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34011826:	f7f7 ffcd 	bl	340097c4 <LL_RCC_IC17_IsEnabled>
3401182a:	4603      	mov	r3, r0
3401182c:	2b00      	cmp	r3, #0
3401182e:	d04d      	beq.n	340118cc <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34011830:	f7f7 ffea 	bl	34009808 <LL_RCC_IC17_GetDivider>
34011834:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34011836:	f7f7 ffd9 	bl	340097ec <LL_RCC_IC17_GetSource>
3401183a:	4603      	mov	r3, r0
3401183c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011840:	d029      	beq.n	34011896 <RCCEx_GetDCMIPPCLKFreq+0xca>
34011842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011846:	d82f      	bhi.n	340118a8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401184c:	d01a      	beq.n	34011884 <RCCEx_GetDCMIPPCLKFreq+0xb8>
3401184e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011852:	d829      	bhi.n	340118a8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011854:	2b00      	cmp	r3, #0
34011856:	d003      	beq.n	34011860 <RCCEx_GetDCMIPPCLKFreq+0x94>
34011858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401185c:	d009      	beq.n	34011872 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3401185e:	e023      	b.n	340118a8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011860:	f7ff f9ae 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011864:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011866:	68fa      	ldr	r2, [r7, #12]
34011868:	68bb      	ldr	r3, [r7, #8]
3401186a:	fbb2 f3f3 	udiv	r3, r2, r3
3401186e:	60fb      	str	r3, [r7, #12]
            break;
34011870:	e01b      	b.n	340118aa <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011872:	f7ff f9eb 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011876:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011878:	68fa      	ldr	r2, [r7, #12]
3401187a:	68bb      	ldr	r3, [r7, #8]
3401187c:	fbb2 f3f3 	udiv	r3, r2, r3
34011880:	60fb      	str	r3, [r7, #12]
            break;
34011882:	e012      	b.n	340118aa <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011884:	f7ff fa28 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011888:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3401188a:	68fa      	ldr	r2, [r7, #12]
3401188c:	68bb      	ldr	r3, [r7, #8]
3401188e:	fbb2 f3f3 	udiv	r3, r2, r3
34011892:	60fb      	str	r3, [r7, #12]
            break;
34011894:	e009      	b.n	340118aa <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011896:	f7ff fa65 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
3401189a:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3401189c:	68fa      	ldr	r2, [r7, #12]
3401189e:	68bb      	ldr	r3, [r7, #8]
340118a0:	fbb2 f3f3 	udiv	r3, r2, r3
340118a4:	60fb      	str	r3, [r7, #12]
            break;
340118a6:	e000      	b.n	340118aa <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
340118a8:	bf00      	nop
      break;
340118aa:	e00f      	b.n	340118cc <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
340118ac:	f7f6 fda6 	bl	340083fc <LL_RCC_HSI_IsReady>
340118b0:	4603      	mov	r3, r0
340118b2:	2b00      	cmp	r3, #0
340118b4:	d00c      	beq.n	340118d0 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340118b6:	f7f6 fdb3 	bl	34008420 <LL_RCC_HSI_GetDivider>
340118ba:	4603      	mov	r3, r0
340118bc:	09db      	lsrs	r3, r3, #7
340118be:	4a07      	ldr	r2, [pc, #28]	@ (340118dc <RCCEx_GetDCMIPPCLKFreq+0x110>)
340118c0:	fa22 f303 	lsr.w	r3, r2, r3
340118c4:	60fb      	str	r3, [r7, #12]
      break;
340118c6:	e003      	b.n	340118d0 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
340118c8:	bf00      	nop
340118ca:	e002      	b.n	340118d2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340118cc:	bf00      	nop
340118ce:	e000      	b.n	340118d2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340118d0:	bf00      	nop
  }

  return dcmipp_frequency;
340118d2:	68fb      	ldr	r3, [r7, #12]
}
340118d4:	4618      	mov	r0, r3
340118d6:	3710      	adds	r7, #16
340118d8:	46bd      	mov	sp, r7
340118da:	bd80      	pop	{r7, pc}
340118dc:	03d09000 	.word	0x03d09000

340118e0 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
340118e0:	b580      	push	{r7, lr}
340118e2:	b084      	sub	sp, #16
340118e4:	af00      	add	r7, sp, #0
340118e6:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
340118e8:	2300      	movs	r3, #0
340118ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340118ec:	6878      	ldr	r0, [r7, #4]
340118ee:	f7f7 f883 	bl	340089f8 <LL_RCC_GetETHClockSource>
340118f2:	4603      	mov	r3, r0
340118f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340118f8:	d05e      	beq.n	340119b8 <RCCEx_GetETH1CLKFreq+0xd8>
340118fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340118fe:	d863      	bhi.n	340119c8 <RCCEx_GetETH1CLKFreq+0xe8>
34011900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34011904:	d015      	beq.n	34011932 <RCCEx_GetETH1CLKFreq+0x52>
34011906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401190a:	d85d      	bhi.n	340119c8 <RCCEx_GetETH1CLKFreq+0xe8>
3401190c:	2b00      	cmp	r3, #0
3401190e:	d003      	beq.n	34011918 <RCCEx_GetETH1CLKFreq+0x38>
34011910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011914:	d008      	beq.n	34011928 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011916:	e057      	b.n	340119c8 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011918:	f7f6 f972 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
3401191c:	4603      	mov	r3, r0
3401191e:	4618      	mov	r0, r3
34011920:	f7ff fa66 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011924:	60f8      	str	r0, [r7, #12]
      break;
34011926:	e054      	b.n	340119d2 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011928:	2007      	movs	r0, #7
3401192a:	f7ff fd4d 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
3401192e:	60f8      	str	r0, [r7, #12]
      break;
34011930:	e04f      	b.n	340119d2 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34011932:	f7f7 fe07 	bl	34009544 <LL_RCC_IC12_IsEnabled>
34011936:	4603      	mov	r3, r0
34011938:	2b00      	cmp	r3, #0
3401193a:	d047      	beq.n	340119cc <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
3401193c:	f7f7 fe24 	bl	34009588 <LL_RCC_IC12_GetDivider>
34011940:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34011942:	f7f7 fe13 	bl	3400956c <LL_RCC_IC12_GetSource>
34011946:	4603      	mov	r3, r0
34011948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401194c:	d029      	beq.n	340119a2 <RCCEx_GetETH1CLKFreq+0xc2>
3401194e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011952:	d82f      	bhi.n	340119b4 <RCCEx_GetETH1CLKFreq+0xd4>
34011954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011958:	d01a      	beq.n	34011990 <RCCEx_GetETH1CLKFreq+0xb0>
3401195a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401195e:	d829      	bhi.n	340119b4 <RCCEx_GetETH1CLKFreq+0xd4>
34011960:	2b00      	cmp	r3, #0
34011962:	d003      	beq.n	3401196c <RCCEx_GetETH1CLKFreq+0x8c>
34011964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011968:	d009      	beq.n	3401197e <RCCEx_GetETH1CLKFreq+0x9e>
            break;
3401196a:	e023      	b.n	340119b4 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401196c:	f7ff f928 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011970:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34011972:	68fa      	ldr	r2, [r7, #12]
34011974:	68bb      	ldr	r3, [r7, #8]
34011976:	fbb2 f3f3 	udiv	r3, r2, r3
3401197a:	60fb      	str	r3, [r7, #12]
            break;
3401197c:	e01b      	b.n	340119b6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401197e:	f7ff f965 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011982:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34011984:	68fa      	ldr	r2, [r7, #12]
34011986:	68bb      	ldr	r3, [r7, #8]
34011988:	fbb2 f3f3 	udiv	r3, r2, r3
3401198c:	60fb      	str	r3, [r7, #12]
            break;
3401198e:	e012      	b.n	340119b6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011990:	f7ff f9a2 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011994:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34011996:	68fa      	ldr	r2, [r7, #12]
34011998:	68bb      	ldr	r3, [r7, #8]
3401199a:	fbb2 f3f3 	udiv	r3, r2, r3
3401199e:	60fb      	str	r3, [r7, #12]
            break;
340119a0:	e009      	b.n	340119b6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340119a2:	f7ff f9df 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340119a6:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
340119a8:	68fa      	ldr	r2, [r7, #12]
340119aa:	68bb      	ldr	r3, [r7, #8]
340119ac:	fbb2 f3f3 	udiv	r3, r2, r3
340119b0:	60fb      	str	r3, [r7, #12]
            break;
340119b2:	e000      	b.n	340119b6 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
340119b4:	bf00      	nop
      break;
340119b6:	e009      	b.n	340119cc <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
340119b8:	f7f6 fd0e 	bl	340083d8 <LL_RCC_HSE_IsReady>
340119bc:	4603      	mov	r3, r0
340119be:	2b00      	cmp	r3, #0
340119c0:	d006      	beq.n	340119d0 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
340119c2:	4b06      	ldr	r3, [pc, #24]	@ (340119dc <RCCEx_GetETH1CLKFreq+0xfc>)
340119c4:	60fb      	str	r3, [r7, #12]
      break;
340119c6:	e003      	b.n	340119d0 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
340119c8:	bf00      	nop
340119ca:	e002      	b.n	340119d2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340119cc:	bf00      	nop
340119ce:	e000      	b.n	340119d2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340119d0:	bf00      	nop
  }

  return eth1_frequency;
340119d2:	68fb      	ldr	r3, [r7, #12]
}
340119d4:	4618      	mov	r0, r3
340119d6:	3710      	adds	r7, #16
340119d8:	46bd      	mov	sp, r7
340119da:	bd80      	pop	{r7, pc}
340119dc:	02dc6c00 	.word	0x02dc6c00

340119e0 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
340119e0:	b580      	push	{r7, lr}
340119e2:	b084      	sub	sp, #16
340119e4:	af00      	add	r7, sp, #0
340119e6:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
340119e8:	2300      	movs	r3, #0
340119ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
340119ec:	6878      	ldr	r0, [r7, #4]
340119ee:	f7f7 f815 	bl	34008a1c <LL_RCC_GetETHPTPClockSource>
340119f2:	4603      	mov	r3, r0
340119f4:	2b03      	cmp	r3, #3
340119f6:	d863      	bhi.n	34011ac0 <RCCEx_GetETH1PTPCLKFreq+0xe0>
340119f8:	a201      	add	r2, pc, #4	@ (adr r2, 34011a00 <RCCEx_GetETH1PTPCLKFreq+0x20>)
340119fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340119fe:	bf00      	nop
34011a00:	34011a11 	.word	0x34011a11
34011a04:	34011a21 	.word	0x34011a21
34011a08:	34011a2b 	.word	0x34011a2b
34011a0c:	34011ab1 	.word	0x34011ab1
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011a10:	f7f6 f8f6 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011a14:	4603      	mov	r3, r0
34011a16:	4618      	mov	r0, r3
34011a18:	f7ff f9ea 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011a1c:	60f8      	str	r0, [r7, #12]
      break;
34011a1e:	e054      	b.n	34011aca <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011a20:	2007      	movs	r0, #7
34011a22:	f7ff fcd1 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011a26:	60f8      	str	r0, [r7, #12]
      break;
34011a28:	e04f      	b.n	34011aca <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34011a2a:	f7f7 fdcb 	bl	340095c4 <LL_RCC_IC13_IsEnabled>
34011a2e:	4603      	mov	r3, r0
34011a30:	2b00      	cmp	r3, #0
34011a32:	d047      	beq.n	34011ac4 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34011a34:	f7f7 fde8 	bl	34009608 <LL_RCC_IC13_GetDivider>
34011a38:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34011a3a:	f7f7 fdd7 	bl	340095ec <LL_RCC_IC13_GetSource>
34011a3e:	4603      	mov	r3, r0
34011a40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a44:	d029      	beq.n	34011a9a <RCCEx_GetETH1PTPCLKFreq+0xba>
34011a46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011a4a:	d82f      	bhi.n	34011aac <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a50:	d01a      	beq.n	34011a88 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34011a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011a56:	d829      	bhi.n	34011aac <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011a58:	2b00      	cmp	r3, #0
34011a5a:	d003      	beq.n	34011a64 <RCCEx_GetETH1PTPCLKFreq+0x84>
34011a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011a60:	d009      	beq.n	34011a76 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011a62:	e023      	b.n	34011aac <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011a64:	f7ff f8ac 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011a68:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a6a:	68fa      	ldr	r2, [r7, #12]
34011a6c:	68bb      	ldr	r3, [r7, #8]
34011a6e:	fbb2 f3f3 	udiv	r3, r2, r3
34011a72:	60fb      	str	r3, [r7, #12]
            break;
34011a74:	e01b      	b.n	34011aae <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011a76:	f7ff f8e9 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011a7a:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a7c:	68fa      	ldr	r2, [r7, #12]
34011a7e:	68bb      	ldr	r3, [r7, #8]
34011a80:	fbb2 f3f3 	udiv	r3, r2, r3
34011a84:	60fb      	str	r3, [r7, #12]
            break;
34011a86:	e012      	b.n	34011aae <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011a88:	f7ff f926 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011a8c:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011a8e:	68fa      	ldr	r2, [r7, #12]
34011a90:	68bb      	ldr	r3, [r7, #8]
34011a92:	fbb2 f3f3 	udiv	r3, r2, r3
34011a96:	60fb      	str	r3, [r7, #12]
            break;
34011a98:	e009      	b.n	34011aae <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011a9a:	f7ff f963 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011a9e:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011aa0:	68fa      	ldr	r2, [r7, #12]
34011aa2:	68bb      	ldr	r3, [r7, #8]
34011aa4:	fbb2 f3f3 	udiv	r3, r2, r3
34011aa8:	60fb      	str	r3, [r7, #12]
            break;
34011aaa:	e000      	b.n	34011aae <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34011aac:	bf00      	nop
        }
      }
      break;
34011aae:	e009      	b.n	34011ac4 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34011ab0:	f7f6 fc92 	bl	340083d8 <LL_RCC_HSE_IsReady>
34011ab4:	4603      	mov	r3, r0
34011ab6:	2b00      	cmp	r3, #0
34011ab8:	d006      	beq.n	34011ac8 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34011aba:	4b0a      	ldr	r3, [pc, #40]	@ (34011ae4 <RCCEx_GetETH1PTPCLKFreq+0x104>)
34011abc:	60fb      	str	r3, [r7, #12]
      }
      break;
34011abe:	e003      	b.n	34011ac8 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34011ac0:	bf00      	nop
34011ac2:	e002      	b.n	34011aca <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34011ac4:	bf00      	nop
34011ac6:	e000      	b.n	34011aca <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34011ac8:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34011aca:	f7f6 fde3 	bl	34008694 <LL_RCC_GetETH1PTPDivider>
34011ace:	4603      	mov	r3, r0
34011ad0:	091b      	lsrs	r3, r3, #4
34011ad2:	3301      	adds	r3, #1
34011ad4:	68fa      	ldr	r2, [r7, #12]
34011ad6:	fbb2 f3f3 	udiv	r3, r2, r3
}
34011ada:	4618      	mov	r0, r3
34011adc:	3710      	adds	r7, #16
34011ade:	46bd      	mov	sp, r7
34011ae0:	bd80      	pop	{r7, pc}
34011ae2:	bf00      	nop
34011ae4:	02dc6c00 	.word	0x02dc6c00

34011ae8 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34011ae8:	b580      	push	{r7, lr}
34011aea:	b084      	sub	sp, #16
34011aec:	af00      	add	r7, sp, #0
34011aee:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34011af0:	2300      	movs	r3, #0
34011af2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34011af4:	6878      	ldr	r0, [r7, #4]
34011af6:	f7f6 ffa3 	bl	34008a40 <LL_RCC_GetFDCANClockSource>
34011afa:	4603      	mov	r3, r0
34011afc:	2b03      	cmp	r3, #3
34011afe:	d867      	bhi.n	34011bd0 <RCCEx_GetFDCANCLKFreq+0xe8>
34011b00:	a201      	add	r2, pc, #4	@ (adr r2, 34011b08 <RCCEx_GetFDCANCLKFreq+0x20>)
34011b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011b06:	bf00      	nop
34011b08:	34011b19 	.word	0x34011b19
34011b0c:	34011b31 	.word	0x34011b31
34011b10:	34011b3b 	.word	0x34011b3b
34011b14:	34011bc1 	.word	0x34011bc1
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011b18:	f7f6 f872 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011b1c:	4603      	mov	r3, r0
34011b1e:	4618      	mov	r0, r3
34011b20:	f7ff f966 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011b24:	4603      	mov	r3, r0
34011b26:	4618      	mov	r0, r3
34011b28:	f7ff f973 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34011b2c:	60f8      	str	r0, [r7, #12]
      break;
34011b2e:	e054      	b.n	34011bda <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011b30:	2007      	movs	r0, #7
34011b32:	f7ff fc49 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011b36:	60f8      	str	r0, [r7, #12]
      break;
34011b38:	e04f      	b.n	34011bda <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34011b3a:	f7f7 fec3 	bl	340098c4 <LL_RCC_IC19_IsEnabled>
34011b3e:	4603      	mov	r3, r0
34011b40:	2b00      	cmp	r3, #0
34011b42:	d047      	beq.n	34011bd4 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34011b44:	f7f7 fee0 	bl	34009908 <LL_RCC_IC19_GetDivider>
34011b48:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34011b4a:	f7f7 fecf 	bl	340098ec <LL_RCC_IC19_GetSource>
34011b4e:	4603      	mov	r3, r0
34011b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b54:	d029      	beq.n	34011baa <RCCEx_GetFDCANCLKFreq+0xc2>
34011b56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b5a:	d82f      	bhi.n	34011bbc <RCCEx_GetFDCANCLKFreq+0xd4>
34011b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b60:	d01a      	beq.n	34011b98 <RCCEx_GetFDCANCLKFreq+0xb0>
34011b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b66:	d829      	bhi.n	34011bbc <RCCEx_GetFDCANCLKFreq+0xd4>
34011b68:	2b00      	cmp	r3, #0
34011b6a:	d003      	beq.n	34011b74 <RCCEx_GetFDCANCLKFreq+0x8c>
34011b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011b70:	d009      	beq.n	34011b86 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011b72:	e023      	b.n	34011bbc <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011b74:	f7ff f824 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011b78:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011b7a:	68fa      	ldr	r2, [r7, #12]
34011b7c:	68bb      	ldr	r3, [r7, #8]
34011b7e:	fbb2 f3f3 	udiv	r3, r2, r3
34011b82:	60fb      	str	r3, [r7, #12]
            break;
34011b84:	e01b      	b.n	34011bbe <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011b86:	f7ff f861 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011b8a:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011b8c:	68fa      	ldr	r2, [r7, #12]
34011b8e:	68bb      	ldr	r3, [r7, #8]
34011b90:	fbb2 f3f3 	udiv	r3, r2, r3
34011b94:	60fb      	str	r3, [r7, #12]
            break;
34011b96:	e012      	b.n	34011bbe <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011b98:	f7ff f89e 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011b9c:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011b9e:	68fa      	ldr	r2, [r7, #12]
34011ba0:	68bb      	ldr	r3, [r7, #8]
34011ba2:	fbb2 f3f3 	udiv	r3, r2, r3
34011ba6:	60fb      	str	r3, [r7, #12]
            break;
34011ba8:	e009      	b.n	34011bbe <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011baa:	f7ff f8db 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011bae:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011bb0:	68fa      	ldr	r2, [r7, #12]
34011bb2:	68bb      	ldr	r3, [r7, #8]
34011bb4:	fbb2 f3f3 	udiv	r3, r2, r3
34011bb8:	60fb      	str	r3, [r7, #12]
            break;
34011bba:	e000      	b.n	34011bbe <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34011bbc:	bf00      	nop
        }
      }
      break;
34011bbe:	e009      	b.n	34011bd4 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34011bc0:	f7f6 fc0a 	bl	340083d8 <LL_RCC_HSE_IsReady>
34011bc4:	4603      	mov	r3, r0
34011bc6:	2b00      	cmp	r3, #0
34011bc8:	d006      	beq.n	34011bd8 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34011bca:	4b06      	ldr	r3, [pc, #24]	@ (34011be4 <RCCEx_GetFDCANCLKFreq+0xfc>)
34011bcc:	60fb      	str	r3, [r7, #12]
      }
      break;
34011bce:	e003      	b.n	34011bd8 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34011bd0:	bf00      	nop
34011bd2:	e002      	b.n	34011bda <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34011bd4:	bf00      	nop
34011bd6:	e000      	b.n	34011bda <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34011bd8:	bf00      	nop
  }

  return fdcan_frequency;
34011bda:	68fb      	ldr	r3, [r7, #12]
}
34011bdc:	4618      	mov	r0, r3
34011bde:	3710      	adds	r7, #16
34011be0:	46bd      	mov	sp, r7
34011be2:	bd80      	pop	{r7, pc}
34011be4:	02dc6c00 	.word	0x02dc6c00

34011be8 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34011be8:	b580      	push	{r7, lr}
34011bea:	b084      	sub	sp, #16
34011bec:	af00      	add	r7, sp, #0
34011bee:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34011bf0:	2300      	movs	r3, #0
34011bf2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34011bf4:	6878      	ldr	r0, [r7, #4]
34011bf6:	f7f6 ff35 	bl	34008a64 <LL_RCC_GetFMCClockSource>
34011bfa:	4603      	mov	r3, r0
34011bfc:	2b30      	cmp	r3, #48	@ 0x30
34011bfe:	d05d      	beq.n	34011cbc <RCCEx_GetFMCCLKFreq+0xd4>
34011c00:	2b30      	cmp	r3, #48	@ 0x30
34011c02:	f200 809e 	bhi.w	34011d42 <RCCEx_GetFMCCLKFreq+0x15a>
34011c06:	2b20      	cmp	r3, #32
34011c08:	d014      	beq.n	34011c34 <RCCEx_GetFMCCLKFreq+0x4c>
34011c0a:	2b20      	cmp	r3, #32
34011c0c:	f200 8099 	bhi.w	34011d42 <RCCEx_GetFMCCLKFreq+0x15a>
34011c10:	2b00      	cmp	r3, #0
34011c12:	d002      	beq.n	34011c1a <RCCEx_GetFMCCLKFreq+0x32>
34011c14:	2b10      	cmp	r3, #16
34011c16:	d008      	beq.n	34011c2a <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011c18:	e093      	b.n	34011d42 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011c1a:	f7f5 fff1 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011c1e:	4603      	mov	r3, r0
34011c20:	4618      	mov	r0, r3
34011c22:	f7ff f8e5 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011c26:	60f8      	str	r0, [r7, #12]
      break;
34011c28:	e090      	b.n	34011d4c <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011c2a:	2007      	movs	r0, #7
34011c2c:	f7ff fbcc 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011c30:	60f8      	str	r0, [r7, #12]
      break;
34011c32:	e08b      	b.n	34011d4c <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34011c34:	f7f7 fac6 	bl	340091c4 <LL_RCC_IC3_IsEnabled>
34011c38:	4603      	mov	r3, r0
34011c3a:	2b00      	cmp	r3, #0
34011c3c:	f000 8083 	beq.w	34011d46 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34011c40:	f7f7 fae2 	bl	34009208 <LL_RCC_IC3_GetDivider>
34011c44:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34011c46:	f7f7 fad1 	bl	340091ec <LL_RCC_IC3_GetSource>
34011c4a:	4603      	mov	r3, r0
34011c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011c50:	d029      	beq.n	34011ca6 <RCCEx_GetFMCCLKFreq+0xbe>
34011c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011c56:	d82f      	bhi.n	34011cb8 <RCCEx_GetFMCCLKFreq+0xd0>
34011c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011c5c:	d01a      	beq.n	34011c94 <RCCEx_GetFMCCLKFreq+0xac>
34011c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011c62:	d829      	bhi.n	34011cb8 <RCCEx_GetFMCCLKFreq+0xd0>
34011c64:	2b00      	cmp	r3, #0
34011c66:	d003      	beq.n	34011c70 <RCCEx_GetFMCCLKFreq+0x88>
34011c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011c6c:	d009      	beq.n	34011c82 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34011c6e:	e023      	b.n	34011cb8 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011c70:	f7fe ffa6 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011c74:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011c76:	68fa      	ldr	r2, [r7, #12]
34011c78:	68bb      	ldr	r3, [r7, #8]
34011c7a:	fbb2 f3f3 	udiv	r3, r2, r3
34011c7e:	60fb      	str	r3, [r7, #12]
            break;
34011c80:	e01b      	b.n	34011cba <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011c82:	f7fe ffe3 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011c86:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011c88:	68fa      	ldr	r2, [r7, #12]
34011c8a:	68bb      	ldr	r3, [r7, #8]
34011c8c:	fbb2 f3f3 	udiv	r3, r2, r3
34011c90:	60fb      	str	r3, [r7, #12]
            break;
34011c92:	e012      	b.n	34011cba <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011c94:	f7ff f820 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011c98:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011c9a:	68fa      	ldr	r2, [r7, #12]
34011c9c:	68bb      	ldr	r3, [r7, #8]
34011c9e:	fbb2 f3f3 	udiv	r3, r2, r3
34011ca2:	60fb      	str	r3, [r7, #12]
            break;
34011ca4:	e009      	b.n	34011cba <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011ca6:	f7ff f85d 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011caa:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011cac:	68fa      	ldr	r2, [r7, #12]
34011cae:	68bb      	ldr	r3, [r7, #8]
34011cb0:	fbb2 f3f3 	udiv	r3, r2, r3
34011cb4:	60fb      	str	r3, [r7, #12]
            break;
34011cb6:	e000      	b.n	34011cba <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34011cb8:	bf00      	nop
      break;
34011cba:	e044      	b.n	34011d46 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34011cbc:	f7f7 fac2 	bl	34009244 <LL_RCC_IC4_IsEnabled>
34011cc0:	4603      	mov	r3, r0
34011cc2:	2b00      	cmp	r3, #0
34011cc4:	d041      	beq.n	34011d4a <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34011cc6:	f7f7 fadf 	bl	34009288 <LL_RCC_IC4_GetDivider>
34011cca:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34011ccc:	f7f7 face 	bl	3400926c <LL_RCC_IC4_GetSource>
34011cd0:	4603      	mov	r3, r0
34011cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cd6:	d029      	beq.n	34011d2c <RCCEx_GetFMCCLKFreq+0x144>
34011cd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011cdc:	d82f      	bhi.n	34011d3e <RCCEx_GetFMCCLKFreq+0x156>
34011cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011ce2:	d01a      	beq.n	34011d1a <RCCEx_GetFMCCLKFreq+0x132>
34011ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011ce8:	d829      	bhi.n	34011d3e <RCCEx_GetFMCCLKFreq+0x156>
34011cea:	2b00      	cmp	r3, #0
34011cec:	d003      	beq.n	34011cf6 <RCCEx_GetFMCCLKFreq+0x10e>
34011cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011cf2:	d009      	beq.n	34011d08 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34011cf4:	e023      	b.n	34011d3e <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011cf6:	f7fe ff63 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011cfa:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011cfc:	68fa      	ldr	r2, [r7, #12]
34011cfe:	68bb      	ldr	r3, [r7, #8]
34011d00:	fbb2 f3f3 	udiv	r3, r2, r3
34011d04:	60fb      	str	r3, [r7, #12]
            break;
34011d06:	e01b      	b.n	34011d40 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011d08:	f7fe ffa0 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011d0c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d0e:	68fa      	ldr	r2, [r7, #12]
34011d10:	68bb      	ldr	r3, [r7, #8]
34011d12:	fbb2 f3f3 	udiv	r3, r2, r3
34011d16:	60fb      	str	r3, [r7, #12]
            break;
34011d18:	e012      	b.n	34011d40 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011d1a:	f7fe ffdd 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011d1e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d20:	68fa      	ldr	r2, [r7, #12]
34011d22:	68bb      	ldr	r3, [r7, #8]
34011d24:	fbb2 f3f3 	udiv	r3, r2, r3
34011d28:	60fb      	str	r3, [r7, #12]
            break;
34011d2a:	e009      	b.n	34011d40 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011d2c:	f7ff f81a 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011d30:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011d32:	68fa      	ldr	r2, [r7, #12]
34011d34:	68bb      	ldr	r3, [r7, #8]
34011d36:	fbb2 f3f3 	udiv	r3, r2, r3
34011d3a:	60fb      	str	r3, [r7, #12]
            break;
34011d3c:	e000      	b.n	34011d40 <RCCEx_GetFMCCLKFreq+0x158>
            break;
34011d3e:	bf00      	nop
      break;
34011d40:	e003      	b.n	34011d4a <RCCEx_GetFMCCLKFreq+0x162>
      break;
34011d42:	bf00      	nop
34011d44:	e002      	b.n	34011d4c <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011d46:	bf00      	nop
34011d48:	e000      	b.n	34011d4c <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011d4a:	bf00      	nop
  }

  return fmc_frequency;
34011d4c:	68fb      	ldr	r3, [r7, #12]
}
34011d4e:	4618      	mov	r0, r3
34011d50:	3710      	adds	r7, #16
34011d52:	46bd      	mov	sp, r7
34011d54:	bd80      	pop	{r7, pc}
	...

34011d58 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34011d58:	b580      	push	{r7, lr}
34011d5a:	b084      	sub	sp, #16
34011d5c:	af00      	add	r7, sp, #0
34011d5e:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34011d60:	2300      	movs	r3, #0
34011d62:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34011d64:	6878      	ldr	r0, [r7, #4]
34011d66:	f7f6 fe8f 	bl	34008a88 <LL_RCC_GetI2CClockSource>
34011d6a:	4603      	mov	r3, r0
34011d6c:	4aa2      	ldr	r2, [pc, #648]	@ (34011ff8 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011d6e:	4293      	cmp	r3, r2
34011d70:	f000 8172 	beq.w	34012058 <RCCEx_GetI2CCLKFreq+0x300>
34011d74:	4aa0      	ldr	r2, [pc, #640]	@ (34011ff8 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011d76:	4293      	cmp	r3, r2
34011d78:	f200 8184 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011d7c:	4a9f      	ldr	r2, [pc, #636]	@ (34011ffc <RCCEx_GetI2CCLKFreq+0x2a4>)
34011d7e:	4293      	cmp	r3, r2
34011d80:	f000 816a 	beq.w	34012058 <RCCEx_GetI2CCLKFreq+0x300>
34011d84:	4a9d      	ldr	r2, [pc, #628]	@ (34011ffc <RCCEx_GetI2CCLKFreq+0x2a4>)
34011d86:	4293      	cmp	r3, r2
34011d88:	f200 817c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011d8c:	4a9c      	ldr	r2, [pc, #624]	@ (34012000 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011d8e:	4293      	cmp	r3, r2
34011d90:	f000 8162 	beq.w	34012058 <RCCEx_GetI2CCLKFreq+0x300>
34011d94:	4a9a      	ldr	r2, [pc, #616]	@ (34012000 <RCCEx_GetI2CCLKFreq+0x2a8>)
34011d96:	4293      	cmp	r3, r2
34011d98:	f200 8174 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011d9c:	4a99      	ldr	r2, [pc, #612]	@ (34012004 <RCCEx_GetI2CCLKFreq+0x2ac>)
34011d9e:	4293      	cmp	r3, r2
34011da0:	f000 815a 	beq.w	34012058 <RCCEx_GetI2CCLKFreq+0x300>
34011da4:	4a97      	ldr	r2, [pc, #604]	@ (34012004 <RCCEx_GetI2CCLKFreq+0x2ac>)
34011da6:	4293      	cmp	r3, r2
34011da8:	f200 816c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011dac:	4a96      	ldr	r2, [pc, #600]	@ (34012008 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011dae:	4293      	cmp	r3, r2
34011db0:	f000 8160 	beq.w	34012074 <RCCEx_GetI2CCLKFreq+0x31c>
34011db4:	4a94      	ldr	r2, [pc, #592]	@ (34012008 <RCCEx_GetI2CCLKFreq+0x2b0>)
34011db6:	4293      	cmp	r3, r2
34011db8:	f200 8164 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011dbc:	4a93      	ldr	r2, [pc, #588]	@ (3401200c <RCCEx_GetI2CCLKFreq+0x2b4>)
34011dbe:	4293      	cmp	r3, r2
34011dc0:	f000 8158 	beq.w	34012074 <RCCEx_GetI2CCLKFreq+0x31c>
34011dc4:	4a91      	ldr	r2, [pc, #580]	@ (3401200c <RCCEx_GetI2CCLKFreq+0x2b4>)
34011dc6:	4293      	cmp	r3, r2
34011dc8:	f200 815c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011dcc:	4a90      	ldr	r2, [pc, #576]	@ (34012010 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011dce:	4293      	cmp	r3, r2
34011dd0:	f000 8150 	beq.w	34012074 <RCCEx_GetI2CCLKFreq+0x31c>
34011dd4:	4a8e      	ldr	r2, [pc, #568]	@ (34012010 <RCCEx_GetI2CCLKFreq+0x2b8>)
34011dd6:	4293      	cmp	r3, r2
34011dd8:	f200 8154 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011ddc:	4a8d      	ldr	r2, [pc, #564]	@ (34012014 <RCCEx_GetI2CCLKFreq+0x2bc>)
34011dde:	4293      	cmp	r3, r2
34011de0:	f000 8148 	beq.w	34012074 <RCCEx_GetI2CCLKFreq+0x31c>
34011de4:	4a8b      	ldr	r2, [pc, #556]	@ (34012014 <RCCEx_GetI2CCLKFreq+0x2bc>)
34011de6:	4293      	cmp	r3, r2
34011de8:	f200 814c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011dec:	4a8a      	ldr	r2, [pc, #552]	@ (34012018 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011dee:	4293      	cmp	r3, r2
34011df0:	f000 80be 	beq.w	34011f70 <RCCEx_GetI2CCLKFreq+0x218>
34011df4:	4a88      	ldr	r2, [pc, #544]	@ (34012018 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011df6:	4293      	cmp	r3, r2
34011df8:	f200 8144 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011dfc:	4a87      	ldr	r2, [pc, #540]	@ (3401201c <RCCEx_GetI2CCLKFreq+0x2c4>)
34011dfe:	4293      	cmp	r3, r2
34011e00:	f000 80b6 	beq.w	34011f70 <RCCEx_GetI2CCLKFreq+0x218>
34011e04:	4a85      	ldr	r2, [pc, #532]	@ (3401201c <RCCEx_GetI2CCLKFreq+0x2c4>)
34011e06:	4293      	cmp	r3, r2
34011e08:	f200 813c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e0c:	4a84      	ldr	r2, [pc, #528]	@ (34012020 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011e0e:	4293      	cmp	r3, r2
34011e10:	f000 80ae 	beq.w	34011f70 <RCCEx_GetI2CCLKFreq+0x218>
34011e14:	4a82      	ldr	r2, [pc, #520]	@ (34012020 <RCCEx_GetI2CCLKFreq+0x2c8>)
34011e16:	4293      	cmp	r3, r2
34011e18:	f200 8134 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e1c:	4a81      	ldr	r2, [pc, #516]	@ (34012024 <RCCEx_GetI2CCLKFreq+0x2cc>)
34011e1e:	4293      	cmp	r3, r2
34011e20:	f000 80a6 	beq.w	34011f70 <RCCEx_GetI2CCLKFreq+0x218>
34011e24:	4a7f      	ldr	r2, [pc, #508]	@ (34012024 <RCCEx_GetI2CCLKFreq+0x2cc>)
34011e26:	4293      	cmp	r3, r2
34011e28:	f200 812c 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e2c:	4a7e      	ldr	r2, [pc, #504]	@ (34012028 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011e2e:	4293      	cmp	r3, r2
34011e30:	d05a      	beq.n	34011ee8 <RCCEx_GetI2CCLKFreq+0x190>
34011e32:	4a7d      	ldr	r2, [pc, #500]	@ (34012028 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011e34:	4293      	cmp	r3, r2
34011e36:	f200 8125 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e3a:	4a7c      	ldr	r2, [pc, #496]	@ (3401202c <RCCEx_GetI2CCLKFreq+0x2d4>)
34011e3c:	4293      	cmp	r3, r2
34011e3e:	d053      	beq.n	34011ee8 <RCCEx_GetI2CCLKFreq+0x190>
34011e40:	4a7a      	ldr	r2, [pc, #488]	@ (3401202c <RCCEx_GetI2CCLKFreq+0x2d4>)
34011e42:	4293      	cmp	r3, r2
34011e44:	f200 811e 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e48:	4a79      	ldr	r2, [pc, #484]	@ (34012030 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011e4a:	4293      	cmp	r3, r2
34011e4c:	d04c      	beq.n	34011ee8 <RCCEx_GetI2CCLKFreq+0x190>
34011e4e:	4a78      	ldr	r2, [pc, #480]	@ (34012030 <RCCEx_GetI2CCLKFreq+0x2d8>)
34011e50:	4293      	cmp	r3, r2
34011e52:	f200 8117 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e56:	4a77      	ldr	r2, [pc, #476]	@ (34012034 <RCCEx_GetI2CCLKFreq+0x2dc>)
34011e58:	4293      	cmp	r3, r2
34011e5a:	d045      	beq.n	34011ee8 <RCCEx_GetI2CCLKFreq+0x190>
34011e5c:	4a75      	ldr	r2, [pc, #468]	@ (34012034 <RCCEx_GetI2CCLKFreq+0x2dc>)
34011e5e:	4293      	cmp	r3, r2
34011e60:	f200 8110 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e64:	4a74      	ldr	r2, [pc, #464]	@ (34012038 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011e66:	4293      	cmp	r3, r2
34011e68:	d039      	beq.n	34011ede <RCCEx_GetI2CCLKFreq+0x186>
34011e6a:	4a73      	ldr	r2, [pc, #460]	@ (34012038 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011e6c:	4293      	cmp	r3, r2
34011e6e:	f200 8109 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e72:	4a72      	ldr	r2, [pc, #456]	@ (3401203c <RCCEx_GetI2CCLKFreq+0x2e4>)
34011e74:	4293      	cmp	r3, r2
34011e76:	d032      	beq.n	34011ede <RCCEx_GetI2CCLKFreq+0x186>
34011e78:	4a70      	ldr	r2, [pc, #448]	@ (3401203c <RCCEx_GetI2CCLKFreq+0x2e4>)
34011e7a:	4293      	cmp	r3, r2
34011e7c:	f200 8102 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e80:	4a6f      	ldr	r2, [pc, #444]	@ (34012040 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011e82:	4293      	cmp	r3, r2
34011e84:	d02b      	beq.n	34011ede <RCCEx_GetI2CCLKFreq+0x186>
34011e86:	4a6e      	ldr	r2, [pc, #440]	@ (34012040 <RCCEx_GetI2CCLKFreq+0x2e8>)
34011e88:	4293      	cmp	r3, r2
34011e8a:	f200 80fb 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e8e:	4a6d      	ldr	r2, [pc, #436]	@ (34012044 <RCCEx_GetI2CCLKFreq+0x2ec>)
34011e90:	4293      	cmp	r3, r2
34011e92:	d024      	beq.n	34011ede <RCCEx_GetI2CCLKFreq+0x186>
34011e94:	4a6b      	ldr	r2, [pc, #428]	@ (34012044 <RCCEx_GetI2CCLKFreq+0x2ec>)
34011e96:	4293      	cmp	r3, r2
34011e98:	f200 80f4 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011e9c:	4a6a      	ldr	r2, [pc, #424]	@ (34012048 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011e9e:	4293      	cmp	r3, r2
34011ea0:	d011      	beq.n	34011ec6 <RCCEx_GetI2CCLKFreq+0x16e>
34011ea2:	4a69      	ldr	r2, [pc, #420]	@ (34012048 <RCCEx_GetI2CCLKFreq+0x2f0>)
34011ea4:	4293      	cmp	r3, r2
34011ea6:	f200 80ed 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011eaa:	4a68      	ldr	r2, [pc, #416]	@ (3401204c <RCCEx_GetI2CCLKFreq+0x2f4>)
34011eac:	4293      	cmp	r3, r2
34011eae:	d00a      	beq.n	34011ec6 <RCCEx_GetI2CCLKFreq+0x16e>
34011eb0:	4a66      	ldr	r2, [pc, #408]	@ (3401204c <RCCEx_GetI2CCLKFreq+0x2f4>)
34011eb2:	4293      	cmp	r3, r2
34011eb4:	f200 80e6 	bhi.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
34011eb8:	4a65      	ldr	r2, [pc, #404]	@ (34012050 <RCCEx_GetI2CCLKFreq+0x2f8>)
34011eba:	4293      	cmp	r3, r2
34011ebc:	d003      	beq.n	34011ec6 <RCCEx_GetI2CCLKFreq+0x16e>
34011ebe:	4a65      	ldr	r2, [pc, #404]	@ (34012054 <RCCEx_GetI2CCLKFreq+0x2fc>)
34011ec0:	4293      	cmp	r3, r2
34011ec2:	f040 80df 	bne.w	34012084 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011ec6:	f7f5 fe9b 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34011eca:	4603      	mov	r3, r0
34011ecc:	4618      	mov	r0, r3
34011ece:	f7fe ff8f 	bl	34010df0 <RCCEx_GetHCLKFreq>
34011ed2:	4603      	mov	r3, r0
34011ed4:	4618      	mov	r0, r3
34011ed6:	f7fe ff9c 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34011eda:	60f8      	str	r0, [r7, #12]
      break;
34011edc:	e0db      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011ede:	2007      	movs	r0, #7
34011ee0:	f7ff fa72 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34011ee4:	60f8      	str	r0, [r7, #12]
      break;
34011ee6:	e0d6      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34011ee8:	f7f7 faec 	bl	340094c4 <LL_RCC_IC10_IsEnabled>
34011eec:	4603      	mov	r3, r0
34011eee:	2b00      	cmp	r3, #0
34011ef0:	f000 80ca 	beq.w	34012088 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011ef4:	f7f7 fb08 	bl	34009508 <LL_RCC_IC10_GetDivider>
34011ef8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011efa:	f7f7 faf7 	bl	340094ec <LL_RCC_IC10_GetSource>
34011efe:	4603      	mov	r3, r0
34011f00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f04:	d029      	beq.n	34011f5a <RCCEx_GetI2CCLKFreq+0x202>
34011f06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f0a:	d82f      	bhi.n	34011f6c <RCCEx_GetI2CCLKFreq+0x214>
34011f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f10:	d01a      	beq.n	34011f48 <RCCEx_GetI2CCLKFreq+0x1f0>
34011f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f16:	d829      	bhi.n	34011f6c <RCCEx_GetI2CCLKFreq+0x214>
34011f18:	2b00      	cmp	r3, #0
34011f1a:	d003      	beq.n	34011f24 <RCCEx_GetI2CCLKFreq+0x1cc>
34011f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011f20:	d009      	beq.n	34011f36 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011f22:	e023      	b.n	34011f6c <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011f24:	f7fe fe4c 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011f28:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f2a:	68fa      	ldr	r2, [r7, #12]
34011f2c:	68bb      	ldr	r3, [r7, #8]
34011f2e:	fbb2 f3f3 	udiv	r3, r2, r3
34011f32:	60fb      	str	r3, [r7, #12]
            break;
34011f34:	e01b      	b.n	34011f6e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011f36:	f7fe fe89 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011f3a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f3c:	68fa      	ldr	r2, [r7, #12]
34011f3e:	68bb      	ldr	r3, [r7, #8]
34011f40:	fbb2 f3f3 	udiv	r3, r2, r3
34011f44:	60fb      	str	r3, [r7, #12]
            break;
34011f46:	e012      	b.n	34011f6e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011f48:	f7fe fec6 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011f4c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f4e:	68fa      	ldr	r2, [r7, #12]
34011f50:	68bb      	ldr	r3, [r7, #8]
34011f52:	fbb2 f3f3 	udiv	r3, r2, r3
34011f56:	60fb      	str	r3, [r7, #12]
            break;
34011f58:	e009      	b.n	34011f6e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011f5a:	f7fe ff03 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011f5e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011f60:	68fa      	ldr	r2, [r7, #12]
34011f62:	68bb      	ldr	r3, [r7, #8]
34011f64:	fbb2 f3f3 	udiv	r3, r2, r3
34011f68:	60fb      	str	r3, [r7, #12]
            break;
34011f6a:	e000      	b.n	34011f6e <RCCEx_GetI2CCLKFreq+0x216>
            break;
34011f6c:	bf00      	nop
        }
      }
      break;
34011f6e:	e08b      	b.n	34012088 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011f70:	f7f7 fba8 	bl	340096c4 <LL_RCC_IC15_IsEnabled>
34011f74:	4603      	mov	r3, r0
34011f76:	2b00      	cmp	r3, #0
34011f78:	f000 8088 	beq.w	3401208c <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011f7c:	f7f7 fbc4 	bl	34009708 <LL_RCC_IC15_GetDivider>
34011f80:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34011f82:	f7f7 fbb3 	bl	340096ec <LL_RCC_IC15_GetSource>
34011f86:	4603      	mov	r3, r0
34011f88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f8c:	d029      	beq.n	34011fe2 <RCCEx_GetI2CCLKFreq+0x28a>
34011f8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011f92:	d82f      	bhi.n	34011ff4 <RCCEx_GetI2CCLKFreq+0x29c>
34011f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f98:	d01a      	beq.n	34011fd0 <RCCEx_GetI2CCLKFreq+0x278>
34011f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011f9e:	d829      	bhi.n	34011ff4 <RCCEx_GetI2CCLKFreq+0x29c>
34011fa0:	2b00      	cmp	r3, #0
34011fa2:	d003      	beq.n	34011fac <RCCEx_GetI2CCLKFreq+0x254>
34011fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011fa8:	d009      	beq.n	34011fbe <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011faa:	e023      	b.n	34011ff4 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011fac:	f7fe fe08 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34011fb0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fb2:	68fa      	ldr	r2, [r7, #12]
34011fb4:	68bb      	ldr	r3, [r7, #8]
34011fb6:	fbb2 f3f3 	udiv	r3, r2, r3
34011fba:	60fb      	str	r3, [r7, #12]
            break;
34011fbc:	e01b      	b.n	34011ff6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011fbe:	f7fe fe45 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34011fc2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fc4:	68fa      	ldr	r2, [r7, #12]
34011fc6:	68bb      	ldr	r3, [r7, #8]
34011fc8:	fbb2 f3f3 	udiv	r3, r2, r3
34011fcc:	60fb      	str	r3, [r7, #12]
            break;
34011fce:	e012      	b.n	34011ff6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011fd0:	f7fe fe82 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34011fd4:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fd6:	68fa      	ldr	r2, [r7, #12]
34011fd8:	68bb      	ldr	r3, [r7, #8]
34011fda:	fbb2 f3f3 	udiv	r3, r2, r3
34011fde:	60fb      	str	r3, [r7, #12]
            break;
34011fe0:	e009      	b.n	34011ff6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011fe2:	f7fe febf 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34011fe6:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011fe8:	68fa      	ldr	r2, [r7, #12]
34011fea:	68bb      	ldr	r3, [r7, #8]
34011fec:	fbb2 f3f3 	udiv	r3, r2, r3
34011ff0:	60fb      	str	r3, [r7, #12]
            break;
34011ff2:	e000      	b.n	34011ff6 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34011ff4:	bf00      	nop
        }
      }
      break;
34011ff6:	e049      	b.n	3401208c <RCCEx_GetI2CCLKFreq+0x334>
34011ff8:	07050c0c 	.word	0x07050c0c
34011ffc:	0705080c 	.word	0x0705080c
34012000:	0705040c 	.word	0x0705040c
34012004:	0705000c 	.word	0x0705000c
34012008:	07040c0c 	.word	0x07040c0c
3401200c:	0704080c 	.word	0x0704080c
34012010:	0704040c 	.word	0x0704040c
34012014:	0704000c 	.word	0x0704000c
34012018:	07030c0c 	.word	0x07030c0c
3401201c:	0703080c 	.word	0x0703080c
34012020:	0703040c 	.word	0x0703040c
34012024:	0703000c 	.word	0x0703000c
34012028:	07020c0c 	.word	0x07020c0c
3401202c:	0702080c 	.word	0x0702080c
34012030:	0702040c 	.word	0x0702040c
34012034:	0702000c 	.word	0x0702000c
34012038:	07010c0c 	.word	0x07010c0c
3401203c:	0701080c 	.word	0x0701080c
34012040:	0701040c 	.word	0x0701040c
34012044:	0701000c 	.word	0x0701000c
34012048:	07000c0c 	.word	0x07000c0c
3401204c:	0700080c 	.word	0x0700080c
34012050:	0700000c 	.word	0x0700000c
34012054:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012058:	f7f6 f9d0 	bl	340083fc <LL_RCC_HSI_IsReady>
3401205c:	4603      	mov	r3, r0
3401205e:	2b00      	cmp	r3, #0
34012060:	d016      	beq.n	34012090 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012062:	f7f6 f9dd 	bl	34008420 <LL_RCC_HSI_GetDivider>
34012066:	4603      	mov	r3, r0
34012068:	09db      	lsrs	r3, r3, #7
3401206a:	4a0d      	ldr	r2, [pc, #52]	@ (340120a0 <RCCEx_GetI2CCLKFreq+0x348>)
3401206c:	fa22 f303 	lsr.w	r3, r2, r3
34012070:	60fb      	str	r3, [r7, #12]
      }
      break;
34012072:	e00d      	b.n	34012090 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012074:	f7f6 f9e2 	bl	3400843c <LL_RCC_MSI_IsReady>
34012078:	4603      	mov	r3, r0
3401207a:	2b00      	cmp	r3, #0
3401207c:	d00a      	beq.n	34012094 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3401207e:	4b09      	ldr	r3, [pc, #36]	@ (340120a4 <RCCEx_GetI2CCLKFreq+0x34c>)
34012080:	60fb      	str	r3, [r7, #12]
      }
      break;
34012082:	e007      	b.n	34012094 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34012084:	bf00      	nop
34012086:	e006      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012088:	bf00      	nop
3401208a:	e004      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3401208c:	bf00      	nop
3401208e:	e002      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012090:	bf00      	nop
34012092:	e000      	b.n	34012096 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34012094:	bf00      	nop
  }

  return i2c_frequency;
34012096:	68fb      	ldr	r3, [r7, #12]
}
34012098:	4618      	mov	r0, r3
3401209a:	3710      	adds	r7, #16
3401209c:	46bd      	mov	sp, r7
3401209e:	bd80      	pop	{r7, pc}
340120a0:	03d09000 	.word	0x03d09000
340120a4:	003d0900 	.word	0x003d0900

340120a8 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
340120a8:	b580      	push	{r7, lr}
340120aa:	b084      	sub	sp, #16
340120ac:	af00      	add	r7, sp, #0
340120ae:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340120b0:	2300      	movs	r3, #0
340120b2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340120b4:	6878      	ldr	r0, [r7, #4]
340120b6:	f7f6 fcf3 	bl	34008aa0 <LL_RCC_GetI3CClockSource>
340120ba:	4603      	mov	r3, r0
340120bc:	4a86      	ldr	r2, [pc, #536]	@ (340122d8 <RCCEx_GetI3CCLKFreq+0x230>)
340120be:	4293      	cmp	r3, r2
340120c0:	f000 80e6 	beq.w	34012290 <RCCEx_GetI3CCLKFreq+0x1e8>
340120c4:	4a84      	ldr	r2, [pc, #528]	@ (340122d8 <RCCEx_GetI3CCLKFreq+0x230>)
340120c6:	4293      	cmp	r3, r2
340120c8:	f200 80f8 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
340120cc:	4a83      	ldr	r2, [pc, #524]	@ (340122dc <RCCEx_GetI3CCLKFreq+0x234>)
340120ce:	4293      	cmp	r3, r2
340120d0:	f000 80de 	beq.w	34012290 <RCCEx_GetI3CCLKFreq+0x1e8>
340120d4:	4a81      	ldr	r2, [pc, #516]	@ (340122dc <RCCEx_GetI3CCLKFreq+0x234>)
340120d6:	4293      	cmp	r3, r2
340120d8:	f200 80f0 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
340120dc:	4a80      	ldr	r2, [pc, #512]	@ (340122e0 <RCCEx_GetI3CCLKFreq+0x238>)
340120de:	4293      	cmp	r3, r2
340120e0:	f000 80e4 	beq.w	340122ac <RCCEx_GetI3CCLKFreq+0x204>
340120e4:	4a7e      	ldr	r2, [pc, #504]	@ (340122e0 <RCCEx_GetI3CCLKFreq+0x238>)
340120e6:	4293      	cmp	r3, r2
340120e8:	f200 80e8 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
340120ec:	4a7d      	ldr	r2, [pc, #500]	@ (340122e4 <RCCEx_GetI3CCLKFreq+0x23c>)
340120ee:	4293      	cmp	r3, r2
340120f0:	f000 80dc 	beq.w	340122ac <RCCEx_GetI3CCLKFreq+0x204>
340120f4:	4a7b      	ldr	r2, [pc, #492]	@ (340122e4 <RCCEx_GetI3CCLKFreq+0x23c>)
340120f6:	4293      	cmp	r3, r2
340120f8:	f200 80e0 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
340120fc:	4a7a      	ldr	r2, [pc, #488]	@ (340122e8 <RCCEx_GetI3CCLKFreq+0x240>)
340120fe:	4293      	cmp	r3, r2
34012100:	f000 8083 	beq.w	3401220a <RCCEx_GetI3CCLKFreq+0x162>
34012104:	4a78      	ldr	r2, [pc, #480]	@ (340122e8 <RCCEx_GetI3CCLKFreq+0x240>)
34012106:	4293      	cmp	r3, r2
34012108:	f200 80d8 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
3401210c:	4a77      	ldr	r2, [pc, #476]	@ (340122ec <RCCEx_GetI3CCLKFreq+0x244>)
3401210e:	4293      	cmp	r3, r2
34012110:	d07b      	beq.n	3401220a <RCCEx_GetI3CCLKFreq+0x162>
34012112:	4a76      	ldr	r2, [pc, #472]	@ (340122ec <RCCEx_GetI3CCLKFreq+0x244>)
34012114:	4293      	cmp	r3, r2
34012116:	f200 80d1 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
3401211a:	4a75      	ldr	r2, [pc, #468]	@ (340122f0 <RCCEx_GetI3CCLKFreq+0x248>)
3401211c:	4293      	cmp	r3, r2
3401211e:	d030      	beq.n	34012182 <RCCEx_GetI3CCLKFreq+0xda>
34012120:	4a73      	ldr	r2, [pc, #460]	@ (340122f0 <RCCEx_GetI3CCLKFreq+0x248>)
34012122:	4293      	cmp	r3, r2
34012124:	f200 80ca 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
34012128:	4a72      	ldr	r2, [pc, #456]	@ (340122f4 <RCCEx_GetI3CCLKFreq+0x24c>)
3401212a:	4293      	cmp	r3, r2
3401212c:	d029      	beq.n	34012182 <RCCEx_GetI3CCLKFreq+0xda>
3401212e:	4a71      	ldr	r2, [pc, #452]	@ (340122f4 <RCCEx_GetI3CCLKFreq+0x24c>)
34012130:	4293      	cmp	r3, r2
34012132:	f200 80c3 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
34012136:	4a70      	ldr	r2, [pc, #448]	@ (340122f8 <RCCEx_GetI3CCLKFreq+0x250>)
34012138:	4293      	cmp	r3, r2
3401213a:	d01d      	beq.n	34012178 <RCCEx_GetI3CCLKFreq+0xd0>
3401213c:	4a6e      	ldr	r2, [pc, #440]	@ (340122f8 <RCCEx_GetI3CCLKFreq+0x250>)
3401213e:	4293      	cmp	r3, r2
34012140:	f200 80bc 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
34012144:	4a6d      	ldr	r2, [pc, #436]	@ (340122fc <RCCEx_GetI3CCLKFreq+0x254>)
34012146:	4293      	cmp	r3, r2
34012148:	d016      	beq.n	34012178 <RCCEx_GetI3CCLKFreq+0xd0>
3401214a:	4a6c      	ldr	r2, [pc, #432]	@ (340122fc <RCCEx_GetI3CCLKFreq+0x254>)
3401214c:	4293      	cmp	r3, r2
3401214e:	f200 80b5 	bhi.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
34012152:	4a6b      	ldr	r2, [pc, #428]	@ (34012300 <RCCEx_GetI3CCLKFreq+0x258>)
34012154:	4293      	cmp	r3, r2
34012156:	d003      	beq.n	34012160 <RCCEx_GetI3CCLKFreq+0xb8>
34012158:	4a6a      	ldr	r2, [pc, #424]	@ (34012304 <RCCEx_GetI3CCLKFreq+0x25c>)
3401215a:	4293      	cmp	r3, r2
3401215c:	f040 80ae 	bne.w	340122bc <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012160:	f7f5 fd4e 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34012164:	4603      	mov	r3, r0
34012166:	4618      	mov	r0, r3
34012168:	f7fe fe42 	bl	34010df0 <RCCEx_GetHCLKFreq>
3401216c:	4603      	mov	r3, r0
3401216e:	4618      	mov	r0, r3
34012170:	f7fe fe4f 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34012174:	60f8      	str	r0, [r7, #12]
      break;
34012176:	e0aa      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012178:	2007      	movs	r0, #7
3401217a:	f7ff f925 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
3401217e:	60f8      	str	r0, [r7, #12]
      break;
34012180:	e0a5      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34012182:	f7f7 f99f 	bl	340094c4 <LL_RCC_IC10_IsEnabled>
34012186:	4603      	mov	r3, r0
34012188:	2b00      	cmp	r3, #0
3401218a:	f000 8099 	beq.w	340122c0 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3401218e:	f7f7 f9bb 	bl	34009508 <LL_RCC_IC10_GetDivider>
34012192:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34012194:	f7f7 f9aa 	bl	340094ec <LL_RCC_IC10_GetSource>
34012198:	4603      	mov	r3, r0
3401219a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401219e:	d029      	beq.n	340121f4 <RCCEx_GetI3CCLKFreq+0x14c>
340121a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340121a4:	d82f      	bhi.n	34012206 <RCCEx_GetI3CCLKFreq+0x15e>
340121a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121aa:	d01a      	beq.n	340121e2 <RCCEx_GetI3CCLKFreq+0x13a>
340121ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121b0:	d829      	bhi.n	34012206 <RCCEx_GetI3CCLKFreq+0x15e>
340121b2:	2b00      	cmp	r3, #0
340121b4:	d003      	beq.n	340121be <RCCEx_GetI3CCLKFreq+0x116>
340121b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340121ba:	d009      	beq.n	340121d0 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340121bc:	e023      	b.n	34012206 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340121be:	f7fe fcff 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340121c2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121c4:	68fa      	ldr	r2, [r7, #12]
340121c6:	68bb      	ldr	r3, [r7, #8]
340121c8:	fbb2 f3f3 	udiv	r3, r2, r3
340121cc:	60fb      	str	r3, [r7, #12]
            break;
340121ce:	e01b      	b.n	34012208 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340121d0:	f7fe fd3c 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340121d4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121d6:	68fa      	ldr	r2, [r7, #12]
340121d8:	68bb      	ldr	r3, [r7, #8]
340121da:	fbb2 f3f3 	udiv	r3, r2, r3
340121de:	60fb      	str	r3, [r7, #12]
            break;
340121e0:	e012      	b.n	34012208 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340121e2:	f7fe fd79 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340121e6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121e8:	68fa      	ldr	r2, [r7, #12]
340121ea:	68bb      	ldr	r3, [r7, #8]
340121ec:	fbb2 f3f3 	udiv	r3, r2, r3
340121f0:	60fb      	str	r3, [r7, #12]
            break;
340121f2:	e009      	b.n	34012208 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340121f4:	f7fe fdb6 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340121f8:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
340121fa:	68fa      	ldr	r2, [r7, #12]
340121fc:	68bb      	ldr	r3, [r7, #8]
340121fe:	fbb2 f3f3 	udiv	r3, r2, r3
34012202:	60fb      	str	r3, [r7, #12]
            break;
34012204:	e000      	b.n	34012208 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34012206:	bf00      	nop
        }
      }
      break;
34012208:	e05a      	b.n	340122c0 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401220a:	f7f7 fa5b 	bl	340096c4 <LL_RCC_IC15_IsEnabled>
3401220e:	4603      	mov	r3, r0
34012210:	2b00      	cmp	r3, #0
34012212:	d057      	beq.n	340122c4 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34012214:	f7f7 fa78 	bl	34009708 <LL_RCC_IC15_GetDivider>
34012218:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3401221a:	f7f7 fa67 	bl	340096ec <LL_RCC_IC15_GetSource>
3401221e:	4603      	mov	r3, r0
34012220:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012224:	d029      	beq.n	3401227a <RCCEx_GetI3CCLKFreq+0x1d2>
34012226:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401222a:	d82f      	bhi.n	3401228c <RCCEx_GetI3CCLKFreq+0x1e4>
3401222c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012230:	d01a      	beq.n	34012268 <RCCEx_GetI3CCLKFreq+0x1c0>
34012232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012236:	d829      	bhi.n	3401228c <RCCEx_GetI3CCLKFreq+0x1e4>
34012238:	2b00      	cmp	r3, #0
3401223a:	d003      	beq.n	34012244 <RCCEx_GetI3CCLKFreq+0x19c>
3401223c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012240:	d009      	beq.n	34012256 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012242:	e023      	b.n	3401228c <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012244:	f7fe fcbc 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012248:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3401224a:	68fa      	ldr	r2, [r7, #12]
3401224c:	68bb      	ldr	r3, [r7, #8]
3401224e:	fbb2 f3f3 	udiv	r3, r2, r3
34012252:	60fb      	str	r3, [r7, #12]
            break;
34012254:	e01b      	b.n	3401228e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012256:	f7fe fcf9 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401225a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3401225c:	68fa      	ldr	r2, [r7, #12]
3401225e:	68bb      	ldr	r3, [r7, #8]
34012260:	fbb2 f3f3 	udiv	r3, r2, r3
34012264:	60fb      	str	r3, [r7, #12]
            break;
34012266:	e012      	b.n	3401228e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012268:	f7fe fd36 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
3401226c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3401226e:	68fa      	ldr	r2, [r7, #12]
34012270:	68bb      	ldr	r3, [r7, #8]
34012272:	fbb2 f3f3 	udiv	r3, r2, r3
34012276:	60fb      	str	r3, [r7, #12]
            break;
34012278:	e009      	b.n	3401228e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401227a:	f7fe fd73 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
3401227e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34012280:	68fa      	ldr	r2, [r7, #12]
34012282:	68bb      	ldr	r3, [r7, #8]
34012284:	fbb2 f3f3 	udiv	r3, r2, r3
34012288:	60fb      	str	r3, [r7, #12]
            break;
3401228a:	e000      	b.n	3401228e <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
3401228c:	bf00      	nop
        }
      }
      break;
3401228e:	e019      	b.n	340122c4 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012290:	f7f6 f8b4 	bl	340083fc <LL_RCC_HSI_IsReady>
34012294:	4603      	mov	r3, r0
34012296:	2b00      	cmp	r3, #0
34012298:	d016      	beq.n	340122c8 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401229a:	f7f6 f8c1 	bl	34008420 <LL_RCC_HSI_GetDivider>
3401229e:	4603      	mov	r3, r0
340122a0:	09db      	lsrs	r3, r3, #7
340122a2:	4a19      	ldr	r2, [pc, #100]	@ (34012308 <RCCEx_GetI3CCLKFreq+0x260>)
340122a4:	fa22 f303 	lsr.w	r3, r2, r3
340122a8:	60fb      	str	r3, [r7, #12]
      }
      break;
340122aa:	e00d      	b.n	340122c8 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340122ac:	f7f6 f8c6 	bl	3400843c <LL_RCC_MSI_IsReady>
340122b0:	4603      	mov	r3, r0
340122b2:	2b00      	cmp	r3, #0
340122b4:	d00a      	beq.n	340122cc <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
340122b6:	4b15      	ldr	r3, [pc, #84]	@ (3401230c <RCCEx_GetI3CCLKFreq+0x264>)
340122b8:	60fb      	str	r3, [r7, #12]
      }
      break;
340122ba:	e007      	b.n	340122cc <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
340122bc:	bf00      	nop
340122be:	e006      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122c0:	bf00      	nop
340122c2:	e004      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122c4:	bf00      	nop
340122c6:	e002      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122c8:	bf00      	nop
340122ca:	e000      	b.n	340122ce <RCCEx_GetI3CCLKFreq+0x226>
      break;
340122cc:	bf00      	nop
  }

  return i3c_frequency;
340122ce:	68fb      	ldr	r3, [r7, #12]
}
340122d0:	4618      	mov	r0, r3
340122d2:	3710      	adds	r7, #16
340122d4:	46bd      	mov	sp, r7
340122d6:	bd80      	pop	{r7, pc}
340122d8:	0705140c 	.word	0x0705140c
340122dc:	0705100c 	.word	0x0705100c
340122e0:	0704140c 	.word	0x0704140c
340122e4:	0704100c 	.word	0x0704100c
340122e8:	0703140c 	.word	0x0703140c
340122ec:	0703100c 	.word	0x0703100c
340122f0:	0702140c 	.word	0x0702140c
340122f4:	0702100c 	.word	0x0702100c
340122f8:	0701140c 	.word	0x0701140c
340122fc:	0701100c 	.word	0x0701100c
34012300:	0700100c 	.word	0x0700100c
34012304:	0700140c 	.word	0x0700140c
34012308:	03d09000 	.word	0x03d09000
3401230c:	003d0900 	.word	0x003d0900

34012310 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34012310:	b590      	push	{r4, r7, lr}
34012312:	b085      	sub	sp, #20
34012314:	af00      	add	r7, sp, #0
34012316:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34012318:	2300      	movs	r3, #0
3401231a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401231c:	6878      	ldr	r0, [r7, #4]
3401231e:	f7f6 fbcb 	bl	34008ab8 <LL_RCC_GetLPTIMClockSource>
34012322:	4603      	mov	r3, r0
34012324:	4aa1      	ldr	r2, [pc, #644]	@ (340125ac <RCCEx_GetLPTIMCLKFreq+0x29c>)
34012326:	4293      	cmp	r3, r2
34012328:	f000 8185 	beq.w	34012636 <RCCEx_GetLPTIMCLKFreq+0x326>
3401232c:	4a9f      	ldr	r2, [pc, #636]	@ (340125ac <RCCEx_GetLPTIMCLKFreq+0x29c>)
3401232e:	4293      	cmp	r3, r2
34012330:	f200 818b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012334:	4a9e      	ldr	r2, [pc, #632]	@ (340125b0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34012336:	4293      	cmp	r3, r2
34012338:	f000 817d 	beq.w	34012636 <RCCEx_GetLPTIMCLKFreq+0x326>
3401233c:	4a9c      	ldr	r2, [pc, #624]	@ (340125b0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3401233e:	4293      	cmp	r3, r2
34012340:	f200 8183 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012344:	4a9b      	ldr	r2, [pc, #620]	@ (340125b4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34012346:	4293      	cmp	r3, r2
34012348:	f000 8175 	beq.w	34012636 <RCCEx_GetLPTIMCLKFreq+0x326>
3401234c:	4a99      	ldr	r2, [pc, #612]	@ (340125b4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3401234e:	4293      	cmp	r3, r2
34012350:	f200 817b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012354:	4a98      	ldr	r2, [pc, #608]	@ (340125b8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34012356:	4293      	cmp	r3, r2
34012358:	f000 816d 	beq.w	34012636 <RCCEx_GetLPTIMCLKFreq+0x326>
3401235c:	4a96      	ldr	r2, [pc, #600]	@ (340125b8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3401235e:	4293      	cmp	r3, r2
34012360:	f200 8173 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012364:	4a95      	ldr	r2, [pc, #596]	@ (340125bc <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34012366:	4293      	cmp	r3, r2
34012368:	f000 8165 	beq.w	34012636 <RCCEx_GetLPTIMCLKFreq+0x326>
3401236c:	4a93      	ldr	r2, [pc, #588]	@ (340125bc <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3401236e:	4293      	cmp	r3, r2
34012370:	f200 816b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012374:	4a92      	ldr	r2, [pc, #584]	@ (340125c0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34012376:	4293      	cmp	r3, r2
34012378:	f000 8154 	beq.w	34012624 <RCCEx_GetLPTIMCLKFreq+0x314>
3401237c:	4a90      	ldr	r2, [pc, #576]	@ (340125c0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3401237e:	4293      	cmp	r3, r2
34012380:	f200 8163 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012384:	4a8f      	ldr	r2, [pc, #572]	@ (340125c4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34012386:	4293      	cmp	r3, r2
34012388:	f000 814c 	beq.w	34012624 <RCCEx_GetLPTIMCLKFreq+0x314>
3401238c:	4a8d      	ldr	r2, [pc, #564]	@ (340125c4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3401238e:	4293      	cmp	r3, r2
34012390:	f200 815b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012394:	4a8c      	ldr	r2, [pc, #560]	@ (340125c8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34012396:	4293      	cmp	r3, r2
34012398:	f000 8144 	beq.w	34012624 <RCCEx_GetLPTIMCLKFreq+0x314>
3401239c:	4a8a      	ldr	r2, [pc, #552]	@ (340125c8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3401239e:	4293      	cmp	r3, r2
340123a0:	f200 8153 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123a4:	4a89      	ldr	r2, [pc, #548]	@ (340125cc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340123a6:	4293      	cmp	r3, r2
340123a8:	f000 813c 	beq.w	34012624 <RCCEx_GetLPTIMCLKFreq+0x314>
340123ac:	4a87      	ldr	r2, [pc, #540]	@ (340125cc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
340123ae:	4293      	cmp	r3, r2
340123b0:	f200 814b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123b4:	4a86      	ldr	r2, [pc, #536]	@ (340125d0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
340123b6:	4293      	cmp	r3, r2
340123b8:	f000 8134 	beq.w	34012624 <RCCEx_GetLPTIMCLKFreq+0x314>
340123bc:	4a84      	ldr	r2, [pc, #528]	@ (340125d0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
340123be:	4293      	cmp	r3, r2
340123c0:	f200 8143 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123c4:	4a83      	ldr	r2, [pc, #524]	@ (340125d4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340123c6:	4293      	cmp	r3, r2
340123c8:	f000 80e7 	beq.w	3401259a <RCCEx_GetLPTIMCLKFreq+0x28a>
340123cc:	4a81      	ldr	r2, [pc, #516]	@ (340125d4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
340123ce:	4293      	cmp	r3, r2
340123d0:	f200 813b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123d4:	4a80      	ldr	r2, [pc, #512]	@ (340125d8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340123d6:	4293      	cmp	r3, r2
340123d8:	f000 80df 	beq.w	3401259a <RCCEx_GetLPTIMCLKFreq+0x28a>
340123dc:	4a7e      	ldr	r2, [pc, #504]	@ (340125d8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
340123de:	4293      	cmp	r3, r2
340123e0:	f200 8133 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123e4:	4a7d      	ldr	r2, [pc, #500]	@ (340125dc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340123e6:	4293      	cmp	r3, r2
340123e8:	f000 80d7 	beq.w	3401259a <RCCEx_GetLPTIMCLKFreq+0x28a>
340123ec:	4a7b      	ldr	r2, [pc, #492]	@ (340125dc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
340123ee:	4293      	cmp	r3, r2
340123f0:	f200 812b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340123f4:	4a7a      	ldr	r2, [pc, #488]	@ (340125e0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
340123f6:	4293      	cmp	r3, r2
340123f8:	f000 80cf 	beq.w	3401259a <RCCEx_GetLPTIMCLKFreq+0x28a>
340123fc:	4a78      	ldr	r2, [pc, #480]	@ (340125e0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
340123fe:	4293      	cmp	r3, r2
34012400:	f200 8123 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012404:	4a77      	ldr	r2, [pc, #476]	@ (340125e4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34012406:	4293      	cmp	r3, r2
34012408:	f000 80c7 	beq.w	3401259a <RCCEx_GetLPTIMCLKFreq+0x28a>
3401240c:	4a75      	ldr	r2, [pc, #468]	@ (340125e4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3401240e:	4293      	cmp	r3, r2
34012410:	f200 811b 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012414:	4a74      	ldr	r2, [pc, #464]	@ (340125e8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34012416:	4293      	cmp	r3, r2
34012418:	d07b      	beq.n	34012512 <RCCEx_GetLPTIMCLKFreq+0x202>
3401241a:	4a73      	ldr	r2, [pc, #460]	@ (340125e8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3401241c:	4293      	cmp	r3, r2
3401241e:	f200 8114 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012422:	4a72      	ldr	r2, [pc, #456]	@ (340125ec <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34012424:	4293      	cmp	r3, r2
34012426:	d074      	beq.n	34012512 <RCCEx_GetLPTIMCLKFreq+0x202>
34012428:	4a70      	ldr	r2, [pc, #448]	@ (340125ec <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3401242a:	4293      	cmp	r3, r2
3401242c:	f200 810d 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012430:	4a6f      	ldr	r2, [pc, #444]	@ (340125f0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34012432:	4293      	cmp	r3, r2
34012434:	d06d      	beq.n	34012512 <RCCEx_GetLPTIMCLKFreq+0x202>
34012436:	4a6e      	ldr	r2, [pc, #440]	@ (340125f0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34012438:	4293      	cmp	r3, r2
3401243a:	f200 8106 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
3401243e:	4a6d      	ldr	r2, [pc, #436]	@ (340125f4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34012440:	4293      	cmp	r3, r2
34012442:	d066      	beq.n	34012512 <RCCEx_GetLPTIMCLKFreq+0x202>
34012444:	4a6b      	ldr	r2, [pc, #428]	@ (340125f4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34012446:	4293      	cmp	r3, r2
34012448:	f200 80ff 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
3401244c:	4a6a      	ldr	r2, [pc, #424]	@ (340125f8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3401244e:	4293      	cmp	r3, r2
34012450:	d05f      	beq.n	34012512 <RCCEx_GetLPTIMCLKFreq+0x202>
34012452:	4a69      	ldr	r2, [pc, #420]	@ (340125f8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34012454:	4293      	cmp	r3, r2
34012456:	f200 80f8 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
3401245a:	4a68      	ldr	r2, [pc, #416]	@ (340125fc <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3401245c:	4293      	cmp	r3, r2
3401245e:	d053      	beq.n	34012508 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012460:	4a66      	ldr	r2, [pc, #408]	@ (340125fc <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34012462:	4293      	cmp	r3, r2
34012464:	f200 80f1 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012468:	4a65      	ldr	r2, [pc, #404]	@ (34012600 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3401246a:	4293      	cmp	r3, r2
3401246c:	d04c      	beq.n	34012508 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3401246e:	4a64      	ldr	r2, [pc, #400]	@ (34012600 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34012470:	4293      	cmp	r3, r2
34012472:	f200 80ea 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012476:	4a63      	ldr	r2, [pc, #396]	@ (34012604 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34012478:	4293      	cmp	r3, r2
3401247a:	d045      	beq.n	34012508 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3401247c:	4a61      	ldr	r2, [pc, #388]	@ (34012604 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3401247e:	4293      	cmp	r3, r2
34012480:	f200 80e3 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012484:	4a60      	ldr	r2, [pc, #384]	@ (34012608 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34012486:	4293      	cmp	r3, r2
34012488:	d03e      	beq.n	34012508 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3401248a:	4a5f      	ldr	r2, [pc, #380]	@ (34012608 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3401248c:	4293      	cmp	r3, r2
3401248e:	f200 80dc 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
34012492:	4a5e      	ldr	r2, [pc, #376]	@ (3401260c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34012494:	4293      	cmp	r3, r2
34012496:	d037      	beq.n	34012508 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34012498:	4a5c      	ldr	r2, [pc, #368]	@ (3401260c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3401249a:	4293      	cmp	r3, r2
3401249c:	f200 80d5 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340124a0:	4a5b      	ldr	r2, [pc, #364]	@ (34012610 <RCCEx_GetLPTIMCLKFreq+0x300>)
340124a2:	4293      	cmp	r3, r2
340124a4:	d024      	beq.n	340124f0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124a6:	4a5a      	ldr	r2, [pc, #360]	@ (34012610 <RCCEx_GetLPTIMCLKFreq+0x300>)
340124a8:	4293      	cmp	r3, r2
340124aa:	f200 80ce 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340124ae:	4a59      	ldr	r2, [pc, #356]	@ (34012614 <RCCEx_GetLPTIMCLKFreq+0x304>)
340124b0:	4293      	cmp	r3, r2
340124b2:	d01d      	beq.n	340124f0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124b4:	4a57      	ldr	r2, [pc, #348]	@ (34012614 <RCCEx_GetLPTIMCLKFreq+0x304>)
340124b6:	4293      	cmp	r3, r2
340124b8:	f200 80c7 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340124bc:	4a56      	ldr	r2, [pc, #344]	@ (34012618 <RCCEx_GetLPTIMCLKFreq+0x308>)
340124be:	4293      	cmp	r3, r2
340124c0:	d016      	beq.n	340124f0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
340124c2:	4a55      	ldr	r2, [pc, #340]	@ (34012618 <RCCEx_GetLPTIMCLKFreq+0x308>)
340124c4:	4293      	cmp	r3, r2
340124c6:	f200 80c0 	bhi.w	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
340124ca:	4a54      	ldr	r2, [pc, #336]	@ (3401261c <RCCEx_GetLPTIMCLKFreq+0x30c>)
340124cc:	4293      	cmp	r3, r2
340124ce:	d003      	beq.n	340124d8 <RCCEx_GetLPTIMCLKFreq+0x1c8>
340124d0:	4a53      	ldr	r2, [pc, #332]	@ (34012620 <RCCEx_GetLPTIMCLKFreq+0x310>)
340124d2:	4293      	cmp	r3, r2
340124d4:	d00c      	beq.n	340124f0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340124d6:	e0b8      	b.n	3401264a <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340124d8:	f7f5 fb92 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340124dc:	4603      	mov	r3, r0
340124de:	4618      	mov	r0, r3
340124e0:	f7fe fc86 	bl	34010df0 <RCCEx_GetHCLKFreq>
340124e4:	4603      	mov	r3, r0
340124e6:	4618      	mov	r0, r3
340124e8:	f7fe fc93 	bl	34010e12 <RCCEx_GetPCLK1Freq>
340124ec:	60f8      	str	r0, [r7, #12]
      break;
340124ee:	e0b3      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340124f0:	f7f5 fb86 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340124f4:	4603      	mov	r3, r0
340124f6:	4618      	mov	r0, r3
340124f8:	f7fe fc7a 	bl	34010df0 <RCCEx_GetHCLKFreq>
340124fc:	4603      	mov	r3, r0
340124fe:	4618      	mov	r0, r3
34012500:	f7fe fca8 	bl	34010e54 <RCCEx_GetPCLK4Freq>
34012504:	60f8      	str	r0, [r7, #12]
      break;
34012506:	e0a7      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012508:	2007      	movs	r0, #7
3401250a:	f7fe ff5d 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
3401250e:	60f8      	str	r0, [r7, #12]
      break;
34012510:	e0a2      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34012512:	f7f7 f8d7 	bl	340096c4 <LL_RCC_IC15_IsEnabled>
34012516:	4603      	mov	r3, r0
34012518:	2b00      	cmp	r3, #0
3401251a:	f000 8098 	beq.w	3401264e <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3401251e:	f7f7 f8f3 	bl	34009708 <LL_RCC_IC15_GetDivider>
34012522:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34012524:	f7f7 f8e2 	bl	340096ec <LL_RCC_IC15_GetSource>
34012528:	4603      	mov	r3, r0
3401252a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401252e:	d029      	beq.n	34012584 <RCCEx_GetLPTIMCLKFreq+0x274>
34012530:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012534:	d82f      	bhi.n	34012596 <RCCEx_GetLPTIMCLKFreq+0x286>
34012536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401253a:	d01a      	beq.n	34012572 <RCCEx_GetLPTIMCLKFreq+0x262>
3401253c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012540:	d829      	bhi.n	34012596 <RCCEx_GetLPTIMCLKFreq+0x286>
34012542:	2b00      	cmp	r3, #0
34012544:	d003      	beq.n	3401254e <RCCEx_GetLPTIMCLKFreq+0x23e>
34012546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401254a:	d009      	beq.n	34012560 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3401254c:	e023      	b.n	34012596 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401254e:	f7fe fb37 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012552:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012554:	68fa      	ldr	r2, [r7, #12]
34012556:	68bb      	ldr	r3, [r7, #8]
34012558:	fbb2 f3f3 	udiv	r3, r2, r3
3401255c:	60fb      	str	r3, [r7, #12]
            break;
3401255e:	e01b      	b.n	34012598 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012560:	f7fe fb74 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012564:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012566:	68fa      	ldr	r2, [r7, #12]
34012568:	68bb      	ldr	r3, [r7, #8]
3401256a:	fbb2 f3f3 	udiv	r3, r2, r3
3401256e:	60fb      	str	r3, [r7, #12]
            break;
34012570:	e012      	b.n	34012598 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012572:	f7fe fbb1 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012576:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34012578:	68fa      	ldr	r2, [r7, #12]
3401257a:	68bb      	ldr	r3, [r7, #8]
3401257c:	fbb2 f3f3 	udiv	r3, r2, r3
34012580:	60fb      	str	r3, [r7, #12]
            break;
34012582:	e009      	b.n	34012598 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012584:	f7fe fbee 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012588:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3401258a:	68fa      	ldr	r2, [r7, #12]
3401258c:	68bb      	ldr	r3, [r7, #8]
3401258e:	fbb2 f3f3 	udiv	r3, r2, r3
34012592:	60fb      	str	r3, [r7, #12]
            break;
34012594:	e000      	b.n	34012598 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
34012596:	bf00      	nop
      break;
34012598:	e059      	b.n	3401264e <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
3401259a:	f7f5 ff6f 	bl	3400847c <LL_RCC_LSE_IsReady>
3401259e:	4603      	mov	r3, r0
340125a0:	2b00      	cmp	r3, #0
340125a2:	d056      	beq.n	34012652 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
340125a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340125a8:	60fb      	str	r3, [r7, #12]
      break;
340125aa:	e052      	b.n	34012652 <RCCEx_GetLPTIMCLKFreq+0x342>
340125ac:	0705182c 	.word	0x0705182c
340125b0:	0705142c 	.word	0x0705142c
340125b4:	0705102c 	.word	0x0705102c
340125b8:	07050c2c 	.word	0x07050c2c
340125bc:	0705082c 	.word	0x0705082c
340125c0:	0704182c 	.word	0x0704182c
340125c4:	0704142c 	.word	0x0704142c
340125c8:	0704102c 	.word	0x0704102c
340125cc:	07040c2c 	.word	0x07040c2c
340125d0:	0704082c 	.word	0x0704082c
340125d4:	0703182c 	.word	0x0703182c
340125d8:	0703142c 	.word	0x0703142c
340125dc:	0703102c 	.word	0x0703102c
340125e0:	07030c2c 	.word	0x07030c2c
340125e4:	0703082c 	.word	0x0703082c
340125e8:	0702182c 	.word	0x0702182c
340125ec:	0702142c 	.word	0x0702142c
340125f0:	0702102c 	.word	0x0702102c
340125f4:	07020c2c 	.word	0x07020c2c
340125f8:	0702082c 	.word	0x0702082c
340125fc:	0701182c 	.word	0x0701182c
34012600:	0701142c 	.word	0x0701142c
34012604:	0701102c 	.word	0x0701102c
34012608:	07010c2c 	.word	0x07010c2c
3401260c:	0701082c 	.word	0x0701082c
34012610:	0700182c 	.word	0x0700182c
34012614:	0700142c 	.word	0x0700142c
34012618:	0700102c 	.word	0x0700102c
3401261c:	0700082c 	.word	0x0700082c
34012620:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34012624:	f7f5 ff3c 	bl	340084a0 <LL_RCC_LSI_IsReady>
34012628:	4603      	mov	r3, r0
3401262a:	2b00      	cmp	r3, #0
3401262c:	d013      	beq.n	34012656 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3401262e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34012632:	60fb      	str	r3, [r7, #12]
      break;
34012634:	e00f      	b.n	34012656 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34012636:	f7f5 fae3 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
3401263a:	4604      	mov	r4, r0
3401263c:	f7f6 fb46 	bl	34008ccc <LL_RCC_GetTIMPrescaler>
34012640:	4603      	mov	r3, r0
34012642:	fa24 f303 	lsr.w	r3, r4, r3
34012646:	60fb      	str	r3, [r7, #12]
      break;
34012648:	e006      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401264a:	bf00      	nop
3401264c:	e004      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3401264e:	bf00      	nop
34012650:	e002      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012652:	bf00      	nop
34012654:	e000      	b.n	34012658 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34012656:	bf00      	nop
  }

  return lptim_frequency;
34012658:	68fb      	ldr	r3, [r7, #12]
}
3401265a:	4618      	mov	r0, r3
3401265c:	3714      	adds	r7, #20
3401265e:	46bd      	mov	sp, r7
34012660:	bd90      	pop	{r4, r7, pc}
34012662:	bf00      	nop

34012664 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
34012664:	b580      	push	{r7, lr}
34012666:	b084      	sub	sp, #16
34012668:	af00      	add	r7, sp, #0
3401266a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3401266c:	2300      	movs	r3, #0
3401266e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34012670:	6878      	ldr	r0, [r7, #4]
34012672:	f7f6 fa2d 	bl	34008ad0 <LL_RCC_GetLPUARTClockSource>
34012676:	4603      	mov	r3, r0
34012678:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401267c:	f000 80c0 	beq.w	34012800 <RCCEx_GetLPUARTCLKFreq+0x19c>
34012680:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34012684:	f200 80db 	bhi.w	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
34012688:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3401268c:	f000 80c6 	beq.w	3401281c <RCCEx_GetLPUARTCLKFreq+0x1b8>
34012690:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34012694:	f200 80d3 	bhi.w	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
34012698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401269c:	f000 80c6 	beq.w	3401282c <RCCEx_GetLPUARTCLKFreq+0x1c8>
340126a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340126a4:	f200 80cb 	bhi.w	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
340126a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340126ac:	d065      	beq.n	3401277a <RCCEx_GetLPUARTCLKFreq+0x116>
340126ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340126b2:	f200 80c4 	bhi.w	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
340126b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340126ba:	d01a      	beq.n	340126f2 <RCCEx_GetLPUARTCLKFreq+0x8e>
340126bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340126c0:	f200 80bd 	bhi.w	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
340126c4:	2b00      	cmp	r3, #0
340126c6:	d003      	beq.n	340126d0 <RCCEx_GetLPUARTCLKFreq+0x6c>
340126c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340126cc:	d00c      	beq.n	340126e8 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
340126ce:	e0b6      	b.n	3401283e <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340126d0:	f7f5 fa96 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340126d4:	4603      	mov	r3, r0
340126d6:	4618      	mov	r0, r3
340126d8:	f7fe fb8a 	bl	34010df0 <RCCEx_GetHCLKFreq>
340126dc:	4603      	mov	r3, r0
340126de:	4618      	mov	r0, r3
340126e0:	f7fe fbb8 	bl	34010e54 <RCCEx_GetPCLK4Freq>
340126e4:	60f8      	str	r0, [r7, #12]
      break;
340126e6:	e0b5      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340126e8:	2007      	movs	r0, #7
340126ea:	f7fe fe6d 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
340126ee:	60f8      	str	r0, [r7, #12]
      break;
340126f0:	e0b0      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340126f2:	f7f6 fea7 	bl	34009444 <LL_RCC_IC9_IsEnabled>
340126f6:	4603      	mov	r3, r0
340126f8:	2b00      	cmp	r3, #0
340126fa:	f000 80a2 	beq.w	34012842 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
340126fe:	f7f6 fec3 	bl	34009488 <LL_RCC_IC9_GetDivider>
34012702:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34012704:	f7f6 feb2 	bl	3400946c <LL_RCC_IC9_GetSource>
34012708:	4603      	mov	r3, r0
3401270a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401270e:	d029      	beq.n	34012764 <RCCEx_GetLPUARTCLKFreq+0x100>
34012710:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012714:	d82f      	bhi.n	34012776 <RCCEx_GetLPUARTCLKFreq+0x112>
34012716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401271a:	d01a      	beq.n	34012752 <RCCEx_GetLPUARTCLKFreq+0xee>
3401271c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012720:	d829      	bhi.n	34012776 <RCCEx_GetLPUARTCLKFreq+0x112>
34012722:	2b00      	cmp	r3, #0
34012724:	d003      	beq.n	3401272e <RCCEx_GetLPUARTCLKFreq+0xca>
34012726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401272a:	d009      	beq.n	34012740 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3401272c:	e023      	b.n	34012776 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401272e:	f7fe fa47 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012732:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012734:	68fa      	ldr	r2, [r7, #12]
34012736:	68bb      	ldr	r3, [r7, #8]
34012738:	fbb2 f3f3 	udiv	r3, r2, r3
3401273c:	60fb      	str	r3, [r7, #12]
            break;
3401273e:	e01b      	b.n	34012778 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012740:	f7fe fa84 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012744:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012746:	68fa      	ldr	r2, [r7, #12]
34012748:	68bb      	ldr	r3, [r7, #8]
3401274a:	fbb2 f3f3 	udiv	r3, r2, r3
3401274e:	60fb      	str	r3, [r7, #12]
            break;
34012750:	e012      	b.n	34012778 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012752:	f7fe fac1 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012756:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012758:	68fa      	ldr	r2, [r7, #12]
3401275a:	68bb      	ldr	r3, [r7, #8]
3401275c:	fbb2 f3f3 	udiv	r3, r2, r3
34012760:	60fb      	str	r3, [r7, #12]
            break;
34012762:	e009      	b.n	34012778 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012764:	f7fe fafe 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012768:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3401276a:	68fa      	ldr	r2, [r7, #12]
3401276c:	68bb      	ldr	r3, [r7, #8]
3401276e:	fbb2 f3f3 	udiv	r3, r2, r3
34012772:	60fb      	str	r3, [r7, #12]
            break;
34012774:	e000      	b.n	34012778 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
34012776:	bf00      	nop
      break;
34012778:	e063      	b.n	34012842 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401277a:	f7f6 ff63 	bl	34009644 <LL_RCC_IC14_IsEnabled>
3401277e:	4603      	mov	r3, r0
34012780:	2b00      	cmp	r3, #0
34012782:	d060      	beq.n	34012846 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
34012784:	f7f6 ff80 	bl	34009688 <LL_RCC_IC14_GetDivider>
34012788:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3401278a:	f7f6 ff6f 	bl	3400966c <LL_RCC_IC14_GetSource>
3401278e:	4603      	mov	r3, r0
34012790:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012794:	d029      	beq.n	340127ea <RCCEx_GetLPUARTCLKFreq+0x186>
34012796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401279a:	d82f      	bhi.n	340127fc <RCCEx_GetLPUARTCLKFreq+0x198>
3401279c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340127a0:	d01a      	beq.n	340127d8 <RCCEx_GetLPUARTCLKFreq+0x174>
340127a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340127a6:	d829      	bhi.n	340127fc <RCCEx_GetLPUARTCLKFreq+0x198>
340127a8:	2b00      	cmp	r3, #0
340127aa:	d003      	beq.n	340127b4 <RCCEx_GetLPUARTCLKFreq+0x150>
340127ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340127b0:	d009      	beq.n	340127c6 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
340127b2:	e023      	b.n	340127fc <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340127b4:	f7fe fa04 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340127b8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127ba:	68fa      	ldr	r2, [r7, #12]
340127bc:	68bb      	ldr	r3, [r7, #8]
340127be:	fbb2 f3f3 	udiv	r3, r2, r3
340127c2:	60fb      	str	r3, [r7, #12]
            break;
340127c4:	e01b      	b.n	340127fe <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340127c6:	f7fe fa41 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340127ca:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127cc:	68fa      	ldr	r2, [r7, #12]
340127ce:	68bb      	ldr	r3, [r7, #8]
340127d0:	fbb2 f3f3 	udiv	r3, r2, r3
340127d4:	60fb      	str	r3, [r7, #12]
            break;
340127d6:	e012      	b.n	340127fe <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340127d8:	f7fe fa7e 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340127dc:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127de:	68fa      	ldr	r2, [r7, #12]
340127e0:	68bb      	ldr	r3, [r7, #8]
340127e2:	fbb2 f3f3 	udiv	r3, r2, r3
340127e6:	60fb      	str	r3, [r7, #12]
            break;
340127e8:	e009      	b.n	340127fe <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340127ea:	f7fe fabb 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340127ee:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340127f0:	68fa      	ldr	r2, [r7, #12]
340127f2:	68bb      	ldr	r3, [r7, #8]
340127f4:	fbb2 f3f3 	udiv	r3, r2, r3
340127f8:	60fb      	str	r3, [r7, #12]
            break;
340127fa:	e000      	b.n	340127fe <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
340127fc:	bf00      	nop
      break;
340127fe:	e022      	b.n	34012846 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34012800:	f7f5 fdfc 	bl	340083fc <LL_RCC_HSI_IsReady>
34012804:	4603      	mov	r3, r0
34012806:	2b00      	cmp	r3, #0
34012808:	d01f      	beq.n	3401284a <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401280a:	f7f5 fe09 	bl	34008420 <LL_RCC_HSI_GetDivider>
3401280e:	4603      	mov	r3, r0
34012810:	09db      	lsrs	r3, r3, #7
34012812:	4a13      	ldr	r2, [pc, #76]	@ (34012860 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34012814:	fa22 f303 	lsr.w	r3, r2, r3
34012818:	60fb      	str	r3, [r7, #12]
      break;
3401281a:	e016      	b.n	3401284a <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3401281c:	f7f5 fe0e 	bl	3400843c <LL_RCC_MSI_IsReady>
34012820:	4603      	mov	r3, r0
34012822:	2b00      	cmp	r3, #0
34012824:	d013      	beq.n	3401284e <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34012826:	4b0f      	ldr	r3, [pc, #60]	@ (34012864 <RCCEx_GetLPUARTCLKFreq+0x200>)
34012828:	60fb      	str	r3, [r7, #12]
      break;
3401282a:	e010      	b.n	3401284e <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3401282c:	f7f5 fe26 	bl	3400847c <LL_RCC_LSE_IsReady>
34012830:	4603      	mov	r3, r0
34012832:	2b00      	cmp	r3, #0
34012834:	d00d      	beq.n	34012852 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34012836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3401283a:	60fb      	str	r3, [r7, #12]
      break;
3401283c:	e009      	b.n	34012852 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3401283e:	bf00      	nop
34012840:	e008      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012842:	bf00      	nop
34012844:	e006      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012846:	bf00      	nop
34012848:	e004      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401284a:	bf00      	nop
3401284c:	e002      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401284e:	bf00      	nop
34012850:	e000      	b.n	34012854 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012852:	bf00      	nop
  }

  return lpuart_frequency;
34012854:	68fb      	ldr	r3, [r7, #12]
}
34012856:	4618      	mov	r0, r3
34012858:	3710      	adds	r7, #16
3401285a:	46bd      	mov	sp, r7
3401285c:	bd80      	pop	{r7, pc}
3401285e:	bf00      	nop
34012860:	03d09000 	.word	0x03d09000
34012864:	003d0900 	.word	0x003d0900

34012868 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34012868:	b580      	push	{r7, lr}
3401286a:	b084      	sub	sp, #16
3401286c:	af00      	add	r7, sp, #0
3401286e:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012870:	2300      	movs	r3, #0
34012872:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34012874:	6878      	ldr	r0, [r7, #4]
34012876:	f7f6 f93d 	bl	34008af4 <LL_RCC_GetLTDCClockSource>
3401287a:	4603      	mov	r3, r0
3401287c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34012880:	d062      	beq.n	34012948 <RCCEx_GetLTDCCLKFreq+0xe0>
34012882:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34012886:	d86d      	bhi.n	34012964 <RCCEx_GetLTDCCLKFreq+0xfc>
34012888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401288c:	d019      	beq.n	340128c2 <RCCEx_GetLTDCCLKFreq+0x5a>
3401288e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34012892:	d867      	bhi.n	34012964 <RCCEx_GetLTDCCLKFreq+0xfc>
34012894:	2b00      	cmp	r3, #0
34012896:	d003      	beq.n	340128a0 <RCCEx_GetLTDCCLKFreq+0x38>
34012898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401289c:	d00c      	beq.n	340128b8 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401289e:	e061      	b.n	34012964 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340128a0:	f7f5 f9ae 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340128a4:	4603      	mov	r3, r0
340128a6:	4618      	mov	r0, r3
340128a8:	f7fe faa2 	bl	34010df0 <RCCEx_GetHCLKFreq>
340128ac:	4603      	mov	r3, r0
340128ae:	4618      	mov	r0, r3
340128b0:	f7fe fae1 	bl	34010e76 <RCCEx_GetPCLK5Freq>
340128b4:	60f8      	str	r0, [r7, #12]
      break;
340128b6:	e05a      	b.n	3401296e <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340128b8:	2007      	movs	r0, #7
340128ba:	f7fe fd85 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
340128be:	60f8      	str	r0, [r7, #12]
      break;
340128c0:	e055      	b.n	3401296e <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
340128c2:	f7f6 ff3f 	bl	34009744 <LL_RCC_IC16_IsEnabled>
340128c6:	4603      	mov	r3, r0
340128c8:	2b00      	cmp	r3, #0
340128ca:	d04d      	beq.n	34012968 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
340128cc:	f7f6 ff5c 	bl	34009788 <LL_RCC_IC16_GetDivider>
340128d0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
340128d2:	f7f6 ff4b 	bl	3400976c <LL_RCC_IC16_GetSource>
340128d6:	4603      	mov	r3, r0
340128d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340128dc:	d029      	beq.n	34012932 <RCCEx_GetLTDCCLKFreq+0xca>
340128de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340128e2:	d82f      	bhi.n	34012944 <RCCEx_GetLTDCCLKFreq+0xdc>
340128e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128e8:	d01a      	beq.n	34012920 <RCCEx_GetLTDCCLKFreq+0xb8>
340128ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340128ee:	d829      	bhi.n	34012944 <RCCEx_GetLTDCCLKFreq+0xdc>
340128f0:	2b00      	cmp	r3, #0
340128f2:	d003      	beq.n	340128fc <RCCEx_GetLTDCCLKFreq+0x94>
340128f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340128f8:	d009      	beq.n	3401290e <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
340128fa:	e023      	b.n	34012944 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340128fc:	f7fe f960 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012900:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012902:	68fa      	ldr	r2, [r7, #12]
34012904:	68bb      	ldr	r3, [r7, #8]
34012906:	fbb2 f3f3 	udiv	r3, r2, r3
3401290a:	60fb      	str	r3, [r7, #12]
            break;
3401290c:	e01b      	b.n	34012946 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401290e:	f7fe f99d 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012912:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012914:	68fa      	ldr	r2, [r7, #12]
34012916:	68bb      	ldr	r3, [r7, #8]
34012918:	fbb2 f3f3 	udiv	r3, r2, r3
3401291c:	60fb      	str	r3, [r7, #12]
            break;
3401291e:	e012      	b.n	34012946 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012920:	f7fe f9da 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012924:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012926:	68fa      	ldr	r2, [r7, #12]
34012928:	68bb      	ldr	r3, [r7, #8]
3401292a:	fbb2 f3f3 	udiv	r3, r2, r3
3401292e:	60fb      	str	r3, [r7, #12]
            break;
34012930:	e009      	b.n	34012946 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012932:	f7fe fa17 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012936:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012938:	68fa      	ldr	r2, [r7, #12]
3401293a:	68bb      	ldr	r3, [r7, #8]
3401293c:	fbb2 f3f3 	udiv	r3, r2, r3
34012940:	60fb      	str	r3, [r7, #12]
            break;
34012942:	e000      	b.n	34012946 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34012944:	bf00      	nop
      break;
34012946:	e00f      	b.n	34012968 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34012948:	f7f5 fd58 	bl	340083fc <LL_RCC_HSI_IsReady>
3401294c:	4603      	mov	r3, r0
3401294e:	2b00      	cmp	r3, #0
34012950:	d00c      	beq.n	3401296c <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012952:	f7f5 fd65 	bl	34008420 <LL_RCC_HSI_GetDivider>
34012956:	4603      	mov	r3, r0
34012958:	09db      	lsrs	r3, r3, #7
3401295a:	4a07      	ldr	r2, [pc, #28]	@ (34012978 <RCCEx_GetLTDCCLKFreq+0x110>)
3401295c:	fa22 f303 	lsr.w	r3, r2, r3
34012960:	60fb      	str	r3, [r7, #12]
      break;
34012962:	e003      	b.n	3401296c <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34012964:	bf00      	nop
34012966:	e002      	b.n	3401296e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012968:	bf00      	nop
3401296a:	e000      	b.n	3401296e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3401296c:	bf00      	nop
  }

  return ltdc_frequency;
3401296e:	68fb      	ldr	r3, [r7, #12]
}
34012970:	4618      	mov	r0, r3
34012972:	3710      	adds	r7, #16
34012974:	46bd      	mov	sp, r7
34012976:	bd80      	pop	{r7, pc}
34012978:	03d09000 	.word	0x03d09000

3401297c <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3401297c:	b590      	push	{r4, r7, lr}
3401297e:	b085      	sub	sp, #20
34012980:	af00      	add	r7, sp, #0
34012982:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34012984:	2300      	movs	r3, #0
34012986:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34012988:	6878      	ldr	r0, [r7, #4]
3401298a:	f7f6 f8c5 	bl	34008b18 <LL_RCC_GetMDFClockSource>
3401298e:	4603      	mov	r3, r0
34012990:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34012994:	f000 80dd 	beq.w	34012b52 <RCCEx_GetMDFCLKFreq+0x1d6>
34012998:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3401299c:	f200 80e3 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340129a4:	f000 80d2 	beq.w	34012b4c <RCCEx_GetMDFCLKFreq+0x1d0>
340129a8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340129ac:	f200 80db 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340129b4:	f000 80b4 	beq.w	34012b20 <RCCEx_GetMDFCLKFreq+0x1a4>
340129b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340129bc:	f200 80d3 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340129c4:	f000 80ba 	beq.w	34012b3c <RCCEx_GetMDFCLKFreq+0x1c0>
340129c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340129cc:	f200 80cb 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340129d4:	d061      	beq.n	34012a9a <RCCEx_GetMDFCLKFreq+0x11e>
340129d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340129da:	f200 80c4 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340129e2:	d016      	beq.n	34012a12 <RCCEx_GetMDFCLKFreq+0x96>
340129e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340129e8:	f200 80bd 	bhi.w	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
340129ec:	2b00      	cmp	r3, #0
340129ee:	d003      	beq.n	340129f8 <RCCEx_GetMDFCLKFreq+0x7c>
340129f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340129f4:	d008      	beq.n	34012a08 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340129f6:	e0b6      	b.n	34012b66 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340129f8:	f7f5 f902 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340129fc:	4603      	mov	r3, r0
340129fe:	4618      	mov	r0, r3
34012a00:	f7fe f9f6 	bl	34010df0 <RCCEx_GetHCLKFreq>
34012a04:	60f8      	str	r0, [r7, #12]
      break;
34012a06:	e0b7      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012a08:	2007      	movs	r0, #7
34012a0a:	f7fe fcdd 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34012a0e:	60f8      	str	r0, [r7, #12]
      break;
34012a10:	e0b2      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012a12:	f7f6 fc97 	bl	34009344 <LL_RCC_IC7_IsEnabled>
34012a16:	4603      	mov	r3, r0
34012a18:	2b00      	cmp	r3, #0
34012a1a:	f000 80a6 	beq.w	34012b6a <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34012a1e:	f7f6 fcb3 	bl	34009388 <LL_RCC_IC7_GetDivider>
34012a22:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012a24:	f7f6 fca2 	bl	3400936c <LL_RCC_IC7_GetSource>
34012a28:	4603      	mov	r3, r0
34012a2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a2e:	d029      	beq.n	34012a84 <RCCEx_GetMDFCLKFreq+0x108>
34012a30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a34:	d82f      	bhi.n	34012a96 <RCCEx_GetMDFCLKFreq+0x11a>
34012a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a3a:	d01a      	beq.n	34012a72 <RCCEx_GetMDFCLKFreq+0xf6>
34012a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a40:	d829      	bhi.n	34012a96 <RCCEx_GetMDFCLKFreq+0x11a>
34012a42:	2b00      	cmp	r3, #0
34012a44:	d003      	beq.n	34012a4e <RCCEx_GetMDFCLKFreq+0xd2>
34012a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012a4a:	d009      	beq.n	34012a60 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34012a4c:	e023      	b.n	34012a96 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012a4e:	f7fe f8b7 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012a52:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a54:	68fa      	ldr	r2, [r7, #12]
34012a56:	68bb      	ldr	r3, [r7, #8]
34012a58:	fbb2 f3f3 	udiv	r3, r2, r3
34012a5c:	60fb      	str	r3, [r7, #12]
            break;
34012a5e:	e01b      	b.n	34012a98 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012a60:	f7fe f8f4 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012a64:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a66:	68fa      	ldr	r2, [r7, #12]
34012a68:	68bb      	ldr	r3, [r7, #8]
34012a6a:	fbb2 f3f3 	udiv	r3, r2, r3
34012a6e:	60fb      	str	r3, [r7, #12]
            break;
34012a70:	e012      	b.n	34012a98 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012a72:	f7fe f931 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012a76:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a78:	68fa      	ldr	r2, [r7, #12]
34012a7a:	68bb      	ldr	r3, [r7, #8]
34012a7c:	fbb2 f3f3 	udiv	r3, r2, r3
34012a80:	60fb      	str	r3, [r7, #12]
            break;
34012a82:	e009      	b.n	34012a98 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012a84:	f7fe f96e 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012a88:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012a8a:	68fa      	ldr	r2, [r7, #12]
34012a8c:	68bb      	ldr	r3, [r7, #8]
34012a8e:	fbb2 f3f3 	udiv	r3, r2, r3
34012a92:	60fb      	str	r3, [r7, #12]
            break;
34012a94:	e000      	b.n	34012a98 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34012a96:	bf00      	nop
      break;
34012a98:	e067      	b.n	34012b6a <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012a9a:	f7f6 fc93 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
34012a9e:	4603      	mov	r3, r0
34012aa0:	2b00      	cmp	r3, #0
34012aa2:	d064      	beq.n	34012b6e <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34012aa4:	f7f6 fcb0 	bl	34009408 <LL_RCC_IC8_GetDivider>
34012aa8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012aaa:	f7f6 fc9f 	bl	340093ec <LL_RCC_IC8_GetSource>
34012aae:	4603      	mov	r3, r0
34012ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012ab4:	d029      	beq.n	34012b0a <RCCEx_GetMDFCLKFreq+0x18e>
34012ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012aba:	d82f      	bhi.n	34012b1c <RCCEx_GetMDFCLKFreq+0x1a0>
34012abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ac0:	d01a      	beq.n	34012af8 <RCCEx_GetMDFCLKFreq+0x17c>
34012ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012ac6:	d829      	bhi.n	34012b1c <RCCEx_GetMDFCLKFreq+0x1a0>
34012ac8:	2b00      	cmp	r3, #0
34012aca:	d003      	beq.n	34012ad4 <RCCEx_GetMDFCLKFreq+0x158>
34012acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012ad0:	d009      	beq.n	34012ae6 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34012ad2:	e023      	b.n	34012b1c <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012ad4:	f7fe f874 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012ad8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012ada:	68fa      	ldr	r2, [r7, #12]
34012adc:	68bb      	ldr	r3, [r7, #8]
34012ade:	fbb2 f3f3 	udiv	r3, r2, r3
34012ae2:	60fb      	str	r3, [r7, #12]
            break;
34012ae4:	e01b      	b.n	34012b1e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012ae6:	f7fe f8b1 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012aea:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012aec:	68fa      	ldr	r2, [r7, #12]
34012aee:	68bb      	ldr	r3, [r7, #8]
34012af0:	fbb2 f3f3 	udiv	r3, r2, r3
34012af4:	60fb      	str	r3, [r7, #12]
            break;
34012af6:	e012      	b.n	34012b1e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012af8:	f7fe f8ee 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012afc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012afe:	68fa      	ldr	r2, [r7, #12]
34012b00:	68bb      	ldr	r3, [r7, #8]
34012b02:	fbb2 f3f3 	udiv	r3, r2, r3
34012b06:	60fb      	str	r3, [r7, #12]
            break;
34012b08:	e009      	b.n	34012b1e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012b0a:	f7fe f92b 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012b0e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012b10:	68fa      	ldr	r2, [r7, #12]
34012b12:	68bb      	ldr	r3, [r7, #8]
34012b14:	fbb2 f3f3 	udiv	r3, r2, r3
34012b18:	60fb      	str	r3, [r7, #12]
            break;
34012b1a:	e000      	b.n	34012b1e <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34012b1c:	bf00      	nop
      break;
34012b1e:	e026      	b.n	34012b6e <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34012b20:	f7f5 fc6c 	bl	340083fc <LL_RCC_HSI_IsReady>
34012b24:	4603      	mov	r3, r0
34012b26:	2b00      	cmp	r3, #0
34012b28:	d023      	beq.n	34012b72 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012b2a:	f7f5 fc79 	bl	34008420 <LL_RCC_HSI_GetDivider>
34012b2e:	4603      	mov	r3, r0
34012b30:	09db      	lsrs	r3, r3, #7
34012b32:	4a14      	ldr	r2, [pc, #80]	@ (34012b84 <RCCEx_GetMDFCLKFreq+0x208>)
34012b34:	fa22 f303 	lsr.w	r3, r2, r3
34012b38:	60fb      	str	r3, [r7, #12]
      break;
34012b3a:	e01a      	b.n	34012b72 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012b3c:	f7f5 fc7e 	bl	3400843c <LL_RCC_MSI_IsReady>
34012b40:	4603      	mov	r3, r0
34012b42:	2b00      	cmp	r3, #0
34012b44:	d017      	beq.n	34012b76 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34012b46:	4b10      	ldr	r3, [pc, #64]	@ (34012b88 <RCCEx_GetMDFCLKFreq+0x20c>)
34012b48:	60fb      	str	r3, [r7, #12]
      break;
34012b4a:	e014      	b.n	34012b76 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34012b4c:	4b0f      	ldr	r3, [pc, #60]	@ (34012b8c <RCCEx_GetMDFCLKFreq+0x210>)
34012b4e:	60fb      	str	r3, [r7, #12]
      break;
34012b50:	e012      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34012b52:	f7f5 f855 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34012b56:	4604      	mov	r4, r0
34012b58:	f7f6 f8b8 	bl	34008ccc <LL_RCC_GetTIMPrescaler>
34012b5c:	4603      	mov	r3, r0
34012b5e:	fa24 f303 	lsr.w	r3, r4, r3
34012b62:	60fb      	str	r3, [r7, #12]
      break;
34012b64:	e008      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b66:	bf00      	nop
34012b68:	e006      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b6a:	bf00      	nop
34012b6c:	e004      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b6e:	bf00      	nop
34012b70:	e002      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b72:	bf00      	nop
34012b74:	e000      	b.n	34012b78 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012b76:	bf00      	nop
  }

  return adf_frequency;
34012b78:	68fb      	ldr	r3, [r7, #12]
}
34012b7a:	4618      	mov	r0, r3
34012b7c:	3714      	adds	r7, #20
34012b7e:	46bd      	mov	sp, r7
34012b80:	bd90      	pop	{r4, r7, pc}
34012b82:	bf00      	nop
34012b84:	03d09000 	.word	0x03d09000
34012b88:	003d0900 	.word	0x003d0900
34012b8c:	00bb8000 	.word	0x00bb8000

34012b90 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34012b90:	b580      	push	{r7, lr}
34012b92:	b084      	sub	sp, #16
34012b94:	af00      	add	r7, sp, #0
34012b96:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34012b98:	2300      	movs	r3, #0
34012b9a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34012b9c:	6878      	ldr	r0, [r7, #4]
34012b9e:	f7f5 ffcd 	bl	34008b3c <LL_RCC_GetPSSIClockSource>
34012ba2:	4603      	mov	r3, r0
34012ba4:	2b30      	cmp	r3, #48	@ 0x30
34012ba6:	d05a      	beq.n	34012c5e <RCCEx_GetPSSICLKFreq+0xce>
34012ba8:	2b30      	cmp	r3, #48	@ 0x30
34012baa:	d866      	bhi.n	34012c7a <RCCEx_GetPSSICLKFreq+0xea>
34012bac:	2b20      	cmp	r3, #32
34012bae:	d013      	beq.n	34012bd8 <RCCEx_GetPSSICLKFreq+0x48>
34012bb0:	2b20      	cmp	r3, #32
34012bb2:	d862      	bhi.n	34012c7a <RCCEx_GetPSSICLKFreq+0xea>
34012bb4:	2b00      	cmp	r3, #0
34012bb6:	d002      	beq.n	34012bbe <RCCEx_GetPSSICLKFreq+0x2e>
34012bb8:	2b10      	cmp	r3, #16
34012bba:	d008      	beq.n	34012bce <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012bbc:	e05d      	b.n	34012c7a <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012bbe:	f7f5 f81f 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34012bc2:	4603      	mov	r3, r0
34012bc4:	4618      	mov	r0, r3
34012bc6:	f7fe f913 	bl	34010df0 <RCCEx_GetHCLKFreq>
34012bca:	60f8      	str	r0, [r7, #12]
      break;
34012bcc:	e05a      	b.n	34012c84 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012bce:	2007      	movs	r0, #7
34012bd0:	f7fe fbfa 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34012bd4:	60f8      	str	r0, [r7, #12]
      break;
34012bd6:	e055      	b.n	34012c84 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
34012bd8:	f7f6 feb4 	bl	34009944 <LL_RCC_IC20_IsEnabled>
34012bdc:	4603      	mov	r3, r0
34012bde:	2b00      	cmp	r3, #0
34012be0:	d04d      	beq.n	34012c7e <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34012be2:	f7f6 fed1 	bl	34009988 <LL_RCC_IC20_GetDivider>
34012be6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
34012be8:	f7f6 fec0 	bl	3400996c <LL_RCC_IC20_GetSource>
34012bec:	4603      	mov	r3, r0
34012bee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012bf2:	d029      	beq.n	34012c48 <RCCEx_GetPSSICLKFreq+0xb8>
34012bf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012bf8:	d82f      	bhi.n	34012c5a <RCCEx_GetPSSICLKFreq+0xca>
34012bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012bfe:	d01a      	beq.n	34012c36 <RCCEx_GetPSSICLKFreq+0xa6>
34012c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012c04:	d829      	bhi.n	34012c5a <RCCEx_GetPSSICLKFreq+0xca>
34012c06:	2b00      	cmp	r3, #0
34012c08:	d003      	beq.n	34012c12 <RCCEx_GetPSSICLKFreq+0x82>
34012c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012c0e:	d009      	beq.n	34012c24 <RCCEx_GetPSSICLKFreq+0x94>
            break;
34012c10:	e023      	b.n	34012c5a <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012c12:	f7fd ffd5 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012c16:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c18:	68fa      	ldr	r2, [r7, #12]
34012c1a:	68bb      	ldr	r3, [r7, #8]
34012c1c:	fbb2 f3f3 	udiv	r3, r2, r3
34012c20:	60fb      	str	r3, [r7, #12]
            break;
34012c22:	e01b      	b.n	34012c5c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012c24:	f7fe f812 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012c28:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c2a:	68fa      	ldr	r2, [r7, #12]
34012c2c:	68bb      	ldr	r3, [r7, #8]
34012c2e:	fbb2 f3f3 	udiv	r3, r2, r3
34012c32:	60fb      	str	r3, [r7, #12]
            break;
34012c34:	e012      	b.n	34012c5c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012c36:	f7fe f84f 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012c3a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c3c:	68fa      	ldr	r2, [r7, #12]
34012c3e:	68bb      	ldr	r3, [r7, #8]
34012c40:	fbb2 f3f3 	udiv	r3, r2, r3
34012c44:	60fb      	str	r3, [r7, #12]
            break;
34012c46:	e009      	b.n	34012c5c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012c48:	f7fe f88c 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012c4c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012c4e:	68fa      	ldr	r2, [r7, #12]
34012c50:	68bb      	ldr	r3, [r7, #8]
34012c52:	fbb2 f3f3 	udiv	r3, r2, r3
34012c56:	60fb      	str	r3, [r7, #12]
            break;
34012c58:	e000      	b.n	34012c5c <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34012c5a:	bf00      	nop
      break;
34012c5c:	e00f      	b.n	34012c7e <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34012c5e:	f7f5 fbcd 	bl	340083fc <LL_RCC_HSI_IsReady>
34012c62:	4603      	mov	r3, r0
34012c64:	2b00      	cmp	r3, #0
34012c66:	d00c      	beq.n	34012c82 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012c68:	f7f5 fbda 	bl	34008420 <LL_RCC_HSI_GetDivider>
34012c6c:	4603      	mov	r3, r0
34012c6e:	09db      	lsrs	r3, r3, #7
34012c70:	4a07      	ldr	r2, [pc, #28]	@ (34012c90 <RCCEx_GetPSSICLKFreq+0x100>)
34012c72:	fa22 f303 	lsr.w	r3, r2, r3
34012c76:	60fb      	str	r3, [r7, #12]
      break;
34012c78:	e003      	b.n	34012c82 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34012c7a:	bf00      	nop
34012c7c:	e002      	b.n	34012c84 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012c7e:	bf00      	nop
34012c80:	e000      	b.n	34012c84 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34012c82:	bf00      	nop
  }

  return pssi_frequency;
34012c84:	68fb      	ldr	r3, [r7, #12]
}
34012c86:	4618      	mov	r0, r3
34012c88:	3710      	adds	r7, #16
34012c8a:	46bd      	mov	sp, r7
34012c8c:	bd80      	pop	{r7, pc}
34012c8e:	bf00      	nop
34012c90:	03d09000 	.word	0x03d09000

34012c94 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34012c94:	b580      	push	{r7, lr}
34012c96:	b082      	sub	sp, #8
34012c98:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012c9a:	2300      	movs	r3, #0
34012c9c:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34012c9e:	f7f5 ffdb 	bl	34008c58 <LL_RCC_GetRTCClockSource>
34012ca2:	4603      	mov	r3, r0
34012ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012ca8:	d020      	beq.n	34012cec <RCCEx_GetRTCCLKFreq+0x58>
34012caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34012cae:	d830      	bhi.n	34012d12 <RCCEx_GetRTCCLKFreq+0x7e>
34012cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012cb4:	d011      	beq.n	34012cda <RCCEx_GetRTCCLKFreq+0x46>
34012cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34012cba:	d82a      	bhi.n	34012d12 <RCCEx_GetRTCCLKFreq+0x7e>
34012cbc:	2b00      	cmp	r3, #0
34012cbe:	d02a      	beq.n	34012d16 <RCCEx_GetRTCCLKFreq+0x82>
34012cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34012cc4:	d000      	beq.n	34012cc8 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34012cc6:	e024      	b.n	34012d12 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34012cc8:	f7f5 fbd8 	bl	3400847c <LL_RCC_LSE_IsReady>
34012ccc:	4603      	mov	r3, r0
34012cce:	2b00      	cmp	r3, #0
34012cd0:	d023      	beq.n	34012d1a <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34012cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012cd6:	607b      	str	r3, [r7, #4]
      break;
34012cd8:	e01f      	b.n	34012d1a <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34012cda:	f7f5 fbe1 	bl	340084a0 <LL_RCC_LSI_IsReady>
34012cde:	4603      	mov	r3, r0
34012ce0:	2b00      	cmp	r3, #0
34012ce2:	d01c      	beq.n	34012d1e <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34012ce4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34012ce8:	607b      	str	r3, [r7, #4]
      break;
34012cea:	e018      	b.n	34012d1e <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34012cec:	f7f5 fb74 	bl	340083d8 <LL_RCC_HSE_IsReady>
34012cf0:	4603      	mov	r3, r0
34012cf2:	2b00      	cmp	r3, #0
34012cf4:	d015      	beq.n	34012d22 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34012cf6:	4b0e      	ldr	r3, [pc, #56]	@ (34012d30 <RCCEx_GetRTCCLKFreq+0x9c>)
34012cf8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34012cfc:	0b1b      	lsrs	r3, r3, #12
34012cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34012d02:	3301      	adds	r3, #1
34012d04:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34012d06:	4a0b      	ldr	r2, [pc, #44]	@ (34012d34 <RCCEx_GetRTCCLKFreq+0xa0>)
34012d08:	683b      	ldr	r3, [r7, #0]
34012d0a:	fbb2 f3f3 	udiv	r3, r2, r3
34012d0e:	607b      	str	r3, [r7, #4]
      break;
34012d10:	e007      	b.n	34012d22 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34012d12:	bf00      	nop
34012d14:	e006      	b.n	34012d24 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d16:	bf00      	nop
34012d18:	e004      	b.n	34012d24 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d1a:	bf00      	nop
34012d1c:	e002      	b.n	34012d24 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d1e:	bf00      	nop
34012d20:	e000      	b.n	34012d24 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012d22:	bf00      	nop
  }

  return rtc_frequency;
34012d24:	687b      	ldr	r3, [r7, #4]
}
34012d26:	4618      	mov	r0, r3
34012d28:	3708      	adds	r7, #8
34012d2a:	46bd      	mov	sp, r7
34012d2c:	bd80      	pop	{r7, pc}
34012d2e:	bf00      	nop
34012d30:	56028000 	.word	0x56028000
34012d34:	02dc6c00 	.word	0x02dc6c00

34012d38 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34012d38:	b580      	push	{r7, lr}
34012d3a:	b084      	sub	sp, #16
34012d3c:	af00      	add	r7, sp, #0
34012d3e:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34012d40:	2300      	movs	r3, #0
34012d42:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34012d44:	6878      	ldr	r0, [r7, #4]
34012d46:	f7f5 ff0b 	bl	34008b60 <LL_RCC_GetSAIClockSource>
34012d4a:	4603      	mov	r3, r0
34012d4c:	4a9a      	ldr	r2, [pc, #616]	@ (34012fb8 <RCCEx_GetSAICLKFreq+0x280>)
34012d4e:	4293      	cmp	r3, r2
34012d50:	f000 811f 	beq.w	34012f92 <RCCEx_GetSAICLKFreq+0x25a>
34012d54:	4a98      	ldr	r2, [pc, #608]	@ (34012fb8 <RCCEx_GetSAICLKFreq+0x280>)
34012d56:	4293      	cmp	r3, r2
34012d58:	f200 8120 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012d5c:	4a97      	ldr	r2, [pc, #604]	@ (34012fbc <RCCEx_GetSAICLKFreq+0x284>)
34012d5e:	4293      	cmp	r3, r2
34012d60:	f000 8117 	beq.w	34012f92 <RCCEx_GetSAICLKFreq+0x25a>
34012d64:	4a95      	ldr	r2, [pc, #596]	@ (34012fbc <RCCEx_GetSAICLKFreq+0x284>)
34012d66:	4293      	cmp	r3, r2
34012d68:	f200 8118 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012d6c:	4a94      	ldr	r2, [pc, #592]	@ (34012fc0 <RCCEx_GetSAICLKFreq+0x288>)
34012d6e:	4293      	cmp	r3, r2
34012d70:	f000 810c 	beq.w	34012f8c <RCCEx_GetSAICLKFreq+0x254>
34012d74:	4a92      	ldr	r2, [pc, #584]	@ (34012fc0 <RCCEx_GetSAICLKFreq+0x288>)
34012d76:	4293      	cmp	r3, r2
34012d78:	f200 8110 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012d7c:	4a91      	ldr	r2, [pc, #580]	@ (34012fc4 <RCCEx_GetSAICLKFreq+0x28c>)
34012d7e:	4293      	cmp	r3, r2
34012d80:	f000 8104 	beq.w	34012f8c <RCCEx_GetSAICLKFreq+0x254>
34012d84:	4a8f      	ldr	r2, [pc, #572]	@ (34012fc4 <RCCEx_GetSAICLKFreq+0x28c>)
34012d86:	4293      	cmp	r3, r2
34012d88:	f200 8108 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012d8c:	4a8e      	ldr	r2, [pc, #568]	@ (34012fc8 <RCCEx_GetSAICLKFreq+0x290>)
34012d8e:	4293      	cmp	r3, r2
34012d90:	f000 80e6 	beq.w	34012f60 <RCCEx_GetSAICLKFreq+0x228>
34012d94:	4a8c      	ldr	r2, [pc, #560]	@ (34012fc8 <RCCEx_GetSAICLKFreq+0x290>)
34012d96:	4293      	cmp	r3, r2
34012d98:	f200 8100 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012d9c:	4a8b      	ldr	r2, [pc, #556]	@ (34012fcc <RCCEx_GetSAICLKFreq+0x294>)
34012d9e:	4293      	cmp	r3, r2
34012da0:	f000 80de 	beq.w	34012f60 <RCCEx_GetSAICLKFreq+0x228>
34012da4:	4a89      	ldr	r2, [pc, #548]	@ (34012fcc <RCCEx_GetSAICLKFreq+0x294>)
34012da6:	4293      	cmp	r3, r2
34012da8:	f200 80f8 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012dac:	4a88      	ldr	r2, [pc, #544]	@ (34012fd0 <RCCEx_GetSAICLKFreq+0x298>)
34012dae:	4293      	cmp	r3, r2
34012db0:	f000 80e4 	beq.w	34012f7c <RCCEx_GetSAICLKFreq+0x244>
34012db4:	4a86      	ldr	r2, [pc, #536]	@ (34012fd0 <RCCEx_GetSAICLKFreq+0x298>)
34012db6:	4293      	cmp	r3, r2
34012db8:	f200 80f0 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012dbc:	4a85      	ldr	r2, [pc, #532]	@ (34012fd4 <RCCEx_GetSAICLKFreq+0x29c>)
34012dbe:	4293      	cmp	r3, r2
34012dc0:	f000 80dc 	beq.w	34012f7c <RCCEx_GetSAICLKFreq+0x244>
34012dc4:	4a83      	ldr	r2, [pc, #524]	@ (34012fd4 <RCCEx_GetSAICLKFreq+0x29c>)
34012dc6:	4293      	cmp	r3, r2
34012dc8:	f200 80e8 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012dcc:	4a82      	ldr	r2, [pc, #520]	@ (34012fd8 <RCCEx_GetSAICLKFreq+0x2a0>)
34012dce:	4293      	cmp	r3, r2
34012dd0:	f000 8083 	beq.w	34012eda <RCCEx_GetSAICLKFreq+0x1a2>
34012dd4:	4a80      	ldr	r2, [pc, #512]	@ (34012fd8 <RCCEx_GetSAICLKFreq+0x2a0>)
34012dd6:	4293      	cmp	r3, r2
34012dd8:	f200 80e0 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012ddc:	4a7f      	ldr	r2, [pc, #508]	@ (34012fdc <RCCEx_GetSAICLKFreq+0x2a4>)
34012dde:	4293      	cmp	r3, r2
34012de0:	d07b      	beq.n	34012eda <RCCEx_GetSAICLKFreq+0x1a2>
34012de2:	4a7e      	ldr	r2, [pc, #504]	@ (34012fdc <RCCEx_GetSAICLKFreq+0x2a4>)
34012de4:	4293      	cmp	r3, r2
34012de6:	f200 80d9 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012dea:	4a7d      	ldr	r2, [pc, #500]	@ (34012fe0 <RCCEx_GetSAICLKFreq+0x2a8>)
34012dec:	4293      	cmp	r3, r2
34012dee:	d030      	beq.n	34012e52 <RCCEx_GetSAICLKFreq+0x11a>
34012df0:	4a7b      	ldr	r2, [pc, #492]	@ (34012fe0 <RCCEx_GetSAICLKFreq+0x2a8>)
34012df2:	4293      	cmp	r3, r2
34012df4:	f200 80d2 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012df8:	4a7a      	ldr	r2, [pc, #488]	@ (34012fe4 <RCCEx_GetSAICLKFreq+0x2ac>)
34012dfa:	4293      	cmp	r3, r2
34012dfc:	d029      	beq.n	34012e52 <RCCEx_GetSAICLKFreq+0x11a>
34012dfe:	4a79      	ldr	r2, [pc, #484]	@ (34012fe4 <RCCEx_GetSAICLKFreq+0x2ac>)
34012e00:	4293      	cmp	r3, r2
34012e02:	f200 80cb 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012e06:	4a78      	ldr	r2, [pc, #480]	@ (34012fe8 <RCCEx_GetSAICLKFreq+0x2b0>)
34012e08:	4293      	cmp	r3, r2
34012e0a:	d01d      	beq.n	34012e48 <RCCEx_GetSAICLKFreq+0x110>
34012e0c:	4a76      	ldr	r2, [pc, #472]	@ (34012fe8 <RCCEx_GetSAICLKFreq+0x2b0>)
34012e0e:	4293      	cmp	r3, r2
34012e10:	f200 80c4 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012e14:	4a75      	ldr	r2, [pc, #468]	@ (34012fec <RCCEx_GetSAICLKFreq+0x2b4>)
34012e16:	4293      	cmp	r3, r2
34012e18:	d016      	beq.n	34012e48 <RCCEx_GetSAICLKFreq+0x110>
34012e1a:	4a74      	ldr	r2, [pc, #464]	@ (34012fec <RCCEx_GetSAICLKFreq+0x2b4>)
34012e1c:	4293      	cmp	r3, r2
34012e1e:	f200 80bd 	bhi.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
34012e22:	4a73      	ldr	r2, [pc, #460]	@ (34012ff0 <RCCEx_GetSAICLKFreq+0x2b8>)
34012e24:	4293      	cmp	r3, r2
34012e26:	d003      	beq.n	34012e30 <RCCEx_GetSAICLKFreq+0xf8>
34012e28:	4a72      	ldr	r2, [pc, #456]	@ (34012ff4 <RCCEx_GetSAICLKFreq+0x2bc>)
34012e2a:	4293      	cmp	r3, r2
34012e2c:	f040 80b6 	bne.w	34012f9c <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012e30:	f7f4 fee6 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34012e34:	4603      	mov	r3, r0
34012e36:	4618      	mov	r0, r3
34012e38:	f7fd ffda 	bl	34010df0 <RCCEx_GetHCLKFreq>
34012e3c:	4603      	mov	r3, r0
34012e3e:	4618      	mov	r0, r3
34012e40:	f7fd fff7 	bl	34010e32 <RCCEx_GetPCLK2Freq>
34012e44:	60f8      	str	r0, [r7, #12]
      break;
34012e46:	e0b2      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012e48:	2007      	movs	r0, #7
34012e4a:	f7fe fabd 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34012e4e:	60f8      	str	r0, [r7, #12]
      break;
34012e50:	e0ad      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012e52:	f7f6 fa77 	bl	34009344 <LL_RCC_IC7_IsEnabled>
34012e56:	4603      	mov	r3, r0
34012e58:	2b00      	cmp	r3, #0
34012e5a:	f000 80a1 	beq.w	34012fa0 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34012e5e:	f7f6 fa93 	bl	34009388 <LL_RCC_IC7_GetDivider>
34012e62:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012e64:	f7f6 fa82 	bl	3400936c <LL_RCC_IC7_GetSource>
34012e68:	4603      	mov	r3, r0
34012e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e6e:	d029      	beq.n	34012ec4 <RCCEx_GetSAICLKFreq+0x18c>
34012e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012e74:	d82f      	bhi.n	34012ed6 <RCCEx_GetSAICLKFreq+0x19e>
34012e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012e7a:	d01a      	beq.n	34012eb2 <RCCEx_GetSAICLKFreq+0x17a>
34012e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012e80:	d829      	bhi.n	34012ed6 <RCCEx_GetSAICLKFreq+0x19e>
34012e82:	2b00      	cmp	r3, #0
34012e84:	d003      	beq.n	34012e8e <RCCEx_GetSAICLKFreq+0x156>
34012e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012e8a:	d009      	beq.n	34012ea0 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012e8c:	e023      	b.n	34012ed6 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012e8e:	f7fd fe97 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012e92:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012e94:	68fa      	ldr	r2, [r7, #12]
34012e96:	68bb      	ldr	r3, [r7, #8]
34012e98:	fbb2 f3f3 	udiv	r3, r2, r3
34012e9c:	60fb      	str	r3, [r7, #12]
            break;
34012e9e:	e01b      	b.n	34012ed8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012ea0:	f7fd fed4 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012ea4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012ea6:	68fa      	ldr	r2, [r7, #12]
34012ea8:	68bb      	ldr	r3, [r7, #8]
34012eaa:	fbb2 f3f3 	udiv	r3, r2, r3
34012eae:	60fb      	str	r3, [r7, #12]
            break;
34012eb0:	e012      	b.n	34012ed8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012eb2:	f7fd ff11 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012eb6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012eb8:	68fa      	ldr	r2, [r7, #12]
34012eba:	68bb      	ldr	r3, [r7, #8]
34012ebc:	fbb2 f3f3 	udiv	r3, r2, r3
34012ec0:	60fb      	str	r3, [r7, #12]
            break;
34012ec2:	e009      	b.n	34012ed8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012ec4:	f7fd ff4e 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012ec8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012eca:	68fa      	ldr	r2, [r7, #12]
34012ecc:	68bb      	ldr	r3, [r7, #8]
34012ece:	fbb2 f3f3 	udiv	r3, r2, r3
34012ed2:	60fb      	str	r3, [r7, #12]
            break;
34012ed4:	e000      	b.n	34012ed8 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
34012ed6:	bf00      	nop
        }
      }
      break;
34012ed8:	e062      	b.n	34012fa0 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012eda:	f7f6 fa73 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
34012ede:	4603      	mov	r3, r0
34012ee0:	2b00      	cmp	r3, #0
34012ee2:	d05f      	beq.n	34012fa4 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34012ee4:	f7f6 fa90 	bl	34009408 <LL_RCC_IC8_GetDivider>
34012ee8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012eea:	f7f6 fa7f 	bl	340093ec <LL_RCC_IC8_GetSource>
34012eee:	4603      	mov	r3, r0
34012ef0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012ef4:	d029      	beq.n	34012f4a <RCCEx_GetSAICLKFreq+0x212>
34012ef6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012efa:	d82f      	bhi.n	34012f5c <RCCEx_GetSAICLKFreq+0x224>
34012efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f00:	d01a      	beq.n	34012f38 <RCCEx_GetSAICLKFreq+0x200>
34012f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012f06:	d829      	bhi.n	34012f5c <RCCEx_GetSAICLKFreq+0x224>
34012f08:	2b00      	cmp	r3, #0
34012f0a:	d003      	beq.n	34012f14 <RCCEx_GetSAICLKFreq+0x1dc>
34012f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012f10:	d009      	beq.n	34012f26 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012f12:	e023      	b.n	34012f5c <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012f14:	f7fd fe54 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34012f18:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f1a:	68fa      	ldr	r2, [r7, #12]
34012f1c:	68bb      	ldr	r3, [r7, #8]
34012f1e:	fbb2 f3f3 	udiv	r3, r2, r3
34012f22:	60fb      	str	r3, [r7, #12]
            break;
34012f24:	e01b      	b.n	34012f5e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012f26:	f7fd fe91 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34012f2a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f2c:	68fa      	ldr	r2, [r7, #12]
34012f2e:	68bb      	ldr	r3, [r7, #8]
34012f30:	fbb2 f3f3 	udiv	r3, r2, r3
34012f34:	60fb      	str	r3, [r7, #12]
            break;
34012f36:	e012      	b.n	34012f5e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012f38:	f7fd fece 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34012f3c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f3e:	68fa      	ldr	r2, [r7, #12]
34012f40:	68bb      	ldr	r3, [r7, #8]
34012f42:	fbb2 f3f3 	udiv	r3, r2, r3
34012f46:	60fb      	str	r3, [r7, #12]
            break;
34012f48:	e009      	b.n	34012f5e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012f4a:	f7fd ff0b 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34012f4e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012f50:	68fa      	ldr	r2, [r7, #12]
34012f52:	68bb      	ldr	r3, [r7, #8]
34012f54:	fbb2 f3f3 	udiv	r3, r2, r3
34012f58:	60fb      	str	r3, [r7, #12]
            break;
34012f5a:	e000      	b.n	34012f5e <RCCEx_GetSAICLKFreq+0x226>
            break;
34012f5c:	bf00      	nop
        }
      }
      break;
34012f5e:	e021      	b.n	34012fa4 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012f60:	f7f5 fa4c 	bl	340083fc <LL_RCC_HSI_IsReady>
34012f64:	4603      	mov	r3, r0
34012f66:	2b00      	cmp	r3, #0
34012f68:	d01e      	beq.n	34012fa8 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012f6a:	f7f5 fa59 	bl	34008420 <LL_RCC_HSI_GetDivider>
34012f6e:	4603      	mov	r3, r0
34012f70:	09db      	lsrs	r3, r3, #7
34012f72:	4a21      	ldr	r2, [pc, #132]	@ (34012ff8 <RCCEx_GetSAICLKFreq+0x2c0>)
34012f74:	fa22 f303 	lsr.w	r3, r2, r3
34012f78:	60fb      	str	r3, [r7, #12]
      }
      break;
34012f7a:	e015      	b.n	34012fa8 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012f7c:	f7f5 fa5e 	bl	3400843c <LL_RCC_MSI_IsReady>
34012f80:	4603      	mov	r3, r0
34012f82:	2b00      	cmp	r3, #0
34012f84:	d012      	beq.n	34012fac <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34012f86:	4b1d      	ldr	r3, [pc, #116]	@ (34012ffc <RCCEx_GetSAICLKFreq+0x2c4>)
34012f88:	60fb      	str	r3, [r7, #12]
      }
      break;
34012f8a:	e00f      	b.n	34012fac <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34012f8c:	4b1c      	ldr	r3, [pc, #112]	@ (34013000 <RCCEx_GetSAICLKFreq+0x2c8>)
34012f8e:	60fb      	str	r3, [r7, #12]
      break;
34012f90:	e00d      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34012f92:	2007      	movs	r0, #7
34012f94:	f000 f920 	bl	340131d8 <RCCEx_GetSPDIFRXCLKFreq>
34012f98:	60f8      	str	r0, [r7, #12]
      break;
34012f9a:	e008      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
34012f9c:	bf00      	nop
34012f9e:	e006      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fa0:	bf00      	nop
34012fa2:	e004      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fa4:	bf00      	nop
34012fa6:	e002      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fa8:	bf00      	nop
34012faa:	e000      	b.n	34012fae <RCCEx_GetSAICLKFreq+0x276>
      break;
34012fac:	bf00      	nop
  }

  return sai_frequency;
34012fae:	68fb      	ldr	r3, [r7, #12]
}
34012fb0:	4618      	mov	r0, r3
34012fb2:	3710      	adds	r7, #16
34012fb4:	46bd      	mov	sp, r7
34012fb6:	bd80      	pop	{r7, pc}
34012fb8:	07071818 	.word	0x07071818
34012fbc:	07071418 	.word	0x07071418
34012fc0:	07061818 	.word	0x07061818
34012fc4:	07061418 	.word	0x07061418
34012fc8:	07051818 	.word	0x07051818
34012fcc:	07051418 	.word	0x07051418
34012fd0:	07041818 	.word	0x07041818
34012fd4:	07041418 	.word	0x07041418
34012fd8:	07031818 	.word	0x07031818
34012fdc:	07031418 	.word	0x07031418
34012fe0:	07021818 	.word	0x07021818
34012fe4:	07021418 	.word	0x07021418
34012fe8:	07011818 	.word	0x07011818
34012fec:	07011418 	.word	0x07011418
34012ff0:	07001418 	.word	0x07001418
34012ff4:	07001818 	.word	0x07001818
34012ff8:	03d09000 	.word	0x03d09000
34012ffc:	003d0900 	.word	0x003d0900
34013000:	00bb8000 	.word	0x00bb8000

34013004 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34013004:	b580      	push	{r7, lr}
34013006:	b084      	sub	sp, #16
34013008:	af00      	add	r7, sp, #0
3401300a:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3401300c:	2300      	movs	r3, #0
3401300e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34013010:	6878      	ldr	r0, [r7, #4]
34013012:	f7f5 fdb1 	bl	34008b78 <LL_RCC_GetSDMMCClockSource>
34013016:	4603      	mov	r3, r0
34013018:	4a67      	ldr	r2, [pc, #412]	@ (340131b8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3401301a:	4293      	cmp	r3, r2
3401301c:	d07e      	beq.n	3401311c <RCCEx_GetSDMMCCLKFreq+0x118>
3401301e:	4a66      	ldr	r2, [pc, #408]	@ (340131b8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34013020:	4293      	cmp	r3, r2
34013022:	f200 80be 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34013026:	4a65      	ldr	r2, [pc, #404]	@ (340131bc <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34013028:	4293      	cmp	r3, r2
3401302a:	d077      	beq.n	3401311c <RCCEx_GetSDMMCCLKFreq+0x118>
3401302c:	4a63      	ldr	r2, [pc, #396]	@ (340131bc <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3401302e:	4293      	cmp	r3, r2
34013030:	f200 80b7 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34013034:	4a62      	ldr	r2, [pc, #392]	@ (340131c0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34013036:	4293      	cmp	r3, r2
34013038:	d02c      	beq.n	34013094 <RCCEx_GetSDMMCCLKFreq+0x90>
3401303a:	4a61      	ldr	r2, [pc, #388]	@ (340131c0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3401303c:	4293      	cmp	r3, r2
3401303e:	f200 80b0 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34013042:	4a60      	ldr	r2, [pc, #384]	@ (340131c4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34013044:	4293      	cmp	r3, r2
34013046:	d025      	beq.n	34013094 <RCCEx_GetSDMMCCLKFreq+0x90>
34013048:	4a5e      	ldr	r2, [pc, #376]	@ (340131c4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3401304a:	4293      	cmp	r3, r2
3401304c:	f200 80a9 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
34013050:	4a5d      	ldr	r2, [pc, #372]	@ (340131c8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34013052:	4293      	cmp	r3, r2
34013054:	d019      	beq.n	3401308a <RCCEx_GetSDMMCCLKFreq+0x86>
34013056:	4a5c      	ldr	r2, [pc, #368]	@ (340131c8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34013058:	4293      	cmp	r3, r2
3401305a:	f200 80a2 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3401305e:	4a5b      	ldr	r2, [pc, #364]	@ (340131cc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34013060:	4293      	cmp	r3, r2
34013062:	d012      	beq.n	3401308a <RCCEx_GetSDMMCCLKFreq+0x86>
34013064:	4a59      	ldr	r2, [pc, #356]	@ (340131cc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34013066:	4293      	cmp	r3, r2
34013068:	f200 809b 	bhi.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3401306c:	4a58      	ldr	r2, [pc, #352]	@ (340131d0 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3401306e:	4293      	cmp	r3, r2
34013070:	d003      	beq.n	3401307a <RCCEx_GetSDMMCCLKFreq+0x76>
34013072:	4a58      	ldr	r2, [pc, #352]	@ (340131d4 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34013074:	4293      	cmp	r3, r2
34013076:	f040 8094 	bne.w	340131a2 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401307a:	f7f4 fdc1 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
3401307e:	4603      	mov	r3, r0
34013080:	4618      	mov	r0, r3
34013082:	f7fd feb5 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013086:	60f8      	str	r0, [r7, #12]
      break;
34013088:	e090      	b.n	340131ac <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401308a:	2007      	movs	r0, #7
3401308c:	f7fe f99c 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34013090:	60f8      	str	r0, [r7, #12]
      break;
34013092:	e08b      	b.n	340131ac <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34013094:	f7f6 f8d6 	bl	34009244 <LL_RCC_IC4_IsEnabled>
34013098:	4603      	mov	r3, r0
3401309a:	2b00      	cmp	r3, #0
3401309c:	f000 8083 	beq.w	340131a6 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
340130a0:	f7f6 f8f2 	bl	34009288 <LL_RCC_IC4_GetDivider>
340130a4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340130a6:	f7f6 f8e1 	bl	3400926c <LL_RCC_IC4_GetSource>
340130aa:	4603      	mov	r3, r0
340130ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130b0:	d029      	beq.n	34013106 <RCCEx_GetSDMMCCLKFreq+0x102>
340130b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130b6:	d82f      	bhi.n	34013118 <RCCEx_GetSDMMCCLKFreq+0x114>
340130b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130bc:	d01a      	beq.n	340130f4 <RCCEx_GetSDMMCCLKFreq+0xf0>
340130be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130c2:	d829      	bhi.n	34013118 <RCCEx_GetSDMMCCLKFreq+0x114>
340130c4:	2b00      	cmp	r3, #0
340130c6:	d003      	beq.n	340130d0 <RCCEx_GetSDMMCCLKFreq+0xcc>
340130c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340130cc:	d009      	beq.n	340130e2 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340130ce:	e023      	b.n	34013118 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340130d0:	f7fd fd76 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340130d4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340130d6:	68fa      	ldr	r2, [r7, #12]
340130d8:	68bb      	ldr	r3, [r7, #8]
340130da:	fbb2 f3f3 	udiv	r3, r2, r3
340130de:	60fb      	str	r3, [r7, #12]
            break;
340130e0:	e01b      	b.n	3401311a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340130e2:	f7fd fdb3 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340130e6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340130e8:	68fa      	ldr	r2, [r7, #12]
340130ea:	68bb      	ldr	r3, [r7, #8]
340130ec:	fbb2 f3f3 	udiv	r3, r2, r3
340130f0:	60fb      	str	r3, [r7, #12]
            break;
340130f2:	e012      	b.n	3401311a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340130f4:	f7fd fdf0 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340130f8:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340130fa:	68fa      	ldr	r2, [r7, #12]
340130fc:	68bb      	ldr	r3, [r7, #8]
340130fe:	fbb2 f3f3 	udiv	r3, r2, r3
34013102:	60fb      	str	r3, [r7, #12]
            break;
34013104:	e009      	b.n	3401311a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013106:	f7fd fe2d 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
3401310a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3401310c:	68fa      	ldr	r2, [r7, #12]
3401310e:	68bb      	ldr	r3, [r7, #8]
34013110:	fbb2 f3f3 	udiv	r3, r2, r3
34013114:	60fb      	str	r3, [r7, #12]
            break;
34013116:	e000      	b.n	3401311a <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34013118:	bf00      	nop
        }
      }
      break;
3401311a:	e044      	b.n	340131a6 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3401311c:	f7f6 f8d2 	bl	340092c4 <LL_RCC_IC5_IsEnabled>
34013120:	4603      	mov	r3, r0
34013122:	2b00      	cmp	r3, #0
34013124:	d041      	beq.n	340131aa <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34013126:	f7f6 f8ef 	bl	34009308 <LL_RCC_IC5_GetDivider>
3401312a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3401312c:	f7f6 f8de 	bl	340092ec <LL_RCC_IC5_GetSource>
34013130:	4603      	mov	r3, r0
34013132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013136:	d029      	beq.n	3401318c <RCCEx_GetSDMMCCLKFreq+0x188>
34013138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401313c:	d82f      	bhi.n	3401319e <RCCEx_GetSDMMCCLKFreq+0x19a>
3401313e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013142:	d01a      	beq.n	3401317a <RCCEx_GetSDMMCCLKFreq+0x176>
34013144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013148:	d829      	bhi.n	3401319e <RCCEx_GetSDMMCCLKFreq+0x19a>
3401314a:	2b00      	cmp	r3, #0
3401314c:	d003      	beq.n	34013156 <RCCEx_GetSDMMCCLKFreq+0x152>
3401314e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013152:	d009      	beq.n	34013168 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013154:	e023      	b.n	3401319e <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013156:	f7fd fd33 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401315a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3401315c:	68fa      	ldr	r2, [r7, #12]
3401315e:	68bb      	ldr	r3, [r7, #8]
34013160:	fbb2 f3f3 	udiv	r3, r2, r3
34013164:	60fb      	str	r3, [r7, #12]
            break;
34013166:	e01b      	b.n	340131a0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013168:	f7fd fd70 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401316c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3401316e:	68fa      	ldr	r2, [r7, #12]
34013170:	68bb      	ldr	r3, [r7, #8]
34013172:	fbb2 f3f3 	udiv	r3, r2, r3
34013176:	60fb      	str	r3, [r7, #12]
            break;
34013178:	e012      	b.n	340131a0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401317a:	f7fd fdad 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
3401317e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013180:	68fa      	ldr	r2, [r7, #12]
34013182:	68bb      	ldr	r3, [r7, #8]
34013184:	fbb2 f3f3 	udiv	r3, r2, r3
34013188:	60fb      	str	r3, [r7, #12]
            break;
3401318a:	e009      	b.n	340131a0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401318c:	f7fd fdea 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34013190:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34013192:	68fa      	ldr	r2, [r7, #12]
34013194:	68bb      	ldr	r3, [r7, #8]
34013196:	fbb2 f3f3 	udiv	r3, r2, r3
3401319a:	60fb      	str	r3, [r7, #12]
            break;
3401319c:	e000      	b.n	340131a0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3401319e:	bf00      	nop
        }
      }
      break;
340131a0:	e003      	b.n	340131aa <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
340131a2:	bf00      	nop
340131a4:	e002      	b.n	340131ac <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340131a6:	bf00      	nop
340131a8:	e000      	b.n	340131ac <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
340131aa:	bf00      	nop
  }

  return sdmmc_frequency;
340131ac:	68fb      	ldr	r3, [r7, #12]
}
340131ae:	4618      	mov	r0, r3
340131b0:	3710      	adds	r7, #16
340131b2:	46bd      	mov	sp, r7
340131b4:	bd80      	pop	{r7, pc}
340131b6:	bf00      	nop
340131b8:	0303041c 	.word	0x0303041c
340131bc:	0303001c 	.word	0x0303001c
340131c0:	0302041c 	.word	0x0302041c
340131c4:	0302001c 	.word	0x0302001c
340131c8:	0301041c 	.word	0x0301041c
340131cc:	0301001c 	.word	0x0301001c
340131d0:	0300001c 	.word	0x0300001c
340131d4:	0300041c 	.word	0x0300041c

340131d8 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
340131d8:	b580      	push	{r7, lr}
340131da:	b084      	sub	sp, #16
340131dc:	af00      	add	r7, sp, #0
340131de:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
340131e0:	2300      	movs	r3, #0
340131e2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340131e4:	6878      	ldr	r0, [r7, #4]
340131e6:	f7f5 fcd3 	bl	34008b90 <LL_RCC_GetSPDIFRXClockSource>
340131ea:	4603      	mov	r3, r0
340131ec:	2b06      	cmp	r3, #6
340131ee:	f200 80c2 	bhi.w	34013376 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
340131f2:	a201      	add	r2, pc, #4	@ (adr r2, 340131f8 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
340131f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340131f8:	34013215 	.word	0x34013215
340131fc:	3401322d 	.word	0x3401322d
34013200:	34013237 	.word	0x34013237
34013204:	340132bf 	.word	0x340132bf
34013208:	34013361 	.word	0x34013361
3401320c:	34013345 	.word	0x34013345
34013210:	34013371 	.word	0x34013371
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013214:	f7f4 fcf4 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013218:	4603      	mov	r3, r0
3401321a:	4618      	mov	r0, r3
3401321c:	f7fd fde8 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013220:	4603      	mov	r3, r0
34013222:	4618      	mov	r0, r3
34013224:	f7fd fdf5 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34013228:	60f8      	str	r0, [r7, #12]
      break;
3401322a:	e0ad      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401322c:	2007      	movs	r0, #7
3401322e:	f7fe f8cb 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34013232:	60f8      	str	r0, [r7, #12]
      break;
34013234:	e0a8      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34013236:	f7f6 f885 	bl	34009344 <LL_RCC_IC7_IsEnabled>
3401323a:	4603      	mov	r3, r0
3401323c:	2b00      	cmp	r3, #0
3401323e:	f000 809c 	beq.w	3401337a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34013242:	f7f6 f8a1 	bl	34009388 <LL_RCC_IC7_GetDivider>
34013246:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34013248:	f7f6 f890 	bl	3400936c <LL_RCC_IC7_GetSource>
3401324c:	4603      	mov	r3, r0
3401324e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013252:	d029      	beq.n	340132a8 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
34013254:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013258:	d82f      	bhi.n	340132ba <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3401325a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401325e:	d01a      	beq.n	34013296 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34013260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013264:	d829      	bhi.n	340132ba <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34013266:	2b00      	cmp	r3, #0
34013268:	d003      	beq.n	34013272 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3401326a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401326e:	d009      	beq.n	34013284 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013270:	e023      	b.n	340132ba <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013272:	f7fd fca5 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34013276:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013278:	68fa      	ldr	r2, [r7, #12]
3401327a:	68bb      	ldr	r3, [r7, #8]
3401327c:	fbb2 f3f3 	udiv	r3, r2, r3
34013280:	60fb      	str	r3, [r7, #12]
            break;
34013282:	e01b      	b.n	340132bc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013284:	f7fd fce2 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013288:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401328a:	68fa      	ldr	r2, [r7, #12]
3401328c:	68bb      	ldr	r3, [r7, #8]
3401328e:	fbb2 f3f3 	udiv	r3, r2, r3
34013292:	60fb      	str	r3, [r7, #12]
            break;
34013294:	e012      	b.n	340132bc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013296:	f7fd fd1f 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
3401329a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3401329c:	68fa      	ldr	r2, [r7, #12]
3401329e:	68bb      	ldr	r3, [r7, #8]
340132a0:	fbb2 f3f3 	udiv	r3, r2, r3
340132a4:	60fb      	str	r3, [r7, #12]
            break;
340132a6:	e009      	b.n	340132bc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340132a8:	f7fd fd5c 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340132ac:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340132ae:	68fa      	ldr	r2, [r7, #12]
340132b0:	68bb      	ldr	r3, [r7, #8]
340132b2:	fbb2 f3f3 	udiv	r3, r2, r3
340132b6:	60fb      	str	r3, [r7, #12]
            break;
340132b8:	e000      	b.n	340132bc <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
340132ba:	bf00      	nop
        }
      }
      break;
340132bc:	e05d      	b.n	3401337a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340132be:	f7f6 f881 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
340132c2:	4603      	mov	r3, r0
340132c4:	2b00      	cmp	r3, #0
340132c6:	d05a      	beq.n	3401337e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340132c8:	f7f6 f89e 	bl	34009408 <LL_RCC_IC8_GetDivider>
340132cc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340132ce:	f7f6 f88d 	bl	340093ec <LL_RCC_IC8_GetSource>
340132d2:	4603      	mov	r3, r0
340132d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340132d8:	d029      	beq.n	3401332e <RCCEx_GetSPDIFRXCLKFreq+0x156>
340132da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340132de:	d82f      	bhi.n	34013340 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340132e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340132e4:	d01a      	beq.n	3401331c <RCCEx_GetSPDIFRXCLKFreq+0x144>
340132e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340132ea:	d829      	bhi.n	34013340 <RCCEx_GetSPDIFRXCLKFreq+0x168>
340132ec:	2b00      	cmp	r3, #0
340132ee:	d003      	beq.n	340132f8 <RCCEx_GetSPDIFRXCLKFreq+0x120>
340132f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340132f4:	d009      	beq.n	3401330a <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340132f6:	e023      	b.n	34013340 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340132f8:	f7fd fc62 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340132fc:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
340132fe:	68fa      	ldr	r2, [r7, #12]
34013300:	68bb      	ldr	r3, [r7, #8]
34013302:	fbb2 f3f3 	udiv	r3, r2, r3
34013306:	60fb      	str	r3, [r7, #12]
            break;
34013308:	e01b      	b.n	34013342 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401330a:	f7fd fc9f 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401330e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013310:	68fa      	ldr	r2, [r7, #12]
34013312:	68bb      	ldr	r3, [r7, #8]
34013314:	fbb2 f3f3 	udiv	r3, r2, r3
34013318:	60fb      	str	r3, [r7, #12]
            break;
3401331a:	e012      	b.n	34013342 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401331c:	f7fd fcdc 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34013320:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013322:	68fa      	ldr	r2, [r7, #12]
34013324:	68bb      	ldr	r3, [r7, #8]
34013326:	fbb2 f3f3 	udiv	r3, r2, r3
3401332a:	60fb      	str	r3, [r7, #12]
            break;
3401332c:	e009      	b.n	34013342 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401332e:	f7fd fd19 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34013332:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34013334:	68fa      	ldr	r2, [r7, #12]
34013336:	68bb      	ldr	r3, [r7, #8]
34013338:	fbb2 f3f3 	udiv	r3, r2, r3
3401333c:	60fb      	str	r3, [r7, #12]
            break;
3401333e:	e000      	b.n	34013342 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34013340:	bf00      	nop
        }
      }
      break;
34013342:	e01c      	b.n	3401337e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34013344:	f7f5 f85a 	bl	340083fc <LL_RCC_HSI_IsReady>
34013348:	4603      	mov	r3, r0
3401334a:	2b00      	cmp	r3, #0
3401334c:	d019      	beq.n	34013382 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401334e:	f7f5 f867 	bl	34008420 <LL_RCC_HSI_GetDivider>
34013352:	4603      	mov	r3, r0
34013354:	09db      	lsrs	r3, r3, #7
34013356:	4a0f      	ldr	r2, [pc, #60]	@ (34013394 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34013358:	fa22 f303 	lsr.w	r3, r2, r3
3401335c:	60fb      	str	r3, [r7, #12]
      }
      break;
3401335e:	e010      	b.n	34013382 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013360:	f7f5 f86c 	bl	3400843c <LL_RCC_MSI_IsReady>
34013364:	4603      	mov	r3, r0
34013366:	2b00      	cmp	r3, #0
34013368:	d00d      	beq.n	34013386 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3401336a:	4b0b      	ldr	r3, [pc, #44]	@ (34013398 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3401336c:	60fb      	str	r3, [r7, #12]
      }
      break;
3401336e:	e00a      	b.n	34013386 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34013370:	4b0a      	ldr	r3, [pc, #40]	@ (3401339c <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
34013372:	60fb      	str	r3, [r7, #12]
      break;
34013374:	e008      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
34013376:	bf00      	nop
34013378:	e006      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401337a:	bf00      	nop
3401337c:	e004      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3401337e:	bf00      	nop
34013380:	e002      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013382:	bf00      	nop
34013384:	e000      	b.n	34013388 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34013386:	bf00      	nop
  }

  return spdifrx_frequency;
34013388:	68fb      	ldr	r3, [r7, #12]
}
3401338a:	4618      	mov	r0, r3
3401338c:	3710      	adds	r7, #16
3401338e:	46bd      	mov	sp, r7
34013390:	bd80      	pop	{r7, pc}
34013392:	bf00      	nop
34013394:	03d09000 	.word	0x03d09000
34013398:	003d0900 	.word	0x003d0900
3401339c:	00bb8000 	.word	0x00bb8000

340133a0 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
340133a0:	b580      	push	{r7, lr}
340133a2:	b084      	sub	sp, #16
340133a4:	af00      	add	r7, sp, #0
340133a6:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
340133a8:	2300      	movs	r3, #0
340133aa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340133ac:	6878      	ldr	r0, [r7, #4]
340133ae:	f7f5 fc01 	bl	34008bb4 <LL_RCC_GetSPIClockSource>
340133b2:	4603      	mov	r3, r0
340133b4:	4aa7      	ldr	r2, [pc, #668]	@ (34013654 <RCCEx_GetSPICLKFreq+0x2b4>)
340133b6:	4293      	cmp	r3, r2
340133b8:	f000 829e 	beq.w	340138f8 <RCCEx_GetSPICLKFreq+0x558>
340133bc:	4aa5      	ldr	r2, [pc, #660]	@ (34013654 <RCCEx_GetSPICLKFreq+0x2b4>)
340133be:	4293      	cmp	r3, r2
340133c0:	f200 82a5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340133c4:	4aa4      	ldr	r2, [pc, #656]	@ (34013658 <RCCEx_GetSPICLKFreq+0x2b8>)
340133c6:	4293      	cmp	r3, r2
340133c8:	f000 8299 	beq.w	340138fe <RCCEx_GetSPICLKFreq+0x55e>
340133cc:	4aa2      	ldr	r2, [pc, #648]	@ (34013658 <RCCEx_GetSPICLKFreq+0x2b8>)
340133ce:	4293      	cmp	r3, r2
340133d0:	f200 829d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340133d4:	4aa1      	ldr	r2, [pc, #644]	@ (3401365c <RCCEx_GetSPICLKFreq+0x2bc>)
340133d6:	4293      	cmp	r3, r2
340133d8:	f000 8291 	beq.w	340138fe <RCCEx_GetSPICLKFreq+0x55e>
340133dc:	4a9f      	ldr	r2, [pc, #636]	@ (3401365c <RCCEx_GetSPICLKFreq+0x2bc>)
340133de:	4293      	cmp	r3, r2
340133e0:	f200 8295 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340133e4:	4a9e      	ldr	r2, [pc, #632]	@ (34013660 <RCCEx_GetSPICLKFreq+0x2c0>)
340133e6:	4293      	cmp	r3, r2
340133e8:	f000 8286 	beq.w	340138f8 <RCCEx_GetSPICLKFreq+0x558>
340133ec:	4a9c      	ldr	r2, [pc, #624]	@ (34013660 <RCCEx_GetSPICLKFreq+0x2c0>)
340133ee:	4293      	cmp	r3, r2
340133f0:	f200 828d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340133f4:	4a9b      	ldr	r2, [pc, #620]	@ (34013664 <RCCEx_GetSPICLKFreq+0x2c4>)
340133f6:	4293      	cmp	r3, r2
340133f8:	f000 827e 	beq.w	340138f8 <RCCEx_GetSPICLKFreq+0x558>
340133fc:	4a99      	ldr	r2, [pc, #612]	@ (34013664 <RCCEx_GetSPICLKFreq+0x2c4>)
340133fe:	4293      	cmp	r3, r2
34013400:	f200 8285 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013404:	4a98      	ldr	r2, [pc, #608]	@ (34013668 <RCCEx_GetSPICLKFreq+0x2c8>)
34013406:	4293      	cmp	r3, r2
34013408:	f000 8276 	beq.w	340138f8 <RCCEx_GetSPICLKFreq+0x558>
3401340c:	4a96      	ldr	r2, [pc, #600]	@ (34013668 <RCCEx_GetSPICLKFreq+0x2c8>)
3401340e:	4293      	cmp	r3, r2
34013410:	f200 827d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013414:	4a95      	ldr	r2, [pc, #596]	@ (3401366c <RCCEx_GetSPICLKFreq+0x2cc>)
34013416:	4293      	cmp	r3, r2
34013418:	f000 8258 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401341c:	4a93      	ldr	r2, [pc, #588]	@ (3401366c <RCCEx_GetSPICLKFreq+0x2cc>)
3401341e:	4293      	cmp	r3, r2
34013420:	f200 8275 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013424:	4a92      	ldr	r2, [pc, #584]	@ (34013670 <RCCEx_GetSPICLKFreq+0x2d0>)
34013426:	4293      	cmp	r3, r2
34013428:	f000 8250 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401342c:	4a90      	ldr	r2, [pc, #576]	@ (34013670 <RCCEx_GetSPICLKFreq+0x2d0>)
3401342e:	4293      	cmp	r3, r2
34013430:	f200 826d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013434:	4a8f      	ldr	r2, [pc, #572]	@ (34013674 <RCCEx_GetSPICLKFreq+0x2d4>)
34013436:	4293      	cmp	r3, r2
34013438:	f000 8248 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401343c:	4a8d      	ldr	r2, [pc, #564]	@ (34013674 <RCCEx_GetSPICLKFreq+0x2d4>)
3401343e:	4293      	cmp	r3, r2
34013440:	f200 8265 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013444:	4a8c      	ldr	r2, [pc, #560]	@ (34013678 <RCCEx_GetSPICLKFreq+0x2d8>)
34013446:	4293      	cmp	r3, r2
34013448:	f000 8240 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401344c:	4a8a      	ldr	r2, [pc, #552]	@ (34013678 <RCCEx_GetSPICLKFreq+0x2d8>)
3401344e:	4293      	cmp	r3, r2
34013450:	f200 825d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013454:	4a89      	ldr	r2, [pc, #548]	@ (3401367c <RCCEx_GetSPICLKFreq+0x2dc>)
34013456:	4293      	cmp	r3, r2
34013458:	f000 8238 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401345c:	4a87      	ldr	r2, [pc, #540]	@ (3401367c <RCCEx_GetSPICLKFreq+0x2dc>)
3401345e:	4293      	cmp	r3, r2
34013460:	f200 8255 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013464:	4a86      	ldr	r2, [pc, #536]	@ (34013680 <RCCEx_GetSPICLKFreq+0x2e0>)
34013466:	4293      	cmp	r3, r2
34013468:	f000 8230 	beq.w	340138cc <RCCEx_GetSPICLKFreq+0x52c>
3401346c:	4a84      	ldr	r2, [pc, #528]	@ (34013680 <RCCEx_GetSPICLKFreq+0x2e0>)
3401346e:	4293      	cmp	r3, r2
34013470:	f200 824d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013474:	4a83      	ldr	r2, [pc, #524]	@ (34013684 <RCCEx_GetSPICLKFreq+0x2e4>)
34013476:	4293      	cmp	r3, r2
34013478:	f000 8236 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
3401347c:	4a81      	ldr	r2, [pc, #516]	@ (34013684 <RCCEx_GetSPICLKFreq+0x2e4>)
3401347e:	4293      	cmp	r3, r2
34013480:	f200 8245 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013484:	4a80      	ldr	r2, [pc, #512]	@ (34013688 <RCCEx_GetSPICLKFreq+0x2e8>)
34013486:	4293      	cmp	r3, r2
34013488:	f000 822e 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
3401348c:	4a7e      	ldr	r2, [pc, #504]	@ (34013688 <RCCEx_GetSPICLKFreq+0x2e8>)
3401348e:	4293      	cmp	r3, r2
34013490:	f200 823d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013494:	4a7d      	ldr	r2, [pc, #500]	@ (3401368c <RCCEx_GetSPICLKFreq+0x2ec>)
34013496:	4293      	cmp	r3, r2
34013498:	f000 8226 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
3401349c:	4a7b      	ldr	r2, [pc, #492]	@ (3401368c <RCCEx_GetSPICLKFreq+0x2ec>)
3401349e:	4293      	cmp	r3, r2
340134a0:	f200 8235 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134a4:	4a7a      	ldr	r2, [pc, #488]	@ (34013690 <RCCEx_GetSPICLKFreq+0x2f0>)
340134a6:	4293      	cmp	r3, r2
340134a8:	f000 821e 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
340134ac:	4a78      	ldr	r2, [pc, #480]	@ (34013690 <RCCEx_GetSPICLKFreq+0x2f0>)
340134ae:	4293      	cmp	r3, r2
340134b0:	f200 822d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134b4:	4a77      	ldr	r2, [pc, #476]	@ (34013694 <RCCEx_GetSPICLKFreq+0x2f4>)
340134b6:	4293      	cmp	r3, r2
340134b8:	f000 8216 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
340134bc:	4a75      	ldr	r2, [pc, #468]	@ (34013694 <RCCEx_GetSPICLKFreq+0x2f4>)
340134be:	4293      	cmp	r3, r2
340134c0:	f200 8225 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134c4:	4a74      	ldr	r2, [pc, #464]	@ (34013698 <RCCEx_GetSPICLKFreq+0x2f8>)
340134c6:	4293      	cmp	r3, r2
340134c8:	f000 820e 	beq.w	340138e8 <RCCEx_GetSPICLKFreq+0x548>
340134cc:	4a72      	ldr	r2, [pc, #456]	@ (34013698 <RCCEx_GetSPICLKFreq+0x2f8>)
340134ce:	4293      	cmp	r3, r2
340134d0:	f200 821d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134d4:	4a71      	ldr	r2, [pc, #452]	@ (3401369c <RCCEx_GetSPICLKFreq+0x2fc>)
340134d6:	4293      	cmp	r3, r2
340134d8:	f000 8171 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
340134dc:	4a6f      	ldr	r2, [pc, #444]	@ (3401369c <RCCEx_GetSPICLKFreq+0x2fc>)
340134de:	4293      	cmp	r3, r2
340134e0:	f200 8215 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134e4:	4a6e      	ldr	r2, [pc, #440]	@ (340136a0 <RCCEx_GetSPICLKFreq+0x300>)
340134e6:	4293      	cmp	r3, r2
340134e8:	f000 81ad 	beq.w	34013846 <RCCEx_GetSPICLKFreq+0x4a6>
340134ec:	4a6c      	ldr	r2, [pc, #432]	@ (340136a0 <RCCEx_GetSPICLKFreq+0x300>)
340134ee:	4293      	cmp	r3, r2
340134f0:	f200 820d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340134f4:	4a6b      	ldr	r2, [pc, #428]	@ (340136a4 <RCCEx_GetSPICLKFreq+0x304>)
340134f6:	4293      	cmp	r3, r2
340134f8:	f000 81a5 	beq.w	34013846 <RCCEx_GetSPICLKFreq+0x4a6>
340134fc:	4a69      	ldr	r2, [pc, #420]	@ (340136a4 <RCCEx_GetSPICLKFreq+0x304>)
340134fe:	4293      	cmp	r3, r2
34013500:	f200 8205 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013504:	4a68      	ldr	r2, [pc, #416]	@ (340136a8 <RCCEx_GetSPICLKFreq+0x308>)
34013506:	4293      	cmp	r3, r2
34013508:	f000 8159 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
3401350c:	4a66      	ldr	r2, [pc, #408]	@ (340136a8 <RCCEx_GetSPICLKFreq+0x308>)
3401350e:	4293      	cmp	r3, r2
34013510:	f200 81fd 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013514:	4a65      	ldr	r2, [pc, #404]	@ (340136ac <RCCEx_GetSPICLKFreq+0x30c>)
34013516:	4293      	cmp	r3, r2
34013518:	f000 8151 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
3401351c:	4a63      	ldr	r2, [pc, #396]	@ (340136ac <RCCEx_GetSPICLKFreq+0x30c>)
3401351e:	4293      	cmp	r3, r2
34013520:	f200 81f5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013524:	4a62      	ldr	r2, [pc, #392]	@ (340136b0 <RCCEx_GetSPICLKFreq+0x310>)
34013526:	4293      	cmp	r3, r2
34013528:	f000 8149 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
3401352c:	4a60      	ldr	r2, [pc, #384]	@ (340136b0 <RCCEx_GetSPICLKFreq+0x310>)
3401352e:	4293      	cmp	r3, r2
34013530:	f200 81ed 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013534:	4a5f      	ldr	r2, [pc, #380]	@ (340136b4 <RCCEx_GetSPICLKFreq+0x314>)
34013536:	4293      	cmp	r3, r2
34013538:	f000 80fd 	beq.w	34013736 <RCCEx_GetSPICLKFreq+0x396>
3401353c:	4a5d      	ldr	r2, [pc, #372]	@ (340136b4 <RCCEx_GetSPICLKFreq+0x314>)
3401353e:	4293      	cmp	r3, r2
34013540:	f200 81e5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013544:	4a5c      	ldr	r2, [pc, #368]	@ (340136b8 <RCCEx_GetSPICLKFreq+0x318>)
34013546:	4293      	cmp	r3, r2
34013548:	f000 8139 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
3401354c:	4a5a      	ldr	r2, [pc, #360]	@ (340136b8 <RCCEx_GetSPICLKFreq+0x318>)
3401354e:	4293      	cmp	r3, r2
34013550:	f200 81dd 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013554:	4a59      	ldr	r2, [pc, #356]	@ (340136bc <RCCEx_GetSPICLKFreq+0x31c>)
34013556:	4293      	cmp	r3, r2
34013558:	f000 8131 	beq.w	340137be <RCCEx_GetSPICLKFreq+0x41e>
3401355c:	4a57      	ldr	r2, [pc, #348]	@ (340136bc <RCCEx_GetSPICLKFreq+0x31c>)
3401355e:	4293      	cmp	r3, r2
34013560:	f200 81d5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013564:	4a56      	ldr	r2, [pc, #344]	@ (340136c0 <RCCEx_GetSPICLKFreq+0x320>)
34013566:	4293      	cmp	r3, r2
34013568:	f000 80e5 	beq.w	34013736 <RCCEx_GetSPICLKFreq+0x396>
3401356c:	4a54      	ldr	r2, [pc, #336]	@ (340136c0 <RCCEx_GetSPICLKFreq+0x320>)
3401356e:	4293      	cmp	r3, r2
34013570:	f200 81cd 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013574:	4a53      	ldr	r2, [pc, #332]	@ (340136c4 <RCCEx_GetSPICLKFreq+0x324>)
34013576:	4293      	cmp	r3, r2
34013578:	f000 80dd 	beq.w	34013736 <RCCEx_GetSPICLKFreq+0x396>
3401357c:	4a51      	ldr	r2, [pc, #324]	@ (340136c4 <RCCEx_GetSPICLKFreq+0x324>)
3401357e:	4293      	cmp	r3, r2
34013580:	f200 81c5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013584:	4a50      	ldr	r2, [pc, #320]	@ (340136c8 <RCCEx_GetSPICLKFreq+0x328>)
34013586:	4293      	cmp	r3, r2
34013588:	f000 80d5 	beq.w	34013736 <RCCEx_GetSPICLKFreq+0x396>
3401358c:	4a4e      	ldr	r2, [pc, #312]	@ (340136c8 <RCCEx_GetSPICLKFreq+0x328>)
3401358e:	4293      	cmp	r3, r2
34013590:	f200 81bd 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013594:	4a4d      	ldr	r2, [pc, #308]	@ (340136cc <RCCEx_GetSPICLKFreq+0x32c>)
34013596:	4293      	cmp	r3, r2
34013598:	f000 80c8 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
3401359c:	4a4b      	ldr	r2, [pc, #300]	@ (340136cc <RCCEx_GetSPICLKFreq+0x32c>)
3401359e:	4293      	cmp	r3, r2
340135a0:	f200 81b5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135a4:	4a4a      	ldr	r2, [pc, #296]	@ (340136d0 <RCCEx_GetSPICLKFreq+0x330>)
340135a6:	4293      	cmp	r3, r2
340135a8:	f000 80c0 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
340135ac:	4a48      	ldr	r2, [pc, #288]	@ (340136d0 <RCCEx_GetSPICLKFreq+0x330>)
340135ae:	4293      	cmp	r3, r2
340135b0:	f200 81ad 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135b4:	4a47      	ldr	r2, [pc, #284]	@ (340136d4 <RCCEx_GetSPICLKFreq+0x334>)
340135b6:	4293      	cmp	r3, r2
340135b8:	f000 80b8 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
340135bc:	4a45      	ldr	r2, [pc, #276]	@ (340136d4 <RCCEx_GetSPICLKFreq+0x334>)
340135be:	4293      	cmp	r3, r2
340135c0:	f200 81a5 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135c4:	4a44      	ldr	r2, [pc, #272]	@ (340136d8 <RCCEx_GetSPICLKFreq+0x338>)
340135c6:	4293      	cmp	r3, r2
340135c8:	f000 80b0 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
340135cc:	4a42      	ldr	r2, [pc, #264]	@ (340136d8 <RCCEx_GetSPICLKFreq+0x338>)
340135ce:	4293      	cmp	r3, r2
340135d0:	f200 819d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135d4:	4a41      	ldr	r2, [pc, #260]	@ (340136dc <RCCEx_GetSPICLKFreq+0x33c>)
340135d6:	4293      	cmp	r3, r2
340135d8:	f000 80a8 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
340135dc:	4a3f      	ldr	r2, [pc, #252]	@ (340136dc <RCCEx_GetSPICLKFreq+0x33c>)
340135de:	4293      	cmp	r3, r2
340135e0:	f200 8195 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135e4:	4a3e      	ldr	r2, [pc, #248]	@ (340136e0 <RCCEx_GetSPICLKFreq+0x340>)
340135e6:	4293      	cmp	r3, r2
340135e8:	f000 80a0 	beq.w	3401372c <RCCEx_GetSPICLKFreq+0x38c>
340135ec:	4a3c      	ldr	r2, [pc, #240]	@ (340136e0 <RCCEx_GetSPICLKFreq+0x340>)
340135ee:	4293      	cmp	r3, r2
340135f0:	f200 818d 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
340135f4:	4a3b      	ldr	r2, [pc, #236]	@ (340136e4 <RCCEx_GetSPICLKFreq+0x344>)
340135f6:	4293      	cmp	r3, r2
340135f8:	f000 808c 	beq.w	34013714 <RCCEx_GetSPICLKFreq+0x374>
340135fc:	4a39      	ldr	r2, [pc, #228]	@ (340136e4 <RCCEx_GetSPICLKFreq+0x344>)
340135fe:	4293      	cmp	r3, r2
34013600:	f200 8185 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013604:	4a38      	ldr	r2, [pc, #224]	@ (340136e8 <RCCEx_GetSPICLKFreq+0x348>)
34013606:	4293      	cmp	r3, r2
34013608:	d078      	beq.n	340136fc <RCCEx_GetSPICLKFreq+0x35c>
3401360a:	4a37      	ldr	r2, [pc, #220]	@ (340136e8 <RCCEx_GetSPICLKFreq+0x348>)
3401360c:	4293      	cmp	r3, r2
3401360e:	f200 817e 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013612:	4a36      	ldr	r2, [pc, #216]	@ (340136ec <RCCEx_GetSPICLKFreq+0x34c>)
34013614:	4293      	cmp	r3, r2
34013616:	d071      	beq.n	340136fc <RCCEx_GetSPICLKFreq+0x35c>
34013618:	4a34      	ldr	r2, [pc, #208]	@ (340136ec <RCCEx_GetSPICLKFreq+0x34c>)
3401361a:	4293      	cmp	r3, r2
3401361c:	f200 8177 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
34013620:	4a33      	ldr	r2, [pc, #204]	@ (340136f0 <RCCEx_GetSPICLKFreq+0x350>)
34013622:	4293      	cmp	r3, r2
34013624:	d00a      	beq.n	3401363c <RCCEx_GetSPICLKFreq+0x29c>
34013626:	4a32      	ldr	r2, [pc, #200]	@ (340136f0 <RCCEx_GetSPICLKFreq+0x350>)
34013628:	4293      	cmp	r3, r2
3401362a:	f200 8170 	bhi.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
3401362e:	4a31      	ldr	r2, [pc, #196]	@ (340136f4 <RCCEx_GetSPICLKFreq+0x354>)
34013630:	4293      	cmp	r3, r2
34013632:	d063      	beq.n	340136fc <RCCEx_GetSPICLKFreq+0x35c>
34013634:	4a30      	ldr	r2, [pc, #192]	@ (340136f8 <RCCEx_GetSPICLKFreq+0x358>)
34013636:	4293      	cmp	r3, r2
34013638:	f040 8169 	bne.w	3401390e <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401363c:	f7f4 fae0 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013640:	4603      	mov	r3, r0
34013642:	4618      	mov	r0, r3
34013644:	f7fd fbd4 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013648:	4603      	mov	r3, r0
3401364a:	4618      	mov	r0, r3
3401364c:	f7fd fbe1 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34013650:	60f8      	str	r0, [r7, #12]
      break;
34013652:	e169      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
34013654:	07061820 	.word	0x07061820
34013658:	07061420 	.word	0x07061420
3401365c:	07061020 	.word	0x07061020
34013660:	07060c20 	.word	0x07060c20
34013664:	07060820 	.word	0x07060820
34013668:	07060420 	.word	0x07060420
3401366c:	07051820 	.word	0x07051820
34013670:	07051420 	.word	0x07051420
34013674:	07051020 	.word	0x07051020
34013678:	07050c20 	.word	0x07050c20
3401367c:	07050820 	.word	0x07050820
34013680:	07050420 	.word	0x07050420
34013684:	07041820 	.word	0x07041820
34013688:	07041420 	.word	0x07041420
3401368c:	07041020 	.word	0x07041020
34013690:	07040c20 	.word	0x07040c20
34013694:	07040820 	.word	0x07040820
34013698:	07040420 	.word	0x07040420
3401369c:	07031820 	.word	0x07031820
340136a0:	07031420 	.word	0x07031420
340136a4:	07031020 	.word	0x07031020
340136a8:	07030c20 	.word	0x07030c20
340136ac:	07030820 	.word	0x07030820
340136b0:	07030420 	.word	0x07030420
340136b4:	07021820 	.word	0x07021820
340136b8:	07021420 	.word	0x07021420
340136bc:	07021020 	.word	0x07021020
340136c0:	07020c20 	.word	0x07020c20
340136c4:	07020820 	.word	0x07020820
340136c8:	07020420 	.word	0x07020420
340136cc:	07011820 	.word	0x07011820
340136d0:	07011420 	.word	0x07011420
340136d4:	07011020 	.word	0x07011020
340136d8:	07010c20 	.word	0x07010c20
340136dc:	07010820 	.word	0x07010820
340136e0:	07010420 	.word	0x07010420
340136e4:	07001820 	.word	0x07001820
340136e8:	07001420 	.word	0x07001420
340136ec:	07001020 	.word	0x07001020
340136f0:	07000c20 	.word	0x07000c20
340136f4:	07000420 	.word	0x07000420
340136f8:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340136fc:	f7f4 fa80 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013700:	4603      	mov	r3, r0
34013702:	4618      	mov	r0, r3
34013704:	f7fd fb74 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013708:	4603      	mov	r3, r0
3401370a:	4618      	mov	r0, r3
3401370c:	f7fd fb91 	bl	34010e32 <RCCEx_GetPCLK2Freq>
34013710:	60f8      	str	r0, [r7, #12]
      break;
34013712:	e109      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013714:	f7f4 fa74 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013718:	4603      	mov	r3, r0
3401371a:	4618      	mov	r0, r3
3401371c:	f7fd fb68 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013720:	4603      	mov	r3, r0
34013722:	4618      	mov	r0, r3
34013724:	f7fd fb96 	bl	34010e54 <RCCEx_GetPCLK4Freq>
34013728:	60f8      	str	r0, [r7, #12]
      break;
3401372a:	e0fd      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401372c:	2007      	movs	r0, #7
3401372e:	f7fd fe4b 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34013732:	60f8      	str	r0, [r7, #12]
      break;
34013734:	e0f8      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34013736:	f7f5 fe45 	bl	340093c4 <LL_RCC_IC8_IsEnabled>
3401373a:	4603      	mov	r3, r0
3401373c:	2b00      	cmp	r3, #0
3401373e:	f000 80e8 	beq.w	34013912 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34013742:	f7f5 fe61 	bl	34009408 <LL_RCC_IC8_GetDivider>
34013746:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34013748:	f7f5 fe50 	bl	340093ec <LL_RCC_IC8_GetSource>
3401374c:	4603      	mov	r3, r0
3401374e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013752:	d029      	beq.n	340137a8 <RCCEx_GetSPICLKFreq+0x408>
34013754:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013758:	d82f      	bhi.n	340137ba <RCCEx_GetSPICLKFreq+0x41a>
3401375a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401375e:	d01a      	beq.n	34013796 <RCCEx_GetSPICLKFreq+0x3f6>
34013760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013764:	d829      	bhi.n	340137ba <RCCEx_GetSPICLKFreq+0x41a>
34013766:	2b00      	cmp	r3, #0
34013768:	d003      	beq.n	34013772 <RCCEx_GetSPICLKFreq+0x3d2>
3401376a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401376e:	d009      	beq.n	34013784 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013770:	e023      	b.n	340137ba <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013772:	f7fd fa25 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34013776:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013778:	68fa      	ldr	r2, [r7, #12]
3401377a:	68bb      	ldr	r3, [r7, #8]
3401377c:	fbb2 f3f3 	udiv	r3, r2, r3
34013780:	60fb      	str	r3, [r7, #12]
            break;
34013782:	e01b      	b.n	340137bc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013784:	f7fd fa62 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013788:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401378a:	68fa      	ldr	r2, [r7, #12]
3401378c:	68bb      	ldr	r3, [r7, #8]
3401378e:	fbb2 f3f3 	udiv	r3, r2, r3
34013792:	60fb      	str	r3, [r7, #12]
            break;
34013794:	e012      	b.n	340137bc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013796:	f7fd fa9f 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
3401379a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401379c:	68fa      	ldr	r2, [r7, #12]
3401379e:	68bb      	ldr	r3, [r7, #8]
340137a0:	fbb2 f3f3 	udiv	r3, r2, r3
340137a4:	60fb      	str	r3, [r7, #12]
            break;
340137a6:	e009      	b.n	340137bc <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340137a8:	f7fd fadc 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340137ac:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340137ae:	68fa      	ldr	r2, [r7, #12]
340137b0:	68bb      	ldr	r3, [r7, #8]
340137b2:	fbb2 f3f3 	udiv	r3, r2, r3
340137b6:	60fb      	str	r3, [r7, #12]
            break;
340137b8:	e000      	b.n	340137bc <RCCEx_GetSPICLKFreq+0x41c>
            break;
340137ba:	bf00      	nop
        }
      }
      break;
340137bc:	e0a9      	b.n	34013912 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340137be:	f7f5 fe41 	bl	34009444 <LL_RCC_IC9_IsEnabled>
340137c2:	4603      	mov	r3, r0
340137c4:	2b00      	cmp	r3, #0
340137c6:	f000 80a6 	beq.w	34013916 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340137ca:	f7f5 fe5d 	bl	34009488 <LL_RCC_IC9_GetDivider>
340137ce:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340137d0:	f7f5 fe4c 	bl	3400946c <LL_RCC_IC9_GetSource>
340137d4:	4603      	mov	r3, r0
340137d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137da:	d029      	beq.n	34013830 <RCCEx_GetSPICLKFreq+0x490>
340137dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340137e0:	d82f      	bhi.n	34013842 <RCCEx_GetSPICLKFreq+0x4a2>
340137e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137e6:	d01a      	beq.n	3401381e <RCCEx_GetSPICLKFreq+0x47e>
340137e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340137ec:	d829      	bhi.n	34013842 <RCCEx_GetSPICLKFreq+0x4a2>
340137ee:	2b00      	cmp	r3, #0
340137f0:	d003      	beq.n	340137fa <RCCEx_GetSPICLKFreq+0x45a>
340137f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340137f6:	d009      	beq.n	3401380c <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340137f8:	e023      	b.n	34013842 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340137fa:	f7fd f9e1 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340137fe:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013800:	68fa      	ldr	r2, [r7, #12]
34013802:	68bb      	ldr	r3, [r7, #8]
34013804:	fbb2 f3f3 	udiv	r3, r2, r3
34013808:	60fb      	str	r3, [r7, #12]
            break;
3401380a:	e01b      	b.n	34013844 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401380c:	f7fd fa1e 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013810:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013812:	68fa      	ldr	r2, [r7, #12]
34013814:	68bb      	ldr	r3, [r7, #8]
34013816:	fbb2 f3f3 	udiv	r3, r2, r3
3401381a:	60fb      	str	r3, [r7, #12]
            break;
3401381c:	e012      	b.n	34013844 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401381e:	f7fd fa5b 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34013822:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013824:	68fa      	ldr	r2, [r7, #12]
34013826:	68bb      	ldr	r3, [r7, #8]
34013828:	fbb2 f3f3 	udiv	r3, r2, r3
3401382c:	60fb      	str	r3, [r7, #12]
            break;
3401382e:	e009      	b.n	34013844 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013830:	f7fd fa98 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34013834:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013836:	68fa      	ldr	r2, [r7, #12]
34013838:	68bb      	ldr	r3, [r7, #8]
3401383a:	fbb2 f3f3 	udiv	r3, r2, r3
3401383e:	60fb      	str	r3, [r7, #12]
            break;
34013840:	e000      	b.n	34013844 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
34013842:	bf00      	nop
        }
      }
      break;
34013844:	e067      	b.n	34013916 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013846:	f7f5 fefd 	bl	34009644 <LL_RCC_IC14_IsEnabled>
3401384a:	4603      	mov	r3, r0
3401384c:	2b00      	cmp	r3, #0
3401384e:	d064      	beq.n	3401391a <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013850:	f7f5 ff1a 	bl	34009688 <LL_RCC_IC14_GetDivider>
34013854:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013856:	f7f5 ff09 	bl	3400966c <LL_RCC_IC14_GetSource>
3401385a:	4603      	mov	r3, r0
3401385c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013860:	d029      	beq.n	340138b6 <RCCEx_GetSPICLKFreq+0x516>
34013862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013866:	d82f      	bhi.n	340138c8 <RCCEx_GetSPICLKFreq+0x528>
34013868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401386c:	d01a      	beq.n	340138a4 <RCCEx_GetSPICLKFreq+0x504>
3401386e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013872:	d829      	bhi.n	340138c8 <RCCEx_GetSPICLKFreq+0x528>
34013874:	2b00      	cmp	r3, #0
34013876:	d003      	beq.n	34013880 <RCCEx_GetSPICLKFreq+0x4e0>
34013878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401387c:	d009      	beq.n	34013892 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401387e:	e023      	b.n	340138c8 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013880:	f7fd f99e 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34013884:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013886:	68fa      	ldr	r2, [r7, #12]
34013888:	68bb      	ldr	r3, [r7, #8]
3401388a:	fbb2 f3f3 	udiv	r3, r2, r3
3401388e:	60fb      	str	r3, [r7, #12]
            break;
34013890:	e01b      	b.n	340138ca <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013892:	f7fd f9db 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013896:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013898:	68fa      	ldr	r2, [r7, #12]
3401389a:	68bb      	ldr	r3, [r7, #8]
3401389c:	fbb2 f3f3 	udiv	r3, r2, r3
340138a0:	60fb      	str	r3, [r7, #12]
            break;
340138a2:	e012      	b.n	340138ca <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340138a4:	f7fd fa18 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340138a8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340138aa:	68fa      	ldr	r2, [r7, #12]
340138ac:	68bb      	ldr	r3, [r7, #8]
340138ae:	fbb2 f3f3 	udiv	r3, r2, r3
340138b2:	60fb      	str	r3, [r7, #12]
            break;
340138b4:	e009      	b.n	340138ca <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340138b6:	f7fd fa55 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340138ba:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340138bc:	68fa      	ldr	r2, [r7, #12]
340138be:	68bb      	ldr	r3, [r7, #8]
340138c0:	fbb2 f3f3 	udiv	r3, r2, r3
340138c4:	60fb      	str	r3, [r7, #12]
            break;
340138c6:	e000      	b.n	340138ca <RCCEx_GetSPICLKFreq+0x52a>
            break;
340138c8:	bf00      	nop
        }
      }
      break;
340138ca:	e026      	b.n	3401391a <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340138cc:	f7f4 fd96 	bl	340083fc <LL_RCC_HSI_IsReady>
340138d0:	4603      	mov	r3, r0
340138d2:	2b00      	cmp	r3, #0
340138d4:	d023      	beq.n	3401391e <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340138d6:	f7f4 fda3 	bl	34008420 <LL_RCC_HSI_GetDivider>
340138da:	4603      	mov	r3, r0
340138dc:	09db      	lsrs	r3, r3, #7
340138de:	4a15      	ldr	r2, [pc, #84]	@ (34013934 <RCCEx_GetSPICLKFreq+0x594>)
340138e0:	fa22 f303 	lsr.w	r3, r2, r3
340138e4:	60fb      	str	r3, [r7, #12]
      }
      break;
340138e6:	e01a      	b.n	3401391e <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340138e8:	f7f4 fda8 	bl	3400843c <LL_RCC_MSI_IsReady>
340138ec:	4603      	mov	r3, r0
340138ee:	2b00      	cmp	r3, #0
340138f0:	d017      	beq.n	34013922 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
340138f2:	4b11      	ldr	r3, [pc, #68]	@ (34013938 <RCCEx_GetSPICLKFreq+0x598>)
340138f4:	60fb      	str	r3, [r7, #12]
      }
      break;
340138f6:	e014      	b.n	34013922 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
340138f8:	4b10      	ldr	r3, [pc, #64]	@ (3401393c <RCCEx_GetSPICLKFreq+0x59c>)
340138fa:	60fb      	str	r3, [r7, #12]
      break;
340138fc:	e014      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340138fe:	f7f4 fd6b 	bl	340083d8 <LL_RCC_HSE_IsReady>
34013902:	4603      	mov	r3, r0
34013904:	2b00      	cmp	r3, #0
34013906:	d00e      	beq.n	34013926 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
34013908:	4b0d      	ldr	r3, [pc, #52]	@ (34013940 <RCCEx_GetSPICLKFreq+0x5a0>)
3401390a:	60fb      	str	r3, [r7, #12]
      }
      break;
3401390c:	e00b      	b.n	34013926 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3401390e:	bf00      	nop
34013910:	e00a      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013912:	bf00      	nop
34013914:	e008      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013916:	bf00      	nop
34013918:	e006      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401391a:	bf00      	nop
3401391c:	e004      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401391e:	bf00      	nop
34013920:	e002      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013922:	bf00      	nop
34013924:	e000      	b.n	34013928 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013926:	bf00      	nop
  }

  return spi_frequency;
34013928:	68fb      	ldr	r3, [r7, #12]
}
3401392a:	4618      	mov	r0, r3
3401392c:	3710      	adds	r7, #16
3401392e:	46bd      	mov	sp, r7
34013930:	bd80      	pop	{r7, pc}
34013932:	bf00      	nop
34013934:	03d09000 	.word	0x03d09000
34013938:	003d0900 	.word	0x003d0900
3401393c:	00bb8000 	.word	0x00bb8000
34013940:	02dc6c00 	.word	0x02dc6c00

34013944 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
34013944:	b580      	push	{r7, lr}
34013946:	b084      	sub	sp, #16
34013948:	af00      	add	r7, sp, #0
3401394a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3401394c:	2300      	movs	r3, #0
3401394e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34013950:	6878      	ldr	r0, [r7, #4]
34013952:	f7f5 f947 	bl	34008be4 <LL_RCC_GetUARTClockSource>
34013956:	4603      	mov	r3, r0
34013958:	4aa2      	ldr	r2, [pc, #648]	@ (34013be4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3401395a:	4293      	cmp	r3, r2
3401395c:	f000 81e8 	beq.w	34013d30 <RCCEx_GetUARTCLKFreq+0x3ec>
34013960:	4aa0      	ldr	r2, [pc, #640]	@ (34013be4 <RCCEx_GetUARTCLKFreq+0x2a0>)
34013962:	4293      	cmp	r3, r2
34013964:	f200 8203 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013968:	4a9f      	ldr	r2, [pc, #636]	@ (34013be8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3401396a:	4293      	cmp	r3, r2
3401396c:	f000 81e0 	beq.w	34013d30 <RCCEx_GetUARTCLKFreq+0x3ec>
34013970:	4a9d      	ldr	r2, [pc, #628]	@ (34013be8 <RCCEx_GetUARTCLKFreq+0x2a4>)
34013972:	4293      	cmp	r3, r2
34013974:	f200 81fb 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013978:	4a9c      	ldr	r2, [pc, #624]	@ (34013bec <RCCEx_GetUARTCLKFreq+0x2a8>)
3401397a:	4293      	cmp	r3, r2
3401397c:	f000 81d8 	beq.w	34013d30 <RCCEx_GetUARTCLKFreq+0x3ec>
34013980:	4a9a      	ldr	r2, [pc, #616]	@ (34013bec <RCCEx_GetUARTCLKFreq+0x2a8>)
34013982:	4293      	cmp	r3, r2
34013984:	f200 81f3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013988:	4a99      	ldr	r2, [pc, #612]	@ (34013bf0 <RCCEx_GetUARTCLKFreq+0x2ac>)
3401398a:	4293      	cmp	r3, r2
3401398c:	f000 81d0 	beq.w	34013d30 <RCCEx_GetUARTCLKFreq+0x3ec>
34013990:	4a97      	ldr	r2, [pc, #604]	@ (34013bf0 <RCCEx_GetUARTCLKFreq+0x2ac>)
34013992:	4293      	cmp	r3, r2
34013994:	f200 81eb 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013998:	4a96      	ldr	r2, [pc, #600]	@ (34013bf4 <RCCEx_GetUARTCLKFreq+0x2b0>)
3401399a:	4293      	cmp	r3, r2
3401399c:	f000 81c8 	beq.w	34013d30 <RCCEx_GetUARTCLKFreq+0x3ec>
340139a0:	4a94      	ldr	r2, [pc, #592]	@ (34013bf4 <RCCEx_GetUARTCLKFreq+0x2b0>)
340139a2:	4293      	cmp	r3, r2
340139a4:	f200 81e3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139a8:	4a93      	ldr	r2, [pc, #588]	@ (34013bf8 <RCCEx_GetUARTCLKFreq+0x2b4>)
340139aa:	4293      	cmp	r3, r2
340139ac:	f000 81ce 	beq.w	34013d4c <RCCEx_GetUARTCLKFreq+0x408>
340139b0:	4a91      	ldr	r2, [pc, #580]	@ (34013bf8 <RCCEx_GetUARTCLKFreq+0x2b4>)
340139b2:	4293      	cmp	r3, r2
340139b4:	f200 81db 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139b8:	4a90      	ldr	r2, [pc, #576]	@ (34013bfc <RCCEx_GetUARTCLKFreq+0x2b8>)
340139ba:	4293      	cmp	r3, r2
340139bc:	f000 81c6 	beq.w	34013d4c <RCCEx_GetUARTCLKFreq+0x408>
340139c0:	4a8e      	ldr	r2, [pc, #568]	@ (34013bfc <RCCEx_GetUARTCLKFreq+0x2b8>)
340139c2:	4293      	cmp	r3, r2
340139c4:	f200 81d3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139c8:	4a8d      	ldr	r2, [pc, #564]	@ (34013c00 <RCCEx_GetUARTCLKFreq+0x2bc>)
340139ca:	4293      	cmp	r3, r2
340139cc:	f000 81be 	beq.w	34013d4c <RCCEx_GetUARTCLKFreq+0x408>
340139d0:	4a8b      	ldr	r2, [pc, #556]	@ (34013c00 <RCCEx_GetUARTCLKFreq+0x2bc>)
340139d2:	4293      	cmp	r3, r2
340139d4:	f200 81cb 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139d8:	4a8a      	ldr	r2, [pc, #552]	@ (34013c04 <RCCEx_GetUARTCLKFreq+0x2c0>)
340139da:	4293      	cmp	r3, r2
340139dc:	f000 81b6 	beq.w	34013d4c <RCCEx_GetUARTCLKFreq+0x408>
340139e0:	4a88      	ldr	r2, [pc, #544]	@ (34013c04 <RCCEx_GetUARTCLKFreq+0x2c0>)
340139e2:	4293      	cmp	r3, r2
340139e4:	f200 81c3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139e8:	4a87      	ldr	r2, [pc, #540]	@ (34013c08 <RCCEx_GetUARTCLKFreq+0x2c4>)
340139ea:	4293      	cmp	r3, r2
340139ec:	f000 81ae 	beq.w	34013d4c <RCCEx_GetUARTCLKFreq+0x408>
340139f0:	4a85      	ldr	r2, [pc, #532]	@ (34013c08 <RCCEx_GetUARTCLKFreq+0x2c4>)
340139f2:	4293      	cmp	r3, r2
340139f4:	f200 81bb 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
340139f8:	4a84      	ldr	r2, [pc, #528]	@ (34013c0c <RCCEx_GetUARTCLKFreq+0x2c8>)
340139fa:	4293      	cmp	r3, r2
340139fc:	f000 81ae 	beq.w	34013d5c <RCCEx_GetUARTCLKFreq+0x418>
34013a00:	4a82      	ldr	r2, [pc, #520]	@ (34013c0c <RCCEx_GetUARTCLKFreq+0x2c8>)
34013a02:	4293      	cmp	r3, r2
34013a04:	f200 81b3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a08:	4a81      	ldr	r2, [pc, #516]	@ (34013c10 <RCCEx_GetUARTCLKFreq+0x2cc>)
34013a0a:	4293      	cmp	r3, r2
34013a0c:	f000 81a6 	beq.w	34013d5c <RCCEx_GetUARTCLKFreq+0x418>
34013a10:	4a7f      	ldr	r2, [pc, #508]	@ (34013c10 <RCCEx_GetUARTCLKFreq+0x2cc>)
34013a12:	4293      	cmp	r3, r2
34013a14:	f200 81ab 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a18:	4a7e      	ldr	r2, [pc, #504]	@ (34013c14 <RCCEx_GetUARTCLKFreq+0x2d0>)
34013a1a:	4293      	cmp	r3, r2
34013a1c:	f000 819e 	beq.w	34013d5c <RCCEx_GetUARTCLKFreq+0x418>
34013a20:	4a7c      	ldr	r2, [pc, #496]	@ (34013c14 <RCCEx_GetUARTCLKFreq+0x2d0>)
34013a22:	4293      	cmp	r3, r2
34013a24:	f200 81a3 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a28:	4a7b      	ldr	r2, [pc, #492]	@ (34013c18 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013a2a:	4293      	cmp	r3, r2
34013a2c:	f000 8196 	beq.w	34013d5c <RCCEx_GetUARTCLKFreq+0x418>
34013a30:	4a79      	ldr	r2, [pc, #484]	@ (34013c18 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013a32:	4293      	cmp	r3, r2
34013a34:	f200 819b 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a38:	4a78      	ldr	r2, [pc, #480]	@ (34013c1c <RCCEx_GetUARTCLKFreq+0x2d8>)
34013a3a:	4293      	cmp	r3, r2
34013a3c:	f000 818e 	beq.w	34013d5c <RCCEx_GetUARTCLKFreq+0x418>
34013a40:	4a76      	ldr	r2, [pc, #472]	@ (34013c1c <RCCEx_GetUARTCLKFreq+0x2d8>)
34013a42:	4293      	cmp	r3, r2
34013a44:	f200 8193 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a48:	4a75      	ldr	r2, [pc, #468]	@ (34013c20 <RCCEx_GetUARTCLKFreq+0x2dc>)
34013a4a:	4293      	cmp	r3, r2
34013a4c:	f000 812d 	beq.w	34013caa <RCCEx_GetUARTCLKFreq+0x366>
34013a50:	4a73      	ldr	r2, [pc, #460]	@ (34013c20 <RCCEx_GetUARTCLKFreq+0x2dc>)
34013a52:	4293      	cmp	r3, r2
34013a54:	f200 818b 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a58:	4a72      	ldr	r2, [pc, #456]	@ (34013c24 <RCCEx_GetUARTCLKFreq+0x2e0>)
34013a5a:	4293      	cmp	r3, r2
34013a5c:	f000 8125 	beq.w	34013caa <RCCEx_GetUARTCLKFreq+0x366>
34013a60:	4a70      	ldr	r2, [pc, #448]	@ (34013c24 <RCCEx_GetUARTCLKFreq+0x2e0>)
34013a62:	4293      	cmp	r3, r2
34013a64:	f200 8183 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a68:	4a6f      	ldr	r2, [pc, #444]	@ (34013c28 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013a6a:	4293      	cmp	r3, r2
34013a6c:	f000 811d 	beq.w	34013caa <RCCEx_GetUARTCLKFreq+0x366>
34013a70:	4a6d      	ldr	r2, [pc, #436]	@ (34013c28 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013a72:	4293      	cmp	r3, r2
34013a74:	f200 817b 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a78:	4a6c      	ldr	r2, [pc, #432]	@ (34013c2c <RCCEx_GetUARTCLKFreq+0x2e8>)
34013a7a:	4293      	cmp	r3, r2
34013a7c:	f000 8115 	beq.w	34013caa <RCCEx_GetUARTCLKFreq+0x366>
34013a80:	4a6a      	ldr	r2, [pc, #424]	@ (34013c2c <RCCEx_GetUARTCLKFreq+0x2e8>)
34013a82:	4293      	cmp	r3, r2
34013a84:	f200 8173 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a88:	4a69      	ldr	r2, [pc, #420]	@ (34013c30 <RCCEx_GetUARTCLKFreq+0x2ec>)
34013a8a:	4293      	cmp	r3, r2
34013a8c:	f000 810d 	beq.w	34013caa <RCCEx_GetUARTCLKFreq+0x366>
34013a90:	4a67      	ldr	r2, [pc, #412]	@ (34013c30 <RCCEx_GetUARTCLKFreq+0x2ec>)
34013a92:	4293      	cmp	r3, r2
34013a94:	f200 816b 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013a98:	4a66      	ldr	r2, [pc, #408]	@ (34013c34 <RCCEx_GetUARTCLKFreq+0x2f0>)
34013a9a:	4293      	cmp	r3, r2
34013a9c:	d07b      	beq.n	34013b96 <RCCEx_GetUARTCLKFreq+0x252>
34013a9e:	4a65      	ldr	r2, [pc, #404]	@ (34013c34 <RCCEx_GetUARTCLKFreq+0x2f0>)
34013aa0:	4293      	cmp	r3, r2
34013aa2:	f200 8164 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013aa6:	4a64      	ldr	r2, [pc, #400]	@ (34013c38 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013aa8:	4293      	cmp	r3, r2
34013aaa:	d074      	beq.n	34013b96 <RCCEx_GetUARTCLKFreq+0x252>
34013aac:	4a62      	ldr	r2, [pc, #392]	@ (34013c38 <RCCEx_GetUARTCLKFreq+0x2f4>)
34013aae:	4293      	cmp	r3, r2
34013ab0:	f200 815d 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013ab4:	4a61      	ldr	r2, [pc, #388]	@ (34013c3c <RCCEx_GetUARTCLKFreq+0x2f8>)
34013ab6:	4293      	cmp	r3, r2
34013ab8:	d06d      	beq.n	34013b96 <RCCEx_GetUARTCLKFreq+0x252>
34013aba:	4a60      	ldr	r2, [pc, #384]	@ (34013c3c <RCCEx_GetUARTCLKFreq+0x2f8>)
34013abc:	4293      	cmp	r3, r2
34013abe:	f200 8156 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013ac2:	4a5f      	ldr	r2, [pc, #380]	@ (34013c40 <RCCEx_GetUARTCLKFreq+0x2fc>)
34013ac4:	4293      	cmp	r3, r2
34013ac6:	d066      	beq.n	34013b96 <RCCEx_GetUARTCLKFreq+0x252>
34013ac8:	4a5d      	ldr	r2, [pc, #372]	@ (34013c40 <RCCEx_GetUARTCLKFreq+0x2fc>)
34013aca:	4293      	cmp	r3, r2
34013acc:	f200 814f 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013ad0:	4a5c      	ldr	r2, [pc, #368]	@ (34013c44 <RCCEx_GetUARTCLKFreq+0x300>)
34013ad2:	4293      	cmp	r3, r2
34013ad4:	d05f      	beq.n	34013b96 <RCCEx_GetUARTCLKFreq+0x252>
34013ad6:	4a5b      	ldr	r2, [pc, #364]	@ (34013c44 <RCCEx_GetUARTCLKFreq+0x300>)
34013ad8:	4293      	cmp	r3, r2
34013ada:	f200 8148 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013ade:	4a5a      	ldr	r2, [pc, #360]	@ (34013c48 <RCCEx_GetUARTCLKFreq+0x304>)
34013ae0:	4293      	cmp	r3, r2
34013ae2:	d053      	beq.n	34013b8c <RCCEx_GetUARTCLKFreq+0x248>
34013ae4:	4a58      	ldr	r2, [pc, #352]	@ (34013c48 <RCCEx_GetUARTCLKFreq+0x304>)
34013ae6:	4293      	cmp	r3, r2
34013ae8:	f200 8141 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013aec:	4a57      	ldr	r2, [pc, #348]	@ (34013c4c <RCCEx_GetUARTCLKFreq+0x308>)
34013aee:	4293      	cmp	r3, r2
34013af0:	d04c      	beq.n	34013b8c <RCCEx_GetUARTCLKFreq+0x248>
34013af2:	4a56      	ldr	r2, [pc, #344]	@ (34013c4c <RCCEx_GetUARTCLKFreq+0x308>)
34013af4:	4293      	cmp	r3, r2
34013af6:	f200 813a 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013afa:	4a55      	ldr	r2, [pc, #340]	@ (34013c50 <RCCEx_GetUARTCLKFreq+0x30c>)
34013afc:	4293      	cmp	r3, r2
34013afe:	d045      	beq.n	34013b8c <RCCEx_GetUARTCLKFreq+0x248>
34013b00:	4a53      	ldr	r2, [pc, #332]	@ (34013c50 <RCCEx_GetUARTCLKFreq+0x30c>)
34013b02:	4293      	cmp	r3, r2
34013b04:	f200 8133 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b08:	4a52      	ldr	r2, [pc, #328]	@ (34013c54 <RCCEx_GetUARTCLKFreq+0x310>)
34013b0a:	4293      	cmp	r3, r2
34013b0c:	d03e      	beq.n	34013b8c <RCCEx_GetUARTCLKFreq+0x248>
34013b0e:	4a51      	ldr	r2, [pc, #324]	@ (34013c54 <RCCEx_GetUARTCLKFreq+0x310>)
34013b10:	4293      	cmp	r3, r2
34013b12:	f200 812c 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b16:	4a50      	ldr	r2, [pc, #320]	@ (34013c58 <RCCEx_GetUARTCLKFreq+0x314>)
34013b18:	4293      	cmp	r3, r2
34013b1a:	d037      	beq.n	34013b8c <RCCEx_GetUARTCLKFreq+0x248>
34013b1c:	4a4e      	ldr	r2, [pc, #312]	@ (34013c58 <RCCEx_GetUARTCLKFreq+0x314>)
34013b1e:	4293      	cmp	r3, r2
34013b20:	f200 8125 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b24:	4a4d      	ldr	r2, [pc, #308]	@ (34013c5c <RCCEx_GetUARTCLKFreq+0x318>)
34013b26:	4293      	cmp	r3, r2
34013b28:	d018      	beq.n	34013b5c <RCCEx_GetUARTCLKFreq+0x218>
34013b2a:	4a4c      	ldr	r2, [pc, #304]	@ (34013c5c <RCCEx_GetUARTCLKFreq+0x318>)
34013b2c:	4293      	cmp	r3, r2
34013b2e:	f200 811e 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b32:	4a4b      	ldr	r2, [pc, #300]	@ (34013c60 <RCCEx_GetUARTCLKFreq+0x31c>)
34013b34:	4293      	cmp	r3, r2
34013b36:	d011      	beq.n	34013b5c <RCCEx_GetUARTCLKFreq+0x218>
34013b38:	4a49      	ldr	r2, [pc, #292]	@ (34013c60 <RCCEx_GetUARTCLKFreq+0x31c>)
34013b3a:	4293      	cmp	r3, r2
34013b3c:	f200 8117 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b40:	4a48      	ldr	r2, [pc, #288]	@ (34013c64 <RCCEx_GetUARTCLKFreq+0x320>)
34013b42:	4293      	cmp	r3, r2
34013b44:	d00a      	beq.n	34013b5c <RCCEx_GetUARTCLKFreq+0x218>
34013b46:	4a47      	ldr	r2, [pc, #284]	@ (34013c64 <RCCEx_GetUARTCLKFreq+0x320>)
34013b48:	4293      	cmp	r3, r2
34013b4a:	f200 8110 	bhi.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
34013b4e:	4a46      	ldr	r2, [pc, #280]	@ (34013c68 <RCCEx_GetUARTCLKFreq+0x324>)
34013b50:	4293      	cmp	r3, r2
34013b52:	d00f      	beq.n	34013b74 <RCCEx_GetUARTCLKFreq+0x230>
34013b54:	4a45      	ldr	r2, [pc, #276]	@ (34013c6c <RCCEx_GetUARTCLKFreq+0x328>)
34013b56:	4293      	cmp	r3, r2
34013b58:	f040 8109 	bne.w	34013d6e <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013b5c:	f7f4 f850 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013b60:	4603      	mov	r3, r0
34013b62:	4618      	mov	r0, r3
34013b64:	f7fd f944 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013b68:	4603      	mov	r3, r0
34013b6a:	4618      	mov	r0, r3
34013b6c:	f7fd f951 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34013b70:	60f8      	str	r0, [r7, #12]
      break;
34013b72:	e107      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013b74:	f7f4 f844 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013b78:	4603      	mov	r3, r0
34013b7a:	4618      	mov	r0, r3
34013b7c:	f7fd f938 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013b80:	4603      	mov	r3, r0
34013b82:	4618      	mov	r0, r3
34013b84:	f7fd f955 	bl	34010e32 <RCCEx_GetPCLK2Freq>
34013b88:	60f8      	str	r0, [r7, #12]
      break;
34013b8a:	e0fb      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013b8c:	2007      	movs	r0, #7
34013b8e:	f7fd fc1b 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34013b92:	60f8      	str	r0, [r7, #12]
      break;
34013b94:	e0f6      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
34013b96:	f7f5 fc55 	bl	34009444 <LL_RCC_IC9_IsEnabled>
34013b9a:	4603      	mov	r3, r0
34013b9c:	2b00      	cmp	r3, #0
34013b9e:	f000 80e8 	beq.w	34013d72 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
34013ba2:	f7f5 fc71 	bl	34009488 <LL_RCC_IC9_GetDivider>
34013ba6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013ba8:	f7f5 fc60 	bl	3400946c <LL_RCC_IC9_GetSource>
34013bac:	4603      	mov	r3, r0
34013bae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bb2:	d06f      	beq.n	34013c94 <RCCEx_GetUARTCLKFreq+0x350>
34013bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bb8:	d875      	bhi.n	34013ca6 <RCCEx_GetUARTCLKFreq+0x362>
34013bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bbe:	d060      	beq.n	34013c82 <RCCEx_GetUARTCLKFreq+0x33e>
34013bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bc4:	d86f      	bhi.n	34013ca6 <RCCEx_GetUARTCLKFreq+0x362>
34013bc6:	2b00      	cmp	r3, #0
34013bc8:	d003      	beq.n	34013bd2 <RCCEx_GetUARTCLKFreq+0x28e>
34013bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013bce:	d04f      	beq.n	34013c70 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013bd0:	e069      	b.n	34013ca6 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013bd2:	f7fc fff5 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34013bd6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013bd8:	68fa      	ldr	r2, [r7, #12]
34013bda:	68bb      	ldr	r3, [r7, #8]
34013bdc:	fbb2 f3f3 	udiv	r3, r2, r3
34013be0:	60fb      	str	r3, [r7, #12]
            break;
34013be2:	e061      	b.n	34013ca8 <RCCEx_GetUARTCLKFreq+0x364>
34013be4:	07061c30 	.word	0x07061c30
34013be8:	07061830 	.word	0x07061830
34013bec:	07061030 	.word	0x07061030
34013bf0:	07060c30 	.word	0x07060c30
34013bf4:	07060034 	.word	0x07060034
34013bf8:	07051c30 	.word	0x07051c30
34013bfc:	07051830 	.word	0x07051830
34013c00:	07051030 	.word	0x07051030
34013c04:	07050c30 	.word	0x07050c30
34013c08:	07050034 	.word	0x07050034
34013c0c:	07041c30 	.word	0x07041c30
34013c10:	07041830 	.word	0x07041830
34013c14:	07041030 	.word	0x07041030
34013c18:	07040c30 	.word	0x07040c30
34013c1c:	07040034 	.word	0x07040034
34013c20:	07031c30 	.word	0x07031c30
34013c24:	07031830 	.word	0x07031830
34013c28:	07031030 	.word	0x07031030
34013c2c:	07030c30 	.word	0x07030c30
34013c30:	07030034 	.word	0x07030034
34013c34:	07021c30 	.word	0x07021c30
34013c38:	07021830 	.word	0x07021830
34013c3c:	07021030 	.word	0x07021030
34013c40:	07020c30 	.word	0x07020c30
34013c44:	07020034 	.word	0x07020034
34013c48:	07011c30 	.word	0x07011c30
34013c4c:	07011830 	.word	0x07011830
34013c50:	07011030 	.word	0x07011030
34013c54:	07010c30 	.word	0x07010c30
34013c58:	07010034 	.word	0x07010034
34013c5c:	07001c30 	.word	0x07001c30
34013c60:	07001830 	.word	0x07001830
34013c64:	07001030 	.word	0x07001030
34013c68:	07000034 	.word	0x07000034
34013c6c:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013c70:	f7fc ffec 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013c74:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013c76:	68fa      	ldr	r2, [r7, #12]
34013c78:	68bb      	ldr	r3, [r7, #8]
34013c7a:	fbb2 f3f3 	udiv	r3, r2, r3
34013c7e:	60fb      	str	r3, [r7, #12]
            break;
34013c80:	e012      	b.n	34013ca8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013c82:	f7fd f829 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34013c86:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013c88:	68fa      	ldr	r2, [r7, #12]
34013c8a:	68bb      	ldr	r3, [r7, #8]
34013c8c:	fbb2 f3f3 	udiv	r3, r2, r3
34013c90:	60fb      	str	r3, [r7, #12]
            break;
34013c92:	e009      	b.n	34013ca8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013c94:	f7fd f866 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34013c98:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013c9a:	68fa      	ldr	r2, [r7, #12]
34013c9c:	68bb      	ldr	r3, [r7, #8]
34013c9e:	fbb2 f3f3 	udiv	r3, r2, r3
34013ca2:	60fb      	str	r3, [r7, #12]
            break;
34013ca4:	e000      	b.n	34013ca8 <RCCEx_GetUARTCLKFreq+0x364>
            break;
34013ca6:	bf00      	nop
        }
      }
      break;
34013ca8:	e063      	b.n	34013d72 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013caa:	f7f5 fccb 	bl	34009644 <LL_RCC_IC14_IsEnabled>
34013cae:	4603      	mov	r3, r0
34013cb0:	2b00      	cmp	r3, #0
34013cb2:	d060      	beq.n	34013d76 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
34013cb4:	f7f5 fce8 	bl	34009688 <LL_RCC_IC14_GetDivider>
34013cb8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013cba:	f7f5 fcd7 	bl	3400966c <LL_RCC_IC14_GetSource>
34013cbe:	4603      	mov	r3, r0
34013cc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013cc4:	d029      	beq.n	34013d1a <RCCEx_GetUARTCLKFreq+0x3d6>
34013cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013cca:	d82f      	bhi.n	34013d2c <RCCEx_GetUARTCLKFreq+0x3e8>
34013ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013cd0:	d01a      	beq.n	34013d08 <RCCEx_GetUARTCLKFreq+0x3c4>
34013cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013cd6:	d829      	bhi.n	34013d2c <RCCEx_GetUARTCLKFreq+0x3e8>
34013cd8:	2b00      	cmp	r3, #0
34013cda:	d003      	beq.n	34013ce4 <RCCEx_GetUARTCLKFreq+0x3a0>
34013cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013ce0:	d009      	beq.n	34013cf6 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013ce2:	e023      	b.n	34013d2c <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013ce4:	f7fc ff6c 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34013ce8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013cea:	68fa      	ldr	r2, [r7, #12]
34013cec:	68bb      	ldr	r3, [r7, #8]
34013cee:	fbb2 f3f3 	udiv	r3, r2, r3
34013cf2:	60fb      	str	r3, [r7, #12]
            break;
34013cf4:	e01b      	b.n	34013d2e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013cf6:	f7fc ffa9 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34013cfa:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013cfc:	68fa      	ldr	r2, [r7, #12]
34013cfe:	68bb      	ldr	r3, [r7, #8]
34013d00:	fbb2 f3f3 	udiv	r3, r2, r3
34013d04:	60fb      	str	r3, [r7, #12]
            break;
34013d06:	e012      	b.n	34013d2e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013d08:	f7fc ffe6 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34013d0c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013d0e:	68fa      	ldr	r2, [r7, #12]
34013d10:	68bb      	ldr	r3, [r7, #8]
34013d12:	fbb2 f3f3 	udiv	r3, r2, r3
34013d16:	60fb      	str	r3, [r7, #12]
            break;
34013d18:	e009      	b.n	34013d2e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013d1a:	f7fd f823 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34013d1e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013d20:	68fa      	ldr	r2, [r7, #12]
34013d22:	68bb      	ldr	r3, [r7, #8]
34013d24:	fbb2 f3f3 	udiv	r3, r2, r3
34013d28:	60fb      	str	r3, [r7, #12]
            break;
34013d2a:	e000      	b.n	34013d2e <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34013d2c:	bf00      	nop
        }
      }
      break;
34013d2e:	e022      	b.n	34013d76 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34013d30:	f7f4 fb64 	bl	340083fc <LL_RCC_HSI_IsReady>
34013d34:	4603      	mov	r3, r0
34013d36:	2b00      	cmp	r3, #0
34013d38:	d01f      	beq.n	34013d7a <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013d3a:	f7f4 fb71 	bl	34008420 <LL_RCC_HSI_GetDivider>
34013d3e:	4603      	mov	r3, r0
34013d40:	09db      	lsrs	r3, r3, #7
34013d42:	4a13      	ldr	r2, [pc, #76]	@ (34013d90 <RCCEx_GetUARTCLKFreq+0x44c>)
34013d44:	fa22 f303 	lsr.w	r3, r2, r3
34013d48:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d4a:	e016      	b.n	34013d7a <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013d4c:	f7f4 fb76 	bl	3400843c <LL_RCC_MSI_IsReady>
34013d50:	4603      	mov	r3, r0
34013d52:	2b00      	cmp	r3, #0
34013d54:	d013      	beq.n	34013d7e <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34013d56:	4b0f      	ldr	r3, [pc, #60]	@ (34013d94 <RCCEx_GetUARTCLKFreq+0x450>)
34013d58:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d5a:	e010      	b.n	34013d7e <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
34013d5c:	f7f4 fb8e 	bl	3400847c <LL_RCC_LSE_IsReady>
34013d60:	4603      	mov	r3, r0
34013d62:	2b00      	cmp	r3, #0
34013d64:	d00d      	beq.n	34013d82 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34013d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013d6a:	60fb      	str	r3, [r7, #12]
      }
      break;
34013d6c:	e009      	b.n	34013d82 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
34013d6e:	bf00      	nop
34013d70:	e008      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d72:	bf00      	nop
34013d74:	e006      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d76:	bf00      	nop
34013d78:	e004      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d7a:	bf00      	nop
34013d7c:	e002      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d7e:	bf00      	nop
34013d80:	e000      	b.n	34013d84 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013d82:	bf00      	nop
  }

  return uart_frequency;
34013d84:	68fb      	ldr	r3, [r7, #12]
}
34013d86:	4618      	mov	r0, r3
34013d88:	3710      	adds	r7, #16
34013d8a:	46bd      	mov	sp, r7
34013d8c:	bd80      	pop	{r7, pc}
34013d8e:	bf00      	nop
34013d90:	03d09000 	.word	0x03d09000
34013d94:	003d0900 	.word	0x003d0900

34013d98 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
34013d98:	b580      	push	{r7, lr}
34013d9a:	b084      	sub	sp, #16
34013d9c:	af00      	add	r7, sp, #0
34013d9e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013da0:	2300      	movs	r3, #0
34013da2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34013da4:	6878      	ldr	r0, [r7, #4]
34013da6:	f7f4 ff11 	bl	34008bcc <LL_RCC_GetUSARTClockSource>
34013daa:	4603      	mov	r3, r0
34013dac:	4aa2      	ldr	r2, [pc, #648]	@ (34014038 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013dae:	4293      	cmp	r3, r2
34013db0:	f000 81e8 	beq.w	34014184 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013db4:	4aa0      	ldr	r2, [pc, #640]	@ (34014038 <RCCEx_GetUSARTCLKFreq+0x2a0>)
34013db6:	4293      	cmp	r3, r2
34013db8:	f200 8203 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013dbc:	4a9f      	ldr	r2, [pc, #636]	@ (3401403c <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013dbe:	4293      	cmp	r3, r2
34013dc0:	f000 81e0 	beq.w	34014184 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dc4:	4a9d      	ldr	r2, [pc, #628]	@ (3401403c <RCCEx_GetUSARTCLKFreq+0x2a4>)
34013dc6:	4293      	cmp	r3, r2
34013dc8:	f200 81fb 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013dcc:	4a9c      	ldr	r2, [pc, #624]	@ (34014040 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013dce:	4293      	cmp	r3, r2
34013dd0:	f000 81d8 	beq.w	34014184 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013dd4:	4a9a      	ldr	r2, [pc, #616]	@ (34014040 <RCCEx_GetUSARTCLKFreq+0x2a8>)
34013dd6:	4293      	cmp	r3, r2
34013dd8:	f200 81f3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013ddc:	4a99      	ldr	r2, [pc, #612]	@ (34014044 <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013dde:	4293      	cmp	r3, r2
34013de0:	f000 81d0 	beq.w	34014184 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013de4:	4a97      	ldr	r2, [pc, #604]	@ (34014044 <RCCEx_GetUSARTCLKFreq+0x2ac>)
34013de6:	4293      	cmp	r3, r2
34013de8:	f200 81eb 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013dec:	4a96      	ldr	r2, [pc, #600]	@ (34014048 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013dee:	4293      	cmp	r3, r2
34013df0:	f000 81c8 	beq.w	34014184 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013df4:	4a94      	ldr	r2, [pc, #592]	@ (34014048 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013df6:	4293      	cmp	r3, r2
34013df8:	f200 81e3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013dfc:	4a93      	ldr	r2, [pc, #588]	@ (3401404c <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013dfe:	4293      	cmp	r3, r2
34013e00:	f000 81ce 	beq.w	340141a0 <RCCEx_GetUSARTCLKFreq+0x408>
34013e04:	4a91      	ldr	r2, [pc, #580]	@ (3401404c <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013e06:	4293      	cmp	r3, r2
34013e08:	f200 81db 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e0c:	4a90      	ldr	r2, [pc, #576]	@ (34014050 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013e0e:	4293      	cmp	r3, r2
34013e10:	f000 81c6 	beq.w	340141a0 <RCCEx_GetUSARTCLKFreq+0x408>
34013e14:	4a8e      	ldr	r2, [pc, #568]	@ (34014050 <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013e16:	4293      	cmp	r3, r2
34013e18:	f200 81d3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e1c:	4a8d      	ldr	r2, [pc, #564]	@ (34014054 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013e1e:	4293      	cmp	r3, r2
34013e20:	f000 81be 	beq.w	340141a0 <RCCEx_GetUSARTCLKFreq+0x408>
34013e24:	4a8b      	ldr	r2, [pc, #556]	@ (34014054 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013e26:	4293      	cmp	r3, r2
34013e28:	f200 81cb 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e2c:	4a8a      	ldr	r2, [pc, #552]	@ (34014058 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013e2e:	4293      	cmp	r3, r2
34013e30:	f000 81b6 	beq.w	340141a0 <RCCEx_GetUSARTCLKFreq+0x408>
34013e34:	4a88      	ldr	r2, [pc, #544]	@ (34014058 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013e36:	4293      	cmp	r3, r2
34013e38:	f200 81c3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e3c:	4a87      	ldr	r2, [pc, #540]	@ (3401405c <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013e3e:	4293      	cmp	r3, r2
34013e40:	f000 81ae 	beq.w	340141a0 <RCCEx_GetUSARTCLKFreq+0x408>
34013e44:	4a85      	ldr	r2, [pc, #532]	@ (3401405c <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013e46:	4293      	cmp	r3, r2
34013e48:	f200 81bb 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e4c:	4a84      	ldr	r2, [pc, #528]	@ (34014060 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013e4e:	4293      	cmp	r3, r2
34013e50:	f000 81ae 	beq.w	340141b0 <RCCEx_GetUSARTCLKFreq+0x418>
34013e54:	4a82      	ldr	r2, [pc, #520]	@ (34014060 <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013e56:	4293      	cmp	r3, r2
34013e58:	f200 81b3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e5c:	4a81      	ldr	r2, [pc, #516]	@ (34014064 <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013e5e:	4293      	cmp	r3, r2
34013e60:	f000 81a6 	beq.w	340141b0 <RCCEx_GetUSARTCLKFreq+0x418>
34013e64:	4a7f      	ldr	r2, [pc, #508]	@ (34014064 <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013e66:	4293      	cmp	r3, r2
34013e68:	f200 81ab 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e6c:	4a7e      	ldr	r2, [pc, #504]	@ (34014068 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013e6e:	4293      	cmp	r3, r2
34013e70:	f000 819e 	beq.w	340141b0 <RCCEx_GetUSARTCLKFreq+0x418>
34013e74:	4a7c      	ldr	r2, [pc, #496]	@ (34014068 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013e76:	4293      	cmp	r3, r2
34013e78:	f200 81a3 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e7c:	4a7b      	ldr	r2, [pc, #492]	@ (3401406c <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013e7e:	4293      	cmp	r3, r2
34013e80:	f000 8196 	beq.w	340141b0 <RCCEx_GetUSARTCLKFreq+0x418>
34013e84:	4a79      	ldr	r2, [pc, #484]	@ (3401406c <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013e86:	4293      	cmp	r3, r2
34013e88:	f200 819b 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e8c:	4a78      	ldr	r2, [pc, #480]	@ (34014070 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013e8e:	4293      	cmp	r3, r2
34013e90:	f000 818e 	beq.w	340141b0 <RCCEx_GetUSARTCLKFreq+0x418>
34013e94:	4a76      	ldr	r2, [pc, #472]	@ (34014070 <RCCEx_GetUSARTCLKFreq+0x2d8>)
34013e96:	4293      	cmp	r3, r2
34013e98:	f200 8193 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013e9c:	4a75      	ldr	r2, [pc, #468]	@ (34014074 <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013e9e:	4293      	cmp	r3, r2
34013ea0:	f000 812d 	beq.w	340140fe <RCCEx_GetUSARTCLKFreq+0x366>
34013ea4:	4a73      	ldr	r2, [pc, #460]	@ (34014074 <RCCEx_GetUSARTCLKFreq+0x2dc>)
34013ea6:	4293      	cmp	r3, r2
34013ea8:	f200 818b 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013eac:	4a72      	ldr	r2, [pc, #456]	@ (34014078 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013eae:	4293      	cmp	r3, r2
34013eb0:	f000 8125 	beq.w	340140fe <RCCEx_GetUSARTCLKFreq+0x366>
34013eb4:	4a70      	ldr	r2, [pc, #448]	@ (34014078 <RCCEx_GetUSARTCLKFreq+0x2e0>)
34013eb6:	4293      	cmp	r3, r2
34013eb8:	f200 8183 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013ebc:	4a6f      	ldr	r2, [pc, #444]	@ (3401407c <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013ebe:	4293      	cmp	r3, r2
34013ec0:	f000 811d 	beq.w	340140fe <RCCEx_GetUSARTCLKFreq+0x366>
34013ec4:	4a6d      	ldr	r2, [pc, #436]	@ (3401407c <RCCEx_GetUSARTCLKFreq+0x2e4>)
34013ec6:	4293      	cmp	r3, r2
34013ec8:	f200 817b 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013ecc:	4a6c      	ldr	r2, [pc, #432]	@ (34014080 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013ece:	4293      	cmp	r3, r2
34013ed0:	f000 8115 	beq.w	340140fe <RCCEx_GetUSARTCLKFreq+0x366>
34013ed4:	4a6a      	ldr	r2, [pc, #424]	@ (34014080 <RCCEx_GetUSARTCLKFreq+0x2e8>)
34013ed6:	4293      	cmp	r3, r2
34013ed8:	f200 8173 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013edc:	4a69      	ldr	r2, [pc, #420]	@ (34014084 <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013ede:	4293      	cmp	r3, r2
34013ee0:	f000 810d 	beq.w	340140fe <RCCEx_GetUSARTCLKFreq+0x366>
34013ee4:	4a67      	ldr	r2, [pc, #412]	@ (34014084 <RCCEx_GetUSARTCLKFreq+0x2ec>)
34013ee6:	4293      	cmp	r3, r2
34013ee8:	f200 816b 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013eec:	4a66      	ldr	r2, [pc, #408]	@ (34014088 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013eee:	4293      	cmp	r3, r2
34013ef0:	d07b      	beq.n	34013fea <RCCEx_GetUSARTCLKFreq+0x252>
34013ef2:	4a65      	ldr	r2, [pc, #404]	@ (34014088 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013ef4:	4293      	cmp	r3, r2
34013ef6:	f200 8164 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013efa:	4a64      	ldr	r2, [pc, #400]	@ (3401408c <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013efc:	4293      	cmp	r3, r2
34013efe:	d074      	beq.n	34013fea <RCCEx_GetUSARTCLKFreq+0x252>
34013f00:	4a62      	ldr	r2, [pc, #392]	@ (3401408c <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013f02:	4293      	cmp	r3, r2
34013f04:	f200 815d 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f08:	4a61      	ldr	r2, [pc, #388]	@ (34014090 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013f0a:	4293      	cmp	r3, r2
34013f0c:	d06d      	beq.n	34013fea <RCCEx_GetUSARTCLKFreq+0x252>
34013f0e:	4a60      	ldr	r2, [pc, #384]	@ (34014090 <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013f10:	4293      	cmp	r3, r2
34013f12:	f200 8156 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f16:	4a5f      	ldr	r2, [pc, #380]	@ (34014094 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013f18:	4293      	cmp	r3, r2
34013f1a:	d066      	beq.n	34013fea <RCCEx_GetUSARTCLKFreq+0x252>
34013f1c:	4a5d      	ldr	r2, [pc, #372]	@ (34014094 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013f1e:	4293      	cmp	r3, r2
34013f20:	f200 814f 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f24:	4a5c      	ldr	r2, [pc, #368]	@ (34014098 <RCCEx_GetUSARTCLKFreq+0x300>)
34013f26:	4293      	cmp	r3, r2
34013f28:	d05f      	beq.n	34013fea <RCCEx_GetUSARTCLKFreq+0x252>
34013f2a:	4a5b      	ldr	r2, [pc, #364]	@ (34014098 <RCCEx_GetUSARTCLKFreq+0x300>)
34013f2c:	4293      	cmp	r3, r2
34013f2e:	f200 8148 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f32:	4a5a      	ldr	r2, [pc, #360]	@ (3401409c <RCCEx_GetUSARTCLKFreq+0x304>)
34013f34:	4293      	cmp	r3, r2
34013f36:	d053      	beq.n	34013fe0 <RCCEx_GetUSARTCLKFreq+0x248>
34013f38:	4a58      	ldr	r2, [pc, #352]	@ (3401409c <RCCEx_GetUSARTCLKFreq+0x304>)
34013f3a:	4293      	cmp	r3, r2
34013f3c:	f200 8141 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f40:	4a57      	ldr	r2, [pc, #348]	@ (340140a0 <RCCEx_GetUSARTCLKFreq+0x308>)
34013f42:	4293      	cmp	r3, r2
34013f44:	d04c      	beq.n	34013fe0 <RCCEx_GetUSARTCLKFreq+0x248>
34013f46:	4a56      	ldr	r2, [pc, #344]	@ (340140a0 <RCCEx_GetUSARTCLKFreq+0x308>)
34013f48:	4293      	cmp	r3, r2
34013f4a:	f200 813a 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f4e:	4a55      	ldr	r2, [pc, #340]	@ (340140a4 <RCCEx_GetUSARTCLKFreq+0x30c>)
34013f50:	4293      	cmp	r3, r2
34013f52:	d045      	beq.n	34013fe0 <RCCEx_GetUSARTCLKFreq+0x248>
34013f54:	4a53      	ldr	r2, [pc, #332]	@ (340140a4 <RCCEx_GetUSARTCLKFreq+0x30c>)
34013f56:	4293      	cmp	r3, r2
34013f58:	f200 8133 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f5c:	4a52      	ldr	r2, [pc, #328]	@ (340140a8 <RCCEx_GetUSARTCLKFreq+0x310>)
34013f5e:	4293      	cmp	r3, r2
34013f60:	d03e      	beq.n	34013fe0 <RCCEx_GetUSARTCLKFreq+0x248>
34013f62:	4a51      	ldr	r2, [pc, #324]	@ (340140a8 <RCCEx_GetUSARTCLKFreq+0x310>)
34013f64:	4293      	cmp	r3, r2
34013f66:	f200 812c 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f6a:	4a50      	ldr	r2, [pc, #320]	@ (340140ac <RCCEx_GetUSARTCLKFreq+0x314>)
34013f6c:	4293      	cmp	r3, r2
34013f6e:	d037      	beq.n	34013fe0 <RCCEx_GetUSARTCLKFreq+0x248>
34013f70:	4a4e      	ldr	r2, [pc, #312]	@ (340140ac <RCCEx_GetUSARTCLKFreq+0x314>)
34013f72:	4293      	cmp	r3, r2
34013f74:	f200 8125 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f78:	4a4d      	ldr	r2, [pc, #308]	@ (340140b0 <RCCEx_GetUSARTCLKFreq+0x318>)
34013f7a:	4293      	cmp	r3, r2
34013f7c:	d018      	beq.n	34013fb0 <RCCEx_GetUSARTCLKFreq+0x218>
34013f7e:	4a4c      	ldr	r2, [pc, #304]	@ (340140b0 <RCCEx_GetUSARTCLKFreq+0x318>)
34013f80:	4293      	cmp	r3, r2
34013f82:	f200 811e 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f86:	4a4b      	ldr	r2, [pc, #300]	@ (340140b4 <RCCEx_GetUSARTCLKFreq+0x31c>)
34013f88:	4293      	cmp	r3, r2
34013f8a:	d01d      	beq.n	34013fc8 <RCCEx_GetUSARTCLKFreq+0x230>
34013f8c:	4a49      	ldr	r2, [pc, #292]	@ (340140b4 <RCCEx_GetUSARTCLKFreq+0x31c>)
34013f8e:	4293      	cmp	r3, r2
34013f90:	f200 8117 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013f94:	4a48      	ldr	r2, [pc, #288]	@ (340140b8 <RCCEx_GetUSARTCLKFreq+0x320>)
34013f96:	4293      	cmp	r3, r2
34013f98:	d00a      	beq.n	34013fb0 <RCCEx_GetUSARTCLKFreq+0x218>
34013f9a:	4a47      	ldr	r2, [pc, #284]	@ (340140b8 <RCCEx_GetUSARTCLKFreq+0x320>)
34013f9c:	4293      	cmp	r3, r2
34013f9e:	f200 8110 	bhi.w	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
34013fa2:	4a46      	ldr	r2, [pc, #280]	@ (340140bc <RCCEx_GetUSARTCLKFreq+0x324>)
34013fa4:	4293      	cmp	r3, r2
34013fa6:	d003      	beq.n	34013fb0 <RCCEx_GetUSARTCLKFreq+0x218>
34013fa8:	4a45      	ldr	r2, [pc, #276]	@ (340140c0 <RCCEx_GetUSARTCLKFreq+0x328>)
34013faa:	4293      	cmp	r3, r2
34013fac:	d00c      	beq.n	34013fc8 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013fae:	e108      	b.n	340141c2 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013fb0:	f7f3 fe26 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013fb4:	4603      	mov	r3, r0
34013fb6:	4618      	mov	r0, r3
34013fb8:	f7fc ff1a 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013fbc:	4603      	mov	r3, r0
34013fbe:	4618      	mov	r0, r3
34013fc0:	f7fc ff37 	bl	34010e32 <RCCEx_GetPCLK2Freq>
34013fc4:	60f8      	str	r0, [r7, #12]
      break;
34013fc6:	e107      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013fc8:	f7f3 fe1a 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
34013fcc:	4603      	mov	r3, r0
34013fce:	4618      	mov	r0, r3
34013fd0:	f7fc ff0e 	bl	34010df0 <RCCEx_GetHCLKFreq>
34013fd4:	4603      	mov	r3, r0
34013fd6:	4618      	mov	r0, r3
34013fd8:	f7fc ff1b 	bl	34010e12 <RCCEx_GetPCLK1Freq>
34013fdc:	60f8      	str	r0, [r7, #12]
      break;
34013fde:	e0fb      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013fe0:	2007      	movs	r0, #7
34013fe2:	f7fd f9f1 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
34013fe6:	60f8      	str	r0, [r7, #12]
      break;
34013fe8:	e0f6      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34013fea:	f7f5 fa2b 	bl	34009444 <LL_RCC_IC9_IsEnabled>
34013fee:	4603      	mov	r3, r0
34013ff0:	2b00      	cmp	r3, #0
34013ff2:	f000 80e8 	beq.w	340141c6 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34013ff6:	f7f5 fa47 	bl	34009488 <LL_RCC_IC9_GetDivider>
34013ffa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013ffc:	f7f5 fa36 	bl	3400946c <LL_RCC_IC9_GetSource>
34014000:	4603      	mov	r3, r0
34014002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014006:	d06f      	beq.n	340140e8 <RCCEx_GetUSARTCLKFreq+0x350>
34014008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401400c:	d875      	bhi.n	340140fa <RCCEx_GetUSARTCLKFreq+0x362>
3401400e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014012:	d060      	beq.n	340140d6 <RCCEx_GetUSARTCLKFreq+0x33e>
34014014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014018:	d86f      	bhi.n	340140fa <RCCEx_GetUSARTCLKFreq+0x362>
3401401a:	2b00      	cmp	r3, #0
3401401c:	d003      	beq.n	34014026 <RCCEx_GetUSARTCLKFreq+0x28e>
3401401e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014022:	d04f      	beq.n	340140c4 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34014024:	e069      	b.n	340140fa <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014026:	f7fc fdcb 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401402a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401402c:	68fa      	ldr	r2, [r7, #12]
3401402e:	68bb      	ldr	r3, [r7, #8]
34014030:	fbb2 f3f3 	udiv	r3, r2, r3
34014034:	60fb      	str	r3, [r7, #12]
            break;
34014036:	e061      	b.n	340140fc <RCCEx_GetUSARTCLKFreq+0x364>
34014038:	07061430 	.word	0x07061430
3401403c:	07060830 	.word	0x07060830
34014040:	07060434 	.word	0x07060434
34014044:	07060430 	.word	0x07060430
34014048:	07060030 	.word	0x07060030
3401404c:	07051430 	.word	0x07051430
34014050:	07050830 	.word	0x07050830
34014054:	07050434 	.word	0x07050434
34014058:	07050430 	.word	0x07050430
3401405c:	07050030 	.word	0x07050030
34014060:	07041430 	.word	0x07041430
34014064:	07040830 	.word	0x07040830
34014068:	07040434 	.word	0x07040434
3401406c:	07040430 	.word	0x07040430
34014070:	07040030 	.word	0x07040030
34014074:	07031430 	.word	0x07031430
34014078:	07030830 	.word	0x07030830
3401407c:	07030434 	.word	0x07030434
34014080:	07030430 	.word	0x07030430
34014084:	07030030 	.word	0x07030030
34014088:	07021430 	.word	0x07021430
3401408c:	07020830 	.word	0x07020830
34014090:	07020434 	.word	0x07020434
34014094:	07020430 	.word	0x07020430
34014098:	07020030 	.word	0x07020030
3401409c:	07011430 	.word	0x07011430
340140a0:	07010830 	.word	0x07010830
340140a4:	07010434 	.word	0x07010434
340140a8:	07010430 	.word	0x07010430
340140ac:	07010030 	.word	0x07010030
340140b0:	07001430 	.word	0x07001430
340140b4:	07000830 	.word	0x07000830
340140b8:	07000434 	.word	0x07000434
340140bc:	07000030 	.word	0x07000030
340140c0:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340140c4:	f7fc fdc2 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340140c8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140ca:	68fa      	ldr	r2, [r7, #12]
340140cc:	68bb      	ldr	r3, [r7, #8]
340140ce:	fbb2 f3f3 	udiv	r3, r2, r3
340140d2:	60fb      	str	r3, [r7, #12]
            break;
340140d4:	e012      	b.n	340140fc <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340140d6:	f7fc fdff 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340140da:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140dc:	68fa      	ldr	r2, [r7, #12]
340140de:	68bb      	ldr	r3, [r7, #8]
340140e0:	fbb2 f3f3 	udiv	r3, r2, r3
340140e4:	60fb      	str	r3, [r7, #12]
            break;
340140e6:	e009      	b.n	340140fc <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340140e8:	f7fc fe3c 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340140ec:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340140ee:	68fa      	ldr	r2, [r7, #12]
340140f0:	68bb      	ldr	r3, [r7, #8]
340140f2:	fbb2 f3f3 	udiv	r3, r2, r3
340140f6:	60fb      	str	r3, [r7, #12]
            break;
340140f8:	e000      	b.n	340140fc <RCCEx_GetUSARTCLKFreq+0x364>
            break;
340140fa:	bf00      	nop
      break;
340140fc:	e063      	b.n	340141c6 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340140fe:	f7f5 faa1 	bl	34009644 <LL_RCC_IC14_IsEnabled>
34014102:	4603      	mov	r3, r0
34014104:	2b00      	cmp	r3, #0
34014106:	d060      	beq.n	340141ca <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34014108:	f7f5 fabe 	bl	34009688 <LL_RCC_IC14_GetDivider>
3401410c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3401410e:	f7f5 faad 	bl	3400966c <LL_RCC_IC14_GetSource>
34014112:	4603      	mov	r3, r0
34014114:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014118:	d029      	beq.n	3401416e <RCCEx_GetUSARTCLKFreq+0x3d6>
3401411a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401411e:	d82f      	bhi.n	34014180 <RCCEx_GetUSARTCLKFreq+0x3e8>
34014120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014124:	d01a      	beq.n	3401415c <RCCEx_GetUSARTCLKFreq+0x3c4>
34014126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401412a:	d829      	bhi.n	34014180 <RCCEx_GetUSARTCLKFreq+0x3e8>
3401412c:	2b00      	cmp	r3, #0
3401412e:	d003      	beq.n	34014138 <RCCEx_GetUSARTCLKFreq+0x3a0>
34014130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014134:	d009      	beq.n	3401414a <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34014136:	e023      	b.n	34014180 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014138:	f7fc fd42 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401413c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3401413e:	68fa      	ldr	r2, [r7, #12]
34014140:	68bb      	ldr	r3, [r7, #8]
34014142:	fbb2 f3f3 	udiv	r3, r2, r3
34014146:	60fb      	str	r3, [r7, #12]
            break;
34014148:	e01b      	b.n	34014182 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401414a:	f7fc fd7f 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401414e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014150:	68fa      	ldr	r2, [r7, #12]
34014152:	68bb      	ldr	r3, [r7, #8]
34014154:	fbb2 f3f3 	udiv	r3, r2, r3
34014158:	60fb      	str	r3, [r7, #12]
            break;
3401415a:	e012      	b.n	34014182 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401415c:	f7fc fdbc 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
34014160:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014162:	68fa      	ldr	r2, [r7, #12]
34014164:	68bb      	ldr	r3, [r7, #8]
34014166:	fbb2 f3f3 	udiv	r3, r2, r3
3401416a:	60fb      	str	r3, [r7, #12]
            break;
3401416c:	e009      	b.n	34014182 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401416e:	f7fc fdf9 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34014172:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34014174:	68fa      	ldr	r2, [r7, #12]
34014176:	68bb      	ldr	r3, [r7, #8]
34014178:	fbb2 f3f3 	udiv	r3, r2, r3
3401417c:	60fb      	str	r3, [r7, #12]
            break;
3401417e:	e000      	b.n	34014182 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34014180:	bf00      	nop
      break;
34014182:	e022      	b.n	340141ca <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
34014184:	f7f4 f93a 	bl	340083fc <LL_RCC_HSI_IsReady>
34014188:	4603      	mov	r3, r0
3401418a:	2b00      	cmp	r3, #0
3401418c:	d01f      	beq.n	340141ce <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401418e:	f7f4 f947 	bl	34008420 <LL_RCC_HSI_GetDivider>
34014192:	4603      	mov	r3, r0
34014194:	09db      	lsrs	r3, r3, #7
34014196:	4a13      	ldr	r2, [pc, #76]	@ (340141e4 <RCCEx_GetUSARTCLKFreq+0x44c>)
34014198:	fa22 f303 	lsr.w	r3, r2, r3
3401419c:	60fb      	str	r3, [r7, #12]
      break;
3401419e:	e016      	b.n	340141ce <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
340141a0:	f7f4 f94c 	bl	3400843c <LL_RCC_MSI_IsReady>
340141a4:	4603      	mov	r3, r0
340141a6:	2b00      	cmp	r3, #0
340141a8:	d013      	beq.n	340141d2 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
340141aa:	4b0f      	ldr	r3, [pc, #60]	@ (340141e8 <RCCEx_GetUSARTCLKFreq+0x450>)
340141ac:	60fb      	str	r3, [r7, #12]
      break;
340141ae:	e010      	b.n	340141d2 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
340141b0:	f7f4 f964 	bl	3400847c <LL_RCC_LSE_IsReady>
340141b4:	4603      	mov	r3, r0
340141b6:	2b00      	cmp	r3, #0
340141b8:	d00d      	beq.n	340141d6 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
340141ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340141be:	60fb      	str	r3, [r7, #12]
      break;
340141c0:	e009      	b.n	340141d6 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
340141c2:	bf00      	nop
340141c4:	e008      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141c6:	bf00      	nop
340141c8:	e006      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141ca:	bf00      	nop
340141cc:	e004      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141ce:	bf00      	nop
340141d0:	e002      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141d2:	bf00      	nop
340141d4:	e000      	b.n	340141d8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
340141d6:	bf00      	nop
  }

  return usart_frequency;
340141d8:	68fb      	ldr	r3, [r7, #12]
}
340141da:	4618      	mov	r0, r3
340141dc:	3710      	adds	r7, #16
340141de:	46bd      	mov	sp, r7
340141e0:	bd80      	pop	{r7, pc}
340141e2:	bf00      	nop
340141e4:	03d09000 	.word	0x03d09000
340141e8:	003d0900 	.word	0x003d0900

340141ec <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
340141ec:	b580      	push	{r7, lr}
340141ee:	b084      	sub	sp, #16
340141f0:	af00      	add	r7, sp, #0
340141f2:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340141f4:	2300      	movs	r3, #0
340141f6:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340141f8:	6878      	ldr	r0, [r7, #4]
340141fa:	f7f4 fcff 	bl	34008bfc <LL_RCC_GetUSBClockSource>
340141fe:	4603      	mov	r3, r0
34014200:	4a4b      	ldr	r2, [pc, #300]	@ (34014330 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34014202:	4293      	cmp	r3, r2
34014204:	d035      	beq.n	34014272 <RCCEx_GetOTGPHYCLKFreq+0x86>
34014206:	4a4a      	ldr	r2, [pc, #296]	@ (34014330 <RCCEx_GetOTGPHYCLKFreq+0x144>)
34014208:	4293      	cmp	r3, r2
3401420a:	f200 8085 	bhi.w	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401420e:	4a49      	ldr	r2, [pc, #292]	@ (34014334 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34014210:	4293      	cmp	r3, r2
34014212:	d02e      	beq.n	34014272 <RCCEx_GetOTGPHYCLKFreq+0x86>
34014214:	4a47      	ldr	r2, [pc, #284]	@ (34014334 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34014216:	4293      	cmp	r3, r2
34014218:	d87e      	bhi.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401421a:	4a47      	ldr	r2, [pc, #284]	@ (34014338 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3401421c:	4293      	cmp	r3, r2
3401421e:	d038      	beq.n	34014292 <RCCEx_GetOTGPHYCLKFreq+0xa6>
34014220:	4a45      	ldr	r2, [pc, #276]	@ (34014338 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34014222:	4293      	cmp	r3, r2
34014224:	d878      	bhi.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014226:	4a45      	ldr	r2, [pc, #276]	@ (3401433c <RCCEx_GetOTGPHYCLKFreq+0x150>)
34014228:	4293      	cmp	r3, r2
3401422a:	d032      	beq.n	34014292 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3401422c:	4a43      	ldr	r2, [pc, #268]	@ (3401433c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3401422e:	4293      	cmp	r3, r2
34014230:	d872      	bhi.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34014232:	4a43      	ldr	r2, [pc, #268]	@ (34014340 <RCCEx_GetOTGPHYCLKFreq+0x154>)
34014234:	4293      	cmp	r3, r2
34014236:	d00f      	beq.n	34014258 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34014238:	4a41      	ldr	r2, [pc, #260]	@ (34014340 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3401423a:	4293      	cmp	r3, r2
3401423c:	d86c      	bhi.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401423e:	4a41      	ldr	r2, [pc, #260]	@ (34014344 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34014240:	4293      	cmp	r3, r2
34014242:	d009      	beq.n	34014258 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34014244:	4a3f      	ldr	r2, [pc, #252]	@ (34014344 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34014246:	4293      	cmp	r3, r2
34014248:	d866      	bhi.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3401424a:	4a3f      	ldr	r2, [pc, #252]	@ (34014348 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3401424c:	4293      	cmp	r3, r2
3401424e:	d008      	beq.n	34014262 <RCCEx_GetOTGPHYCLKFreq+0x76>
34014250:	4a3e      	ldr	r2, [pc, #248]	@ (3401434c <RCCEx_GetOTGPHYCLKFreq+0x160>)
34014252:	4293      	cmp	r3, r2
34014254:	d005      	beq.n	34014262 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
34014256:	e05f      	b.n	34014318 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34014258:	2007      	movs	r0, #7
3401425a:	f7fd f8b5 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
3401425e:	60f8      	str	r0, [r7, #12]
      break;
34014260:	e061      	b.n	34014326 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
34014262:	f7f4 f8b9 	bl	340083d8 <LL_RCC_HSE_IsReady>
34014266:	4603      	mov	r3, r0
34014268:	2b00      	cmp	r3, #0
3401426a:	d057      	beq.n	3401431c <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3401426c:	4b38      	ldr	r3, [pc, #224]	@ (34014350 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3401426e:	60fb      	str	r3, [r7, #12]
      break;
34014270:	e054      	b.n	3401431c <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
34014272:	f7f4 f8b1 	bl	340083d8 <LL_RCC_HSE_IsReady>
34014276:	4603      	mov	r3, r0
34014278:	2b00      	cmp	r3, #0
3401427a:	d051      	beq.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3401427c:	f7f4 f89a 	bl	340083b4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34014280:	4603      	mov	r3, r0
34014282:	2b00      	cmp	r3, #0
34014284:	d102      	bne.n	3401428c <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
34014286:	4b33      	ldr	r3, [pc, #204]	@ (34014354 <RCCEx_GetOTGPHYCLKFreq+0x168>)
34014288:	60fb      	str	r3, [r7, #12]
      break;
3401428a:	e049      	b.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3401428c:	4b30      	ldr	r3, [pc, #192]	@ (34014350 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3401428e:	60fb      	str	r3, [r7, #12]
      break;
34014290:	e046      	b.n	34014320 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34014292:	f7f5 fa17 	bl	340096c4 <LL_RCC_IC15_IsEnabled>
34014296:	4603      	mov	r3, r0
34014298:	2b00      	cmp	r3, #0
3401429a:	d043      	beq.n	34014324 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3401429c:	f7f5 fa34 	bl	34009708 <LL_RCC_IC15_GetDivider>
340142a0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
340142a2:	f7f5 fa23 	bl	340096ec <LL_RCC_IC15_GetSource>
340142a6:	4603      	mov	r3, r0
340142a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142ac:	d029      	beq.n	34014302 <RCCEx_GetOTGPHYCLKFreq+0x116>
340142ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340142b2:	d82f      	bhi.n	34014314 <RCCEx_GetOTGPHYCLKFreq+0x128>
340142b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142b8:	d01a      	beq.n	340142f0 <RCCEx_GetOTGPHYCLKFreq+0x104>
340142ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142be:	d829      	bhi.n	34014314 <RCCEx_GetOTGPHYCLKFreq+0x128>
340142c0:	2b00      	cmp	r3, #0
340142c2:	d003      	beq.n	340142cc <RCCEx_GetOTGPHYCLKFreq+0xe0>
340142c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340142c8:	d009      	beq.n	340142de <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
340142ca:	e023      	b.n	34014314 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340142cc:	f7fc fc78 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
340142d0:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142d2:	68fa      	ldr	r2, [r7, #12]
340142d4:	68bb      	ldr	r3, [r7, #8]
340142d6:	fbb2 f3f3 	udiv	r3, r2, r3
340142da:	60fb      	str	r3, [r7, #12]
            break;
340142dc:	e01b      	b.n	34014316 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340142de:	f7fc fcb5 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
340142e2:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142e4:	68fa      	ldr	r2, [r7, #12]
340142e6:	68bb      	ldr	r3, [r7, #8]
340142e8:	fbb2 f3f3 	udiv	r3, r2, r3
340142ec:	60fb      	str	r3, [r7, #12]
            break;
340142ee:	e012      	b.n	34014316 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340142f0:	f7fc fcf2 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340142f4:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
340142f6:	68fa      	ldr	r2, [r7, #12]
340142f8:	68bb      	ldr	r3, [r7, #8]
340142fa:	fbb2 f3f3 	udiv	r3, r2, r3
340142fe:	60fb      	str	r3, [r7, #12]
            break;
34014300:	e009      	b.n	34014316 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014302:	f7fc fd2f 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
34014306:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34014308:	68fa      	ldr	r2, [r7, #12]
3401430a:	68bb      	ldr	r3, [r7, #8]
3401430c:	fbb2 f3f3 	udiv	r3, r2, r3
34014310:	60fb      	str	r3, [r7, #12]
            break;
34014312:	e000      	b.n	34014316 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
34014314:	bf00      	nop
      break;
34014316:	e005      	b.n	34014324 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34014318:	bf00      	nop
3401431a:	e004      	b.n	34014326 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3401431c:	bf00      	nop
3401431e:	e002      	b.n	34014326 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014320:	bf00      	nop
34014322:	e000      	b.n	34014326 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34014324:	bf00      	nop
  }

  return usb_frequency;
34014326:	68fb      	ldr	r3, [r7, #12]
}
34014328:	4618      	mov	r0, r3
3401432a:	3710      	adds	r7, #16
3401432c:	46bd      	mov	sp, r7
3401432e:	bd80      	pop	{r7, pc}
34014330:	03031414 	.word	0x03031414
34014334:	03030c14 	.word	0x03030c14
34014338:	03021414 	.word	0x03021414
3401433c:	03020c14 	.word	0x03020c14
34014340:	03011414 	.word	0x03011414
34014344:	03010c14 	.word	0x03010c14
34014348:	03000c14 	.word	0x03000c14
3401434c:	03001414 	.word	0x03001414
34014350:	016e3600 	.word	0x016e3600
34014354:	02dc6c00 	.word	0x02dc6c00

34014358 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34014358:	b580      	push	{r7, lr}
3401435a:	b084      	sub	sp, #16
3401435c:	af00      	add	r7, sp, #0
3401435e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34014360:	2300      	movs	r3, #0
34014362:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34014364:	6878      	ldr	r0, [r7, #4]
34014366:	f7f4 fc49 	bl	34008bfc <LL_RCC_GetUSBClockSource>
3401436a:	4603      	mov	r3, r0
3401436c:	4a1a      	ldr	r2, [pc, #104]	@ (340143d8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3401436e:	4293      	cmp	r3, r2
34014370:	d00f      	beq.n	34014392 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34014372:	4a19      	ldr	r2, [pc, #100]	@ (340143d8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34014374:	4293      	cmp	r3, r2
34014376:	d826      	bhi.n	340143c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34014378:	4a18      	ldr	r2, [pc, #96]	@ (340143dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3401437a:	4293      	cmp	r3, r2
3401437c:	d009      	beq.n	34014392 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3401437e:	4a17      	ldr	r2, [pc, #92]	@ (340143dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34014380:	4293      	cmp	r3, r2
34014382:	d820      	bhi.n	340143c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34014384:	4a16      	ldr	r2, [pc, #88]	@ (340143e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
34014386:	4293      	cmp	r3, r2
34014388:	d013      	beq.n	340143b2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3401438a:	4a16      	ldr	r2, [pc, #88]	@ (340143e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3401438c:	4293      	cmp	r3, r2
3401438e:	d015      	beq.n	340143bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34014390:	e019      	b.n	340143c6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
34014392:	f7f4 f821 	bl	340083d8 <LL_RCC_HSE_IsReady>
34014396:	4603      	mov	r3, r0
34014398:	2b00      	cmp	r3, #0
3401439a:	d016      	beq.n	340143ca <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3401439c:	f7f4 f80a 	bl	340083b4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
340143a0:	4603      	mov	r3, r0
340143a2:	2b00      	cmp	r3, #0
340143a4:	d102      	bne.n	340143ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
340143a6:	4b10      	ldr	r3, [pc, #64]	@ (340143e8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
340143a8:	60fb      	str	r3, [r7, #12]
      break;
340143aa:	e00e      	b.n	340143ca <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
340143ac:	4b0f      	ldr	r3, [pc, #60]	@ (340143ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
340143ae:	60fb      	str	r3, [r7, #12]
      break;
340143b0:	e00b      	b.n	340143ca <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340143b2:	480f      	ldr	r0, [pc, #60]	@ (340143f0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
340143b4:	f7ff ff1a 	bl	340141ec <RCCEx_GetOTGPHYCLKFreq>
340143b8:	60f8      	str	r0, [r7, #12]
      break;
340143ba:	e007      	b.n	340143cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340143bc:	480d      	ldr	r0, [pc, #52]	@ (340143f4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
340143be:	f7ff ff15 	bl	340141ec <RCCEx_GetOTGPHYCLKFreq>
340143c2:	60f8      	str	r0, [r7, #12]
      break;
340143c4:	e002      	b.n	340143cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340143c6:	bf00      	nop
340143c8:	e000      	b.n	340143cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
340143ca:	bf00      	nop
  }

  return usb_frequency;
340143cc:	68fb      	ldr	r3, [r7, #12]
}
340143ce:	4618      	mov	r0, r3
340143d0:	3710      	adds	r7, #16
340143d2:	46bd      	mov	sp, r7
340143d4:	bd80      	pop	{r7, pc}
340143d6:	bf00      	nop
340143d8:	01011814 	.word	0x01011814
340143dc:	01011014 	.word	0x01011014
340143e0:	01001014 	.word	0x01001014
340143e4:	01001814 	.word	0x01001814
340143e8:	02dc6c00 	.word	0x02dc6c00
340143ec:	016e3600 	.word	0x016e3600
340143f0:	03000c14 	.word	0x03000c14
340143f4:	03001414 	.word	0x03001414

340143f8 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340143f8:	b580      	push	{r7, lr}
340143fa:	b084      	sub	sp, #16
340143fc:	af00      	add	r7, sp, #0
340143fe:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34014400:	2300      	movs	r3, #0
34014402:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34014404:	6878      	ldr	r0, [r7, #4]
34014406:	f7f4 fc05 	bl	34008c14 <LL_RCC_GetXSPIClockSource>
3401440a:	4603      	mov	r3, r0
3401440c:	4a76      	ldr	r2, [pc, #472]	@ (340145e8 <RCCEx_GetXSPICLKFreq+0x1f0>)
3401440e:	4293      	cmp	r3, r2
34014410:	f000 809d 	beq.w	3401454e <RCCEx_GetXSPICLKFreq+0x156>
34014414:	4a74      	ldr	r2, [pc, #464]	@ (340145e8 <RCCEx_GetXSPICLKFreq+0x1f0>)
34014416:	4293      	cmp	r3, r2
34014418:	f200 80dc 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
3401441c:	4a73      	ldr	r2, [pc, #460]	@ (340145ec <RCCEx_GetXSPICLKFreq+0x1f4>)
3401441e:	4293      	cmp	r3, r2
34014420:	f000 8095 	beq.w	3401454e <RCCEx_GetXSPICLKFreq+0x156>
34014424:	4a71      	ldr	r2, [pc, #452]	@ (340145ec <RCCEx_GetXSPICLKFreq+0x1f4>)
34014426:	4293      	cmp	r3, r2
34014428:	f200 80d4 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
3401442c:	4a70      	ldr	r2, [pc, #448]	@ (340145f0 <RCCEx_GetXSPICLKFreq+0x1f8>)
3401442e:	4293      	cmp	r3, r2
34014430:	f000 808d 	beq.w	3401454e <RCCEx_GetXSPICLKFreq+0x156>
34014434:	4a6e      	ldr	r2, [pc, #440]	@ (340145f0 <RCCEx_GetXSPICLKFreq+0x1f8>)
34014436:	4293      	cmp	r3, r2
34014438:	f200 80cc 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
3401443c:	4a6d      	ldr	r2, [pc, #436]	@ (340145f4 <RCCEx_GetXSPICLKFreq+0x1fc>)
3401443e:	4293      	cmp	r3, r2
34014440:	d041      	beq.n	340144c6 <RCCEx_GetXSPICLKFreq+0xce>
34014442:	4a6c      	ldr	r2, [pc, #432]	@ (340145f4 <RCCEx_GetXSPICLKFreq+0x1fc>)
34014444:	4293      	cmp	r3, r2
34014446:	f200 80c5 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
3401444a:	4a6b      	ldr	r2, [pc, #428]	@ (340145f8 <RCCEx_GetXSPICLKFreq+0x200>)
3401444c:	4293      	cmp	r3, r2
3401444e:	d03a      	beq.n	340144c6 <RCCEx_GetXSPICLKFreq+0xce>
34014450:	4a69      	ldr	r2, [pc, #420]	@ (340145f8 <RCCEx_GetXSPICLKFreq+0x200>)
34014452:	4293      	cmp	r3, r2
34014454:	f200 80be 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
34014458:	4a68      	ldr	r2, [pc, #416]	@ (340145fc <RCCEx_GetXSPICLKFreq+0x204>)
3401445a:	4293      	cmp	r3, r2
3401445c:	d033      	beq.n	340144c6 <RCCEx_GetXSPICLKFreq+0xce>
3401445e:	4a67      	ldr	r2, [pc, #412]	@ (340145fc <RCCEx_GetXSPICLKFreq+0x204>)
34014460:	4293      	cmp	r3, r2
34014462:	f200 80b7 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
34014466:	4a66      	ldr	r2, [pc, #408]	@ (34014600 <RCCEx_GetXSPICLKFreq+0x208>)
34014468:	4293      	cmp	r3, r2
3401446a:	d027      	beq.n	340144bc <RCCEx_GetXSPICLKFreq+0xc4>
3401446c:	4a64      	ldr	r2, [pc, #400]	@ (34014600 <RCCEx_GetXSPICLKFreq+0x208>)
3401446e:	4293      	cmp	r3, r2
34014470:	f200 80b0 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
34014474:	4a63      	ldr	r2, [pc, #396]	@ (34014604 <RCCEx_GetXSPICLKFreq+0x20c>)
34014476:	4293      	cmp	r3, r2
34014478:	d020      	beq.n	340144bc <RCCEx_GetXSPICLKFreq+0xc4>
3401447a:	4a62      	ldr	r2, [pc, #392]	@ (34014604 <RCCEx_GetXSPICLKFreq+0x20c>)
3401447c:	4293      	cmp	r3, r2
3401447e:	f200 80a9 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
34014482:	4a61      	ldr	r2, [pc, #388]	@ (34014608 <RCCEx_GetXSPICLKFreq+0x210>)
34014484:	4293      	cmp	r3, r2
34014486:	d019      	beq.n	340144bc <RCCEx_GetXSPICLKFreq+0xc4>
34014488:	4a5f      	ldr	r2, [pc, #380]	@ (34014608 <RCCEx_GetXSPICLKFreq+0x210>)
3401448a:	4293      	cmp	r3, r2
3401448c:	f200 80a2 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
34014490:	4a5e      	ldr	r2, [pc, #376]	@ (3401460c <RCCEx_GetXSPICLKFreq+0x214>)
34014492:	4293      	cmp	r3, r2
34014494:	d00a      	beq.n	340144ac <RCCEx_GetXSPICLKFreq+0xb4>
34014496:	4a5d      	ldr	r2, [pc, #372]	@ (3401460c <RCCEx_GetXSPICLKFreq+0x214>)
34014498:	4293      	cmp	r3, r2
3401449a:	f200 809b 	bhi.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
3401449e:	4a5c      	ldr	r2, [pc, #368]	@ (34014610 <RCCEx_GetXSPICLKFreq+0x218>)
340144a0:	4293      	cmp	r3, r2
340144a2:	d003      	beq.n	340144ac <RCCEx_GetXSPICLKFreq+0xb4>
340144a4:	4a5b      	ldr	r2, [pc, #364]	@ (34014614 <RCCEx_GetXSPICLKFreq+0x21c>)
340144a6:	4293      	cmp	r3, r2
340144a8:	f040 8094 	bne.w	340145d4 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340144ac:	f7f3 fba8 	bl	34007c00 <HAL_RCC_GetSysClockFreq>
340144b0:	4603      	mov	r3, r0
340144b2:	4618      	mov	r0, r3
340144b4:	f7fc fc9c 	bl	34010df0 <RCCEx_GetHCLKFreq>
340144b8:	60f8      	str	r0, [r7, #12]
      break;
340144ba:	e090      	b.n	340145de <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340144bc:	2007      	movs	r0, #7
340144be:	f7fc ff83 	bl	340113c8 <RCCEx_GetCLKPCLKFreq>
340144c2:	60f8      	str	r0, [r7, #12]
      break;
340144c4:	e08b      	b.n	340145de <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
340144c6:	f7f4 fe7d 	bl	340091c4 <LL_RCC_IC3_IsEnabled>
340144ca:	4603      	mov	r3, r0
340144cc:	2b00      	cmp	r3, #0
340144ce:	f000 8083 	beq.w	340145d8 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
340144d2:	f7f4 fe99 	bl	34009208 <LL_RCC_IC3_GetDivider>
340144d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
340144d8:	f7f4 fe88 	bl	340091ec <LL_RCC_IC3_GetSource>
340144dc:	4603      	mov	r3, r0
340144de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144e2:	d029      	beq.n	34014538 <RCCEx_GetXSPICLKFreq+0x140>
340144e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340144e8:	d82f      	bhi.n	3401454a <RCCEx_GetXSPICLKFreq+0x152>
340144ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144ee:	d01a      	beq.n	34014526 <RCCEx_GetXSPICLKFreq+0x12e>
340144f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340144f4:	d829      	bhi.n	3401454a <RCCEx_GetXSPICLKFreq+0x152>
340144f6:	2b00      	cmp	r3, #0
340144f8:	d003      	beq.n	34014502 <RCCEx_GetXSPICLKFreq+0x10a>
340144fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340144fe:	d009      	beq.n	34014514 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34014500:	e023      	b.n	3401454a <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014502:	f7fc fb5d 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
34014506:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34014508:	68fa      	ldr	r2, [r7, #12]
3401450a:	68bb      	ldr	r3, [r7, #8]
3401450c:	fbb2 f3f3 	udiv	r3, r2, r3
34014510:	60fb      	str	r3, [r7, #12]
            break;
34014512:	e01b      	b.n	3401454c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014514:	f7fc fb9a 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
34014518:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401451a:	68fa      	ldr	r2, [r7, #12]
3401451c:	68bb      	ldr	r3, [r7, #8]
3401451e:	fbb2 f3f3 	udiv	r3, r2, r3
34014522:	60fb      	str	r3, [r7, #12]
            break;
34014524:	e012      	b.n	3401454c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014526:	f7fc fbd7 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
3401452a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401452c:	68fa      	ldr	r2, [r7, #12]
3401452e:	68bb      	ldr	r3, [r7, #8]
34014530:	fbb2 f3f3 	udiv	r3, r2, r3
34014534:	60fb      	str	r3, [r7, #12]
            break;
34014536:	e009      	b.n	3401454c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014538:	f7fc fc14 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
3401453c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401453e:	68fa      	ldr	r2, [r7, #12]
34014540:	68bb      	ldr	r3, [r7, #8]
34014542:	fbb2 f3f3 	udiv	r3, r2, r3
34014546:	60fb      	str	r3, [r7, #12]
            break;
34014548:	e000      	b.n	3401454c <RCCEx_GetXSPICLKFreq+0x154>
            break;
3401454a:	bf00      	nop
        }
      }
      break;
3401454c:	e044      	b.n	340145d8 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3401454e:	f7f4 fe79 	bl	34009244 <LL_RCC_IC4_IsEnabled>
34014552:	4603      	mov	r3, r0
34014554:	2b00      	cmp	r3, #0
34014556:	d041      	beq.n	340145dc <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34014558:	f7f4 fe96 	bl	34009288 <LL_RCC_IC4_GetDivider>
3401455c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3401455e:	f7f4 fe85 	bl	3400926c <LL_RCC_IC4_GetSource>
34014562:	4603      	mov	r3, r0
34014564:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014568:	d029      	beq.n	340145be <RCCEx_GetXSPICLKFreq+0x1c6>
3401456a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401456e:	d82f      	bhi.n	340145d0 <RCCEx_GetXSPICLKFreq+0x1d8>
34014570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014574:	d01a      	beq.n	340145ac <RCCEx_GetXSPICLKFreq+0x1b4>
34014576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401457a:	d829      	bhi.n	340145d0 <RCCEx_GetXSPICLKFreq+0x1d8>
3401457c:	2b00      	cmp	r3, #0
3401457e:	d003      	beq.n	34014588 <RCCEx_GetXSPICLKFreq+0x190>
34014580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014584:	d009      	beq.n	3401459a <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34014586:	e023      	b.n	340145d0 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014588:	f7fc fb1a 	bl	34010bc0 <HAL_RCCEx_GetPLL1CLKFreq>
3401458c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3401458e:	68fa      	ldr	r2, [r7, #12]
34014590:	68bb      	ldr	r3, [r7, #8]
34014592:	fbb2 f3f3 	udiv	r3, r2, r3
34014596:	60fb      	str	r3, [r7, #12]
            break;
34014598:	e01b      	b.n	340145d2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401459a:	f7fc fb57 	bl	34010c4c <HAL_RCCEx_GetPLL2CLKFreq>
3401459e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145a0:	68fa      	ldr	r2, [r7, #12]
340145a2:	68bb      	ldr	r3, [r7, #8]
340145a4:	fbb2 f3f3 	udiv	r3, r2, r3
340145a8:	60fb      	str	r3, [r7, #12]
            break;
340145aa:	e012      	b.n	340145d2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340145ac:	f7fc fb94 	bl	34010cd8 <HAL_RCCEx_GetPLL3CLKFreq>
340145b0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145b2:	68fa      	ldr	r2, [r7, #12]
340145b4:	68bb      	ldr	r3, [r7, #8]
340145b6:	fbb2 f3f3 	udiv	r3, r2, r3
340145ba:	60fb      	str	r3, [r7, #12]
            break;
340145bc:	e009      	b.n	340145d2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340145be:	f7fc fbd1 	bl	34010d64 <HAL_RCCEx_GetPLL4CLKFreq>
340145c2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
340145c4:	68fa      	ldr	r2, [r7, #12]
340145c6:	68bb      	ldr	r3, [r7, #8]
340145c8:	fbb2 f3f3 	udiv	r3, r2, r3
340145cc:	60fb      	str	r3, [r7, #12]
            break;
340145ce:	e000      	b.n	340145d2 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
340145d0:	bf00      	nop
        }
      }
      break;
340145d2:	e003      	b.n	340145dc <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
340145d4:	bf00      	nop
340145d6:	e002      	b.n	340145de <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340145d8:	bf00      	nop
340145da:	e000      	b.n	340145de <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
340145dc:	bf00      	nop
  }

  return xspi_frequency;
340145de:	68fb      	ldr	r3, [r7, #12]
}
340145e0:	4618      	mov	r0, r3
340145e2:	3710      	adds	r7, #16
340145e4:	46bd      	mov	sp, r7
340145e6:	bd80      	pop	{r7, pc}
340145e8:	03030814 	.word	0x03030814
340145ec:	03030414 	.word	0x03030414
340145f0:	03030014 	.word	0x03030014
340145f4:	03020814 	.word	0x03020814
340145f8:	03020414 	.word	0x03020414
340145fc:	03020014 	.word	0x03020014
34014600:	03010814 	.word	0x03010814
34014604:	03010414 	.word	0x03010414
34014608:	03010014 	.word	0x03010014
3401460c:	03000814 	.word	0x03000814
34014610:	03000014 	.word	0x03000014
34014614:	03000414 	.word	0x03000414

34014618 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34014618:	b580      	push	{r7, lr}
3401461a:	b088      	sub	sp, #32
3401461c:	af00      	add	r7, sp, #0
3401461e:	6078      	str	r0, [r7, #4]
34014620:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34014622:	683b      	ldr	r3, [r7, #0]
34014624:	2b00      	cmp	r3, #0
34014626:	d104      	bne.n	34014632 <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34014628:	f240 1111 	movw	r1, #273	@ 0x111
3401462c:	484d      	ldr	r0, [pc, #308]	@ (34014764 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
3401462e:	f7ed fb35 	bl	34001c9c <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34014632:	687b      	ldr	r3, [r7, #4]
34014634:	2b00      	cmp	r3, #0
34014636:	d028      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014638:	687b      	ldr	r3, [r7, #4]
3401463a:	2b01      	cmp	r3, #1
3401463c:	d025      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401463e:	687b      	ldr	r3, [r7, #4]
34014640:	2b02      	cmp	r3, #2
34014642:	d022      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014644:	687b      	ldr	r3, [r7, #4]
34014646:	2b03      	cmp	r3, #3
34014648:	d01f      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401464a:	687b      	ldr	r3, [r7, #4]
3401464c:	2b04      	cmp	r3, #4
3401464e:	d01c      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014650:	687b      	ldr	r3, [r7, #4]
34014652:	2b05      	cmp	r3, #5
34014654:	d019      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014656:	687b      	ldr	r3, [r7, #4]
34014658:	2b06      	cmp	r3, #6
3401465a:	d016      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401465c:	687b      	ldr	r3, [r7, #4]
3401465e:	2b07      	cmp	r3, #7
34014660:	d013      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014662:	687b      	ldr	r3, [r7, #4]
34014664:	2b08      	cmp	r3, #8
34014666:	d010      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014668:	687b      	ldr	r3, [r7, #4]
3401466a:	2b09      	cmp	r3, #9
3401466c:	d00d      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401466e:	687b      	ldr	r3, [r7, #4]
34014670:	2b0a      	cmp	r3, #10
34014672:	d00a      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014674:	687b      	ldr	r3, [r7, #4]
34014676:	2b0b      	cmp	r3, #11
34014678:	d007      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
3401467a:	687b      	ldr	r3, [r7, #4]
3401467c:	2b0c      	cmp	r3, #12
3401467e:	d004      	beq.n	3401468a <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34014680:	f44f 7189 	mov.w	r1, #274	@ 0x112
34014684:	4837      	ldr	r0, [pc, #220]	@ (34014764 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34014686:	f7ed fb09 	bl	34001c9c <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401468a:	683b      	ldr	r3, [r7, #0]
3401468c:	681b      	ldr	r3, [r3, #0]
3401468e:	2b01      	cmp	r3, #1
34014690:	d020      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34014692:	683b      	ldr	r3, [r7, #0]
34014694:	681b      	ldr	r3, [r3, #0]
34014696:	2b02      	cmp	r3, #2
34014698:	d01c      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
3401469a:	683b      	ldr	r3, [r7, #0]
3401469c:	681b      	ldr	r3, [r3, #0]
3401469e:	2b04      	cmp	r3, #4
340146a0:	d018      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146a2:	683b      	ldr	r3, [r7, #0]
340146a4:	681b      	ldr	r3, [r3, #0]
340146a6:	2b08      	cmp	r3, #8
340146a8:	d014      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146aa:	683b      	ldr	r3, [r7, #0]
340146ac:	681b      	ldr	r3, [r3, #0]
340146ae:	2b10      	cmp	r3, #16
340146b0:	d010      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146b2:	683b      	ldr	r3, [r7, #0]
340146b4:	681b      	ldr	r3, [r3, #0]
340146b6:	2b20      	cmp	r3, #32
340146b8:	d00c      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146ba:	683b      	ldr	r3, [r7, #0]
340146bc:	681b      	ldr	r3, [r3, #0]
340146be:	2b40      	cmp	r3, #64	@ 0x40
340146c0:	d008      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146c2:	683b      	ldr	r3, [r7, #0]
340146c4:	681b      	ldr	r3, [r3, #0]
340146c6:	2b80      	cmp	r3, #128	@ 0x80
340146c8:	d004      	beq.n	340146d4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
340146ca:	f240 1113 	movw	r1, #275	@ 0x113
340146ce:	4825      	ldr	r0, [pc, #148]	@ (34014764 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340146d0:	f7ed fae4 	bl	34001c9c <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
340146d4:	683b      	ldr	r3, [r7, #0]
340146d6:	681b      	ldr	r3, [r3, #0]
340146d8:	2b80      	cmp	r3, #128	@ 0x80
340146da:	d003      	beq.n	340146e4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
340146dc:	683b      	ldr	r3, [r7, #0]
340146de:	681b      	ldr	r3, [r3, #0]
340146e0:	2bff      	cmp	r3, #255	@ 0xff
340146e2:	d904      	bls.n	340146ee <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
340146e4:	f44f 718a 	mov.w	r1, #276	@ 0x114
340146e8:	481e      	ldr	r0, [pc, #120]	@ (34014764 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340146ea:	f7ed fad7 	bl	34001c9c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
340146ee:	683b      	ldr	r3, [r7, #0]
340146f0:	685b      	ldr	r3, [r3, #4]
340146f2:	2b03      	cmp	r3, #3
340146f4:	d904      	bls.n	34014700 <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
340146f6:	f240 1115 	movw	r1, #277	@ 0x115
340146fa:	481a      	ldr	r0, [pc, #104]	@ (34014764 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
340146fc:	f7ed face 	bl	34001c9c <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
34014700:	683b      	ldr	r3, [r7, #0]
34014702:	681b      	ldr	r3, [r3, #0]
34014704:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34014706:	693b      	ldr	r3, [r7, #16]
34014708:	fa93 f3a3 	rbit	r3, r3
3401470c:	60fb      	str	r3, [r7, #12]
  return result;
3401470e:	68fb      	ldr	r3, [r7, #12]
34014710:	617b      	str	r3, [r7, #20]
  if (value == 0U)
34014712:	697b      	ldr	r3, [r7, #20]
34014714:	2b00      	cmp	r3, #0
34014716:	d101      	bne.n	3401471c <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
    return 32U;
34014718:	2320      	movs	r3, #32
3401471a:	e003      	b.n	34014724 <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  return __builtin_clz(value);
3401471c:	697b      	ldr	r3, [r7, #20]
3401471e:	fab3 f383 	clz	r3, r3
34014722:	b2db      	uxtb	r3, r3
34014724:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34014726:	4a10      	ldr	r2, [pc, #64]	@ (34014768 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014728:	687b      	ldr	r3, [r7, #4]
3401472a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3401472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014732:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34014734:	69bb      	ldr	r3, [r7, #24]
34014736:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3401473a:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401473c:	69fb      	ldr	r3, [r7, #28]
3401473e:	011a      	lsls	r2, r3, #4
34014740:	683b      	ldr	r3, [r7, #0]
34014742:	685b      	ldr	r3, [r3, #4]
34014744:	021b      	lsls	r3, r3, #8
34014746:	4313      	orrs	r3, r2
34014748:	69ba      	ldr	r2, [r7, #24]
3401474a:	4313      	orrs	r3, r2
3401474c:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3401474e:	4906      	ldr	r1, [pc, #24]	@ (34014768 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014750:	687b      	ldr	r3, [r7, #4]
34014752:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34014756:	69ba      	ldr	r2, [r7, #24]
34014758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3401475c:	bf00      	nop
3401475e:	3720      	adds	r7, #32
34014760:	46bd      	mov	sp, r7
34014762:	bd80      	pop	{r7, pc}
34014764:	3401e8ac 	.word	0x3401e8ac
34014768:	54024000 	.word	0x54024000

3401476c <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
3401476c:	b580      	push	{r7, lr}
3401476e:	b084      	sub	sp, #16
34014770:	af00      	add	r7, sp, #0
34014772:	6078      	str	r0, [r7, #4]
34014774:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34014776:	687b      	ldr	r3, [r7, #4]
34014778:	2b00      	cmp	r3, #0
3401477a:	f000 82c6 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401477e:	687b      	ldr	r3, [r7, #4]
34014780:	2b01      	cmp	r3, #1
34014782:	f000 82c2 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014786:	687b      	ldr	r3, [r7, #4]
34014788:	2b02      	cmp	r3, #2
3401478a:	f000 82be 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401478e:	687b      	ldr	r3, [r7, #4]
34014790:	2b03      	cmp	r3, #3
34014792:	f000 82ba 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014796:	687b      	ldr	r3, [r7, #4]
34014798:	2b04      	cmp	r3, #4
3401479a:	f000 82b6 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401479e:	687b      	ldr	r3, [r7, #4]
340147a0:	2b05      	cmp	r3, #5
340147a2:	f000 82b2 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147a6:	687b      	ldr	r3, [r7, #4]
340147a8:	2b06      	cmp	r3, #6
340147aa:	f000 82ae 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ae:	687b      	ldr	r3, [r7, #4]
340147b0:	2b08      	cmp	r3, #8
340147b2:	f000 82aa 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147b6:	687b      	ldr	r3, [r7, #4]
340147b8:	2b09      	cmp	r3, #9
340147ba:	f000 82a6 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147be:	687b      	ldr	r3, [r7, #4]
340147c0:	2b0a      	cmp	r3, #10
340147c2:	f000 82a2 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147c6:	687b      	ldr	r3, [r7, #4]
340147c8:	2b0b      	cmp	r3, #11
340147ca:	f000 829e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ce:	687b      	ldr	r3, [r7, #4]
340147d0:	2b0c      	cmp	r3, #12
340147d2:	f000 829a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147d6:	687b      	ldr	r3, [r7, #4]
340147d8:	2b0d      	cmp	r3, #13
340147da:	f000 8296 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147de:	687b      	ldr	r3, [r7, #4]
340147e0:	2b0e      	cmp	r3, #14
340147e2:	f000 8292 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147e6:	687b      	ldr	r3, [r7, #4]
340147e8:	2b0f      	cmp	r3, #15
340147ea:	f000 828e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147ee:	687b      	ldr	r3, [r7, #4]
340147f0:	2b10      	cmp	r3, #16
340147f2:	f000 828a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147f6:	687b      	ldr	r3, [r7, #4]
340147f8:	2b11      	cmp	r3, #17
340147fa:	f000 8286 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340147fe:	687b      	ldr	r3, [r7, #4]
34014800:	2b12      	cmp	r3, #18
34014802:	f000 8282 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014806:	687b      	ldr	r3, [r7, #4]
34014808:	2b13      	cmp	r3, #19
3401480a:	f000 827e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401480e:	687b      	ldr	r3, [r7, #4]
34014810:	2b14      	cmp	r3, #20
34014812:	f000 827a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014816:	687b      	ldr	r3, [r7, #4]
34014818:	2b15      	cmp	r3, #21
3401481a:	f000 8276 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401481e:	687b      	ldr	r3, [r7, #4]
34014820:	2b16      	cmp	r3, #22
34014822:	f000 8272 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014826:	687b      	ldr	r3, [r7, #4]
34014828:	2b17      	cmp	r3, #23
3401482a:	f000 826e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401482e:	687b      	ldr	r3, [r7, #4]
34014830:	2b18      	cmp	r3, #24
34014832:	f000 826a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014836:	687b      	ldr	r3, [r7, #4]
34014838:	2b19      	cmp	r3, #25
3401483a:	f000 8266 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401483e:	687b      	ldr	r3, [r7, #4]
34014840:	2b1a      	cmp	r3, #26
34014842:	f000 8262 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014846:	687b      	ldr	r3, [r7, #4]
34014848:	2b1b      	cmp	r3, #27
3401484a:	f000 825e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401484e:	687b      	ldr	r3, [r7, #4]
34014850:	2b1c      	cmp	r3, #28
34014852:	f000 825a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014856:	687b      	ldr	r3, [r7, #4]
34014858:	2b1d      	cmp	r3, #29
3401485a:	f000 8256 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401485e:	687b      	ldr	r3, [r7, #4]
34014860:	2b1e      	cmp	r3, #30
34014862:	f000 8252 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014866:	687b      	ldr	r3, [r7, #4]
34014868:	2b1f      	cmp	r3, #31
3401486a:	f000 824e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401486e:	687b      	ldr	r3, [r7, #4]
34014870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014874:	f000 8249 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014878:	687b      	ldr	r3, [r7, #4]
3401487a:	4aa0      	ldr	r2, [pc, #640]	@ (34014afc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
3401487c:	4293      	cmp	r3, r2
3401487e:	f000 8244 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014882:	687b      	ldr	r3, [r7, #4]
34014884:	4a9e      	ldr	r2, [pc, #632]	@ (34014b00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
34014886:	4293      	cmp	r3, r2
34014888:	f000 823f 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401488c:	687b      	ldr	r3, [r7, #4]
3401488e:	4a9d      	ldr	r2, [pc, #628]	@ (34014b04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
34014890:	4293      	cmp	r3, r2
34014892:	f000 823a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014896:	687b      	ldr	r3, [r7, #4]
34014898:	4a9b      	ldr	r2, [pc, #620]	@ (34014b08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
3401489a:	4293      	cmp	r3, r2
3401489c:	f000 8235 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148a0:	687b      	ldr	r3, [r7, #4]
340148a2:	4a9a      	ldr	r2, [pc, #616]	@ (34014b0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
340148a4:	4293      	cmp	r3, r2
340148a6:	f000 8230 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148aa:	687b      	ldr	r3, [r7, #4]
340148ac:	4a98      	ldr	r2, [pc, #608]	@ (34014b10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
340148ae:	4293      	cmp	r3, r2
340148b0:	f000 822b 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148b4:	687b      	ldr	r3, [r7, #4]
340148b6:	4a97      	ldr	r2, [pc, #604]	@ (34014b14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
340148b8:	4293      	cmp	r3, r2
340148ba:	f000 8226 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148be:	687b      	ldr	r3, [r7, #4]
340148c0:	4a95      	ldr	r2, [pc, #596]	@ (34014b18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
340148c2:	4293      	cmp	r3, r2
340148c4:	f000 8221 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148c8:	687b      	ldr	r3, [r7, #4]
340148ca:	4a94      	ldr	r2, [pc, #592]	@ (34014b1c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
340148cc:	4293      	cmp	r3, r2
340148ce:	f000 821c 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148d2:	687b      	ldr	r3, [r7, #4]
340148d4:	4a92      	ldr	r2, [pc, #584]	@ (34014b20 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
340148d6:	4293      	cmp	r3, r2
340148d8:	f000 8217 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148dc:	687b      	ldr	r3, [r7, #4]
340148de:	4a91      	ldr	r2, [pc, #580]	@ (34014b24 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
340148e0:	4293      	cmp	r3, r2
340148e2:	f000 8212 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148e6:	687b      	ldr	r3, [r7, #4]
340148e8:	4a8f      	ldr	r2, [pc, #572]	@ (34014b28 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
340148ea:	4293      	cmp	r3, r2
340148ec:	f000 820d 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148f0:	687b      	ldr	r3, [r7, #4]
340148f2:	4a8e      	ldr	r2, [pc, #568]	@ (34014b2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
340148f4:	4293      	cmp	r3, r2
340148f6:	f000 8208 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340148fa:	687b      	ldr	r3, [r7, #4]
340148fc:	4a8c      	ldr	r2, [pc, #560]	@ (34014b30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
340148fe:	4293      	cmp	r3, r2
34014900:	f000 8203 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014904:	687b      	ldr	r3, [r7, #4]
34014906:	4a8b      	ldr	r2, [pc, #556]	@ (34014b34 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
34014908:	4293      	cmp	r3, r2
3401490a:	f000 81fe 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401490e:	687b      	ldr	r3, [r7, #4]
34014910:	4a89      	ldr	r2, [pc, #548]	@ (34014b38 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
34014912:	4293      	cmp	r3, r2
34014914:	f000 81f9 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014918:	687b      	ldr	r3, [r7, #4]
3401491a:	4a88      	ldr	r2, [pc, #544]	@ (34014b3c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
3401491c:	4293      	cmp	r3, r2
3401491e:	f000 81f4 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014922:	687b      	ldr	r3, [r7, #4]
34014924:	4a86      	ldr	r2, [pc, #536]	@ (34014b40 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
34014926:	4293      	cmp	r3, r2
34014928:	f000 81ef 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401492c:	687b      	ldr	r3, [r7, #4]
3401492e:	4a85      	ldr	r2, [pc, #532]	@ (34014b44 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
34014930:	4293      	cmp	r3, r2
34014932:	f000 81ea 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014936:	687b      	ldr	r3, [r7, #4]
34014938:	4a83      	ldr	r2, [pc, #524]	@ (34014b48 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
3401493a:	4293      	cmp	r3, r2
3401493c:	f000 81e5 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014940:	687b      	ldr	r3, [r7, #4]
34014942:	4a82      	ldr	r2, [pc, #520]	@ (34014b4c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
34014944:	4293      	cmp	r3, r2
34014946:	f000 81e0 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401494a:	687b      	ldr	r3, [r7, #4]
3401494c:	4a80      	ldr	r2, [pc, #512]	@ (34014b50 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
3401494e:	4293      	cmp	r3, r2
34014950:	f000 81db 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014954:	687b      	ldr	r3, [r7, #4]
34014956:	4a7f      	ldr	r2, [pc, #508]	@ (34014b54 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
34014958:	4293      	cmp	r3, r2
3401495a:	f000 81d6 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401495e:	687b      	ldr	r3, [r7, #4]
34014960:	4a7d      	ldr	r2, [pc, #500]	@ (34014b58 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
34014962:	4293      	cmp	r3, r2
34014964:	f000 81d1 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014968:	687b      	ldr	r3, [r7, #4]
3401496a:	4a7c      	ldr	r2, [pc, #496]	@ (34014b5c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
3401496c:	4293      	cmp	r3, r2
3401496e:	f000 81cc 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014972:	687b      	ldr	r3, [r7, #4]
34014974:	4a7a      	ldr	r2, [pc, #488]	@ (34014b60 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
34014976:	4293      	cmp	r3, r2
34014978:	f000 81c7 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401497c:	687b      	ldr	r3, [r7, #4]
3401497e:	4a79      	ldr	r2, [pc, #484]	@ (34014b64 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
34014980:	4293      	cmp	r3, r2
34014982:	f000 81c2 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014986:	687b      	ldr	r3, [r7, #4]
34014988:	4a77      	ldr	r2, [pc, #476]	@ (34014b68 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
3401498a:	4293      	cmp	r3, r2
3401498c:	f000 81bd 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014990:	687b      	ldr	r3, [r7, #4]
34014992:	4a76      	ldr	r2, [pc, #472]	@ (34014b6c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
34014994:	4293      	cmp	r3, r2
34014996:	f000 81b8 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401499a:	687b      	ldr	r3, [r7, #4]
3401499c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340149a0:	f000 81b3 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149a4:	687b      	ldr	r3, [r7, #4]
340149a6:	4a72      	ldr	r2, [pc, #456]	@ (34014b70 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
340149a8:	4293      	cmp	r3, r2
340149aa:	f000 81ae 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149ae:	687b      	ldr	r3, [r7, #4]
340149b0:	4a70      	ldr	r2, [pc, #448]	@ (34014b74 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
340149b2:	4293      	cmp	r3, r2
340149b4:	f000 81a9 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149b8:	687b      	ldr	r3, [r7, #4]
340149ba:	4a6f      	ldr	r2, [pc, #444]	@ (34014b78 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
340149bc:	4293      	cmp	r3, r2
340149be:	f000 81a4 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149c2:	687b      	ldr	r3, [r7, #4]
340149c4:	4a6d      	ldr	r2, [pc, #436]	@ (34014b7c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
340149c6:	4293      	cmp	r3, r2
340149c8:	f000 819f 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149cc:	687b      	ldr	r3, [r7, #4]
340149ce:	4a6c      	ldr	r2, [pc, #432]	@ (34014b80 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
340149d0:	4293      	cmp	r3, r2
340149d2:	f000 819a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149d6:	687b      	ldr	r3, [r7, #4]
340149d8:	4a6a      	ldr	r2, [pc, #424]	@ (34014b84 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
340149da:	4293      	cmp	r3, r2
340149dc:	f000 8195 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149e0:	687b      	ldr	r3, [r7, #4]
340149e2:	4a69      	ldr	r2, [pc, #420]	@ (34014b88 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
340149e4:	4293      	cmp	r3, r2
340149e6:	f000 8190 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149ea:	687b      	ldr	r3, [r7, #4]
340149ec:	4a67      	ldr	r2, [pc, #412]	@ (34014b8c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
340149ee:	4293      	cmp	r3, r2
340149f0:	f000 818b 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149f4:	687b      	ldr	r3, [r7, #4]
340149f6:	4a66      	ldr	r2, [pc, #408]	@ (34014b90 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
340149f8:	4293      	cmp	r3, r2
340149fa:	f000 8186 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340149fe:	687b      	ldr	r3, [r7, #4]
34014a00:	4a64      	ldr	r2, [pc, #400]	@ (34014b94 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
34014a02:	4293      	cmp	r3, r2
34014a04:	f000 8181 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a08:	687b      	ldr	r3, [r7, #4]
34014a0a:	4a63      	ldr	r2, [pc, #396]	@ (34014b98 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
34014a0c:	4293      	cmp	r3, r2
34014a0e:	f000 817c 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a12:	687b      	ldr	r3, [r7, #4]
34014a14:	4a61      	ldr	r2, [pc, #388]	@ (34014b9c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
34014a16:	4293      	cmp	r3, r2
34014a18:	f000 8177 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a1c:	687b      	ldr	r3, [r7, #4]
34014a1e:	4a60      	ldr	r2, [pc, #384]	@ (34014ba0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
34014a20:	4293      	cmp	r3, r2
34014a22:	f000 8172 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a26:	687b      	ldr	r3, [r7, #4]
34014a28:	4a5e      	ldr	r2, [pc, #376]	@ (34014ba4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
34014a2a:	4293      	cmp	r3, r2
34014a2c:	f000 816d 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a30:	687b      	ldr	r3, [r7, #4]
34014a32:	4a5d      	ldr	r2, [pc, #372]	@ (34014ba8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
34014a34:	4293      	cmp	r3, r2
34014a36:	f000 8168 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a3a:	687b      	ldr	r3, [r7, #4]
34014a3c:	4a5b      	ldr	r2, [pc, #364]	@ (34014bac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
34014a3e:	4293      	cmp	r3, r2
34014a40:	f000 8163 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a44:	687b      	ldr	r3, [r7, #4]
34014a46:	4a5a      	ldr	r2, [pc, #360]	@ (34014bb0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
34014a48:	4293      	cmp	r3, r2
34014a4a:	f000 815e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a4e:	687b      	ldr	r3, [r7, #4]
34014a50:	4a58      	ldr	r2, [pc, #352]	@ (34014bb4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
34014a52:	4293      	cmp	r3, r2
34014a54:	f000 8159 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a58:	687b      	ldr	r3, [r7, #4]
34014a5a:	4a57      	ldr	r2, [pc, #348]	@ (34014bb8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
34014a5c:	4293      	cmp	r3, r2
34014a5e:	f000 8154 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a62:	687b      	ldr	r3, [r7, #4]
34014a64:	4a55      	ldr	r2, [pc, #340]	@ (34014bbc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
34014a66:	4293      	cmp	r3, r2
34014a68:	f000 814f 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a6c:	687b      	ldr	r3, [r7, #4]
34014a6e:	4a54      	ldr	r2, [pc, #336]	@ (34014bc0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
34014a70:	4293      	cmp	r3, r2
34014a72:	f000 814a 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a76:	687b      	ldr	r3, [r7, #4]
34014a78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014a7c:	f000 8145 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a80:	687b      	ldr	r3, [r7, #4]
34014a82:	4a50      	ldr	r2, [pc, #320]	@ (34014bc4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
34014a84:	4293      	cmp	r3, r2
34014a86:	f000 8140 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a8a:	687b      	ldr	r3, [r7, #4]
34014a8c:	4a4e      	ldr	r2, [pc, #312]	@ (34014bc8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
34014a8e:	4293      	cmp	r3, r2
34014a90:	f000 813b 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a94:	687b      	ldr	r3, [r7, #4]
34014a96:	4a4d      	ldr	r2, [pc, #308]	@ (34014bcc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
34014a98:	4293      	cmp	r3, r2
34014a9a:	f000 8136 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014a9e:	687b      	ldr	r3, [r7, #4]
34014aa0:	4a4b      	ldr	r2, [pc, #300]	@ (34014bd0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
34014aa2:	4293      	cmp	r3, r2
34014aa4:	f000 8131 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aa8:	687b      	ldr	r3, [r7, #4]
34014aaa:	4a4a      	ldr	r2, [pc, #296]	@ (34014bd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
34014aac:	4293      	cmp	r3, r2
34014aae:	f000 812c 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ab2:	687b      	ldr	r3, [r7, #4]
34014ab4:	4a48      	ldr	r2, [pc, #288]	@ (34014bd8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
34014ab6:	4293      	cmp	r3, r2
34014ab8:	f000 8127 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014abc:	687b      	ldr	r3, [r7, #4]
34014abe:	4a47      	ldr	r2, [pc, #284]	@ (34014bdc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
34014ac0:	4293      	cmp	r3, r2
34014ac2:	f000 8122 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ac6:	687b      	ldr	r3, [r7, #4]
34014ac8:	4a45      	ldr	r2, [pc, #276]	@ (34014be0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
34014aca:	4293      	cmp	r3, r2
34014acc:	f000 811d 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ad0:	687b      	ldr	r3, [r7, #4]
34014ad2:	4a44      	ldr	r2, [pc, #272]	@ (34014be4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
34014ad4:	4293      	cmp	r3, r2
34014ad6:	f000 8118 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ada:	687b      	ldr	r3, [r7, #4]
34014adc:	4a42      	ldr	r2, [pc, #264]	@ (34014be8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
34014ade:	4293      	cmp	r3, r2
34014ae0:	f000 8113 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ae4:	687b      	ldr	r3, [r7, #4]
34014ae6:	4a41      	ldr	r2, [pc, #260]	@ (34014bec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
34014ae8:	4293      	cmp	r3, r2
34014aea:	f000 810e 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014aee:	687b      	ldr	r3, [r7, #4]
34014af0:	4a3f      	ldr	r2, [pc, #252]	@ (34014bf0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
34014af2:	4293      	cmp	r3, r2
34014af4:	f000 8109 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014af8:	e07c      	b.n	34014bf4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
34014afa:	bf00      	nop
34014afc:	10000001 	.word	0x10000001
34014b00:	10000002 	.word	0x10000002
34014b04:	10000003 	.word	0x10000003
34014b08:	10000004 	.word	0x10000004
34014b0c:	10000005 	.word	0x10000005
34014b10:	10000006 	.word	0x10000006
34014b14:	10000007 	.word	0x10000007
34014b18:	10000008 	.word	0x10000008
34014b1c:	10000009 	.word	0x10000009
34014b20:	1000000a 	.word	0x1000000a
34014b24:	1000000b 	.word	0x1000000b
34014b28:	1000000c 	.word	0x1000000c
34014b2c:	1000000d 	.word	0x1000000d
34014b30:	1000000e 	.word	0x1000000e
34014b34:	1000000f 	.word	0x1000000f
34014b38:	10000010 	.word	0x10000010
34014b3c:	10000011 	.word	0x10000011
34014b40:	10000012 	.word	0x10000012
34014b44:	10000013 	.word	0x10000013
34014b48:	10000014 	.word	0x10000014
34014b4c:	10000015 	.word	0x10000015
34014b50:	10000016 	.word	0x10000016
34014b54:	10000017 	.word	0x10000017
34014b58:	10000018 	.word	0x10000018
34014b5c:	10000019 	.word	0x10000019
34014b60:	1000001a 	.word	0x1000001a
34014b64:	1000001c 	.word	0x1000001c
34014b68:	1000001d 	.word	0x1000001d
34014b6c:	1000001e 	.word	0x1000001e
34014b70:	20000001 	.word	0x20000001
34014b74:	20000003 	.word	0x20000003
34014b78:	20000004 	.word	0x20000004
34014b7c:	20000005 	.word	0x20000005
34014b80:	2000000c 	.word	0x2000000c
34014b84:	2000000d 	.word	0x2000000d
34014b88:	2000000e 	.word	0x2000000e
34014b8c:	2000000f 	.word	0x2000000f
34014b90:	20000010 	.word	0x20000010
34014b94:	20000011 	.word	0x20000011
34014b98:	20000012 	.word	0x20000012
34014b9c:	20000013 	.word	0x20000013
34014ba0:	20000014 	.word	0x20000014
34014ba4:	20000016 	.word	0x20000016
34014ba8:	20000017 	.word	0x20000017
34014bac:	20000018 	.word	0x20000018
34014bb0:	20000019 	.word	0x20000019
34014bb4:	2000001a 	.word	0x2000001a
34014bb8:	2000001c 	.word	0x2000001c
34014bbc:	2000001d 	.word	0x2000001d
34014bc0:	2000001e 	.word	0x2000001e
34014bc4:	30000001 	.word	0x30000001
34014bc8:	30000002 	.word	0x30000002
34014bcc:	30000003 	.word	0x30000003
34014bd0:	30000004 	.word	0x30000004
34014bd4:	30000005 	.word	0x30000005
34014bd8:	30000006 	.word	0x30000006
34014bdc:	30000007 	.word	0x30000007
34014be0:	30000008 	.word	0x30000008
34014be4:	3000000a 	.word	0x3000000a
34014be8:	40000002 	.word	0x40000002
34014bec:	40000003 	.word	0x40000003
34014bf0:	40000005 	.word	0x40000005
34014bf4:	687b      	ldr	r3, [r7, #4]
34014bf6:	4a6d      	ldr	r2, [pc, #436]	@ (34014dac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
34014bf8:	4293      	cmp	r3, r2
34014bfa:	f000 8086 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014bfe:	687b      	ldr	r3, [r7, #4]
34014c00:	4a6b      	ldr	r2, [pc, #428]	@ (34014db0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
34014c02:	4293      	cmp	r3, r2
34014c04:	f000 8081 	beq.w	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c08:	687b      	ldr	r3, [r7, #4]
34014c0a:	4a6a      	ldr	r2, [pc, #424]	@ (34014db4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
34014c0c:	4293      	cmp	r3, r2
34014c0e:	d07c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c10:	687b      	ldr	r3, [r7, #4]
34014c12:	4a69      	ldr	r2, [pc, #420]	@ (34014db8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
34014c14:	4293      	cmp	r3, r2
34014c16:	d078      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c18:	687b      	ldr	r3, [r7, #4]
34014c1a:	4a68      	ldr	r2, [pc, #416]	@ (34014dbc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
34014c1c:	4293      	cmp	r3, r2
34014c1e:	d074      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c20:	687b      	ldr	r3, [r7, #4]
34014c22:	4a67      	ldr	r2, [pc, #412]	@ (34014dc0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
34014c24:	4293      	cmp	r3, r2
34014c26:	d070      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c28:	687b      	ldr	r3, [r7, #4]
34014c2a:	4a66      	ldr	r2, [pc, #408]	@ (34014dc4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
34014c2c:	4293      	cmp	r3, r2
34014c2e:	d06c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c30:	687b      	ldr	r3, [r7, #4]
34014c32:	4a65      	ldr	r2, [pc, #404]	@ (34014dc8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
34014c34:	4293      	cmp	r3, r2
34014c36:	d068      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c38:	687b      	ldr	r3, [r7, #4]
34014c3a:	4a64      	ldr	r2, [pc, #400]	@ (34014dcc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
34014c3c:	4293      	cmp	r3, r2
34014c3e:	d064      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c40:	687b      	ldr	r3, [r7, #4]
34014c42:	4a63      	ldr	r2, [pc, #396]	@ (34014dd0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
34014c44:	4293      	cmp	r3, r2
34014c46:	d060      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c48:	687b      	ldr	r3, [r7, #4]
34014c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
34014c4e:	d05c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c50:	687b      	ldr	r3, [r7, #4]
34014c52:	4a60      	ldr	r2, [pc, #384]	@ (34014dd4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
34014c54:	4293      	cmp	r3, r2
34014c56:	d058      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c58:	687b      	ldr	r3, [r7, #4]
34014c5a:	4a5f      	ldr	r2, [pc, #380]	@ (34014dd8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
34014c5c:	4293      	cmp	r3, r2
34014c5e:	d054      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c60:	687b      	ldr	r3, [r7, #4]
34014c62:	4a5e      	ldr	r2, [pc, #376]	@ (34014ddc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
34014c64:	4293      	cmp	r3, r2
34014c66:	d050      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c68:	687b      	ldr	r3, [r7, #4]
34014c6a:	4a5d      	ldr	r2, [pc, #372]	@ (34014de0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
34014c6c:	4293      	cmp	r3, r2
34014c6e:	d04c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c70:	687b      	ldr	r3, [r7, #4]
34014c72:	4a5c      	ldr	r2, [pc, #368]	@ (34014de4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
34014c74:	4293      	cmp	r3, r2
34014c76:	d048      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c78:	687b      	ldr	r3, [r7, #4]
34014c7a:	4a5b      	ldr	r2, [pc, #364]	@ (34014de8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
34014c7c:	4293      	cmp	r3, r2
34014c7e:	d044      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c80:	687b      	ldr	r3, [r7, #4]
34014c82:	4a5a      	ldr	r2, [pc, #360]	@ (34014dec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
34014c84:	4293      	cmp	r3, r2
34014c86:	d040      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c88:	687b      	ldr	r3, [r7, #4]
34014c8a:	4a59      	ldr	r2, [pc, #356]	@ (34014df0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
34014c8c:	4293      	cmp	r3, r2
34014c8e:	d03c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c90:	687b      	ldr	r3, [r7, #4]
34014c92:	4a58      	ldr	r2, [pc, #352]	@ (34014df4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
34014c94:	4293      	cmp	r3, r2
34014c96:	d038      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014c98:	687b      	ldr	r3, [r7, #4]
34014c9a:	4a57      	ldr	r2, [pc, #348]	@ (34014df8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
34014c9c:	4293      	cmp	r3, r2
34014c9e:	d034      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ca0:	687b      	ldr	r3, [r7, #4]
34014ca2:	4a56      	ldr	r2, [pc, #344]	@ (34014dfc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
34014ca4:	4293      	cmp	r3, r2
34014ca6:	d030      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ca8:	687b      	ldr	r3, [r7, #4]
34014caa:	4a55      	ldr	r2, [pc, #340]	@ (34014e00 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
34014cac:	4293      	cmp	r3, r2
34014cae:	d02c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cb0:	687b      	ldr	r3, [r7, #4]
34014cb2:	4a54      	ldr	r2, [pc, #336]	@ (34014e04 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
34014cb4:	4293      	cmp	r3, r2
34014cb6:	d028      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cb8:	687b      	ldr	r3, [r7, #4]
34014cba:	4a53      	ldr	r2, [pc, #332]	@ (34014e08 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
34014cbc:	4293      	cmp	r3, r2
34014cbe:	d024      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cc0:	687b      	ldr	r3, [r7, #4]
34014cc2:	4a52      	ldr	r2, [pc, #328]	@ (34014e0c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
34014cc4:	4293      	cmp	r3, r2
34014cc6:	d020      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cc8:	687b      	ldr	r3, [r7, #4]
34014cca:	4a51      	ldr	r2, [pc, #324]	@ (34014e10 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
34014ccc:	4293      	cmp	r3, r2
34014cce:	d01c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cd0:	687b      	ldr	r3, [r7, #4]
34014cd2:	4a50      	ldr	r2, [pc, #320]	@ (34014e14 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
34014cd4:	4293      	cmp	r3, r2
34014cd6:	d018      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cd8:	687b      	ldr	r3, [r7, #4]
34014cda:	4a4f      	ldr	r2, [pc, #316]	@ (34014e18 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
34014cdc:	4293      	cmp	r3, r2
34014cde:	d014      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ce0:	687b      	ldr	r3, [r7, #4]
34014ce2:	4a4e      	ldr	r2, [pc, #312]	@ (34014e1c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
34014ce4:	4293      	cmp	r3, r2
34014ce6:	d010      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014ce8:	687b      	ldr	r3, [r7, #4]
34014cea:	4a4d      	ldr	r2, [pc, #308]	@ (34014e20 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
34014cec:	4293      	cmp	r3, r2
34014cee:	d00c      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cf0:	687b      	ldr	r3, [r7, #4]
34014cf2:	4a4c      	ldr	r2, [pc, #304]	@ (34014e24 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
34014cf4:	4293      	cmp	r3, r2
34014cf6:	d008      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014cf8:	687b      	ldr	r3, [r7, #4]
34014cfa:	4a4b      	ldr	r2, [pc, #300]	@ (34014e28 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
34014cfc:	4293      	cmp	r3, r2
34014cfe:	d004      	beq.n	34014d0a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014d00:	f240 1173 	movw	r1, #371	@ 0x173
34014d04:	4849      	ldr	r0, [pc, #292]	@ (34014e2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014d06:	f7ec ffc9 	bl	34001c9c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34014d0a:	683b      	ldr	r3, [r7, #0]
34014d0c:	2b03      	cmp	r3, #3
34014d0e:	d904      	bls.n	34014d1a <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
34014d10:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34014d14:	4845      	ldr	r0, [pc, #276]	@ (34014e2c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014d16:	f7ec ffc1 	bl	34001c9c <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014d1a:	4a45      	ldr	r2, [pc, #276]	@ (34014e30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d1c:	687b      	ldr	r3, [r7, #4]
34014d1e:	0f1b      	lsrs	r3, r3, #28
34014d20:	3304      	adds	r3, #4
34014d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014d26:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014d28:	687b      	ldr	r3, [r7, #4]
34014d2a:	f003 031f 	and.w	r3, r3, #31
34014d2e:	2201      	movs	r2, #1
34014d30:	fa02 f303 	lsl.w	r3, r2, r3
34014d34:	43da      	mvns	r2, r3
34014d36:	68fb      	ldr	r3, [r7, #12]
34014d38:	4013      	ands	r3, r2
34014d3a:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014d3c:	683b      	ldr	r3, [r7, #0]
34014d3e:	f003 0201 	and.w	r2, r3, #1
34014d42:	687b      	ldr	r3, [r7, #4]
34014d44:	f003 031f 	and.w	r3, r3, #31
34014d48:	409a      	lsls	r2, r3
34014d4a:	68fb      	ldr	r3, [r7, #12]
34014d4c:	4313      	orrs	r3, r2
34014d4e:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014d50:	4937      	ldr	r1, [pc, #220]	@ (34014e30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d52:	687b      	ldr	r3, [r7, #4]
34014d54:	0f1b      	lsrs	r3, r3, #28
34014d56:	68fa      	ldr	r2, [r7, #12]
34014d58:	3304      	adds	r3, #4
34014d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014d5e:	4a34      	ldr	r2, [pc, #208]	@ (34014e30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d60:	687b      	ldr	r3, [r7, #4]
34014d62:	0f1b      	lsrs	r3, r3, #28
34014d64:	330c      	adds	r3, #12
34014d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014d6a:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014d6c:	687b      	ldr	r3, [r7, #4]
34014d6e:	f003 031f 	and.w	r3, r3, #31
34014d72:	2201      	movs	r2, #1
34014d74:	fa02 f303 	lsl.w	r3, r2, r3
34014d78:	43da      	mvns	r2, r3
34014d7a:	68fb      	ldr	r3, [r7, #12]
34014d7c:	4013      	ands	r3, r2
34014d7e:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014d80:	683b      	ldr	r3, [r7, #0]
34014d82:	085b      	lsrs	r3, r3, #1
34014d84:	f003 0201 	and.w	r2, r3, #1
34014d88:	687b      	ldr	r3, [r7, #4]
34014d8a:	f003 031f 	and.w	r3, r3, #31
34014d8e:	409a      	lsls	r2, r3
34014d90:	68fb      	ldr	r3, [r7, #12]
34014d92:	4313      	orrs	r3, r2
34014d94:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
34014d96:	4926      	ldr	r1, [pc, #152]	@ (34014e30 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014d98:	687b      	ldr	r3, [r7, #4]
34014d9a:	0f1b      	lsrs	r3, r3, #28
34014d9c:	68fa      	ldr	r2, [r7, #12]
34014d9e:	330c      	adds	r3, #12
34014da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014da4:	bf00      	nop
34014da6:	3710      	adds	r7, #16
34014da8:	46bd      	mov	sp, r7
34014daa:	bd80      	pop	{r7, pc}
34014dac:	4000000c 	.word	0x4000000c
34014db0:	4000000d 	.word	0x4000000d
34014db4:	40000011 	.word	0x40000011
34014db8:	40000012 	.word	0x40000012
34014dbc:	40000013 	.word	0x40000013
34014dc0:	40000019 	.word	0x40000019
34014dc4:	4000001b 	.word	0x4000001b
34014dc8:	4000001c 	.word	0x4000001c
34014dcc:	4000001d 	.word	0x4000001d
34014dd0:	4000001f 	.word	0x4000001f
34014dd4:	50000001 	.word	0x50000001
34014dd8:	50000002 	.word	0x50000002
34014ddc:	50000003 	.word	0x50000003
34014de0:	50000004 	.word	0x50000004
34014de4:	50000005 	.word	0x50000005
34014de8:	50000006 	.word	0x50000006
34014dec:	50000008 	.word	0x50000008
34014df0:	50000009 	.word	0x50000009
34014df4:	5000000a 	.word	0x5000000a
34014df8:	5000000b 	.word	0x5000000b
34014dfc:	5000000d 	.word	0x5000000d
34014e00:	5000000e 	.word	0x5000000e
34014e04:	5000000f 	.word	0x5000000f
34014e08:	50000011 	.word	0x50000011
34014e0c:	50000012 	.word	0x50000012
34014e10:	50000013 	.word	0x50000013
34014e14:	50000014 	.word	0x50000014
34014e18:	50000016 	.word	0x50000016
34014e1c:	50000017 	.word	0x50000017
34014e20:	50000018 	.word	0x50000018
34014e24:	5000001b 	.word	0x5000001b
34014e28:	5000001e 	.word	0x5000001e
34014e2c:	3401e8ac 	.word	0x3401e8ac
34014e30:	54024000 	.word	0x54024000

34014e34 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
34014e34:	b580      	push	{r7, lr}
34014e36:	b086      	sub	sp, #24
34014e38:	af00      	add	r7, sp, #0
34014e3a:	60f8      	str	r0, [r7, #12]
34014e3c:	60b9      	str	r1, [r7, #8]
34014e3e:	4613      	mov	r3, r2
34014e40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
34014e42:	68fb      	ldr	r3, [r7, #12]
34014e44:	689b      	ldr	r3, [r3, #8]
34014e46:	2b00      	cmp	r3, #0
34014e48:	d00e      	beq.n	34014e68 <HAL_SPI_Transmit_DMA+0x34>
34014e4a:	68fb      	ldr	r3, [r7, #12]
34014e4c:	689b      	ldr	r3, [r3, #8]
34014e4e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014e52:	d009      	beq.n	34014e68 <HAL_SPI_Transmit_DMA+0x34>
34014e54:	68fb      	ldr	r3, [r7, #12]
34014e56:	689b      	ldr	r3, [r3, #8]
34014e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014e5c:	d004      	beq.n	34014e68 <HAL_SPI_Transmit_DMA+0x34>
34014e5e:	f240 71a5 	movw	r1, #1957	@ 0x7a5
34014e62:	4882      	ldr	r0, [pc, #520]	@ (3401506c <HAL_SPI_Transmit_DMA+0x238>)
34014e64:	f7ec ff1a 	bl	34001c9c <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
34014e68:	68fb      	ldr	r3, [r7, #12]
34014e6a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34014e6e:	b2db      	uxtb	r3, r3
34014e70:	2b01      	cmp	r3, #1
34014e72:	d001      	beq.n	34014e78 <HAL_SPI_Transmit_DMA+0x44>
  {
    return HAL_BUSY;
34014e74:	2302      	movs	r3, #2
34014e76:	e1b7      	b.n	340151e8 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  if ((pData == NULL) || (Size == 0UL))
34014e78:	68bb      	ldr	r3, [r7, #8]
34014e7a:	2b00      	cmp	r3, #0
34014e7c:	d002      	beq.n	34014e84 <HAL_SPI_Transmit_DMA+0x50>
34014e7e:	88fb      	ldrh	r3, [r7, #6]
34014e80:	2b00      	cmp	r3, #0
34014e82:	d101      	bne.n	34014e88 <HAL_SPI_Transmit_DMA+0x54>
  {
    return HAL_ERROR;
34014e84:	2301      	movs	r3, #1
34014e86:	e1af      	b.n	340151e8 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
34014e88:	68fb      	ldr	r3, [r7, #12]
34014e8a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
34014e8e:	2b01      	cmp	r3, #1
34014e90:	d101      	bne.n	34014e96 <HAL_SPI_Transmit_DMA+0x62>
34014e92:	2302      	movs	r3, #2
34014e94:	e1a8      	b.n	340151e8 <HAL_SPI_Transmit_DMA+0x3b4>
34014e96:	68fb      	ldr	r3, [r7, #12]
34014e98:	2201      	movs	r2, #1
34014e9a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
34014e9e:	68fb      	ldr	r3, [r7, #12]
34014ea0:	2203      	movs	r2, #3
34014ea2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
34014ea6:	68fb      	ldr	r3, [r7, #12]
34014ea8:	2200      	movs	r2, #0
34014eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
34014eae:	68fb      	ldr	r3, [r7, #12]
34014eb0:	68ba      	ldr	r2, [r7, #8]
34014eb2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
34014eb4:	68fb      	ldr	r3, [r7, #12]
34014eb6:	88fa      	ldrh	r2, [r7, #6]
34014eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
34014ebc:	68fb      	ldr	r3, [r7, #12]
34014ebe:	88fa      	ldrh	r2, [r7, #6]
34014ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
34014ec4:	68fb      	ldr	r3, [r7, #12]
34014ec6:	2200      	movs	r2, #0
34014ec8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
34014eca:	68fb      	ldr	r3, [r7, #12]
34014ecc:	2200      	movs	r2, #0
34014ece:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
34014ed0:	68fb      	ldr	r3, [r7, #12]
34014ed2:	2200      	movs	r2, #0
34014ed4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
34014ed6:	68fb      	ldr	r3, [r7, #12]
34014ed8:	2200      	movs	r2, #0
34014eda:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
34014ede:	68fb      	ldr	r3, [r7, #12]
34014ee0:	2200      	movs	r2, #0
34014ee2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
34014ee6:	68fb      	ldr	r3, [r7, #12]
34014ee8:	689b      	ldr	r3, [r3, #8]
34014eea:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34014eee:	d108      	bne.n	34014f02 <HAL_SPI_Transmit_DMA+0xce>
  {
    SPI_1LINE_TX(hspi);
34014ef0:	68fb      	ldr	r3, [r7, #12]
34014ef2:	681b      	ldr	r3, [r3, #0]
34014ef4:	681a      	ldr	r2, [r3, #0]
34014ef6:	68fb      	ldr	r3, [r7, #12]
34014ef8:	681b      	ldr	r3, [r3, #0]
34014efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34014efe:	601a      	str	r2, [r3, #0]
34014f00:	e009      	b.n	34014f16 <HAL_SPI_Transmit_DMA+0xe2>
  }
  else
  {
    SPI_2LINES_TX(hspi);
34014f02:	68fb      	ldr	r3, [r7, #12]
34014f04:	681b      	ldr	r3, [r3, #0]
34014f06:	68db      	ldr	r3, [r3, #12]
34014f08:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
34014f0c:	68fb      	ldr	r3, [r7, #12]
34014f0e:	681b      	ldr	r3, [r3, #0]
34014f10:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34014f14:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014f16:	68fb      	ldr	r3, [r7, #12]
34014f18:	68db      	ldr	r3, [r3, #12]
34014f1a:	2b0f      	cmp	r3, #15
34014f1c:	d92d      	bls.n	34014f7a <HAL_SPI_Transmit_DMA+0x146>
34014f1e:	68fb      	ldr	r3, [r7, #12]
34014f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f24:	699b      	ldr	r3, [r3, #24]
34014f26:	2b02      	cmp	r3, #2
34014f28:	d027      	beq.n	34014f7a <HAL_SPI_Transmit_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f2a:	68fb      	ldr	r3, [r7, #12]
34014f2c:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014f2e:	4a50      	ldr	r2, [pc, #320]	@ (34015070 <HAL_SPI_Transmit_DMA+0x23c>)
34014f30:	4293      	cmp	r3, r2
34014f32:	d02c      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f34:	68fb      	ldr	r3, [r7, #12]
34014f36:	681b      	ldr	r3, [r3, #0]
34014f38:	4a4e      	ldr	r2, [pc, #312]	@ (34015074 <HAL_SPI_Transmit_DMA+0x240>)
34014f3a:	4293      	cmp	r3, r2
34014f3c:	d027      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f3e:	68fb      	ldr	r3, [r7, #12]
34014f40:	681b      	ldr	r3, [r3, #0]
34014f42:	4a4d      	ldr	r2, [pc, #308]	@ (34015078 <HAL_SPI_Transmit_DMA+0x244>)
34014f44:	4293      	cmp	r3, r2
34014f46:	d022      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f48:	68fb      	ldr	r3, [r7, #12]
34014f4a:	681b      	ldr	r3, [r3, #0]
34014f4c:	4a4b      	ldr	r2, [pc, #300]	@ (3401507c <HAL_SPI_Transmit_DMA+0x248>)
34014f4e:	4293      	cmp	r3, r2
34014f50:	d01d      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f52:	68fb      	ldr	r3, [r7, #12]
34014f54:	681b      	ldr	r3, [r3, #0]
34014f56:	4a4a      	ldr	r2, [pc, #296]	@ (34015080 <HAL_SPI_Transmit_DMA+0x24c>)
34014f58:	4293      	cmp	r3, r2
34014f5a:	d018      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f5c:	68fb      	ldr	r3, [r7, #12]
34014f5e:	681b      	ldr	r3, [r3, #0]
34014f60:	4a48      	ldr	r2, [pc, #288]	@ (34015084 <HAL_SPI_Transmit_DMA+0x250>)
34014f62:	4293      	cmp	r3, r2
34014f64:	d013      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f66:	68fb      	ldr	r3, [r7, #12]
34014f68:	681b      	ldr	r3, [r3, #0]
34014f6a:	4a47      	ldr	r2, [pc, #284]	@ (34015088 <HAL_SPI_Transmit_DMA+0x254>)
34014f6c:	4293      	cmp	r3, r2
34014f6e:	d00e      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
34014f70:	68fb      	ldr	r3, [r7, #12]
34014f72:	681b      	ldr	r3, [r3, #0]
34014f74:	4a45      	ldr	r2, [pc, #276]	@ (3401508c <HAL_SPI_Transmit_DMA+0x258>)
34014f76:	4293      	cmp	r3, r2
34014f78:	d009      	beq.n	34014f8e <HAL_SPI_Transmit_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014f7a:	68fb      	ldr	r3, [r7, #12]
34014f7c:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014f7e:	2b07      	cmp	r3, #7
34014f80:	d90b      	bls.n	34014f9a <HAL_SPI_Transmit_DMA+0x166>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014f82:	68fb      	ldr	r3, [r7, #12]
34014f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f88:	699b      	ldr	r3, [r3, #24]
34014f8a:	2b00      	cmp	r3, #0
34014f8c:	d105      	bne.n	34014f9a <HAL_SPI_Transmit_DMA+0x166>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
34014f8e:	68fb      	ldr	r3, [r7, #12]
34014f90:	2200      	movs	r2, #0
34014f92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
34014f96:	2301      	movs	r3, #1
34014f98:	e126      	b.n	340151e8 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34014f9a:	68fb      	ldr	r3, [r7, #12]
34014f9c:	68db      	ldr	r3, [r3, #12]
34014f9e:	2b07      	cmp	r3, #7
34014fa0:	d820      	bhi.n	34014fe4 <HAL_SPI_Transmit_DMA+0x1b0>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
34014fa2:	68fb      	ldr	r3, [r7, #12]
34014fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014fa8:	699b      	ldr	r3, [r3, #24]
34014faa:	2b01      	cmp	r3, #1
34014fac:	d109      	bne.n	34014fc2 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014fae:	68fb      	ldr	r3, [r7, #12]
34014fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014fb4:	b29b      	uxth	r3, r3
34014fb6:	3301      	adds	r3, #1
34014fb8:	105b      	asrs	r3, r3, #1
34014fba:	b29a      	uxth	r2, r3
34014fbc:	68fb      	ldr	r3, [r7, #12]
34014fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014fc2:	68fb      	ldr	r3, [r7, #12]
34014fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014fc8:	699b      	ldr	r3, [r3, #24]
34014fca:	2b02      	cmp	r3, #2
34014fcc:	d11e      	bne.n	3401500c <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
34014fce:	68fb      	ldr	r3, [r7, #12]
34014fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014fd4:	b29b      	uxth	r3, r3
34014fd6:	3303      	adds	r3, #3
34014fd8:	109b      	asrs	r3, r3, #2
34014fda:	b29a      	uxth	r2, r3
34014fdc:	68fb      	ldr	r3, [r7, #12]
34014fde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014fe2:	e013      	b.n	3401500c <HAL_SPI_Transmit_DMA+0x1d8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34014fe4:	68fb      	ldr	r3, [r7, #12]
34014fe6:	68db      	ldr	r3, [r3, #12]
34014fe8:	2b0f      	cmp	r3, #15
34014fea:	d80f      	bhi.n	3401500c <HAL_SPI_Transmit_DMA+0x1d8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
34014fec:	68fb      	ldr	r3, [r7, #12]
34014fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014ff2:	699b      	ldr	r3, [r3, #24]
34014ff4:	2b02      	cmp	r3, #2
34014ff6:	d109      	bne.n	3401500c <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014ff8:	68fb      	ldr	r3, [r7, #12]
34014ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014ffe:	b29b      	uxth	r3, r3
34015000:	3301      	adds	r3, #1
34015002:	105b      	asrs	r3, r3, #1
34015004:	b29a      	uxth	r2, r3
34015006:	68fb      	ldr	r3, [r7, #12]
34015008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
3401500c:	68fb      	ldr	r3, [r7, #12]
3401500e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015012:	4a1f      	ldr	r2, [pc, #124]	@ (34015090 <HAL_SPI_Transmit_DMA+0x25c>)
34015014:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
34015016:	68fb      	ldr	r3, [r7, #12]
34015018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401501c:	4a1d      	ldr	r2, [pc, #116]	@ (34015094 <HAL_SPI_Transmit_DMA+0x260>)
3401501e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
34015020:	68fb      	ldr	r3, [r7, #12]
34015022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015026:	4a1c      	ldr	r2, [pc, #112]	@ (34015098 <HAL_SPI_Transmit_DMA+0x264>)
34015028:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
3401502a:	68fb      	ldr	r3, [r7, #12]
3401502c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015030:	2200      	movs	r2, #0
34015032:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34015034:	68fb      	ldr	r3, [r7, #12]
34015036:	681b      	ldr	r3, [r3, #0]
34015038:	689a      	ldr	r2, [r3, #8]
3401503a:	68fb      	ldr	r3, [r7, #12]
3401503c:	681b      	ldr	r3, [r3, #0]
3401503e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34015042:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34015044:	68fb      	ldr	r3, [r7, #12]
34015046:	68db      	ldr	r3, [r3, #12]
34015048:	2b07      	cmp	r3, #7
3401504a:	d804      	bhi.n	34015056 <HAL_SPI_Transmit_DMA+0x222>
  {
    hspi->TxXferCount = Size;
3401504c:	68fb      	ldr	r3, [r7, #12]
3401504e:	88fa      	ldrh	r2, [r7, #6]
34015050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34015054:	e028      	b.n	340150a8 <HAL_SPI_Transmit_DMA+0x274>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34015056:	68fb      	ldr	r3, [r7, #12]
34015058:	68db      	ldr	r3, [r3, #12]
3401505a:	2b0f      	cmp	r3, #15
3401505c:	d81e      	bhi.n	3401509c <HAL_SPI_Transmit_DMA+0x268>
  {
    hspi->TxXferCount = Size * 2U;
3401505e:	88fb      	ldrh	r3, [r7, #6]
34015060:	005b      	lsls	r3, r3, #1
34015062:	b29a      	uxth	r2, r3
34015064:	68fb      	ldr	r3, [r7, #12]
34015066:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
3401506a:	e01d      	b.n	340150a8 <HAL_SPI_Transmit_DMA+0x274>
3401506c:	3401e954 	.word	0x3401e954
34015070:	52003000 	.word	0x52003000
34015074:	42003000 	.word	0x42003000
34015078:	50003800 	.word	0x50003800
3401507c:	40003800 	.word	0x40003800
34015080:	50003c00 	.word	0x50003c00
34015084:	40003c00 	.word	0x40003c00
34015088:	56001400 	.word	0x56001400
3401508c:	46001400 	.word	0x46001400
34015090:	3401562f 	.word	0x3401562f
34015094:	340155e9 	.word	0x340155e9
34015098:	3401564b 	.word	0x3401564b
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
3401509c:	88fb      	ldrh	r3, [r7, #6]
3401509e:	009b      	lsls	r3, r3, #2
340150a0:	b29a      	uxth	r2, r3
340150a2:	68fb      	ldr	r3, [r7, #12]
340150a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340150a8:	68fb      	ldr	r3, [r7, #12]
340150aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340150b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340150b4:	2b00      	cmp	r3, #0
340150b6:	d02d      	beq.n	34015114 <HAL_SPI_Transmit_DMA+0x2e0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
340150b8:	68fb      	ldr	r3, [r7, #12]
340150ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150c0:	2b00      	cmp	r3, #0
340150c2:	d024      	beq.n	3401510e <HAL_SPI_Transmit_DMA+0x2da>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
340150c4:	68fb      	ldr	r3, [r7, #12]
340150c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
340150ca:	b29a      	uxth	r2, r3
340150cc:	68fb      	ldr	r3, [r7, #12]
340150ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150d4:	681b      	ldr	r3, [r3, #0]
340150d6:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
340150d8:	68fb      	ldr	r3, [r7, #12]
340150da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340150dc:	68fb      	ldr	r3, [r7, #12]
340150de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150e4:	681b      	ldr	r3, [r3, #0]
340150e6:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
340150e8:	68fb      	ldr	r3, [r7, #12]
340150ea:	681b      	ldr	r3, [r3, #0]
340150ec:	f103 0220 	add.w	r2, r3, #32
340150f0:	68fb      	ldr	r3, [r7, #12]
340150f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340150f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340150f8:	681b      	ldr	r3, [r3, #0]
340150fa:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
340150fc:	68fb      	ldr	r3, [r7, #12]
340150fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015102:	4618      	mov	r0, r3
34015104:	f7f0 fbb3 	bl	3400586e <HAL_DMAEx_List_Start_IT>
34015108:	4603      	mov	r3, r0
3401510a:	75fb      	strb	r3, [r7, #23]
3401510c:	e014      	b.n	34015138 <HAL_SPI_Transmit_DMA+0x304>
    }
    else
    {
      status = HAL_ERROR;
3401510e:	2301      	movs	r3, #1
34015110:	75fb      	strb	r3, [r7, #23]
34015112:	e011      	b.n	34015138 <HAL_SPI_Transmit_DMA+0x304>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34015114:	68fb      	ldr	r3, [r7, #12]
34015116:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
3401511a:	68fb      	ldr	r3, [r7, #12]
3401511c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3401511e:	4619      	mov	r1, r3
34015120:	68fb      	ldr	r3, [r7, #12]
34015122:	681b      	ldr	r3, [r3, #0]
34015124:	3320      	adds	r3, #32
34015126:	461a      	mov	r2, r3
                              hspi->TxXferCount);
34015128:	68fb      	ldr	r3, [r7, #12]
3401512a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
3401512e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34015130:	f7f0 f85c 	bl	340051ec <HAL_DMA_Start_IT>
34015134:	4603      	mov	r3, r0
34015136:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
34015138:	7dfb      	ldrb	r3, [r7, #23]
3401513a:	2b00      	cmp	r3, #0
3401513c:	d011      	beq.n	34015162 <HAL_SPI_Transmit_DMA+0x32e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
3401513e:	68fb      	ldr	r3, [r7, #12]
34015140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015144:	f043 0210 	orr.w	r2, r3, #16
34015148:	68fb      	ldr	r3, [r7, #12]
3401514a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
3401514e:	68fb      	ldr	r3, [r7, #12]
34015150:	2201      	movs	r2, #1
34015152:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
34015156:	68fb      	ldr	r3, [r7, #12]
34015158:	2200      	movs	r2, #0
3401515a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
3401515e:	2301      	movs	r3, #1
34015160:	e042      	b.n	340151e8 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
34015162:	68fb      	ldr	r3, [r7, #12]
34015164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3401516a:	2b81      	cmp	r3, #129	@ 0x81
3401516c:	d108      	bne.n	34015180 <HAL_SPI_Transmit_DMA+0x34c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
3401516e:	68fb      	ldr	r3, [r7, #12]
34015170:	681b      	ldr	r3, [r3, #0]
34015172:	685b      	ldr	r3, [r3, #4]
34015174:	68fa      	ldr	r2, [r7, #12]
34015176:	6812      	ldr	r2, [r2, #0]
34015178:	0c1b      	lsrs	r3, r3, #16
3401517a:	041b      	lsls	r3, r3, #16
3401517c:	6053      	str	r3, [r2, #4]
3401517e:	e009      	b.n	34015194 <HAL_SPI_Transmit_DMA+0x360>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
34015180:	68fb      	ldr	r3, [r7, #12]
34015182:	681b      	ldr	r3, [r3, #0]
34015184:	685b      	ldr	r3, [r3, #4]
34015186:	0c1b      	lsrs	r3, r3, #16
34015188:	041b      	lsls	r3, r3, #16
3401518a:	88f9      	ldrh	r1, [r7, #6]
3401518c:	68fa      	ldr	r2, [r7, #12]
3401518e:	6812      	ldr	r2, [r2, #0]
34015190:	430b      	orrs	r3, r1
34015192:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34015194:	68fb      	ldr	r3, [r7, #12]
34015196:	681b      	ldr	r3, [r3, #0]
34015198:	689a      	ldr	r2, [r3, #8]
3401519a:	68fb      	ldr	r3, [r7, #12]
3401519c:	681b      	ldr	r3, [r3, #0]
3401519e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340151a2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
340151a4:	68fb      	ldr	r3, [r7, #12]
340151a6:	681b      	ldr	r3, [r3, #0]
340151a8:	691a      	ldr	r2, [r3, #16]
340151aa:	68fb      	ldr	r3, [r7, #12]
340151ac:	681b      	ldr	r3, [r3, #0]
340151ae:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
340151b2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
340151b4:	68fb      	ldr	r3, [r7, #12]
340151b6:	681b      	ldr	r3, [r3, #0]
340151b8:	681a      	ldr	r2, [r3, #0]
340151ba:	68fb      	ldr	r3, [r7, #12]
340151bc:	681b      	ldr	r3, [r3, #0]
340151be:	f042 0201 	orr.w	r2, r2, #1
340151c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
340151c4:	68fb      	ldr	r3, [r7, #12]
340151c6:	685b      	ldr	r3, [r3, #4]
340151c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340151cc:	d107      	bne.n	340151de <HAL_SPI_Transmit_DMA+0x3aa>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
340151ce:	68fb      	ldr	r3, [r7, #12]
340151d0:	681b      	ldr	r3, [r3, #0]
340151d2:	681a      	ldr	r2, [r3, #0]
340151d4:	68fb      	ldr	r3, [r7, #12]
340151d6:	681b      	ldr	r3, [r3, #0]
340151d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340151dc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
340151de:	68fb      	ldr	r3, [r7, #12]
340151e0:	2200      	movs	r2, #0
340151e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
340151e6:	2300      	movs	r3, #0
}
340151e8:	4618      	mov	r0, r3
340151ea:	3718      	adds	r7, #24
340151ec:	46bd      	mov	sp, r7
340151ee:	bd80      	pop	{r7, pc}

340151f0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
340151f0:	b580      	push	{r7, lr}
340151f2:	b08a      	sub	sp, #40	@ 0x28
340151f4:	af00      	add	r7, sp, #0
340151f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
340151f8:	687b      	ldr	r3, [r7, #4]
340151fa:	681b      	ldr	r3, [r3, #0]
340151fc:	691b      	ldr	r3, [r3, #16]
340151fe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
34015200:	687b      	ldr	r3, [r7, #4]
34015202:	681b      	ldr	r3, [r3, #0]
34015204:	695b      	ldr	r3, [r3, #20]
34015206:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
34015208:	6a3a      	ldr	r2, [r7, #32]
3401520a:	69fb      	ldr	r3, [r7, #28]
3401520c:	4013      	ands	r3, r2
3401520e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
34015210:	687b      	ldr	r3, [r7, #4]
34015212:	681b      	ldr	r3, [r3, #0]
34015214:	689b      	ldr	r3, [r3, #8]
34015216:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
34015218:	2300      	movs	r3, #0
3401521a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
3401521c:	687b      	ldr	r3, [r7, #4]
3401521e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015222:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
34015224:	687b      	ldr	r3, [r7, #4]
34015226:	681b      	ldr	r3, [r3, #0]
34015228:	3330      	adds	r3, #48	@ 0x30
3401522a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
3401522c:	69fb      	ldr	r3, [r7, #28]
3401522e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34015232:	2b00      	cmp	r3, #0
34015234:	d010      	beq.n	34015258 <HAL_SPI_IRQHandler+0x68>
34015236:	6a3b      	ldr	r3, [r7, #32]
34015238:	f003 0308 	and.w	r3, r3, #8
3401523c:	2b00      	cmp	r3, #0
3401523e:	d00b      	beq.n	34015258 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34015240:	687b      	ldr	r3, [r7, #4]
34015242:	681b      	ldr	r3, [r3, #0]
34015244:	699a      	ldr	r2, [r3, #24]
34015246:	687b      	ldr	r3, [r7, #4]
34015248:	681b      	ldr	r3, [r3, #0]
3401524a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3401524e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
34015250:	6878      	ldr	r0, [r7, #4]
34015252:	f000 f9bf 	bl	340155d4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
34015256:	e19a      	b.n	3401558e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34015258:	69bb      	ldr	r3, [r7, #24]
3401525a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401525e:	2b00      	cmp	r3, #0
34015260:	d113      	bne.n	3401528a <HAL_SPI_IRQHandler+0x9a>
34015262:	69bb      	ldr	r3, [r7, #24]
34015264:	f003 0320 	and.w	r3, r3, #32
34015268:	2b00      	cmp	r3, #0
3401526a:	d10e      	bne.n	3401528a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
3401526c:	69bb      	ldr	r3, [r7, #24]
3401526e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34015272:	2b00      	cmp	r3, #0
34015274:	d009      	beq.n	3401528a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
34015276:	687b      	ldr	r3, [r7, #4]
34015278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3401527a:	6878      	ldr	r0, [r7, #4]
3401527c:	4798      	blx	r3
    hspi->RxISR(hspi);
3401527e:	687b      	ldr	r3, [r7, #4]
34015280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34015282:	6878      	ldr	r0, [r7, #4]
34015284:	4798      	blx	r3
    handled = 1UL;
34015286:	2301      	movs	r3, #1
34015288:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
3401528a:	69bb      	ldr	r3, [r7, #24]
3401528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015290:	2b00      	cmp	r3, #0
34015292:	d10f      	bne.n	340152b4 <HAL_SPI_IRQHandler+0xc4>
34015294:	69bb      	ldr	r3, [r7, #24]
34015296:	f003 0301 	and.w	r3, r3, #1
3401529a:	2b00      	cmp	r3, #0
3401529c:	d00a      	beq.n	340152b4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
3401529e:	69bb      	ldr	r3, [r7, #24]
340152a0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
340152a4:	2b00      	cmp	r3, #0
340152a6:	d105      	bne.n	340152b4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
340152a8:	687b      	ldr	r3, [r7, #4]
340152aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
340152ac:	6878      	ldr	r0, [r7, #4]
340152ae:	4798      	blx	r3
    handled = 1UL;
340152b0:	2301      	movs	r3, #1
340152b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
340152b4:	69bb      	ldr	r3, [r7, #24]
340152b6:	f003 0320 	and.w	r3, r3, #32
340152ba:	2b00      	cmp	r3, #0
340152bc:	d10f      	bne.n	340152de <HAL_SPI_IRQHandler+0xee>
340152be:	69bb      	ldr	r3, [r7, #24]
340152c0:	f003 0302 	and.w	r3, r3, #2
340152c4:	2b00      	cmp	r3, #0
340152c6:	d00a      	beq.n	340152de <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
340152c8:	69bb      	ldr	r3, [r7, #24]
340152ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
340152ce:	2b00      	cmp	r3, #0
340152d0:	d105      	bne.n	340152de <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
340152d2:	687b      	ldr	r3, [r7, #4]
340152d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340152d6:	6878      	ldr	r0, [r7, #4]
340152d8:	4798      	blx	r3
    handled = 1UL;
340152da:	2301      	movs	r3, #1
340152dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
340152de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340152e0:	2b00      	cmp	r3, #0
340152e2:	f040 814f 	bne.w	34015584 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
340152e6:	69bb      	ldr	r3, [r7, #24]
340152e8:	f003 0308 	and.w	r3, r3, #8
340152ec:	2b00      	cmp	r3, #0
340152ee:	f000 808b 	beq.w	34015408 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
340152f2:	687b      	ldr	r3, [r7, #4]
340152f4:	681b      	ldr	r3, [r3, #0]
340152f6:	699a      	ldr	r2, [r3, #24]
340152f8:	687b      	ldr	r3, [r7, #4]
340152fa:	681b      	ldr	r3, [r3, #0]
340152fc:	f042 0208 	orr.w	r2, r2, #8
34015300:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
34015302:	687b      	ldr	r3, [r7, #4]
34015304:	681b      	ldr	r3, [r3, #0]
34015306:	699a      	ldr	r2, [r3, #24]
34015308:	687b      	ldr	r3, [r7, #4]
3401530a:	681b      	ldr	r3, [r3, #0]
3401530c:	f042 0210 	orr.w	r2, r2, #16
34015310:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34015312:	687b      	ldr	r3, [r7, #4]
34015314:	681b      	ldr	r3, [r3, #0]
34015316:	699a      	ldr	r2, [r3, #24]
34015318:	687b      	ldr	r3, [r7, #4]
3401531a:	681b      	ldr	r3, [r3, #0]
3401531c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34015320:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
34015322:	687b      	ldr	r3, [r7, #4]
34015324:	681b      	ldr	r3, [r3, #0]
34015326:	691a      	ldr	r2, [r3, #16]
34015328:	687b      	ldr	r3, [r7, #4]
3401532a:	681b      	ldr	r3, [r3, #0]
3401532c:	f022 0208 	bic.w	r2, r2, #8
34015330:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
34015332:	687b      	ldr	r3, [r7, #4]
34015334:	681b      	ldr	r3, [r3, #0]
34015336:	689b      	ldr	r3, [r3, #8]
34015338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
3401533c:	2b00      	cmp	r3, #0
3401533e:	d13d      	bne.n	340153bc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
34015340:	e036      	b.n	340153b0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
34015342:	687b      	ldr	r3, [r7, #4]
34015344:	68db      	ldr	r3, [r3, #12]
34015346:	2b0f      	cmp	r3, #15
34015348:	d90b      	bls.n	34015362 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
3401534a:	687b      	ldr	r3, [r7, #4]
3401534c:	681a      	ldr	r2, [r3, #0]
3401534e:	687b      	ldr	r3, [r7, #4]
34015350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015352:	6b12      	ldr	r2, [r2, #48]	@ 0x30
34015354:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
34015356:	687b      	ldr	r3, [r7, #4]
34015358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401535a:	1d1a      	adds	r2, r3, #4
3401535c:	687b      	ldr	r3, [r7, #4]
3401535e:	66da      	str	r2, [r3, #108]	@ 0x6c
34015360:	e01d      	b.n	3401539e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
34015362:	687b      	ldr	r3, [r7, #4]
34015364:	68db      	ldr	r3, [r3, #12]
34015366:	2b07      	cmp	r3, #7
34015368:	d90b      	bls.n	34015382 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
3401536a:	687b      	ldr	r3, [r7, #4]
3401536c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401536e:	68fa      	ldr	r2, [r7, #12]
34015370:	8812      	ldrh	r2, [r2, #0]
34015372:	b292      	uxth	r2, r2
34015374:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
34015376:	687b      	ldr	r3, [r7, #4]
34015378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401537a:	1c9a      	adds	r2, r3, #2
3401537c:	687b      	ldr	r3, [r7, #4]
3401537e:	66da      	str	r2, [r3, #108]	@ 0x6c
34015380:	e00d      	b.n	3401539e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
34015382:	687b      	ldr	r3, [r7, #4]
34015384:	681b      	ldr	r3, [r3, #0]
34015386:	f103 0230 	add.w	r2, r3, #48	@ 0x30
3401538a:	687b      	ldr	r3, [r7, #4]
3401538c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401538e:	7812      	ldrb	r2, [r2, #0]
34015390:	b2d2      	uxtb	r2, r2
34015392:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
34015394:	687b      	ldr	r3, [r7, #4]
34015396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34015398:	1c5a      	adds	r2, r3, #1
3401539a:	687b      	ldr	r3, [r7, #4]
3401539c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
3401539e:	687b      	ldr	r3, [r7, #4]
340153a0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
340153a4:	b29b      	uxth	r3, r3
340153a6:	3b01      	subs	r3, #1
340153a8:	b29a      	uxth	r2, r3
340153aa:	687b      	ldr	r3, [r7, #4]
340153ac:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
340153b0:	687b      	ldr	r3, [r7, #4]
340153b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
340153b6:	b29b      	uxth	r3, r3
340153b8:	2b00      	cmp	r3, #0
340153ba:	d1c2      	bne.n	34015342 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
340153bc:	6878      	ldr	r0, [r7, #4]
340153be:	f000 f981 	bl	340156c4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
340153c2:	687b      	ldr	r3, [r7, #4]
340153c4:	2201      	movs	r2, #1
340153c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340153ca:	687b      	ldr	r3, [r7, #4]
340153cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340153d0:	2b00      	cmp	r3, #0
340153d2:	d003      	beq.n	340153dc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
340153d4:	6878      	ldr	r0, [r7, #4]
340153d6:	f002 fcdd 	bl	34017d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
340153da:	e0d8      	b.n	3401558e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
340153dc:	7cfb      	ldrb	r3, [r7, #19]
340153de:	2b05      	cmp	r3, #5
340153e0:	d103      	bne.n	340153ea <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
340153e2:	6878      	ldr	r0, [r7, #4]
340153e4:	f000 f8e2 	bl	340155ac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
340153e8:	e0ce      	b.n	34015588 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
340153ea:	7cfb      	ldrb	r3, [r7, #19]
340153ec:	2b04      	cmp	r3, #4
340153ee:	d103      	bne.n	340153f8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
340153f0:	6878      	ldr	r0, [r7, #4]
340153f2:	f000 f8d1 	bl	34015598 <HAL_SPI_RxCpltCallback>
    return;
340153f6:	e0c7      	b.n	34015588 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
340153f8:	7cfb      	ldrb	r3, [r7, #19]
340153fa:	2b03      	cmp	r3, #3
340153fc:	f040 80c4 	bne.w	34015588 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
34015400:	6878      	ldr	r0, [r7, #4]
34015402:	f002 fcab 	bl	34017d5c <HAL_SPI_TxCpltCallback>
    return;
34015406:	e0bf      	b.n	34015588 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
34015408:	69bb      	ldr	r3, [r7, #24]
3401540a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
3401540e:	2b00      	cmp	r3, #0
34015410:	f000 80bd 	beq.w	3401558e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
34015414:	69bb      	ldr	r3, [r7, #24]
34015416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401541a:	2b00      	cmp	r3, #0
3401541c:	d00f      	beq.n	3401543e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
3401541e:	687b      	ldr	r3, [r7, #4]
34015420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015424:	f043 0204 	orr.w	r2, r3, #4
34015428:	687b      	ldr	r3, [r7, #4]
3401542a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
3401542e:	687b      	ldr	r3, [r7, #4]
34015430:	681b      	ldr	r3, [r3, #0]
34015432:	699a      	ldr	r2, [r3, #24]
34015434:	687b      	ldr	r3, [r7, #4]
34015436:	681b      	ldr	r3, [r3, #0]
34015438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
3401543c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
3401543e:	69bb      	ldr	r3, [r7, #24]
34015440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34015444:	2b00      	cmp	r3, #0
34015446:	d00f      	beq.n	34015468 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34015448:	687b      	ldr	r3, [r7, #4]
3401544a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401544e:	f043 0201 	orr.w	r2, r3, #1
34015452:	687b      	ldr	r3, [r7, #4]
34015454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
34015458:	687b      	ldr	r3, [r7, #4]
3401545a:	681b      	ldr	r3, [r3, #0]
3401545c:	699a      	ldr	r2, [r3, #24]
3401545e:	687b      	ldr	r3, [r7, #4]
34015460:	681b      	ldr	r3, [r3, #0]
34015462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34015466:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
34015468:	69bb      	ldr	r3, [r7, #24]
3401546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3401546e:	2b00      	cmp	r3, #0
34015470:	d00f      	beq.n	34015492 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
34015472:	687b      	ldr	r3, [r7, #4]
34015474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015478:	f043 0208 	orr.w	r2, r3, #8
3401547c:	687b      	ldr	r3, [r7, #4]
3401547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
34015482:	687b      	ldr	r3, [r7, #4]
34015484:	681b      	ldr	r3, [r3, #0]
34015486:	699a      	ldr	r2, [r3, #24]
34015488:	687b      	ldr	r3, [r7, #4]
3401548a:	681b      	ldr	r3, [r3, #0]
3401548c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015490:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
34015492:	69bb      	ldr	r3, [r7, #24]
34015494:	f003 0320 	and.w	r3, r3, #32
34015498:	2b00      	cmp	r3, #0
3401549a:	d00f      	beq.n	340154bc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
3401549c:	687b      	ldr	r3, [r7, #4]
3401549e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340154a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
340154a6:	687b      	ldr	r3, [r7, #4]
340154a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
340154ac:	687b      	ldr	r3, [r7, #4]
340154ae:	681b      	ldr	r3, [r3, #0]
340154b0:	699a      	ldr	r2, [r3, #24]
340154b2:	687b      	ldr	r3, [r7, #4]
340154b4:	681b      	ldr	r3, [r3, #0]
340154b6:	f042 0220 	orr.w	r2, r2, #32
340154ba:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
340154bc:	687b      	ldr	r3, [r7, #4]
340154be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340154c2:	2b00      	cmp	r3, #0
340154c4:	d062      	beq.n	3401558c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
340154c6:	687b      	ldr	r3, [r7, #4]
340154c8:	681b      	ldr	r3, [r3, #0]
340154ca:	681a      	ldr	r2, [r3, #0]
340154cc:	687b      	ldr	r3, [r7, #4]
340154ce:	681b      	ldr	r3, [r3, #0]
340154d0:	f022 0201 	bic.w	r2, r2, #1
340154d4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
340154d6:	687b      	ldr	r3, [r7, #4]
340154d8:	681b      	ldr	r3, [r3, #0]
340154da:	691b      	ldr	r3, [r3, #16]
340154dc:	687a      	ldr	r2, [r7, #4]
340154de:	6812      	ldr	r2, [r2, #0]
340154e0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
340154e4:	f023 0303 	bic.w	r3, r3, #3
340154e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
340154ea:	697b      	ldr	r3, [r7, #20]
340154ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
340154f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
340154f4:	d13e      	bne.n	34015574 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
340154f6:	687b      	ldr	r3, [r7, #4]
340154f8:	681b      	ldr	r3, [r3, #0]
340154fa:	689a      	ldr	r2, [r3, #8]
340154fc:	687b      	ldr	r3, [r7, #4]
340154fe:	681b      	ldr	r3, [r3, #0]
34015500:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34015504:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
34015506:	687b      	ldr	r3, [r7, #4]
34015508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3401550c:	2b00      	cmp	r3, #0
3401550e:	d015      	beq.n	3401553c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
34015510:	687b      	ldr	r3, [r7, #4]
34015512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34015516:	4a1f      	ldr	r2, [pc, #124]	@ (34015594 <HAL_SPI_IRQHandler+0x3a4>)
34015518:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
3401551a:	687b      	ldr	r3, [r7, #4]
3401551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34015520:	4618      	mov	r0, r3
34015522:	f7ef fed1 	bl	340052c8 <HAL_DMA_Abort_IT>
34015526:	4603      	mov	r3, r0
34015528:	2b00      	cmp	r3, #0
3401552a:	d007      	beq.n	3401553c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
3401552c:	687b      	ldr	r3, [r7, #4]
3401552e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34015536:	687b      	ldr	r3, [r7, #4]
34015538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
3401553c:	687b      	ldr	r3, [r7, #4]
3401553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015542:	2b00      	cmp	r3, #0
34015544:	d022      	beq.n	3401558c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
34015546:	687b      	ldr	r3, [r7, #4]
34015548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401554c:	4a11      	ldr	r2, [pc, #68]	@ (34015594 <HAL_SPI_IRQHandler+0x3a4>)
3401554e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
34015550:	687b      	ldr	r3, [r7, #4]
34015552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015556:	4618      	mov	r0, r3
34015558:	f7ef feb6 	bl	340052c8 <HAL_DMA_Abort_IT>
3401555c:	4603      	mov	r3, r0
3401555e:	2b00      	cmp	r3, #0
34015560:	d014      	beq.n	3401558c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34015562:	687b      	ldr	r3, [r7, #4]
34015564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
3401556c:	687b      	ldr	r3, [r7, #4]
3401556e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
34015572:	e00b      	b.n	3401558c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
34015574:	687b      	ldr	r3, [r7, #4]
34015576:	2201      	movs	r2, #1
34015578:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
3401557c:	6878      	ldr	r0, [r7, #4]
3401557e:	f002 fc09 	bl	34017d94 <HAL_SPI_ErrorCallback>
    return;
34015582:	e003      	b.n	3401558c <HAL_SPI_IRQHandler+0x39c>
    return;
34015584:	bf00      	nop
34015586:	e002      	b.n	3401558e <HAL_SPI_IRQHandler+0x39e>
    return;
34015588:	bf00      	nop
3401558a:	e000      	b.n	3401558e <HAL_SPI_IRQHandler+0x39e>
    return;
3401558c:	bf00      	nop
  }
}
3401558e:	3728      	adds	r7, #40	@ 0x28
34015590:	46bd      	mov	sp, r7
34015592:	bd80      	pop	{r7, pc}
34015594:	34015691 	.word	0x34015691

34015598 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34015598:	b480      	push	{r7}
3401559a:	b083      	sub	sp, #12
3401559c:	af00      	add	r7, sp, #0
3401559e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
340155a0:	bf00      	nop
340155a2:	370c      	adds	r7, #12
340155a4:	46bd      	mov	sp, r7
340155a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340155aa:	4770      	bx	lr

340155ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155ac:	b480      	push	{r7}
340155ae:	b083      	sub	sp, #12
340155b0:	af00      	add	r7, sp, #0
340155b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
340155b4:	bf00      	nop
340155b6:	370c      	adds	r7, #12
340155b8:	46bd      	mov	sp, r7
340155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340155be:	4770      	bx	lr

340155c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155c0:	b480      	push	{r7}
340155c2:	b083      	sub	sp, #12
340155c4:	af00      	add	r7, sp, #0
340155c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
340155c8:	bf00      	nop
340155ca:	370c      	adds	r7, #12
340155cc:	46bd      	mov	sp, r7
340155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340155d2:	4770      	bx	lr

340155d4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
340155d4:	b480      	push	{r7}
340155d6:	b083      	sub	sp, #12
340155d8:	af00      	add	r7, sp, #0
340155da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
340155dc:	bf00      	nop
340155de:	370c      	adds	r7, #12
340155e0:	46bd      	mov	sp, r7
340155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
340155e6:	4770      	bx	lr

340155e8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
340155e8:	b580      	push	{r7, lr}
340155ea:	b084      	sub	sp, #16
340155ec:	af00      	add	r7, sp, #0
340155ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
340155f0:	687b      	ldr	r3, [r7, #4]
340155f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
340155f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
340155f6:	68fb      	ldr	r3, [r7, #12]
340155f8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
340155fc:	b2db      	uxtb	r3, r3
340155fe:	2b07      	cmp	r3, #7
34015600:	d011      	beq.n	34015626 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
34015602:	68fb      	ldr	r3, [r7, #12]
34015604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3401560a:	2b81      	cmp	r3, #129	@ 0x81
3401560c:	d103      	bne.n	34015616 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
3401560e:	68f8      	ldr	r0, [r7, #12]
34015610:	f002 fba4 	bl	34017d5c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
34015614:	e007      	b.n	34015626 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
34015616:	68fb      	ldr	r3, [r7, #12]
34015618:	681b      	ldr	r3, [r3, #0]
3401561a:	691a      	ldr	r2, [r3, #16]
3401561c:	68fb      	ldr	r3, [r7, #12]
3401561e:	681b      	ldr	r3, [r3, #0]
34015620:	f042 0208 	orr.w	r2, r2, #8
34015624:	611a      	str	r2, [r3, #16]
}
34015626:	bf00      	nop
34015628:	3710      	adds	r7, #16
3401562a:	46bd      	mov	sp, r7
3401562c:	bd80      	pop	{r7, pc}

3401562e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
3401562e:	b580      	push	{r7, lr}
34015630:	b084      	sub	sp, #16
34015632:	af00      	add	r7, sp, #0
34015634:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
34015636:	687b      	ldr	r3, [r7, #4]
34015638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3401563a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
3401563c:	68f8      	ldr	r0, [r7, #12]
3401563e:	f7ff ffbf 	bl	340155c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
34015642:	bf00      	nop
34015644:	3710      	adds	r7, #16
34015646:	46bd      	mov	sp, r7
34015648:	bd80      	pop	{r7, pc}

3401564a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
3401564a:	b580      	push	{r7, lr}
3401564c:	b084      	sub	sp, #16
3401564e:	af00      	add	r7, sp, #0
34015650:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34015652:	687b      	ldr	r3, [r7, #4]
34015654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34015656:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
34015658:	6878      	ldr	r0, [r7, #4]
3401565a:	f7ef ffc7 	bl	340055ec <HAL_DMA_GetError>
3401565e:	4603      	mov	r3, r0
34015660:	2b00      	cmp	r3, #0
34015662:	d011      	beq.n	34015688 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
34015664:	68f8      	ldr	r0, [r7, #12]
34015666:	f000 f82d 	bl	340156c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
3401566a:	68fb      	ldr	r3, [r7, #12]
3401566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015670:	f043 0210 	orr.w	r2, r3, #16
34015674:	68fb      	ldr	r3, [r7, #12]
34015676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
3401567a:	68fb      	ldr	r3, [r7, #12]
3401567c:	2201      	movs	r2, #1
3401567e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
34015682:	68f8      	ldr	r0, [r7, #12]
34015684:	f002 fb86 	bl	34017d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
34015688:	bf00      	nop
3401568a:	3710      	adds	r7, #16
3401568c:	46bd      	mov	sp, r7
3401568e:	bd80      	pop	{r7, pc}

34015690 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
34015690:	b580      	push	{r7, lr}
34015692:	b084      	sub	sp, #16
34015694:	af00      	add	r7, sp, #0
34015696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34015698:	687b      	ldr	r3, [r7, #4]
3401569a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3401569c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
3401569e:	68fb      	ldr	r3, [r7, #12]
340156a0:	2200      	movs	r2, #0
340156a2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
340156a6:	68fb      	ldr	r3, [r7, #12]
340156a8:	2200      	movs	r2, #0
340156aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
340156ae:	68fb      	ldr	r3, [r7, #12]
340156b0:	2201      	movs	r2, #1
340156b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
340156b6:	68f8      	ldr	r0, [r7, #12]
340156b8:	f002 fb6c 	bl	34017d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
340156bc:	bf00      	nop
340156be:	3710      	adds	r7, #16
340156c0:	46bd      	mov	sp, r7
340156c2:	bd80      	pop	{r7, pc}

340156c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
340156c4:	b480      	push	{r7}
340156c6:	b085      	sub	sp, #20
340156c8:	af00      	add	r7, sp, #0
340156ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
340156cc:	687b      	ldr	r3, [r7, #4]
340156ce:	681b      	ldr	r3, [r3, #0]
340156d0:	695b      	ldr	r3, [r3, #20]
340156d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
340156d4:	687b      	ldr	r3, [r7, #4]
340156d6:	681b      	ldr	r3, [r3, #0]
340156d8:	699a      	ldr	r2, [r3, #24]
340156da:	687b      	ldr	r3, [r7, #4]
340156dc:	681b      	ldr	r3, [r3, #0]
340156de:	f042 0208 	orr.w	r2, r2, #8
340156e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
340156e4:	687b      	ldr	r3, [r7, #4]
340156e6:	681b      	ldr	r3, [r3, #0]
340156e8:	699a      	ldr	r2, [r3, #24]
340156ea:	687b      	ldr	r3, [r7, #4]
340156ec:	681b      	ldr	r3, [r3, #0]
340156ee:	f042 0210 	orr.w	r2, r2, #16
340156f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
340156f4:	687b      	ldr	r3, [r7, #4]
340156f6:	681b      	ldr	r3, [r3, #0]
340156f8:	681a      	ldr	r2, [r3, #0]
340156fa:	687b      	ldr	r3, [r7, #4]
340156fc:	681b      	ldr	r3, [r3, #0]
340156fe:	f022 0201 	bic.w	r2, r2, #1
34015702:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
34015704:	687b      	ldr	r3, [r7, #4]
34015706:	681b      	ldr	r3, [r3, #0]
34015708:	691b      	ldr	r3, [r3, #16]
3401570a:	687a      	ldr	r2, [r7, #4]
3401570c:	6812      	ldr	r2, [r2, #0]
3401570e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
34015712:	f023 0303 	bic.w	r3, r3, #3
34015716:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34015718:	687b      	ldr	r3, [r7, #4]
3401571a:	681b      	ldr	r3, [r3, #0]
3401571c:	689a      	ldr	r2, [r3, #8]
3401571e:	687b      	ldr	r3, [r7, #4]
34015720:	681b      	ldr	r3, [r3, #0]
34015722:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34015726:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
34015728:	687b      	ldr	r3, [r7, #4]
3401572a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401572e:	b2db      	uxtb	r3, r3
34015730:	2b04      	cmp	r3, #4
34015732:	d014      	beq.n	3401575e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
34015734:	68fb      	ldr	r3, [r7, #12]
34015736:	f003 0320 	and.w	r3, r3, #32
3401573a:	2b00      	cmp	r3, #0
3401573c:	d00f      	beq.n	3401575e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
3401573e:	687b      	ldr	r3, [r7, #4]
34015740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015744:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34015748:	687b      	ldr	r3, [r7, #4]
3401574a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
3401574e:	687b      	ldr	r3, [r7, #4]
34015750:	681b      	ldr	r3, [r3, #0]
34015752:	699a      	ldr	r2, [r3, #24]
34015754:	687b      	ldr	r3, [r7, #4]
34015756:	681b      	ldr	r3, [r3, #0]
34015758:	f042 0220 	orr.w	r2, r2, #32
3401575c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
3401575e:	687b      	ldr	r3, [r7, #4]
34015760:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015764:	b2db      	uxtb	r3, r3
34015766:	2b03      	cmp	r3, #3
34015768:	d02e      	beq.n	340157c8 <SPI_CloseTransfer+0x104>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
3401576a:	68fb      	ldr	r3, [r7, #12]
3401576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015770:	2b00      	cmp	r3, #0
34015772:	d00f      	beq.n	34015794 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34015774:	687b      	ldr	r3, [r7, #4]
34015776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401577a:	f043 0204 	orr.w	r2, r3, #4
3401577e:	687b      	ldr	r3, [r7, #4]
34015780:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34015784:	687b      	ldr	r3, [r7, #4]
34015786:	681b      	ldr	r3, [r3, #0]
34015788:	699a      	ldr	r2, [r3, #24]
3401578a:	687b      	ldr	r3, [r7, #4]
3401578c:	681b      	ldr	r3, [r3, #0]
3401578e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34015792:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
34015794:	687b      	ldr	r3, [r7, #4]
34015796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401579c:	d114      	bne.n	340157c8 <SPI_CloseTransfer+0x104>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
3401579e:	68fb      	ldr	r3, [r7, #12]
340157a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340157a4:	2b00      	cmp	r3, #0
340157a6:	d00f      	beq.n	340157c8 <SPI_CloseTransfer+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
340157a8:	687b      	ldr	r3, [r7, #4]
340157aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340157ae:	f043 0202 	orr.w	r2, r3, #2
340157b2:	687b      	ldr	r3, [r7, #4]
340157b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
340157b8:	687b      	ldr	r3, [r7, #4]
340157ba:	681b      	ldr	r3, [r3, #0]
340157bc:	699a      	ldr	r2, [r3, #24]
340157be:	687b      	ldr	r3, [r7, #4]
340157c0:	681b      	ldr	r3, [r3, #0]
340157c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
340157c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
340157c8:	68fb      	ldr	r3, [r7, #12]
340157ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340157ce:	2b00      	cmp	r3, #0
340157d0:	d00f      	beq.n	340157f2 <SPI_CloseTransfer+0x12e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
340157d2:	687b      	ldr	r3, [r7, #4]
340157d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340157d8:	f043 0201 	orr.w	r2, r3, #1
340157dc:	687b      	ldr	r3, [r7, #4]
340157de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
340157e2:	687b      	ldr	r3, [r7, #4]
340157e4:	681b      	ldr	r3, [r3, #0]
340157e6:	699a      	ldr	r2, [r3, #24]
340157e8:	687b      	ldr	r3, [r7, #4]
340157ea:	681b      	ldr	r3, [r3, #0]
340157ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340157f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
340157f2:	68fb      	ldr	r3, [r7, #12]
340157f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340157f8:	2b00      	cmp	r3, #0
340157fa:	d00f      	beq.n	3401581c <SPI_CloseTransfer+0x158>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
340157fc:	687b      	ldr	r3, [r7, #4]
340157fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015802:	f043 0208 	orr.w	r2, r3, #8
34015806:	687b      	ldr	r3, [r7, #4]
34015808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
3401580c:	687b      	ldr	r3, [r7, #4]
3401580e:	681b      	ldr	r3, [r3, #0]
34015810:	699a      	ldr	r2, [r3, #24]
34015812:	687b      	ldr	r3, [r7, #4]
34015814:	681b      	ldr	r3, [r3, #0]
34015816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
3401581a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
3401581c:	687b      	ldr	r3, [r7, #4]
3401581e:	2200      	movs	r2, #0
34015820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
34015824:	687b      	ldr	r3, [r7, #4]
34015826:	2200      	movs	r2, #0
34015828:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
3401582c:	bf00      	nop
3401582e:	3714      	adds	r7, #20
34015830:	46bd      	mov	sp, r7
34015832:	f85d 7b04 	ldr.w	r7, [sp], #4
34015836:	4770      	bx	lr

34015838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34015838:	b580      	push	{r7, lr}
3401583a:	b082      	sub	sp, #8
3401583c:	af00      	add	r7, sp, #0
3401583e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34015840:	687b      	ldr	r3, [r7, #4]
34015842:	2b00      	cmp	r3, #0
34015844:	d101      	bne.n	3401584a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
34015846:	2301      	movs	r3, #1
34015848:	e16e      	b.n	34015b28 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401584a:	687b      	ldr	r3, [r7, #4]
3401584c:	699b      	ldr	r3, [r3, #24]
3401584e:	2b00      	cmp	r3, #0
34015850:	f000 8088 	beq.w	34015964 <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
34015854:	687b      	ldr	r3, [r7, #4]
34015856:	681b      	ldr	r3, [r3, #0]
34015858:	4a8f      	ldr	r2, [pc, #572]	@ (34015a98 <HAL_UART_Init+0x260>)
3401585a:	4293      	cmp	r3, r2
3401585c:	f000 80f5 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015860:	687b      	ldr	r3, [r7, #4]
34015862:	681b      	ldr	r3, [r3, #0]
34015864:	4a8d      	ldr	r2, [pc, #564]	@ (34015a9c <HAL_UART_Init+0x264>)
34015866:	4293      	cmp	r3, r2
34015868:	f000 80ef 	beq.w	34015a4a <HAL_UART_Init+0x212>
3401586c:	687b      	ldr	r3, [r7, #4]
3401586e:	681b      	ldr	r3, [r3, #0]
34015870:	4a8b      	ldr	r2, [pc, #556]	@ (34015aa0 <HAL_UART_Init+0x268>)
34015872:	4293      	cmp	r3, r2
34015874:	f000 80e9 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015878:	687b      	ldr	r3, [r7, #4]
3401587a:	681b      	ldr	r3, [r3, #0]
3401587c:	4a89      	ldr	r2, [pc, #548]	@ (34015aa4 <HAL_UART_Init+0x26c>)
3401587e:	4293      	cmp	r3, r2
34015880:	f000 80e3 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015884:	687b      	ldr	r3, [r7, #4]
34015886:	681b      	ldr	r3, [r3, #0]
34015888:	4a87      	ldr	r2, [pc, #540]	@ (34015aa8 <HAL_UART_Init+0x270>)
3401588a:	4293      	cmp	r3, r2
3401588c:	f000 80dd 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015890:	687b      	ldr	r3, [r7, #4]
34015892:	681b      	ldr	r3, [r3, #0]
34015894:	4a85      	ldr	r2, [pc, #532]	@ (34015aac <HAL_UART_Init+0x274>)
34015896:	4293      	cmp	r3, r2
34015898:	f000 80d7 	beq.w	34015a4a <HAL_UART_Init+0x212>
3401589c:	687b      	ldr	r3, [r7, #4]
3401589e:	681b      	ldr	r3, [r3, #0]
340158a0:	4a83      	ldr	r2, [pc, #524]	@ (34015ab0 <HAL_UART_Init+0x278>)
340158a2:	4293      	cmp	r3, r2
340158a4:	f000 80d1 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158a8:	687b      	ldr	r3, [r7, #4]
340158aa:	681b      	ldr	r3, [r3, #0]
340158ac:	4a81      	ldr	r2, [pc, #516]	@ (34015ab4 <HAL_UART_Init+0x27c>)
340158ae:	4293      	cmp	r3, r2
340158b0:	f000 80cb 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158b4:	687b      	ldr	r3, [r7, #4]
340158b6:	681b      	ldr	r3, [r3, #0]
340158b8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340158bc:	f000 80c5 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158c0:	687b      	ldr	r3, [r7, #4]
340158c2:	681b      	ldr	r3, [r3, #0]
340158c4:	4a7c      	ldr	r2, [pc, #496]	@ (34015ab8 <HAL_UART_Init+0x280>)
340158c6:	4293      	cmp	r3, r2
340158c8:	f000 80bf 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158cc:	687b      	ldr	r3, [r7, #4]
340158ce:	681b      	ldr	r3, [r3, #0]
340158d0:	4a7a      	ldr	r2, [pc, #488]	@ (34015abc <HAL_UART_Init+0x284>)
340158d2:	4293      	cmp	r3, r2
340158d4:	f000 80b9 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158d8:	687b      	ldr	r3, [r7, #4]
340158da:	681b      	ldr	r3, [r3, #0]
340158dc:	4a78      	ldr	r2, [pc, #480]	@ (34015ac0 <HAL_UART_Init+0x288>)
340158de:	4293      	cmp	r3, r2
340158e0:	f000 80b3 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158e4:	687b      	ldr	r3, [r7, #4]
340158e6:	681b      	ldr	r3, [r3, #0]
340158e8:	4a76      	ldr	r2, [pc, #472]	@ (34015ac4 <HAL_UART_Init+0x28c>)
340158ea:	4293      	cmp	r3, r2
340158ec:	f000 80ad 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158f0:	687b      	ldr	r3, [r7, #4]
340158f2:	681b      	ldr	r3, [r3, #0]
340158f4:	4a74      	ldr	r2, [pc, #464]	@ (34015ac8 <HAL_UART_Init+0x290>)
340158f6:	4293      	cmp	r3, r2
340158f8:	f000 80a7 	beq.w	34015a4a <HAL_UART_Init+0x212>
340158fc:	687b      	ldr	r3, [r7, #4]
340158fe:	681b      	ldr	r3, [r3, #0]
34015900:	4a72      	ldr	r2, [pc, #456]	@ (34015acc <HAL_UART_Init+0x294>)
34015902:	4293      	cmp	r3, r2
34015904:	f000 80a1 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015908:	687b      	ldr	r3, [r7, #4]
3401590a:	681b      	ldr	r3, [r3, #0]
3401590c:	4a70      	ldr	r2, [pc, #448]	@ (34015ad0 <HAL_UART_Init+0x298>)
3401590e:	4293      	cmp	r3, r2
34015910:	f000 809b 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015914:	687b      	ldr	r3, [r7, #4]
34015916:	681b      	ldr	r3, [r3, #0]
34015918:	4a6e      	ldr	r2, [pc, #440]	@ (34015ad4 <HAL_UART_Init+0x29c>)
3401591a:	4293      	cmp	r3, r2
3401591c:	f000 8095 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015920:	687b      	ldr	r3, [r7, #4]
34015922:	681b      	ldr	r3, [r3, #0]
34015924:	4a6c      	ldr	r2, [pc, #432]	@ (34015ad8 <HAL_UART_Init+0x2a0>)
34015926:	4293      	cmp	r3, r2
34015928:	f000 808f 	beq.w	34015a4a <HAL_UART_Init+0x212>
3401592c:	687b      	ldr	r3, [r7, #4]
3401592e:	681b      	ldr	r3, [r3, #0]
34015930:	4a6a      	ldr	r2, [pc, #424]	@ (34015adc <HAL_UART_Init+0x2a4>)
34015932:	4293      	cmp	r3, r2
34015934:	f000 8089 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015938:	687b      	ldr	r3, [r7, #4]
3401593a:	681b      	ldr	r3, [r3, #0]
3401593c:	4a68      	ldr	r2, [pc, #416]	@ (34015ae0 <HAL_UART_Init+0x2a8>)
3401593e:	4293      	cmp	r3, r2
34015940:	f000 8083 	beq.w	34015a4a <HAL_UART_Init+0x212>
34015944:	687b      	ldr	r3, [r7, #4]
34015946:	681b      	ldr	r3, [r3, #0]
34015948:	4a66      	ldr	r2, [pc, #408]	@ (34015ae4 <HAL_UART_Init+0x2ac>)
3401594a:	4293      	cmp	r3, r2
3401594c:	d07d      	beq.n	34015a4a <HAL_UART_Init+0x212>
3401594e:	687b      	ldr	r3, [r7, #4]
34015950:	681b      	ldr	r3, [r3, #0]
34015952:	4a65      	ldr	r2, [pc, #404]	@ (34015ae8 <HAL_UART_Init+0x2b0>)
34015954:	4293      	cmp	r3, r2
34015956:	d078      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015958:	f240 113f 	movw	r1, #319	@ 0x13f
3401595c:	4863      	ldr	r0, [pc, #396]	@ (34015aec <HAL_UART_Init+0x2b4>)
3401595e:	f7ec f99d 	bl	34001c9c <assert_failed>
34015962:	e072      	b.n	34015a4a <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
34015964:	687b      	ldr	r3, [r7, #4]
34015966:	681b      	ldr	r3, [r3, #0]
34015968:	4a4b      	ldr	r2, [pc, #300]	@ (34015a98 <HAL_UART_Init+0x260>)
3401596a:	4293      	cmp	r3, r2
3401596c:	d06d      	beq.n	34015a4a <HAL_UART_Init+0x212>
3401596e:	687b      	ldr	r3, [r7, #4]
34015970:	681b      	ldr	r3, [r3, #0]
34015972:	4a4a      	ldr	r2, [pc, #296]	@ (34015a9c <HAL_UART_Init+0x264>)
34015974:	4293      	cmp	r3, r2
34015976:	d068      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015978:	687b      	ldr	r3, [r7, #4]
3401597a:	681b      	ldr	r3, [r3, #0]
3401597c:	4a48      	ldr	r2, [pc, #288]	@ (34015aa0 <HAL_UART_Init+0x268>)
3401597e:	4293      	cmp	r3, r2
34015980:	d063      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015982:	687b      	ldr	r3, [r7, #4]
34015984:	681b      	ldr	r3, [r3, #0]
34015986:	4a47      	ldr	r2, [pc, #284]	@ (34015aa4 <HAL_UART_Init+0x26c>)
34015988:	4293      	cmp	r3, r2
3401598a:	d05e      	beq.n	34015a4a <HAL_UART_Init+0x212>
3401598c:	687b      	ldr	r3, [r7, #4]
3401598e:	681b      	ldr	r3, [r3, #0]
34015990:	4a45      	ldr	r2, [pc, #276]	@ (34015aa8 <HAL_UART_Init+0x270>)
34015992:	4293      	cmp	r3, r2
34015994:	d059      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015996:	687b      	ldr	r3, [r7, #4]
34015998:	681b      	ldr	r3, [r3, #0]
3401599a:	4a44      	ldr	r2, [pc, #272]	@ (34015aac <HAL_UART_Init+0x274>)
3401599c:	4293      	cmp	r3, r2
3401599e:	d054      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159a0:	687b      	ldr	r3, [r7, #4]
340159a2:	681b      	ldr	r3, [r3, #0]
340159a4:	4a42      	ldr	r2, [pc, #264]	@ (34015ab0 <HAL_UART_Init+0x278>)
340159a6:	4293      	cmp	r3, r2
340159a8:	d04f      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159aa:	687b      	ldr	r3, [r7, #4]
340159ac:	681b      	ldr	r3, [r3, #0]
340159ae:	4a41      	ldr	r2, [pc, #260]	@ (34015ab4 <HAL_UART_Init+0x27c>)
340159b0:	4293      	cmp	r3, r2
340159b2:	d04a      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159b4:	687b      	ldr	r3, [r7, #4]
340159b6:	681b      	ldr	r3, [r3, #0]
340159b8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340159bc:	d045      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159be:	687b      	ldr	r3, [r7, #4]
340159c0:	681b      	ldr	r3, [r3, #0]
340159c2:	4a3d      	ldr	r2, [pc, #244]	@ (34015ab8 <HAL_UART_Init+0x280>)
340159c4:	4293      	cmp	r3, r2
340159c6:	d040      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159c8:	687b      	ldr	r3, [r7, #4]
340159ca:	681b      	ldr	r3, [r3, #0]
340159cc:	4a3b      	ldr	r2, [pc, #236]	@ (34015abc <HAL_UART_Init+0x284>)
340159ce:	4293      	cmp	r3, r2
340159d0:	d03b      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159d2:	687b      	ldr	r3, [r7, #4]
340159d4:	681b      	ldr	r3, [r3, #0]
340159d6:	4a3a      	ldr	r2, [pc, #232]	@ (34015ac0 <HAL_UART_Init+0x288>)
340159d8:	4293      	cmp	r3, r2
340159da:	d036      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159dc:	687b      	ldr	r3, [r7, #4]
340159de:	681b      	ldr	r3, [r3, #0]
340159e0:	4a38      	ldr	r2, [pc, #224]	@ (34015ac4 <HAL_UART_Init+0x28c>)
340159e2:	4293      	cmp	r3, r2
340159e4:	d031      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159e6:	687b      	ldr	r3, [r7, #4]
340159e8:	681b      	ldr	r3, [r3, #0]
340159ea:	4a37      	ldr	r2, [pc, #220]	@ (34015ac8 <HAL_UART_Init+0x290>)
340159ec:	4293      	cmp	r3, r2
340159ee:	d02c      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159f0:	687b      	ldr	r3, [r7, #4]
340159f2:	681b      	ldr	r3, [r3, #0]
340159f4:	4a35      	ldr	r2, [pc, #212]	@ (34015acc <HAL_UART_Init+0x294>)
340159f6:	4293      	cmp	r3, r2
340159f8:	d027      	beq.n	34015a4a <HAL_UART_Init+0x212>
340159fa:	687b      	ldr	r3, [r7, #4]
340159fc:	681b      	ldr	r3, [r3, #0]
340159fe:	4a34      	ldr	r2, [pc, #208]	@ (34015ad0 <HAL_UART_Init+0x298>)
34015a00:	4293      	cmp	r3, r2
34015a02:	d022      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a04:	687b      	ldr	r3, [r7, #4]
34015a06:	681b      	ldr	r3, [r3, #0]
34015a08:	4a32      	ldr	r2, [pc, #200]	@ (34015ad4 <HAL_UART_Init+0x29c>)
34015a0a:	4293      	cmp	r3, r2
34015a0c:	d01d      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a0e:	687b      	ldr	r3, [r7, #4]
34015a10:	681b      	ldr	r3, [r3, #0]
34015a12:	4a31      	ldr	r2, [pc, #196]	@ (34015ad8 <HAL_UART_Init+0x2a0>)
34015a14:	4293      	cmp	r3, r2
34015a16:	d018      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a18:	687b      	ldr	r3, [r7, #4]
34015a1a:	681b      	ldr	r3, [r3, #0]
34015a1c:	4a2f      	ldr	r2, [pc, #188]	@ (34015adc <HAL_UART_Init+0x2a4>)
34015a1e:	4293      	cmp	r3, r2
34015a20:	d013      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a22:	687b      	ldr	r3, [r7, #4]
34015a24:	681b      	ldr	r3, [r3, #0]
34015a26:	4a2e      	ldr	r2, [pc, #184]	@ (34015ae0 <HAL_UART_Init+0x2a8>)
34015a28:	4293      	cmp	r3, r2
34015a2a:	d00e      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a2c:	687b      	ldr	r3, [r7, #4]
34015a2e:	681b      	ldr	r3, [r3, #0]
34015a30:	4a2c      	ldr	r2, [pc, #176]	@ (34015ae4 <HAL_UART_Init+0x2ac>)
34015a32:	4293      	cmp	r3, r2
34015a34:	d009      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a36:	687b      	ldr	r3, [r7, #4]
34015a38:	681b      	ldr	r3, [r3, #0]
34015a3a:	4a2b      	ldr	r2, [pc, #172]	@ (34015ae8 <HAL_UART_Init+0x2b0>)
34015a3c:	4293      	cmp	r3, r2
34015a3e:	d004      	beq.n	34015a4a <HAL_UART_Init+0x212>
34015a40:	f44f 71a2 	mov.w	r1, #324	@ 0x144
34015a44:	4829      	ldr	r0, [pc, #164]	@ (34015aec <HAL_UART_Init+0x2b4>)
34015a46:	f7ec f929 	bl	34001c9c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34015a4a:	687b      	ldr	r3, [r7, #4]
34015a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015a50:	2b00      	cmp	r3, #0
34015a52:	d106      	bne.n	34015a62 <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
34015a54:	687b      	ldr	r3, [r7, #4]
34015a56:	2200      	movs	r2, #0
34015a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34015a5c:	6878      	ldr	r0, [r7, #4]
34015a5e:	f000 f867 	bl	34015b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
34015a62:	687b      	ldr	r3, [r7, #4]
34015a64:	2224      	movs	r2, #36	@ 0x24
34015a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34015a6a:	687b      	ldr	r3, [r7, #4]
34015a6c:	681b      	ldr	r3, [r3, #0]
34015a6e:	681a      	ldr	r2, [r3, #0]
34015a70:	687b      	ldr	r3, [r7, #4]
34015a72:	681b      	ldr	r3, [r3, #0]
34015a74:	f022 0201 	bic.w	r2, r2, #1
34015a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34015a7a:	687b      	ldr	r3, [r7, #4]
34015a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015a7e:	2b00      	cmp	r3, #0
34015a80:	d002      	beq.n	34015a88 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
34015a82:	6878      	ldr	r0, [r7, #4]
34015a84:	f000 fbb8 	bl	340161f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34015a88:	6878      	ldr	r0, [r7, #4]
34015a8a:	f000 f8e9 	bl	34015c60 <UART_SetConfig>
34015a8e:	4603      	mov	r3, r0
34015a90:	2b01      	cmp	r3, #1
34015a92:	d12d      	bne.n	34015af0 <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
34015a94:	2301      	movs	r3, #1
34015a96:	e047      	b.n	34015b28 <HAL_UART_Init+0x2f0>
34015a98:	52001000 	.word	0x52001000
34015a9c:	42001000 	.word	0x42001000
34015aa0:	50004400 	.word	0x50004400
34015aa4:	40004400 	.word	0x40004400
34015aa8:	50004800 	.word	0x50004800
34015aac:	40004800 	.word	0x40004800
34015ab0:	50004c00 	.word	0x50004c00
34015ab4:	40004c00 	.word	0x40004c00
34015ab8:	40005000 	.word	0x40005000
34015abc:	52001400 	.word	0x52001400
34015ac0:	42001400 	.word	0x42001400
34015ac4:	50007800 	.word	0x50007800
34015ac8:	40007800 	.word	0x40007800
34015acc:	50007c00 	.word	0x50007c00
34015ad0:	40007c00 	.word	0x40007c00
34015ad4:	52001800 	.word	0x52001800
34015ad8:	42001800 	.word	0x42001800
34015adc:	52001c00 	.word	0x52001c00
34015ae0:	42001c00 	.word	0x42001c00
34015ae4:	56000c00 	.word	0x56000c00
34015ae8:	46000c00 	.word	0x46000c00
34015aec:	3401e9fc 	.word	0x3401e9fc
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
34015af0:	687b      	ldr	r3, [r7, #4]
34015af2:	681b      	ldr	r3, [r3, #0]
34015af4:	685a      	ldr	r2, [r3, #4]
34015af6:	687b      	ldr	r3, [r7, #4]
34015af8:	681b      	ldr	r3, [r3, #0]
34015afa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
34015afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
34015b00:	687b      	ldr	r3, [r7, #4]
34015b02:	681b      	ldr	r3, [r3, #0]
34015b04:	689a      	ldr	r2, [r3, #8]
34015b06:	687b      	ldr	r3, [r7, #4]
34015b08:	681b      	ldr	r3, [r3, #0]
34015b0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
34015b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
34015b10:	687b      	ldr	r3, [r7, #4]
34015b12:	681b      	ldr	r3, [r3, #0]
34015b14:	681a      	ldr	r2, [r3, #0]
34015b16:	687b      	ldr	r3, [r7, #4]
34015b18:	681b      	ldr	r3, [r3, #0]
34015b1a:	f042 0201 	orr.w	r2, r2, #1
34015b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
34015b20:	6878      	ldr	r0, [r7, #4]
34015b22:	f000 fd33 	bl	3401658c <UART_CheckIdleState>
34015b26:	4603      	mov	r3, r0
}
34015b28:	4618      	mov	r0, r3
34015b2a:	3708      	adds	r7, #8
34015b2c:	46bd      	mov	sp, r7
34015b2e:	bd80      	pop	{r7, pc}

34015b30 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
34015b30:	b480      	push	{r7}
34015b32:	b083      	sub	sp, #12
34015b34:	af00      	add	r7, sp, #0
34015b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
34015b38:	bf00      	nop
34015b3a:	370c      	adds	r7, #12
34015b3c:	46bd      	mov	sp, r7
34015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34015b42:	4770      	bx	lr

34015b44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34015b44:	b580      	push	{r7, lr}
34015b46:	b08a      	sub	sp, #40	@ 0x28
34015b48:	af02      	add	r7, sp, #8
34015b4a:	60f8      	str	r0, [r7, #12]
34015b4c:	60b9      	str	r1, [r7, #8]
34015b4e:	603b      	str	r3, [r7, #0]
34015b50:	4613      	mov	r3, r2
34015b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
34015b54:	68fb      	ldr	r3, [r7, #12]
34015b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015b5a:	2b20      	cmp	r3, #32
34015b5c:	d17b      	bne.n	34015c56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
34015b5e:	68bb      	ldr	r3, [r7, #8]
34015b60:	2b00      	cmp	r3, #0
34015b62:	d002      	beq.n	34015b6a <HAL_UART_Transmit+0x26>
34015b64:	88fb      	ldrh	r3, [r7, #6]
34015b66:	2b00      	cmp	r3, #0
34015b68:	d101      	bne.n	34015b6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34015b6a:	2301      	movs	r3, #1
34015b6c:	e074      	b.n	34015c58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
34015b6e:	68fb      	ldr	r3, [r7, #12]
34015b70:	2200      	movs	r2, #0
34015b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
34015b76:	68fb      	ldr	r3, [r7, #12]
34015b78:	2221      	movs	r2, #33	@ 0x21
34015b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
34015b7e:	f7ee f8af 	bl	34003ce0 <HAL_GetTick>
34015b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
34015b84:	68fb      	ldr	r3, [r7, #12]
34015b86:	88fa      	ldrh	r2, [r7, #6]
34015b88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34015b8c:	68fb      	ldr	r3, [r7, #12]
34015b8e:	88fa      	ldrh	r2, [r7, #6]
34015b90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
34015b94:	68fb      	ldr	r3, [r7, #12]
34015b96:	689b      	ldr	r3, [r3, #8]
34015b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015b9c:	d108      	bne.n	34015bb0 <HAL_UART_Transmit+0x6c>
34015b9e:	68fb      	ldr	r3, [r7, #12]
34015ba0:	691b      	ldr	r3, [r3, #16]
34015ba2:	2b00      	cmp	r3, #0
34015ba4:	d104      	bne.n	34015bb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
34015ba6:	2300      	movs	r3, #0
34015ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
34015baa:	68bb      	ldr	r3, [r7, #8]
34015bac:	61bb      	str	r3, [r7, #24]
34015bae:	e003      	b.n	34015bb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
34015bb0:	68bb      	ldr	r3, [r7, #8]
34015bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
34015bb4:	2300      	movs	r3, #0
34015bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
34015bb8:	e030      	b.n	34015c1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
34015bba:	683b      	ldr	r3, [r7, #0]
34015bbc:	9300      	str	r3, [sp, #0]
34015bbe:	697b      	ldr	r3, [r7, #20]
34015bc0:	2200      	movs	r2, #0
34015bc2:	2180      	movs	r1, #128	@ 0x80
34015bc4:	68f8      	ldr	r0, [r7, #12]
34015bc6:	f000 fd8b 	bl	340166e0 <UART_WaitOnFlagUntilTimeout>
34015bca:	4603      	mov	r3, r0
34015bcc:	2b00      	cmp	r3, #0
34015bce:	d005      	beq.n	34015bdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
34015bd0:	68fb      	ldr	r3, [r7, #12]
34015bd2:	2220      	movs	r2, #32
34015bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
34015bd8:	2303      	movs	r3, #3
34015bda:	e03d      	b.n	34015c58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
34015bdc:	69fb      	ldr	r3, [r7, #28]
34015bde:	2b00      	cmp	r3, #0
34015be0:	d10b      	bne.n	34015bfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
34015be2:	69bb      	ldr	r3, [r7, #24]
34015be4:	881b      	ldrh	r3, [r3, #0]
34015be6:	461a      	mov	r2, r3
34015be8:	68fb      	ldr	r3, [r7, #12]
34015bea:	681b      	ldr	r3, [r3, #0]
34015bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
34015bf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
34015bf2:	69bb      	ldr	r3, [r7, #24]
34015bf4:	3302      	adds	r3, #2
34015bf6:	61bb      	str	r3, [r7, #24]
34015bf8:	e007      	b.n	34015c0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
34015bfa:	69fb      	ldr	r3, [r7, #28]
34015bfc:	781a      	ldrb	r2, [r3, #0]
34015bfe:	68fb      	ldr	r3, [r7, #12]
34015c00:	681b      	ldr	r3, [r3, #0]
34015c02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
34015c04:	69fb      	ldr	r3, [r7, #28]
34015c06:	3301      	adds	r3, #1
34015c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
34015c0a:	68fb      	ldr	r3, [r7, #12]
34015c0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34015c10:	b29b      	uxth	r3, r3
34015c12:	3b01      	subs	r3, #1
34015c14:	b29a      	uxth	r2, r3
34015c16:	68fb      	ldr	r3, [r7, #12]
34015c18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
34015c1c:	68fb      	ldr	r3, [r7, #12]
34015c1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
34015c22:	b29b      	uxth	r3, r3
34015c24:	2b00      	cmp	r3, #0
34015c26:	d1c8      	bne.n	34015bba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
34015c28:	683b      	ldr	r3, [r7, #0]
34015c2a:	9300      	str	r3, [sp, #0]
34015c2c:	697b      	ldr	r3, [r7, #20]
34015c2e:	2200      	movs	r2, #0
34015c30:	2140      	movs	r1, #64	@ 0x40
34015c32:	68f8      	ldr	r0, [r7, #12]
34015c34:	f000 fd54 	bl	340166e0 <UART_WaitOnFlagUntilTimeout>
34015c38:	4603      	mov	r3, r0
34015c3a:	2b00      	cmp	r3, #0
34015c3c:	d005      	beq.n	34015c4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
34015c3e:	68fb      	ldr	r3, [r7, #12]
34015c40:	2220      	movs	r2, #32
34015c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
34015c46:	2303      	movs	r3, #3
34015c48:	e006      	b.n	34015c58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
34015c4a:	68fb      	ldr	r3, [r7, #12]
34015c4c:	2220      	movs	r2, #32
34015c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
34015c52:	2300      	movs	r3, #0
34015c54:	e000      	b.n	34015c58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
34015c56:	2302      	movs	r3, #2
  }
}
34015c58:	4618      	mov	r0, r3
34015c5a:	3720      	adds	r7, #32
34015c5c:	46bd      	mov	sp, r7
34015c5e:	bd80      	pop	{r7, pc}

34015c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
34015c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34015c64:	b090      	sub	sp, #64	@ 0x40
34015c66:	af00      	add	r7, sp, #0
34015c68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34015c6a:	2300      	movs	r3, #0
34015c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34015c70:	697b      	ldr	r3, [r7, #20]
34015c72:	685b      	ldr	r3, [r3, #4]
34015c74:	4a19      	ldr	r2, [pc, #100]	@ (34015cdc <UART_SetConfig+0x7c>)
34015c76:	4293      	cmp	r3, r2
34015c78:	d904      	bls.n	34015c84 <UART_SetConfig+0x24>
34015c7a:	f640 414f 	movw	r1, #3151	@ 0xc4f
34015c7e:	4818      	ldr	r0, [pc, #96]	@ (34015ce0 <UART_SetConfig+0x80>)
34015c80:	f7ec f80c 	bl	34001c9c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34015c84:	697b      	ldr	r3, [r7, #20]
34015c86:	689b      	ldr	r3, [r3, #8]
34015c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015c8c:	d00d      	beq.n	34015caa <UART_SetConfig+0x4a>
34015c8e:	697b      	ldr	r3, [r7, #20]
34015c90:	689b      	ldr	r3, [r3, #8]
34015c92:	2b00      	cmp	r3, #0
34015c94:	d009      	beq.n	34015caa <UART_SetConfig+0x4a>
34015c96:	697b      	ldr	r3, [r7, #20]
34015c98:	689b      	ldr	r3, [r3, #8]
34015c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015c9e:	d004      	beq.n	34015caa <UART_SetConfig+0x4a>
34015ca0:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34015ca4:	480e      	ldr	r0, [pc, #56]	@ (34015ce0 <UART_SetConfig+0x80>)
34015ca6:	f7eb fff9 	bl	34001c9c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34015caa:	697b      	ldr	r3, [r7, #20]
34015cac:	681b      	ldr	r3, [r3, #0]
34015cae:	4a0d      	ldr	r2, [pc, #52]	@ (34015ce4 <UART_SetConfig+0x84>)
34015cb0:	4293      	cmp	r3, r2
34015cb2:	d004      	beq.n	34015cbe <UART_SetConfig+0x5e>
34015cb4:	697b      	ldr	r3, [r7, #20]
34015cb6:	681b      	ldr	r3, [r3, #0]
34015cb8:	4a0b      	ldr	r2, [pc, #44]	@ (34015ce8 <UART_SetConfig+0x88>)
34015cba:	4293      	cmp	r3, r2
34015cbc:	d116      	bne.n	34015cec <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
34015cbe:	697b      	ldr	r3, [r7, #20]
34015cc0:	68db      	ldr	r3, [r3, #12]
34015cc2:	2b00      	cmp	r3, #0
34015cc4:	d038      	beq.n	34015d38 <UART_SetConfig+0xd8>
34015cc6:	697b      	ldr	r3, [r7, #20]
34015cc8:	68db      	ldr	r3, [r3, #12]
34015cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015cce:	d033      	beq.n	34015d38 <UART_SetConfig+0xd8>
34015cd0:	f640 4153 	movw	r1, #3155	@ 0xc53
34015cd4:	4802      	ldr	r0, [pc, #8]	@ (34015ce0 <UART_SetConfig+0x80>)
34015cd6:	f7eb ffe1 	bl	34001c9c <assert_failed>
34015cda:	e02d      	b.n	34015d38 <UART_SetConfig+0xd8>
34015cdc:	00bebc1f 	.word	0x00bebc1f
34015ce0:	3401e9fc 	.word	0x3401e9fc
34015ce4:	56000c00 	.word	0x56000c00
34015ce8:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34015cec:	697b      	ldr	r3, [r7, #20]
34015cee:	68db      	ldr	r3, [r3, #12]
34015cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015cf4:	d012      	beq.n	34015d1c <UART_SetConfig+0xbc>
34015cf6:	697b      	ldr	r3, [r7, #20]
34015cf8:	68db      	ldr	r3, [r3, #12]
34015cfa:	2b00      	cmp	r3, #0
34015cfc:	d00e      	beq.n	34015d1c <UART_SetConfig+0xbc>
34015cfe:	697b      	ldr	r3, [r7, #20]
34015d00:	68db      	ldr	r3, [r3, #12]
34015d02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34015d06:	d009      	beq.n	34015d1c <UART_SetConfig+0xbc>
34015d08:	697b      	ldr	r3, [r7, #20]
34015d0a:	68db      	ldr	r3, [r3, #12]
34015d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015d10:	d004      	beq.n	34015d1c <UART_SetConfig+0xbc>
34015d12:	f640 4157 	movw	r1, #3159	@ 0xc57
34015d16:	4896      	ldr	r0, [pc, #600]	@ (34015f70 <UART_SetConfig+0x310>)
34015d18:	f7eb ffc0 	bl	34001c9c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34015d1c:	697b      	ldr	r3, [r7, #20]
34015d1e:	6a1b      	ldr	r3, [r3, #32]
34015d20:	2b00      	cmp	r3, #0
34015d22:	d009      	beq.n	34015d38 <UART_SetConfig+0xd8>
34015d24:	697b      	ldr	r3, [r7, #20]
34015d26:	6a1b      	ldr	r3, [r3, #32]
34015d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34015d2c:	d004      	beq.n	34015d38 <UART_SetConfig+0xd8>
34015d2e:	f640 4158 	movw	r1, #3160	@ 0xc58
34015d32:	488f      	ldr	r0, [pc, #572]	@ (34015f70 <UART_SetConfig+0x310>)
34015d34:	f7eb ffb2 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
34015d38:	697b      	ldr	r3, [r7, #20]
34015d3a:	691b      	ldr	r3, [r3, #16]
34015d3c:	2b00      	cmp	r3, #0
34015d3e:	d00e      	beq.n	34015d5e <UART_SetConfig+0xfe>
34015d40:	697b      	ldr	r3, [r7, #20]
34015d42:	691b      	ldr	r3, [r3, #16]
34015d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34015d48:	d009      	beq.n	34015d5e <UART_SetConfig+0xfe>
34015d4a:	697b      	ldr	r3, [r7, #20]
34015d4c:	691b      	ldr	r3, [r3, #16]
34015d4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34015d52:	d004      	beq.n	34015d5e <UART_SetConfig+0xfe>
34015d54:	f640 415b 	movw	r1, #3163	@ 0xc5b
34015d58:	4885      	ldr	r0, [pc, #532]	@ (34015f70 <UART_SetConfig+0x310>)
34015d5a:	f7eb ff9f 	bl	34001c9c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
34015d5e:	697b      	ldr	r3, [r7, #20]
34015d60:	695b      	ldr	r3, [r3, #20]
34015d62:	f023 030c 	bic.w	r3, r3, #12
34015d66:	2b00      	cmp	r3, #0
34015d68:	d103      	bne.n	34015d72 <UART_SetConfig+0x112>
34015d6a:	697b      	ldr	r3, [r7, #20]
34015d6c:	695b      	ldr	r3, [r3, #20]
34015d6e:	2b00      	cmp	r3, #0
34015d70:	d104      	bne.n	34015d7c <UART_SetConfig+0x11c>
34015d72:	f640 415c 	movw	r1, #3164	@ 0xc5c
34015d76:	487e      	ldr	r0, [pc, #504]	@ (34015f70 <UART_SetConfig+0x310>)
34015d78:	f7eb ff90 	bl	34001c9c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34015d7c:	697b      	ldr	r3, [r7, #20]
34015d7e:	699b      	ldr	r3, [r3, #24]
34015d80:	2b00      	cmp	r3, #0
34015d82:	d013      	beq.n	34015dac <UART_SetConfig+0x14c>
34015d84:	697b      	ldr	r3, [r7, #20]
34015d86:	699b      	ldr	r3, [r3, #24]
34015d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34015d8c:	d00e      	beq.n	34015dac <UART_SetConfig+0x14c>
34015d8e:	697b      	ldr	r3, [r7, #20]
34015d90:	699b      	ldr	r3, [r3, #24]
34015d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015d96:	d009      	beq.n	34015dac <UART_SetConfig+0x14c>
34015d98:	697b      	ldr	r3, [r7, #20]
34015d9a:	699b      	ldr	r3, [r3, #24]
34015d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34015da0:	d004      	beq.n	34015dac <UART_SetConfig+0x14c>
34015da2:	f640 415d 	movw	r1, #3165	@ 0xc5d
34015da6:	4872      	ldr	r0, [pc, #456]	@ (34015f70 <UART_SetConfig+0x310>)
34015da8:	f7eb ff78 	bl	34001c9c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
34015dac:	697b      	ldr	r3, [r7, #20]
34015dae:	69db      	ldr	r3, [r3, #28]
34015db0:	2b00      	cmp	r3, #0
34015db2:	d009      	beq.n	34015dc8 <UART_SetConfig+0x168>
34015db4:	697b      	ldr	r3, [r7, #20]
34015db6:	69db      	ldr	r3, [r3, #28]
34015db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34015dbc:	d004      	beq.n	34015dc8 <UART_SetConfig+0x168>
34015dbe:	f640 415e 	movw	r1, #3166	@ 0xc5e
34015dc2:	486b      	ldr	r0, [pc, #428]	@ (34015f70 <UART_SetConfig+0x310>)
34015dc4:	f7eb ff6a 	bl	34001c9c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34015dc8:	697b      	ldr	r3, [r7, #20]
34015dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dcc:	2b00      	cmp	r3, #0
34015dce:	d030      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015dd0:	697b      	ldr	r3, [r7, #20]
34015dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dd4:	2b01      	cmp	r3, #1
34015dd6:	d02c      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015dd8:	697b      	ldr	r3, [r7, #20]
34015dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015ddc:	2b02      	cmp	r3, #2
34015dde:	d028      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015de0:	697b      	ldr	r3, [r7, #20]
34015de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015de4:	2b03      	cmp	r3, #3
34015de6:	d024      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015de8:	697b      	ldr	r3, [r7, #20]
34015dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dec:	2b04      	cmp	r3, #4
34015dee:	d020      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015df0:	697b      	ldr	r3, [r7, #20]
34015df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015df4:	2b05      	cmp	r3, #5
34015df6:	d01c      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015df8:	697b      	ldr	r3, [r7, #20]
34015dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015dfc:	2b06      	cmp	r3, #6
34015dfe:	d018      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e00:	697b      	ldr	r3, [r7, #20]
34015e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e04:	2b07      	cmp	r3, #7
34015e06:	d014      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e08:	697b      	ldr	r3, [r7, #20]
34015e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e0c:	2b08      	cmp	r3, #8
34015e0e:	d010      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e10:	697b      	ldr	r3, [r7, #20]
34015e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e14:	2b09      	cmp	r3, #9
34015e16:	d00c      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e18:	697b      	ldr	r3, [r7, #20]
34015e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e1c:	2b0a      	cmp	r3, #10
34015e1e:	d008      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e20:	697b      	ldr	r3, [r7, #20]
34015e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015e24:	2b0b      	cmp	r3, #11
34015e26:	d004      	beq.n	34015e32 <UART_SetConfig+0x1d2>
34015e28:	f640 415f 	movw	r1, #3167	@ 0xc5f
34015e2c:	4850      	ldr	r0, [pc, #320]	@ (34015f70 <UART_SetConfig+0x310>)
34015e2e:	f7eb ff35 	bl	34001c9c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34015e32:	697b      	ldr	r3, [r7, #20]
34015e34:	689a      	ldr	r2, [r3, #8]
34015e36:	697b      	ldr	r3, [r7, #20]
34015e38:	691b      	ldr	r3, [r3, #16]
34015e3a:	431a      	orrs	r2, r3
34015e3c:	697b      	ldr	r3, [r7, #20]
34015e3e:	695b      	ldr	r3, [r3, #20]
34015e40:	431a      	orrs	r2, r3
34015e42:	697b      	ldr	r3, [r7, #20]
34015e44:	69db      	ldr	r3, [r3, #28]
34015e46:	4313      	orrs	r3, r2
34015e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34015e4a:	697b      	ldr	r3, [r7, #20]
34015e4c:	681b      	ldr	r3, [r3, #0]
34015e4e:	681a      	ldr	r2, [r3, #0]
34015e50:	4b48      	ldr	r3, [pc, #288]	@ (34015f74 <UART_SetConfig+0x314>)
34015e52:	4013      	ands	r3, r2
34015e54:	697a      	ldr	r2, [r7, #20]
34015e56:	6812      	ldr	r2, [r2, #0]
34015e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015e5a:	430b      	orrs	r3, r1
34015e5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34015e5e:	697b      	ldr	r3, [r7, #20]
34015e60:	681b      	ldr	r3, [r3, #0]
34015e62:	685b      	ldr	r3, [r3, #4]
34015e64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
34015e68:	697b      	ldr	r3, [r7, #20]
34015e6a:	68da      	ldr	r2, [r3, #12]
34015e6c:	697b      	ldr	r3, [r7, #20]
34015e6e:	681b      	ldr	r3, [r3, #0]
34015e70:	430a      	orrs	r2, r1
34015e72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34015e74:	697b      	ldr	r3, [r7, #20]
34015e76:	699b      	ldr	r3, [r3, #24]
34015e78:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
34015e7a:	697b      	ldr	r3, [r7, #20]
34015e7c:	681b      	ldr	r3, [r3, #0]
34015e7e:	4a3e      	ldr	r2, [pc, #248]	@ (34015f78 <UART_SetConfig+0x318>)
34015e80:	4293      	cmp	r3, r2
34015e82:	d009      	beq.n	34015e98 <UART_SetConfig+0x238>
34015e84:	697b      	ldr	r3, [r7, #20]
34015e86:	681b      	ldr	r3, [r3, #0]
34015e88:	4a3c      	ldr	r2, [pc, #240]	@ (34015f7c <UART_SetConfig+0x31c>)
34015e8a:	4293      	cmp	r3, r2
34015e8c:	d004      	beq.n	34015e98 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
34015e8e:	697b      	ldr	r3, [r7, #20]
34015e90:	6a1b      	ldr	r3, [r3, #32]
34015e92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
34015e94:	4313      	orrs	r3, r2
34015e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
34015e98:	697b      	ldr	r3, [r7, #20]
34015e9a:	681b      	ldr	r3, [r3, #0]
34015e9c:	689b      	ldr	r3, [r3, #8]
34015e9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
34015ea2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
34015ea6:	697a      	ldr	r2, [r7, #20]
34015ea8:	6812      	ldr	r2, [r2, #0]
34015eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015eac:	430b      	orrs	r3, r1
34015eae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
34015eb0:	697b      	ldr	r3, [r7, #20]
34015eb2:	681b      	ldr	r3, [r3, #0]
34015eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015eb6:	f023 010f 	bic.w	r1, r3, #15
34015eba:	697b      	ldr	r3, [r7, #20]
34015ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34015ebe:	697b      	ldr	r3, [r7, #20]
34015ec0:	681b      	ldr	r3, [r3, #0]
34015ec2:	430a      	orrs	r2, r1
34015ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
34015ec6:	697b      	ldr	r3, [r7, #20]
34015ec8:	681b      	ldr	r3, [r3, #0]
34015eca:	4a2d      	ldr	r2, [pc, #180]	@ (34015f80 <UART_SetConfig+0x320>)
34015ecc:	4293      	cmp	r3, r2
34015ece:	d106      	bne.n	34015ede <UART_SetConfig+0x27e>
34015ed0:	f04f 0200 	mov.w	r2, #0
34015ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
34015ed8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015edc:	e092      	b.n	34016004 <UART_SetConfig+0x3a4>
34015ede:	697b      	ldr	r3, [r7, #20]
34015ee0:	681b      	ldr	r3, [r3, #0]
34015ee2:	4a28      	ldr	r2, [pc, #160]	@ (34015f84 <UART_SetConfig+0x324>)
34015ee4:	4293      	cmp	r3, r2
34015ee6:	d106      	bne.n	34015ef6 <UART_SetConfig+0x296>
34015ee8:	f04f 0200 	mov.w	r2, #0
34015eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
34015ef0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015ef4:	e086      	b.n	34016004 <UART_SetConfig+0x3a4>
34015ef6:	697b      	ldr	r3, [r7, #20]
34015ef8:	681b      	ldr	r3, [r3, #0]
34015efa:	4a23      	ldr	r2, [pc, #140]	@ (34015f88 <UART_SetConfig+0x328>)
34015efc:	4293      	cmp	r3, r2
34015efe:	d106      	bne.n	34015f0e <UART_SetConfig+0x2ae>
34015f00:	f04f 0200 	mov.w	r2, #0
34015f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34015f08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f0c:	e07a      	b.n	34016004 <UART_SetConfig+0x3a4>
34015f0e:	697b      	ldr	r3, [r7, #20]
34015f10:	681b      	ldr	r3, [r3, #0]
34015f12:	4a1e      	ldr	r2, [pc, #120]	@ (34015f8c <UART_SetConfig+0x32c>)
34015f14:	4293      	cmp	r3, r2
34015f16:	d106      	bne.n	34015f26 <UART_SetConfig+0x2c6>
34015f18:	f04f 0200 	mov.w	r2, #0
34015f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34015f20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f24:	e06e      	b.n	34016004 <UART_SetConfig+0x3a4>
34015f26:	697b      	ldr	r3, [r7, #20]
34015f28:	681b      	ldr	r3, [r3, #0]
34015f2a:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34015f2e:	d106      	bne.n	34015f3e <UART_SetConfig+0x2de>
34015f30:	f04f 0200 	mov.w	r2, #0
34015f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34015f38:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f3c:	e062      	b.n	34016004 <UART_SetConfig+0x3a4>
34015f3e:	697b      	ldr	r3, [r7, #20]
34015f40:	681b      	ldr	r3, [r3, #0]
34015f42:	4a13      	ldr	r2, [pc, #76]	@ (34015f90 <UART_SetConfig+0x330>)
34015f44:	4293      	cmp	r3, r2
34015f46:	d106      	bne.n	34015f56 <UART_SetConfig+0x2f6>
34015f48:	f04f 0200 	mov.w	r2, #0
34015f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34015f50:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f54:	e056      	b.n	34016004 <UART_SetConfig+0x3a4>
34015f56:	697b      	ldr	r3, [r7, #20]
34015f58:	681b      	ldr	r3, [r3, #0]
34015f5a:	4a0e      	ldr	r2, [pc, #56]	@ (34015f94 <UART_SetConfig+0x334>)
34015f5c:	4293      	cmp	r3, r2
34015f5e:	d11b      	bne.n	34015f98 <UART_SetConfig+0x338>
34015f60:	f04f 0200 	mov.w	r2, #0
34015f64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34015f68:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015f6c:	e04a      	b.n	34016004 <UART_SetConfig+0x3a4>
34015f6e:	bf00      	nop
34015f70:	3401e9fc 	.word	0x3401e9fc
34015f74:	cfff69f3 	.word	0xcfff69f3
34015f78:	56000c00 	.word	0x56000c00
34015f7c:	46000c00 	.word	0x46000c00
34015f80:	52001000 	.word	0x52001000
34015f84:	50004400 	.word	0x50004400
34015f88:	50004800 	.word	0x50004800
34015f8c:	50004c00 	.word	0x50004c00
34015f90:	52001400 	.word	0x52001400
34015f94:	50007800 	.word	0x50007800
34015f98:	697b      	ldr	r3, [r7, #20]
34015f9a:	681b      	ldr	r3, [r3, #0]
34015f9c:	4a90      	ldr	r2, [pc, #576]	@ (340161e0 <UART_SetConfig+0x580>)
34015f9e:	4293      	cmp	r3, r2
34015fa0:	d106      	bne.n	34015fb0 <UART_SetConfig+0x350>
34015fa2:	f04f 0200 	mov.w	r2, #0
34015fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34015faa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fae:	e029      	b.n	34016004 <UART_SetConfig+0x3a4>
34015fb0:	697b      	ldr	r3, [r7, #20]
34015fb2:	681b      	ldr	r3, [r3, #0]
34015fb4:	4a8b      	ldr	r2, [pc, #556]	@ (340161e4 <UART_SetConfig+0x584>)
34015fb6:	4293      	cmp	r3, r2
34015fb8:	d106      	bne.n	34015fc8 <UART_SetConfig+0x368>
34015fba:	f04f 0200 	mov.w	r2, #0
34015fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34015fc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fc6:	e01d      	b.n	34016004 <UART_SetConfig+0x3a4>
34015fc8:	697b      	ldr	r3, [r7, #20]
34015fca:	681b      	ldr	r3, [r3, #0]
34015fcc:	4a86      	ldr	r2, [pc, #536]	@ (340161e8 <UART_SetConfig+0x588>)
34015fce:	4293      	cmp	r3, r2
34015fd0:	d106      	bne.n	34015fe0 <UART_SetConfig+0x380>
34015fd2:	f04f 0200 	mov.w	r2, #0
34015fd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34015fda:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015fde:	e011      	b.n	34016004 <UART_SetConfig+0x3a4>
34015fe0:	697b      	ldr	r3, [r7, #20]
34015fe2:	681b      	ldr	r3, [r3, #0]
34015fe4:	4a81      	ldr	r2, [pc, #516]	@ (340161ec <UART_SetConfig+0x58c>)
34015fe6:	4293      	cmp	r3, r2
34015fe8:	d106      	bne.n	34015ff8 <UART_SetConfig+0x398>
34015fea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34015fee:	f04f 0300 	mov.w	r3, #0
34015ff2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015ff6:	e005      	b.n	34016004 <UART_SetConfig+0x3a4>
34015ff8:	f04f 0200 	mov.w	r2, #0
34015ffc:	f04f 0300 	mov.w	r3, #0
34016000:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
34016004:	697b      	ldr	r3, [r7, #20]
34016006:	681b      	ldr	r3, [r3, #0]
34016008:	4a78      	ldr	r2, [pc, #480]	@ (340161ec <UART_SetConfig+0x58c>)
3401600a:	4293      	cmp	r3, r2
3401600c:	d004      	beq.n	34016018 <UART_SetConfig+0x3b8>
3401600e:	697b      	ldr	r3, [r7, #20]
34016010:	681b      	ldr	r3, [r3, #0]
34016012:	4a77      	ldr	r2, [pc, #476]	@ (340161f0 <UART_SetConfig+0x590>)
34016014:	4293      	cmp	r3, r2
34016016:	d166      	bne.n	340160e6 <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34016018:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3401601c:	f7fa f934 	bl	34010288 <HAL_RCCEx_GetPeriphCLKFreq>
34016020:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
34016022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016024:	2b00      	cmp	r3, #0
34016026:	f000 80c6 	beq.w	340161b6 <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401602a:	697b      	ldr	r3, [r7, #20]
3401602c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401602e:	4a71      	ldr	r2, [pc, #452]	@ (340161f4 <UART_SetConfig+0x594>)
34016030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34016034:	461a      	mov	r2, r3
34016036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016038:	fbb3 f3f2 	udiv	r3, r3, r2
3401603c:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401603e:	697b      	ldr	r3, [r7, #20]
34016040:	685a      	ldr	r2, [r3, #4]
34016042:	4613      	mov	r3, r2
34016044:	005b      	lsls	r3, r3, #1
34016046:	4413      	add	r3, r2
34016048:	69fa      	ldr	r2, [r7, #28]
3401604a:	429a      	cmp	r2, r3
3401604c:	d305      	bcc.n	3401605a <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3401604e:	697b      	ldr	r3, [r7, #20]
34016050:	685b      	ldr	r3, [r3, #4]
34016052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34016054:	69fa      	ldr	r2, [r7, #28]
34016056:	429a      	cmp	r2, r3
34016058:	d903      	bls.n	34016062 <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
3401605a:	2301      	movs	r3, #1
3401605c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34016060:	e040      	b.n	340160e4 <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34016062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016064:	2200      	movs	r2, #0
34016066:	60bb      	str	r3, [r7, #8]
34016068:	60fa      	str	r2, [r7, #12]
3401606a:	697b      	ldr	r3, [r7, #20]
3401606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401606e:	4a61      	ldr	r2, [pc, #388]	@ (340161f4 <UART_SetConfig+0x594>)
34016070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34016074:	b29b      	uxth	r3, r3
34016076:	2200      	movs	r2, #0
34016078:	603b      	str	r3, [r7, #0]
3401607a:	607a      	str	r2, [r7, #4]
3401607c:	e9d7 2300 	ldrd	r2, r3, [r7]
34016080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34016084:	f7ea fb8c 	bl	340007a0 <__aeabi_uldivmod>
34016088:	4602      	mov	r2, r0
3401608a:	460b      	mov	r3, r1
3401608c:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
34016090:	6979      	ldr	r1, [r7, #20]
34016092:	6849      	ldr	r1, [r1, #4]
34016094:	0849      	lsrs	r1, r1, #1
34016096:	2000      	movs	r0, #0
34016098:	460c      	mov	r4, r1
3401609a:	4605      	mov	r5, r0
3401609c:	eb12 0804 	adds.w	r8, r2, r4
340160a0:	eb43 0905 	adc.w	r9, r3, r5
340160a4:	697b      	ldr	r3, [r7, #20]
340160a6:	685b      	ldr	r3, [r3, #4]
340160a8:	2200      	movs	r2, #0
340160aa:	469a      	mov	sl, r3
340160ac:	4693      	mov	fp, r2
340160ae:	4652      	mov	r2, sl
340160b0:	465b      	mov	r3, fp
340160b2:	4640      	mov	r0, r8
340160b4:	4649      	mov	r1, r9
340160b6:	f7ea fb73 	bl	340007a0 <__aeabi_uldivmod>
340160ba:	4602      	mov	r2, r0
340160bc:	460b      	mov	r3, r1
340160be:	4613      	mov	r3, r2
340160c0:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
340160c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340160c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340160c8:	d308      	bcc.n	340160dc <UART_SetConfig+0x47c>
340160ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340160cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340160d0:	d204      	bcs.n	340160dc <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
340160d2:	697b      	ldr	r3, [r7, #20]
340160d4:	681b      	ldr	r3, [r3, #0]
340160d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
340160d8:	60da      	str	r2, [r3, #12]
340160da:	e003      	b.n	340160e4 <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
340160dc:	2301      	movs	r3, #1
340160de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
340160e2:	e068      	b.n	340161b6 <UART_SetConfig+0x556>
340160e4:	e067      	b.n	340161b6 <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
340160e6:	697b      	ldr	r3, [r7, #20]
340160e8:	69db      	ldr	r3, [r3, #28]
340160ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
340160ee:	d138      	bne.n	34016162 <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
340160f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
340160f4:	f7fa f8c8 	bl	34010288 <HAL_RCCEx_GetPeriphCLKFreq>
340160f8:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
340160fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340160fc:	2b00      	cmp	r3, #0
340160fe:	d05a      	beq.n	340161b6 <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34016100:	697b      	ldr	r3, [r7, #20]
34016102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016104:	4a3b      	ldr	r2, [pc, #236]	@ (340161f4 <UART_SetConfig+0x594>)
34016106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3401610a:	461a      	mov	r2, r3
3401610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401610e:	fbb3 f3f2 	udiv	r3, r3, r2
34016112:	005a      	lsls	r2, r3, #1
34016114:	697b      	ldr	r3, [r7, #20]
34016116:	685b      	ldr	r3, [r3, #4]
34016118:	085b      	lsrs	r3, r3, #1
3401611a:	441a      	add	r2, r3
3401611c:	697b      	ldr	r3, [r7, #20]
3401611e:	685b      	ldr	r3, [r3, #4]
34016120:	fbb2 f3f3 	udiv	r3, r2, r3
34016124:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34016126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016128:	2b0f      	cmp	r3, #15
3401612a:	d916      	bls.n	3401615a <UART_SetConfig+0x4fa>
3401612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401612e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016132:	d212      	bcs.n	3401615a <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34016134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016136:	b29b      	uxth	r3, r3
34016138:	f023 030f 	bic.w	r3, r3, #15
3401613c:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3401613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016140:	085b      	lsrs	r3, r3, #1
34016142:	b29b      	uxth	r3, r3
34016144:	f003 0307 	and.w	r3, r3, #7
34016148:	b29a      	uxth	r2, r3
3401614a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3401614c:	4313      	orrs	r3, r2
3401614e:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
34016150:	697b      	ldr	r3, [r7, #20]
34016152:	681b      	ldr	r3, [r3, #0]
34016154:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
34016156:	60da      	str	r2, [r3, #12]
34016158:	e02d      	b.n	340161b6 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
3401615a:	2301      	movs	r3, #1
3401615c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34016160:	e029      	b.n	340161b6 <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34016162:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34016166:	f7fa f88f 	bl	34010288 <HAL_RCCEx_GetPeriphCLKFreq>
3401616a:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3401616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3401616e:	2b00      	cmp	r3, #0
34016170:	d021      	beq.n	340161b6 <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34016172:	697b      	ldr	r3, [r7, #20]
34016174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016176:	4a1f      	ldr	r2, [pc, #124]	@ (340161f4 <UART_SetConfig+0x594>)
34016178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3401617c:	461a      	mov	r2, r3
3401617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016180:	fbb3 f2f2 	udiv	r2, r3, r2
34016184:	697b      	ldr	r3, [r7, #20]
34016186:	685b      	ldr	r3, [r3, #4]
34016188:	085b      	lsrs	r3, r3, #1
3401618a:	441a      	add	r2, r3
3401618c:	697b      	ldr	r3, [r7, #20]
3401618e:	685b      	ldr	r3, [r3, #4]
34016190:	fbb2 f3f3 	udiv	r3, r2, r3
34016194:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34016196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016198:	2b0f      	cmp	r3, #15
3401619a:	d909      	bls.n	340161b0 <UART_SetConfig+0x550>
3401619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401619e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340161a2:	d205      	bcs.n	340161b0 <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
340161a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340161a6:	b29a      	uxth	r2, r3
340161a8:	697b      	ldr	r3, [r7, #20]
340161aa:	681b      	ldr	r3, [r3, #0]
340161ac:	60da      	str	r2, [r3, #12]
340161ae:	e002      	b.n	340161b6 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
340161b0:	2301      	movs	r3, #1
340161b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
340161b6:	697b      	ldr	r3, [r7, #20]
340161b8:	2201      	movs	r2, #1
340161ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
340161be:	697b      	ldr	r3, [r7, #20]
340161c0:	2201      	movs	r2, #1
340161c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
340161c6:	697b      	ldr	r3, [r7, #20]
340161c8:	2200      	movs	r2, #0
340161ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
340161cc:	697b      	ldr	r3, [r7, #20]
340161ce:	2200      	movs	r2, #0
340161d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
340161d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
340161d6:	4618      	mov	r0, r3
340161d8:	3740      	adds	r7, #64	@ 0x40
340161da:	46bd      	mov	sp, r7
340161dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
340161e0:	50007c00 	.word	0x50007c00
340161e4:	52001800 	.word	0x52001800
340161e8:	52001c00 	.word	0x52001c00
340161ec:	56000c00 	.word	0x56000c00
340161f0:	46000c00 	.word	0x46000c00
340161f4:	3401f93c 	.word	0x3401f93c

340161f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
340161f8:	b580      	push	{r7, lr}
340161fa:	b082      	sub	sp, #8
340161fc:	af00      	add	r7, sp, #0
340161fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34016200:	687b      	ldr	r3, [r7, #4]
34016202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016204:	2bff      	cmp	r3, #255	@ 0xff
34016206:	d904      	bls.n	34016212 <UART_AdvFeatureConfig+0x1a>
34016208:	f640 41e4 	movw	r1, #3300	@ 0xce4
3401620c:	4890      	ldr	r0, [pc, #576]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
3401620e:	f7eb fd45 	bl	34001c9c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
34016212:	687b      	ldr	r3, [r7, #4]
34016214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016216:	f003 0308 	and.w	r3, r3, #8
3401621a:	2b00      	cmp	r3, #0
3401621c:	d018      	beq.n	34016250 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3401621e:	687b      	ldr	r3, [r7, #4]
34016220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016222:	2b00      	cmp	r3, #0
34016224:	d009      	beq.n	3401623a <UART_AdvFeatureConfig+0x42>
34016226:	687b      	ldr	r3, [r7, #4]
34016228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3401622e:	d004      	beq.n	3401623a <UART_AdvFeatureConfig+0x42>
34016230:	f640 41e9 	movw	r1, #3305	@ 0xce9
34016234:	4886      	ldr	r0, [pc, #536]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
34016236:	f7eb fd31 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3401623a:	687b      	ldr	r3, [r7, #4]
3401623c:	681b      	ldr	r3, [r3, #0]
3401623e:	685b      	ldr	r3, [r3, #4]
34016240:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
34016244:	687b      	ldr	r3, [r7, #4]
34016246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34016248:	687b      	ldr	r3, [r7, #4]
3401624a:	681b      	ldr	r3, [r3, #0]
3401624c:	430a      	orrs	r2, r1
3401624e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
34016250:	687b      	ldr	r3, [r7, #4]
34016252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016254:	f003 0301 	and.w	r3, r3, #1
34016258:	2b00      	cmp	r3, #0
3401625a:	d018      	beq.n	3401628e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3401625c:	687b      	ldr	r3, [r7, #4]
3401625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016260:	2b00      	cmp	r3, #0
34016262:	d009      	beq.n	34016278 <UART_AdvFeatureConfig+0x80>
34016264:	687b      	ldr	r3, [r7, #4]
34016266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401626c:	d004      	beq.n	34016278 <UART_AdvFeatureConfig+0x80>
3401626e:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
34016272:	4877      	ldr	r0, [pc, #476]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
34016274:	f7eb fd12 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
34016278:	687b      	ldr	r3, [r7, #4]
3401627a:	681b      	ldr	r3, [r3, #0]
3401627c:	685b      	ldr	r3, [r3, #4]
3401627e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
34016282:	687b      	ldr	r3, [r7, #4]
34016284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34016286:	687b      	ldr	r3, [r7, #4]
34016288:	681b      	ldr	r3, [r3, #0]
3401628a:	430a      	orrs	r2, r1
3401628c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3401628e:	687b      	ldr	r3, [r7, #4]
34016290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016292:	f003 0302 	and.w	r3, r3, #2
34016296:	2b00      	cmp	r3, #0
34016298:	d018      	beq.n	340162cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3401629a:	687b      	ldr	r3, [r7, #4]
3401629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401629e:	2b00      	cmp	r3, #0
340162a0:	d009      	beq.n	340162b6 <UART_AdvFeatureConfig+0xbe>
340162a2:	687b      	ldr	r3, [r7, #4]
340162a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340162a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340162aa:	d004      	beq.n	340162b6 <UART_AdvFeatureConfig+0xbe>
340162ac:	f640 41f7 	movw	r1, #3319	@ 0xcf7
340162b0:	4867      	ldr	r0, [pc, #412]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
340162b2:	f7eb fcf3 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
340162b6:	687b      	ldr	r3, [r7, #4]
340162b8:	681b      	ldr	r3, [r3, #0]
340162ba:	685b      	ldr	r3, [r3, #4]
340162bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340162c0:	687b      	ldr	r3, [r7, #4]
340162c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340162c4:	687b      	ldr	r3, [r7, #4]
340162c6:	681b      	ldr	r3, [r3, #0]
340162c8:	430a      	orrs	r2, r1
340162ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
340162cc:	687b      	ldr	r3, [r7, #4]
340162ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340162d0:	f003 0304 	and.w	r3, r3, #4
340162d4:	2b00      	cmp	r3, #0
340162d6:	d018      	beq.n	3401630a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
340162d8:	687b      	ldr	r3, [r7, #4]
340162da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340162dc:	2b00      	cmp	r3, #0
340162de:	d009      	beq.n	340162f4 <UART_AdvFeatureConfig+0xfc>
340162e0:	687b      	ldr	r3, [r7, #4]
340162e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340162e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340162e8:	d004      	beq.n	340162f4 <UART_AdvFeatureConfig+0xfc>
340162ea:	f640 41fe 	movw	r1, #3326	@ 0xcfe
340162ee:	4858      	ldr	r0, [pc, #352]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
340162f0:	f7eb fcd4 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
340162f4:	687b      	ldr	r3, [r7, #4]
340162f6:	681b      	ldr	r3, [r3, #0]
340162f8:	685b      	ldr	r3, [r3, #4]
340162fa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
340162fe:	687b      	ldr	r3, [r7, #4]
34016300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34016302:	687b      	ldr	r3, [r7, #4]
34016304:	681b      	ldr	r3, [r3, #0]
34016306:	430a      	orrs	r2, r1
34016308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3401630a:	687b      	ldr	r3, [r7, #4]
3401630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401630e:	f003 0310 	and.w	r3, r3, #16
34016312:	2b00      	cmp	r3, #0
34016314:	d018      	beq.n	34016348 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
34016316:	687b      	ldr	r3, [r7, #4]
34016318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3401631a:	2b00      	cmp	r3, #0
3401631c:	d009      	beq.n	34016332 <UART_AdvFeatureConfig+0x13a>
3401631e:	687b      	ldr	r3, [r7, #4]
34016320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34016326:	d004      	beq.n	34016332 <UART_AdvFeatureConfig+0x13a>
34016328:	f640 5105 	movw	r1, #3333	@ 0xd05
3401632c:	4848      	ldr	r0, [pc, #288]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
3401632e:	f7eb fcb5 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
34016332:	687b      	ldr	r3, [r7, #4]
34016334:	681b      	ldr	r3, [r3, #0]
34016336:	689b      	ldr	r3, [r3, #8]
34016338:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3401633c:	687b      	ldr	r3, [r7, #4]
3401633e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
34016340:	687b      	ldr	r3, [r7, #4]
34016342:	681b      	ldr	r3, [r3, #0]
34016344:	430a      	orrs	r2, r1
34016346:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
34016348:	687b      	ldr	r3, [r7, #4]
3401634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401634c:	f003 0320 	and.w	r3, r3, #32
34016350:	2b00      	cmp	r3, #0
34016352:	d018      	beq.n	34016386 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
34016354:	687b      	ldr	r3, [r7, #4]
34016356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016358:	2b00      	cmp	r3, #0
3401635a:	d009      	beq.n	34016370 <UART_AdvFeatureConfig+0x178>
3401635c:	687b      	ldr	r3, [r7, #4]
3401635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34016364:	d004      	beq.n	34016370 <UART_AdvFeatureConfig+0x178>
34016366:	f640 510d 	movw	r1, #3341	@ 0xd0d
3401636a:	4839      	ldr	r0, [pc, #228]	@ (34016450 <UART_AdvFeatureConfig+0x258>)
3401636c:	f7eb fc96 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
34016370:	687b      	ldr	r3, [r7, #4]
34016372:	681b      	ldr	r3, [r3, #0]
34016374:	689b      	ldr	r3, [r3, #8]
34016376:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3401637a:	687b      	ldr	r3, [r7, #4]
3401637c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3401637e:	687b      	ldr	r3, [r7, #4]
34016380:	681b      	ldr	r3, [r3, #0]
34016382:	430a      	orrs	r2, r1
34016384:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
34016386:	687b      	ldr	r3, [r7, #4]
34016388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401638a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401638e:	2b00      	cmp	r3, #0
34016390:	f000 80d2 	beq.w	34016538 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
34016394:	687b      	ldr	r3, [r7, #4]
34016396:	681b      	ldr	r3, [r3, #0]
34016398:	4a2e      	ldr	r2, [pc, #184]	@ (34016454 <UART_AdvFeatureConfig+0x25c>)
3401639a:	4293      	cmp	r3, r2
3401639c:	f000 808b 	beq.w	340164b6 <UART_AdvFeatureConfig+0x2be>
340163a0:	687b      	ldr	r3, [r7, #4]
340163a2:	681b      	ldr	r3, [r3, #0]
340163a4:	4a2c      	ldr	r2, [pc, #176]	@ (34016458 <UART_AdvFeatureConfig+0x260>)
340163a6:	4293      	cmp	r3, r2
340163a8:	f000 8085 	beq.w	340164b6 <UART_AdvFeatureConfig+0x2be>
340163ac:	687b      	ldr	r3, [r7, #4]
340163ae:	681b      	ldr	r3, [r3, #0]
340163b0:	4a2a      	ldr	r2, [pc, #168]	@ (3401645c <UART_AdvFeatureConfig+0x264>)
340163b2:	4293      	cmp	r3, r2
340163b4:	d07f      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163b6:	687b      	ldr	r3, [r7, #4]
340163b8:	681b      	ldr	r3, [r3, #0]
340163ba:	4a29      	ldr	r2, [pc, #164]	@ (34016460 <UART_AdvFeatureConfig+0x268>)
340163bc:	4293      	cmp	r3, r2
340163be:	d07a      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163c0:	687b      	ldr	r3, [r7, #4]
340163c2:	681b      	ldr	r3, [r3, #0]
340163c4:	4a27      	ldr	r2, [pc, #156]	@ (34016464 <UART_AdvFeatureConfig+0x26c>)
340163c6:	4293      	cmp	r3, r2
340163c8:	d075      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163ca:	687b      	ldr	r3, [r7, #4]
340163cc:	681b      	ldr	r3, [r3, #0]
340163ce:	4a26      	ldr	r2, [pc, #152]	@ (34016468 <UART_AdvFeatureConfig+0x270>)
340163d0:	4293      	cmp	r3, r2
340163d2:	d070      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163d4:	687b      	ldr	r3, [r7, #4]
340163d6:	681b      	ldr	r3, [r3, #0]
340163d8:	4a24      	ldr	r2, [pc, #144]	@ (3401646c <UART_AdvFeatureConfig+0x274>)
340163da:	4293      	cmp	r3, r2
340163dc:	d06b      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163de:	687b      	ldr	r3, [r7, #4]
340163e0:	681b      	ldr	r3, [r3, #0]
340163e2:	4a23      	ldr	r2, [pc, #140]	@ (34016470 <UART_AdvFeatureConfig+0x278>)
340163e4:	4293      	cmp	r3, r2
340163e6:	d066      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163e8:	687b      	ldr	r3, [r7, #4]
340163ea:	681b      	ldr	r3, [r3, #0]
340163ec:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340163f0:	d061      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163f2:	687b      	ldr	r3, [r7, #4]
340163f4:	681b      	ldr	r3, [r3, #0]
340163f6:	4a1f      	ldr	r2, [pc, #124]	@ (34016474 <UART_AdvFeatureConfig+0x27c>)
340163f8:	4293      	cmp	r3, r2
340163fa:	d05c      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340163fc:	687b      	ldr	r3, [r7, #4]
340163fe:	681b      	ldr	r3, [r3, #0]
34016400:	4a1d      	ldr	r2, [pc, #116]	@ (34016478 <UART_AdvFeatureConfig+0x280>)
34016402:	4293      	cmp	r3, r2
34016404:	d057      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
34016406:	687b      	ldr	r3, [r7, #4]
34016408:	681b      	ldr	r3, [r3, #0]
3401640a:	4a1c      	ldr	r2, [pc, #112]	@ (3401647c <UART_AdvFeatureConfig+0x284>)
3401640c:	4293      	cmp	r3, r2
3401640e:	d052      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
34016410:	687b      	ldr	r3, [r7, #4]
34016412:	681b      	ldr	r3, [r3, #0]
34016414:	4a1a      	ldr	r2, [pc, #104]	@ (34016480 <UART_AdvFeatureConfig+0x288>)
34016416:	4293      	cmp	r3, r2
34016418:	d04d      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
3401641a:	687b      	ldr	r3, [r7, #4]
3401641c:	681b      	ldr	r3, [r3, #0]
3401641e:	4a19      	ldr	r2, [pc, #100]	@ (34016484 <UART_AdvFeatureConfig+0x28c>)
34016420:	4293      	cmp	r3, r2
34016422:	d048      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
34016424:	687b      	ldr	r3, [r7, #4]
34016426:	681b      	ldr	r3, [r3, #0]
34016428:	4a17      	ldr	r2, [pc, #92]	@ (34016488 <UART_AdvFeatureConfig+0x290>)
3401642a:	4293      	cmp	r3, r2
3401642c:	d043      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
3401642e:	687b      	ldr	r3, [r7, #4]
34016430:	681b      	ldr	r3, [r3, #0]
34016432:	4a16      	ldr	r2, [pc, #88]	@ (3401648c <UART_AdvFeatureConfig+0x294>)
34016434:	4293      	cmp	r3, r2
34016436:	d03e      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
34016438:	687b      	ldr	r3, [r7, #4]
3401643a:	681b      	ldr	r3, [r3, #0]
3401643c:	4a14      	ldr	r2, [pc, #80]	@ (34016490 <UART_AdvFeatureConfig+0x298>)
3401643e:	4293      	cmp	r3, r2
34016440:	d039      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
34016442:	687b      	ldr	r3, [r7, #4]
34016444:	681b      	ldr	r3, [r3, #0]
34016446:	4a13      	ldr	r2, [pc, #76]	@ (34016494 <UART_AdvFeatureConfig+0x29c>)
34016448:	4293      	cmp	r3, r2
3401644a:	d034      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
3401644c:	e024      	b.n	34016498 <UART_AdvFeatureConfig+0x2a0>
3401644e:	bf00      	nop
34016450:	3401e9fc 	.word	0x3401e9fc
34016454:	52001000 	.word	0x52001000
34016458:	42001000 	.word	0x42001000
3401645c:	50004400 	.word	0x50004400
34016460:	40004400 	.word	0x40004400
34016464:	50004800 	.word	0x50004800
34016468:	40004800 	.word	0x40004800
3401646c:	50004c00 	.word	0x50004c00
34016470:	40004c00 	.word	0x40004c00
34016474:	40005000 	.word	0x40005000
34016478:	52001400 	.word	0x52001400
3401647c:	42001400 	.word	0x42001400
34016480:	50007800 	.word	0x50007800
34016484:	40007800 	.word	0x40007800
34016488:	50007c00 	.word	0x50007c00
3401648c:	40007c00 	.word	0x40007c00
34016490:	52001800 	.word	0x52001800
34016494:	42001800 	.word	0x42001800
34016498:	687b      	ldr	r3, [r7, #4]
3401649a:	681b      	ldr	r3, [r3, #0]
3401649c:	4a38      	ldr	r2, [pc, #224]	@ (34016580 <UART_AdvFeatureConfig+0x388>)
3401649e:	4293      	cmp	r3, r2
340164a0:	d009      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340164a2:	687b      	ldr	r3, [r7, #4]
340164a4:	681b      	ldr	r3, [r3, #0]
340164a6:	4a37      	ldr	r2, [pc, #220]	@ (34016584 <UART_AdvFeatureConfig+0x38c>)
340164a8:	4293      	cmp	r3, r2
340164aa:	d004      	beq.n	340164b6 <UART_AdvFeatureConfig+0x2be>
340164ac:	f640 5115 	movw	r1, #3349	@ 0xd15
340164b0:	4835      	ldr	r0, [pc, #212]	@ (34016588 <UART_AdvFeatureConfig+0x390>)
340164b2:	f7eb fbf3 	bl	34001c9c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
340164b6:	687b      	ldr	r3, [r7, #4]
340164b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164ba:	2b00      	cmp	r3, #0
340164bc:	d009      	beq.n	340164d2 <UART_AdvFeatureConfig+0x2da>
340164be:	687b      	ldr	r3, [r7, #4]
340164c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340164c6:	d004      	beq.n	340164d2 <UART_AdvFeatureConfig+0x2da>
340164c8:	f640 5116 	movw	r1, #3350	@ 0xd16
340164cc:	482e      	ldr	r0, [pc, #184]	@ (34016588 <UART_AdvFeatureConfig+0x390>)
340164ce:	f7eb fbe5 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
340164d2:	687b      	ldr	r3, [r7, #4]
340164d4:	681b      	ldr	r3, [r3, #0]
340164d6:	685b      	ldr	r3, [r3, #4]
340164d8:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
340164dc:	687b      	ldr	r3, [r7, #4]
340164de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
340164e0:	687b      	ldr	r3, [r7, #4]
340164e2:	681b      	ldr	r3, [r3, #0]
340164e4:	430a      	orrs	r2, r1
340164e6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
340164e8:	687b      	ldr	r3, [r7, #4]
340164ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340164ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340164f0:	d122      	bne.n	34016538 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
340164f2:	687b      	ldr	r3, [r7, #4]
340164f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340164f6:	2b00      	cmp	r3, #0
340164f8:	d013      	beq.n	34016522 <UART_AdvFeatureConfig+0x32a>
340164fa:	687b      	ldr	r3, [r7, #4]
340164fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340164fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016502:	d00e      	beq.n	34016522 <UART_AdvFeatureConfig+0x32a>
34016504:	687b      	ldr	r3, [r7, #4]
34016506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401650c:	d009      	beq.n	34016522 <UART_AdvFeatureConfig+0x32a>
3401650e:	687b      	ldr	r3, [r7, #4]
34016510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016512:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34016516:	d004      	beq.n	34016522 <UART_AdvFeatureConfig+0x32a>
34016518:	f640 511b 	movw	r1, #3355	@ 0xd1b
3401651c:	481a      	ldr	r0, [pc, #104]	@ (34016588 <UART_AdvFeatureConfig+0x390>)
3401651e:	f7eb fbbd 	bl	34001c9c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
34016522:	687b      	ldr	r3, [r7, #4]
34016524:	681b      	ldr	r3, [r3, #0]
34016526:	685b      	ldr	r3, [r3, #4]
34016528:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3401652c:	687b      	ldr	r3, [r7, #4]
3401652e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34016530:	687b      	ldr	r3, [r7, #4]
34016532:	681b      	ldr	r3, [r3, #0]
34016534:	430a      	orrs	r2, r1
34016536:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
34016538:	687b      	ldr	r3, [r7, #4]
3401653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401653c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34016540:	2b00      	cmp	r3, #0
34016542:	d018      	beq.n	34016576 <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
34016544:	687b      	ldr	r3, [r7, #4]
34016546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016548:	2b00      	cmp	r3, #0
3401654a:	d009      	beq.n	34016560 <UART_AdvFeatureConfig+0x368>
3401654c:	687b      	ldr	r3, [r7, #4]
3401654e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016550:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34016554:	d004      	beq.n	34016560 <UART_AdvFeatureConfig+0x368>
34016556:	f640 5123 	movw	r1, #3363	@ 0xd23
3401655a:	480b      	ldr	r0, [pc, #44]	@ (34016588 <UART_AdvFeatureConfig+0x390>)
3401655c:	f7eb fb9e 	bl	34001c9c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34016560:	687b      	ldr	r3, [r7, #4]
34016562:	681b      	ldr	r3, [r3, #0]
34016564:	685b      	ldr	r3, [r3, #4]
34016566:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3401656a:	687b      	ldr	r3, [r7, #4]
3401656c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3401656e:	687b      	ldr	r3, [r7, #4]
34016570:	681b      	ldr	r3, [r3, #0]
34016572:	430a      	orrs	r2, r1
34016574:	605a      	str	r2, [r3, #4]
  }
}
34016576:	bf00      	nop
34016578:	3708      	adds	r7, #8
3401657a:	46bd      	mov	sp, r7
3401657c:	bd80      	pop	{r7, pc}
3401657e:	bf00      	nop
34016580:	52001c00 	.word	0x52001c00
34016584:	42001c00 	.word	0x42001c00
34016588:	3401e9fc 	.word	0x3401e9fc

3401658c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3401658c:	b580      	push	{r7, lr}
3401658e:	b098      	sub	sp, #96	@ 0x60
34016590:	af02      	add	r7, sp, #8
34016592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
34016594:	687b      	ldr	r3, [r7, #4]
34016596:	2200      	movs	r2, #0
34016598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3401659c:	f7ed fba0 	bl	34003ce0 <HAL_GetTick>
340165a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
340165a2:	687b      	ldr	r3, [r7, #4]
340165a4:	681b      	ldr	r3, [r3, #0]
340165a6:	681b      	ldr	r3, [r3, #0]
340165a8:	f003 0308 	and.w	r3, r3, #8
340165ac:	2b08      	cmp	r3, #8
340165ae:	d12f      	bne.n	34016610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
340165b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
340165b4:	9300      	str	r3, [sp, #0]
340165b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340165b8:	2200      	movs	r2, #0
340165ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
340165be:	6878      	ldr	r0, [r7, #4]
340165c0:	f000 f88e 	bl	340166e0 <UART_WaitOnFlagUntilTimeout>
340165c4:	4603      	mov	r3, r0
340165c6:	2b00      	cmp	r3, #0
340165c8:	d022      	beq.n	34016610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
340165ca:	687b      	ldr	r3, [r7, #4]
340165cc:	681b      	ldr	r3, [r3, #0]
340165ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340165d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340165d2:	e853 3f00 	ldrex	r3, [r3]
340165d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
340165d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340165da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
340165de:	653b      	str	r3, [r7, #80]	@ 0x50
340165e0:	687b      	ldr	r3, [r7, #4]
340165e2:	681b      	ldr	r3, [r3, #0]
340165e4:	461a      	mov	r2, r3
340165e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
340165e8:	647b      	str	r3, [r7, #68]	@ 0x44
340165ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340165ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
340165ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
340165f0:	e841 2300 	strex	r3, r2, [r1]
340165f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
340165f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
340165f8:	2b00      	cmp	r3, #0
340165fa:	d1e6      	bne.n	340165ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
340165fc:	687b      	ldr	r3, [r7, #4]
340165fe:	2220      	movs	r2, #32
34016600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
34016604:	687b      	ldr	r3, [r7, #4]
34016606:	2200      	movs	r2, #0
34016608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3401660c:	2303      	movs	r3, #3
3401660e:	e063      	b.n	340166d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
34016610:	687b      	ldr	r3, [r7, #4]
34016612:	681b      	ldr	r3, [r3, #0]
34016614:	681b      	ldr	r3, [r3, #0]
34016616:	f003 0304 	and.w	r3, r3, #4
3401661a:	2b04      	cmp	r3, #4
3401661c:	d149      	bne.n	340166b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401661e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
34016622:	9300      	str	r3, [sp, #0]
34016624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34016626:	2200      	movs	r2, #0
34016628:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3401662c:	6878      	ldr	r0, [r7, #4]
3401662e:	f000 f857 	bl	340166e0 <UART_WaitOnFlagUntilTimeout>
34016632:	4603      	mov	r3, r0
34016634:	2b00      	cmp	r3, #0
34016636:	d03c      	beq.n	340166b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34016638:	687b      	ldr	r3, [r7, #4]
3401663a:	681b      	ldr	r3, [r3, #0]
3401663c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016640:	e853 3f00 	ldrex	r3, [r3]
34016644:	623b      	str	r3, [r7, #32]
   return(result);
34016646:	6a3b      	ldr	r3, [r7, #32]
34016648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3401664c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3401664e:	687b      	ldr	r3, [r7, #4]
34016650:	681b      	ldr	r3, [r3, #0]
34016652:	461a      	mov	r2, r3
34016654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34016656:	633b      	str	r3, [r7, #48]	@ 0x30
34016658:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401665a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3401665c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3401665e:	e841 2300 	strex	r3, r2, [r1]
34016662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
34016664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34016666:	2b00      	cmp	r3, #0
34016668:	d1e6      	bne.n	34016638 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3401666a:	687b      	ldr	r3, [r7, #4]
3401666c:	681b      	ldr	r3, [r3, #0]
3401666e:	3308      	adds	r3, #8
34016670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016672:	693b      	ldr	r3, [r7, #16]
34016674:	e853 3f00 	ldrex	r3, [r3]
34016678:	60fb      	str	r3, [r7, #12]
   return(result);
3401667a:	68fb      	ldr	r3, [r7, #12]
3401667c:	f023 0301 	bic.w	r3, r3, #1
34016680:	64bb      	str	r3, [r7, #72]	@ 0x48
34016682:	687b      	ldr	r3, [r7, #4]
34016684:	681b      	ldr	r3, [r3, #0]
34016686:	3308      	adds	r3, #8
34016688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3401668a:	61fa      	str	r2, [r7, #28]
3401668c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401668e:	69b9      	ldr	r1, [r7, #24]
34016690:	69fa      	ldr	r2, [r7, #28]
34016692:	e841 2300 	strex	r3, r2, [r1]
34016696:	617b      	str	r3, [r7, #20]
   return(result);
34016698:	697b      	ldr	r3, [r7, #20]
3401669a:	2b00      	cmp	r3, #0
3401669c:	d1e5      	bne.n	3401666a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3401669e:	687b      	ldr	r3, [r7, #4]
340166a0:	2220      	movs	r2, #32
340166a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
340166a6:	687b      	ldr	r3, [r7, #4]
340166a8:	2200      	movs	r2, #0
340166aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
340166ae:	2303      	movs	r3, #3
340166b0:	e012      	b.n	340166d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
340166b2:	687b      	ldr	r3, [r7, #4]
340166b4:	2220      	movs	r2, #32
340166b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
340166ba:	687b      	ldr	r3, [r7, #4]
340166bc:	2220      	movs	r2, #32
340166be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
340166c2:	687b      	ldr	r3, [r7, #4]
340166c4:	2200      	movs	r2, #0
340166c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
340166c8:	687b      	ldr	r3, [r7, #4]
340166ca:	2200      	movs	r2, #0
340166cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
340166ce:	687b      	ldr	r3, [r7, #4]
340166d0:	2200      	movs	r2, #0
340166d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
340166d6:	2300      	movs	r3, #0
}
340166d8:	4618      	mov	r0, r3
340166da:	3758      	adds	r7, #88	@ 0x58
340166dc:	46bd      	mov	sp, r7
340166de:	bd80      	pop	{r7, pc}

340166e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
340166e0:	b580      	push	{r7, lr}
340166e2:	b084      	sub	sp, #16
340166e4:	af00      	add	r7, sp, #0
340166e6:	60f8      	str	r0, [r7, #12]
340166e8:	60b9      	str	r1, [r7, #8]
340166ea:	603b      	str	r3, [r7, #0]
340166ec:	4613      	mov	r3, r2
340166ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
340166f0:	e04f      	b.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
340166f2:	69bb      	ldr	r3, [r7, #24]
340166f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
340166f8:	d04b      	beq.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
340166fa:	f7ed faf1 	bl	34003ce0 <HAL_GetTick>
340166fe:	4602      	mov	r2, r0
34016700:	683b      	ldr	r3, [r7, #0]
34016702:	1ad3      	subs	r3, r2, r3
34016704:	69ba      	ldr	r2, [r7, #24]
34016706:	429a      	cmp	r2, r3
34016708:	d302      	bcc.n	34016710 <UART_WaitOnFlagUntilTimeout+0x30>
3401670a:	69bb      	ldr	r3, [r7, #24]
3401670c:	2b00      	cmp	r3, #0
3401670e:	d101      	bne.n	34016714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
34016710:	2303      	movs	r3, #3
34016712:	e04e      	b.n	340167b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
34016714:	68fb      	ldr	r3, [r7, #12]
34016716:	681b      	ldr	r3, [r3, #0]
34016718:	681b      	ldr	r3, [r3, #0]
3401671a:	f003 0304 	and.w	r3, r3, #4
3401671e:	2b00      	cmp	r3, #0
34016720:	d037      	beq.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
34016722:	68bb      	ldr	r3, [r7, #8]
34016724:	2b80      	cmp	r3, #128	@ 0x80
34016726:	d034      	beq.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
34016728:	68bb      	ldr	r3, [r7, #8]
3401672a:	2b40      	cmp	r3, #64	@ 0x40
3401672c:	d031      	beq.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3401672e:	68fb      	ldr	r3, [r7, #12]
34016730:	681b      	ldr	r3, [r3, #0]
34016732:	69db      	ldr	r3, [r3, #28]
34016734:	f003 0308 	and.w	r3, r3, #8
34016738:	2b08      	cmp	r3, #8
3401673a:	d110      	bne.n	3401675e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401673c:	68fb      	ldr	r3, [r7, #12]
3401673e:	681b      	ldr	r3, [r3, #0]
34016740:	2208      	movs	r2, #8
34016742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016744:	68f8      	ldr	r0, [r7, #12]
34016746:	f000 f838 	bl	340167ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3401674a:	68fb      	ldr	r3, [r7, #12]
3401674c:	2208      	movs	r2, #8
3401674e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34016752:	68fb      	ldr	r3, [r7, #12]
34016754:	2200      	movs	r2, #0
34016756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3401675a:	2301      	movs	r3, #1
3401675c:	e029      	b.n	340167b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3401675e:	68fb      	ldr	r3, [r7, #12]
34016760:	681b      	ldr	r3, [r3, #0]
34016762:	69db      	ldr	r3, [r3, #28]
34016764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34016768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401676c:	d111      	bne.n	34016792 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401676e:	68fb      	ldr	r3, [r7, #12]
34016770:	681b      	ldr	r3, [r3, #0]
34016772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34016776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016778:	68f8      	ldr	r0, [r7, #12]
3401677a:	f000 f81e 	bl	340167ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401677e:	68fb      	ldr	r3, [r7, #12]
34016780:	2220      	movs	r2, #32
34016782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34016786:	68fb      	ldr	r3, [r7, #12]
34016788:	2200      	movs	r2, #0
3401678a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3401678e:	2303      	movs	r3, #3
34016790:	e00f      	b.n	340167b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
34016792:	68fb      	ldr	r3, [r7, #12]
34016794:	681b      	ldr	r3, [r3, #0]
34016796:	69da      	ldr	r2, [r3, #28]
34016798:	68bb      	ldr	r3, [r7, #8]
3401679a:	4013      	ands	r3, r2
3401679c:	68ba      	ldr	r2, [r7, #8]
3401679e:	429a      	cmp	r2, r3
340167a0:	bf0c      	ite	eq
340167a2:	2301      	moveq	r3, #1
340167a4:	2300      	movne	r3, #0
340167a6:	b2db      	uxtb	r3, r3
340167a8:	461a      	mov	r2, r3
340167aa:	79fb      	ldrb	r3, [r7, #7]
340167ac:	429a      	cmp	r2, r3
340167ae:	d0a0      	beq.n	340166f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
340167b0:	2300      	movs	r3, #0
}
340167b2:	4618      	mov	r0, r3
340167b4:	3710      	adds	r7, #16
340167b6:	46bd      	mov	sp, r7
340167b8:	bd80      	pop	{r7, pc}

340167ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
340167ba:	b480      	push	{r7}
340167bc:	b095      	sub	sp, #84	@ 0x54
340167be:	af00      	add	r7, sp, #0
340167c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
340167c2:	687b      	ldr	r3, [r7, #4]
340167c4:	681b      	ldr	r3, [r3, #0]
340167c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340167c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340167ca:	e853 3f00 	ldrex	r3, [r3]
340167ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
340167d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340167d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
340167d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
340167d8:	687b      	ldr	r3, [r7, #4]
340167da:	681b      	ldr	r3, [r3, #0]
340167dc:	461a      	mov	r2, r3
340167de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340167e0:	643b      	str	r3, [r7, #64]	@ 0x40
340167e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340167e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340167e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
340167e8:	e841 2300 	strex	r3, r2, [r1]
340167ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
340167ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340167f0:	2b00      	cmp	r3, #0
340167f2:	d1e6      	bne.n	340167c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
340167f4:	687b      	ldr	r3, [r7, #4]
340167f6:	681b      	ldr	r3, [r3, #0]
340167f8:	3308      	adds	r3, #8
340167fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340167fc:	6a3b      	ldr	r3, [r7, #32]
340167fe:	e853 3f00 	ldrex	r3, [r3]
34016802:	61fb      	str	r3, [r7, #28]
   return(result);
34016804:	69fb      	ldr	r3, [r7, #28]
34016806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3401680a:	f023 0301 	bic.w	r3, r3, #1
3401680e:	64bb      	str	r3, [r7, #72]	@ 0x48
34016810:	687b      	ldr	r3, [r7, #4]
34016812:	681b      	ldr	r3, [r3, #0]
34016814:	3308      	adds	r3, #8
34016816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016818:	62fa      	str	r2, [r7, #44]	@ 0x2c
3401681a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401681c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3401681e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34016820:	e841 2300 	strex	r3, r2, [r1]
34016824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
34016826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016828:	2b00      	cmp	r3, #0
3401682a:	d1e3      	bne.n	340167f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3401682c:	687b      	ldr	r3, [r7, #4]
3401682e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34016830:	2b01      	cmp	r3, #1
34016832:	d118      	bne.n	34016866 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
34016834:	687b      	ldr	r3, [r7, #4]
34016836:	681b      	ldr	r3, [r3, #0]
34016838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401683a:	68fb      	ldr	r3, [r7, #12]
3401683c:	e853 3f00 	ldrex	r3, [r3]
34016840:	60bb      	str	r3, [r7, #8]
   return(result);
34016842:	68bb      	ldr	r3, [r7, #8]
34016844:	f023 0310 	bic.w	r3, r3, #16
34016848:	647b      	str	r3, [r7, #68]	@ 0x44
3401684a:	687b      	ldr	r3, [r7, #4]
3401684c:	681b      	ldr	r3, [r3, #0]
3401684e:	461a      	mov	r2, r3
34016850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34016852:	61bb      	str	r3, [r7, #24]
34016854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016856:	6979      	ldr	r1, [r7, #20]
34016858:	69ba      	ldr	r2, [r7, #24]
3401685a:	e841 2300 	strex	r3, r2, [r1]
3401685e:	613b      	str	r3, [r7, #16]
   return(result);
34016860:	693b      	ldr	r3, [r7, #16]
34016862:	2b00      	cmp	r3, #0
34016864:	d1e6      	bne.n	34016834 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34016866:	687b      	ldr	r3, [r7, #4]
34016868:	2220      	movs	r2, #32
3401686a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401686e:	687b      	ldr	r3, [r7, #4]
34016870:	2200      	movs	r2, #0
34016872:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34016874:	687b      	ldr	r3, [r7, #4]
34016876:	2200      	movs	r2, #0
34016878:	675a      	str	r2, [r3, #116]	@ 0x74
}
3401687a:	bf00      	nop
3401687c:	3754      	adds	r7, #84	@ 0x54
3401687e:	46bd      	mov	sp, r7
34016880:	f85d 7b04 	ldr.w	r7, [sp], #4
34016884:	4770      	bx	lr
	...

34016888 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34016888:	b580      	push	{r7, lr}
3401688a:	b086      	sub	sp, #24
3401688c:	af02      	add	r7, sp, #8
3401688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34016890:	2300      	movs	r3, #0
34016892:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
34016894:	f7ed fa24 	bl	34003ce0 <HAL_GetTick>
34016898:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3401689a:	687b      	ldr	r3, [r7, #4]
3401689c:	2b00      	cmp	r3, #0
3401689e:	d102      	bne.n	340168a6 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
340168a0:	2301      	movs	r3, #1
340168a2:	73fb      	strb	r3, [r7, #15]
340168a4:	e2c8      	b.n	34016e38 <HAL_XSPI_Init+0x5b0>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
340168a6:	687b      	ldr	r3, [r7, #4]
340168a8:	689b      	ldr	r3, [r3, #8]
340168aa:	2b00      	cmp	r3, #0
340168ac:	d008      	beq.n	340168c0 <HAL_XSPI_Init+0x38>
340168ae:	687b      	ldr	r3, [r7, #4]
340168b0:	689b      	ldr	r3, [r3, #8]
340168b2:	2b40      	cmp	r3, #64	@ 0x40
340168b4:	d004      	beq.n	340168c0 <HAL_XSPI_Init+0x38>
340168b6:	f240 1161 	movw	r1, #353	@ 0x161
340168ba:	488a      	ldr	r0, [pc, #552]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
340168bc:	f7eb f9ee 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
340168c0:	687b      	ldr	r3, [r7, #4]
340168c2:	68db      	ldr	r3, [r3, #12]
340168c4:	2b00      	cmp	r3, #0
340168c6:	d01d      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168c8:	687b      	ldr	r3, [r7, #4]
340168ca:	68db      	ldr	r3, [r3, #12]
340168cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340168d0:	d018      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168d2:	687b      	ldr	r3, [r7, #4]
340168d4:	68db      	ldr	r3, [r3, #12]
340168d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340168da:	d013      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168dc:	687b      	ldr	r3, [r7, #4]
340168de:	68db      	ldr	r3, [r3, #12]
340168e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340168e4:	d00e      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168e6:	687b      	ldr	r3, [r7, #4]
340168e8:	68db      	ldr	r3, [r3, #12]
340168ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340168ee:	d009      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168f0:	687b      	ldr	r3, [r7, #4]
340168f2:	68db      	ldr	r3, [r3, #12]
340168f4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
340168f8:	d004      	beq.n	34016904 <HAL_XSPI_Init+0x7c>
340168fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
340168fe:	4879      	ldr	r0, [pc, #484]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016900:	f7eb f9cc 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
34016904:	687b      	ldr	r3, [r7, #4]
34016906:	691b      	ldr	r3, [r3, #16]
34016908:	2b00      	cmp	r3, #0
3401690a:	f000 8081 	beq.w	34016a10 <HAL_XSPI_Init+0x188>
3401690e:	687b      	ldr	r3, [r7, #4]
34016910:	691b      	ldr	r3, [r3, #16]
34016912:	2b01      	cmp	r3, #1
34016914:	d07c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016916:	687b      	ldr	r3, [r7, #4]
34016918:	691b      	ldr	r3, [r3, #16]
3401691a:	2b02      	cmp	r3, #2
3401691c:	d078      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401691e:	687b      	ldr	r3, [r7, #4]
34016920:	691b      	ldr	r3, [r3, #16]
34016922:	2b03      	cmp	r3, #3
34016924:	d074      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016926:	687b      	ldr	r3, [r7, #4]
34016928:	691b      	ldr	r3, [r3, #16]
3401692a:	2b04      	cmp	r3, #4
3401692c:	d070      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401692e:	687b      	ldr	r3, [r7, #4]
34016930:	691b      	ldr	r3, [r3, #16]
34016932:	2b05      	cmp	r3, #5
34016934:	d06c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016936:	687b      	ldr	r3, [r7, #4]
34016938:	691b      	ldr	r3, [r3, #16]
3401693a:	2b06      	cmp	r3, #6
3401693c:	d068      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401693e:	687b      	ldr	r3, [r7, #4]
34016940:	691b      	ldr	r3, [r3, #16]
34016942:	2b07      	cmp	r3, #7
34016944:	d064      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016946:	687b      	ldr	r3, [r7, #4]
34016948:	691b      	ldr	r3, [r3, #16]
3401694a:	2b08      	cmp	r3, #8
3401694c:	d060      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401694e:	687b      	ldr	r3, [r7, #4]
34016950:	691b      	ldr	r3, [r3, #16]
34016952:	2b09      	cmp	r3, #9
34016954:	d05c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016956:	687b      	ldr	r3, [r7, #4]
34016958:	691b      	ldr	r3, [r3, #16]
3401695a:	2b0a      	cmp	r3, #10
3401695c:	d058      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401695e:	687b      	ldr	r3, [r7, #4]
34016960:	691b      	ldr	r3, [r3, #16]
34016962:	2b0b      	cmp	r3, #11
34016964:	d054      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016966:	687b      	ldr	r3, [r7, #4]
34016968:	691b      	ldr	r3, [r3, #16]
3401696a:	2b0c      	cmp	r3, #12
3401696c:	d050      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401696e:	687b      	ldr	r3, [r7, #4]
34016970:	691b      	ldr	r3, [r3, #16]
34016972:	2b0d      	cmp	r3, #13
34016974:	d04c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016976:	687b      	ldr	r3, [r7, #4]
34016978:	691b      	ldr	r3, [r3, #16]
3401697a:	2b0e      	cmp	r3, #14
3401697c:	d048      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401697e:	687b      	ldr	r3, [r7, #4]
34016980:	691b      	ldr	r3, [r3, #16]
34016982:	2b0f      	cmp	r3, #15
34016984:	d044      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016986:	687b      	ldr	r3, [r7, #4]
34016988:	691b      	ldr	r3, [r3, #16]
3401698a:	2b10      	cmp	r3, #16
3401698c:	d040      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401698e:	687b      	ldr	r3, [r7, #4]
34016990:	691b      	ldr	r3, [r3, #16]
34016992:	2b11      	cmp	r3, #17
34016994:	d03c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016996:	687b      	ldr	r3, [r7, #4]
34016998:	691b      	ldr	r3, [r3, #16]
3401699a:	2b12      	cmp	r3, #18
3401699c:	d038      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
3401699e:	687b      	ldr	r3, [r7, #4]
340169a0:	691b      	ldr	r3, [r3, #16]
340169a2:	2b13      	cmp	r3, #19
340169a4:	d034      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169a6:	687b      	ldr	r3, [r7, #4]
340169a8:	691b      	ldr	r3, [r3, #16]
340169aa:	2b14      	cmp	r3, #20
340169ac:	d030      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169ae:	687b      	ldr	r3, [r7, #4]
340169b0:	691b      	ldr	r3, [r3, #16]
340169b2:	2b15      	cmp	r3, #21
340169b4:	d02c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169b6:	687b      	ldr	r3, [r7, #4]
340169b8:	691b      	ldr	r3, [r3, #16]
340169ba:	2b16      	cmp	r3, #22
340169bc:	d028      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169be:	687b      	ldr	r3, [r7, #4]
340169c0:	691b      	ldr	r3, [r3, #16]
340169c2:	2b17      	cmp	r3, #23
340169c4:	d024      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169c6:	687b      	ldr	r3, [r7, #4]
340169c8:	691b      	ldr	r3, [r3, #16]
340169ca:	2b18      	cmp	r3, #24
340169cc:	d020      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169ce:	687b      	ldr	r3, [r7, #4]
340169d0:	691b      	ldr	r3, [r3, #16]
340169d2:	2b19      	cmp	r3, #25
340169d4:	d01c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169d6:	687b      	ldr	r3, [r7, #4]
340169d8:	691b      	ldr	r3, [r3, #16]
340169da:	2b1a      	cmp	r3, #26
340169dc:	d018      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169de:	687b      	ldr	r3, [r7, #4]
340169e0:	691b      	ldr	r3, [r3, #16]
340169e2:	2b1b      	cmp	r3, #27
340169e4:	d014      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169e6:	687b      	ldr	r3, [r7, #4]
340169e8:	691b      	ldr	r3, [r3, #16]
340169ea:	2b1c      	cmp	r3, #28
340169ec:	d010      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169ee:	687b      	ldr	r3, [r7, #4]
340169f0:	691b      	ldr	r3, [r3, #16]
340169f2:	2b1d      	cmp	r3, #29
340169f4:	d00c      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169f6:	687b      	ldr	r3, [r7, #4]
340169f8:	691b      	ldr	r3, [r3, #16]
340169fa:	2b1e      	cmp	r3, #30
340169fc:	d008      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
340169fe:	687b      	ldr	r3, [r7, #4]
34016a00:	691b      	ldr	r3, [r3, #16]
34016a02:	2b1f      	cmp	r3, #31
34016a04:	d004      	beq.n	34016a10 <HAL_XSPI_Init+0x188>
34016a06:	f240 1163 	movw	r1, #355	@ 0x163
34016a0a:	4836      	ldr	r0, [pc, #216]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016a0c:	f7eb f946 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
34016a10:	687b      	ldr	r3, [r7, #4]
34016a12:	695b      	ldr	r3, [r3, #20]
34016a14:	2b00      	cmp	r3, #0
34016a16:	d003      	beq.n	34016a20 <HAL_XSPI_Init+0x198>
34016a18:	687b      	ldr	r3, [r7, #4]
34016a1a:	695b      	ldr	r3, [r3, #20]
34016a1c:	2b40      	cmp	r3, #64	@ 0x40
34016a1e:	d904      	bls.n	34016a2a <HAL_XSPI_Init+0x1a2>
34016a20:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34016a24:	482f      	ldr	r0, [pc, #188]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016a26:	f7eb f939 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34016a2a:	687b      	ldr	r3, [r7, #4]
34016a2c:	699b      	ldr	r3, [r3, #24]
34016a2e:	2b00      	cmp	r3, #0
34016a30:	d008      	beq.n	34016a44 <HAL_XSPI_Init+0x1bc>
34016a32:	687b      	ldr	r3, [r7, #4]
34016a34:	699b      	ldr	r3, [r3, #24]
34016a36:	2b02      	cmp	r3, #2
34016a38:	d004      	beq.n	34016a44 <HAL_XSPI_Init+0x1bc>
34016a3a:	f240 1165 	movw	r1, #357	@ 0x165
34016a3e:	4829      	ldr	r0, [pc, #164]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016a40:	f7eb f92c 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
34016a44:	687b      	ldr	r3, [r7, #4]
34016a46:	69db      	ldr	r3, [r3, #28]
34016a48:	2b00      	cmp	r3, #0
34016a4a:	d008      	beq.n	34016a5e <HAL_XSPI_Init+0x1d6>
34016a4c:	687b      	ldr	r3, [r7, #4]
34016a4e:	69db      	ldr	r3, [r3, #28]
34016a50:	2b01      	cmp	r3, #1
34016a52:	d004      	beq.n	34016a5e <HAL_XSPI_Init+0x1d6>
34016a54:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34016a58:	4822      	ldr	r0, [pc, #136]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016a5a:	f7eb f91f 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
34016a5e:	687b      	ldr	r3, [r7, #4]
34016a60:	6a1b      	ldr	r3, [r3, #32]
34016a62:	2b00      	cmp	r3, #0
34016a64:	d018      	beq.n	34016a98 <HAL_XSPI_Init+0x210>
34016a66:	687b      	ldr	r3, [r7, #4]
34016a68:	6a1b      	ldr	r3, [r3, #32]
34016a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016a6e:	d013      	beq.n	34016a98 <HAL_XSPI_Init+0x210>
34016a70:	687b      	ldr	r3, [r7, #4]
34016a72:	6a1b      	ldr	r3, [r3, #32]
34016a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34016a78:	d00e      	beq.n	34016a98 <HAL_XSPI_Init+0x210>
34016a7a:	687b      	ldr	r3, [r7, #4]
34016a7c:	6a1b      	ldr	r3, [r3, #32]
34016a7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016a82:	d009      	beq.n	34016a98 <HAL_XSPI_Init+0x210>
34016a84:	687b      	ldr	r3, [r7, #4]
34016a86:	6a1b      	ldr	r3, [r3, #32]
34016a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34016a8c:	d004      	beq.n	34016a98 <HAL_XSPI_Init+0x210>
34016a8e:	f240 1167 	movw	r1, #359	@ 0x167
34016a92:	4814      	ldr	r0, [pc, #80]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016a94:	f7eb f902 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
34016a98:	687b      	ldr	r3, [r7, #4]
34016a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016a9c:	2bff      	cmp	r3, #255	@ 0xff
34016a9e:	d904      	bls.n	34016aaa <HAL_XSPI_Init+0x222>
34016aa0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
34016aa4:	480f      	ldr	r0, [pc, #60]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016aa6:	f7eb f8f9 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
34016aaa:	687b      	ldr	r3, [r7, #4]
34016aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016aae:	2b00      	cmp	r3, #0
34016ab0:	d009      	beq.n	34016ac6 <HAL_XSPI_Init+0x23e>
34016ab2:	687b      	ldr	r3, [r7, #4]
34016ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34016ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34016aba:	d004      	beq.n	34016ac6 <HAL_XSPI_Init+0x23e>
34016abc:	f240 1169 	movw	r1, #361	@ 0x169
34016ac0:	4808      	ldr	r0, [pc, #32]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016ac2:	f7eb f8eb 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
34016ac6:	687b      	ldr	r3, [r7, #4]
34016ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016aca:	2b00      	cmp	r3, #0
34016acc:	d00c      	beq.n	34016ae8 <HAL_XSPI_Init+0x260>
34016ace:	687b      	ldr	r3, [r7, #4]
34016ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34016ad6:	d007      	beq.n	34016ae8 <HAL_XSPI_Init+0x260>
34016ad8:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34016adc:	4801      	ldr	r0, [pc, #4]	@ (34016ae4 <HAL_XSPI_Init+0x25c>)
34016ade:	f7eb f8dd 	bl	34001c9c <assert_failed>
34016ae2:	e001      	b.n	34016ae8 <HAL_XSPI_Init+0x260>
34016ae4:	3401ea34 	.word	0x3401ea34
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
34016ae8:	687b      	ldr	r3, [r7, #4]
34016aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016aec:	2b00      	cmp	r3, #0
34016aee:	f000 8081 	beq.w	34016bf4 <HAL_XSPI_Init+0x36c>
34016af2:	687b      	ldr	r3, [r7, #4]
34016af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016af6:	2b01      	cmp	r3, #1
34016af8:	d07c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016afa:	687b      	ldr	r3, [r7, #4]
34016afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016afe:	2b02      	cmp	r3, #2
34016b00:	d078      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b02:	687b      	ldr	r3, [r7, #4]
34016b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b06:	2b03      	cmp	r3, #3
34016b08:	d074      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b0a:	687b      	ldr	r3, [r7, #4]
34016b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b0e:	2b04      	cmp	r3, #4
34016b10:	d070      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b12:	687b      	ldr	r3, [r7, #4]
34016b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b16:	2b05      	cmp	r3, #5
34016b18:	d06c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b1a:	687b      	ldr	r3, [r7, #4]
34016b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b1e:	2b06      	cmp	r3, #6
34016b20:	d068      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b22:	687b      	ldr	r3, [r7, #4]
34016b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b26:	2b07      	cmp	r3, #7
34016b28:	d064      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b2a:	687b      	ldr	r3, [r7, #4]
34016b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b2e:	2b08      	cmp	r3, #8
34016b30:	d060      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b32:	687b      	ldr	r3, [r7, #4]
34016b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b36:	2b09      	cmp	r3, #9
34016b38:	d05c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b3a:	687b      	ldr	r3, [r7, #4]
34016b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b3e:	2b0a      	cmp	r3, #10
34016b40:	d058      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b42:	687b      	ldr	r3, [r7, #4]
34016b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b46:	2b0b      	cmp	r3, #11
34016b48:	d054      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b4a:	687b      	ldr	r3, [r7, #4]
34016b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b4e:	2b0c      	cmp	r3, #12
34016b50:	d050      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b52:	687b      	ldr	r3, [r7, #4]
34016b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b56:	2b0d      	cmp	r3, #13
34016b58:	d04c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b5a:	687b      	ldr	r3, [r7, #4]
34016b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b5e:	2b0e      	cmp	r3, #14
34016b60:	d048      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b62:	687b      	ldr	r3, [r7, #4]
34016b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b66:	2b0f      	cmp	r3, #15
34016b68:	d044      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b6a:	687b      	ldr	r3, [r7, #4]
34016b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b6e:	2b10      	cmp	r3, #16
34016b70:	d040      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b72:	687b      	ldr	r3, [r7, #4]
34016b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b76:	2b11      	cmp	r3, #17
34016b78:	d03c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b7a:	687b      	ldr	r3, [r7, #4]
34016b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b7e:	2b12      	cmp	r3, #18
34016b80:	d038      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b82:	687b      	ldr	r3, [r7, #4]
34016b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b86:	2b13      	cmp	r3, #19
34016b88:	d034      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b8a:	687b      	ldr	r3, [r7, #4]
34016b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b8e:	2b14      	cmp	r3, #20
34016b90:	d030      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b92:	687b      	ldr	r3, [r7, #4]
34016b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b96:	2b15      	cmp	r3, #21
34016b98:	d02c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016b9a:	687b      	ldr	r3, [r7, #4]
34016b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016b9e:	2b16      	cmp	r3, #22
34016ba0:	d028      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016ba2:	687b      	ldr	r3, [r7, #4]
34016ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016ba6:	2b17      	cmp	r3, #23
34016ba8:	d024      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016baa:	687b      	ldr	r3, [r7, #4]
34016bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bae:	2b18      	cmp	r3, #24
34016bb0:	d020      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bb2:	687b      	ldr	r3, [r7, #4]
34016bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bb6:	2b19      	cmp	r3, #25
34016bb8:	d01c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bba:	687b      	ldr	r3, [r7, #4]
34016bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bbe:	2b1a      	cmp	r3, #26
34016bc0:	d018      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bc2:	687b      	ldr	r3, [r7, #4]
34016bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bc6:	2b1b      	cmp	r3, #27
34016bc8:	d014      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bca:	687b      	ldr	r3, [r7, #4]
34016bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bce:	2b1c      	cmp	r3, #28
34016bd0:	d010      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bd2:	687b      	ldr	r3, [r7, #4]
34016bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bd6:	2b1d      	cmp	r3, #29
34016bd8:	d00c      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bda:	687b      	ldr	r3, [r7, #4]
34016bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016bde:	2b1e      	cmp	r3, #30
34016be0:	d008      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016be2:	687b      	ldr	r3, [r7, #4]
34016be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016be6:	2b1f      	cmp	r3, #31
34016be8:	d004      	beq.n	34016bf4 <HAL_XSPI_Init+0x36c>
34016bea:	f240 116b 	movw	r1, #363	@ 0x16b
34016bee:	4895      	ldr	r0, [pc, #596]	@ (34016e44 <HAL_XSPI_Init+0x5bc>)
34016bf0:	f7eb f854 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
34016bf4:	687b      	ldr	r3, [r7, #4]
34016bf6:	685b      	ldr	r3, [r3, #4]
34016bf8:	2b00      	cmp	r3, #0
34016bfa:	d003      	beq.n	34016c04 <HAL_XSPI_Init+0x37c>
34016bfc:	687b      	ldr	r3, [r7, #4]
34016bfe:	685b      	ldr	r3, [r3, #4]
34016c00:	2b40      	cmp	r3, #64	@ 0x40
34016c02:	d904      	bls.n	34016c0e <HAL_XSPI_Init+0x386>
34016c04:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
34016c08:	488e      	ldr	r0, [pc, #568]	@ (34016e44 <HAL_XSPI_Init+0x5bc>)
34016c0a:	f7eb f847 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
34016c0e:	687b      	ldr	r3, [r7, #4]
34016c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34016c12:	2bff      	cmp	r3, #255	@ 0xff
34016c14:	d904      	bls.n	34016c20 <HAL_XSPI_Init+0x398>
34016c16:	f240 116d 	movw	r1, #365	@ 0x16d
34016c1a:	488a      	ldr	r0, [pc, #552]	@ (34016e44 <HAL_XSPI_Init+0x5bc>)
34016c1c:	f7eb f83e 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
34016c20:	687b      	ldr	r3, [r7, #4]
34016c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016c24:	2b00      	cmp	r3, #0
34016c26:	d009      	beq.n	34016c3c <HAL_XSPI_Init+0x3b4>
34016c28:	687b      	ldr	r3, [r7, #4]
34016c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34016c30:	d004      	beq.n	34016c3c <HAL_XSPI_Init+0x3b4>
34016c32:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34016c36:	4883      	ldr	r0, [pc, #524]	@ (34016e44 <HAL_XSPI_Init+0x5bc>)
34016c38:	f7eb f830 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34016c3c:	687b      	ldr	r3, [r7, #4]
34016c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016c40:	2b00      	cmp	r3, #0
34016c42:	d009      	beq.n	34016c58 <HAL_XSPI_Init+0x3d0>
34016c44:	687b      	ldr	r3, [r7, #4]
34016c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016c4c:	d004      	beq.n	34016c58 <HAL_XSPI_Init+0x3d0>
34016c4e:	f240 116f 	movw	r1, #367	@ 0x16f
34016c52:	487c      	ldr	r0, [pc, #496]	@ (34016e44 <HAL_XSPI_Init+0x5bc>)
34016c54:	f7eb f822 	bl	34001c9c <assert_failed>
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016c58:	687b      	ldr	r3, [r7, #4]
34016c5a:	2200      	movs	r2, #0
34016c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
34016c5e:	687b      	ldr	r3, [r7, #4]
34016c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016c62:	2b00      	cmp	r3, #0
34016c64:	f040 80e8 	bne.w	34016e38 <HAL_XSPI_Init+0x5b0>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34016c68:	6878      	ldr	r0, [r7, #4]
34016c6a:	f000 f8fb 	bl	34016e64 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34016c6e:	f241 3188 	movw	r1, #5000	@ 0x1388
34016c72:	6878      	ldr	r0, [r7, #4]
34016c74:	f000 fdc4 	bl	34017800 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34016c78:	687b      	ldr	r3, [r7, #4]
34016c7a:	681b      	ldr	r3, [r3, #0]
34016c7c:	689a      	ldr	r2, [r3, #8]
34016c7e:	4b72      	ldr	r3, [pc, #456]	@ (34016e48 <HAL_XSPI_Init+0x5c0>)
34016c80:	4013      	ands	r3, r2
34016c82:	687a      	ldr	r2, [r7, #4]
34016c84:	68d1      	ldr	r1, [r2, #12]
34016c86:	687a      	ldr	r2, [r7, #4]
34016c88:	6912      	ldr	r2, [r2, #16]
34016c8a:	0412      	lsls	r2, r2, #16
34016c8c:	4311      	orrs	r1, r2
34016c8e:	687a      	ldr	r2, [r7, #4]
34016c90:	6952      	ldr	r2, [r2, #20]
34016c92:	3a01      	subs	r2, #1
34016c94:	0212      	lsls	r2, r2, #8
34016c96:	4311      	orrs	r1, r2
34016c98:	687a      	ldr	r2, [r7, #4]
34016c9a:	69d2      	ldr	r2, [r2, #28]
34016c9c:	4311      	orrs	r1, r2
34016c9e:	687a      	ldr	r2, [r7, #4]
34016ca0:	6812      	ldr	r2, [r2, #0]
34016ca2:	430b      	orrs	r3, r1
34016ca4:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
34016ca6:	687b      	ldr	r3, [r7, #4]
34016ca8:	681b      	ldr	r3, [r3, #0]
34016caa:	68db      	ldr	r3, [r3, #12]
34016cac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
34016cb0:	687b      	ldr	r3, [r7, #4]
34016cb2:	6a1a      	ldr	r2, [r3, #32]
34016cb4:	687b      	ldr	r3, [r7, #4]
34016cb6:	681b      	ldr	r3, [r3, #0]
34016cb8:	430a      	orrs	r2, r1
34016cba:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
34016cbc:	687b      	ldr	r3, [r7, #4]
34016cbe:	681b      	ldr	r3, [r3, #0]
34016cc0:	691b      	ldr	r3, [r3, #16]
34016cc2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
34016cc6:	687b      	ldr	r3, [r7, #4]
34016cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016cca:	041a      	lsls	r2, r3, #16
34016ccc:	687b      	ldr	r3, [r7, #4]
34016cce:	681b      	ldr	r3, [r3, #0]
34016cd0:	430a      	orrs	r2, r1
34016cd2:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
34016cd4:	687b      	ldr	r3, [r7, #4]
34016cd6:	681b      	ldr	r3, [r3, #0]
34016cd8:	691b      	ldr	r3, [r3, #16]
34016cda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016cde:	687b      	ldr	r3, [r7, #4]
34016ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34016ce2:	687b      	ldr	r3, [r7, #4]
34016ce4:	681b      	ldr	r3, [r3, #0]
34016ce6:	430a      	orrs	r2, r1
34016ce8:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
34016cea:	687b      	ldr	r3, [r7, #4]
34016cec:	681b      	ldr	r3, [r3, #0]
34016cee:	687a      	ldr	r2, [r7, #4]
34016cf0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34016cf2:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34016cf4:	687b      	ldr	r3, [r7, #4]
34016cf6:	681b      	ldr	r3, [r3, #0]
34016cf8:	681b      	ldr	r3, [r3, #0]
34016cfa:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
34016cfe:	687b      	ldr	r3, [r7, #4]
34016d00:	685b      	ldr	r3, [r3, #4]
34016d02:	3b01      	subs	r3, #1
34016d04:	021a      	lsls	r2, r3, #8
34016d06:	687b      	ldr	r3, [r7, #4]
34016d08:	681b      	ldr	r3, [r3, #0]
34016d0a:	430a      	orrs	r2, r1
34016d0c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016d0e:	687b      	ldr	r3, [r7, #4]
34016d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016d12:	9300      	str	r3, [sp, #0]
34016d14:	68bb      	ldr	r3, [r7, #8]
34016d16:	2200      	movs	r2, #0
34016d18:	2120      	movs	r1, #32
34016d1a:	6878      	ldr	r0, [r7, #4]
34016d1c:	f000 fd7f 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34016d20:	4603      	mov	r3, r0
34016d22:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34016d24:	7bfb      	ldrb	r3, [r7, #15]
34016d26:	2b00      	cmp	r3, #0
34016d28:	f040 8086 	bne.w	34016e38 <HAL_XSPI_Init+0x5b0>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34016d2c:	687b      	ldr	r3, [r7, #4]
34016d2e:	681b      	ldr	r3, [r3, #0]
34016d30:	68db      	ldr	r3, [r3, #12]
34016d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016d36:	687b      	ldr	r3, [r7, #4]
34016d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34016d3a:	687b      	ldr	r3, [r7, #4]
34016d3c:	681b      	ldr	r3, [r3, #0]
34016d3e:	430a      	orrs	r2, r1
34016d40:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
34016d42:	687b      	ldr	r3, [r7, #4]
34016d44:	681b      	ldr	r3, [r3, #0]
34016d46:	4a41      	ldr	r2, [pc, #260]	@ (34016e4c <HAL_XSPI_Init+0x5c4>)
34016d48:	4293      	cmp	r3, r2
34016d4a:	d018      	beq.n	34016d7e <HAL_XSPI_Init+0x4f6>
34016d4c:	687b      	ldr	r3, [r7, #4]
34016d4e:	681b      	ldr	r3, [r3, #0]
34016d50:	4a3f      	ldr	r2, [pc, #252]	@ (34016e50 <HAL_XSPI_Init+0x5c8>)
34016d52:	4293      	cmp	r3, r2
34016d54:	d013      	beq.n	34016d7e <HAL_XSPI_Init+0x4f6>
34016d56:	687b      	ldr	r3, [r7, #4]
34016d58:	681b      	ldr	r3, [r3, #0]
34016d5a:	4a3e      	ldr	r2, [pc, #248]	@ (34016e54 <HAL_XSPI_Init+0x5cc>)
34016d5c:	4293      	cmp	r3, r2
34016d5e:	d00e      	beq.n	34016d7e <HAL_XSPI_Init+0x4f6>
34016d60:	687b      	ldr	r3, [r7, #4]
34016d62:	681b      	ldr	r3, [r3, #0]
34016d64:	4a3c      	ldr	r2, [pc, #240]	@ (34016e58 <HAL_XSPI_Init+0x5d0>)
34016d66:	4293      	cmp	r3, r2
34016d68:	d009      	beq.n	34016d7e <HAL_XSPI_Init+0x4f6>
34016d6a:	687b      	ldr	r3, [r7, #4]
34016d6c:	681b      	ldr	r3, [r3, #0]
34016d6e:	4a3b      	ldr	r2, [pc, #236]	@ (34016e5c <HAL_XSPI_Init+0x5d4>)
34016d70:	4293      	cmp	r3, r2
34016d72:	d004      	beq.n	34016d7e <HAL_XSPI_Init+0x4f6>
34016d74:	687b      	ldr	r3, [r7, #4]
34016d76:	681b      	ldr	r3, [r3, #0]
34016d78:	4a39      	ldr	r2, [pc, #228]	@ (34016e60 <HAL_XSPI_Init+0x5d8>)
34016d7a:	4293      	cmp	r3, r2
34016d7c:	d10f      	bne.n	34016d9e <HAL_XSPI_Init+0x516>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016d7e:	687b      	ldr	r3, [r7, #4]
34016d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016d82:	9300      	str	r3, [sp, #0]
34016d84:	68bb      	ldr	r3, [r7, #8]
34016d86:	2200      	movs	r2, #0
34016d88:	2120      	movs	r1, #32
34016d8a:	6878      	ldr	r0, [r7, #4]
34016d8c:	f000 fd47 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34016d90:	4603      	mov	r3, r0
34016d92:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
34016d94:	7bfb      	ldrb	r3, [r7, #15]
34016d96:	2b00      	cmp	r3, #0
34016d98:	d001      	beq.n	34016d9e <HAL_XSPI_Init+0x516>
          {
            return status;
34016d9a:	7bfb      	ldrb	r3, [r7, #15]
34016d9c:	e04d      	b.n	34016e3a <HAL_XSPI_Init+0x5b2>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
34016d9e:	687b      	ldr	r3, [r7, #4]
34016da0:	681b      	ldr	r3, [r3, #0]
34016da2:	681b      	ldr	r3, [r3, #0]
34016da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34016da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34016dac:	687a      	ldr	r2, [r7, #4]
34016dae:	6891      	ldr	r1, [r2, #8]
34016db0:	687a      	ldr	r2, [r7, #4]
34016db2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
34016db4:	4311      	orrs	r1, r2
34016db6:	687a      	ldr	r2, [r7, #4]
34016db8:	6812      	ldr	r2, [r2, #0]
34016dba:	430b      	orrs	r3, r1
34016dbc:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
34016dbe:	687b      	ldr	r3, [r7, #4]
34016dc0:	681b      	ldr	r3, [r3, #0]
34016dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34016dc6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
34016dca:	687b      	ldr	r3, [r7, #4]
34016dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34016dce:	687b      	ldr	r3, [r7, #4]
34016dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016dd2:	431a      	orrs	r2, r3
34016dd4:	687b      	ldr	r3, [r7, #4]
34016dd6:	681b      	ldr	r3, [r3, #0]
34016dd8:	430a      	orrs	r2, r1
34016dda:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
34016dde:	687b      	ldr	r3, [r7, #4]
34016de0:	681b      	ldr	r3, [r3, #0]
34016de2:	681a      	ldr	r2, [r3, #0]
34016de4:	687b      	ldr	r3, [r7, #4]
34016de6:	681b      	ldr	r3, [r3, #0]
34016de8:	f042 0201 	orr.w	r2, r2, #1
34016dec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
34016dee:	687b      	ldr	r3, [r7, #4]
34016df0:	699b      	ldr	r3, [r3, #24]
34016df2:	2b02      	cmp	r3, #2
34016df4:	d107      	bne.n	34016e06 <HAL_XSPI_Init+0x57e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34016df6:	687b      	ldr	r3, [r7, #4]
34016df8:	681b      	ldr	r3, [r3, #0]
34016dfa:	689a      	ldr	r2, [r3, #8]
34016dfc:	687b      	ldr	r3, [r7, #4]
34016dfe:	681b      	ldr	r3, [r3, #0]
34016e00:	f042 0202 	orr.w	r2, r2, #2
34016e04:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34016e06:	687b      	ldr	r3, [r7, #4]
34016e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016e0e:	d107      	bne.n	34016e20 <HAL_XSPI_Init+0x598>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
34016e10:	687b      	ldr	r3, [r7, #4]
34016e12:	681b      	ldr	r3, [r3, #0]
34016e14:	689a      	ldr	r2, [r3, #8]
34016e16:	687b      	ldr	r3, [r7, #4]
34016e18:	681b      	ldr	r3, [r3, #0]
34016e1a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
34016e1e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34016e20:	687b      	ldr	r3, [r7, #4]
34016e22:	68db      	ldr	r3, [r3, #12]
34016e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016e28:	d103      	bne.n	34016e32 <HAL_XSPI_Init+0x5aa>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34016e2a:	687b      	ldr	r3, [r7, #4]
34016e2c:	2201      	movs	r2, #1
34016e2e:	659a      	str	r2, [r3, #88]	@ 0x58
34016e30:	e002      	b.n	34016e38 <HAL_XSPI_Init+0x5b0>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
34016e32:	687b      	ldr	r3, [r7, #4]
34016e34:	2202      	movs	r2, #2
34016e36:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34016e38:	7bfb      	ldrb	r3, [r7, #15]
}
34016e3a:	4618      	mov	r0, r3
34016e3c:	3710      	adds	r7, #16
34016e3e:	46bd      	mov	sp, r7
34016e40:	bd80      	pop	{r7, pc}
34016e42:	bf00      	nop
34016e44:	3401ea34 	.word	0x3401ea34
34016e48:	f8e0c0fc 	.word	0xf8e0c0fc
34016e4c:	58025000 	.word	0x58025000
34016e50:	48025000 	.word	0x48025000
34016e54:	5802a000 	.word	0x5802a000
34016e58:	4802a000 	.word	0x4802a000
34016e5c:	5802d000 	.word	0x5802d000
34016e60:	4802d000 	.word	0x4802d000

34016e64 <HAL_XSPI_MspInit>:
  * @brief  Initialize the XSPI MSP.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_MspInit(XSPI_HandleTypeDef *hxspi)
{
34016e64:	b480      	push	{r7}
34016e66:	b083      	sub	sp, #12
34016e68:	af00      	add	r7, sp, #0
34016e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_MspInit can be implemented in the user file
   */
}
34016e6c:	bf00      	nop
34016e6e:	370c      	adds	r7, #12
34016e70:	46bd      	mov	sp, r7
34016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
34016e76:	4770      	bx	lr

34016e78 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
34016e78:	b580      	push	{r7, lr}
34016e7a:	b08a      	sub	sp, #40	@ 0x28
34016e7c:	af02      	add	r7, sp, #8
34016e7e:	60f8      	str	r0, [r7, #12]
34016e80:	60b9      	str	r1, [r7, #8]
34016e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
34016e84:	f7ec ff2c 	bl	34003ce0 <HAL_GetTick>
34016e88:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
34016e8a:	68bb      	ldr	r3, [r7, #8]
34016e8c:	681b      	ldr	r3, [r3, #0]
34016e8e:	2b00      	cmp	r3, #0
34016e90:	d010      	beq.n	34016eb4 <HAL_XSPI_Command+0x3c>
34016e92:	68bb      	ldr	r3, [r7, #8]
34016e94:	681b      	ldr	r3, [r3, #0]
34016e96:	2b01      	cmp	r3, #1
34016e98:	d00c      	beq.n	34016eb4 <HAL_XSPI_Command+0x3c>
34016e9a:	68bb      	ldr	r3, [r7, #8]
34016e9c:	681b      	ldr	r3, [r3, #0]
34016e9e:	2b02      	cmp	r3, #2
34016ea0:	d008      	beq.n	34016eb4 <HAL_XSPI_Command+0x3c>
34016ea2:	68bb      	ldr	r3, [r7, #8]
34016ea4:	681b      	ldr	r3, [r3, #0]
34016ea6:	2b03      	cmp	r3, #3
34016ea8:	d004      	beq.n	34016eb4 <HAL_XSPI_Command+0x3c>
34016eaa:	f240 313e 	movw	r1, #830	@ 0x33e
34016eae:	4887      	ldr	r0, [pc, #540]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016eb0:	f7ea fef4 	bl	34001c9c <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34016eb4:	68fb      	ldr	r3, [r7, #12]
34016eb6:	689b      	ldr	r3, [r3, #8]
34016eb8:	2b00      	cmp	r3, #0
34016eba:	d120      	bne.n	34016efe <HAL_XSPI_Command+0x86>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
34016ebc:	68bb      	ldr	r3, [r7, #8]
34016ebe:	685b      	ldr	r3, [r3, #4]
34016ec0:	2b00      	cmp	r3, #0
34016ec2:	d01c      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016ec4:	68bb      	ldr	r3, [r7, #8]
34016ec6:	685b      	ldr	r3, [r3, #4]
34016ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34016ecc:	d017      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016ece:	68bb      	ldr	r3, [r7, #8]
34016ed0:	685b      	ldr	r3, [r3, #4]
34016ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016ed6:	d012      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016ed8:	68bb      	ldr	r3, [r7, #8]
34016eda:	685b      	ldr	r3, [r3, #4]
34016edc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
34016ee0:	d00d      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016ee2:	68bb      	ldr	r3, [r7, #8]
34016ee4:	685b      	ldr	r3, [r3, #4]
34016ee6:	2b00      	cmp	r3, #0
34016ee8:	d009      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016eea:	68bb      	ldr	r3, [r7, #8]
34016eec:	685b      	ldr	r3, [r3, #4]
34016eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34016ef2:	d004      	beq.n	34016efe <HAL_XSPI_Command+0x86>
34016ef4:	f240 3141 	movw	r1, #833	@ 0x341
34016ef8:	4874      	ldr	r0, [pc, #464]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016efa:	f7ea fecf 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
34016efe:	68bb      	ldr	r3, [r7, #8]
34016f00:	68db      	ldr	r3, [r3, #12]
34016f02:	2b00      	cmp	r3, #0
34016f04:	d014      	beq.n	34016f30 <HAL_XSPI_Command+0xb8>
34016f06:	68bb      	ldr	r3, [r7, #8]
34016f08:	68db      	ldr	r3, [r3, #12]
34016f0a:	2b01      	cmp	r3, #1
34016f0c:	d010      	beq.n	34016f30 <HAL_XSPI_Command+0xb8>
34016f0e:	68bb      	ldr	r3, [r7, #8]
34016f10:	68db      	ldr	r3, [r3, #12]
34016f12:	2b02      	cmp	r3, #2
34016f14:	d00c      	beq.n	34016f30 <HAL_XSPI_Command+0xb8>
34016f16:	68bb      	ldr	r3, [r7, #8]
34016f18:	68db      	ldr	r3, [r3, #12]
34016f1a:	2b03      	cmp	r3, #3
34016f1c:	d008      	beq.n	34016f30 <HAL_XSPI_Command+0xb8>
34016f1e:	68bb      	ldr	r3, [r7, #8]
34016f20:	68db      	ldr	r3, [r3, #12]
34016f22:	2b04      	cmp	r3, #4
34016f24:	d004      	beq.n	34016f30 <HAL_XSPI_Command+0xb8>
34016f26:	f44f 7151 	mov.w	r1, #836	@ 0x344
34016f2a:	4868      	ldr	r0, [pc, #416]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016f2c:	f7ea feb6 	bl	34001c9c <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34016f30:	68bb      	ldr	r3, [r7, #8]
34016f32:	68db      	ldr	r3, [r3, #12]
34016f34:	2b00      	cmp	r3, #0
34016f36:	d021      	beq.n	34016f7c <HAL_XSPI_Command+0x104>
  {
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
34016f38:	68bb      	ldr	r3, [r7, #8]
34016f3a:	691b      	ldr	r3, [r3, #16]
34016f3c:	2b00      	cmp	r3, #0
34016f3e:	d010      	beq.n	34016f62 <HAL_XSPI_Command+0xea>
34016f40:	68bb      	ldr	r3, [r7, #8]
34016f42:	691b      	ldr	r3, [r3, #16]
34016f44:	2b10      	cmp	r3, #16
34016f46:	d00c      	beq.n	34016f62 <HAL_XSPI_Command+0xea>
34016f48:	68bb      	ldr	r3, [r7, #8]
34016f4a:	691b      	ldr	r3, [r3, #16]
34016f4c:	2b20      	cmp	r3, #32
34016f4e:	d008      	beq.n	34016f62 <HAL_XSPI_Command+0xea>
34016f50:	68bb      	ldr	r3, [r7, #8]
34016f52:	691b      	ldr	r3, [r3, #16]
34016f54:	2b30      	cmp	r3, #48	@ 0x30
34016f56:	d004      	beq.n	34016f62 <HAL_XSPI_Command+0xea>
34016f58:	f240 3147 	movw	r1, #839	@ 0x347
34016f5c:	485b      	ldr	r0, [pc, #364]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016f5e:	f7ea fe9d 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
34016f62:	68bb      	ldr	r3, [r7, #8]
34016f64:	695b      	ldr	r3, [r3, #20]
34016f66:	2b00      	cmp	r3, #0
34016f68:	d008      	beq.n	34016f7c <HAL_XSPI_Command+0x104>
34016f6a:	68bb      	ldr	r3, [r7, #8]
34016f6c:	695b      	ldr	r3, [r3, #20]
34016f6e:	2b08      	cmp	r3, #8
34016f70:	d004      	beq.n	34016f7c <HAL_XSPI_Command+0x104>
34016f72:	f44f 7152 	mov.w	r1, #840	@ 0x348
34016f76:	4855      	ldr	r0, [pc, #340]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016f78:	f7ea fe90 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
34016f7c:	68bb      	ldr	r3, [r7, #8]
34016f7e:	69db      	ldr	r3, [r3, #28]
34016f80:	2b00      	cmp	r3, #0
34016f82:	d018      	beq.n	34016fb6 <HAL_XSPI_Command+0x13e>
34016f84:	68bb      	ldr	r3, [r7, #8]
34016f86:	69db      	ldr	r3, [r3, #28]
34016f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34016f8c:	d013      	beq.n	34016fb6 <HAL_XSPI_Command+0x13e>
34016f8e:	68bb      	ldr	r3, [r7, #8]
34016f90:	69db      	ldr	r3, [r3, #28]
34016f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34016f96:	d00e      	beq.n	34016fb6 <HAL_XSPI_Command+0x13e>
34016f98:	68bb      	ldr	r3, [r7, #8]
34016f9a:	69db      	ldr	r3, [r3, #28]
34016f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34016fa0:	d009      	beq.n	34016fb6 <HAL_XSPI_Command+0x13e>
34016fa2:	68bb      	ldr	r3, [r7, #8]
34016fa4:	69db      	ldr	r3, [r3, #28]
34016fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34016faa:	d004      	beq.n	34016fb6 <HAL_XSPI_Command+0x13e>
34016fac:	f240 314b 	movw	r1, #843	@ 0x34b
34016fb0:	4846      	ldr	r0, [pc, #280]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016fb2:	f7ea fe73 	bl	34001c9c <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34016fb6:	68bb      	ldr	r3, [r7, #8]
34016fb8:	69db      	ldr	r3, [r3, #28]
34016fba:	2b00      	cmp	r3, #0
34016fbc:	d025      	beq.n	3401700a <HAL_XSPI_Command+0x192>
  {
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
34016fbe:	68bb      	ldr	r3, [r7, #8]
34016fc0:	6a1b      	ldr	r3, [r3, #32]
34016fc2:	2b00      	cmp	r3, #0
34016fc4:	d013      	beq.n	34016fee <HAL_XSPI_Command+0x176>
34016fc6:	68bb      	ldr	r3, [r7, #8]
34016fc8:	6a1b      	ldr	r3, [r3, #32]
34016fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34016fce:	d00e      	beq.n	34016fee <HAL_XSPI_Command+0x176>
34016fd0:	68bb      	ldr	r3, [r7, #8]
34016fd2:	6a1b      	ldr	r3, [r3, #32]
34016fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34016fd8:	d009      	beq.n	34016fee <HAL_XSPI_Command+0x176>
34016fda:	68bb      	ldr	r3, [r7, #8]
34016fdc:	6a1b      	ldr	r3, [r3, #32]
34016fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34016fe2:	d004      	beq.n	34016fee <HAL_XSPI_Command+0x176>
34016fe4:	f240 314e 	movw	r1, #846	@ 0x34e
34016fe8:	4838      	ldr	r0, [pc, #224]	@ (340170cc <HAL_XSPI_Command+0x254>)
34016fea:	f7ea fe57 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
34016fee:	68bb      	ldr	r3, [r7, #8]
34016ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016ff2:	2b00      	cmp	r3, #0
34016ff4:	d009      	beq.n	3401700a <HAL_XSPI_Command+0x192>
34016ff6:	68bb      	ldr	r3, [r7, #8]
34016ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34016ffe:	d004      	beq.n	3401700a <HAL_XSPI_Command+0x192>
34017000:	f240 314f 	movw	r1, #847	@ 0x34f
34017004:	4831      	ldr	r0, [pc, #196]	@ (340170cc <HAL_XSPI_Command+0x254>)
34017006:	f7ea fe49 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401700a:	68bb      	ldr	r3, [r7, #8]
3401700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401700e:	2b00      	cmp	r3, #0
34017010:	d018      	beq.n	34017044 <HAL_XSPI_Command+0x1cc>
34017012:	68bb      	ldr	r3, [r7, #8]
34017014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401701a:	d013      	beq.n	34017044 <HAL_XSPI_Command+0x1cc>
3401701c:	68bb      	ldr	r3, [r7, #8]
3401701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017020:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34017024:	d00e      	beq.n	34017044 <HAL_XSPI_Command+0x1cc>
34017026:	68bb      	ldr	r3, [r7, #8]
34017028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401702a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401702e:	d009      	beq.n	34017044 <HAL_XSPI_Command+0x1cc>
34017030:	68bb      	ldr	r3, [r7, #8]
34017032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017034:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34017038:	d004      	beq.n	34017044 <HAL_XSPI_Command+0x1cc>
3401703a:	f240 3152 	movw	r1, #850	@ 0x352
3401703e:	4823      	ldr	r0, [pc, #140]	@ (340170cc <HAL_XSPI_Command+0x254>)
34017040:	f7ea fe2c 	bl	34001c9c <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34017044:	68bb      	ldr	r3, [r7, #8]
34017046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017048:	2b00      	cmp	r3, #0
3401704a:	d025      	beq.n	34017098 <HAL_XSPI_Command+0x220>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401704c:	68bb      	ldr	r3, [r7, #8]
3401704e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017050:	2b00      	cmp	r3, #0
34017052:	d013      	beq.n	3401707c <HAL_XSPI_Command+0x204>
34017054:	68bb      	ldr	r3, [r7, #8]
34017056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3401705c:	d00e      	beq.n	3401707c <HAL_XSPI_Command+0x204>
3401705e:	68bb      	ldr	r3, [r7, #8]
34017060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34017062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34017066:	d009      	beq.n	3401707c <HAL_XSPI_Command+0x204>
34017068:	68bb      	ldr	r3, [r7, #8]
3401706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401706c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34017070:	d004      	beq.n	3401707c <HAL_XSPI_Command+0x204>
34017072:	f240 3155 	movw	r1, #853	@ 0x355
34017076:	4815      	ldr	r0, [pc, #84]	@ (340170cc <HAL_XSPI_Command+0x254>)
34017078:	f7ea fe10 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3401707c:	68bb      	ldr	r3, [r7, #8]
3401707e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34017080:	2b00      	cmp	r3, #0
34017082:	d009      	beq.n	34017098 <HAL_XSPI_Command+0x220>
34017084:	68bb      	ldr	r3, [r7, #8]
34017086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34017088:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3401708c:	d004      	beq.n	34017098 <HAL_XSPI_Command+0x220>
3401708e:	f240 3156 	movw	r1, #854	@ 0x356
34017092:	480e      	ldr	r0, [pc, #56]	@ (340170cc <HAL_XSPI_Command+0x254>)
34017094:	f7ea fe02 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
34017098:	68fb      	ldr	r3, [r7, #12]
3401709a:	68db      	ldr	r3, [r3, #12]
3401709c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340170a0:	d116      	bne.n	340170d0 <HAL_XSPI_Command+0x258>
340170a2:	68bb      	ldr	r3, [r7, #8]
340170a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170a6:	2b00      	cmp	r3, #0
340170a8:	d009      	beq.n	340170be <HAL_XSPI_Command+0x246>
340170aa:	68bb      	ldr	r3, [r7, #8]
340170ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340170b2:	d004      	beq.n	340170be <HAL_XSPI_Command+0x246>
340170b4:	68bb      	ldr	r3, [r7, #8]
340170b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
340170bc:	d101      	bne.n	340170c2 <HAL_XSPI_Command+0x24a>
340170be:	2301      	movs	r3, #1
340170c0:	e000      	b.n	340170c4 <HAL_XSPI_Command+0x24c>
340170c2:	2300      	movs	r3, #0
340170c4:	f003 0301 	and.w	r3, r3, #1
340170c8:	b2db      	uxtb	r3, r3
340170ca:	e024      	b.n	34017116 <HAL_XSPI_Command+0x29e>
340170cc:	3401ea34 	.word	0x3401ea34
340170d0:	68bb      	ldr	r3, [r7, #8]
340170d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170d4:	2b00      	cmp	r3, #0
340170d6:	d018      	beq.n	3401710a <HAL_XSPI_Command+0x292>
340170d8:	68bb      	ldr	r3, [r7, #8]
340170da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340170e0:	d013      	beq.n	3401710a <HAL_XSPI_Command+0x292>
340170e2:	68bb      	ldr	r3, [r7, #8]
340170e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340170ea:	d00e      	beq.n	3401710a <HAL_XSPI_Command+0x292>
340170ec:	68bb      	ldr	r3, [r7, #8]
340170ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340170f4:	d009      	beq.n	3401710a <HAL_XSPI_Command+0x292>
340170f6:	68bb      	ldr	r3, [r7, #8]
340170f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340170fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340170fe:	d004      	beq.n	3401710a <HAL_XSPI_Command+0x292>
34017100:	68bb      	ldr	r3, [r7, #8]
34017102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017104:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34017108:	d101      	bne.n	3401710e <HAL_XSPI_Command+0x296>
3401710a:	2301      	movs	r3, #1
3401710c:	e000      	b.n	34017110 <HAL_XSPI_Command+0x298>
3401710e:	2300      	movs	r3, #0
34017110:	f003 0301 	and.w	r3, r3, #1
34017114:	b2db      	uxtb	r3, r3
34017116:	2b00      	cmp	r3, #0
34017118:	d104      	bne.n	34017124 <HAL_XSPI_Command+0x2ac>
3401711a:	f240 3159 	movw	r1, #857	@ 0x359
3401711e:	485e      	ldr	r0, [pc, #376]	@ (34017298 <HAL_XSPI_Command+0x420>)
34017120:	f7ea fdbc 	bl	34001c9c <assert_failed>

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017124:	68bb      	ldr	r3, [r7, #8]
34017126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017128:	2b00      	cmp	r3, #0
3401712a:	d023      	beq.n	34017174 <HAL_XSPI_Command+0x2fc>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401712c:	68bb      	ldr	r3, [r7, #8]
3401712e:	681b      	ldr	r3, [r3, #0]
34017130:	2b00      	cmp	r3, #0
34017132:	d108      	bne.n	34017146 <HAL_XSPI_Command+0x2ce>
    {
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
34017134:	68bb      	ldr	r3, [r7, #8]
34017136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34017138:	2b00      	cmp	r3, #0
3401713a:	d104      	bne.n	34017146 <HAL_XSPI_Command+0x2ce>
3401713c:	f240 315f 	movw	r1, #863	@ 0x35f
34017140:	4855      	ldr	r0, [pc, #340]	@ (34017298 <HAL_XSPI_Command+0x420>)
34017142:	f7ea fdab 	bl	34001c9c <assert_failed>
    }
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
34017146:	68bb      	ldr	r3, [r7, #8]
34017148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401714a:	2b00      	cmp	r3, #0
3401714c:	d009      	beq.n	34017162 <HAL_XSPI_Command+0x2ea>
3401714e:	68bb      	ldr	r3, [r7, #8]
34017150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34017152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34017156:	d004      	beq.n	34017162 <HAL_XSPI_Command+0x2ea>
34017158:	f240 3161 	movw	r1, #865	@ 0x361
3401715c:	484e      	ldr	r0, [pc, #312]	@ (34017298 <HAL_XSPI_Command+0x420>)
3401715e:	f7ea fd9d 	bl	34001c9c <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
34017162:	68bb      	ldr	r3, [r7, #8]
34017164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017166:	2b1f      	cmp	r3, #31
34017168:	d904      	bls.n	34017174 <HAL_XSPI_Command+0x2fc>
3401716a:	f240 3162 	movw	r1, #866	@ 0x362
3401716e:	484a      	ldr	r0, [pc, #296]	@ (34017298 <HAL_XSPI_Command+0x420>)
34017170:	f7ea fd94 	bl	34001c9c <assert_failed>
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
34017174:	68bb      	ldr	r3, [r7, #8]
34017176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34017178:	2b00      	cmp	r3, #0
3401717a:	d009      	beq.n	34017190 <HAL_XSPI_Command+0x318>
3401717c:	68bb      	ldr	r3, [r7, #8]
3401717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34017180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34017184:	d004      	beq.n	34017190 <HAL_XSPI_Command+0x318>
34017186:	f240 3165 	movw	r1, #869	@ 0x365
3401718a:	4843      	ldr	r0, [pc, #268]	@ (34017298 <HAL_XSPI_Command+0x420>)
3401718c:	f7ea fd86 	bl	34001c9c <assert_failed>

  /* Check the state of the driver */
  state = hxspi->State;
34017190:	68fb      	ldr	r3, [r7, #12]
34017192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34017194:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
34017196:	697b      	ldr	r3, [r7, #20]
34017198:	2b02      	cmp	r3, #2
3401719a:	d104      	bne.n	340171a6 <HAL_XSPI_Command+0x32e>
3401719c:	68fb      	ldr	r3, [r7, #12]
3401719e:	68db      	ldr	r3, [r3, #12]
340171a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340171a4:	d115      	bne.n	340171d2 <HAL_XSPI_Command+0x35a>
340171a6:	697b      	ldr	r3, [r7, #20]
340171a8:	2b14      	cmp	r3, #20
340171aa:	d107      	bne.n	340171bc <HAL_XSPI_Command+0x344>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
340171ac:	68bb      	ldr	r3, [r7, #8]
340171ae:	681b      	ldr	r3, [r3, #0]
340171b0:	2b02      	cmp	r3, #2
340171b2:	d00e      	beq.n	340171d2 <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
340171b4:	68bb      	ldr	r3, [r7, #8]
340171b6:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
340171b8:	2b03      	cmp	r3, #3
340171ba:	d00a      	beq.n	340171d2 <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
340171bc:	697b      	ldr	r3, [r7, #20]
340171be:	2b24      	cmp	r3, #36	@ 0x24
340171c0:	d15e      	bne.n	34017280 <HAL_XSPI_Command+0x408>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
340171c2:	68bb      	ldr	r3, [r7, #8]
340171c4:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
340171c6:	2b01      	cmp	r3, #1
340171c8:	d003      	beq.n	340171d2 <HAL_XSPI_Command+0x35a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
340171ca:	68bb      	ldr	r3, [r7, #8]
340171cc:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
340171ce:	2b03      	cmp	r3, #3
340171d0:	d156      	bne.n	34017280 <HAL_XSPI_Command+0x408>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
340171d2:	687b      	ldr	r3, [r7, #4]
340171d4:	9300      	str	r3, [sp, #0]
340171d6:	69bb      	ldr	r3, [r7, #24]
340171d8:	2200      	movs	r2, #0
340171da:	2120      	movs	r1, #32
340171dc:	68f8      	ldr	r0, [r7, #12]
340171de:	f000 fb1e 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
340171e2:	4603      	mov	r3, r0
340171e4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
340171e6:	7ffb      	ldrb	r3, [r7, #31]
340171e8:	2b00      	cmp	r3, #0
340171ea:	d146      	bne.n	3401727a <HAL_XSPI_Command+0x402>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
340171ec:	68fb      	ldr	r3, [r7, #12]
340171ee:	2200      	movs	r2, #0
340171f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
340171f2:	68b9      	ldr	r1, [r7, #8]
340171f4:	68f8      	ldr	r0, [r7, #12]
340171f6:	f000 fb49 	bl	3401788c <XSPI_ConfigCmd>
340171fa:	4603      	mov	r3, r0
340171fc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
340171fe:	7ffb      	ldrb	r3, [r7, #31]
34017200:	2b00      	cmp	r3, #0
34017202:	d143      	bne.n	3401728c <HAL_XSPI_Command+0x414>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
34017204:	68bb      	ldr	r3, [r7, #8]
34017206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017208:	2b00      	cmp	r3, #0
3401720a:	d10e      	bne.n	3401722a <HAL_XSPI_Command+0x3b2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401720c:	687b      	ldr	r3, [r7, #4]
3401720e:	9300      	str	r3, [sp, #0]
34017210:	69bb      	ldr	r3, [r7, #24]
34017212:	2200      	movs	r2, #0
34017214:	2120      	movs	r1, #32
34017216:	68f8      	ldr	r0, [r7, #12]
34017218:	f000 fb01 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
3401721c:	4603      	mov	r3, r0
3401721e:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34017220:	68fb      	ldr	r3, [r7, #12]
34017222:	681b      	ldr	r3, [r3, #0]
34017224:	2202      	movs	r2, #2
34017226:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
34017228:	e030      	b.n	3401728c <HAL_XSPI_Command+0x414>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401722a:	68bb      	ldr	r3, [r7, #8]
3401722c:	681b      	ldr	r3, [r3, #0]
3401722e:	2b00      	cmp	r3, #0
34017230:	d103      	bne.n	3401723a <HAL_XSPI_Command+0x3c2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34017232:	68fb      	ldr	r3, [r7, #12]
34017234:	2204      	movs	r2, #4
34017236:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017238:	e028      	b.n	3401728c <HAL_XSPI_Command+0x414>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3401723a:	68bb      	ldr	r3, [r7, #8]
3401723c:	681b      	ldr	r3, [r3, #0]
3401723e:	2b01      	cmp	r3, #1
34017240:	d10b      	bne.n	3401725a <HAL_XSPI_Command+0x3e2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
34017242:	68fb      	ldr	r3, [r7, #12]
34017244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34017246:	2b24      	cmp	r3, #36	@ 0x24
34017248:	d103      	bne.n	34017252 <HAL_XSPI_Command+0x3da>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401724a:	68fb      	ldr	r3, [r7, #12]
3401724c:	2204      	movs	r2, #4
3401724e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017250:	e01c      	b.n	3401728c <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
34017252:	68fb      	ldr	r3, [r7, #12]
34017254:	2214      	movs	r2, #20
34017256:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017258:	e018      	b.n	3401728c <HAL_XSPI_Command+0x414>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401725a:	68bb      	ldr	r3, [r7, #8]
3401725c:	681b      	ldr	r3, [r3, #0]
3401725e:	2b02      	cmp	r3, #2
34017260:	d114      	bne.n	3401728c <HAL_XSPI_Command+0x414>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
34017262:	68fb      	ldr	r3, [r7, #12]
34017264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34017266:	2b14      	cmp	r3, #20
34017268:	d103      	bne.n	34017272 <HAL_XSPI_Command+0x3fa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401726a:	68fb      	ldr	r3, [r7, #12]
3401726c:	2204      	movs	r2, #4
3401726e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017270:	e00c      	b.n	3401728c <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
34017272:	68fb      	ldr	r3, [r7, #12]
34017274:	2224      	movs	r2, #36	@ 0x24
34017276:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017278:	e008      	b.n	3401728c <HAL_XSPI_Command+0x414>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3401727a:	2302      	movs	r3, #2
3401727c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3401727e:	e005      	b.n	3401728c <HAL_XSPI_Command+0x414>
    }
  }
  else
  {
    status = HAL_ERROR;
34017280:	2301      	movs	r3, #1
34017282:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017284:	68fb      	ldr	r3, [r7, #12]
34017286:	2210      	movs	r2, #16
34017288:	65da      	str	r2, [r3, #92]	@ 0x5c
3401728a:	e000      	b.n	3401728e <HAL_XSPI_Command+0x416>
    if (status == HAL_OK)
3401728c:	bf00      	nop
  }

  return status;
3401728e:	7ffb      	ldrb	r3, [r7, #31]
}
34017290:	4618      	mov	r0, r3
34017292:	3720      	adds	r7, #32
34017294:	46bd      	mov	sp, r7
34017296:	bd80      	pop	{r7, pc}
34017298:	3401ea34 	.word	0x3401ea34

3401729c <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3401729c:	b580      	push	{r7, lr}
3401729e:	b08a      	sub	sp, #40	@ 0x28
340172a0:	af02      	add	r7, sp, #8
340172a2:	60f8      	str	r0, [r7, #12]
340172a4:	60b9      	str	r1, [r7, #8]
340172a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340172a8:	f7ec fd1a 	bl	34003ce0 <HAL_GetTick>
340172ac:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
340172ae:	68fb      	ldr	r3, [r7, #12]
340172b0:	681b      	ldr	r3, [r3, #0]
340172b2:	3350      	adds	r3, #80	@ 0x50
340172b4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
340172b6:	68bb      	ldr	r3, [r7, #8]
340172b8:	2b00      	cmp	r3, #0
340172ba:	d105      	bne.n	340172c8 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
340172bc:	2301      	movs	r3, #1
340172be:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340172c0:	68fb      	ldr	r3, [r7, #12]
340172c2:	2208      	movs	r2, #8
340172c4:	65da      	str	r2, [r3, #92]	@ 0x5c
340172c6:	e057      	b.n	34017378 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340172c8:	68fb      	ldr	r3, [r7, #12]
340172ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340172cc:	2b04      	cmp	r3, #4
340172ce:	d14e      	bne.n	3401736e <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340172d0:	68fb      	ldr	r3, [r7, #12]
340172d2:	681b      	ldr	r3, [r3, #0]
340172d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340172d6:	1c5a      	adds	r2, r3, #1
340172d8:	68fb      	ldr	r3, [r7, #12]
340172da:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340172dc:	68fb      	ldr	r3, [r7, #12]
340172de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340172e0:	68fb      	ldr	r3, [r7, #12]
340172e2:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
340172e4:	68fb      	ldr	r3, [r7, #12]
340172e6:	68ba      	ldr	r2, [r7, #8]
340172e8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
340172ea:	68fb      	ldr	r3, [r7, #12]
340172ec:	681b      	ldr	r3, [r3, #0]
340172ee:	681a      	ldr	r2, [r3, #0]
340172f0:	68fb      	ldr	r3, [r7, #12]
340172f2:	681b      	ldr	r3, [r3, #0]
340172f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
340172f8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
340172fa:	687b      	ldr	r3, [r7, #4]
340172fc:	9300      	str	r3, [sp, #0]
340172fe:	69bb      	ldr	r3, [r7, #24]
34017300:	2201      	movs	r2, #1
34017302:	2104      	movs	r1, #4
34017304:	68f8      	ldr	r0, [r7, #12]
34017306:	f000 fa8a 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
3401730a:	4603      	mov	r3, r0
3401730c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3401730e:	7ffb      	ldrb	r3, [r7, #31]
34017310:	2b00      	cmp	r3, #0
34017312:	d113      	bne.n	3401733c <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
34017314:	68fb      	ldr	r3, [r7, #12]
34017316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017318:	781a      	ldrb	r2, [r3, #0]
3401731a:	697b      	ldr	r3, [r7, #20]
3401731c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401731e:	68fb      	ldr	r3, [r7, #12]
34017320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017322:	1c5a      	adds	r2, r3, #1
34017324:	68fb      	ldr	r3, [r7, #12]
34017326:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34017328:	68fb      	ldr	r3, [r7, #12]
3401732a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3401732c:	1e5a      	subs	r2, r3, #1
3401732e:	68fb      	ldr	r3, [r7, #12]
34017330:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34017332:	68fb      	ldr	r3, [r7, #12]
34017334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017336:	2b00      	cmp	r3, #0
34017338:	d1df      	bne.n	340172fa <HAL_XSPI_Transmit+0x5e>
3401733a:	e000      	b.n	3401733e <HAL_XSPI_Transmit+0xa2>
          break;
3401733c:	bf00      	nop

      if (status == HAL_OK)
3401733e:	7ffb      	ldrb	r3, [r7, #31]
34017340:	2b00      	cmp	r3, #0
34017342:	d119      	bne.n	34017378 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
34017344:	687b      	ldr	r3, [r7, #4]
34017346:	9300      	str	r3, [sp, #0]
34017348:	69bb      	ldr	r3, [r7, #24]
3401734a:	2201      	movs	r2, #1
3401734c:	2102      	movs	r1, #2
3401734e:	68f8      	ldr	r0, [r7, #12]
34017350:	f000 fa65 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34017354:	4603      	mov	r3, r0
34017356:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
34017358:	7ffb      	ldrb	r3, [r7, #31]
3401735a:	2b00      	cmp	r3, #0
3401735c:	d10c      	bne.n	34017378 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401735e:	68fb      	ldr	r3, [r7, #12]
34017360:	681b      	ldr	r3, [r3, #0]
34017362:	2202      	movs	r2, #2
34017364:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
34017366:	68fb      	ldr	r3, [r7, #12]
34017368:	2202      	movs	r2, #2
3401736a:	659a      	str	r2, [r3, #88]	@ 0x58
3401736c:	e004      	b.n	34017378 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3401736e:	2301      	movs	r3, #1
34017370:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017372:	68fb      	ldr	r3, [r7, #12]
34017374:	2210      	movs	r2, #16
34017376:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017378:	7ffb      	ldrb	r3, [r7, #31]
}
3401737a:	4618      	mov	r0, r3
3401737c:	3720      	adds	r7, #32
3401737e:	46bd      	mov	sp, r7
34017380:	bd80      	pop	{r7, pc}

34017382 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
34017382:	b580      	push	{r7, lr}
34017384:	b08c      	sub	sp, #48	@ 0x30
34017386:	af02      	add	r7, sp, #8
34017388:	60f8      	str	r0, [r7, #12]
3401738a:	60b9      	str	r1, [r7, #8]
3401738c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3401738e:	f7ec fca7 	bl	34003ce0 <HAL_GetTick>
34017392:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
34017394:	68fb      	ldr	r3, [r7, #12]
34017396:	681b      	ldr	r3, [r3, #0]
34017398:	3350      	adds	r3, #80	@ 0x50
3401739a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3401739c:	68fb      	ldr	r3, [r7, #12]
3401739e:	681b      	ldr	r3, [r3, #0]
340173a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340173a2:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
340173a4:	68fb      	ldr	r3, [r7, #12]
340173a6:	681b      	ldr	r3, [r3, #0]
340173a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340173ac:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
340173ae:	68bb      	ldr	r3, [r7, #8]
340173b0:	2b00      	cmp	r3, #0
340173b2:	d106      	bne.n	340173c2 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
340173b4:	2301      	movs	r3, #1
340173b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
340173ba:	68fb      	ldr	r3, [r7, #12]
340173bc:	2208      	movs	r2, #8
340173be:	65da      	str	r2, [r3, #92]	@ 0x5c
340173c0:	e07c      	b.n	340174bc <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340173c2:	68fb      	ldr	r3, [r7, #12]
340173c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340173c6:	2b04      	cmp	r3, #4
340173c8:	d172      	bne.n	340174b0 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
340173ca:	68fb      	ldr	r3, [r7, #12]
340173cc:	681b      	ldr	r3, [r3, #0]
340173ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340173d0:	1c5a      	adds	r2, r3, #1
340173d2:	68fb      	ldr	r3, [r7, #12]
340173d4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
340173d6:	68fb      	ldr	r3, [r7, #12]
340173d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
340173da:	68fb      	ldr	r3, [r7, #12]
340173dc:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
340173de:	68fb      	ldr	r3, [r7, #12]
340173e0:	68ba      	ldr	r2, [r7, #8]
340173e2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
340173e4:	68fb      	ldr	r3, [r7, #12]
340173e6:	681b      	ldr	r3, [r3, #0]
340173e8:	681b      	ldr	r3, [r3, #0]
340173ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
340173ee:	68fb      	ldr	r3, [r7, #12]
340173f0:	681b      	ldr	r3, [r3, #0]
340173f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
340173f6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340173f8:	68fb      	ldr	r3, [r7, #12]
340173fa:	68db      	ldr	r3, [r3, #12]
340173fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34017400:	d104      	bne.n	3401740c <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
34017402:	68fb      	ldr	r3, [r7, #12]
34017404:	681b      	ldr	r3, [r3, #0]
34017406:	69ba      	ldr	r2, [r7, #24]
34017408:	649a      	str	r2, [r3, #72]	@ 0x48
3401740a:	e011      	b.n	34017430 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401740c:	68fb      	ldr	r3, [r7, #12]
3401740e:	681b      	ldr	r3, [r3, #0]
34017410:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34017414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34017418:	2b00      	cmp	r3, #0
3401741a:	d004      	beq.n	34017426 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401741c:	68fb      	ldr	r3, [r7, #12]
3401741e:	681b      	ldr	r3, [r3, #0]
34017420:	69ba      	ldr	r2, [r7, #24]
34017422:	649a      	str	r2, [r3, #72]	@ 0x48
34017424:	e004      	b.n	34017430 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34017426:	68fb      	ldr	r3, [r7, #12]
34017428:	681b      	ldr	r3, [r3, #0]
3401742a:	697a      	ldr	r2, [r7, #20]
3401742c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
34017430:	687b      	ldr	r3, [r7, #4]
34017432:	9300      	str	r3, [sp, #0]
34017434:	6a3b      	ldr	r3, [r7, #32]
34017436:	2201      	movs	r2, #1
34017438:	2106      	movs	r1, #6
3401743a:	68f8      	ldr	r0, [r7, #12]
3401743c:	f000 f9ef 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34017440:	4603      	mov	r3, r0
34017442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
34017446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401744a:	2b00      	cmp	r3, #0
3401744c:	d114      	bne.n	34017478 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3401744e:	68fb      	ldr	r3, [r7, #12]
34017450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34017452:	69fa      	ldr	r2, [r7, #28]
34017454:	7812      	ldrb	r2, [r2, #0]
34017456:	b2d2      	uxtb	r2, r2
34017458:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401745a:	68fb      	ldr	r3, [r7, #12]
3401745c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3401745e:	1c5a      	adds	r2, r3, #1
34017460:	68fb      	ldr	r3, [r7, #12]
34017462:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34017464:	68fb      	ldr	r3, [r7, #12]
34017466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017468:	1e5a      	subs	r2, r3, #1
3401746a:	68fb      	ldr	r3, [r7, #12]
3401746c:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401746e:	68fb      	ldr	r3, [r7, #12]
34017470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34017472:	2b00      	cmp	r3, #0
34017474:	d1dc      	bne.n	34017430 <HAL_XSPI_Receive+0xae>
34017476:	e000      	b.n	3401747a <HAL_XSPI_Receive+0xf8>
          break;
34017478:	bf00      	nop

      if (status == HAL_OK)
3401747a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401747e:	2b00      	cmp	r3, #0
34017480:	d11c      	bne.n	340174bc <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
34017482:	687b      	ldr	r3, [r7, #4]
34017484:	9300      	str	r3, [sp, #0]
34017486:	6a3b      	ldr	r3, [r7, #32]
34017488:	2201      	movs	r2, #1
3401748a:	2102      	movs	r1, #2
3401748c:	68f8      	ldr	r0, [r7, #12]
3401748e:	f000 f9c6 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34017492:	4603      	mov	r3, r0
34017494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
34017498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3401749c:	2b00      	cmp	r3, #0
3401749e:	d10d      	bne.n	340174bc <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
340174a0:	68fb      	ldr	r3, [r7, #12]
340174a2:	681b      	ldr	r3, [r3, #0]
340174a4:	2202      	movs	r2, #2
340174a6:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
340174a8:	68fb      	ldr	r3, [r7, #12]
340174aa:	2202      	movs	r2, #2
340174ac:	659a      	str	r2, [r3, #88]	@ 0x58
340174ae:	e005      	b.n	340174bc <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
340174b0:	2301      	movs	r3, #1
340174b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340174b6:	68fb      	ldr	r3, [r7, #12]
340174b8:	2210      	movs	r2, #16
340174ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
340174bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
340174c0:	4618      	mov	r0, r3
340174c2:	3728      	adds	r7, #40	@ 0x28
340174c4:	46bd      	mov	sp, r7
340174c6:	bd80      	pop	{r7, pc}

340174c8 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
340174c8:	b580      	push	{r7, lr}
340174ca:	b08c      	sub	sp, #48	@ 0x30
340174cc:	af02      	add	r7, sp, #8
340174ce:	60f8      	str	r0, [r7, #12]
340174d0:	60b9      	str	r1, [r7, #8]
340174d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
340174d4:	f7ec fc04 	bl	34003ce0 <HAL_GetTick>
340174d8:	6238      	str	r0, [r7, #32]
  uint32_t addr_reg = hxspi->Instance->AR;
340174da:	68fb      	ldr	r3, [r7, #12]
340174dc:	681b      	ldr	r3, [r3, #0]
340174de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340174e0:	61fb      	str	r3, [r7, #28]
  uint32_t ir_reg = hxspi->Instance->IR;
340174e2:	68fb      	ldr	r3, [r7, #12]
340174e4:	681b      	ldr	r3, [r3, #0]
340174e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340174ea:	61bb      	str	r3, [r7, #24]
#ifdef USE_FULL_ASSERT
  uint32_t dlr_reg = hxspi->Instance->DLR;
340174ec:	68fb      	ldr	r3, [r7, #12]
340174ee:	681b      	ldr	r3, [r3, #0]
340174f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340174f2:	617b      	str	r3, [r7, #20]
#endif /* USE_FULL_ASSERT */

  /* Check the parameters of the autopolling configuration structure */
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
340174f4:	68bb      	ldr	r3, [r7, #8]
340174f6:	689b      	ldr	r3, [r3, #8]
340174f8:	2b00      	cmp	r3, #0
340174fa:	d009      	beq.n	34017510 <HAL_XSPI_AutoPolling+0x48>
340174fc:	68bb      	ldr	r3, [r7, #8]
340174fe:	689b      	ldr	r3, [r3, #8]
34017500:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34017504:	d004      	beq.n	34017510 <HAL_XSPI_AutoPolling+0x48>
34017506:	f240 7134 	movw	r1, #1844	@ 0x734
3401750a:	4853      	ldr	r0, [pc, #332]	@ (34017658 <HAL_XSPI_AutoPolling+0x190>)
3401750c:	f7ea fbc6 	bl	34001c9c <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
34017510:	68bb      	ldr	r3, [r7, #8]
34017512:	68db      	ldr	r3, [r3, #12]
34017514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34017518:	d008      	beq.n	3401752c <HAL_XSPI_AutoPolling+0x64>
3401751a:	68bb      	ldr	r3, [r7, #8]
3401751c:	68db      	ldr	r3, [r3, #12]
3401751e:	2b00      	cmp	r3, #0
34017520:	d004      	beq.n	3401752c <HAL_XSPI_AutoPolling+0x64>
34017522:	f240 7135 	movw	r1, #1845	@ 0x735
34017526:	484c      	ldr	r0, [pc, #304]	@ (34017658 <HAL_XSPI_AutoPolling+0x190>)
34017528:	f7ea fbb8 	bl	34001c9c <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3401752c:	68bb      	ldr	r3, [r7, #8]
3401752e:	691b      	ldr	r3, [r3, #16]
34017530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34017534:	d304      	bcc.n	34017540 <HAL_XSPI_AutoPolling+0x78>
34017536:	f240 7136 	movw	r1, #1846	@ 0x736
3401753a:	4847      	ldr	r0, [pc, #284]	@ (34017658 <HAL_XSPI_AutoPolling+0x190>)
3401753c:	f7ea fbae 	bl	34001c9c <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
34017540:	697b      	ldr	r3, [r7, #20]
34017542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34017546:	d003      	beq.n	34017550 <HAL_XSPI_AutoPolling+0x88>
34017548:	697b      	ldr	r3, [r7, #20]
3401754a:	3301      	adds	r3, #1
3401754c:	2b04      	cmp	r3, #4
3401754e:	d904      	bls.n	3401755a <HAL_XSPI_AutoPolling+0x92>
34017550:	f240 7137 	movw	r1, #1847	@ 0x737
34017554:	4840      	ldr	r0, [pc, #256]	@ (34017658 <HAL_XSPI_AutoPolling+0x190>)
34017556:	f7ea fba1 	bl	34001c9c <assert_failed>

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3401755a:	68fb      	ldr	r3, [r7, #12]
3401755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401755e:	2b04      	cmp	r3, #4
34017560:	d16c      	bne.n	3401763c <HAL_XSPI_AutoPolling+0x174>
34017562:	68bb      	ldr	r3, [r7, #8]
34017564:	68db      	ldr	r3, [r3, #12]
34017566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401756a:	d167      	bne.n	3401763c <HAL_XSPI_AutoPolling+0x174>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401756c:	687b      	ldr	r3, [r7, #4]
3401756e:	9300      	str	r3, [sp, #0]
34017570:	6a3b      	ldr	r3, [r7, #32]
34017572:	2200      	movs	r2, #0
34017574:	2120      	movs	r1, #32
34017576:	68f8      	ldr	r0, [r7, #12]
34017578:	f000 f951 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
3401757c:	4603      	mov	r3, r0
3401757e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status == HAL_OK)
34017582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017586:	2b00      	cmp	r3, #0
34017588:	d154      	bne.n	34017634 <HAL_XSPI_AutoPolling+0x16c>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3401758a:	68fb      	ldr	r3, [r7, #12]
3401758c:	681b      	ldr	r3, [r3, #0]
3401758e:	68ba      	ldr	r2, [r7, #8]
34017590:	6812      	ldr	r2, [r2, #0]
34017592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
34017596:	68fb      	ldr	r3, [r7, #12]
34017598:	681b      	ldr	r3, [r3, #0]
3401759a:	68ba      	ldr	r2, [r7, #8]
3401759c:	6852      	ldr	r2, [r2, #4]
3401759e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
340175a2:	68fb      	ldr	r3, [r7, #12]
340175a4:	681b      	ldr	r3, [r3, #0]
340175a6:	68ba      	ldr	r2, [r7, #8]
340175a8:	6912      	ldr	r2, [r2, #16]
340175aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
340175ae:	68fb      	ldr	r3, [r7, #12]
340175b0:	681b      	ldr	r3, [r3, #0]
340175b2:	681b      	ldr	r3, [r3, #0]
340175b4:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
340175b8:	68bb      	ldr	r3, [r7, #8]
340175ba:	6899      	ldr	r1, [r3, #8]
340175bc:	68bb      	ldr	r3, [r7, #8]
340175be:	68db      	ldr	r3, [r3, #12]
340175c0:	430b      	orrs	r3, r1
340175c2:	431a      	orrs	r2, r3
340175c4:	68fb      	ldr	r3, [r7, #12]
340175c6:	681b      	ldr	r3, [r3, #0]
340175c8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
340175cc:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
340175ce:	68fb      	ldr	r3, [r7, #12]
340175d0:	68db      	ldr	r3, [r3, #12]
340175d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340175d6:	d104      	bne.n	340175e2 <HAL_XSPI_AutoPolling+0x11a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
340175d8:	68fb      	ldr	r3, [r7, #12]
340175da:	681b      	ldr	r3, [r3, #0]
340175dc:	69fa      	ldr	r2, [r7, #28]
340175de:	649a      	str	r2, [r3, #72]	@ 0x48
340175e0:	e011      	b.n	34017606 <HAL_XSPI_AutoPolling+0x13e>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
340175e2:	68fb      	ldr	r3, [r7, #12]
340175e4:	681b      	ldr	r3, [r3, #0]
340175e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
340175ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
340175ee:	2b00      	cmp	r3, #0
340175f0:	d004      	beq.n	340175fc <HAL_XSPI_AutoPolling+0x134>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
340175f2:	68fb      	ldr	r3, [r7, #12]
340175f4:	681b      	ldr	r3, [r3, #0]
340175f6:	69fa      	ldr	r2, [r7, #28]
340175f8:	649a      	str	r2, [r3, #72]	@ 0x48
340175fa:	e004      	b.n	34017606 <HAL_XSPI_AutoPolling+0x13e>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
340175fc:	68fb      	ldr	r3, [r7, #12]
340175fe:	681b      	ldr	r3, [r3, #0]
34017600:	69ba      	ldr	r2, [r7, #24]
34017602:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
34017606:	687b      	ldr	r3, [r7, #4]
34017608:	9300      	str	r3, [sp, #0]
3401760a:	6a3b      	ldr	r3, [r7, #32]
3401760c:	2201      	movs	r2, #1
3401760e:	2108      	movs	r1, #8
34017610:	68f8      	ldr	r0, [r7, #12]
34017612:	f000 f904 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
34017616:	4603      	mov	r3, r0
34017618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      if (status == HAL_OK)
3401761c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34017620:	2b00      	cmp	r3, #0
34017622:	d112      	bne.n	3401764a <HAL_XSPI_AutoPolling+0x182>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
34017624:	68fb      	ldr	r3, [r7, #12]
34017626:	681b      	ldr	r3, [r3, #0]
34017628:	2208      	movs	r2, #8
3401762a:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3401762c:	68fb      	ldr	r3, [r7, #12]
3401762e:	2202      	movs	r2, #2
34017630:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34017632:	e00a      	b.n	3401764a <HAL_XSPI_AutoPolling+0x182>
      }
    }
    else
    {
      status = HAL_BUSY;
34017634:	2302      	movs	r3, #2
34017636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status == HAL_OK)
3401763a:	e006      	b.n	3401764a <HAL_XSPI_AutoPolling+0x182>
    }
  }
  else
  {
    status = HAL_ERROR;
3401763c:	2301      	movs	r3, #1
3401763e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017642:	68fb      	ldr	r3, [r7, #12]
34017644:	2210      	movs	r2, #16
34017646:	65da      	str	r2, [r3, #92]	@ 0x5c
34017648:	e000      	b.n	3401764c <HAL_XSPI_AutoPolling+0x184>
    if (status == HAL_OK)
3401764a:	bf00      	nop
  }

  return status;
3401764c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34017650:	4618      	mov	r0, r3
34017652:	3728      	adds	r7, #40	@ 0x28
34017654:	46bd      	mov	sp, r7
34017656:	bd80      	pop	{r7, pc}
34017658:	3401ea34 	.word	0x3401ea34

3401765c <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
3401765c:	b580      	push	{r7, lr}
3401765e:	b086      	sub	sp, #24
34017660:	af02      	add	r7, sp, #8
34017662:	6078      	str	r0, [r7, #4]
34017664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34017666:	f7ec fb3b 	bl	34003ce0 <HAL_GetTick>
3401766a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401766c:	683b      	ldr	r3, [r7, #0]
3401766e:	681b      	ldr	r3, [r3, #0]
34017670:	2b00      	cmp	r3, #0
34017672:	d008      	beq.n	34017686 <HAL_XSPI_MemoryMapped+0x2a>
34017674:	683b      	ldr	r3, [r7, #0]
34017676:	681b      	ldr	r3, [r3, #0]
34017678:	2b08      	cmp	r3, #8
3401767a:	d004      	beq.n	34017686 <HAL_XSPI_MemoryMapped+0x2a>
3401767c:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
34017680:	4846      	ldr	r0, [pc, #280]	@ (3401779c <HAL_XSPI_MemoryMapped+0x140>)
34017682:	f7ea fb0b 	bl	34001c9c <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
34017686:	683b      	ldr	r3, [r7, #0]
34017688:	689b      	ldr	r3, [r3, #8]
3401768a:	2b00      	cmp	r3, #0
3401768c:	d009      	beq.n	340176a2 <HAL_XSPI_MemoryMapped+0x46>
3401768e:	683b      	ldr	r3, [r7, #0]
34017690:	689b      	ldr	r3, [r3, #8]
34017692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34017696:	d004      	beq.n	340176a2 <HAL_XSPI_MemoryMapped+0x46>
34017698:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3401769c:	483f      	ldr	r0, [pc, #252]	@ (3401779c <HAL_XSPI_MemoryMapped+0x140>)
3401769e:	f7ea fafd 	bl	34001c9c <assert_failed>

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
340176a2:	687b      	ldr	r3, [r7, #4]
340176a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340176a6:	2b04      	cmp	r3, #4
340176a8:	d16d      	bne.n	34017786 <HAL_XSPI_MemoryMapped+0x12a>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
340176aa:	687b      	ldr	r3, [r7, #4]
340176ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340176ae:	9300      	str	r3, [sp, #0]
340176b0:	68bb      	ldr	r3, [r7, #8]
340176b2:	2200      	movs	r2, #0
340176b4:	2120      	movs	r1, #32
340176b6:	6878      	ldr	r0, [r7, #4]
340176b8:	f000 f8b1 	bl	3401781e <XSPI_WaitFlagStateUntilTimeout>
340176bc:	4603      	mov	r3, r0
340176be:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
340176c0:	7bfb      	ldrb	r3, [r7, #15]
340176c2:	2b00      	cmp	r3, #0
340176c4:	d164      	bne.n	34017790 <HAL_XSPI_MemoryMapped+0x134>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
340176c6:	687b      	ldr	r3, [r7, #4]
340176c8:	2288      	movs	r2, #136	@ 0x88
340176ca:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
340176cc:	683b      	ldr	r3, [r7, #0]
340176ce:	689b      	ldr	r3, [r3, #8]
340176d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340176d4:	d10b      	bne.n	340176ee <HAL_XSPI_MemoryMapped+0x92>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
340176d6:	687b      	ldr	r3, [r7, #4]
340176d8:	681b      	ldr	r3, [r3, #0]
340176da:	681b      	ldr	r3, [r3, #0]
340176dc:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
340176e0:	683b      	ldr	r3, [r7, #0]
340176e2:	689a      	ldr	r2, [r3, #8]
340176e4:	687b      	ldr	r3, [r7, #4]
340176e6:	681b      	ldr	r3, [r3, #0]
340176e8:	430a      	orrs	r2, r1
340176ea:	601a      	str	r2, [r3, #0]
340176ec:	e01b      	b.n	34017726 <HAL_XSPI_MemoryMapped+0xca>
      }

      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
340176ee:	683b      	ldr	r3, [r7, #0]
340176f0:	68db      	ldr	r3, [r3, #12]
340176f2:	2b00      	cmp	r3, #0
340176f4:	d009      	beq.n	3401770a <HAL_XSPI_MemoryMapped+0xae>
340176f6:	683b      	ldr	r3, [r7, #0]
340176f8:	68db      	ldr	r3, [r3, #12]
340176fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340176fe:	d004      	beq.n	3401770a <HAL_XSPI_MemoryMapped+0xae>
34017700:	f240 71dd 	movw	r1, #2013	@ 0x7dd
34017704:	4825      	ldr	r0, [pc, #148]	@ (3401779c <HAL_XSPI_MemoryMapped+0x140>)
34017706:	f7ea fac9 	bl	34001c9c <assert_failed>

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3401770a:	687b      	ldr	r3, [r7, #4]
3401770c:	681b      	ldr	r3, [r3, #0]
3401770e:	681b      	ldr	r3, [r3, #0]
34017710:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
34017714:	683b      	ldr	r3, [r7, #0]
34017716:	689a      	ldr	r2, [r3, #8]
34017718:	683b      	ldr	r3, [r7, #0]
3401771a:	68db      	ldr	r3, [r3, #12]
3401771c:	431a      	orrs	r2, r3
3401771e:	687b      	ldr	r3, [r7, #4]
34017720:	681b      	ldr	r3, [r3, #0]
34017722:	430a      	orrs	r2, r1
34017724:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
34017726:	683b      	ldr	r3, [r7, #0]
34017728:	681b      	ldr	r3, [r3, #0]
3401772a:	2b08      	cmp	r3, #8
3401772c:	d11b      	bne.n	34017766 <HAL_XSPI_MemoryMapped+0x10a>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3401772e:	683b      	ldr	r3, [r7, #0]
34017730:	685b      	ldr	r3, [r3, #4]
34017732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34017736:	d304      	bcc.n	34017742 <HAL_XSPI_MemoryMapped+0xe6>
34017738:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3401773c:	4817      	ldr	r0, [pc, #92]	@ (3401779c <HAL_XSPI_MemoryMapped+0x140>)
3401773e:	f7ea faad 	bl	34001c9c <assert_failed>

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
34017742:	687b      	ldr	r3, [r7, #4]
34017744:	681b      	ldr	r3, [r3, #0]
34017746:	683a      	ldr	r2, [r7, #0]
34017748:	6852      	ldr	r2, [r2, #4]
3401774a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3401774e:	687b      	ldr	r3, [r7, #4]
34017750:	681b      	ldr	r3, [r3, #0]
34017752:	2210      	movs	r2, #16
34017754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
34017756:	687b      	ldr	r3, [r7, #4]
34017758:	681b      	ldr	r3, [r3, #0]
3401775a:	681a      	ldr	r2, [r3, #0]
3401775c:	687b      	ldr	r3, [r7, #4]
3401775e:	681b      	ldr	r3, [r3, #0]
34017760:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
34017764:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
34017766:	687b      	ldr	r3, [r7, #4]
34017768:	681b      	ldr	r3, [r3, #0]
3401776a:	681b      	ldr	r3, [r3, #0]
3401776c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34017770:	f023 0308 	bic.w	r3, r3, #8
34017774:	683a      	ldr	r2, [r7, #0]
34017776:	6812      	ldr	r2, [r2, #0]
34017778:	431a      	orrs	r2, r3
3401777a:	687b      	ldr	r3, [r7, #4]
3401777c:	681b      	ldr	r3, [r3, #0]
3401777e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
34017782:	601a      	str	r2, [r3, #0]
34017784:	e004      	b.n	34017790 <HAL_XSPI_MemoryMapped+0x134>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
34017786:	2301      	movs	r3, #1
34017788:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401778a:	687b      	ldr	r3, [r7, #4]
3401778c:	2210      	movs	r2, #16
3401778e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34017790:	7bfb      	ldrb	r3, [r7, #15]
}
34017792:	4618      	mov	r0, r3
34017794:	3710      	adds	r7, #16
34017796:	46bd      	mov	sp, r7
34017798:	bd80      	pop	{r7, pc}
3401779a:	bf00      	nop
3401779c:	3401ea34 	.word	0x3401ea34

340177a0 <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
340177a0:	b580      	push	{r7, lr}
340177a2:	b084      	sub	sp, #16
340177a4:	af00      	add	r7, sp, #0
340177a6:	6078      	str	r0, [r7, #4]
340177a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
340177aa:	2300      	movs	r3, #0
340177ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
340177ae:	683b      	ldr	r3, [r7, #0]
340177b0:	2bff      	cmp	r3, #255	@ 0xff
340177b2:	d904      	bls.n	340177be <HAL_XSPI_SetClockPrescaler+0x1e>
340177b4:	f640 2193 	movw	r1, #2707	@ 0xa93
340177b8:	4810      	ldr	r0, [pc, #64]	@ (340177fc <HAL_XSPI_SetClockPrescaler+0x5c>)
340177ba:	f7ea fa6f 	bl	34001c9c <assert_failed>

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
340177be:	687b      	ldr	r3, [r7, #4]
340177c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340177c2:	f003 0308 	and.w	r3, r3, #8
340177c6:	2b00      	cmp	r3, #0
340177c8:	d10e      	bne.n	340177e8 <HAL_XSPI_SetClockPrescaler+0x48>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
340177ca:	687b      	ldr	r3, [r7, #4]
340177cc:	683a      	ldr	r2, [r7, #0]
340177ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340177d0:	687b      	ldr	r3, [r7, #4]
340177d2:	681b      	ldr	r3, [r3, #0]
340177d4:	68db      	ldr	r3, [r3, #12]
340177d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
340177da:	687b      	ldr	r3, [r7, #4]
340177dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340177de:	687b      	ldr	r3, [r7, #4]
340177e0:	681b      	ldr	r3, [r3, #0]
340177e2:	430a      	orrs	r2, r1
340177e4:	60da      	str	r2, [r3, #12]
340177e6:	e004      	b.n	340177f2 <HAL_XSPI_SetClockPrescaler+0x52>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
340177e8:	2301      	movs	r3, #1
340177ea:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340177ec:	687b      	ldr	r3, [r7, #4]
340177ee:	2210      	movs	r2, #16
340177f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
340177f2:	7bfb      	ldrb	r3, [r7, #15]
}
340177f4:	4618      	mov	r0, r3
340177f6:	3710      	adds	r7, #16
340177f8:	46bd      	mov	sp, r7
340177fa:	bd80      	pop	{r7, pc}
340177fc:	3401ea34 	.word	0x3401ea34

34017800 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
34017800:	b480      	push	{r7}
34017802:	b083      	sub	sp, #12
34017804:	af00      	add	r7, sp, #0
34017806:	6078      	str	r0, [r7, #4]
34017808:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3401780a:	687b      	ldr	r3, [r7, #4]
3401780c:	683a      	ldr	r2, [r7, #0]
3401780e:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
34017810:	2300      	movs	r3, #0
}
34017812:	4618      	mov	r0, r3
34017814:	370c      	adds	r7, #12
34017816:	46bd      	mov	sp, r7
34017818:	f85d 7b04 	ldr.w	r7, [sp], #4
3401781c:	4770      	bx	lr

3401781e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3401781e:	b580      	push	{r7, lr}
34017820:	b084      	sub	sp, #16
34017822:	af00      	add	r7, sp, #0
34017824:	60f8      	str	r0, [r7, #12]
34017826:	60b9      	str	r1, [r7, #8]
34017828:	603b      	str	r3, [r7, #0]
3401782a:	4613      	mov	r3, r2
3401782c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401782e:	e019      	b.n	34017864 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34017830:	69bb      	ldr	r3, [r7, #24]
34017832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34017836:	d015      	beq.n	34017864 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34017838:	f7ec fa52 	bl	34003ce0 <HAL_GetTick>
3401783c:	4602      	mov	r2, r0
3401783e:	683b      	ldr	r3, [r7, #0]
34017840:	1ad3      	subs	r3, r2, r3
34017842:	69ba      	ldr	r2, [r7, #24]
34017844:	429a      	cmp	r2, r3
34017846:	d302      	bcc.n	3401784e <XSPI_WaitFlagStateUntilTimeout+0x30>
34017848:	69bb      	ldr	r3, [r7, #24]
3401784a:	2b00      	cmp	r3, #0
3401784c:	d10a      	bne.n	34017864 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3401784e:	68fb      	ldr	r3, [r7, #12]
34017850:	2202      	movs	r2, #2
34017852:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34017854:	68fb      	ldr	r3, [r7, #12]
34017856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017858:	f043 0201 	orr.w	r2, r3, #1
3401785c:	68fb      	ldr	r3, [r7, #12]
3401785e:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
34017860:	2303      	movs	r3, #3
34017862:	e00e      	b.n	34017882 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34017864:	68fb      	ldr	r3, [r7, #12]
34017866:	681b      	ldr	r3, [r3, #0]
34017868:	6a1a      	ldr	r2, [r3, #32]
3401786a:	68bb      	ldr	r3, [r7, #8]
3401786c:	4013      	ands	r3, r2
3401786e:	2b00      	cmp	r3, #0
34017870:	bf14      	ite	ne
34017872:	2301      	movne	r3, #1
34017874:	2300      	moveq	r3, #0
34017876:	b2db      	uxtb	r3, r3
34017878:	461a      	mov	r2, r3
3401787a:	79fb      	ldrb	r3, [r7, #7]
3401787c:	429a      	cmp	r2, r3
3401787e:	d1d7      	bne.n	34017830 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
34017880:	2300      	movs	r3, #0
}
34017882:	4618      	mov	r0, r3
34017884:	3710      	adds	r7, #16
34017886:	46bd      	mov	sp, r7
34017888:	bd80      	pop	{r7, pc}
	...

3401788c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
3401788c:	b580      	push	{r7, lr}
3401788e:	b088      	sub	sp, #32
34017890:	af00      	add	r7, sp, #0
34017892:	6078      	str	r0, [r7, #4]
34017894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34017896:	2300      	movs	r3, #0
34017898:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401789a:	687b      	ldr	r3, [r7, #4]
3401789c:	681b      	ldr	r3, [r3, #0]
3401789e:	681a      	ldr	r2, [r3, #0]
340178a0:	687b      	ldr	r3, [r7, #4]
340178a2:	681b      	ldr	r3, [r3, #0]
340178a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
340178a8:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
340178aa:	687b      	ldr	r3, [r7, #4]
340178ac:	689b      	ldr	r3, [r3, #8]
340178ae:	2b00      	cmp	r3, #0
340178b0:	d12b      	bne.n	3401790a <XSPI_ConfigCmd+0x7e>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
340178b2:	683b      	ldr	r3, [r7, #0]
340178b4:	685b      	ldr	r3, [r3, #4]
340178b6:	2b00      	cmp	r3, #0
340178b8:	d01c      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178ba:	683b      	ldr	r3, [r7, #0]
340178bc:	685b      	ldr	r3, [r3, #4]
340178be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340178c2:	d017      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178c4:	683b      	ldr	r3, [r7, #0]
340178c6:	685b      	ldr	r3, [r3, #4]
340178c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340178cc:	d012      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178ce:	683b      	ldr	r3, [r7, #0]
340178d0:	685b      	ldr	r3, [r3, #4]
340178d2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
340178d6:	d00d      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178d8:	683b      	ldr	r3, [r7, #0]
340178da:	685b      	ldr	r3, [r3, #4]
340178dc:	2b00      	cmp	r3, #0
340178de:	d009      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178e0:	683b      	ldr	r3, [r7, #0]
340178e2:	685b      	ldr	r3, [r3, #4]
340178e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340178e8:	d004      	beq.n	340178f4 <XSPI_ConfigCmd+0x68>
340178ea:	f640 41a4 	movw	r1, #3236	@ 0xca4
340178ee:	4892      	ldr	r0, [pc, #584]	@ (34017b38 <XSPI_ConfigCmd+0x2ac>)
340178f0:	f7ea f9d4 	bl	34001c9c <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
340178f4:	687b      	ldr	r3, [r7, #4]
340178f6:	681b      	ldr	r3, [r3, #0]
340178f8:	681b      	ldr	r3, [r3, #0]
340178fa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
340178fe:	683b      	ldr	r3, [r7, #0]
34017900:	685a      	ldr	r2, [r3, #4]
34017902:	687b      	ldr	r3, [r7, #4]
34017904:	681b      	ldr	r3, [r3, #0]
34017906:	430a      	orrs	r2, r1
34017908:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401790a:	683b      	ldr	r3, [r7, #0]
3401790c:	681b      	ldr	r3, [r3, #0]
3401790e:	2b02      	cmp	r3, #2
34017910:	d114      	bne.n	3401793c <XSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
34017912:	687b      	ldr	r3, [r7, #4]
34017914:	681b      	ldr	r3, [r3, #0]
34017916:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3401791a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3401791c:	687b      	ldr	r3, [r7, #4]
3401791e:	681b      	ldr	r3, [r3, #0]
34017920:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
34017924:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
34017926:	687b      	ldr	r3, [r7, #4]
34017928:	681b      	ldr	r3, [r3, #0]
3401792a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3401792e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
34017930:	687b      	ldr	r3, [r7, #4]
34017932:	681b      	ldr	r3, [r3, #0]
34017934:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
34017938:	60fb      	str	r3, [r7, #12]
3401793a:	e02c      	b.n	34017996 <XSPI_ConfigCmd+0x10a>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3401793c:	683b      	ldr	r3, [r7, #0]
3401793e:	681b      	ldr	r3, [r3, #0]
34017940:	2b03      	cmp	r3, #3
34017942:	d114      	bne.n	3401796e <XSPI_ConfigCmd+0xe2>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
34017944:	687b      	ldr	r3, [r7, #4]
34017946:	681b      	ldr	r3, [r3, #0]
34017948:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3401794c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3401794e:	687b      	ldr	r3, [r7, #4]
34017950:	681b      	ldr	r3, [r3, #0]
34017952:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
34017956:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34017958:	687b      	ldr	r3, [r7, #4]
3401795a:	681b      	ldr	r3, [r3, #0]
3401795c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
34017960:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
34017962:	687b      	ldr	r3, [r7, #4]
34017964:	681b      	ldr	r3, [r3, #0]
34017966:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3401796a:	60fb      	str	r3, [r7, #12]
3401796c:	e013      	b.n	34017996 <XSPI_ConfigCmd+0x10a>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3401796e:	687b      	ldr	r3, [r7, #4]
34017970:	681b      	ldr	r3, [r3, #0]
34017972:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34017976:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34017978:	687b      	ldr	r3, [r7, #4]
3401797a:	681b      	ldr	r3, [r3, #0]
3401797c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
34017980:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
34017982:	687b      	ldr	r3, [r7, #4]
34017984:	681b      	ldr	r3, [r3, #0]
34017986:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3401798a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3401798c:	687b      	ldr	r3, [r7, #4]
3401798e:	681b      	ldr	r3, [r3, #0]
34017990:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34017994:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
34017996:	683b      	ldr	r3, [r7, #0]
34017998:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3401799a:	69bb      	ldr	r3, [r7, #24]
3401799c:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401799e:	683b      	ldr	r3, [r7, #0]
340179a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340179a2:	2b00      	cmp	r3, #0
340179a4:	d012      	beq.n	340179cc <XSPI_ConfigCmd+0x140>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
340179a6:	683b      	ldr	r3, [r7, #0]
340179a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340179aa:	68fb      	ldr	r3, [r7, #12]
340179ac:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
340179ae:	69bb      	ldr	r3, [r7, #24]
340179b0:	681b      	ldr	r3, [r3, #0]
340179b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
340179b6:	683b      	ldr	r3, [r7, #0]
340179b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
340179ba:	683b      	ldr	r3, [r7, #0]
340179bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340179be:	4319      	orrs	r1, r3
340179c0:	683b      	ldr	r3, [r7, #0]
340179c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340179c4:	430b      	orrs	r3, r1
340179c6:	431a      	orrs	r2, r3
340179c8:	69bb      	ldr	r3, [r7, #24]
340179ca:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
340179cc:	697b      	ldr	r3, [r7, #20]
340179ce:	681b      	ldr	r3, [r3, #0]
340179d0:	f023 021f 	bic.w	r2, r3, #31
340179d4:	683b      	ldr	r3, [r7, #0]
340179d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340179d8:	431a      	orrs	r2, r3
340179da:	697b      	ldr	r3, [r7, #20]
340179dc:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340179de:	683b      	ldr	r3, [r7, #0]
340179e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340179e2:	2b00      	cmp	r3, #0
340179e4:	d009      	beq.n	340179fa <XSPI_ConfigCmd+0x16e>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
340179e6:	683b      	ldr	r3, [r7, #0]
340179e8:	681b      	ldr	r3, [r3, #0]
340179ea:	2b00      	cmp	r3, #0
340179ec:	d105      	bne.n	340179fa <XSPI_ConfigCmd+0x16e>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
340179ee:	683b      	ldr	r3, [r7, #0]
340179f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
340179f2:	687b      	ldr	r3, [r7, #4]
340179f4:	681b      	ldr	r3, [r3, #0]
340179f6:	3a01      	subs	r2, #1
340179f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340179fa:	683b      	ldr	r3, [r7, #0]
340179fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340179fe:	2b00      	cmp	r3, #0
34017a00:	d01e      	beq.n	34017a40 <XSPI_ConfigCmd+0x1b4>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
34017a02:	683b      	ldr	r3, [r7, #0]
34017a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34017a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34017a0a:	d10a      	bne.n	34017a22 <XSPI_ConfigCmd+0x196>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017a0c:	687b      	ldr	r3, [r7, #4]
34017a0e:	681b      	ldr	r3, [r3, #0]
34017a10:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017a14:	687b      	ldr	r3, [r7, #4]
34017a16:	681b      	ldr	r3, [r3, #0]
34017a18:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34017a1c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
34017a20:	e00e      	b.n	34017a40 <XSPI_ConfigCmd+0x1b4>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
34017a22:	687b      	ldr	r3, [r7, #4]
34017a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34017a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34017a2a:	d109      	bne.n	34017a40 <XSPI_ConfigCmd+0x1b4>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017a2c:	687b      	ldr	r3, [r7, #4]
34017a2e:	681b      	ldr	r3, [r3, #0]
34017a30:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017a34:	687b      	ldr	r3, [r7, #4]
34017a36:	681b      	ldr	r3, [r3, #0]
34017a38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
34017a3c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
34017a40:	683b      	ldr	r3, [r7, #0]
34017a42:	68db      	ldr	r3, [r3, #12]
34017a44:	2b00      	cmp	r3, #0
34017a46:	f000 809e 	beq.w	34017b86 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017a4a:	683b      	ldr	r3, [r7, #0]
34017a4c:	69db      	ldr	r3, [r3, #28]
34017a4e:	2b00      	cmp	r3, #0
34017a50:	d055      	beq.n	34017afe <XSPI_ConfigCmd+0x272>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017a52:	683b      	ldr	r3, [r7, #0]
34017a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017a56:	2b00      	cmp	r3, #0
34017a58:	d01e      	beq.n	34017a98 <XSPI_ConfigCmd+0x20c>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017a5a:	69bb      	ldr	r3, [r7, #24]
34017a5c:	681a      	ldr	r2, [r3, #0]
34017a5e:	4b37      	ldr	r3, [pc, #220]	@ (34017b3c <XSPI_ConfigCmd+0x2b0>)
34017a60:	4013      	ands	r3, r2
34017a62:	683a      	ldr	r2, [r7, #0]
34017a64:	68d1      	ldr	r1, [r2, #12]
34017a66:	683a      	ldr	r2, [r7, #0]
34017a68:	6952      	ldr	r2, [r2, #20]
34017a6a:	4311      	orrs	r1, r2
34017a6c:	683a      	ldr	r2, [r7, #0]
34017a6e:	6912      	ldr	r2, [r2, #16]
34017a70:	4311      	orrs	r1, r2
34017a72:	683a      	ldr	r2, [r7, #0]
34017a74:	69d2      	ldr	r2, [r2, #28]
34017a76:	4311      	orrs	r1, r2
34017a78:	683a      	ldr	r2, [r7, #0]
34017a7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017a7c:	4311      	orrs	r1, r2
34017a7e:	683a      	ldr	r2, [r7, #0]
34017a80:	6a12      	ldr	r2, [r2, #32]
34017a82:	4311      	orrs	r1, r2
34017a84:	683a      	ldr	r2, [r7, #0]
34017a86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017a88:	4311      	orrs	r1, r2
34017a8a:	683a      	ldr	r2, [r7, #0]
34017a8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017a8e:	430a      	orrs	r2, r1
34017a90:	431a      	orrs	r2, r3
34017a92:	69bb      	ldr	r3, [r7, #24]
34017a94:	601a      	str	r2, [r3, #0]
34017a96:	e028      	b.n	34017aea <XSPI_ConfigCmd+0x25e>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017a98:	69bb      	ldr	r3, [r7, #24]
34017a9a:	681b      	ldr	r3, [r3, #0]
34017a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34017aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34017aa4:	683a      	ldr	r2, [r7, #0]
34017aa6:	68d1      	ldr	r1, [r2, #12]
34017aa8:	683a      	ldr	r2, [r7, #0]
34017aaa:	6952      	ldr	r2, [r2, #20]
34017aac:	4311      	orrs	r1, r2
34017aae:	683a      	ldr	r2, [r7, #0]
34017ab0:	6912      	ldr	r2, [r2, #16]
34017ab2:	4311      	orrs	r1, r2
34017ab4:	683a      	ldr	r2, [r7, #0]
34017ab6:	69d2      	ldr	r2, [r2, #28]
34017ab8:	4311      	orrs	r1, r2
34017aba:	683a      	ldr	r2, [r7, #0]
34017abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017abe:	4311      	orrs	r1, r2
34017ac0:	683a      	ldr	r2, [r7, #0]
34017ac2:	6a12      	ldr	r2, [r2, #32]
34017ac4:	430a      	orrs	r2, r1
34017ac6:	431a      	orrs	r2, r3
34017ac8:	69bb      	ldr	r3, [r7, #24]
34017aca:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017acc:	687b      	ldr	r3, [r7, #4]
34017ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017ad4:	d109      	bne.n	34017aea <XSPI_ConfigCmd+0x25e>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017ad6:	683b      	ldr	r3, [r7, #0]
34017ad8:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017ada:	2b08      	cmp	r3, #8
34017adc:	d105      	bne.n	34017aea <XSPI_ConfigCmd+0x25e>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34017ade:	69bb      	ldr	r3, [r7, #24]
34017ae0:	681b      	ldr	r3, [r3, #0]
34017ae2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017ae6:	69bb      	ldr	r3, [r7, #24]
34017ae8:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017aea:	683b      	ldr	r3, [r7, #0]
34017aec:	689a      	ldr	r2, [r3, #8]
34017aee:	693b      	ldr	r3, [r7, #16]
34017af0:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
34017af2:	687b      	ldr	r3, [r7, #4]
34017af4:	681b      	ldr	r3, [r3, #0]
34017af6:	683a      	ldr	r2, [r7, #0]
34017af8:	6992      	ldr	r2, [r2, #24]
34017afa:	649a      	str	r2, [r3, #72]	@ 0x48
34017afc:	e07d      	b.n	34017bfa <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017afe:	683b      	ldr	r3, [r7, #0]
34017b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017b02:	2b00      	cmp	r3, #0
34017b04:	d01c      	beq.n	34017b40 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
34017b06:	69bb      	ldr	r3, [r7, #24]
34017b08:	681b      	ldr	r3, [r3, #0]
34017b0a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34017b0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34017b12:	683a      	ldr	r2, [r7, #0]
34017b14:	68d1      	ldr	r1, [r2, #12]
34017b16:	683a      	ldr	r2, [r7, #0]
34017b18:	6952      	ldr	r2, [r2, #20]
34017b1a:	4311      	orrs	r1, r2
34017b1c:	683a      	ldr	r2, [r7, #0]
34017b1e:	6912      	ldr	r2, [r2, #16]
34017b20:	4311      	orrs	r1, r2
34017b22:	683a      	ldr	r2, [r7, #0]
34017b24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017b26:	4311      	orrs	r1, r2
34017b28:	683a      	ldr	r2, [r7, #0]
34017b2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017b2c:	430a      	orrs	r2, r1
34017b2e:	431a      	orrs	r2, r3
34017b30:	69bb      	ldr	r3, [r7, #24]
34017b32:	601a      	str	r2, [r3, #0]
34017b34:	e022      	b.n	34017b7c <XSPI_ConfigCmd+0x2f0>
34017b36:	bf00      	nop
34017b38:	3401ea34 	.word	0x3401ea34
34017b3c:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
34017b40:	69bb      	ldr	r3, [r7, #24]
34017b42:	681b      	ldr	r3, [r3, #0]
34017b44:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34017b48:	683b      	ldr	r3, [r7, #0]
34017b4a:	68d9      	ldr	r1, [r3, #12]
34017b4c:	683b      	ldr	r3, [r7, #0]
34017b4e:	695b      	ldr	r3, [r3, #20]
34017b50:	4319      	orrs	r1, r3
34017b52:	683b      	ldr	r3, [r7, #0]
34017b54:	691b      	ldr	r3, [r3, #16]
34017b56:	430b      	orrs	r3, r1
34017b58:	431a      	orrs	r2, r3
34017b5a:	69bb      	ldr	r3, [r7, #24]
34017b5c:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017b5e:	687b      	ldr	r3, [r7, #4]
34017b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34017b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017b66:	d109      	bne.n	34017b7c <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017b68:	683b      	ldr	r3, [r7, #0]
34017b6a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017b6c:	2b08      	cmp	r3, #8
34017b6e:	d105      	bne.n	34017b7c <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34017b70:	69bb      	ldr	r3, [r7, #24]
34017b72:	681b      	ldr	r3, [r3, #0]
34017b74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017b78:	69bb      	ldr	r3, [r7, #24]
34017b7a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017b7c:	683b      	ldr	r3, [r7, #0]
34017b7e:	689a      	ldr	r2, [r3, #8]
34017b80:	693b      	ldr	r3, [r7, #16]
34017b82:	601a      	str	r2, [r3, #0]
34017b84:	e039      	b.n	34017bfa <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017b86:	683b      	ldr	r3, [r7, #0]
34017b88:	69db      	ldr	r3, [r3, #28]
34017b8a:	2b00      	cmp	r3, #0
34017b8c:	d030      	beq.n	34017bf0 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017b8e:	683b      	ldr	r3, [r7, #0]
34017b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017b92:	2b00      	cmp	r3, #0
34017b94:	d017      	beq.n	34017bc6 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
34017b96:	69bb      	ldr	r3, [r7, #24]
34017b98:	681b      	ldr	r3, [r3, #0]
34017b9a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
34017b9e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34017ba2:	683a      	ldr	r2, [r7, #0]
34017ba4:	69d1      	ldr	r1, [r2, #28]
34017ba6:	683a      	ldr	r2, [r7, #0]
34017ba8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017baa:	4311      	orrs	r1, r2
34017bac:	683a      	ldr	r2, [r7, #0]
34017bae:	6a12      	ldr	r2, [r2, #32]
34017bb0:	4311      	orrs	r1, r2
34017bb2:	683a      	ldr	r2, [r7, #0]
34017bb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017bb6:	4311      	orrs	r1, r2
34017bb8:	683a      	ldr	r2, [r7, #0]
34017bba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017bbc:	430a      	orrs	r2, r1
34017bbe:	431a      	orrs	r2, r3
34017bc0:	69bb      	ldr	r3, [r7, #24]
34017bc2:	601a      	str	r2, [r3, #0]
34017bc4:	e00e      	b.n	34017be4 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
34017bc6:	69bb      	ldr	r3, [r7, #24]
34017bc8:	681b      	ldr	r3, [r3, #0]
34017bca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
34017bce:	683b      	ldr	r3, [r7, #0]
34017bd0:	69d9      	ldr	r1, [r3, #28]
34017bd2:	683b      	ldr	r3, [r7, #0]
34017bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34017bd6:	4319      	orrs	r1, r3
34017bd8:	683b      	ldr	r3, [r7, #0]
34017bda:	6a1b      	ldr	r3, [r3, #32]
34017bdc:	430b      	orrs	r3, r1
34017bde:	431a      	orrs	r2, r3
34017be0:	69bb      	ldr	r3, [r7, #24]
34017be2:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
34017be4:	687b      	ldr	r3, [r7, #4]
34017be6:	681b      	ldr	r3, [r3, #0]
34017be8:	683a      	ldr	r2, [r7, #0]
34017bea:	6992      	ldr	r2, [r2, #24]
34017bec:	649a      	str	r2, [r3, #72]	@ 0x48
34017bee:	e004      	b.n	34017bfa <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
34017bf0:	2301      	movs	r3, #1
34017bf2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34017bf4:	687b      	ldr	r3, [r7, #4]
34017bf6:	2208      	movs	r2, #8
34017bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017bfa:	7ffb      	ldrb	r3, [r7, #31]
}
34017bfc:	4618      	mov	r0, r3
34017bfe:	3720      	adds	r7, #32
34017c00:	46bd      	mov	sp, r7
34017c02:	bd80      	pop	{r7, pc}

34017c04 <CMW_CAMERA_GetDCMIPPHandle>:
static void CMW_CAMERA_PwrDown(void);
static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch);
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
34017c04:	b480      	push	{r7}
34017c06:	af00      	add	r7, sp, #0
    return &hcamera_dcmipp;
34017c08:	4b02      	ldr	r3, [pc, #8]	@ (34017c14 <CMW_CAMERA_GetDCMIPPHandle+0x10>)
}
34017c0a:	4618      	mov	r0, r3
34017c0c:	46bd      	mov	sp, r7
34017c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c12:	4770      	bx	lr
34017c14:	340209b4 	.word	0x340209b4

34017c18 <CMW_CAMERA_PIPE_VsyncEventCallback>:
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
34017c18:	b480      	push	{r7}
34017c1a:	b083      	sub	sp, #12
34017c1c:	af00      	add	r7, sp, #0
34017c1e:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017c20:	2300      	movs	r3, #0
}
34017c22:	4618      	mov	r0, r3
34017c24:	370c      	adds	r7, #12
34017c26:	46bd      	mov	sp, r7
34017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c2c:	4770      	bx	lr

34017c2e <CMW_CAMERA_PIPE_FrameEventCallback>:
 * @brief  Frame Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
34017c2e:	b480      	push	{r7}
34017c30:	b083      	sub	sp, #12
34017c32:	af00      	add	r7, sp, #0
34017c34:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017c36:	2300      	movs	r3, #0
}
34017c38:	4618      	mov	r0, r3
34017c3a:	370c      	adds	r7, #12
34017c3c:	46bd      	mov	sp, r7
34017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34017c42:	4770      	bx	lr

34017c44 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017c44:	b580      	push	{r7, lr}
34017c46:	b082      	sub	sp, #8
34017c48:	af00      	add	r7, sp, #0
34017c4a:	6078      	str	r0, [r7, #4]
34017c4c:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
34017c4e:	4b08      	ldr	r3, [pc, #32]	@ (34017c70 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017c50:	691b      	ldr	r3, [r3, #16]
34017c52:	2b00      	cmp	r3, #0
34017c54:	d004      	beq.n	34017c60 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34017c56:	4b06      	ldr	r3, [pc, #24]	@ (34017c70 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017c58:	691b      	ldr	r3, [r3, #16]
34017c5a:	6839      	ldr	r1, [r7, #0]
34017c5c:	4805      	ldr	r0, [pc, #20]	@ (34017c74 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x30>)
34017c5e:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
34017c60:	6838      	ldr	r0, [r7, #0]
34017c62:	f7ff ffd9 	bl	34017c18 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34017c66:	bf00      	nop
34017c68:	3708      	adds	r7, #8
34017c6a:	46bd      	mov	sp, r7
34017c6c:	bd80      	pop	{r7, pc}
34017c6e:	bf00      	nop
34017c70:	340209c0 	.word	0x340209c0
34017c74:	34020a28 	.word	0x34020a28

34017c78 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017c78:	b580      	push	{r7, lr}
34017c7a:	b082      	sub	sp, #8
34017c7c:	af00      	add	r7, sp, #0
34017c7e:	6078      	str	r0, [r7, #4]
34017c80:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
34017c82:	4b08      	ldr	r3, [pc, #32]	@ (34017ca4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017c84:	695b      	ldr	r3, [r3, #20]
34017c86:	2b00      	cmp	r3, #0
34017c88:	d004      	beq.n	34017c94 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34017c8a:	4b06      	ldr	r3, [pc, #24]	@ (34017ca4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017c8c:	695b      	ldr	r3, [r3, #20]
34017c8e:	6839      	ldr	r1, [r7, #0]
34017c90:	4805      	ldr	r0, [pc, #20]	@ (34017ca8 <HAL_DCMIPP_PIPE_FrameEventCallback+0x30>)
34017c92:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
34017c94:	6838      	ldr	r0, [r7, #0]
34017c96:	f7ff ffca 	bl	34017c2e <CMW_CAMERA_PIPE_FrameEventCallback>
}
34017c9a:	bf00      	nop
34017c9c:	3708      	adds	r7, #8
34017c9e:	46bd      	mov	sp, r7
34017ca0:	bd80      	pop	{r7, pc}
34017ca2:	bf00      	nop
34017ca4:	340209c0 	.word	0x340209c0
34017ca8:	34020a28 	.word	0x34020a28

34017cac <DMA2D_IRQHandler>:
                                   ctx->layers[0].size.height);
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
34017cac:	b580      	push	{r7, lr}
34017cae:	af00      	add	r7, sp, #0
  HAL_DMA2D_IRQHandler(dma2d_current);
34017cb0:	4b03      	ldr	r3, [pc, #12]	@ (34017cc0 <DMA2D_IRQHandler+0x14>)
34017cb2:	681b      	ldr	r3, [r3, #0]
34017cb4:	4618      	mov	r0, r3
34017cb6:	f7ed fcca 	bl	3400564e <HAL_DMA2D_IRQHandler>
}
34017cba:	bf00      	nop
34017cbc:	bd80      	pop	{r7, pc}
34017cbe:	bf00      	nop
34017cc0:	34020b6c 	.word	0x34020b6c

34017cc4 <spi_transfert_data_deinit>:
  ctx->len = w * h * 2;
  LCD_CS_LOW();
}

static void spi_transfert_data_deinit(struct scrl_spi_ctx *ctx)
{
34017cc4:	b480      	push	{r7}
34017cc6:	b083      	sub	sp, #12
34017cc8:	af00      	add	r7, sp, #0
34017cca:	6078      	str	r0, [r7, #4]
  LCD_CS_HIGH();
34017ccc:	4b04      	ldr	r3, [pc, #16]	@ (34017ce0 <spi_transfert_data_deinit+0x1c>)
34017cce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34017cd2:	619a      	str	r2, [r3, #24]
}
34017cd4:	bf00      	nop
34017cd6:	370c      	adds	r7, #12
34017cd8:	46bd      	mov	sp, r7
34017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
34017cde:	4770      	bx	lr
34017ce0:	56020c00 	.word	0x56020c00

34017ce4 <spi_transfert_data_chunck_start>:

static void spi_transfert_data_chunck_start(struct scrl_spi_ctx *ctx)
{
34017ce4:	b580      	push	{r7, lr}
34017ce6:	b084      	sub	sp, #16
34017ce8:	af00      	add	r7, sp, #0
34017cea:	6078      	str	r0, [r7, #4]
  uint16_t size = MIN(ctx->len, 63 * 1024);
34017cec:	687b      	ldr	r3, [r7, #4]
34017cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017cf2:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
34017cf6:	bfa8      	it	ge
34017cf8:	f44f 437c 	movge.w	r3, #64512	@ 0xfc00
34017cfc:	81fb      	strh	r3, [r7, #14]
  int ret;

  ret = HAL_SPI_Transmit_DMA(&hspi, ctx->data, size);
34017cfe:	687b      	ldr	r3, [r7, #4]
34017d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34017d04:	89fa      	ldrh	r2, [r7, #14]
34017d06:	4619      	mov	r1, r3
34017d08:	4810      	ldr	r0, [pc, #64]	@ (34017d4c <spi_transfert_data_chunck_start+0x68>)
34017d0a:	f7fd f893 	bl	34014e34 <HAL_SPI_Transmit_DMA>
34017d0e:	4603      	mov	r3, r0
34017d10:	60bb      	str	r3, [r7, #8]
  assert(ret == HAL_OK);
34017d12:	68bb      	ldr	r3, [r7, #8]
34017d14:	2b00      	cmp	r3, #0
34017d16:	d005      	beq.n	34017d24 <spi_transfert_data_chunck_start+0x40>
34017d18:	4b0d      	ldr	r3, [pc, #52]	@ (34017d50 <spi_transfert_data_chunck_start+0x6c>)
34017d1a:	4a0e      	ldr	r2, [pc, #56]	@ (34017d54 <spi_transfert_data_chunck_start+0x70>)
34017d1c:	219e      	movs	r1, #158	@ 0x9e
34017d1e:	480e      	ldr	r0, [pc, #56]	@ (34017d58 <spi_transfert_data_chunck_start+0x74>)
34017d20:	f003 faba 	bl	3401b298 <__assert_func>

  ctx->len -= size;
34017d24:	687b      	ldr	r3, [r7, #4]
34017d26:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34017d2a:	89fb      	ldrh	r3, [r7, #14]
34017d2c:	1ad2      	subs	r2, r2, r3
34017d2e:	687b      	ldr	r3, [r7, #4]
34017d30:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ctx->data += size;
34017d34:	687b      	ldr	r3, [r7, #4]
34017d36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34017d3a:	89fb      	ldrh	r3, [r7, #14]
34017d3c:	441a      	add	r2, r3
34017d3e:	687b      	ldr	r3, [r7, #4]
34017d40:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
34017d44:	bf00      	nop
34017d46:	3710      	adds	r7, #16
34017d48:	46bd      	mov	sp, r7
34017d4a:	bd80      	pop	{r7, pc}
34017d4c:	34020c28 	.word	0x34020c28
34017d50:	3401eae0 	.word	0x3401eae0
34017d54:	3401f954 	.word	0x3401f954
34017d58:	3401eaf0 	.word	0x3401eaf0

34017d5c <HAL_SPI_TxCpltCallback>:
  ret = xSemaphoreGive(ctx->dma_sem);
  assert(ret == pdTRUE);
}
#else
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
34017d5c:	b580      	push	{r7, lr}
34017d5e:	b084      	sub	sp, #16
34017d60:	af00      	add	r7, sp, #0
34017d62:	6078      	str	r0, [r7, #4]
  struct scrl_spi_ctx *ctx = &scrl_ctx;
34017d64:	4b0a      	ldr	r3, [pc, #40]	@ (34017d90 <HAL_SPI_TxCpltCallback+0x34>)
34017d66:	60fb      	str	r3, [r7, #12]

  if (ctx->len) {
34017d68:	68fb      	ldr	r3, [r7, #12]
34017d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34017d6e:	2b00      	cmp	r3, #0
34017d70:	d003      	beq.n	34017d7a <HAL_SPI_TxCpltCallback+0x1e>
    spi_transfert_data_chunck_start(ctx);
34017d72:	68f8      	ldr	r0, [r7, #12]
34017d74:	f7ff ffb6 	bl	34017ce4 <spi_transfert_data_chunck_start>
  } else {
    spi_transfert_data_deinit(ctx);
    ctx->is_screen_ready_to_update = 1;
  }
}
34017d78:	e006      	b.n	34017d88 <HAL_SPI_TxCpltCallback+0x2c>
    spi_transfert_data_deinit(ctx);
34017d7a:	68f8      	ldr	r0, [r7, #12]
34017d7c:	f7ff ffa2 	bl	34017cc4 <spi_transfert_data_deinit>
    ctx->is_screen_ready_to_update = 1;
34017d80:	68fb      	ldr	r3, [r7, #12]
34017d82:	2201      	movs	r2, #1
34017d84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34017d88:	bf00      	nop
34017d8a:	3710      	adds	r7, #16
34017d8c:	46bd      	mov	sp, r7
34017d8e:	bd80      	pop	{r7, pc}
34017d90:	34020b70 	.word	0x34020b70

34017d94 <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
34017d94:	b580      	push	{r7, lr}
34017d96:	b082      	sub	sp, #8
34017d98:	af00      	add	r7, sp, #0
34017d9a:	6078      	str	r0, [r7, #4]
  assert(0);
34017d9c:	4b03      	ldr	r3, [pc, #12]	@ (34017dac <HAL_SPI_ErrorCallback+0x18>)
34017d9e:	4a04      	ldr	r2, [pc, #16]	@ (34017db0 <HAL_SPI_ErrorCallback+0x1c>)
34017da0:	f44f 7123 	mov.w	r1, #652	@ 0x28c
34017da4:	4803      	ldr	r0, [pc, #12]	@ (34017db4 <HAL_SPI_ErrorCallback+0x20>)
34017da6:	f003 fa77 	bl	3401b298 <__assert_func>
34017daa:	bf00      	nop
34017dac:	3401eb78 	.word	0x3401eb78
34017db0:	3401f974 	.word	0x3401f974
34017db4:	3401eaf0 	.word	0x3401eaf0

34017db8 <SPI5_IRQHandler>:
}

void SPI5_IRQHandler(void)
{
34017db8:	b580      	push	{r7, lr}
34017dba:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
34017dbc:	4802      	ldr	r0, [pc, #8]	@ (34017dc8 <SPI5_IRQHandler+0x10>)
34017dbe:	f7fd fa17 	bl	340151f0 <HAL_SPI_IRQHandler>
}
34017dc2:	bf00      	nop
34017dc4:	bd80      	pop	{r7, pc}
34017dc6:	bf00      	nop
34017dc8:	34020c28 	.word	0x34020c28

34017dcc <HPDMA1_Channel12_IRQHandler>:

void HPDMA1_Channel12_IRQHandler(void)
{
34017dcc:	b580      	push	{r7, lr}
34017dce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma);
34017dd0:	4802      	ldr	r0, [pc, #8]	@ (34017ddc <HPDMA1_Channel12_IRQHandler+0x10>)
34017dd2:	f7ed faa2 	bl	3400531a <HAL_DMA_IRQHandler>
}
34017dd6:	bf00      	nop
34017dd8:	bd80      	pop	{r7, pc}
34017dda:	bf00      	nop
34017ddc:	34020cb8 	.word	0x34020cb8

34017de0 <LL_Streng_len>:
  {
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
34017de0:	b480      	push	{r7}
34017de2:	b083      	sub	sp, #12
34017de4:	af00      	add	r7, sp, #0
34017de6:	6078      	str	r0, [r7, #4]
    return conf->offset_end - conf->offset_start;
34017de8:	687b      	ldr	r3, [r7, #4]
34017dea:	68da      	ldr	r2, [r3, #12]
34017dec:	687b      	ldr	r3, [r7, #4]
34017dee:	689b      	ldr	r3, [r3, #8]
34017df0:	1ad3      	subs	r3, r2, r3
  }
34017df2:	4618      	mov	r0, r3
34017df4:	370c      	adds	r7, #12
34017df6:	46bd      	mov	sp, r7
34017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
34017dfc:	4770      	bx	lr
	...

34017e00 <ll_aton_static_checks>:
 *  Used to exit from LL_Streng_Wait() in case epoch locks
 * @{
 */

static inline void ll_aton_static_checks(void)
{
34017e00:	b580      	push	{r7, lr}
34017e02:	b082      	sub	sp, #8
34017e04:	af02      	add	r7, sp, #8
  static char done = 0;

  if (done != 0)
34017e06:	4b27      	ldr	r3, [pc, #156]	@ (34017ea4 <ll_aton_static_checks+0xa4>)
34017e08:	781b      	ldrb	r3, [r3, #0]
34017e0a:	2b00      	cmp	r3, #0
34017e0c:	d146      	bne.n	34017e9c <ll_aton_static_checks+0x9c>
    return;
  done = 1;
34017e0e:	4b25      	ldr	r3, [pc, #148]	@ (34017ea4 <ll_aton_static_checks+0xa4>)
34017e10:	2201      	movs	r2, #1
34017e12:	701a      	strb	r2, [r3, #0]
  LL_ATON_ASSERT(ATONN_CONST_SRCPORT(S, J, U, I, P) == __atonn_getSrcPortID(S, J, U, I, P))
#define ASSERT_ATONN_DSTPORT(S, J, U, I, P)                                                                            \
  LL_ATON_ASSERT(ATONN_CONST_DSTPORT(S, J, U, I, P) == __atonn_getDstPortID(S, J, U, I, P))

#if ATON_STRENG_NUM > 1
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 1, 0);
34017e14:	2300      	movs	r3, #0
34017e16:	9300      	str	r3, [sp, #0]
34017e18:	2301      	movs	r3, #1
34017e1a:	2200      	movs	r2, #0
34017e1c:	2100      	movs	r1, #0
34017e1e:	2000      	movs	r0, #0
34017e20:	f001 fa56 	bl	340192d0 <__atonn_getSrcPortID>
34017e24:	4603      	mov	r3, r0
34017e26:	2b01      	cmp	r3, #1
34017e28:	d005      	beq.n	34017e36 <ll_aton_static_checks+0x36>
34017e2a:	4b1f      	ldr	r3, [pc, #124]	@ (34017ea8 <ll_aton_static_checks+0xa8>)
34017e2c:	4a1f      	ldr	r2, [pc, #124]	@ (34017eac <ll_aton_static_checks+0xac>)
34017e2e:	214c      	movs	r1, #76	@ 0x4c
34017e30:	481f      	ldr	r0, [pc, #124]	@ (34017eb0 <ll_aton_static_checks+0xb0>)
34017e32:	f003 fa31 	bl	3401b298 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 1, 0);
34017e36:	2300      	movs	r3, #0
34017e38:	9300      	str	r3, [sp, #0]
34017e3a:	2301      	movs	r3, #1
34017e3c:	2200      	movs	r2, #0
34017e3e:	2100      	movs	r1, #0
34017e40:	2000      	movs	r0, #0
34017e42:	f001 fb35 	bl	340194b0 <__atonn_getDstPortID>
34017e46:	4603      	mov	r3, r0
34017e48:	2b0c      	cmp	r3, #12
34017e4a:	d005      	beq.n	34017e58 <ll_aton_static_checks+0x58>
34017e4c:	4b19      	ldr	r3, [pc, #100]	@ (34017eb4 <ll_aton_static_checks+0xb4>)
34017e4e:	4a17      	ldr	r2, [pc, #92]	@ (34017eac <ll_aton_static_checks+0xac>)
34017e50:	214d      	movs	r1, #77	@ 0x4d
34017e52:	4817      	ldr	r0, [pc, #92]	@ (34017eb0 <ll_aton_static_checks+0xb0>)
34017e54:	f003 fa20 	bl	3401b298 <__assert_func>
#endif
#if ATON_STRENG_NUM > 2
  ASSERT_ATONN_SRCPORT(STRSWITCH, 0, STRENG, 2, 0);
34017e58:	2300      	movs	r3, #0
34017e5a:	9300      	str	r3, [sp, #0]
34017e5c:	2302      	movs	r3, #2
34017e5e:	2200      	movs	r2, #0
34017e60:	2100      	movs	r1, #0
34017e62:	2000      	movs	r0, #0
34017e64:	f001 fa34 	bl	340192d0 <__atonn_getSrcPortID>
34017e68:	4603      	mov	r3, r0
34017e6a:	2b02      	cmp	r3, #2
34017e6c:	d005      	beq.n	34017e7a <ll_aton_static_checks+0x7a>
34017e6e:	4b12      	ldr	r3, [pc, #72]	@ (34017eb8 <ll_aton_static_checks+0xb8>)
34017e70:	4a0e      	ldr	r2, [pc, #56]	@ (34017eac <ll_aton_static_checks+0xac>)
34017e72:	2150      	movs	r1, #80	@ 0x50
34017e74:	480e      	ldr	r0, [pc, #56]	@ (34017eb0 <ll_aton_static_checks+0xb0>)
34017e76:	f003 fa0f 	bl	3401b298 <__assert_func>
  ASSERT_ATONN_DSTPORT(STRSWITCH, 0, STRENG, 2, 0);
34017e7a:	2300      	movs	r3, #0
34017e7c:	9300      	str	r3, [sp, #0]
34017e7e:	2302      	movs	r3, #2
34017e80:	2200      	movs	r2, #0
34017e82:	2100      	movs	r1, #0
34017e84:	2000      	movs	r0, #0
34017e86:	f001 fb13 	bl	340194b0 <__atonn_getDstPortID>
34017e8a:	4603      	mov	r3, r0
34017e8c:	2b10      	cmp	r3, #16
34017e8e:	d006      	beq.n	34017e9e <ll_aton_static_checks+0x9e>
34017e90:	4b0a      	ldr	r3, [pc, #40]	@ (34017ebc <ll_aton_static_checks+0xbc>)
34017e92:	4a06      	ldr	r2, [pc, #24]	@ (34017eac <ll_aton_static_checks+0xac>)
34017e94:	2151      	movs	r1, #81	@ 0x51
34017e96:	4806      	ldr	r0, [pc, #24]	@ (34017eb0 <ll_aton_static_checks+0xb0>)
34017e98:	f003 f9fe 	bl	3401b298 <__assert_func>
    return;
34017e9c:	bf00      	nop

#endif // (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)

#undef ASSERT_ATONN_SRCPORT
#undef ASSERT_ATONN_DSTPORT
}
34017e9e:	46bd      	mov	sp, r7
34017ea0:	bd80      	pop	{r7, pc}
34017ea2:	bf00      	nop
34017ea4:	34020d40 	.word	0x34020d40
34017ea8:	3401eb88 	.word	0x3401eb88
34017eac:	3401f99c 	.word	0x3401f99c
34017eb0:	3401ebc4 	.word	0x3401ebc4
34017eb4:	3401ec54 	.word	0x3401ec54
34017eb8:	3401eca0 	.word	0x3401eca0
34017ebc:	3401ecdc 	.word	0x3401ecdc

34017ec0 <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
34017ec0:	b590      	push	{r4, r7, lr}
34017ec2:	b08b      	sub	sp, #44	@ 0x2c
34017ec4:	af08      	add	r7, sp, #32
  uint32_t t;
  int i;

  ll_aton_static_checks();
34017ec6:	f7ff ff9b 	bl	34017e00 <ll_aton_static_checks>

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
34017eca:	4b97      	ldr	r3, [pc, #604]	@ (34018128 <LL_ATON_Init+0x268>)
34017ecc:	681b      	ldr	r3, [r3, #0]
34017ece:	607b      	str	r3, [r7, #4]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
34017ed0:	687b      	ldr	r3, [r7, #4]
34017ed2:	f043 0302 	orr.w	r3, r3, #2
34017ed6:	607b      	str	r3, [r7, #4]
  ATON_CLKCTRL_CTRL_SET(0, t);
34017ed8:	4a93      	ldr	r2, [pc, #588]	@ (34018128 <LL_ATON_Init+0x268>)
34017eda:	687b      	ldr	r3, [r7, #4]
34017edc:	6013      	str	r3, [r2, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34017ede:	4b92      	ldr	r3, [pc, #584]	@ (34018128 <LL_ATON_Init+0x268>)
34017ee0:	2201      	movs	r2, #1
34017ee2:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34017ee4:	4b91      	ldr	r3, [pc, #580]	@ (3401812c <LL_ATON_Init+0x26c>)
34017ee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017eea:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
34017eec:	4b90      	ldr	r3, [pc, #576]	@ (34018130 <LL_ATON_Init+0x270>)
34017eee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34017ef2:	601a      	str	r2, [r3, #0]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
34017ef4:	4b8f      	ldr	r3, [pc, #572]	@ (34018134 <LL_ATON_Init+0x274>)
34017ef6:	2200      	movs	r2, #0
34017ef8:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34017efa:	4b8f      	ldr	r3, [pc, #572]	@ (34018138 <LL_ATON_Init+0x278>)
34017efc:	681b      	ldr	r3, [r3, #0]
34017efe:	607b      	str	r3, [r7, #4]
34017f00:	687b      	ldr	r3, [r7, #4]
34017f02:	2b00      	cmp	r3, #0
34017f04:	d0f9      	beq.n	34017efa <LL_ATON_Init+0x3a>
34017f06:	687b      	ldr	r3, [r7, #4]
34017f08:	b2db      	uxtb	r3, r3
34017f0a:	2b01      	cmp	r3, #1
34017f0c:	d10a      	bne.n	34017f24 <LL_ATON_Init+0x64>
34017f0e:	687b      	ldr	r3, [r7, #4]
34017f10:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34017f14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34017f18:	d104      	bne.n	34017f24 <LL_ATON_Init+0x64>
34017f1a:	687b      	ldr	r3, [r7, #4]
34017f1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34017f20:	2b00      	cmp	r3, #0
34017f22:	d02f      	beq.n	34017f84 <LL_ATON_Init+0xc4>
34017f24:	f004 fbf6 	bl	3401c714 <__errno>
34017f28:	4603      	mov	r3, r0
34017f2a:	681b      	ldr	r3, [r3, #0]
34017f2c:	2b00      	cmp	r3, #0
34017f2e:	d008      	beq.n	34017f42 <LL_ATON_Init+0x82>
34017f30:	f004 fbf0 	bl	3401c714 <__errno>
34017f34:	4603      	mov	r3, r0
34017f36:	681b      	ldr	r3, [r3, #0]
34017f38:	4618      	mov	r0, r3
34017f3a:	f004 fb85 	bl	3401c648 <strerror>
34017f3e:	4603      	mov	r3, r0
34017f40:	e000      	b.n	34017f44 <LL_ATON_Init+0x84>
34017f42:	4b7e      	ldr	r3, [pc, #504]	@ (3401813c <LL_ATON_Init+0x27c>)
34017f44:	687a      	ldr	r2, [r7, #4]
34017f46:	b2d2      	uxtb	r2, r2
34017f48:	6879      	ldr	r1, [r7, #4]
34017f4a:	0b09      	lsrs	r1, r1, #12
34017f4c:	f001 010f 	and.w	r1, r1, #15
34017f50:	6878      	ldr	r0, [r7, #4]
34017f52:	0a00      	lsrs	r0, r0, #8
34017f54:	f000 000f 	and.w	r0, r0, #15
34017f58:	2400      	movs	r4, #0
34017f5a:	9406      	str	r4, [sp, #24]
34017f5c:	2405      	movs	r4, #5
34017f5e:	9405      	str	r4, [sp, #20]
34017f60:	2401      	movs	r4, #1
34017f62:	9404      	str	r4, [sp, #16]
34017f64:	9003      	str	r0, [sp, #12]
34017f66:	9102      	str	r1, [sp, #8]
34017f68:	9201      	str	r2, [sp, #4]
34017f6a:	4a75      	ldr	r2, [pc, #468]	@ (34018140 <LL_ATON_Init+0x280>)
34017f6c:	9200      	str	r2, [sp, #0]
34017f6e:	22c7      	movs	r2, #199	@ 0xc7
34017f70:	4974      	ldr	r1, [pc, #464]	@ (34018144 <LL_ATON_Init+0x284>)
34017f72:	4875      	ldr	r0, [pc, #468]	@ (34018148 <LL_ATON_Init+0x288>)
34017f74:	f004 f832 	bl	3401bfdc <iprintf>
34017f78:	4b74      	ldr	r3, [pc, #464]	@ (3401814c <LL_ATON_Init+0x28c>)
34017f7a:	4a75      	ldr	r2, [pc, #468]	@ (34018150 <LL_ATON_Init+0x290>)
34017f7c:	21c7      	movs	r1, #199	@ 0xc7
34017f7e:	4871      	ldr	r0, [pc, #452]	@ (34018144 <LL_ATON_Init+0x284>)
34017f80:	f003 f98a 	bl	3401b298 <__assert_func>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34017f84:	4b73      	ldr	r3, [pc, #460]	@ (34018154 <LL_ATON_Init+0x294>)
34017f86:	681b      	ldr	r3, [r3, #0]
34017f88:	607b      	str	r3, [r7, #4]
34017f8a:	687b      	ldr	r3, [r7, #4]
34017f8c:	2b00      	cmp	r3, #0
34017f8e:	d0f9      	beq.n	34017f84 <LL_ATON_Init+0xc4>
34017f90:	687b      	ldr	r3, [r7, #4]
34017f92:	b2db      	uxtb	r3, r3
34017f94:	2b17      	cmp	r3, #23
34017f96:	d10b      	bne.n	34017fb0 <LL_ATON_Init+0xf0>
34017f98:	687b      	ldr	r3, [r7, #4]
34017f9a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34017f9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34017fa2:	d105      	bne.n	34017fb0 <LL_ATON_Init+0xf0>
34017fa4:	687b      	ldr	r3, [r7, #4]
34017fa6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34017faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34017fae:	d02f      	beq.n	34018010 <LL_ATON_Init+0x150>
34017fb0:	f004 fbb0 	bl	3401c714 <__errno>
34017fb4:	4603      	mov	r3, r0
34017fb6:	681b      	ldr	r3, [r3, #0]
34017fb8:	2b00      	cmp	r3, #0
34017fba:	d008      	beq.n	34017fce <LL_ATON_Init+0x10e>
34017fbc:	f004 fbaa 	bl	3401c714 <__errno>
34017fc0:	4603      	mov	r3, r0
34017fc2:	681b      	ldr	r3, [r3, #0]
34017fc4:	4618      	mov	r0, r3
34017fc6:	f004 fb3f 	bl	3401c648 <strerror>
34017fca:	4603      	mov	r3, r0
34017fcc:	e000      	b.n	34017fd0 <LL_ATON_Init+0x110>
34017fce:	4b5b      	ldr	r3, [pc, #364]	@ (3401813c <LL_ATON_Init+0x27c>)
34017fd0:	687a      	ldr	r2, [r7, #4]
34017fd2:	b2d2      	uxtb	r2, r2
34017fd4:	6879      	ldr	r1, [r7, #4]
34017fd6:	0b09      	lsrs	r1, r1, #12
34017fd8:	f001 010f 	and.w	r1, r1, #15
34017fdc:	6878      	ldr	r0, [r7, #4]
34017fde:	0a00      	lsrs	r0, r0, #8
34017fe0:	f000 000f 	and.w	r0, r0, #15
34017fe4:	2401      	movs	r4, #1
34017fe6:	9406      	str	r4, [sp, #24]
34017fe8:	2405      	movs	r4, #5
34017fea:	9405      	str	r4, [sp, #20]
34017fec:	2417      	movs	r4, #23
34017fee:	9404      	str	r4, [sp, #16]
34017ff0:	9003      	str	r0, [sp, #12]
34017ff2:	9102      	str	r1, [sp, #8]
34017ff4:	9201      	str	r2, [sp, #4]
34017ff6:	4a58      	ldr	r2, [pc, #352]	@ (34018158 <LL_ATON_Init+0x298>)
34017ff8:	9200      	str	r2, [sp, #0]
34017ffa:	22ca      	movs	r2, #202	@ 0xca
34017ffc:	4951      	ldr	r1, [pc, #324]	@ (34018144 <LL_ATON_Init+0x284>)
34017ffe:	4852      	ldr	r0, [pc, #328]	@ (34018148 <LL_ATON_Init+0x288>)
34018000:	f003 ffec 	bl	3401bfdc <iprintf>
34018004:	4b51      	ldr	r3, [pc, #324]	@ (3401814c <LL_ATON_Init+0x28c>)
34018006:	4a52      	ldr	r2, [pc, #328]	@ (34018150 <LL_ATON_Init+0x290>)
34018008:	21ca      	movs	r1, #202	@ 0xca
3401800a:	484e      	ldr	r0, [pc, #312]	@ (34018144 <LL_ATON_Init+0x284>)
3401800c:	f003 f944 	bl	3401b298 <__assert_func>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
34018010:	4b52      	ldr	r3, [pc, #328]	@ (3401815c <LL_ATON_Init+0x29c>)
34018012:	681b      	ldr	r3, [r3, #0]
34018014:	607b      	str	r3, [r7, #4]
34018016:	687b      	ldr	r3, [r7, #4]
34018018:	2b00      	cmp	r3, #0
3401801a:	d0f9      	beq.n	34018010 <LL_ATON_Init+0x150>
3401801c:	687b      	ldr	r3, [r7, #4]
3401801e:	b2db      	uxtb	r3, r3
34018020:	2b1c      	cmp	r3, #28
34018022:	d10b      	bne.n	3401803c <LL_ATON_Init+0x17c>
34018024:	687b      	ldr	r3, [r7, #4]
34018026:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401802a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401802e:	d105      	bne.n	3401803c <LL_ATON_Init+0x17c>
34018030:	687b      	ldr	r3, [r7, #4]
34018032:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401803a:	d02f      	beq.n	3401809c <LL_ATON_Init+0x1dc>
3401803c:	f004 fb6a 	bl	3401c714 <__errno>
34018040:	4603      	mov	r3, r0
34018042:	681b      	ldr	r3, [r3, #0]
34018044:	2b00      	cmp	r3, #0
34018046:	d008      	beq.n	3401805a <LL_ATON_Init+0x19a>
34018048:	f004 fb64 	bl	3401c714 <__errno>
3401804c:	4603      	mov	r3, r0
3401804e:	681b      	ldr	r3, [r3, #0]
34018050:	4618      	mov	r0, r3
34018052:	f004 faf9 	bl	3401c648 <strerror>
34018056:	4603      	mov	r3, r0
34018058:	e000      	b.n	3401805c <LL_ATON_Init+0x19c>
3401805a:	4b38      	ldr	r3, [pc, #224]	@ (3401813c <LL_ATON_Init+0x27c>)
3401805c:	687a      	ldr	r2, [r7, #4]
3401805e:	b2d2      	uxtb	r2, r2
34018060:	6879      	ldr	r1, [r7, #4]
34018062:	0b09      	lsrs	r1, r1, #12
34018064:	f001 010f 	and.w	r1, r1, #15
34018068:	6878      	ldr	r0, [r7, #4]
3401806a:	0a00      	lsrs	r0, r0, #8
3401806c:	f000 000f 	and.w	r0, r0, #15
34018070:	2401      	movs	r4, #1
34018072:	9406      	str	r4, [sp, #24]
34018074:	2401      	movs	r4, #1
34018076:	9405      	str	r4, [sp, #20]
34018078:	241c      	movs	r4, #28
3401807a:	9404      	str	r4, [sp, #16]
3401807c:	9003      	str	r0, [sp, #12]
3401807e:	9102      	str	r1, [sp, #8]
34018080:	9201      	str	r2, [sp, #4]
34018082:	4a37      	ldr	r2, [pc, #220]	@ (34018160 <LL_ATON_Init+0x2a0>)
34018084:	9200      	str	r2, [sp, #0]
34018086:	22ce      	movs	r2, #206	@ 0xce
34018088:	492e      	ldr	r1, [pc, #184]	@ (34018144 <LL_ATON_Init+0x284>)
3401808a:	482f      	ldr	r0, [pc, #188]	@ (34018148 <LL_ATON_Init+0x288>)
3401808c:	f003 ffa6 	bl	3401bfdc <iprintf>
34018090:	4b2e      	ldr	r3, [pc, #184]	@ (3401814c <LL_ATON_Init+0x28c>)
34018092:	4a2f      	ldr	r2, [pc, #188]	@ (34018150 <LL_ATON_Init+0x290>)
34018094:	21ce      	movs	r1, #206	@ 0xce
34018096:	482b      	ldr	r0, [pc, #172]	@ (34018144 <LL_ATON_Init+0x284>)
34018098:	f003 f8fe 	bl	3401b298 <__assert_func>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
3401809c:	4b31      	ldr	r3, [pc, #196]	@ (34018164 <LL_ATON_Init+0x2a4>)
3401809e:	681b      	ldr	r3, [r3, #0]
340180a0:	607b      	str	r3, [r7, #4]
340180a2:	687b      	ldr	r3, [r7, #4]
340180a4:	2b00      	cmp	r3, #0
340180a6:	d0f9      	beq.n	3401809c <LL_ATON_Init+0x1dc>
340180a8:	687b      	ldr	r3, [r7, #4]
340180aa:	b2db      	uxtb	r3, r3
340180ac:	2b1a      	cmp	r3, #26
340180ae:	d10a      	bne.n	340180c6 <LL_ATON_Init+0x206>
340180b0:	687b      	ldr	r3, [r7, #4]
340180b2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
340180b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340180ba:	d104      	bne.n	340180c6 <LL_ATON_Init+0x206>
340180bc:	687b      	ldr	r3, [r7, #4]
340180be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340180c2:	2b00      	cmp	r3, #0
340180c4:	d052      	beq.n	3401816c <LL_ATON_Init+0x2ac>
340180c6:	f004 fb25 	bl	3401c714 <__errno>
340180ca:	4603      	mov	r3, r0
340180cc:	681b      	ldr	r3, [r3, #0]
340180ce:	2b00      	cmp	r3, #0
340180d0:	d008      	beq.n	340180e4 <LL_ATON_Init+0x224>
340180d2:	f004 fb1f 	bl	3401c714 <__errno>
340180d6:	4603      	mov	r3, r0
340180d8:	681b      	ldr	r3, [r3, #0]
340180da:	4618      	mov	r0, r3
340180dc:	f004 fab4 	bl	3401c648 <strerror>
340180e0:	4603      	mov	r3, r0
340180e2:	e000      	b.n	340180e6 <LL_ATON_Init+0x226>
340180e4:	4b15      	ldr	r3, [pc, #84]	@ (3401813c <LL_ATON_Init+0x27c>)
340180e6:	687a      	ldr	r2, [r7, #4]
340180e8:	b2d2      	uxtb	r2, r2
340180ea:	6879      	ldr	r1, [r7, #4]
340180ec:	0b09      	lsrs	r1, r1, #12
340180ee:	f001 010f 	and.w	r1, r1, #15
340180f2:	6878      	ldr	r0, [r7, #4]
340180f4:	0a00      	lsrs	r0, r0, #8
340180f6:	f000 000f 	and.w	r0, r0, #15
340180fa:	2400      	movs	r4, #0
340180fc:	9406      	str	r4, [sp, #24]
340180fe:	2401      	movs	r4, #1
34018100:	9405      	str	r4, [sp, #20]
34018102:	241a      	movs	r4, #26
34018104:	9404      	str	r4, [sp, #16]
34018106:	9003      	str	r0, [sp, #12]
34018108:	9102      	str	r1, [sp, #8]
3401810a:	9201      	str	r2, [sp, #4]
3401810c:	4a16      	ldr	r2, [pc, #88]	@ (34018168 <LL_ATON_Init+0x2a8>)
3401810e:	9200      	str	r2, [sp, #0]
34018110:	22d2      	movs	r2, #210	@ 0xd2
34018112:	490c      	ldr	r1, [pc, #48]	@ (34018144 <LL_ATON_Init+0x284>)
34018114:	480c      	ldr	r0, [pc, #48]	@ (34018148 <LL_ATON_Init+0x288>)
34018116:	f003 ff61 	bl	3401bfdc <iprintf>
3401811a:	4b0c      	ldr	r3, [pc, #48]	@ (3401814c <LL_ATON_Init+0x28c>)
3401811c:	4a0c      	ldr	r2, [pc, #48]	@ (34018150 <LL_ATON_Init+0x290>)
3401811e:	21d2      	movs	r1, #210	@ 0xd2
34018120:	4808      	ldr	r0, [pc, #32]	@ (34018144 <LL_ATON_Init+0x284>)
34018122:	f003 f8b9 	bl	3401b298 <__assert_func>
34018126:	bf00      	nop
34018128:	580e0000 	.word	0x580e0000
3401812c:	580e0008 	.word	0x580e0008
34018130:	580e000c 	.word	0x580e000c
34018134:	580e0010 	.word	0x580e0010
34018138:	580e5004 	.word	0x580e5004
3401813c:	3401ed28 	.word	0x3401ed28
34018140:	3401ed94 	.word	0x3401ed94
34018144:	3401ebc4 	.word	0x3401ebc4
34018148:	3401ed30 	.word	0x3401ed30
3401814c:	3401ed9c 	.word	0x3401ed9c
34018150:	3401f98c 	.word	0x3401f98c
34018154:	580ef004 	.word	0x580ef004
34018158:	3401eda0 	.word	0x3401eda0
3401815c:	580fb004 	.word	0x580fb004
34018160:	3401eda8 	.word	0x3401eda8
34018164:	580f7004 	.word	0x580f7004
34018168:	3401edb0 	.word	0x3401edb0
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
3401816c:	4b9e      	ldr	r3, [pc, #632]	@ (340183e8 <LL_ATON_Init+0x528>)
3401816e:	681b      	ldr	r3, [r3, #0]
34018170:	607b      	str	r3, [r7, #4]
34018172:	687b      	ldr	r3, [r7, #4]
34018174:	2b00      	cmp	r3, #0
34018176:	d0f9      	beq.n	3401816c <LL_ATON_Init+0x2ac>
34018178:	687b      	ldr	r3, [r7, #4]
3401817a:	b2db      	uxtb	r3, r3
3401817c:	2b1b      	cmp	r3, #27
3401817e:	d10b      	bne.n	34018198 <LL_ATON_Init+0x2d8>
34018180:	687b      	ldr	r3, [r7, #4]
34018182:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401818a:	d105      	bne.n	34018198 <LL_ATON_Init+0x2d8>
3401818c:	687b      	ldr	r3, [r7, #4]
3401818e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34018196:	d02f      	beq.n	340181f8 <LL_ATON_Init+0x338>
34018198:	f004 fabc 	bl	3401c714 <__errno>
3401819c:	4603      	mov	r3, r0
3401819e:	681b      	ldr	r3, [r3, #0]
340181a0:	2b00      	cmp	r3, #0
340181a2:	d008      	beq.n	340181b6 <LL_ATON_Init+0x2f6>
340181a4:	f004 fab6 	bl	3401c714 <__errno>
340181a8:	4603      	mov	r3, r0
340181aa:	681b      	ldr	r3, [r3, #0]
340181ac:	4618      	mov	r0, r3
340181ae:	f004 fa4b 	bl	3401c648 <strerror>
340181b2:	4603      	mov	r3, r0
340181b4:	e000      	b.n	340181b8 <LL_ATON_Init+0x2f8>
340181b6:	4b8d      	ldr	r3, [pc, #564]	@ (340183ec <LL_ATON_Init+0x52c>)
340181b8:	687a      	ldr	r2, [r7, #4]
340181ba:	b2d2      	uxtb	r2, r2
340181bc:	6879      	ldr	r1, [r7, #4]
340181be:	0b09      	lsrs	r1, r1, #12
340181c0:	f001 010f 	and.w	r1, r1, #15
340181c4:	6878      	ldr	r0, [r7, #4]
340181c6:	0a00      	lsrs	r0, r0, #8
340181c8:	f000 000f 	and.w	r0, r0, #15
340181cc:	2401      	movs	r4, #1
340181ce:	9406      	str	r4, [sp, #24]
340181d0:	2401      	movs	r4, #1
340181d2:	9405      	str	r4, [sp, #20]
340181d4:	241b      	movs	r4, #27
340181d6:	9404      	str	r4, [sp, #16]
340181d8:	9003      	str	r0, [sp, #12]
340181da:	9102      	str	r1, [sp, #8]
340181dc:	9201      	str	r2, [sp, #4]
340181de:	4a84      	ldr	r2, [pc, #528]	@ (340183f0 <LL_ATON_Init+0x530>)
340181e0:	9200      	str	r2, [sp, #0]
340181e2:	22d6      	movs	r2, #214	@ 0xd6
340181e4:	4983      	ldr	r1, [pc, #524]	@ (340183f4 <LL_ATON_Init+0x534>)
340181e6:	4884      	ldr	r0, [pc, #528]	@ (340183f8 <LL_ATON_Init+0x538>)
340181e8:	f003 fef8 	bl	3401bfdc <iprintf>
340181ec:	4b83      	ldr	r3, [pc, #524]	@ (340183fc <LL_ATON_Init+0x53c>)
340181ee:	4a84      	ldr	r2, [pc, #528]	@ (34018400 <LL_ATON_Init+0x540>)
340181f0:	21d6      	movs	r1, #214	@ 0xd6
340181f2:	4880      	ldr	r0, [pc, #512]	@ (340183f4 <LL_ATON_Init+0x534>)
340181f4:	f003 f850 	bl	3401b298 <__assert_func>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
340181f8:	4b82      	ldr	r3, [pc, #520]	@ (34018404 <LL_ATON_Init+0x544>)
340181fa:	681b      	ldr	r3, [r3, #0]
340181fc:	607b      	str	r3, [r7, #4]
340181fe:	687b      	ldr	r3, [r7, #4]
34018200:	2b00      	cmp	r3, #0
34018202:	d0f9      	beq.n	340181f8 <LL_ATON_Init+0x338>
34018204:	687b      	ldr	r3, [r7, #4]
34018206:	b2db      	uxtb	r3, r3
34018208:	2b19      	cmp	r3, #25
3401820a:	d10b      	bne.n	34018224 <LL_ATON_Init+0x364>
3401820c:	687b      	ldr	r3, [r7, #4]
3401820e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018216:	d105      	bne.n	34018224 <LL_ATON_Init+0x364>
34018218:	687b      	ldr	r3, [r7, #4]
3401821a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401821e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
34018222:	d02f      	beq.n	34018284 <LL_ATON_Init+0x3c4>
34018224:	f004 fa76 	bl	3401c714 <__errno>
34018228:	4603      	mov	r3, r0
3401822a:	681b      	ldr	r3, [r3, #0]
3401822c:	2b00      	cmp	r3, #0
3401822e:	d008      	beq.n	34018242 <LL_ATON_Init+0x382>
34018230:	f004 fa70 	bl	3401c714 <__errno>
34018234:	4603      	mov	r3, r0
34018236:	681b      	ldr	r3, [r3, #0]
34018238:	4618      	mov	r0, r3
3401823a:	f004 fa05 	bl	3401c648 <strerror>
3401823e:	4603      	mov	r3, r0
34018240:	e000      	b.n	34018244 <LL_ATON_Init+0x384>
34018242:	4b6a      	ldr	r3, [pc, #424]	@ (340183ec <LL_ATON_Init+0x52c>)
34018244:	687a      	ldr	r2, [r7, #4]
34018246:	b2d2      	uxtb	r2, r2
34018248:	6879      	ldr	r1, [r7, #4]
3401824a:	0b09      	lsrs	r1, r1, #12
3401824c:	f001 010f 	and.w	r1, r1, #15
34018250:	6878      	ldr	r0, [r7, #4]
34018252:	0a00      	lsrs	r0, r0, #8
34018254:	f000 000f 	and.w	r0, r0, #15
34018258:	240a      	movs	r4, #10
3401825a:	9406      	str	r4, [sp, #24]
3401825c:	2401      	movs	r4, #1
3401825e:	9405      	str	r4, [sp, #20]
34018260:	2419      	movs	r4, #25
34018262:	9404      	str	r4, [sp, #16]
34018264:	9003      	str	r0, [sp, #12]
34018266:	9102      	str	r1, [sp, #8]
34018268:	9201      	str	r2, [sp, #4]
3401826a:	4a67      	ldr	r2, [pc, #412]	@ (34018408 <LL_ATON_Init+0x548>)
3401826c:	9200      	str	r2, [sp, #0]
3401826e:	22da      	movs	r2, #218	@ 0xda
34018270:	4960      	ldr	r1, [pc, #384]	@ (340183f4 <LL_ATON_Init+0x534>)
34018272:	4861      	ldr	r0, [pc, #388]	@ (340183f8 <LL_ATON_Init+0x538>)
34018274:	f003 feb2 	bl	3401bfdc <iprintf>
34018278:	4b60      	ldr	r3, [pc, #384]	@ (340183fc <LL_ATON_Init+0x53c>)
3401827a:	4a61      	ldr	r2, [pc, #388]	@ (34018400 <LL_ATON_Init+0x540>)
3401827c:	21da      	movs	r1, #218	@ 0xda
3401827e:	485d      	ldr	r0, [pc, #372]	@ (340183f4 <LL_ATON_Init+0x534>)
34018280:	f003 f80a 	bl	3401b298 <__assert_func>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
34018284:	4b61      	ldr	r3, [pc, #388]	@ (3401840c <LL_ATON_Init+0x54c>)
34018286:	681b      	ldr	r3, [r3, #0]
34018288:	607b      	str	r3, [r7, #4]
3401828a:	687b      	ldr	r3, [r7, #4]
3401828c:	2b00      	cmp	r3, #0
3401828e:	d0f9      	beq.n	34018284 <LL_ATON_Init+0x3c4>
34018290:	687b      	ldr	r3, [r7, #4]
34018292:	b2db      	uxtb	r3, r3
34018294:	2b21      	cmp	r3, #33	@ 0x21
34018296:	d10b      	bne.n	340182b0 <LL_ATON_Init+0x3f0>
34018298:	687b      	ldr	r3, [r7, #4]
3401829a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401829e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340182a2:	d105      	bne.n	340182b0 <LL_ATON_Init+0x3f0>
340182a4:	687b      	ldr	r3, [r7, #4]
340182a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340182aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340182ae:	d02f      	beq.n	34018310 <LL_ATON_Init+0x450>
340182b0:	f004 fa30 	bl	3401c714 <__errno>
340182b4:	4603      	mov	r3, r0
340182b6:	681b      	ldr	r3, [r3, #0]
340182b8:	2b00      	cmp	r3, #0
340182ba:	d008      	beq.n	340182ce <LL_ATON_Init+0x40e>
340182bc:	f004 fa2a 	bl	3401c714 <__errno>
340182c0:	4603      	mov	r3, r0
340182c2:	681b      	ldr	r3, [r3, #0]
340182c4:	4618      	mov	r0, r3
340182c6:	f004 f9bf 	bl	3401c648 <strerror>
340182ca:	4603      	mov	r3, r0
340182cc:	e000      	b.n	340182d0 <LL_ATON_Init+0x410>
340182ce:	4b47      	ldr	r3, [pc, #284]	@ (340183ec <LL_ATON_Init+0x52c>)
340182d0:	687a      	ldr	r2, [r7, #4]
340182d2:	b2d2      	uxtb	r2, r2
340182d4:	6879      	ldr	r1, [r7, #4]
340182d6:	0b09      	lsrs	r1, r1, #12
340182d8:	f001 010f 	and.w	r1, r1, #15
340182dc:	6878      	ldr	r0, [r7, #4]
340182de:	0a00      	lsrs	r0, r0, #8
340182e0:	f000 000f 	and.w	r0, r0, #15
340182e4:	2401      	movs	r4, #1
340182e6:	9406      	str	r4, [sp, #24]
340182e8:	2401      	movs	r4, #1
340182ea:	9405      	str	r4, [sp, #20]
340182ec:	2421      	movs	r4, #33	@ 0x21
340182ee:	9404      	str	r4, [sp, #16]
340182f0:	9003      	str	r0, [sp, #12]
340182f2:	9102      	str	r1, [sp, #8]
340182f4:	9201      	str	r2, [sp, #4]
340182f6:	4a46      	ldr	r2, [pc, #280]	@ (34018410 <LL_ATON_Init+0x550>)
340182f8:	9200      	str	r2, [sp, #0]
340182fa:	22de      	movs	r2, #222	@ 0xde
340182fc:	493d      	ldr	r1, [pc, #244]	@ (340183f4 <LL_ATON_Init+0x534>)
340182fe:	483e      	ldr	r0, [pc, #248]	@ (340183f8 <LL_ATON_Init+0x538>)
34018300:	f003 fe6c 	bl	3401bfdc <iprintf>
34018304:	4b3d      	ldr	r3, [pc, #244]	@ (340183fc <LL_ATON_Init+0x53c>)
34018306:	4a3e      	ldr	r2, [pc, #248]	@ (34018400 <LL_ATON_Init+0x540>)
34018308:	21de      	movs	r1, #222	@ 0xde
3401830a:	483a      	ldr	r0, [pc, #232]	@ (340183f4 <LL_ATON_Init+0x534>)
3401830c:	f002 ffc4 	bl	3401b298 <__assert_func>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34018310:	4b40      	ldr	r3, [pc, #256]	@ (34018414 <LL_ATON_Init+0x554>)
34018312:	681b      	ldr	r3, [r3, #0]
34018314:	607b      	str	r3, [r7, #4]
34018316:	687b      	ldr	r3, [r7, #4]
34018318:	2b00      	cmp	r3, #0
3401831a:	d0f9      	beq.n	34018310 <LL_ATON_Init+0x450>
3401831c:	687b      	ldr	r3, [r7, #4]
3401831e:	b2db      	uxtb	r3, r3
34018320:	2b20      	cmp	r3, #32
34018322:	d10b      	bne.n	3401833c <LL_ATON_Init+0x47c>
34018324:	687b      	ldr	r3, [r7, #4]
34018326:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401832a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3401832e:	d105      	bne.n	3401833c <LL_ATON_Init+0x47c>
34018330:	687b      	ldr	r3, [r7, #4]
34018332:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401833a:	d02f      	beq.n	3401839c <LL_ATON_Init+0x4dc>
3401833c:	f004 f9ea 	bl	3401c714 <__errno>
34018340:	4603      	mov	r3, r0
34018342:	681b      	ldr	r3, [r3, #0]
34018344:	2b00      	cmp	r3, #0
34018346:	d008      	beq.n	3401835a <LL_ATON_Init+0x49a>
34018348:	f004 f9e4 	bl	3401c714 <__errno>
3401834c:	4603      	mov	r3, r0
3401834e:	681b      	ldr	r3, [r3, #0]
34018350:	4618      	mov	r0, r3
34018352:	f004 f979 	bl	3401c648 <strerror>
34018356:	4603      	mov	r3, r0
34018358:	e000      	b.n	3401835c <LL_ATON_Init+0x49c>
3401835a:	4b24      	ldr	r3, [pc, #144]	@ (340183ec <LL_ATON_Init+0x52c>)
3401835c:	687a      	ldr	r2, [r7, #4]
3401835e:	b2d2      	uxtb	r2, r2
34018360:	6879      	ldr	r1, [r7, #4]
34018362:	0b09      	lsrs	r1, r1, #12
34018364:	f001 010f 	and.w	r1, r1, #15
34018368:	6878      	ldr	r0, [r7, #4]
3401836a:	0a00      	lsrs	r0, r0, #8
3401836c:	f000 000f 	and.w	r0, r0, #15
34018370:	2402      	movs	r4, #2
34018372:	9406      	str	r4, [sp, #24]
34018374:	2403      	movs	r4, #3
34018376:	9405      	str	r4, [sp, #20]
34018378:	2420      	movs	r4, #32
3401837a:	9404      	str	r4, [sp, #16]
3401837c:	9003      	str	r0, [sp, #12]
3401837e:	9102      	str	r1, [sp, #8]
34018380:	9201      	str	r2, [sp, #4]
34018382:	4a25      	ldr	r2, [pc, #148]	@ (34018418 <LL_ATON_Init+0x558>)
34018384:	9200      	str	r2, [sp, #0]
34018386:	22e2      	movs	r2, #226	@ 0xe2
34018388:	491a      	ldr	r1, [pc, #104]	@ (340183f4 <LL_ATON_Init+0x534>)
3401838a:	481b      	ldr	r0, [pc, #108]	@ (340183f8 <LL_ATON_Init+0x538>)
3401838c:	f003 fe26 	bl	3401bfdc <iprintf>
34018390:	4b1a      	ldr	r3, [pc, #104]	@ (340183fc <LL_ATON_Init+0x53c>)
34018392:	4a1b      	ldr	r2, [pc, #108]	@ (34018400 <LL_ATON_Init+0x540>)
34018394:	21e2      	movs	r1, #226	@ 0xe2
34018396:	4817      	ldr	r0, [pc, #92]	@ (340183f4 <LL_ATON_Init+0x534>)
34018398:	f002 ff7e 	bl	3401b298 <__assert_func>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3401839c:	4b1f      	ldr	r3, [pc, #124]	@ (3401841c <LL_ATON_Init+0x55c>)
3401839e:	681b      	ldr	r3, [r3, #0]
340183a0:	607b      	str	r3, [r7, #4]
340183a2:	687b      	ldr	r3, [r7, #4]
340183a4:	2b00      	cmp	r3, #0
340183a6:	d0f9      	beq.n	3401839c <LL_ATON_Init+0x4dc>
340183a8:	687b      	ldr	r3, [r7, #4]
340183aa:	b2db      	uxtb	r3, r3
340183ac:	2b1f      	cmp	r3, #31
340183ae:	d10b      	bne.n	340183c8 <LL_ATON_Init+0x508>
340183b0:	687b      	ldr	r3, [r7, #4]
340183b2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
340183b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340183ba:	d105      	bne.n	340183c8 <LL_ATON_Init+0x508>
340183bc:	687b      	ldr	r3, [r7, #4]
340183be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340183c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340183c6:	d04c      	beq.n	34018462 <LL_ATON_Init+0x5a2>
340183c8:	f004 f9a4 	bl	3401c714 <__errno>
340183cc:	4603      	mov	r3, r0
340183ce:	681b      	ldr	r3, [r3, #0]
340183d0:	2b00      	cmp	r3, #0
340183d2:	d025      	beq.n	34018420 <LL_ATON_Init+0x560>
340183d4:	f004 f99e 	bl	3401c714 <__errno>
340183d8:	4603      	mov	r3, r0
340183da:	681b      	ldr	r3, [r3, #0]
340183dc:	4618      	mov	r0, r3
340183de:	f004 f933 	bl	3401c648 <strerror>
340183e2:	4603      	mov	r3, r0
340183e4:	e01d      	b.n	34018422 <LL_ATON_Init+0x562>
340183e6:	bf00      	nop
340183e8:	580f5004 	.word	0x580f5004
340183ec:	3401ed28 	.word	0x3401ed28
340183f0:	3401edb8 	.word	0x3401edb8
340183f4:	3401ebc4 	.word	0x3401ebc4
340183f8:	3401ed30 	.word	0x3401ed30
340183fc:	3401ed9c 	.word	0x3401ed9c
34018400:	3401f98c 	.word	0x3401f98c
34018404:	580f3004 	.word	0x580f3004
34018408:	3401edc0 	.word	0x3401edc0
3401840c:	580fe004 	.word	0x580fe004
34018410:	3401edc8 	.word	0x3401edc8
34018414:	580fd004 	.word	0x580fd004
34018418:	3401edd4 	.word	0x3401edd4
3401841c:	580e0004 	.word	0x580e0004
34018420:	4b85      	ldr	r3, [pc, #532]	@ (34018638 <LL_ATON_Init+0x778>)
34018422:	687a      	ldr	r2, [r7, #4]
34018424:	b2d2      	uxtb	r2, r2
34018426:	6879      	ldr	r1, [r7, #4]
34018428:	0b09      	lsrs	r1, r1, #12
3401842a:	f001 010f 	and.w	r1, r1, #15
3401842e:	6878      	ldr	r0, [r7, #4]
34018430:	0a00      	lsrs	r0, r0, #8
34018432:	f000 000f 	and.w	r0, r0, #15
34018436:	2402      	movs	r4, #2
34018438:	9406      	str	r4, [sp, #24]
3401843a:	2401      	movs	r4, #1
3401843c:	9405      	str	r4, [sp, #20]
3401843e:	241f      	movs	r4, #31
34018440:	9404      	str	r4, [sp, #16]
34018442:	9003      	str	r0, [sp, #12]
34018444:	9102      	str	r1, [sp, #8]
34018446:	9201      	str	r2, [sp, #4]
34018448:	4a7c      	ldr	r2, [pc, #496]	@ (3401863c <LL_ATON_Init+0x77c>)
3401844a:	9200      	str	r2, [sp, #0]
3401844c:	22f5      	movs	r2, #245	@ 0xf5
3401844e:	497c      	ldr	r1, [pc, #496]	@ (34018640 <LL_ATON_Init+0x780>)
34018450:	487c      	ldr	r0, [pc, #496]	@ (34018644 <LL_ATON_Init+0x784>)
34018452:	f003 fdc3 	bl	3401bfdc <iprintf>
34018456:	4b7c      	ldr	r3, [pc, #496]	@ (34018648 <LL_ATON_Init+0x788>)
34018458:	4a7c      	ldr	r2, [pc, #496]	@ (3401864c <LL_ATON_Init+0x78c>)
3401845a:	21f5      	movs	r1, #245	@ 0xf5
3401845c:	4878      	ldr	r0, [pc, #480]	@ (34018640 <LL_ATON_Init+0x780>)
3401845e:	f002 ff1b 	bl	3401b298 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
34018462:	4b7b      	ldr	r3, [pc, #492]	@ (34018650 <LL_ATON_Init+0x790>)
34018464:	681b      	ldr	r3, [r3, #0]
34018466:	607b      	str	r3, [r7, #4]
34018468:	687b      	ldr	r3, [r7, #4]
3401846a:	2b00      	cmp	r3, #0
3401846c:	d0f9      	beq.n	34018462 <LL_ATON_Init+0x5a2>
3401846e:	687b      	ldr	r3, [r7, #4]
34018470:	b2db      	uxtb	r3, r3
34018472:	2b1e      	cmp	r3, #30
34018474:	d10b      	bne.n	3401848e <LL_ATON_Init+0x5ce>
34018476:	687b      	ldr	r3, [r7, #4]
34018478:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
3401847c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34018480:	d105      	bne.n	3401848e <LL_ATON_Init+0x5ce>
34018482:	687b      	ldr	r3, [r7, #4]
34018484:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401848c:	d02f      	beq.n	340184ee <LL_ATON_Init+0x62e>
3401848e:	f004 f941 	bl	3401c714 <__errno>
34018492:	4603      	mov	r3, r0
34018494:	681b      	ldr	r3, [r3, #0]
34018496:	2b00      	cmp	r3, #0
34018498:	d008      	beq.n	340184ac <LL_ATON_Init+0x5ec>
3401849a:	f004 f93b 	bl	3401c714 <__errno>
3401849e:	4603      	mov	r3, r0
340184a0:	681b      	ldr	r3, [r3, #0]
340184a2:	4618      	mov	r0, r3
340184a4:	f004 f8d0 	bl	3401c648 <strerror>
340184a8:	4603      	mov	r3, r0
340184aa:	e000      	b.n	340184ae <LL_ATON_Init+0x5ee>
340184ac:	4b62      	ldr	r3, [pc, #392]	@ (34018638 <LL_ATON_Init+0x778>)
340184ae:	687a      	ldr	r2, [r7, #4]
340184b0:	b2d2      	uxtb	r2, r2
340184b2:	6879      	ldr	r1, [r7, #4]
340184b4:	0b09      	lsrs	r1, r1, #12
340184b6:	f001 010f 	and.w	r1, r1, #15
340184ba:	6878      	ldr	r0, [r7, #4]
340184bc:	0a00      	lsrs	r0, r0, #8
340184be:	f000 000f 	and.w	r0, r0, #15
340184c2:	2401      	movs	r4, #1
340184c4:	9406      	str	r4, [sp, #24]
340184c6:	2401      	movs	r4, #1
340184c8:	9405      	str	r4, [sp, #20]
340184ca:	241e      	movs	r4, #30
340184cc:	9404      	str	r4, [sp, #16]
340184ce:	9003      	str	r0, [sp, #12]
340184d0:	9102      	str	r1, [sp, #8]
340184d2:	9201      	str	r2, [sp, #4]
340184d4:	4a5f      	ldr	r2, [pc, #380]	@ (34018654 <LL_ATON_Init+0x794>)
340184d6:	9200      	str	r2, [sp, #0]
340184d8:	22f7      	movs	r2, #247	@ 0xf7
340184da:	4959      	ldr	r1, [pc, #356]	@ (34018640 <LL_ATON_Init+0x780>)
340184dc:	4859      	ldr	r0, [pc, #356]	@ (34018644 <LL_ATON_Init+0x784>)
340184de:	f003 fd7d 	bl	3401bfdc <iprintf>
340184e2:	4b59      	ldr	r3, [pc, #356]	@ (34018648 <LL_ATON_Init+0x788>)
340184e4:	4a59      	ldr	r2, [pc, #356]	@ (3401864c <LL_ATON_Init+0x78c>)
340184e6:	21f7      	movs	r1, #247	@ 0xf7
340184e8:	4855      	ldr	r0, [pc, #340]	@ (34018640 <LL_ATON_Init+0x780>)
340184ea:	f002 fed5 	bl	3401b298 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
340184ee:	4b5a      	ldr	r3, [pc, #360]	@ (34018658 <LL_ATON_Init+0x798>)
340184f0:	681b      	ldr	r3, [r3, #0]
340184f2:	607b      	str	r3, [r7, #4]
340184f4:	687b      	ldr	r3, [r7, #4]
340184f6:	2b00      	cmp	r3, #0
340184f8:	d0f9      	beq.n	340184ee <LL_ATON_Init+0x62e>
340184fa:	687b      	ldr	r3, [r7, #4]
340184fc:	b2db      	uxtb	r3, r3
340184fe:	2b00      	cmp	r3, #0
34018500:	d10b      	bne.n	3401851a <LL_ATON_Init+0x65a>
34018502:	687b      	ldr	r3, [r7, #4]
34018504:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401850c:	d105      	bne.n	3401851a <LL_ATON_Init+0x65a>
3401850e:	687b      	ldr	r3, [r7, #4]
34018510:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
34018514:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34018518:	d02f      	beq.n	3401857a <LL_ATON_Init+0x6ba>
3401851a:	f004 f8fb 	bl	3401c714 <__errno>
3401851e:	4603      	mov	r3, r0
34018520:	681b      	ldr	r3, [r3, #0]
34018522:	2b00      	cmp	r3, #0
34018524:	d008      	beq.n	34018538 <LL_ATON_Init+0x678>
34018526:	f004 f8f5 	bl	3401c714 <__errno>
3401852a:	4603      	mov	r3, r0
3401852c:	681b      	ldr	r3, [r3, #0]
3401852e:	4618      	mov	r0, r3
34018530:	f004 f88a 	bl	3401c648 <strerror>
34018534:	4603      	mov	r3, r0
34018536:	e000      	b.n	3401853a <LL_ATON_Init+0x67a>
34018538:	4b3f      	ldr	r3, [pc, #252]	@ (34018638 <LL_ATON_Init+0x778>)
3401853a:	687a      	ldr	r2, [r7, #4]
3401853c:	b2d2      	uxtb	r2, r2
3401853e:	6879      	ldr	r1, [r7, #4]
34018540:	0b09      	lsrs	r1, r1, #12
34018542:	f001 010f 	and.w	r1, r1, #15
34018546:	6878      	ldr	r0, [r7, #4]
34018548:	0a00      	lsrs	r0, r0, #8
3401854a:	f000 000f 	and.w	r0, r0, #15
3401854e:	2406      	movs	r4, #6
34018550:	9406      	str	r4, [sp, #24]
34018552:	2401      	movs	r4, #1
34018554:	9405      	str	r4, [sp, #20]
34018556:	2400      	movs	r4, #0
34018558:	9404      	str	r4, [sp, #16]
3401855a:	9003      	str	r0, [sp, #12]
3401855c:	9102      	str	r1, [sp, #8]
3401855e:	9201      	str	r2, [sp, #4]
34018560:	4a3e      	ldr	r2, [pc, #248]	@ (3401865c <LL_ATON_Init+0x79c>)
34018562:	9200      	str	r2, [sp, #0]
34018564:	22f9      	movs	r2, #249	@ 0xf9
34018566:	4936      	ldr	r1, [pc, #216]	@ (34018640 <LL_ATON_Init+0x780>)
34018568:	4836      	ldr	r0, [pc, #216]	@ (34018644 <LL_ATON_Init+0x784>)
3401856a:	f003 fd37 	bl	3401bfdc <iprintf>
3401856e:	4b36      	ldr	r3, [pc, #216]	@ (34018648 <LL_ATON_Init+0x788>)
34018570:	4a36      	ldr	r2, [pc, #216]	@ (3401864c <LL_ATON_Init+0x78c>)
34018572:	21f9      	movs	r1, #249	@ 0xf9
34018574:	4832      	ldr	r0, [pc, #200]	@ (34018640 <LL_ATON_Init+0x780>)
34018576:	f002 fe8f 	bl	3401b298 <__assert_func>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
3401857a:	4b39      	ldr	r3, [pc, #228]	@ (34018660 <LL_ATON_Init+0x7a0>)
3401857c:	681b      	ldr	r3, [r3, #0]
3401857e:	607b      	str	r3, [r7, #4]
34018580:	687b      	ldr	r3, [r7, #4]
34018582:	2b00      	cmp	r3, #0
34018584:	d0f9      	beq.n	3401857a <LL_ATON_Init+0x6ba>
34018586:	687b      	ldr	r3, [r7, #4]
34018588:	b2db      	uxtb	r3, r3
3401858a:	2b1d      	cmp	r3, #29
3401858c:	d10a      	bne.n	340185a4 <LL_ATON_Init+0x6e4>
3401858e:	687b      	ldr	r3, [r7, #4]
34018590:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
34018594:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34018598:	d104      	bne.n	340185a4 <LL_ATON_Init+0x6e4>
3401859a:	687b      	ldr	r3, [r7, #4]
3401859c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
340185a0:	2b00      	cmp	r3, #0
340185a2:	d02f      	beq.n	34018604 <LL_ATON_Init+0x744>
340185a4:	f004 f8b6 	bl	3401c714 <__errno>
340185a8:	4603      	mov	r3, r0
340185aa:	681b      	ldr	r3, [r3, #0]
340185ac:	2b00      	cmp	r3, #0
340185ae:	d008      	beq.n	340185c2 <LL_ATON_Init+0x702>
340185b0:	f004 f8b0 	bl	3401c714 <__errno>
340185b4:	4603      	mov	r3, r0
340185b6:	681b      	ldr	r3, [r3, #0]
340185b8:	4618      	mov	r0, r3
340185ba:	f004 f845 	bl	3401c648 <strerror>
340185be:	4603      	mov	r3, r0
340185c0:	e000      	b.n	340185c4 <LL_ATON_Init+0x704>
340185c2:	4b1d      	ldr	r3, [pc, #116]	@ (34018638 <LL_ATON_Init+0x778>)
340185c4:	687a      	ldr	r2, [r7, #4]
340185c6:	b2d2      	uxtb	r2, r2
340185c8:	6879      	ldr	r1, [r7, #4]
340185ca:	0b09      	lsrs	r1, r1, #12
340185cc:	f001 010f 	and.w	r1, r1, #15
340185d0:	6878      	ldr	r0, [r7, #4]
340185d2:	0a00      	lsrs	r0, r0, #8
340185d4:	f000 000f 	and.w	r0, r0, #15
340185d8:	2400      	movs	r4, #0
340185da:	9406      	str	r4, [sp, #24]
340185dc:	2405      	movs	r4, #5
340185de:	9405      	str	r4, [sp, #20]
340185e0:	241d      	movs	r4, #29
340185e2:	9404      	str	r4, [sp, #16]
340185e4:	9003      	str	r0, [sp, #12]
340185e6:	9102      	str	r1, [sp, #8]
340185e8:	9201      	str	r2, [sp, #4]
340185ea:	4a1e      	ldr	r2, [pc, #120]	@ (34018664 <LL_ATON_Init+0x7a4>)
340185ec:	9200      	str	r2, [sp, #0]
340185ee:	22fb      	movs	r2, #251	@ 0xfb
340185f0:	4913      	ldr	r1, [pc, #76]	@ (34018640 <LL_ATON_Init+0x780>)
340185f2:	4814      	ldr	r0, [pc, #80]	@ (34018644 <LL_ATON_Init+0x784>)
340185f4:	f003 fcf2 	bl	3401bfdc <iprintf>
340185f8:	4b13      	ldr	r3, [pc, #76]	@ (34018648 <LL_ATON_Init+0x788>)
340185fa:	4a14      	ldr	r2, [pc, #80]	@ (3401864c <LL_ATON_Init+0x78c>)
340185fc:	21fb      	movs	r1, #251	@ 0xfb
340185fe:	4810      	ldr	r0, [pc, #64]	@ (34018640 <LL_ATON_Init+0x780>)
34018600:	f002 fe4a 	bl	3401b298 <__assert_func>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018604:	2300      	movs	r3, #0
34018606:	603b      	str	r3, [r7, #0]
34018608:	e00a      	b.n	34018620 <LL_ATON_Init+0x760>
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3401860a:	683b      	ldr	r3, [r7, #0]
3401860c:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018610:	33e2      	adds	r3, #226	@ 0xe2
34018612:	031b      	lsls	r3, r3, #12
34018614:	461a      	mov	r2, r3
34018616:	2301      	movs	r3, #1
34018618:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
3401861a:	683b      	ldr	r3, [r7, #0]
3401861c:	3301      	adds	r3, #1
3401861e:	603b      	str	r3, [r7, #0]
34018620:	683b      	ldr	r3, [r7, #0]
34018622:	2b01      	cmp	r3, #1
34018624:	ddf1      	ble.n	3401860a <LL_ATON_Init+0x74a>
  }

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);
34018626:	4b10      	ldr	r3, [pc, #64]	@ (34018668 <LL_ATON_Init+0x7a8>)
34018628:	2201      	movs	r2, #1
3401862a:	601a      	str	r2, [r3, #0]

  return 0;
3401862c:	2300      	movs	r3, #0
}
3401862e:	4618      	mov	r0, r3
34018630:	370c      	adds	r7, #12
34018632:	46bd      	mov	sp, r7
34018634:	bd90      	pop	{r4, r7, pc}
34018636:	bf00      	nop
34018638:	3401ed28 	.word	0x3401ed28
3401863c:	3401eddc 	.word	0x3401eddc
34018640:	3401ebc4 	.word	0x3401ebc4
34018644:	3401ed30 	.word	0x3401ed30
34018648:	3401ed9c 	.word	0x3401ed9c
3401864c:	3401f98c 	.word	0x3401f98c
34018650:	580e1004 	.word	0x580e1004
34018654:	3401ede4 	.word	0x3401ede4
34018658:	580e4004 	.word	0x580e4004
3401865c:	3401edec 	.word	0x3401edec
34018660:	580e2004 	.word	0x580e2004
34018664:	3401edf8 	.word	0x3401edf8
34018668:	580e1000 	.word	0x580e1000

3401866c <LL_ATON_DeInit>:
/**
 * @brief  ATON global de-initialization. Must be called at the very end
 * @retval Always zero
 */
int LL_ATON_DeInit(void)
{
3401866c:	b480      	push	{r7}
3401866e:	b083      	sub	sp, #12
34018670:	af00      	add	r7, sp, #0
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
34018672:	4b13      	ldr	r3, [pc, #76]	@ (340186c0 <LL_ATON_DeInit+0x54>)
34018674:	2200      	movs	r2, #0
34018676:	601a      	str	r2, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
34018678:	2300      	movs	r3, #0
3401867a:	607b      	str	r3, [r7, #4]
3401867c:	e00a      	b.n	34018694 <LL_ATON_DeInit+0x28>
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3401867e:	687b      	ldr	r3, [r7, #4]
34018680:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018684:	33e2      	adds	r3, #226	@ 0xe2
34018686:	031b      	lsls	r3, r3, #12
34018688:	461a      	mov	r2, r3
3401868a:	2300      	movs	r3, #0
3401868c:	6013      	str	r3, [r2, #0]
  for (i = 0; i < ATON_BUSIF_NUM; i++)
3401868e:	687b      	ldr	r3, [r7, #4]
34018690:	3301      	adds	r3, #1
34018692:	607b      	str	r3, [r7, #4]
34018694:	687b      	ldr	r3, [r7, #4]
34018696:	2b01      	cmp	r3, #1
34018698:	ddf1      	ble.n	3401867e <LL_ATON_DeInit+0x12>
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
3401869a:	4b0a      	ldr	r3, [pc, #40]	@ (340186c4 <LL_ATON_DeInit+0x58>)
3401869c:	2200      	movs	r2, #0
3401869e:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
340186a0:	4b09      	ldr	r3, [pc, #36]	@ (340186c8 <LL_ATON_DeInit+0x5c>)
340186a2:	2200      	movs	r2, #0
340186a4:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_BGATES_SET(0, 0);
340186a6:	4b09      	ldr	r3, [pc, #36]	@ (340186cc <LL_ATON_DeInit+0x60>)
340186a8:	2200      	movs	r2, #0
340186aa:	601a      	str	r2, [r3, #0]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
340186ac:	4b08      	ldr	r3, [pc, #32]	@ (340186d0 <LL_ATON_DeInit+0x64>)
340186ae:	2200      	movs	r2, #0
340186b0:	601a      	str	r2, [r3, #0]

  return 0;
340186b2:	2300      	movs	r3, #0
}
340186b4:	4618      	mov	r0, r3
340186b6:	370c      	adds	r7, #12
340186b8:	46bd      	mov	sp, r7
340186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340186be:	4770      	bx	lr
340186c0:	580e1000 	.word	0x580e1000
340186c4:	580e0008 	.word	0x580e0008
340186c8:	580e000c 	.word	0x580e000c
340186cc:	580e0010 	.word	0x580e0010
340186d0:	580e0000 	.word	0x580e0000

340186d4 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
340186d4:	b480      	push	{r7}
340186d6:	b08d      	sub	sp, #52	@ 0x34
340186d8:	af00      	add	r7, sp, #0
340186da:	6078      	str	r0, [r7, #4]
340186dc:	6039      	str	r1, [r7, #0]
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
340186de:	2300      	movs	r3, #0
340186e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
340186e2:	e0a8      	b.n	34018836 <LL_ATON_EnableUnits_Init+0x162>
  {
    unitType = LL_ATON_EnableUnits_InitStruct[i].unit.unit_type;
340186e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340186e6:	009b      	lsls	r3, r3, #2
340186e8:	687a      	ldr	r2, [r7, #4]
340186ea:	4413      	add	r3, r2
340186ec:	781b      	ldrb	r3, [r3, #0]
340186ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340186f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340186f4:	009b      	lsls	r3, r3, #2
340186f6:	687a      	ldr	r2, [r7, #4]
340186f8:	4413      	add	r3, r2
340186fa:	885b      	ldrh	r3, [r3, #2]
340186fc:	627b      	str	r3, [r7, #36]	@ 0x24

    switch (unitType)
340186fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
34018702:	2b08      	cmp	r3, #8
34018704:	f200 8093 	bhi.w	3401882e <LL_ATON_EnableUnits_Init+0x15a>
34018708:	a201      	add	r2, pc, #4	@ (adr r2, 34018710 <LL_ATON_EnableUnits_Init+0x3c>)
3401870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401870e:	bf00      	nop
34018710:	34018735 	.word	0x34018735
34018714:	3401882f 	.word	0x3401882f
34018718:	3401875d 	.word	0x3401875d
3401871c:	34018779 	.word	0x34018779
34018720:	340187a1 	.word	0x340187a1
34018724:	340187c9 	.word	0x340187c9
34018728:	340187f1 	.word	0x340187f1
3401872c:	3401882f 	.word	0x3401882f
34018730:	34018819 	.word	0x34018819
    {
    case STRENG:
      ATON_ENABLE(STRENG, unitId);
34018734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018736:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401873a:	33e5      	adds	r3, #229	@ 0xe5
3401873c:	031b      	lsls	r3, r3, #12
3401873e:	681b      	ldr	r3, [r3, #0]
34018740:	60fb      	str	r3, [r7, #12]
34018742:	68fb      	ldr	r3, [r7, #12]
34018744:	f043 0301 	orr.w	r3, r3, #1
34018748:	60fb      	str	r3, [r7, #12]
3401874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401874c:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018750:	33e5      	adds	r3, #229	@ 0xe5
34018752:	031b      	lsls	r3, r3, #12
34018754:	461a      	mov	r2, r3
34018756:	68fb      	ldr	r3, [r7, #12]
34018758:	6013      	str	r3, [r2, #0]
      break;
3401875a:	e069      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#ifdef ATON_CONVACC_NUM
    case CONVACC:
#if 0
      ATON_ENABLE(CONVACC, unitId);
#else
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
3401875c:	4a3c      	ldr	r2, [pc, #240]	@ (34018850 <LL_ATON_EnableUnits_Init+0x17c>)
3401875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018760:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
34018764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018766:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401876a:	33ef      	adds	r3, #239	@ 0xef
3401876c:	031b      	lsls	r3, r3, #12
3401876e:	4619      	mov	r1, r3
34018770:	f042 0301 	orr.w	r3, r2, #1
34018774:	600b      	str	r3, [r1, #0]
#endif
      break;
34018776:	e05b      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_DECUN_NUM
    case DECUN:
      ATON_ENABLE(DECUN, unitId);
34018778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3401877a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401877e:	33f3      	adds	r3, #243	@ 0xf3
34018780:	031b      	lsls	r3, r3, #12
34018782:	681b      	ldr	r3, [r3, #0]
34018784:	613b      	str	r3, [r7, #16]
34018786:	693b      	ldr	r3, [r7, #16]
34018788:	f043 0301 	orr.w	r3, r3, #1
3401878c:	613b      	str	r3, [r7, #16]
3401878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018790:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018794:	33f3      	adds	r3, #243	@ 0xf3
34018796:	031b      	lsls	r3, r3, #12
34018798:	461a      	mov	r2, r3
3401879a:	693b      	ldr	r3, [r7, #16]
3401879c:	6013      	str	r3, [r2, #0]
      break;
3401879e:	e047      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_ACTIV_NUM
    case ACTIV:
      ATON_ENABLE(ACTIV, unitId);
340187a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187a2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187a6:	33f5      	adds	r3, #245	@ 0xf5
340187a8:	031b      	lsls	r3, r3, #12
340187aa:	681b      	ldr	r3, [r3, #0]
340187ac:	617b      	str	r3, [r7, #20]
340187ae:	697b      	ldr	r3, [r7, #20]
340187b0:	f043 0301 	orr.w	r3, r3, #1
340187b4:	617b      	str	r3, [r7, #20]
340187b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187b8:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187bc:	33f5      	adds	r3, #245	@ 0xf5
340187be:	031b      	lsls	r3, r3, #12
340187c0:	461a      	mov	r2, r3
340187c2:	697b      	ldr	r3, [r7, #20]
340187c4:	6013      	str	r3, [r2, #0]
      break;
340187c6:	e033      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#endif

#ifdef ATON_ARITH_NUM
    case ARITH:
      ATON_ENABLE(ARITH, unitId);
340187c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187ca:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187ce:	33f7      	adds	r3, #247	@ 0xf7
340187d0:	031b      	lsls	r3, r3, #12
340187d2:	681b      	ldr	r3, [r3, #0]
340187d4:	61bb      	str	r3, [r7, #24]
340187d6:	69bb      	ldr	r3, [r7, #24]
340187d8:	f043 0301 	orr.w	r3, r3, #1
340187dc:	61bb      	str	r3, [r7, #24]
340187de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187e0:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187e4:	33f7      	adds	r3, #247	@ 0xf7
340187e6:	031b      	lsls	r3, r3, #12
340187e8:	461a      	mov	r2, r3
340187ea:	69bb      	ldr	r3, [r7, #24]
340187ec:	6013      	str	r3, [r2, #0]
      break;
340187ee:	e01f      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#ifdef ATON_POOL_NUM
    case POOL:
#ifdef POOL_RC14
      ATON_POOL_CTRL_SET(unitId, ATON_POOL_CTRL_SET_EN(ATON_POOL_CTRL_GET(unitId), 1));
#else  // !POOL_RC14
      ATON_ENABLE(POOL, unitId);
340187f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340187f2:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340187f6:	33fb      	adds	r3, #251	@ 0xfb
340187f8:	031b      	lsls	r3, r3, #12
340187fa:	681b      	ldr	r3, [r3, #0]
340187fc:	61fb      	str	r3, [r7, #28]
340187fe:	69fb      	ldr	r3, [r7, #28]
34018800:	f043 0301 	orr.w	r3, r3, #1
34018804:	61fb      	str	r3, [r7, #28]
34018806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018808:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401880c:	33fb      	adds	r3, #251	@ 0xfb
3401880e:	031b      	lsls	r3, r3, #12
34018810:	461a      	mov	r2, r3
34018812:	69fb      	ldr	r3, [r7, #28]
34018814:	6013      	str	r3, [r2, #0]
#endif // !POOL_RC14
      break;
34018816:	e00b      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
34018818:	4b0e      	ldr	r3, [pc, #56]	@ (34018854 <LL_ATON_EnableUnits_Init+0x180>)
3401881a:	681b      	ldr	r3, [r3, #0]
3401881c:	623b      	str	r3, [r7, #32]
3401881e:	6a3b      	ldr	r3, [r7, #32]
34018820:	f043 0301 	orr.w	r3, r3, #1
34018824:	623b      	str	r3, [r7, #32]
34018826:	4a0b      	ldr	r2, [pc, #44]	@ (34018854 <LL_ATON_EnableUnits_Init+0x180>)
34018828:	6a3b      	ldr	r3, [r7, #32]
3401882a:	6013      	str	r3, [r2, #0]
      break;
3401882c:	e000      	b.n	34018830 <LL_ATON_EnableUnits_Init+0x15c>
#endif

    default:
      break;
3401882e:	bf00      	nop
  for (i = 0; i < n; i++)
34018830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34018832:	3301      	adds	r3, #1
34018834:	62fb      	str	r3, [r7, #44]	@ 0x2c
34018836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34018838:	683b      	ldr	r3, [r7, #0]
3401883a:	429a      	cmp	r2, r3
3401883c:	f6ff af52 	blt.w	340186e4 <LL_ATON_EnableUnits_Init+0x10>
    }
  }

  return 0;
34018840:	2300      	movs	r3, #0
}
34018842:	4618      	mov	r0, r3
34018844:	3734      	adds	r7, #52	@ 0x34
34018846:	46bd      	mov	sp, r7
34018848:	f85d 7b04 	ldr.w	r7, [sp], #4
3401884c:	4770      	bx	lr
3401884e:	bf00      	nop
34018850:	34020d30 	.word	0x34020d30
34018854:	580fd000 	.word	0x580fd000

34018858 <LL_ATON_DisableUnits_Init>:
 * @param  LL_ATON_DisableUnits_InitTypeDef Array of units to disable
 * @param  n Length of the initialization array
 * @retval Error code
 */
int LL_ATON_DisableUnits_Init(const LL_ATON_DisableUnits_InitTypeDef *LL_ATON_DisableUnits_InitStruct, int n)
{
34018858:	b580      	push	{r7, lr}
3401885a:	b086      	sub	sp, #24
3401885c:	af00      	add	r7, sp, #0
3401885e:	6078      	str	r0, [r7, #4]
34018860:	6039      	str	r1, [r7, #0]
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;
  uint32_t t;

  for (i = 0; i < n; i++)
34018862:	2300      	movs	r3, #0
34018864:	617b      	str	r3, [r7, #20]
34018866:	e1b1      	b.n	34018bcc <LL_ATON_DisableUnits_Init+0x374>
  {
    unitType = LL_ATON_DisableUnits_InitStruct[i].unit.unit_type;
34018868:	697b      	ldr	r3, [r7, #20]
3401886a:	009b      	lsls	r3, r3, #2
3401886c:	687a      	ldr	r2, [r7, #4]
3401886e:	4413      	add	r3, r2
34018870:	781b      	ldrb	r3, [r3, #0]
34018872:	74fb      	strb	r3, [r7, #19]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34018874:	697b      	ldr	r3, [r7, #20]
34018876:	009b      	lsls	r3, r3, #2
34018878:	687a      	ldr	r2, [r7, #4]
3401887a:	4413      	add	r3, r2
3401887c:	885b      	ldrh	r3, [r3, #2]
3401887e:	60fb      	str	r3, [r7, #12]

    switch (unitType)
34018880:	7cfb      	ldrb	r3, [r7, #19]
34018882:	2b08      	cmp	r3, #8
34018884:	f200 819c 	bhi.w	34018bc0 <LL_ATON_DisableUnits_Init+0x368>
34018888:	a201      	add	r2, pc, #4	@ (adr r2, 34018890 <LL_ATON_DisableUnits_Init+0x38>)
3401888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401888e:	bf00      	nop
34018890:	340188b5 	.word	0x340188b5
34018894:	34018bc1 	.word	0x34018bc1
34018898:	34018925 	.word	0x34018925
3401889c:	34018999 	.word	0x34018999
340188a0:	34018a0d 	.word	0x34018a0d
340188a4:	34018a81 	.word	0x34018a81
340188a8:	34018af9 	.word	0x34018af9
340188ac:	34018bc1 	.word	0x34018bc1
340188b0:	34018b71 	.word	0x34018b71
    {
#ifdef ATON_STRENG_NUM
    case STRENG:
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
340188b4:	2300      	movs	r3, #0
340188b6:	60bb      	str	r3, [r7, #8]
340188b8:	68bb      	ldr	r3, [r7, #8]
340188ba:	f023 0301 	bic.w	r3, r3, #1
340188be:	60bb      	str	r3, [r7, #8]
340188c0:	68bb      	ldr	r3, [r7, #8]
340188c2:	f043 0302 	orr.w	r3, r3, #2
340188c6:	60bb      	str	r3, [r7, #8]
340188c8:	68fb      	ldr	r3, [r7, #12]
340188ca:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340188ce:	33e5      	adds	r3, #229	@ 0xe5
340188d0:	031b      	lsls	r3, r3, #12
340188d2:	461a      	mov	r2, r3
340188d4:	68bb      	ldr	r3, [r7, #8]
340188d6:	6013      	str	r3, [r2, #0]
340188d8:	68fb      	ldr	r3, [r7, #12]
340188da:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340188de:	33e5      	adds	r3, #229	@ 0xe5
340188e0:	031b      	lsls	r3, r3, #12
340188e2:	681b      	ldr	r3, [r3, #0]
340188e4:	f003 0302 	and.w	r3, r3, #2
340188e8:	2b00      	cmp	r3, #0
340188ea:	d1f5      	bne.n	340188d8 <LL_ATON_DisableUnits_Init+0x80>
340188ec:	2300      	movs	r3, #0
340188ee:	60bb      	str	r3, [r7, #8]
340188f0:	68bb      	ldr	r3, [r7, #8]
340188f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340188f6:	60bb      	str	r3, [r7, #8]
340188f8:	68fb      	ldr	r3, [r7, #12]
340188fa:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340188fe:	33e5      	adds	r3, #229	@ 0xe5
34018900:	031b      	lsls	r3, r3, #12
34018902:	461a      	mov	r2, r3
34018904:	68bb      	ldr	r3, [r7, #8]
34018906:	6013      	str	r3, [r2, #0]
34018908:	68fb      	ldr	r3, [r7, #12]
3401890a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401890e:	33e5      	adds	r3, #229	@ 0xe5
34018910:	031b      	lsls	r3, r3, #12
34018912:	681b      	ldr	r3, [r3, #0]
34018914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018918:	2b00      	cmp	r3, #0
3401891a:	d1f5      	bne.n	34018908 <LL_ATON_DisableUnits_Init+0xb0>
      LL_ATON_DisableClock(ATON_STRENG_CLKB_CLK(unitId));
3401891c:	68f8      	ldr	r0, [r7, #12]
3401891e:	f001 fbfd 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018922:	e150      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_CONVACC_NUM
    case CONVACC:
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
34018924:	2300      	movs	r3, #0
34018926:	60bb      	str	r3, [r7, #8]
34018928:	68bb      	ldr	r3, [r7, #8]
3401892a:	f023 0301 	bic.w	r3, r3, #1
3401892e:	60bb      	str	r3, [r7, #8]
34018930:	68bb      	ldr	r3, [r7, #8]
34018932:	f043 0302 	orr.w	r3, r3, #2
34018936:	60bb      	str	r3, [r7, #8]
34018938:	68fb      	ldr	r3, [r7, #12]
3401893a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401893e:	33ef      	adds	r3, #239	@ 0xef
34018940:	031b      	lsls	r3, r3, #12
34018942:	461a      	mov	r2, r3
34018944:	68bb      	ldr	r3, [r7, #8]
34018946:	6013      	str	r3, [r2, #0]
34018948:	68fb      	ldr	r3, [r7, #12]
3401894a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401894e:	33ef      	adds	r3, #239	@ 0xef
34018950:	031b      	lsls	r3, r3, #12
34018952:	681b      	ldr	r3, [r3, #0]
34018954:	f003 0302 	and.w	r3, r3, #2
34018958:	2b00      	cmp	r3, #0
3401895a:	d1f5      	bne.n	34018948 <LL_ATON_DisableUnits_Init+0xf0>
3401895c:	2300      	movs	r3, #0
3401895e:	60bb      	str	r3, [r7, #8]
34018960:	68bb      	ldr	r3, [r7, #8]
34018962:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018966:	60bb      	str	r3, [r7, #8]
34018968:	68fb      	ldr	r3, [r7, #12]
3401896a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401896e:	33ef      	adds	r3, #239	@ 0xef
34018970:	031b      	lsls	r3, r3, #12
34018972:	461a      	mov	r2, r3
34018974:	68bb      	ldr	r3, [r7, #8]
34018976:	6013      	str	r3, [r2, #0]
34018978:	68fb      	ldr	r3, [r7, #12]
3401897a:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3401897e:	33ef      	adds	r3, #239	@ 0xef
34018980:	031b      	lsls	r3, r3, #12
34018982:	681b      	ldr	r3, [r3, #0]
34018984:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018988:	2b00      	cmp	r3, #0
3401898a:	d1f5      	bne.n	34018978 <LL_ATON_DisableUnits_Init+0x120>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
3401898c:	68fb      	ldr	r3, [r7, #12]
3401898e:	330a      	adds	r3, #10
34018990:	4618      	mov	r0, r3
34018992:	f001 fbc3 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018996:	e116      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_DECUN_NUM
    case DECUN:
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
34018998:	2300      	movs	r3, #0
3401899a:	60bb      	str	r3, [r7, #8]
3401899c:	68bb      	ldr	r3, [r7, #8]
3401899e:	f023 0301 	bic.w	r3, r3, #1
340189a2:	60bb      	str	r3, [r7, #8]
340189a4:	68bb      	ldr	r3, [r7, #8]
340189a6:	f043 0302 	orr.w	r3, r3, #2
340189aa:	60bb      	str	r3, [r7, #8]
340189ac:	68fb      	ldr	r3, [r7, #12]
340189ae:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189b2:	33f3      	adds	r3, #243	@ 0xf3
340189b4:	031b      	lsls	r3, r3, #12
340189b6:	461a      	mov	r2, r3
340189b8:	68bb      	ldr	r3, [r7, #8]
340189ba:	6013      	str	r3, [r2, #0]
340189bc:	68fb      	ldr	r3, [r7, #12]
340189be:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189c2:	33f3      	adds	r3, #243	@ 0xf3
340189c4:	031b      	lsls	r3, r3, #12
340189c6:	681b      	ldr	r3, [r3, #0]
340189c8:	f003 0302 	and.w	r3, r3, #2
340189cc:	2b00      	cmp	r3, #0
340189ce:	d1f5      	bne.n	340189bc <LL_ATON_DisableUnits_Init+0x164>
340189d0:	2300      	movs	r3, #0
340189d2:	60bb      	str	r3, [r7, #8]
340189d4:	68bb      	ldr	r3, [r7, #8]
340189d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340189da:	60bb      	str	r3, [r7, #8]
340189dc:	68fb      	ldr	r3, [r7, #12]
340189de:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189e2:	33f3      	adds	r3, #243	@ 0xf3
340189e4:	031b      	lsls	r3, r3, #12
340189e6:	461a      	mov	r2, r3
340189e8:	68bb      	ldr	r3, [r7, #8]
340189ea:	6013      	str	r3, [r2, #0]
340189ec:	68fb      	ldr	r3, [r7, #12]
340189ee:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340189f2:	33f3      	adds	r3, #243	@ 0xf3
340189f4:	031b      	lsls	r3, r3, #12
340189f6:	681b      	ldr	r3, [r3, #0]
340189f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
340189fc:	2b00      	cmp	r3, #0
340189fe:	d1f5      	bne.n	340189ec <LL_ATON_DisableUnits_Init+0x194>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
34018a00:	68fb      	ldr	r3, [r7, #12]
34018a02:	330e      	adds	r3, #14
34018a04:	4618      	mov	r0, r3
34018a06:	f001 fb89 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018a0a:	e0dc      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_ACTIV_NUM
    case ACTIV:
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
34018a0c:	4b74      	ldr	r3, [pc, #464]	@ (34018be0 <LL_ATON_DisableUnits_Init+0x388>)
34018a0e:	60bb      	str	r3, [r7, #8]
34018a10:	68bb      	ldr	r3, [r7, #8]
34018a12:	f023 0301 	bic.w	r3, r3, #1
34018a16:	60bb      	str	r3, [r7, #8]
34018a18:	68bb      	ldr	r3, [r7, #8]
34018a1a:	f043 0302 	orr.w	r3, r3, #2
34018a1e:	60bb      	str	r3, [r7, #8]
34018a20:	68fb      	ldr	r3, [r7, #12]
34018a22:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a26:	33f5      	adds	r3, #245	@ 0xf5
34018a28:	031b      	lsls	r3, r3, #12
34018a2a:	461a      	mov	r2, r3
34018a2c:	68bb      	ldr	r3, [r7, #8]
34018a2e:	6013      	str	r3, [r2, #0]
34018a30:	68fb      	ldr	r3, [r7, #12]
34018a32:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a36:	33f5      	adds	r3, #245	@ 0xf5
34018a38:	031b      	lsls	r3, r3, #12
34018a3a:	681b      	ldr	r3, [r3, #0]
34018a3c:	f003 0302 	and.w	r3, r3, #2
34018a40:	2b00      	cmp	r3, #0
34018a42:	d1f5      	bne.n	34018a30 <LL_ATON_DisableUnits_Init+0x1d8>
34018a44:	4b66      	ldr	r3, [pc, #408]	@ (34018be0 <LL_ATON_DisableUnits_Init+0x388>)
34018a46:	60bb      	str	r3, [r7, #8]
34018a48:	68bb      	ldr	r3, [r7, #8]
34018a4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018a4e:	60bb      	str	r3, [r7, #8]
34018a50:	68fb      	ldr	r3, [r7, #12]
34018a52:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a56:	33f5      	adds	r3, #245	@ 0xf5
34018a58:	031b      	lsls	r3, r3, #12
34018a5a:	461a      	mov	r2, r3
34018a5c:	68bb      	ldr	r3, [r7, #8]
34018a5e:	6013      	str	r3, [r2, #0]
34018a60:	68fb      	ldr	r3, [r7, #12]
34018a62:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a66:	33f5      	adds	r3, #245	@ 0xf5
34018a68:	031b      	lsls	r3, r3, #12
34018a6a:	681b      	ldr	r3, [r3, #0]
34018a6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018a70:	2b00      	cmp	r3, #0
34018a72:	d1f5      	bne.n	34018a60 <LL_ATON_DisableUnits_Init+0x208>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
34018a74:	68fb      	ldr	r3, [r7, #12]
34018a76:	3310      	adds	r3, #16
34018a78:	4618      	mov	r0, r3
34018a7a:	f001 fb4f 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018a7e:	e0a2      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_ARITH_NUM
    case ARITH:
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
34018a80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34018a84:	60bb      	str	r3, [r7, #8]
34018a86:	68bb      	ldr	r3, [r7, #8]
34018a88:	f023 0301 	bic.w	r3, r3, #1
34018a8c:	60bb      	str	r3, [r7, #8]
34018a8e:	68bb      	ldr	r3, [r7, #8]
34018a90:	f043 0302 	orr.w	r3, r3, #2
34018a94:	60bb      	str	r3, [r7, #8]
34018a96:	68fb      	ldr	r3, [r7, #12]
34018a98:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018a9c:	33f7      	adds	r3, #247	@ 0xf7
34018a9e:	031b      	lsls	r3, r3, #12
34018aa0:	461a      	mov	r2, r3
34018aa2:	68bb      	ldr	r3, [r7, #8]
34018aa4:	6013      	str	r3, [r2, #0]
34018aa6:	68fb      	ldr	r3, [r7, #12]
34018aa8:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018aac:	33f7      	adds	r3, #247	@ 0xf7
34018aae:	031b      	lsls	r3, r3, #12
34018ab0:	681b      	ldr	r3, [r3, #0]
34018ab2:	f003 0302 	and.w	r3, r3, #2
34018ab6:	2b00      	cmp	r3, #0
34018ab8:	d1f5      	bne.n	34018aa6 <LL_ATON_DisableUnits_Init+0x24e>
34018aba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34018abe:	60bb      	str	r3, [r7, #8]
34018ac0:	68bb      	ldr	r3, [r7, #8]
34018ac2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018ac6:	60bb      	str	r3, [r7, #8]
34018ac8:	68fb      	ldr	r3, [r7, #12]
34018aca:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018ace:	33f7      	adds	r3, #247	@ 0xf7
34018ad0:	031b      	lsls	r3, r3, #12
34018ad2:	461a      	mov	r2, r3
34018ad4:	68bb      	ldr	r3, [r7, #8]
34018ad6:	6013      	str	r3, [r2, #0]
34018ad8:	68fb      	ldr	r3, [r7, #12]
34018ada:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018ade:	33f7      	adds	r3, #247	@ 0xf7
34018ae0:	031b      	lsls	r3, r3, #12
34018ae2:	681b      	ldr	r3, [r3, #0]
34018ae4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018ae8:	2b00      	cmp	r3, #0
34018aea:	d1f5      	bne.n	34018ad8 <LL_ATON_DisableUnits_Init+0x280>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
34018aec:	68fb      	ldr	r3, [r7, #12]
34018aee:	3312      	adds	r3, #18
34018af0:	4618      	mov	r0, r3
34018af2:	f001 fb13 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018af6:	e066      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#ifdef ATON_POOL_NUM
    case POOL:
#ifdef POOL_RC14
      ATON_POOL_CTRL_SET(unitId, ATON_POOL_CTRL_SET_EN(ATON_POOL_CTRL_GET(unitId), 0));
#else  // !POOL_RC14
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
34018af8:	f44f 0384 	mov.w	r3, #4325376	@ 0x420000
34018afc:	60bb      	str	r3, [r7, #8]
34018afe:	68bb      	ldr	r3, [r7, #8]
34018b00:	f023 0301 	bic.w	r3, r3, #1
34018b04:	60bb      	str	r3, [r7, #8]
34018b06:	68bb      	ldr	r3, [r7, #8]
34018b08:	f043 0302 	orr.w	r3, r3, #2
34018b0c:	60bb      	str	r3, [r7, #8]
34018b0e:	68fb      	ldr	r3, [r7, #12]
34018b10:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b14:	33fb      	adds	r3, #251	@ 0xfb
34018b16:	031b      	lsls	r3, r3, #12
34018b18:	461a      	mov	r2, r3
34018b1a:	68bb      	ldr	r3, [r7, #8]
34018b1c:	6013      	str	r3, [r2, #0]
34018b1e:	68fb      	ldr	r3, [r7, #12]
34018b20:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b24:	33fb      	adds	r3, #251	@ 0xfb
34018b26:	031b      	lsls	r3, r3, #12
34018b28:	681b      	ldr	r3, [r3, #0]
34018b2a:	f003 0302 	and.w	r3, r3, #2
34018b2e:	2b00      	cmp	r3, #0
34018b30:	d1f5      	bne.n	34018b1e <LL_ATON_DisableUnits_Init+0x2c6>
34018b32:	f44f 0384 	mov.w	r3, #4325376	@ 0x420000
34018b36:	60bb      	str	r3, [r7, #8]
34018b38:	68bb      	ldr	r3, [r7, #8]
34018b3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018b3e:	60bb      	str	r3, [r7, #8]
34018b40:	68fb      	ldr	r3, [r7, #12]
34018b42:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b46:	33fb      	adds	r3, #251	@ 0xfb
34018b48:	031b      	lsls	r3, r3, #12
34018b4a:	461a      	mov	r2, r3
34018b4c:	68bb      	ldr	r3, [r7, #8]
34018b4e:	6013      	str	r3, [r2, #0]
34018b50:	68fb      	ldr	r3, [r7, #12]
34018b52:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018b56:	33fb      	adds	r3, #251	@ 0xfb
34018b58:	031b      	lsls	r3, r3, #12
34018b5a:	681b      	ldr	r3, [r3, #0]
34018b5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018b60:	2b00      	cmp	r3, #0
34018b62:	d1f5      	bne.n	34018b50 <LL_ATON_DisableUnits_Init+0x2f8>
#endif // !POOL_RC14

      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
34018b64:	68fb      	ldr	r3, [r7, #12]
34018b66:	3316      	adds	r3, #22
34018b68:	4618      	mov	r0, r3
34018b6a:	f001 fad7 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018b6e:	e02a      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
34018b70:	2300      	movs	r3, #0
34018b72:	60bb      	str	r3, [r7, #8]
34018b74:	68bb      	ldr	r3, [r7, #8]
34018b76:	f023 0301 	bic.w	r3, r3, #1
34018b7a:	60bb      	str	r3, [r7, #8]
34018b7c:	68bb      	ldr	r3, [r7, #8]
34018b7e:	f043 0302 	orr.w	r3, r3, #2
34018b82:	60bb      	str	r3, [r7, #8]
34018b84:	4a17      	ldr	r2, [pc, #92]	@ (34018be4 <LL_ATON_DisableUnits_Init+0x38c>)
34018b86:	68bb      	ldr	r3, [r7, #8]
34018b88:	6013      	str	r3, [r2, #0]
34018b8a:	4b16      	ldr	r3, [pc, #88]	@ (34018be4 <LL_ATON_DisableUnits_Init+0x38c>)
34018b8c:	681b      	ldr	r3, [r3, #0]
34018b8e:	f003 0302 	and.w	r3, r3, #2
34018b92:	2b00      	cmp	r3, #0
34018b94:	d1f9      	bne.n	34018b8a <LL_ATON_DisableUnits_Init+0x332>
34018b96:	2300      	movs	r3, #0
34018b98:	60bb      	str	r3, [r7, #8]
34018b9a:	68bb      	ldr	r3, [r7, #8]
34018b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34018ba0:	60bb      	str	r3, [r7, #8]
34018ba2:	4a10      	ldr	r2, [pc, #64]	@ (34018be4 <LL_ATON_DisableUnits_Init+0x38c>)
34018ba4:	68bb      	ldr	r3, [r7, #8]
34018ba6:	6013      	str	r3, [r2, #0]
34018ba8:	4b0e      	ldr	r3, [pc, #56]	@ (34018be4 <LL_ATON_DisableUnits_Init+0x38c>)
34018baa:	681b      	ldr	r3, [r3, #0]
34018bac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34018bb0:	2b00      	cmp	r3, #0
34018bb2:	d1f9      	bne.n	34018ba8 <LL_ATON_DisableUnits_Init+0x350>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34018bb4:	68fb      	ldr	r3, [r7, #12]
34018bb6:	3318      	adds	r3, #24
34018bb8:	4618      	mov	r0, r3
34018bba:	f001 faaf 	bl	3401a11c <LL_ATON_DisableClock>
      break;
34018bbe:	e002      	b.n	34018bc6 <LL_ATON_DisableUnits_Init+0x36e>
#endif

    default:
      return LL_ATON_INVALID_PARAM;
34018bc0:	f06f 0301 	mvn.w	r3, #1
34018bc4:	e008      	b.n	34018bd8 <LL_ATON_DisableUnits_Init+0x380>
  for (i = 0; i < n; i++)
34018bc6:	697b      	ldr	r3, [r7, #20]
34018bc8:	3301      	adds	r3, #1
34018bca:	617b      	str	r3, [r7, #20]
34018bcc:	697a      	ldr	r2, [r7, #20]
34018bce:	683b      	ldr	r3, [r7, #0]
34018bd0:	429a      	cmp	r2, r3
34018bd2:	f6ff ae49 	blt.w	34018868 <LL_ATON_DisableUnits_Init+0x10>
    }
  }

  return LL_ATON_OK;
34018bd6:	2300      	movs	r3, #0
}
34018bd8:	4618      	mov	r0, r3
34018bda:	3718      	adds	r7, #24
34018bdc:	46bd      	mov	sp, r7
34018bde:	bd80      	pop	{r7, pc}
34018be0:	00881080 	.word	0x00881080
34018be4:	580fd000 	.word	0x580fd000

34018be8 <LL_Streng_TensorInit>:
 * @param  conf Pointer to structure(s) describing initialization parameters
 * @param  n Number of elements in initialization structure array
 * @retval error code. E.g.: Invalid ID, invalid parameters, not idle,..
 */
int LL_Streng_TensorInit(int id, const LL_Streng_TensorInitTypeDef *conf, int n)
{
34018be8:	b580      	push	{r7, lr}
34018bea:	b096      	sub	sp, #88	@ 0x58
34018bec:	af00      	add	r7, sp, #0
34018bee:	60f8      	str	r0, [r7, #12]
34018bf0:	60b9      	str	r1, [r7, #8]
34018bf2:	607a      	str	r2, [r7, #4]
  uint32_t t;

  /* deferred register values */
  uint32_t t_streng_strd = ATON_STRENG_STRD_DT;
34018bf4:	2300      	movs	r3, #0
34018bf6:	653b      	str	r3, [r7, #80]	@ 0x50
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
34018bf8:	2300      	movs	r3, #0
34018bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t t_streng_event = ATON_STRENG_EVENT_DT;
34018bfc:	2300      	movs	r3, #0
34018bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (id >= ATON_STRENG_NUM)
34018c00:	68fb      	ldr	r3, [r7, #12]
34018c02:	2b09      	cmp	r3, #9
34018c04:	dd02      	ble.n	34018c0c <LL_Streng_TensorInit+0x24>
    return LL_ATON_INVALID_ID;
34018c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c0a:	e342      	b.n	34019292 <LL_Streng_TensorInit+0x6aa>

  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
34018c0c:	68fb      	ldr	r3, [r7, #12]
34018c0e:	4618      	mov	r0, r3
34018c10:	f001 fa56 	bl	3401a0c0 <LL_ATON_EnableClock>

#define _LL_min(x, y) ((x) > (y) ? (y) : (x))

  if (n != 1)
34018c14:	687b      	ldr	r3, [r7, #4]
34018c16:	2b01      	cmp	r3, #1
34018c18:	d002      	beq.n	34018c20 <LL_Streng_TensorInit+0x38>
    return -1;
34018c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c1e:	e338      	b.n	34019292 <LL_Streng_TensorInit+0x6aa>
    // if (conf->dir == 0 && (conf->nbits_in > conf->nbits_out)) return -1;
#ifndef ATON_IMC_NUM
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
34018c20:	68bb      	ldr	r3, [r7, #8]
34018c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34018c26:	2b18      	cmp	r3, #24
34018c28:	d804      	bhi.n	34018c34 <LL_Streng_TensorInit+0x4c>
34018c2a:	68bb      	ldr	r3, [r7, #8]
34018c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018c30:	2b18      	cmp	r3, #24
34018c32:	d902      	bls.n	34018c3a <LL_Streng_TensorInit+0x52>
    return -1;
34018c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34018c38:	e32b      	b.n	34019292 <LL_Streng_TensorInit+0x6aa>
#endif

  t = ATON_STRENG_CTRL_DT;
34018c3a:	2300      	movs	r3, #0
34018c3c:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34018c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c40:	f023 0208 	bic.w	r2, r3, #8
34018c44:	68bb      	ldr	r3, [r7, #8]
34018c46:	781b      	ldrb	r3, [r3, #0]
34018c48:	00db      	lsls	r3, r3, #3
34018c4a:	f003 0308 	and.w	r3, r3, #8
34018c4e:	4313      	orrs	r3, r2
34018c50:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34018c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34018c58:	68bb      	ldr	r3, [r7, #8]
34018c5a:	781b      	ldrb	r3, [r3, #0]
34018c5c:	01db      	lsls	r3, r3, #7
34018c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34018c62:	4313      	orrs	r3, r2
34018c64:	657b      	str	r3, [r7, #84]	@ 0x54
#ifdef ATON_STRENG_CTRL_SET_RAW_OUT
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
34018c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34018c6c:	68bb      	ldr	r3, [r7, #8]
34018c6e:	781b      	ldrb	r3, [r3, #0]
34018c70:	f3c3 0380 	ubfx	r3, r3, #2, #1
34018c74:	b2db      	uxtb	r3, r3
34018c76:	025b      	lsls	r3, r3, #9
34018c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34018c7c:	4313      	orrs	r3, r2
34018c7e:	657b      	str	r3, [r7, #84]	@ 0x54
#else
  /* Hardware feature not supported */
  LL_ATON_ASSERT(conf->raw_out == 0);
#endif
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
34018c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c82:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
34018c86:	68bb      	ldr	r3, [r7, #8]
34018c88:	781b      	ldrb	r3, [r3, #0]
34018c8a:	01db      	lsls	r3, r3, #7
34018c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34018c90:	4313      	orrs	r3, r2
34018c92:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34018c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018c96:	f023 0210 	bic.w	r2, r3, #16
34018c9a:	68bb      	ldr	r3, [r7, #8]
34018c9c:	781b      	ldrb	r3, [r3, #0]
34018c9e:	085b      	lsrs	r3, r3, #1
34018ca0:	b2db      	uxtb	r3, r3
34018ca2:	f003 0310 	and.w	r3, r3, #16
34018ca6:	4313      	orrs	r3, r2
34018ca8:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34018caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cac:	f023 0304 	bic.w	r3, r3, #4
34018cb0:	68ba      	ldr	r2, [r7, #8]
34018cb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34018cb4:	2a01      	cmp	r2, #1
34018cb6:	d101      	bne.n	34018cbc <LL_Streng_TensorInit+0xd4>
34018cb8:	2204      	movs	r2, #4
34018cba:	e000      	b.n	34018cbe <LL_Streng_TensorInit+0xd6>
34018cbc:	2200      	movs	r2, #0
34018cbe:	4313      	orrs	r3, r2
34018cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34018cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cc4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
34018cc8:	68bb      	ldr	r3, [r7, #8]
34018cca:	781b      	ldrb	r3, [r3, #0]
34018ccc:	011b      	lsls	r3, r3, #4
34018cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34018cd2:	4313      	orrs	r3, r2
34018cd4:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34018cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cd8:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34018cdc:	68bb      	ldr	r3, [r7, #8]
34018cde:	781b      	ldrb	r3, [r3, #0]
34018ce0:	021b      	lsls	r3, r3, #8
34018ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34018ce6:	4313      	orrs	r3, r2
34018ce8:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34018cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018cec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34018cf0:	68bb      	ldr	r3, [r7, #8]
34018cf2:	781b      	ldrb	r3, [r3, #0]
34018cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018cf8:	b2db      	uxtb	r3, r3
34018cfa:	2b00      	cmp	r3, #0
34018cfc:	d008      	beq.n	34018d10 <LL_Streng_TensorInit+0x128>
34018cfe:	68bb      	ldr	r3, [r7, #8]
34018d00:	785b      	ldrb	r3, [r3, #1]
34018d02:	f003 0302 	and.w	r3, r3, #2
34018d06:	b2db      	uxtb	r3, r3
34018d08:	2b00      	cmp	r3, #0
34018d0a:	d101      	bne.n	34018d10 <LL_Streng_TensorInit+0x128>
34018d0c:	2301      	movs	r3, #1
34018d0e:	e000      	b.n	34018d12 <LL_Streng_TensorInit+0x12a>
34018d10:	2300      	movs	r3, #0
34018d12:	03db      	lsls	r3, r3, #15
34018d14:	b29b      	uxth	r3, r3
34018d16:	4313      	orrs	r3, r2
34018d18:	657b      	str	r3, [r7, #84]	@ 0x54

  int ch_bits[3] = {0, 0, 0};
34018d1a:	2300      	movs	r3, #0
34018d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
34018d1e:	2300      	movs	r3, #0
34018d20:	633b      	str	r3, [r7, #48]	@ 0x30
34018d22:	2300      	movs	r3, #0
34018d24:	637b      	str	r3, [r7, #52]	@ 0x34
  int in_bits[3];
  int out_bits[3];
  int nbits_out = conf->nbits_out;
34018d26:	68bb      	ldr	r3, [r7, #8]
34018d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d2c:	647b      	str	r3, [r7, #68]	@ 0x44
  int nbits_in = conf->nbits_in;
34018d2e:	68bb      	ldr	r3, [r7, #8]
34018d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34018d34:	643b      	str	r3, [r7, #64]	@ 0x40
  // case 2: stream->bus  --> in_bits >= out_bits -> use lanes but valid for in_bits=8,16,24 for other bit length out is
  // right shifted by (8,16,24) - out_bits
  //                      |
  // case 3:              --> in_bits < out_bits -> use FRONT_GAP

  int io_case = ((conf->dir != 0) << 1);
34018d36:	68bb      	ldr	r3, [r7, #8]
34018d38:	781b      	ldrb	r3, [r3, #0]
34018d3a:	005b      	lsls	r3, r3, #1
34018d3c:	f003 0302 	and.w	r3, r3, #2
34018d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34018d42:	68bb      	ldr	r3, [r7, #8]
34018d44:	781b      	ldrb	r3, [r3, #0]
34018d46:	f003 0301 	and.w	r3, r3, #1
34018d4a:	b2db      	uxtb	r3, r3
34018d4c:	2b00      	cmp	r3, #0
34018d4e:	d10c      	bne.n	34018d6a <LL_Streng_TensorInit+0x182>
34018d50:	68bb      	ldr	r3, [r7, #8]
34018d52:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
34018d56:	68bb      	ldr	r3, [r7, #8]
34018d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d5c:	429a      	cmp	r2, r3
34018d5e:	bf94      	ite	ls
34018d60:	2301      	movls	r3, #1
34018d62:	2300      	movhi	r3, #0
34018d64:	b2db      	uxtb	r3, r3
34018d66:	461a      	mov	r2, r3
34018d68:	e00b      	b.n	34018d82 <LL_Streng_TensorInit+0x19a>
34018d6a:	68bb      	ldr	r3, [r7, #8]
34018d6c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
34018d70:	68bb      	ldr	r3, [r7, #8]
34018d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
34018d76:	429a      	cmp	r2, r3
34018d78:	bf34      	ite	cc
34018d7a:	2301      	movcc	r3, #1
34018d7c:	2300      	movcs	r3, #0
34018d7e:	b2db      	uxtb	r3, r3
34018d80:	461a      	mov	r2, r3
34018d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34018d84:	4413      	add	r3, r2
34018d86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  switch (io_case)
34018d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34018d8a:	2b03      	cmp	r3, #3
34018d8c:	f200 80c8 	bhi.w	34018f20 <LL_Streng_TensorInit+0x338>
34018d90:	a201      	add	r2, pc, #4	@ (adr r2, 34018d98 <LL_Streng_TensorInit+0x1b0>)
34018d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34018d96:	bf00      	nop
34018d98:	34018da9 	.word	0x34018da9
34018d9c:	34018de9 	.word	0x34018de9
34018da0:	34018ea5 	.word	0x34018ea5
34018da4:	34018e65 	.word	0x34018e65
  {
  case 0: // in_bits > out_bits && bus->stream
          // must use FRONT_GAP
  {
    if (conf->mem_lsb)
34018da8:	68bb      	ldr	r3, [r7, #8]
34018daa:	781b      	ldrb	r3, [r3, #0]
34018dac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34018db0:	b2db      	uxtb	r3, r3
34018db2:	2b00      	cmp	r3, #0
34018db4:	d00b      	beq.n	34018dce <LL_Streng_TensorInit+0x1e6>
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34018db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018db8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34018dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34018dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018dc0:	1acb      	subs	r3, r1, r3
34018dc2:	041b      	lsls	r3, r3, #16
34018dc4:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
34018dc8:	4313      	orrs	r3, r2
34018dca:	653b      	str	r3, [r7, #80]	@ 0x50
34018dcc:	e00a      	b.n	34018de4 <LL_Streng_TensorInit+0x1fc>
    else
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34018dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018dd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34018dd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34018dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018dd8:	1acb      	subs	r3, r1, r3
34018dda:	061b      	lsls	r3, r3, #24
34018ddc:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34018de0:	4313      	orrs	r3, r2
34018de2:	653b      	str	r3, [r7, #80]	@ 0x50
    nbits_in = nbits_out;
34018de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018de6:	643b      	str	r3, [r7, #64]	@ 0x40
  }
  // intentional fall through
  case 1: // in_bits <= out_bits && bus->stream
    in_bits[0] = _LL_min(8, nbits_in);
34018de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018dea:	2b08      	cmp	r3, #8
34018dec:	bfa8      	it	ge
34018dee:	2308      	movge	r3, #8
34018df0:	623b      	str	r3, [r7, #32]
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34018df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018df4:	2b08      	cmp	r3, #8
34018df6:	dd05      	ble.n	34018e04 <LL_Streng_TensorInit+0x21c>
34018df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018dfa:	2b10      	cmp	r3, #16
34018dfc:	bfa8      	it	ge
34018dfe:	2310      	movge	r3, #16
34018e00:	3b08      	subs	r3, #8
34018e02:	e000      	b.n	34018e06 <LL_Streng_TensorInit+0x21e>
34018e04:	2300      	movs	r3, #0
34018e06:	627b      	str	r3, [r7, #36]	@ 0x24
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34018e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e0a:	2b10      	cmp	r3, #16
34018e0c:	dd05      	ble.n	34018e1a <LL_Streng_TensorInit+0x232>
34018e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e10:	2b18      	cmp	r3, #24
34018e12:	bfa8      	it	ge
34018e14:	2318      	movge	r3, #24
34018e16:	3b10      	subs	r3, #16
34018e18:	e000      	b.n	34018e1c <LL_Streng_TensorInit+0x234>
34018e1a:	2300      	movs	r3, #0
34018e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (conf->align_right)
34018e1e:	68bb      	ldr	r3, [r7, #8]
34018e20:	781b      	ldrb	r3, [r3, #0]
34018e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018e26:	b2db      	uxtb	r3, r3
34018e28:	2b00      	cmp	r3, #0
34018e2a:	d006      	beq.n	34018e3a <LL_Streng_TensorInit+0x252>
    {
      ch_bits[0] = in_bits[0];
34018e2c:	6a3b      	ldr	r3, [r7, #32]
34018e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ch_bits[1] = in_bits[1];
34018e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e32:	633b      	str	r3, [r7, #48]	@ 0x30
      ch_bits[2] = in_bits[2];
34018e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018e36:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[0] = in_bits[1];
      } // N.B. the DMA stuffs the bits to the left of the channel
      else
        ch_bits[0] = in_bits[0];
    }
    break;
34018e38:	e072      	b.n	34018f20 <LL_Streng_TensorInit+0x338>
      if (nbits_out > 16)
34018e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018e3c:	2b10      	cmp	r3, #16
34018e3e:	dd06      	ble.n	34018e4e <LL_Streng_TensorInit+0x266>
        ch_bits[2] = in_bits[0];
34018e40:	6a3b      	ldr	r3, [r7, #32]
34018e42:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[1] = in_bits[1];
34018e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e46:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = in_bits[2];
34018e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34018e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e4c:	e068      	b.n	34018f20 <LL_Streng_TensorInit+0x338>
      else if (nbits_out > 8)
34018e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018e50:	2b08      	cmp	r3, #8
34018e52:	dd04      	ble.n	34018e5e <LL_Streng_TensorInit+0x276>
        ch_bits[1] = in_bits[0];
34018e54:	6a3b      	ldr	r3, [r7, #32]
34018e56:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = in_bits[1];
34018e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34018e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e5c:	e060      	b.n	34018f20 <LL_Streng_TensorInit+0x338>
        ch_bits[0] = in_bits[0];
34018e5e:	6a3b      	ldr	r3, [r7, #32]
34018e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018e62:	e05d      	b.n	34018f20 <LL_Streng_TensorInit+0x338>
  case 3: // in_bits < out_bits && stream->bus
  {
    if (conf->mem_lsb)
34018e64:	68bb      	ldr	r3, [r7, #8]
34018e66:	781b      	ldrb	r3, [r3, #0]
34018e68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34018e6c:	b2db      	uxtb	r3, r3
34018e6e:	2b00      	cmp	r3, #0
34018e70:	d00b      	beq.n	34018e8a <LL_Streng_TensorInit+0x2a2>
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34018e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018e74:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34018e78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
34018e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e7c:	1acb      	subs	r3, r1, r3
34018e7e:	041b      	lsls	r3, r3, #16
34018e80:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
34018e84:	4313      	orrs	r3, r2
34018e86:	653b      	str	r3, [r7, #80]	@ 0x50
34018e88:	e00a      	b.n	34018ea0 <LL_Streng_TensorInit+0x2b8>
    else
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34018e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34018e8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34018e90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
34018e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018e94:	1acb      	subs	r3, r1, r3
34018e96:	061b      	lsls	r3, r3, #24
34018e98:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34018e9c:	4313      	orrs	r3, r2
34018e9e:	653b      	str	r3, [r7, #80]	@ 0x50
    nbits_out = nbits_in;
34018ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  // intentional fall through
  case 2: // in_bits >= out_bits && stream->bus
    out_bits[0] = _LL_min(8, nbits_out);
34018ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ea6:	2b08      	cmp	r3, #8
34018ea8:	bfa8      	it	ge
34018eaa:	2308      	movge	r3, #8
34018eac:	617b      	str	r3, [r7, #20]
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34018eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018eb0:	2b08      	cmp	r3, #8
34018eb2:	dd05      	ble.n	34018ec0 <LL_Streng_TensorInit+0x2d8>
34018eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018eb6:	2b10      	cmp	r3, #16
34018eb8:	bfa8      	it	ge
34018eba:	2310      	movge	r3, #16
34018ebc:	3b08      	subs	r3, #8
34018ebe:	e000      	b.n	34018ec2 <LL_Streng_TensorInit+0x2da>
34018ec0:	2300      	movs	r3, #0
34018ec2:	61bb      	str	r3, [r7, #24]
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34018ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ec6:	2b10      	cmp	r3, #16
34018ec8:	dd05      	ble.n	34018ed6 <LL_Streng_TensorInit+0x2ee>
34018eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34018ecc:	2b18      	cmp	r3, #24
34018ece:	bfa8      	it	ge
34018ed0:	2318      	movge	r3, #24
34018ed2:	3b10      	subs	r3, #16
34018ed4:	e000      	b.n	34018ed8 <LL_Streng_TensorInit+0x2f0>
34018ed6:	2300      	movs	r3, #0
34018ed8:	61fb      	str	r3, [r7, #28]
    if (conf->align_right)
34018eda:	68bb      	ldr	r3, [r7, #8]
34018edc:	781b      	ldrb	r3, [r3, #0]
34018ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34018ee2:	b2db      	uxtb	r3, r3
34018ee4:	2b00      	cmp	r3, #0
34018ee6:	d006      	beq.n	34018ef6 <LL_Streng_TensorInit+0x30e>
    {
      ch_bits[0] = out_bits[0];
34018ee8:	697b      	ldr	r3, [r7, #20]
34018eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ch_bits[1] = out_bits[1];
34018eec:	69bb      	ldr	r3, [r7, #24]
34018eee:	633b      	str	r3, [r7, #48]	@ 0x30
      ch_bits[2] = out_bits[2];
34018ef0:	69fb      	ldr	r3, [r7, #28]
34018ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[0] = out_bits[1];
      } // N.B. the DMA stuffs the bits to the left of the channel
      else
        ch_bits[0] = out_bits[0];
    }
    break;
34018ef4:	e013      	b.n	34018f1e <LL_Streng_TensorInit+0x336>
      if (nbits_in > 16)
34018ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018ef8:	2b10      	cmp	r3, #16
34018efa:	dd06      	ble.n	34018f0a <LL_Streng_TensorInit+0x322>
        ch_bits[2] = out_bits[0];
34018efc:	697b      	ldr	r3, [r7, #20]
34018efe:	637b      	str	r3, [r7, #52]	@ 0x34
        ch_bits[1] = out_bits[1];
34018f00:	69bb      	ldr	r3, [r7, #24]
34018f02:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = out_bits[2];
34018f04:	69fb      	ldr	r3, [r7, #28]
34018f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f08:	e009      	b.n	34018f1e <LL_Streng_TensorInit+0x336>
      else if (nbits_in > 8)
34018f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34018f0c:	2b08      	cmp	r3, #8
34018f0e:	dd04      	ble.n	34018f1a <LL_Streng_TensorInit+0x332>
        ch_bits[1] = out_bits[0];
34018f10:	697b      	ldr	r3, [r7, #20]
34018f12:	633b      	str	r3, [r7, #48]	@ 0x30
        ch_bits[0] = out_bits[1];
34018f14:	69bb      	ldr	r3, [r7, #24]
34018f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f18:	e001      	b.n	34018f1e <LL_Streng_TensorInit+0x336>
        ch_bits[0] = out_bits[0];
34018f1a:	697b      	ldr	r3, [r7, #20]
34018f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34018f1e:	bf00      	nop
  }

/* Take care of N64 single size register. TODO: double check this  */
#ifdef ATON_STRENG_CTRL_SET_SIZE1
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
34018f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f22:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
34018f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34018f28:	041b      	lsls	r3, r3, #16
34018f2a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
34018f2e:	4313      	orrs	r3, r2
34018f30:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
34018f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
34018f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34018f3a:	051b      	lsls	r3, r3, #20
34018f3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
34018f40:	4313      	orrs	r3, r2
34018f42:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
34018f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f46:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
34018f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34018f4c:	061b      	lsls	r3, r3, #24
34018f4e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
34018f52:	4313      	orrs	r3, r2
34018f54:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_CTRL_SET_SIZE0(t, conf->nbits_out);
  else
    t = ATON_STRENG_CTRL_SET_SIZE0(t, conf->nbits_in);
#endif

  ATON_STRENG_CTRL_SET(id, t);
34018f56:	68fb      	ldr	r3, [r7, #12]
34018f58:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34018f5c:	33e5      	adds	r3, #229	@ 0xe5
34018f5e:	031b      	lsls	r3, r3, #12
34018f60:	461a      	mov	r2, r3
34018f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018f64:	6013      	str	r3, [r2, #0]

  // ATON_STRENG_ADDR_SET(id, conf->addr_start.i);
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
34018f66:	68bb      	ldr	r3, [r7, #8]
34018f68:	6859      	ldr	r1, [r3, #4]
34018f6a:	68bb      	ldr	r3, [r7, #8]
34018f6c:	689a      	ldr	r2, [r3, #8]
34018f6e:	68fb      	ldr	r3, [r7, #12]
34018f70:	0318      	lsls	r0, r3, #12
34018f72:	4b2a      	ldr	r3, [pc, #168]	@ (3401901c <LL_Streng_TensorInit+0x434>)
34018f74:	4403      	add	r3, r0
34018f76:	4618      	mov	r0, r3
34018f78:	188b      	adds	r3, r1, r2
34018f7a:	6003      	str	r3, [r0, #0]
                       conf->offset_start);

  if (conf->raw)
34018f7c:	68bb      	ldr	r3, [r7, #8]
34018f7e:	781b      	ldrb	r3, [r3, #0]
34018f80:	f003 0302 	and.w	r3, r3, #2
34018f84:	b2db      	uxtb	r3, r3
34018f86:	2b00      	cmp	r3, #0
34018f88:	d025      	beq.n	34018fd6 <LL_Streng_TensorInit+0x3ee>
  {
    if (conf->frame_count)
34018f8a:	68bb      	ldr	r3, [r7, #8]
34018f8c:	695b      	ldr	r3, [r3, #20]
34018f8e:	2b00      	cmp	r3, #0
34018f90:	d003      	beq.n	34018f9a <LL_Streng_TensorInit+0x3b2>
      t = conf->frame_count;
34018f92:	68bb      	ldr	r3, [r7, #8]
34018f94:	695b      	ldr	r3, [r3, #20]
34018f96:	657b      	str	r3, [r7, #84]	@ 0x54
34018f98:	e015      	b.n	34018fc6 <LL_Streng_TensorInit+0x3de>
    else
    {
      // N.B. end - start must contain padding if nbits_in is not power of two
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
34018f9a:	68b8      	ldr	r0, [r7, #8]
34018f9c:	f7fe ff20 	bl	34017de0 <LL_Streng_len>
34018fa0:	4603      	mov	r3, r0
34018fa2:	00db      	lsls	r3, r3, #3
34018fa4:	68ba      	ldr	r2, [r7, #8]
34018fa6:	7812      	ldrb	r2, [r2, #0]
34018fa8:	f3c2 0200 	ubfx	r2, r2, #0, #1
34018fac:	b2d2      	uxtb	r2, r2
34018fae:	2a00      	cmp	r2, #0
34018fb0:	d003      	beq.n	34018fba <LL_Streng_TensorInit+0x3d2>
34018fb2:	68ba      	ldr	r2, [r7, #8]
34018fb4:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
34018fb8:	e002      	b.n	34018fc0 <LL_Streng_TensorInit+0x3d8>
34018fba:	68ba      	ldr	r2, [r7, #8]
34018fbc:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
34018fc0:	fbb3 f3f2 	udiv	r3, r3, r2
34018fc4:	657b      	str	r3, [r7, #84]	@ 0x54
    }
    ATON_STRENG_FSIZE_SET(id, t);
34018fc6:	68fb      	ldr	r3, [r7, #12]
34018fc8:	031a      	lsls	r2, r3, #12
34018fca:	4b15      	ldr	r3, [pc, #84]	@ (34019020 <LL_Streng_TensorInit+0x438>)
34018fcc:	4413      	add	r3, r2
34018fce:	461a      	mov	r2, r3
34018fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018fd2:	6013      	str	r3, [r2, #0]
34018fd4:	e053      	b.n	3401907e <LL_Streng_TensorInit+0x496>
  }
  else
  {
    t = ATON_STRENG_FSIZE_DT;
34018fd6:	2300      	movs	r3, #0
34018fd8:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
34018fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018fdc:	0c1b      	lsrs	r3, r3, #16
34018fde:	041b      	lsls	r3, r3, #16
34018fe0:	68ba      	ldr	r2, [r7, #8]
34018fe2:	6992      	ldr	r2, [r2, #24]
34018fe4:	b292      	uxth	r2, r2
34018fe6:	4313      	orrs	r3, r2
34018fe8:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34018fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34018fec:	b29a      	uxth	r2, r3
34018fee:	68bb      	ldr	r3, [r7, #8]
34018ff0:	69db      	ldr	r3, [r3, #28]
34018ff2:	041b      	lsls	r3, r3, #16
34018ff4:	4313      	orrs	r3, r2
34018ff6:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_FSIZE_SET(id, t);
34018ff8:	68fb      	ldr	r3, [r7, #12]
34018ffa:	031a      	lsls	r2, r3, #12
34018ffc:	4b08      	ldr	r3, [pc, #32]	@ (34019020 <LL_Streng_TensorInit+0x438>)
34018ffe:	4413      	add	r3, r2
34019000:	461a      	mov	r2, r3
34019002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019004:	6013      	str	r3, [r2, #0]

    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34019006:	68bb      	ldr	r3, [r7, #8]
34019008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401900a:	2b00      	cmp	r3, #0
3401900c:	d10a      	bne.n	34019024 <LL_Streng_TensorInit+0x43c>
3401900e:	68bb      	ldr	r3, [r7, #8]
34019010:	699b      	ldr	r3, [r3, #24]
34019012:	68ba      	ldr	r2, [r7, #8]
34019014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34019016:	fb02 f303 	mul.w	r3, r2, r3
3401901a:	e005      	b.n	34019028 <LL_Streng_TensorInit+0x440>
3401901c:	580e5008 	.word	0x580e5008
34019020:	580e500c 	.word	0x580e500c
34019024:	68bb      	ldr	r3, [r7, #8]
34019026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34019028:	63bb      	str	r3, [r7, #56]	@ 0x38
    // if line_offset is left=0 then it's computed from the standard geometry of lines and batch
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
3401902a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3401902c:	0c1b      	lsrs	r3, r3, #16
3401902e:	041b      	lsls	r3, r3, #16
34019030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34019032:	b292      	uxth	r2, r2
34019034:	4313      	orrs	r3, r2
34019036:	653b      	str	r3, [r7, #80]	@ 0x50

#if defined(ATON_STRENG_CID_CACHE_SET_LOFF_MSB)
    t = t_streng_cid_cache;
34019038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401903a:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
3401903c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401903e:	b29a      	uxth	r2, r3
34019040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34019042:	0c1b      	lsrs	r3, r3, #16
34019044:	041b      	lsls	r3, r3, #16
34019046:	4313      	orrs	r3, r2
34019048:	657b      	str	r3, [r7, #84]	@ 0x54
    t_streng_cid_cache = t;
3401904a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401904c:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

    t = ATON_STRENG_DEPTH_DT;
3401904e:	2300      	movs	r3, #0
34019050:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
34019052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019054:	0c1b      	lsrs	r3, r3, #16
34019056:	041b      	lsls	r3, r3, #16
34019058:	68ba      	ldr	r2, [r7, #8]
3401905a:	6a12      	ldr	r2, [r2, #32]
3401905c:	b292      	uxth	r2, r2
3401905e:	4313      	orrs	r3, r2
34019060:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
34019062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019064:	b29a      	uxth	r2, r3
34019066:	68bb      	ldr	r3, [r7, #8]
34019068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401906a:	041b      	lsls	r3, r3, #16
3401906c:	4313      	orrs	r3, r2
3401906e:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_DEPTH_SET(id, t);
34019070:	68fb      	ldr	r3, [r7, #12]
34019072:	031a      	lsls	r2, r3, #12
34019074:	4b89      	ldr	r3, [pc, #548]	@ (3401929c <LL_Streng_TensorInit+0x6b4>)
34019076:	4413      	add	r3, r2
34019078:	461a      	mov	r2, r3
3401907a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401907c:	6013      	str	r3, [r2, #0]
  }

  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
3401907e:	68fb      	ldr	r3, [r7, #12]
34019080:	031a      	lsls	r2, r3, #12
34019082:	4b87      	ldr	r3, [pc, #540]	@ (340192a0 <LL_Streng_TensorInit+0x6b8>)
34019084:	4413      	add	r3, r2
34019086:	461a      	mov	r2, r3
34019088:	68bb      	ldr	r3, [r7, #8]
3401908a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401908c:	6013      	str	r3, [r2, #0]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
3401908e:	68fb      	ldr	r3, [r7, #12]
34019090:	031a      	lsls	r2, r3, #12
34019092:	4b84      	ldr	r3, [pc, #528]	@ (340192a4 <LL_Streng_TensorInit+0x6bc>)
34019094:	4413      	add	r3, r2
34019096:	461a      	mov	r2, r3
34019098:	68bb      	ldr	r3, [r7, #8]
3401909a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3401909c:	6013      	str	r3, [r2, #0]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
3401909e:	68fb      	ldr	r3, [r7, #12]
340190a0:	031a      	lsls	r2, r3, #12
340190a2:	4b81      	ldr	r3, [pc, #516]	@ (340192a8 <LL_Streng_TensorInit+0x6c0>)
340190a4:	4413      	add	r3, r2
340190a6:	461a      	mov	r2, r3
340190a8:	68bb      	ldr	r3, [r7, #8]
340190aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340190ac:	6013      	str	r3, [r2, #0]

  t = ATON_STRENG_LIMITEN_DT; // all other fields set to zero
340190ae:	2302      	movs	r3, #2
340190b0:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_LIMITEN_SET_FRAMELIMIT(t, 1);
340190b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190b4:	f043 0304 	orr.w	r3, r3, #4
340190b8:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined(ATON_STRENG_LIMITEN_SET_DOFF_MSB)
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
340190ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190bc:	b29a      	uxth	r2, r3
340190be:	68bb      	ldr	r3, [r7, #8]
340190c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340190c2:	0c1b      	lsrs	r3, r3, #16
340190c4:	041b      	lsls	r3, r3, #16
340190c6:	4313      	orrs	r3, r2
340190c8:	657b      	str	r3, [r7, #84]	@ 0x54
#endif
  ATON_STRENG_LIMITEN_SET(id, t);
340190ca:	68fb      	ldr	r3, [r7, #12]
340190cc:	031a      	lsls	r2, r3, #12
340190ce:	4b77      	ldr	r3, [pc, #476]	@ (340192ac <LL_Streng_TensorInit+0x6c4>)
340190d0:	4413      	add	r3, r2
340190d2:	461a      	mov	r2, r3
340190d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190d6:	6013      	str	r3, [r2, #0]

  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
340190d8:	68bb      	ldr	r3, [r7, #8]
340190da:	691b      	ldr	r3, [r3, #16]
340190dc:	2b00      	cmp	r3, #0
340190de:	d01a      	beq.n	34019116 <LL_Streng_TensorInit+0x52e>
  {
    t = ATON_STRENG_LIMITEN_SET_ADDRLIMIT(t, 1);
340190e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190e2:	f043 0301 	orr.w	r3, r3, #1
340190e6:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
340190e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190ea:	f043 0302 	orr.w	r3, r3, #2
340190ee:	657b      	str	r3, [r7, #84]	@ 0x54
    ATON_STRENG_LIMITEN_SET(id, t);
340190f0:	68fb      	ldr	r3, [r7, #12]
340190f2:	031a      	lsls	r2, r3, #12
340190f4:	4b6d      	ldr	r3, [pc, #436]	@ (340192ac <LL_Streng_TensorInit+0x6c4>)
340190f6:	4413      	add	r3, r2
340190f8:	461a      	mov	r2, r3
340190fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340190fc:	6013      	str	r3, [r2, #0]
    // NOTE: limiter is to be set to last accessible byte address
    // ATON_STRENG_LIMITADDR_SET(id, (conf->addr_limit.i - 1));
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
340190fe:	68bb      	ldr	r3, [r7, #8]
34019100:	685a      	ldr	r2, [r3, #4]
34019102:	68bb      	ldr	r3, [r7, #8]
34019104:	691b      	ldr	r3, [r3, #16]
34019106:	441a      	add	r2, r3
34019108:	68fb      	ldr	r3, [r7, #12]
3401910a:	0319      	lsls	r1, r3, #12
3401910c:	4b68      	ldr	r3, [pc, #416]	@ (340192b0 <LL_Streng_TensorInit+0x6c8>)
3401910e:	440b      	add	r3, r1
34019110:	4619      	mov	r1, r3
34019112:	1e53      	subs	r3, r2, #1
34019114:	600b      	str	r3, [r1, #0]
                         conf->offset_limit - 1);
  }

  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
34019116:	68fb      	ldr	r3, [r7, #12]
34019118:	031a      	lsls	r2, r3, #12
3401911a:	4b66      	ldr	r3, [pc, #408]	@ (340192b4 <LL_Streng_TensorInit+0x6cc>)
3401911c:	4413      	add	r3, r2
3401911e:	461a      	mov	r2, r3
34019120:	68bb      	ldr	r3, [r7, #8]
34019122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34019124:	6013      	str	r3, [r2, #0]
  // LL_ATON_PRINTF("frame_tot_cnt=%d\n", conf->frame_tot_cnt);

#if defined(ATON_STRENG_CID_CACHE_SET_CID)
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
34019126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019128:	f023 0307 	bic.w	r3, r3, #7
3401912c:	68ba      	ldr	r2, [r7, #8]
3401912e:	7852      	ldrb	r2, [r2, #1]
34019130:	f3c2 0282 	ubfx	r2, r2, #2, #3
34019134:	b2d2      	uxtb	r2, r2
34019136:	4313      	orrs	r3, r2
34019138:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
3401913a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401913c:	f023 0208 	bic.w	r2, r3, #8
34019140:	68bb      	ldr	r3, [r7, #8]
34019142:	785b      	ldrb	r3, [r3, #1]
34019144:	f3c3 1340 	ubfx	r3, r3, #5, #1
34019148:	b2db      	uxtb	r3, r3
3401914a:	00db      	lsls	r3, r3, #3
3401914c:	f003 0308 	and.w	r3, r3, #8
34019150:	4313      	orrs	r3, r2
34019152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34019154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019156:	f023 0210 	bic.w	r2, r3, #16
3401915a:	68bb      	ldr	r3, [r7, #8]
3401915c:	785b      	ldrb	r3, [r3, #1]
3401915e:	f3c3 1380 	ubfx	r3, r3, #6, #1
34019162:	b2db      	uxtb	r3, r3
34019164:	011b      	lsls	r3, r3, #4
34019166:	f003 0310 	and.w	r3, r3, #16
3401916a:	4313      	orrs	r3, r2
3401916c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
3401916e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34019170:	f023 0220 	bic.w	r2, r3, #32
34019174:	68bb      	ldr	r3, [r7, #8]
34019176:	785b      	ldrb	r3, [r3, #1]
34019178:	f3c3 13c0 	ubfx	r3, r3, #7, #1
3401917c:	b2db      	uxtb	r3, r3
3401917e:	015b      	lsls	r3, r3, #5
34019180:	f003 0320 	and.w	r3, r3, #32
34019184:	4313      	orrs	r3, r2
34019186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34019188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401918a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
3401918e:	68bb      	ldr	r3, [r7, #8]
34019190:	789b      	ldrb	r3, [r3, #2]
34019192:	f3c3 0301 	ubfx	r3, r3, #0, #2
34019196:	b2db      	uxtb	r3, r3
34019198:	019b      	lsls	r3, r3, #6
3401919a:	b2db      	uxtb	r3, r3
3401919c:	4313      	orrs	r3, r2
3401919e:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

  /* Enable event interrupts */
  if (conf->dir == 1)
340191a0:	68bb      	ldr	r3, [r7, #8]
340191a2:	781b      	ldrb	r3, [r3, #0]
340191a4:	f003 0301 	and.w	r3, r3, #1
340191a8:	b2db      	uxtb	r3, r3
340191aa:	2b00      	cmp	r3, #0
340191ac:	d005      	beq.n	340191ba <LL_Streng_TensorInit+0x5d2>
  {
#if LL_ATON_EN_EVENT_IRQ
    t_streng_event = 0;
340191ae:	2300      	movs	r3, #0
340191b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    t_streng_event = ATON_STRENG_EVENT_SET_EN_OFLOW_FRM(t_streng_event, 1); // enable frame overflow interrupt
340191b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340191b8:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif // LL_ATON_EN_EVENT_IRQ
  }

  /* Enable illegal configuration interrupts */
#if LL_ATON_EN_ERROR_IRQ
  t = t_streng_event;
340191ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191bc:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
340191be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
340191c4:	657b      	str	r3, [r7, #84]	@ 0x54
  // t = ATON_STRENG_EVENT_SET_EN_FMTMM(t, 1); // Enable Format Mismatch interrupt (intentionally not enabled)
  t_streng_event = t;
340191c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191c8:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif // LL_ATON_EN_ERROR_IRQ

  if ((conf->dir == 0) && conf->sync_with_other)
340191ca:	68bb      	ldr	r3, [r7, #8]
340191cc:	781b      	ldrb	r3, [r3, #0]
340191ce:	f003 0301 	and.w	r3, r3, #1
340191d2:	b2db      	uxtb	r3, r3
340191d4:	2b00      	cmp	r3, #0
340191d6:	d118      	bne.n	3401920a <LL_Streng_TensorInit+0x622>
340191d8:	68bb      	ldr	r3, [r7, #8]
340191da:	785b      	ldrb	r3, [r3, #1]
340191dc:	f003 0301 	and.w	r3, r3, #1
340191e0:	b2db      	uxtb	r3, r3
340191e2:	2b00      	cmp	r3, #0
340191e4:	d011      	beq.n	3401920a <LL_Streng_TensorInit+0x622>
  {
    t = t_streng_event;
340191e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340191e8:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_EVENT_SET_FRMTRG_EN(t, 1);               // Enable synchronizations of frames with other dma
340191ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
340191f0:	657b      	str	r3, [r7, #84]	@ 0x54
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
340191f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340191f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
340191f8:	68bb      	ldr	r3, [r7, #8]
340191fa:	78db      	ldrb	r3, [r3, #3]
340191fc:	061b      	lsls	r3, r3, #24
340191fe:	f003 53f8 	and.w	r3, r3, #520093696	@ 0x1f000000
34019202:	4313      	orrs	r3, r2
34019204:	657b      	str	r3, [r7, #84]	@ 0x54
    t_streng_event = t;
34019206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019208:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

#if 1
  t = ATON_STRENG_POS_DT;
3401920a:	4b2b      	ldr	r3, [pc, #172]	@ (340192b8 <LL_Streng_TensorInit+0x6d0>)
3401920c:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_POS_SET_GAPCYCLES(t, 0); // set interline gap cycle to 0, as it should be safe to do so
3401920e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019210:	b29b      	uxth	r3, r3
34019212:	657b      	str	r3, [r7, #84]	@ 0x54
  ATON_STRENG_POS_SET(id, t);
34019214:	68fb      	ldr	r3, [r7, #12]
34019216:	031a      	lsls	r2, r3, #12
34019218:	4b28      	ldr	r3, [pc, #160]	@ (340192bc <LL_Streng_TensorInit+0x6d4>)
3401921a:	4413      	add	r3, r2
3401921c:	461a      	mov	r2, r3
3401921e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019220:	6013      	str	r3, [r2, #0]
#endif

  /* deferred register setting */
  ATON_STRENG_STRD_SET(id, t_streng_strd);
34019222:	68fb      	ldr	r3, [r7, #12]
34019224:	031a      	lsls	r2, r3, #12
34019226:	4b26      	ldr	r3, [pc, #152]	@ (340192c0 <LL_Streng_TensorInit+0x6d8>)
34019228:	4413      	add	r3, r2
3401922a:	461a      	mov	r2, r3
3401922c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3401922e:	6013      	str	r3, [r2, #0]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
34019230:	68fb      	ldr	r3, [r7, #12]
34019232:	031a      	lsls	r2, r3, #12
34019234:	4b23      	ldr	r3, [pc, #140]	@ (340192c4 <LL_Streng_TensorInit+0x6dc>)
34019236:	4413      	add	r3, r2
34019238:	461a      	mov	r2, r3
3401923a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3401923c:	6013      	str	r3, [r2, #0]
  ATON_STRENG_EVENT_SET(id, t_streng_event);
3401923e:	68fb      	ldr	r3, [r7, #12]
34019240:	031a      	lsls	r2, r3, #12
34019242:	4b21      	ldr	r3, [pc, #132]	@ (340192c8 <LL_Streng_TensorInit+0x6e0>)
34019244:	4413      	add	r3, r2
34019246:	461a      	mov	r2, r3
34019248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
3401924a:	6013      	str	r3, [r2, #0]

  /* Ciphering settings */
#if (ATON_STRENG_VERSION_ENCR_DT == 1)
  t = ATON_STRENG_ENCR_MSB_DT;
3401924c:	2300      	movs	r3, #0
3401924e:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
34019250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34019252:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34019256:	68bb      	ldr	r3, [r7, #8]
34019258:	789b      	ldrb	r3, [r3, #2]
3401925a:	f3c3 0380 	ubfx	r3, r3, #2, #1
3401925e:	b2db      	uxtb	r3, r3
34019260:	031b      	lsls	r3, r3, #12
34019262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34019266:	4313      	orrs	r3, r2
34019268:	657b      	str	r3, [r7, #84]	@ 0x54
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
3401926a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401926c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34019270:	68bb      	ldr	r3, [r7, #8]
34019272:	789b      	ldrb	r3, [r3, #2]
34019274:	f3c3 03c0 	ubfx	r3, r3, #3, #1
34019278:	b2db      	uxtb	r3, r3
3401927a:	039b      	lsls	r3, r3, #14
3401927c:	b29b      	uxth	r3, r3
3401927e:	4313      	orrs	r3, r2
34019280:	657b      	str	r3, [r7, #84]	@ 0x54
  ATON_STRENG_ENCR_MSB_SET(id, t);
34019282:	68fb      	ldr	r3, [r7, #12]
34019284:	031a      	lsls	r2, r3, #12
34019286:	4b11      	ldr	r3, [pc, #68]	@ (340192cc <LL_Streng_TensorInit+0x6e4>)
34019288:	4413      	add	r3, r2
3401928a:	461a      	mov	r2, r3
3401928c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3401928e:	6013      	str	r3, [r2, #0]
#endif

  return 0;
34019290:	2300      	movs	r3, #0
}
34019292:	4618      	mov	r0, r3
34019294:	3758      	adds	r7, #88	@ 0x58
34019296:	46bd      	mov	sp, r7
34019298:	bd80      	pop	{r7, pc}
3401929a:	bf00      	nop
3401929c:	580e5010 	.word	0x580e5010
340192a0:	580e5020 	.word	0x580e5020
340192a4:	580e501c 	.word	0x580e501c
340192a8:	580e5018 	.word	0x580e5018
340192ac:	580e5030 	.word	0x580e5030
340192b0:	580e5038 	.word	0x580e5038
340192b4:	580e5034 	.word	0x580e5034
340192b8:	00080024 	.word	0x00080024
340192bc:	580e5024 	.word	0x580e5024
340192c0:	580e5014 	.word	0x580e5014
340192c4:	580e5048 	.word	0x580e5048
340192c8:	580e5028 	.word	0x580e5028
340192cc:	580e5044 	.word	0x580e5044

340192d0 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340192d0:	b590      	push	{r4, r7, lr}
340192d2:	b083      	sub	sp, #12
340192d4:	af00      	add	r7, sp, #0
340192d6:	4604      	mov	r4, r0
340192d8:	4608      	mov	r0, r1
340192da:	4611      	mov	r1, r2
340192dc:	461a      	mov	r2, r3
340192de:	4623      	mov	r3, r4
340192e0:	71fb      	strb	r3, [r7, #7]
340192e2:	4603      	mov	r3, r0
340192e4:	71bb      	strb	r3, [r7, #6]
340192e6:	460b      	mov	r3, r1
340192e8:	717b      	strb	r3, [r7, #5]
340192ea:	4613      	mov	r3, r2
340192ec:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340192ee:	79bb      	ldrb	r3, [r7, #6]
340192f0:	2b00      	cmp	r3, #0
340192f2:	d006      	beq.n	34019302 <__atonn_getSrcPortID+0x32>
340192f4:	4b66      	ldr	r3, [pc, #408]	@ (34019490 <__atonn_getSrcPortID+0x1c0>)
340192f6:	4a67      	ldr	r2, [pc, #412]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
340192f8:	f240 313e 	movw	r1, #830	@ 0x33e
340192fc:	4866      	ldr	r0, [pc, #408]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
340192fe:	f001 ffcb 	bl	3401b298 <__assert_func>
  switch (sut)
34019302:	79fb      	ldrb	r3, [r7, #7]
34019304:	2b02      	cmp	r3, #2
34019306:	f000 80b6 	beq.w	34019476 <__atonn_getSrcPortID+0x1a6>
3401930a:	2b02      	cmp	r3, #2
3401930c:	f300 80ba 	bgt.w	34019484 <__atonn_getSrcPortID+0x1b4>
34019310:	2b00      	cmp	r3, #0
34019312:	d003      	beq.n	3401931c <__atonn_getSrcPortID+0x4c>
34019314:	2b01      	cmp	r3, #1
34019316:	f000 80a7 	beq.w	34019468 <__atonn_getSrcPortID+0x198>
3401931a:	e0b3      	b.n	34019484 <__atonn_getSrcPortID+0x1b4>
  {
  case STRSWITCH:
    switch (aut)
3401931c:	797b      	ldrb	r3, [r7, #5]
3401931e:	2b06      	cmp	r3, #6
34019320:	f200 809b 	bhi.w	3401945a <__atonn_getSrcPortID+0x18a>
34019324:	a201      	add	r2, pc, #4	@ (adr r2, 3401932c <__atonn_getSrcPortID+0x5c>)
34019326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401932a:	bf00      	nop
3401932c:	34019349 	.word	0x34019349
34019330:	3401945b 	.word	0x3401945b
34019334:	34019375 	.word	0x34019375
34019338:	340193a3 	.word	0x340193a3
3401933c:	340193d1 	.word	0x340193d1
34019340:	340193ff 	.word	0x340193ff
34019344:	3401942d 	.word	0x3401942d
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34019348:	7e3b      	ldrb	r3, [r7, #24]
3401934a:	2b00      	cmp	r3, #0
3401934c:	d006      	beq.n	3401935c <__atonn_getSrcPortID+0x8c>
3401934e:	4b53      	ldr	r3, [pc, #332]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
34019350:	4a50      	ldr	r2, [pc, #320]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
34019352:	f240 3146 	movw	r1, #838	@ 0x346
34019356:	4850      	ldr	r0, [pc, #320]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019358:	f001 ff9e 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3401935c:	793b      	ldrb	r3, [r7, #4]
3401935e:	2b09      	cmp	r3, #9
34019360:	d906      	bls.n	34019370 <__atonn_getSrcPortID+0xa0>
34019362:	4b4f      	ldr	r3, [pc, #316]	@ (340194a0 <__atonn_getSrcPortID+0x1d0>)
34019364:	4a4b      	ldr	r2, [pc, #300]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
34019366:	f240 3147 	movw	r1, #839	@ 0x347
3401936a:	484b      	ldr	r0, [pc, #300]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
3401936c:	f001 ff94 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
34019370:	793b      	ldrb	r3, [r7, #4]
34019372:	e088      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port == 0);
34019374:	7e3b      	ldrb	r3, [r7, #24]
34019376:	2b00      	cmp	r3, #0
34019378:	d006      	beq.n	34019388 <__atonn_getSrcPortID+0xb8>
3401937a:	4b48      	ldr	r3, [pc, #288]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
3401937c:	4a45      	ldr	r2, [pc, #276]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401937e:	f240 314d 	movw	r1, #845	@ 0x34d
34019382:	4845      	ldr	r0, [pc, #276]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019384:	f001 ff88 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34019388:	793b      	ldrb	r3, [r7, #4]
3401938a:	2b03      	cmp	r3, #3
3401938c:	d906      	bls.n	3401939c <__atonn_getSrcPortID+0xcc>
3401938e:	4b45      	ldr	r3, [pc, #276]	@ (340194a4 <__atonn_getSrcPortID+0x1d4>)
34019390:	4a40      	ldr	r2, [pc, #256]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
34019392:	f240 314e 	movw	r1, #846	@ 0x34e
34019396:	4840      	ldr	r0, [pc, #256]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019398:	f001 ff7e 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
3401939c:	793b      	ldrb	r3, [r7, #4]
3401939e:	330a      	adds	r3, #10
340193a0:	e071      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port == 0);
340193a2:	7e3b      	ldrb	r3, [r7, #24]
340193a4:	2b00      	cmp	r3, #0
340193a6:	d006      	beq.n	340193b6 <__atonn_getSrcPortID+0xe6>
340193a8:	4b3c      	ldr	r3, [pc, #240]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
340193aa:	4a3a      	ldr	r2, [pc, #232]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
340193ac:	f44f 7155 	mov.w	r1, #852	@ 0x354
340193b0:	4839      	ldr	r0, [pc, #228]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
340193b2:	f001 ff71 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340193b6:	793b      	ldrb	r3, [r7, #4]
340193b8:	2b01      	cmp	r3, #1
340193ba:	d906      	bls.n	340193ca <__atonn_getSrcPortID+0xfa>
340193bc:	4b3a      	ldr	r3, [pc, #232]	@ (340194a8 <__atonn_getSrcPortID+0x1d8>)
340193be:	4a35      	ldr	r2, [pc, #212]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
340193c0:	f240 3155 	movw	r1, #853	@ 0x355
340193c4:	4834      	ldr	r0, [pc, #208]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
340193c6:	f001 ff67 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
340193ca:	793b      	ldrb	r3, [r7, #4]
340193cc:	330e      	adds	r3, #14
340193ce:	e05a      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
340193d0:	7e3b      	ldrb	r3, [r7, #24]
340193d2:	2b00      	cmp	r3, #0
340193d4:	d006      	beq.n	340193e4 <__atonn_getSrcPortID+0x114>
340193d6:	4b31      	ldr	r3, [pc, #196]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
340193d8:	4a2e      	ldr	r2, [pc, #184]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
340193da:	f240 315b 	movw	r1, #859	@ 0x35b
340193de:	482e      	ldr	r0, [pc, #184]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
340193e0:	f001 ff5a 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340193e4:	793b      	ldrb	r3, [r7, #4]
340193e6:	2b01      	cmp	r3, #1
340193e8:	d906      	bls.n	340193f8 <__atonn_getSrcPortID+0x128>
340193ea:	4b2f      	ldr	r3, [pc, #188]	@ (340194a8 <__atonn_getSrcPortID+0x1d8>)
340193ec:	4a29      	ldr	r2, [pc, #164]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
340193ee:	f44f 7157 	mov.w	r1, #860	@ 0x35c
340193f2:	4829      	ldr	r0, [pc, #164]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
340193f4:	f001 ff50 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
340193f8:	793b      	ldrb	r3, [r7, #4]
340193fa:	3310      	adds	r3, #16
340193fc:	e043      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port == 0);
340193fe:	7e3b      	ldrb	r3, [r7, #24]
34019400:	2b00      	cmp	r3, #0
34019402:	d006      	beq.n	34019412 <__atonn_getSrcPortID+0x142>
34019404:	4b25      	ldr	r3, [pc, #148]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
34019406:	4a23      	ldr	r2, [pc, #140]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
34019408:	f240 3162 	movw	r1, #866	@ 0x362
3401940c:	4822      	ldr	r0, [pc, #136]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
3401940e:	f001 ff43 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34019412:	793b      	ldrb	r3, [r7, #4]
34019414:	2b03      	cmp	r3, #3
34019416:	d906      	bls.n	34019426 <__atonn_getSrcPortID+0x156>
34019418:	4b22      	ldr	r3, [pc, #136]	@ (340194a4 <__atonn_getSrcPortID+0x1d4>)
3401941a:	4a1e      	ldr	r2, [pc, #120]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401941c:	f240 3163 	movw	r1, #867	@ 0x363
34019420:	481d      	ldr	r0, [pc, #116]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019422:	f001 ff39 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
34019426:	793b      	ldrb	r3, [r7, #4]
34019428:	3312      	adds	r3, #18
3401942a:	e02c      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
3401942c:	7e3b      	ldrb	r3, [r7, #24]
3401942e:	2b00      	cmp	r3, #0
34019430:	d006      	beq.n	34019440 <__atonn_getSrcPortID+0x170>
34019432:	4b1a      	ldr	r3, [pc, #104]	@ (3401949c <__atonn_getSrcPortID+0x1cc>)
34019434:	4a17      	ldr	r2, [pc, #92]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
34019436:	f240 3169 	movw	r1, #873	@ 0x369
3401943a:	4817      	ldr	r0, [pc, #92]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
3401943c:	f001 ff2c 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34019440:	793b      	ldrb	r3, [r7, #4]
34019442:	2b01      	cmp	r3, #1
34019444:	d906      	bls.n	34019454 <__atonn_getSrcPortID+0x184>
34019446:	4b18      	ldr	r3, [pc, #96]	@ (340194a8 <__atonn_getSrcPortID+0x1d8>)
34019448:	4a12      	ldr	r2, [pc, #72]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401944a:	f240 316a 	movw	r1, #874	@ 0x36a
3401944e:	4812      	ldr	r0, [pc, #72]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019450:	f001 ff22 	bl	3401b298 <__assert_func>
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
34019454:	793b      	ldrb	r3, [r7, #4]
34019456:	3316      	adds	r3, #22
34019458:	e015      	b.n	34019486 <__atonn_getSrcPortID+0x1b6>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
3401945a:	4b14      	ldr	r3, [pc, #80]	@ (340194ac <__atonn_getSrcPortID+0x1dc>)
3401945c:	4a0d      	ldr	r2, [pc, #52]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401945e:	f240 316f 	movw	r1, #879	@ 0x36f
34019462:	480d      	ldr	r0, [pc, #52]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019464:	f001 ff18 	bl	3401b298 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
34019468:	4b10      	ldr	r3, [pc, #64]	@ (340194ac <__atonn_getSrcPortID+0x1dc>)
3401946a:	4a0a      	ldr	r2, [pc, #40]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401946c:	f240 3175 	movw	r1, #885	@ 0x375
34019470:	4809      	ldr	r0, [pc, #36]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019472:	f001 ff11 	bl	3401b298 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
34019476:	4b0d      	ldr	r3, [pc, #52]	@ (340194ac <__atonn_getSrcPortID+0x1dc>)
34019478:	4a06      	ldr	r2, [pc, #24]	@ (34019494 <__atonn_getSrcPortID+0x1c4>)
3401947a:	f240 3179 	movw	r1, #889	@ 0x379
3401947e:	4806      	ldr	r0, [pc, #24]	@ (34019498 <__atonn_getSrcPortID+0x1c8>)
34019480:	f001 ff0a 	bl	3401b298 <__assert_func>
    break;
  }
  return 0;
34019484:	2300      	movs	r3, #0
}
34019486:	4618      	mov	r0, r3
34019488:	370c      	adds	r7, #12
3401948a:	46bd      	mov	sp, r7
3401948c:	bd90      	pop	{r4, r7, pc}
3401948e:	bf00      	nop
34019490:	3401ee18 	.word	0x3401ee18
34019494:	3401f9b4 	.word	0x3401f9b4
34019498:	3401ebc4 	.word	0x3401ebc4
3401949c:	3401ee24 	.word	0x3401ee24
340194a0:	3401ee30 	.word	0x3401ee30
340194a4:	3401ee3c 	.word	0x3401ee3c
340194a8:	3401ee48 	.word	0x3401ee48
340194ac:	3401ed9c 	.word	0x3401ed9c

340194b0 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340194b0:	b590      	push	{r4, r7, lr}
340194b2:	b083      	sub	sp, #12
340194b4:	af00      	add	r7, sp, #0
340194b6:	4604      	mov	r4, r0
340194b8:	4608      	mov	r0, r1
340194ba:	4611      	mov	r1, r2
340194bc:	461a      	mov	r2, r3
340194be:	4623      	mov	r3, r4
340194c0:	71fb      	strb	r3, [r7, #7]
340194c2:	4603      	mov	r3, r0
340194c4:	71bb      	strb	r3, [r7, #6]
340194c6:	460b      	mov	r3, r1
340194c8:	717b      	strb	r3, [r7, #5]
340194ca:	4613      	mov	r3, r2
340194cc:	713b      	strb	r3, [r7, #4]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340194ce:	79bb      	ldrb	r3, [r7, #6]
340194d0:	2b00      	cmp	r3, #0
340194d2:	d006      	beq.n	340194e2 <__atonn_getDstPortID+0x32>
340194d4:	4b6f      	ldr	r3, [pc, #444]	@ (34019694 <__atonn_getDstPortID+0x1e4>)
340194d6:	4a70      	ldr	r2, [pc, #448]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
340194d8:	f240 3183 	movw	r1, #899	@ 0x383
340194dc:	486f      	ldr	r0, [pc, #444]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
340194de:	f001 fedb 	bl	3401b298 <__assert_func>
  switch (sut)
340194e2:	79fb      	ldrb	r3, [r7, #7]
340194e4:	2b02      	cmp	r3, #2
340194e6:	f000 80c8 	beq.w	3401967a <__atonn_getDstPortID+0x1ca>
340194ea:	2b02      	cmp	r3, #2
340194ec:	f300 80cc 	bgt.w	34019688 <__atonn_getDstPortID+0x1d8>
340194f0:	2b00      	cmp	r3, #0
340194f2:	d003      	beq.n	340194fc <__atonn_getDstPortID+0x4c>
340194f4:	2b01      	cmp	r3, #1
340194f6:	f000 80b9 	beq.w	3401966c <__atonn_getDstPortID+0x1bc>
340194fa:	e0c5      	b.n	34019688 <__atonn_getDstPortID+0x1d8>
  {
  case STRSWITCH:
    switch (aut)
340194fc:	797b      	ldrb	r3, [r7, #5]
340194fe:	2b06      	cmp	r3, #6
34019500:	f200 80ad 	bhi.w	3401965e <__atonn_getDstPortID+0x1ae>
34019504:	a201      	add	r2, pc, #4	@ (adr r2, 3401950c <__atonn_getDstPortID+0x5c>)
34019506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401950a:	bf00      	nop
3401950c:	34019529 	.word	0x34019529
34019510:	3401965f 	.word	0x3401965f
34019514:	34019559 	.word	0x34019559
34019518:	34019593 	.word	0x34019593
3401951c:	340195c9 	.word	0x340195c9
34019520:	340195f9 	.word	0x340195f9
34019524:	3401962f 	.word	0x3401962f
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34019528:	7e3b      	ldrb	r3, [r7, #24]
3401952a:	2b00      	cmp	r3, #0
3401952c:	d006      	beq.n	3401953c <__atonn_getDstPortID+0x8c>
3401952e:	4b5c      	ldr	r3, [pc, #368]	@ (340196a0 <__atonn_getDstPortID+0x1f0>)
34019530:	4a59      	ldr	r2, [pc, #356]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019532:	f240 318b 	movw	r1, #907	@ 0x38b
34019536:	4859      	ldr	r0, [pc, #356]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019538:	f001 feae 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3401953c:	793b      	ldrb	r3, [r7, #4]
3401953e:	2b09      	cmp	r3, #9
34019540:	d906      	bls.n	34019550 <__atonn_getDstPortID+0xa0>
34019542:	4b58      	ldr	r3, [pc, #352]	@ (340196a4 <__atonn_getDstPortID+0x1f4>)
34019544:	4a54      	ldr	r2, [pc, #336]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019546:	f44f 7163 	mov.w	r1, #908	@ 0x38c
3401954a:	4854      	ldr	r0, [pc, #336]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
3401954c:	f001 fea4 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
34019550:	793b      	ldrb	r3, [r7, #4]
34019552:	009b      	lsls	r3, r3, #2
34019554:	3308      	adds	r3, #8
34019556:	e098      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_CONVACC_NUM)
    case CONVACC:
      LL_ATON_ASSERT(port < 3);
34019558:	7e3b      	ldrb	r3, [r7, #24]
3401955a:	2b02      	cmp	r3, #2
3401955c:	d906      	bls.n	3401956c <__atonn_getDstPortID+0xbc>
3401955e:	4b52      	ldr	r3, [pc, #328]	@ (340196a8 <__atonn_getDstPortID+0x1f8>)
34019560:	4a4d      	ldr	r2, [pc, #308]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019562:	f240 3192 	movw	r1, #914	@ 0x392
34019566:	484d      	ldr	r0, [pc, #308]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019568:	f001 fe96 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
3401956c:	793b      	ldrb	r3, [r7, #4]
3401956e:	2b03      	cmp	r3, #3
34019570:	d906      	bls.n	34019580 <__atonn_getDstPortID+0xd0>
34019572:	4b4e      	ldr	r3, [pc, #312]	@ (340196ac <__atonn_getDstPortID+0x1fc>)
34019574:	4a48      	ldr	r2, [pc, #288]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019576:	f240 3193 	movw	r1, #915	@ 0x393
3401957a:	4848      	ldr	r0, [pc, #288]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
3401957c:	f001 fe8c 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34019580:	793a      	ldrb	r2, [r7, #4]
34019582:	4613      	mov	r3, r2
34019584:	005b      	lsls	r3, r3, #1
34019586:	441a      	add	r2, r3
34019588:	7e3b      	ldrb	r3, [r7, #24]
3401958a:	4413      	add	r3, r2
3401958c:	009b      	lsls	r3, r3, #2
3401958e:	3330      	adds	r3, #48	@ 0x30
34019590:	e07b      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_DECUN_NUM)
    case DECUN:
      LL_ATON_ASSERT(port < 2);
34019592:	7e3b      	ldrb	r3, [r7, #24]
34019594:	2b01      	cmp	r3, #1
34019596:	d906      	bls.n	340195a6 <__atonn_getDstPortID+0xf6>
34019598:	4b45      	ldr	r3, [pc, #276]	@ (340196b0 <__atonn_getDstPortID+0x200>)
3401959a:	4a3f      	ldr	r2, [pc, #252]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
3401959c:	f240 3199 	movw	r1, #921	@ 0x399
340195a0:	483e      	ldr	r0, [pc, #248]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
340195a2:	f001 fe79 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340195a6:	793b      	ldrb	r3, [r7, #4]
340195a8:	2b01      	cmp	r3, #1
340195aa:	d906      	bls.n	340195ba <__atonn_getDstPortID+0x10a>
340195ac:	4b41      	ldr	r3, [pc, #260]	@ (340196b4 <__atonn_getDstPortID+0x204>)
340195ae:	4a3a      	ldr	r2, [pc, #232]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
340195b0:	f240 319a 	movw	r1, #922	@ 0x39a
340195b4:	4839      	ldr	r0, [pc, #228]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
340195b6:	f001 fe6f 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
340195ba:	793b      	ldrb	r3, [r7, #4]
340195bc:	005a      	lsls	r2, r3, #1
340195be:	7e3b      	ldrb	r3, [r7, #24]
340195c0:	4413      	add	r3, r2
340195c2:	009b      	lsls	r3, r3, #2
340195c4:	3360      	adds	r3, #96	@ 0x60
340195c6:	e060      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ACTIV_NUM)
    case ACTIV:
      LL_ATON_ASSERT(port == 0);
340195c8:	7e3b      	ldrb	r3, [r7, #24]
340195ca:	2b00      	cmp	r3, #0
340195cc:	d006      	beq.n	340195dc <__atonn_getDstPortID+0x12c>
340195ce:	4b34      	ldr	r3, [pc, #208]	@ (340196a0 <__atonn_getDstPortID+0x1f0>)
340195d0:	4a31      	ldr	r2, [pc, #196]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
340195d2:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
340195d6:	4831      	ldr	r0, [pc, #196]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
340195d8:	f001 fe5e 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
340195dc:	793b      	ldrb	r3, [r7, #4]
340195de:	2b01      	cmp	r3, #1
340195e0:	d906      	bls.n	340195f0 <__atonn_getDstPortID+0x140>
340195e2:	4b34      	ldr	r3, [pc, #208]	@ (340196b4 <__atonn_getDstPortID+0x204>)
340195e4:	4a2c      	ldr	r2, [pc, #176]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
340195e6:	f240 31a1 	movw	r1, #929	@ 0x3a1
340195ea:	482c      	ldr	r0, [pc, #176]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
340195ec:	f001 fe54 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
340195f0:	793b      	ldrb	r3, [r7, #4]
340195f2:	009b      	lsls	r3, r3, #2
340195f4:	3370      	adds	r3, #112	@ 0x70
340195f6:	e048      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_ARITH_NUM)
    case ARITH:
      LL_ATON_ASSERT(port < 2);
340195f8:	7e3b      	ldrb	r3, [r7, #24]
340195fa:	2b01      	cmp	r3, #1
340195fc:	d906      	bls.n	3401960c <__atonn_getDstPortID+0x15c>
340195fe:	4b2c      	ldr	r3, [pc, #176]	@ (340196b0 <__atonn_getDstPortID+0x200>)
34019600:	4a25      	ldr	r2, [pc, #148]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019602:	f240 31a7 	movw	r1, #935	@ 0x3a7
34019606:	4825      	ldr	r0, [pc, #148]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019608:	f001 fe46 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
3401960c:	793b      	ldrb	r3, [r7, #4]
3401960e:	2b03      	cmp	r3, #3
34019610:	d906      	bls.n	34019620 <__atonn_getDstPortID+0x170>
34019612:	4b26      	ldr	r3, [pc, #152]	@ (340196ac <__atonn_getDstPortID+0x1fc>)
34019614:	4a20      	ldr	r2, [pc, #128]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019616:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
3401961a:	4820      	ldr	r0, [pc, #128]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
3401961c:	f001 fe3c 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
34019620:	793b      	ldrb	r3, [r7, #4]
34019622:	005a      	lsls	r2, r3, #1
34019624:	7e3b      	ldrb	r3, [r7, #24]
34019626:	4413      	add	r3, r2
34019628:	009b      	lsls	r3, r3, #2
3401962a:	3378      	adds	r3, #120	@ 0x78
3401962c:	e02d      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
#if defined(ATON_POOL_NUM)
    case POOL:
      LL_ATON_ASSERT(port == 0);
3401962e:	7e3b      	ldrb	r3, [r7, #24]
34019630:	2b00      	cmp	r3, #0
34019632:	d006      	beq.n	34019642 <__atonn_getDstPortID+0x192>
34019634:	4b1a      	ldr	r3, [pc, #104]	@ (340196a0 <__atonn_getDstPortID+0x1f0>)
34019636:	4a18      	ldr	r2, [pc, #96]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019638:	f240 31ae 	movw	r1, #942	@ 0x3ae
3401963c:	4817      	ldr	r0, [pc, #92]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
3401963e:	f001 fe2b 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34019642:	793b      	ldrb	r3, [r7, #4]
34019644:	2b01      	cmp	r3, #1
34019646:	d906      	bls.n	34019656 <__atonn_getDstPortID+0x1a6>
34019648:	4b1a      	ldr	r3, [pc, #104]	@ (340196b4 <__atonn_getDstPortID+0x204>)
3401964a:	4a13      	ldr	r2, [pc, #76]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
3401964c:	f240 31af 	movw	r1, #943	@ 0x3af
34019650:	4812      	ldr	r0, [pc, #72]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019652:	f001 fe21 	bl	3401b298 <__assert_func>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34019656:	793b      	ldrb	r3, [r7, #4]
34019658:	009b      	lsls	r3, r3, #2
3401965a:	3398      	adds	r3, #152	@ 0x98
3401965c:	e015      	b.n	3401968a <__atonn_getDstPortID+0x1da>
      break;
#endif
    default:
      LL_ATON_ASSERT(0);
3401965e:	4b16      	ldr	r3, [pc, #88]	@ (340196b8 <__atonn_getDstPortID+0x208>)
34019660:	4a0d      	ldr	r2, [pc, #52]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019662:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
34019666:	480d      	ldr	r0, [pc, #52]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019668:	f001 fe16 	bl	3401b298 <__assert_func>
      break;
    }
    break;
  case STRSWITCH64:
    // TODO
    LL_ATON_ASSERT(0);
3401966c:	4b12      	ldr	r3, [pc, #72]	@ (340196b8 <__atonn_getDstPortID+0x208>)
3401966e:	4a0a      	ldr	r2, [pc, #40]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
34019670:	f240 31ba 	movw	r1, #954	@ 0x3ba
34019674:	4809      	ldr	r0, [pc, #36]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019676:	f001 fe0f 	bl	3401b298 <__assert_func>
    break;
  case STRSWITCH_VC:
    // TODO
    LL_ATON_ASSERT(0);
3401967a:	4b0f      	ldr	r3, [pc, #60]	@ (340196b8 <__atonn_getDstPortID+0x208>)
3401967c:	4a06      	ldr	r2, [pc, #24]	@ (34019698 <__atonn_getDstPortID+0x1e8>)
3401967e:	f240 31be 	movw	r1, #958	@ 0x3be
34019682:	4806      	ldr	r0, [pc, #24]	@ (3401969c <__atonn_getDstPortID+0x1ec>)
34019684:	f001 fe08 	bl	3401b298 <__assert_func>
    break;
  }
  return 0;
34019688:	2300      	movs	r3, #0
}
3401968a:	4618      	mov	r0, r3
3401968c:	370c      	adds	r7, #12
3401968e:	46bd      	mov	sp, r7
34019690:	bd90      	pop	{r4, r7, pc}
34019692:	bf00      	nop
34019694:	3401ee18 	.word	0x3401ee18
34019698:	3401f9cc 	.word	0x3401f9cc
3401969c:	3401ebc4 	.word	0x3401ebc4
340196a0:	3401ee24 	.word	0x3401ee24
340196a4:	3401ee30 	.word	0x3401ee30
340196a8:	3401ee54 	.word	0x3401ee54
340196ac:	3401ee3c 	.word	0x3401ee3c
340196b0:	3401ee60 	.word	0x3401ee60
340196b4:	3401ee48 	.word	0x3401ee48
340196b8:	3401ed9c 	.word	0x3401ed9c

340196bc <LL_Switch_Init_NoReset>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be connected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Init_NoReset(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
340196bc:	b480      	push	{r7}
340196be:	b08f      	sub	sp, #60	@ 0x3c
340196c0:	af00      	add	r7, sp, #0
340196c2:	6078      	str	r0, [r7, #4]
340196c4:	6039      	str	r1, [r7, #0]
  int i;
  volatile uint32_t *reg;
  uint32_t t;
  unsigned int en_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_EN0_LSB, ATON_STRSWITCH_DST_EN1_LSB};
340196c6:	2300      	movs	r3, #0
340196c8:	627b      	str	r3, [r7, #36]	@ 0x24
340196ca:	2310      	movs	r3, #16
340196cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int link_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_LINK0_LSB, ATON_STRSWITCH_DST_LINK1_LSB};
340196ce:	4a4e      	ldr	r2, [pc, #312]	@ (34019808 <LL_Switch_Init_NoReset+0x14c>)
340196d0:	f107 031c 	add.w	r3, r7, #28
340196d4:	e892 0003 	ldmia.w	r2, {r0, r1}
340196d8:	e883 0003 	stmia.w	r3, {r0, r1}
  unsigned int fnr_shift[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_LSB, ATON_STRSWITCH_DST_FNR1_LSB};
340196dc:	4a4b      	ldr	r2, [pc, #300]	@ (3401980c <LL_Switch_Init_NoReset+0x150>)
340196de:	f107 0314 	add.w	r3, r7, #20
340196e2:	e892 0003 	ldmia.w	r2, {r0, r1}
340196e6:	e883 0003 	stmia.w	r3, {r0, r1}
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};
340196ea:	4a49      	ldr	r2, [pc, #292]	@ (34019810 <LL_Switch_Init_NoReset+0x154>)
340196ec:	f107 030c 	add.w	r3, r7, #12
340196f0:	e892 0003 	ldmia.w	r2, {r0, r1}
340196f4:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
340196f8:	2300      	movs	r3, #0
340196fa:	633b      	str	r3, [r7, #48]	@ 0x30
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
340196fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340196fe:	f043 0301 	orr.w	r3, r3, #1
34019702:	633b      	str	r3, [r7, #48]	@ 0x30
  ATON_STRSWITCH_CTRL_SET(0, t);
34019704:	4a43      	ldr	r2, [pc, #268]	@ (34019814 <LL_Switch_Init_NoReset+0x158>)
34019706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34019708:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
3401970a:	2300      	movs	r3, #0
3401970c:	637b      	str	r3, [r7, #52]	@ 0x34
3401970e:	e06f      	b.n	340197f0 <LL_Switch_Init_NoReset+0x134>
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34019710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019712:	011b      	lsls	r3, r3, #4
34019714:	687a      	ldr	r2, [r7, #4]
34019716:	4413      	add	r3, r2
34019718:	689b      	ldr	r3, [r3, #8]
3401971a:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
3401971e:	f503 2364 	add.w	r3, r3, #933888	@ 0xe4000
34019722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = 0;
34019724:	2300      	movs	r3, #0
34019726:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Enable Context and create link */
#if ATON_SWITCH_CONTEXT_NUM == 2
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34019728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3401972a:	011b      	lsls	r3, r3, #4
3401972c:	687a      	ldr	r2, [r7, #4]
3401972e:	4413      	add	r3, r2
34019730:	7b9b      	ldrb	r3, [r3, #14]
34019732:	f003 0301 	and.w	r3, r3, #1
34019736:	b2db      	uxtb	r3, r3
34019738:	2b00      	cmp	r3, #0
3401973a:	bf14      	ite	ne
3401973c:	2301      	movne	r3, #1
3401973e:	2300      	moveq	r3, #0
34019740:	b2db      	uxtb	r3, r3
34019742:	461a      	mov	r2, r3
34019744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019746:	fa02 f303 	lsl.w	r3, r2, r3
3401974a:	461a      	mov	r2, r3
3401974c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3401974e:	4313      	orrs	r3, r2
34019750:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source0) << link_shift[0]);
34019752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019754:	011b      	lsls	r3, r3, #4
34019756:	687a      	ldr	r2, [r7, #4]
34019758:	4413      	add	r3, r2
3401975a:	681a      	ldr	r2, [r3, #0]
3401975c:	69fb      	ldr	r3, [r7, #28]
3401975e:	fa02 f303 	lsl.w	r3, r2, r3
34019762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34019764:	4313      	orrs	r3, r2
34019766:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
34019768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3401976a:	011b      	lsls	r3, r3, #4
3401976c:	687a      	ldr	r2, [r7, #4]
3401976e:	4413      	add	r3, r2
34019770:	7b1b      	ldrb	r3, [r3, #12]
34019772:	461a      	mov	r2, r3
34019774:	697b      	ldr	r3, [r7, #20]
34019776:	fa02 f303 	lsl.w	r3, r2, r3
3401977a:	461a      	mov	r2, r3
3401977c:	68fb      	ldr	r3, [r7, #12]
3401977e:	4013      	ands	r3, r2
34019780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34019782:	4313      	orrs	r3, r2
34019784:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
34019786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34019788:	011b      	lsls	r3, r3, #4
3401978a:	687a      	ldr	r2, [r7, #4]
3401978c:	4413      	add	r3, r2
3401978e:	7b9b      	ldrb	r3, [r3, #14]
34019790:	f003 0302 	and.w	r3, r3, #2
34019794:	b2db      	uxtb	r3, r3
34019796:	2b00      	cmp	r3, #0
34019798:	bf14      	ite	ne
3401979a:	2301      	movne	r3, #1
3401979c:	2300      	moveq	r3, #0
3401979e:	b2db      	uxtb	r3, r3
340197a0:	461a      	mov	r2, r3
340197a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340197a4:	fa02 f303 	lsl.w	r3, r2, r3
340197a8:	461a      	mov	r2, r3
340197aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340197ac:	4313      	orrs	r3, r2
340197ae:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
340197b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197b2:	011b      	lsls	r3, r3, #4
340197b4:	687a      	ldr	r2, [r7, #4]
340197b6:	4413      	add	r3, r2
340197b8:	685a      	ldr	r2, [r3, #4]
340197ba:	6a3b      	ldr	r3, [r7, #32]
340197bc:	fa02 f303 	lsl.w	r3, r2, r3
340197c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197c2:	4313      	orrs	r3, r2
340197c4:	633b      	str	r3, [r7, #48]	@ 0x30
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
340197c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197c8:	011b      	lsls	r3, r3, #4
340197ca:	687a      	ldr	r2, [r7, #4]
340197cc:	4413      	add	r3, r2
340197ce:	7b5b      	ldrb	r3, [r3, #13]
340197d0:	461a      	mov	r2, r3
340197d2:	69bb      	ldr	r3, [r7, #24]
340197d4:	fa02 f303 	lsl.w	r3, r2, r3
340197d8:	461a      	mov	r2, r3
340197da:	693b      	ldr	r3, [r7, #16]
340197dc:	4013      	ands	r3, r2
340197de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197e0:	4313      	orrs	r3, r2
340197e2:	633b      	str	r3, [r7, #48]	@ 0x30
      t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source[c]) << link_shift[c]);
      t |= ((LL_Switch_InitStruct[i].frames[c] << fnr_shift[c]) & fnr_mask[c]);
    }
#endif

    ATON_REG_WRITE(reg, t);
340197e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340197e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
340197e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < n; i++)
340197ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340197ec:	3301      	adds	r3, #1
340197ee:	637b      	str	r3, [r7, #52]	@ 0x34
340197f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
340197f2:	683b      	ldr	r3, [r7, #0]
340197f4:	429a      	cmp	r2, r3
340197f6:	db8b      	blt.n	34019710 <LL_Switch_Init_NoReset+0x54>
  }

  return 0;
340197f8:	2300      	movs	r3, #0
}
340197fa:	4618      	mov	r0, r3
340197fc:	373c      	adds	r7, #60	@ 0x3c
340197fe:	46bd      	mov	sp, r7
34019800:	f85d 7b04 	ldr.w	r7, [sp], #4
34019804:	4770      	bx	lr
34019806:	bf00      	nop
34019808:	3401ee6c 	.word	0x3401ee6c
3401980c:	3401ee74 	.word	0x3401ee74
34019810:	3401ee7c 	.word	0x3401ee7c
34019814:	580e4000 	.word	0x580e4000

34019818 <LL_Switch_Init>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be connected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Init(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34019818:	b580      	push	{r7, lr}
3401981a:	b084      	sub	sp, #16
3401981c:	af00      	add	r7, sp, #0
3401981e:	6078      	str	r0, [r7, #4]
34019820:	6039      	str	r1, [r7, #0]
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
34019822:	2300      	movs	r3, #0
34019824:	60fb      	str	r3, [r7, #12]
34019826:	68fb      	ldr	r3, [r7, #12]
34019828:	f023 0301 	bic.w	r3, r3, #1
3401982c:	60fb      	str	r3, [r7, #12]
3401982e:	68fb      	ldr	r3, [r7, #12]
34019830:	f043 0302 	orr.w	r3, r3, #2
34019834:	60fb      	str	r3, [r7, #12]
34019836:	4a10      	ldr	r2, [pc, #64]	@ (34019878 <LL_Switch_Init+0x60>)
34019838:	68fb      	ldr	r3, [r7, #12]
3401983a:	6013      	str	r3, [r2, #0]
3401983c:	4b0e      	ldr	r3, [pc, #56]	@ (34019878 <LL_Switch_Init+0x60>)
3401983e:	681b      	ldr	r3, [r3, #0]
34019840:	f003 0302 	and.w	r3, r3, #2
34019844:	2b00      	cmp	r3, #0
34019846:	d1f9      	bne.n	3401983c <LL_Switch_Init+0x24>
34019848:	2300      	movs	r3, #0
3401984a:	60fb      	str	r3, [r7, #12]
3401984c:	68fb      	ldr	r3, [r7, #12]
3401984e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34019852:	60fb      	str	r3, [r7, #12]
34019854:	4a08      	ldr	r2, [pc, #32]	@ (34019878 <LL_Switch_Init+0x60>)
34019856:	68fb      	ldr	r3, [r7, #12]
34019858:	6013      	str	r3, [r2, #0]
3401985a:	4b07      	ldr	r3, [pc, #28]	@ (34019878 <LL_Switch_Init+0x60>)
3401985c:	681b      	ldr	r3, [r3, #0]
3401985e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34019862:	2b00      	cmp	r3, #0
34019864:	d1f9      	bne.n	3401985a <LL_Switch_Init+0x42>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
34019866:	6839      	ldr	r1, [r7, #0]
34019868:	6878      	ldr	r0, [r7, #4]
3401986a:	f7ff ff27 	bl	340196bc <LL_Switch_Init_NoReset>
3401986e:	4603      	mov	r3, r0
}
34019870:	4618      	mov	r0, r3
34019872:	3710      	adds	r7, #16
34019874:	46bd      	mov	sp, r7
34019876:	bd80      	pop	{r7, pc}
34019878:	580e4000 	.word	0x580e4000

3401987c <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
3401987c:	b480      	push	{r7}
3401987e:	b085      	sub	sp, #20
34019880:	af00      	add	r7, sp, #0
34019882:	6078      	str	r0, [r7, #4]
34019884:	6039      	str	r1, [r7, #0]
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
34019886:	2300      	movs	r3, #0
34019888:	60fb      	str	r3, [r7, #12]
3401988a:	e00f      	b.n	340198ac <LL_Switch_Deinit+0x30>
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
3401988c:	68fb      	ldr	r3, [r7, #12]
3401988e:	011b      	lsls	r3, r3, #4
34019890:	687a      	ldr	r2, [r7, #4]
34019892:	4413      	add	r3, r2
34019894:	689b      	ldr	r3, [r3, #8]
34019896:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
3401989a:	f503 2364 	add.w	r3, r3, #933888	@ 0xe4000
3401989e:	60bb      	str	r3, [r7, #8]

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
340198a0:	68bb      	ldr	r3, [r7, #8]
340198a2:	2200      	movs	r2, #0
340198a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < n; i++)
340198a6:	68fb      	ldr	r3, [r7, #12]
340198a8:	3301      	adds	r3, #1
340198aa:	60fb      	str	r3, [r7, #12]
340198ac:	68fa      	ldr	r2, [r7, #12]
340198ae:	683b      	ldr	r3, [r7, #0]
340198b0:	429a      	cmp	r2, r3
340198b2:	dbeb      	blt.n	3401988c <LL_Switch_Deinit+0x10>
  }

  return 0;
340198b4:	2300      	movs	r3, #0
}
340198b6:	4618      	mov	r0, r3
340198b8:	3714      	adds	r7, #20
340198ba:	46bd      	mov	sp, r7
340198bc:	f85d 7b04 	ldr.w	r7, [sp], #4
340198c0:	4770      	bx	lr
	...

340198c4 <LL_Convacc_Init>:
 * @param  id Convolutional Accelerator identifier [0, ATON_CONVACC_NUM-1]
 * @param  Convacc_InitStruct Structure describing initialization parameters
 * @retval Error code E.g.: Invalid ID, invalid parameters, not idle,..
 */
int LL_Convacc_Init(int id, const LL_Convacc_InitTypeDef *conf)
{
340198c4:	b580      	push	{r7, lr}
340198c6:	b08c      	sub	sp, #48	@ 0x30
340198c8:	af00      	add	r7, sp, #0
340198ca:	6078      	str	r0, [r7, #4]
340198cc:	6039      	str	r1, [r7, #0]
  uint32_t t;

  if (id >= ATON_CONVACC_NUM)
340198ce:	687b      	ldr	r3, [r7, #4]
340198d0:	2b03      	cmp	r3, #3
340198d2:	dd02      	ble.n	340198da <LL_Convacc_Init+0x16>
    return LL_ATON_INVALID_ID;
340198d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340198d8:	e3a8      	b.n	3401a02c <LL_Convacc_Init+0x768>

  LL_ATON_EnableClock(ATON_CONVACC_CLKB_CLK(id));
340198da:	687b      	ldr	r3, [r7, #4]
340198dc:	330a      	adds	r3, #10
340198de:	4618      	mov	r0, r3
340198e0:	f000 fbee 	bl	3401a0c0 <LL_ATON_EnableClock>

  t = ATON_CONVACC_CTRL_DT;
340198e4:	2300      	movs	r3, #0
340198e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_NOSUM(t, (conf->accumulate == 0));
340198e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340198ea:	f023 0304 	bic.w	r3, r3, #4
340198ee:	683a      	ldr	r2, [r7, #0]
340198f0:	7852      	ldrb	r2, [r2, #1]
340198f2:	f3c2 1280 	ubfx	r2, r2, #6, #1
340198f6:	b2d2      	uxtb	r2, r2
340198f8:	2a00      	cmp	r2, #0
340198fa:	d001      	beq.n	34019900 <LL_Convacc_Init+0x3c>
340198fc:	2200      	movs	r2, #0
340198fe:	e000      	b.n	34019902 <LL_Convacc_Init+0x3e>
34019900:	2204      	movs	r2, #4
34019902:	4313      	orrs	r3, r2
34019904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_NO1SUM(t, (conf->accumulate_first == 0));
34019906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019908:	f023 0310 	bic.w	r3, r3, #16
3401990c:	683a      	ldr	r2, [r7, #0]
3401990e:	7852      	ldrb	r2, [r2, #1]
34019910:	f3c2 12c0 	ubfx	r2, r2, #7, #1
34019914:	b2d2      	uxtb	r2, r2
34019916:	2a00      	cmp	r2, #0
34019918:	d001      	beq.n	3401991e <LL_Convacc_Init+0x5a>
3401991a:	2200      	movs	r2, #0
3401991c:	e000      	b.n	34019920 <LL_Convacc_Init+0x5c>
3401991e:	2210      	movs	r2, #16
34019920:	4313      	orrs	r3, r2
34019922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_GEN1SUM(t, (conf->accumulate_gen_first != 0));
34019924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
3401992a:	683b      	ldr	r3, [r7, #0]
3401992c:	789b      	ldrb	r3, [r3, #2]
3401992e:	029b      	lsls	r3, r3, #10
34019930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34019934:	4313      	orrs	r3, r2
34019936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_AFILTMODE(t, conf->afilt_mode);
34019938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401993a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
3401993e:	683b      	ldr	r3, [r7, #0]
34019940:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
34019944:	021b      	lsls	r3, r3, #8
34019946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3401994a:	4313      	orrs	r3, r2
3401994c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_SIMD(t, (conf->simd));
3401994e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019950:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
34019954:	683b      	ldr	r3, [r7, #0]
34019956:	785b      	ldrb	r3, [r3, #1]
34019958:	f3c3 1301 	ubfx	r3, r3, #4, #2
3401995c:	b2db      	uxtb	r3, r3
3401995e:	015b      	lsls	r3, r3, #5
34019960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
34019964:	4313      	orrs	r3, r2
34019966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KT1(t, (conf->kt1_mode != 0));
34019968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401996a:	f023 0208 	bic.w	r2, r3, #8
3401996e:	683b      	ldr	r3, [r7, #0]
34019970:	789b      	ldrb	r3, [r3, #2]
34019972:	f003 0308 	and.w	r3, r3, #8
34019976:	4313      	orrs	r3, r2
34019978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KSETEN(t, conf->kseten);
3401997a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401997c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
34019980:	683b      	ldr	r3, [r7, #0]
34019982:	78db      	ldrb	r3, [r3, #3]
34019984:	f3c3 0301 	ubfx	r3, r3, #0, #2
34019988:	b2db      	uxtb	r3, r3
3401998a:	059b      	lsls	r3, r3, #22
3401998c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
34019990:	4313      	orrs	r3, r2
34019992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_FUNSIGNED(t, conf->f_unsigned);
34019994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019996:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
3401999a:	683b      	ldr	r3, [r7, #0]
3401999c:	789b      	ldrb	r3, [r3, #2]
3401999e:	f3c3 1380 	ubfx	r3, r3, #6, #1
340199a2:	b2db      	uxtb	r3, r3
340199a4:	051b      	lsls	r3, r3, #20
340199a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
340199aa:	4313      	orrs	r3, r2
340199ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_CTRL_SET_KUNSIGNED(t, conf->k_unsigned);
340199ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
340199b4:	683b      	ldr	r3, [r7, #0]
340199b6:	789b      	ldrb	r3, [r3, #2]
340199b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
340199bc:	b2db      	uxtb	r3, r3
340199be:	055b      	lsls	r3, r3, #21
340199c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340199c4:	4313      	orrs	r3, r2
340199c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  t = ATON_CONVACC_CTRL_SET_FSTAT(t, (conf->fstat != 0));
340199c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340199ce:	683b      	ldr	r3, [r7, #0]
340199d0:	789b      	ldrb	r3, [r3, #2]
340199d2:	05db      	lsls	r3, r3, #23
340199d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340199d8:	4313      	orrs	r3, r2
340199da:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

#if defined(ATON_CONVACC_CTRL_GET_DEEPMODE)
  t = ATON_CONVACC_CTRL_SET_DEEPMODE(t, (conf->deepmode != 0));
340199dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340199de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
340199e2:	683b      	ldr	r3, [r7, #0]
340199e4:	789b      	ldrb	r3, [r3, #2]
340199e6:	061b      	lsls	r3, r3, #24
340199e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
340199ec:	4313      	orrs	r3, r2
340199ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  // deepmode and feature stats are incompatible
  if ((conf->fstat != 0) && (conf->deepmode != 0))
340199f0:	683b      	ldr	r3, [r7, #0]
340199f2:	789b      	ldrb	r3, [r3, #2]
340199f4:	f003 0302 	and.w	r3, r3, #2
340199f8:	b2db      	uxtb	r3, r3
340199fa:	2b00      	cmp	r3, #0
340199fc:	d009      	beq.n	34019a12 <LL_Convacc_Init+0x14e>
340199fe:	683b      	ldr	r3, [r7, #0]
34019a00:	789b      	ldrb	r3, [r3, #2]
34019a02:	f003 0310 	and.w	r3, r3, #16
34019a06:	b2db      	uxtb	r3, r3
34019a08:	2b00      	cmp	r3, #0
34019a0a:	d002      	beq.n	34019a12 <LL_Convacc_Init+0x14e>
  {
    return LL_ATON_INVALID_PARAM;
34019a0c:	f06f 0301 	mvn.w	r3, #1
34019a10:	e30c      	b.n	3401a02c <LL_Convacc_Init+0x768>
  }
#endif
#endif

#if defined(ATON_CONVACC_CTRL_GET_DSS2MODE)
  t = ATON_CONVACC_CTRL_SET_DSS2MODE(t, (conf->dss2mode != 0));
34019a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
34019a18:	683b      	ldr	r3, [r7, #0]
34019a1a:	789b      	ldrb	r3, [r3, #2]
34019a1c:	061b      	lsls	r3, r3, #24
34019a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34019a22:	4313      	orrs	r3, r2
34019a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_CTRL_SET_FSTAT)
  // deepmode and feature stats are incompatible
  if ((conf->fstat != 0) && (conf->dss2mode != 0))
34019a26:	683b      	ldr	r3, [r7, #0]
34019a28:	789b      	ldrb	r3, [r3, #2]
34019a2a:	f003 0302 	and.w	r3, r3, #2
34019a2e:	b2db      	uxtb	r3, r3
34019a30:	2b00      	cmp	r3, #0
34019a32:	d009      	beq.n	34019a48 <LL_Convacc_Init+0x184>
34019a34:	683b      	ldr	r3, [r7, #0]
34019a36:	789b      	ldrb	r3, [r3, #2]
34019a38:	f003 0320 	and.w	r3, r3, #32
34019a3c:	b2db      	uxtb	r3, r3
34019a3e:	2b00      	cmp	r3, #0
34019a40:	d002      	beq.n	34019a48 <LL_Convacc_Init+0x184>
  {
    return LL_ATON_INVALID_PARAM;
34019a42:	f06f 0301 	mvn.w	r3, #1
34019a46:	e2f1      	b.n	3401a02c <LL_Convacc_Init+0x768>
#endif
#endif

#if defined(ATON_CONVACC_CTRL_SET_DSS2MODE) && defined(ATON_CONVACC_CTRL_SET_DEEPMODE)
  // deepmode and dss2mode stats are incompatible
  if ((conf->dss2mode != 0) && (conf->deepmode != 0))
34019a48:	683b      	ldr	r3, [r7, #0]
34019a4a:	789b      	ldrb	r3, [r3, #2]
34019a4c:	f003 0320 	and.w	r3, r3, #32
34019a50:	b2db      	uxtb	r3, r3
34019a52:	2b00      	cmp	r3, #0
34019a54:	d009      	beq.n	34019a6a <LL_Convacc_Init+0x1a6>
34019a56:	683b      	ldr	r3, [r7, #0]
34019a58:	789b      	ldrb	r3, [r3, #2]
34019a5a:	f003 0310 	and.w	r3, r3, #16
34019a5e:	b2db      	uxtb	r3, r3
34019a60:	2b00      	cmp	r3, #0
34019a62:	d002      	beq.n	34019a6a <LL_Convacc_Init+0x1a6>
  {
    return LL_ATON_INVALID_PARAM;
34019a64:	f06f 0301 	mvn.w	r3, #1
34019a68:	e2e0      	b.n	3401a02c <LL_Convacc_Init+0x768>
  }
#endif

  ATON_CONVACC_CTRL_SET(id, t);
34019a6a:	687b      	ldr	r3, [r7, #4]
34019a6c:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34019a70:	33ef      	adds	r3, #239	@ 0xef
34019a72:	031b      	lsls	r3, r3, #12
34019a74:	461a      	mov	r2, r3
34019a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a78:	6013      	str	r3, [r2, #0]
  Conv_ctrl_bits[id] = t;
34019a7a:	49ac      	ldr	r1, [pc, #688]	@ (34019d2c <LL_Convacc_Init+0x468>)
34019a7c:	687b      	ldr	r3, [r7, #4]
34019a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34019a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  if (conf->afilt_mode != AFILT_MODE_NONE)
34019a84:	683b      	ldr	r3, [r7, #0]
34019a86:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
34019a8a:	2b00      	cmp	r3, #0
34019a8c:	d025      	beq.n	34019ada <LL_Convacc_Init+0x216>
  {
    t = ATON_CONVACC_AFILT_DT;
34019a8e:	2301      	movs	r3, #1
34019a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_TOT(t, conf->afilt_tot);
34019a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019a94:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019a98:	683a      	ldr	r2, [r7, #0]
34019a9a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
34019a9e:	4313      	orrs	r3, r2
34019aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_FIRST(t, conf->afilt_first);
34019aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019aa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019aa8:	683b      	ldr	r3, [r7, #0]
34019aaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
34019aae:	021b      	lsls	r3, r3, #8
34019ab0:	b29b      	uxth	r3, r3
34019ab2:	4313      	orrs	r3, r2
34019ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_AFILT_SET_LAST(t, conf->afilt_last);
34019ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ab8:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019abc:	683b      	ldr	r3, [r7, #0]
34019abe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
34019ac2:	041b      	lsls	r3, r3, #16
34019ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019ac8:	4313      	orrs	r3, r2
34019aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_AFILT_SET(id, t);
34019acc:	687b      	ldr	r3, [r7, #4]
34019ace:	031a      	lsls	r2, r3, #12
34019ad0:	4b97      	ldr	r3, [pc, #604]	@ (34019d30 <LL_Convacc_Init+0x46c>)
34019ad2:	4413      	add	r3, r2
34019ad4:	461a      	mov	r2, r3
34019ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ad8:	6013      	str	r3, [r2, #0]
  }

  if (conf->kfilt_tot > 0)
34019ada:	683b      	ldr	r3, [r7, #0]
34019adc:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
34019ae0:	2b00      	cmp	r3, #0
34019ae2:	d025      	beq.n	34019b30 <LL_Convacc_Init+0x26c>
  {
    t = ATON_CONVACC_KFILT_DT;
34019ae4:	2301      	movs	r3, #1
34019ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_TOT(t, conf->kfilt_tot);
34019ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019aea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019aee:	683a      	ldr	r2, [r7, #0]
34019af0:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
34019af4:	4313      	orrs	r3, r2
34019af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_FIRST(t, conf->kfilt_first);
34019af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019afa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019afe:	683b      	ldr	r3, [r7, #0]
34019b00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
34019b04:	021b      	lsls	r3, r3, #8
34019b06:	b29b      	uxth	r3, r3
34019b08:	4313      	orrs	r3, r2
34019b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_KFILT_SET_LAST(t, conf->kfilt_last);
34019b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b0e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019b12:	683b      	ldr	r3, [r7, #0]
34019b14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
34019b18:	041b      	lsls	r3, r3, #16
34019b1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019b1e:	4313      	orrs	r3, r2
34019b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_KFILT_SET(id, t);
34019b22:	687b      	ldr	r3, [r7, #4]
34019b24:	031a      	lsls	r2, r3, #12
34019b26:	4b83      	ldr	r3, [pc, #524]	@ (34019d34 <LL_Convacc_Init+0x470>)
34019b28:	4413      	add	r3, r2
34019b2a:	461a      	mov	r2, r3
34019b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b2e:	6013      	str	r3, [r2, #0]
  }

  t = ATON_CONVACC_DFORMAT_DT;
34019b30:	4b81      	ldr	r3, [pc, #516]	@ (34019d38 <LL_Convacc_Init+0x474>)
34019b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FROUND(t, conf->rounding_f);
34019b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b36:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34019b3a:	683b      	ldr	r3, [r7, #0]
34019b3c:	781b      	ldrb	r3, [r3, #0]
34019b3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
34019b42:	b2db      	uxtb	r3, r3
34019b44:	079b      	lsls	r3, r3, #30
34019b46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34019b4a:	4313      	orrs	r3, r2
34019b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FSAT(t, conf->saturation_f);
34019b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34019b54:	683b      	ldr	r3, [r7, #0]
34019b56:	781b      	ldrb	r3, [r3, #0]
34019b58:	f3c3 0340 	ubfx	r3, r3, #1, #1
34019b5c:	b2db      	uxtb	r3, r3
34019b5e:	07db      	lsls	r3, r3, #31
34019b60:	4313      	orrs	r3, r2
34019b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FRNDMODE(t, conf->round_mode_f);
34019b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
34019b6a:	683b      	ldr	r3, [r7, #0]
34019b6c:	781b      	ldrb	r3, [r3, #0]
34019b6e:	f3c3 0381 	ubfx	r3, r3, #2, #2
34019b72:	b2db      	uxtb	r3, r3
34019b74:	019b      	lsls	r3, r3, #6
34019b76:	b2db      	uxtb	r3, r3
34019b78:	4313      	orrs	r3, r2
34019b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FBYTES(t, conf->inbytes_f);
34019b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
34019b82:	683b      	ldr	r3, [r7, #0]
34019b84:	781b      	ldrb	r3, [r3, #0]
34019b86:	f3c3 1301 	ubfx	r3, r3, #4, #2
34019b8a:	b2db      	uxtb	r3, r3
34019b8c:	059b      	lsls	r3, r3, #22
34019b8e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
34019b92:	4313      	orrs	r3, r2
34019b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_FSHIFT(t, ATON_SHIFT(conf->shift_f));
34019b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019b98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
34019b9c:	683b      	ldr	r3, [r7, #0]
34019b9e:	791b      	ldrb	r3, [r3, #4]
34019ba0:	3310      	adds	r3, #16
34019ba2:	061b      	lsls	r3, r3, #24
34019ba4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
34019ba8:	4313      	orrs	r3, r2
34019baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  t = ATON_CONVACC_DFORMAT_SET_ROUND(t, conf->rounding_o);
34019bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019bae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34019bb2:	683b      	ldr	r3, [r7, #0]
34019bb4:	781b      	ldrb	r3, [r3, #0]
34019bb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
34019bba:	b2db      	uxtb	r3, r3
34019bbc:	041b      	lsls	r3, r3, #16
34019bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34019bc2:	4313      	orrs	r3, r2
34019bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_SAT(t, conf->saturation_o);
34019bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019bc8:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
34019bcc:	683b      	ldr	r3, [r7, #0]
34019bce:	781b      	ldrb	r3, [r3, #0]
34019bd0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
34019bd4:	b2db      	uxtb	r3, r3
34019bd6:	045b      	lsls	r3, r3, #17
34019bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34019bdc:	4313      	orrs	r3, r2
34019bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_ORNDMODE(t, (conf->relu_mode_o << 1) | conf->round_mode_o);
34019be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019be2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34019be6:	683b      	ldr	r3, [r7, #0]
34019be8:	785b      	ldrb	r3, [r3, #1]
34019bea:	f3c3 0340 	ubfx	r3, r3, #1, #1
34019bee:	b2db      	uxtb	r3, r3
34019bf0:	005b      	lsls	r3, r3, #1
34019bf2:	6839      	ldr	r1, [r7, #0]
34019bf4:	7849      	ldrb	r1, [r1, #1]
34019bf6:	f3c1 0100 	ubfx	r1, r1, #0, #1
34019bfa:	b2c9      	uxtb	r1, r1
34019bfc:	430b      	orrs	r3, r1
34019bfe:	039b      	lsls	r3, r3, #14
34019c00:	b29b      	uxth	r3, r3
34019c02:	4313      	orrs	r3, r2
34019c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_OBYTES(t, conf->outbytes_o);
34019c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34019c0c:	683b      	ldr	r3, [r7, #0]
34019c0e:	785b      	ldrb	r3, [r3, #1]
34019c10:	f3c3 0381 	ubfx	r3, r3, #2, #2
34019c14:	b2db      	uxtb	r3, r3
34019c16:	051b      	lsls	r3, r3, #20
34019c18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34019c1c:	4313      	orrs	r3, r2
34019c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_OUTSHIFT(t, conf->shift_o); // shift right only
34019c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c22:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
34019c26:	683b      	ldr	r3, [r7, #0]
34019c28:	799b      	ldrb	r3, [r3, #6]
34019c2a:	021b      	lsls	r3, r3, #8
34019c2c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
34019c30:	4313      	orrs	r3, r2
34019c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_DFORMAT_SET_RAW(t, conf->raw_o);
34019c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c36:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
34019c3a:	683b      	ldr	r3, [r7, #0]
34019c3c:	789b      	ldrb	r3, [r3, #2]
34019c3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
34019c42:	b2db      	uxtb	r3, r3
34019c44:	049b      	lsls	r3, r3, #18
34019c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34019c4a:	4313      	orrs	r3, r2
34019c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  t = ATON_CONVACC_DFORMAT_SET_INSHIFT(t, conf->shift_a); // accumulator shift left really (macro name is misleading)
34019c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c50:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34019c54:	683b      	ldr	r3, [r7, #0]
34019c56:	795b      	ldrb	r3, [r3, #5]
34019c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34019c5c:	4313      	orrs	r3, r2
34019c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_DFORMAT_SET(id, t);
34019c60:	687b      	ldr	r3, [r7, #4]
34019c62:	031a      	lsls	r2, r3, #12
34019c64:	4b35      	ldr	r3, [pc, #212]	@ (34019d3c <LL_Convacc_Init+0x478>)
34019c66:	4413      	add	r3, r2
34019c68:	461a      	mov	r2, r3
34019c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c6c:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_FFORMAT_DT;
34019c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34019c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_FFORMAT_SET_WIDTH(t, conf->fWidth * conf->batchDepth);
34019c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c76:	0c1b      	lsrs	r3, r3, #16
34019c78:	041b      	lsls	r3, r3, #16
34019c7a:	683a      	ldr	r2, [r7, #0]
34019c7c:	6892      	ldr	r2, [r2, #8]
34019c7e:	6839      	ldr	r1, [r7, #0]
34019c80:	8a89      	ldrh	r1, [r1, #20]
34019c82:	fb01 f202 	mul.w	r2, r1, r2
34019c86:	b292      	uxth	r2, r2
34019c88:	4313      	orrs	r3, r2
34019c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_FFORMAT_SET_HEIGHT(t, conf->fHeight);
34019c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019c8e:	b29a      	uxth	r2, r3
34019c90:	683b      	ldr	r3, [r7, #0]
34019c92:	68db      	ldr	r3, [r3, #12]
34019c94:	041b      	lsls	r3, r3, #16
34019c96:	4313      	orrs	r3, r2
34019c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FFORMAT_SET(id, t);
34019c9a:	687b      	ldr	r3, [r7, #4]
34019c9c:	031a      	lsls	r2, r3, #12
34019c9e:	4b28      	ldr	r3, [pc, #160]	@ (34019d40 <LL_Convacc_Init+0x47c>)
34019ca0:	4413      	add	r3, r2
34019ca2:	461a      	mov	r2, r3
34019ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ca6:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_KFORMAT_DT;
34019ca8:	4b26      	ldr	r3, [pc, #152]	@ (34019d44 <LL_Convacc_Init+0x480>)
34019caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_WIDTH(t, conf->kernelWidth);
34019cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34019cb2:	683a      	ldr	r2, [r7, #0]
34019cb4:	7c12      	ldrb	r2, [r2, #16]
34019cb6:	4313      	orrs	r3, r2
34019cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_HEIGHT(t, conf->kernelHeight);
34019cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019cc0:	683b      	ldr	r3, [r7, #0]
34019cc2:	7c5b      	ldrb	r3, [r3, #17]
34019cc4:	021b      	lsls	r3, r3, #8
34019cc6:	b29b      	uxth	r3, r3
34019cc8:	4313      	orrs	r3, r2
34019cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_BTCDEPTH(t, conf->batchDepth);
34019ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cce:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019cd2:	683b      	ldr	r3, [r7, #0]
34019cd4:	8a9b      	ldrh	r3, [r3, #20]
34019cd6:	041b      	lsls	r3, r3, #16
34019cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019cdc:	4313      	orrs	r3, r2
34019cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_KFORMAT_SET_NR(t, conf->nKernels);
34019ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ce2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34019ce6:	683b      	ldr	r3, [r7, #0]
34019ce8:	7c9b      	ldrb	r3, [r3, #18]
34019cea:	061b      	lsls	r3, r3, #24
34019cec:	4313      	orrs	r3, r2
34019cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_KFORMAT_SET(id, t);
34019cf0:	687b      	ldr	r3, [r7, #4]
34019cf2:	031a      	lsls	r2, r3, #12
34019cf4:	4b14      	ldr	r3, [pc, #80]	@ (34019d48 <LL_Convacc_Init+0x484>)
34019cf6:	4413      	add	r3, r2
34019cf8:	461a      	mov	r2, r3
34019cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019cfc:	6013      	str	r3, [r2, #0]

//   LL_ATON_PRINTF("depth=%d k_w=%d k_h=%d\n",conf->batchDepth,conf->kernelWidth,conf->kernelHeight);
//   LL_ATON_PRINTF("pad_t=%d pad_b=%d pad_l=%d pad_r=%d\n",conf->top_padding,conf->bot_padding,conf->left_padding,conf->right_padding);

  int p_top = (conf->top_padding < conf->kernelHeight ? conf->top_padding : conf->kernelHeight - 1);
34019cfe:	683b      	ldr	r3, [r7, #0]
34019d00:	8b9b      	ldrh	r3, [r3, #28]
34019d02:	683a      	ldr	r2, [r7, #0]
34019d04:	7c52      	ldrb	r2, [r2, #17]
34019d06:	4293      	cmp	r3, r2
34019d08:	d202      	bcs.n	34019d10 <LL_Convacc_Init+0x44c>
34019d0a:	683b      	ldr	r3, [r7, #0]
34019d0c:	8b9b      	ldrh	r3, [r3, #28]
34019d0e:	e002      	b.n	34019d16 <LL_Convacc_Init+0x452>
34019d10:	683b      	ldr	r3, [r7, #0]
34019d12:	7c5b      	ldrb	r3, [r3, #17]
34019d14:	3b01      	subs	r3, #1
34019d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  int p_bot = (conf->bot_padding < conf->kernelHeight ? conf->bot_padding : conf->kernelHeight - 1);
34019d18:	683b      	ldr	r3, [r7, #0]
34019d1a:	8bdb      	ldrh	r3, [r3, #30]
34019d1c:	683a      	ldr	r2, [r7, #0]
34019d1e:	7c52      	ldrb	r2, [r2, #17]
34019d20:	4293      	cmp	r3, r2
34019d22:	d213      	bcs.n	34019d4c <LL_Convacc_Init+0x488>
34019d24:	683b      	ldr	r3, [r7, #0]
34019d26:	8bdb      	ldrh	r3, [r3, #30]
34019d28:	e013      	b.n	34019d52 <LL_Convacc_Init+0x48e>
34019d2a:	bf00      	nop
34019d2c:	34020d30 	.word	0x34020d30
34019d30:	580ef024 	.word	0x580ef024
34019d34:	580ef020 	.word	0x580ef020
34019d38:	10b00808 	.word	0x10b00808
34019d3c:	580ef010 	.word	0x580ef010
34019d40:	580ef014 	.word	0x580ef014
34019d44:	01010303 	.word	0x01010303
34019d48:	580ef008 	.word	0x580ef008
34019d4c:	683b      	ldr	r3, [r7, #0]
34019d4e:	7c5b      	ldrb	r3, [r3, #17]
34019d50:	3b01      	subs	r3, #1
34019d52:	627b      	str	r3, [r7, #36]	@ 0x24
  int p_left = (conf->left_padding < conf->kernelWidth ? conf->left_padding : conf->kernelWidth - 1);
34019d54:	683b      	ldr	r3, [r7, #0]
34019d56:	8b1b      	ldrh	r3, [r3, #24]
34019d58:	683a      	ldr	r2, [r7, #0]
34019d5a:	7c12      	ldrb	r2, [r2, #16]
34019d5c:	4293      	cmp	r3, r2
34019d5e:	d202      	bcs.n	34019d66 <LL_Convacc_Init+0x4a2>
34019d60:	683b      	ldr	r3, [r7, #0]
34019d62:	8b1b      	ldrh	r3, [r3, #24]
34019d64:	e002      	b.n	34019d6c <LL_Convacc_Init+0x4a8>
34019d66:	683b      	ldr	r3, [r7, #0]
34019d68:	7c1b      	ldrb	r3, [r3, #16]
34019d6a:	3b01      	subs	r3, #1
34019d6c:	623b      	str	r3, [r7, #32]
  int p_right = (conf->right_padding < conf->kernelWidth ? conf->right_padding : conf->kernelWidth - 1);
34019d6e:	683b      	ldr	r3, [r7, #0]
34019d70:	8b5b      	ldrh	r3, [r3, #26]
34019d72:	683a      	ldr	r2, [r7, #0]
34019d74:	7c12      	ldrb	r2, [r2, #16]
34019d76:	4293      	cmp	r3, r2
34019d78:	d202      	bcs.n	34019d80 <LL_Convacc_Init+0x4bc>
34019d7a:	683b      	ldr	r3, [r7, #0]
34019d7c:	8b5b      	ldrh	r3, [r3, #26]
34019d7e:	e002      	b.n	34019d86 <LL_Convacc_Init+0x4c2>
34019d80:	683b      	ldr	r3, [r7, #0]
34019d82:	7c1b      	ldrb	r3, [r3, #16]
34019d84:	3b01      	subs	r3, #1
34019d86:	61fb      	str	r3, [r7, #28]

  p_top = (p_top <= 2 ? p_top : 2);
34019d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019d8a:	2b02      	cmp	r3, #2
34019d8c:	bfa8      	it	ge
34019d8e:	2302      	movge	r3, #2
34019d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  p_bot = (p_bot <= 2 ? p_bot : 2);
34019d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019d94:	2b02      	cmp	r3, #2
34019d96:	bfa8      	it	ge
34019d98:	2302      	movge	r3, #2
34019d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  p_left = (p_left <= 2 ? p_left : 2);
34019d9c:	6a3b      	ldr	r3, [r7, #32]
34019d9e:	2b02      	cmp	r3, #2
34019da0:	bfa8      	it	ge
34019da2:	2302      	movge	r3, #2
34019da4:	623b      	str	r3, [r7, #32]
  p_right = (p_right <= 2 ? p_right : 2);
34019da6:	69fb      	ldr	r3, [r7, #28]
34019da8:	2b02      	cmp	r3, #2
34019daa:	bfa8      	it	ge
34019dac:	2302      	movge	r3, #2
34019dae:	61fb      	str	r3, [r7, #28]
  // LL_ATON_PRINTF("p_t=%d p_b=%d p_l=%d p_r=%d\n",p_top,p_bot,p_left,p_right);

#if defined(ATON_CONVACC_CTRL_GET_DEEPMODE)
  // no pad mode available in 1x1 deepmode
  // will accomodate padding only with zframe below
  if (conf->deepmode != 0)
34019db0:	683b      	ldr	r3, [r7, #0]
34019db2:	789b      	ldrb	r3, [r3, #2]
34019db4:	f003 0310 	and.w	r3, r3, #16
34019db8:	b2db      	uxtb	r3, r3
34019dba:	2b00      	cmp	r3, #0
34019dbc:	d007      	beq.n	34019dce <LL_Convacc_Init+0x50a>
    p_top = p_bot = p_left = p_right = 0;
34019dbe:	2300      	movs	r3, #0
34019dc0:	61fb      	str	r3, [r7, #28]
34019dc2:	69fb      	ldr	r3, [r7, #28]
34019dc4:	623b      	str	r3, [r7, #32]
34019dc6:	6a3b      	ldr	r3, [r7, #32]
34019dc8:	627b      	str	r3, [r7, #36]	@ 0x24
34019dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
#if defined(ATON_CONVACC_CTRL_GET_DSS2MODE)
  // no pad mode available in dss2mode
  // will accomodate padding only with zframe below
  if (conf->dss2mode != 0)
34019dce:	683b      	ldr	r3, [r7, #0]
34019dd0:	789b      	ldrb	r3, [r3, #2]
34019dd2:	f003 0320 	and.w	r3, r3, #32
34019dd6:	b2db      	uxtb	r3, r3
34019dd8:	2b00      	cmp	r3, #0
34019dda:	d007      	beq.n	34019dec <LL_Convacc_Init+0x528>
    p_top = p_bot = p_left = p_right = 0;
34019ddc:	2300      	movs	r3, #0
34019dde:	61fb      	str	r3, [r7, #28]
34019de0:	69fb      	ldr	r3, [r7, #28]
34019de2:	623b      	str	r3, [r7, #32]
34019de4:	6a3b      	ldr	r3, [r7, #32]
34019de6:	627b      	str	r3, [r7, #36]	@ 0x24
34019de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019dea:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
#if defined(ATON_CONVACC_ZFBIAS_SET)
  // no pad mode available if zfbias is set
  // will accomodate padding only with zframe below
  if (conf->zfbias != 0)
34019dec:	683b      	ldr	r3, [r7, #0]
34019dee:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
34019df2:	2b00      	cmp	r3, #0
34019df4:	d007      	beq.n	34019e06 <LL_Convacc_Init+0x542>
    p_top = p_bot = p_left = p_right = 0;
34019df6:	2300      	movs	r3, #0
34019df8:	61fb      	str	r3, [r7, #28]
34019dfa:	69fb      	ldr	r3, [r7, #28]
34019dfc:	623b      	str	r3, [r7, #32]
34019dfe:	6a3b      	ldr	r3, [r7, #32]
34019e00:	627b      	str	r3, [r7, #36]	@ 0x24
34019e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019e04:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  int z_top = (conf->top_padding - p_top);
34019e06:	683b      	ldr	r3, [r7, #0]
34019e08:	8b9b      	ldrh	r3, [r3, #28]
34019e0a:	461a      	mov	r2, r3
34019e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019e0e:	1ad3      	subs	r3, r2, r3
34019e10:	61bb      	str	r3, [r7, #24]
  int z_bot = (conf->bot_padding - p_bot);
34019e12:	683b      	ldr	r3, [r7, #0]
34019e14:	8bdb      	ldrh	r3, [r3, #30]
34019e16:	461a      	mov	r2, r3
34019e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019e1a:	1ad3      	subs	r3, r2, r3
34019e1c:	617b      	str	r3, [r7, #20]
  int z_left = (conf->left_padding - p_left);
34019e1e:	683b      	ldr	r3, [r7, #0]
34019e20:	8b1b      	ldrh	r3, [r3, #24]
34019e22:	461a      	mov	r2, r3
34019e24:	6a3b      	ldr	r3, [r7, #32]
34019e26:	1ad3      	subs	r3, r2, r3
34019e28:	613b      	str	r3, [r7, #16]
  int z_right = (conf->right_padding - p_right);
34019e2a:	683b      	ldr	r3, [r7, #0]
34019e2c:	8b5b      	ldrh	r3, [r3, #26]
34019e2e:	461a      	mov	r2, r3
34019e30:	69fb      	ldr	r3, [r7, #28]
34019e32:	1ad3      	subs	r3, r2, r3
34019e34:	60fb      	str	r3, [r7, #12]
  // LL_ATON_PRINTF("z_t=%d z_b=%d z_l=%d z_r=%d\n",z_top,z_bot,z_left*conf->batchDepth,z_right*conf->batchDepth);

  t = ATON_CONVACC_ZFRAME_DT;
34019e36:	2300      	movs	r3, #0
34019e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_TOP(t, z_top);
34019e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e3c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
34019e40:	69bb      	ldr	r3, [r7, #24]
34019e42:	041b      	lsls	r3, r3, #16
34019e44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
34019e48:	4313      	orrs	r3, r2
34019e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_BOTTOM(t, z_bot);
34019e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e4e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
34019e52:	697b      	ldr	r3, [r7, #20]
34019e54:	061b      	lsls	r3, r3, #24
34019e56:	4313      	orrs	r3, r2
34019e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_LEFT(t, z_left * conf->batchDepth);
34019e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
34019e60:	683b      	ldr	r3, [r7, #0]
34019e62:	8a9b      	ldrh	r3, [r3, #20]
34019e64:	4619      	mov	r1, r3
34019e66:	693b      	ldr	r3, [r7, #16]
34019e68:	fb01 f303 	mul.w	r3, r1, r3
34019e6c:	b2db      	uxtb	r3, r3
34019e6e:	4313      	orrs	r3, r2
34019e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_ZFRAME_SET_RIGHT(t, z_right * conf->batchDepth);
34019e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
34019e78:	683b      	ldr	r3, [r7, #0]
34019e7a:	8a9b      	ldrh	r3, [r3, #20]
34019e7c:	4619      	mov	r1, r3
34019e7e:	68fb      	ldr	r3, [r7, #12]
34019e80:	fb01 f303 	mul.w	r3, r1, r3
34019e84:	021b      	lsls	r3, r3, #8
34019e86:	b29b      	uxth	r3, r3
34019e88:	4313      	orrs	r3, r2
34019e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_ZFRAME_SET(id, t);
34019e8c:	687b      	ldr	r3, [r7, #4]
34019e8e:	031a      	lsls	r2, r3, #12
34019e90:	4b68      	ldr	r3, [pc, #416]	@ (3401a034 <LL_Convacc_Init+0x770>)
34019e92:	4413      	add	r3, r2
34019e94:	461a      	mov	r2, r3
34019e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019e98:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_SAMPLE_DT;
34019e9a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
34019e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_TPAD(t, p_top);
34019ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ea2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34019ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34019ea8:	011b      	lsls	r3, r3, #4
34019eaa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
34019eae:	4313      	orrs	r3, r2
34019eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_BPAD(t, p_bot);
34019eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019eb4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
34019eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34019eba:	019b      	lsls	r3, r3, #6
34019ebc:	b2db      	uxtb	r3, r3
34019ebe:	4313      	orrs	r3, r2
34019ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_LPAD(t, p_left);
34019ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ec4:	f023 0203 	bic.w	r2, r3, #3
34019ec8:	6a3b      	ldr	r3, [r7, #32]
34019eca:	f003 0303 	and.w	r3, r3, #3
34019ece:	4313      	orrs	r3, r2
34019ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_RPAD(t, p_right);
34019ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ed4:	f023 020c 	bic.w	r2, r3, #12
34019ed8:	69fb      	ldr	r3, [r7, #28]
34019eda:	009b      	lsls	r3, r3, #2
34019edc:	f003 030c 	and.w	r3, r3, #12
34019ee0:	4313      	orrs	r3, r2
34019ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_HSTRD(t, conf->hstride);
34019ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ee6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34019eea:	683b      	ldr	r3, [r7, #0]
34019eec:	7d9b      	ldrb	r3, [r3, #22]
34019eee:	021b      	lsls	r3, r3, #8
34019ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34019ef4:	4313      	orrs	r3, r2
34019ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  t = ATON_CONVACC_SAMPLE_SET_VSTRD(t, conf->vstride);
34019ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019efa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34019efe:	683b      	ldr	r3, [r7, #0]
34019f00:	7ddb      	ldrb	r3, [r3, #23]
34019f02:	031b      	lsls	r3, r3, #12
34019f04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34019f08:	4313      	orrs	r3, r2
34019f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_SAMPLE_SET_FSTATCNT)
  if (conf->fstat != 0)
34019f0c:	683b      	ldr	r3, [r7, #0]
34019f0e:	789b      	ldrb	r3, [r3, #2]
34019f10:	f003 0302 	and.w	r3, r3, #2
34019f14:	b2db      	uxtb	r3, r3
34019f16:	2b00      	cmp	r3, #0
34019f18:	d006      	beq.n	34019f28 <LL_Convacc_Init+0x664>
    t = ATON_CONVACC_SAMPLE_SET_FSTATCNT(t, conf->fstatcnt);
34019f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f1c:	b29a      	uxth	r2, r3
34019f1e:	683b      	ldr	r3, [r7, #0]
34019f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34019f22:	041b      	lsls	r3, r3, #16
34019f24:	4313      	orrs	r3, r2
34019f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif
  ATON_CONVACC_SAMPLE_SET(id, t);
34019f28:	687b      	ldr	r3, [r7, #4]
34019f2a:	031a      	lsls	r2, r3, #12
34019f2c:	4b42      	ldr	r3, [pc, #264]	@ (3401a038 <LL_Convacc_Init+0x774>)
34019f2e:	4413      	add	r3, r2
34019f30:	461a      	mov	r2, r3
34019f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f34:	6013      	str	r3, [r2, #0]

  // LL_ATON_PRINTF("crop_t=%d crop_b=%d crop_l=%d crop_r=%d\n",z_top,z_bot,z_left,z_right);
  t = ATON_CONVACC_FHCROP_DT;
34019f36:	4b41      	ldr	r3, [pc, #260]	@ (3401a03c <LL_Convacc_Init+0x778>)
34019f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->left_crop > 0)
34019f3a:	683b      	ldr	r3, [r7, #0]
34019f3c:	8c1b      	ldrh	r3, [r3, #32]
34019f3e:	2b00      	cmp	r3, #0
34019f40:	d00c      	beq.n	34019f5c <LL_Convacc_Init+0x698>
    t = ATON_CONVACC_FHCROP_SET_LEFT(t, conf->left_crop * conf->batchDepth);
34019f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f44:	0c1b      	lsrs	r3, r3, #16
34019f46:	041b      	lsls	r3, r3, #16
34019f48:	683a      	ldr	r2, [r7, #0]
34019f4a:	8c12      	ldrh	r2, [r2, #32]
34019f4c:	4611      	mov	r1, r2
34019f4e:	683a      	ldr	r2, [r7, #0]
34019f50:	8a92      	ldrh	r2, [r2, #20]
34019f52:	fb01 f202 	mul.w	r2, r1, r2
34019f56:	b292      	uxth	r2, r2
34019f58:	4313      	orrs	r3, r2
34019f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->right_crop > 0)
34019f5c:	683b      	ldr	r3, [r7, #0]
34019f5e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
34019f60:	2b00      	cmp	r3, #0
34019f62:	d00f      	beq.n	34019f84 <LL_Convacc_Init+0x6c0>
    t = ATON_CONVACC_FHCROP_SET_RIGHT(t, conf->right_crop * conf->batchDepth + (conf->batchDepth - 1));
34019f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f66:	b29a      	uxth	r2, r3
34019f68:	683b      	ldr	r3, [r7, #0]
34019f6a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
34019f6c:	4619      	mov	r1, r3
34019f6e:	683b      	ldr	r3, [r7, #0]
34019f70:	8a9b      	ldrh	r3, [r3, #20]
34019f72:	fb03 f101 	mul.w	r1, r3, r1
34019f76:	683b      	ldr	r3, [r7, #0]
34019f78:	8a9b      	ldrh	r3, [r3, #20]
34019f7a:	3b01      	subs	r3, #1
34019f7c:	440b      	add	r3, r1
34019f7e:	041b      	lsls	r3, r3, #16
34019f80:	4313      	orrs	r3, r2
34019f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FHCROP_SET(id, t);
34019f84:	687b      	ldr	r3, [r7, #4]
34019f86:	031a      	lsls	r2, r3, #12
34019f88:	4b2d      	ldr	r3, [pc, #180]	@ (3401a040 <LL_Convacc_Init+0x77c>)
34019f8a:	4413      	add	r3, r2
34019f8c:	461a      	mov	r2, r3
34019f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019f90:	6013      	str	r3, [r2, #0]

  t = ATON_CONVACC_FVCROP_DT;
34019f92:	4b2a      	ldr	r3, [pc, #168]	@ (3401a03c <LL_Convacc_Init+0x778>)
34019f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->top_crop > 0)
34019f96:	683b      	ldr	r3, [r7, #0]
34019f98:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
34019f9a:	2b00      	cmp	r3, #0
34019f9c:	d006      	beq.n	34019fac <LL_Convacc_Init+0x6e8>
    t = ATON_CONVACC_FVCROP_SET_TOP(t, conf->top_crop);
34019f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fa0:	0c1b      	lsrs	r3, r3, #16
34019fa2:	041b      	lsls	r3, r3, #16
34019fa4:	683a      	ldr	r2, [r7, #0]
34019fa6:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
34019fa8:	4313      	orrs	r3, r2
34019faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->bot_crop > 0)
34019fac:	683b      	ldr	r3, [r7, #0]
34019fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
34019fb0:	2b00      	cmp	r3, #0
34019fb2:	d006      	beq.n	34019fc2 <LL_Convacc_Init+0x6fe>
    t = ATON_CONVACC_FVCROP_SET_BOTTOM(t, conf->bot_crop);
34019fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fb6:	b29a      	uxth	r2, r3
34019fb8:	683b      	ldr	r3, [r7, #0]
34019fba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
34019fbc:	041b      	lsls	r3, r3, #16
34019fbe:	4313      	orrs	r3, r2
34019fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ATON_CONVACC_FVCROP_SET(id, t);
34019fc2:	687b      	ldr	r3, [r7, #4]
34019fc4:	031a      	lsls	r2, r3, #12
34019fc6:	4b1f      	ldr	r3, [pc, #124]	@ (3401a044 <LL_Convacc_Init+0x780>)
34019fc8:	4413      	add	r3, r2
34019fca:	461a      	mov	r2, r3
34019fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fce:	6013      	str	r3, [r2, #0]
  // LL_ATON_PRINTF("c_t=%d c_b=%d c_l=%d c_r=%d\n",conf->top_crop,conf->bot_crop,conf->left_crop  *
  // conf->batchDepth,conf->right_crop  * conf->batchDepth + (conf->batchDepth - 1));

#if defined(ATON_CONVACC_FSUB_SET)
  if (conf->fsub != 0)
34019fd0:	683b      	ldr	r3, [r7, #0]
34019fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34019fd4:	2b00      	cmp	r3, #0
34019fd6:	d011      	beq.n	34019ffc <LL_Convacc_Init+0x738>
  {
    t = ATON_CONVACC_FSUB_DT;
34019fd8:	2300      	movs	r3, #0
34019fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t = ATON_CONVACC_FSUB_SET_FSUB(t, conf->fsub);
34019fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019fde:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34019fe2:	683b      	ldr	r3, [r7, #0]
34019fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34019fe6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34019fea:	4313      	orrs	r3, r2
34019fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ATON_CONVACC_FSUB_SET(id, t);
34019fee:	687b      	ldr	r3, [r7, #4]
34019ff0:	031a      	lsls	r2, r3, #12
34019ff2:	4b15      	ldr	r3, [pc, #84]	@ (3401a048 <LL_Convacc_Init+0x784>)
34019ff4:	4413      	add	r3, r2
34019ff6:	461a      	mov	r2, r3
34019ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34019ffa:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(ATON_CONVACC_ZFBIAS_SET)
  t = ATON_CONVACC_ZFBIAS_DT;
34019ffc:	2300      	movs	r3, #0
34019ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (conf->zfbias != 0)
3401a000:	683b      	ldr	r3, [r7, #0]
3401a002:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
3401a006:	2b00      	cmp	r3, #0
3401a008:	d008      	beq.n	3401a01c <LL_Convacc_Init+0x758>
  {
    t = ATON_CONVACC_ZFBIAS_SET_ZFBIAS(t, conf->zfbias);
3401a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401a00c:	0c1b      	lsrs	r3, r3, #16
3401a00e:	041b      	lsls	r3, r3, #16
3401a010:	683a      	ldr	r2, [r7, #0]
3401a012:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	@ 0x38
3401a016:	b292      	uxth	r2, r2
3401a018:	4313      	orrs	r3, r2
3401a01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if defined(ATON_CONVACC_ZFBIAS_SET_ZFLEFTMSB)
  t = ATON_CONVACC_ZFBIAS_SET_ZFLEFTMSB(t, (z_left * conf->batchDepth) >> ATON_CONVACC_ZFRAME_LEFT_W);
  t = ATON_CONVACC_ZFBIAS_SET_ZFRIGHTMSB(t, (z_right * conf->batchDepth) >> ATON_CONVACC_ZFRAME_RIGHT_W);
#endif

  ATON_CONVACC_ZFBIAS_SET(id, t);
3401a01c:	687b      	ldr	r3, [r7, #4]
3401a01e:	031a      	lsls	r2, r3, #12
3401a020:	4b0a      	ldr	r3, [pc, #40]	@ (3401a04c <LL_Convacc_Init+0x788>)
3401a022:	4413      	add	r3, r2
3401a024:	461a      	mov	r2, r3
3401a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3401a028:	6013      	str	r3, [r2, #0]
#endif

  return 0;
3401a02a:	2300      	movs	r3, #0
}
3401a02c:	4618      	mov	r0, r3
3401a02e:	3730      	adds	r7, #48	@ 0x30
3401a030:	46bd      	mov	sp, r7
3401a032:	bd80      	pop	{r7, pc}
3401a034:	580ef028 	.word	0x580ef028
3401a038:	580ef00c 	.word	0x580ef00c
3401a03c:	ffff0000 	.word	0xffff0000
3401a040:	580ef018 	.word	0x580ef018
3401a044:	580ef01c 	.word	0x580ef01c
3401a048:	580ef030 	.word	0x580ef030
3401a04c:	580ef034 	.word	0x580ef034

3401a050 <LL_EpochCtrl_Init>:
 * @param  id Epoch Controller identifier [0..ATON_EPOCHCTRL_NUM-1]
 * @param  conf Structure describing Epoch Controller initialization parameters
 * @retval Error code
 */
int LL_EpochCtrl_Init(int id, const LL_EpochCtrl_InitTypeDef *conf)
{
3401a050:	b580      	push	{r7, lr}
3401a052:	b084      	sub	sp, #16
3401a054:	af00      	add	r7, sp, #0
3401a056:	6078      	str	r0, [r7, #4]
3401a058:	6039      	str	r1, [r7, #0]
  uint32_t t;

  if (id >= ATON_EPOCHCTRL_NUM)
3401a05a:	687b      	ldr	r3, [r7, #4]
3401a05c:	2b00      	cmp	r3, #0
3401a05e:	dd02      	ble.n	3401a066 <LL_EpochCtrl_Init+0x16>
    return LL_ATON_INVALID_ID;
3401a060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3401a064:	e024      	b.n	3401a0b0 <LL_EpochCtrl_Init+0x60>

  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
3401a066:	687b      	ldr	r3, [r7, #4]
3401a068:	3319      	adds	r3, #25
3401a06a:	4618      	mov	r0, r3
3401a06c:	f000 f828 	bl	3401a0c0 <LL_ATON_EnableClock>

  /* Configure CTRL register */
  t = ATON_EPOCHCTRL_CTRL_DT;
3401a070:	2300      	movs	r3, #0
3401a072:	60fb      	str	r3, [r7, #12]
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
3401a074:	68fb      	ldr	r3, [r7, #12]
3401a076:	f023 0208 	bic.w	r2, r3, #8
3401a07a:	683b      	ldr	r3, [r7, #0]
3401a07c:	791b      	ldrb	r3, [r3, #4]
3401a07e:	f3c3 0300 	ubfx	r3, r3, #0, #1
3401a082:	b2db      	uxtb	r3, r3
3401a084:	00db      	lsls	r3, r3, #3
3401a086:	f003 0308 	and.w	r3, r3, #8
3401a08a:	4313      	orrs	r3, r2
3401a08c:	60fb      	str	r3, [r7, #12]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
3401a08e:	4a0a      	ldr	r2, [pc, #40]	@ (3401a0b8 <LL_EpochCtrl_Init+0x68>)
3401a090:	68fb      	ldr	r3, [r7, #12]
3401a092:	6013      	str	r3, [r2, #0]

  /* Check address is 8 byte aligned */
  if (conf->blobaddr & 0x7)
3401a094:	683b      	ldr	r3, [r7, #0]
3401a096:	681b      	ldr	r3, [r3, #0]
3401a098:	f003 0307 	and.w	r3, r3, #7
3401a09c:	2b00      	cmp	r3, #0
3401a09e:	d002      	beq.n	3401a0a6 <LL_EpochCtrl_Init+0x56>
    return LL_ATON_INVALID_PARAM;
3401a0a0:	f06f 0301 	mvn.w	r3, #1
3401a0a4:	e004      	b.n	3401a0b0 <LL_EpochCtrl_Init+0x60>

  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
3401a0a6:	4a05      	ldr	r2, [pc, #20]	@ (3401a0bc <LL_EpochCtrl_Init+0x6c>)
3401a0a8:	683b      	ldr	r3, [r7, #0]
3401a0aa:	681b      	ldr	r3, [r3, #0]
3401a0ac:	6013      	str	r3, [r2, #0]

  return LL_ATON_OK;
3401a0ae:	2300      	movs	r3, #0
}
3401a0b0:	4618      	mov	r0, r3
3401a0b2:	3710      	adds	r7, #16
3401a0b4:	46bd      	mov	sp, r7
3401a0b6:	bd80      	pop	{r7, pc}
3401a0b8:	580fe000 	.word	0x580fe000
3401a0bc:	580fe008 	.word	0x580fe008

3401a0c0 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
3401a0c0:	b490      	push	{r4, r7}
3401a0c2:	b084      	sub	sp, #16
3401a0c4:	af00      	add	r7, sp, #0
3401a0c6:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
3401a0c8:	4b13      	ldr	r3, [pc, #76]	@ (3401a118 <LL_ATON_EnableClock+0x58>)
3401a0ca:	681b      	ldr	r3, [r3, #0]
3401a0cc:	60fb      	str	r3, [r7, #12]
3401a0ce:	f04f 0201 	mov.w	r2, #1
3401a0d2:	f04f 0300 	mov.w	r3, #0
3401a0d6:	6879      	ldr	r1, [r7, #4]
3401a0d8:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
3401a0dc:	4613      	mov	r3, r2
3401a0de:	43da      	mvns	r2, r3
3401a0e0:	68fb      	ldr	r3, [r7, #12]
3401a0e2:	ea02 0103 	and.w	r1, r2, r3
3401a0e6:	2201      	movs	r2, #1
3401a0e8:	687b      	ldr	r3, [r7, #4]
3401a0ea:	fa02 f303 	lsl.w	r3, r2, r3
3401a0ee:	461c      	mov	r4, r3
3401a0f0:	f04f 0201 	mov.w	r2, #1
3401a0f4:	f04f 0300 	mov.w	r3, #0
3401a0f8:	6878      	ldr	r0, [r7, #4]
3401a0fa:	ea52 030d 	orrs.w	r3, r2, sp
3401a0fe:	4613      	mov	r3, r2
3401a100:	4023      	ands	r3, r4
3401a102:	430b      	orrs	r3, r1
3401a104:	60fb      	str	r3, [r7, #12]
3401a106:	4a04      	ldr	r2, [pc, #16]	@ (3401a118 <LL_ATON_EnableClock+0x58>)
3401a108:	68fb      	ldr	r3, [r7, #12]
3401a10a:	6013      	str	r3, [r2, #0]
#endif
}
3401a10c:	bf00      	nop
3401a10e:	3710      	adds	r7, #16
3401a110:	46bd      	mov	sp, r7
3401a112:	bc90      	pop	{r4, r7}
3401a114:	4770      	bx	lr
3401a116:	bf00      	nop
3401a118:	580e0010 	.word	0x580e0010

3401a11c <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
3401a11c:	b480      	push	{r7}
3401a11e:	b085      	sub	sp, #20
3401a120:	af00      	add	r7, sp, #0
3401a122:	6078      	str	r0, [r7, #4]
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
3401a124:	4b0b      	ldr	r3, [pc, #44]	@ (3401a154 <LL_ATON_DisableClock+0x38>)
3401a126:	681b      	ldr	r3, [r3, #0]
3401a128:	60fb      	str	r3, [r7, #12]
3401a12a:	f04f 0201 	mov.w	r2, #1
3401a12e:	f04f 0300 	mov.w	r3, #0
3401a132:	6879      	ldr	r1, [r7, #4]
3401a134:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
3401a138:	4613      	mov	r3, r2
3401a13a:	43db      	mvns	r3, r3
3401a13c:	68fa      	ldr	r2, [r7, #12]
3401a13e:	4013      	ands	r3, r2
3401a140:	60fb      	str	r3, [r7, #12]
3401a142:	4a04      	ldr	r2, [pc, #16]	@ (3401a154 <LL_ATON_DisableClock+0x38>)
3401a144:	68fb      	ldr	r3, [r7, #12]
3401a146:	6013      	str	r3, [r2, #0]
#endif
}
3401a148:	bf00      	nop
3401a14a:	3714      	adds	r7, #20
3401a14c:	46bd      	mov	sp, r7
3401a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a152:	4770      	bx	lr
3401a154:	580e0010 	.word	0x580e0010

3401a158 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
3401a158:	b580      	push	{r7, lr}
3401a15a:	b084      	sub	sp, #16
3401a15c:	af00      	add	r7, sp, #0
3401a15e:	6078      	str	r0, [r7, #4]

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
3401a160:	687b      	ldr	r3, [r7, #4]
3401a162:	2b00      	cmp	r3, #0
3401a164:	d105      	bne.n	3401a172 <LL_ATON_RT_Main+0x1a>
3401a166:	4b16      	ldr	r3, [pc, #88]	@ (3401a1c0 <LL_ATON_RT_Main+0x68>)
3401a168:	4a16      	ldr	r2, [pc, #88]	@ (3401a1c4 <LL_ATON_RT_Main+0x6c>)
3401a16a:	213c      	movs	r1, #60	@ 0x3c
3401a16c:	4816      	ldr	r0, [pc, #88]	@ (3401a1c8 <LL_ATON_RT_Main+0x70>)
3401a16e:	f001 f893 	bl	3401b298 <__assert_func>
  LL_ATON_ASSERT(network_instance->network != NULL);
3401a172:	687b      	ldr	r3, [r7, #4]
3401a174:	681b      	ldr	r3, [r3, #0]
3401a176:	2b00      	cmp	r3, #0
3401a178:	d105      	bne.n	3401a186 <LL_ATON_RT_Main+0x2e>
3401a17a:	4b14      	ldr	r3, [pc, #80]	@ (3401a1cc <LL_ATON_RT_Main+0x74>)
3401a17c:	4a11      	ldr	r2, [pc, #68]	@ (3401a1c4 <LL_ATON_RT_Main+0x6c>)
3401a17e:	213d      	movs	r1, #61	@ 0x3d
3401a180:	4811      	ldr	r0, [pc, #68]	@ (3401a1c8 <LL_ATON_RT_Main+0x70>)
3401a182:	f001 f889 	bl	3401b298 <__assert_func>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
3401a186:	f000 fd13 	bl	3401abb0 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
3401a18a:	6878      	ldr	r0, [r7, #4]
3401a18c:	f000 fc98 	bl	3401aac0 <LL_ATON_RT_Init_Network>
  size_t epochCount = 0;
3401a190:	2300      	movs	r3, #0
3401a192:	60fb      	str	r3, [r7, #12]
  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
3401a194:	6878      	ldr	r0, [r7, #4]
3401a196:	f000 fd83 	bl	3401aca0 <LL_ATON_RT_RunEpochBlock>
3401a19a:	4603      	mov	r3, r0
3401a19c:	72fb      	strb	r3, [r7, #11]
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
3401a19e:	7afb      	ldrb	r3, [r7, #11]
3401a1a0:	2b01      	cmp	r3, #1
3401a1a2:	d100      	bne.n	3401a1a6 <LL_ATON_RT_Main+0x4e>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3401a1a4:	bf20      	wfe
    }
//    printf("Epoch: %5d, Return: %d\n\r", epochCount, ll_aton_rt_ret);
//    epochCount++;
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3401a1a6:	7afb      	ldrb	r3, [r7, #11]
3401a1a8:	2b02      	cmp	r3, #2
3401a1aa:	d1f3      	bne.n	3401a194 <LL_ATON_RT_Main+0x3c>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
3401a1ac:	6878      	ldr	r0, [r7, #4]
3401a1ae:	f000 fcc1 	bl	3401ab34 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3401a1b2:	f000 fd59 	bl	3401ac68 <LL_ATON_RT_RuntimeDeInit>

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3401a1b6:	bf00      	nop
3401a1b8:	3710      	adds	r7, #16
3401a1ba:	46bd      	mov	sp, r7
3401a1bc:	bd80      	pop	{r7, pc}
3401a1be:	bf00      	nop
3401a1c0:	3401eebc 	.word	0x3401eebc
3401a1c4:	3401f9e4 	.word	0x3401f9e4
3401a1c8:	3401eedc 	.word	0x3401eedc
3401a1cc:	3401ef74 	.word	0x3401ef74

3401a1d0 <__NVIC_EnableIRQ>:
{
3401a1d0:	b480      	push	{r7}
3401a1d2:	b083      	sub	sp, #12
3401a1d4:	af00      	add	r7, sp, #0
3401a1d6:	4603      	mov	r3, r0
3401a1d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3401a1da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a1de:	2b00      	cmp	r3, #0
3401a1e0:	db0b      	blt.n	3401a1fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401a1e2:	88fb      	ldrh	r3, [r7, #6]
3401a1e4:	f003 021f 	and.w	r2, r3, #31
3401a1e8:	4907      	ldr	r1, [pc, #28]	@ (3401a208 <__NVIC_EnableIRQ+0x38>)
3401a1ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a1ee:	095b      	lsrs	r3, r3, #5
3401a1f0:	2001      	movs	r0, #1
3401a1f2:	fa00 f202 	lsl.w	r2, r0, r2
3401a1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3401a1fa:	bf00      	nop
3401a1fc:	370c      	adds	r7, #12
3401a1fe:	46bd      	mov	sp, r7
3401a200:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a204:	4770      	bx	lr
3401a206:	bf00      	nop
3401a208:	e000e100 	.word	0xe000e100

3401a20c <__NVIC_DisableIRQ>:
{
3401a20c:	b480      	push	{r7}
3401a20e:	b083      	sub	sp, #12
3401a210:	af00      	add	r7, sp, #0
3401a212:	4603      	mov	r3, r0
3401a214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
3401a216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a21a:	2b00      	cmp	r3, #0
3401a21c:	db12      	blt.n	3401a244 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401a21e:	88fb      	ldrh	r3, [r7, #6]
3401a220:	f003 021f 	and.w	r2, r3, #31
3401a224:	490a      	ldr	r1, [pc, #40]	@ (3401a250 <__NVIC_DisableIRQ+0x44>)
3401a226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
3401a22a:	095b      	lsrs	r3, r3, #5
3401a22c:	2001      	movs	r0, #1
3401a22e:	fa00 f202 	lsl.w	r2, r0, r2
3401a232:	3320      	adds	r3, #32
3401a234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
3401a238:	f3bf 8f4f 	dsb	sy
}
3401a23c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3401a23e:	f3bf 8f6f 	isb	sy
}
3401a242:	bf00      	nop
}
3401a244:	bf00      	nop
3401a246:	370c      	adds	r7, #12
3401a248:	46bd      	mov	sp, r7
3401a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a24e:	4770      	bx	lr
3401a250:	e000e100 	.word	0xe000e100

3401a254 <EpochBlock_IsLastEpochBlock>:
  /**
   * @}
   */

  static inline bool EpochBlock_IsLastEpochBlock(const EpochBlock_ItemTypeDef *eb)
  {
3401a254:	b480      	push	{r7}
3401a256:	b083      	sub	sp, #12
3401a258:	af00      	add	r7, sp, #0
3401a25a:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_last_eb) != 0);
3401a25c:	687b      	ldr	r3, [r7, #4]
3401a25e:	8a1b      	ldrh	r3, [r3, #16]
3401a260:	f003 0308 	and.w	r3, r3, #8
3401a264:	2b00      	cmp	r3, #0
3401a266:	bf14      	ite	ne
3401a268:	2301      	movne	r3, #1
3401a26a:	2300      	moveq	r3, #0
3401a26c:	b2db      	uxtb	r3, r3
  }
3401a26e:	4618      	mov	r0, r3
3401a270:	370c      	adds	r7, #12
3401a272:	46bd      	mov	sp, r7
3401a274:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a278:	4770      	bx	lr

3401a27a <EpochBlock_IsEpochStart>:

  static inline bool EpochBlock_IsEpochStart(const EpochBlock_ItemTypeDef *eb)
  {
3401a27a:	b480      	push	{r7}
3401a27c:	b083      	sub	sp, #12
3401a27e:	af00      	add	r7, sp, #0
3401a280:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3401a282:	687b      	ldr	r3, [r7, #4]
3401a284:	8a1b      	ldrh	r3, [r3, #16]
3401a286:	f003 0301 	and.w	r3, r3, #1
3401a28a:	2b00      	cmp	r3, #0
3401a28c:	bf14      	ite	ne
3401a28e:	2301      	movne	r3, #1
3401a290:	2300      	moveq	r3, #0
3401a292:	b2db      	uxtb	r3, r3
  }
3401a294:	4618      	mov	r0, r3
3401a296:	370c      	adds	r7, #12
3401a298:	46bd      	mov	sp, r7
3401a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a29e:	4770      	bx	lr

3401a2a0 <EpochBlock_IsEpochBlob>:
  {
    return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
  }

  static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
  {
3401a2a0:	b480      	push	{r7}
3401a2a2:	b083      	sub	sp, #12
3401a2a4:	af00      	add	r7, sp, #0
3401a2a6:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_blob) != 0);
3401a2a8:	687b      	ldr	r3, [r7, #4]
3401a2aa:	8a1b      	ldrh	r3, [r3, #16]
3401a2ac:	f003 0304 	and.w	r3, r3, #4
3401a2b0:	2b00      	cmp	r3, #0
3401a2b2:	bf14      	ite	ne
3401a2b4:	2301      	movne	r3, #1
3401a2b6:	2300      	moveq	r3, #0
3401a2b8:	b2db      	uxtb	r3, r3
  }
3401a2ba:	4618      	mov	r0, r3
3401a2bc:	370c      	adds	r7, #12
3401a2be:	46bd      	mov	sp, r7
3401a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a2c4:	4770      	bx	lr

3401a2c6 <EpochBlock_IsEpochPureHW>:
  {
    return ((eb->flags & EpochBlock_Flags_pure_sw) != 0);
  }

  static inline bool EpochBlock_IsEpochPureHW(const EpochBlock_ItemTypeDef *eb)
  {
3401a2c6:	b480      	push	{r7}
3401a2c8:	b083      	sub	sp, #12
3401a2ca:	af00      	add	r7, sp, #0
3401a2cc:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
3401a2ce:	687b      	ldr	r3, [r7, #4]
3401a2d0:	8a1b      	ldrh	r3, [r3, #16]
3401a2d2:	f003 0310 	and.w	r3, r3, #16
3401a2d6:	2b00      	cmp	r3, #0
3401a2d8:	bf14      	ite	ne
3401a2da:	2301      	movne	r3, #1
3401a2dc:	2300      	moveq	r3, #0
3401a2de:	b2db      	uxtb	r3, r3
  }
3401a2e0:	4618      	mov	r0, r3
3401a2e2:	370c      	adds	r7, #12
3401a2e4:	46bd      	mov	sp, r7
3401a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a2ea:	4770      	bx	lr

3401a2ec <EpochBlock_IsEpochHybrid>:

  static inline bool EpochBlock_IsEpochHybrid(const EpochBlock_ItemTypeDef *eb)
  {
3401a2ec:	b480      	push	{r7}
3401a2ee:	b083      	sub	sp, #12
3401a2f0:	af00      	add	r7, sp, #0
3401a2f2:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_hybrid) != 0);
3401a2f4:	687b      	ldr	r3, [r7, #4]
3401a2f6:	8a1b      	ldrh	r3, [r3, #16]
3401a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401a2fc:	2b00      	cmp	r3, #0
3401a2fe:	bf14      	ite	ne
3401a300:	2301      	movne	r3, #1
3401a302:	2300      	moveq	r3, #0
3401a304:	b2db      	uxtb	r3, r3
  }
3401a306:	4618      	mov	r0, r3
3401a308:	370c      	adds	r7, #12
3401a30a:	46bd      	mov	sp, r7
3401a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a310:	4770      	bx	lr

3401a312 <EpochBlock_IsEpochInternal>:

  static inline bool EpochBlock_IsEpochInternal(const EpochBlock_ItemTypeDef *eb)
  {
3401a312:	b480      	push	{r7}
3401a314:	b083      	sub	sp, #12
3401a316:	af00      	add	r7, sp, #0
3401a318:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
3401a31a:	687b      	ldr	r3, [r7, #4]
3401a31c:	8a1b      	ldrh	r3, [r3, #16]
3401a31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3401a322:	2b00      	cmp	r3, #0
3401a324:	bf14      	ite	ne
3401a326:	2301      	movne	r3, #1
3401a328:	2300      	moveq	r3, #0
3401a32a:	b2db      	uxtb	r3, r3
  }
3401a32c:	4618      	mov	r0, r3
3401a32e:	370c      	adds	r7, #12
3401a330:	46bd      	mov	sp, r7
3401a332:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a336:	4770      	bx	lr

3401a338 <EpochBlock_EpochControllerUnit>:

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
3401a338:	b580      	push	{r7, lr}
3401a33a:	b082      	sub	sp, #8
3401a33c:	af00      	add	r7, sp, #0
3401a33e:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3401a340:	6878      	ldr	r0, [r7, #4]
3401a342:	f7ff ffad 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401a346:	4603      	mov	r3, r0
3401a348:	2b00      	cmp	r3, #0
3401a34a:	d106      	bne.n	3401a35a <EpochBlock_EpochControllerUnit+0x22>
3401a34c:	4b06      	ldr	r3, [pc, #24]	@ (3401a368 <EpochBlock_EpochControllerUnit+0x30>)
3401a34e:	4a07      	ldr	r2, [pc, #28]	@ (3401a36c <EpochBlock_EpochControllerUnit+0x34>)
3401a350:	f240 212f 	movw	r1, #559	@ 0x22f
3401a354:	4806      	ldr	r0, [pc, #24]	@ (3401a370 <EpochBlock_EpochControllerUnit+0x38>)
3401a356:	f000 ff9f 	bl	3401b298 <__assert_func>
    return eb->wait_mask;
3401a35a:	687b      	ldr	r3, [r7, #4]
3401a35c:	68db      	ldr	r3, [r3, #12]
  }
3401a35e:	4618      	mov	r0, r3
3401a360:	3708      	adds	r7, #8
3401a362:	46bd      	mov	sp, r7
3401a364:	bd80      	pop	{r7, pc}
3401a366:	bf00      	nop
3401a368:	3401efa0 	.word	0x3401efa0
3401a36c:	3401fb04 	.word	0x3401fb04
3401a370:	3401efbc 	.word	0x3401efbc

3401a374 <EpochBlock_EpochBlobAddr>:

  static inline uintptr_t EpochBlock_EpochBlobAddr(const EpochBlock_ItemTypeDef *eb)
  {
3401a374:	b580      	push	{r7, lr}
3401a376:	b082      	sub	sp, #8
3401a378:	af00      	add	r7, sp, #0
3401a37a:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
3401a37c:	6878      	ldr	r0, [r7, #4]
3401a37e:	f7ff ff8f 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401a382:	4603      	mov	r3, r0
3401a384:	2b00      	cmp	r3, #0
3401a386:	d106      	bne.n	3401a396 <EpochBlock_EpochBlobAddr+0x22>
3401a388:	4b06      	ldr	r3, [pc, #24]	@ (3401a3a4 <EpochBlock_EpochBlobAddr+0x30>)
3401a38a:	4a07      	ldr	r2, [pc, #28]	@ (3401a3a8 <EpochBlock_EpochBlobAddr+0x34>)
3401a38c:	f240 2135 	movw	r1, #565	@ 0x235
3401a390:	4806      	ldr	r0, [pc, #24]	@ (3401a3ac <EpochBlock_EpochBlobAddr+0x38>)
3401a392:	f000 ff81 	bl	3401b298 <__assert_func>
    return eb->blob_address;
3401a396:	687b      	ldr	r3, [r7, #4]
3401a398:	689b      	ldr	r3, [r3, #8]
  }
3401a39a:	4618      	mov	r0, r3
3401a39c:	3708      	adds	r7, #8
3401a39e:	46bd      	mov	sp, r7
3401a3a0:	bd80      	pop	{r7, pc}
3401a3a2:	bf00      	nop
3401a3a4:	3401efa0 	.word	0x3401efa0
3401a3a8:	3401fb24 	.word	0x3401fb24
3401a3ac:	3401efbc 	.word	0x3401efbc

3401a3b0 <__ll_set_aton_owner>:
  typedef EpochBlock_ItemTypeDef LL_ATON_RT_EpochBlockItem_t;

  /*** Helper Functions ***/

  static inline void __ll_set_aton_owner(NN_Instance_TypeDef *new_owner)
  {
3401a3b0:	b580      	push	{r7, lr}
3401a3b2:	b082      	sub	sp, #8
3401a3b4:	af00      	add	r7, sp, #0
3401a3b6:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
3401a3b8:	4b12      	ldr	r3, [pc, #72]	@ (3401a404 <__ll_set_aton_owner+0x54>)
3401a3ba:	681b      	ldr	r3, [r3, #0]
3401a3bc:	687a      	ldr	r2, [r7, #4]
3401a3be:	429a      	cmp	r2, r3
3401a3c0:	d105      	bne.n	3401a3ce <__ll_set_aton_owner+0x1e>
3401a3c2:	4b11      	ldr	r3, [pc, #68]	@ (3401a408 <__ll_set_aton_owner+0x58>)
3401a3c4:	4a11      	ldr	r2, [pc, #68]	@ (3401a40c <__ll_set_aton_owner+0x5c>)
3401a3c6:	2131      	movs	r1, #49	@ 0x31
3401a3c8:	4811      	ldr	r0, [pc, #68]	@ (3401a410 <__ll_set_aton_owner+0x60>)
3401a3ca:	f000 ff65 	bl	3401b298 <__assert_func>

    LL_ATON_OSAL_LOCK_ATON();

    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
3401a3ce:	4b0d      	ldr	r3, [pc, #52]	@ (3401a404 <__ll_set_aton_owner+0x54>)
3401a3d0:	681b      	ldr	r3, [r3, #0]
3401a3d2:	2b00      	cmp	r3, #0
3401a3d4:	d005      	beq.n	3401a3e2 <__ll_set_aton_owner+0x32>
3401a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (3401a414 <__ll_set_aton_owner+0x64>)
3401a3d8:	4a0c      	ldr	r2, [pc, #48]	@ (3401a40c <__ll_set_aton_owner+0x5c>)
3401a3da:	2135      	movs	r1, #53	@ 0x35
3401a3dc:	480c      	ldr	r0, [pc, #48]	@ (3401a410 <__ll_set_aton_owner+0x60>)
3401a3de:	f000 ff5b 	bl	3401b298 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3401a3e2:	4b0d      	ldr	r3, [pc, #52]	@ (3401a418 <__ll_set_aton_owner+0x68>)
3401a3e4:	681b      	ldr	r3, [r3, #0]
3401a3e6:	2b00      	cmp	r3, #0
3401a3e8:	d005      	beq.n	3401a3f6 <__ll_set_aton_owner+0x46>
3401a3ea:	4b0c      	ldr	r3, [pc, #48]	@ (3401a41c <__ll_set_aton_owner+0x6c>)
3401a3ec:	4a07      	ldr	r2, [pc, #28]	@ (3401a40c <__ll_set_aton_owner+0x5c>)
3401a3ee:	2139      	movs	r1, #57	@ 0x39
3401a3f0:	4807      	ldr	r0, [pc, #28]	@ (3401a410 <__ll_set_aton_owner+0x60>)
3401a3f2:	f000 ff51 	bl	3401b298 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = new_owner;
3401a3f6:	4a03      	ldr	r2, [pc, #12]	@ (3401a404 <__ll_set_aton_owner+0x54>)
3401a3f8:	687b      	ldr	r3, [r7, #4]
3401a3fa:	6013      	str	r3, [r2, #0]
  }
3401a3fc:	bf00      	nop
3401a3fe:	3708      	adds	r7, #8
3401a400:	46bd      	mov	sp, r7
3401a402:	bd80      	pop	{r7, pc}
3401a404:	34020d44 	.word	0x34020d44
3401a408:	3401f05c 	.word	0x3401f05c
3401a40c:	3401fad4 	.word	0x3401fad4
3401a410:	3401f084 	.word	0x3401f084
3401a414:	3401f11c 	.word	0x3401f11c
3401a418:	34020d48 	.word	0x34020d48
3401a41c:	3401f148 	.word	0x3401f148

3401a420 <__ll_clear_aton_owner>:

  static inline void __ll_clear_aton_owner(NN_Instance_TypeDef *current_owner)
  {
3401a420:	b580      	push	{r7, lr}
3401a422:	b082      	sub	sp, #8
3401a424:	af00      	add	r7, sp, #0
3401a426:	6078      	str	r0, [r7, #4]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
3401a428:	4b0d      	ldr	r3, [pc, #52]	@ (3401a460 <__ll_clear_aton_owner+0x40>)
3401a42a:	681b      	ldr	r3, [r3, #0]
3401a42c:	687a      	ldr	r2, [r7, #4]
3401a42e:	429a      	cmp	r2, r3
3401a430:	d005      	beq.n	3401a43e <__ll_clear_aton_owner+0x1e>
3401a432:	4b0c      	ldr	r3, [pc, #48]	@ (3401a464 <__ll_clear_aton_owner+0x44>)
3401a434:	4a0c      	ldr	r2, [pc, #48]	@ (3401a468 <__ll_clear_aton_owner+0x48>)
3401a436:	2142      	movs	r1, #66	@ 0x42
3401a438:	480c      	ldr	r0, [pc, #48]	@ (3401a46c <__ll_clear_aton_owner+0x4c>)
3401a43a:	f000 ff2d 	bl	3401b298 <__assert_func>

#ifndef NDEBUG
    extern uint32_t volatile __ll_current_wait_mask;
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
3401a43e:	4b0c      	ldr	r3, [pc, #48]	@ (3401a470 <__ll_clear_aton_owner+0x50>)
3401a440:	681b      	ldr	r3, [r3, #0]
3401a442:	2b00      	cmp	r3, #0
3401a444:	d005      	beq.n	3401a452 <__ll_clear_aton_owner+0x32>
3401a446:	4b0b      	ldr	r3, [pc, #44]	@ (3401a474 <__ll_clear_aton_owner+0x54>)
3401a448:	4a07      	ldr	r2, [pc, #28]	@ (3401a468 <__ll_clear_aton_owner+0x48>)
3401a44a:	2146      	movs	r1, #70	@ 0x46
3401a44c:	4807      	ldr	r0, [pc, #28]	@ (3401a46c <__ll_clear_aton_owner+0x4c>)
3401a44e:	f000 ff23 	bl	3401b298 <__assert_func>
#endif // NDEBUG

    __ll_current_aton_ip_owner = NULL;
3401a452:	4b03      	ldr	r3, [pc, #12]	@ (3401a460 <__ll_clear_aton_owner+0x40>)
3401a454:	2200      	movs	r2, #0
3401a456:	601a      	str	r2, [r3, #0]
    LL_ATON_OSAL_UNLOCK_ATON();
  }
3401a458:	bf00      	nop
3401a45a:	3708      	adds	r7, #8
3401a45c:	46bd      	mov	sp, r7
3401a45e:	bd80      	pop	{r7, pc}
3401a460:	34020d44 	.word	0x34020d44
3401a464:	3401f164 	.word	0x3401f164
3401a468:	3401fa34 	.word	0x3401fa34
3401a46c:	3401f084 	.word	0x3401f084
3401a470:	34020d48 	.word	0x34020d48
3401a474:	3401f148 	.word	0x3401f148

3401a478 <__LL_ATON_RT_Start_AtoNN_Epoch>:
   *  Note: the following function may only be called at the beginning of
   *       `LL_ATON_Start_EpochBlock<n>()` functions, assuming also that at that point
   *       no streaming engine interrupts might trigger (anymore)!
   **/
  static inline void __LL_ATON_RT_Start_AtoNN_Epoch(NN_Instance_TypeDef *nn_instance)
  {
3401a478:	b580      	push	{r7, lr}
3401a47a:	b082      	sub	sp, #8
3401a47c:	af00      	add	r7, sp, #0
3401a47e:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(nn_instance != NULL);
3401a480:	687b      	ldr	r3, [r7, #4]
3401a482:	2b00      	cmp	r3, #0
3401a484:	d105      	bne.n	3401a492 <__LL_ATON_RT_Start_AtoNN_Epoch+0x1a>
3401a486:	4b0a      	ldr	r3, [pc, #40]	@ (3401a4b0 <__LL_ATON_RT_Start_AtoNN_Epoch+0x38>)
3401a488:	4a0a      	ldr	r2, [pc, #40]	@ (3401a4b4 <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
3401a48a:	2154      	movs	r1, #84	@ 0x54
3401a48c:	480a      	ldr	r0, [pc, #40]	@ (3401a4b8 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
3401a48e:	f000 ff03 	bl	3401b298 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3401a492:	687b      	ldr	r3, [r7, #4]
3401a494:	69db      	ldr	r3, [r3, #28]
3401a496:	2b00      	cmp	r3, #0
3401a498:	d005      	beq.n	3401a4a6 <__LL_ATON_RT_Start_AtoNN_Epoch+0x2e>
3401a49a:	4b08      	ldr	r3, [pc, #32]	@ (3401a4bc <__LL_ATON_RT_Start_AtoNN_Epoch+0x44>)
3401a49c:	4a05      	ldr	r2, [pc, #20]	@ (3401a4b4 <__LL_ATON_RT_Start_AtoNN_Epoch+0x3c>)
3401a49e:	2156      	movs	r1, #86	@ 0x56
3401a4a0:	4805      	ldr	r0, [pc, #20]	@ (3401a4b8 <__LL_ATON_RT_Start_AtoNN_Epoch+0x40>)
3401a4a2:	f000 fef9 	bl	3401b298 <__assert_func>
                   0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                         // cleared at this point in time!
#endif
  }
3401a4a6:	bf00      	nop
3401a4a8:	3708      	adds	r7, #8
3401a4aa:	46bd      	mov	sp, r7
3401a4ac:	bd80      	pop	{r7, pc}
3401a4ae:	bf00      	nop
3401a4b0:	3401f190 	.word	0x3401f190
3401a4b4:	3401fab4 	.word	0x3401fab4
3401a4b8:	3401f084 	.word	0x3401f084
3401a4bc:	3401f1ac 	.word	0x3401f1ac

3401a4c0 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
3401a4c0:	b580      	push	{r7, lr}
3401a4c2:	b082      	sub	sp, #8
3401a4c4:	af00      	add	r7, sp, #0
3401a4c6:	6078      	str	r0, [r7, #4]
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a4c8:	4b0a      	ldr	r3, [pc, #40]	@ (3401a4f4 <__LL_ATON_RT_SetWaitMask+0x34>)
3401a4ca:	681b      	ldr	r3, [r3, #0]
3401a4cc:	2b00      	cmp	r3, #0
3401a4ce:	d105      	bne.n	3401a4dc <__LL_ATON_RT_SetWaitMask+0x1c>
3401a4d0:	4b09      	ldr	r3, [pc, #36]	@ (3401a4f8 <__LL_ATON_RT_SetWaitMask+0x38>)
3401a4d2:	4a0a      	ldr	r2, [pc, #40]	@ (3401a4fc <__LL_ATON_RT_SetWaitMask+0x3c>)
3401a4d4:	2175      	movs	r1, #117	@ 0x75
3401a4d6:	480a      	ldr	r0, [pc, #40]	@ (3401a500 <__LL_ATON_RT_SetWaitMask+0x40>)
3401a4d8:	f000 fede 	bl	3401b298 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
3401a4dc:	4a09      	ldr	r2, [pc, #36]	@ (3401a504 <__LL_ATON_RT_SetWaitMask+0x44>)
3401a4de:	687b      	ldr	r3, [r7, #4]
3401a4e0:	6013      	str	r3, [r2, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3401a4e2:	4a09      	ldr	r2, [pc, #36]	@ (3401a508 <__LL_ATON_RT_SetWaitMask+0x48>)
3401a4e4:	687b      	ldr	r3, [r7, #4]
3401a4e6:	43db      	mvns	r3, r3
3401a4e8:	6013      	str	r3, [r2, #0]
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
3401a4ea:	bf00      	nop
3401a4ec:	3708      	adds	r7, #8
3401a4ee:	46bd      	mov	sp, r7
3401a4f0:	bd80      	pop	{r7, pc}
3401a4f2:	bf00      	nop
3401a4f4:	34020d44 	.word	0x34020d44
3401a4f8:	3401f1dc 	.word	0x3401f1dc
3401a4fc:	3401fae8 	.word	0x3401fae8
3401a500:	3401f084 	.word	0x3401f084
3401a504:	34020d48 	.word	0x34020d48
3401a508:	580e1024 	.word	0x580e1024

3401a50c <__LL_ATON_RT_RetFromLibEpochBlockArray>:

  /* return from inserted epoch block */
  static inline void __LL_ATON_RT_RetFromLibEpochBlockArray(bool unlock, NN_Instance_TypeDef *nn_instance)
  {
3401a50c:	b580      	push	{r7, lr}
3401a50e:	b082      	sub	sp, #8
3401a510:	af00      	add	r7, sp, #0
3401a512:	4603      	mov	r3, r0
3401a514:	6039      	str	r1, [r7, #0]
3401a516:	71fb      	strb	r3, [r7, #7]
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;

    if (!unlock)
3401a518:	79fb      	ldrb	r3, [r7, #7]
3401a51a:	f083 0301 	eor.w	r3, r3, #1
3401a51e:	b2db      	uxtb	r3, r3
3401a520:	2b00      	cmp	r3, #0
3401a522:	d015      	beq.n	3401a550 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x44>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a524:	4b38      	ldr	r3, [pc, #224]	@ (3401a608 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a526:	681b      	ldr	r3, [r3, #0]
3401a528:	2b00      	cmp	r3, #0
3401a52a:	d105      	bne.n	3401a538 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x2c>
3401a52c:	4b37      	ldr	r3, [pc, #220]	@ (3401a60c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
3401a52e:	4a38      	ldr	r2, [pc, #224]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a530:	2191      	movs	r1, #145	@ 0x91
3401a532:	4838      	ldr	r0, [pc, #224]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a534:	f000 feb0 	bl	3401b298 <__assert_func>
      LL_ATON_ASSERT(nn_instance == NULL);
3401a538:	683b      	ldr	r3, [r7, #0]
3401a53a:	2b00      	cmp	r3, #0
3401a53c:	d005      	beq.n	3401a54a <__LL_ATON_RT_RetFromLibEpochBlockArray+0x3e>
3401a53e:	4b36      	ldr	r3, [pc, #216]	@ (3401a618 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x10c>)
3401a540:	4a33      	ldr	r2, [pc, #204]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a542:	2192      	movs	r1, #146	@ 0x92
3401a544:	4833      	ldr	r0, [pc, #204]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a546:	f000 fea7 	bl	3401b298 <__assert_func>

      nn_instance = __ll_current_aton_ip_owner;
3401a54a:	4b2f      	ldr	r3, [pc, #188]	@ (3401a608 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a54c:	681b      	ldr	r3, [r3, #0]
3401a54e:	603b      	str	r3, [r7, #0]
    }

    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401a550:	4b2d      	ldr	r3, [pc, #180]	@ (3401a608 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a552:	681b      	ldr	r3, [r3, #0]
3401a554:	2b00      	cmp	r3, #0
3401a556:	d105      	bne.n	3401a564 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x58>
3401a558:	4b2c      	ldr	r3, [pc, #176]	@ (3401a60c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x100>)
3401a55a:	4a2d      	ldr	r2, [pc, #180]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a55c:	2197      	movs	r1, #151	@ 0x97
3401a55e:	482d      	ldr	r0, [pc, #180]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a560:	f000 fe9a 	bl	3401b298 <__assert_func>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
3401a564:	79fb      	ldrb	r3, [r7, #7]
3401a566:	2b00      	cmp	r3, #0
3401a568:	d006      	beq.n	3401a578 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x6c>
3401a56a:	683b      	ldr	r3, [r7, #0]
3401a56c:	685b      	ldr	r3, [r3, #4]
3401a56e:	4618      	mov	r0, r3
3401a570:	f7ff fe70 	bl	3401a254 <EpochBlock_IsLastEpochBlock>
3401a574:	4603      	mov	r3, r0
3401a576:	e005      	b.n	3401a584 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x78>
3401a578:	683b      	ldr	r3, [r7, #0]
3401a57a:	685b      	ldr	r3, [r3, #4]
3401a57c:	4618      	mov	r0, r3
3401a57e:	f7ff fec8 	bl	3401a312 <EpochBlock_IsEpochInternal>
3401a582:	4603      	mov	r3, r0
3401a584:	2b00      	cmp	r3, #0
3401a586:	d105      	bne.n	3401a594 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x88>
3401a588:	4b24      	ldr	r3, [pc, #144]	@ (3401a61c <__LL_ATON_RT_RetFromLibEpochBlockArray+0x110>)
3401a58a:	4a21      	ldr	r2, [pc, #132]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a58c:	2198      	movs	r1, #152	@ 0x98
3401a58e:	4821      	ldr	r0, [pc, #132]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a590:	f000 fe82 	bl	3401b298 <__assert_func>
                          : EpochBlock_IsEpochInternal(nn_instance->exec_state.current_epoch_block));
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
3401a594:	683b      	ldr	r3, [r7, #0]
3401a596:	691b      	ldr	r3, [r3, #16]
3401a598:	4618      	mov	r0, r3
3401a59a:	f7ff fea7 	bl	3401a2ec <EpochBlock_IsEpochHybrid>
3401a59e:	4603      	mov	r3, r0
3401a5a0:	2b00      	cmp	r3, #0
3401a5a2:	d105      	bne.n	3401a5b0 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xa4>
3401a5a4:	4b1e      	ldr	r3, [pc, #120]	@ (3401a620 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x114>)
3401a5a6:	4a1a      	ldr	r2, [pc, #104]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a5a8:	219a      	movs	r1, #154	@ 0x9a
3401a5aa:	481a      	ldr	r0, [pc, #104]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a5ac:	f000 fe74 	bl	3401b298 <__assert_func>

    /* Clear owner */
    if (unlock)
3401a5b0:	79fb      	ldrb	r3, [r7, #7]
3401a5b2:	2b00      	cmp	r3, #0
3401a5b4:	d004      	beq.n	3401a5c0 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xb4>
    {
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
3401a5b6:	4b14      	ldr	r3, [pc, #80]	@ (3401a608 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xfc>)
3401a5b8:	681b      	ldr	r3, [r3, #0]
3401a5ba:	4618      	mov	r0, r3
3401a5bc:	f7ff ff30 	bl	3401a420 <__ll_clear_aton_owner>
    }

    /* set old context */
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3401a5c0:	683b      	ldr	r3, [r7, #0]
3401a5c2:	68db      	ldr	r3, [r3, #12]
3401a5c4:	2b00      	cmp	r3, #0
3401a5c6:	d005      	beq.n	3401a5d4 <__LL_ATON_RT_RetFromLibEpochBlockArray+0xc8>
3401a5c8:	4b16      	ldr	r3, [pc, #88]	@ (3401a624 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x118>)
3401a5ca:	4a11      	ldr	r2, [pc, #68]	@ (3401a610 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x104>)
3401a5cc:	21a3      	movs	r1, #163	@ 0xa3
3401a5ce:	4811      	ldr	r0, [pc, #68]	@ (3401a614 <__LL_ATON_RT_RetFromLibEpochBlockArray+0x108>)
3401a5d0:	f000 fe62 	bl	3401b298 <__assert_func>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3401a5d4:	683b      	ldr	r3, [r7, #0]
3401a5d6:	691a      	ldr	r2, [r3, #16]
3401a5d8:	683b      	ldr	r3, [r7, #0]
3401a5da:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3401a5dc:	683b      	ldr	r3, [r7, #0]
3401a5de:	695a      	ldr	r2, [r3, #20]
3401a5e0:	683b      	ldr	r3, [r7, #0]
3401a5e2:	609a      	str	r2, [r3, #8]

#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3401a5e4:	683b      	ldr	r3, [r7, #0]
3401a5e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3401a5e8:	683b      	ldr	r3, [r7, #0]
3401a5ea:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset saved context */
    nn_instance->exec_state.saved_current_epoch_block = NULL;
3401a5ec:	683b      	ldr	r3, [r7, #0]
3401a5ee:	2200      	movs	r2, #0
3401a5f0:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
3401a5f2:	683b      	ldr	r3, [r7, #0]
3401a5f4:	2200      	movs	r2, #0
3401a5f6:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401a5f8:	683b      	ldr	r3, [r7, #0]
3401a5fa:	2200      	movs	r2, #0
3401a5fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
  }
3401a5fe:	bf00      	nop
3401a600:	3708      	adds	r7, #8
3401a602:	46bd      	mov	sp, r7
3401a604:	bd80      	pop	{r7, pc}
3401a606:	bf00      	nop
3401a608:	34020d44 	.word	0x34020d44
3401a60c:	3401f1dc 	.word	0x3401f1dc
3401a610:	3401fa68 	.word	0x3401fa68
3401a614:	3401f084 	.word	0x3401f084
3401a618:	3401f208 	.word	0x3401f208
3401a61c:	3401f224 	.word	0x3401f224
3401a620:	3401f2c0 	.word	0x3401f2c0
3401a624:	3401f30c 	.word	0x3401f30c

3401a628 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
3401a628:	b480      	push	{r7}
3401a62a:	af00      	add	r7, sp, #0
3401a62c:	bf00      	nop
3401a62e:	46bd      	mov	sp, r7
3401a630:	f85d 7b04 	ldr.w	r7, [sp], #4
3401a634:	4770      	bx	lr

3401a636 <__LL_ATON_RT_CntEpochBlocks>:

/*** Helper Functions ***/

#ifndef NDEBUG
static uint32_t __LL_ATON_RT_CntEpochBlocks(const LL_ATON_RT_EpochBlockItem_t *list)
{
3401a636:	b580      	push	{r7, lr}
3401a638:	b084      	sub	sp, #16
3401a63a:	af00      	add	r7, sp, #0
3401a63c:	6078      	str	r0, [r7, #4]
  int i = 0;
3401a63e:	2300      	movs	r3, #0
3401a640:	60fb      	str	r3, [r7, #12]

  if (list != NULL)
3401a642:	687b      	ldr	r3, [r7, #4]
3401a644:	2b00      	cmp	r3, #0
3401a646:	d011      	beq.n	3401a66c <__LL_ATON_RT_CntEpochBlocks+0x36>
  {
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3401a648:	2301      	movs	r3, #1
3401a64a:	60fb      	str	r3, [r7, #12]
3401a64c:	e005      	b.n	3401a65a <__LL_ATON_RT_CntEpochBlocks+0x24>
    { // Note: also terminating empty epoch block is counted
      list++;
3401a64e:	687b      	ldr	r3, [r7, #4]
3401a650:	3314      	adds	r3, #20
3401a652:	607b      	str	r3, [r7, #4]
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
3401a654:	68fb      	ldr	r3, [r7, #12]
3401a656:	3301      	adds	r3, #1
3401a658:	60fb      	str	r3, [r7, #12]
3401a65a:	6878      	ldr	r0, [r7, #4]
3401a65c:	f7ff fdfa 	bl	3401a254 <EpochBlock_IsLastEpochBlock>
3401a660:	4603      	mov	r3, r0
3401a662:	f083 0301 	eor.w	r3, r3, #1
3401a666:	b2db      	uxtb	r3, r3
3401a668:	2b00      	cmp	r3, #0
3401a66a:	d1f0      	bne.n	3401a64e <__LL_ATON_RT_CntEpochBlocks+0x18>
    }
  }

  return i;
3401a66c:	68fb      	ldr	r3, [r7, #12]
}
3401a66e:	4618      	mov	r0, r3
3401a670:	3710      	adds	r7, #16
3401a672:	46bd      	mov	sp, r7
3401a674:	bd80      	pop	{r7, pc}
	...

3401a678 <__LL_ATON_RT_ExecStartEpochBlock>:
#endif

static inline void __LL_ATON_RT_ExecStartEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                    NN_Instance_TypeDef *nn_instance)
{
3401a678:	b580      	push	{r7, lr}
3401a67a:	b086      	sub	sp, #24
3401a67c:	af00      	add	r7, sp, #0
3401a67e:	6078      	str	r0, [r7, #4]
3401a680:	6039      	str	r1, [r7, #0]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3401a682:	683b      	ldr	r3, [r7, #0]
3401a684:	68db      	ldr	r3, [r3, #12]
3401a686:	2b00      	cmp	r3, #0
3401a688:	d005      	beq.n	3401a696 <__LL_ATON_RT_ExecStartEpochBlock+0x1e>
3401a68a:	4b4a      	ldr	r3, [pc, #296]	@ (3401a7b4 <__LL_ATON_RT_ExecStartEpochBlock+0x13c>)
3401a68c:	4a4a      	ldr	r2, [pc, #296]	@ (3401a7b8 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a68e:	2161      	movs	r1, #97	@ 0x61
3401a690:	484a      	ldr	r0, [pc, #296]	@ (3401a7bc <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a692:	f000 fe01 	bl	3401b298 <__assert_func>

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a696:	683b      	ldr	r3, [r7, #0]
3401a698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a69a:	2b00      	cmp	r3, #0
3401a69c:	d005      	beq.n	3401a6aa <__LL_ATON_RT_ExecStartEpochBlock+0x32>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3401a69e:	683b      	ldr	r3, [r7, #0]
3401a6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a6a2:	687a      	ldr	r2, [r7, #4]
3401a6a4:	6839      	ldr	r1, [r7, #0]
3401a6a6:	2000      	movs	r0, #0
3401a6a8:	4798      	blx	r3

  /* Is it the first epoch block in an AtoNN epoch? */
  if (EpochBlock_IsEpochStart(eb))
3401a6aa:	6878      	ldr	r0, [r7, #4]
3401a6ac:	f7ff fde5 	bl	3401a27a <EpochBlock_IsEpochStart>
3401a6b0:	4603      	mov	r3, r0
3401a6b2:	2b00      	cmp	r3, #0
3401a6b4:	d002      	beq.n	3401a6bc <__LL_ATON_RT_ExecStartEpochBlock+0x44>
  {
    __LL_ATON_RT_Start_AtoNN_Epoch(nn_instance);
3401a6b6:	6838      	ldr	r0, [r7, #0]
3401a6b8:	f7ff fede 	bl	3401a478 <__LL_ATON_RT_Start_AtoNN_Epoch>
  }

  /* Grab ATON IP lock in case not a pure SW or internal epoch */
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a6bc:	6878      	ldr	r0, [r7, #4]
3401a6be:	f7ff fe02 	bl	3401a2c6 <EpochBlock_IsEpochPureHW>
3401a6c2:	4603      	mov	r3, r0
3401a6c4:	2b00      	cmp	r3, #0
3401a6c6:	d105      	bne.n	3401a6d4 <__LL_ATON_RT_ExecStartEpochBlock+0x5c>
      EpochBlock_IsEpochHybrid(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
3401a6c8:	6878      	ldr	r0, [r7, #4]
3401a6ca:	f7ff fe0f 	bl	3401a2ec <EpochBlock_IsEpochHybrid>
3401a6ce:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a6d0:	2b00      	cmp	r3, #0
3401a6d2:	d002      	beq.n	3401a6da <__LL_ATON_RT_ExecStartEpochBlock+0x62>
  {
    __ll_set_aton_owner(nn_instance);
3401a6d4:	6838      	ldr	r0, [r7, #0]
3401a6d6:	f7ff fe6b 	bl	3401a3b0 <__ll_set_aton_owner>
  }

  if (!EpochBlock_IsEpochBlob(eb))
3401a6da:	6878      	ldr	r0, [r7, #4]
3401a6dc:	f7ff fde0 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401a6e0:	4603      	mov	r3, r0
3401a6e2:	f083 0301 	eor.w	r3, r3, #1
3401a6e6:	b2db      	uxtb	r3, r3
3401a6e8:	2b00      	cmp	r3, #0
3401a6ea:	d01c      	beq.n	3401a726 <__LL_ATON_RT_ExecStartEpochBlock+0xae>
  { // standard epoch block handling based on streaming engines
    /* set wait mask(s) in interrupt controller */
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
3401a6ec:	6878      	ldr	r0, [r7, #4]
3401a6ee:	f7ff fdea 	bl	3401a2c6 <EpochBlock_IsEpochPureHW>
3401a6f2:	4603      	mov	r3, r0
3401a6f4:	2b00      	cmp	r3, #0
3401a6f6:	d105      	bne.n	3401a704 <__LL_ATON_RT_ExecStartEpochBlock+0x8c>
3401a6f8:	6878      	ldr	r0, [r7, #4]
3401a6fa:	f7ff fe0a 	bl	3401a312 <EpochBlock_IsEpochInternal>
3401a6fe:	4603      	mov	r3, r0
3401a700:	2b00      	cmp	r3, #0
3401a702:	d014      	beq.n	3401a72e <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
    {
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
3401a704:	4b2e      	ldr	r3, [pc, #184]	@ (3401a7c0 <__LL_ATON_RT_ExecStartEpochBlock+0x148>)
3401a706:	681b      	ldr	r3, [r3, #0]
3401a708:	683a      	ldr	r2, [r7, #0]
3401a70a:	429a      	cmp	r2, r3
3401a70c:	d005      	beq.n	3401a71a <__LL_ATON_RT_ExecStartEpochBlock+0xa2>
3401a70e:	4b2d      	ldr	r3, [pc, #180]	@ (3401a7c4 <__LL_ATON_RT_ExecStartEpochBlock+0x14c>)
3401a710:	4a29      	ldr	r2, [pc, #164]	@ (3401a7b8 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a712:	2178      	movs	r1, #120	@ 0x78
3401a714:	4829      	ldr	r0, [pc, #164]	@ (3401a7bc <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a716:	f000 fdbf 	bl	3401b298 <__assert_func>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3401a71a:	687b      	ldr	r3, [r7, #4]
3401a71c:	68db      	ldr	r3, [r3, #12]
3401a71e:	4618      	mov	r0, r3
3401a720:	f7ff fece 	bl	3401a4c0 <__LL_ATON_RT_SetWaitMask>
3401a724:	e003      	b.n	3401a72e <__LL_ATON_RT_ExecStartEpochBlock+0xb6>
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM) &&                                                                                     \
    (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC) // Polling mode is not allowed/supported when using the epoch controller
    /* reset wait mask(s) in interrupt controller, but ignore stream engine completion event interrupts */
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
3401a726:	f240 30ff 	movw	r0, #1023	@ 0x3ff
3401a72a:	f7ff fec9 	bl	3401a4c0 <__LL_ATON_RT_SetWaitMask>
#endif // ATON_PLAT_HAS_FFLUSH
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM || LL_ATON_RT_POLLING
  }

  if (eb->start_epoch_block != NULL)
3401a72e:	687b      	ldr	r3, [r7, #4]
3401a730:	681b      	ldr	r3, [r3, #0]
3401a732:	2b00      	cmp	r3, #0
3401a734:	d003      	beq.n	3401a73e <__LL_ATON_RT_ExecStartEpochBlock+0xc6>
    else
    {
      eb->start_epoch_block((const void *)eb);
    }
#else
    eb->start_epoch_block((const void *)eb);
3401a736:	687b      	ldr	r3, [r7, #4]
3401a738:	681b      	ldr	r3, [r3, #0]
3401a73a:	6878      	ldr	r0, [r7, #4]
3401a73c:	4798      	blx	r3
#endif
  }

  if (EpochBlock_IsEpochBlob(eb))
3401a73e:	6878      	ldr	r0, [r7, #4]
3401a740:	f7ff fdae 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401a744:	4603      	mov	r3, r0
3401a746:	2b00      	cmp	r3, #0
3401a748:	d026      	beq.n	3401a798 <__LL_ATON_RT_ExecStartEpochBlock+0x120>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* configure epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3401a74a:	6878      	ldr	r0, [r7, #4]
3401a74c:	f7ff fdf4 	bl	3401a338 <EpochBlock_EpochControllerUnit>
3401a750:	6178      	str	r0, [r7, #20]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a752:	697b      	ldr	r3, [r7, #20]
3401a754:	2b00      	cmp	r3, #0
3401a756:	d005      	beq.n	3401a764 <__LL_ATON_RT_ExecStartEpochBlock+0xec>
3401a758:	4b1b      	ldr	r3, [pc, #108]	@ (3401a7c8 <__LL_ATON_RT_ExecStartEpochBlock+0x150>)
3401a75a:	4a17      	ldr	r2, [pc, #92]	@ (3401a7b8 <__LL_ATON_RT_ExecStartEpochBlock+0x140>)
3401a75c:	21a4      	movs	r1, #164	@ 0xa4
3401a75e:	4817      	ldr	r0, [pc, #92]	@ (3401a7bc <__LL_ATON_RT_ExecStartEpochBlock+0x144>)
3401a760:	f000 fd9a 	bl	3401b298 <__assert_func>

    LL_EpochCtrl_InitTypeDef conf;
    conf.stepmode = 0;
3401a764:	7b3b      	ldrb	r3, [r7, #12]
3401a766:	f023 0301 	bic.w	r3, r3, #1
3401a76a:	733b      	strb	r3, [r7, #12]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3401a76c:	6878      	ldr	r0, [r7, #4]
3401a76e:	f7ff fe01 	bl	3401a374 <EpochBlock_EpochBlobAddr>
3401a772:	4603      	mov	r3, r0
3401a774:	60bb      	str	r3, [r7, #8]

    LL_EpochCtrl_Init(ecId, &conf);
3401a776:	697b      	ldr	r3, [r7, #20]
3401a778:	f107 0208 	add.w	r2, r7, #8
3401a77c:	4611      	mov	r1, r2
3401a77e:	4618      	mov	r0, r3
3401a780:	f7ff fc66 	bl	3401a050 <LL_EpochCtrl_Init>

    /* start/enable epoch controller */
    ATON_ENABLE(EPOCHCTRL, ecId);
3401a784:	4b11      	ldr	r3, [pc, #68]	@ (3401a7cc <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
3401a786:	681b      	ldr	r3, [r3, #0]
3401a788:	613b      	str	r3, [r7, #16]
3401a78a:	693b      	ldr	r3, [r7, #16]
3401a78c:	f043 0301 	orr.w	r3, r3, #1
3401a790:	613b      	str	r3, [r7, #16]
3401a792:	4a0e      	ldr	r2, [pc, #56]	@ (3401a7cc <__LL_ATON_RT_ExecStartEpochBlock+0x154>)
3401a794:	693b      	ldr	r3, [r7, #16]
3401a796:	6013      	str	r3, [r2, #0]
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a798:	683b      	ldr	r3, [r7, #0]
3401a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a79c:	2b00      	cmp	r3, #0
3401a79e:	d005      	beq.n	3401a7ac <__LL_ATON_RT_ExecStartEpochBlock+0x134>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3401a7a0:	683b      	ldr	r3, [r7, #0]
3401a7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7a4:	687a      	ldr	r2, [r7, #4]
3401a7a6:	6839      	ldr	r1, [r7, #0]
3401a7a8:	2001      	movs	r0, #1
3401a7aa:	4798      	blx	r3
}
3401a7ac:	bf00      	nop
3401a7ae:	3718      	adds	r7, #24
3401a7b0:	46bd      	mov	sp, r7
3401a7b2:	bd80      	pop	{r7, pc}
3401a7b4:	3401f30c 	.word	0x3401f30c
3401a7b8:	3401fa90 	.word	0x3401fa90
3401a7bc:	3401f344 	.word	0x3401f344
3401a7c0:	34020d44 	.word	0x34020d44
3401a7c4:	3401f3dc 	.word	0x3401f3dc
3401a7c8:	3401f408 	.word	0x3401f408
3401a7cc:	580fe000 	.word	0x580fe000

3401a7d0 <__LL_ATON_RT_ExecEndEpochBlock>:

static inline void __LL_ATON_RT_ExecEndEpochBlock(const LL_ATON_RT_EpochBlockItem_t *eb,
                                                  NN_Instance_TypeDef *nn_instance)
{
3401a7d0:	b580      	push	{r7, lr}
3401a7d2:	b084      	sub	sp, #16
3401a7d4:	af00      	add	r7, sp, #0
3401a7d6:	6078      	str	r0, [r7, #4]
3401a7d8:	6039      	str	r1, [r7, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a7da:	683b      	ldr	r3, [r7, #0]
3401a7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7de:	2b00      	cmp	r3, #0
3401a7e0:	d005      	beq.n	3401a7ee <__LL_ATON_RT_ExecEndEpochBlock+0x1e>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
3401a7e2:	683b      	ldr	r3, [r7, #0]
3401a7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a7e6:	687a      	ldr	r2, [r7, #4]
3401a7e8:	6839      	ldr	r1, [r7, #0]
3401a7ea:	2002      	movs	r0, #2
3401a7ec:	4798      	blx	r3

  if (EpochBlock_IsEpochBlob(eb))
3401a7ee:	6878      	ldr	r0, [r7, #4]
3401a7f0:	f7ff fd56 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401a7f4:	4603      	mov	r3, r0
3401a7f6:	2b00      	cmp	r3, #0
3401a7f8:	d033      	beq.n	3401a862 <__LL_ATON_RT_ExecEndEpochBlock+0x92>
  {
#if defined(ATON_EPOCHCTRL_NUM)
    /* stop/disable epoch controller */
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3401a7fa:	6878      	ldr	r0, [r7, #4]
3401a7fc:	f7ff fd9c 	bl	3401a338 <EpochBlock_EpochControllerUnit>
3401a800:	60f8      	str	r0, [r7, #12]
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401a802:	68fb      	ldr	r3, [r7, #12]
3401a804:	2b00      	cmp	r3, #0
3401a806:	d005      	beq.n	3401a814 <__LL_ATON_RT_ExecEndEpochBlock+0x44>
3401a808:	4b48      	ldr	r3, [pc, #288]	@ (3401a92c <__LL_ATON_RT_ExecEndEpochBlock+0x15c>)
3401a80a:	4a49      	ldr	r2, [pc, #292]	@ (3401a930 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a80c:	21c2      	movs	r1, #194	@ 0xc2
3401a80e:	4849      	ldr	r0, [pc, #292]	@ (3401a934 <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a810:	f000 fd42 	bl	3401b298 <__assert_func>
    uint32_t t;
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
3401a814:	2300      	movs	r3, #0
3401a816:	60bb      	str	r3, [r7, #8]
3401a818:	68bb      	ldr	r3, [r7, #8]
3401a81a:	f023 0301 	bic.w	r3, r3, #1
3401a81e:	60bb      	str	r3, [r7, #8]
3401a820:	68bb      	ldr	r3, [r7, #8]
3401a822:	f043 0302 	orr.w	r3, r3, #2
3401a826:	60bb      	str	r3, [r7, #8]
3401a828:	4a43      	ldr	r2, [pc, #268]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a82a:	68bb      	ldr	r3, [r7, #8]
3401a82c:	6013      	str	r3, [r2, #0]
3401a82e:	4b42      	ldr	r3, [pc, #264]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a830:	681b      	ldr	r3, [r3, #0]
3401a832:	f003 0302 	and.w	r3, r3, #2
3401a836:	2b00      	cmp	r3, #0
3401a838:	d1f9      	bne.n	3401a82e <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
3401a83a:	2300      	movs	r3, #0
3401a83c:	60bb      	str	r3, [r7, #8]
3401a83e:	68bb      	ldr	r3, [r7, #8]
3401a840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401a844:	60bb      	str	r3, [r7, #8]
3401a846:	4a3c      	ldr	r2, [pc, #240]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a848:	68bb      	ldr	r3, [r7, #8]
3401a84a:	6013      	str	r3, [r2, #0]
3401a84c:	4b3a      	ldr	r3, [pc, #232]	@ (3401a938 <__LL_ATON_RT_ExecEndEpochBlock+0x168>)
3401a84e:	681b      	ldr	r3, [r3, #0]
3401a850:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401a854:	2b00      	cmp	r3, #0
3401a856:	d1f9      	bne.n	3401a84c <__LL_ATON_RT_ExecEndEpochBlock+0x7c>

    /* disable epoch controller clock */
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
3401a858:	68fb      	ldr	r3, [r7, #12]
3401a85a:	3319      	adds	r3, #25
3401a85c:	4618      	mov	r0, r3
3401a85e:	f7ff fc5d 	bl	3401a11c <LL_ATON_DisableClock>
#else  // !ATON_EPOCHCTRL_NUM
    LL_ATON_ASSERT(false); // may never happen
#endif // !ATON_EPOCHCTRL_NUM
  }

  if (eb->end_epoch_block != NULL)
3401a862:	687b      	ldr	r3, [r7, #4]
3401a864:	685b      	ldr	r3, [r3, #4]
3401a866:	2b00      	cmp	r3, #0
3401a868:	d003      	beq.n	3401a872 <__LL_ATON_RT_ExecEndEpochBlock+0xa2>
    else
    {
      eb->end_epoch_block((const void *)eb);
    }
#else
    eb->end_epoch_block((const void *)eb);
3401a86a:	687b      	ldr	r3, [r7, #4]
3401a86c:	685b      	ldr	r3, [r3, #4]
3401a86e:	6878      	ldr	r0, [r7, #4]
3401a870:	4798      	blx	r3
#endif
  }

  /* Reset wait mask */
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a872:	6878      	ldr	r0, [r7, #4]
3401a874:	f7ff fd27 	bl	3401a2c6 <EpochBlock_IsEpochPureHW>
3401a878:	4603      	mov	r3, r0
3401a87a:	2b00      	cmp	r3, #0
3401a87c:	d105      	bne.n	3401a88a <__LL_ATON_RT_ExecEndEpochBlock+0xba>
      EpochBlock_IsEpochInternal(eb)) // epoch blobs are flagged as pure HW, so checking for epoch blob is not necessary
3401a87e:	6878      	ldr	r0, [r7, #4]
3401a880:	f7ff fd47 	bl	3401a312 <EpochBlock_IsEpochInternal>
3401a884:	4603      	mov	r3, r0
  if (EpochBlock_IsEpochPureHW(eb) ||
3401a886:	2b00      	cmp	r3, #0
3401a888:	d00d      	beq.n	3401a8a6 <__LL_ATON_RT_ExecEndEpochBlock+0xd6>
  {
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3401a88a:	4b2c      	ldr	r3, [pc, #176]	@ (3401a93c <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
3401a88c:	681b      	ldr	r3, [r3, #0]
3401a88e:	683a      	ldr	r2, [r7, #0]
3401a890:	429a      	cmp	r2, r3
3401a892:	d005      	beq.n	3401a8a0 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>
3401a894:	4b2a      	ldr	r3, [pc, #168]	@ (3401a940 <__LL_ATON_RT_ExecEndEpochBlock+0x170>)
3401a896:	4a26      	ldr	r2, [pc, #152]	@ (3401a930 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a898:	21e1      	movs	r1, #225	@ 0xe1
3401a89a:	4826      	ldr	r0, [pc, #152]	@ (3401a934 <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a89c:	f000 fcfc 	bl	3401b298 <__assert_func>
    __LL_ATON_RT_SetWaitMask(0);
3401a8a0:	2000      	movs	r0, #0
3401a8a2:	f7ff fe0d 	bl	3401a4c0 <__LL_ATON_RT_SetWaitMask>
  }

  /* Release ATON IP unlock in case it's a pure HW epoch */
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3401a8a6:	6878      	ldr	r0, [r7, #4]
3401a8a8:	f7ff fd0d 	bl	3401a2c6 <EpochBlock_IsEpochPureHW>
3401a8ac:	4603      	mov	r3, r0
3401a8ae:	2b00      	cmp	r3, #0
3401a8b0:	d113      	bne.n	3401a8da <__LL_ATON_RT_ExecEndEpochBlock+0x10a>
3401a8b2:	6878      	ldr	r0, [r7, #4]
3401a8b4:	f7ff fd1a 	bl	3401a2ec <EpochBlock_IsEpochHybrid>
3401a8b8:	4603      	mov	r3, r0
3401a8ba:	2b00      	cmp	r3, #0
3401a8bc:	d105      	bne.n	3401a8ca <__LL_ATON_RT_ExecEndEpochBlock+0xfa>
3401a8be:	6878      	ldr	r0, [r7, #4]
3401a8c0:	f7ff fd27 	bl	3401a312 <EpochBlock_IsEpochInternal>
3401a8c4:	4603      	mov	r3, r0
3401a8c6:	2b00      	cmp	r3, #0
3401a8c8:	d00a      	beq.n	3401a8e0 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3401a8ca:	683b      	ldr	r3, [r7, #0]
3401a8cc:	691b      	ldr	r3, [r3, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3401a8ce:	2b00      	cmp	r3, #0
3401a8d0:	d106      	bne.n	3401a8e0 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                       (nn_instance->exec_state.next_epoch_block ==
3401a8d2:	683b      	ldr	r3, [r7, #0]
3401a8d4:	68db      	ldr	r3, [r3, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
3401a8d6:	2b00      	cmp	r3, #0
3401a8d8:	d102      	bne.n	3401a8e0 <__LL_ATON_RT_ExecEndEpochBlock+0x110>
                                        NULL))) /* hybrid has finished after that last part has been executed in SW */
  {
    __ll_clear_aton_owner(nn_instance);
3401a8da:	6838      	ldr	r0, [r7, #0]
3401a8dc:	f7ff fda0 	bl	3401a420 <__ll_clear_aton_owner>
  }
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
3401a8e0:	6878      	ldr	r0, [r7, #4]
3401a8e2:	f7ff fd16 	bl	3401a312 <EpochBlock_IsEpochInternal>
3401a8e6:	4603      	mov	r3, r0
3401a8e8:	2b00      	cmp	r3, #0
3401a8ea:	d110      	bne.n	3401a90e <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a8ec:	6878      	ldr	r0, [r7, #4]
3401a8ee:	f7ff fcfd 	bl	3401a2ec <EpochBlock_IsEpochHybrid>
3401a8f2:	4603      	mov	r3, r0
3401a8f4:	2b00      	cmp	r3, #0
3401a8f6:	d10a      	bne.n	3401a90e <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a8f8:	4b10      	ldr	r3, [pc, #64]	@ (3401a93c <__LL_ATON_RT_ExecEndEpochBlock+0x16c>)
3401a8fa:	681b      	ldr	r3, [r3, #0]
3401a8fc:	683a      	ldr	r2, [r7, #0]
3401a8fe:	429a      	cmp	r2, r3
3401a900:	d105      	bne.n	3401a90e <__LL_ATON_RT_ExecEndEpochBlock+0x13e>
3401a902:	4b10      	ldr	r3, [pc, #64]	@ (3401a944 <__LL_ATON_RT_ExecEndEpochBlock+0x174>)
3401a904:	4a0a      	ldr	r2, [pc, #40]	@ (3401a930 <__LL_ATON_RT_ExecEndEpochBlock+0x160>)
3401a906:	21ed      	movs	r1, #237	@ 0xed
3401a908:	480a      	ldr	r0, [pc, #40]	@ (3401a934 <__LL_ATON_RT_ExecEndEpochBlock+0x164>)
3401a90a:	f000 fcc5 	bl	3401b298 <__assert_func>
                 (__ll_current_aton_ip_owner != nn_instance));

  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401a90e:	683b      	ldr	r3, [r7, #0]
3401a910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a912:	2b00      	cmp	r3, #0
3401a914:	d005      	beq.n	3401a922 <__LL_ATON_RT_ExecEndEpochBlock+0x152>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3401a916:	683b      	ldr	r3, [r7, #0]
3401a918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401a91a:	687a      	ldr	r2, [r7, #4]
3401a91c:	6839      	ldr	r1, [r7, #0]
3401a91e:	2003      	movs	r0, #3
3401a920:	4798      	blx	r3
  }
}
3401a922:	bf00      	nop
3401a924:	3710      	adds	r7, #16
3401a926:	46bd      	mov	sp, r7
3401a928:	bd80      	pop	{r7, pc}
3401a92a:	bf00      	nop
3401a92c:	3401f408 	.word	0x3401f408
3401a930:	3401fb40 	.word	0x3401fb40
3401a934:	3401f344 	.word	0x3401f344
3401a938:	580fe000 	.word	0x580fe000
3401a93c:	34020d44 	.word	0x34020d44
3401a940:	3401f414 	.word	0x3401f414
3401a944:	3401f440 	.word	0x3401f440

3401a948 <__LL_ATON_RT_DetermineNextEpochBlock>:

static void __LL_ATON_RT_DetermineNextEpochBlock(NN_Instance_TypeDef *nn_instance)
{
3401a948:	b580      	push	{r7, lr}
3401a94a:	b082      	sub	sp, #8
3401a94c:	af00      	add	r7, sp, #0
3401a94e:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
3401a950:	687b      	ldr	r3, [r7, #4]
3401a952:	2b00      	cmp	r3, #0
3401a954:	d105      	bne.n	3401a962 <__LL_ATON_RT_DetermineNextEpochBlock+0x1a>
3401a956:	4b26      	ldr	r3, [pc, #152]	@ (3401a9f0 <__LL_ATON_RT_DetermineNextEpochBlock+0xa8>)
3401a958:	4a26      	ldr	r2, [pc, #152]	@ (3401a9f4 <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a95a:	21f8      	movs	r1, #248	@ 0xf8
3401a95c:	4826      	ldr	r0, [pc, #152]	@ (3401a9f8 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a95e:	f000 fc9b 	bl	3401b298 <__assert_func>
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
3401a962:	687b      	ldr	r3, [r7, #4]
3401a964:	69db      	ldr	r3, [r3, #28]
3401a966:	2b00      	cmp	r3, #0
3401a968:	d005      	beq.n	3401a976 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3401a96a:	4b24      	ldr	r3, [pc, #144]	@ (3401a9fc <__LL_ATON_RT_DetermineNextEpochBlock+0xb4>)
3401a96c:	4a21      	ldr	r2, [pc, #132]	@ (3401a9f4 <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a96e:	21fa      	movs	r1, #250	@ 0xfa
3401a970:	4821      	ldr	r0, [pc, #132]	@ (3401a9f8 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a972:	f000 fc91 	bl	3401b298 <__assert_func>
                 0x0); // with the removal of parallel SW/HW epochs execution all triggered events must have been
                       // cleared at this point in time!
#endif                 // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /* Determine if there is a new inserted epoch block array */
  if ((nn_instance->exec_state.next_epoch_block != NULL))
3401a976:	687b      	ldr	r3, [r7, #4]
3401a978:	68db      	ldr	r3, [r3, #12]
3401a97a:	2b00      	cmp	r3, #0
3401a97c:	d02a      	beq.n	3401a9d4 <__LL_ATON_RT_DetermineNextEpochBlock+0x8c>
  {
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3401a97e:	687b      	ldr	r3, [r7, #4]
3401a980:	691b      	ldr	r3, [r3, #16]
3401a982:	2b00      	cmp	r3, #0
3401a984:	d006      	beq.n	3401a994 <__LL_ATON_RT_DetermineNextEpochBlock+0x4c>
3401a986:	4b1e      	ldr	r3, [pc, #120]	@ (3401aa00 <__LL_ATON_RT_DetermineNextEpochBlock+0xb8>)
3401a988:	4a1a      	ldr	r2, [pc, #104]	@ (3401a9f4 <__LL_ATON_RT_DetermineNextEpochBlock+0xac>)
3401a98a:	f44f 7181 	mov.w	r1, #258	@ 0x102
3401a98e:	481a      	ldr	r0, [pc, #104]	@ (3401a9f8 <__LL_ATON_RT_DetermineNextEpochBlock+0xb0>)
3401a990:	f000 fc82 	bl	3401b298 <__assert_func>

    /* save current context */
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3401a994:	687b      	ldr	r3, [r7, #4]
3401a996:	685a      	ldr	r2, [r3, #4]
3401a998:	687b      	ldr	r3, [r7, #4]
3401a99a:	611a      	str	r2, [r3, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3401a99c:	687b      	ldr	r3, [r7, #4]
3401a99e:	689a      	ldr	r2, [r3, #8]
3401a9a0:	687b      	ldr	r3, [r7, #4]
3401a9a2:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3401a9a4:	687b      	ldr	r3, [r7, #4]
3401a9a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3401a9a8:	687b      	ldr	r3, [r7, #4]
3401a9aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

    /* set new context */
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
3401a9ac:	687b      	ldr	r3, [r7, #4]
3401a9ae:	68da      	ldr	r2, [r3, #12]
3401a9b0:	687b      	ldr	r3, [r7, #4]
3401a9b2:	605a      	str	r2, [r3, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3401a9b4:	687b      	ldr	r3, [r7, #4]
3401a9b6:	68da      	ldr	r2, [r3, #12]
3401a9b8:	687b      	ldr	r3, [r7, #4]
3401a9ba:	609a      	str	r2, [r3, #8]
#ifndef NDEBUG
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3401a9bc:	687b      	ldr	r3, [r7, #4]
3401a9be:	689b      	ldr	r3, [r3, #8]
3401a9c0:	4618      	mov	r0, r3
3401a9c2:	f7ff fe38 	bl	3401a636 <__LL_ATON_RT_CntEpochBlocks>
3401a9c6:	4602      	mov	r2, r0
3401a9c8:	687b      	ldr	r3, [r7, #4]
3401a9ca:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

    /* reset next epoch block */
    nn_instance->exec_state.next_epoch_block = NULL;
3401a9cc:	687b      	ldr	r3, [r7, #4]
3401a9ce:	2200      	movs	r2, #0
3401a9d0:	60da      	str	r2, [r3, #12]
3401a9d2:	e005      	b.n	3401a9e0 <__LL_ATON_RT_DetermineNextEpochBlock+0x98>
  }
  else
  {
    nn_instance->exec_state.current_epoch_block++;
3401a9d4:	687b      	ldr	r3, [r7, #4]
3401a9d6:	685b      	ldr	r3, [r3, #4]
3401a9d8:	f103 0214 	add.w	r2, r3, #20
3401a9dc:	687b      	ldr	r3, [r7, #4]
3401a9de:	605a      	str	r2, [r3, #4]
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.current_epoch_block_started = false;
3401a9e0:	687b      	ldr	r3, [r7, #4]
3401a9e2:	2200      	movs	r2, #0
3401a9e4:	f883 2020 	strb.w	r2, [r3, #32]
#endif
}
3401a9e8:	bf00      	nop
3401a9ea:	3708      	adds	r7, #8
3401a9ec:	46bd      	mov	sp, r7
3401a9ee:	bd80      	pop	{r7, pc}
3401a9f0:	3401f190 	.word	0x3401f190
3401a9f4:	3401f9f4 	.word	0x3401f9f4
3401a9f8:	3401f344 	.word	0x3401f344
3401a9fc:	3401f1ac 	.word	0x3401f1ac
3401aa00:	3401f4b0 	.word	0x3401f4b0

3401aa04 <__LL_ATON_RT_GetWaitMask>:

static inline uint32_t __LL_ATON_RT_GetWaitMask(const LL_ATON_RT_EpochBlockItem_t *eb)
{
3401aa04:	b580      	push	{r7, lr}
3401aa06:	b082      	sub	sp, #8
3401aa08:	af00      	add	r7, sp, #0
3401aa0a:	6078      	str	r0, [r7, #4]
  if (EpochBlock_IsEpochBlob(eb))
3401aa0c:	6878      	ldr	r0, [r7, #4]
3401aa0e:	f7ff fc47 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401aa12:	4603      	mov	r3, r0
3401aa14:	2b00      	cmp	r3, #0
3401aa16:	d007      	beq.n	3401aa28 <__LL_ATON_RT_GetWaitMask+0x24>
  {
    // in case of epoch blob `wait_mask` contains unit number of epoch controller to use
    return (1 << EpochBlock_EpochControllerUnit(eb));
3401aa18:	6878      	ldr	r0, [r7, #4]
3401aa1a:	f7ff fc8d 	bl	3401a338 <EpochBlock_EpochControllerUnit>
3401aa1e:	4603      	mov	r3, r0
3401aa20:	2201      	movs	r2, #1
3401aa22:	fa02 f303 	lsl.w	r3, r2, r3
3401aa26:	e001      	b.n	3401aa2c <__LL_ATON_RT_GetWaitMask+0x28>
  }
  else
  {
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3401aa28:	687b      	ldr	r3, [r7, #4]
3401aa2a:	68db      	ldr	r3, [r3, #12]
                          // wait for
  }
}
3401aa2c:	4618      	mov	r0, r3
3401aa2e:	3708      	adds	r7, #8
3401aa30:	46bd      	mov	sp, r7
3401aa32:	bd80      	pop	{r7, pc}

3401aa34 <__LL_ATON_RT_Init_Network>:

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3401aa34:	b580      	push	{r7, lr}
3401aa36:	b084      	sub	sp, #16
3401aa38:	af00      	add	r7, sp, #0
3401aa3a:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401aa3c:	687b      	ldr	r3, [r7, #4]
3401aa3e:	2b00      	cmp	r3, #0
3401aa40:	d037      	beq.n	3401aab2 <__LL_ATON_RT_Init_Network+0x7e>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3401aa42:	687b      	ldr	r3, [r7, #4]
3401aa44:	681b      	ldr	r3, [r3, #0]
3401aa46:	2b00      	cmp	r3, #0
3401aa48:	d035      	beq.n	3401aab6 <__LL_ATON_RT_Init_Network+0x82>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3401aa4a:	687b      	ldr	r3, [r7, #4]
3401aa4c:	681b      	ldr	r3, [r3, #0]
3401aa4e:	69db      	ldr	r3, [r3, #28]
3401aa50:	4798      	blx	r3
3401aa52:	60f8      	str	r0, [r7, #12]
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
3401aa54:	687b      	ldr	r3, [r7, #4]
3401aa56:	68fa      	ldr	r2, [r7, #12]
3401aa58:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3401aa5a:	687b      	ldr	r3, [r7, #4]
3401aa5c:	68fa      	ldr	r2, [r7, #12]
3401aa5e:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3401aa60:	687b      	ldr	r3, [r7, #4]
3401aa62:	2200      	movs	r2, #0
3401aa64:	60da      	str	r2, [r3, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3401aa66:	687b      	ldr	r3, [r7, #4]
3401aa68:	2200      	movs	r2, #0
3401aa6a:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3401aa6c:	687b      	ldr	r3, [r7, #4]
3401aa6e:	2200      	movs	r2, #0
3401aa70:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3401aa72:	687b      	ldr	r3, [r7, #4]
3401aa74:	685b      	ldr	r3, [r3, #4]
3401aa76:	4618      	mov	r0, r3
3401aa78:	f7ff fddd 	bl	3401a636 <__LL_ATON_RT_CntEpochBlocks>
3401aa7c:	4602      	mov	r2, r0
3401aa7e:	687b      	ldr	r3, [r7, #4]
3401aa80:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401aa82:	687b      	ldr	r3, [r7, #4]
3401aa84:	2200      	movs	r2, #0
3401aa86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

  /* set information about running inference */
  nn_instance->exec_state.inference_started = false;
3401aa88:	687b      	ldr	r3, [r7, #4]
3401aa8a:	2200      	movs	r2, #0
3401aa8c:	761a      	strb	r2, [r3, #24]

  /* set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
3401aa8e:	687b      	ldr	r3, [r7, #4]
3401aa90:	2200      	movs	r2, #0
3401aa92:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3401aa94:	687b      	ldr	r3, [r7, #4]
3401aa96:	2200      	movs	r2, #0
3401aa98:	f883 2020 	strb.w	r2, [r3, #32]
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401aa9c:	687b      	ldr	r3, [r7, #4]
3401aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401aaa0:	2b00      	cmp	r3, #0
3401aaa2:	d009      	beq.n	3401aab8 <__LL_ATON_RT_Init_Network+0x84>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3401aaa4:	687b      	ldr	r3, [r7, #4]
3401aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401aaa8:	2200      	movs	r2, #0
3401aaaa:	6879      	ldr	r1, [r7, #4]
3401aaac:	2004      	movs	r0, #4
3401aaae:	4798      	blx	r3
3401aab0:	e002      	b.n	3401aab8 <__LL_ATON_RT_Init_Network+0x84>
    return;
3401aab2:	bf00      	nop
3401aab4:	e000      	b.n	3401aab8 <__LL_ATON_RT_Init_Network+0x84>
    return;
3401aab6:	bf00      	nop
  }
}
3401aab8:	3710      	adds	r7, #16
3401aaba:	46bd      	mov	sp, r7
3401aabc:	bd80      	pop	{r7, pc}
	...

3401aac0 <LL_ATON_RT_Init_Network>:
/**
 * @brief Initialize a network instance
 * @param nn_instance Pointer to network instance to initialize
 */
void LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
3401aac0:	b580      	push	{r7, lr}
3401aac2:	b084      	sub	sp, #16
3401aac4:	af00      	add	r7, sp, #0
3401aac6:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401aac8:	687b      	ldr	r3, [r7, #4]
3401aaca:	2b00      	cmp	r3, #0
3401aacc:	d023      	beq.n	3401ab16 <LL_ATON_RT_Init_Network+0x56>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3401aace:	687b      	ldr	r3, [r7, #4]
3401aad0:	681b      	ldr	r3, [r3, #0]
3401aad2:	2b00      	cmp	r3, #0
3401aad4:	d021      	beq.n	3401ab1a <LL_ATON_RT_Init_Network+0x5a>
  {
    LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
    ret = nn_instance->network->ec_network_init();
  }
#else
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
3401aad6:	687b      	ldr	r3, [r7, #4]
3401aad8:	681b      	ldr	r3, [r3, #0]
3401aada:	685b      	ldr	r3, [r3, #4]
3401aadc:	2b00      	cmp	r3, #0
3401aade:	d106      	bne.n	3401aaee <LL_ATON_RT_Init_Network+0x2e>
3401aae0:	4b10      	ldr	r3, [pc, #64]	@ (3401ab24 <LL_ATON_RT_Init_Network+0x64>)
3401aae2:	4a11      	ldr	r2, [pc, #68]	@ (3401ab28 <LL_ATON_RT_Init_Network+0x68>)
3401aae4:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3401aae8:	4810      	ldr	r0, [pc, #64]	@ (3401ab2c <LL_ATON_RT_Init_Network+0x6c>)
3401aaea:	f000 fbd5 	bl	3401b298 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
3401aaee:	687b      	ldr	r3, [r7, #4]
3401aaf0:	681b      	ldr	r3, [r3, #0]
3401aaf2:	685b      	ldr	r3, [r3, #4]
3401aaf4:	4798      	blx	r3
3401aaf6:	4603      	mov	r3, r0
3401aaf8:	73fb      	strb	r3, [r7, #15]
#endif
  LL_ATON_ASSERT(ret == true);
3401aafa:	7bfb      	ldrb	r3, [r7, #15]
3401aafc:	2b01      	cmp	r3, #1
3401aafe:	d006      	beq.n	3401ab0e <LL_ATON_RT_Init_Network+0x4e>
3401ab00:	4b0b      	ldr	r3, [pc, #44]	@ (3401ab30 <LL_ATON_RT_Init_Network+0x70>)
3401ab02:	4a09      	ldr	r2, [pc, #36]	@ (3401ab28 <LL_ATON_RT_Init_Network+0x68>)
3401ab04:	f240 11a9 	movw	r1, #425	@ 0x1a9
3401ab08:	4808      	ldr	r0, [pc, #32]	@ (3401ab2c <LL_ATON_RT_Init_Network+0x6c>)
3401ab0a:	f000 fbc5 	bl	3401b298 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);

  /* Call actual network instance initialization */
  __LL_ATON_RT_Init_Network(nn_instance);
3401ab0e:	6878      	ldr	r0, [r7, #4]
3401ab10:	f7ff ff90 	bl	3401aa34 <__LL_ATON_RT_Init_Network>
3401ab14:	e002      	b.n	3401ab1c <LL_ATON_RT_Init_Network+0x5c>
    return;
3401ab16:	bf00      	nop
3401ab18:	e000      	b.n	3401ab1c <LL_ATON_RT_Init_Network+0x5c>
    return;
3401ab1a:	bf00      	nop
}
3401ab1c:	3710      	adds	r7, #16
3401ab1e:	46bd      	mov	sp, r7
3401ab20:	bd80      	pop	{r7, pc}
3401ab22:	bf00      	nop
3401ab24:	3401f4f4 	.word	0x3401f4f4
3401ab28:	3401fa1c 	.word	0x3401fa1c
3401ab2c:	3401f344 	.word	0x3401f344
3401ab30:	3401f52c 	.word	0x3401f52c

3401ab34 <LL_ATON_RT_DeInit_Network>:
/**
 * @brief De-initialize a network instance
 * @param nn_instance Pointer to network instance to de-initialize
 */
void LL_ATON_RT_DeInit_Network(NN_Instance_TypeDef *nn_instance)
{
3401ab34:	b580      	push	{r7, lr}
3401ab36:	b084      	sub	sp, #16
3401ab38:	af00      	add	r7, sp, #0
3401ab3a:	6078      	str	r0, [r7, #4]
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
3401ab3c:	687b      	ldr	r3, [r7, #4]
3401ab3e:	2b00      	cmp	r3, #0
3401ab40:	d030      	beq.n	3401aba4 <LL_ATON_RT_DeInit_Network+0x70>
  {
    return;
  }

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_DeInit` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3401ab42:	687b      	ldr	r3, [r7, #4]
3401ab44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401ab46:	2b00      	cmp	r3, #0
3401ab48:	d005      	beq.n	3401ab56 <LL_ATON_RT_DeInit_Network+0x22>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3401ab4a:	687b      	ldr	r3, [r7, #4]
3401ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401ab4e:	2200      	movs	r2, #0
3401ab50:	6879      	ldr	r1, [r7, #4]
3401ab52:	2005      	movs	r0, #5
3401ab54:	4798      	blx	r3
  }

  /** Re-set ATON IP owner */
  if (nn_instance == __ll_current_aton_ip_owner)
3401ab56:	4b15      	ldr	r3, [pc, #84]	@ (3401abac <LL_ATON_RT_DeInit_Network+0x78>)
3401ab58:	681b      	ldr	r3, [r3, #0]
3401ab5a:	687a      	ldr	r2, [r7, #4]
3401ab5c:	429a      	cmp	r2, r3
3401ab5e:	d102      	bne.n	3401ab66 <LL_ATON_RT_DeInit_Network+0x32>
  { // In case this function gets called while an ATON lib internal EpochBlock (used to implement hybrid epochs) is
    // under execution we might still be owner of the ATON IP
    __ll_clear_aton_owner(nn_instance);
3401ab60:	6878      	ldr	r0, [r7, #4]
3401ab62:	f7ff fc5d 	bl	3401a420 <__ll_clear_aton_owner>
  }

  /** De-initialize static variables **/
  /* re-set context */
  const LL_ATON_RT_EpochBlockItem_t *eb_list = NULL;
3401ab66:	2300      	movs	r3, #0
3401ab68:	60fb      	str	r3, [r7, #12]
  nn_instance->exec_state.current_epoch_block = eb_list;
3401ab6a:	687b      	ldr	r3, [r7, #4]
3401ab6c:	68fa      	ldr	r2, [r7, #12]
3401ab6e:	605a      	str	r2, [r3, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
3401ab70:	687b      	ldr	r3, [r7, #4]
3401ab72:	68fa      	ldr	r2, [r7, #12]
3401ab74:	609a      	str	r2, [r3, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3401ab76:	687b      	ldr	r3, [r7, #4]
3401ab78:	2200      	movs	r2, #0
3401ab7a:	60da      	str	r2, [r3, #12]

  /* re-set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3401ab7c:	687b      	ldr	r3, [r7, #4]
3401ab7e:	2200      	movs	r2, #0
3401ab80:	611a      	str	r2, [r3, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3401ab82:	687b      	ldr	r3, [r7, #4]
3401ab84:	2200      	movs	r2, #0
3401ab86:	615a      	str	r2, [r3, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3401ab88:	687b      	ldr	r3, [r7, #4]
3401ab8a:	2200      	movs	r2, #0
3401ab8c:	625a      	str	r2, [r3, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3401ab8e:	687b      	ldr	r3, [r7, #4]
3401ab90:	2200      	movs	r2, #0
3401ab92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* intentional do not re-set information about running inference `nn_instance->exec_state.inference_started` */

  /* re-set asynchronous status variables */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  nn_instance->exec_state.triggered_events = 0x0;
3401ab94:	687b      	ldr	r3, [r7, #4]
3401ab96:	2200      	movs	r2, #0
3401ab98:	61da      	str	r2, [r3, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
3401ab9a:	687b      	ldr	r3, [r7, #4]
3401ab9c:	2200      	movs	r2, #0
3401ab9e:	f883 2020 	strb.w	r2, [r3, #32]
3401aba2:	e000      	b.n	3401aba6 <LL_ATON_RT_DeInit_Network+0x72>
    return;
3401aba4:	bf00      	nop
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
}
3401aba6:	3710      	adds	r7, #16
3401aba8:	46bd      	mov	sp, r7
3401abaa:	bd80      	pop	{r7, pc}
3401abac:	34020d44 	.word	0x34020d44

3401abb0 <LL_ATON_RT_RuntimeInit>:

/**
 * @brief Initialize the ATON runtime
 */
void LL_ATON_RT_RuntimeInit(void)
{
3401abb0:	b580      	push	{r7, lr}
3401abb2:	b082      	sub	sp, #8
3401abb4:	af00      	add	r7, sp, #0
  /** Initialize ATON IPs **/
  LL_ATON_Init();
3401abb6:	f7fd f983 	bl	34017ec0 <LL_ATON_Init>
  /** Initialize IRQ Context **/
  {
    uint32_t t;

    /* Disable & Clear interrupt controller */
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
3401abba:	2300      	movs	r3, #0
3401abbc:	607b      	str	r3, [r7, #4]
3401abbe:	687b      	ldr	r3, [r7, #4]
3401abc0:	f023 0301 	bic.w	r3, r3, #1
3401abc4:	607b      	str	r3, [r7, #4]
3401abc6:	687b      	ldr	r3, [r7, #4]
3401abc8:	f043 0302 	orr.w	r3, r3, #2
3401abcc:	607b      	str	r3, [r7, #4]
3401abce:	4a22      	ldr	r2, [pc, #136]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abd0:	687b      	ldr	r3, [r7, #4]
3401abd2:	6013      	str	r3, [r2, #0]
3401abd4:	4b20      	ldr	r3, [pc, #128]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abd6:	681b      	ldr	r3, [r3, #0]
3401abd8:	f003 0302 	and.w	r3, r3, #2
3401abdc:	2b00      	cmp	r3, #0
3401abde:	d1f9      	bne.n	3401abd4 <LL_ATON_RT_RuntimeInit+0x24>
3401abe0:	2300      	movs	r3, #0
3401abe2:	607b      	str	r3, [r7, #4]
3401abe4:	687b      	ldr	r3, [r7, #4]
3401abe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401abea:	607b      	str	r3, [r7, #4]
3401abec:	4a1a      	ldr	r2, [pc, #104]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abee:	687b      	ldr	r3, [r7, #4]
3401abf0:	6013      	str	r3, [r2, #0]
3401abf2:	4b19      	ldr	r3, [pc, #100]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401abf4:	681b      	ldr	r3, [r3, #0]
3401abf6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401abfa:	2b00      	cmp	r3, #0
3401abfc:	d1f9      	bne.n	3401abf2 <LL_ATON_RT_RuntimeInit+0x42>

    /* Preset Interrupt Controller masks */
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3401abfe:	4b17      	ldr	r3, [pc, #92]	@ (3401ac5c <LL_ATON_RT_RuntimeInit+0xac>)
3401ac00:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3401ac04:	601a      	str	r2, [r3, #0]
        ATON_STRENG_NUM, 0, 0)); // OR-mask: disable all streaming engine events and enable all other events & errors
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
3401ac06:	4b16      	ldr	r3, [pc, #88]	@ (3401ac60 <LL_ATON_RT_RuntimeInit+0xb0>)
3401ac08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401ac0c:	601a      	str	r2, [r3, #0]
    ATON_INTCTRL_STD_INTORMSK_H_SET(0);           // OR-mask: enable all events & errors
    ATON_INTCTRL_STD_INTANDMSK_H_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
#endif

    /* Enable Interrupt Controller (again) */
    ATON_ENABLE(INTCTRL, 0);
3401ac0e:	4b12      	ldr	r3, [pc, #72]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401ac10:	681b      	ldr	r3, [r3, #0]
3401ac12:	603b      	str	r3, [r7, #0]
3401ac14:	683b      	ldr	r3, [r7, #0]
3401ac16:	f043 0301 	orr.w	r3, r3, #1
3401ac1a:	603b      	str	r3, [r7, #0]
3401ac1c:	4a0e      	ldr	r2, [pc, #56]	@ (3401ac58 <LL_ATON_RT_RuntimeInit+0xa8>)
3401ac1e:	683b      	ldr	r3, [r7, #0]
3401ac20:	6013      	str	r3, [r2, #0]

  /** Initialize OSAL layer **/
  LL_ATON_OSAL_INIT();

  /** Disable all four ATON interrupts **/
  LL_ATON_DISABLE_ALL_IRQs();
3401ac22:	2035      	movs	r0, #53	@ 0x35
3401ac24:	f7ff faf2 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac28:	2036      	movs	r0, #54	@ 0x36
3401ac2a:	f7ff faef 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac2e:	2037      	movs	r0, #55	@ 0x37
3401ac30:	f7ff faec 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac34:	2038      	movs	r0, #56	@ 0x38
3401ac36:	f7ff fae9 	bl	3401a20c <__NVIC_DisableIRQ>

  /** Install IRQ handler **/
  LL_ATON_OSAL_INSTALL_IRQ(ATON_STD_IRQ_LINE, ATON_STD_IRQHandler);

  /** Enable ATON `ATON_STD_IRQ_LINE` interrupt **/
  LL_ATON_OSAL_ENABLE_IRQ(ATON_STD_IRQ_LINE);
3401ac3a:	2035      	movs	r0, #53	@ 0x35
3401ac3c:	f7ff fac8 	bl	3401a1d0 <__NVIC_EnableIRQ>

  /** After having initialized ATON call callback (which among others might initialize further subsystems) */
  if (ll_aton_init_deinit_trace)
3401ac40:	4b08      	ldr	r3, [pc, #32]	@ (3401ac64 <LL_ATON_RT_RuntimeInit+0xb4>)
3401ac42:	681b      	ldr	r3, [r3, #0]
3401ac44:	2b00      	cmp	r3, #0
3401ac46:	d003      	beq.n	3401ac50 <LL_ATON_RT_RuntimeInit+0xa0>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
3401ac48:	4b06      	ldr	r3, [pc, #24]	@ (3401ac64 <LL_ATON_RT_RuntimeInit+0xb4>)
3401ac4a:	681b      	ldr	r3, [r3, #0]
3401ac4c:	2006      	movs	r0, #6
3401ac4e:	4798      	blx	r3
}
3401ac50:	bf00      	nop
3401ac52:	3708      	adds	r7, #8
3401ac54:	46bd      	mov	sp, r7
3401ac56:	bd80      	pop	{r7, pc}
3401ac58:	580e1000 	.word	0x580e1000
3401ac5c:	580e1014 	.word	0x580e1014
3401ac60:	580e1024 	.word	0x580e1024
3401ac64:	34020d4c 	.word	0x34020d4c

3401ac68 <LL_ATON_RT_RuntimeDeInit>:
 * @brief De-initialize the ATON runtime
 * @param nn_instance Pointer to network instance to de-initialize (optional - i.e. may be `NULL`, see
 * `LL_ATON_RT_DeInit_Network()`)
 */
void LL_ATON_RT_RuntimeDeInit(void)
{
3401ac68:	b580      	push	{r7, lr}
3401ac6a:	af00      	add	r7, sp, #0
  /* Call runtime de-init callback */
  if (ll_aton_init_deinit_trace)
3401ac6c:	4b0b      	ldr	r3, [pc, #44]	@ (3401ac9c <LL_ATON_RT_RuntimeDeInit+0x34>)
3401ac6e:	681b      	ldr	r3, [r3, #0]
3401ac70:	2b00      	cmp	r3, #0
3401ac72:	d003      	beq.n	3401ac7c <LL_ATON_RT_RuntimeDeInit+0x14>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3401ac74:	4b09      	ldr	r3, [pc, #36]	@ (3401ac9c <LL_ATON_RT_RuntimeDeInit+0x34>)
3401ac76:	681b      	ldr	r3, [r3, #0]
3401ac78:	2007      	movs	r0, #7
3401ac7a:	4798      	blx	r3

  /* Disable all four ATON interrupts */
  LL_ATON_DISABLE_ALL_IRQs();
3401ac7c:	2035      	movs	r0, #53	@ 0x35
3401ac7e:	f7ff fac5 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac82:	2036      	movs	r0, #54	@ 0x36
3401ac84:	f7ff fac2 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac88:	2037      	movs	r0, #55	@ 0x37
3401ac8a:	f7ff fabf 	bl	3401a20c <__NVIC_DisableIRQ>
3401ac8e:	2038      	movs	r0, #56	@ 0x38
3401ac90:	f7ff fabc 	bl	3401a20c <__NVIC_DisableIRQ>

  /* De-initialize OSAL layer */
  LL_ATON_OSAL_DEINIT();

  /* De-initialize ATON IPs */
  LL_ATON_DeInit();
3401ac94:	f7fd fcea 	bl	3401866c <LL_ATON_DeInit>
}
3401ac98:	bf00      	nop
3401ac9a:	bd80      	pop	{r7, pc}
3401ac9c:	34020d4c 	.word	0x34020d4c

3401aca0 <LL_ATON_RT_RunEpochBlock>:
 *                            same thread!
 *                            It is entirely the user's responsibility to comply with this restriction!
 * @retval LL_ATON_RT_DONE    NN execution finished
 */
LL_ATON_RT_RetValues_t LL_ATON_RT_RunEpochBlock(NN_Instance_TypeDef *nn_instance)
{
3401aca0:	b580      	push	{r7, lr}
3401aca2:	b084      	sub	sp, #16
3401aca4:	af00      	add	r7, sp, #0
3401aca6:	6078      	str	r0, [r7, #4]
  LL_ATON_ASSERT(nn_instance != NULL);
3401aca8:	687b      	ldr	r3, [r7, #4]
3401acaa:	2b00      	cmp	r3, #0
3401acac:	d106      	bne.n	3401acbc <LL_ATON_RT_RunEpochBlock+0x1c>
3401acae:	4b63      	ldr	r3, [pc, #396]	@ (3401ae3c <LL_ATON_RT_RunEpochBlock+0x19c>)
3401acb0:	4a63      	ldr	r2, [pc, #396]	@ (3401ae40 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acb2:	f44f 7110 	mov.w	r1, #576	@ 0x240
3401acb6:	4863      	ldr	r0, [pc, #396]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401acb8:	f000 faee 	bl	3401b298 <__assert_func>

  /* Test for wrong/missing initialization */
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3401acbc:	687b      	ldr	r3, [r7, #4]
3401acbe:	685b      	ldr	r3, [r3, #4]
3401acc0:	2b00      	cmp	r3, #0
3401acc2:	d106      	bne.n	3401acd2 <LL_ATON_RT_RunEpochBlock+0x32>
3401acc4:	4b60      	ldr	r3, [pc, #384]	@ (3401ae48 <LL_ATON_RT_RunEpochBlock+0x1a8>)
3401acc6:	4a5e      	ldr	r2, [pc, #376]	@ (3401ae40 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acc8:	f240 2143 	movw	r1, #579	@ 0x243
3401accc:	485d      	ldr	r0, [pc, #372]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401acce:	f000 fae3 	bl	3401b298 <__assert_func>

  /* Check if network is starting a new inference */
  if (nn_instance->exec_state.inference_started == false)
3401acd2:	687b      	ldr	r3, [r7, #4]
3401acd4:	7e1b      	ldrb	r3, [r3, #24]
3401acd6:	f083 0301 	eor.w	r3, r3, #1
3401acda:	b2db      	uxtb	r3, r3
3401acdc:	2b00      	cmp	r3, #0
3401acde:	d022      	beq.n	3401ad26 <LL_ATON_RT_RunEpochBlock+0x86>
    {
      LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
      ret = nn_instance->network->ec_inference_init();
    }
#else
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3401ace0:	687b      	ldr	r3, [r7, #4]
3401ace2:	681b      	ldr	r3, [r3, #0]
3401ace4:	2b00      	cmp	r3, #0
3401ace6:	d004      	beq.n	3401acf2 <LL_ATON_RT_RunEpochBlock+0x52>
3401ace8:	687b      	ldr	r3, [r7, #4]
3401acea:	681b      	ldr	r3, [r3, #0]
3401acec:	689b      	ldr	r3, [r3, #8]
3401acee:	2b00      	cmp	r3, #0
3401acf0:	d106      	bne.n	3401ad00 <LL_ATON_RT_RunEpochBlock+0x60>
3401acf2:	4b56      	ldr	r3, [pc, #344]	@ (3401ae4c <LL_ATON_RT_RunEpochBlock+0x1ac>)
3401acf4:	4a52      	ldr	r2, [pc, #328]	@ (3401ae40 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401acf6:	f240 2155 	movw	r1, #597	@ 0x255
3401acfa:	4852      	ldr	r0, [pc, #328]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401acfc:	f000 facc 	bl	3401b298 <__assert_func>
    bool ret = nn_instance->network->ec_inference_init();
3401ad00:	687b      	ldr	r3, [r7, #4]
3401ad02:	681b      	ldr	r3, [r3, #0]
3401ad04:	689b      	ldr	r3, [r3, #8]
3401ad06:	4798      	blx	r3
3401ad08:	4603      	mov	r3, r0
3401ad0a:	73bb      	strb	r3, [r7, #14]
#endif

    LL_ATON_ASSERT(ret == true);
3401ad0c:	7bbb      	ldrb	r3, [r7, #14]
3401ad0e:	2b01      	cmp	r3, #1
3401ad10:	d006      	beq.n	3401ad20 <LL_ATON_RT_RunEpochBlock+0x80>
3401ad12:	4b4f      	ldr	r3, [pc, #316]	@ (3401ae50 <LL_ATON_RT_RunEpochBlock+0x1b0>)
3401ad14:	4a4a      	ldr	r2, [pc, #296]	@ (3401ae40 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401ad16:	f240 2159 	movw	r1, #601	@ 0x259
3401ad1a:	484a      	ldr	r0, [pc, #296]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401ad1c:	f000 fabc 	bl	3401b298 <__assert_func>
    LL_ATON_LIB_UNUSED(ret);

    /* Set inference started flag to `true` */
    nn_instance->exec_state.inference_started = true;
3401ad20:	687b      	ldr	r3, [r7, #4]
3401ad22:	2201      	movs	r2, #1
3401ad24:	761a      	strb	r2, [r3, #24]
    /* Placeholder for things which need to be done before starting an inference */
    /* ==> here <== */
  }

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  bool this_run_executed_end_epoch = false;
3401ad26:	2300      	movs	r3, #0
3401ad28:	73fb      	strb	r3, [r7, #15]

  while (true)
  {
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    /* wait for current epoch block to finish */
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
3401ad2a:	687b      	ldr	r3, [r7, #4]
3401ad2c:	685b      	ldr	r3, [r3, #4]
3401ad2e:	4618      	mov	r0, r3
3401ad30:	f7ff fe68 	bl	3401aa04 <__LL_ATON_RT_GetWaitMask>
3401ad34:	60b8      	str	r0, [r7, #8]
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
3401ad36:	687b      	ldr	r3, [r7, #4]
3401ad38:	f893 3020 	ldrb.w	r3, [r3, #32]
3401ad3c:	b2db      	uxtb	r3, r3
3401ad3e:	2b00      	cmp	r3, #0
3401ad40:	d030      	beq.n	3401ada4 <LL_ATON_RT_RunEpochBlock+0x104>
3401ad42:	68bb      	ldr	r3, [r7, #8]
3401ad44:	2b00      	cmp	r3, #0
3401ad46:	d02d      	beq.n	3401ada4 <LL_ATON_RT_RunEpochBlock+0x104>
    {
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
3401ad48:	687b      	ldr	r3, [r7, #4]
3401ad4a:	69da      	ldr	r2, [r3, #28]
3401ad4c:	68bb      	ldr	r3, [r7, #8]
3401ad4e:	4013      	ands	r3, r2
3401ad50:	68ba      	ldr	r2, [r7, #8]
3401ad52:	429a      	cmp	r2, r3
3401ad54:	d124      	bne.n	3401ada0 <LL_ATON_RT_RunEpochBlock+0x100>
      {
        /* Enter critical section */
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
3401ad56:	4b3f      	ldr	r3, [pc, #252]	@ (3401ae54 <LL_ATON_RT_RunEpochBlock+0x1b4>)
3401ad58:	681b      	ldr	r3, [r3, #0]
3401ad5a:	687a      	ldr	r2, [r7, #4]
3401ad5c:	429a      	cmp	r2, r3
3401ad5e:	d006      	beq.n	3401ad6e <LL_ATON_RT_RunEpochBlock+0xce>
3401ad60:	4b3d      	ldr	r3, [pc, #244]	@ (3401ae58 <LL_ATON_RT_RunEpochBlock+0x1b8>)
3401ad62:	4a37      	ldr	r2, [pc, #220]	@ (3401ae40 <LL_ATON_RT_RunEpochBlock+0x1a0>)
3401ad64:	f240 2171 	movw	r1, #625	@ 0x271
3401ad68:	4836      	ldr	r0, [pc, #216]	@ (3401ae44 <LL_ATON_RT_RunEpochBlock+0x1a4>)
3401ad6a:	f000 fa95 	bl	3401b298 <__assert_func>
                       nn_instance); // when entering a critical section we MUST hold the ATON IP lock
        LL_ATON_OSAL_ENTER_CS();
3401ad6e:	2035      	movs	r0, #53	@ 0x35
3401ad70:	f7ff fa4c 	bl	3401a20c <__NVIC_DisableIRQ>

        /* reset triggered events */
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
3401ad74:	687b      	ldr	r3, [r7, #4]
3401ad76:	69da      	ldr	r2, [r3, #28]
3401ad78:	68bb      	ldr	r3, [r7, #8]
3401ad7a:	43db      	mvns	r3, r3
3401ad7c:	401a      	ands	r2, r3
3401ad7e:	687b      	ldr	r3, [r7, #4]
3401ad80:	61da      	str	r2, [r3, #28]

        /* Exit critical section */
        LL_ATON_OSAL_EXIT_CS();
3401ad82:	2035      	movs	r0, #53	@ 0x35
3401ad84:	f7ff fa24 	bl	3401a1d0 <__NVIC_EnableIRQ>

        /* end/clean-up epoch block */
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401ad88:	687b      	ldr	r3, [r7, #4]
3401ad8a:	685b      	ldr	r3, [r3, #4]
3401ad8c:	6879      	ldr	r1, [r7, #4]
3401ad8e:	4618      	mov	r0, r3
3401ad90:	f7ff fd1e 	bl	3401a7d0 <__LL_ATON_RT_ExecEndEpochBlock>
        this_run_executed_end_epoch = true;
3401ad94:	2301      	movs	r3, #1
3401ad96:	73fb      	strb	r3, [r7, #15]

        /* advance epoch block */
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3401ad98:	6878      	ldr	r0, [r7, #4]
3401ad9a:	f7ff fdd5 	bl	3401a948 <__LL_ATON_RT_DetermineNextEpochBlock>
3401ad9e:	e001      	b.n	3401ada4 <LL_ATON_RT_RunEpochBlock+0x104>
      }
      else
      {
        /* Return to main loop */
        return LL_ATON_RT_WFE;
3401ada0:	2301      	movs	r3, #1
3401ada2:	e047      	b.n	3401ae34 <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

    /* test for last epoch block */
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
3401ada4:	687b      	ldr	r3, [r7, #4]
3401ada6:	685b      	ldr	r3, [r3, #4]
3401ada8:	4618      	mov	r0, r3
3401adaa:	f7ff fa53 	bl	3401a254 <EpochBlock_IsLastEpochBlock>
3401adae:	4603      	mov	r3, r0
3401adb0:	2b00      	cmp	r3, #0
3401adb2:	d011      	beq.n	3401add8 <LL_ATON_RT_RunEpochBlock+0x138>
    {
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
3401adb4:	687b      	ldr	r3, [r7, #4]
3401adb6:	691b      	ldr	r3, [r3, #16]
3401adb8:	2b00      	cmp	r3, #0
3401adba:	d00b      	beq.n	3401add4 <LL_ATON_RT_RunEpochBlock+0x134>
      {
        /* return from inserted epoch block */
        __LL_ATON_RT_RetFromLibEpochBlockArray(true, nn_instance);
3401adbc:	6879      	ldr	r1, [r7, #4]
3401adbe:	2001      	movs	r0, #1
3401adc0:	f7ff fba4 	bl	3401a50c <__LL_ATON_RT_RetFromLibEpochBlockArray>

        /* advance epoch block */
        nn_instance->exec_state.current_epoch_block++;
3401adc4:	687b      	ldr	r3, [r7, #4]
3401adc6:	685b      	ldr	r3, [r3, #4]
3401adc8:	f103 0214 	add.w	r2, r3, #20
3401adcc:	687b      	ldr	r3, [r7, #4]
3401adce:	605a      	str	r2, [r3, #4]

        /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
        return LL_ATON_RT_NO_WFE;
3401add0:	2300      	movs	r3, #0
3401add2:	e02f      	b.n	3401ae34 <LL_ATON_RT_RunEpochBlock+0x194>
      }
      else
      {
        /* Reached end of execution */
        return LL_ATON_RT_DONE;
3401add4:	2302      	movs	r3, #2
3401add6:	e02d      	b.n	3401ae34 <LL_ATON_RT_RunEpochBlock+0x194>
      }
    }

    /* run/start current epoch block */
#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    if (this_run_executed_end_epoch)
3401add8:	7bfb      	ldrb	r3, [r7, #15]
3401adda:	2b00      	cmp	r3, #0
3401addc:	d001      	beq.n	3401ade2 <LL_ATON_RT_RunEpochBlock+0x142>
    { // alow reset of network (see function `LL_ATON_RT_Reset_Network()`)
      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
3401adde:	2300      	movs	r3, #0
3401ade0:	e028      	b.n	3401ae34 <LL_ATON_RT_RunEpochBlock+0x194>
    }

    if (!nn_instance->exec_state.current_epoch_block_started)
3401ade2:	687b      	ldr	r3, [r7, #4]
3401ade4:	f893 3020 	ldrb.w	r3, [r3, #32]
3401ade8:	b2db      	uxtb	r3, r3
3401adea:	f083 0301 	eor.w	r3, r3, #1
3401adee:	b2db      	uxtb	r3, r3
3401adf0:	2b00      	cmp	r3, #0
3401adf2:	d009      	beq.n	3401ae08 <LL_ATON_RT_RunEpochBlock+0x168>
    {
      nn_instance->exec_state.current_epoch_block_started = true;
3401adf4:	687b      	ldr	r3, [r7, #4]
3401adf6:	2201      	movs	r2, #1
3401adf8:	f883 2020 	strb.w	r2, [r3, #32]

      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401adfc:	687b      	ldr	r3, [r7, #4]
3401adfe:	685b      	ldr	r3, [r3, #4]
3401ae00:	6879      	ldr	r1, [r7, #4]
3401ae02:	4618      	mov	r0, r3
3401ae04:	f7ff fc38 	bl	3401a678 <__LL_ATON_RT_ExecStartEpochBlock>
    }

    /* End epoch block and advance to next one */
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
3401ae08:	687b      	ldr	r3, [r7, #4]
3401ae0a:	685b      	ldr	r3, [r3, #4]
3401ae0c:	4618      	mov	r0, r3
3401ae0e:	f7ff fdf9 	bl	3401aa04 <__LL_ATON_RT_GetWaitMask>
3401ae12:	4603      	mov	r3, r0
3401ae14:	2b00      	cmp	r3, #0
3401ae16:	d10c      	bne.n	3401ae32 <LL_ATON_RT_RunEpochBlock+0x192>
    {
      /* end/clean-up epoch block */
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3401ae18:	687b      	ldr	r3, [r7, #4]
3401ae1a:	685b      	ldr	r3, [r3, #4]
3401ae1c:	6879      	ldr	r1, [r7, #4]
3401ae1e:	4618      	mov	r0, r3
3401ae20:	f7ff fcd6 	bl	3401a7d0 <__LL_ATON_RT_ExecEndEpochBlock>
      this_run_executed_end_epoch = true; // has no effect (just for cosmetics)
3401ae24:	2301      	movs	r3, #1
3401ae26:	73fb      	strb	r3, [r7, #15]

      /* advance epoch block */
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3401ae28:	6878      	ldr	r0, [r7, #4]
3401ae2a:	f7ff fd8d 	bl	3401a948 <__LL_ATON_RT_DetermineNextEpochBlock>

      /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
      return LL_ATON_RT_NO_WFE;
3401ae2e:	2300      	movs	r3, #0
3401ae30:	e000      	b.n	3401ae34 <LL_ATON_RT_RunEpochBlock+0x194>
    }
    else
    {
      /* Return to main loop */
      return LL_ATON_RT_WFE;
3401ae32:	2301      	movs	r3, #1
    /* Return to main loop (but do NOT call `LL_ATON_OSAL_WFE())`) */
    return LL_ATON_RT_NO_WFE;

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  }
}
3401ae34:	4618      	mov	r0, r3
3401ae36:	3710      	adds	r7, #16
3401ae38:	46bd      	mov	sp, r7
3401ae3a:	bd80      	pop	{r7, pc}
3401ae3c:	3401f190 	.word	0x3401f190
3401ae40:	3401fa4c 	.word	0x3401fa4c
3401ae44:	3401f344 	.word	0x3401f344
3401ae48:	3401f538 	.word	0x3401f538
3401ae4c:	3401f574 	.word	0x3401f574
3401ae50:	3401f52c 	.word	0x3401f52c
3401ae54:	34020d44 	.word	0x34020d44
3401ae58:	3401f3dc 	.word	0x3401f3dc

3401ae5c <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401ae5c:	b5b0      	push	{r4, r5, r7, lr}
3401ae5e:	b086      	sub	sp, #24
3401ae60:	af00      	add	r7, sp, #0
3401ae62:	6078      	str	r0, [r7, #4]
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
3401ae64:	687b      	ldr	r3, [r7, #4]
3401ae66:	2b00      	cmp	r3, #0
3401ae68:	f000 8095 	beq.w	3401af96 <__LL_ATON_RT_IrqErr+0x13a>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
3401ae6c:	687a      	ldr	r2, [r7, #4]
3401ae6e:	4b4c      	ldr	r3, [pc, #304]	@ (3401afa0 <__LL_ATON_RT_IrqErr+0x144>)
3401ae70:	4013      	ands	r3, r2
3401ae72:	2b00      	cmp	r3, #0
3401ae74:	d013      	beq.n	3401ae9e <__LL_ATON_RT_IrqErr+0x42>
    int64_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#else                    //(ATON_INT_NR <= 32)
    int32_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#endif                   //(ATON_INT_NR <= 32)

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));
3401ae76:	687a      	ldr	r2, [r7, #4]
3401ae78:	4b49      	ldr	r3, [pc, #292]	@ (3401afa0 <__LL_ATON_RT_IrqErr+0x144>)
3401ae7a:	4013      	ands	r3, r2
3401ae7c:	613b      	str	r3, [r7, #16]

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3401ae7e:	693b      	ldr	r3, [r7, #16]
3401ae80:	425a      	negs	r2, r3
3401ae82:	693b      	ldr	r3, [r7, #16]
3401ae84:	4013      	ands	r3, r2
3401ae86:	60fb      	str	r3, [r7, #12]
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3401ae88:	68fb      	ldr	r3, [r7, #12]
3401ae8a:	031a      	lsls	r2, r3, #12
3401ae8c:	4b45      	ldr	r3, [pc, #276]	@ (3401afa4 <__LL_ATON_RT_IrqErr+0x148>)
3401ae8e:	4413      	add	r3, r2
3401ae90:	681b      	ldr	r3, [r3, #0]
3401ae92:	60bb      	str	r3, [r7, #8]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
3401ae94:	68ba      	ldr	r2, [r7, #8]
3401ae96:	68f9      	ldr	r1, [r7, #12]
3401ae98:	4843      	ldr	r0, [pc, #268]	@ (3401afa8 <__LL_ATON_RT_IrqErr+0x14c>)
3401ae9a:	f001 f89f 	bl	3401bfdc <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3401ae9e:	687b      	ldr	r3, [r7, #4]
3401aea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
3401aea4:	2b00      	cmp	r3, #0
3401aea6:	d002      	beq.n	3401aeae <__LL_ATON_RT_IrqErr+0x52>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3401aea8:	4840      	ldr	r0, [pc, #256]	@ (3401afac <__LL_ATON_RT_IrqErr+0x150>)
3401aeaa:	f001 f8ff 	bl	3401c0ac <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3401aeae:	687b      	ldr	r3, [r7, #4]
3401aeb0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
3401aeb4:	2b00      	cmp	r3, #0
3401aeb6:	d002      	beq.n	3401aebe <__LL_ATON_RT_IrqErr+0x62>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3401aeb8:	483d      	ldr	r0, [pc, #244]	@ (3401afb0 <__LL_ATON_RT_IrqErr+0x154>)
3401aeba:	f001 f8f7 	bl	3401c0ac <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
3401aebe:	687b      	ldr	r3, [r7, #4]
3401aec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3401aec4:	2b00      	cmp	r3, #0
3401aec6:	d002      	beq.n	3401aece <__LL_ATON_RT_IrqErr+0x72>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3401aec8:	483a      	ldr	r0, [pc, #232]	@ (3401afb4 <__LL_ATON_RT_IrqErr+0x158>)
3401aeca:	f001 f8ef 	bl	3401c0ac <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
3401aece:	687b      	ldr	r3, [r7, #4]
3401aed0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
3401aed4:	2b00      	cmp	r3, #0
3401aed6:	d015      	beq.n	3401af04 <__LL_ATON_RT_IrqErr+0xa8>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3401aed8:	4837      	ldr	r0, [pc, #220]	@ (3401afb8 <__LL_ATON_RT_IrqErr+0x15c>)
3401aeda:	f001 f8e7 	bl	3401c0ac <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401aede:	2300      	movs	r3, #0
3401aee0:	617b      	str	r3, [r7, #20]
3401aee2:	e00c      	b.n	3401aefe <__LL_ATON_RT_IrqErr+0xa2>
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3401aee4:	697b      	ldr	r3, [r7, #20]
3401aee6:	031a      	lsls	r2, r3, #12
3401aee8:	4b34      	ldr	r3, [pc, #208]	@ (3401afbc <__LL_ATON_RT_IrqErr+0x160>)
3401aeea:	4413      	add	r3, r2
3401aeec:	681b      	ldr	r3, [r3, #0]
3401aeee:	461a      	mov	r2, r3
3401aef0:	6979      	ldr	r1, [r7, #20]
3401aef2:	4833      	ldr	r0, [pc, #204]	@ (3401afc0 <__LL_ATON_RT_IrqErr+0x164>)
3401aef4:	f001 f872 	bl	3401bfdc <iprintf>
    for (i = 0; i < ATON_BUSIF_NUM; i++)
3401aef8:	697b      	ldr	r3, [r7, #20]
3401aefa:	3301      	adds	r3, #1
3401aefc:	617b      	str	r3, [r7, #20]
3401aefe:	697b      	ldr	r3, [r7, #20]
3401af00:	2b01      	cmp	r3, #1
3401af02:	ddef      	ble.n	3401aee4 <__LL_ATON_RT_IrqErr+0x88>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
3401af04:	687b      	ldr	r3, [r7, #4]
3401af06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3401af0a:	2b00      	cmp	r3, #0
3401af0c:	d002      	beq.n	3401af14 <__LL_ATON_RT_IrqErr+0xb8>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3401af0e:	482d      	ldr	r0, [pc, #180]	@ (3401afc4 <__LL_ATON_RT_IrqErr+0x168>)
3401af10:	f001 f8cc 	bl	3401c0ac <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af14:	687b      	ldr	r3, [r7, #4]
3401af16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3401af1a:	2b00      	cmp	r3, #0
3401af1c:	d011      	beq.n	3401af42 <__LL_ATON_RT_IrqErr+0xe6>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
3401af1e:	4b2a      	ldr	r3, [pc, #168]	@ (3401afc8 <__LL_ATON_RT_IrqErr+0x16c>)
3401af20:	681b      	ldr	r3, [r3, #0]
3401af22:	4619      	mov	r1, r3
3401af24:	4829      	ldr	r0, [pc, #164]	@ (3401afcc <__LL_ATON_RT_IrqErr+0x170>)
3401af26:	f001 f859 	bl	3401bfdc <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
3401af2a:	4b29      	ldr	r3, [pc, #164]	@ (3401afd0 <__LL_ATON_RT_IrqErr+0x174>)
3401af2c:	681b      	ldr	r3, [r3, #0]
3401af2e:	4619      	mov	r1, r3
3401af30:	4828      	ldr	r0, [pc, #160]	@ (3401afd4 <__LL_ATON_RT_IrqErr+0x178>)
3401af32:	f001 f853 	bl	3401bfdc <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
3401af36:	4b28      	ldr	r3, [pc, #160]	@ (3401afd8 <__LL_ATON_RT_IrqErr+0x17c>)
3401af38:	681b      	ldr	r3, [r3, #0]
3401af3a:	4619      	mov	r1, r3
3401af3c:	4827      	ldr	r0, [pc, #156]	@ (3401afdc <__LL_ATON_RT_IrqErr+0x180>)
3401af3e:	f001 f84d 	bl	3401bfdc <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af42:	687b      	ldr	r3, [r7, #4]
3401af44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
3401af48:	2b00      	cmp	r3, #0
3401af4a:	d002      	beq.n	3401af52 <__LL_ATON_RT_IrqErr+0xf6>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
3401af4c:	4824      	ldr	r0, [pc, #144]	@ (3401afe0 <__LL_ATON_RT_IrqErr+0x184>)
3401af4e:	f001 f8ad 	bl	3401c0ac <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3401af52:	687b      	ldr	r3, [r7, #4]
3401af54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
3401af58:	2b00      	cmp	r3, #0
3401af5a:	d002      	beq.n	3401af62 <__LL_ATON_RT_IrqErr+0x106>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3401af5c:	4821      	ldr	r0, [pc, #132]	@ (3401afe4 <__LL_ATON_RT_IrqErr+0x188>)
3401af5e:	f001 f8a5 	bl	3401c0ac <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
3401af62:	f7ff fb61 	bl	3401a628 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
3401af66:	687b      	ldr	r3, [r7, #4]
3401af68:	2200      	movs	r2, #0
3401af6a:	461c      	mov	r4, r3
3401af6c:	4615      	mov	r5, r2
3401af6e:	4622      	mov	r2, r4
3401af70:	462b      	mov	r3, r5
3401af72:	f240 314a 	movw	r1, #842	@ 0x34a
3401af76:	481c      	ldr	r0, [pc, #112]	@ (3401afe8 <__LL_ATON_RT_IrqErr+0x18c>)
3401af78:	f001 f830 	bl	3401bfdc <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
3401af7c:	4b1b      	ldr	r3, [pc, #108]	@ (3401afec <__LL_ATON_RT_IrqErr+0x190>)
3401af7e:	681b      	ldr	r3, [r3, #0]
3401af80:	689b      	ldr	r3, [r3, #8]
3401af82:	4618      	mov	r0, r3
3401af84:	f000 ff42 	bl	3401be0c <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
3401af88:	4b19      	ldr	r3, [pc, #100]	@ (3401aff0 <__LL_ATON_RT_IrqErr+0x194>)
3401af8a:	4a1a      	ldr	r2, [pc, #104]	@ (3401aff4 <__LL_ATON_RT_IrqErr+0x198>)
3401af8c:	f240 314e 	movw	r1, #846	@ 0x34e
3401af90:	4819      	ldr	r0, [pc, #100]	@ (3401aff8 <__LL_ATON_RT_IrqErr+0x19c>)
3401af92:	f000 f981 	bl	3401b298 <__assert_func>
    return;
3401af96:	bf00      	nop
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
3401af98:	3718      	adds	r7, #24
3401af9a:	46bd      	mov	sp, r7
3401af9c:	bdb0      	pop	{r4, r5, r7, pc}
3401af9e:	bf00      	nop
3401afa0:	000ffc00 	.word	0x000ffc00
3401afa4:	580e503c 	.word	0x580e503c
3401afa8:	3401f5d8 	.word	0x3401f5d8
3401afac:	3401f608 	.word	0x3401f608
3401afb0:	3401f630 	.word	0x3401f630
3401afb4:	3401f654 	.word	0x3401f654
3401afb8:	3401f674 	.word	0x3401f674
3401afbc:	580e2010 	.word	0x580e2010
3401afc0:	3401f68c 	.word	0x3401f68c
3401afc4:	3401f6a4 	.word	0x3401f6a4
3401afc8:	580fe00c 	.word	0x580fe00c
3401afcc:	3401f6bc 	.word	0x3401f6bc
3401afd0:	580fe020 	.word	0x580fe020
3401afd4:	3401f6f0 	.word	0x3401f6f0
3401afd8:	580fe01c 	.word	0x580fe01c
3401afdc:	3401f71c 	.word	0x3401f71c
3401afe0:	3401f740 	.word	0x3401f740
3401afe4:	3401f764 	.word	0x3401f764
3401afe8:	3401f780 	.word	0x3401f780
3401afec:	3402060c 	.word	0x3402060c
3401aff0:	3401f7a8 	.word	0x3401f7a8
3401aff4:	3401fb60 	.word	0x3401fb60
3401aff8:	3401f344 	.word	0x3401f344

3401affc <__LL_ATON_RT_IrqEpochBlock>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401affc:	b480      	push	{r7}
3401affe:	b087      	sub	sp, #28
3401b000:	af00      	add	r7, sp, #0
3401b002:	6078      	str	r0, [r7, #4]
   * consecutive bits within the `INTREG` register (and within all other interrupt controller registers, like e.g.
   * status/mask/clear)! */
  irqs >>= ATON_STRENG_INT(0);
  wait_irqs =
      irqs &
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3401b004:	4b1e      	ldr	r3, [pc, #120]	@ (3401b080 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b006:	681b      	ldr	r3, [r3, #0]
3401b008:	685b      	ldr	r3, [r3, #4]
          ->wait_mask; /* treat only IRQs we are currently waiting for
3401b00a:	68db      	ldr	r3, [r3, #12]
  wait_irqs =
3401b00c:	687a      	ldr	r2, [r7, #4]
3401b00e:	4013      	ands	r3, r2
3401b010:	60fb      	str	r3, [r7, #12]
                          (Note: we might be running in a hybrid function which uses DMAs in parallel with a "normal"
                          ATON execution and we must not clear the IRQs of this "normal" ATON execution here) */
  if (wait_irqs)
3401b012:	68fb      	ldr	r3, [r7, #12]
3401b014:	2b00      	cmp	r3, #0
3401b016:	d02d      	beq.n	3401b074 <__LL_ATON_RT_IrqEpochBlock+0x78>
  {
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401b018:	4b19      	ldr	r3, [pc, #100]	@ (3401b080 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b01a:	681b      	ldr	r3, [r3, #0]
3401b01c:	69db      	ldr	r3, [r3, #28]
3401b01e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401b020:	2300      	movs	r3, #0
3401b022:	617b      	str	r3, [r7, #20]
3401b024:	e01f      	b.n	3401b066 <__LL_ATON_RT_IrqEpochBlock+0x6a>
    {
      /* Handle event interrupts */
      if ((wait_irqs >> i) & 1)
3401b026:	68fa      	ldr	r2, [r7, #12]
3401b028:	697b      	ldr	r3, [r7, #20]
3401b02a:	fa22 f303 	lsr.w	r3, r2, r3
3401b02e:	f003 0301 	and.w	r3, r3, #1
3401b032:	2b00      	cmp	r3, #0
3401b034:	d014      	beq.n	3401b060 <__LL_ATON_RT_IrqEpochBlock+0x64>
      { /* more future-proofed but less efficient alternative:
           `if (wait_irqs & ATON_STRENG_INT_MASK(i, 0, 0))`
         */
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3401b036:	697b      	ldr	r3, [r7, #20]
3401b038:	031a      	lsls	r2, r3, #12
3401b03a:	4b12      	ldr	r3, [pc, #72]	@ (3401b084 <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401b03c:	4413      	add	r3, r2
3401b03e:	681b      	ldr	r3, [r3, #0]
3401b040:	60bb      	str	r3, [r7, #8]
        ATON_STRENG_IRQ_SET(
3401b042:	697b      	ldr	r3, [r7, #20]
3401b044:	031a      	lsls	r2, r3, #12
3401b046:	4b0f      	ldr	r3, [pc, #60]	@ (3401b084 <__LL_ATON_RT_IrqEpochBlock+0x88>)
3401b048:	4413      	add	r3, r2
3401b04a:	461a      	mov	r2, r3
3401b04c:	68bb      	ldr	r3, [r7, #8]
3401b04e:	6013      	str	r3, [r2, #0]
            i, strengIrqs); /* Acknowledge ATON interrupt source (i.e. stream engine #i) - could be more fine grain */

        /* Handle RT integration */
        _tmp_triggered_events |= (1 << i);
3401b050:	2201      	movs	r2, #1
3401b052:	697b      	ldr	r3, [r7, #20]
3401b054:	fa02 f303 	lsl.w	r3, r2, r3
3401b058:	461a      	mov	r2, r3
3401b05a:	693b      	ldr	r3, [r7, #16]
3401b05c:	4313      	orrs	r3, r2
3401b05e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
3401b060:	697b      	ldr	r3, [r7, #20]
3401b062:	3301      	adds	r3, #1
3401b064:	617b      	str	r3, [r7, #20]
3401b066:	697b      	ldr	r3, [r7, #20]
3401b068:	2b09      	cmp	r3, #9
3401b06a:	dddc      	ble.n	3401b026 <__LL_ATON_RT_IrqEpochBlock+0x2a>
      }
    }
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401b06c:	4b04      	ldr	r3, [pc, #16]	@ (3401b080 <__LL_ATON_RT_IrqEpochBlock+0x84>)
3401b06e:	681b      	ldr	r3, [r3, #0]
3401b070:	693a      	ldr	r2, [r7, #16]
3401b072:	61da      	str	r2, [r3, #28]
  }
}
3401b074:	bf00      	nop
3401b076:	371c      	adds	r7, #28
3401b078:	46bd      	mov	sp, r7
3401b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401b07e:	4770      	bx	lr
3401b080:	34020d44 	.word	0x34020d44
3401b084:	580e503c 	.word	0x580e503c

3401b088 <__LL_ATON_RT_IrqEpochBlob>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
3401b088:	b580      	push	{r7, lr}
3401b08a:	b086      	sub	sp, #24
3401b08c:	af00      	add	r7, sp, #0
3401b08e:	6078      	str	r0, [r7, #4]
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401b090:	4b1d      	ldr	r3, [pc, #116]	@ (3401b108 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b092:	681b      	ldr	r3, [r3, #0]
3401b094:	685b      	ldr	r3, [r3, #4]
3401b096:	4618      	mov	r0, r3
3401b098:	f7ff f94e 	bl	3401a338 <EpochBlock_EpochControllerUnit>
3401b09c:	6178      	str	r0, [r7, #20]
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401b09e:	697b      	ldr	r3, [r7, #20]
3401b0a0:	2b00      	cmp	r3, #0
3401b0a2:	d006      	beq.n	3401b0b2 <__LL_ATON_RT_IrqEpochBlob+0x2a>
3401b0a4:	4b19      	ldr	r3, [pc, #100]	@ (3401b10c <__LL_ATON_RT_IrqEpochBlob+0x84>)
3401b0a6:	4a1a      	ldr	r2, [pc, #104]	@ (3401b110 <__LL_ATON_RT_IrqEpochBlob+0x88>)
3401b0a8:	f240 3191 	movw	r1, #913	@ 0x391
3401b0ac:	4819      	ldr	r0, [pc, #100]	@ (3401b114 <__LL_ATON_RT_IrqEpochBlob+0x8c>)
3401b0ae:	f000 f8f3 	bl	3401b298 <__assert_func>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
3401b0b2:	697b      	ldr	r3, [r7, #20]
3401b0b4:	2b00      	cmp	r3, #0
3401b0b6:	d007      	beq.n	3401b0c8 <__LL_ATON_RT_IrqEpochBlob+0x40>
3401b0b8:	697b      	ldr	r3, [r7, #20]
3401b0ba:	2b01      	cmp	r3, #1
3401b0bc:	d102      	bne.n	3401b0c4 <__LL_ATON_RT_IrqEpochBlob+0x3c>
3401b0be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401b0c2:	e003      	b.n	3401b0cc <__LL_ATON_RT_IrqEpochBlob+0x44>
3401b0c4:	2300      	movs	r3, #0
3401b0c6:	e001      	b.n	3401b0cc <__LL_ATON_RT_IrqEpochBlob+0x44>
3401b0c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3401b0cc:	687a      	ldr	r2, [r7, #4]
3401b0ce:	4013      	ands	r3, r2
3401b0d0:	2b00      	cmp	r3, #0
3401b0d2:	d015      	beq.n	3401b100 <__LL_ATON_RT_IrqEpochBlob+0x78>
  {
    /* Acknowledge interrupts in active epoch controller unit - could be more fine grain */
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
3401b0d4:	4b10      	ldr	r3, [pc, #64]	@ (3401b118 <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401b0d6:	681b      	ldr	r3, [r3, #0]
3401b0d8:	613b      	str	r3, [r7, #16]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
3401b0da:	4a0f      	ldr	r2, [pc, #60]	@ (3401b118 <__LL_ATON_RT_IrqEpochBlob+0x90>)
3401b0dc:	693b      	ldr	r3, [r7, #16]
3401b0de:	6013      	str	r3, [r2, #0]

    /* Handle RT integration */
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3401b0e0:	4b09      	ldr	r3, [pc, #36]	@ (3401b108 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b0e2:	681b      	ldr	r3, [r3, #0]
3401b0e4:	69db      	ldr	r3, [r3, #28]
3401b0e6:	60fb      	str	r3, [r7, #12]
    _tmp_triggered_events |= (1 << ecId);
3401b0e8:	2201      	movs	r2, #1
3401b0ea:	697b      	ldr	r3, [r7, #20]
3401b0ec:	fa02 f303 	lsl.w	r3, r2, r3
3401b0f0:	461a      	mov	r2, r3
3401b0f2:	68fb      	ldr	r3, [r7, #12]
3401b0f4:	4313      	orrs	r3, r2
3401b0f6:	60fb      	str	r3, [r7, #12]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
3401b0f8:	4b03      	ldr	r3, [pc, #12]	@ (3401b108 <__LL_ATON_RT_IrqEpochBlob+0x80>)
3401b0fa:	681b      	ldr	r3, [r3, #0]
3401b0fc:	68fa      	ldr	r2, [r7, #12]
3401b0fe:	61da      	str	r2, [r3, #28]
  }
}
3401b100:	bf00      	nop
3401b102:	3718      	adds	r7, #24
3401b104:	46bd      	mov	sp, r7
3401b106:	bd80      	pop	{r7, pc}
3401b108:	34020d44 	.word	0x34020d44
3401b10c:	3401f408 	.word	0x3401f408
3401b110:	3401fb84 	.word	0x3401fb84
3401b114:	3401f344 	.word	0x3401f344
3401b118:	580fe00c 	.word	0x580fe00c

3401b11c <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
3401b11c:	b580      	push	{r7, lr}
3401b11e:	b082      	sub	sp, #8
3401b120:	af00      	add	r7, sp, #0
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
3401b122:	4b3d      	ldr	r3, [pc, #244]	@ (3401b218 <NPU0_IRQHandler+0xfc>)
3401b124:	681b      	ldr	r3, [r3, #0]
3401b126:	607b      	str	r3, [r7, #4]
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
3401b128:	4b3c      	ldr	r3, [pc, #240]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b12a:	681b      	ldr	r3, [r3, #0]
3401b12c:	2b00      	cmp	r3, #0
3401b12e:	d045      	beq.n	3401b1bc <NPU0_IRQHandler+0xa0>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
3401b130:	4b3a      	ldr	r3, [pc, #232]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b132:	681b      	ldr	r3, [r3, #0]
3401b134:	685b      	ldr	r3, [r3, #4]
3401b136:	2b00      	cmp	r3, #0
3401b138:	d106      	bne.n	3401b148 <NPU0_IRQHandler+0x2c>
3401b13a:	4b39      	ldr	r3, [pc, #228]	@ (3401b220 <NPU0_IRQHandler+0x104>)
3401b13c:	4a39      	ldr	r2, [pc, #228]	@ (3401b224 <NPU0_IRQHandler+0x108>)
3401b13e:	f240 31b1 	movw	r1, #945	@ 0x3b1
3401b142:	4839      	ldr	r0, [pc, #228]	@ (3401b228 <NPU0_IRQHandler+0x10c>)
3401b144:	f000 f8a8 	bl	3401b298 <__assert_func>

    /** OR-mask interrupts MUST be handled first **/
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401b148:	4b34      	ldr	r3, [pc, #208]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b14a:	681b      	ldr	r3, [r3, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
3401b14c:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
3401b14e:	4618      	mov	r0, r3
3401b150:	f7ff f8a6 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401b154:	4603      	mov	r3, r0
3401b156:	f083 0301 	eor.w	r3, r3, #1
3401b15a:	b2db      	uxtb	r3, r3
3401b15c:	2b00      	cmp	r3, #0
3401b15e:	d008      	beq.n	3401b172 <NPU0_IRQHandler+0x56>
    {
      __LL_ATON_RT_IrqErr(
3401b160:	687b      	ldr	r3, [r7, #4]
3401b162:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
3401b166:	f023 0303 	bic.w	r3, r3, #3
3401b16a:	4618      	mov	r0, r3
3401b16c:	f7ff fe76 	bl	3401ae5c <__LL_ATON_RT_IrqErr>
3401b170:	e027      	b.n	3401b1c2 <NPU0_IRQHandler+0xa6>
          irqs & ~ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0)); /* exclude all streaming engine completion interrupts */
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
3401b172:	4b2a      	ldr	r3, [pc, #168]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b174:	681b      	ldr	r3, [r3, #0]
3401b176:	685b      	ldr	r3, [r3, #4]
3401b178:	4618      	mov	r0, r3
3401b17a:	f7ff f8dd 	bl	3401a338 <EpochBlock_EpochControllerUnit>
3401b17e:	6038      	str	r0, [r7, #0]
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3401b180:	683b      	ldr	r3, [r7, #0]
3401b182:	2b00      	cmp	r3, #0
3401b184:	d006      	beq.n	3401b194 <NPU0_IRQHandler+0x78>
3401b186:	4b29      	ldr	r3, [pc, #164]	@ (3401b22c <NPU0_IRQHandler+0x110>)
3401b188:	4a26      	ldr	r2, [pc, #152]	@ (3401b224 <NPU0_IRQHandler+0x108>)
3401b18a:	f240 31be 	movw	r1, #958	@ 0x3be
3401b18e:	4826      	ldr	r0, [pc, #152]	@ (3401b228 <NPU0_IRQHandler+0x10c>)
3401b190:	f000 f882 	bl	3401b298 <__assert_func>

      // epoch blob handling based on epoch controller interrupt
      __LL_ATON_RT_IrqErr(
          irqs & ~ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK,
3401b194:	683b      	ldr	r3, [r7, #0]
3401b196:	2b00      	cmp	r3, #0
3401b198:	d008      	beq.n	3401b1ac <NPU0_IRQHandler+0x90>
3401b19a:	683b      	ldr	r3, [r7, #0]
3401b19c:	2b01      	cmp	r3, #1
3401b19e:	d102      	bne.n	3401b1a6 <NPU0_IRQHandler+0x8a>
3401b1a0:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
3401b1a4:	e004      	b.n	3401b1b0 <NPU0_IRQHandler+0x94>
3401b1a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3401b1aa:	e001      	b.n	3401b1b0 <NPU0_IRQHandler+0x94>
3401b1ac:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
      __LL_ATON_RT_IrqErr(
3401b1b0:	687a      	ldr	r2, [r7, #4]
3401b1b2:	4013      	ands	r3, r2
3401b1b4:	4618      	mov	r0, r3
3401b1b6:	f7ff fe51 	bl	3401ae5c <__LL_ATON_RT_IrqErr>
3401b1ba:	e002      	b.n	3401b1c2 <NPU0_IRQHandler+0xa6>
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3401b1bc:	6878      	ldr	r0, [r7, #4]
3401b1be:	f7ff fe4d 	bl	3401ae5c <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3401b1c2:	4b16      	ldr	r3, [pc, #88]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b1c4:	681b      	ldr	r3, [r3, #0]
3401b1c6:	2b00      	cmp	r3, #0
3401b1c8:	d106      	bne.n	3401b1d8 <NPU0_IRQHandler+0xbc>
3401b1ca:	4b19      	ldr	r3, [pc, #100]	@ (3401b230 <NPU0_IRQHandler+0x114>)
3401b1cc:	4a15      	ldr	r2, [pc, #84]	@ (3401b224 <NPU0_IRQHandler+0x108>)
3401b1ce:	f240 31d2 	movw	r1, #978	@ 0x3d2
3401b1d2:	4815      	ldr	r0, [pc, #84]	@ (3401b228 <NPU0_IRQHandler+0x10c>)
3401b1d4:	f000 f860 	bl	3401b298 <__assert_func>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3401b1d8:	4b10      	ldr	r3, [pc, #64]	@ (3401b21c <NPU0_IRQHandler+0x100>)
3401b1da:	681b      	ldr	r3, [r3, #0]
3401b1dc:	685b      	ldr	r3, [r3, #4]
3401b1de:	4618      	mov	r0, r3
3401b1e0:	f7ff f85e 	bl	3401a2a0 <EpochBlock_IsEpochBlob>
3401b1e4:	4603      	mov	r3, r0
3401b1e6:	f083 0301 	eor.w	r3, r3, #1
3401b1ea:	b2db      	uxtb	r3, r3
3401b1ec:	2b00      	cmp	r3, #0
3401b1ee:	d003      	beq.n	3401b1f8 <NPU0_IRQHandler+0xdc>
  { // standard epoch block handling based on streaming engines
    __LL_ATON_RT_IrqEpochBlock(irqs);
3401b1f0:	6878      	ldr	r0, [r7, #4]
3401b1f2:	f7ff ff03 	bl	3401affc <__LL_ATON_RT_IrqEpochBlock>
3401b1f6:	e002      	b.n	3401b1fe <NPU0_IRQHandler+0xe2>
  }
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM)
    __LL_ATON_RT_IrqEpochBlob(irqs);
3401b1f8:	6878      	ldr	r0, [r7, #4]
3401b1fa:	f7ff ff45 	bl	3401b088 <__LL_ATON_RT_IrqEpochBlob>
  __ASM volatile ("dsb 0xF":::"memory");
3401b1fe:	f3bf 8f4f 	dsb	sy
}
3401b202:	bf00      	nop
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
3401b204:	4a0b      	ldr	r2, [pc, #44]	@ (3401b234 <NPU0_IRQHandler+0x118>)
3401b206:	687b      	ldr	r3, [r7, #4]
3401b208:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
3401b20a:	f3bf 8f4f 	dsb	sy
}
3401b20e:	bf00      	nop
  /* Signal event */
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
3401b210:	bf00      	nop
}
3401b212:	3708      	adds	r7, #8
3401b214:	46bd      	mov	sp, r7
3401b216:	bd80      	pop	{r7, pc}
3401b218:	580e1008 	.word	0x580e1008
3401b21c:	34020d44 	.word	0x34020d44
3401b220:	3401f7ac 	.word	0x3401f7ac
3401b224:	3401fb74 	.word	0x3401fb74
3401b228:	3401f344 	.word	0x3401f344
3401b22c:	3401f408 	.word	0x3401f408
3401b230:	3401f1dc 	.word	0x3401f1dc
3401b234:	580e1010 	.word	0x580e1010

3401b238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3401b238:	480f      	ldr	r0, [pc, #60]	@ (3401b278 <LoopForever+0x4>)
  msr   MSPLIM, r0
3401b23a:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3401b23e:	480f      	ldr	r0, [pc, #60]	@ (3401b27c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3401b240:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3401b242:	f7e8 fa43 	bl	340036cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3401b246:	480e      	ldr	r0, [pc, #56]	@ (3401b280 <LoopForever+0xc>)
  ldr r1, =_edata
3401b248:	490e      	ldr	r1, [pc, #56]	@ (3401b284 <LoopForever+0x10>)
  ldr r2, =_sidata
3401b24a:	4a0f      	ldr	r2, [pc, #60]	@ (3401b288 <LoopForever+0x14>)
  movs r3, #0
3401b24c:	2300      	movs	r3, #0
  b LoopCopyDataInit
3401b24e:	e002      	b.n	3401b256 <LoopCopyDataInit>

3401b250 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3401b250:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3401b252:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3401b254:	3304      	adds	r3, #4

3401b256 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3401b256:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3401b258:	428c      	cmp	r4, r1
  bcc CopyDataInit
3401b25a:	d3f9      	bcc.n	3401b250 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3401b25c:	4a0b      	ldr	r2, [pc, #44]	@ (3401b28c <LoopForever+0x18>)
  ldr r4, =_ebss
3401b25e:	4c0c      	ldr	r4, [pc, #48]	@ (3401b290 <LoopForever+0x1c>)
  movs r3, #0
3401b260:	2300      	movs	r3, #0
  b LoopFillZerobss
3401b262:	e001      	b.n	3401b268 <LoopFillZerobss>

3401b264 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3401b264:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3401b266:	3204      	adds	r2, #4

3401b268 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3401b268:	42a2      	cmp	r2, r4
  bcc FillZerobss
3401b26a:	d3fb      	bcc.n	3401b264 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3401b26c:	f001 fa58 	bl	3401c720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3401b270:	f7e6 f9c6 	bl	34001600 <main>

3401b274 <LoopForever>:

LoopForever:
  b LoopForever
3401b274:	e7fe      	b.n	3401b274 <LoopForever>
3401b276:	0000      	.short	0x0000
  ldr   r0, =_sstack
3401b278:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
3401b27c:	34100000 	.word	0x34100000
  ldr r0, =_sdata
3401b280:	340205bc 	.word	0x340205bc
  ldr r1, =_edata
3401b284:	340207c8 	.word	0x340207c8
  ldr r2, =_sidata
3401b288:	340205bc 	.word	0x340205bc
  ldr r2, =_sbss
3401b28c:	340207c8 	.word	0x340207c8
  ldr r4, =_ebss
3401b290:	34020ea0 	.word	0x34020ea0

3401b294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3401b294:	e7fe      	b.n	3401b294 <ADC1_2_IRQHandler>
	...

3401b298 <__assert_func>:
3401b298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401b29a:	4614      	mov	r4, r2
3401b29c:	461a      	mov	r2, r3
3401b29e:	4b09      	ldr	r3, [pc, #36]	@ (3401b2c4 <__assert_func+0x2c>)
3401b2a0:	4605      	mov	r5, r0
3401b2a2:	681b      	ldr	r3, [r3, #0]
3401b2a4:	68d8      	ldr	r0, [r3, #12]
3401b2a6:	b14c      	cbz	r4, 3401b2bc <__assert_func+0x24>
3401b2a8:	4b07      	ldr	r3, [pc, #28]	@ (3401b2c8 <__assert_func+0x30>)
3401b2aa:	9100      	str	r1, [sp, #0]
3401b2ac:	4907      	ldr	r1, [pc, #28]	@ (3401b2cc <__assert_func+0x34>)
3401b2ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401b2b2:	462b      	mov	r3, r5
3401b2b4:	f000 fe62 	bl	3401bf7c <fiprintf>
3401b2b8:	f001 fa74 	bl	3401c7a4 <abort>
3401b2bc:	4b04      	ldr	r3, [pc, #16]	@ (3401b2d0 <__assert_func+0x38>)
3401b2be:	461c      	mov	r4, r3
3401b2c0:	e7f3      	b.n	3401b2aa <__assert_func+0x12>
3401b2c2:	bf00      	nop
3401b2c4:	3402060c 	.word	0x3402060c
3401b2c8:	3401fb9e 	.word	0x3401fb9e
3401b2cc:	3401fbab 	.word	0x3401fbab
3401b2d0:	3401fbd9 	.word	0x3401fbd9

3401b2d4 <malloc>:
3401b2d4:	4b02      	ldr	r3, [pc, #8]	@ (3401b2e0 <malloc+0xc>)
3401b2d6:	4601      	mov	r1, r0
3401b2d8:	6818      	ldr	r0, [r3, #0]
3401b2da:	f000 b825 	b.w	3401b328 <_malloc_r>
3401b2de:	bf00      	nop
3401b2e0:	3402060c 	.word	0x3402060c

3401b2e4 <sbrk_aligned>:
3401b2e4:	b570      	push	{r4, r5, r6, lr}
3401b2e6:	4e0f      	ldr	r6, [pc, #60]	@ (3401b324 <sbrk_aligned+0x40>)
3401b2e8:	460c      	mov	r4, r1
3401b2ea:	4605      	mov	r5, r0
3401b2ec:	6831      	ldr	r1, [r6, #0]
3401b2ee:	b911      	cbnz	r1, 3401b2f6 <sbrk_aligned+0x12>
3401b2f0:	f001 f9ee 	bl	3401c6d0 <_sbrk_r>
3401b2f4:	6030      	str	r0, [r6, #0]
3401b2f6:	4621      	mov	r1, r4
3401b2f8:	4628      	mov	r0, r5
3401b2fa:	f001 f9e9 	bl	3401c6d0 <_sbrk_r>
3401b2fe:	1c43      	adds	r3, r0, #1
3401b300:	d103      	bne.n	3401b30a <sbrk_aligned+0x26>
3401b302:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
3401b306:	4620      	mov	r0, r4
3401b308:	bd70      	pop	{r4, r5, r6, pc}
3401b30a:	1cc4      	adds	r4, r0, #3
3401b30c:	f024 0403 	bic.w	r4, r4, #3
3401b310:	42a0      	cmp	r0, r4
3401b312:	d0f8      	beq.n	3401b306 <sbrk_aligned+0x22>
3401b314:	1a21      	subs	r1, r4, r0
3401b316:	4628      	mov	r0, r5
3401b318:	f001 f9da 	bl	3401c6d0 <_sbrk_r>
3401b31c:	3001      	adds	r0, #1
3401b31e:	d1f2      	bne.n	3401b306 <sbrk_aligned+0x22>
3401b320:	e7ef      	b.n	3401b302 <sbrk_aligned+0x1e>
3401b322:	bf00      	nop
3401b324:	34020d50 	.word	0x34020d50

3401b328 <_malloc_r>:
3401b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401b32c:	1ccd      	adds	r5, r1, #3
3401b32e:	4606      	mov	r6, r0
3401b330:	f025 0503 	bic.w	r5, r5, #3
3401b334:	3508      	adds	r5, #8
3401b336:	2d0c      	cmp	r5, #12
3401b338:	bf38      	it	cc
3401b33a:	250c      	movcc	r5, #12
3401b33c:	2d00      	cmp	r5, #0
3401b33e:	db01      	blt.n	3401b344 <_malloc_r+0x1c>
3401b340:	42a9      	cmp	r1, r5
3401b342:	d904      	bls.n	3401b34e <_malloc_r+0x26>
3401b344:	230c      	movs	r3, #12
3401b346:	6033      	str	r3, [r6, #0]
3401b348:	2000      	movs	r0, #0
3401b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401b34e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3401b424 <_malloc_r+0xfc>
3401b352:	f000 f869 	bl	3401b428 <__malloc_lock>
3401b356:	f8d8 3000 	ldr.w	r3, [r8]
3401b35a:	461c      	mov	r4, r3
3401b35c:	bb44      	cbnz	r4, 3401b3b0 <_malloc_r+0x88>
3401b35e:	4629      	mov	r1, r5
3401b360:	4630      	mov	r0, r6
3401b362:	f7ff ffbf 	bl	3401b2e4 <sbrk_aligned>
3401b366:	1c43      	adds	r3, r0, #1
3401b368:	4604      	mov	r4, r0
3401b36a:	d158      	bne.n	3401b41e <_malloc_r+0xf6>
3401b36c:	f8d8 4000 	ldr.w	r4, [r8]
3401b370:	4627      	mov	r7, r4
3401b372:	2f00      	cmp	r7, #0
3401b374:	d143      	bne.n	3401b3fe <_malloc_r+0xd6>
3401b376:	2c00      	cmp	r4, #0
3401b378:	d04b      	beq.n	3401b412 <_malloc_r+0xea>
3401b37a:	6823      	ldr	r3, [r4, #0]
3401b37c:	4639      	mov	r1, r7
3401b37e:	4630      	mov	r0, r6
3401b380:	eb04 0903 	add.w	r9, r4, r3
3401b384:	f001 f9a4 	bl	3401c6d0 <_sbrk_r>
3401b388:	4581      	cmp	r9, r0
3401b38a:	d142      	bne.n	3401b412 <_malloc_r+0xea>
3401b38c:	6821      	ldr	r1, [r4, #0]
3401b38e:	4630      	mov	r0, r6
3401b390:	1a6d      	subs	r5, r5, r1
3401b392:	4629      	mov	r1, r5
3401b394:	f7ff ffa6 	bl	3401b2e4 <sbrk_aligned>
3401b398:	3001      	adds	r0, #1
3401b39a:	d03a      	beq.n	3401b412 <_malloc_r+0xea>
3401b39c:	6823      	ldr	r3, [r4, #0]
3401b39e:	442b      	add	r3, r5
3401b3a0:	6023      	str	r3, [r4, #0]
3401b3a2:	f8d8 3000 	ldr.w	r3, [r8]
3401b3a6:	685a      	ldr	r2, [r3, #4]
3401b3a8:	bb62      	cbnz	r2, 3401b404 <_malloc_r+0xdc>
3401b3aa:	f8c8 7000 	str.w	r7, [r8]
3401b3ae:	e00f      	b.n	3401b3d0 <_malloc_r+0xa8>
3401b3b0:	6822      	ldr	r2, [r4, #0]
3401b3b2:	1b52      	subs	r2, r2, r5
3401b3b4:	d420      	bmi.n	3401b3f8 <_malloc_r+0xd0>
3401b3b6:	2a0b      	cmp	r2, #11
3401b3b8:	d917      	bls.n	3401b3ea <_malloc_r+0xc2>
3401b3ba:	1961      	adds	r1, r4, r5
3401b3bc:	42a3      	cmp	r3, r4
3401b3be:	6025      	str	r5, [r4, #0]
3401b3c0:	bf18      	it	ne
3401b3c2:	6059      	strne	r1, [r3, #4]
3401b3c4:	6863      	ldr	r3, [r4, #4]
3401b3c6:	bf08      	it	eq
3401b3c8:	f8c8 1000 	streq.w	r1, [r8]
3401b3cc:	5162      	str	r2, [r4, r5]
3401b3ce:	604b      	str	r3, [r1, #4]
3401b3d0:	4630      	mov	r0, r6
3401b3d2:	f000 f82f 	bl	3401b434 <__malloc_unlock>
3401b3d6:	f104 000b 	add.w	r0, r4, #11
3401b3da:	1d23      	adds	r3, r4, #4
3401b3dc:	f020 0007 	bic.w	r0, r0, #7
3401b3e0:	1ac2      	subs	r2, r0, r3
3401b3e2:	bf1c      	itt	ne
3401b3e4:	1a1b      	subne	r3, r3, r0
3401b3e6:	50a3      	strne	r3, [r4, r2]
3401b3e8:	e7af      	b.n	3401b34a <_malloc_r+0x22>
3401b3ea:	6862      	ldr	r2, [r4, #4]
3401b3ec:	42a3      	cmp	r3, r4
3401b3ee:	bf0c      	ite	eq
3401b3f0:	f8c8 2000 	streq.w	r2, [r8]
3401b3f4:	605a      	strne	r2, [r3, #4]
3401b3f6:	e7eb      	b.n	3401b3d0 <_malloc_r+0xa8>
3401b3f8:	4623      	mov	r3, r4
3401b3fa:	6864      	ldr	r4, [r4, #4]
3401b3fc:	e7ae      	b.n	3401b35c <_malloc_r+0x34>
3401b3fe:	463c      	mov	r4, r7
3401b400:	687f      	ldr	r7, [r7, #4]
3401b402:	e7b6      	b.n	3401b372 <_malloc_r+0x4a>
3401b404:	461a      	mov	r2, r3
3401b406:	685b      	ldr	r3, [r3, #4]
3401b408:	42a3      	cmp	r3, r4
3401b40a:	d1fb      	bne.n	3401b404 <_malloc_r+0xdc>
3401b40c:	2300      	movs	r3, #0
3401b40e:	6053      	str	r3, [r2, #4]
3401b410:	e7de      	b.n	3401b3d0 <_malloc_r+0xa8>
3401b412:	230c      	movs	r3, #12
3401b414:	4630      	mov	r0, r6
3401b416:	6033      	str	r3, [r6, #0]
3401b418:	f000 f80c 	bl	3401b434 <__malloc_unlock>
3401b41c:	e794      	b.n	3401b348 <_malloc_r+0x20>
3401b41e:	6005      	str	r5, [r0, #0]
3401b420:	e7d6      	b.n	3401b3d0 <_malloc_r+0xa8>
3401b422:	bf00      	nop
3401b424:	34020d54 	.word	0x34020d54

3401b428 <__malloc_lock>:
3401b428:	4801      	ldr	r0, [pc, #4]	@ (3401b430 <__malloc_lock+0x8>)
3401b42a:	f001 b99e 	b.w	3401c76a <__retarget_lock_acquire_recursive>
3401b42e:	bf00      	nop
3401b430:	34020e98 	.word	0x34020e98

3401b434 <__malloc_unlock>:
3401b434:	4801      	ldr	r0, [pc, #4]	@ (3401b43c <__malloc_unlock+0x8>)
3401b436:	f001 b999 	b.w	3401c76c <__retarget_lock_release_recursive>
3401b43a:	bf00      	nop
3401b43c:	34020e98 	.word	0x34020e98

3401b440 <__cvt>:
3401b440:	b5f0      	push	{r4, r5, r6, r7, lr}
3401b442:	ed2d 8b02 	vpush	{d8}
3401b446:	eeb0 8b40 	vmov.f64	d8, d0
3401b44a:	b085      	sub	sp, #20
3401b44c:	4617      	mov	r7, r2
3401b44e:	460c      	mov	r4, r1
3401b450:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3401b452:	ee18 2a90 	vmov	r2, s17
3401b456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401b458:	f025 0520 	bic.w	r5, r5, #32
3401b45c:	2a00      	cmp	r2, #0
3401b45e:	bfb6      	itet	lt
3401b460:	222d      	movlt	r2, #45	@ 0x2d
3401b462:	2200      	movge	r2, #0
3401b464:	eeb1 8b40 	vneglt.f64	d8, d0
3401b468:	2d46      	cmp	r5, #70	@ 0x46
3401b46a:	701a      	strb	r2, [r3, #0]
3401b46c:	d004      	beq.n	3401b478 <__cvt+0x38>
3401b46e:	2d45      	cmp	r5, #69	@ 0x45
3401b470:	d100      	bne.n	3401b474 <__cvt+0x34>
3401b472:	3401      	adds	r4, #1
3401b474:	2102      	movs	r1, #2
3401b476:	e000      	b.n	3401b47a <__cvt+0x3a>
3401b478:	2103      	movs	r1, #3
3401b47a:	ab03      	add	r3, sp, #12
3401b47c:	eeb0 0b48 	vmov.f64	d0, d8
3401b480:	4622      	mov	r2, r4
3401b482:	9301      	str	r3, [sp, #4]
3401b484:	ab02      	add	r3, sp, #8
3401b486:	9300      	str	r3, [sp, #0]
3401b488:	4633      	mov	r3, r6
3401b48a:	f001 fa21 	bl	3401c8d0 <_dtoa_r>
3401b48e:	2d47      	cmp	r5, #71	@ 0x47
3401b490:	d114      	bne.n	3401b4bc <__cvt+0x7c>
3401b492:	07fb      	lsls	r3, r7, #31
3401b494:	d50a      	bpl.n	3401b4ac <__cvt+0x6c>
3401b496:	1902      	adds	r2, r0, r4
3401b498:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b49c:	2130      	movs	r1, #48	@ 0x30
3401b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4a2:	bf08      	it	eq
3401b4a4:	9203      	streq	r2, [sp, #12]
3401b4a6:	9b03      	ldr	r3, [sp, #12]
3401b4a8:	4293      	cmp	r3, r2
3401b4aa:	d319      	bcc.n	3401b4e0 <__cvt+0xa0>
3401b4ac:	9b03      	ldr	r3, [sp, #12]
3401b4ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401b4b0:	1a1b      	subs	r3, r3, r0
3401b4b2:	6013      	str	r3, [r2, #0]
3401b4b4:	b005      	add	sp, #20
3401b4b6:	ecbd 8b02 	vpop	{d8}
3401b4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401b4bc:	2d46      	cmp	r5, #70	@ 0x46
3401b4be:	eb00 0204 	add.w	r2, r0, r4
3401b4c2:	d1e9      	bne.n	3401b498 <__cvt+0x58>
3401b4c4:	7803      	ldrb	r3, [r0, #0]
3401b4c6:	2b30      	cmp	r3, #48	@ 0x30
3401b4c8:	d107      	bne.n	3401b4da <__cvt+0x9a>
3401b4ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b4d2:	bf1c      	itt	ne
3401b4d4:	f1c4 0401 	rsbne	r4, r4, #1
3401b4d8:	6034      	strne	r4, [r6, #0]
3401b4da:	6833      	ldr	r3, [r6, #0]
3401b4dc:	441a      	add	r2, r3
3401b4de:	e7db      	b.n	3401b498 <__cvt+0x58>
3401b4e0:	1c5c      	adds	r4, r3, #1
3401b4e2:	9403      	str	r4, [sp, #12]
3401b4e4:	7019      	strb	r1, [r3, #0]
3401b4e6:	e7de      	b.n	3401b4a6 <__cvt+0x66>

3401b4e8 <__exponent>:
3401b4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b4ea:	2900      	cmp	r1, #0
3401b4ec:	7002      	strb	r2, [r0, #0]
3401b4ee:	bfba      	itte	lt
3401b4f0:	4249      	neglt	r1, r1
3401b4f2:	232d      	movlt	r3, #45	@ 0x2d
3401b4f4:	232b      	movge	r3, #43	@ 0x2b
3401b4f6:	2909      	cmp	r1, #9
3401b4f8:	7043      	strb	r3, [r0, #1]
3401b4fa:	dd28      	ble.n	3401b54e <__exponent+0x66>
3401b4fc:	f10d 0307 	add.w	r3, sp, #7
3401b500:	270a      	movs	r7, #10
3401b502:	461d      	mov	r5, r3
3401b504:	461a      	mov	r2, r3
3401b506:	3b01      	subs	r3, #1
3401b508:	fbb1 f6f7 	udiv	r6, r1, r7
3401b50c:	fb07 1416 	mls	r4, r7, r6, r1
3401b510:	3430      	adds	r4, #48	@ 0x30
3401b512:	f802 4c01 	strb.w	r4, [r2, #-1]
3401b516:	460c      	mov	r4, r1
3401b518:	4631      	mov	r1, r6
3401b51a:	2c63      	cmp	r4, #99	@ 0x63
3401b51c:	dcf2      	bgt.n	3401b504 <__exponent+0x1c>
3401b51e:	3130      	adds	r1, #48	@ 0x30
3401b520:	1e94      	subs	r4, r2, #2
3401b522:	f803 1c01 	strb.w	r1, [r3, #-1]
3401b526:	1c41      	adds	r1, r0, #1
3401b528:	4623      	mov	r3, r4
3401b52a:	42ab      	cmp	r3, r5
3401b52c:	d30a      	bcc.n	3401b544 <__exponent+0x5c>
3401b52e:	f10d 0309 	add.w	r3, sp, #9
3401b532:	1a9b      	subs	r3, r3, r2
3401b534:	42ac      	cmp	r4, r5
3401b536:	bf88      	it	hi
3401b538:	2300      	movhi	r3, #0
3401b53a:	3302      	adds	r3, #2
3401b53c:	4403      	add	r3, r0
3401b53e:	1a18      	subs	r0, r3, r0
3401b540:	b003      	add	sp, #12
3401b542:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401b544:	f813 6b01 	ldrb.w	r6, [r3], #1
3401b548:	f801 6f01 	strb.w	r6, [r1, #1]!
3401b54c:	e7ed      	b.n	3401b52a <__exponent+0x42>
3401b54e:	2330      	movs	r3, #48	@ 0x30
3401b550:	3130      	adds	r1, #48	@ 0x30
3401b552:	7083      	strb	r3, [r0, #2]
3401b554:	1d03      	adds	r3, r0, #4
3401b556:	70c1      	strb	r1, [r0, #3]
3401b558:	e7f1      	b.n	3401b53e <__exponent+0x56>
3401b55a:	0000      	movs	r0, r0
3401b55c:	0000      	movs	r0, r0
	...

3401b560 <_printf_float>:
3401b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401b564:	b08d      	sub	sp, #52	@ 0x34
3401b566:	460c      	mov	r4, r1
3401b568:	4616      	mov	r6, r2
3401b56a:	461f      	mov	r7, r3
3401b56c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3401b570:	4605      	mov	r5, r0
3401b572:	f001 f875 	bl	3401c660 <_localeconv_r>
3401b576:	f8d0 b000 	ldr.w	fp, [r0]
3401b57a:	4658      	mov	r0, fp
3401b57c:	f7e5 f908 	bl	34000790 <strlen>
3401b580:	2300      	movs	r3, #0
3401b582:	f894 9018 	ldrb.w	r9, [r4, #24]
3401b586:	930a      	str	r3, [sp, #40]	@ 0x28
3401b588:	f8d8 3000 	ldr.w	r3, [r8]
3401b58c:	6822      	ldr	r2, [r4, #0]
3401b58e:	3307      	adds	r3, #7
3401b590:	9005      	str	r0, [sp, #20]
3401b592:	f023 0307 	bic.w	r3, r3, #7
3401b596:	f103 0108 	add.w	r1, r3, #8
3401b59a:	f8c8 1000 	str.w	r1, [r8]
3401b59e:	ed93 0b00 	vldr	d0, [r3]
3401b5a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401b800 <_printf_float+0x2a0>
3401b5a6:	eeb0 7bc0 	vabs.f64	d7, d0
3401b5aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401b5ae:	eeb4 7b46 	vcmp.f64	d7, d6
3401b5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b5b6:	dd24      	ble.n	3401b602 <_printf_float+0xa2>
3401b5b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b5c0:	d502      	bpl.n	3401b5c8 <_printf_float+0x68>
3401b5c2:	232d      	movs	r3, #45	@ 0x2d
3401b5c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401b5c8:	498f      	ldr	r1, [pc, #572]	@ (3401b808 <_printf_float+0x2a8>)
3401b5ca:	4b90      	ldr	r3, [pc, #576]	@ (3401b80c <_printf_float+0x2ac>)
3401b5cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3401b5d0:	bf8c      	ite	hi
3401b5d2:	4688      	movhi	r8, r1
3401b5d4:	4698      	movls	r8, r3
3401b5d6:	f022 0204 	bic.w	r2, r2, #4
3401b5da:	2303      	movs	r3, #3
3401b5dc:	f04f 0a00 	mov.w	sl, #0
3401b5e0:	6022      	str	r2, [r4, #0]
3401b5e2:	6123      	str	r3, [r4, #16]
3401b5e4:	4633      	mov	r3, r6
3401b5e6:	aa0b      	add	r2, sp, #44	@ 0x2c
3401b5e8:	4621      	mov	r1, r4
3401b5ea:	4628      	mov	r0, r5
3401b5ec:	9700      	str	r7, [sp, #0]
3401b5ee:	f000 f9d1 	bl	3401b994 <_printf_common>
3401b5f2:	3001      	adds	r0, #1
3401b5f4:	f040 8089 	bne.w	3401b70a <_printf_float+0x1aa>
3401b5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401b5fc:	b00d      	add	sp, #52	@ 0x34
3401b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401b602:	eeb4 0b40 	vcmp.f64	d0, d0
3401b606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b60a:	d709      	bvc.n	3401b620 <_printf_float+0xc0>
3401b60c:	ee10 3a90 	vmov	r3, s1
3401b610:	497f      	ldr	r1, [pc, #508]	@ (3401b810 <_printf_float+0x2b0>)
3401b612:	2b00      	cmp	r3, #0
3401b614:	bfbc      	itt	lt
3401b616:	232d      	movlt	r3, #45	@ 0x2d
3401b618:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3401b61c:	4b7d      	ldr	r3, [pc, #500]	@ (3401b814 <_printf_float+0x2b4>)
3401b61e:	e7d5      	b.n	3401b5cc <_printf_float+0x6c>
3401b620:	6863      	ldr	r3, [r4, #4]
3401b622:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3401b626:	1c59      	adds	r1, r3, #1
3401b628:	d139      	bne.n	3401b69e <_printf_float+0x13e>
3401b62a:	2306      	movs	r3, #6
3401b62c:	6063      	str	r3, [r4, #4]
3401b62e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3401b632:	2300      	movs	r3, #0
3401b634:	4628      	mov	r0, r5
3401b636:	6022      	str	r2, [r4, #0]
3401b638:	9303      	str	r3, [sp, #12]
3401b63a:	ab0a      	add	r3, sp, #40	@ 0x28
3401b63c:	e9cd 9301 	strd	r9, r3, [sp, #4]
3401b640:	ab09      	add	r3, sp, #36	@ 0x24
3401b642:	9300      	str	r3, [sp, #0]
3401b644:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3401b648:	6861      	ldr	r1, [r4, #4]
3401b64a:	f7ff fef9 	bl	3401b440 <__cvt>
3401b64e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401b652:	4680      	mov	r8, r0
3401b654:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401b656:	d129      	bne.n	3401b6ac <_printf_float+0x14c>
3401b658:	1cc8      	adds	r0, r1, #3
3401b65a:	db02      	blt.n	3401b662 <_printf_float+0x102>
3401b65c:	6863      	ldr	r3, [r4, #4]
3401b65e:	4299      	cmp	r1, r3
3401b660:	dd41      	ble.n	3401b6e6 <_printf_float+0x186>
3401b662:	f1a9 0902 	sub.w	r9, r9, #2
3401b666:	fa5f f989 	uxtb.w	r9, r9
3401b66a:	3901      	subs	r1, #1
3401b66c:	464a      	mov	r2, r9
3401b66e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401b672:	9109      	str	r1, [sp, #36]	@ 0x24
3401b674:	f7ff ff38 	bl	3401b4e8 <__exponent>
3401b678:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401b67a:	4682      	mov	sl, r0
3401b67c:	1813      	adds	r3, r2, r0
3401b67e:	2a01      	cmp	r2, #1
3401b680:	6123      	str	r3, [r4, #16]
3401b682:	dc02      	bgt.n	3401b68a <_printf_float+0x12a>
3401b684:	6822      	ldr	r2, [r4, #0]
3401b686:	07d2      	lsls	r2, r2, #31
3401b688:	d501      	bpl.n	3401b68e <_printf_float+0x12e>
3401b68a:	3301      	adds	r3, #1
3401b68c:	6123      	str	r3, [r4, #16]
3401b68e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3401b692:	2b00      	cmp	r3, #0
3401b694:	d0a6      	beq.n	3401b5e4 <_printf_float+0x84>
3401b696:	232d      	movs	r3, #45	@ 0x2d
3401b698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401b69c:	e7a2      	b.n	3401b5e4 <_printf_float+0x84>
3401b69e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401b6a2:	d1c4      	bne.n	3401b62e <_printf_float+0xce>
3401b6a4:	2b00      	cmp	r3, #0
3401b6a6:	d1c2      	bne.n	3401b62e <_printf_float+0xce>
3401b6a8:	2301      	movs	r3, #1
3401b6aa:	e7bf      	b.n	3401b62c <_printf_float+0xcc>
3401b6ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401b6b0:	d9db      	bls.n	3401b66a <_printf_float+0x10a>
3401b6b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3401b6b6:	d118      	bne.n	3401b6ea <_printf_float+0x18a>
3401b6b8:	2900      	cmp	r1, #0
3401b6ba:	6863      	ldr	r3, [r4, #4]
3401b6bc:	dd0b      	ble.n	3401b6d6 <_printf_float+0x176>
3401b6be:	6121      	str	r1, [r4, #16]
3401b6c0:	b913      	cbnz	r3, 3401b6c8 <_printf_float+0x168>
3401b6c2:	6822      	ldr	r2, [r4, #0]
3401b6c4:	07d0      	lsls	r0, r2, #31
3401b6c6:	d502      	bpl.n	3401b6ce <_printf_float+0x16e>
3401b6c8:	3301      	adds	r3, #1
3401b6ca:	440b      	add	r3, r1
3401b6cc:	6123      	str	r3, [r4, #16]
3401b6ce:	f04f 0a00 	mov.w	sl, #0
3401b6d2:	65a1      	str	r1, [r4, #88]	@ 0x58
3401b6d4:	e7db      	b.n	3401b68e <_printf_float+0x12e>
3401b6d6:	b913      	cbnz	r3, 3401b6de <_printf_float+0x17e>
3401b6d8:	6822      	ldr	r2, [r4, #0]
3401b6da:	07d2      	lsls	r2, r2, #31
3401b6dc:	d501      	bpl.n	3401b6e2 <_printf_float+0x182>
3401b6de:	3302      	adds	r3, #2
3401b6e0:	e7f4      	b.n	3401b6cc <_printf_float+0x16c>
3401b6e2:	2301      	movs	r3, #1
3401b6e4:	e7f2      	b.n	3401b6cc <_printf_float+0x16c>
3401b6e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
3401b6ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401b6ec:	4299      	cmp	r1, r3
3401b6ee:	db05      	blt.n	3401b6fc <_printf_float+0x19c>
3401b6f0:	6823      	ldr	r3, [r4, #0]
3401b6f2:	6121      	str	r1, [r4, #16]
3401b6f4:	07d8      	lsls	r0, r3, #31
3401b6f6:	d5ea      	bpl.n	3401b6ce <_printf_float+0x16e>
3401b6f8:	1c4b      	adds	r3, r1, #1
3401b6fa:	e7e7      	b.n	3401b6cc <_printf_float+0x16c>
3401b6fc:	2900      	cmp	r1, #0
3401b6fe:	bfd4      	ite	le
3401b700:	f1c1 0202 	rsble	r2, r1, #2
3401b704:	2201      	movgt	r2, #1
3401b706:	4413      	add	r3, r2
3401b708:	e7e0      	b.n	3401b6cc <_printf_float+0x16c>
3401b70a:	6823      	ldr	r3, [r4, #0]
3401b70c:	055a      	lsls	r2, r3, #21
3401b70e:	d407      	bmi.n	3401b720 <_printf_float+0x1c0>
3401b710:	6923      	ldr	r3, [r4, #16]
3401b712:	4642      	mov	r2, r8
3401b714:	4631      	mov	r1, r6
3401b716:	4628      	mov	r0, r5
3401b718:	47b8      	blx	r7
3401b71a:	3001      	adds	r0, #1
3401b71c:	d12a      	bne.n	3401b774 <_printf_float+0x214>
3401b71e:	e76b      	b.n	3401b5f8 <_printf_float+0x98>
3401b720:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401b724:	f240 80e0 	bls.w	3401b8e8 <_printf_float+0x388>
3401b728:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401b72c:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401b730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b734:	d133      	bne.n	3401b79e <_printf_float+0x23e>
3401b736:	2301      	movs	r3, #1
3401b738:	4a37      	ldr	r2, [pc, #220]	@ (3401b818 <_printf_float+0x2b8>)
3401b73a:	4631      	mov	r1, r6
3401b73c:	4628      	mov	r0, r5
3401b73e:	47b8      	blx	r7
3401b740:	3001      	adds	r0, #1
3401b742:	f43f af59 	beq.w	3401b5f8 <_printf_float+0x98>
3401b746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401b74a:	4543      	cmp	r3, r8
3401b74c:	db02      	blt.n	3401b754 <_printf_float+0x1f4>
3401b74e:	6823      	ldr	r3, [r4, #0]
3401b750:	07d8      	lsls	r0, r3, #31
3401b752:	d50f      	bpl.n	3401b774 <_printf_float+0x214>
3401b754:	9b05      	ldr	r3, [sp, #20]
3401b756:	465a      	mov	r2, fp
3401b758:	4631      	mov	r1, r6
3401b75a:	4628      	mov	r0, r5
3401b75c:	47b8      	blx	r7
3401b75e:	3001      	adds	r0, #1
3401b760:	f43f af4a 	beq.w	3401b5f8 <_printf_float+0x98>
3401b764:	f04f 0900 	mov.w	r9, #0
3401b768:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401b76c:	f104 0a1a 	add.w	sl, r4, #26
3401b770:	45c8      	cmp	r8, r9
3401b772:	dc09      	bgt.n	3401b788 <_printf_float+0x228>
3401b774:	6823      	ldr	r3, [r4, #0]
3401b776:	079b      	lsls	r3, r3, #30
3401b778:	f100 8107 	bmi.w	3401b98a <_printf_float+0x42a>
3401b77c:	68e0      	ldr	r0, [r4, #12]
3401b77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401b780:	4298      	cmp	r0, r3
3401b782:	bfb8      	it	lt
3401b784:	4618      	movlt	r0, r3
3401b786:	e739      	b.n	3401b5fc <_printf_float+0x9c>
3401b788:	2301      	movs	r3, #1
3401b78a:	4652      	mov	r2, sl
3401b78c:	4631      	mov	r1, r6
3401b78e:	4628      	mov	r0, r5
3401b790:	47b8      	blx	r7
3401b792:	3001      	adds	r0, #1
3401b794:	f43f af30 	beq.w	3401b5f8 <_printf_float+0x98>
3401b798:	f109 0901 	add.w	r9, r9, #1
3401b79c:	e7e8      	b.n	3401b770 <_printf_float+0x210>
3401b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b7a0:	2b00      	cmp	r3, #0
3401b7a2:	dc3b      	bgt.n	3401b81c <_printf_float+0x2bc>
3401b7a4:	2301      	movs	r3, #1
3401b7a6:	4a1c      	ldr	r2, [pc, #112]	@ (3401b818 <_printf_float+0x2b8>)
3401b7a8:	4631      	mov	r1, r6
3401b7aa:	4628      	mov	r0, r5
3401b7ac:	47b8      	blx	r7
3401b7ae:	3001      	adds	r0, #1
3401b7b0:	f43f af22 	beq.w	3401b5f8 <_printf_float+0x98>
3401b7b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3401b7b8:	ea59 0303 	orrs.w	r3, r9, r3
3401b7bc:	d102      	bne.n	3401b7c4 <_printf_float+0x264>
3401b7be:	6823      	ldr	r3, [r4, #0]
3401b7c0:	07d9      	lsls	r1, r3, #31
3401b7c2:	d5d7      	bpl.n	3401b774 <_printf_float+0x214>
3401b7c4:	9b05      	ldr	r3, [sp, #20]
3401b7c6:	465a      	mov	r2, fp
3401b7c8:	4631      	mov	r1, r6
3401b7ca:	4628      	mov	r0, r5
3401b7cc:	47b8      	blx	r7
3401b7ce:	3001      	adds	r0, #1
3401b7d0:	f43f af12 	beq.w	3401b5f8 <_printf_float+0x98>
3401b7d4:	f04f 0a00 	mov.w	sl, #0
3401b7d8:	f104 0b1a 	add.w	fp, r4, #26
3401b7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b7de:	425b      	negs	r3, r3
3401b7e0:	4553      	cmp	r3, sl
3401b7e2:	dc01      	bgt.n	3401b7e8 <_printf_float+0x288>
3401b7e4:	464b      	mov	r3, r9
3401b7e6:	e794      	b.n	3401b712 <_printf_float+0x1b2>
3401b7e8:	2301      	movs	r3, #1
3401b7ea:	465a      	mov	r2, fp
3401b7ec:	4631      	mov	r1, r6
3401b7ee:	4628      	mov	r0, r5
3401b7f0:	47b8      	blx	r7
3401b7f2:	3001      	adds	r0, #1
3401b7f4:	f43f af00 	beq.w	3401b5f8 <_printf_float+0x98>
3401b7f8:	f10a 0a01 	add.w	sl, sl, #1
3401b7fc:	e7ee      	b.n	3401b7dc <_printf_float+0x27c>
3401b7fe:	bf00      	nop
3401b800:	ffffffff 	.word	0xffffffff
3401b804:	7fefffff 	.word	0x7fefffff
3401b808:	3401fbde 	.word	0x3401fbde
3401b80c:	3401fbda 	.word	0x3401fbda
3401b810:	3401fbe6 	.word	0x3401fbe6
3401b814:	3401fbe2 	.word	0x3401fbe2
3401b818:	3401fbea 	.word	0x3401fbea
3401b81c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b81e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401b822:	4553      	cmp	r3, sl
3401b824:	bfa8      	it	ge
3401b826:	4653      	movge	r3, sl
3401b828:	2b00      	cmp	r3, #0
3401b82a:	4699      	mov	r9, r3
3401b82c:	dc37      	bgt.n	3401b89e <_printf_float+0x33e>
3401b82e:	2300      	movs	r3, #0
3401b830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401b834:	f104 021a 	add.w	r2, r4, #26
3401b838:	9307      	str	r3, [sp, #28]
3401b83a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b83c:	9907      	ldr	r1, [sp, #28]
3401b83e:	9306      	str	r3, [sp, #24]
3401b840:	eba3 0309 	sub.w	r3, r3, r9
3401b844:	428b      	cmp	r3, r1
3401b846:	dc31      	bgt.n	3401b8ac <_printf_float+0x34c>
3401b848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b84a:	459a      	cmp	sl, r3
3401b84c:	dc3b      	bgt.n	3401b8c6 <_printf_float+0x366>
3401b84e:	6823      	ldr	r3, [r4, #0]
3401b850:	07da      	lsls	r2, r3, #31
3401b852:	d438      	bmi.n	3401b8c6 <_printf_float+0x366>
3401b854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b856:	ebaa 0903 	sub.w	r9, sl, r3
3401b85a:	9b06      	ldr	r3, [sp, #24]
3401b85c:	ebaa 0303 	sub.w	r3, sl, r3
3401b860:	4599      	cmp	r9, r3
3401b862:	bfa8      	it	ge
3401b864:	4699      	movge	r9, r3
3401b866:	f1b9 0f00 	cmp.w	r9, #0
3401b86a:	dc34      	bgt.n	3401b8d6 <_printf_float+0x376>
3401b86c:	f04f 0800 	mov.w	r8, #0
3401b870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401b874:	f104 0b1a 	add.w	fp, r4, #26
3401b878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401b87a:	ebaa 0303 	sub.w	r3, sl, r3
3401b87e:	eba3 0309 	sub.w	r3, r3, r9
3401b882:	4543      	cmp	r3, r8
3401b884:	f77f af76 	ble.w	3401b774 <_printf_float+0x214>
3401b888:	2301      	movs	r3, #1
3401b88a:	465a      	mov	r2, fp
3401b88c:	4631      	mov	r1, r6
3401b88e:	4628      	mov	r0, r5
3401b890:	47b8      	blx	r7
3401b892:	3001      	adds	r0, #1
3401b894:	f43f aeb0 	beq.w	3401b5f8 <_printf_float+0x98>
3401b898:	f108 0801 	add.w	r8, r8, #1
3401b89c:	e7ec      	b.n	3401b878 <_printf_float+0x318>
3401b89e:	4642      	mov	r2, r8
3401b8a0:	4631      	mov	r1, r6
3401b8a2:	4628      	mov	r0, r5
3401b8a4:	47b8      	blx	r7
3401b8a6:	3001      	adds	r0, #1
3401b8a8:	d1c1      	bne.n	3401b82e <_printf_float+0x2ce>
3401b8aa:	e6a5      	b.n	3401b5f8 <_printf_float+0x98>
3401b8ac:	2301      	movs	r3, #1
3401b8ae:	4631      	mov	r1, r6
3401b8b0:	4628      	mov	r0, r5
3401b8b2:	9206      	str	r2, [sp, #24]
3401b8b4:	47b8      	blx	r7
3401b8b6:	3001      	adds	r0, #1
3401b8b8:	f43f ae9e 	beq.w	3401b5f8 <_printf_float+0x98>
3401b8bc:	9b07      	ldr	r3, [sp, #28]
3401b8be:	9a06      	ldr	r2, [sp, #24]
3401b8c0:	3301      	adds	r3, #1
3401b8c2:	9307      	str	r3, [sp, #28]
3401b8c4:	e7b9      	b.n	3401b83a <_printf_float+0x2da>
3401b8c6:	9b05      	ldr	r3, [sp, #20]
3401b8c8:	465a      	mov	r2, fp
3401b8ca:	4631      	mov	r1, r6
3401b8cc:	4628      	mov	r0, r5
3401b8ce:	47b8      	blx	r7
3401b8d0:	3001      	adds	r0, #1
3401b8d2:	d1bf      	bne.n	3401b854 <_printf_float+0x2f4>
3401b8d4:	e690      	b.n	3401b5f8 <_printf_float+0x98>
3401b8d6:	9a06      	ldr	r2, [sp, #24]
3401b8d8:	464b      	mov	r3, r9
3401b8da:	4631      	mov	r1, r6
3401b8dc:	4628      	mov	r0, r5
3401b8de:	4442      	add	r2, r8
3401b8e0:	47b8      	blx	r7
3401b8e2:	3001      	adds	r0, #1
3401b8e4:	d1c2      	bne.n	3401b86c <_printf_float+0x30c>
3401b8e6:	e687      	b.n	3401b5f8 <_printf_float+0x98>
3401b8e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401b8ec:	f1b9 0f01 	cmp.w	r9, #1
3401b8f0:	dc01      	bgt.n	3401b8f6 <_printf_float+0x396>
3401b8f2:	07db      	lsls	r3, r3, #31
3401b8f4:	d536      	bpl.n	3401b964 <_printf_float+0x404>
3401b8f6:	2301      	movs	r3, #1
3401b8f8:	4642      	mov	r2, r8
3401b8fa:	4631      	mov	r1, r6
3401b8fc:	4628      	mov	r0, r5
3401b8fe:	47b8      	blx	r7
3401b900:	3001      	adds	r0, #1
3401b902:	f43f ae79 	beq.w	3401b5f8 <_printf_float+0x98>
3401b906:	9b05      	ldr	r3, [sp, #20]
3401b908:	465a      	mov	r2, fp
3401b90a:	4631      	mov	r1, r6
3401b90c:	4628      	mov	r0, r5
3401b90e:	47b8      	blx	r7
3401b910:	3001      	adds	r0, #1
3401b912:	f43f ae71 	beq.w	3401b5f8 <_printf_float+0x98>
3401b916:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
3401b91a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401b91e:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401b922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401b926:	d018      	beq.n	3401b95a <_printf_float+0x3fa>
3401b928:	464b      	mov	r3, r9
3401b92a:	f108 0201 	add.w	r2, r8, #1
3401b92e:	4631      	mov	r1, r6
3401b930:	4628      	mov	r0, r5
3401b932:	47b8      	blx	r7
3401b934:	3001      	adds	r0, #1
3401b936:	d10c      	bne.n	3401b952 <_printf_float+0x3f2>
3401b938:	e65e      	b.n	3401b5f8 <_printf_float+0x98>
3401b93a:	2301      	movs	r3, #1
3401b93c:	465a      	mov	r2, fp
3401b93e:	4631      	mov	r1, r6
3401b940:	4628      	mov	r0, r5
3401b942:	47b8      	blx	r7
3401b944:	3001      	adds	r0, #1
3401b946:	f43f ae57 	beq.w	3401b5f8 <_printf_float+0x98>
3401b94a:	f108 0801 	add.w	r8, r8, #1
3401b94e:	45c8      	cmp	r8, r9
3401b950:	dbf3      	blt.n	3401b93a <_printf_float+0x3da>
3401b952:	4653      	mov	r3, sl
3401b954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401b958:	e6dc      	b.n	3401b714 <_printf_float+0x1b4>
3401b95a:	f04f 0800 	mov.w	r8, #0
3401b95e:	f104 0b1a 	add.w	fp, r4, #26
3401b962:	e7f4      	b.n	3401b94e <_printf_float+0x3ee>
3401b964:	2301      	movs	r3, #1
3401b966:	4642      	mov	r2, r8
3401b968:	e7e1      	b.n	3401b92e <_printf_float+0x3ce>
3401b96a:	2301      	movs	r3, #1
3401b96c:	464a      	mov	r2, r9
3401b96e:	4631      	mov	r1, r6
3401b970:	4628      	mov	r0, r5
3401b972:	47b8      	blx	r7
3401b974:	3001      	adds	r0, #1
3401b976:	f43f ae3f 	beq.w	3401b5f8 <_printf_float+0x98>
3401b97a:	f108 0801 	add.w	r8, r8, #1
3401b97e:	68e3      	ldr	r3, [r4, #12]
3401b980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401b982:	1a5b      	subs	r3, r3, r1
3401b984:	4543      	cmp	r3, r8
3401b986:	dcf0      	bgt.n	3401b96a <_printf_float+0x40a>
3401b988:	e6f8      	b.n	3401b77c <_printf_float+0x21c>
3401b98a:	f04f 0800 	mov.w	r8, #0
3401b98e:	f104 0919 	add.w	r9, r4, #25
3401b992:	e7f4      	b.n	3401b97e <_printf_float+0x41e>

3401b994 <_printf_common>:
3401b994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401b998:	4616      	mov	r6, r2
3401b99a:	4698      	mov	r8, r3
3401b99c:	688a      	ldr	r2, [r1, #8]
3401b99e:	4607      	mov	r7, r0
3401b9a0:	690b      	ldr	r3, [r1, #16]
3401b9a2:	460c      	mov	r4, r1
3401b9a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401b9a8:	4293      	cmp	r3, r2
3401b9aa:	bfb8      	it	lt
3401b9ac:	4613      	movlt	r3, r2
3401b9ae:	6033      	str	r3, [r6, #0]
3401b9b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401b9b4:	b10a      	cbz	r2, 3401b9ba <_printf_common+0x26>
3401b9b6:	3301      	adds	r3, #1
3401b9b8:	6033      	str	r3, [r6, #0]
3401b9ba:	6823      	ldr	r3, [r4, #0]
3401b9bc:	0699      	lsls	r1, r3, #26
3401b9be:	bf42      	ittt	mi
3401b9c0:	6833      	ldrmi	r3, [r6, #0]
3401b9c2:	3302      	addmi	r3, #2
3401b9c4:	6033      	strmi	r3, [r6, #0]
3401b9c6:	6825      	ldr	r5, [r4, #0]
3401b9c8:	f015 0506 	ands.w	r5, r5, #6
3401b9cc:	d106      	bne.n	3401b9dc <_printf_common+0x48>
3401b9ce:	f104 0a19 	add.w	sl, r4, #25
3401b9d2:	68e3      	ldr	r3, [r4, #12]
3401b9d4:	6832      	ldr	r2, [r6, #0]
3401b9d6:	1a9b      	subs	r3, r3, r2
3401b9d8:	42ab      	cmp	r3, r5
3401b9da:	dc2b      	bgt.n	3401ba34 <_printf_common+0xa0>
3401b9dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401b9e0:	6822      	ldr	r2, [r4, #0]
3401b9e2:	3b00      	subs	r3, #0
3401b9e4:	bf18      	it	ne
3401b9e6:	2301      	movne	r3, #1
3401b9e8:	0692      	lsls	r2, r2, #26
3401b9ea:	d430      	bmi.n	3401ba4e <_printf_common+0xba>
3401b9ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401b9f0:	4641      	mov	r1, r8
3401b9f2:	4638      	mov	r0, r7
3401b9f4:	47c8      	blx	r9
3401b9f6:	3001      	adds	r0, #1
3401b9f8:	d023      	beq.n	3401ba42 <_printf_common+0xae>
3401b9fa:	6823      	ldr	r3, [r4, #0]
3401b9fc:	341a      	adds	r4, #26
3401b9fe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401ba02:	f003 0306 	and.w	r3, r3, #6
3401ba06:	2b04      	cmp	r3, #4
3401ba08:	bf0a      	itet	eq
3401ba0a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401ba0e:	2500      	movne	r5, #0
3401ba10:	6833      	ldreq	r3, [r6, #0]
3401ba12:	f04f 0600 	mov.w	r6, #0
3401ba16:	bf08      	it	eq
3401ba18:	1aed      	subeq	r5, r5, r3
3401ba1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401ba1e:	bf08      	it	eq
3401ba20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401ba24:	4293      	cmp	r3, r2
3401ba26:	bfc4      	itt	gt
3401ba28:	1a9b      	subgt	r3, r3, r2
3401ba2a:	18ed      	addgt	r5, r5, r3
3401ba2c:	42b5      	cmp	r5, r6
3401ba2e:	d11a      	bne.n	3401ba66 <_printf_common+0xd2>
3401ba30:	2000      	movs	r0, #0
3401ba32:	e008      	b.n	3401ba46 <_printf_common+0xb2>
3401ba34:	2301      	movs	r3, #1
3401ba36:	4652      	mov	r2, sl
3401ba38:	4641      	mov	r1, r8
3401ba3a:	4638      	mov	r0, r7
3401ba3c:	47c8      	blx	r9
3401ba3e:	3001      	adds	r0, #1
3401ba40:	d103      	bne.n	3401ba4a <_printf_common+0xb6>
3401ba42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401ba46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401ba4a:	3501      	adds	r5, #1
3401ba4c:	e7c1      	b.n	3401b9d2 <_printf_common+0x3e>
3401ba4e:	18e1      	adds	r1, r4, r3
3401ba50:	1c5a      	adds	r2, r3, #1
3401ba52:	2030      	movs	r0, #48	@ 0x30
3401ba54:	3302      	adds	r3, #2
3401ba56:	4422      	add	r2, r4
3401ba58:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401ba5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401ba60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401ba64:	e7c2      	b.n	3401b9ec <_printf_common+0x58>
3401ba66:	2301      	movs	r3, #1
3401ba68:	4622      	mov	r2, r4
3401ba6a:	4641      	mov	r1, r8
3401ba6c:	4638      	mov	r0, r7
3401ba6e:	47c8      	blx	r9
3401ba70:	3001      	adds	r0, #1
3401ba72:	d0e6      	beq.n	3401ba42 <_printf_common+0xae>
3401ba74:	3601      	adds	r6, #1
3401ba76:	e7d9      	b.n	3401ba2c <_printf_common+0x98>

3401ba78 <_printf_i>:
3401ba78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401ba7c:	7e0f      	ldrb	r7, [r1, #24]
3401ba7e:	4691      	mov	r9, r2
3401ba80:	4680      	mov	r8, r0
3401ba82:	460c      	mov	r4, r1
3401ba84:	2f78      	cmp	r7, #120	@ 0x78
3401ba86:	469a      	mov	sl, r3
3401ba88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401ba8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401ba8e:	d807      	bhi.n	3401baa0 <_printf_i+0x28>
3401ba90:	2f62      	cmp	r7, #98	@ 0x62
3401ba92:	d80a      	bhi.n	3401baaa <_printf_i+0x32>
3401ba94:	2f00      	cmp	r7, #0
3401ba96:	f000 80d1 	beq.w	3401bc3c <_printf_i+0x1c4>
3401ba9a:	2f58      	cmp	r7, #88	@ 0x58
3401ba9c:	f000 80b8 	beq.w	3401bc10 <_printf_i+0x198>
3401baa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401baa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401baa8:	e03a      	b.n	3401bb20 <_printf_i+0xa8>
3401baaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401baae:	2b15      	cmp	r3, #21
3401bab0:	d8f6      	bhi.n	3401baa0 <_printf_i+0x28>
3401bab2:	a101      	add	r1, pc, #4	@ (adr r1, 3401bab8 <_printf_i+0x40>)
3401bab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401bab8:	3401bb11 	.word	0x3401bb11
3401babc:	3401bb25 	.word	0x3401bb25
3401bac0:	3401baa1 	.word	0x3401baa1
3401bac4:	3401baa1 	.word	0x3401baa1
3401bac8:	3401baa1 	.word	0x3401baa1
3401bacc:	3401baa1 	.word	0x3401baa1
3401bad0:	3401bb25 	.word	0x3401bb25
3401bad4:	3401baa1 	.word	0x3401baa1
3401bad8:	3401baa1 	.word	0x3401baa1
3401badc:	3401baa1 	.word	0x3401baa1
3401bae0:	3401baa1 	.word	0x3401baa1
3401bae4:	3401bc23 	.word	0x3401bc23
3401bae8:	3401bb4f 	.word	0x3401bb4f
3401baec:	3401bbdd 	.word	0x3401bbdd
3401baf0:	3401baa1 	.word	0x3401baa1
3401baf4:	3401baa1 	.word	0x3401baa1
3401baf8:	3401bc45 	.word	0x3401bc45
3401bafc:	3401baa1 	.word	0x3401baa1
3401bb00:	3401bb4f 	.word	0x3401bb4f
3401bb04:	3401baa1 	.word	0x3401baa1
3401bb08:	3401baa1 	.word	0x3401baa1
3401bb0c:	3401bbe5 	.word	0x3401bbe5
3401bb10:	6833      	ldr	r3, [r6, #0]
3401bb12:	1d1a      	adds	r2, r3, #4
3401bb14:	681b      	ldr	r3, [r3, #0]
3401bb16:	6032      	str	r2, [r6, #0]
3401bb18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401bb1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401bb20:	2301      	movs	r3, #1
3401bb22:	e09c      	b.n	3401bc5e <_printf_i+0x1e6>
3401bb24:	6833      	ldr	r3, [r6, #0]
3401bb26:	6820      	ldr	r0, [r4, #0]
3401bb28:	1d19      	adds	r1, r3, #4
3401bb2a:	6031      	str	r1, [r6, #0]
3401bb2c:	0606      	lsls	r6, r0, #24
3401bb2e:	d501      	bpl.n	3401bb34 <_printf_i+0xbc>
3401bb30:	681d      	ldr	r5, [r3, #0]
3401bb32:	e003      	b.n	3401bb3c <_printf_i+0xc4>
3401bb34:	0645      	lsls	r5, r0, #25
3401bb36:	d5fb      	bpl.n	3401bb30 <_printf_i+0xb8>
3401bb38:	f9b3 5000 	ldrsh.w	r5, [r3]
3401bb3c:	2d00      	cmp	r5, #0
3401bb3e:	da03      	bge.n	3401bb48 <_printf_i+0xd0>
3401bb40:	232d      	movs	r3, #45	@ 0x2d
3401bb42:	426d      	negs	r5, r5
3401bb44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401bb48:	4858      	ldr	r0, [pc, #352]	@ (3401bcac <_printf_i+0x234>)
3401bb4a:	230a      	movs	r3, #10
3401bb4c:	e011      	b.n	3401bb72 <_printf_i+0xfa>
3401bb4e:	6821      	ldr	r1, [r4, #0]
3401bb50:	6833      	ldr	r3, [r6, #0]
3401bb52:	0608      	lsls	r0, r1, #24
3401bb54:	f853 5b04 	ldr.w	r5, [r3], #4
3401bb58:	d402      	bmi.n	3401bb60 <_printf_i+0xe8>
3401bb5a:	0649      	lsls	r1, r1, #25
3401bb5c:	bf48      	it	mi
3401bb5e:	b2ad      	uxthmi	r5, r5
3401bb60:	2f6f      	cmp	r7, #111	@ 0x6f
3401bb62:	6033      	str	r3, [r6, #0]
3401bb64:	4851      	ldr	r0, [pc, #324]	@ (3401bcac <_printf_i+0x234>)
3401bb66:	bf14      	ite	ne
3401bb68:	230a      	movne	r3, #10
3401bb6a:	2308      	moveq	r3, #8
3401bb6c:	2100      	movs	r1, #0
3401bb6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401bb72:	6866      	ldr	r6, [r4, #4]
3401bb74:	2e00      	cmp	r6, #0
3401bb76:	60a6      	str	r6, [r4, #8]
3401bb78:	db05      	blt.n	3401bb86 <_printf_i+0x10e>
3401bb7a:	6821      	ldr	r1, [r4, #0]
3401bb7c:	432e      	orrs	r6, r5
3401bb7e:	f021 0104 	bic.w	r1, r1, #4
3401bb82:	6021      	str	r1, [r4, #0]
3401bb84:	d04b      	beq.n	3401bc1e <_printf_i+0x1a6>
3401bb86:	4616      	mov	r6, r2
3401bb88:	fbb5 f1f3 	udiv	r1, r5, r3
3401bb8c:	fb03 5711 	mls	r7, r3, r1, r5
3401bb90:	5dc7      	ldrb	r7, [r0, r7]
3401bb92:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401bb96:	462f      	mov	r7, r5
3401bb98:	460d      	mov	r5, r1
3401bb9a:	42bb      	cmp	r3, r7
3401bb9c:	d9f4      	bls.n	3401bb88 <_printf_i+0x110>
3401bb9e:	2b08      	cmp	r3, #8
3401bba0:	d10b      	bne.n	3401bbba <_printf_i+0x142>
3401bba2:	6823      	ldr	r3, [r4, #0]
3401bba4:	07df      	lsls	r7, r3, #31
3401bba6:	d508      	bpl.n	3401bbba <_printf_i+0x142>
3401bba8:	6923      	ldr	r3, [r4, #16]
3401bbaa:	6861      	ldr	r1, [r4, #4]
3401bbac:	4299      	cmp	r1, r3
3401bbae:	bfde      	ittt	le
3401bbb0:	2330      	movle	r3, #48	@ 0x30
3401bbb2:	f806 3c01 	strble.w	r3, [r6, #-1]
3401bbb6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3401bbba:	1b92      	subs	r2, r2, r6
3401bbbc:	6122      	str	r2, [r4, #16]
3401bbbe:	464b      	mov	r3, r9
3401bbc0:	aa03      	add	r2, sp, #12
3401bbc2:	4621      	mov	r1, r4
3401bbc4:	4640      	mov	r0, r8
3401bbc6:	f8cd a000 	str.w	sl, [sp]
3401bbca:	f7ff fee3 	bl	3401b994 <_printf_common>
3401bbce:	3001      	adds	r0, #1
3401bbd0:	d14a      	bne.n	3401bc68 <_printf_i+0x1f0>
3401bbd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401bbd6:	b004      	add	sp, #16
3401bbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401bbdc:	6823      	ldr	r3, [r4, #0]
3401bbde:	f043 0320 	orr.w	r3, r3, #32
3401bbe2:	6023      	str	r3, [r4, #0]
3401bbe4:	2778      	movs	r7, #120	@ 0x78
3401bbe6:	4832      	ldr	r0, [pc, #200]	@ (3401bcb0 <_printf_i+0x238>)
3401bbe8:	6823      	ldr	r3, [r4, #0]
3401bbea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401bbee:	061f      	lsls	r7, r3, #24
3401bbf0:	6831      	ldr	r1, [r6, #0]
3401bbf2:	f851 5b04 	ldr.w	r5, [r1], #4
3401bbf6:	d402      	bmi.n	3401bbfe <_printf_i+0x186>
3401bbf8:	065f      	lsls	r7, r3, #25
3401bbfa:	bf48      	it	mi
3401bbfc:	b2ad      	uxthmi	r5, r5
3401bbfe:	6031      	str	r1, [r6, #0]
3401bc00:	07d9      	lsls	r1, r3, #31
3401bc02:	bf44      	itt	mi
3401bc04:	f043 0320 	orrmi.w	r3, r3, #32
3401bc08:	6023      	strmi	r3, [r4, #0]
3401bc0a:	b11d      	cbz	r5, 3401bc14 <_printf_i+0x19c>
3401bc0c:	2310      	movs	r3, #16
3401bc0e:	e7ad      	b.n	3401bb6c <_printf_i+0xf4>
3401bc10:	4826      	ldr	r0, [pc, #152]	@ (3401bcac <_printf_i+0x234>)
3401bc12:	e7e9      	b.n	3401bbe8 <_printf_i+0x170>
3401bc14:	6823      	ldr	r3, [r4, #0]
3401bc16:	f023 0320 	bic.w	r3, r3, #32
3401bc1a:	6023      	str	r3, [r4, #0]
3401bc1c:	e7f6      	b.n	3401bc0c <_printf_i+0x194>
3401bc1e:	4616      	mov	r6, r2
3401bc20:	e7bd      	b.n	3401bb9e <_printf_i+0x126>
3401bc22:	6833      	ldr	r3, [r6, #0]
3401bc24:	6825      	ldr	r5, [r4, #0]
3401bc26:	1d18      	adds	r0, r3, #4
3401bc28:	6961      	ldr	r1, [r4, #20]
3401bc2a:	6030      	str	r0, [r6, #0]
3401bc2c:	062e      	lsls	r6, r5, #24
3401bc2e:	681b      	ldr	r3, [r3, #0]
3401bc30:	d501      	bpl.n	3401bc36 <_printf_i+0x1be>
3401bc32:	6019      	str	r1, [r3, #0]
3401bc34:	e002      	b.n	3401bc3c <_printf_i+0x1c4>
3401bc36:	0668      	lsls	r0, r5, #25
3401bc38:	d5fb      	bpl.n	3401bc32 <_printf_i+0x1ba>
3401bc3a:	8019      	strh	r1, [r3, #0]
3401bc3c:	2300      	movs	r3, #0
3401bc3e:	4616      	mov	r6, r2
3401bc40:	6123      	str	r3, [r4, #16]
3401bc42:	e7bc      	b.n	3401bbbe <_printf_i+0x146>
3401bc44:	6833      	ldr	r3, [r6, #0]
3401bc46:	2100      	movs	r1, #0
3401bc48:	1d1a      	adds	r2, r3, #4
3401bc4a:	6032      	str	r2, [r6, #0]
3401bc4c:	681e      	ldr	r6, [r3, #0]
3401bc4e:	6862      	ldr	r2, [r4, #4]
3401bc50:	4630      	mov	r0, r6
3401bc52:	f000 fd8c 	bl	3401c76e <memchr>
3401bc56:	b108      	cbz	r0, 3401bc5c <_printf_i+0x1e4>
3401bc58:	1b80      	subs	r0, r0, r6
3401bc5a:	6060      	str	r0, [r4, #4]
3401bc5c:	6863      	ldr	r3, [r4, #4]
3401bc5e:	6123      	str	r3, [r4, #16]
3401bc60:	2300      	movs	r3, #0
3401bc62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401bc66:	e7aa      	b.n	3401bbbe <_printf_i+0x146>
3401bc68:	6923      	ldr	r3, [r4, #16]
3401bc6a:	4632      	mov	r2, r6
3401bc6c:	4649      	mov	r1, r9
3401bc6e:	4640      	mov	r0, r8
3401bc70:	47d0      	blx	sl
3401bc72:	3001      	adds	r0, #1
3401bc74:	d0ad      	beq.n	3401bbd2 <_printf_i+0x15a>
3401bc76:	6823      	ldr	r3, [r4, #0]
3401bc78:	079b      	lsls	r3, r3, #30
3401bc7a:	d413      	bmi.n	3401bca4 <_printf_i+0x22c>
3401bc7c:	68e0      	ldr	r0, [r4, #12]
3401bc7e:	9b03      	ldr	r3, [sp, #12]
3401bc80:	4298      	cmp	r0, r3
3401bc82:	bfb8      	it	lt
3401bc84:	4618      	movlt	r0, r3
3401bc86:	e7a6      	b.n	3401bbd6 <_printf_i+0x15e>
3401bc88:	2301      	movs	r3, #1
3401bc8a:	4632      	mov	r2, r6
3401bc8c:	4649      	mov	r1, r9
3401bc8e:	4640      	mov	r0, r8
3401bc90:	47d0      	blx	sl
3401bc92:	3001      	adds	r0, #1
3401bc94:	d09d      	beq.n	3401bbd2 <_printf_i+0x15a>
3401bc96:	3501      	adds	r5, #1
3401bc98:	68e3      	ldr	r3, [r4, #12]
3401bc9a:	9903      	ldr	r1, [sp, #12]
3401bc9c:	1a5b      	subs	r3, r3, r1
3401bc9e:	42ab      	cmp	r3, r5
3401bca0:	dcf2      	bgt.n	3401bc88 <_printf_i+0x210>
3401bca2:	e7eb      	b.n	3401bc7c <_printf_i+0x204>
3401bca4:	2500      	movs	r5, #0
3401bca6:	f104 0619 	add.w	r6, r4, #25
3401bcaa:	e7f5      	b.n	3401bc98 <_printf_i+0x220>
3401bcac:	3401fbec 	.word	0x3401fbec
3401bcb0:	3401fbfd 	.word	0x3401fbfd

3401bcb4 <__sflush_r>:
3401bcb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3401bcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401bcbc:	0716      	lsls	r6, r2, #28
3401bcbe:	4605      	mov	r5, r0
3401bcc0:	460c      	mov	r4, r1
3401bcc2:	d454      	bmi.n	3401bd6e <__sflush_r+0xba>
3401bcc4:	684b      	ldr	r3, [r1, #4]
3401bcc6:	2b00      	cmp	r3, #0
3401bcc8:	dc02      	bgt.n	3401bcd0 <__sflush_r+0x1c>
3401bcca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3401bccc:	2b00      	cmp	r3, #0
3401bcce:	dd48      	ble.n	3401bd62 <__sflush_r+0xae>
3401bcd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401bcd2:	2e00      	cmp	r6, #0
3401bcd4:	d045      	beq.n	3401bd62 <__sflush_r+0xae>
3401bcd6:	2300      	movs	r3, #0
3401bcd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3401bcdc:	682f      	ldr	r7, [r5, #0]
3401bcde:	6a21      	ldr	r1, [r4, #32]
3401bce0:	602b      	str	r3, [r5, #0]
3401bce2:	d030      	beq.n	3401bd46 <__sflush_r+0x92>
3401bce4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3401bce6:	89a3      	ldrh	r3, [r4, #12]
3401bce8:	0759      	lsls	r1, r3, #29
3401bcea:	d505      	bpl.n	3401bcf8 <__sflush_r+0x44>
3401bcec:	6863      	ldr	r3, [r4, #4]
3401bcee:	1ad2      	subs	r2, r2, r3
3401bcf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401bcf2:	b10b      	cbz	r3, 3401bcf8 <__sflush_r+0x44>
3401bcf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401bcf6:	1ad2      	subs	r2, r2, r3
3401bcf8:	2300      	movs	r3, #0
3401bcfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3401bcfc:	6a21      	ldr	r1, [r4, #32]
3401bcfe:	4628      	mov	r0, r5
3401bd00:	47b0      	blx	r6
3401bd02:	1c43      	adds	r3, r0, #1
3401bd04:	89a3      	ldrh	r3, [r4, #12]
3401bd06:	d106      	bne.n	3401bd16 <__sflush_r+0x62>
3401bd08:	6829      	ldr	r1, [r5, #0]
3401bd0a:	291d      	cmp	r1, #29
3401bd0c:	d82b      	bhi.n	3401bd66 <__sflush_r+0xb2>
3401bd0e:	4a2a      	ldr	r2, [pc, #168]	@ (3401bdb8 <__sflush_r+0x104>)
3401bd10:	40ca      	lsrs	r2, r1
3401bd12:	07d6      	lsls	r6, r2, #31
3401bd14:	d527      	bpl.n	3401bd66 <__sflush_r+0xb2>
3401bd16:	2200      	movs	r2, #0
3401bd18:	04d9      	lsls	r1, r3, #19
3401bd1a:	6062      	str	r2, [r4, #4]
3401bd1c:	6922      	ldr	r2, [r4, #16]
3401bd1e:	6022      	str	r2, [r4, #0]
3401bd20:	d504      	bpl.n	3401bd2c <__sflush_r+0x78>
3401bd22:	1c42      	adds	r2, r0, #1
3401bd24:	d101      	bne.n	3401bd2a <__sflush_r+0x76>
3401bd26:	682b      	ldr	r3, [r5, #0]
3401bd28:	b903      	cbnz	r3, 3401bd2c <__sflush_r+0x78>
3401bd2a:	6560      	str	r0, [r4, #84]	@ 0x54
3401bd2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401bd2e:	602f      	str	r7, [r5, #0]
3401bd30:	b1b9      	cbz	r1, 3401bd62 <__sflush_r+0xae>
3401bd32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401bd36:	4299      	cmp	r1, r3
3401bd38:	d002      	beq.n	3401bd40 <__sflush_r+0x8c>
3401bd3a:	4628      	mov	r0, r5
3401bd3c:	f001 fb26 	bl	3401d38c <_free_r>
3401bd40:	2300      	movs	r3, #0
3401bd42:	6363      	str	r3, [r4, #52]	@ 0x34
3401bd44:	e00d      	b.n	3401bd62 <__sflush_r+0xae>
3401bd46:	2301      	movs	r3, #1
3401bd48:	4628      	mov	r0, r5
3401bd4a:	47b0      	blx	r6
3401bd4c:	4602      	mov	r2, r0
3401bd4e:	1c50      	adds	r0, r2, #1
3401bd50:	d1c9      	bne.n	3401bce6 <__sflush_r+0x32>
3401bd52:	682b      	ldr	r3, [r5, #0]
3401bd54:	2b00      	cmp	r3, #0
3401bd56:	d0c6      	beq.n	3401bce6 <__sflush_r+0x32>
3401bd58:	2b1d      	cmp	r3, #29
3401bd5a:	d001      	beq.n	3401bd60 <__sflush_r+0xac>
3401bd5c:	2b16      	cmp	r3, #22
3401bd5e:	d11d      	bne.n	3401bd9c <__sflush_r+0xe8>
3401bd60:	602f      	str	r7, [r5, #0]
3401bd62:	2000      	movs	r0, #0
3401bd64:	e021      	b.n	3401bdaa <__sflush_r+0xf6>
3401bd66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401bd6a:	b21b      	sxth	r3, r3
3401bd6c:	e01a      	b.n	3401bda4 <__sflush_r+0xf0>
3401bd6e:	690f      	ldr	r7, [r1, #16]
3401bd70:	2f00      	cmp	r7, #0
3401bd72:	d0f6      	beq.n	3401bd62 <__sflush_r+0xae>
3401bd74:	0793      	lsls	r3, r2, #30
3401bd76:	680e      	ldr	r6, [r1, #0]
3401bd78:	600f      	str	r7, [r1, #0]
3401bd7a:	bf0c      	ite	eq
3401bd7c:	694b      	ldreq	r3, [r1, #20]
3401bd7e:	2300      	movne	r3, #0
3401bd80:	eba6 0807 	sub.w	r8, r6, r7
3401bd84:	608b      	str	r3, [r1, #8]
3401bd86:	f1b8 0f00 	cmp.w	r8, #0
3401bd8a:	ddea      	ble.n	3401bd62 <__sflush_r+0xae>
3401bd8c:	4643      	mov	r3, r8
3401bd8e:	463a      	mov	r2, r7
3401bd90:	6a21      	ldr	r1, [r4, #32]
3401bd92:	4628      	mov	r0, r5
3401bd94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3401bd96:	47b0      	blx	r6
3401bd98:	2800      	cmp	r0, #0
3401bd9a:	dc08      	bgt.n	3401bdae <__sflush_r+0xfa>
3401bd9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401bda0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401bda4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401bda8:	81a3      	strh	r3, [r4, #12]
3401bdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401bdae:	4407      	add	r7, r0
3401bdb0:	eba8 0800 	sub.w	r8, r8, r0
3401bdb4:	e7e7      	b.n	3401bd86 <__sflush_r+0xd2>
3401bdb6:	bf00      	nop
3401bdb8:	20400001 	.word	0x20400001

3401bdbc <_fflush_r>:
3401bdbc:	b538      	push	{r3, r4, r5, lr}
3401bdbe:	690b      	ldr	r3, [r1, #16]
3401bdc0:	4605      	mov	r5, r0
3401bdc2:	460c      	mov	r4, r1
3401bdc4:	b913      	cbnz	r3, 3401bdcc <_fflush_r+0x10>
3401bdc6:	2500      	movs	r5, #0
3401bdc8:	4628      	mov	r0, r5
3401bdca:	bd38      	pop	{r3, r4, r5, pc}
3401bdcc:	b118      	cbz	r0, 3401bdd6 <_fflush_r+0x1a>
3401bdce:	6a03      	ldr	r3, [r0, #32]
3401bdd0:	b90b      	cbnz	r3, 3401bdd6 <_fflush_r+0x1a>
3401bdd2:	f000 f8bb 	bl	3401bf4c <__sinit>
3401bdd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401bdda:	2b00      	cmp	r3, #0
3401bddc:	d0f3      	beq.n	3401bdc6 <_fflush_r+0xa>
3401bdde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3401bde0:	07d0      	lsls	r0, r2, #31
3401bde2:	d404      	bmi.n	3401bdee <_fflush_r+0x32>
3401bde4:	0599      	lsls	r1, r3, #22
3401bde6:	d402      	bmi.n	3401bdee <_fflush_r+0x32>
3401bde8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401bdea:	f000 fcbe 	bl	3401c76a <__retarget_lock_acquire_recursive>
3401bdee:	4628      	mov	r0, r5
3401bdf0:	4621      	mov	r1, r4
3401bdf2:	f7ff ff5f 	bl	3401bcb4 <__sflush_r>
3401bdf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401bdf8:	4605      	mov	r5, r0
3401bdfa:	07da      	lsls	r2, r3, #31
3401bdfc:	d4e4      	bmi.n	3401bdc8 <_fflush_r+0xc>
3401bdfe:	89a3      	ldrh	r3, [r4, #12]
3401be00:	059b      	lsls	r3, r3, #22
3401be02:	d4e1      	bmi.n	3401bdc8 <_fflush_r+0xc>
3401be04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401be06:	f000 fcb1 	bl	3401c76c <__retarget_lock_release_recursive>
3401be0a:	e7dd      	b.n	3401bdc8 <_fflush_r+0xc>

3401be0c <fflush>:
3401be0c:	4601      	mov	r1, r0
3401be0e:	b920      	cbnz	r0, 3401be1a <fflush+0xe>
3401be10:	4a04      	ldr	r2, [pc, #16]	@ (3401be24 <fflush+0x18>)
3401be12:	4905      	ldr	r1, [pc, #20]	@ (3401be28 <fflush+0x1c>)
3401be14:	4805      	ldr	r0, [pc, #20]	@ (3401be2c <fflush+0x20>)
3401be16:	f000 b8c3 	b.w	3401bfa0 <_fwalk_sglue>
3401be1a:	4b05      	ldr	r3, [pc, #20]	@ (3401be30 <fflush+0x24>)
3401be1c:	6818      	ldr	r0, [r3, #0]
3401be1e:	f7ff bfcd 	b.w	3401bdbc <_fflush_r>
3401be22:	bf00      	nop
3401be24:	34020600 	.word	0x34020600
3401be28:	3401bdbd 	.word	0x3401bdbd
3401be2c:	34020610 	.word	0x34020610
3401be30:	3402060c 	.word	0x3402060c

3401be34 <std>:
3401be34:	2300      	movs	r3, #0
3401be36:	b510      	push	{r4, lr}
3401be38:	4604      	mov	r4, r0
3401be3a:	6083      	str	r3, [r0, #8]
3401be3c:	8181      	strh	r1, [r0, #12]
3401be3e:	4619      	mov	r1, r3
3401be40:	6643      	str	r3, [r0, #100]	@ 0x64
3401be42:	81c2      	strh	r2, [r0, #14]
3401be44:	2208      	movs	r2, #8
3401be46:	6183      	str	r3, [r0, #24]
3401be48:	e9c0 3300 	strd	r3, r3, [r0]
3401be4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401be50:	305c      	adds	r0, #92	@ 0x5c
3401be52:	f000 fa0b 	bl	3401c26c <memset>
3401be56:	4b0d      	ldr	r3, [pc, #52]	@ (3401be8c <std+0x58>)
3401be58:	6224      	str	r4, [r4, #32]
3401be5a:	6263      	str	r3, [r4, #36]	@ 0x24
3401be5c:	4b0c      	ldr	r3, [pc, #48]	@ (3401be90 <std+0x5c>)
3401be5e:	62a3      	str	r3, [r4, #40]	@ 0x28
3401be60:	4b0c      	ldr	r3, [pc, #48]	@ (3401be94 <std+0x60>)
3401be62:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401be64:	4b0c      	ldr	r3, [pc, #48]	@ (3401be98 <std+0x64>)
3401be66:	6323      	str	r3, [r4, #48]	@ 0x30
3401be68:	4b0c      	ldr	r3, [pc, #48]	@ (3401be9c <std+0x68>)
3401be6a:	429c      	cmp	r4, r3
3401be6c:	d006      	beq.n	3401be7c <std+0x48>
3401be6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401be72:	4294      	cmp	r4, r2
3401be74:	d002      	beq.n	3401be7c <std+0x48>
3401be76:	33d0      	adds	r3, #208	@ 0xd0
3401be78:	429c      	cmp	r4, r3
3401be7a:	d105      	bne.n	3401be88 <std+0x54>
3401be7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401be84:	f000 bc70 	b.w	3401c768 <__retarget_lock_init_recursive>
3401be88:	bd10      	pop	{r4, pc}
3401be8a:	bf00      	nop
3401be8c:	3401c0bd 	.word	0x3401c0bd
3401be90:	3401c0df 	.word	0x3401c0df
3401be94:	3401c117 	.word	0x3401c117
3401be98:	3401c13b 	.word	0x3401c13b
3401be9c:	34020d58 	.word	0x34020d58

3401bea0 <stdio_exit_handler>:
3401bea0:	4a02      	ldr	r2, [pc, #8]	@ (3401beac <stdio_exit_handler+0xc>)
3401bea2:	4903      	ldr	r1, [pc, #12]	@ (3401beb0 <stdio_exit_handler+0x10>)
3401bea4:	4803      	ldr	r0, [pc, #12]	@ (3401beb4 <stdio_exit_handler+0x14>)
3401bea6:	f000 b87b 	b.w	3401bfa0 <_fwalk_sglue>
3401beaa:	bf00      	nop
3401beac:	34020600 	.word	0x34020600
3401beb0:	3401bdbd 	.word	0x3401bdbd
3401beb4:	34020610 	.word	0x34020610

3401beb8 <cleanup_stdio>:
3401beb8:	6841      	ldr	r1, [r0, #4]
3401beba:	4b0c      	ldr	r3, [pc, #48]	@ (3401beec <cleanup_stdio+0x34>)
3401bebc:	4299      	cmp	r1, r3
3401bebe:	b510      	push	{r4, lr}
3401bec0:	4604      	mov	r4, r0
3401bec2:	d001      	beq.n	3401bec8 <cleanup_stdio+0x10>
3401bec4:	f7ff ff7a 	bl	3401bdbc <_fflush_r>
3401bec8:	68a1      	ldr	r1, [r4, #8]
3401beca:	4b09      	ldr	r3, [pc, #36]	@ (3401bef0 <cleanup_stdio+0x38>)
3401becc:	4299      	cmp	r1, r3
3401bece:	d002      	beq.n	3401bed6 <cleanup_stdio+0x1e>
3401bed0:	4620      	mov	r0, r4
3401bed2:	f7ff ff73 	bl	3401bdbc <_fflush_r>
3401bed6:	68e1      	ldr	r1, [r4, #12]
3401bed8:	4b06      	ldr	r3, [pc, #24]	@ (3401bef4 <cleanup_stdio+0x3c>)
3401beda:	4299      	cmp	r1, r3
3401bedc:	d004      	beq.n	3401bee8 <cleanup_stdio+0x30>
3401bede:	4620      	mov	r0, r4
3401bee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401bee4:	f7ff bf6a 	b.w	3401bdbc <_fflush_r>
3401bee8:	bd10      	pop	{r4, pc}
3401beea:	bf00      	nop
3401beec:	34020d58 	.word	0x34020d58
3401bef0:	34020dc0 	.word	0x34020dc0
3401bef4:	34020e28 	.word	0x34020e28

3401bef8 <global_stdio_init.part.0>:
3401bef8:	b510      	push	{r4, lr}
3401befa:	4b0b      	ldr	r3, [pc, #44]	@ (3401bf28 <global_stdio_init.part.0+0x30>)
3401befc:	2104      	movs	r1, #4
3401befe:	4c0b      	ldr	r4, [pc, #44]	@ (3401bf2c <global_stdio_init.part.0+0x34>)
3401bf00:	4a0b      	ldr	r2, [pc, #44]	@ (3401bf30 <global_stdio_init.part.0+0x38>)
3401bf02:	4620      	mov	r0, r4
3401bf04:	601a      	str	r2, [r3, #0]
3401bf06:	2200      	movs	r2, #0
3401bf08:	f7ff ff94 	bl	3401be34 <std>
3401bf0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401bf10:	2201      	movs	r2, #1
3401bf12:	2109      	movs	r1, #9
3401bf14:	f7ff ff8e 	bl	3401be34 <std>
3401bf18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401bf1c:	2202      	movs	r2, #2
3401bf1e:	2112      	movs	r1, #18
3401bf20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401bf24:	f7ff bf86 	b.w	3401be34 <std>
3401bf28:	34020e90 	.word	0x34020e90
3401bf2c:	34020d58 	.word	0x34020d58
3401bf30:	3401bea1 	.word	0x3401bea1

3401bf34 <__sfp_lock_acquire>:
3401bf34:	4801      	ldr	r0, [pc, #4]	@ (3401bf3c <__sfp_lock_acquire+0x8>)
3401bf36:	f000 bc18 	b.w	3401c76a <__retarget_lock_acquire_recursive>
3401bf3a:	bf00      	nop
3401bf3c:	34020e99 	.word	0x34020e99

3401bf40 <__sfp_lock_release>:
3401bf40:	4801      	ldr	r0, [pc, #4]	@ (3401bf48 <__sfp_lock_release+0x8>)
3401bf42:	f000 bc13 	b.w	3401c76c <__retarget_lock_release_recursive>
3401bf46:	bf00      	nop
3401bf48:	34020e99 	.word	0x34020e99

3401bf4c <__sinit>:
3401bf4c:	b510      	push	{r4, lr}
3401bf4e:	4604      	mov	r4, r0
3401bf50:	f7ff fff0 	bl	3401bf34 <__sfp_lock_acquire>
3401bf54:	6a23      	ldr	r3, [r4, #32]
3401bf56:	b11b      	cbz	r3, 3401bf60 <__sinit+0x14>
3401bf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401bf5c:	f7ff bff0 	b.w	3401bf40 <__sfp_lock_release>
3401bf60:	4b04      	ldr	r3, [pc, #16]	@ (3401bf74 <__sinit+0x28>)
3401bf62:	6223      	str	r3, [r4, #32]
3401bf64:	4b04      	ldr	r3, [pc, #16]	@ (3401bf78 <__sinit+0x2c>)
3401bf66:	681b      	ldr	r3, [r3, #0]
3401bf68:	2b00      	cmp	r3, #0
3401bf6a:	d1f5      	bne.n	3401bf58 <__sinit+0xc>
3401bf6c:	f7ff ffc4 	bl	3401bef8 <global_stdio_init.part.0>
3401bf70:	e7f2      	b.n	3401bf58 <__sinit+0xc>
3401bf72:	bf00      	nop
3401bf74:	3401beb9 	.word	0x3401beb9
3401bf78:	34020e90 	.word	0x34020e90

3401bf7c <fiprintf>:
3401bf7c:	b40e      	push	{r1, r2, r3}
3401bf7e:	b503      	push	{r0, r1, lr}
3401bf80:	ab03      	add	r3, sp, #12
3401bf82:	4601      	mov	r1, r0
3401bf84:	4805      	ldr	r0, [pc, #20]	@ (3401bf9c <fiprintf+0x20>)
3401bf86:	f853 2b04 	ldr.w	r2, [r3], #4
3401bf8a:	6800      	ldr	r0, [r0, #0]
3401bf8c:	9301      	str	r3, [sp, #4]
3401bf8e:	f001 fdf3 	bl	3401db78 <_vfiprintf_r>
3401bf92:	b002      	add	sp, #8
3401bf94:	f85d eb04 	ldr.w	lr, [sp], #4
3401bf98:	b003      	add	sp, #12
3401bf9a:	4770      	bx	lr
3401bf9c:	3402060c 	.word	0x3402060c

3401bfa0 <_fwalk_sglue>:
3401bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401bfa4:	4607      	mov	r7, r0
3401bfa6:	4688      	mov	r8, r1
3401bfa8:	4614      	mov	r4, r2
3401bfaa:	2600      	movs	r6, #0
3401bfac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401bfb0:	f1b9 0901 	subs.w	r9, r9, #1
3401bfb4:	d505      	bpl.n	3401bfc2 <_fwalk_sglue+0x22>
3401bfb6:	6824      	ldr	r4, [r4, #0]
3401bfb8:	2c00      	cmp	r4, #0
3401bfba:	d1f7      	bne.n	3401bfac <_fwalk_sglue+0xc>
3401bfbc:	4630      	mov	r0, r6
3401bfbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401bfc2:	89ab      	ldrh	r3, [r5, #12]
3401bfc4:	2b01      	cmp	r3, #1
3401bfc6:	d907      	bls.n	3401bfd8 <_fwalk_sglue+0x38>
3401bfc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401bfcc:	3301      	adds	r3, #1
3401bfce:	d003      	beq.n	3401bfd8 <_fwalk_sglue+0x38>
3401bfd0:	4629      	mov	r1, r5
3401bfd2:	4638      	mov	r0, r7
3401bfd4:	47c0      	blx	r8
3401bfd6:	4306      	orrs	r6, r0
3401bfd8:	3568      	adds	r5, #104	@ 0x68
3401bfda:	e7e9      	b.n	3401bfb0 <_fwalk_sglue+0x10>

3401bfdc <iprintf>:
3401bfdc:	b40f      	push	{r0, r1, r2, r3}
3401bfde:	b507      	push	{r0, r1, r2, lr}
3401bfe0:	4906      	ldr	r1, [pc, #24]	@ (3401bffc <iprintf+0x20>)
3401bfe2:	ab04      	add	r3, sp, #16
3401bfe4:	6808      	ldr	r0, [r1, #0]
3401bfe6:	f853 2b04 	ldr.w	r2, [r3], #4
3401bfea:	6881      	ldr	r1, [r0, #8]
3401bfec:	9301      	str	r3, [sp, #4]
3401bfee:	f001 fdc3 	bl	3401db78 <_vfiprintf_r>
3401bff2:	b003      	add	sp, #12
3401bff4:	f85d eb04 	ldr.w	lr, [sp], #4
3401bff8:	b004      	add	sp, #16
3401bffa:	4770      	bx	lr
3401bffc:	3402060c 	.word	0x3402060c

3401c000 <_puts_r>:
3401c000:	6a03      	ldr	r3, [r0, #32]
3401c002:	b570      	push	{r4, r5, r6, lr}
3401c004:	4605      	mov	r5, r0
3401c006:	460e      	mov	r6, r1
3401c008:	6884      	ldr	r4, [r0, #8]
3401c00a:	b90b      	cbnz	r3, 3401c010 <_puts_r+0x10>
3401c00c:	f7ff ff9e 	bl	3401bf4c <__sinit>
3401c010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401c012:	07db      	lsls	r3, r3, #31
3401c014:	d405      	bmi.n	3401c022 <_puts_r+0x22>
3401c016:	89a3      	ldrh	r3, [r4, #12]
3401c018:	0598      	lsls	r0, r3, #22
3401c01a:	d402      	bmi.n	3401c022 <_puts_r+0x22>
3401c01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c01e:	f000 fba4 	bl	3401c76a <__retarget_lock_acquire_recursive>
3401c022:	89a3      	ldrh	r3, [r4, #12]
3401c024:	0719      	lsls	r1, r3, #28
3401c026:	d502      	bpl.n	3401c02e <_puts_r+0x2e>
3401c028:	6923      	ldr	r3, [r4, #16]
3401c02a:	2b00      	cmp	r3, #0
3401c02c:	d135      	bne.n	3401c09a <_puts_r+0x9a>
3401c02e:	4621      	mov	r1, r4
3401c030:	4628      	mov	r0, r5
3401c032:	f000 f8c5 	bl	3401c1c0 <__swsetup_r>
3401c036:	b380      	cbz	r0, 3401c09a <_puts_r+0x9a>
3401c038:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
3401c03c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401c03e:	07da      	lsls	r2, r3, #31
3401c040:	d405      	bmi.n	3401c04e <_puts_r+0x4e>
3401c042:	89a3      	ldrh	r3, [r4, #12]
3401c044:	059b      	lsls	r3, r3, #22
3401c046:	d402      	bmi.n	3401c04e <_puts_r+0x4e>
3401c048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401c04a:	f000 fb8f 	bl	3401c76c <__retarget_lock_release_recursive>
3401c04e:	4628      	mov	r0, r5
3401c050:	bd70      	pop	{r4, r5, r6, pc}
3401c052:	2b00      	cmp	r3, #0
3401c054:	da04      	bge.n	3401c060 <_puts_r+0x60>
3401c056:	69a2      	ldr	r2, [r4, #24]
3401c058:	429a      	cmp	r2, r3
3401c05a:	dc17      	bgt.n	3401c08c <_puts_r+0x8c>
3401c05c:	290a      	cmp	r1, #10
3401c05e:	d015      	beq.n	3401c08c <_puts_r+0x8c>
3401c060:	6823      	ldr	r3, [r4, #0]
3401c062:	1c5a      	adds	r2, r3, #1
3401c064:	6022      	str	r2, [r4, #0]
3401c066:	7019      	strb	r1, [r3, #0]
3401c068:	68a3      	ldr	r3, [r4, #8]
3401c06a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401c06e:	3b01      	subs	r3, #1
3401c070:	60a3      	str	r3, [r4, #8]
3401c072:	2900      	cmp	r1, #0
3401c074:	d1ed      	bne.n	3401c052 <_puts_r+0x52>
3401c076:	2b00      	cmp	r3, #0
3401c078:	da11      	bge.n	3401c09e <_puts_r+0x9e>
3401c07a:	4622      	mov	r2, r4
3401c07c:	210a      	movs	r1, #10
3401c07e:	4628      	mov	r0, r5
3401c080:	f000 f85f 	bl	3401c142 <__swbuf_r>
3401c084:	3001      	adds	r0, #1
3401c086:	d0d7      	beq.n	3401c038 <_puts_r+0x38>
3401c088:	250a      	movs	r5, #10
3401c08a:	e7d7      	b.n	3401c03c <_puts_r+0x3c>
3401c08c:	4622      	mov	r2, r4
3401c08e:	4628      	mov	r0, r5
3401c090:	f000 f857 	bl	3401c142 <__swbuf_r>
3401c094:	3001      	adds	r0, #1
3401c096:	d1e7      	bne.n	3401c068 <_puts_r+0x68>
3401c098:	e7ce      	b.n	3401c038 <_puts_r+0x38>
3401c09a:	3e01      	subs	r6, #1
3401c09c:	e7e4      	b.n	3401c068 <_puts_r+0x68>
3401c09e:	6823      	ldr	r3, [r4, #0]
3401c0a0:	1c5a      	adds	r2, r3, #1
3401c0a2:	6022      	str	r2, [r4, #0]
3401c0a4:	220a      	movs	r2, #10
3401c0a6:	701a      	strb	r2, [r3, #0]
3401c0a8:	e7ee      	b.n	3401c088 <_puts_r+0x88>
	...

3401c0ac <puts>:
3401c0ac:	4b02      	ldr	r3, [pc, #8]	@ (3401c0b8 <puts+0xc>)
3401c0ae:	4601      	mov	r1, r0
3401c0b0:	6818      	ldr	r0, [r3, #0]
3401c0b2:	f7ff bfa5 	b.w	3401c000 <_puts_r>
3401c0b6:	bf00      	nop
3401c0b8:	3402060c 	.word	0x3402060c

3401c0bc <__sread>:
3401c0bc:	b510      	push	{r4, lr}
3401c0be:	460c      	mov	r4, r1
3401c0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c0c4:	f000 faf2 	bl	3401c6ac <_read_r>
3401c0c8:	2800      	cmp	r0, #0
3401c0ca:	bfab      	itete	ge
3401c0cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3401c0ce:	89a3      	ldrhlt	r3, [r4, #12]
3401c0d0:	181b      	addge	r3, r3, r0
3401c0d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3401c0d6:	bfac      	ite	ge
3401c0d8:	6563      	strge	r3, [r4, #84]	@ 0x54
3401c0da:	81a3      	strhlt	r3, [r4, #12]
3401c0dc:	bd10      	pop	{r4, pc}

3401c0de <__swrite>:
3401c0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c0e2:	461f      	mov	r7, r3
3401c0e4:	898b      	ldrh	r3, [r1, #12]
3401c0e6:	4605      	mov	r5, r0
3401c0e8:	460c      	mov	r4, r1
3401c0ea:	05db      	lsls	r3, r3, #23
3401c0ec:	4616      	mov	r6, r2
3401c0ee:	d505      	bpl.n	3401c0fc <__swrite+0x1e>
3401c0f0:	2302      	movs	r3, #2
3401c0f2:	2200      	movs	r2, #0
3401c0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c0f8:	f000 fac6 	bl	3401c688 <_lseek_r>
3401c0fc:	89a3      	ldrh	r3, [r4, #12]
3401c0fe:	4632      	mov	r2, r6
3401c100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401c104:	4628      	mov	r0, r5
3401c106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401c10a:	81a3      	strh	r3, [r4, #12]
3401c10c:	463b      	mov	r3, r7
3401c10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3401c112:	f000 baed 	b.w	3401c6f0 <_write_r>

3401c116 <__sseek>:
3401c116:	b510      	push	{r4, lr}
3401c118:	460c      	mov	r4, r1
3401c11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c11e:	f000 fab3 	bl	3401c688 <_lseek_r>
3401c122:	1c43      	adds	r3, r0, #1
3401c124:	89a3      	ldrh	r3, [r4, #12]
3401c126:	bf15      	itete	ne
3401c128:	6560      	strne	r0, [r4, #84]	@ 0x54
3401c12a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3401c12e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3401c132:	81a3      	strheq	r3, [r4, #12]
3401c134:	bf18      	it	ne
3401c136:	81a3      	strhne	r3, [r4, #12]
3401c138:	bd10      	pop	{r4, pc}

3401c13a <__sclose>:
3401c13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401c13e:	f000 ba93 	b.w	3401c668 <_close_r>

3401c142 <__swbuf_r>:
3401c142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401c144:	460e      	mov	r6, r1
3401c146:	4614      	mov	r4, r2
3401c148:	4605      	mov	r5, r0
3401c14a:	b118      	cbz	r0, 3401c154 <__swbuf_r+0x12>
3401c14c:	6a03      	ldr	r3, [r0, #32]
3401c14e:	b90b      	cbnz	r3, 3401c154 <__swbuf_r+0x12>
3401c150:	f7ff fefc 	bl	3401bf4c <__sinit>
3401c154:	69a3      	ldr	r3, [r4, #24]
3401c156:	60a3      	str	r3, [r4, #8]
3401c158:	89a3      	ldrh	r3, [r4, #12]
3401c15a:	071a      	lsls	r2, r3, #28
3401c15c:	d501      	bpl.n	3401c162 <__swbuf_r+0x20>
3401c15e:	6923      	ldr	r3, [r4, #16]
3401c160:	b943      	cbnz	r3, 3401c174 <__swbuf_r+0x32>
3401c162:	4621      	mov	r1, r4
3401c164:	4628      	mov	r0, r5
3401c166:	f000 f82b 	bl	3401c1c0 <__swsetup_r>
3401c16a:	b118      	cbz	r0, 3401c174 <__swbuf_r+0x32>
3401c16c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
3401c170:	4638      	mov	r0, r7
3401c172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401c174:	6823      	ldr	r3, [r4, #0]
3401c176:	b2f6      	uxtb	r6, r6
3401c178:	6922      	ldr	r2, [r4, #16]
3401c17a:	4637      	mov	r7, r6
3401c17c:	1a98      	subs	r0, r3, r2
3401c17e:	6963      	ldr	r3, [r4, #20]
3401c180:	4283      	cmp	r3, r0
3401c182:	dc05      	bgt.n	3401c190 <__swbuf_r+0x4e>
3401c184:	4621      	mov	r1, r4
3401c186:	4628      	mov	r0, r5
3401c188:	f7ff fe18 	bl	3401bdbc <_fflush_r>
3401c18c:	2800      	cmp	r0, #0
3401c18e:	d1ed      	bne.n	3401c16c <__swbuf_r+0x2a>
3401c190:	68a3      	ldr	r3, [r4, #8]
3401c192:	3b01      	subs	r3, #1
3401c194:	60a3      	str	r3, [r4, #8]
3401c196:	6823      	ldr	r3, [r4, #0]
3401c198:	1c5a      	adds	r2, r3, #1
3401c19a:	6022      	str	r2, [r4, #0]
3401c19c:	701e      	strb	r6, [r3, #0]
3401c19e:	1c43      	adds	r3, r0, #1
3401c1a0:	6962      	ldr	r2, [r4, #20]
3401c1a2:	429a      	cmp	r2, r3
3401c1a4:	d004      	beq.n	3401c1b0 <__swbuf_r+0x6e>
3401c1a6:	89a3      	ldrh	r3, [r4, #12]
3401c1a8:	07db      	lsls	r3, r3, #31
3401c1aa:	d5e1      	bpl.n	3401c170 <__swbuf_r+0x2e>
3401c1ac:	2e0a      	cmp	r6, #10
3401c1ae:	d1df      	bne.n	3401c170 <__swbuf_r+0x2e>
3401c1b0:	4621      	mov	r1, r4
3401c1b2:	4628      	mov	r0, r5
3401c1b4:	f7ff fe02 	bl	3401bdbc <_fflush_r>
3401c1b8:	2800      	cmp	r0, #0
3401c1ba:	d0d9      	beq.n	3401c170 <__swbuf_r+0x2e>
3401c1bc:	e7d6      	b.n	3401c16c <__swbuf_r+0x2a>
	...

3401c1c0 <__swsetup_r>:
3401c1c0:	b538      	push	{r3, r4, r5, lr}
3401c1c2:	4b29      	ldr	r3, [pc, #164]	@ (3401c268 <__swsetup_r+0xa8>)
3401c1c4:	4605      	mov	r5, r0
3401c1c6:	460c      	mov	r4, r1
3401c1c8:	6818      	ldr	r0, [r3, #0]
3401c1ca:	b118      	cbz	r0, 3401c1d4 <__swsetup_r+0x14>
3401c1cc:	6a03      	ldr	r3, [r0, #32]
3401c1ce:	b90b      	cbnz	r3, 3401c1d4 <__swsetup_r+0x14>
3401c1d0:	f7ff febc 	bl	3401bf4c <__sinit>
3401c1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c1d8:	0719      	lsls	r1, r3, #28
3401c1da:	d422      	bmi.n	3401c222 <__swsetup_r+0x62>
3401c1dc:	06da      	lsls	r2, r3, #27
3401c1de:	d407      	bmi.n	3401c1f0 <__swsetup_r+0x30>
3401c1e0:	2209      	movs	r2, #9
3401c1e2:	602a      	str	r2, [r5, #0]
3401c1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401c1e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401c1ec:	81a3      	strh	r3, [r4, #12]
3401c1ee:	e033      	b.n	3401c258 <__swsetup_r+0x98>
3401c1f0:	0758      	lsls	r0, r3, #29
3401c1f2:	d512      	bpl.n	3401c21a <__swsetup_r+0x5a>
3401c1f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401c1f6:	b141      	cbz	r1, 3401c20a <__swsetup_r+0x4a>
3401c1f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401c1fc:	4299      	cmp	r1, r3
3401c1fe:	d002      	beq.n	3401c206 <__swsetup_r+0x46>
3401c200:	4628      	mov	r0, r5
3401c202:	f001 f8c3 	bl	3401d38c <_free_r>
3401c206:	2300      	movs	r3, #0
3401c208:	6363      	str	r3, [r4, #52]	@ 0x34
3401c20a:	89a3      	ldrh	r3, [r4, #12]
3401c20c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3401c210:	81a3      	strh	r3, [r4, #12]
3401c212:	2300      	movs	r3, #0
3401c214:	6063      	str	r3, [r4, #4]
3401c216:	6923      	ldr	r3, [r4, #16]
3401c218:	6023      	str	r3, [r4, #0]
3401c21a:	89a3      	ldrh	r3, [r4, #12]
3401c21c:	f043 0308 	orr.w	r3, r3, #8
3401c220:	81a3      	strh	r3, [r4, #12]
3401c222:	6923      	ldr	r3, [r4, #16]
3401c224:	b94b      	cbnz	r3, 3401c23a <__swsetup_r+0x7a>
3401c226:	89a3      	ldrh	r3, [r4, #12]
3401c228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3401c22c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401c230:	d003      	beq.n	3401c23a <__swsetup_r+0x7a>
3401c232:	4621      	mov	r1, r4
3401c234:	4628      	mov	r0, r5
3401c236:	f001 fddc 	bl	3401ddf2 <__smakebuf_r>
3401c23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401c23e:	f013 0201 	ands.w	r2, r3, #1
3401c242:	d00a      	beq.n	3401c25a <__swsetup_r+0x9a>
3401c244:	2200      	movs	r2, #0
3401c246:	60a2      	str	r2, [r4, #8]
3401c248:	6962      	ldr	r2, [r4, #20]
3401c24a:	4252      	negs	r2, r2
3401c24c:	61a2      	str	r2, [r4, #24]
3401c24e:	6922      	ldr	r2, [r4, #16]
3401c250:	b942      	cbnz	r2, 3401c264 <__swsetup_r+0xa4>
3401c252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3401c256:	d1c5      	bne.n	3401c1e4 <__swsetup_r+0x24>
3401c258:	bd38      	pop	{r3, r4, r5, pc}
3401c25a:	0799      	lsls	r1, r3, #30
3401c25c:	bf58      	it	pl
3401c25e:	6962      	ldrpl	r2, [r4, #20]
3401c260:	60a2      	str	r2, [r4, #8]
3401c262:	e7f4      	b.n	3401c24e <__swsetup_r+0x8e>
3401c264:	2000      	movs	r0, #0
3401c266:	e7f7      	b.n	3401c258 <__swsetup_r+0x98>
3401c268:	3402060c 	.word	0x3402060c

3401c26c <memset>:
3401c26c:	4402      	add	r2, r0
3401c26e:	4603      	mov	r3, r0
3401c270:	4293      	cmp	r3, r2
3401c272:	d100      	bne.n	3401c276 <memset+0xa>
3401c274:	4770      	bx	lr
3401c276:	f803 1b01 	strb.w	r1, [r3], #1
3401c27a:	e7f9      	b.n	3401c270 <memset+0x4>

3401c27c <_strerror_r>:
3401c27c:	b510      	push	{r4, lr}
3401c27e:	4604      	mov	r4, r0
3401c280:	4608      	mov	r0, r1
3401c282:	4611      	mov	r1, r2
3401c284:	461a      	mov	r2, r3
3401c286:	288e      	cmp	r0, #142	@ 0x8e
3401c288:	f200 8130 	bhi.w	3401c4ec <_strerror_r+0x270>
3401c28c:	e8df f010 	tbh	[pc, r0, lsl #1]
3401c290:	0138008f 	.word	0x0138008f
3401c294:	00940092 	.word	0x00940092
3401c298:	00980096 	.word	0x00980096
3401c29c:	009c009a 	.word	0x009c009a
3401c2a0:	00a2009e 	.word	0x00a2009e
3401c2a4:	00a800a4 	.word	0x00a800a4
3401c2a8:	00ac00aa 	.word	0x00ac00aa
3401c2ac:	012e00ae 	.word	0x012e00ae
3401c2b0:	00b200b0 	.word	0x00b200b0
3401c2b4:	00b600b4 	.word	0x00b600b4
3401c2b8:	00be00b8 	.word	0x00be00b8
3401c2bc:	00c600c0 	.word	0x00c600c0
3401c2c0:	00ca00c8 	.word	0x00ca00c8
3401c2c4:	00ce00cc 	.word	0x00ce00cc
3401c2c8:	00d600d2 	.word	0x00d600d2
3401c2cc:	00da00d8 	.word	0x00da00d8
3401c2d0:	00de00dc 	.word	0x00de00dc
3401c2d4:	00e200e0 	.word	0x00e200e0
3401c2d8:	012e00e4 	.word	0x012e00e4
3401c2dc:	012e012e 	.word	0x012e012e
3401c2e0:	012e012e 	.word	0x012e012e
3401c2e4:	012e012e 	.word	0x012e012e
3401c2e8:	00e8012e 	.word	0x00e8012e
3401c2ec:	012e00ec 	.word	0x012e00ec
3401c2f0:	012e012e 	.word	0x012e012e
3401c2f4:	012e012e 	.word	0x012e012e
3401c2f8:	012e012e 	.word	0x012e012e
3401c2fc:	012e012e 	.word	0x012e012e
3401c300:	012e012e 	.word	0x012e012e
3401c304:	012e012e 	.word	0x012e012e
3401c308:	010800ee 	.word	0x010800ee
3401c30c:	00f200f0 	.word	0x00f200f0
3401c310:	012e012e 	.word	0x012e012e
3401c314:	00f4012e 	.word	0x00f4012e
3401c318:	012e012e 	.word	0x012e012e
3401c31c:	00f6012e 	.word	0x00f6012e
3401c320:	012e012e 	.word	0x012e012e
3401c324:	012e00fa 	.word	0x012e00fa
3401c328:	00fc012e 	.word	0x00fc012e
3401c32c:	012e012e 	.word	0x012e012e
3401c330:	012e012e 	.word	0x012e012e
3401c334:	012e012e 	.word	0x012e012e
3401c338:	012e012e 	.word	0x012e012e
3401c33c:	012e012e 	.word	0x012e012e
3401c340:	012e00fe 	.word	0x012e00fe
3401c344:	01020100 	.word	0x01020100
3401c348:	012e0104 	.word	0x012e0104
3401c34c:	0126012e 	.word	0x0126012e
3401c350:	012e012e 	.word	0x012e012e
3401c354:	012e012e 	.word	0x012e012e
3401c358:	012e012e 	.word	0x012e012e
3401c35c:	012e012e 	.word	0x012e012e
3401c360:	01060114 	.word	0x01060114
3401c364:	010c010a 	.word	0x010c010a
3401c368:	0110010e 	.word	0x0110010e
3401c36c:	0112012e 	.word	0x0112012e
3401c370:	011a0116 	.word	0x011a0116
3401c374:	00c200ea 	.word	0x00c200ea
3401c378:	00ba012c 	.word	0x00ba012c
3401c37c:	00bc00d0 	.word	0x00bc00d0
3401c380:	00a600a0 	.word	0x00a600a0
3401c384:	00f8012a 	.word	0x00f8012a
3401c388:	0118012e 	.word	0x0118012e
3401c38c:	011e00c4 	.word	0x011e00c4
3401c390:	012e011c 	.word	0x012e011c
3401c394:	012e012e 	.word	0x012e012e
3401c398:	012e012e 	.word	0x012e012e
3401c39c:	012e00d4 	.word	0x012e00d4
3401c3a0:	012e012e 	.word	0x012e012e
3401c3a4:	012800e6 	.word	0x012800e6
3401c3a8:	01220120 	.word	0x01220120
3401c3ac:	0124      	.short	0x0124
3401c3ae:	4b55      	ldr	r3, [pc, #340]	@ (3401c504 <_strerror_r+0x288>)
3401c3b0:	4618      	mov	r0, r3
3401c3b2:	bd10      	pop	{r4, pc}
3401c3b4:	4b54      	ldr	r3, [pc, #336]	@ (3401c508 <_strerror_r+0x28c>)
3401c3b6:	e7fb      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3b8:	4b54      	ldr	r3, [pc, #336]	@ (3401c50c <_strerror_r+0x290>)
3401c3ba:	e7f9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3bc:	4b54      	ldr	r3, [pc, #336]	@ (3401c510 <_strerror_r+0x294>)
3401c3be:	e7f7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3c0:	4b54      	ldr	r3, [pc, #336]	@ (3401c514 <_strerror_r+0x298>)
3401c3c2:	e7f5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3c4:	4b54      	ldr	r3, [pc, #336]	@ (3401c518 <_strerror_r+0x29c>)
3401c3c6:	e7f3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3c8:	4b54      	ldr	r3, [pc, #336]	@ (3401c51c <_strerror_r+0x2a0>)
3401c3ca:	e7f1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3cc:	4b54      	ldr	r3, [pc, #336]	@ (3401c520 <_strerror_r+0x2a4>)
3401c3ce:	e7ef      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3d0:	4b54      	ldr	r3, [pc, #336]	@ (3401c524 <_strerror_r+0x2a8>)
3401c3d2:	e7ed      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3d4:	4b54      	ldr	r3, [pc, #336]	@ (3401c528 <_strerror_r+0x2ac>)
3401c3d6:	e7eb      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3d8:	4b54      	ldr	r3, [pc, #336]	@ (3401c52c <_strerror_r+0x2b0>)
3401c3da:	e7e9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3dc:	4b54      	ldr	r3, [pc, #336]	@ (3401c530 <_strerror_r+0x2b4>)
3401c3de:	e7e7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3e0:	4b54      	ldr	r3, [pc, #336]	@ (3401c534 <_strerror_r+0x2b8>)
3401c3e2:	e7e5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3e4:	4b54      	ldr	r3, [pc, #336]	@ (3401c538 <_strerror_r+0x2bc>)
3401c3e6:	e7e3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3e8:	4b54      	ldr	r3, [pc, #336]	@ (3401c53c <_strerror_r+0x2c0>)
3401c3ea:	e7e1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3ec:	4b54      	ldr	r3, [pc, #336]	@ (3401c540 <_strerror_r+0x2c4>)
3401c3ee:	e7df      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3f0:	4b54      	ldr	r3, [pc, #336]	@ (3401c544 <_strerror_r+0x2c8>)
3401c3f2:	e7dd      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3f4:	4b54      	ldr	r3, [pc, #336]	@ (3401c548 <_strerror_r+0x2cc>)
3401c3f6:	e7db      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3f8:	4b54      	ldr	r3, [pc, #336]	@ (3401c54c <_strerror_r+0x2d0>)
3401c3fa:	e7d9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c3fc:	4b54      	ldr	r3, [pc, #336]	@ (3401c550 <_strerror_r+0x2d4>)
3401c3fe:	e7d7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c400:	4b54      	ldr	r3, [pc, #336]	@ (3401c554 <_strerror_r+0x2d8>)
3401c402:	e7d5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c404:	4b54      	ldr	r3, [pc, #336]	@ (3401c558 <_strerror_r+0x2dc>)
3401c406:	e7d3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c408:	4b54      	ldr	r3, [pc, #336]	@ (3401c55c <_strerror_r+0x2e0>)
3401c40a:	e7d1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c40c:	4b54      	ldr	r3, [pc, #336]	@ (3401c560 <_strerror_r+0x2e4>)
3401c40e:	e7cf      	b.n	3401c3b0 <_strerror_r+0x134>
3401c410:	4b54      	ldr	r3, [pc, #336]	@ (3401c564 <_strerror_r+0x2e8>)
3401c412:	e7cd      	b.n	3401c3b0 <_strerror_r+0x134>
3401c414:	4b54      	ldr	r3, [pc, #336]	@ (3401c568 <_strerror_r+0x2ec>)
3401c416:	e7cb      	b.n	3401c3b0 <_strerror_r+0x134>
3401c418:	4b54      	ldr	r3, [pc, #336]	@ (3401c56c <_strerror_r+0x2f0>)
3401c41a:	e7c9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c41c:	4b54      	ldr	r3, [pc, #336]	@ (3401c570 <_strerror_r+0x2f4>)
3401c41e:	e7c7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c420:	4b54      	ldr	r3, [pc, #336]	@ (3401c574 <_strerror_r+0x2f8>)
3401c422:	e7c5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c424:	4b54      	ldr	r3, [pc, #336]	@ (3401c578 <_strerror_r+0x2fc>)
3401c426:	e7c3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c428:	4b54      	ldr	r3, [pc, #336]	@ (3401c57c <_strerror_r+0x300>)
3401c42a:	e7c1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c42c:	4b54      	ldr	r3, [pc, #336]	@ (3401c580 <_strerror_r+0x304>)
3401c42e:	e7bf      	b.n	3401c3b0 <_strerror_r+0x134>
3401c430:	4b54      	ldr	r3, [pc, #336]	@ (3401c584 <_strerror_r+0x308>)
3401c432:	e7bd      	b.n	3401c3b0 <_strerror_r+0x134>
3401c434:	4b54      	ldr	r3, [pc, #336]	@ (3401c588 <_strerror_r+0x30c>)
3401c436:	e7bb      	b.n	3401c3b0 <_strerror_r+0x134>
3401c438:	4b54      	ldr	r3, [pc, #336]	@ (3401c58c <_strerror_r+0x310>)
3401c43a:	e7b9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c43c:	4b54      	ldr	r3, [pc, #336]	@ (3401c590 <_strerror_r+0x314>)
3401c43e:	e7b7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c440:	4b54      	ldr	r3, [pc, #336]	@ (3401c594 <_strerror_r+0x318>)
3401c442:	e7b5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c444:	4b54      	ldr	r3, [pc, #336]	@ (3401c598 <_strerror_r+0x31c>)
3401c446:	e7b3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c448:	4b54      	ldr	r3, [pc, #336]	@ (3401c59c <_strerror_r+0x320>)
3401c44a:	e7b1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c44c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a0 <_strerror_r+0x324>)
3401c44e:	e7af      	b.n	3401c3b0 <_strerror_r+0x134>
3401c450:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a4 <_strerror_r+0x328>)
3401c452:	e7ad      	b.n	3401c3b0 <_strerror_r+0x134>
3401c454:	4b54      	ldr	r3, [pc, #336]	@ (3401c5a8 <_strerror_r+0x32c>)
3401c456:	e7ab      	b.n	3401c3b0 <_strerror_r+0x134>
3401c458:	4b54      	ldr	r3, [pc, #336]	@ (3401c5ac <_strerror_r+0x330>)
3401c45a:	e7a9      	b.n	3401c3b0 <_strerror_r+0x134>
3401c45c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b0 <_strerror_r+0x334>)
3401c45e:	e7a7      	b.n	3401c3b0 <_strerror_r+0x134>
3401c460:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b4 <_strerror_r+0x338>)
3401c462:	e7a5      	b.n	3401c3b0 <_strerror_r+0x134>
3401c464:	4b54      	ldr	r3, [pc, #336]	@ (3401c5b8 <_strerror_r+0x33c>)
3401c466:	e7a3      	b.n	3401c3b0 <_strerror_r+0x134>
3401c468:	4b54      	ldr	r3, [pc, #336]	@ (3401c5bc <_strerror_r+0x340>)
3401c46a:	e7a1      	b.n	3401c3b0 <_strerror_r+0x134>
3401c46c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c0 <_strerror_r+0x344>)
3401c46e:	e79f      	b.n	3401c3b0 <_strerror_r+0x134>
3401c470:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c4 <_strerror_r+0x348>)
3401c472:	e79d      	b.n	3401c3b0 <_strerror_r+0x134>
3401c474:	4b54      	ldr	r3, [pc, #336]	@ (3401c5c8 <_strerror_r+0x34c>)
3401c476:	e79b      	b.n	3401c3b0 <_strerror_r+0x134>
3401c478:	4b54      	ldr	r3, [pc, #336]	@ (3401c5cc <_strerror_r+0x350>)
3401c47a:	e799      	b.n	3401c3b0 <_strerror_r+0x134>
3401c47c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d0 <_strerror_r+0x354>)
3401c47e:	e797      	b.n	3401c3b0 <_strerror_r+0x134>
3401c480:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d4 <_strerror_r+0x358>)
3401c482:	e795      	b.n	3401c3b0 <_strerror_r+0x134>
3401c484:	4b54      	ldr	r3, [pc, #336]	@ (3401c5d8 <_strerror_r+0x35c>)
3401c486:	e793      	b.n	3401c3b0 <_strerror_r+0x134>
3401c488:	4b54      	ldr	r3, [pc, #336]	@ (3401c5dc <_strerror_r+0x360>)
3401c48a:	e791      	b.n	3401c3b0 <_strerror_r+0x134>
3401c48c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e0 <_strerror_r+0x364>)
3401c48e:	e78f      	b.n	3401c3b0 <_strerror_r+0x134>
3401c490:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e4 <_strerror_r+0x368>)
3401c492:	e78d      	b.n	3401c3b0 <_strerror_r+0x134>
3401c494:	4b54      	ldr	r3, [pc, #336]	@ (3401c5e8 <_strerror_r+0x36c>)
3401c496:	e78b      	b.n	3401c3b0 <_strerror_r+0x134>
3401c498:	4b54      	ldr	r3, [pc, #336]	@ (3401c5ec <_strerror_r+0x370>)
3401c49a:	e789      	b.n	3401c3b0 <_strerror_r+0x134>
3401c49c:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f0 <_strerror_r+0x374>)
3401c49e:	e787      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4a0:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f4 <_strerror_r+0x378>)
3401c4a2:	e785      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4a4:	4b54      	ldr	r3, [pc, #336]	@ (3401c5f8 <_strerror_r+0x37c>)
3401c4a6:	e783      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4a8:	4b54      	ldr	r3, [pc, #336]	@ (3401c5fc <_strerror_r+0x380>)
3401c4aa:	e781      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4ac:	4b54      	ldr	r3, [pc, #336]	@ (3401c600 <_strerror_r+0x384>)
3401c4ae:	e77f      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4b0:	4b54      	ldr	r3, [pc, #336]	@ (3401c604 <_strerror_r+0x388>)
3401c4b2:	e77d      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4b4:	4b54      	ldr	r3, [pc, #336]	@ (3401c608 <_strerror_r+0x38c>)
3401c4b6:	e77b      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4b8:	4b54      	ldr	r3, [pc, #336]	@ (3401c60c <_strerror_r+0x390>)
3401c4ba:	e779      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4bc:	4b54      	ldr	r3, [pc, #336]	@ (3401c610 <_strerror_r+0x394>)
3401c4be:	e777      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4c0:	4b54      	ldr	r3, [pc, #336]	@ (3401c614 <_strerror_r+0x398>)
3401c4c2:	e775      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4c4:	4b54      	ldr	r3, [pc, #336]	@ (3401c618 <_strerror_r+0x39c>)
3401c4c6:	e773      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4c8:	4b54      	ldr	r3, [pc, #336]	@ (3401c61c <_strerror_r+0x3a0>)
3401c4ca:	e771      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4cc:	4b54      	ldr	r3, [pc, #336]	@ (3401c620 <_strerror_r+0x3a4>)
3401c4ce:	e76f      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4d0:	4b54      	ldr	r3, [pc, #336]	@ (3401c624 <_strerror_r+0x3a8>)
3401c4d2:	e76d      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4d4:	4b54      	ldr	r3, [pc, #336]	@ (3401c628 <_strerror_r+0x3ac>)
3401c4d6:	e76b      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4d8:	4b54      	ldr	r3, [pc, #336]	@ (3401c62c <_strerror_r+0x3b0>)
3401c4da:	e769      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4dc:	4b54      	ldr	r3, [pc, #336]	@ (3401c630 <_strerror_r+0x3b4>)
3401c4de:	e767      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4e0:	4b54      	ldr	r3, [pc, #336]	@ (3401c634 <_strerror_r+0x3b8>)
3401c4e2:	e765      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4e4:	4b54      	ldr	r3, [pc, #336]	@ (3401c638 <_strerror_r+0x3bc>)
3401c4e6:	e763      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4e8:	4b54      	ldr	r3, [pc, #336]	@ (3401c63c <_strerror_r+0x3c0>)
3401c4ea:	e761      	b.n	3401c3b0 <_strerror_r+0x134>
3401c4ec:	2a00      	cmp	r2, #0
3401c4ee:	bf08      	it	eq
3401c4f0:	4622      	moveq	r2, r4
3401c4f2:	f000 f8b3 	bl	3401c65c <_user_strerror>
3401c4f6:	4b52      	ldr	r3, [pc, #328]	@ (3401c640 <_strerror_r+0x3c4>)
3401c4f8:	2800      	cmp	r0, #0
3401c4fa:	bf18      	it	ne
3401c4fc:	4603      	movne	r3, r0
3401c4fe:	e757      	b.n	3401c3b0 <_strerror_r+0x134>
3401c500:	4b50      	ldr	r3, [pc, #320]	@ (3401c644 <_strerror_r+0x3c8>)
3401c502:	e755      	b.n	3401c3b0 <_strerror_r+0x134>
3401c504:	3401fc0e 	.word	0x3401fc0e
3401c508:	3401fc20 	.word	0x3401fc20
3401c50c:	3401fc3a 	.word	0x3401fc3a
3401c510:	3401fc4a 	.word	0x3401fc4a
3401c514:	3401fc62 	.word	0x3401fc62
3401c518:	3401fc6c 	.word	0x3401fc6c
3401c51c:	3401fc86 	.word	0x3401fc86
3401c520:	3401fc98 	.word	0x3401fc98
3401c524:	3401fcaa 	.word	0x3401fcaa
3401c528:	3401fcc3 	.word	0x3401fcc3
3401c52c:	3401fcd3 	.word	0x3401fcd3
3401c530:	3401fcdf 	.word	0x3401fcdf
3401c534:	3401fcfc 	.word	0x3401fcfc
3401c538:	3401fd0e 	.word	0x3401fd0e
3401c53c:	3401fd1f 	.word	0x3401fd1f
3401c540:	3401fd31 	.word	0x3401fd31
3401c544:	3401fd3d 	.word	0x3401fd3d
3401c548:	3401fd55 	.word	0x3401fd55
3401c54c:	3401fd61 	.word	0x3401fd61
3401c550:	3401fd73 	.word	0x3401fd73
3401c554:	3401fd82 	.word	0x3401fd82
3401c558:	3401fd92 	.word	0x3401fd92
3401c55c:	3401fd9f 	.word	0x3401fd9f
3401c560:	3401fdbe 	.word	0x3401fdbe
3401c564:	3401fdcd 	.word	0x3401fdcd
3401c568:	3401fdde 	.word	0x3401fdde
3401c56c:	3401fe02 	.word	0x3401fe02
3401c570:	3401fe20 	.word	0x3401fe20
3401c574:	3401fe3e 	.word	0x3401fe3e
3401c578:	3401fe5e 	.word	0x3401fe5e
3401c57c:	3401fe75 	.word	0x3401fe75
3401c580:	3401fe84 	.word	0x3401fe84
3401c584:	3401fe93 	.word	0x3401fe93
3401c588:	3401fea7 	.word	0x3401fea7
3401c58c:	3401febf 	.word	0x3401febf
3401c590:	3401fecd 	.word	0x3401fecd
3401c594:	3401feda 	.word	0x3401feda
3401c598:	3401fef0 	.word	0x3401fef0
3401c59c:	3401feff 	.word	0x3401feff
3401c5a0:	3401ff0b 	.word	0x3401ff0b
3401c5a4:	3401ff3a 	.word	0x3401ff3a
3401c5a8:	3401ff4b 	.word	0x3401ff4b
3401c5ac:	3401ff66 	.word	0x3401ff66
3401c5b0:	3401ff79 	.word	0x3401ff79
3401c5b4:	3401ff8f 	.word	0x3401ff8f
3401c5b8:	3401ff98 	.word	0x3401ff98
3401c5bc:	3401ffaf 	.word	0x3401ffaf
3401c5c0:	3401ffb7 	.word	0x3401ffb7
3401c5c4:	3401ffc4 	.word	0x3401ffc4
3401c5c8:	3401ffd9 	.word	0x3401ffd9
3401c5cc:	3401ffed 	.word	0x3401ffed
3401c5d0:	34020005 	.word	0x34020005
3401c5d4:	34020014 	.word	0x34020014
3401c5d8:	34020025 	.word	0x34020025
3401c5dc:	34020038 	.word	0x34020038
3401c5e0:	34020044 	.word	0x34020044
3401c5e4:	3402005d 	.word	0x3402005d
3401c5e8:	34020071 	.word	0x34020071
3401c5ec:	3402008c 	.word	0x3402008c
3401c5f0:	340200a4 	.word	0x340200a4
3401c5f4:	340200be 	.word	0x340200be
3401c5f8:	340200c6 	.word	0x340200c6
3401c5fc:	340200f6 	.word	0x340200f6
3401c600:	34020115 	.word	0x34020115
3401c604:	34020134 	.word	0x34020134
3401c608:	3402014b 	.word	0x3402014b
3401c60c:	3402015e 	.word	0x3402015e
3401c610:	34020177 	.word	0x34020177
3401c614:	3402018e 	.word	0x3402018e
3401c618:	340201a4 	.word	0x340201a4
3401c61c:	340201c5 	.word	0x340201c5
3401c620:	340201dd 	.word	0x340201dd
3401c624:	340201f9 	.word	0x340201f9
3401c628:	3402020c 	.word	0x3402020c
3401c62c:	34020222 	.word	0x34020222
3401c630:	34020236 	.word	0x34020236
3401c634:	34020258 	.word	0x34020258
3401c638:	3402027e 	.word	0x3402027e
3401c63c:	3402028f 	.word	0x3402028f
3401c640:	3401fbd9 	.word	0x3401fbd9
3401c644:	3401fc16 	.word	0x3401fc16

3401c648 <strerror>:
3401c648:	4601      	mov	r1, r0
3401c64a:	2300      	movs	r3, #0
3401c64c:	4802      	ldr	r0, [pc, #8]	@ (3401c658 <strerror+0x10>)
3401c64e:	461a      	mov	r2, r3
3401c650:	6800      	ldr	r0, [r0, #0]
3401c652:	f7ff be13 	b.w	3401c27c <_strerror_r>
3401c656:	bf00      	nop
3401c658:	3402060c 	.word	0x3402060c

3401c65c <_user_strerror>:
3401c65c:	2000      	movs	r0, #0
3401c65e:	4770      	bx	lr

3401c660 <_localeconv_r>:
3401c660:	4800      	ldr	r0, [pc, #0]	@ (3401c664 <_localeconv_r+0x4>)
3401c662:	4770      	bx	lr
3401c664:	3402074c 	.word	0x3402074c

3401c668 <_close_r>:
3401c668:	b538      	push	{r3, r4, r5, lr}
3401c66a:	2300      	movs	r3, #0
3401c66c:	4d05      	ldr	r5, [pc, #20]	@ (3401c684 <_close_r+0x1c>)
3401c66e:	4604      	mov	r4, r0
3401c670:	4608      	mov	r0, r1
3401c672:	602b      	str	r3, [r5, #0]
3401c674:	f7e5 fc06 	bl	34001e84 <_close>
3401c678:	1c43      	adds	r3, r0, #1
3401c67a:	d102      	bne.n	3401c682 <_close_r+0x1a>
3401c67c:	682b      	ldr	r3, [r5, #0]
3401c67e:	b103      	cbz	r3, 3401c682 <_close_r+0x1a>
3401c680:	6023      	str	r3, [r4, #0]
3401c682:	bd38      	pop	{r3, r4, r5, pc}
3401c684:	34020e94 	.word	0x34020e94

3401c688 <_lseek_r>:
3401c688:	b538      	push	{r3, r4, r5, lr}
3401c68a:	4604      	mov	r4, r0
3401c68c:	4d06      	ldr	r5, [pc, #24]	@ (3401c6a8 <_lseek_r+0x20>)
3401c68e:	4608      	mov	r0, r1
3401c690:	4611      	mov	r1, r2
3401c692:	2200      	movs	r2, #0
3401c694:	602a      	str	r2, [r5, #0]
3401c696:	461a      	mov	r2, r3
3401c698:	f7e5 fc1b 	bl	34001ed2 <_lseek>
3401c69c:	1c43      	adds	r3, r0, #1
3401c69e:	d102      	bne.n	3401c6a6 <_lseek_r+0x1e>
3401c6a0:	682b      	ldr	r3, [r5, #0]
3401c6a2:	b103      	cbz	r3, 3401c6a6 <_lseek_r+0x1e>
3401c6a4:	6023      	str	r3, [r4, #0]
3401c6a6:	bd38      	pop	{r3, r4, r5, pc}
3401c6a8:	34020e94 	.word	0x34020e94

3401c6ac <_read_r>:
3401c6ac:	b538      	push	{r3, r4, r5, lr}
3401c6ae:	4604      	mov	r4, r0
3401c6b0:	4d06      	ldr	r5, [pc, #24]	@ (3401c6cc <_read_r+0x20>)
3401c6b2:	4608      	mov	r0, r1
3401c6b4:	4611      	mov	r1, r2
3401c6b6:	2200      	movs	r2, #0
3401c6b8:	602a      	str	r2, [r5, #0]
3401c6ba:	461a      	mov	r2, r3
3401c6bc:	f7e5 fbc5 	bl	34001e4a <_read>
3401c6c0:	1c43      	adds	r3, r0, #1
3401c6c2:	d102      	bne.n	3401c6ca <_read_r+0x1e>
3401c6c4:	682b      	ldr	r3, [r5, #0]
3401c6c6:	b103      	cbz	r3, 3401c6ca <_read_r+0x1e>
3401c6c8:	6023      	str	r3, [r4, #0]
3401c6ca:	bd38      	pop	{r3, r4, r5, pc}
3401c6cc:	34020e94 	.word	0x34020e94

3401c6d0 <_sbrk_r>:
3401c6d0:	b538      	push	{r3, r4, r5, lr}
3401c6d2:	2300      	movs	r3, #0
3401c6d4:	4d05      	ldr	r5, [pc, #20]	@ (3401c6ec <_sbrk_r+0x1c>)
3401c6d6:	4604      	mov	r4, r0
3401c6d8:	4608      	mov	r0, r1
3401c6da:	602b      	str	r3, [r5, #0]
3401c6dc:	f001 fc60 	bl	3401dfa0 <_sbrk>
3401c6e0:	1c43      	adds	r3, r0, #1
3401c6e2:	d102      	bne.n	3401c6ea <_sbrk_r+0x1a>
3401c6e4:	682b      	ldr	r3, [r5, #0]
3401c6e6:	b103      	cbz	r3, 3401c6ea <_sbrk_r+0x1a>
3401c6e8:	6023      	str	r3, [r4, #0]
3401c6ea:	bd38      	pop	{r3, r4, r5, pc}
3401c6ec:	34020e94 	.word	0x34020e94

3401c6f0 <_write_r>:
3401c6f0:	b538      	push	{r3, r4, r5, lr}
3401c6f2:	4604      	mov	r4, r0
3401c6f4:	4d06      	ldr	r5, [pc, #24]	@ (3401c710 <_write_r+0x20>)
3401c6f6:	4608      	mov	r0, r1
3401c6f8:	4611      	mov	r1, r2
3401c6fa:	2200      	movs	r2, #0
3401c6fc:	602a      	str	r2, [r5, #0]
3401c6fe:	461a      	mov	r2, r3
3401c700:	f7e5 f896 	bl	34001830 <_write>
3401c704:	1c43      	adds	r3, r0, #1
3401c706:	d102      	bne.n	3401c70e <_write_r+0x1e>
3401c708:	682b      	ldr	r3, [r5, #0]
3401c70a:	b103      	cbz	r3, 3401c70e <_write_r+0x1e>
3401c70c:	6023      	str	r3, [r4, #0]
3401c70e:	bd38      	pop	{r3, r4, r5, pc}
3401c710:	34020e94 	.word	0x34020e94

3401c714 <__errno>:
3401c714:	4b01      	ldr	r3, [pc, #4]	@ (3401c71c <__errno+0x8>)
3401c716:	6818      	ldr	r0, [r3, #0]
3401c718:	4770      	bx	lr
3401c71a:	bf00      	nop
3401c71c:	3402060c 	.word	0x3402060c

3401c720 <__libc_init_array>:
3401c720:	b570      	push	{r4, r5, r6, lr}
3401c722:	4d0d      	ldr	r5, [pc, #52]	@ (3401c758 <__libc_init_array+0x38>)
3401c724:	2600      	movs	r6, #0
3401c726:	4c0d      	ldr	r4, [pc, #52]	@ (3401c75c <__libc_init_array+0x3c>)
3401c728:	1b64      	subs	r4, r4, r5
3401c72a:	10a4      	asrs	r4, r4, #2
3401c72c:	42a6      	cmp	r6, r4
3401c72e:	d109      	bne.n	3401c744 <__libc_init_array+0x24>
3401c730:	4d0b      	ldr	r5, [pc, #44]	@ (3401c760 <__libc_init_array+0x40>)
3401c732:	2600      	movs	r6, #0
3401c734:	4c0b      	ldr	r4, [pc, #44]	@ (3401c764 <__libc_init_array+0x44>)
3401c736:	f001 fc41 	bl	3401dfbc <_init>
3401c73a:	1b64      	subs	r4, r4, r5
3401c73c:	10a4      	asrs	r4, r4, #2
3401c73e:	42a6      	cmp	r6, r4
3401c740:	d105      	bne.n	3401c74e <__libc_init_array+0x2e>
3401c742:	bd70      	pop	{r4, r5, r6, pc}
3401c744:	f855 3b04 	ldr.w	r3, [r5], #4
3401c748:	3601      	adds	r6, #1
3401c74a:	4798      	blx	r3
3401c74c:	e7ee      	b.n	3401c72c <__libc_init_array+0xc>
3401c74e:	f855 3b04 	ldr.w	r3, [r5], #4
3401c752:	3601      	adds	r6, #1
3401c754:	4798      	blx	r3
3401c756:	e7f2      	b.n	3401c73e <__libc_init_array+0x1e>
3401c758:	340205b4 	.word	0x340205b4
3401c75c:	340205b4 	.word	0x340205b4
3401c760:	340205b4 	.word	0x340205b4
3401c764:	340205b8 	.word	0x340205b8

3401c768 <__retarget_lock_init_recursive>:
3401c768:	4770      	bx	lr

3401c76a <__retarget_lock_acquire_recursive>:
3401c76a:	4770      	bx	lr

3401c76c <__retarget_lock_release_recursive>:
3401c76c:	4770      	bx	lr

3401c76e <memchr>:
3401c76e:	b2c9      	uxtb	r1, r1
3401c770:	4603      	mov	r3, r0
3401c772:	4402      	add	r2, r0
3401c774:	b510      	push	{r4, lr}
3401c776:	4293      	cmp	r3, r2
3401c778:	4618      	mov	r0, r3
3401c77a:	d101      	bne.n	3401c780 <memchr+0x12>
3401c77c:	2000      	movs	r0, #0
3401c77e:	e003      	b.n	3401c788 <memchr+0x1a>
3401c780:	7804      	ldrb	r4, [r0, #0]
3401c782:	3301      	adds	r3, #1
3401c784:	428c      	cmp	r4, r1
3401c786:	d1f6      	bne.n	3401c776 <memchr+0x8>
3401c788:	bd10      	pop	{r4, pc}

3401c78a <memcpy>:
3401c78a:	440a      	add	r2, r1
3401c78c:	1e43      	subs	r3, r0, #1
3401c78e:	4291      	cmp	r1, r2
3401c790:	d100      	bne.n	3401c794 <memcpy+0xa>
3401c792:	4770      	bx	lr
3401c794:	b510      	push	{r4, lr}
3401c796:	f811 4b01 	ldrb.w	r4, [r1], #1
3401c79a:	4291      	cmp	r1, r2
3401c79c:	f803 4f01 	strb.w	r4, [r3, #1]!
3401c7a0:	d1f9      	bne.n	3401c796 <memcpy+0xc>
3401c7a2:	bd10      	pop	{r4, pc}

3401c7a4 <abort>:
3401c7a4:	2006      	movs	r0, #6
3401c7a6:	b508      	push	{r3, lr}
3401c7a8:	f001 fb88 	bl	3401debc <raise>
3401c7ac:	2001      	movs	r0, #1
3401c7ae:	f7e5 fb41 	bl	34001e34 <_exit>

3401c7b2 <quorem>:
3401c7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c7b6:	6903      	ldr	r3, [r0, #16]
3401c7b8:	4607      	mov	r7, r0
3401c7ba:	690c      	ldr	r4, [r1, #16]
3401c7bc:	42a3      	cmp	r3, r4
3401c7be:	f2c0 8083 	blt.w	3401c8c8 <quorem+0x116>
3401c7c2:	3c01      	subs	r4, #1
3401c7c4:	f100 0514 	add.w	r5, r0, #20
3401c7c8:	f101 0814 	add.w	r8, r1, #20
3401c7cc:	00a3      	lsls	r3, r4, #2
3401c7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401c7d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3401c7d6:	9300      	str	r3, [sp, #0]
3401c7d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401c7dc:	9301      	str	r3, [sp, #4]
3401c7de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3401c7e2:	3301      	adds	r3, #1
3401c7e4:	429a      	cmp	r2, r3
3401c7e6:	fbb2 f6f3 	udiv	r6, r2, r3
3401c7ea:	d331      	bcc.n	3401c850 <quorem+0x9e>
3401c7ec:	f04f 0a00 	mov.w	sl, #0
3401c7f0:	46c4      	mov	ip, r8
3401c7f2:	46ae      	mov	lr, r5
3401c7f4:	46d3      	mov	fp, sl
3401c7f6:	f85c 3b04 	ldr.w	r3, [ip], #4
3401c7fa:	b298      	uxth	r0, r3
3401c7fc:	45e1      	cmp	r9, ip
3401c7fe:	ea4f 4313 	mov.w	r3, r3, lsr #16
3401c802:	fb06 a000 	mla	r0, r6, r0, sl
3401c806:	ea4f 4210 	mov.w	r2, r0, lsr #16
3401c80a:	b280      	uxth	r0, r0
3401c80c:	fb06 2303 	mla	r3, r6, r3, r2
3401c810:	f8de 2000 	ldr.w	r2, [lr]
3401c814:	b292      	uxth	r2, r2
3401c816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401c81a:	eba2 0200 	sub.w	r2, r2, r0
3401c81e:	b29b      	uxth	r3, r3
3401c820:	f8de 0000 	ldr.w	r0, [lr]
3401c824:	445a      	add	r2, fp
3401c826:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3401c82a:	b292      	uxth	r2, r2
3401c82c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3401c830:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3401c834:	ea4f 4b23 	mov.w	fp, r3, asr #16
3401c838:	f84e 2b04 	str.w	r2, [lr], #4
3401c83c:	d2db      	bcs.n	3401c7f6 <quorem+0x44>
3401c83e:	9b00      	ldr	r3, [sp, #0]
3401c840:	58eb      	ldr	r3, [r5, r3]
3401c842:	b92b      	cbnz	r3, 3401c850 <quorem+0x9e>
3401c844:	9b01      	ldr	r3, [sp, #4]
3401c846:	3b04      	subs	r3, #4
3401c848:	429d      	cmp	r5, r3
3401c84a:	461a      	mov	r2, r3
3401c84c:	d330      	bcc.n	3401c8b0 <quorem+0xfe>
3401c84e:	613c      	str	r4, [r7, #16]
3401c850:	4638      	mov	r0, r7
3401c852:	f001 f85b 	bl	3401d90c <__mcmp>
3401c856:	2800      	cmp	r0, #0
3401c858:	db26      	blt.n	3401c8a8 <quorem+0xf6>
3401c85a:	4629      	mov	r1, r5
3401c85c:	2000      	movs	r0, #0
3401c85e:	f858 2b04 	ldr.w	r2, [r8], #4
3401c862:	f8d1 c000 	ldr.w	ip, [r1]
3401c866:	fa1f fe82 	uxth.w	lr, r2
3401c86a:	45c1      	cmp	r9, r8
3401c86c:	fa1f f38c 	uxth.w	r3, ip
3401c870:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401c874:	eba3 030e 	sub.w	r3, r3, lr
3401c878:	4403      	add	r3, r0
3401c87a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3401c87e:	b29b      	uxth	r3, r3
3401c880:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3401c884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401c888:	ea4f 4022 	mov.w	r0, r2, asr #16
3401c88c:	f841 3b04 	str.w	r3, [r1], #4
3401c890:	d2e5      	bcs.n	3401c85e <quorem+0xac>
3401c892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401c896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401c89a:	b922      	cbnz	r2, 3401c8a6 <quorem+0xf4>
3401c89c:	3b04      	subs	r3, #4
3401c89e:	429d      	cmp	r5, r3
3401c8a0:	461a      	mov	r2, r3
3401c8a2:	d30b      	bcc.n	3401c8bc <quorem+0x10a>
3401c8a4:	613c      	str	r4, [r7, #16]
3401c8a6:	3601      	adds	r6, #1
3401c8a8:	4630      	mov	r0, r6
3401c8aa:	b003      	add	sp, #12
3401c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c8b0:	6812      	ldr	r2, [r2, #0]
3401c8b2:	3b04      	subs	r3, #4
3401c8b4:	2a00      	cmp	r2, #0
3401c8b6:	d1ca      	bne.n	3401c84e <quorem+0x9c>
3401c8b8:	3c01      	subs	r4, #1
3401c8ba:	e7c5      	b.n	3401c848 <quorem+0x96>
3401c8bc:	6812      	ldr	r2, [r2, #0]
3401c8be:	3b04      	subs	r3, #4
3401c8c0:	2a00      	cmp	r2, #0
3401c8c2:	d1ef      	bne.n	3401c8a4 <quorem+0xf2>
3401c8c4:	3c01      	subs	r4, #1
3401c8c6:	e7ea      	b.n	3401c89e <quorem+0xec>
3401c8c8:	2000      	movs	r0, #0
3401c8ca:	e7ee      	b.n	3401c8aa <quorem+0xf8>
3401c8cc:	0000      	movs	r0, r0
	...

3401c8d0 <_dtoa_r>:
3401c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c8d4:	69c7      	ldr	r7, [r0, #28]
3401c8d6:	4681      	mov	r9, r0
3401c8d8:	ed2d 8b02 	vpush	{d8}
3401c8dc:	b091      	sub	sp, #68	@ 0x44
3401c8de:	ec55 4b10 	vmov	r4, r5, d0
3401c8e2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3401c8e4:	9107      	str	r1, [sp, #28]
3401c8e6:	9209      	str	r2, [sp, #36]	@ 0x24
3401c8e8:	930d      	str	r3, [sp, #52]	@ 0x34
3401c8ea:	ed8d 0b02 	vstr	d0, [sp, #8]
3401c8ee:	b97f      	cbnz	r7, 3401c910 <_dtoa_r+0x40>
3401c8f0:	2010      	movs	r0, #16
3401c8f2:	f7fe fcef 	bl	3401b2d4 <malloc>
3401c8f6:	4602      	mov	r2, r0
3401c8f8:	f8c9 001c 	str.w	r0, [r9, #28]
3401c8fc:	b920      	cbnz	r0, 3401c908 <_dtoa_r+0x38>
3401c8fe:	4ba0      	ldr	r3, [pc, #640]	@ (3401cb80 <_dtoa_r+0x2b0>)
3401c900:	21ef      	movs	r1, #239	@ 0xef
3401c902:	48a0      	ldr	r0, [pc, #640]	@ (3401cb84 <_dtoa_r+0x2b4>)
3401c904:	f7fe fcc8 	bl	3401b298 <__assert_func>
3401c908:	e9c0 7701 	strd	r7, r7, [r0, #4]
3401c90c:	6007      	str	r7, [r0, #0]
3401c90e:	60c7      	str	r7, [r0, #12]
3401c910:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401c914:	6819      	ldr	r1, [r3, #0]
3401c916:	b159      	cbz	r1, 3401c930 <_dtoa_r+0x60>
3401c918:	685a      	ldr	r2, [r3, #4]
3401c91a:	2301      	movs	r3, #1
3401c91c:	4648      	mov	r0, r9
3401c91e:	4093      	lsls	r3, r2
3401c920:	604a      	str	r2, [r1, #4]
3401c922:	608b      	str	r3, [r1, #8]
3401c924:	f000 fdbc 	bl	3401d4a0 <_Bfree>
3401c928:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401c92c:	2200      	movs	r2, #0
3401c92e:	601a      	str	r2, [r3, #0]
3401c930:	1e2b      	subs	r3, r5, #0
3401c932:	bfb7      	itett	lt
3401c934:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3401c938:	2300      	movge	r3, #0
3401c93a:	2201      	movlt	r2, #1
3401c93c:	9303      	strlt	r3, [sp, #12]
3401c93e:	bfac      	ite	ge
3401c940:	6033      	strge	r3, [r6, #0]
3401c942:	6032      	strlt	r2, [r6, #0]
3401c944:	4b90      	ldr	r3, [pc, #576]	@ (3401cb88 <_dtoa_r+0x2b8>)
3401c946:	9e03      	ldr	r6, [sp, #12]
3401c948:	43b3      	bics	r3, r6
3401c94a:	d110      	bne.n	3401c96e <_dtoa_r+0x9e>
3401c94c:	f242 730f 	movw	r3, #9999	@ 0x270f
3401c950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401c952:	6013      	str	r3, [r2, #0]
3401c954:	f3c6 0313 	ubfx	r3, r6, #0, #20
3401c958:	4323      	orrs	r3, r4
3401c95a:	f000 84e6 	beq.w	3401d32a <_dtoa_r+0xa5a>
3401c95e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401c960:	4f8a      	ldr	r7, [pc, #552]	@ (3401cb8c <_dtoa_r+0x2bc>)
3401c962:	2b00      	cmp	r3, #0
3401c964:	f000 84e8 	beq.w	3401d338 <_dtoa_r+0xa68>
3401c968:	1cfb      	adds	r3, r7, #3
3401c96a:	f000 bce3 	b.w	3401d334 <_dtoa_r+0xa64>
3401c96e:	ed9d 8b02 	vldr	d8, [sp, #8]
3401c972:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401c976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401c97a:	d10a      	bne.n	3401c992 <_dtoa_r+0xc2>
3401c97c:	2301      	movs	r3, #1
3401c97e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401c980:	6013      	str	r3, [r2, #0]
3401c982:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401c984:	b113      	cbz	r3, 3401c98c <_dtoa_r+0xbc>
3401c986:	4b82      	ldr	r3, [pc, #520]	@ (3401cb90 <_dtoa_r+0x2c0>)
3401c988:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401c98a:	6013      	str	r3, [r2, #0]
3401c98c:	4f81      	ldr	r7, [pc, #516]	@ (3401cb94 <_dtoa_r+0x2c4>)
3401c98e:	f000 bcd3 	b.w	3401d338 <_dtoa_r+0xa68>
3401c992:	aa0e      	add	r2, sp, #56	@ 0x38
3401c994:	eeb0 0b48 	vmov.f64	d0, d8
3401c998:	a90f      	add	r1, sp, #60	@ 0x3c
3401c99a:	4648      	mov	r0, r9
3401c99c:	f001 f86a 	bl	3401da74 <__d2b>
3401c9a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401c9a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401c9a6:	9001      	str	r0, [sp, #4]
3401c9a8:	2b00      	cmp	r3, #0
3401c9aa:	d045      	beq.n	3401ca38 <_dtoa_r+0x168>
3401c9ac:	ee18 1a90 	vmov	r1, s17
3401c9b0:	eeb0 7b48 	vmov.f64	d7, d8
3401c9b4:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3401c9b8:	2500      	movs	r5, #0
3401c9ba:	f3c1 0113 	ubfx	r1, r1, #0, #20
3401c9be:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401c9c2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401c9c6:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3401c9ca:	ee07 1a90 	vmov	s15, r1
3401c9ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3401cb68 <_dtoa_r+0x298>
3401c9d2:	ee37 7b46 	vsub.f64	d7, d7, d6
3401c9d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3401cb70 <_dtoa_r+0x2a0>
3401c9da:	eea7 6b05 	vfma.f64	d6, d7, d5
3401c9de:	ee07 3a90 	vmov	s15, r3
3401c9e2:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3401c9e6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3401cb78 <_dtoa_r+0x2a8>
3401c9ea:	eeb0 7b46 	vmov.f64	d7, d6
3401c9ee:	eea4 7b05 	vfma.f64	d7, d4, d5
3401c9f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3401c9f6:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3401c9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401c9fe:	ee16 8a90 	vmov	r8, s13
3401ca02:	d508      	bpl.n	3401ca16 <_dtoa_r+0x146>
3401ca04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3401ca08:	eeb4 6b47 	vcmp.f64	d6, d7
3401ca0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca10:	bf18      	it	ne
3401ca12:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
3401ca16:	f1b8 0f16 	cmp.w	r8, #22
3401ca1a:	d82d      	bhi.n	3401ca78 <_dtoa_r+0x1a8>
3401ca1c:	495e      	ldr	r1, [pc, #376]	@ (3401cb98 <_dtoa_r+0x2c8>)
3401ca1e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3401ca22:	ed91 7b00 	vldr	d7, [r1]
3401ca26:	eeb4 8bc7 	vcmpe.f64	d8, d7
3401ca2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca2e:	d501      	bpl.n	3401ca34 <_dtoa_r+0x164>
3401ca30:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401ca34:	2100      	movs	r1, #0
3401ca36:	e020      	b.n	3401ca7a <_dtoa_r+0x1aa>
3401ca38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3401ca3a:	2501      	movs	r5, #1
3401ca3c:	4413      	add	r3, r2
3401ca3e:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401ca42:	2920      	cmp	r1, #32
3401ca44:	bfc9      	itett	gt
3401ca46:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3401ca4a:	f1c1 0120 	rsble	r1, r1, #32
3401ca4e:	408e      	lslgt	r6, r1
3401ca50:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401ca54:	bfd8      	it	le
3401ca56:	fa04 f101 	lslle.w	r1, r4, r1
3401ca5a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
3401ca5e:	bfc4      	itt	gt
3401ca60:	fa24 f101 	lsrgt.w	r1, r4, r1
3401ca64:	4331      	orrgt	r1, r6
3401ca66:	ee07 1a90 	vmov	s15, r1
3401ca6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401ca6e:	ee17 1a90 	vmov	r1, s15
3401ca72:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401ca76:	e7a6      	b.n	3401c9c6 <_dtoa_r+0xf6>
3401ca78:	2101      	movs	r1, #1
3401ca7a:	1ad2      	subs	r2, r2, r3
3401ca7c:	910c      	str	r1, [sp, #48]	@ 0x30
3401ca7e:	1e53      	subs	r3, r2, #1
3401ca80:	9306      	str	r3, [sp, #24]
3401ca82:	bf49      	itett	mi
3401ca84:	f1c2 0301 	rsbmi	r3, r2, #1
3401ca88:	2300      	movpl	r3, #0
3401ca8a:	9304      	strmi	r3, [sp, #16]
3401ca8c:	2300      	movmi	r3, #0
3401ca8e:	bf54      	ite	pl
3401ca90:	9304      	strpl	r3, [sp, #16]
3401ca92:	9306      	strmi	r3, [sp, #24]
3401ca94:	f1b8 0f00 	cmp.w	r8, #0
3401ca98:	db16      	blt.n	3401cac8 <_dtoa_r+0x1f8>
3401ca9a:	9b06      	ldr	r3, [sp, #24]
3401ca9c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3401caa0:	4443      	add	r3, r8
3401caa2:	9306      	str	r3, [sp, #24]
3401caa4:	2300      	movs	r3, #0
3401caa6:	9a07      	ldr	r2, [sp, #28]
3401caa8:	2a09      	cmp	r2, #9
3401caaa:	d843      	bhi.n	3401cb34 <_dtoa_r+0x264>
3401caac:	2a05      	cmp	r2, #5
3401caae:	bfc5      	ittet	gt
3401cab0:	3a04      	subgt	r2, #4
3401cab2:	2400      	movgt	r4, #0
3401cab4:	2401      	movle	r4, #1
3401cab6:	9207      	strgt	r2, [sp, #28]
3401cab8:	9a07      	ldr	r2, [sp, #28]
3401caba:	3a02      	subs	r2, #2
3401cabc:	2a03      	cmp	r2, #3
3401cabe:	d844      	bhi.n	3401cb4a <_dtoa_r+0x27a>
3401cac0:	e8df f002 	tbb	[pc, r2]
3401cac4:	0b173634 	.word	0x0b173634
3401cac8:	9b04      	ldr	r3, [sp, #16]
3401caca:	2200      	movs	r2, #0
3401cacc:	eba3 0308 	sub.w	r3, r3, r8
3401cad0:	920a      	str	r2, [sp, #40]	@ 0x28
3401cad2:	9304      	str	r3, [sp, #16]
3401cad4:	f1c8 0300 	rsb	r3, r8, #0
3401cad8:	e7e5      	b.n	3401caa6 <_dtoa_r+0x1d6>
3401cada:	2201      	movs	r2, #1
3401cadc:	9208      	str	r2, [sp, #32]
3401cade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401cae0:	eb08 0b02 	add.w	fp, r8, r2
3401cae4:	f10b 0a01 	add.w	sl, fp, #1
3401cae8:	4652      	mov	r2, sl
3401caea:	2a01      	cmp	r2, #1
3401caec:	bfb8      	it	lt
3401caee:	2201      	movlt	r2, #1
3401caf0:	e006      	b.n	3401cb00 <_dtoa_r+0x230>
3401caf2:	2201      	movs	r2, #1
3401caf4:	9208      	str	r2, [sp, #32]
3401caf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401caf8:	2a00      	cmp	r2, #0
3401cafa:	dd29      	ble.n	3401cb50 <_dtoa_r+0x280>
3401cafc:	4693      	mov	fp, r2
3401cafe:	4692      	mov	sl, r2
3401cb00:	f8d9 701c 	ldr.w	r7, [r9, #28]
3401cb04:	2100      	movs	r1, #0
3401cb06:	2004      	movs	r0, #4
3401cb08:	f100 0614 	add.w	r6, r0, #20
3401cb0c:	4296      	cmp	r6, r2
3401cb0e:	d926      	bls.n	3401cb5e <_dtoa_r+0x28e>
3401cb10:	6079      	str	r1, [r7, #4]
3401cb12:	4648      	mov	r0, r9
3401cb14:	9305      	str	r3, [sp, #20]
3401cb16:	f000 fc83 	bl	3401d420 <_Balloc>
3401cb1a:	9b05      	ldr	r3, [sp, #20]
3401cb1c:	4607      	mov	r7, r0
3401cb1e:	2800      	cmp	r0, #0
3401cb20:	d13e      	bne.n	3401cba0 <_dtoa_r+0x2d0>
3401cb22:	4b1e      	ldr	r3, [pc, #120]	@ (3401cb9c <_dtoa_r+0x2cc>)
3401cb24:	4602      	mov	r2, r0
3401cb26:	f240 11af 	movw	r1, #431	@ 0x1af
3401cb2a:	e6ea      	b.n	3401c902 <_dtoa_r+0x32>
3401cb2c:	2200      	movs	r2, #0
3401cb2e:	e7e1      	b.n	3401caf4 <_dtoa_r+0x224>
3401cb30:	2200      	movs	r2, #0
3401cb32:	e7d3      	b.n	3401cadc <_dtoa_r+0x20c>
3401cb34:	2401      	movs	r4, #1
3401cb36:	2200      	movs	r2, #0
3401cb38:	e9cd 2407 	strd	r2, r4, [sp, #28]
3401cb3c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
3401cb40:	2100      	movs	r1, #0
3401cb42:	2212      	movs	r2, #18
3401cb44:	46da      	mov	sl, fp
3401cb46:	9109      	str	r1, [sp, #36]	@ 0x24
3401cb48:	e7da      	b.n	3401cb00 <_dtoa_r+0x230>
3401cb4a:	2201      	movs	r2, #1
3401cb4c:	9208      	str	r2, [sp, #32]
3401cb4e:	e7f5      	b.n	3401cb3c <_dtoa_r+0x26c>
3401cb50:	f04f 0b01 	mov.w	fp, #1
3401cb54:	46da      	mov	sl, fp
3401cb56:	465a      	mov	r2, fp
3401cb58:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3401cb5c:	e7d0      	b.n	3401cb00 <_dtoa_r+0x230>
3401cb5e:	3101      	adds	r1, #1
3401cb60:	0040      	lsls	r0, r0, #1
3401cb62:	e7d1      	b.n	3401cb08 <_dtoa_r+0x238>
3401cb64:	f3af 8000 	nop.w
3401cb68:	636f4361 	.word	0x636f4361
3401cb6c:	3fd287a7 	.word	0x3fd287a7
3401cb70:	8b60c8b3 	.word	0x8b60c8b3
3401cb74:	3fc68a28 	.word	0x3fc68a28
3401cb78:	509f79fb 	.word	0x509f79fb
3401cb7c:	3fd34413 	.word	0x3fd34413
3401cb80:	340202b1 	.word	0x340202b1
3401cb84:	340202c8 	.word	0x340202c8
3401cb88:	7ff00000 	.word	0x7ff00000
3401cb8c:	340202ad 	.word	0x340202ad
3401cb90:	3401fbeb 	.word	0x3401fbeb
3401cb94:	3401fbea 	.word	0x3401fbea
3401cb98:	340203e0 	.word	0x340203e0
3401cb9c:	34020320 	.word	0x34020320
3401cba0:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401cba4:	f1ba 0f0e 	cmp.w	sl, #14
3401cba8:	6010      	str	r0, [r2, #0]
3401cbaa:	d86e      	bhi.n	3401cc8a <_dtoa_r+0x3ba>
3401cbac:	2c00      	cmp	r4, #0
3401cbae:	d06c      	beq.n	3401cc8a <_dtoa_r+0x3ba>
3401cbb0:	f1b8 0f00 	cmp.w	r8, #0
3401cbb4:	f340 80b4 	ble.w	3401cd20 <_dtoa_r+0x450>
3401cbb8:	f008 010f 	and.w	r1, r8, #15
3401cbbc:	4ac7      	ldr	r2, [pc, #796]	@ (3401cedc <_dtoa_r+0x60c>)
3401cbbe:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401cbc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401cbc6:	ea4f 1128 	mov.w	r1, r8, asr #4
3401cbca:	ed92 7b00 	vldr	d7, [r2]
3401cbce:	f000 809b 	beq.w	3401cd08 <_dtoa_r+0x438>
3401cbd2:	4ac3      	ldr	r2, [pc, #780]	@ (3401cee0 <_dtoa_r+0x610>)
3401cbd4:	f001 010f 	and.w	r1, r1, #15
3401cbd8:	ed92 6b08 	vldr	d6, [r2, #32]
3401cbdc:	2203      	movs	r2, #3
3401cbde:	ee88 6b06 	vdiv.f64	d6, d8, d6
3401cbe2:	ed8d 6b02 	vstr	d6, [sp, #8]
3401cbe6:	48be      	ldr	r0, [pc, #760]	@ (3401cee0 <_dtoa_r+0x610>)
3401cbe8:	2900      	cmp	r1, #0
3401cbea:	f040 808f 	bne.w	3401cd0c <_dtoa_r+0x43c>
3401cbee:	ed9d 6b02 	vldr	d6, [sp, #8]
3401cbf2:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401cbf6:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cbfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401cbfc:	ed9d 7b02 	vldr	d7, [sp, #8]
3401cc00:	2900      	cmp	r1, #0
3401cc02:	f000 80b3 	beq.w	3401cd6c <_dtoa_r+0x49c>
3401cc06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3401cc0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401cc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc12:	f140 80ab 	bpl.w	3401cd6c <_dtoa_r+0x49c>
3401cc16:	f1ba 0f00 	cmp.w	sl, #0
3401cc1a:	f000 80a7 	beq.w	3401cd6c <_dtoa_r+0x49c>
3401cc1e:	f1bb 0f00 	cmp.w	fp, #0
3401cc22:	dd30      	ble.n	3401cc86 <_dtoa_r+0x3b6>
3401cc24:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3401cc28:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
3401cc2c:	3201      	adds	r2, #1
3401cc2e:	465c      	mov	r4, fp
3401cc30:	9105      	str	r1, [sp, #20]
3401cc32:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cc36:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cc3a:	ee07 2a90 	vmov	s15, r2
3401cc3e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401cc42:	ed9d 6b02 	vldr	d6, [sp, #8]
3401cc46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3401cc4a:	eea7 5b06 	vfma.f64	d5, d7, d6
3401cc4e:	ee15 2a90 	vmov	r2, s11
3401cc52:	ec51 0b15 	vmov	r0, r1, d5
3401cc56:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3401cc5a:	2c00      	cmp	r4, #0
3401cc5c:	f040 808a 	bne.w	3401cd74 <_dtoa_r+0x4a4>
3401cc60:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401cc64:	ee36 6b47 	vsub.f64	d6, d6, d7
3401cc68:	ec41 0b17 	vmov	d7, r0, r1
3401cc6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc74:	f300 826a 	bgt.w	3401d14c <_dtoa_r+0x87c>
3401cc78:	eeb1 7b47 	vneg.f64	d7, d7
3401cc7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cc84:	d423      	bmi.n	3401ccce <_dtoa_r+0x3fe>
3401cc86:	ed8d 8b02 	vstr	d8, [sp, #8]
3401cc8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3401cc8c:	2a00      	cmp	r2, #0
3401cc8e:	f2c0 8129 	blt.w	3401cee4 <_dtoa_r+0x614>
3401cc92:	f1b8 0f0e 	cmp.w	r8, #14
3401cc96:	f300 8125 	bgt.w	3401cee4 <_dtoa_r+0x614>
3401cc9a:	4b90      	ldr	r3, [pc, #576]	@ (3401cedc <_dtoa_r+0x60c>)
3401cc9c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3401cca0:	ed93 6b00 	vldr	d6, [r3]
3401cca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401cca6:	2b00      	cmp	r3, #0
3401cca8:	f280 80c8 	bge.w	3401ce3c <_dtoa_r+0x56c>
3401ccac:	f1ba 0f00 	cmp.w	sl, #0
3401ccb0:	f300 80c4 	bgt.w	3401ce3c <_dtoa_r+0x56c>
3401ccb4:	d10b      	bne.n	3401ccce <_dtoa_r+0x3fe>
3401ccb6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401ccba:	ee26 6b07 	vmul.f64	d6, d6, d7
3401ccbe:	ed9d 7b02 	vldr	d7, [sp, #8]
3401ccc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401ccc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ccca:	f2c0 823c 	blt.w	3401d146 <_dtoa_r+0x876>
3401ccce:	2400      	movs	r4, #0
3401ccd0:	4625      	mov	r5, r4
3401ccd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401ccd4:	463e      	mov	r6, r7
3401ccd6:	43db      	mvns	r3, r3
3401ccd8:	9305      	str	r3, [sp, #20]
3401ccda:	f04f 0800 	mov.w	r8, #0
3401ccde:	4621      	mov	r1, r4
3401cce0:	4648      	mov	r0, r9
3401cce2:	f000 fbdd 	bl	3401d4a0 <_Bfree>
3401cce6:	2d00      	cmp	r5, #0
3401cce8:	f000 80a2 	beq.w	3401ce30 <_dtoa_r+0x560>
3401ccec:	f1b8 0f00 	cmp.w	r8, #0
3401ccf0:	d005      	beq.n	3401ccfe <_dtoa_r+0x42e>
3401ccf2:	45a8      	cmp	r8, r5
3401ccf4:	d003      	beq.n	3401ccfe <_dtoa_r+0x42e>
3401ccf6:	4641      	mov	r1, r8
3401ccf8:	4648      	mov	r0, r9
3401ccfa:	f000 fbd1 	bl	3401d4a0 <_Bfree>
3401ccfe:	4629      	mov	r1, r5
3401cd00:	4648      	mov	r0, r9
3401cd02:	f000 fbcd 	bl	3401d4a0 <_Bfree>
3401cd06:	e093      	b.n	3401ce30 <_dtoa_r+0x560>
3401cd08:	2202      	movs	r2, #2
3401cd0a:	e76c      	b.n	3401cbe6 <_dtoa_r+0x316>
3401cd0c:	07cc      	lsls	r4, r1, #31
3401cd0e:	d504      	bpl.n	3401cd1a <_dtoa_r+0x44a>
3401cd10:	3201      	adds	r2, #1
3401cd12:	ed90 6b00 	vldr	d6, [r0]
3401cd16:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cd1a:	1049      	asrs	r1, r1, #1
3401cd1c:	3008      	adds	r0, #8
3401cd1e:	e763      	b.n	3401cbe8 <_dtoa_r+0x318>
3401cd20:	d022      	beq.n	3401cd68 <_dtoa_r+0x498>
3401cd22:	f1c8 0100 	rsb	r1, r8, #0
3401cd26:	4a6d      	ldr	r2, [pc, #436]	@ (3401cedc <_dtoa_r+0x60c>)
3401cd28:	2400      	movs	r4, #0
3401cd2a:	f001 000f 	and.w	r0, r1, #15
3401cd2e:	1109      	asrs	r1, r1, #4
3401cd30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401cd34:	486a      	ldr	r0, [pc, #424]	@ (3401cee0 <_dtoa_r+0x610>)
3401cd36:	ed92 7b00 	vldr	d7, [r2]
3401cd3a:	2202      	movs	r2, #2
3401cd3c:	ee28 7b07 	vmul.f64	d7, d8, d7
3401cd40:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cd44:	b929      	cbnz	r1, 3401cd52 <_dtoa_r+0x482>
3401cd46:	2c00      	cmp	r4, #0
3401cd48:	f43f af57 	beq.w	3401cbfa <_dtoa_r+0x32a>
3401cd4c:	ed8d 7b02 	vstr	d7, [sp, #8]
3401cd50:	e753      	b.n	3401cbfa <_dtoa_r+0x32a>
3401cd52:	07ce      	lsls	r6, r1, #31
3401cd54:	d505      	bpl.n	3401cd62 <_dtoa_r+0x492>
3401cd56:	3201      	adds	r2, #1
3401cd58:	2401      	movs	r4, #1
3401cd5a:	ed90 6b00 	vldr	d6, [r0]
3401cd5e:	ee27 7b06 	vmul.f64	d7, d7, d6
3401cd62:	1049      	asrs	r1, r1, #1
3401cd64:	3008      	adds	r0, #8
3401cd66:	e7ed      	b.n	3401cd44 <_dtoa_r+0x474>
3401cd68:	2202      	movs	r2, #2
3401cd6a:	e746      	b.n	3401cbfa <_dtoa_r+0x32a>
3401cd6c:	4654      	mov	r4, sl
3401cd6e:	f8cd 8014 	str.w	r8, [sp, #20]
3401cd72:	e762      	b.n	3401cc3a <_dtoa_r+0x36a>
3401cd74:	4a59      	ldr	r2, [pc, #356]	@ (3401cedc <_dtoa_r+0x60c>)
3401cd76:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3401cd7a:	443c      	add	r4, r7
3401cd7c:	ed12 4b02 	vldr	d4, [r2, #-8]
3401cd80:	9a08      	ldr	r2, [sp, #32]
3401cd82:	ec41 0b17 	vmov	d7, r0, r1
3401cd86:	b34a      	cbz	r2, 3401cddc <_dtoa_r+0x50c>
3401cd88:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3401cd8c:	463e      	mov	r6, r7
3401cd8e:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401cd92:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401cd96:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401cd9a:	ee35 7b47 	vsub.f64	d7, d5, d7
3401cd9e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401cda2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401cda6:	ee14 2a90 	vmov	r2, s9
3401cdaa:	3230      	adds	r2, #48	@ 0x30
3401cdac:	ee36 6b45 	vsub.f64	d6, d6, d5
3401cdb0:	f806 2b01 	strb.w	r2, [r6], #1
3401cdb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cdbc:	d438      	bmi.n	3401ce30 <_dtoa_r+0x560>
3401cdbe:	ee32 5b46 	vsub.f64	d5, d2, d6
3401cdc2:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401cdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401cdca:	d46e      	bmi.n	3401ceaa <_dtoa_r+0x5da>
3401cdcc:	42a6      	cmp	r6, r4
3401cdce:	f43f af5a 	beq.w	3401cc86 <_dtoa_r+0x3b6>
3401cdd2:	ee27 7b03 	vmul.f64	d7, d7, d3
3401cdd6:	ee26 6b03 	vmul.f64	d6, d6, d3
3401cdda:	e7e0      	b.n	3401cd9e <_dtoa_r+0x4ce>
3401cddc:	ee27 7b04 	vmul.f64	d7, d7, d4
3401cde0:	4621      	mov	r1, r4
3401cde2:	463e      	mov	r6, r7
3401cde4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401cde8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401cdec:	ee14 2a90 	vmov	r2, s9
3401cdf0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401cdf4:	3230      	adds	r2, #48	@ 0x30
3401cdf6:	ee36 6b45 	vsub.f64	d6, d6, d5
3401cdfa:	f806 2b01 	strb.w	r2, [r6], #1
3401cdfe:	42a6      	cmp	r6, r4
3401ce00:	d119      	bne.n	3401ce36 <_dtoa_r+0x566>
3401ce02:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3401ce06:	ee37 4b05 	vadd.f64	d4, d7, d5
3401ce0a:	eeb4 6bc4 	vcmpe.f64	d6, d4
3401ce0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce12:	dc4a      	bgt.n	3401ceaa <_dtoa_r+0x5da>
3401ce14:	ee35 5b47 	vsub.f64	d5, d5, d7
3401ce18:	eeb4 6bc5 	vcmpe.f64	d6, d5
3401ce1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce20:	f57f af31 	bpl.w	3401cc86 <_dtoa_r+0x3b6>
3401ce24:	460e      	mov	r6, r1
3401ce26:	3901      	subs	r1, #1
3401ce28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3401ce2c:	2b30      	cmp	r3, #48	@ 0x30
3401ce2e:	d0f9      	beq.n	3401ce24 <_dtoa_r+0x554>
3401ce30:	f8dd 8014 	ldr.w	r8, [sp, #20]
3401ce34:	e027      	b.n	3401ce86 <_dtoa_r+0x5b6>
3401ce36:	ee26 6b03 	vmul.f64	d6, d6, d3
3401ce3a:	e7d5      	b.n	3401cde8 <_dtoa_r+0x518>
3401ce3c:	ed9d 7b02 	vldr	d7, [sp, #8]
3401ce40:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401ce44:	463e      	mov	r6, r7
3401ce46:	ee87 5b06 	vdiv.f64	d5, d7, d6
3401ce4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3401ce4e:	ee15 3a10 	vmov	r3, s10
3401ce52:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401ce56:	3330      	adds	r3, #48	@ 0x30
3401ce58:	eea3 7b46 	vfms.f64	d7, d3, d6
3401ce5c:	f806 3b01 	strb.w	r3, [r6], #1
3401ce60:	1bf3      	subs	r3, r6, r7
3401ce62:	459a      	cmp	sl, r3
3401ce64:	d132      	bne.n	3401cecc <_dtoa_r+0x5fc>
3401ce66:	ee37 7b07 	vadd.f64	d7, d7, d7
3401ce6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce72:	dc18      	bgt.n	3401cea6 <_dtoa_r+0x5d6>
3401ce74:	eeb4 7b46 	vcmp.f64	d7, d6
3401ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ce7c:	d103      	bne.n	3401ce86 <_dtoa_r+0x5b6>
3401ce7e:	ee15 3a10 	vmov	r3, s10
3401ce82:	07db      	lsls	r3, r3, #31
3401ce84:	d40f      	bmi.n	3401cea6 <_dtoa_r+0x5d6>
3401ce86:	9901      	ldr	r1, [sp, #4]
3401ce88:	4648      	mov	r0, r9
3401ce8a:	f000 fb09 	bl	3401d4a0 <_Bfree>
3401ce8e:	2300      	movs	r3, #0
3401ce90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401ce92:	7033      	strb	r3, [r6, #0]
3401ce94:	f108 0301 	add.w	r3, r8, #1
3401ce98:	6013      	str	r3, [r2, #0]
3401ce9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401ce9c:	2b00      	cmp	r3, #0
3401ce9e:	f000 824b 	beq.w	3401d338 <_dtoa_r+0xa68>
3401cea2:	601e      	str	r6, [r3, #0]
3401cea4:	e248      	b.n	3401d338 <_dtoa_r+0xa68>
3401cea6:	f8cd 8014 	str.w	r8, [sp, #20]
3401ceaa:	4633      	mov	r3, r6
3401ceac:	461e      	mov	r6, r3
3401ceae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401ceb2:	2a39      	cmp	r2, #57	@ 0x39
3401ceb4:	d106      	bne.n	3401cec4 <_dtoa_r+0x5f4>
3401ceb6:	429f      	cmp	r7, r3
3401ceb8:	d1f8      	bne.n	3401ceac <_dtoa_r+0x5dc>
3401ceba:	9a05      	ldr	r2, [sp, #20]
3401cebc:	3201      	adds	r2, #1
3401cebe:	9205      	str	r2, [sp, #20]
3401cec0:	2230      	movs	r2, #48	@ 0x30
3401cec2:	703a      	strb	r2, [r7, #0]
3401cec4:	781a      	ldrb	r2, [r3, #0]
3401cec6:	3201      	adds	r2, #1
3401cec8:	701a      	strb	r2, [r3, #0]
3401ceca:	e7b1      	b.n	3401ce30 <_dtoa_r+0x560>
3401cecc:	ee27 7b04 	vmul.f64	d7, d7, d4
3401ced0:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ced8:	d1b5      	bne.n	3401ce46 <_dtoa_r+0x576>
3401ceda:	e7d4      	b.n	3401ce86 <_dtoa_r+0x5b6>
3401cedc:	340203e0 	.word	0x340203e0
3401cee0:	340203b8 	.word	0x340203b8
3401cee4:	9908      	ldr	r1, [sp, #32]
3401cee6:	2900      	cmp	r1, #0
3401cee8:	f000 80e9 	beq.w	3401d0be <_dtoa_r+0x7ee>
3401ceec:	9907      	ldr	r1, [sp, #28]
3401ceee:	2901      	cmp	r1, #1
3401cef0:	f300 80cb 	bgt.w	3401d08a <_dtoa_r+0x7ba>
3401cef4:	2d00      	cmp	r5, #0
3401cef6:	f000 80c4 	beq.w	3401d082 <_dtoa_r+0x7b2>
3401cefa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401cefe:	461c      	mov	r4, r3
3401cf00:	9e04      	ldr	r6, [sp, #16]
3401cf02:	9305      	str	r3, [sp, #20]
3401cf04:	2101      	movs	r1, #1
3401cf06:	9b04      	ldr	r3, [sp, #16]
3401cf08:	4648      	mov	r0, r9
3401cf0a:	4413      	add	r3, r2
3401cf0c:	9304      	str	r3, [sp, #16]
3401cf0e:	9b06      	ldr	r3, [sp, #24]
3401cf10:	4413      	add	r3, r2
3401cf12:	9306      	str	r3, [sp, #24]
3401cf14:	f000 fb7a 	bl	3401d60c <__i2b>
3401cf18:	9b05      	ldr	r3, [sp, #20]
3401cf1a:	4605      	mov	r5, r0
3401cf1c:	b166      	cbz	r6, 3401cf38 <_dtoa_r+0x668>
3401cf1e:	9a06      	ldr	r2, [sp, #24]
3401cf20:	2a00      	cmp	r2, #0
3401cf22:	dd09      	ble.n	3401cf38 <_dtoa_r+0x668>
3401cf24:	42b2      	cmp	r2, r6
3401cf26:	9904      	ldr	r1, [sp, #16]
3401cf28:	bfa8      	it	ge
3401cf2a:	4632      	movge	r2, r6
3401cf2c:	1a89      	subs	r1, r1, r2
3401cf2e:	1ab6      	subs	r6, r6, r2
3401cf30:	9104      	str	r1, [sp, #16]
3401cf32:	9906      	ldr	r1, [sp, #24]
3401cf34:	1a8a      	subs	r2, r1, r2
3401cf36:	9206      	str	r2, [sp, #24]
3401cf38:	b30b      	cbz	r3, 3401cf7e <_dtoa_r+0x6ae>
3401cf3a:	9a08      	ldr	r2, [sp, #32]
3401cf3c:	2a00      	cmp	r2, #0
3401cf3e:	f000 80c5 	beq.w	3401d0cc <_dtoa_r+0x7fc>
3401cf42:	2c00      	cmp	r4, #0
3401cf44:	f000 80bf 	beq.w	3401d0c6 <_dtoa_r+0x7f6>
3401cf48:	4629      	mov	r1, r5
3401cf4a:	4622      	mov	r2, r4
3401cf4c:	4648      	mov	r0, r9
3401cf4e:	930b      	str	r3, [sp, #44]	@ 0x2c
3401cf50:	f000 fc16 	bl	3401d780 <__pow5mult>
3401cf54:	9a01      	ldr	r2, [sp, #4]
3401cf56:	4601      	mov	r1, r0
3401cf58:	4605      	mov	r5, r0
3401cf5a:	4648      	mov	r0, r9
3401cf5c:	f000 fb6c 	bl	3401d638 <__multiply>
3401cf60:	9901      	ldr	r1, [sp, #4]
3401cf62:	9005      	str	r0, [sp, #20]
3401cf64:	4648      	mov	r0, r9
3401cf66:	f000 fa9b 	bl	3401d4a0 <_Bfree>
3401cf6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401cf6c:	1b1b      	subs	r3, r3, r4
3401cf6e:	f000 80b0 	beq.w	3401d0d2 <_dtoa_r+0x802>
3401cf72:	461a      	mov	r2, r3
3401cf74:	9905      	ldr	r1, [sp, #20]
3401cf76:	4648      	mov	r0, r9
3401cf78:	f000 fc02 	bl	3401d780 <__pow5mult>
3401cf7c:	9001      	str	r0, [sp, #4]
3401cf7e:	2101      	movs	r1, #1
3401cf80:	4648      	mov	r0, r9
3401cf82:	f000 fb43 	bl	3401d60c <__i2b>
3401cf86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401cf88:	4604      	mov	r4, r0
3401cf8a:	2b00      	cmp	r3, #0
3401cf8c:	f000 81da 	beq.w	3401d344 <_dtoa_r+0xa74>
3401cf90:	461a      	mov	r2, r3
3401cf92:	4601      	mov	r1, r0
3401cf94:	4648      	mov	r0, r9
3401cf96:	f000 fbf3 	bl	3401d780 <__pow5mult>
3401cf9a:	9b07      	ldr	r3, [sp, #28]
3401cf9c:	4604      	mov	r4, r0
3401cf9e:	2b01      	cmp	r3, #1
3401cfa0:	f300 80a0 	bgt.w	3401d0e4 <_dtoa_r+0x814>
3401cfa4:	9b02      	ldr	r3, [sp, #8]
3401cfa6:	2b00      	cmp	r3, #0
3401cfa8:	f040 8096 	bne.w	3401d0d8 <_dtoa_r+0x808>
3401cfac:	9b03      	ldr	r3, [sp, #12]
3401cfae:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401cfb2:	2a00      	cmp	r2, #0
3401cfb4:	f040 8092 	bne.w	3401d0dc <_dtoa_r+0x80c>
3401cfb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3401cfbc:	0d12      	lsrs	r2, r2, #20
3401cfbe:	0512      	lsls	r2, r2, #20
3401cfc0:	2a00      	cmp	r2, #0
3401cfc2:	f000 808d 	beq.w	3401d0e0 <_dtoa_r+0x810>
3401cfc6:	9b04      	ldr	r3, [sp, #16]
3401cfc8:	3301      	adds	r3, #1
3401cfca:	9304      	str	r3, [sp, #16]
3401cfcc:	9b06      	ldr	r3, [sp, #24]
3401cfce:	3301      	adds	r3, #1
3401cfd0:	9306      	str	r3, [sp, #24]
3401cfd2:	2301      	movs	r3, #1
3401cfd4:	930b      	str	r3, [sp, #44]	@ 0x2c
3401cfd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401cfd8:	2b00      	cmp	r3, #0
3401cfda:	f000 81b9 	beq.w	3401d350 <_dtoa_r+0xa80>
3401cfde:	6922      	ldr	r2, [r4, #16]
3401cfe0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3401cfe4:	6910      	ldr	r0, [r2, #16]
3401cfe6:	f000 fac5 	bl	3401d574 <__hi0bits>
3401cfea:	f1c0 0020 	rsb	r0, r0, #32
3401cfee:	9b06      	ldr	r3, [sp, #24]
3401cff0:	4418      	add	r0, r3
3401cff2:	f010 001f 	ands.w	r0, r0, #31
3401cff6:	f000 8081 	beq.w	3401d0fc <_dtoa_r+0x82c>
3401cffa:	f1c0 0220 	rsb	r2, r0, #32
3401cffe:	2a04      	cmp	r2, #4
3401d000:	dd73      	ble.n	3401d0ea <_dtoa_r+0x81a>
3401d002:	f1c0 001c 	rsb	r0, r0, #28
3401d006:	9b04      	ldr	r3, [sp, #16]
3401d008:	4403      	add	r3, r0
3401d00a:	4406      	add	r6, r0
3401d00c:	9304      	str	r3, [sp, #16]
3401d00e:	9b06      	ldr	r3, [sp, #24]
3401d010:	4403      	add	r3, r0
3401d012:	9306      	str	r3, [sp, #24]
3401d014:	9b04      	ldr	r3, [sp, #16]
3401d016:	2b00      	cmp	r3, #0
3401d018:	dd05      	ble.n	3401d026 <_dtoa_r+0x756>
3401d01a:	461a      	mov	r2, r3
3401d01c:	9901      	ldr	r1, [sp, #4]
3401d01e:	4648      	mov	r0, r9
3401d020:	f000 fc08 	bl	3401d834 <__lshift>
3401d024:	9001      	str	r0, [sp, #4]
3401d026:	9b06      	ldr	r3, [sp, #24]
3401d028:	2b00      	cmp	r3, #0
3401d02a:	dd05      	ble.n	3401d038 <_dtoa_r+0x768>
3401d02c:	4621      	mov	r1, r4
3401d02e:	461a      	mov	r2, r3
3401d030:	4648      	mov	r0, r9
3401d032:	f000 fbff 	bl	3401d834 <__lshift>
3401d036:	4604      	mov	r4, r0
3401d038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401d03a:	2b00      	cmp	r3, #0
3401d03c:	d060      	beq.n	3401d100 <_dtoa_r+0x830>
3401d03e:	4621      	mov	r1, r4
3401d040:	9801      	ldr	r0, [sp, #4]
3401d042:	f000 fc63 	bl	3401d90c <__mcmp>
3401d046:	2800      	cmp	r0, #0
3401d048:	da5a      	bge.n	3401d100 <_dtoa_r+0x830>
3401d04a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
3401d04e:	220a      	movs	r2, #10
3401d050:	9901      	ldr	r1, [sp, #4]
3401d052:	4648      	mov	r0, r9
3401d054:	9305      	str	r3, [sp, #20]
3401d056:	2300      	movs	r3, #0
3401d058:	f000 fa44 	bl	3401d4e4 <__multadd>
3401d05c:	9b08      	ldr	r3, [sp, #32]
3401d05e:	9001      	str	r0, [sp, #4]
3401d060:	2b00      	cmp	r3, #0
3401d062:	f000 8177 	beq.w	3401d354 <_dtoa_r+0xa84>
3401d066:	4629      	mov	r1, r5
3401d068:	2300      	movs	r3, #0
3401d06a:	220a      	movs	r2, #10
3401d06c:	4648      	mov	r0, r9
3401d06e:	f000 fa39 	bl	3401d4e4 <__multadd>
3401d072:	f1bb 0f00 	cmp.w	fp, #0
3401d076:	4605      	mov	r5, r0
3401d078:	dc6e      	bgt.n	3401d158 <_dtoa_r+0x888>
3401d07a:	9b07      	ldr	r3, [sp, #28]
3401d07c:	2b02      	cmp	r3, #2
3401d07e:	dc48      	bgt.n	3401d112 <_dtoa_r+0x842>
3401d080:	e06a      	b.n	3401d158 <_dtoa_r+0x888>
3401d082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401d084:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3401d088:	e739      	b.n	3401cefe <_dtoa_r+0x62e>
3401d08a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
3401d08e:	42a3      	cmp	r3, r4
3401d090:	db07      	blt.n	3401d0a2 <_dtoa_r+0x7d2>
3401d092:	f1ba 0f00 	cmp.w	sl, #0
3401d096:	eba3 0404 	sub.w	r4, r3, r4
3401d09a:	db0b      	blt.n	3401d0b4 <_dtoa_r+0x7e4>
3401d09c:	9e04      	ldr	r6, [sp, #16]
3401d09e:	4652      	mov	r2, sl
3401d0a0:	e72f      	b.n	3401cf02 <_dtoa_r+0x632>
3401d0a2:	1ae2      	subs	r2, r4, r3
3401d0a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401d0a6:	9e04      	ldr	r6, [sp, #16]
3401d0a8:	4413      	add	r3, r2
3401d0aa:	4652      	mov	r2, sl
3401d0ac:	930a      	str	r3, [sp, #40]	@ 0x28
3401d0ae:	4623      	mov	r3, r4
3401d0b0:	2400      	movs	r4, #0
3401d0b2:	e726      	b.n	3401cf02 <_dtoa_r+0x632>
3401d0b4:	9a04      	ldr	r2, [sp, #16]
3401d0b6:	eba2 060a 	sub.w	r6, r2, sl
3401d0ba:	2200      	movs	r2, #0
3401d0bc:	e721      	b.n	3401cf02 <_dtoa_r+0x632>
3401d0be:	461c      	mov	r4, r3
3401d0c0:	9e04      	ldr	r6, [sp, #16]
3401d0c2:	9d08      	ldr	r5, [sp, #32]
3401d0c4:	e72a      	b.n	3401cf1c <_dtoa_r+0x64c>
3401d0c6:	9a01      	ldr	r2, [sp, #4]
3401d0c8:	9205      	str	r2, [sp, #20]
3401d0ca:	e752      	b.n	3401cf72 <_dtoa_r+0x6a2>
3401d0cc:	461a      	mov	r2, r3
3401d0ce:	9901      	ldr	r1, [sp, #4]
3401d0d0:	e751      	b.n	3401cf76 <_dtoa_r+0x6a6>
3401d0d2:	9b05      	ldr	r3, [sp, #20]
3401d0d4:	9301      	str	r3, [sp, #4]
3401d0d6:	e752      	b.n	3401cf7e <_dtoa_r+0x6ae>
3401d0d8:	2300      	movs	r3, #0
3401d0da:	e77b      	b.n	3401cfd4 <_dtoa_r+0x704>
3401d0dc:	9b02      	ldr	r3, [sp, #8]
3401d0de:	e779      	b.n	3401cfd4 <_dtoa_r+0x704>
3401d0e0:	920b      	str	r2, [sp, #44]	@ 0x2c
3401d0e2:	e778      	b.n	3401cfd6 <_dtoa_r+0x706>
3401d0e4:	2300      	movs	r3, #0
3401d0e6:	930b      	str	r3, [sp, #44]	@ 0x2c
3401d0e8:	e779      	b.n	3401cfde <_dtoa_r+0x70e>
3401d0ea:	d093      	beq.n	3401d014 <_dtoa_r+0x744>
3401d0ec:	321c      	adds	r2, #28
3401d0ee:	9b04      	ldr	r3, [sp, #16]
3401d0f0:	4413      	add	r3, r2
3401d0f2:	4416      	add	r6, r2
3401d0f4:	9304      	str	r3, [sp, #16]
3401d0f6:	9b06      	ldr	r3, [sp, #24]
3401d0f8:	4413      	add	r3, r2
3401d0fa:	e78a      	b.n	3401d012 <_dtoa_r+0x742>
3401d0fc:	4602      	mov	r2, r0
3401d0fe:	e7f5      	b.n	3401d0ec <_dtoa_r+0x81c>
3401d100:	f1ba 0f00 	cmp.w	sl, #0
3401d104:	46d3      	mov	fp, sl
3401d106:	f8cd 8014 	str.w	r8, [sp, #20]
3401d10a:	dc21      	bgt.n	3401d150 <_dtoa_r+0x880>
3401d10c:	9b07      	ldr	r3, [sp, #28]
3401d10e:	2b02      	cmp	r3, #2
3401d110:	dd1e      	ble.n	3401d150 <_dtoa_r+0x880>
3401d112:	f1bb 0f00 	cmp.w	fp, #0
3401d116:	f47f addc 	bne.w	3401ccd2 <_dtoa_r+0x402>
3401d11a:	4621      	mov	r1, r4
3401d11c:	465b      	mov	r3, fp
3401d11e:	2205      	movs	r2, #5
3401d120:	4648      	mov	r0, r9
3401d122:	f000 f9df 	bl	3401d4e4 <__multadd>
3401d126:	4601      	mov	r1, r0
3401d128:	4604      	mov	r4, r0
3401d12a:	9801      	ldr	r0, [sp, #4]
3401d12c:	f000 fbee 	bl	3401d90c <__mcmp>
3401d130:	2800      	cmp	r0, #0
3401d132:	f77f adce 	ble.w	3401ccd2 <_dtoa_r+0x402>
3401d136:	2331      	movs	r3, #49	@ 0x31
3401d138:	463e      	mov	r6, r7
3401d13a:	f806 3b01 	strb.w	r3, [r6], #1
3401d13e:	9b05      	ldr	r3, [sp, #20]
3401d140:	3301      	adds	r3, #1
3401d142:	9305      	str	r3, [sp, #20]
3401d144:	e5c9      	b.n	3401ccda <_dtoa_r+0x40a>
3401d146:	4654      	mov	r4, sl
3401d148:	f8cd 8014 	str.w	r8, [sp, #20]
3401d14c:	4625      	mov	r5, r4
3401d14e:	e7f2      	b.n	3401d136 <_dtoa_r+0x866>
3401d150:	9b08      	ldr	r3, [sp, #32]
3401d152:	2b00      	cmp	r3, #0
3401d154:	f000 8102 	beq.w	3401d35c <_dtoa_r+0xa8c>
3401d158:	2e00      	cmp	r6, #0
3401d15a:	dd05      	ble.n	3401d168 <_dtoa_r+0x898>
3401d15c:	4629      	mov	r1, r5
3401d15e:	4632      	mov	r2, r6
3401d160:	4648      	mov	r0, r9
3401d162:	f000 fb67 	bl	3401d834 <__lshift>
3401d166:	4605      	mov	r5, r0
3401d168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401d16a:	2b00      	cmp	r3, #0
3401d16c:	d058      	beq.n	3401d220 <_dtoa_r+0x950>
3401d16e:	6869      	ldr	r1, [r5, #4]
3401d170:	4648      	mov	r0, r9
3401d172:	f000 f955 	bl	3401d420 <_Balloc>
3401d176:	4606      	mov	r6, r0
3401d178:	b928      	cbnz	r0, 3401d186 <_dtoa_r+0x8b6>
3401d17a:	4b82      	ldr	r3, [pc, #520]	@ (3401d384 <_dtoa_r+0xab4>)
3401d17c:	4602      	mov	r2, r0
3401d17e:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401d182:	f7ff bbbe 	b.w	3401c902 <_dtoa_r+0x32>
3401d186:	692a      	ldr	r2, [r5, #16]
3401d188:	f105 010c 	add.w	r1, r5, #12
3401d18c:	300c      	adds	r0, #12
3401d18e:	3202      	adds	r2, #2
3401d190:	0092      	lsls	r2, r2, #2
3401d192:	f7ff fafa 	bl	3401c78a <memcpy>
3401d196:	2201      	movs	r2, #1
3401d198:	4631      	mov	r1, r6
3401d19a:	4648      	mov	r0, r9
3401d19c:	f000 fb4a 	bl	3401d834 <__lshift>
3401d1a0:	1c7b      	adds	r3, r7, #1
3401d1a2:	46a8      	mov	r8, r5
3401d1a4:	4605      	mov	r5, r0
3401d1a6:	9304      	str	r3, [sp, #16]
3401d1a8:	eb07 030b 	add.w	r3, r7, fp
3401d1ac:	9309      	str	r3, [sp, #36]	@ 0x24
3401d1ae:	9b02      	ldr	r3, [sp, #8]
3401d1b0:	f003 0301 	and.w	r3, r3, #1
3401d1b4:	9308      	str	r3, [sp, #32]
3401d1b6:	9b04      	ldr	r3, [sp, #16]
3401d1b8:	4621      	mov	r1, r4
3401d1ba:	9801      	ldr	r0, [sp, #4]
3401d1bc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
3401d1c0:	f7ff faf7 	bl	3401c7b2 <quorem>
3401d1c4:	4641      	mov	r1, r8
3401d1c6:	9002      	str	r0, [sp, #8]
3401d1c8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401d1cc:	9801      	ldr	r0, [sp, #4]
3401d1ce:	f000 fb9d 	bl	3401d90c <__mcmp>
3401d1d2:	462a      	mov	r2, r5
3401d1d4:	9006      	str	r0, [sp, #24]
3401d1d6:	4621      	mov	r1, r4
3401d1d8:	4648      	mov	r0, r9
3401d1da:	f000 fbb3 	bl	3401d944 <__mdiff>
3401d1de:	68c2      	ldr	r2, [r0, #12]
3401d1e0:	4606      	mov	r6, r0
3401d1e2:	b9fa      	cbnz	r2, 3401d224 <_dtoa_r+0x954>
3401d1e4:	4601      	mov	r1, r0
3401d1e6:	9801      	ldr	r0, [sp, #4]
3401d1e8:	f000 fb90 	bl	3401d90c <__mcmp>
3401d1ec:	4602      	mov	r2, r0
3401d1ee:	4631      	mov	r1, r6
3401d1f0:	4648      	mov	r0, r9
3401d1f2:	920a      	str	r2, [sp, #40]	@ 0x28
3401d1f4:	f000 f954 	bl	3401d4a0 <_Bfree>
3401d1f8:	9b07      	ldr	r3, [sp, #28]
3401d1fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401d1fc:	9e04      	ldr	r6, [sp, #16]
3401d1fe:	ea42 0103 	orr.w	r1, r2, r3
3401d202:	9b08      	ldr	r3, [sp, #32]
3401d204:	4319      	orrs	r1, r3
3401d206:	d10f      	bne.n	3401d228 <_dtoa_r+0x958>
3401d208:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d20c:	d028      	beq.n	3401d260 <_dtoa_r+0x990>
3401d20e:	9b06      	ldr	r3, [sp, #24]
3401d210:	2b00      	cmp	r3, #0
3401d212:	dd02      	ble.n	3401d21a <_dtoa_r+0x94a>
3401d214:	9b02      	ldr	r3, [sp, #8]
3401d216:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3401d21a:	f88b a000 	strb.w	sl, [fp]
3401d21e:	e55e      	b.n	3401ccde <_dtoa_r+0x40e>
3401d220:	4628      	mov	r0, r5
3401d222:	e7bd      	b.n	3401d1a0 <_dtoa_r+0x8d0>
3401d224:	2201      	movs	r2, #1
3401d226:	e7e2      	b.n	3401d1ee <_dtoa_r+0x91e>
3401d228:	9b06      	ldr	r3, [sp, #24]
3401d22a:	2b00      	cmp	r3, #0
3401d22c:	db04      	blt.n	3401d238 <_dtoa_r+0x968>
3401d22e:	9907      	ldr	r1, [sp, #28]
3401d230:	430b      	orrs	r3, r1
3401d232:	9908      	ldr	r1, [sp, #32]
3401d234:	430b      	orrs	r3, r1
3401d236:	d120      	bne.n	3401d27a <_dtoa_r+0x9aa>
3401d238:	2a00      	cmp	r2, #0
3401d23a:	ddee      	ble.n	3401d21a <_dtoa_r+0x94a>
3401d23c:	2201      	movs	r2, #1
3401d23e:	9901      	ldr	r1, [sp, #4]
3401d240:	4648      	mov	r0, r9
3401d242:	f000 faf7 	bl	3401d834 <__lshift>
3401d246:	4621      	mov	r1, r4
3401d248:	9001      	str	r0, [sp, #4]
3401d24a:	f000 fb5f 	bl	3401d90c <__mcmp>
3401d24e:	2800      	cmp	r0, #0
3401d250:	dc03      	bgt.n	3401d25a <_dtoa_r+0x98a>
3401d252:	d1e2      	bne.n	3401d21a <_dtoa_r+0x94a>
3401d254:	f01a 0f01 	tst.w	sl, #1
3401d258:	d0df      	beq.n	3401d21a <_dtoa_r+0x94a>
3401d25a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d25e:	d1d9      	bne.n	3401d214 <_dtoa_r+0x944>
3401d260:	2339      	movs	r3, #57	@ 0x39
3401d262:	f88b 3000 	strb.w	r3, [fp]
3401d266:	4633      	mov	r3, r6
3401d268:	461e      	mov	r6, r3
3401d26a:	3b01      	subs	r3, #1
3401d26c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3401d270:	2a39      	cmp	r2, #57	@ 0x39
3401d272:	d052      	beq.n	3401d31a <_dtoa_r+0xa4a>
3401d274:	3201      	adds	r2, #1
3401d276:	701a      	strb	r2, [r3, #0]
3401d278:	e531      	b.n	3401ccde <_dtoa_r+0x40e>
3401d27a:	2a00      	cmp	r2, #0
3401d27c:	dd07      	ble.n	3401d28e <_dtoa_r+0x9be>
3401d27e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401d282:	d0ed      	beq.n	3401d260 <_dtoa_r+0x990>
3401d284:	f10a 0301 	add.w	r3, sl, #1
3401d288:	f88b 3000 	strb.w	r3, [fp]
3401d28c:	e527      	b.n	3401ccde <_dtoa_r+0x40e>
3401d28e:	9b04      	ldr	r3, [sp, #16]
3401d290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401d292:	f803 ac01 	strb.w	sl, [r3, #-1]
3401d296:	4293      	cmp	r3, r2
3401d298:	d029      	beq.n	3401d2ee <_dtoa_r+0xa1e>
3401d29a:	2300      	movs	r3, #0
3401d29c:	220a      	movs	r2, #10
3401d29e:	9901      	ldr	r1, [sp, #4]
3401d2a0:	4648      	mov	r0, r9
3401d2a2:	f000 f91f 	bl	3401d4e4 <__multadd>
3401d2a6:	45a8      	cmp	r8, r5
3401d2a8:	9001      	str	r0, [sp, #4]
3401d2aa:	f04f 0300 	mov.w	r3, #0
3401d2ae:	f04f 020a 	mov.w	r2, #10
3401d2b2:	4641      	mov	r1, r8
3401d2b4:	4648      	mov	r0, r9
3401d2b6:	d107      	bne.n	3401d2c8 <_dtoa_r+0x9f8>
3401d2b8:	f000 f914 	bl	3401d4e4 <__multadd>
3401d2bc:	4680      	mov	r8, r0
3401d2be:	4605      	mov	r5, r0
3401d2c0:	9b04      	ldr	r3, [sp, #16]
3401d2c2:	3301      	adds	r3, #1
3401d2c4:	9304      	str	r3, [sp, #16]
3401d2c6:	e776      	b.n	3401d1b6 <_dtoa_r+0x8e6>
3401d2c8:	f000 f90c 	bl	3401d4e4 <__multadd>
3401d2cc:	4629      	mov	r1, r5
3401d2ce:	4680      	mov	r8, r0
3401d2d0:	2300      	movs	r3, #0
3401d2d2:	220a      	movs	r2, #10
3401d2d4:	4648      	mov	r0, r9
3401d2d6:	f000 f905 	bl	3401d4e4 <__multadd>
3401d2da:	4605      	mov	r5, r0
3401d2dc:	e7f0      	b.n	3401d2c0 <_dtoa_r+0x9f0>
3401d2de:	f1bb 0f00 	cmp.w	fp, #0
3401d2e2:	f04f 0800 	mov.w	r8, #0
3401d2e6:	bfcc      	ite	gt
3401d2e8:	465e      	movgt	r6, fp
3401d2ea:	2601      	movle	r6, #1
3401d2ec:	443e      	add	r6, r7
3401d2ee:	2201      	movs	r2, #1
3401d2f0:	9901      	ldr	r1, [sp, #4]
3401d2f2:	4648      	mov	r0, r9
3401d2f4:	f000 fa9e 	bl	3401d834 <__lshift>
3401d2f8:	4621      	mov	r1, r4
3401d2fa:	9001      	str	r0, [sp, #4]
3401d2fc:	f000 fb06 	bl	3401d90c <__mcmp>
3401d300:	2800      	cmp	r0, #0
3401d302:	dcb0      	bgt.n	3401d266 <_dtoa_r+0x996>
3401d304:	d102      	bne.n	3401d30c <_dtoa_r+0xa3c>
3401d306:	f01a 0f01 	tst.w	sl, #1
3401d30a:	d1ac      	bne.n	3401d266 <_dtoa_r+0x996>
3401d30c:	4633      	mov	r3, r6
3401d30e:	461e      	mov	r6, r3
3401d310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401d314:	2a30      	cmp	r2, #48	@ 0x30
3401d316:	d0fa      	beq.n	3401d30e <_dtoa_r+0xa3e>
3401d318:	e4e1      	b.n	3401ccde <_dtoa_r+0x40e>
3401d31a:	429f      	cmp	r7, r3
3401d31c:	d1a4      	bne.n	3401d268 <_dtoa_r+0x998>
3401d31e:	9b05      	ldr	r3, [sp, #20]
3401d320:	3301      	adds	r3, #1
3401d322:	9305      	str	r3, [sp, #20]
3401d324:	2331      	movs	r3, #49	@ 0x31
3401d326:	703b      	strb	r3, [r7, #0]
3401d328:	e4d9      	b.n	3401ccde <_dtoa_r+0x40e>
3401d32a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401d32c:	4f16      	ldr	r7, [pc, #88]	@ (3401d388 <_dtoa_r+0xab8>)
3401d32e:	b11b      	cbz	r3, 3401d338 <_dtoa_r+0xa68>
3401d330:	f107 0308 	add.w	r3, r7, #8
3401d334:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401d336:	6013      	str	r3, [r2, #0]
3401d338:	4638      	mov	r0, r7
3401d33a:	b011      	add	sp, #68	@ 0x44
3401d33c:	ecbd 8b02 	vpop	{d8}
3401d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d344:	9b07      	ldr	r3, [sp, #28]
3401d346:	2b01      	cmp	r3, #1
3401d348:	f77f ae2c 	ble.w	3401cfa4 <_dtoa_r+0x6d4>
3401d34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401d34e:	930b      	str	r3, [sp, #44]	@ 0x2c
3401d350:	2001      	movs	r0, #1
3401d352:	e64c      	b.n	3401cfee <_dtoa_r+0x71e>
3401d354:	f1bb 0f00 	cmp.w	fp, #0
3401d358:	f77f aed8 	ble.w	3401d10c <_dtoa_r+0x83c>
3401d35c:	463e      	mov	r6, r7
3401d35e:	4621      	mov	r1, r4
3401d360:	9801      	ldr	r0, [sp, #4]
3401d362:	f7ff fa26 	bl	3401c7b2 <quorem>
3401d366:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401d36a:	f806 ab01 	strb.w	sl, [r6], #1
3401d36e:	1bf2      	subs	r2, r6, r7
3401d370:	4593      	cmp	fp, r2
3401d372:	ddb4      	ble.n	3401d2de <_dtoa_r+0xa0e>
3401d374:	2300      	movs	r3, #0
3401d376:	220a      	movs	r2, #10
3401d378:	9901      	ldr	r1, [sp, #4]
3401d37a:	4648      	mov	r0, r9
3401d37c:	f000 f8b2 	bl	3401d4e4 <__multadd>
3401d380:	9001      	str	r0, [sp, #4]
3401d382:	e7ec      	b.n	3401d35e <_dtoa_r+0xa8e>
3401d384:	34020320 	.word	0x34020320
3401d388:	340202a4 	.word	0x340202a4

3401d38c <_free_r>:
3401d38c:	b538      	push	{r3, r4, r5, lr}
3401d38e:	4605      	mov	r5, r0
3401d390:	2900      	cmp	r1, #0
3401d392:	d041      	beq.n	3401d418 <_free_r+0x8c>
3401d394:	f851 3c04 	ldr.w	r3, [r1, #-4]
3401d398:	1f0c      	subs	r4, r1, #4
3401d39a:	2b00      	cmp	r3, #0
3401d39c:	bfb8      	it	lt
3401d39e:	18e4      	addlt	r4, r4, r3
3401d3a0:	f7fe f842 	bl	3401b428 <__malloc_lock>
3401d3a4:	4a1d      	ldr	r2, [pc, #116]	@ (3401d41c <_free_r+0x90>)
3401d3a6:	6813      	ldr	r3, [r2, #0]
3401d3a8:	b933      	cbnz	r3, 3401d3b8 <_free_r+0x2c>
3401d3aa:	6063      	str	r3, [r4, #4]
3401d3ac:	6014      	str	r4, [r2, #0]
3401d3ae:	4628      	mov	r0, r5
3401d3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401d3b4:	f7fe b83e 	b.w	3401b434 <__malloc_unlock>
3401d3b8:	42a3      	cmp	r3, r4
3401d3ba:	d908      	bls.n	3401d3ce <_free_r+0x42>
3401d3bc:	6820      	ldr	r0, [r4, #0]
3401d3be:	1821      	adds	r1, r4, r0
3401d3c0:	428b      	cmp	r3, r1
3401d3c2:	bf01      	itttt	eq
3401d3c4:	6819      	ldreq	r1, [r3, #0]
3401d3c6:	685b      	ldreq	r3, [r3, #4]
3401d3c8:	1809      	addeq	r1, r1, r0
3401d3ca:	6021      	streq	r1, [r4, #0]
3401d3cc:	e7ed      	b.n	3401d3aa <_free_r+0x1e>
3401d3ce:	461a      	mov	r2, r3
3401d3d0:	685b      	ldr	r3, [r3, #4]
3401d3d2:	b10b      	cbz	r3, 3401d3d8 <_free_r+0x4c>
3401d3d4:	42a3      	cmp	r3, r4
3401d3d6:	d9fa      	bls.n	3401d3ce <_free_r+0x42>
3401d3d8:	6811      	ldr	r1, [r2, #0]
3401d3da:	1850      	adds	r0, r2, r1
3401d3dc:	42a0      	cmp	r0, r4
3401d3de:	d10b      	bne.n	3401d3f8 <_free_r+0x6c>
3401d3e0:	6820      	ldr	r0, [r4, #0]
3401d3e2:	4401      	add	r1, r0
3401d3e4:	1850      	adds	r0, r2, r1
3401d3e6:	6011      	str	r1, [r2, #0]
3401d3e8:	4283      	cmp	r3, r0
3401d3ea:	d1e0      	bne.n	3401d3ae <_free_r+0x22>
3401d3ec:	6818      	ldr	r0, [r3, #0]
3401d3ee:	685b      	ldr	r3, [r3, #4]
3401d3f0:	4408      	add	r0, r1
3401d3f2:	6053      	str	r3, [r2, #4]
3401d3f4:	6010      	str	r0, [r2, #0]
3401d3f6:	e7da      	b.n	3401d3ae <_free_r+0x22>
3401d3f8:	d902      	bls.n	3401d400 <_free_r+0x74>
3401d3fa:	230c      	movs	r3, #12
3401d3fc:	602b      	str	r3, [r5, #0]
3401d3fe:	e7d6      	b.n	3401d3ae <_free_r+0x22>
3401d400:	6820      	ldr	r0, [r4, #0]
3401d402:	1821      	adds	r1, r4, r0
3401d404:	428b      	cmp	r3, r1
3401d406:	bf02      	ittt	eq
3401d408:	6819      	ldreq	r1, [r3, #0]
3401d40a:	685b      	ldreq	r3, [r3, #4]
3401d40c:	1809      	addeq	r1, r1, r0
3401d40e:	6063      	str	r3, [r4, #4]
3401d410:	bf08      	it	eq
3401d412:	6021      	streq	r1, [r4, #0]
3401d414:	6054      	str	r4, [r2, #4]
3401d416:	e7ca      	b.n	3401d3ae <_free_r+0x22>
3401d418:	bd38      	pop	{r3, r4, r5, pc}
3401d41a:	bf00      	nop
3401d41c:	34020d54 	.word	0x34020d54

3401d420 <_Balloc>:
3401d420:	b570      	push	{r4, r5, r6, lr}
3401d422:	69c6      	ldr	r6, [r0, #28]
3401d424:	4604      	mov	r4, r0
3401d426:	460d      	mov	r5, r1
3401d428:	b976      	cbnz	r6, 3401d448 <_Balloc+0x28>
3401d42a:	2010      	movs	r0, #16
3401d42c:	f7fd ff52 	bl	3401b2d4 <malloc>
3401d430:	4602      	mov	r2, r0
3401d432:	61e0      	str	r0, [r4, #28]
3401d434:	b920      	cbnz	r0, 3401d440 <_Balloc+0x20>
3401d436:	4b18      	ldr	r3, [pc, #96]	@ (3401d498 <_Balloc+0x78>)
3401d438:	216b      	movs	r1, #107	@ 0x6b
3401d43a:	4818      	ldr	r0, [pc, #96]	@ (3401d49c <_Balloc+0x7c>)
3401d43c:	f7fd ff2c 	bl	3401b298 <__assert_func>
3401d440:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401d444:	6006      	str	r6, [r0, #0]
3401d446:	60c6      	str	r6, [r0, #12]
3401d448:	69e6      	ldr	r6, [r4, #28]
3401d44a:	68f3      	ldr	r3, [r6, #12]
3401d44c:	b183      	cbz	r3, 3401d470 <_Balloc+0x50>
3401d44e:	69e3      	ldr	r3, [r4, #28]
3401d450:	68db      	ldr	r3, [r3, #12]
3401d452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3401d456:	b9b8      	cbnz	r0, 3401d488 <_Balloc+0x68>
3401d458:	2101      	movs	r1, #1
3401d45a:	4620      	mov	r0, r4
3401d45c:	fa01 f605 	lsl.w	r6, r1, r5
3401d460:	1d72      	adds	r2, r6, #5
3401d462:	0092      	lsls	r2, r2, #2
3401d464:	f000 fd68 	bl	3401df38 <_calloc_r>
3401d468:	b160      	cbz	r0, 3401d484 <_Balloc+0x64>
3401d46a:	e9c0 5601 	strd	r5, r6, [r0, #4]
3401d46e:	e00e      	b.n	3401d48e <_Balloc+0x6e>
3401d470:	2221      	movs	r2, #33	@ 0x21
3401d472:	2104      	movs	r1, #4
3401d474:	4620      	mov	r0, r4
3401d476:	f000 fd5f 	bl	3401df38 <_calloc_r>
3401d47a:	69e3      	ldr	r3, [r4, #28]
3401d47c:	60f0      	str	r0, [r6, #12]
3401d47e:	68db      	ldr	r3, [r3, #12]
3401d480:	2b00      	cmp	r3, #0
3401d482:	d1e4      	bne.n	3401d44e <_Balloc+0x2e>
3401d484:	2000      	movs	r0, #0
3401d486:	bd70      	pop	{r4, r5, r6, pc}
3401d488:	6802      	ldr	r2, [r0, #0]
3401d48a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3401d48e:	2300      	movs	r3, #0
3401d490:	e9c0 3303 	strd	r3, r3, [r0, #12]
3401d494:	e7f7      	b.n	3401d486 <_Balloc+0x66>
3401d496:	bf00      	nop
3401d498:	340202b1 	.word	0x340202b1
3401d49c:	34020331 	.word	0x34020331

3401d4a0 <_Bfree>:
3401d4a0:	b570      	push	{r4, r5, r6, lr}
3401d4a2:	69c6      	ldr	r6, [r0, #28]
3401d4a4:	4605      	mov	r5, r0
3401d4a6:	460c      	mov	r4, r1
3401d4a8:	b976      	cbnz	r6, 3401d4c8 <_Bfree+0x28>
3401d4aa:	2010      	movs	r0, #16
3401d4ac:	f7fd ff12 	bl	3401b2d4 <malloc>
3401d4b0:	4602      	mov	r2, r0
3401d4b2:	61e8      	str	r0, [r5, #28]
3401d4b4:	b920      	cbnz	r0, 3401d4c0 <_Bfree+0x20>
3401d4b6:	4b09      	ldr	r3, [pc, #36]	@ (3401d4dc <_Bfree+0x3c>)
3401d4b8:	218f      	movs	r1, #143	@ 0x8f
3401d4ba:	4809      	ldr	r0, [pc, #36]	@ (3401d4e0 <_Bfree+0x40>)
3401d4bc:	f7fd feec 	bl	3401b298 <__assert_func>
3401d4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401d4c4:	6006      	str	r6, [r0, #0]
3401d4c6:	60c6      	str	r6, [r0, #12]
3401d4c8:	b13c      	cbz	r4, 3401d4da <_Bfree+0x3a>
3401d4ca:	69eb      	ldr	r3, [r5, #28]
3401d4cc:	6862      	ldr	r2, [r4, #4]
3401d4ce:	68db      	ldr	r3, [r3, #12]
3401d4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3401d4d4:	6021      	str	r1, [r4, #0]
3401d4d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3401d4da:	bd70      	pop	{r4, r5, r6, pc}
3401d4dc:	340202b1 	.word	0x340202b1
3401d4e0:	34020331 	.word	0x34020331

3401d4e4 <__multadd>:
3401d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401d4e8:	f101 0c14 	add.w	ip, r1, #20
3401d4ec:	4607      	mov	r7, r0
3401d4ee:	460c      	mov	r4, r1
3401d4f0:	461e      	mov	r6, r3
3401d4f2:	690d      	ldr	r5, [r1, #16]
3401d4f4:	2000      	movs	r0, #0
3401d4f6:	f8dc 3000 	ldr.w	r3, [ip]
3401d4fa:	3001      	adds	r0, #1
3401d4fc:	b299      	uxth	r1, r3
3401d4fe:	4285      	cmp	r5, r0
3401d500:	fb02 6101 	mla	r1, r2, r1, r6
3401d504:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401d508:	ea4f 4311 	mov.w	r3, r1, lsr #16
3401d50c:	b289      	uxth	r1, r1
3401d50e:	fb02 3306 	mla	r3, r2, r6, r3
3401d512:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3401d516:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401d51a:	f84c 1b04 	str.w	r1, [ip], #4
3401d51e:	dcea      	bgt.n	3401d4f6 <__multadd+0x12>
3401d520:	b30e      	cbz	r6, 3401d566 <__multadd+0x82>
3401d522:	68a3      	ldr	r3, [r4, #8]
3401d524:	42ab      	cmp	r3, r5
3401d526:	dc19      	bgt.n	3401d55c <__multadd+0x78>
3401d528:	6861      	ldr	r1, [r4, #4]
3401d52a:	4638      	mov	r0, r7
3401d52c:	3101      	adds	r1, #1
3401d52e:	f7ff ff77 	bl	3401d420 <_Balloc>
3401d532:	4680      	mov	r8, r0
3401d534:	b928      	cbnz	r0, 3401d542 <__multadd+0x5e>
3401d536:	4602      	mov	r2, r0
3401d538:	4b0c      	ldr	r3, [pc, #48]	@ (3401d56c <__multadd+0x88>)
3401d53a:	21ba      	movs	r1, #186	@ 0xba
3401d53c:	480c      	ldr	r0, [pc, #48]	@ (3401d570 <__multadd+0x8c>)
3401d53e:	f7fd feab 	bl	3401b298 <__assert_func>
3401d542:	6922      	ldr	r2, [r4, #16]
3401d544:	f104 010c 	add.w	r1, r4, #12
3401d548:	300c      	adds	r0, #12
3401d54a:	3202      	adds	r2, #2
3401d54c:	0092      	lsls	r2, r2, #2
3401d54e:	f7ff f91c 	bl	3401c78a <memcpy>
3401d552:	4621      	mov	r1, r4
3401d554:	4644      	mov	r4, r8
3401d556:	4638      	mov	r0, r7
3401d558:	f7ff ffa2 	bl	3401d4a0 <_Bfree>
3401d55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3401d560:	3501      	adds	r5, #1
3401d562:	615e      	str	r6, [r3, #20]
3401d564:	6125      	str	r5, [r4, #16]
3401d566:	4620      	mov	r0, r4
3401d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401d56c:	34020320 	.word	0x34020320
3401d570:	34020331 	.word	0x34020331

3401d574 <__hi0bits>:
3401d574:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3401d578:	4603      	mov	r3, r0
3401d57a:	bf36      	itet	cc
3401d57c:	0403      	lslcc	r3, r0, #16
3401d57e:	2000      	movcs	r0, #0
3401d580:	2010      	movcc	r0, #16
3401d582:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401d586:	bf3c      	itt	cc
3401d588:	021b      	lslcc	r3, r3, #8
3401d58a:	3008      	addcc	r0, #8
3401d58c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401d590:	bf3c      	itt	cc
3401d592:	011b      	lslcc	r3, r3, #4
3401d594:	3004      	addcc	r0, #4
3401d596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401d59a:	bf3c      	itt	cc
3401d59c:	009b      	lslcc	r3, r3, #2
3401d59e:	3002      	addcc	r0, #2
3401d5a0:	2b00      	cmp	r3, #0
3401d5a2:	db05      	blt.n	3401d5b0 <__hi0bits+0x3c>
3401d5a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3401d5a8:	f100 0001 	add.w	r0, r0, #1
3401d5ac:	bf08      	it	eq
3401d5ae:	2020      	moveq	r0, #32
3401d5b0:	4770      	bx	lr

3401d5b2 <__lo0bits>:
3401d5b2:	6803      	ldr	r3, [r0, #0]
3401d5b4:	4602      	mov	r2, r0
3401d5b6:	f013 0007 	ands.w	r0, r3, #7
3401d5ba:	d00b      	beq.n	3401d5d4 <__lo0bits+0x22>
3401d5bc:	07d9      	lsls	r1, r3, #31
3401d5be:	d421      	bmi.n	3401d604 <__lo0bits+0x52>
3401d5c0:	0798      	lsls	r0, r3, #30
3401d5c2:	bf47      	ittee	mi
3401d5c4:	085b      	lsrmi	r3, r3, #1
3401d5c6:	2001      	movmi	r0, #1
3401d5c8:	089b      	lsrpl	r3, r3, #2
3401d5ca:	2002      	movpl	r0, #2
3401d5cc:	bf4c      	ite	mi
3401d5ce:	6013      	strmi	r3, [r2, #0]
3401d5d0:	6013      	strpl	r3, [r2, #0]
3401d5d2:	4770      	bx	lr
3401d5d4:	b299      	uxth	r1, r3
3401d5d6:	b909      	cbnz	r1, 3401d5dc <__lo0bits+0x2a>
3401d5d8:	0c1b      	lsrs	r3, r3, #16
3401d5da:	2010      	movs	r0, #16
3401d5dc:	b2d9      	uxtb	r1, r3
3401d5de:	b909      	cbnz	r1, 3401d5e4 <__lo0bits+0x32>
3401d5e0:	3008      	adds	r0, #8
3401d5e2:	0a1b      	lsrs	r3, r3, #8
3401d5e4:	0719      	lsls	r1, r3, #28
3401d5e6:	bf04      	itt	eq
3401d5e8:	091b      	lsreq	r3, r3, #4
3401d5ea:	3004      	addeq	r0, #4
3401d5ec:	0799      	lsls	r1, r3, #30
3401d5ee:	bf04      	itt	eq
3401d5f0:	089b      	lsreq	r3, r3, #2
3401d5f2:	3002      	addeq	r0, #2
3401d5f4:	07d9      	lsls	r1, r3, #31
3401d5f6:	d403      	bmi.n	3401d600 <__lo0bits+0x4e>
3401d5f8:	085b      	lsrs	r3, r3, #1
3401d5fa:	f100 0001 	add.w	r0, r0, #1
3401d5fe:	d003      	beq.n	3401d608 <__lo0bits+0x56>
3401d600:	6013      	str	r3, [r2, #0]
3401d602:	4770      	bx	lr
3401d604:	2000      	movs	r0, #0
3401d606:	4770      	bx	lr
3401d608:	2020      	movs	r0, #32
3401d60a:	4770      	bx	lr

3401d60c <__i2b>:
3401d60c:	b510      	push	{r4, lr}
3401d60e:	460c      	mov	r4, r1
3401d610:	2101      	movs	r1, #1
3401d612:	f7ff ff05 	bl	3401d420 <_Balloc>
3401d616:	4602      	mov	r2, r0
3401d618:	b928      	cbnz	r0, 3401d626 <__i2b+0x1a>
3401d61a:	4b05      	ldr	r3, [pc, #20]	@ (3401d630 <__i2b+0x24>)
3401d61c:	f240 1145 	movw	r1, #325	@ 0x145
3401d620:	4804      	ldr	r0, [pc, #16]	@ (3401d634 <__i2b+0x28>)
3401d622:	f7fd fe39 	bl	3401b298 <__assert_func>
3401d626:	2301      	movs	r3, #1
3401d628:	6144      	str	r4, [r0, #20]
3401d62a:	6103      	str	r3, [r0, #16]
3401d62c:	bd10      	pop	{r4, pc}
3401d62e:	bf00      	nop
3401d630:	34020320 	.word	0x34020320
3401d634:	34020331 	.word	0x34020331

3401d638 <__multiply>:
3401d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d63c:	4617      	mov	r7, r2
3401d63e:	690a      	ldr	r2, [r1, #16]
3401d640:	4689      	mov	r9, r1
3401d642:	b085      	sub	sp, #20
3401d644:	693b      	ldr	r3, [r7, #16]
3401d646:	429a      	cmp	r2, r3
3401d648:	bfa2      	ittt	ge
3401d64a:	463b      	movge	r3, r7
3401d64c:	460f      	movge	r7, r1
3401d64e:	4699      	movge	r9, r3
3401d650:	693d      	ldr	r5, [r7, #16]
3401d652:	68bb      	ldr	r3, [r7, #8]
3401d654:	f8d9 a010 	ldr.w	sl, [r9, #16]
3401d658:	6879      	ldr	r1, [r7, #4]
3401d65a:	eb05 060a 	add.w	r6, r5, sl
3401d65e:	42b3      	cmp	r3, r6
3401d660:	bfb8      	it	lt
3401d662:	3101      	addlt	r1, #1
3401d664:	f7ff fedc 	bl	3401d420 <_Balloc>
3401d668:	b930      	cbnz	r0, 3401d678 <__multiply+0x40>
3401d66a:	4602      	mov	r2, r0
3401d66c:	4b42      	ldr	r3, [pc, #264]	@ (3401d778 <__multiply+0x140>)
3401d66e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401d672:	4842      	ldr	r0, [pc, #264]	@ (3401d77c <__multiply+0x144>)
3401d674:	f7fd fe10 	bl	3401b298 <__assert_func>
3401d678:	f100 0414 	add.w	r4, r0, #20
3401d67c:	2200      	movs	r2, #0
3401d67e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3401d682:	4623      	mov	r3, r4
3401d684:	4573      	cmp	r3, lr
3401d686:	d320      	bcc.n	3401d6ca <__multiply+0x92>
3401d688:	f107 0814 	add.w	r8, r7, #20
3401d68c:	f109 0114 	add.w	r1, r9, #20
3401d690:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3401d694:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3401d698:	9302      	str	r3, [sp, #8]
3401d69a:	1beb      	subs	r3, r5, r7
3401d69c:	3715      	adds	r7, #21
3401d69e:	3b15      	subs	r3, #21
3401d6a0:	f023 0303 	bic.w	r3, r3, #3
3401d6a4:	3304      	adds	r3, #4
3401d6a6:	42bd      	cmp	r5, r7
3401d6a8:	bf38      	it	cc
3401d6aa:	2304      	movcc	r3, #4
3401d6ac:	9301      	str	r3, [sp, #4]
3401d6ae:	9b02      	ldr	r3, [sp, #8]
3401d6b0:	9103      	str	r1, [sp, #12]
3401d6b2:	428b      	cmp	r3, r1
3401d6b4:	d80c      	bhi.n	3401d6d0 <__multiply+0x98>
3401d6b6:	2e00      	cmp	r6, #0
3401d6b8:	dd03      	ble.n	3401d6c2 <__multiply+0x8a>
3401d6ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3401d6be:	2b00      	cmp	r3, #0
3401d6c0:	d057      	beq.n	3401d772 <__multiply+0x13a>
3401d6c2:	6106      	str	r6, [r0, #16]
3401d6c4:	b005      	add	sp, #20
3401d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d6ca:	f843 2b04 	str.w	r2, [r3], #4
3401d6ce:	e7d9      	b.n	3401d684 <__multiply+0x4c>
3401d6d0:	f8b1 a000 	ldrh.w	sl, [r1]
3401d6d4:	f1ba 0f00 	cmp.w	sl, #0
3401d6d8:	d021      	beq.n	3401d71e <__multiply+0xe6>
3401d6da:	46c4      	mov	ip, r8
3401d6dc:	46a1      	mov	r9, r4
3401d6de:	2700      	movs	r7, #0
3401d6e0:	f85c 2b04 	ldr.w	r2, [ip], #4
3401d6e4:	f8d9 3000 	ldr.w	r3, [r9]
3401d6e8:	fa1f fb82 	uxth.w	fp, r2
3401d6ec:	4565      	cmp	r5, ip
3401d6ee:	b29b      	uxth	r3, r3
3401d6f0:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401d6f4:	fb0a 330b 	mla	r3, sl, fp, r3
3401d6f8:	443b      	add	r3, r7
3401d6fa:	f8d9 7000 	ldr.w	r7, [r9]
3401d6fe:	ea4f 4717 	mov.w	r7, r7, lsr #16
3401d702:	fb0a 7202 	mla	r2, sl, r2, r7
3401d706:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3401d70a:	b29b      	uxth	r3, r3
3401d70c:	ea4f 4712 	mov.w	r7, r2, lsr #16
3401d710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401d714:	f849 3b04 	str.w	r3, [r9], #4
3401d718:	d8e2      	bhi.n	3401d6e0 <__multiply+0xa8>
3401d71a:	9b01      	ldr	r3, [sp, #4]
3401d71c:	50e7      	str	r7, [r4, r3]
3401d71e:	9b03      	ldr	r3, [sp, #12]
3401d720:	3104      	adds	r1, #4
3401d722:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3401d726:	f1b9 0f00 	cmp.w	r9, #0
3401d72a:	d020      	beq.n	3401d76e <__multiply+0x136>
3401d72c:	6823      	ldr	r3, [r4, #0]
3401d72e:	4647      	mov	r7, r8
3401d730:	46a4      	mov	ip, r4
3401d732:	f04f 0a00 	mov.w	sl, #0
3401d736:	f8b7 b000 	ldrh.w	fp, [r7]
3401d73a:	b29b      	uxth	r3, r3
3401d73c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3401d740:	fb09 220b 	mla	r2, r9, fp, r2
3401d744:	4452      	add	r2, sl
3401d746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401d74a:	f84c 3b04 	str.w	r3, [ip], #4
3401d74e:	f857 3b04 	ldr.w	r3, [r7], #4
3401d752:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401d756:	f8bc 3000 	ldrh.w	r3, [ip]
3401d75a:	42bd      	cmp	r5, r7
3401d75c:	fb09 330a 	mla	r3, r9, sl, r3
3401d760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3401d764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401d768:	d8e5      	bhi.n	3401d736 <__multiply+0xfe>
3401d76a:	9a01      	ldr	r2, [sp, #4]
3401d76c:	50a3      	str	r3, [r4, r2]
3401d76e:	3404      	adds	r4, #4
3401d770:	e79d      	b.n	3401d6ae <__multiply+0x76>
3401d772:	3e01      	subs	r6, #1
3401d774:	e79f      	b.n	3401d6b6 <__multiply+0x7e>
3401d776:	bf00      	nop
3401d778:	34020320 	.word	0x34020320
3401d77c:	34020331 	.word	0x34020331

3401d780 <__pow5mult>:
3401d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401d784:	4615      	mov	r5, r2
3401d786:	f012 0203 	ands.w	r2, r2, #3
3401d78a:	4607      	mov	r7, r0
3401d78c:	460e      	mov	r6, r1
3401d78e:	d007      	beq.n	3401d7a0 <__pow5mult+0x20>
3401d790:	3a01      	subs	r2, #1
3401d792:	4c25      	ldr	r4, [pc, #148]	@ (3401d828 <__pow5mult+0xa8>)
3401d794:	2300      	movs	r3, #0
3401d796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3401d79a:	f7ff fea3 	bl	3401d4e4 <__multadd>
3401d79e:	4606      	mov	r6, r0
3401d7a0:	10ad      	asrs	r5, r5, #2
3401d7a2:	d03d      	beq.n	3401d820 <__pow5mult+0xa0>
3401d7a4:	69fc      	ldr	r4, [r7, #28]
3401d7a6:	b97c      	cbnz	r4, 3401d7c8 <__pow5mult+0x48>
3401d7a8:	2010      	movs	r0, #16
3401d7aa:	f7fd fd93 	bl	3401b2d4 <malloc>
3401d7ae:	4602      	mov	r2, r0
3401d7b0:	61f8      	str	r0, [r7, #28]
3401d7b2:	b928      	cbnz	r0, 3401d7c0 <__pow5mult+0x40>
3401d7b4:	4b1d      	ldr	r3, [pc, #116]	@ (3401d82c <__pow5mult+0xac>)
3401d7b6:	f240 11b3 	movw	r1, #435	@ 0x1b3
3401d7ba:	481d      	ldr	r0, [pc, #116]	@ (3401d830 <__pow5mult+0xb0>)
3401d7bc:	f7fd fd6c 	bl	3401b298 <__assert_func>
3401d7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
3401d7c4:	6004      	str	r4, [r0, #0]
3401d7c6:	60c4      	str	r4, [r0, #12]
3401d7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
3401d7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
3401d7d0:	b94c      	cbnz	r4, 3401d7e6 <__pow5mult+0x66>
3401d7d2:	f240 2171 	movw	r1, #625	@ 0x271
3401d7d6:	4638      	mov	r0, r7
3401d7d8:	f7ff ff18 	bl	3401d60c <__i2b>
3401d7dc:	2300      	movs	r3, #0
3401d7de:	4604      	mov	r4, r0
3401d7e0:	f8c8 0008 	str.w	r0, [r8, #8]
3401d7e4:	6003      	str	r3, [r0, #0]
3401d7e6:	f04f 0900 	mov.w	r9, #0
3401d7ea:	07eb      	lsls	r3, r5, #31
3401d7ec:	d50a      	bpl.n	3401d804 <__pow5mult+0x84>
3401d7ee:	4631      	mov	r1, r6
3401d7f0:	4622      	mov	r2, r4
3401d7f2:	4638      	mov	r0, r7
3401d7f4:	f7ff ff20 	bl	3401d638 <__multiply>
3401d7f8:	4680      	mov	r8, r0
3401d7fa:	4631      	mov	r1, r6
3401d7fc:	4638      	mov	r0, r7
3401d7fe:	4646      	mov	r6, r8
3401d800:	f7ff fe4e 	bl	3401d4a0 <_Bfree>
3401d804:	106d      	asrs	r5, r5, #1
3401d806:	d00b      	beq.n	3401d820 <__pow5mult+0xa0>
3401d808:	6820      	ldr	r0, [r4, #0]
3401d80a:	b938      	cbnz	r0, 3401d81c <__pow5mult+0x9c>
3401d80c:	4622      	mov	r2, r4
3401d80e:	4621      	mov	r1, r4
3401d810:	4638      	mov	r0, r7
3401d812:	f7ff ff11 	bl	3401d638 <__multiply>
3401d816:	6020      	str	r0, [r4, #0]
3401d818:	f8c0 9000 	str.w	r9, [r0]
3401d81c:	4604      	mov	r4, r0
3401d81e:	e7e4      	b.n	3401d7ea <__pow5mult+0x6a>
3401d820:	4630      	mov	r0, r6
3401d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401d826:	bf00      	nop
3401d828:	340203a8 	.word	0x340203a8
3401d82c:	340202b1 	.word	0x340202b1
3401d830:	34020331 	.word	0x34020331

3401d834 <__lshift>:
3401d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401d838:	460c      	mov	r4, r1
3401d83a:	4607      	mov	r7, r0
3401d83c:	4691      	mov	r9, r2
3401d83e:	ea4f 1a62 	mov.w	sl, r2, asr #5
3401d842:	6923      	ldr	r3, [r4, #16]
3401d844:	6849      	ldr	r1, [r1, #4]
3401d846:	eb03 1862 	add.w	r8, r3, r2, asr #5
3401d84a:	68a3      	ldr	r3, [r4, #8]
3401d84c:	f108 0601 	add.w	r6, r8, #1
3401d850:	42b3      	cmp	r3, r6
3401d852:	db0b      	blt.n	3401d86c <__lshift+0x38>
3401d854:	4638      	mov	r0, r7
3401d856:	f7ff fde3 	bl	3401d420 <_Balloc>
3401d85a:	4605      	mov	r5, r0
3401d85c:	b948      	cbnz	r0, 3401d872 <__lshift+0x3e>
3401d85e:	4602      	mov	r2, r0
3401d860:	4b28      	ldr	r3, [pc, #160]	@ (3401d904 <__lshift+0xd0>)
3401d862:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3401d866:	4828      	ldr	r0, [pc, #160]	@ (3401d908 <__lshift+0xd4>)
3401d868:	f7fd fd16 	bl	3401b298 <__assert_func>
3401d86c:	3101      	adds	r1, #1
3401d86e:	005b      	lsls	r3, r3, #1
3401d870:	e7ee      	b.n	3401d850 <__lshift+0x1c>
3401d872:	2300      	movs	r3, #0
3401d874:	f100 0114 	add.w	r1, r0, #20
3401d878:	f100 0210 	add.w	r2, r0, #16
3401d87c:	4618      	mov	r0, r3
3401d87e:	4553      	cmp	r3, sl
3401d880:	db33      	blt.n	3401d8ea <__lshift+0xb6>
3401d882:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3401d886:	f104 0314 	add.w	r3, r4, #20
3401d88a:	6920      	ldr	r0, [r4, #16]
3401d88c:	f019 091f 	ands.w	r9, r9, #31
3401d890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3401d894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3401d898:	d02b      	beq.n	3401d8f2 <__lshift+0xbe>
3401d89a:	f1c9 0e20 	rsb	lr, r9, #32
3401d89e:	468a      	mov	sl, r1
3401d8a0:	2200      	movs	r2, #0
3401d8a2:	6818      	ldr	r0, [r3, #0]
3401d8a4:	fa00 f009 	lsl.w	r0, r0, r9
3401d8a8:	4310      	orrs	r0, r2
3401d8aa:	f84a 0b04 	str.w	r0, [sl], #4
3401d8ae:	f853 2b04 	ldr.w	r2, [r3], #4
3401d8b2:	459c      	cmp	ip, r3
3401d8b4:	fa22 f20e 	lsr.w	r2, r2, lr
3401d8b8:	d8f3      	bhi.n	3401d8a2 <__lshift+0x6e>
3401d8ba:	ebac 0304 	sub.w	r3, ip, r4
3401d8be:	f104 0015 	add.w	r0, r4, #21
3401d8c2:	3b15      	subs	r3, #21
3401d8c4:	f023 0303 	bic.w	r3, r3, #3
3401d8c8:	3304      	adds	r3, #4
3401d8ca:	4560      	cmp	r0, ip
3401d8cc:	bf88      	it	hi
3401d8ce:	2304      	movhi	r3, #4
3401d8d0:	50ca      	str	r2, [r1, r3]
3401d8d2:	b10a      	cbz	r2, 3401d8d8 <__lshift+0xa4>
3401d8d4:	f108 0602 	add.w	r6, r8, #2
3401d8d8:	3e01      	subs	r6, #1
3401d8da:	4638      	mov	r0, r7
3401d8dc:	4621      	mov	r1, r4
3401d8de:	612e      	str	r6, [r5, #16]
3401d8e0:	f7ff fdde 	bl	3401d4a0 <_Bfree>
3401d8e4:	4628      	mov	r0, r5
3401d8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401d8ea:	3301      	adds	r3, #1
3401d8ec:	f842 0f04 	str.w	r0, [r2, #4]!
3401d8f0:	e7c5      	b.n	3401d87e <__lshift+0x4a>
3401d8f2:	3904      	subs	r1, #4
3401d8f4:	f853 2b04 	ldr.w	r2, [r3], #4
3401d8f8:	459c      	cmp	ip, r3
3401d8fa:	f841 2f04 	str.w	r2, [r1, #4]!
3401d8fe:	d8f9      	bhi.n	3401d8f4 <__lshift+0xc0>
3401d900:	e7ea      	b.n	3401d8d8 <__lshift+0xa4>
3401d902:	bf00      	nop
3401d904:	34020320 	.word	0x34020320
3401d908:	34020331 	.word	0x34020331

3401d90c <__mcmp>:
3401d90c:	4603      	mov	r3, r0
3401d90e:	690a      	ldr	r2, [r1, #16]
3401d910:	6900      	ldr	r0, [r0, #16]
3401d912:	1a80      	subs	r0, r0, r2
3401d914:	b530      	push	{r4, r5, lr}
3401d916:	d10e      	bne.n	3401d936 <__mcmp+0x2a>
3401d918:	3314      	adds	r3, #20
3401d91a:	3114      	adds	r1, #20
3401d91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3401d920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3401d924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3401d928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3401d92c:	4295      	cmp	r5, r2
3401d92e:	d003      	beq.n	3401d938 <__mcmp+0x2c>
3401d930:	d205      	bcs.n	3401d93e <__mcmp+0x32>
3401d932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401d936:	bd30      	pop	{r4, r5, pc}
3401d938:	42a3      	cmp	r3, r4
3401d93a:	d3f3      	bcc.n	3401d924 <__mcmp+0x18>
3401d93c:	e7fb      	b.n	3401d936 <__mcmp+0x2a>
3401d93e:	2001      	movs	r0, #1
3401d940:	e7f9      	b.n	3401d936 <__mcmp+0x2a>
	...

3401d944 <__mdiff>:
3401d944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d948:	4689      	mov	r9, r1
3401d94a:	4606      	mov	r6, r0
3401d94c:	4611      	mov	r1, r2
3401d94e:	4614      	mov	r4, r2
3401d950:	4648      	mov	r0, r9
3401d952:	f7ff ffdb 	bl	3401d90c <__mcmp>
3401d956:	1e05      	subs	r5, r0, #0
3401d958:	d112      	bne.n	3401d980 <__mdiff+0x3c>
3401d95a:	4629      	mov	r1, r5
3401d95c:	4630      	mov	r0, r6
3401d95e:	f7ff fd5f 	bl	3401d420 <_Balloc>
3401d962:	4602      	mov	r2, r0
3401d964:	b928      	cbnz	r0, 3401d972 <__mdiff+0x2e>
3401d966:	4b41      	ldr	r3, [pc, #260]	@ (3401da6c <__mdiff+0x128>)
3401d968:	f240 2137 	movw	r1, #567	@ 0x237
3401d96c:	4840      	ldr	r0, [pc, #256]	@ (3401da70 <__mdiff+0x12c>)
3401d96e:	f7fd fc93 	bl	3401b298 <__assert_func>
3401d972:	2301      	movs	r3, #1
3401d974:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401d978:	4610      	mov	r0, r2
3401d97a:	b003      	add	sp, #12
3401d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401d980:	bfbc      	itt	lt
3401d982:	464b      	movlt	r3, r9
3401d984:	46a1      	movlt	r9, r4
3401d986:	4630      	mov	r0, r6
3401d988:	bfb8      	it	lt
3401d98a:	2501      	movlt	r5, #1
3401d98c:	f8d9 1004 	ldr.w	r1, [r9, #4]
3401d990:	bfb4      	ite	lt
3401d992:	461c      	movlt	r4, r3
3401d994:	2500      	movge	r5, #0
3401d996:	f7ff fd43 	bl	3401d420 <_Balloc>
3401d99a:	4602      	mov	r2, r0
3401d99c:	b918      	cbnz	r0, 3401d9a6 <__mdiff+0x62>
3401d99e:	4b33      	ldr	r3, [pc, #204]	@ (3401da6c <__mdiff+0x128>)
3401d9a0:	f240 2145 	movw	r1, #581	@ 0x245
3401d9a4:	e7e2      	b.n	3401d96c <__mdiff+0x28>
3401d9a6:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401d9aa:	f104 0e14 	add.w	lr, r4, #20
3401d9ae:	6926      	ldr	r6, [r4, #16]
3401d9b0:	f100 0b14 	add.w	fp, r0, #20
3401d9b4:	60c5      	str	r5, [r0, #12]
3401d9b6:	f109 0514 	add.w	r5, r9, #20
3401d9ba:	f109 0310 	add.w	r3, r9, #16
3401d9be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401d9c2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401d9c6:	46d9      	mov	r9, fp
3401d9c8:	f04f 0c00 	mov.w	ip, #0
3401d9cc:	9301      	str	r3, [sp, #4]
3401d9ce:	9b01      	ldr	r3, [sp, #4]
3401d9d0:	f85e 0b04 	ldr.w	r0, [lr], #4
3401d9d4:	f853 af04 	ldr.w	sl, [r3, #4]!
3401d9d8:	4576      	cmp	r6, lr
3401d9da:	9301      	str	r3, [sp, #4]
3401d9dc:	fa1f f38a 	uxth.w	r3, sl
3401d9e0:	4619      	mov	r1, r3
3401d9e2:	b283      	uxth	r3, r0
3401d9e4:	ea4f 4010 	mov.w	r0, r0, lsr #16
3401d9e8:	eba1 0303 	sub.w	r3, r1, r3
3401d9ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3401d9f0:	4463      	add	r3, ip
3401d9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401d9f6:	b29b      	uxth	r3, r3
3401d9f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401d9fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401da00:	f849 3b04 	str.w	r3, [r9], #4
3401da04:	d8e3      	bhi.n	3401d9ce <__mdiff+0x8a>
3401da06:	1b33      	subs	r3, r6, r4
3401da08:	3415      	adds	r4, #21
3401da0a:	3b15      	subs	r3, #21
3401da0c:	f023 0303 	bic.w	r3, r3, #3
3401da10:	3304      	adds	r3, #4
3401da12:	42a6      	cmp	r6, r4
3401da14:	bf38      	it	cc
3401da16:	2304      	movcc	r3, #4
3401da18:	441d      	add	r5, r3
3401da1a:	445b      	add	r3, fp
3401da1c:	462c      	mov	r4, r5
3401da1e:	461e      	mov	r6, r3
3401da20:	4544      	cmp	r4, r8
3401da22:	d30e      	bcc.n	3401da42 <__mdiff+0xfe>
3401da24:	f108 0103 	add.w	r1, r8, #3
3401da28:	1b49      	subs	r1, r1, r5
3401da2a:	3d03      	subs	r5, #3
3401da2c:	f021 0103 	bic.w	r1, r1, #3
3401da30:	45a8      	cmp	r8, r5
3401da32:	bf38      	it	cc
3401da34:	2100      	movcc	r1, #0
3401da36:	440b      	add	r3, r1
3401da38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3401da3c:	b199      	cbz	r1, 3401da66 <__mdiff+0x122>
3401da3e:	6117      	str	r7, [r2, #16]
3401da40:	e79a      	b.n	3401d978 <__mdiff+0x34>
3401da42:	f854 1b04 	ldr.w	r1, [r4], #4
3401da46:	46e6      	mov	lr, ip
3401da48:	fa1f fc81 	uxth.w	ip, r1
3401da4c:	0c08      	lsrs	r0, r1, #16
3401da4e:	4471      	add	r1, lr
3401da50:	44f4      	add	ip, lr
3401da52:	b289      	uxth	r1, r1
3401da54:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401da58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3401da5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401da60:	f846 1b04 	str.w	r1, [r6], #4
3401da64:	e7dc      	b.n	3401da20 <__mdiff+0xdc>
3401da66:	3f01      	subs	r7, #1
3401da68:	e7e6      	b.n	3401da38 <__mdiff+0xf4>
3401da6a:	bf00      	nop
3401da6c:	34020320 	.word	0x34020320
3401da70:	34020331 	.word	0x34020331

3401da74 <__d2b>:
3401da74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401da78:	460f      	mov	r7, r1
3401da7a:	2101      	movs	r1, #1
3401da7c:	4616      	mov	r6, r2
3401da7e:	ec59 8b10 	vmov	r8, r9, d0
3401da82:	f7ff fccd 	bl	3401d420 <_Balloc>
3401da86:	4604      	mov	r4, r0
3401da88:	b930      	cbnz	r0, 3401da98 <__d2b+0x24>
3401da8a:	4602      	mov	r2, r0
3401da8c:	4b23      	ldr	r3, [pc, #140]	@ (3401db1c <__d2b+0xa8>)
3401da8e:	f240 310f 	movw	r1, #783	@ 0x30f
3401da92:	4823      	ldr	r0, [pc, #140]	@ (3401db20 <__d2b+0xac>)
3401da94:	f7fd fc00 	bl	3401b298 <__assert_func>
3401da98:	f3c9 550a 	ubfx	r5, r9, #20, #11
3401da9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
3401daa0:	b10d      	cbz	r5, 3401daa6 <__d2b+0x32>
3401daa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401daa6:	9301      	str	r3, [sp, #4]
3401daa8:	f1b8 0300 	subs.w	r3, r8, #0
3401daac:	d023      	beq.n	3401daf6 <__d2b+0x82>
3401daae:	4668      	mov	r0, sp
3401dab0:	9300      	str	r3, [sp, #0]
3401dab2:	f7ff fd7e 	bl	3401d5b2 <__lo0bits>
3401dab6:	e9dd 1200 	ldrd	r1, r2, [sp]
3401daba:	b1d0      	cbz	r0, 3401daf2 <__d2b+0x7e>
3401dabc:	f1c0 0320 	rsb	r3, r0, #32
3401dac0:	fa02 f303 	lsl.w	r3, r2, r3
3401dac4:	40c2      	lsrs	r2, r0
3401dac6:	430b      	orrs	r3, r1
3401dac8:	9201      	str	r2, [sp, #4]
3401daca:	6163      	str	r3, [r4, #20]
3401dacc:	9b01      	ldr	r3, [sp, #4]
3401dace:	2b00      	cmp	r3, #0
3401dad0:	61a3      	str	r3, [r4, #24]
3401dad2:	bf0c      	ite	eq
3401dad4:	2201      	moveq	r2, #1
3401dad6:	2202      	movne	r2, #2
3401dad8:	6122      	str	r2, [r4, #16]
3401dada:	b1a5      	cbz	r5, 3401db06 <__d2b+0x92>
3401dadc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3401dae0:	4405      	add	r5, r0
3401dae2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401dae6:	603d      	str	r5, [r7, #0]
3401dae8:	6030      	str	r0, [r6, #0]
3401daea:	4620      	mov	r0, r4
3401daec:	b003      	add	sp, #12
3401daee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401daf2:	6161      	str	r1, [r4, #20]
3401daf4:	e7ea      	b.n	3401dacc <__d2b+0x58>
3401daf6:	a801      	add	r0, sp, #4
3401daf8:	f7ff fd5b 	bl	3401d5b2 <__lo0bits>
3401dafc:	9b01      	ldr	r3, [sp, #4]
3401dafe:	3020      	adds	r0, #32
3401db00:	2201      	movs	r2, #1
3401db02:	6163      	str	r3, [r4, #20]
3401db04:	e7e8      	b.n	3401dad8 <__d2b+0x64>
3401db06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3401db0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401db0e:	6038      	str	r0, [r7, #0]
3401db10:	6918      	ldr	r0, [r3, #16]
3401db12:	f7ff fd2f 	bl	3401d574 <__hi0bits>
3401db16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3401db1a:	e7e5      	b.n	3401dae8 <__d2b+0x74>
3401db1c:	34020320 	.word	0x34020320
3401db20:	34020331 	.word	0x34020331

3401db24 <__sfputc_r>:
3401db24:	6893      	ldr	r3, [r2, #8]
3401db26:	3b01      	subs	r3, #1
3401db28:	2b00      	cmp	r3, #0
3401db2a:	b410      	push	{r4}
3401db2c:	6093      	str	r3, [r2, #8]
3401db2e:	da08      	bge.n	3401db42 <__sfputc_r+0x1e>
3401db30:	6994      	ldr	r4, [r2, #24]
3401db32:	42a3      	cmp	r3, r4
3401db34:	db01      	blt.n	3401db3a <__sfputc_r+0x16>
3401db36:	290a      	cmp	r1, #10
3401db38:	d103      	bne.n	3401db42 <__sfputc_r+0x1e>
3401db3a:	f85d 4b04 	ldr.w	r4, [sp], #4
3401db3e:	f7fe bb00 	b.w	3401c142 <__swbuf_r>
3401db42:	6813      	ldr	r3, [r2, #0]
3401db44:	1c58      	adds	r0, r3, #1
3401db46:	6010      	str	r0, [r2, #0]
3401db48:	4608      	mov	r0, r1
3401db4a:	7019      	strb	r1, [r3, #0]
3401db4c:	f85d 4b04 	ldr.w	r4, [sp], #4
3401db50:	4770      	bx	lr

3401db52 <__sfputs_r>:
3401db52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401db54:	4606      	mov	r6, r0
3401db56:	460f      	mov	r7, r1
3401db58:	4614      	mov	r4, r2
3401db5a:	18d5      	adds	r5, r2, r3
3401db5c:	42ac      	cmp	r4, r5
3401db5e:	d101      	bne.n	3401db64 <__sfputs_r+0x12>
3401db60:	2000      	movs	r0, #0
3401db62:	e007      	b.n	3401db74 <__sfputs_r+0x22>
3401db64:	463a      	mov	r2, r7
3401db66:	f814 1b01 	ldrb.w	r1, [r4], #1
3401db6a:	4630      	mov	r0, r6
3401db6c:	f7ff ffda 	bl	3401db24 <__sfputc_r>
3401db70:	1c43      	adds	r3, r0, #1
3401db72:	d1f3      	bne.n	3401db5c <__sfputs_r+0xa>
3401db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401db78 <_vfiprintf_r>:
3401db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401db7c:	460d      	mov	r5, r1
3401db7e:	b09d      	sub	sp, #116	@ 0x74
3401db80:	4614      	mov	r4, r2
3401db82:	4698      	mov	r8, r3
3401db84:	4606      	mov	r6, r0
3401db86:	b118      	cbz	r0, 3401db90 <_vfiprintf_r+0x18>
3401db88:	6a03      	ldr	r3, [r0, #32]
3401db8a:	b90b      	cbnz	r3, 3401db90 <_vfiprintf_r+0x18>
3401db8c:	f7fe f9de 	bl	3401bf4c <__sinit>
3401db90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401db92:	07d9      	lsls	r1, r3, #31
3401db94:	d405      	bmi.n	3401dba2 <_vfiprintf_r+0x2a>
3401db96:	89ab      	ldrh	r3, [r5, #12]
3401db98:	059a      	lsls	r2, r3, #22
3401db9a:	d402      	bmi.n	3401dba2 <_vfiprintf_r+0x2a>
3401db9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401db9e:	f7fe fde4 	bl	3401c76a <__retarget_lock_acquire_recursive>
3401dba2:	89ab      	ldrh	r3, [r5, #12]
3401dba4:	071b      	lsls	r3, r3, #28
3401dba6:	d501      	bpl.n	3401dbac <_vfiprintf_r+0x34>
3401dba8:	692b      	ldr	r3, [r5, #16]
3401dbaa:	b99b      	cbnz	r3, 3401dbd4 <_vfiprintf_r+0x5c>
3401dbac:	4629      	mov	r1, r5
3401dbae:	4630      	mov	r0, r6
3401dbb0:	f7fe fb06 	bl	3401c1c0 <__swsetup_r>
3401dbb4:	b170      	cbz	r0, 3401dbd4 <_vfiprintf_r+0x5c>
3401dbb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401dbb8:	07dc      	lsls	r4, r3, #31
3401dbba:	d504      	bpl.n	3401dbc6 <_vfiprintf_r+0x4e>
3401dbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401dbc0:	b01d      	add	sp, #116	@ 0x74
3401dbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401dbc6:	89ab      	ldrh	r3, [r5, #12]
3401dbc8:	0598      	lsls	r0, r3, #22
3401dbca:	d4f7      	bmi.n	3401dbbc <_vfiprintf_r+0x44>
3401dbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401dbce:	f7fe fdcd 	bl	3401c76c <__retarget_lock_release_recursive>
3401dbd2:	e7f3      	b.n	3401dbbc <_vfiprintf_r+0x44>
3401dbd4:	2300      	movs	r3, #0
3401dbd6:	f8cd 800c 	str.w	r8, [sp, #12]
3401dbda:	f04f 0901 	mov.w	r9, #1
3401dbde:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401dd94 <_vfiprintf_r+0x21c>
3401dbe2:	9309      	str	r3, [sp, #36]	@ 0x24
3401dbe4:	2320      	movs	r3, #32
3401dbe6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3401dbea:	2330      	movs	r3, #48	@ 0x30
3401dbec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3401dbf0:	4623      	mov	r3, r4
3401dbf2:	469a      	mov	sl, r3
3401dbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
3401dbf8:	b10a      	cbz	r2, 3401dbfe <_vfiprintf_r+0x86>
3401dbfa:	2a25      	cmp	r2, #37	@ 0x25
3401dbfc:	d1f9      	bne.n	3401dbf2 <_vfiprintf_r+0x7a>
3401dbfe:	ebba 0b04 	subs.w	fp, sl, r4
3401dc02:	d00b      	beq.n	3401dc1c <_vfiprintf_r+0xa4>
3401dc04:	465b      	mov	r3, fp
3401dc06:	4622      	mov	r2, r4
3401dc08:	4629      	mov	r1, r5
3401dc0a:	4630      	mov	r0, r6
3401dc0c:	f7ff ffa1 	bl	3401db52 <__sfputs_r>
3401dc10:	3001      	adds	r0, #1
3401dc12:	f000 80a7 	beq.w	3401dd64 <_vfiprintf_r+0x1ec>
3401dc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401dc18:	445a      	add	r2, fp
3401dc1a:	9209      	str	r2, [sp, #36]	@ 0x24
3401dc1c:	f89a 3000 	ldrb.w	r3, [sl]
3401dc20:	2b00      	cmp	r3, #0
3401dc22:	f000 809f 	beq.w	3401dd64 <_vfiprintf_r+0x1ec>
3401dc26:	2300      	movs	r3, #0
3401dc28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401dc2c:	f10a 0a01 	add.w	sl, sl, #1
3401dc30:	9304      	str	r3, [sp, #16]
3401dc32:	9307      	str	r3, [sp, #28]
3401dc34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401dc38:	931a      	str	r3, [sp, #104]	@ 0x68
3401dc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
3401dc3e:	4654      	mov	r4, sl
3401dc40:	2205      	movs	r2, #5
3401dc42:	4854      	ldr	r0, [pc, #336]	@ (3401dd94 <_vfiprintf_r+0x21c>)
3401dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
3401dc48:	f7fe fd91 	bl	3401c76e <memchr>
3401dc4c:	9a04      	ldr	r2, [sp, #16]
3401dc4e:	b9d8      	cbnz	r0, 3401dc88 <_vfiprintf_r+0x110>
3401dc50:	06d1      	lsls	r1, r2, #27
3401dc52:	bf44      	itt	mi
3401dc54:	2320      	movmi	r3, #32
3401dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401dc5a:	0713      	lsls	r3, r2, #28
3401dc5c:	bf44      	itt	mi
3401dc5e:	232b      	movmi	r3, #43	@ 0x2b
3401dc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401dc64:	f89a 3000 	ldrb.w	r3, [sl]
3401dc68:	2b2a      	cmp	r3, #42	@ 0x2a
3401dc6a:	d015      	beq.n	3401dc98 <_vfiprintf_r+0x120>
3401dc6c:	9a07      	ldr	r2, [sp, #28]
3401dc6e:	4654      	mov	r4, sl
3401dc70:	2000      	movs	r0, #0
3401dc72:	f04f 0c0a 	mov.w	ip, #10
3401dc76:	4621      	mov	r1, r4
3401dc78:	f811 3b01 	ldrb.w	r3, [r1], #1
3401dc7c:	3b30      	subs	r3, #48	@ 0x30
3401dc7e:	2b09      	cmp	r3, #9
3401dc80:	d94b      	bls.n	3401dd1a <_vfiprintf_r+0x1a2>
3401dc82:	b1b0      	cbz	r0, 3401dcb2 <_vfiprintf_r+0x13a>
3401dc84:	9207      	str	r2, [sp, #28]
3401dc86:	e014      	b.n	3401dcb2 <_vfiprintf_r+0x13a>
3401dc88:	eba0 0308 	sub.w	r3, r0, r8
3401dc8c:	46a2      	mov	sl, r4
3401dc8e:	fa09 f303 	lsl.w	r3, r9, r3
3401dc92:	4313      	orrs	r3, r2
3401dc94:	9304      	str	r3, [sp, #16]
3401dc96:	e7d2      	b.n	3401dc3e <_vfiprintf_r+0xc6>
3401dc98:	9b03      	ldr	r3, [sp, #12]
3401dc9a:	1d19      	adds	r1, r3, #4
3401dc9c:	681b      	ldr	r3, [r3, #0]
3401dc9e:	2b00      	cmp	r3, #0
3401dca0:	9103      	str	r1, [sp, #12]
3401dca2:	bfbb      	ittet	lt
3401dca4:	425b      	neglt	r3, r3
3401dca6:	f042 0202 	orrlt.w	r2, r2, #2
3401dcaa:	9307      	strge	r3, [sp, #28]
3401dcac:	9307      	strlt	r3, [sp, #28]
3401dcae:	bfb8      	it	lt
3401dcb0:	9204      	strlt	r2, [sp, #16]
3401dcb2:	7823      	ldrb	r3, [r4, #0]
3401dcb4:	2b2e      	cmp	r3, #46	@ 0x2e
3401dcb6:	d10a      	bne.n	3401dcce <_vfiprintf_r+0x156>
3401dcb8:	7863      	ldrb	r3, [r4, #1]
3401dcba:	2b2a      	cmp	r3, #42	@ 0x2a
3401dcbc:	d132      	bne.n	3401dd24 <_vfiprintf_r+0x1ac>
3401dcbe:	9b03      	ldr	r3, [sp, #12]
3401dcc0:	3402      	adds	r4, #2
3401dcc2:	1d1a      	adds	r2, r3, #4
3401dcc4:	681b      	ldr	r3, [r3, #0]
3401dcc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401dcca:	9203      	str	r2, [sp, #12]
3401dccc:	9305      	str	r3, [sp, #20]
3401dcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401dda4 <_vfiprintf_r+0x22c>
3401dcd2:	2203      	movs	r2, #3
3401dcd4:	7821      	ldrb	r1, [r4, #0]
3401dcd6:	4650      	mov	r0, sl
3401dcd8:	f7fe fd49 	bl	3401c76e <memchr>
3401dcdc:	b138      	cbz	r0, 3401dcee <_vfiprintf_r+0x176>
3401dcde:	eba0 000a 	sub.w	r0, r0, sl
3401dce2:	2240      	movs	r2, #64	@ 0x40
3401dce4:	9b04      	ldr	r3, [sp, #16]
3401dce6:	3401      	adds	r4, #1
3401dce8:	4082      	lsls	r2, r0
3401dcea:	4313      	orrs	r3, r2
3401dcec:	9304      	str	r3, [sp, #16]
3401dcee:	f814 1b01 	ldrb.w	r1, [r4], #1
3401dcf2:	2206      	movs	r2, #6
3401dcf4:	4828      	ldr	r0, [pc, #160]	@ (3401dd98 <_vfiprintf_r+0x220>)
3401dcf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3401dcfa:	f7fe fd38 	bl	3401c76e <memchr>
3401dcfe:	2800      	cmp	r0, #0
3401dd00:	d03f      	beq.n	3401dd82 <_vfiprintf_r+0x20a>
3401dd02:	4b26      	ldr	r3, [pc, #152]	@ (3401dd9c <_vfiprintf_r+0x224>)
3401dd04:	bb1b      	cbnz	r3, 3401dd4e <_vfiprintf_r+0x1d6>
3401dd06:	9b03      	ldr	r3, [sp, #12]
3401dd08:	3307      	adds	r3, #7
3401dd0a:	f023 0307 	bic.w	r3, r3, #7
3401dd0e:	3308      	adds	r3, #8
3401dd10:	9303      	str	r3, [sp, #12]
3401dd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401dd14:	443b      	add	r3, r7
3401dd16:	9309      	str	r3, [sp, #36]	@ 0x24
3401dd18:	e76a      	b.n	3401dbf0 <_vfiprintf_r+0x78>
3401dd1a:	fb0c 3202 	mla	r2, ip, r2, r3
3401dd1e:	460c      	mov	r4, r1
3401dd20:	2001      	movs	r0, #1
3401dd22:	e7a8      	b.n	3401dc76 <_vfiprintf_r+0xfe>
3401dd24:	2300      	movs	r3, #0
3401dd26:	3401      	adds	r4, #1
3401dd28:	f04f 0c0a 	mov.w	ip, #10
3401dd2c:	4619      	mov	r1, r3
3401dd2e:	9305      	str	r3, [sp, #20]
3401dd30:	4620      	mov	r0, r4
3401dd32:	f810 2b01 	ldrb.w	r2, [r0], #1
3401dd36:	3a30      	subs	r2, #48	@ 0x30
3401dd38:	2a09      	cmp	r2, #9
3401dd3a:	d903      	bls.n	3401dd44 <_vfiprintf_r+0x1cc>
3401dd3c:	2b00      	cmp	r3, #0
3401dd3e:	d0c6      	beq.n	3401dcce <_vfiprintf_r+0x156>
3401dd40:	9105      	str	r1, [sp, #20]
3401dd42:	e7c4      	b.n	3401dcce <_vfiprintf_r+0x156>
3401dd44:	fb0c 2101 	mla	r1, ip, r1, r2
3401dd48:	4604      	mov	r4, r0
3401dd4a:	2301      	movs	r3, #1
3401dd4c:	e7f0      	b.n	3401dd30 <_vfiprintf_r+0x1b8>
3401dd4e:	ab03      	add	r3, sp, #12
3401dd50:	462a      	mov	r2, r5
3401dd52:	a904      	add	r1, sp, #16
3401dd54:	4630      	mov	r0, r6
3401dd56:	9300      	str	r3, [sp, #0]
3401dd58:	4b11      	ldr	r3, [pc, #68]	@ (3401dda0 <_vfiprintf_r+0x228>)
3401dd5a:	f7fd fc01 	bl	3401b560 <_printf_float>
3401dd5e:	4607      	mov	r7, r0
3401dd60:	1c78      	adds	r0, r7, #1
3401dd62:	d1d6      	bne.n	3401dd12 <_vfiprintf_r+0x19a>
3401dd64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401dd66:	07d9      	lsls	r1, r3, #31
3401dd68:	d405      	bmi.n	3401dd76 <_vfiprintf_r+0x1fe>
3401dd6a:	89ab      	ldrh	r3, [r5, #12]
3401dd6c:	059a      	lsls	r2, r3, #22
3401dd6e:	d402      	bmi.n	3401dd76 <_vfiprintf_r+0x1fe>
3401dd70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401dd72:	f7fe fcfb 	bl	3401c76c <__retarget_lock_release_recursive>
3401dd76:	89ab      	ldrh	r3, [r5, #12]
3401dd78:	065b      	lsls	r3, r3, #25
3401dd7a:	f53f af1f 	bmi.w	3401dbbc <_vfiprintf_r+0x44>
3401dd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
3401dd80:	e71e      	b.n	3401dbc0 <_vfiprintf_r+0x48>
3401dd82:	ab03      	add	r3, sp, #12
3401dd84:	462a      	mov	r2, r5
3401dd86:	a904      	add	r1, sp, #16
3401dd88:	4630      	mov	r0, r6
3401dd8a:	9300      	str	r3, [sp, #0]
3401dd8c:	4b04      	ldr	r3, [pc, #16]	@ (3401dda0 <_vfiprintf_r+0x228>)
3401dd8e:	f7fd fe73 	bl	3401ba78 <_printf_i>
3401dd92:	e7e4      	b.n	3401dd5e <_vfiprintf_r+0x1e6>
3401dd94:	3402038a 	.word	0x3402038a
3401dd98:	34020394 	.word	0x34020394
3401dd9c:	3401b561 	.word	0x3401b561
3401dda0:	3401db53 	.word	0x3401db53
3401dda4:	34020390 	.word	0x34020390

3401dda8 <__swhatbuf_r>:
3401dda8:	b570      	push	{r4, r5, r6, lr}
3401ddaa:	460c      	mov	r4, r1
3401ddac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401ddb0:	b096      	sub	sp, #88	@ 0x58
3401ddb2:	4615      	mov	r5, r2
3401ddb4:	2900      	cmp	r1, #0
3401ddb6:	461e      	mov	r6, r3
3401ddb8:	da0c      	bge.n	3401ddd4 <__swhatbuf_r+0x2c>
3401ddba:	89a3      	ldrh	r3, [r4, #12]
3401ddbc:	2100      	movs	r1, #0
3401ddbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401ddc2:	bf14      	ite	ne
3401ddc4:	2340      	movne	r3, #64	@ 0x40
3401ddc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401ddca:	2000      	movs	r0, #0
3401ddcc:	6031      	str	r1, [r6, #0]
3401ddce:	602b      	str	r3, [r5, #0]
3401ddd0:	b016      	add	sp, #88	@ 0x58
3401ddd2:	bd70      	pop	{r4, r5, r6, pc}
3401ddd4:	466a      	mov	r2, sp
3401ddd6:	f000 f879 	bl	3401decc <_fstat_r>
3401ddda:	2800      	cmp	r0, #0
3401dddc:	dbed      	blt.n	3401ddba <__swhatbuf_r+0x12>
3401ddde:	9901      	ldr	r1, [sp, #4]
3401dde0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401dde4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3401dde8:	4259      	negs	r1, r3
3401ddea:	4159      	adcs	r1, r3
3401ddec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401ddf0:	e7eb      	b.n	3401ddca <__swhatbuf_r+0x22>

3401ddf2 <__smakebuf_r>:
3401ddf2:	898b      	ldrh	r3, [r1, #12]
3401ddf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401ddf6:	079d      	lsls	r5, r3, #30
3401ddf8:	4606      	mov	r6, r0
3401ddfa:	460c      	mov	r4, r1
3401ddfc:	d507      	bpl.n	3401de0e <__smakebuf_r+0x1c>
3401ddfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401de02:	6023      	str	r3, [r4, #0]
3401de04:	6123      	str	r3, [r4, #16]
3401de06:	2301      	movs	r3, #1
3401de08:	6163      	str	r3, [r4, #20]
3401de0a:	b003      	add	sp, #12
3401de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401de0e:	ab01      	add	r3, sp, #4
3401de10:	466a      	mov	r2, sp
3401de12:	f7ff ffc9 	bl	3401dda8 <__swhatbuf_r>
3401de16:	9f00      	ldr	r7, [sp, #0]
3401de18:	4605      	mov	r5, r0
3401de1a:	4630      	mov	r0, r6
3401de1c:	4639      	mov	r1, r7
3401de1e:	f7fd fa83 	bl	3401b328 <_malloc_r>
3401de22:	b948      	cbnz	r0, 3401de38 <__smakebuf_r+0x46>
3401de24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401de28:	059a      	lsls	r2, r3, #22
3401de2a:	d4ee      	bmi.n	3401de0a <__smakebuf_r+0x18>
3401de2c:	f023 0303 	bic.w	r3, r3, #3
3401de30:	f043 0302 	orr.w	r3, r3, #2
3401de34:	81a3      	strh	r3, [r4, #12]
3401de36:	e7e2      	b.n	3401ddfe <__smakebuf_r+0xc>
3401de38:	89a3      	ldrh	r3, [r4, #12]
3401de3a:	6020      	str	r0, [r4, #0]
3401de3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401de40:	81a3      	strh	r3, [r4, #12]
3401de42:	9b01      	ldr	r3, [sp, #4]
3401de44:	e9c4 0704 	strd	r0, r7, [r4, #16]
3401de48:	b15b      	cbz	r3, 3401de62 <__smakebuf_r+0x70>
3401de4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401de4e:	4630      	mov	r0, r6
3401de50:	f000 f84e 	bl	3401def0 <_isatty_r>
3401de54:	b128      	cbz	r0, 3401de62 <__smakebuf_r+0x70>
3401de56:	89a3      	ldrh	r3, [r4, #12]
3401de58:	f023 0303 	bic.w	r3, r3, #3
3401de5c:	f043 0301 	orr.w	r3, r3, #1
3401de60:	81a3      	strh	r3, [r4, #12]
3401de62:	89a3      	ldrh	r3, [r4, #12]
3401de64:	431d      	orrs	r5, r3
3401de66:	81a5      	strh	r5, [r4, #12]
3401de68:	e7cf      	b.n	3401de0a <__smakebuf_r+0x18>

3401de6a <_raise_r>:
3401de6a:	291f      	cmp	r1, #31
3401de6c:	b538      	push	{r3, r4, r5, lr}
3401de6e:	4605      	mov	r5, r0
3401de70:	460c      	mov	r4, r1
3401de72:	d904      	bls.n	3401de7e <_raise_r+0x14>
3401de74:	2316      	movs	r3, #22
3401de76:	6003      	str	r3, [r0, #0]
3401de78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401de7c:	bd38      	pop	{r3, r4, r5, pc}
3401de7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3401de80:	b112      	cbz	r2, 3401de88 <_raise_r+0x1e>
3401de82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401de86:	b94b      	cbnz	r3, 3401de9c <_raise_r+0x32>
3401de88:	4628      	mov	r0, r5
3401de8a:	f000 f853 	bl	3401df34 <_getpid_r>
3401de8e:	4622      	mov	r2, r4
3401de90:	4601      	mov	r1, r0
3401de92:	4628      	mov	r0, r5
3401de94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401de98:	f000 b83a 	b.w	3401df10 <_kill_r>
3401de9c:	2b01      	cmp	r3, #1
3401de9e:	d00a      	beq.n	3401deb6 <_raise_r+0x4c>
3401dea0:	1c59      	adds	r1, r3, #1
3401dea2:	d103      	bne.n	3401deac <_raise_r+0x42>
3401dea4:	2316      	movs	r3, #22
3401dea6:	6003      	str	r3, [r0, #0]
3401dea8:	2001      	movs	r0, #1
3401deaa:	e7e7      	b.n	3401de7c <_raise_r+0x12>
3401deac:	2100      	movs	r1, #0
3401deae:	4620      	mov	r0, r4
3401deb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401deb4:	4798      	blx	r3
3401deb6:	2000      	movs	r0, #0
3401deb8:	e7e0      	b.n	3401de7c <_raise_r+0x12>
	...

3401debc <raise>:
3401debc:	4b02      	ldr	r3, [pc, #8]	@ (3401dec8 <raise+0xc>)
3401debe:	4601      	mov	r1, r0
3401dec0:	6818      	ldr	r0, [r3, #0]
3401dec2:	f7ff bfd2 	b.w	3401de6a <_raise_r>
3401dec6:	bf00      	nop
3401dec8:	3402060c 	.word	0x3402060c

3401decc <_fstat_r>:
3401decc:	b538      	push	{r3, r4, r5, lr}
3401dece:	2300      	movs	r3, #0
3401ded0:	4d06      	ldr	r5, [pc, #24]	@ (3401deec <_fstat_r+0x20>)
3401ded2:	4604      	mov	r4, r0
3401ded4:	4608      	mov	r0, r1
3401ded6:	4611      	mov	r1, r2
3401ded8:	602b      	str	r3, [r5, #0]
3401deda:	f7e3 ffdf 	bl	34001e9c <_fstat>
3401dede:	1c43      	adds	r3, r0, #1
3401dee0:	d102      	bne.n	3401dee8 <_fstat_r+0x1c>
3401dee2:	682b      	ldr	r3, [r5, #0]
3401dee4:	b103      	cbz	r3, 3401dee8 <_fstat_r+0x1c>
3401dee6:	6023      	str	r3, [r4, #0]
3401dee8:	bd38      	pop	{r3, r4, r5, pc}
3401deea:	bf00      	nop
3401deec:	34020e94 	.word	0x34020e94

3401def0 <_isatty_r>:
3401def0:	b538      	push	{r3, r4, r5, lr}
3401def2:	2300      	movs	r3, #0
3401def4:	4d05      	ldr	r5, [pc, #20]	@ (3401df0c <_isatty_r+0x1c>)
3401def6:	4604      	mov	r4, r0
3401def8:	4608      	mov	r0, r1
3401defa:	602b      	str	r3, [r5, #0]
3401defc:	f7e3 ffde 	bl	34001ebc <_isatty>
3401df00:	1c43      	adds	r3, r0, #1
3401df02:	d102      	bne.n	3401df0a <_isatty_r+0x1a>
3401df04:	682b      	ldr	r3, [r5, #0]
3401df06:	b103      	cbz	r3, 3401df0a <_isatty_r+0x1a>
3401df08:	6023      	str	r3, [r4, #0]
3401df0a:	bd38      	pop	{r3, r4, r5, pc}
3401df0c:	34020e94 	.word	0x34020e94

3401df10 <_kill_r>:
3401df10:	b538      	push	{r3, r4, r5, lr}
3401df12:	2300      	movs	r3, #0
3401df14:	4d06      	ldr	r5, [pc, #24]	@ (3401df30 <_kill_r+0x20>)
3401df16:	4604      	mov	r4, r0
3401df18:	4608      	mov	r0, r1
3401df1a:	4611      	mov	r1, r2
3401df1c:	602b      	str	r3, [r5, #0]
3401df1e:	f7e3 ff79 	bl	34001e14 <_kill>
3401df22:	1c43      	adds	r3, r0, #1
3401df24:	d102      	bne.n	3401df2c <_kill_r+0x1c>
3401df26:	682b      	ldr	r3, [r5, #0]
3401df28:	b103      	cbz	r3, 3401df2c <_kill_r+0x1c>
3401df2a:	6023      	str	r3, [r4, #0]
3401df2c:	bd38      	pop	{r3, r4, r5, pc}
3401df2e:	bf00      	nop
3401df30:	34020e94 	.word	0x34020e94

3401df34 <_getpid_r>:
3401df34:	f7e3 bf66 	b.w	34001e04 <_getpid>

3401df38 <_calloc_r>:
3401df38:	b570      	push	{r4, r5, r6, lr}
3401df3a:	fba1 5402 	umull	r5, r4, r1, r2
3401df3e:	b934      	cbnz	r4, 3401df4e <_calloc_r+0x16>
3401df40:	4629      	mov	r1, r5
3401df42:	f7fd f9f1 	bl	3401b328 <_malloc_r>
3401df46:	4606      	mov	r6, r0
3401df48:	b928      	cbnz	r0, 3401df56 <_calloc_r+0x1e>
3401df4a:	4630      	mov	r0, r6
3401df4c:	bd70      	pop	{r4, r5, r6, pc}
3401df4e:	220c      	movs	r2, #12
3401df50:	2600      	movs	r6, #0
3401df52:	6002      	str	r2, [r0, #0]
3401df54:	e7f9      	b.n	3401df4a <_calloc_r+0x12>
3401df56:	462a      	mov	r2, r5
3401df58:	4621      	mov	r1, r4
3401df5a:	f7fe f987 	bl	3401c26c <memset>
3401df5e:	e7f4      	b.n	3401df4a <_calloc_r+0x12>

3401df60 <__ascii_mbtowc>:
3401df60:	b082      	sub	sp, #8
3401df62:	b901      	cbnz	r1, 3401df66 <__ascii_mbtowc+0x6>
3401df64:	a901      	add	r1, sp, #4
3401df66:	b142      	cbz	r2, 3401df7a <__ascii_mbtowc+0x1a>
3401df68:	b14b      	cbz	r3, 3401df7e <__ascii_mbtowc+0x1e>
3401df6a:	7813      	ldrb	r3, [r2, #0]
3401df6c:	600b      	str	r3, [r1, #0]
3401df6e:	7812      	ldrb	r2, [r2, #0]
3401df70:	1e10      	subs	r0, r2, #0
3401df72:	bf18      	it	ne
3401df74:	2001      	movne	r0, #1
3401df76:	b002      	add	sp, #8
3401df78:	4770      	bx	lr
3401df7a:	4610      	mov	r0, r2
3401df7c:	e7fb      	b.n	3401df76 <__ascii_mbtowc+0x16>
3401df7e:	f06f 0001 	mvn.w	r0, #1
3401df82:	e7f8      	b.n	3401df76 <__ascii_mbtowc+0x16>

3401df84 <__ascii_wctomb>:
3401df84:	4603      	mov	r3, r0
3401df86:	4608      	mov	r0, r1
3401df88:	b141      	cbz	r1, 3401df9c <__ascii_wctomb+0x18>
3401df8a:	2aff      	cmp	r2, #255	@ 0xff
3401df8c:	d904      	bls.n	3401df98 <__ascii_wctomb+0x14>
3401df8e:	228a      	movs	r2, #138	@ 0x8a
3401df90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401df94:	601a      	str	r2, [r3, #0]
3401df96:	4770      	bx	lr
3401df98:	2001      	movs	r0, #1
3401df9a:	700a      	strb	r2, [r1, #0]
3401df9c:	4770      	bx	lr
	...

3401dfa0 <_sbrk>:
3401dfa0:	4a04      	ldr	r2, [pc, #16]	@ (3401dfb4 <_sbrk+0x14>)
3401dfa2:	4603      	mov	r3, r0
3401dfa4:	6811      	ldr	r1, [r2, #0]
3401dfa6:	b909      	cbnz	r1, 3401dfac <_sbrk+0xc>
3401dfa8:	4903      	ldr	r1, [pc, #12]	@ (3401dfb8 <_sbrk+0x18>)
3401dfaa:	6011      	str	r1, [r2, #0]
3401dfac:	6810      	ldr	r0, [r2, #0]
3401dfae:	4403      	add	r3, r0
3401dfb0:	6013      	str	r3, [r2, #0]
3401dfb2:	4770      	bx	lr
3401dfb4:	34020e9c 	.word	0x34020e9c
3401dfb8:	34020ea0 	.word	0x34020ea0

3401dfbc <_init>:
3401dfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401dfbe:	bf00      	nop
3401dfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401dfc2:	bc08      	pop	{r3}
3401dfc4:	469e      	mov	lr, r3
3401dfc6:	4770      	bx	lr

3401dfc8 <_fini>:
3401dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401dfca:	bf00      	nop
3401dfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401dfce:	bc08      	pop	{r3}
3401dfd0:	469e      	mov	lr, r3
3401dfd2:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3401dfe0 <SECURE_SystemCoreClockUpdate>:
3401dfe0:	e97f e97f 	sg
3401dfe4:	f7e5 be00 	b.w	34003be8 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
