
NUCLEO-N657X0-Q_GettingStarted_ImageClassification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f5c  34000750  34000750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3401a6c0  3401a6c0  0001a6c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000173c  3401a6e0  3401a6e0  0001a6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  3401be1c  3401be1c  0001c008  2**0
                  CONTENTS
  5 .ARM          00000008  3401be1c  3401be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  3401be24  3401c008  0001c008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  3401be24  3401be24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  3401be28  3401be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  3401be2c  3401be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000068c  3401c008  3401c008  0001c008  2**2
                  ALLOC
 11 ._user_heap_stack 00004204  3401c694  3401c694  0001c008  2**0
                  ALLOC
 12 .ARM.attributes 0000003a  00000000  00000000  0001c008  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ed97  00000000  00000000  0001c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000587a  00000000  00000000  0005add9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003028  00000000  00000000  00060658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000257a  00000000  00000000  00063680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00078687  00000000  00000000  00065bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039dda  00000000  00000000  000de281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    003a0674  00000000  00000000  0011805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  004b86cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dd60  00000000  00000000  004b8714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000155  00000000  00000000  004c6474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3401c008 	.word	0x3401c008
3400076c:	00000000 	.word	0x00000000
34000770:	3401a694 	.word	0x3401a694

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3401c00c 	.word	0x3401c00c
3400078c:	3401a694 	.word	0x3401a694

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <__aeabi_uldivmod>:
340007a0:	b953      	cbnz	r3, 340007b8 <__aeabi_uldivmod+0x18>
340007a2:	b94a      	cbnz	r2, 340007b8 <__aeabi_uldivmod+0x18>
340007a4:	2900      	cmp	r1, #0
340007a6:	bf08      	it	eq
340007a8:	2800      	cmpeq	r0, #0
340007aa:	bf1c      	itt	ne
340007ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
340007b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
340007b4:	f000 b9b0 	b.w	34000b18 <__aeabi_idiv0>
340007b8:	f1ad 0c08 	sub.w	ip, sp, #8
340007bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007c0:	f000 f806 	bl	340007d0 <__udivmoddi4>
340007c4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007cc:	b004      	add	sp, #16
340007ce:	4770      	bx	lr

340007d0 <__udivmoddi4>:
340007d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007d4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007d6:	4688      	mov	r8, r1
340007d8:	4604      	mov	r4, r0
340007da:	468e      	mov	lr, r1
340007dc:	2b00      	cmp	r3, #0
340007de:	d14a      	bne.n	34000876 <__udivmoddi4+0xa6>
340007e0:	428a      	cmp	r2, r1
340007e2:	4617      	mov	r7, r2
340007e4:	d95f      	bls.n	340008a6 <__udivmoddi4+0xd6>
340007e6:	fab2 f682 	clz	r6, r2
340007ea:	b14e      	cbz	r6, 34000800 <__udivmoddi4+0x30>
340007ec:	f1c6 0320 	rsb	r3, r6, #32
340007f0:	fa01 fe06 	lsl.w	lr, r1, r6
340007f4:	40b7      	lsls	r7, r6
340007f6:	40b4      	lsls	r4, r6
340007f8:	fa20 f303 	lsr.w	r3, r0, r3
340007fc:	ea43 0e0e 	orr.w	lr, r3, lr
34000800:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000804:	fa1f fc87 	uxth.w	ip, r7
34000808:	0c23      	lsrs	r3, r4, #16
3400080a:	fbbe f1f8 	udiv	r1, lr, r8
3400080e:	fb08 ee11 	mls	lr, r8, r1, lr
34000812:	fb01 f20c 	mul.w	r2, r1, ip
34000816:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
3400081a:	429a      	cmp	r2, r3
3400081c:	d907      	bls.n	3400082e <__udivmoddi4+0x5e>
3400081e:	18fb      	adds	r3, r7, r3
34000820:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34000824:	d202      	bcs.n	3400082c <__udivmoddi4+0x5c>
34000826:	429a      	cmp	r2, r3
34000828:	f200 8154 	bhi.w	34000ad4 <__udivmoddi4+0x304>
3400082c:	4601      	mov	r1, r0
3400082e:	1a9b      	subs	r3, r3, r2
34000830:	b2a2      	uxth	r2, r4
34000832:	fbb3 f0f8 	udiv	r0, r3, r8
34000836:	fb08 3310 	mls	r3, r8, r0, r3
3400083a:	fb00 fc0c 	mul.w	ip, r0, ip
3400083e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34000842:	4594      	cmp	ip, r2
34000844:	d90b      	bls.n	3400085e <__udivmoddi4+0x8e>
34000846:	18ba      	adds	r2, r7, r2
34000848:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
3400084c:	bf2c      	ite	cs
3400084e:	2401      	movcs	r4, #1
34000850:	2400      	movcc	r4, #0
34000852:	4594      	cmp	ip, r2
34000854:	d902      	bls.n	3400085c <__udivmoddi4+0x8c>
34000856:	2c00      	cmp	r4, #0
34000858:	f000 813f 	beq.w	34000ada <__udivmoddi4+0x30a>
3400085c:	4618      	mov	r0, r3
3400085e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000862:	eba2 020c 	sub.w	r2, r2, ip
34000866:	2100      	movs	r1, #0
34000868:	b11d      	cbz	r5, 34000872 <__udivmoddi4+0xa2>
3400086a:	40f2      	lsrs	r2, r6
3400086c:	2300      	movs	r3, #0
3400086e:	e9c5 2300 	strd	r2, r3, [r5]
34000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000876:	428b      	cmp	r3, r1
34000878:	d905      	bls.n	34000886 <__udivmoddi4+0xb6>
3400087a:	b10d      	cbz	r5, 34000880 <__udivmoddi4+0xb0>
3400087c:	e9c5 0100 	strd	r0, r1, [r5]
34000880:	2100      	movs	r1, #0
34000882:	4608      	mov	r0, r1
34000884:	e7f5      	b.n	34000872 <__udivmoddi4+0xa2>
34000886:	fab3 f183 	clz	r1, r3
3400088a:	2900      	cmp	r1, #0
3400088c:	d14e      	bne.n	3400092c <__udivmoddi4+0x15c>
3400088e:	4543      	cmp	r3, r8
34000890:	f0c0 8112 	bcc.w	34000ab8 <__udivmoddi4+0x2e8>
34000894:	4282      	cmp	r2, r0
34000896:	f240 810f 	bls.w	34000ab8 <__udivmoddi4+0x2e8>
3400089a:	4608      	mov	r0, r1
3400089c:	2d00      	cmp	r5, #0
3400089e:	d0e8      	beq.n	34000872 <__udivmoddi4+0xa2>
340008a0:	e9c5 4e00 	strd	r4, lr, [r5]
340008a4:	e7e5      	b.n	34000872 <__udivmoddi4+0xa2>
340008a6:	2a00      	cmp	r2, #0
340008a8:	f000 80ac 	beq.w	34000a04 <__udivmoddi4+0x234>
340008ac:	fab2 f682 	clz	r6, r2
340008b0:	2e00      	cmp	r6, #0
340008b2:	f040 80bb 	bne.w	34000a2c <__udivmoddi4+0x25c>
340008b6:	1a8b      	subs	r3, r1, r2
340008b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
340008bc:	b2bc      	uxth	r4, r7
340008be:	2101      	movs	r1, #1
340008c0:	0c02      	lsrs	r2, r0, #16
340008c2:	b280      	uxth	r0, r0
340008c4:	fbb3 fcfe 	udiv	ip, r3, lr
340008c8:	fb0e 331c 	mls	r3, lr, ip, r3
340008cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
340008d0:	fb04 f20c 	mul.w	r2, r4, ip
340008d4:	429a      	cmp	r2, r3
340008d6:	d90e      	bls.n	340008f6 <__udivmoddi4+0x126>
340008d8:	18fb      	adds	r3, r7, r3
340008da:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
340008de:	bf2c      	ite	cs
340008e0:	f04f 0901 	movcs.w	r9, #1
340008e4:	f04f 0900 	movcc.w	r9, #0
340008e8:	429a      	cmp	r2, r3
340008ea:	d903      	bls.n	340008f4 <__udivmoddi4+0x124>
340008ec:	f1b9 0f00 	cmp.w	r9, #0
340008f0:	f000 80ec 	beq.w	34000acc <__udivmoddi4+0x2fc>
340008f4:	46c4      	mov	ip, r8
340008f6:	1a9b      	subs	r3, r3, r2
340008f8:	fbb3 f8fe 	udiv	r8, r3, lr
340008fc:	fb0e 3318 	mls	r3, lr, r8, r3
34000900:	fb04 f408 	mul.w	r4, r4, r8
34000904:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34000908:	4294      	cmp	r4, r2
3400090a:	d90b      	bls.n	34000924 <__udivmoddi4+0x154>
3400090c:	18ba      	adds	r2, r7, r2
3400090e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34000912:	bf2c      	ite	cs
34000914:	2001      	movcs	r0, #1
34000916:	2000      	movcc	r0, #0
34000918:	4294      	cmp	r4, r2
3400091a:	d902      	bls.n	34000922 <__udivmoddi4+0x152>
3400091c:	2800      	cmp	r0, #0
3400091e:	f000 80d1 	beq.w	34000ac4 <__udivmoddi4+0x2f4>
34000922:	4698      	mov	r8, r3
34000924:	1b12      	subs	r2, r2, r4
34000926:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
3400092a:	e79d      	b.n	34000868 <__udivmoddi4+0x98>
3400092c:	f1c1 0620 	rsb	r6, r1, #32
34000930:	408b      	lsls	r3, r1
34000932:	fa08 f401 	lsl.w	r4, r8, r1
34000936:	fa00 f901 	lsl.w	r9, r0, r1
3400093a:	fa22 f706 	lsr.w	r7, r2, r6
3400093e:	fa28 f806 	lsr.w	r8, r8, r6
34000942:	408a      	lsls	r2, r1
34000944:	431f      	orrs	r7, r3
34000946:	fa20 f306 	lsr.w	r3, r0, r6
3400094a:	0c38      	lsrs	r0, r7, #16
3400094c:	4323      	orrs	r3, r4
3400094e:	fa1f fc87 	uxth.w	ip, r7
34000952:	0c1c      	lsrs	r4, r3, #16
34000954:	fbb8 fef0 	udiv	lr, r8, r0
34000958:	fb00 881e 	mls	r8, r0, lr, r8
3400095c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34000960:	fb0e f80c 	mul.w	r8, lr, ip
34000964:	45a0      	cmp	r8, r4
34000966:	d90e      	bls.n	34000986 <__udivmoddi4+0x1b6>
34000968:	193c      	adds	r4, r7, r4
3400096a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3400096e:	bf2c      	ite	cs
34000970:	f04f 0b01 	movcs.w	fp, #1
34000974:	f04f 0b00 	movcc.w	fp, #0
34000978:	45a0      	cmp	r8, r4
3400097a:	d903      	bls.n	34000984 <__udivmoddi4+0x1b4>
3400097c:	f1bb 0f00 	cmp.w	fp, #0
34000980:	f000 80b8 	beq.w	34000af4 <__udivmoddi4+0x324>
34000984:	46d6      	mov	lr, sl
34000986:	eba4 0408 	sub.w	r4, r4, r8
3400098a:	fa1f f883 	uxth.w	r8, r3
3400098e:	fbb4 f3f0 	udiv	r3, r4, r0
34000992:	fb00 4413 	mls	r4, r0, r3, r4
34000996:	fb03 fc0c 	mul.w	ip, r3, ip
3400099a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3400099e:	45a4      	cmp	ip, r4
340009a0:	d90e      	bls.n	340009c0 <__udivmoddi4+0x1f0>
340009a2:	193c      	adds	r4, r7, r4
340009a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
340009a8:	bf2c      	ite	cs
340009aa:	f04f 0801 	movcs.w	r8, #1
340009ae:	f04f 0800 	movcc.w	r8, #0
340009b2:	45a4      	cmp	ip, r4
340009b4:	d903      	bls.n	340009be <__udivmoddi4+0x1ee>
340009b6:	f1b8 0f00 	cmp.w	r8, #0
340009ba:	f000 809f 	beq.w	34000afc <__udivmoddi4+0x32c>
340009be:	4603      	mov	r3, r0
340009c0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
340009c4:	eba4 040c 	sub.w	r4, r4, ip
340009c8:	fba0 ec02 	umull	lr, ip, r0, r2
340009cc:	4564      	cmp	r4, ip
340009ce:	4673      	mov	r3, lr
340009d0:	46e0      	mov	r8, ip
340009d2:	d302      	bcc.n	340009da <__udivmoddi4+0x20a>
340009d4:	d107      	bne.n	340009e6 <__udivmoddi4+0x216>
340009d6:	45f1      	cmp	r9, lr
340009d8:	d205      	bcs.n	340009e6 <__udivmoddi4+0x216>
340009da:	ebbe 0302 	subs.w	r3, lr, r2
340009de:	eb6c 0c07 	sbc.w	ip, ip, r7
340009e2:	3801      	subs	r0, #1
340009e4:	46e0      	mov	r8, ip
340009e6:	b15d      	cbz	r5, 34000a00 <__udivmoddi4+0x230>
340009e8:	ebb9 0203 	subs.w	r2, r9, r3
340009ec:	eb64 0408 	sbc.w	r4, r4, r8
340009f0:	fa04 f606 	lsl.w	r6, r4, r6
340009f4:	fa22 f301 	lsr.w	r3, r2, r1
340009f8:	40cc      	lsrs	r4, r1
340009fa:	431e      	orrs	r6, r3
340009fc:	e9c5 6400 	strd	r6, r4, [r5]
34000a00:	2100      	movs	r1, #0
34000a02:	e736      	b.n	34000872 <__udivmoddi4+0xa2>
34000a04:	fbb1 fcf2 	udiv	ip, r1, r2
34000a08:	0c01      	lsrs	r1, r0, #16
34000a0a:	4614      	mov	r4, r2
34000a0c:	b280      	uxth	r0, r0
34000a0e:	4696      	mov	lr, r2
34000a10:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a14:	2620      	movs	r6, #32
34000a16:	4690      	mov	r8, r2
34000a18:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34000a1c:	4610      	mov	r0, r2
34000a1e:	fbb1 f1f2 	udiv	r1, r1, r2
34000a22:	eba3 0308 	sub.w	r3, r3, r8
34000a26:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34000a2a:	e74b      	b.n	340008c4 <__udivmoddi4+0xf4>
34000a2c:	40b7      	lsls	r7, r6
34000a2e:	f1c6 0320 	rsb	r3, r6, #32
34000a32:	fa01 f206 	lsl.w	r2, r1, r6
34000a36:	fa21 f803 	lsr.w	r8, r1, r3
34000a3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34000a3e:	fa20 f303 	lsr.w	r3, r0, r3
34000a42:	b2bc      	uxth	r4, r7
34000a44:	40b0      	lsls	r0, r6
34000a46:	4313      	orrs	r3, r2
34000a48:	0c02      	lsrs	r2, r0, #16
34000a4a:	0c19      	lsrs	r1, r3, #16
34000a4c:	b280      	uxth	r0, r0
34000a4e:	fbb8 f9fe 	udiv	r9, r8, lr
34000a52:	fb0e 8819 	mls	r8, lr, r9, r8
34000a56:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34000a5a:	fb09 f804 	mul.w	r8, r9, r4
34000a5e:	4588      	cmp	r8, r1
34000a60:	d951      	bls.n	34000b06 <__udivmoddi4+0x336>
34000a62:	1879      	adds	r1, r7, r1
34000a64:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34000a68:	bf2c      	ite	cs
34000a6a:	f04f 0a01 	movcs.w	sl, #1
34000a6e:	f04f 0a00 	movcc.w	sl, #0
34000a72:	4588      	cmp	r8, r1
34000a74:	d902      	bls.n	34000a7c <__udivmoddi4+0x2ac>
34000a76:	f1ba 0f00 	cmp.w	sl, #0
34000a7a:	d031      	beq.n	34000ae0 <__udivmoddi4+0x310>
34000a7c:	eba1 0108 	sub.w	r1, r1, r8
34000a80:	fbb1 f9fe 	udiv	r9, r1, lr
34000a84:	fb09 f804 	mul.w	r8, r9, r4
34000a88:	fb0e 1119 	mls	r1, lr, r9, r1
34000a8c:	b29b      	uxth	r3, r3
34000a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34000a92:	4543      	cmp	r3, r8
34000a94:	d235      	bcs.n	34000b02 <__udivmoddi4+0x332>
34000a96:	18fb      	adds	r3, r7, r3
34000a98:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34000a9c:	bf2c      	ite	cs
34000a9e:	f04f 0a01 	movcs.w	sl, #1
34000aa2:	f04f 0a00 	movcc.w	sl, #0
34000aa6:	4543      	cmp	r3, r8
34000aa8:	d2bb      	bcs.n	34000a22 <__udivmoddi4+0x252>
34000aaa:	f1ba 0f00 	cmp.w	sl, #0
34000aae:	d1b8      	bne.n	34000a22 <__udivmoddi4+0x252>
34000ab0:	f1a9 0102 	sub.w	r1, r9, #2
34000ab4:	443b      	add	r3, r7
34000ab6:	e7b4      	b.n	34000a22 <__udivmoddi4+0x252>
34000ab8:	1a84      	subs	r4, r0, r2
34000aba:	eb68 0203 	sbc.w	r2, r8, r3
34000abe:	2001      	movs	r0, #1
34000ac0:	4696      	mov	lr, r2
34000ac2:	e6eb      	b.n	3400089c <__udivmoddi4+0xcc>
34000ac4:	443a      	add	r2, r7
34000ac6:	f1a8 0802 	sub.w	r8, r8, #2
34000aca:	e72b      	b.n	34000924 <__udivmoddi4+0x154>
34000acc:	f1ac 0c02 	sub.w	ip, ip, #2
34000ad0:	443b      	add	r3, r7
34000ad2:	e710      	b.n	340008f6 <__udivmoddi4+0x126>
34000ad4:	3902      	subs	r1, #2
34000ad6:	443b      	add	r3, r7
34000ad8:	e6a9      	b.n	3400082e <__udivmoddi4+0x5e>
34000ada:	443a      	add	r2, r7
34000adc:	3802      	subs	r0, #2
34000ade:	e6be      	b.n	3400085e <__udivmoddi4+0x8e>
34000ae0:	eba7 0808 	sub.w	r8, r7, r8
34000ae4:	f1a9 0c02 	sub.w	ip, r9, #2
34000ae8:	4441      	add	r1, r8
34000aea:	fbb1 f9fe 	udiv	r9, r1, lr
34000aee:	fb09 f804 	mul.w	r8, r9, r4
34000af2:	e7c9      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000af4:	f1ae 0e02 	sub.w	lr, lr, #2
34000af8:	443c      	add	r4, r7
34000afa:	e744      	b.n	34000986 <__udivmoddi4+0x1b6>
34000afc:	3b02      	subs	r3, #2
34000afe:	443c      	add	r4, r7
34000b00:	e75e      	b.n	340009c0 <__udivmoddi4+0x1f0>
34000b02:	4649      	mov	r1, r9
34000b04:	e78d      	b.n	34000a22 <__udivmoddi4+0x252>
34000b06:	eba1 0108 	sub.w	r1, r1, r8
34000b0a:	46cc      	mov	ip, r9
34000b0c:	fbb1 f9fe 	udiv	r9, r1, lr
34000b10:	fb09 f804 	mul.w	r8, r9, r4
34000b14:	e7b8      	b.n	34000a88 <__udivmoddi4+0x2b8>
34000b16:	bf00      	nop

34000b18 <__aeabi_idiv0>:
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop

34000b1c <getIdentityWeights_int8>:
	LL_ATON_RT_Main(&NN_Instance_int8);

	return (float*)(matmulInfo_Float.output_start);
}

int8_t* getIdentityWeights_int8(size_t insize, size_t outsize) {
34000b1c:	b580      	push	{r7, lr}
34000b1e:	b086      	sub	sp, #24
34000b20:	af00      	add	r7, sp, #0
34000b22:	6078      	str	r0, [r7, #4]
34000b24:	6039      	str	r1, [r7, #0]
    int8_t* identity = malloc(insize * outsize * sizeof(int8_t));
34000b26:	687b      	ldr	r3, [r7, #4]
34000b28:	683a      	ldr	r2, [r7, #0]
34000b2a:	fb02 f303 	mul.w	r3, r2, r3
34000b2e:	4618      	mov	r0, r3
34000b30:	f017 f932 	bl	34017d98 <malloc>
34000b34:	4603      	mov	r3, r0
34000b36:	60fb      	str	r3, [r7, #12]
    if (identity == NULL) {
34000b38:	68fb      	ldr	r3, [r7, #12]
34000b3a:	2b00      	cmp	r3, #0
34000b3c:	d101      	bne.n	34000b42 <getIdentityWeights_int8+0x26>
        return NULL;
34000b3e:	2300      	movs	r3, #0
34000b40:	e036      	b.n	34000bb0 <getIdentityWeights_int8+0x94>
    }

    // Initialize the entire matrix to 0
    memset(identity, 0, insize * outsize * sizeof(int8_t));
34000b42:	687b      	ldr	r3, [r7, #4]
34000b44:	683a      	ldr	r2, [r7, #0]
34000b46:	fb02 f303 	mul.w	r3, r2, r3
34000b4a:	461a      	mov	r2, r3
34000b4c:	2100      	movs	r1, #0
34000b4e:	68f8      	ldr	r0, [r7, #12]
34000b50:	f018 f8ec 	bl	34018d2c <memset>

    // Set 1 on the diagonal
    for (size_t i = 0; i < insize; i++) {
34000b54:	2300      	movs	r3, #0
34000b56:	617b      	str	r3, [r7, #20]
34000b58:	e025      	b.n	34000ba6 <getIdentityWeights_int8+0x8a>
        for (size_t j = 0; j < outsize; j++) {
34000b5a:	2300      	movs	r3, #0
34000b5c:	613b      	str	r3, [r7, #16]
34000b5e:	e01b      	b.n	34000b98 <getIdentityWeights_int8+0x7c>
            if (i == j) {
34000b60:	697a      	ldr	r2, [r7, #20]
34000b62:	693b      	ldr	r3, [r7, #16]
34000b64:	429a      	cmp	r2, r3
34000b66:	d10a      	bne.n	34000b7e <getIdentityWeights_int8+0x62>
//            	printf("%4d: 1",i * outsize + j);
                identity[i * outsize + j] = 1;  // Set diagonal to 1
34000b68:	697b      	ldr	r3, [r7, #20]
34000b6a:	683a      	ldr	r2, [r7, #0]
34000b6c:	fb03 f202 	mul.w	r2, r3, r2
34000b70:	693b      	ldr	r3, [r7, #16]
34000b72:	4413      	add	r3, r2
34000b74:	68fa      	ldr	r2, [r7, #12]
34000b76:	4413      	add	r3, r2
34000b78:	2201      	movs	r2, #1
34000b7a:	701a      	strb	r2, [r3, #0]
34000b7c:	e009      	b.n	34000b92 <getIdentityWeights_int8+0x76>
            }
            else{
//            	printf("%4d: 0",i * outsize + j);
                identity[i * outsize + j] = 0;  // Set diagonal to 1
34000b7e:	697b      	ldr	r3, [r7, #20]
34000b80:	683a      	ldr	r2, [r7, #0]
34000b82:	fb03 f202 	mul.w	r2, r3, r2
34000b86:	693b      	ldr	r3, [r7, #16]
34000b88:	4413      	add	r3, r2
34000b8a:	68fa      	ldr	r2, [r7, #12]
34000b8c:	4413      	add	r3, r2
34000b8e:	2200      	movs	r2, #0
34000b90:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < outsize; j++) {
34000b92:	693b      	ldr	r3, [r7, #16]
34000b94:	3301      	adds	r3, #1
34000b96:	613b      	str	r3, [r7, #16]
34000b98:	693a      	ldr	r2, [r7, #16]
34000b9a:	683b      	ldr	r3, [r7, #0]
34000b9c:	429a      	cmp	r2, r3
34000b9e:	d3df      	bcc.n	34000b60 <getIdentityWeights_int8+0x44>
    for (size_t i = 0; i < insize; i++) {
34000ba0:	697b      	ldr	r3, [r7, #20]
34000ba2:	3301      	adds	r3, #1
34000ba4:	617b      	str	r3, [r7, #20]
34000ba6:	697a      	ldr	r2, [r7, #20]
34000ba8:	687b      	ldr	r3, [r7, #4]
34000baa:	429a      	cmp	r2, r3
34000bac:	d3d5      	bcc.n	34000b5a <getIdentityWeights_int8+0x3e>
//	    }
//	    printf("\n\r");
//	}
//

    return identity;
34000bae:	68fb      	ldr	r3, [r7, #12]
}
34000bb0:	4618      	mov	r0, r3
34000bb2:	3718      	adds	r7, #24
34000bb4:	46bd      	mov	sp, r7
34000bb6:	bd80      	pop	{r7, pc}

34000bb8 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
34000bb8:	b580      	push	{r7, lr}
34000bba:	b086      	sub	sp, #24
34000bbc:	af00      	add	r7, sp, #0
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
34000bbe:	4b21      	ldr	r3, [pc, #132]	@ (34000c44 <Fuse_Programming+0x8c>)
34000bc0:	607b      	str	r3, [r7, #4]

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
34000bc2:	237c      	movs	r3, #124	@ 0x7c
34000bc4:	617b      	str	r3, [r7, #20]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000bc6:	f107 020c 	add.w	r2, r7, #12
34000bca:	1d3b      	adds	r3, r7, #4
34000bcc:	6979      	ldr	r1, [r7, #20]
34000bce:	4618      	mov	r0, r3
34000bd0:	f002 fd3c 	bl	3400364c <HAL_BSEC_OTP_Read>
34000bd4:	4603      	mov	r3, r0
34000bd6:	2b00      	cmp	r3, #0
34000bd8:	d12e      	bne.n	34000c38 <Fuse_Programming+0x80>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
34000bda:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
34000bde:	613b      	str	r3, [r7, #16]
    if ((data & bit_mask) != bit_mask)
34000be0:	68fa      	ldr	r2, [r7, #12]
34000be2:	693b      	ldr	r3, [r7, #16]
34000be4:	4013      	ands	r3, r2
34000be6:	693a      	ldr	r2, [r7, #16]
34000be8:	429a      	cmp	r2, r3
34000bea:	d027      	beq.n	34000c3c <Fuse_Programming+0x84>
    {
      data |= bit_mask;
34000bec:	68fa      	ldr	r2, [r7, #12]
34000bee:	693b      	ldr	r3, [r7, #16]
34000bf0:	4313      	orrs	r3, r2
34000bf2:	60fb      	str	r3, [r7, #12]
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
34000bf4:	68fa      	ldr	r2, [r7, #12]
34000bf6:	1d38      	adds	r0, r7, #4
34000bf8:	2300      	movs	r3, #0
34000bfa:	6979      	ldr	r1, [r7, #20]
34000bfc:	f002 fd5e 	bl	340036bc <HAL_BSEC_OTP_Program>
34000c00:	4603      	mov	r3, r0
34000c02:	2b00      	cmp	r3, #0
34000c04:	d115      	bne.n	34000c32 <Fuse_Programming+0x7a>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
34000c06:	f107 020c 	add.w	r2, r7, #12
34000c0a:	1d3b      	adds	r3, r7, #4
34000c0c:	6979      	ldr	r1, [r7, #20]
34000c0e:	4618      	mov	r0, r3
34000c10:	f002 fd1c 	bl	3400364c <HAL_BSEC_OTP_Read>
34000c14:	4603      	mov	r3, r0
34000c16:	2b00      	cmp	r3, #0
34000c18:	d108      	bne.n	34000c2c <Fuse_Programming+0x74>
        {
          if ((data & bit_mask) != bit_mask)
34000c1a:	68fa      	ldr	r2, [r7, #12]
34000c1c:	693b      	ldr	r3, [r7, #16]
34000c1e:	4013      	ands	r3, r2
34000c20:	693a      	ldr	r2, [r7, #16]
34000c22:	429a      	cmp	r2, r3
34000c24:	d00a      	beq.n	34000c3c <Fuse_Programming+0x84>
          {
            /* Error : Fuse programming not taken in account */
            ErrorHandler();
34000c26:	f000 f80f 	bl	34000c48 <ErrorHandler>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
34000c2a:	e007      	b.n	34000c3c <Fuse_Programming+0x84>
          ErrorHandler();
34000c2c:	f000 f80c 	bl	34000c48 <ErrorHandler>
}
34000c30:	e004      	b.n	34000c3c <Fuse_Programming+0x84>
        ErrorHandler();
34000c32:	f000 f809 	bl	34000c48 <ErrorHandler>
}
34000c36:	e001      	b.n	34000c3c <Fuse_Programming+0x84>
    ErrorHandler();
34000c38:	f000 f806 	bl	34000c48 <ErrorHandler>
}
34000c3c:	bf00      	nop
34000c3e:	3718      	adds	r7, #24
34000c40:	46bd      	mov	sp, r7
34000c42:	bd80      	pop	{r7, pc}
34000c44:	56009000 	.word	0x56009000

34000c48 <ErrorHandler>:
/**
  * @brief  Handle error which occurs when calling HAL API
  * @retval None
  */
static void ErrorHandler(void)
{
34000c48:	b480      	push	{r7}
34000c4a:	af00      	add	r7, sp, #0
  while(1);
34000c4c:	bf00      	nop
34000c4e:	e7fd      	b.n	34000c4c <ErrorHandler+0x4>

34000c50 <LL_MEM_EnableClock>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClock(uint32_t Memories)
{
34000c50:	b480      	push	{r7}
34000c52:	b085      	sub	sp, #20
34000c54:	af00      	add	r7, sp, #0
34000c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMENSR, Memories);
34000c58:	4a07      	ldr	r2, [pc, #28]	@ (34000c78 <LL_MEM_EnableClock+0x28>)
34000c5a:	687b      	ldr	r3, [r7, #4]
34000c5c:	f8c2 3a4c 	str.w	r3, [r2, #2636]	@ 0xa4c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMENR);
34000c60:	4b05      	ldr	r3, [pc, #20]	@ (34000c78 <LL_MEM_EnableClock+0x28>)
34000c62:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
34000c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c68:	68fb      	ldr	r3, [r7, #12]
}
34000c6a:	bf00      	nop
34000c6c:	3714      	adds	r7, #20
34000c6e:	46bd      	mov	sp, r7
34000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
34000c74:	4770      	bx	lr
34000c76:	bf00      	nop
34000c78:	56028000 	.word	0x56028000

34000c7c <LL_MEM_EnableClockLowPower>:
  *         @arg @ref LL_MEM_CACHEAXIRAM
  *         @arg @ref LL_MEM_VENCRAM
  * @retval None
  */
__STATIC_INLINE void LL_MEM_EnableClockLowPower(uint32_t Memories)
{
34000c7c:	b480      	push	{r7}
34000c7e:	b085      	sub	sp, #20
34000c80:	af00      	add	r7, sp, #0
34000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MEMLPENSR, Memories);
34000c84:	4a07      	ldr	r2, [pc, #28]	@ (34000ca4 <LL_MEM_EnableClockLowPower+0x28>)
34000c86:	687b      	ldr	r3, [r7, #4]
34000c88:	f8c2 3a8c 	str.w	r3, [r2, #2700]	@ 0xa8c
  /* Delay after an RCC memories clock enabling */
  tmpreg = READ_REG(RCC->MEMLPENR);
34000c8c:	4b05      	ldr	r3, [pc, #20]	@ (34000ca4 <LL_MEM_EnableClockLowPower+0x28>)
34000c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
34000c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000c94:	68fb      	ldr	r3, [r7, #12]
}
34000c96:	bf00      	nop
34000c98:	3714      	adds	r7, #20
34000c9a:	46bd      	mov	sp, r7
34000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ca0:	4770      	bx	lr
34000ca2:	bf00      	nop
34000ca4:	56028000 	.word	0x56028000

34000ca8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_MDF1
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADF1
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
34000ca8:	b480      	push	{r7}
34000caa:	b085      	sub	sp, #20
34000cac:	af00      	add	r7, sp, #0
34000cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34000cb0:	4a07      	ldr	r2, [pc, #28]	@ (34000cd0 <LL_AHB2_GRP1_EnableClock+0x28>)
34000cb2:	687b      	ldr	r3, [r7, #4]
34000cb4:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB2ENR);
34000cb8:	4b05      	ldr	r3, [pc, #20]	@ (34000cd0 <LL_AHB2_GRP1_EnableClock+0x28>)
34000cba:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
34000cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000cc0:	68fb      	ldr	r3, [r7, #12]
}
34000cc2:	bf00      	nop
34000cc4:	3714      	adds	r7, #20
34000cc6:	46bd      	mov	sp, r7
34000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ccc:	4770      	bx	lr
34000cce:	bf00      	nop
34000cd0:	56028000 	.word	0x56028000

34000cd4 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34000cd4:	b480      	push	{r7}
34000cd6:	b085      	sub	sp, #20
34000cd8:	af00      	add	r7, sp, #0
34000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000cdc:	4a07      	ldr	r2, [pc, #28]	@ (34000cfc <LL_AHB3_GRP1_EnableClock+0x28>)
34000cde:	687b      	ldr	r3, [r7, #4]
34000ce0:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34000ce4:	4b05      	ldr	r3, [pc, #20]	@ (34000cfc <LL_AHB3_GRP1_EnableClock+0x28>)
34000ce6:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34000cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000cec:	68fb      	ldr	r3, [r7, #12]
}
34000cee:	bf00      	nop
34000cf0:	3714      	adds	r7, #20
34000cf2:	46bd      	mov	sp, r7
34000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
34000cf8:	4770      	bx	lr
34000cfa:	bf00      	nop
34000cfc:	56028000 	.word	0x56028000

34000d00 <LL_AHB3_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
34000d00:	b480      	push	{r7}
34000d02:	b083      	sub	sp, #12
34000d04:	af00      	add	r7, sp, #0
34000d06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
34000d08:	4a04      	ldr	r2, [pc, #16]	@ (34000d1c <LL_AHB3_GRP1_ForceReset+0x1c>)
34000d0a:	687b      	ldr	r3, [r7, #4]
34000d0c:	f8c2 3a18 	str.w	r3, [r2, #2584]	@ 0xa18
}
34000d10:	bf00      	nop
34000d12:	370c      	adds	r7, #12
34000d14:	46bd      	mov	sp, r7
34000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d1a:	4770      	bx	lr
34000d1c:	56028000 	.word	0x56028000

34000d20 <LL_AHB3_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
34000d20:	b480      	push	{r7}
34000d22:	b083      	sub	sp, #12
34000d24:	af00      	add	r7, sp, #0
34000d26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
34000d28:	4b06      	ldr	r3, [pc, #24]	@ (34000d44 <LL_AHB3_GRP1_ReleaseReset+0x24>)
34000d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000d2e:	461a      	mov	r2, r3
34000d30:	687b      	ldr	r3, [r7, #4]
34000d32:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
}
34000d36:	bf00      	nop
34000d38:	370c      	adds	r7, #12
34000d3a:	46bd      	mov	sp, r7
34000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d40:	4770      	bx	lr
34000d42:	bf00      	nop
34000d44:	56028000 	.word	0x56028000

34000d48 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34000d48:	b480      	push	{r7}
34000d4a:	b085      	sub	sp, #20
34000d4c:	af00      	add	r7, sp, #0
34000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34000d50:	4a07      	ldr	r2, [pc, #28]	@ (34000d70 <LL_AHB5_GRP1_EnableClock+0x28>)
34000d52:	687b      	ldr	r3, [r7, #4]
34000d54:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34000d58:	4b05      	ldr	r3, [pc, #20]	@ (34000d70 <LL_AHB5_GRP1_EnableClock+0x28>)
34000d5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34000d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000d60:	68fb      	ldr	r3, [r7, #12]
}
34000d62:	bf00      	nop
34000d64:	3714      	adds	r7, #20
34000d66:	46bd      	mov	sp, r7
34000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d6c:	4770      	bx	lr
34000d6e:	bf00      	nop
34000d70:	56028000 	.word	0x56028000

34000d74 <LL_AHB5_GRP1_ForceReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ForceReset(uint32_t Periphs)
{
34000d74:	b480      	push	{r7}
34000d76:	b083      	sub	sp, #12
34000d78:	af00      	add	r7, sp, #0
34000d7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34000d7c:	4a04      	ldr	r2, [pc, #16]	@ (34000d90 <LL_AHB5_GRP1_ForceReset+0x1c>)
34000d7e:	687b      	ldr	r3, [r7, #4]
34000d80:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34000d84:	bf00      	nop
34000d86:	370c      	adds	r7, #12
34000d88:	46bd      	mov	sp, r7
34000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34000d8e:	4770      	bx	lr
34000d90:	56028000 	.word	0x56028000

34000d94 <LL_AHB5_GRP1_ReleaseReset>:
  *         @arg @ref LL_AHB5_GRP1_PERIPH_CACHEAXI
  *         @arg @ref LL_AHB5_GRP1_PERIPH_NPU
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_ReleaseReset(uint32_t Periphs)
{
34000d94:	b480      	push	{r7}
34000d96:	b083      	sub	sp, #12
34000d98:	af00      	add	r7, sp, #0
34000d9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34000d9c:	4b06      	ldr	r3, [pc, #24]	@ (34000db8 <LL_AHB5_GRP1_ReleaseReset+0x24>)
34000d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34000da2:	461a      	mov	r2, r3
34000da4:	687b      	ldr	r3, [r7, #4]
34000da6:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34000daa:	bf00      	nop
34000dac:	370c      	adds	r7, #12
34000dae:	46bd      	mov	sp, r7
34000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
34000db4:	4770      	bx	lr
34000db6:	bf00      	nop
34000db8:	56028000 	.word	0x56028000

34000dbc <LL_AHB5_GRP1_EnableClockLowPower>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000dbc:	b480      	push	{r7}
34000dbe:	b085      	sub	sp, #20
34000dc0:	af00      	add	r7, sp, #0
34000dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
34000dc4:	4a07      	ldr	r2, [pc, #28]	@ (34000de4 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000dc6:	687b      	ldr	r3, [r7, #4]
34000dc8:	f8c2 3aa0 	str.w	r3, [r2, #2720]	@ 0xaa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5LPENR);
34000dcc:	4b05      	ldr	r3, [pc, #20]	@ (34000de4 <LL_AHB5_GRP1_EnableClockLowPower+0x28>)
34000dce:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
34000dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000dd4:	68fb      	ldr	r3, [r7, #12]
}
34000dd6:	bf00      	nop
34000dd8:	3714      	adds	r7, #20
34000dda:	46bd      	mov	sp, r7
34000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
34000de0:	4770      	bx	lr
34000de2:	bf00      	nop
34000de4:	56028000 	.word	0x56028000

34000de8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34000de8:	b480      	push	{r7}
34000dea:	b085      	sub	sp, #20
34000dec:	af00      	add	r7, sp, #0
34000dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000df0:	4a07      	ldr	r2, [pc, #28]	@ (34000e10 <LL_APB2_GRP1_EnableClock+0x28>)
34000df2:	687b      	ldr	r3, [r7, #4]
34000df4:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000df8:	4b05      	ldr	r3, [pc, #20]	@ (34000e10 <LL_APB2_GRP1_EnableClock+0x28>)
34000dfa:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000dfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000e00:	68fb      	ldr	r3, [r7, #12]
}
34000e02:	bf00      	nop
34000e04:	3714      	adds	r7, #20
34000e06:	46bd      	mov	sp, r7
34000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e0c:	4770      	bx	lr
34000e0e:	bf00      	nop
34000e10:	56028000 	.word	0x56028000

34000e14 <LL_APB5_GRP1_EnableClockLowPower>:
  *         @arg @ref LL_APB5_GRP1_PERIPH_LTDC
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
34000e14:	b480      	push	{r7}
34000e16:	b085      	sub	sp, #20
34000e18:	af00      	add	r7, sp, #0
34000e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34000e1c:	4a07      	ldr	r2, [pc, #28]	@ (34000e3c <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000e1e:	687b      	ldr	r3, [r7, #4]
34000e20:	f8c2 3abc 	str.w	r3, [r2, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34000e24:	4b05      	ldr	r3, [pc, #20]	@ (34000e3c <LL_APB5_GRP1_EnableClockLowPower+0x28>)
34000e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
34000e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000e2c:	68fb      	ldr	r3, [r7, #12]
}
34000e2e:	bf00      	nop
34000e30:	3714      	adds	r7, #20
34000e32:	46bd      	mov	sp, r7
34000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e38:	4770      	bx	lr
34000e3a:	bf00      	nop
34000e3c:	56028000 	.word	0x56028000

34000e40 <LL_RCC_SetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_IC1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetCpuClkSource(uint32_t Source)
{
34000e40:	b480      	push	{r7}
34000e42:	b083      	sub	sp, #12
34000e44:	af00      	add	r7, sp, #0
34000e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
34000e48:	4b06      	ldr	r3, [pc, #24]	@ (34000e64 <LL_RCC_SetCpuClkSource+0x24>)
34000e4a:	6a1b      	ldr	r3, [r3, #32]
34000e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34000e50:	4904      	ldr	r1, [pc, #16]	@ (34000e64 <LL_RCC_SetCpuClkSource+0x24>)
34000e52:	687b      	ldr	r3, [r7, #4]
34000e54:	4313      	orrs	r3, r2
34000e56:	620b      	str	r3, [r1, #32]
}
34000e58:	bf00      	nop
34000e5a:	370c      	adds	r7, #12
34000e5c:	46bd      	mov	sp, r7
34000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e62:	4770      	bx	lr
34000e64:	56028000 	.word	0x56028000

34000e68 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_IC2_IC6_IC11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
34000e68:	b480      	push	{r7}
34000e6a:	b083      	sub	sp, #12
34000e6c:	af00      	add	r7, sp, #0
34000e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
34000e70:	4b06      	ldr	r3, [pc, #24]	@ (34000e8c <LL_RCC_SetSysClkSource+0x24>)
34000e72:	6a1b      	ldr	r3, [r3, #32]
34000e74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34000e78:	4904      	ldr	r1, [pc, #16]	@ (34000e8c <LL_RCC_SetSysClkSource+0x24>)
34000e7a:	687b      	ldr	r3, [r7, #4]
34000e7c:	4313      	orrs	r3, r2
34000e7e:	620b      	str	r3, [r1, #32]
}
34000e80:	bf00      	nop
34000e82:	370c      	adds	r7, #12
34000e84:	46bd      	mov	sp, r7
34000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e8a:	4770      	bx	lr
34000e8c:	56028000 	.word	0x56028000

34000e90 <enableTiming_Cyc>:
int main_NPU_int8(void);
int main_NPU_float(void);
int main_ARM_int8(void);
int main_ARM_float(void);

void enableTiming_Cyc(void){
34000e90:	b480      	push	{r7}
34000e92:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
34000e94:	4b08      	ldr	r3, [pc, #32]	@ (34000eb8 <enableTiming_Cyc+0x28>)
34000e96:	68db      	ldr	r3, [r3, #12]
34000e98:	4a07      	ldr	r2, [pc, #28]	@ (34000eb8 <enableTiming_Cyc+0x28>)
34000e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34000e9e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Enable cycle counter
34000ea0:	4b06      	ldr	r3, [pc, #24]	@ (34000ebc <enableTiming_Cyc+0x2c>)
34000ea2:	681b      	ldr	r3, [r3, #0]
34000ea4:	4a05      	ldr	r2, [pc, #20]	@ (34000ebc <enableTiming_Cyc+0x2c>)
34000ea6:	f043 0301 	orr.w	r3, r3, #1
34000eaa:	6013      	str	r3, [r2, #0]
}
34000eac:	bf00      	nop
34000eae:	46bd      	mov	sp, r7
34000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
34000eb4:	4770      	bx	lr
34000eb6:	bf00      	nop
34000eb8:	e000edf0 	.word	0xe000edf0
34000ebc:	e0001000 	.word	0xe0001000

34000ec0 <startTiming_Cyc>:

void startTiming_Cyc(void){
34000ec0:	b480      	push	{r7}
34000ec2:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; // Reset counter
34000ec4:	4b03      	ldr	r3, [pc, #12]	@ (34000ed4 <startTiming_Cyc+0x14>)
34000ec6:	2200      	movs	r2, #0
34000ec8:	605a      	str	r2, [r3, #4]
}
34000eca:	bf00      	nop
34000ecc:	46bd      	mov	sp, r7
34000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ed2:	4770      	bx	lr
34000ed4:	e0001000 	.word	0xe0001000

34000ed8 <getTiming_Cyc>:

uint32_t getTiming_Cyc(){
34000ed8:	b480      	push	{r7}
34000eda:	b083      	sub	sp, #12
34000edc:	af00      	add	r7, sp, #0
	uint32_t cycles = DWT->CYCCNT;
34000ede:	4b05      	ldr	r3, [pc, #20]	@ (34000ef4 <getTiming_Cyc+0x1c>)
34000ee0:	685b      	ldr	r3, [r3, #4]
34000ee2:	607b      	str	r3, [r7, #4]
	return cycles;
34000ee4:	687b      	ldr	r3, [r7, #4]
}
34000ee6:	4618      	mov	r0, r3
34000ee8:	370c      	adds	r7, #12
34000eea:	46bd      	mov	sp, r7
34000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
34000ef0:	4770      	bx	lr
34000ef2:	bf00      	nop
34000ef4:	e0001000 	.word	0xe0001000

34000ef8 <main>:

int main(void)
{
34000ef8:	b580      	push	{r7, lr}
34000efa:	af00      	add	r7, sp, #0
	Hardware_init();
34000efc:	f000 f8f6 	bl	340010ec <Hardware_init>
	enableTiming_Cyc();
34000f00:	f7ff ffc6 	bl	34000e90 <enableTiming_Cyc>
    main_ARM_int8();
34000f04:	f000 f804 	bl	34000f10 <main_ARM_int8>
34000f08:	2300      	movs	r3, #0
}
34000f0a:	4618      	mov	r0, r3
34000f0c:	bd80      	pop	{r7, pc}
	...

34000f10 <main_ARM_int8>:
			printf("Output %2d: %4.0f\n\r",i,output);
		}
	}
}

int main_ARM_int8(void) {
34000f10:	e92d 4f90 	stmdb	sp!, {r4, r7, r8, r9, sl, fp, lr}
34000f14:	b091      	sub	sp, #68	@ 0x44
34000f16:	af02      	add	r7, sp, #8
34000f18:	466b      	mov	r3, sp
34000f1a:	461c      	mov	r4, r3
//	    int32_t* result,        // Output vector of size M
//	    uint32_t M,             // Number of rows
//	    uint32_t N              // Number of columns (must be multiple of 4)
//	);

    size_t insize = 8;
34000f1c:	2308      	movs	r3, #8
34000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t outsize = 8;
34000f20:	2308      	movs	r3, #8
34000f22:	627b      	str	r3, [r7, #36]	@ 0x24

    int8_t inVec[insize];
34000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34000f26:	461a      	mov	r2, r3
34000f28:	3a01      	subs	r2, #1
34000f2a:	623a      	str	r2, [r7, #32]
34000f2c:	2200      	movs	r2, #0
34000f2e:	603b      	str	r3, [r7, #0]
34000f30:	607a      	str	r2, [r7, #4]
34000f32:	2200      	movs	r2, #0
34000f34:	4618      	mov	r0, r3
34000f36:	4611      	mov	r1, r2
34000f38:	3307      	adds	r3, #7
34000f3a:	08db      	lsrs	r3, r3, #3
34000f3c:	00db      	lsls	r3, r3, #3
34000f3e:	ebad 0d03 	sub.w	sp, sp, r3
34000f42:	ab02      	add	r3, sp, #8
34000f44:	3300      	adds	r3, #0
34000f46:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < insize; i++) {
34000f48:	2300      	movs	r3, #0
34000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
34000f4c:	e009      	b.n	34000f62 <main_ARM_int8+0x52>
    	inVec[i] = (int8_t)(i);  // e.g., 0, 16, 32, ..., 112
34000f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000f50:	b259      	sxtb	r1, r3
34000f52:	69fa      	ldr	r2, [r7, #28]
34000f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000f56:	4413      	add	r3, r2
34000f58:	460a      	mov	r2, r1
34000f5a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < insize; i++) {
34000f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000f5e:	3301      	adds	r3, #1
34000f60:	637b      	str	r3, [r7, #52]	@ 0x34
34000f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34000f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34000f66:	429a      	cmp	r2, r3
34000f68:	d8f1      	bhi.n	34000f4e <main_ARM_int8+0x3e>
    	}
    int32_t outVec[outsize];
34000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34000f6c:	461a      	mov	r2, r3
34000f6e:	3a01      	subs	r2, #1
34000f70:	61ba      	str	r2, [r7, #24]
34000f72:	2200      	movs	r2, #0
34000f74:	469a      	mov	sl, r3
34000f76:	4693      	mov	fp, r2
34000f78:	2200      	movs	r2, #0
34000f7a:	4698      	mov	r8, r3
34000f7c:	4691      	mov	r9, r2
34000f7e:	009b      	lsls	r3, r3, #2
34000f80:	3307      	adds	r3, #7
34000f82:	08db      	lsrs	r3, r3, #3
34000f84:	00db      	lsls	r3, r3, #3
34000f86:	ebad 0d03 	sub.w	sp, sp, r3
34000f8a:	ab02      	add	r3, sp, #8
34000f8c:	3303      	adds	r3, #3
34000f8e:	089b      	lsrs	r3, r3, #2
34000f90:	009b      	lsls	r3, r3, #2
34000f92:	617b      	str	r3, [r7, #20]

    // Identity weight matrix
    int8_t* identityWeights = getIdentityWeights_int8(insize, outsize);
34000f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
34000f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
34000f98:	f7ff fdc0 	bl	34000b1c <getIdentityWeights_int8>
34000f9c:	6138      	str	r0, [r7, #16]

    if (!identityWeights) {
34000f9e:	693b      	ldr	r3, [r7, #16]
34000fa0:	2b00      	cmp	r3, #0
34000fa2:	d106      	bne.n	34000fb2 <main_ARM_int8+0xa2>
        printf("Memory allocation failed\n");
34000fa4:	4828      	ldr	r0, [pc, #160]	@ (34001048 <main_ARM_int8+0x138>)
34000fa6:	f017 fde1 	bl	34018b6c <puts>
        return -1;
34000faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34000fae:	46a5      	mov	sp, r4
34000fb0:	e044      	b.n	3400103c <main_ARM_int8+0x12c>
    }

    for (int i = 0; i < insize; i++) {
34000fb2:	2300      	movs	r3, #0
34000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
34000fb6:	e00c      	b.n	34000fd2 <main_ARM_int8+0xc2>
        printf("inVec[%d] = %4d", i, inVec[i]);
34000fb8:	69fa      	ldr	r2, [r7, #28]
34000fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34000fbc:	4413      	add	r3, r2
34000fbe:	f993 3000 	ldrsb.w	r3, [r3]
34000fc2:	461a      	mov	r2, r3
34000fc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
34000fc6:	4821      	ldr	r0, [pc, #132]	@ (3400104c <main_ARM_int8+0x13c>)
34000fc8:	f017 fd68 	bl	34018a9c <iprintf>
    for (int i = 0; i < insize; i++) {
34000fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34000fce:	3301      	adds	r3, #1
34000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
34000fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34000fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34000fd6:	429a      	cmp	r2, r3
34000fd8:	d8ee      	bhi.n	34000fb8 <main_ARM_int8+0xa8>
    }
    printf("\n\r");
34000fda:	481d      	ldr	r0, [pc, #116]	@ (34001050 <main_ARM_int8+0x140>)
34000fdc:	f017 fd5e 	bl	34018a9c <iprintf>

    while(1){
		// Start benchmarking
    	startTiming_Cyc();
34000fe0:	f7ff ff6e 	bl	34000ec0 <startTiming_Cyc>

    	simd_matrix_vector_mul_int8(identityWeights,inVec,outVec,outsize,insize);
34000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34000fe6:	9300      	str	r3, [sp, #0]
34000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34000fea:	697a      	ldr	r2, [r7, #20]
34000fec:	69f9      	ldr	r1, [r7, #28]
34000fee:	6938      	ldr	r0, [r7, #16]
34000ff0:	f016 fb7c 	bl	340176ec <simd_matrix_vector_mul_int8>
		uint32_t cycles = getTiming_Cyc();
34000ff4:	f7ff ff70 	bl	34000ed8 <getTiming_Cyc>
34000ff8:	60f8      	str	r0, [r7, #12]

		printf("Output MatVec ARM\n\r");
34000ffa:	4816      	ldr	r0, [pc, #88]	@ (34001054 <main_ARM_int8+0x144>)
34000ffc:	f017 fd4e 	bl	34018a9c <iprintf>
		printf("Cycles: %6d\n\r",cycles);
34001000:	68f9      	ldr	r1, [r7, #12]
34001002:	4815      	ldr	r0, [pc, #84]	@ (34001058 <main_ARM_int8+0x148>)
34001004:	f017 fd4a 	bl	34018a9c <iprintf>
		for(int i = 0; i < outsize; i++){
34001008:	2300      	movs	r3, #0
3400100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400100c:	e00b      	b.n	34001026 <main_ARM_int8+0x116>
			printf("Output[%d]: %4d\n\r",i,outVec[i]);
3400100e:	697b      	ldr	r3, [r7, #20]
34001010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34001016:	461a      	mov	r2, r3
34001018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3400101a:	4810      	ldr	r0, [pc, #64]	@ (3400105c <main_ARM_int8+0x14c>)
3400101c:	f017 fd3e 	bl	34018a9c <iprintf>
		for(int i = 0; i < outsize; i++){
34001020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34001022:	3301      	adds	r3, #1
34001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
34001026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34001028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3400102a:	429a      	cmp	r2, r3
3400102c:	d8ef      	bhi.n	3400100e <main_ARM_int8+0xfe>
		}
		controllOutput(inVec,identityWeights,insize,outsize);
3400102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34001032:	6939      	ldr	r1, [r7, #16]
34001034:	69f8      	ldr	r0, [r7, #28]
34001036:	f000 f813 	bl	34001060 <controllOutput>
    while(1){
3400103a:	e7d1      	b.n	34000fe0 <main_ARM_int8+0xd0>
    }
    return 0;
}
3400103c:	4618      	mov	r0, r3
3400103e:	373c      	adds	r7, #60	@ 0x3c
34001040:	46bd      	mov	sp, r7
34001042:	e8bd 8f90 	ldmia.w	sp!, {r4, r7, r8, r9, sl, fp, pc}
34001046:	bf00      	nop
34001048:	3401a740 	.word	0x3401a740
3400104c:	3401a75c 	.word	0x3401a75c
34001050:	3401a76c 	.word	0x3401a76c
34001054:	3401a770 	.word	0x3401a770
34001058:	3401a784 	.word	0x3401a784
3400105c:	3401a794 	.word	0x3401a794

34001060 <controllOutput>:
//		setOutputZero(nn_out[0],nn_out_len[0]);

    }
}

void controllOutput(int8_t* in, int8_t* weights, size_t insize, size_t outsize) {
34001060:	b580      	push	{r7, lr}
34001062:	b088      	sub	sp, #32
34001064:	af00      	add	r7, sp, #0
34001066:	60f8      	str	r0, [r7, #12]
34001068:	60b9      	str	r1, [r7, #8]
3400106a:	607a      	str	r2, [r7, #4]
3400106c:	603b      	str	r3, [r7, #0]
    printf("Controll Output:\n\r ");
3400106e:	481c      	ldr	r0, [pc, #112]	@ (340010e0 <controllOutput+0x80>)
34001070:	f017 fd14 	bl	34018a9c <iprintf>
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
34001074:	2300      	movs	r3, #0
34001076:	61fb      	str	r3, [r7, #28]
34001078:	e027      	b.n	340010ca <controllOutput+0x6a>
        int32_t acc = 0;
3400107a:	2300      	movs	r3, #0
3400107c:	61bb      	str	r3, [r7, #24]
        for (size_t j = 0; j < insize; j++) {  // Iterate over input size
3400107e:	2300      	movs	r3, #0
34001080:	617b      	str	r3, [r7, #20]
34001082:	e017      	b.n	340010b4 <controllOutput+0x54>
//        	printf("In: %3d, Weight: %3d\n\r",(int32_t)in[j],(int32_t)weights[i * outsize + j]);
            acc += in[j] * weights[i + outsize * j];  // Correct indexing
34001084:	68fa      	ldr	r2, [r7, #12]
34001086:	697b      	ldr	r3, [r7, #20]
34001088:	4413      	add	r3, r2
3400108a:	f993 3000 	ldrsb.w	r3, [r3]
3400108e:	4619      	mov	r1, r3
34001090:	683b      	ldr	r3, [r7, #0]
34001092:	697a      	ldr	r2, [r7, #20]
34001094:	fb03 f202 	mul.w	r2, r3, r2
34001098:	69fb      	ldr	r3, [r7, #28]
3400109a:	4413      	add	r3, r2
3400109c:	68ba      	ldr	r2, [r7, #8]
3400109e:	4413      	add	r3, r2
340010a0:	f993 3000 	ldrsb.w	r3, [r3]
340010a4:	fb01 f303 	mul.w	r3, r1, r3
340010a8:	69ba      	ldr	r2, [r7, #24]
340010aa:	4413      	add	r3, r2
340010ac:	61bb      	str	r3, [r7, #24]
        for (size_t j = 0; j < insize; j++) {  // Iterate over input size
340010ae:	697b      	ldr	r3, [r7, #20]
340010b0:	3301      	adds	r3, #1
340010b2:	617b      	str	r3, [r7, #20]
340010b4:	697a      	ldr	r2, [r7, #20]
340010b6:	687b      	ldr	r3, [r7, #4]
340010b8:	429a      	cmp	r2, r3
340010ba:	d3e3      	bcc.n	34001084 <controllOutput+0x24>
        }
        printf("%3d ", acc);  // Print the result as a 32-bit integer
340010bc:	69b9      	ldr	r1, [r7, #24]
340010be:	4809      	ldr	r0, [pc, #36]	@ (340010e4 <controllOutput+0x84>)
340010c0:	f017 fcec 	bl	34018a9c <iprintf>
    for (size_t i = 0; i < outsize; i++) {  // Iterate over output size
340010c4:	69fb      	ldr	r3, [r7, #28]
340010c6:	3301      	adds	r3, #1
340010c8:	61fb      	str	r3, [r7, #28]
340010ca:	69fa      	ldr	r2, [r7, #28]
340010cc:	683b      	ldr	r3, [r7, #0]
340010ce:	429a      	cmp	r2, r3
340010d0:	d3d3      	bcc.n	3400107a <controllOutput+0x1a>
    }
    printf("\n\r");
340010d2:	4805      	ldr	r0, [pc, #20]	@ (340010e8 <controllOutput+0x88>)
340010d4:	f017 fce2 	bl	34018a9c <iprintf>
}
340010d8:	bf00      	nop
340010da:	3720      	adds	r7, #32
340010dc:	46bd      	mov	sp, r7
340010de:	bd80      	pop	{r7, pc}
340010e0:	3401a880 	.word	0x3401a880
340010e4:	3401a894 	.word	0x3401a894
340010e8:	3401a76c 	.word	0x3401a76c

340010ec <Hardware_init>:
	}
}


static void Hardware_init(void)
{
340010ec:	b580      	push	{r7, lr}
340010ee:	b086      	sub	sp, #24
340010f0:	af00      	add	r7, sp, #0
  /* Power on ICACHE */
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
340010f2:	4b31      	ldr	r3, [pc, #196]	@ (340011b8 <Hardware_init+0xcc>)
340010f4:	681b      	ldr	r3, [r3, #0]
340010f6:	4a30      	ldr	r2, [pc, #192]	@ (340011b8 <Hardware_init+0xcc>)
340010f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340010fc:	6013      	str	r3, [r2, #0]

  /* Set back system and CPU clock source to HSI */
  __HAL_RCC_CPUCLK_CONFIG(RCC_CPUCLKSOURCE_HSI);
340010fe:	2000      	movs	r0, #0
34001100:	f7ff fe9e 	bl	34000e40 <LL_RCC_SetCpuClkSource>
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
34001104:	2000      	movs	r0, #0
34001106:	f7ff feaf 	bl	34000e68 <LL_RCC_SetSysClkSource>
  __HAL_RCC_USART1_CLK_ENABLE();
3400110a:	2010      	movs	r0, #16
3400110c:	f7ff fe6c 	bl	34000de8 <LL_APB2_GRP1_EnableClock>

  HAL_Init();
34001110:	f002 fa06 	bl	34003520 <HAL_Init>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34001114:	4b29      	ldr	r3, [pc, #164]	@ (340011bc <Hardware_init+0xd0>)
34001116:	695b      	ldr	r3, [r3, #20]
34001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400111c:	2b00      	cmp	r3, #0
3400111e:	d11b      	bne.n	34001158 <Hardware_init+0x6c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
34001120:	f3bf 8f4f 	dsb	sy
}
34001124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001126:	f3bf 8f6f 	isb	sy
}
3400112a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3400112c:	4b23      	ldr	r3, [pc, #140]	@ (340011bc <Hardware_init+0xd0>)
3400112e:	2200      	movs	r2, #0
34001130:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34001134:	f3bf 8f4f 	dsb	sy
}
34001138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3400113a:	f3bf 8f6f 	isb	sy
}
3400113e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
34001140:	4b1e      	ldr	r3, [pc, #120]	@ (340011bc <Hardware_init+0xd0>)
34001142:	695b      	ldr	r3, [r3, #20]
34001144:	4a1d      	ldr	r2, [pc, #116]	@ (340011bc <Hardware_init+0xd0>)
34001146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3400114a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3400114c:	f3bf 8f4f 	dsb	sy
}
34001150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34001152:	f3bf 8f6f 	isb	sy
}
34001156:	e000      	b.n	3400115a <Hardware_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
34001158:	bf00      	nop
#if defined(USE_DCACHE)
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
  SCB_EnableDCache();
#endif

  SystemClock_Config();
3400115a:	f000 f945 	bl	340013e8 <SystemClock_Config>

  NPURam_enable();
3400115e:	f000 f845 	bl	340011ec <NPURam_enable>
  Fuse_Programming();
34001162:	f7ff fd29 	bl	34000bb8 <Fuse_Programming>
  NPUCache_config();
34001166:	f000 f8bc 	bl	340012e2 <NPUCache_config>

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3400116a:	2301      	movs	r3, #1
3400116c:	753b      	strb	r3, [r7, #20]
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
3400116e:	2301      	movs	r3, #1
34001170:	757b      	strb	r3, [r7, #21]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
34001172:	f107 0314 	add.w	r3, r7, #20
34001176:	4619      	mov	r1, r3
34001178:	2000      	movs	r0, #0
3400117a:	f001 f975 	bl	34002468 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
3400117e:	2000      	movs	r0, #0
34001180:	f001 fa58 	bl	34002634 <BSP_XSPI_NOR_EnableMemoryMappedMode>

  Security_Config();
34001184:	f000 f8b6 	bl	340012f4 <Security_Config>
  IAC_Config();
34001188:	f000 f91a 	bl	340013c0 <IAC_Config>
  set_clk_sleep_mode();
3400118c:	f000 f876 	bl	3400127c <set_clk_sleep_mode>

  /*** Now initialize UART ***/
  COM_InitTypeDef com_config = {
34001190:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
34001194:	607b      	str	r3, [r7, #4]
34001196:	2300      	movs	r3, #0
34001198:	60bb      	str	r3, [r7, #8]
3400119a:	2300      	movs	r3, #0
3400119c:	81bb      	strh	r3, [r7, #12]
3400119e:	2300      	movs	r3, #0
340011a0:	81fb      	strh	r3, [r7, #14]
340011a2:	2300      	movs	r3, #0
340011a4:	823b      	strh	r3, [r7, #16]
    .WordLength = UART_WORDLENGTH_8B,
    .StopBits = UART_STOPBITS_1,
    .Parity = UART_PARITY_NONE,
    .HwFlowCtl = UART_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &com_config);
340011a6:	1d3b      	adds	r3, r7, #4
340011a8:	4619      	mov	r1, r3
340011aa:	2000      	movs	r0, #0
340011ac:	f001 f81e 	bl	340021ec <BSP_COM_Init>
}
340011b0:	bf00      	nop
340011b2:	3718      	adds	r7, #24
340011b4:	46bd      	mov	sp, r7
340011b6:	bd80      	pop	{r7, pc}
340011b8:	e001e000 	.word	0xe001e000
340011bc:	e000ed00 	.word	0xe000ed00

340011c0 <_write>:

int _write(int file, char *ptr, int len)
{
340011c0:	b580      	push	{r7, lr}
340011c2:	b084      	sub	sp, #16
340011c4:	af00      	add	r7, sp, #0
340011c6:	60f8      	str	r0, [r7, #12]
340011c8:	60b9      	str	r1, [r7, #8]
340011ca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)ptr, len, HAL_MAX_DELAY);
340011cc:	687b      	ldr	r3, [r7, #4]
340011ce:	b29a      	uxth	r2, r3
340011d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340011d4:	68b9      	ldr	r1, [r7, #8]
340011d6:	4804      	ldr	r0, [pc, #16]	@ (340011e8 <_write+0x28>)
340011d8:	f014 f93a 	bl	34015450 <HAL_UART_Transmit>
    return len;
340011dc:	687b      	ldr	r3, [r7, #4]
}
340011de:	4618      	mov	r0, r3
340011e0:	3710      	adds	r7, #16
340011e2:	46bd      	mov	sp, r7
340011e4:	bd80      	pop	{r7, pc}
340011e6:	bf00      	nop
340011e8:	3401c030 	.word	0x3401c030

340011ec <NPURam_enable>:

static void NPURam_enable(void)
{
340011ec:	b580      	push	{r7, lr}
340011ee:	b084      	sub	sp, #16
340011f0:	af00      	add	r7, sp, #0
  __HAL_RCC_NPU_CLK_ENABLE();
340011f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
340011f6:	f7ff fda7 	bl	34000d48 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_NPU_FORCE_RESET();
340011fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
340011fe:	f7ff fdb9 	bl	34000d74 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_NPU_RELEASE_RESET();
34001202:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001206:	f7ff fdc5 	bl	34000d94 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable NPU RAMs (4x448KB) */
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3400120a:	2001      	movs	r0, #1
3400120c:	f7ff fd20 	bl	34000c50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
34001210:	2002      	movs	r0, #2
34001212:	f7ff fd1d 	bl	34000c50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
34001216:	2004      	movs	r0, #4
34001218:	f7ff fd1a 	bl	34000c50 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
3400121c:	2008      	movs	r0, #8
3400121e:	f7ff fd17 	bl	34000c50 <LL_MEM_EnableClock>
  __HAL_RCC_RAMCFG_CLK_ENABLE();
34001222:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34001226:	f7ff fd3f 	bl	34000ca8 <LL_AHB2_GRP1_EnableClock>
  RAMCFG_HandleTypeDef hramcfg = {0};
3400122a:	1d3b      	adds	r3, r7, #4
3400122c:	2200      	movs	r2, #0
3400122e:	601a      	str	r2, [r3, #0]
34001230:	605a      	str	r2, [r3, #4]
34001232:	609a      	str	r2, [r3, #8]
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
34001234:	4b0d      	ldr	r3, [pc, #52]	@ (3400126c <NPURam_enable+0x80>)
34001236:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001238:	1d3b      	adds	r3, r7, #4
3400123a:	4618      	mov	r0, r3
3400123c:	f004 fc6e 	bl	34005b1c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
34001240:	4b0b      	ldr	r3, [pc, #44]	@ (34001270 <NPURam_enable+0x84>)
34001242:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001244:	1d3b      	adds	r3, r7, #4
34001246:	4618      	mov	r0, r3
34001248:	f004 fc68 	bl	34005b1c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3400124c:	4b09      	ldr	r3, [pc, #36]	@ (34001274 <NPURam_enable+0x88>)
3400124e:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
34001250:	1d3b      	adds	r3, r7, #4
34001252:	4618      	mov	r0, r3
34001254:	f004 fc62 	bl	34005b1c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
34001258:	4b07      	ldr	r3, [pc, #28]	@ (34001278 <NPURam_enable+0x8c>)
3400125a:	607b      	str	r3, [r7, #4]
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3400125c:	1d3b      	adds	r3, r7, #4
3400125e:	4618      	mov	r0, r3
34001260:	f004 fc5c 	bl	34005b1c <HAL_RAMCFG_EnableAXISRAM>
}
34001264:	bf00      	nop
34001266:	3710      	adds	r7, #16
34001268:	46bd      	mov	sp, r7
3400126a:	bd80      	pop	{r7, pc}
3400126c:	52023100 	.word	0x52023100
34001270:	52023180 	.word	0x52023180
34001274:	52023200 	.word	0x52023200
34001278:	52023280 	.word	0x52023280

3400127c <set_clk_sleep_mode>:

static void set_clk_sleep_mode(void)
{
3400127c:	b580      	push	{r7, lr}
3400127e:	af00      	add	r7, sp, #0
  /*** Enable sleep mode support during NPU inference *************************/
  /* Configure peripheral clocks to remain active during sleep mode */
  /* Keep all IP's enabled during WFE so they can wake up CPU. Fine tune
   * this if you want to save maximum power
   */
  __HAL_RCC_XSPI1_CLK_SLEEP_ENABLE();    /* For display frame buffer */
34001280:	2020      	movs	r0, #32
34001282:	f7ff fd9b 	bl	34000dbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_XSPI2_CLK_SLEEP_ENABLE();    /* For NN weights */
34001286:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3400128a:	f7ff fd97 	bl	34000dbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_NPU_CLK_SLEEP_ENABLE();      /* For NN inference */
3400128e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
34001292:	f7ff fd93 	bl	34000dbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CACHEAXI_CLK_SLEEP_ENABLE(); /* For NN inference */
34001296:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3400129a:	f7ff fd8f 	bl	34000dbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DMA2D_CLK_SLEEP_ENABLE();    /* For display */
3400129e:	2002      	movs	r0, #2
340012a0:	f7ff fd8c 	bl	34000dbc <LL_AHB5_GRP1_EnableClockLowPower>
  __HAL_RCC_DCMIPP_CLK_SLEEP_ENABLE();   /* For camera configuration retention */
340012a4:	2004      	movs	r0, #4
340012a6:	f7ff fdb5 	bl	34000e14 <LL_APB5_GRP1_EnableClockLowPower>
  __HAL_RCC_CSI_CLK_SLEEP_ENABLE();      /* For camera configuration retention */
340012aa:	2040      	movs	r0, #64	@ 0x40
340012ac:	f7ff fdb2 	bl	34000e14 <LL_APB5_GRP1_EnableClockLowPower>

  __HAL_RCC_FLEXRAM_MEM_CLK_SLEEP_ENABLE();
340012b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
340012b4:	f7ff fce2 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM1_MEM_CLK_SLEEP_ENABLE();
340012b8:	2080      	movs	r0, #128	@ 0x80
340012ba:	f7ff fcdf 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM2_MEM_CLK_SLEEP_ENABLE();
340012be:	f44f 7080 	mov.w	r0, #256	@ 0x100
340012c2:	f7ff fcdb 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM3_MEM_CLK_SLEEP_ENABLE();
340012c6:	2001      	movs	r0, #1
340012c8:	f7ff fcd8 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM4_MEM_CLK_SLEEP_ENABLE();
340012cc:	2002      	movs	r0, #2
340012ce:	f7ff fcd5 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM5_MEM_CLK_SLEEP_ENABLE();
340012d2:	2004      	movs	r0, #4
340012d4:	f7ff fcd2 	bl	34000c7c <LL_MEM_EnableClockLowPower>
  __HAL_RCC_AXISRAM6_MEM_CLK_SLEEP_ENABLE();
340012d8:	2008      	movs	r0, #8
340012da:	f7ff fccf 	bl	34000c7c <LL_MEM_EnableClockLowPower>
}
340012de:	bf00      	nop
340012e0:	bd80      	pop	{r7, pc}

340012e2 <NPUCache_config>:

static void NPUCache_config(void)
{
340012e2:	b580      	push	{r7, lr}
340012e4:	af00      	add	r7, sp, #0
  npu_cache_init();
340012e6:	f000 f9a9 	bl	3400163c <npu_cache_init>
  npu_cache_enable();
340012ea:	f000 f9b5 	bl	34001658 <npu_cache_enable>
}
340012ee:	bf00      	nop
340012f0:	bd80      	pop	{r7, pc}
	...

340012f4 <Security_Config>:

static void Security_Config(void)
{
340012f4:	b580      	push	{r7, lr}
340012f6:	b082      	sub	sp, #8
340012f8:	af00      	add	r7, sp, #0
  __HAL_RCC_RIFSC_CLK_ENABLE();
340012fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
340012fe:	f7ff fce9 	bl	34000cd4 <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
34001302:	463b      	mov	r3, r7
34001304:	2200      	movs	r2, #0
34001306:	601a      	str	r2, [r3, #0]
34001308:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
3400130a:	2302      	movs	r3, #2
3400130c:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3400130e:	2303      	movs	r3, #3
34001310:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
34001312:	463b      	mov	r3, r7
34001314:	4619      	mov	r1, r3
34001316:	2001      	movs	r0, #1
34001318:	f012 fe04 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3400131c:	463b      	mov	r3, r7
3400131e:	4619      	mov	r1, r3
34001320:	2008      	movs	r0, #8
34001322:	f012 fdff 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
34001326:	463b      	mov	r3, r7
34001328:	4619      	mov	r1, r3
3400132a:	2009      	movs	r0, #9
3400132c:	f012 fdfa 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34001330:	463b      	mov	r3, r7
34001332:	4619      	mov	r1, r3
34001334:	200a      	movs	r0, #10
34001336:	f012 fdf5 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3400133a:	463b      	mov	r3, r7
3400133c:	4619      	mov	r1, r3
3400133e:	200b      	movs	r0, #11
34001340:	f012 fdf0 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
34001344:	463b      	mov	r3, r7
34001346:	4619      	mov	r1, r3
34001348:	2004      	movs	r0, #4
3400134a:	f012 fdeb 	bl	34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400134e:	2103      	movs	r1, #3
34001350:	4813      	ldr	r0, [pc, #76]	@ (340013a0 <Security_Config+0xac>)
34001352:	f012 fe91 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001356:	2103      	movs	r1, #3
34001358:	4812      	ldr	r0, [pc, #72]	@ (340013a4 <Security_Config+0xb0>)
3400135a:	f012 fe8d 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400135e:	2103      	movs	r1, #3
34001360:	4811      	ldr	r0, [pc, #68]	@ (340013a8 <Security_Config+0xb4>)
34001362:	f012 fe89 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001366:	2103      	movs	r1, #3
34001368:	4810      	ldr	r0, [pc, #64]	@ (340013ac <Security_Config+0xb8>)
3400136a:	f012 fe85 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400136e:	2103      	movs	r1, #3
34001370:	480f      	ldr	r0, [pc, #60]	@ (340013b0 <Security_Config+0xbc>)
34001372:	f012 fe81 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001376:	2103      	movs	r1, #3
34001378:	480e      	ldr	r0, [pc, #56]	@ (340013b4 <Security_Config+0xc0>)
3400137a:	f012 fe7d 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400137e:	2103      	movs	r1, #3
34001380:	480d      	ldr	r0, [pc, #52]	@ (340013b8 <Security_Config+0xc4>)
34001382:	f012 fe79 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34001386:	2103      	movs	r1, #3
34001388:	480c      	ldr	r0, [pc, #48]	@ (340013bc <Security_Config+0xc8>)
3400138a:	f012 fe75 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3400138e:	2103      	movs	r1, #3
34001390:	2004      	movs	r0, #4
34001392:	f012 fe71 	bl	34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>
}
34001396:	bf00      	nop
34001398:	3708      	adds	r7, #8
3400139a:	46bd      	mov	sp, r7
3400139c:	bd80      	pop	{r7, pc}
3400139e:	bf00      	nop
340013a0:	3000000a 	.word	0x3000000a
340013a4:	30000005 	.word	0x30000005
340013a8:	2000001c 	.word	0x2000001c
340013ac:	2000001d 	.word	0x2000001d
340013b0:	30000006 	.word	0x30000006
340013b4:	30000007 	.word	0x30000007
340013b8:	30000008 	.word	0x30000008
340013bc:	10000018 	.word	0x10000018

340013c0 <IAC_Config>:

static void IAC_Config(void)
{
340013c0:	b580      	push	{r7, lr}
340013c2:	af00      	add	r7, sp, #0
/* Configure IAC to trap illegal access events */
  __HAL_RCC_IAC_CLK_ENABLE();
340013c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340013c8:	f7ff fc84 	bl	34000cd4 <LL_AHB3_GRP1_EnableClock>
  __HAL_RCC_IAC_FORCE_RESET();
340013cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340013d0:	f7ff fc96 	bl	34000d00 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_IAC_RELEASE_RESET();
340013d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
340013d8:	f7ff fca2 	bl	34000d20 <LL_AHB3_GRP1_ReleaseReset>
}
340013dc:	bf00      	nop
340013de:	bd80      	pop	{r7, pc}

340013e0 <IAC_IRQHandler>:

void IAC_IRQHandler(void)
{
340013e0:	b480      	push	{r7}
340013e2:	af00      	add	r7, sp, #0
  while (1)
340013e4:	bf00      	nop
340013e6:	e7fd      	b.n	340013e4 <IAC_IRQHandler+0x4>

340013e8 <SystemClock_Config>:

  return ret;
}

static void SystemClock_Config(void)
{
340013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
340013ec:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
340013f0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
340013f2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
340013f6:	2240      	movs	r2, #64	@ 0x40
340013f8:	2100      	movs	r1, #0
340013fa:	4618      	mov	r0, r3
340013fc:	f017 fc96 	bl	34018d2c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34001400:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34001404:	2298      	movs	r2, #152	@ 0x98
34001406:	2100      	movs	r1, #0
34001408:	4618      	mov	r0, r3
3400140a:	f017 fc8f 	bl	34018d2c <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3400140e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001412:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001416:	4618      	mov	r0, r3
34001418:	f44f 73c8 	mov.w	r3, #400	@ 0x190
3400141c:	461a      	mov	r2, r3
3400141e:	2100      	movs	r1, #0
34001420:	f017 fc84 	bl	34018d2c <memset>

  /* Ensure VDDCORE=0.9V before increasing the system frequency */
  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
34001424:	2001      	movs	r0, #1
34001426:	f000 feb5 	bl	34002194 <BSP_SMPS_Init>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3400142a:	2300      	movs	r3, #0
3400142c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  /* PLL1 = 64 x 25 / 2 = 800MHz */
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34001430:	2302      	movs	r3, #2
34001432:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34001436:	2300      	movs	r3, #0
34001438:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  RCC_OscInitStruct.PLL1.PLLM = 2;
3400143c:	2302      	movs	r3, #2
3400143e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  RCC_OscInitStruct.PLL1.PLLN = 25;
34001442:	2319      	movs	r3, #25
34001444:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34001448:	2300      	movs	r3, #0
3400144a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
3400144e:	2301      	movs	r3, #1
34001450:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34001454:	2301      	movs	r3, #1
34001456:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
3400145a:	2302      	movs	r3, #2
3400145c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
34001460:	2300      	movs	r3, #0
34001462:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
  RCC_OscInitStruct.PLL2.PLLM = 8;
34001466:	2308      	movs	r3, #8
34001468:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
3400146c:	2300      	movs	r3, #0
3400146e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  RCC_OscInitStruct.PLL2.PLLN = 125;
34001472:	237d      	movs	r3, #125	@ 0x7d
34001474:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
34001478:	2301      	movs	r3, #1
3400147a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
  RCC_OscInitStruct.PLL2.PLLP2 = 1;
3400147e:	2301      	movs	r3, #1
34001480:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
34001484:	2302      	movs	r3, #2
34001486:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
3400148a:	2300      	movs	r3, #0
3400148c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  RCC_OscInitStruct.PLL3.PLLM = 8;
34001490:	2308      	movs	r3, #8
34001492:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  RCC_OscInitStruct.PLL3.PLLN = 225;
34001496:	23e1      	movs	r3, #225	@ 0xe1
34001498:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
3400149c:	2300      	movs	r3, #0
3400149e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
340014a2:	2301      	movs	r3, #1
340014a4:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
340014a8:	2302      	movs	r3, #2
340014aa:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
340014ae:	2302      	movs	r3, #2
340014b0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
340014b4:	2300      	movs	r3, #0
340014b6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
  RCC_OscInitStruct.PLL4.PLLM = 8;
340014ba:	2308      	movs	r3, #8
340014bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
340014c0:	2300      	movs	r3, #0
340014c2:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  RCC_OscInitStruct.PLL4.PLLN = 225;
340014c6:	23e1      	movs	r3, #225	@ 0xe1
340014c8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
340014cc:	2306      	movs	r3, #6
340014ce:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
340014d2:	2306      	movs	r3, #6
340014d4:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
340014d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
340014dc:	4618      	mov	r0, r3
340014de:	f004 fdf5 	bl	340060cc <HAL_RCC_OscConfig>
340014e2:	4603      	mov	r3, r0
340014e4:	2b00      	cmp	r3, #0
340014e6:	d001      	beq.n	340014ec <SystemClock_Config+0x104>
  {
    while(1);
340014e8:	bf00      	nop
340014ea:	e7fd      	b.n	340014e8 <SystemClock_Config+0x100>
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK |
340014ec:	237f      	movs	r3, #127	@ 0x7f
340014ee:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
340014f2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
340014f6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
340014fa:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
340014fe:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34001502:	2300      	movs	r3, #0
34001504:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
34001508:	2301      	movs	r3, #1
3400150a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
3400150e:	2300      	movs	r3, #0
34001510:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
34001514:	2302      	movs	r3, #2
34001516:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
3400151a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
3400151e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
34001522:	2301      	movs	r3, #1
34001524:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
34001528:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400152c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
34001530:	2301      	movs	r3, #1
34001532:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34001536:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
3400153a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
3400153e:	2300      	movs	r3, #0
34001540:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34001544:	2300      	movs	r3, #0
34001546:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
3400154a:	2300      	movs	r3, #0
3400154c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34001550:	2300      	movs	r3, #0
34001552:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34001556:	f507 730a 	add.w	r3, r7, #552	@ 0x228
3400155a:	4618      	mov	r0, r3
3400155c:	f005 fad6 	bl	34006b0c <HAL_RCC_ClockConfig>
34001560:	4603      	mov	r3, r0
34001562:	2b00      	cmp	r3, #0
34001564:	d001      	beq.n	3400156a <SystemClock_Config+0x182>
  {
    while(1);
34001566:	bf00      	nop
34001568:	e7fd      	b.n	34001566 <SystemClock_Config+0x17e>
  }

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;
3400156a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
3400156e:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
34001572:	f04f 0200 	mov.w	r2, #0
34001576:	f04f 0300 	mov.w	r3, #0
3400157a:	e9c1 2300 	strd	r2, r3, [r1]

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
3400157e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001582:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001586:	e9d3 2300 	ldrd	r2, r3, [r3]
3400158a:	4690      	mov	r8, r2
3400158c:	f443 0980 	orr.w	r9, r3, #4194304	@ 0x400000
34001590:	f507 731a 	add.w	r3, r7, #616	@ 0x268
34001594:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
34001598:	e9c3 8900 	strd	r8, r9, [r3]
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3400159c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340015a0:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340015a4:	4a13      	ldr	r2, [pc, #76]	@ (340015f4 <SystemClock_Config+0x20c>)
340015a6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
340015aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340015ae:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
340015b6:	4614      	mov	r4, r2
340015b8:	f443 0500 	orr.w	r5, r3, #8388608	@ 0x800000
340015bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340015c0:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340015c4:	e9c3 4500 	strd	r4, r5, [r3]
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
340015c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
340015cc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
340015d0:	4a09      	ldr	r2, [pc, #36]	@ (340015f8 <SystemClock_Config+0x210>)
340015d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
340015d6:	463b      	mov	r3, r7
340015d8:	4618      	mov	r0, r3
340015da:	f007 fe8d 	bl	340092f8 <HAL_RCCEx_PeriphCLKConfig>
340015de:	4603      	mov	r3, r0
340015e0:	2b00      	cmp	r3, #0
340015e2:	d001      	beq.n	340015e8 <SystemClock_Config+0x200>
  {
    while (1);
340015e4:	bf00      	nop
340015e6:	e7fd      	b.n	340015e4 <SystemClock_Config+0x1fc>
  }
}
340015e8:	bf00      	nop
340015ea:	f507 771a 	add.w	r7, r7, #616	@ 0x268
340015ee:	46bd      	mov	sp, r7
340015f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
340015f4:	03000014 	.word	0x03000014
340015f8:	03000414 	.word	0x03000414

340015fc <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340015fc:	b580      	push	{r7, lr}
340015fe:	b082      	sub	sp, #8
34001600:	af00      	add	r7, sp, #0
34001602:	6078      	str	r0, [r7, #4]
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
34001604:	f44f 6080 	mov.w	r0, #1024	@ 0x400
34001608:	f7ff fb22 	bl	34000c50 <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
3400160c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001610:	f7ff fb9a 	bl	34000d48 <LL_AHB5_GRP1_EnableClock>
  __HAL_RCC_CACHEAXI_FORCE_RESET();
34001614:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001618:	f7ff fbac 	bl	34000d74 <LL_AHB5_GRP1_ForceReset>
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
3400161c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
34001620:	f7ff fbb8 	bl	34000d94 <LL_AHB5_GRP1_ReleaseReset>
}
34001624:	bf00      	nop
34001626:	3708      	adds	r7, #8
34001628:	46bd      	mov	sp, r7
3400162a:	bd80      	pop	{r7, pc}

3400162c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
3400162c:	b480      	push	{r7}
3400162e:	b083      	sub	sp, #12
34001630:	af00      	add	r7, sp, #0
34001632:	6078      	str	r0, [r7, #4]
34001634:	6039      	str	r1, [r7, #0]
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
34001636:	be00      	bkpt	0x0000
  while (1)
34001638:	bf00      	nop
3400163a:	e7fd      	b.n	34001638 <assert_failed+0xc>

3400163c <npu_cache_init>:
#include "stm32n6xx_hal_cacheaxi.h"

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
3400163c:	b580      	push	{r7, lr}
3400163e:	af00      	add	r7, sp, #0
  hcacheaxi_s.Instance = CACHEAXI;
34001640:	4b03      	ldr	r3, [pc, #12]	@ (34001650 <npu_cache_init+0x14>)
34001642:	4a04      	ldr	r2, [pc, #16]	@ (34001654 <npu_cache_init+0x18>)
34001644:	601a      	str	r2, [r3, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34001646:	4802      	ldr	r0, [pc, #8]	@ (34001650 <npu_cache_init+0x14>)
34001648:	f002 f952 	bl	340038f0 <HAL_CACHEAXI_Init>
}
3400164c:	bf00      	nop
3400164e:	bd80      	pop	{r7, pc}
34001650:	3401c024 	.word	0x3401c024
34001654:	580dfc00 	.word	0x580dfc00

34001658 <npu_cache_enable>:

void npu_cache_enable(void)
{
34001658:	b580      	push	{r7, lr}
3400165a:	b082      	sub	sp, #8
3400165c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
3400165e:	4806      	ldr	r0, [pc, #24]	@ (34001678 <npu_cache_enable+0x20>)
34001660:	f002 f97c 	bl	3400395c <HAL_CACHEAXI_Enable>
34001664:	4603      	mov	r3, r0
34001666:	71fb      	strb	r3, [r7, #7]
  } while (status == HAL_BUSY);
34001668:	79fb      	ldrb	r3, [r7, #7]
3400166a:	2b02      	cmp	r3, #2
3400166c:	d0f7      	beq.n	3400165e <npu_cache_enable+0x6>
}
3400166e:	bf00      	nop
34001670:	bf00      	nop
34001672:	3708      	adds	r7, #8
34001674:	46bd      	mov	sp, r7
34001676:	bd80      	pop	{r7, pc}
34001678:	3401c024 	.word	0x3401c024

3400167c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
3400167c:	b480      	push	{r7}
3400167e:	af00      	add	r7, sp, #0
}
34001680:	bf00      	nop
34001682:	46bd      	mov	sp, r7
34001684:	f85d 7b04 	ldr.w	r7, [sp], #4
34001688:	4770      	bx	lr

3400168a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
3400168a:	b480      	push	{r7}
3400168c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
3400168e:	bf00      	nop
34001690:	e7fd      	b.n	3400168e <HardFault_Handler+0x4>

34001692 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
34001692:	b480      	push	{r7}
34001694:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
34001696:	bf00      	nop
34001698:	e7fd      	b.n	34001696 <MemManage_Handler+0x4>

3400169a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
3400169a:	b480      	push	{r7}
3400169c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3400169e:	bf00      	nop
340016a0:	e7fd      	b.n	3400169e <BusFault_Handler+0x4>

340016a2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
340016a2:	b480      	push	{r7}
340016a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
340016a6:	bf00      	nop
340016a8:	e7fd      	b.n	340016a6 <UsageFault_Handler+0x4>

340016aa <SecureFault_Handler>:
  * @brief  This function handles Secure Fault exception.
  * @param  None
  * @retval None
  */
void SecureFault_Handler(void)
{
340016aa:	b480      	push	{r7}
340016ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
340016ae:	bf00      	nop
340016b0:	e7fd      	b.n	340016ae <SecureFault_Handler+0x4>

340016b2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
340016b2:	b480      	push	{r7}
340016b4:	af00      	add	r7, sp, #0
}
340016b6:	bf00      	nop
340016b8:	46bd      	mov	sp, r7
340016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340016be:	4770      	bx	lr

340016c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
340016c0:	b480      	push	{r7}
340016c2:	af00      	add	r7, sp, #0
  while (1)
340016c4:	bf00      	nop
340016c6:	e7fd      	b.n	340016c4 <DebugMon_Handler+0x4>

340016c8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
340016c8:	b480      	push	{r7}
340016ca:	af00      	add	r7, sp, #0
  while (1)
340016cc:	bf00      	nop
340016ce:	e7fd      	b.n	340016cc <PendSV_Handler+0x4>

340016d0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
340016d0:	b580      	push	{r7, lr}
340016d2:	af00      	add	r7, sp, #0
  HAL_IncTick();
340016d4:	f001 ff76 	bl	340035c4 <HAL_IncTick>
}
340016d8:	bf00      	nop
340016da:	bd80      	pop	{r7, pc}

340016dc <CSI_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/
void CSI_IRQHandler(void)
{
340016dc:	b580      	push	{r7, lr}
340016de:	b082      	sub	sp, #8
340016e0:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340016e2:	f015 ff15 	bl	34017510 <CMW_CAMERA_GetDCMIPPHandle>
340016e6:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_CSI_IRQHandler(hcamera_dcmipp);
340016e8:	6878      	ldr	r0, [r7, #4]
340016ea:	f002 fce5 	bl	340040b8 <HAL_DCMIPP_CSI_IRQHandler>
}
340016ee:	bf00      	nop
340016f0:	3708      	adds	r7, #8
340016f2:	46bd      	mov	sp, r7
340016f4:	bd80      	pop	{r7, pc}

340016f6 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
340016f6:	b580      	push	{r7, lr}
340016f8:	b082      	sub	sp, #8
340016fa:	af00      	add	r7, sp, #0
  DCMIPP_HandleTypeDef *hcamera_dcmipp = CMW_CAMERA_GetDCMIPPHandle();
340016fc:	f015 ff08 	bl	34017510 <CMW_CAMERA_GetDCMIPPHandle>
34001700:	6078      	str	r0, [r7, #4]
  HAL_DCMIPP_IRQHandler(hcamera_dcmipp);
34001702:	6878      	ldr	r0, [r7, #4]
34001704:	f002 faf4 	bl	34003cf0 <HAL_DCMIPP_IRQHandler>
34001708:	bf00      	nop
3400170a:	3708      	adds	r7, #8
3400170c:	46bd      	mov	sp, r7
3400170e:	bd80      	pop	{r7, pc}

34001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
34001710:	b480      	push	{r7}
34001712:	af00      	add	r7, sp, #0
  return 1;
34001714:	2301      	movs	r3, #1
}
34001716:	4618      	mov	r0, r3
34001718:	46bd      	mov	sp, r7
3400171a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400171e:	4770      	bx	lr

34001720 <_kill>:

int _kill(int pid, int sig)
{
34001720:	b580      	push	{r7, lr}
34001722:	b082      	sub	sp, #8
34001724:	af00      	add	r7, sp, #0
34001726:	6078      	str	r0, [r7, #4]
34001728:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
3400172a:	f017 fb61 	bl	34018df0 <__errno>
3400172e:	4603      	mov	r3, r0
34001730:	2216      	movs	r2, #22
34001732:	601a      	str	r2, [r3, #0]
  return -1;
34001734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
34001738:	4618      	mov	r0, r3
3400173a:	3708      	adds	r7, #8
3400173c:	46bd      	mov	sp, r7
3400173e:	bd80      	pop	{r7, pc}

34001740 <_exit>:

void _exit (int status)
{
34001740:	b580      	push	{r7, lr}
34001742:	b082      	sub	sp, #8
34001744:	af00      	add	r7, sp, #0
34001746:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
34001748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
3400174c:	6878      	ldr	r0, [r7, #4]
3400174e:	f7ff ffe7 	bl	34001720 <_kill>
  while (1) {}    /* Make sure we hang here */
34001752:	bf00      	nop
34001754:	e7fd      	b.n	34001752 <_exit+0x12>

34001756 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001756:	b580      	push	{r7, lr}
34001758:	b086      	sub	sp, #24
3400175a:	af00      	add	r7, sp, #0
3400175c:	60f8      	str	r0, [r7, #12]
3400175e:	60b9      	str	r1, [r7, #8]
34001760:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001762:	2300      	movs	r3, #0
34001764:	617b      	str	r3, [r7, #20]
34001766:	e00a      	b.n	3400177e <_read+0x28>
  {
    *ptr++ = __io_getchar();
34001768:	f3af 8000 	nop.w
3400176c:	4601      	mov	r1, r0
3400176e:	68bb      	ldr	r3, [r7, #8]
34001770:	1c5a      	adds	r2, r3, #1
34001772:	60ba      	str	r2, [r7, #8]
34001774:	b2ca      	uxtb	r2, r1
34001776:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001778:	697b      	ldr	r3, [r7, #20]
3400177a:	3301      	adds	r3, #1
3400177c:	617b      	str	r3, [r7, #20]
3400177e:	697a      	ldr	r2, [r7, #20]
34001780:	687b      	ldr	r3, [r7, #4]
34001782:	429a      	cmp	r2, r3
34001784:	dbf0      	blt.n	34001768 <_read+0x12>
  }

  return len;
34001786:	687b      	ldr	r3, [r7, #4]
}
34001788:	4618      	mov	r0, r3
3400178a:	3718      	adds	r7, #24
3400178c:	46bd      	mov	sp, r7
3400178e:	bd80      	pop	{r7, pc}

34001790 <_close>:
  }
  return len;
}

int _close(int file)
{
34001790:	b480      	push	{r7}
34001792:	b083      	sub	sp, #12
34001794:	af00      	add	r7, sp, #0
34001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
34001798:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
3400179c:	4618      	mov	r0, r3
3400179e:	370c      	adds	r7, #12
340017a0:	46bd      	mov	sp, r7
340017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340017a6:	4770      	bx	lr

340017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
340017a8:	b480      	push	{r7}
340017aa:	b083      	sub	sp, #12
340017ac:	af00      	add	r7, sp, #0
340017ae:	6078      	str	r0, [r7, #4]
340017b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
340017b2:	683b      	ldr	r3, [r7, #0]
340017b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340017b8:	605a      	str	r2, [r3, #4]
  return 0;
340017ba:	2300      	movs	r3, #0
}
340017bc:	4618      	mov	r0, r3
340017be:	370c      	adds	r7, #12
340017c0:	46bd      	mov	sp, r7
340017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340017c6:	4770      	bx	lr

340017c8 <_isatty>:

int _isatty(int file)
{
340017c8:	b480      	push	{r7}
340017ca:	b083      	sub	sp, #12
340017cc:	af00      	add	r7, sp, #0
340017ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
340017d0:	2301      	movs	r3, #1
}
340017d2:	4618      	mov	r0, r3
340017d4:	370c      	adds	r7, #12
340017d6:	46bd      	mov	sp, r7
340017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
340017dc:	4770      	bx	lr

340017de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
340017de:	b480      	push	{r7}
340017e0:	b085      	sub	sp, #20
340017e2:	af00      	add	r7, sp, #0
340017e4:	60f8      	str	r0, [r7, #12]
340017e6:	60b9      	str	r1, [r7, #8]
340017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
340017ea:	2300      	movs	r3, #0
}
340017ec:	4618      	mov	r0, r3
340017ee:	3714      	adds	r7, #20
340017f0:	46bd      	mov	sp, r7
340017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340017f6:	4770      	bx	lr

340017f8 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
340017f8:	b480      	push	{r7}
340017fa:	b083      	sub	sp, #12
340017fc:	af00      	add	r7, sp, #0
340017fe:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
34001800:	687b      	ldr	r3, [r7, #4]
34001802:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34001806:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
34001808:	687b      	ldr	r3, [r7, #4]
3400180a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400180e:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
34001810:	687b      	ldr	r3, [r7, #4]
34001812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34001816:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
34001818:	687b      	ldr	r3, [r7, #4]
3400181a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400181e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001820:	687b      	ldr	r3, [r7, #4]
34001822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001826:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
34001828:	687b      	ldr	r3, [r7, #4]
3400182a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400182e:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
34001830:	687b      	ldr	r3, [r7, #4]
34001832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34001836:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
34001838:	687b      	ldr	r3, [r7, #4]
3400183a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400183e:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
34001840:	687b      	ldr	r3, [r7, #4]
34001842:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34001846:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
34001848:	2300      	movs	r3, #0
};
3400184a:	4618      	mov	r0, r3
3400184c:	370c      	adds	r7, #12
3400184e:	46bd      	mov	sp, r7
34001850:	f85d 7b04 	ldr.w	r7, [sp], #4
34001854:	4770      	bx	lr

34001856 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
34001856:	b580      	push	{r7, lr}
34001858:	b09a      	sub	sp, #104	@ 0x68
3400185a:	af00      	add	r7, sp, #0
3400185c:	6078      	str	r0, [r7, #4]
3400185e:	460b      	mov	r3, r1
34001860:	70fb      	strb	r3, [r7, #3]
34001862:	4613      	mov	r3, r2
34001864:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
34001866:	f107 031c 	add.w	r3, r7, #28
3400186a:	224c      	movs	r2, #76	@ 0x4c
3400186c:	2100      	movs	r1, #0
3400186e:	4618      	mov	r0, r3
34001870:	f017 fa5c 	bl	34018d2c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001874:	f107 0308 	add.w	r3, r7, #8
34001878:	2200      	movs	r2, #0
3400187a:	601a      	str	r2, [r3, #0]
3400187c:	605a      	str	r2, [r3, #4]
3400187e:	609a      	str	r2, [r3, #8]
34001880:	60da      	str	r2, [r3, #12]
34001882:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001884:	78fb      	ldrb	r3, [r7, #3]
34001886:	2b00      	cmp	r3, #0
34001888:	d105      	bne.n	34001896 <MX25UM51245G_AutoPollingMemReady+0x40>
3400188a:	78bb      	ldrb	r3, [r7, #2]
3400188c:	2b01      	cmp	r3, #1
3400188e:	d102      	bne.n	34001896 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
34001890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001894:	e08b      	b.n	340019ae <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001896:	2300      	movs	r3, #0
34001898:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
3400189a:	2300      	movs	r3, #0
3400189c:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400189e:	78fb      	ldrb	r3, [r7, #3]
340018a0:	2b00      	cmp	r3, #0
340018a2:	d101      	bne.n	340018a8 <MX25UM51245G_AutoPollingMemReady+0x52>
340018a4:	2301      	movs	r3, #1
340018a6:	e000      	b.n	340018aa <MX25UM51245G_AutoPollingMemReady+0x54>
340018a8:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340018ac:	78bb      	ldrb	r3, [r7, #2]
340018ae:	2b01      	cmp	r3, #1
340018b0:	d101      	bne.n	340018b6 <MX25UM51245G_AutoPollingMemReady+0x60>
340018b2:	2308      	movs	r3, #8
340018b4:	e000      	b.n	340018b8 <MX25UM51245G_AutoPollingMemReady+0x62>
340018b6:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340018ba:	78fb      	ldrb	r3, [r7, #3]
340018bc:	2b00      	cmp	r3, #0
340018be:	d101      	bne.n	340018c4 <MX25UM51245G_AutoPollingMemReady+0x6e>
340018c0:	2300      	movs	r3, #0
340018c2:	e000      	b.n	340018c6 <MX25UM51245G_AutoPollingMemReady+0x70>
340018c4:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
340018c8:	78fb      	ldrb	r3, [r7, #3]
340018ca:	2b00      	cmp	r3, #0
340018cc:	d101      	bne.n	340018d2 <MX25UM51245G_AutoPollingMemReady+0x7c>
340018ce:	2305      	movs	r3, #5
340018d0:	e001      	b.n	340018d6 <MX25UM51245G_AutoPollingMemReady+0x80>
340018d2:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
340018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
340018d8:	78fb      	ldrb	r3, [r7, #3]
340018da:	2b00      	cmp	r3, #0
340018dc:	d101      	bne.n	340018e2 <MX25UM51245G_AutoPollingMemReady+0x8c>
340018de:	2300      	movs	r3, #0
340018e0:	e001      	b.n	340018e6 <MX25UM51245G_AutoPollingMemReady+0x90>
340018e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
340018e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
340018e8:	78bb      	ldrb	r3, [r7, #2]
340018ea:	2b01      	cmp	r3, #1
340018ec:	d102      	bne.n	340018f4 <MX25UM51245G_AutoPollingMemReady+0x9e>
340018ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
340018f2:	e000      	b.n	340018f6 <MX25UM51245G_AutoPollingMemReady+0xa0>
340018f4:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
340018f6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
340018f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
340018fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address            = 0U;
340018fe:	2300      	movs	r3, #0
34001900:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001902:	2300      	movs	r3, #0
34001904:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001906:	78fb      	ldrb	r3, [r7, #3]
34001908:	2b00      	cmp	r3, #0
3400190a:	d102      	bne.n	34001912 <MX25UM51245G_AutoPollingMemReady+0xbc>
3400190c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001910:	e001      	b.n	34001916 <MX25UM51245G_AutoPollingMemReady+0xc0>
34001912:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001916:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001918:	78bb      	ldrb	r3, [r7, #2]
3400191a:	2b01      	cmp	r3, #1
3400191c:	d102      	bne.n	34001924 <MX25UM51245G_AutoPollingMemReady+0xce>
3400191e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001922:	e000      	b.n	34001926 <MX25UM51245G_AutoPollingMemReady+0xd0>
34001924:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001926:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001928:	78fb      	ldrb	r3, [r7, #3]
3400192a:	2b00      	cmp	r3, #0
3400192c:	d006      	beq.n	3400193c <MX25UM51245G_AutoPollingMemReady+0xe6>
3400192e:	78bb      	ldrb	r3, [r7, #2]
34001930:	2b01      	cmp	r3, #1
34001932:	d101      	bne.n	34001938 <MX25UM51245G_AutoPollingMemReady+0xe2>
34001934:	2305      	movs	r3, #5
34001936:	e002      	b.n	3400193e <MX25UM51245G_AutoPollingMemReady+0xe8>
34001938:	2304      	movs	r3, #4
3400193a:	e000      	b.n	3400193e <MX25UM51245G_AutoPollingMemReady+0xe8>
3400193c:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
3400193e:	663b      	str	r3, [r7, #96]	@ 0x60
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001940:	78bb      	ldrb	r3, [r7, #2]
34001942:	2b01      	cmp	r3, #1
34001944:	d101      	bne.n	3400194a <MX25UM51245G_AutoPollingMemReady+0xf4>
34001946:	2302      	movs	r3, #2
34001948:	e000      	b.n	3400194c <MX25UM51245G_AutoPollingMemReady+0xf6>
3400194a:	2301      	movs	r3, #1
3400194c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400194e:	78bb      	ldrb	r3, [r7, #2]
34001950:	2b01      	cmp	r3, #1
34001952:	d102      	bne.n	3400195a <MX25UM51245G_AutoPollingMemReady+0x104>
34001954:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001958:	e000      	b.n	3400195c <MX25UM51245G_AutoPollingMemReady+0x106>
3400195a:	2300      	movs	r3, #0
3400195c:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  s_config.MatchValue    = 0U;
3400195e:	2300      	movs	r3, #0
34001960:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
34001962:	2301      	movs	r3, #1
34001964:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
34001966:	2300      	movs	r3, #0
34001968:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
3400196a:	2310      	movs	r3, #16
3400196c:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400196e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001972:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001974:	f107 031c 	add.w	r3, r7, #28
34001978:	f241 3288 	movw	r2, #5000	@ 0x1388
3400197c:	4619      	mov	r1, r3
3400197e:	6878      	ldr	r0, [r7, #4]
34001980:	f014 ff00 	bl	34016784 <HAL_XSPI_Command>
34001984:	4603      	mov	r3, r0
34001986:	2b00      	cmp	r3, #0
34001988:	d002      	beq.n	34001990 <MX25UM51245G_AutoPollingMemReady+0x13a>
  {
    return MX25UM51245G_ERROR;
3400198a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
3400198e:	e00e      	b.n	340019ae <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001990:	f107 0308 	add.w	r3, r7, #8
34001994:	f241 3288 	movw	r2, #5000	@ 0x1388
34001998:	4619      	mov	r1, r3
3400199a:	6878      	ldr	r0, [r7, #4]
3400199c:	f015 fa1a 	bl	34016dd4 <HAL_XSPI_AutoPolling>
340019a0:	4603      	mov	r3, r0
340019a2:	2b00      	cmp	r3, #0
340019a4:	d002      	beq.n	340019ac <MX25UM51245G_AutoPollingMemReady+0x156>
  {
    return MX25UM51245G_ERROR;
340019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340019aa:	e000      	b.n	340019ae <MX25UM51245G_AutoPollingMemReady+0x158>
  }

  return MX25UM51245G_OK;
340019ac:	2300      	movs	r3, #0
}
340019ae:	4618      	mov	r0, r3
340019b0:	3768      	adds	r7, #104	@ 0x68
340019b2:	46bd      	mov	sp, r7
340019b4:	bd80      	pop	{r7, pc}

340019b6 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
340019b6:	b580      	push	{r7, lr}
340019b8:	b09a      	sub	sp, #104	@ 0x68
340019ba:	af00      	add	r7, sp, #0
340019bc:	6078      	str	r0, [r7, #4]
340019be:	460b      	mov	r3, r1
340019c0:	70fb      	strb	r3, [r7, #3]
340019c2:	4613      	mov	r3, r2
340019c4:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
340019c6:	f107 031c 	add.w	r3, r7, #28
340019ca:	224c      	movs	r2, #76	@ 0x4c
340019cc:	2100      	movs	r1, #0
340019ce:	4618      	mov	r0, r3
340019d0:	f017 f9ac 	bl	34018d2c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
340019d4:	f107 030c 	add.w	r3, r7, #12
340019d8:	2200      	movs	r2, #0
340019da:	601a      	str	r2, [r3, #0]
340019dc:	605a      	str	r2, [r3, #4]
340019de:	609a      	str	r2, [r3, #8]
340019e0:	60da      	str	r2, [r3, #12]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
340019e2:	78fb      	ldrb	r3, [r7, #3]
340019e4:	2b01      	cmp	r3, #1
340019e6:	d105      	bne.n	340019f4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
340019e8:	78bb      	ldrb	r3, [r7, #2]
340019ea:	2b00      	cmp	r3, #0
340019ec:	d102      	bne.n	340019f4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3e>
  {
    return MX25UM51245G_ERROR;
340019ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340019f2:	e086      	b.n	34001b02 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
340019f4:	2301      	movs	r3, #1
340019f6:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340019f8:	2300      	movs	r3, #0
340019fa:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340019fc:	78fb      	ldrb	r3, [r7, #3]
340019fe:	2b00      	cmp	r3, #0
34001a00:	d101      	bne.n	34001a06 <MX25UM51245G_EnableSTRMemoryMappedMode+0x50>
34001a02:	2301      	movs	r3, #1
34001a04:	e000      	b.n	34001a08 <MX25UM51245G_EnableSTRMemoryMappedMode+0x52>
34001a06:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001a0a:	2300      	movs	r3, #0
34001a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001a0e:	78fb      	ldrb	r3, [r7, #3]
34001a10:	2b00      	cmp	r3, #0
34001a12:	d101      	bne.n	34001a18 <MX25UM51245G_EnableSTRMemoryMappedMode+0x62>
34001a14:	2300      	movs	r3, #0
34001a16:	e000      	b.n	34001a1a <MX25UM51245G_EnableSTRMemoryMappedMode+0x64>
34001a18:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
34001a1c:	78fb      	ldrb	r3, [r7, #3]
34001a1e:	2b00      	cmp	r3, #0
34001a20:	d106      	bne.n	34001a30 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
34001a22:	78bb      	ldrb	r3, [r7, #2]
34001a24:	2b00      	cmp	r3, #0
34001a26:	d101      	bne.n	34001a2c <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
34001a28:	230b      	movs	r3, #11
34001a2a:	e003      	b.n	34001a34 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34001a2c:	230c      	movs	r3, #12
34001a2e:	e001      	b.n	34001a34 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7e>
34001a30:	f64e 4313 	movw	r3, #60435	@ 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001a34:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001a36:	78fb      	ldrb	r3, [r7, #3]
34001a38:	2b00      	cmp	r3, #0
34001a3a:	d102      	bne.n	34001a42 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
34001a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001a40:	e001      	b.n	34001a46 <MX25UM51245G_EnableSTRMemoryMappedMode+0x90>
34001a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
34001a48:	2300      	movs	r3, #0
34001a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
34001a4c:	78bb      	ldrb	r3, [r7, #2]
34001a4e:	2b00      	cmp	r3, #0
34001a50:	d102      	bne.n	34001a58 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
34001a52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34001a56:	e001      	b.n	34001a5c <MX25UM51245G_EnableSTRMemoryMappedMode+0xa6>
34001a58:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
34001a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001a5e:	2300      	movs	r3, #0
34001a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001a62:	78fb      	ldrb	r3, [r7, #3]
34001a64:	2b00      	cmp	r3, #0
34001a66:	d102      	bne.n	34001a6e <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
34001a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001a6c:	e001      	b.n	34001a72 <MX25UM51245G_EnableSTRMemoryMappedMode+0xbc>
34001a6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001a72:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
34001a74:	2300      	movs	r3, #0
34001a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
34001a78:	78fb      	ldrb	r3, [r7, #3]
34001a7a:	2b00      	cmp	r3, #0
34001a7c:	d101      	bne.n	34001a82 <MX25UM51245G_EnableSTRMemoryMappedMode+0xcc>
34001a7e:	2308      	movs	r3, #8
34001a80:	e000      	b.n	34001a84 <MX25UM51245G_EnableSTRMemoryMappedMode+0xce>
34001a82:	2306      	movs	r3, #6
34001a84:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001a86:	2300      	movs	r3, #0
34001a88:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001a8a:	f107 031c 	add.w	r3, r7, #28
34001a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001a92:	4619      	mov	r1, r3
34001a94:	6878      	ldr	r0, [r7, #4]
34001a96:	f014 fe75 	bl	34016784 <HAL_XSPI_Command>
34001a9a:	4603      	mov	r3, r0
34001a9c:	2b00      	cmp	r3, #0
34001a9e:	d002      	beq.n	34001aa6 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
34001aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001aa4:	e02d      	b.n	34001b02 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
34001aa6:	2302      	movs	r3, #2
34001aa8:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001aaa:	78fb      	ldrb	r3, [r7, #3]
34001aac:	2b00      	cmp	r3, #0
34001aae:	d106      	bne.n	34001abe <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
34001ab0:	78bb      	ldrb	r3, [r7, #2]
34001ab2:	2b00      	cmp	r3, #0
34001ab4:	d101      	bne.n	34001aba <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
34001ab6:	2302      	movs	r3, #2
34001ab8:	e003      	b.n	34001ac2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001aba:	2312      	movs	r3, #18
34001abc:	e001      	b.n	34001ac2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
34001abe:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles        = 0U;
34001ac4:	2300      	movs	r3, #0
34001ac6:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ac8:	f107 031c 	add.w	r3, r7, #28
34001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
34001ad0:	4619      	mov	r1, r3
34001ad2:	6878      	ldr	r0, [r7, #4]
34001ad4:	f014 fe56 	bl	34016784 <HAL_XSPI_Command>
34001ad8:	4603      	mov	r3, r0
34001ada:	2b00      	cmp	r3, #0
34001adc:	d002      	beq.n	34001ae4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
34001ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001ae2:	e00e      	b.n	34001b02 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001ae4:	2300      	movs	r3, #0
34001ae6:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001ae8:	f107 030c 	add.w	r3, r7, #12
34001aec:	4619      	mov	r1, r3
34001aee:	6878      	ldr	r0, [r7, #4]
34001af0:	f015 fa3a 	bl	34016f68 <HAL_XSPI_MemoryMapped>
34001af4:	4603      	mov	r3, r0
34001af6:	2b00      	cmp	r3, #0
34001af8:	d002      	beq.n	34001b00 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
34001afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001afe:	e000      	b.n	34001b02 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
34001b00:	2300      	movs	r3, #0
}
34001b02:	4618      	mov	r0, r3
34001b04:	3768      	adds	r7, #104	@ 0x68
34001b06:	46bd      	mov	sp, r7
34001b08:	bd80      	pop	{r7, pc}

34001b0a <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
34001b0a:	b580      	push	{r7, lr}
34001b0c:	b09a      	sub	sp, #104	@ 0x68
34001b0e:	af00      	add	r7, sp, #0
34001b10:	6078      	str	r0, [r7, #4]
34001b12:	460b      	mov	r3, r1
34001b14:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
34001b16:	f107 031c 	add.w	r3, r7, #28
34001b1a:	224c      	movs	r2, #76	@ 0x4c
34001b1c:	2100      	movs	r1, #0
34001b1e:	4618      	mov	r0, r3
34001b20:	f017 f904 	bl	34018d2c <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
34001b24:	f107 030c 	add.w	r3, r7, #12
34001b28:	2200      	movs	r2, #0
34001b2a:	601a      	str	r2, [r3, #0]
34001b2c:	605a      	str	r2, [r3, #4]
34001b2e:	609a      	str	r2, [r3, #8]
34001b30:	60da      	str	r2, [r3, #12]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
34001b32:	2301      	movs	r3, #1
34001b34:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001b36:	2300      	movs	r3, #0
34001b38:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34001b3a:	2304      	movs	r3, #4
34001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34001b3e:	2308      	movs	r3, #8
34001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
34001b42:	2310      	movs	r3, #16
34001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
34001b46:	f64e 6311 	movw	r3, #60945	@ 0xee11
34001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34001b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34001b52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001b56:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001b58:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001b5e:	2300      	movs	r3, #0
34001b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
34001b62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001b66:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34001b68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
34001b6e:	2306      	movs	r3, #6
34001b70:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
34001b72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001b76:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001b78:	f107 031c 	add.w	r3, r7, #28
34001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
34001b80:	4619      	mov	r1, r3
34001b82:	6878      	ldr	r0, [r7, #4]
34001b84:	f014 fdfe 	bl	34016784 <HAL_XSPI_Command>
34001b88:	4603      	mov	r3, r0
34001b8a:	2b00      	cmp	r3, #0
34001b8c:	d002      	beq.n	34001b94 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
34001b8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001b92:	e025      	b.n	34001be0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
34001b94:	2302      	movs	r3, #2
34001b96:	61fb      	str	r3, [r7, #28]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
34001b98:	f241 23ed 	movw	r3, #4845	@ 0x12ed
34001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DummyCycles   = 0U;
34001b9e:	2300      	movs	r3, #0
34001ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
34001ba2:	2300      	movs	r3, #0
34001ba4:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001ba6:	f107 031c 	add.w	r3, r7, #28
34001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
34001bae:	4619      	mov	r1, r3
34001bb0:	6878      	ldr	r0, [r7, #4]
34001bb2:	f014 fde7 	bl	34016784 <HAL_XSPI_Command>
34001bb6:	4603      	mov	r3, r0
34001bb8:	2b00      	cmp	r3, #0
34001bba:	d002      	beq.n	34001bc2 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
34001bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001bc0:	e00e      	b.n	34001be0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34001bc2:	2300      	movs	r3, #0
34001bc4:	60fb      	str	r3, [r7, #12]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
34001bc6:	f107 030c 	add.w	r3, r7, #12
34001bca:	4619      	mov	r1, r3
34001bcc:	6878      	ldr	r0, [r7, #4]
34001bce:	f015 f9cb 	bl	34016f68 <HAL_XSPI_MemoryMapped>
34001bd2:	4603      	mov	r3, r0
34001bd4:	2b00      	cmp	r3, #0
34001bd6:	d002      	beq.n	34001bde <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
34001bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001bdc:	e000      	b.n	34001be0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
34001bde:	2300      	movs	r3, #0
}
34001be0:	4618      	mov	r0, r3
34001be2:	3768      	adds	r7, #104	@ 0x68
34001be4:	46bd      	mov	sp, r7
34001be6:	bd80      	pop	{r7, pc}

34001be8 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001be8:	b580      	push	{r7, lr}
34001bea:	b09a      	sub	sp, #104	@ 0x68
34001bec:	af00      	add	r7, sp, #0
34001bee:	6078      	str	r0, [r7, #4]
34001bf0:	460b      	mov	r3, r1
34001bf2:	70fb      	strb	r3, [r7, #3]
34001bf4:	4613      	mov	r3, r2
34001bf6:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
34001bf8:	f107 031c 	add.w	r3, r7, #28
34001bfc:	224c      	movs	r2, #76	@ 0x4c
34001bfe:	2100      	movs	r1, #0
34001c00:	4618      	mov	r0, r3
34001c02:	f017 f893 	bl	34018d2c <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
34001c06:	f107 0308 	add.w	r3, r7, #8
34001c0a:	2200      	movs	r2, #0
34001c0c:	601a      	str	r2, [r3, #0]
34001c0e:	605a      	str	r2, [r3, #4]
34001c10:	609a      	str	r2, [r3, #8]
34001c12:	60da      	str	r2, [r3, #12]
34001c14:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001c16:	78fb      	ldrb	r3, [r7, #3]
34001c18:	2b00      	cmp	r3, #0
34001c1a:	d105      	bne.n	34001c28 <MX25UM51245G_WriteEnable+0x40>
34001c1c:	78bb      	ldrb	r3, [r7, #2]
34001c1e:	2b01      	cmp	r3, #1
34001c20:	d102      	bne.n	34001c28 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
34001c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001c26:	e0a9      	b.n	34001d7c <MX25UM51245G_WriteEnable+0x194>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001c28:	2300      	movs	r3, #0
34001c2a:	61fb      	str	r3, [r7, #28]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001c2c:	2300      	movs	r3, #0
34001c2e:	623b      	str	r3, [r7, #32]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001c30:	78fb      	ldrb	r3, [r7, #3]
34001c32:	2b00      	cmp	r3, #0
34001c34:	d101      	bne.n	34001c3a <MX25UM51245G_WriteEnable+0x52>
34001c36:	2301      	movs	r3, #1
34001c38:	e000      	b.n	34001c3c <MX25UM51245G_WriteEnable+0x54>
34001c3a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001c3e:	78bb      	ldrb	r3, [r7, #2]
34001c40:	2b01      	cmp	r3, #1
34001c42:	d101      	bne.n	34001c48 <MX25UM51245G_WriteEnable+0x60>
34001c44:	2308      	movs	r3, #8
34001c46:	e000      	b.n	34001c4a <MX25UM51245G_WriteEnable+0x62>
34001c48:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001c4c:	78fb      	ldrb	r3, [r7, #3]
34001c4e:	2b00      	cmp	r3, #0
34001c50:	d101      	bne.n	34001c56 <MX25UM51245G_WriteEnable+0x6e>
34001c52:	2300      	movs	r3, #0
34001c54:	e000      	b.n	34001c58 <MX25UM51245G_WriteEnable+0x70>
34001c56:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
34001c5a:	78fb      	ldrb	r3, [r7, #3]
34001c5c:	2b00      	cmp	r3, #0
34001c5e:	d101      	bne.n	34001c64 <MX25UM51245G_WriteEnable+0x7c>
34001c60:	2306      	movs	r3, #6
34001c62:	e001      	b.n	34001c68 <MX25UM51245G_WriteEnable+0x80>
34001c64:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34001c6a:	2300      	movs	r3, #0
34001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001c6e:	2300      	movs	r3, #0
34001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
34001c72:	2300      	movs	r3, #0
34001c74:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34001c76:	2300      	movs	r3, #0
34001c78:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001c7a:	2300      	movs	r3, #0
34001c7c:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001c7e:	f107 031c 	add.w	r3, r7, #28
34001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
34001c86:	4619      	mov	r1, r3
34001c88:	6878      	ldr	r0, [r7, #4]
34001c8a:	f014 fd7b 	bl	34016784 <HAL_XSPI_Command>
34001c8e:	4603      	mov	r3, r0
34001c90:	2b00      	cmp	r3, #0
34001c92:	d002      	beq.n	34001c9a <MX25UM51245G_WriteEnable+0xb2>
  {
    return MX25UM51245G_ERROR;
34001c94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001c98:	e070      	b.n	34001d7c <MX25UM51245G_WriteEnable+0x194>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
34001c9a:	78fb      	ldrb	r3, [r7, #3]
34001c9c:	2b00      	cmp	r3, #0
34001c9e:	d101      	bne.n	34001ca4 <MX25UM51245G_WriteEnable+0xbc>
34001ca0:	2305      	movs	r3, #5
34001ca2:	e001      	b.n	34001ca8 <MX25UM51245G_WriteEnable+0xc0>
34001ca4:	f240 53fa 	movw	r3, #1530	@ 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
34001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
34001caa:	78fb      	ldrb	r3, [r7, #3]
34001cac:	2b00      	cmp	r3, #0
34001cae:	d101      	bne.n	34001cb4 <MX25UM51245G_WriteEnable+0xcc>
34001cb0:	2300      	movs	r3, #0
34001cb2:	e001      	b.n	34001cb8 <MX25UM51245G_WriteEnable+0xd0>
34001cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001cba:	78bb      	ldrb	r3, [r7, #2]
34001cbc:	2b01      	cmp	r3, #1
34001cbe:	d102      	bne.n	34001cc6 <MX25UM51245G_WriteEnable+0xde>
34001cc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001cc4:	e000      	b.n	34001cc8 <MX25UM51245G_WriteEnable+0xe0>
34001cc6:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
34001cca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.Address        = 0U;
34001cd0:	2300      	movs	r3, #0
34001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001cd4:	78fb      	ldrb	r3, [r7, #3]
34001cd6:	2b00      	cmp	r3, #0
34001cd8:	d102      	bne.n	34001ce0 <MX25UM51245G_WriteEnable+0xf8>
34001cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001cde:	e001      	b.n	34001ce4 <MX25UM51245G_WriteEnable+0xfc>
34001ce0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001ce4:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
34001ce6:	78bb      	ldrb	r3, [r7, #2]
34001ce8:	2b01      	cmp	r3, #1
34001cea:	d102      	bne.n	34001cf2 <MX25UM51245G_WriteEnable+0x10a>
34001cec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001cf0:	e000      	b.n	34001cf4 <MX25UM51245G_WriteEnable+0x10c>
34001cf2:	2300      	movs	r3, #0
34001cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001cf6:	78fb      	ldrb	r3, [r7, #3]
34001cf8:	2b00      	cmp	r3, #0
34001cfa:	d006      	beq.n	34001d0a <MX25UM51245G_WriteEnable+0x122>
34001cfc:	78bb      	ldrb	r3, [r7, #2]
34001cfe:	2b01      	cmp	r3, #1
34001d00:	d101      	bne.n	34001d06 <MX25UM51245G_WriteEnable+0x11e>
34001d02:	2305      	movs	r3, #5
34001d04:	e002      	b.n	34001d0c <MX25UM51245G_WriteEnable+0x124>
34001d06:	2304      	movs	r3, #4
34001d08:	e000      	b.n	34001d0c <MX25UM51245G_WriteEnable+0x124>
34001d0a:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
34001d0c:	663b      	str	r3, [r7, #96]	@ 0x60
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001d0e:	78bb      	ldrb	r3, [r7, #2]
34001d10:	2b01      	cmp	r3, #1
34001d12:	d101      	bne.n	34001d18 <MX25UM51245G_WriteEnable+0x130>
34001d14:	2302      	movs	r3, #2
34001d16:	e000      	b.n	34001d1a <MX25UM51245G_WriteEnable+0x132>
34001d18:	2301      	movs	r3, #1
34001d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001d1c:	78bb      	ldrb	r3, [r7, #2]
34001d1e:	2b01      	cmp	r3, #1
34001d20:	d102      	bne.n	34001d28 <MX25UM51245G_WriteEnable+0x140>
34001d22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001d26:	e000      	b.n	34001d2a <MX25UM51245G_WriteEnable+0x142>
34001d28:	2300      	movs	r3, #0
34001d2a:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d2c:	f107 031c 	add.w	r3, r7, #28
34001d30:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d34:	4619      	mov	r1, r3
34001d36:	6878      	ldr	r0, [r7, #4]
34001d38:	f014 fd24 	bl	34016784 <HAL_XSPI_Command>
34001d3c:	4603      	mov	r3, r0
34001d3e:	2b00      	cmp	r3, #0
34001d40:	d002      	beq.n	34001d48 <MX25UM51245G_WriteEnable+0x160>
  {
    return MX25UM51245G_ERROR;
34001d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d46:	e019      	b.n	34001d7c <MX25UM51245G_WriteEnable+0x194>
  }

  s_config.MatchValue      = 2U;
34001d48:	2302      	movs	r3, #2
34001d4a:	60bb      	str	r3, [r7, #8]
  s_config.MatchMask       = 2U;
34001d4c:	2302      	movs	r3, #2
34001d4e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
34001d50:	2300      	movs	r3, #0
34001d52:	613b      	str	r3, [r7, #16]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
34001d54:	2310      	movs	r3, #16
34001d56:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
34001d58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34001d5c:	617b      	str	r3, [r7, #20]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001d5e:	f107 0308 	add.w	r3, r7, #8
34001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
34001d66:	4619      	mov	r1, r3
34001d68:	6878      	ldr	r0, [r7, #4]
34001d6a:	f015 f833 	bl	34016dd4 <HAL_XSPI_AutoPolling>
34001d6e:	4603      	mov	r3, r0
34001d70:	2b00      	cmp	r3, #0
34001d72:	d002      	beq.n	34001d7a <MX25UM51245G_WriteEnable+0x192>
  {
    return MX25UM51245G_ERROR;
34001d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001d78:	e000      	b.n	34001d7c <MX25UM51245G_WriteEnable+0x194>
  }

  return MX25UM51245G_OK;
34001d7a:	2300      	movs	r3, #0
}
34001d7c:	4618      	mov	r0, r3
34001d7e:	3768      	adds	r7, #104	@ 0x68
34001d80:	46bd      	mov	sp, r7
34001d82:	bd80      	pop	{r7, pc}

34001d84 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
34001d84:	b580      	push	{r7, lr}
34001d86:	b098      	sub	sp, #96	@ 0x60
34001d88:	af00      	add	r7, sp, #0
34001d8a:	60f8      	str	r0, [r7, #12]
34001d8c:	607b      	str	r3, [r7, #4]
34001d8e:	460b      	mov	r3, r1
34001d90:	72fb      	strb	r3, [r7, #11]
34001d92:	4613      	mov	r3, r2
34001d94:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34001d96:	f107 0314 	add.w	r3, r7, #20
34001d9a:	224c      	movs	r2, #76	@ 0x4c
34001d9c:	2100      	movs	r1, #0
34001d9e:	4618      	mov	r0, r3
34001da0:	f016 ffc4 	bl	34018d2c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001da4:	7afb      	ldrb	r3, [r7, #11]
34001da6:	2b00      	cmp	r3, #0
34001da8:	d105      	bne.n	34001db6 <MX25UM51245G_WriteCfg2Register+0x32>
34001daa:	7abb      	ldrb	r3, [r7, #10]
34001dac:	2b01      	cmp	r3, #1
34001dae:	d102      	bne.n	34001db6 <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
34001db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001db4:	e075      	b.n	34001ea2 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001db6:	2300      	movs	r3, #0
34001db8:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001dba:	2300      	movs	r3, #0
34001dbc:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001dbe:	7afb      	ldrb	r3, [r7, #11]
34001dc0:	2b00      	cmp	r3, #0
34001dc2:	d101      	bne.n	34001dc8 <MX25UM51245G_WriteCfg2Register+0x44>
34001dc4:	2301      	movs	r3, #1
34001dc6:	e000      	b.n	34001dca <MX25UM51245G_WriteCfg2Register+0x46>
34001dc8:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001dca:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001dcc:	7abb      	ldrb	r3, [r7, #10]
34001dce:	2b01      	cmp	r3, #1
34001dd0:	d101      	bne.n	34001dd6 <MX25UM51245G_WriteCfg2Register+0x52>
34001dd2:	2308      	movs	r3, #8
34001dd4:	e000      	b.n	34001dd8 <MX25UM51245G_WriteCfg2Register+0x54>
34001dd6:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001dda:	7afb      	ldrb	r3, [r7, #11]
34001ddc:	2b00      	cmp	r3, #0
34001dde:	d101      	bne.n	34001de4 <MX25UM51245G_WriteCfg2Register+0x60>
34001de0:	2300      	movs	r3, #0
34001de2:	e000      	b.n	34001de6 <MX25UM51245G_WriteCfg2Register+0x62>
34001de4:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
34001de8:	7afb      	ldrb	r3, [r7, #11]
34001dea:	2b00      	cmp	r3, #0
34001dec:	d101      	bne.n	34001df2 <MX25UM51245G_WriteCfg2Register+0x6e>
34001dee:	2372      	movs	r3, #114	@ 0x72
34001df0:	e001      	b.n	34001df6 <MX25UM51245G_WriteCfg2Register+0x72>
34001df2:	f247 238d 	movw	r3, #29325	@ 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001df6:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001df8:	7afb      	ldrb	r3, [r7, #11]
34001dfa:	2b00      	cmp	r3, #0
34001dfc:	d102      	bne.n	34001e04 <MX25UM51245G_WriteCfg2Register+0x80>
34001dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001e02:	e001      	b.n	34001e08 <MX25UM51245G_WriteCfg2Register+0x84>
34001e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001e08:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001e0a:	7abb      	ldrb	r3, [r7, #10]
34001e0c:	2b01      	cmp	r3, #1
34001e0e:	d102      	bne.n	34001e16 <MX25UM51245G_WriteCfg2Register+0x92>
34001e10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001e14:	e000      	b.n	34001e18 <MX25UM51245G_WriteCfg2Register+0x94>
34001e16:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001e1a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = WriteAddr;
34001e20:	687b      	ldr	r3, [r7, #4]
34001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001e24:	2300      	movs	r3, #0
34001e26:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001e28:	7afb      	ldrb	r3, [r7, #11]
34001e2a:	2b00      	cmp	r3, #0
34001e2c:	d102      	bne.n	34001e34 <MX25UM51245G_WriteCfg2Register+0xb0>
34001e2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001e32:	e001      	b.n	34001e38 <MX25UM51245G_WriteCfg2Register+0xb4>
34001e34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001e3a:	7abb      	ldrb	r3, [r7, #10]
34001e3c:	2b01      	cmp	r3, #1
34001e3e:	d102      	bne.n	34001e46 <MX25UM51245G_WriteCfg2Register+0xc2>
34001e40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001e44:	e000      	b.n	34001e48 <MX25UM51245G_WriteCfg2Register+0xc4>
34001e46:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001e48:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = 0U;
34001e4a:	2300      	movs	r3, #0
34001e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
34001e4e:	7afb      	ldrb	r3, [r7, #11]
34001e50:	2b00      	cmp	r3, #0
34001e52:	d006      	beq.n	34001e62 <MX25UM51245G_WriteCfg2Register+0xde>
34001e54:	7abb      	ldrb	r3, [r7, #10]
34001e56:	2b01      	cmp	r3, #1
34001e58:	d101      	bne.n	34001e5e <MX25UM51245G_WriteCfg2Register+0xda>
34001e5a:	2302      	movs	r3, #2
34001e5c:	e002      	b.n	34001e64 <MX25UM51245G_WriteCfg2Register+0xe0>
34001e5e:	2301      	movs	r3, #1
34001e60:	e000      	b.n	34001e64 <MX25UM51245G_WriteCfg2Register+0xe0>
34001e62:	2301      	movs	r3, #1
34001e64:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34001e66:	2300      	movs	r3, #0
34001e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e6a:	f107 0314 	add.w	r3, r7, #20
34001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e72:	4619      	mov	r1, r3
34001e74:	68f8      	ldr	r0, [r7, #12]
34001e76:	f014 fc85 	bl	34016784 <HAL_XSPI_Command>
34001e7a:	4603      	mov	r3, r0
34001e7c:	2b00      	cmp	r3, #0
34001e7e:	d002      	beq.n	34001e86 <MX25UM51245G_WriteCfg2Register+0x102>
  {
    return MX25UM51245G_ERROR;
34001e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e84:	e00d      	b.n	34001ea2 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001e86:	f241 3288 	movw	r2, #5000	@ 0x1388
34001e8a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
34001e8e:	68f8      	ldr	r0, [r7, #12]
34001e90:	f014 fe8a 	bl	34016ba8 <HAL_XSPI_Transmit>
34001e94:	4603      	mov	r3, r0
34001e96:	2b00      	cmp	r3, #0
34001e98:	d002      	beq.n	34001ea0 <MX25UM51245G_WriteCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
34001e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001e9e:	e000      	b.n	34001ea2 <MX25UM51245G_WriteCfg2Register+0x11e>
  }

  return MX25UM51245G_OK;
34001ea0:	2300      	movs	r3, #0
}
34001ea2:	4618      	mov	r0, r3
34001ea4:	3760      	adds	r7, #96	@ 0x60
34001ea6:	46bd      	mov	sp, r7
34001ea8:	bd80      	pop	{r7, pc}

34001eaa <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
34001eaa:	b580      	push	{r7, lr}
34001eac:	b098      	sub	sp, #96	@ 0x60
34001eae:	af00      	add	r7, sp, #0
34001eb0:	60f8      	str	r0, [r7, #12]
34001eb2:	607b      	str	r3, [r7, #4]
34001eb4:	460b      	mov	r3, r1
34001eb6:	72fb      	strb	r3, [r7, #11]
34001eb8:	4613      	mov	r3, r2
34001eba:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
34001ebc:	f107 0314 	add.w	r3, r7, #20
34001ec0:	224c      	movs	r2, #76	@ 0x4c
34001ec2:	2100      	movs	r1, #0
34001ec4:	4618      	mov	r0, r3
34001ec6:	f016 ff31 	bl	34018d2c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34001eca:	7afb      	ldrb	r3, [r7, #11]
34001ecc:	2b00      	cmp	r3, #0
34001ece:	d105      	bne.n	34001edc <MX25UM51245G_ReadCfg2Register+0x32>
34001ed0:	7abb      	ldrb	r3, [r7, #10]
34001ed2:	2b01      	cmp	r3, #1
34001ed4:	d102      	bne.n	34001edc <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
34001ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001eda:	e07f      	b.n	34001fdc <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34001edc:	2300      	movs	r3, #0
34001ede:	617b      	str	r3, [r7, #20]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34001ee0:	2300      	movs	r3, #0
34001ee2:	61bb      	str	r3, [r7, #24]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
34001ee4:	7afb      	ldrb	r3, [r7, #11]
34001ee6:	2b00      	cmp	r3, #0
34001ee8:	d101      	bne.n	34001eee <MX25UM51245G_ReadCfg2Register+0x44>
34001eea:	2301      	movs	r3, #1
34001eec:	e000      	b.n	34001ef0 <MX25UM51245G_ReadCfg2Register+0x46>
34001eee:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34001ef0:	623b      	str	r3, [r7, #32]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34001ef2:	7abb      	ldrb	r3, [r7, #10]
34001ef4:	2b01      	cmp	r3, #1
34001ef6:	d101      	bne.n	34001efc <MX25UM51245G_ReadCfg2Register+0x52>
34001ef8:	2308      	movs	r3, #8
34001efa:	e000      	b.n	34001efe <MX25UM51245G_ReadCfg2Register+0x54>
34001efc:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34001f00:	7afb      	ldrb	r3, [r7, #11]
34001f02:	2b00      	cmp	r3, #0
34001f04:	d101      	bne.n	34001f0a <MX25UM51245G_ReadCfg2Register+0x60>
34001f06:	2300      	movs	r3, #0
34001f08:	e000      	b.n	34001f0c <MX25UM51245G_ReadCfg2Register+0x62>
34001f0a:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
34001f0e:	7afb      	ldrb	r3, [r7, #11]
34001f10:	2b00      	cmp	r3, #0
34001f12:	d101      	bne.n	34001f18 <MX25UM51245G_ReadCfg2Register+0x6e>
34001f14:	2371      	movs	r3, #113	@ 0x71
34001f16:	e001      	b.n	34001f1c <MX25UM51245G_ReadCfg2Register+0x72>
34001f18:	f247 138e 	movw	r3, #29070	@ 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34001f1c:	61fb      	str	r3, [r7, #28]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
34001f1e:	7afb      	ldrb	r3, [r7, #11]
34001f20:	2b00      	cmp	r3, #0
34001f22:	d102      	bne.n	34001f2a <MX25UM51245G_ReadCfg2Register+0x80>
34001f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
34001f28:	e001      	b.n	34001f2e <MX25UM51245G_ReadCfg2Register+0x84>
34001f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
34001f30:	7abb      	ldrb	r3, [r7, #10]
34001f32:	2b01      	cmp	r3, #1
34001f34:	d102      	bne.n	34001f3c <MX25UM51245G_ReadCfg2Register+0x92>
34001f36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34001f3a:	e000      	b.n	34001f3e <MX25UM51245G_ReadCfg2Register+0x94>
34001f3c:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
34001f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34001f40:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34001f44:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.Address            = ReadAddr;
34001f46:	687b      	ldr	r3, [r7, #4]
34001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34001f4a:	2300      	movs	r3, #0
34001f4c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
34001f4e:	7afb      	ldrb	r3, [r7, #11]
34001f50:	2b00      	cmp	r3, #0
34001f52:	d102      	bne.n	34001f5a <MX25UM51245G_ReadCfg2Register+0xb0>
34001f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34001f58:	e001      	b.n	34001f5e <MX25UM51245G_ReadCfg2Register+0xb4>
34001f5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34001f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
34001f60:	7abb      	ldrb	r3, [r7, #10]
34001f62:	2b01      	cmp	r3, #1
34001f64:	d102      	bne.n	34001f6c <MX25UM51245G_ReadCfg2Register+0xc2>
34001f66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34001f6a:	e000      	b.n	34001f6e <MX25UM51245G_ReadCfg2Register+0xc4>
34001f6c:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
34001f6e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
34001f70:	7afb      	ldrb	r3, [r7, #11]
34001f72:	2b00      	cmp	r3, #0
34001f74:	d006      	beq.n	34001f84 <MX25UM51245G_ReadCfg2Register+0xda>
34001f76:	7abb      	ldrb	r3, [r7, #10]
34001f78:	2b01      	cmp	r3, #1
34001f7a:	d101      	bne.n	34001f80 <MX25UM51245G_ReadCfg2Register+0xd6>
34001f7c:	2305      	movs	r3, #5
34001f7e:	e002      	b.n	34001f86 <MX25UM51245G_ReadCfg2Register+0xdc>
34001f80:	2304      	movs	r3, #4
34001f82:	e000      	b.n	34001f86 <MX25UM51245G_ReadCfg2Register+0xdc>
34001f84:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
34001f86:	65bb      	str	r3, [r7, #88]	@ 0x58
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
34001f88:	7abb      	ldrb	r3, [r7, #10]
34001f8a:	2b01      	cmp	r3, #1
34001f8c:	d101      	bne.n	34001f92 <MX25UM51245G_ReadCfg2Register+0xe8>
34001f8e:	2302      	movs	r3, #2
34001f90:	e000      	b.n	34001f94 <MX25UM51245G_ReadCfg2Register+0xea>
34001f92:	2301      	movs	r3, #1
34001f94:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
34001f96:	7abb      	ldrb	r3, [r7, #10]
34001f98:	2b01      	cmp	r3, #1
34001f9a:	d102      	bne.n	34001fa2 <MX25UM51245G_ReadCfg2Register+0xf8>
34001f9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34001fa0:	e000      	b.n	34001fa4 <MX25UM51245G_ReadCfg2Register+0xfa>
34001fa2:	2300      	movs	r3, #0
34001fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001fa6:	f107 0314 	add.w	r3, r7, #20
34001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
34001fae:	4619      	mov	r1, r3
34001fb0:	68f8      	ldr	r0, [r7, #12]
34001fb2:	f014 fbe7 	bl	34016784 <HAL_XSPI_Command>
34001fb6:	4603      	mov	r3, r0
34001fb8:	2b00      	cmp	r3, #0
34001fba:	d002      	beq.n	34001fc2 <MX25UM51245G_ReadCfg2Register+0x118>
  {
    return MX25UM51245G_ERROR;
34001fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001fc0:	e00c      	b.n	34001fdc <MX25UM51245G_ReadCfg2Register+0x132>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
34001fc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
34001fc8:	68f8      	ldr	r0, [r7, #12]
34001fca:	f014 fe60 	bl	34016c8e <HAL_XSPI_Receive>
34001fce:	4603      	mov	r3, r0
34001fd0:	2b00      	cmp	r3, #0
34001fd2:	d002      	beq.n	34001fda <MX25UM51245G_ReadCfg2Register+0x130>
  {
    return MX25UM51245G_ERROR;
34001fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34001fd8:	e000      	b.n	34001fdc <MX25UM51245G_ReadCfg2Register+0x132>
  }

  return MX25UM51245G_OK;
34001fda:	2300      	movs	r3, #0
}
34001fdc:	4618      	mov	r0, r3
34001fde:	3760      	adds	r7, #96	@ 0x60
34001fe0:	46bd      	mov	sp, r7
34001fe2:	bd80      	pop	{r7, pc}

34001fe4 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34001fe4:	b580      	push	{r7, lr}
34001fe6:	b096      	sub	sp, #88	@ 0x58
34001fe8:	af00      	add	r7, sp, #0
34001fea:	6078      	str	r0, [r7, #4]
34001fec:	460b      	mov	r3, r1
34001fee:	70fb      	strb	r3, [r7, #3]
34001ff0:	4613      	mov	r3, r2
34001ff2:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
34001ff4:	f107 030c 	add.w	r3, r7, #12
34001ff8:	224c      	movs	r2, #76	@ 0x4c
34001ffa:	2100      	movs	r1, #0
34001ffc:	4618      	mov	r0, r3
34001ffe:	f016 fe95 	bl	34018d2c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
34002002:	78fb      	ldrb	r3, [r7, #3]
34002004:	2b00      	cmp	r3, #0
34002006:	d105      	bne.n	34002014 <MX25UM51245G_ResetEnable+0x30>
34002008:	78bb      	ldrb	r3, [r7, #2]
3400200a:	2b01      	cmp	r3, #1
3400200c:	d102      	bne.n	34002014 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
3400200e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002012:	e039      	b.n	34002088 <MX25UM51245G_ResetEnable+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
34002014:	2300      	movs	r3, #0
34002016:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
34002018:	2300      	movs	r3, #0
3400201a:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
3400201c:	78fb      	ldrb	r3, [r7, #3]
3400201e:	2b00      	cmp	r3, #0
34002020:	d101      	bne.n	34002026 <MX25UM51245G_ResetEnable+0x42>
34002022:	2301      	movs	r3, #1
34002024:	e000      	b.n	34002028 <MX25UM51245G_ResetEnable+0x44>
34002026:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
34002028:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400202a:	78bb      	ldrb	r3, [r7, #2]
3400202c:	2b01      	cmp	r3, #1
3400202e:	d101      	bne.n	34002034 <MX25UM51245G_ResetEnable+0x50>
34002030:	2308      	movs	r3, #8
34002032:	e000      	b.n	34002036 <MX25UM51245G_ResetEnable+0x52>
34002034:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
34002036:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
34002038:	78fb      	ldrb	r3, [r7, #3]
3400203a:	2b00      	cmp	r3, #0
3400203c:	d101      	bne.n	34002042 <MX25UM51245G_ResetEnable+0x5e>
3400203e:	2300      	movs	r3, #0
34002040:	e000      	b.n	34002044 <MX25UM51245G_ResetEnable+0x60>
34002042:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
34002044:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
34002046:	78fb      	ldrb	r3, [r7, #3]
34002048:	2b00      	cmp	r3, #0
3400204a:	d101      	bne.n	34002050 <MX25UM51245G_ResetEnable+0x6c>
3400204c:	2366      	movs	r3, #102	@ 0x66
3400204e:	e001      	b.n	34002054 <MX25UM51245G_ResetEnable+0x70>
34002050:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002054:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34002056:	2300      	movs	r3, #0
34002058:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3400205a:	2300      	movs	r3, #0
3400205c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
3400205e:	2300      	movs	r3, #0
34002060:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
34002062:	2300      	movs	r3, #0
34002064:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002066:	2300      	movs	r3, #0
34002068:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400206a:	f107 030c 	add.w	r3, r7, #12
3400206e:	f241 3288 	movw	r2, #5000	@ 0x1388
34002072:	4619      	mov	r1, r3
34002074:	6878      	ldr	r0, [r7, #4]
34002076:	f014 fb85 	bl	34016784 <HAL_XSPI_Command>
3400207a:	4603      	mov	r3, r0
3400207c:	2b00      	cmp	r3, #0
3400207e:	d002      	beq.n	34002086 <MX25UM51245G_ResetEnable+0xa2>
  {
    return MX25UM51245G_ERROR;
34002080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002084:	e000      	b.n	34002088 <MX25UM51245G_ResetEnable+0xa4>
  }

  return MX25UM51245G_OK;
34002086:	2300      	movs	r3, #0
}
34002088:	4618      	mov	r0, r3
3400208a:	3758      	adds	r7, #88	@ 0x58
3400208c:	46bd      	mov	sp, r7
3400208e:	bd80      	pop	{r7, pc}

34002090 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
34002090:	b580      	push	{r7, lr}
34002092:	b096      	sub	sp, #88	@ 0x58
34002094:	af00      	add	r7, sp, #0
34002096:	6078      	str	r0, [r7, #4]
34002098:	460b      	mov	r3, r1
3400209a:	70fb      	strb	r3, [r7, #3]
3400209c:	4613      	mov	r3, r2
3400209e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
340020a0:	f107 030c 	add.w	r3, r7, #12
340020a4:	224c      	movs	r2, #76	@ 0x4c
340020a6:	2100      	movs	r1, #0
340020a8:	4618      	mov	r0, r3
340020aa:	f016 fe3f 	bl	34018d2c <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
340020ae:	78fb      	ldrb	r3, [r7, #3]
340020b0:	2b00      	cmp	r3, #0
340020b2:	d105      	bne.n	340020c0 <MX25UM51245G_ResetMemory+0x30>
340020b4:	78bb      	ldrb	r3, [r7, #2]
340020b6:	2b01      	cmp	r3, #1
340020b8:	d102      	bne.n	340020c0 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
340020ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
340020be:	e039      	b.n	34002134 <MX25UM51245G_ResetMemory+0xa4>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
340020c0:	2300      	movs	r3, #0
340020c2:	60fb      	str	r3, [r7, #12]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
340020c4:	2300      	movs	r3, #0
340020c6:	613b      	str	r3, [r7, #16]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
340020c8:	78fb      	ldrb	r3, [r7, #3]
340020ca:	2b00      	cmp	r3, #0
340020cc:	d101      	bne.n	340020d2 <MX25UM51245G_ResetMemory+0x42>
340020ce:	2301      	movs	r3, #1
340020d0:	e000      	b.n	340020d4 <MX25UM51245G_ResetMemory+0x44>
340020d2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
340020d4:	61bb      	str	r3, [r7, #24]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
340020d6:	78bb      	ldrb	r3, [r7, #2]
340020d8:	2b01      	cmp	r3, #1
340020da:	d101      	bne.n	340020e0 <MX25UM51245G_ResetMemory+0x50>
340020dc:	2308      	movs	r3, #8
340020de:	e000      	b.n	340020e2 <MX25UM51245G_ResetMemory+0x52>
340020e0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
340020e2:	623b      	str	r3, [r7, #32]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
340020e4:	78fb      	ldrb	r3, [r7, #3]
340020e6:	2b00      	cmp	r3, #0
340020e8:	d101      	bne.n	340020ee <MX25UM51245G_ResetMemory+0x5e>
340020ea:	2300      	movs	r3, #0
340020ec:	e000      	b.n	340020f0 <MX25UM51245G_ResetMemory+0x60>
340020ee:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
340020f0:	61fb      	str	r3, [r7, #28]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
340020f2:	78fb      	ldrb	r3, [r7, #3]
340020f4:	2b00      	cmp	r3, #0
340020f6:	d101      	bne.n	340020fc <MX25UM51245G_ResetMemory+0x6c>
340020f8:	2399      	movs	r3, #153	@ 0x99
340020fa:	e001      	b.n	34002100 <MX25UM51245G_ResetMemory+0x70>
340020fc:	f649 1366 	movw	r3, #39270	@ 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
34002100:	617b      	str	r3, [r7, #20]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34002102:	2300      	movs	r3, #0
34002104:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34002106:	2300      	movs	r3, #0
34002108:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
3400210a:	2300      	movs	r3, #0
3400210c:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles        = 0U;
3400210e:	2300      	movs	r3, #0
34002110:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
34002112:	2300      	movs	r3, #0
34002114:	657b      	str	r3, [r7, #84]	@ 0x54
#if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
#endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34002116:	f107 030c 	add.w	r3, r7, #12
3400211a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400211e:	4619      	mov	r1, r3
34002120:	6878      	ldr	r0, [r7, #4]
34002122:	f014 fb2f 	bl	34016784 <HAL_XSPI_Command>
34002126:	4603      	mov	r3, r0
34002128:	2b00      	cmp	r3, #0
3400212a:	d002      	beq.n	34002132 <MX25UM51245G_ResetMemory+0xa2>
  {
    return MX25UM51245G_ERROR;
3400212c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34002130:	e000      	b.n	34002134 <MX25UM51245G_ResetMemory+0xa4>
  }

  return MX25UM51245G_OK;
34002132:	2300      	movs	r3, #0
}
34002134:	4618      	mov	r0, r3
34002136:	3758      	adds	r7, #88	@ 0x58
34002138:	46bd      	mov	sp, r7
3400213a:	bd80      	pop	{r7, pc}

3400213c <LL_AHB4_GRP1_EnableClock>:
{
3400213c:	b480      	push	{r7}
3400213e:	b085      	sub	sp, #20
34002140:	af00      	add	r7, sp, #0
34002142:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34002144:	4a07      	ldr	r2, [pc, #28]	@ (34002164 <LL_AHB4_GRP1_EnableClock+0x28>)
34002146:	687b      	ldr	r3, [r7, #4]
34002148:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400214c:	4b05      	ldr	r3, [pc, #20]	@ (34002164 <LL_AHB4_GRP1_EnableClock+0x28>)
3400214e:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34002152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002154:	68fb      	ldr	r3, [r7, #12]
}
34002156:	bf00      	nop
34002158:	3714      	adds	r7, #20
3400215a:	46bd      	mov	sp, r7
3400215c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002160:	4770      	bx	lr
34002162:	bf00      	nop
34002164:	56028000 	.word	0x56028000

34002168 <LL_APB2_GRP1_EnableClock>:
{
34002168:	b480      	push	{r7}
3400216a:	b085      	sub	sp, #20
3400216c:	af00      	add	r7, sp, #0
3400216e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB2ENSR, Periphs);
34002170:	4a07      	ldr	r2, [pc, #28]	@ (34002190 <LL_APB2_GRP1_EnableClock+0x28>)
34002172:	687b      	ldr	r3, [r7, #4]
34002174:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
34002178:	4b05      	ldr	r3, [pc, #20]	@ (34002190 <LL_APB2_GRP1_EnableClock+0x28>)
3400217a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3400217e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34002180:	68fb      	ldr	r3, [r7, #12]
}
34002182:	bf00      	nop
34002184:	3714      	adds	r7, #20
34002186:	46bd      	mov	sp, r7
34002188:	f85d 7b04 	ldr.w	r7, [sp], #4
3400218c:	4770      	bx	lr
3400218e:	bf00      	nop
34002190:	56028000 	.word	0x56028000

34002194 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
34002194:	b580      	push	{r7, lr}
34002196:	b088      	sub	sp, #32
34002198:	af00      	add	r7, sp, #0
3400219a:	4603      	mov	r3, r0
3400219c:	71fb      	strb	r3, [r7, #7]
  SMPS_GPIO_CLK_ENABLE();
3400219e:	2002      	movs	r0, #2
340021a0:	f7ff ffcc 	bl	3400213c <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
340021a4:	f107 030c 	add.w	r3, r7, #12
340021a8:	2200      	movs	r2, #0
340021aa:	601a      	str	r2, [r3, #0]
340021ac:	605a      	str	r2, [r3, #4]
340021ae:	609a      	str	r2, [r3, #8]
340021b0:	60da      	str	r2, [r3, #12]
340021b2:	611a      	str	r2, [r3, #16]
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
340021b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
340021b8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
340021ba:	2301      	movs	r3, #1
340021bc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
340021be:	2300      	movs	r3, #0
340021c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
340021c2:	2303      	movs	r3, #3
340021c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SMPS_GPIO_PORT, &gpio_init_structure);
340021c6:	f107 030c 	add.w	r3, r7, #12
340021ca:	4619      	mov	r1, r3
340021cc:	4806      	ldr	r0, [pc, #24]	@ (340021e8 <BSP_SMPS_Init+0x54>)
340021ce:	f003 f899 	bl	34005304 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
340021d2:	79fb      	ldrb	r3, [r7, #7]
340021d4:	461a      	mov	r2, r3
340021d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
340021da:	4803      	ldr	r0, [pc, #12]	@ (340021e8 <BSP_SMPS_Init+0x54>)
340021dc:	f003 fbf2 	bl	340059c4 <HAL_GPIO_WritePin>
}
340021e0:	bf00      	nop
340021e2:	3720      	adds	r7, #32
340021e4:	46bd      	mov	sp, r7
340021e6:	bd80      	pop	{r7, pc}
340021e8:	56020400 	.word	0x56020400

340021ec <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
340021ec:	b580      	push	{r7, lr}
340021ee:	b084      	sub	sp, #16
340021f0:	af00      	add	r7, sp, #0
340021f2:	4603      	mov	r3, r0
340021f4:	6039      	str	r1, [r7, #0]
340021f6:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
340021f8:	2300      	movs	r3, #0
340021fa:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
340021fc:	683b      	ldr	r3, [r7, #0]
340021fe:	2b00      	cmp	r3, #0
34002200:	d103      	bne.n	3400220a <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
34002202:	f06f 0301 	mvn.w	r3, #1
34002206:	60fb      	str	r3, [r7, #12]
34002208:	e029      	b.n	3400225e <BSP_COM_Init+0x72>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
3400220a:	79fa      	ldrb	r2, [r7, #7]
3400220c:	79fb      	ldrb	r3, [r7, #7]
3400220e:	4916      	ldr	r1, [pc, #88]	@ (34002268 <BSP_COM_Init+0x7c>)
34002210:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
34002214:	4915      	ldr	r1, [pc, #84]	@ (3400226c <BSP_COM_Init+0x80>)
34002216:	2094      	movs	r0, #148	@ 0x94
34002218:	fb00 f303 	mul.w	r3, r0, r3
3400221c:	440b      	add	r3, r1
3400221e:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
34002220:	79fb      	ldrb	r3, [r7, #7]
34002222:	2294      	movs	r2, #148	@ 0x94
34002224:	fb02 f303 	mul.w	r3, r2, r3
34002228:	4a10      	ldr	r2, [pc, #64]	@ (3400226c <BSP_COM_Init+0x80>)
3400222a:	4413      	add	r3, r2
3400222c:	4618      	mov	r0, r3
3400222e:	f000 f853 	bl	340022d8 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

    if (status == BSP_ERROR_NONE)
34002232:	68fb      	ldr	r3, [r7, #12]
34002234:	2b00      	cmp	r3, #0
34002236:	d112      	bne.n	3400225e <BSP_COM_Init+0x72>
    {
      if (COM == COM1)
34002238:	79fb      	ldrb	r3, [r7, #7]
3400223a:	2b00      	cmp	r3, #0
3400223c:	d10f      	bne.n	3400225e <BSP_COM_Init+0x72>
      {
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400223e:	79fb      	ldrb	r3, [r7, #7]
34002240:	2294      	movs	r2, #148	@ 0x94
34002242:	fb02 f303 	mul.w	r3, r2, r3
34002246:	4a09      	ldr	r2, [pc, #36]	@ (3400226c <BSP_COM_Init+0x80>)
34002248:	4413      	add	r3, r2
3400224a:	6839      	ldr	r1, [r7, #0]
3400224c:	4618      	mov	r0, r3
3400224e:	f000 f80f 	bl	34002270 <MX_USART1_Init>
34002252:	4603      	mov	r3, r0
34002254:	2b00      	cmp	r3, #0
34002256:	d002      	beq.n	3400225e <BSP_COM_Init+0x72>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
34002258:	f06f 0303 	mvn.w	r3, #3
3400225c:	60fb      	str	r3, [r7, #12]
//        }
      }
    }
  }

  return status;
3400225e:	68fb      	ldr	r3, [r7, #12]
}
34002260:	4618      	mov	r0, r3
34002262:	3710      	adds	r7, #16
34002264:	46bd      	mov	sp, r7
34002266:	bd80      	pop	{r7, pc}
34002268:	3401be2c 	.word	0x3401be2c
3400226c:	3401c030 	.word	0x3401c030

34002270 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
34002270:	b580      	push	{r7, lr}
34002272:	b082      	sub	sp, #8
34002274:	af00      	add	r7, sp, #0
34002276:	6078      	str	r0, [r7, #4]
34002278:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance            = COM_UART[COM1];
3400227a:	4b16      	ldr	r3, [pc, #88]	@ (340022d4 <MX_USART1_Init+0x64>)
3400227c:	681a      	ldr	r2, [r3, #0]
3400227e:	687b      	ldr	r3, [r7, #4]
34002280:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate       = COM_Init->BaudRate;
34002282:	683b      	ldr	r3, [r7, #0]
34002284:	681a      	ldr	r2, [r3, #0]
34002286:	687b      	ldr	r3, [r7, #4]
34002288:	605a      	str	r2, [r3, #4]
  huart->Init.Mode           = UART_MODE_TX_RX;
3400228a:	687b      	ldr	r3, [r7, #4]
3400228c:	220c      	movs	r2, #12
3400228e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity         = (uint32_t)COM_Init->Parity;
34002290:	683b      	ldr	r3, [r7, #0]
34002292:	895b      	ldrh	r3, [r3, #10]
34002294:	461a      	mov	r2, r3
34002296:	687b      	ldr	r3, [r7, #4]
34002298:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength     = (uint32_t)COM_Init->WordLength;
3400229a:	683b      	ldr	r3, [r7, #0]
3400229c:	685a      	ldr	r2, [r3, #4]
3400229e:	687b      	ldr	r3, [r7, #4]
340022a0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t)COM_Init->StopBits;
340022a2:	683b      	ldr	r3, [r7, #0]
340022a4:	891b      	ldrh	r3, [r3, #8]
340022a6:	461a      	mov	r2, r3
340022a8:	687b      	ldr	r3, [r7, #4]
340022aa:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl      = (uint32_t)COM_Init->HwFlowCtl;
340022ac:	683b      	ldr	r3, [r7, #0]
340022ae:	899b      	ldrh	r3, [r3, #12]
340022b0:	461a      	mov	r2, r3
340022b2:	687b      	ldr	r3, [r7, #4]
340022b4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
340022b6:	687b      	ldr	r3, [r7, #4]
340022b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340022bc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
340022be:	687b      	ldr	r3, [r7, #4]
340022c0:	2200      	movs	r2, #0
340022c2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
340022c4:	6878      	ldr	r0, [r7, #4]
340022c6:	f012 ff3d 	bl	34015144 <HAL_UART_Init>
340022ca:	4603      	mov	r3, r0
}
340022cc:	4618      	mov	r0, r3
340022ce:	3708      	adds	r7, #8
340022d0:	46bd      	mov	sp, r7
340022d2:	bd80      	pop	{r7, pc}
340022d4:	3401be2c 	.word	0x3401be2c

340022d8 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
340022d8:	b580      	push	{r7, lr}
340022da:	b090      	sub	sp, #64	@ 0x40
340022dc:	af00      	add	r7, sp, #0
340022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
340022e0:	f107 0320 	add.w	r3, r7, #32
340022e4:	2200      	movs	r2, #0
340022e6:	601a      	str	r2, [r3, #0]
340022e8:	605a      	str	r2, [r3, #4]
340022ea:	4b34      	ldr	r3, [pc, #208]	@ (340023bc <UART_MspInit+0xe4>)
340022ec:	623b      	str	r3, [r7, #32]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
340022ee:	f107 0318 	add.w	r3, r7, #24
340022f2:	2200      	movs	r2, #0
340022f4:	601a      	str	r2, [r3, #0]
340022f6:	605a      	str	r2, [r3, #4]
340022f8:	4b31      	ldr	r3, [pc, #196]	@ (340023c0 <UART_MspInit+0xe8>)
340022fa:	61bb      	str	r3, [r7, #24]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN};
340022fc:	2300      	movs	r3, #0
340022fe:	617b      	str	r3, [r7, #20]
34002300:	2320      	movs	r3, #32
34002302:	82bb      	strh	r3, [r7, #20]
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN};
34002304:	2300      	movs	r3, #0
34002306:	613b      	str	r3, [r7, #16]
34002308:	2340      	movs	r3, #64	@ 0x40
3400230a:	823b      	strh	r3, [r7, #16]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF};
3400230c:	2307      	movs	r3, #7
3400230e:	81bb      	strh	r3, [r7, #12]
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF};
34002310:	2307      	movs	r3, #7
34002312:	813b      	strh	r3, [r7, #8]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
34002314:	687b      	ldr	r3, [r7, #4]
34002316:	681b      	ldr	r3, [r3, #0]
34002318:	4a2a      	ldr	r2, [pc, #168]	@ (340023c4 <UART_MspInit+0xec>)
3400231a:	4293      	cmp	r3, r2
3400231c:	d14a      	bne.n	340023b4 <UART_MspInit+0xdc>
  {
    COM = COM1;
3400231e:	2300      	movs	r3, #0
34002320:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
34002324:	2010      	movs	r0, #16
34002326:	f7ff ff09 	bl	3400213c <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
3400232a:	2008      	movs	r0, #8
3400232c:	f7ff ff06 	bl	3400213c <LL_AHB4_GRP1_EnableClock>
    COM1_CLK_ENABLE();
34002330:	2010      	movs	r0, #16
34002332:	f7ff ff19 	bl	34002168 <LL_APB2_GRP1_EnableClock>
  {
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
34002336:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3400233a:	005b      	lsls	r3, r3, #1
3400233c:	3340      	adds	r3, #64	@ 0x40
3400233e:	443b      	add	r3, r7
34002340:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
34002344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
34002346:	2302      	movs	r3, #2
34002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
3400234a:	2302      	movs	r3, #2
3400234c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Pull      = GPIO_PULLUP;
3400234e:	2301      	movs	r3, #1
34002350:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_TX_AF[COM];
34002352:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002356:	3340      	adds	r3, #64	@ 0x40
34002358:	443b      	add	r3, r7
3400235a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
3400235e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
34002360:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
34002364:	009b      	lsls	r3, r3, #2
34002366:	3340      	adds	r3, #64	@ 0x40
34002368:	443b      	add	r3, r7
3400236a:	f853 3c20 	ldr.w	r3, [r3, #-32]
3400236e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
34002372:	4611      	mov	r1, r2
34002374:	4618      	mov	r0, r3
34002376:	f002 ffc5 	bl	34005304 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
3400237a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3400237e:	005b      	lsls	r3, r3, #1
34002380:	3340      	adds	r3, #64	@ 0x40
34002382:	443b      	add	r3, r7
34002384:	f833 3c30 	ldrh.w	r3, [r3, #-48]
34002388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = COM_RX_AF[COM];
3400238a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3400238e:	3340      	adds	r3, #64	@ 0x40
34002390:	443b      	add	r3, r7
34002392:	f813 3c38 	ldrb.w	r3, [r3, #-56]
34002396:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
34002398:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
3400239c:	009b      	lsls	r3, r3, #2
3400239e:	3340      	adds	r3, #64	@ 0x40
340023a0:	443b      	add	r3, r7
340023a2:	f853 3c28 	ldr.w	r3, [r3, #-40]
340023a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
340023aa:	4611      	mov	r1, r2
340023ac:	4618      	mov	r0, r3
340023ae:	f002 ffa9 	bl	34005304 <HAL_GPIO_Init>
340023b2:	e000      	b.n	340023b6 <UART_MspInit+0xde>
      return;
340023b4:	bf00      	nop
}
340023b6:	3740      	adds	r7, #64	@ 0x40
340023b8:	46bd      	mov	sp, r7
340023ba:	bd80      	pop	{r7, pc}
340023bc:	56021000 	.word	0x56021000
340023c0:	56020c00 	.word	0x56020c00
340023c4:	52001000 	.word	0x52001000

340023c8 <LL_AHB4_GRP1_EnableClock>:
{
340023c8:	b480      	push	{r7}
340023ca:	b085      	sub	sp, #20
340023cc:	af00      	add	r7, sp, #0
340023ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340023d0:	4a07      	ldr	r2, [pc, #28]	@ (340023f0 <LL_AHB4_GRP1_EnableClock+0x28>)
340023d2:	687b      	ldr	r3, [r7, #4]
340023d4:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
340023d8:	4b05      	ldr	r3, [pc, #20]	@ (340023f0 <LL_AHB4_GRP1_EnableClock+0x28>)
340023da:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
340023de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
340023e0:	68fb      	ldr	r3, [r7, #12]
}
340023e2:	bf00      	nop
340023e4:	3714      	adds	r7, #20
340023e6:	46bd      	mov	sp, r7
340023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
340023ec:	4770      	bx	lr
340023ee:	bf00      	nop
340023f0:	56028000 	.word	0x56028000

340023f4 <LL_AHB5_GRP1_EnableClock>:
{
340023f4:	b480      	push	{r7}
340023f6:	b085      	sub	sp, #20
340023f8:	af00      	add	r7, sp, #0
340023fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
340023fc:	4a07      	ldr	r2, [pc, #28]	@ (3400241c <LL_AHB5_GRP1_EnableClock+0x28>)
340023fe:	687b      	ldr	r3, [r7, #4]
34002400:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34002404:	4b05      	ldr	r3, [pc, #20]	@ (3400241c <LL_AHB5_GRP1_EnableClock+0x28>)
34002406:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
3400240a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
3400240c:	68fb      	ldr	r3, [r7, #12]
}
3400240e:	bf00      	nop
34002410:	3714      	adds	r7, #20
34002412:	46bd      	mov	sp, r7
34002414:	f85d 7b04 	ldr.w	r7, [sp], #4
34002418:	4770      	bx	lr
3400241a:	bf00      	nop
3400241c:	56028000 	.word	0x56028000

34002420 <LL_AHB5_GRP1_ForceReset>:
{
34002420:	b480      	push	{r7}
34002422:	b083      	sub	sp, #12
34002424:	af00      	add	r7, sp, #0
34002426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34002428:	4a04      	ldr	r2, [pc, #16]	@ (3400243c <LL_AHB5_GRP1_ForceReset+0x1c>)
3400242a:	687b      	ldr	r3, [r7, #4]
3400242c:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
}
34002430:	bf00      	nop
34002432:	370c      	adds	r7, #12
34002434:	46bd      	mov	sp, r7
34002436:	f85d 7b04 	ldr.w	r7, [sp], #4
3400243a:	4770      	bx	lr
3400243c:	56028000 	.word	0x56028000

34002440 <LL_AHB5_GRP1_ReleaseReset>:
{
34002440:	b480      	push	{r7}
34002442:	b083      	sub	sp, #12
34002444:	af00      	add	r7, sp, #0
34002446:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34002448:	4b06      	ldr	r3, [pc, #24]	@ (34002464 <LL_AHB5_GRP1_ReleaseReset+0x24>)
3400244a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400244e:	461a      	mov	r2, r3
34002450:	687b      	ldr	r3, [r7, #4]
34002452:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
}
34002456:	bf00      	nop
34002458:	370c      	adds	r7, #12
3400245a:	46bd      	mov	sp, r7
3400245c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002460:	4770      	bx	lr
34002462:	bf00      	nop
34002464:	56028000 	.word	0x56028000

34002468 <BSP_XSPI_NOR_Init>:
  * @param  Instance   XSPI Instance
  * @param  Init       XSPI Init structure
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_Init(uint32_t Instance, BSP_XSPI_NOR_Init_t *Init)
{
34002468:	b590      	push	{r4, r7, lr}
3400246a:	b095      	sub	sp, #84	@ 0x54
3400246c:	af00      	add	r7, sp, #0
3400246e:	6078      	str	r0, [r7, #4]
34002470:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_XSPI_NOR_Info_t pInfo;
  MX_XSPI_InitTypeDef xspi_init;

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002472:	687b      	ldr	r3, [r7, #4]
34002474:	2b00      	cmp	r3, #0
34002476:	d003      	beq.n	34002480 <BSP_XSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002478:	f06f 0301 	mvn.w	r3, #1
3400247c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400247e:	e080      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
34002480:	4947      	ldr	r1, [pc, #284]	@ (340025a0 <BSP_XSPI_NOR_Init+0x138>)
34002482:	687a      	ldr	r2, [r7, #4]
34002484:	4613      	mov	r3, r2
34002486:	005b      	lsls	r3, r3, #1
34002488:	4413      	add	r3, r2
3400248a:	440b      	add	r3, r1
3400248c:	781b      	ldrb	r3, [r3, #0]
3400248e:	2b00      	cmp	r3, #0
34002490:	d175      	bne.n	3400257e <BSP_XSPI_NOR_Init+0x116>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp XSPI initialization */
      XSPI_NOR_MspInit(&hxspi_nor[Instance]);
34002492:	687b      	ldr	r3, [r7, #4]
34002494:	2264      	movs	r2, #100	@ 0x64
34002496:	fb02 f303 	mul.w	r3, r2, r3
3400249a:	4a42      	ldr	r2, [pc, #264]	@ (340025a4 <BSP_XSPI_NOR_Init+0x13c>)
3400249c:	4413      	add	r3, r2
3400249e:	4618      	mov	r0, r3
340024a0:	f000 f9b6 	bl	34002810 <XSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
340024a4:	f107 031c 	add.w	r3, r7, #28
340024a8:	4618      	mov	r0, r3
340024aa:	f7ff f9a5 	bl	340017f8 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      xspi_init.ClockPrescaler = 3;
340024ae:	2303      	movs	r3, #3
340024b0:	613b      	str	r3, [r7, #16]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
340024b2:	69fb      	ldr	r3, [r7, #28]
340024b4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
340024b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
340024b8:	fa93 f3a3 	rbit	r3, r3
340024bc:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
340024be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340024c0:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
340024c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340024c4:	2b00      	cmp	r3, #0
340024c6:	d101      	bne.n	340024cc <BSP_XSPI_NOR_Init+0x64>
  {
    return 32U;
340024c8:	2320      	movs	r3, #32
340024ca:	e003      	b.n	340024d4 <BSP_XSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
340024cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
340024ce:	fab3 f383 	clz	r3, r3
340024d2:	b2db      	uxtb	r3, r3
340024d4:	60fb      	str	r3, [r7, #12]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340024d6:	2300      	movs	r3, #0
340024d8:	617b      	str	r3, [r7, #20]
      xspi_init.TransferRate   = (uint32_t) Init->TransferRate;
340024da:	683b      	ldr	r3, [r7, #0]
340024dc:	785b      	ldrb	r3, [r3, #1]
340024de:	61bb      	str	r3, [r7, #24]

      /* STM32 XSPI interface initialization */
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340024e0:	687b      	ldr	r3, [r7, #4]
340024e2:	2264      	movs	r2, #100	@ 0x64
340024e4:	fb02 f303 	mul.w	r3, r2, r3
340024e8:	4a2e      	ldr	r2, [pc, #184]	@ (340025a4 <BSP_XSPI_NOR_Init+0x13c>)
340024ea:	4413      	add	r3, r2
340024ec:	f107 020c 	add.w	r2, r7, #12
340024f0:	4611      	mov	r1, r2
340024f2:	4618      	mov	r0, r3
340024f4:	f000 f858 	bl	340025a8 <MX_XSPI_NOR_Init>
340024f8:	4603      	mov	r3, r0
340024fa:	2b00      	cmp	r3, #0
340024fc:	d003      	beq.n	34002506 <BSP_XSPI_NOR_Init+0x9e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
340024fe:	f06f 0303 	mvn.w	r3, #3
34002502:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002504:	e03d      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* XSPI memory reset */
      else if (XSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
34002506:	6878      	ldr	r0, [r7, #4]
34002508:	f000 fa50 	bl	340029ac <XSPI_NOR_ResetMemory>
3400250c:	4603      	mov	r3, r0
3400250e:	2b00      	cmp	r3, #0
34002510:	d003      	beq.n	3400251a <BSP_XSPI_NOR_Init+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002512:	f06f 0304 	mvn.w	r3, #4
34002516:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002518:	e033      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
3400251a:	687b      	ldr	r3, [r7, #4]
3400251c:	2264      	movs	r2, #100	@ 0x64
3400251e:	fb02 f303 	mul.w	r3, r2, r3
34002522:	4a20      	ldr	r2, [pc, #128]	@ (340025a4 <BSP_XSPI_NOR_Init+0x13c>)
34002524:	1898      	adds	r0, r3, r2
34002526:	491e      	ldr	r1, [pc, #120]	@ (340025a0 <BSP_XSPI_NOR_Init+0x138>)
34002528:	687a      	ldr	r2, [r7, #4]
3400252a:	4613      	mov	r3, r2
3400252c:	005b      	lsls	r3, r3, #1
3400252e:	4413      	add	r3, r2
34002530:	440b      	add	r3, r1
34002532:	3301      	adds	r3, #1
34002534:	7819      	ldrb	r1, [r3, #0]
34002536:	4c1a      	ldr	r4, [pc, #104]	@ (340025a0 <BSP_XSPI_NOR_Init+0x138>)
34002538:	687a      	ldr	r2, [r7, #4]
3400253a:	4613      	mov	r3, r2
3400253c:	005b      	lsls	r3, r3, #1
3400253e:	4413      	add	r3, r2
34002540:	4423      	add	r3, r4
34002542:	3302      	adds	r3, #2
34002544:	781b      	ldrb	r3, [r3, #0]
34002546:	461a      	mov	r2, r3
34002548:	f7ff f985 	bl	34001856 <MX25UM51245G_AutoPollingMemReady>
3400254c:	4603      	mov	r3, r0
3400254e:	2b00      	cmp	r3, #0
34002550:	d003      	beq.n	3400255a <BSP_XSPI_NOR_Init+0xf2>
                                                Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002552:	f06f 0304 	mvn.w	r3, #4
34002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002558:	e013      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
      }
      /* Configure the memory */
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
3400255a:	683b      	ldr	r3, [r7, #0]
3400255c:	7819      	ldrb	r1, [r3, #0]
3400255e:	683b      	ldr	r3, [r7, #0]
34002560:	785b      	ldrb	r3, [r3, #1]
34002562:	461a      	mov	r2, r3
34002564:	6878      	ldr	r0, [r7, #4]
34002566:	f000 f8c7 	bl	340026f8 <BSP_XSPI_NOR_ConfigFlash>
3400256a:	4603      	mov	r3, r0
3400256c:	2b00      	cmp	r3, #0
3400256e:	d003      	beq.n	34002578 <BSP_XSPI_NOR_Init+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
34002570:	f06f 0304 	mvn.w	r3, #4
34002574:	64fb      	str	r3, [r7, #76]	@ 0x4c
34002576:	e004      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
34002578:	2300      	movs	r3, #0
3400257a:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400257c:	e001      	b.n	34002582 <BSP_XSPI_NOR_Init+0x11a>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
3400257e:	2300      	movs	r3, #0
34002580:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0);
34002582:	687b      	ldr	r3, [r7, #4]
34002584:	2264      	movs	r2, #100	@ 0x64
34002586:	fb02 f303 	mul.w	r3, r2, r3
3400258a:	4a06      	ldr	r2, [pc, #24]	@ (340025a4 <BSP_XSPI_NOR_Init+0x13c>)
3400258c:	4413      	add	r3, r2
3400258e:	2100      	movs	r1, #0
34002590:	4618      	mov	r0, r3
34002592:	f014 fd8b 	bl	340170ac <HAL_XSPI_SetClockPrescaler>
  /* Return BSP status */
  return ret;
34002596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
34002598:	4618      	mov	r0, r3
3400259a:	3754      	adds	r7, #84	@ 0x54
3400259c:	46bd      	mov	sp, r7
3400259e:	bd90      	pop	{r4, r7, pc}
340025a0:	3401c1bc 	.word	0x3401c1bc
340025a4:	3401c158 	.word	0x3401c158

340025a8 <MX_XSPI_NOR_Init>:
  * @param  hxspi          XSPI handle
  * @param  Init           XSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_XSPI_NOR_Init(XSPI_HandleTypeDef *hxspi, MX_XSPI_InitTypeDef *Init)
{
340025a8:	b580      	push	{r7, lr}
340025aa:	b082      	sub	sp, #8
340025ac:	af00      	add	r7, sp, #0
340025ae:	6078      	str	r0, [r7, #4]
340025b0:	6039      	str	r1, [r7, #0]
  /* XSPI initialization */
  hxspi->Instance = XSPI2;
340025b2:	687b      	ldr	r3, [r7, #4]
340025b4:	4a1e      	ldr	r2, [pc, #120]	@ (34002630 <MX_XSPI_NOR_Init+0x88>)
340025b6:	601a      	str	r2, [r3, #0]

  hxspi->Init.FifoThresholdByte       = 4;
340025b8:	687b      	ldr	r3, [r7, #4]
340025ba:	2204      	movs	r2, #4
340025bc:	605a      	str	r2, [r3, #4]
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
340025be:	687b      	ldr	r3, [r7, #4]
340025c0:	2200      	movs	r2, #0
340025c2:	609a      	str	r2, [r3, #8]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
340025c4:	683b      	ldr	r3, [r7, #0]
340025c6:	681a      	ldr	r2, [r3, #0]
340025c8:	687b      	ldr	r3, [r7, #4]
340025ca:	611a      	str	r2, [r3, #16]
  hxspi->Init.ChipSelectHighTimeCycle = 2;
340025cc:	687b      	ldr	r3, [r7, #4]
340025ce:	2202      	movs	r2, #2
340025d0:	615a      	str	r2, [r3, #20]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
340025d2:	687b      	ldr	r3, [r7, #4]
340025d4:	2200      	movs	r2, #0
340025d6:	619a      	str	r2, [r3, #24]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
340025d8:	687b      	ldr	r3, [r7, #4]
340025da:	2200      	movs	r2, #0
340025dc:	61da      	str	r2, [r3, #28]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
340025de:	687b      	ldr	r3, [r7, #4]
340025e0:	2200      	movs	r2, #0
340025e2:	621a      	str	r2, [r3, #32]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
340025e4:	683b      	ldr	r3, [r7, #0]
340025e6:	685a      	ldr	r2, [r3, #4]
340025e8:	687b      	ldr	r3, [r7, #4]
340025ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi->Init.SampleShifting          = Init->SampleShifting;
340025ec:	683b      	ldr	r3, [r7, #0]
340025ee:	689a      	ldr	r2, [r3, #8]
340025f0:	687b      	ldr	r3, [r7, #4]
340025f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary      = 0;
340025f4:	687b      	ldr	r3, [r7, #4]
340025f6:	2200      	movs	r2, #0
340025f8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (OCTOSPI_DCR1_DLYBYP)
  hxspi->Init.DelayBlockBypass           = HAL_XSPI_DELAY_BLOCK_BYPASS;
#endif /* OCTOSPI_DCR1_DLYBYP */

  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
340025fa:	683b      	ldr	r3, [r7, #0]
340025fc:	68db      	ldr	r3, [r3, #12]
340025fe:	2b01      	cmp	r3, #1
34002600:	d108      	bne.n	34002614 <MX_XSPI_NOR_Init+0x6c>
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002602:	687b      	ldr	r3, [r7, #4]
34002604:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002608:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400260a:	687b      	ldr	r3, [r7, #4]
3400260c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002610:	62da      	str	r2, [r3, #44]	@ 0x2c
34002612:	e005      	b.n	34002620 <MX_XSPI_NOR_Init+0x78>
  }
  else
  {
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002614:	687b      	ldr	r3, [r7, #4]
34002616:	2200      	movs	r2, #0
34002618:	60da      	str	r2, [r3, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3400261a:	687b      	ldr	r3, [r7, #4]
3400261c:	2200      	movs	r2, #0
3400261e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_XSPI_Init(hxspi);
34002620:	6878      	ldr	r0, [r7, #4]
34002622:	f013 fdb7 	bl	34016194 <HAL_XSPI_Init>
34002626:	4603      	mov	r3, r0
}
34002628:	4618      	mov	r0, r3
3400262a:	3708      	adds	r7, #8
3400262c:	46bd      	mov	sp, r7
3400262e:	bd80      	pop	{r7, pc}
34002630:	5802a000 	.word	0x5802a000

34002634 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the XSPI in memory-mapped mode
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
34002634:	b580      	push	{r7, lr}
34002636:	b084      	sub	sp, #16
34002638:	af00      	add	r7, sp, #0
3400263a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
3400263c:	2300      	movs	r3, #0
3400263e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002640:	687b      	ldr	r3, [r7, #4]
34002642:	2b00      	cmp	r3, #0
34002644:	d003      	beq.n	3400264e <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002646:	f06f 0301 	mvn.w	r3, #1
3400264a:	60fb      	str	r3, [r7, #12]
3400264c:	e04b      	b.n	340026e6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
  }
  else
  {
    if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400264e:	4928      	ldr	r1, [pc, #160]	@ (340026f0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002650:	687a      	ldr	r2, [r7, #4]
34002652:	4613      	mov	r3, r2
34002654:	005b      	lsls	r3, r3, #1
34002656:	4413      	add	r3, r2
34002658:	440b      	add	r3, r1
3400265a:	3302      	adds	r3, #2
3400265c:	781b      	ldrb	r3, [r3, #0]
3400265e:	2b00      	cmp	r3, #0
34002660:	d121      	bne.n	340026a6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x72>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002662:	687b      	ldr	r3, [r7, #4]
34002664:	2264      	movs	r2, #100	@ 0x64
34002666:	fb02 f303 	mul.w	r3, r2, r3
3400266a:	4a22      	ldr	r2, [pc, #136]	@ (340026f4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
3400266c:	1898      	adds	r0, r3, r2
3400266e:	4920      	ldr	r1, [pc, #128]	@ (340026f0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002670:	687a      	ldr	r2, [r7, #4]
34002672:	4613      	mov	r3, r2
34002674:	005b      	lsls	r3, r3, #1
34002676:	4413      	add	r3, r2
34002678:	440b      	add	r3, r1
3400267a:	3301      	adds	r3, #1
3400267c:	781b      	ldrb	r3, [r3, #0]
3400267e:	2201      	movs	r2, #1
34002680:	4619      	mov	r1, r3
34002682:	f7ff f998 	bl	340019b6 <MX25UM51245G_EnableSTRMemoryMappedMode>
34002686:	4603      	mov	r3, r0
34002688:	2b00      	cmp	r3, #0
3400268a:	d003      	beq.n	34002694 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x60>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400268c:	f06f 0304 	mvn.w	r3, #4
34002690:	60fb      	str	r3, [r7, #12]
34002692:	e028      	b.n	340026e6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
34002694:	4916      	ldr	r1, [pc, #88]	@ (340026f0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
34002696:	687a      	ldr	r2, [r7, #4]
34002698:	4613      	mov	r3, r2
3400269a:	005b      	lsls	r3, r3, #1
3400269c:	4413      	add	r3, r2
3400269e:	440b      	add	r3, r1
340026a0:	2202      	movs	r2, #2
340026a2:	701a      	strb	r2, [r3, #0]
340026a4:	e01f      	b.n	340026e6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
340026a6:	687b      	ldr	r3, [r7, #4]
340026a8:	2264      	movs	r2, #100	@ 0x64
340026aa:	fb02 f303 	mul.w	r3, r2, r3
340026ae:	4a11      	ldr	r2, [pc, #68]	@ (340026f4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xc0>)
340026b0:	1898      	adds	r0, r3, r2
340026b2:	490f      	ldr	r1, [pc, #60]	@ (340026f0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
340026b4:	687a      	ldr	r2, [r7, #4]
340026b6:	4613      	mov	r3, r2
340026b8:	005b      	lsls	r3, r3, #1
340026ba:	4413      	add	r3, r2
340026bc:	440b      	add	r3, r1
340026be:	3301      	adds	r3, #1
340026c0:	781b      	ldrb	r3, [r3, #0]
340026c2:	4619      	mov	r1, r3
340026c4:	f7ff fa21 	bl	34001b0a <MX25UM51245G_EnableDTRMemoryMappedMode>
340026c8:	4603      	mov	r3, r0
340026ca:	2b00      	cmp	r3, #0
340026cc:	d003      	beq.n	340026d6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xa2>
                                                 Xspi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
340026ce:	f06f 0304 	mvn.w	r3, #4
340026d2:	60fb      	str	r3, [r7, #12]
340026d4:	e007      	b.n	340026e6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xb2>
      }
      else /* Update XSPI context if all operations are well done */
      {
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
340026d6:	4906      	ldr	r1, [pc, #24]	@ (340026f0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0xbc>)
340026d8:	687a      	ldr	r2, [r7, #4]
340026da:	4613      	mov	r3, r2
340026dc:	005b      	lsls	r3, r3, #1
340026de:	4413      	add	r3, r2
340026e0:	440b      	add	r3, r1
340026e2:	2202      	movs	r2, #2
340026e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
340026e6:	68fb      	ldr	r3, [r7, #12]
}
340026e8:	4618      	mov	r0, r3
340026ea:	3710      	adds	r7, #16
340026ec:	46bd      	mov	sp, r7
340026ee:	bd80      	pop	{r7, pc}
340026f0:	3401c1bc 	.word	0x3401c1bc
340026f4:	3401c158 	.word	0x3401c158

340026f8 <BSP_XSPI_NOR_ConfigFlash>:
  * @param  Mode      XSPI mode
  * @param  Rate      XSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_XSPI_NOR_ConfigFlash(uint32_t Instance, BSP_XSPI_NOR_Interface_t Mode, BSP_XSPI_NOR_Transfer_t Rate)
{
340026f8:	b580      	push	{r7, lr}
340026fa:	b084      	sub	sp, #16
340026fc:	af00      	add	r7, sp, #0
340026fe:	6078      	str	r0, [r7, #4]
34002700:	460b      	mov	r3, r1
34002702:	70fb      	strb	r3, [r7, #3]
34002704:	4613      	mov	r3, r2
34002706:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
34002708:	2300      	movs	r3, #0
3400270a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400270c:	687b      	ldr	r3, [r7, #4]
3400270e:	2b00      	cmp	r3, #0
34002710:	d003      	beq.n	3400271a <BSP_XSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002712:	f06f 0301 	mvn.w	r3, #1
34002716:	60fb      	str	r3, [r7, #12]
34002718:	e072      	b.n	34002800 <BSP_XSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Xspi_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
3400271a:	493c      	ldr	r1, [pc, #240]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
3400271c:	687a      	ldr	r2, [r7, #4]
3400271e:	4613      	mov	r3, r2
34002720:	005b      	lsls	r3, r3, #1
34002722:	4413      	add	r3, r2
34002724:	440b      	add	r3, r1
34002726:	781b      	ldrb	r3, [r3, #0]
34002728:	2b02      	cmp	r3, #2
3400272a:	d103      	bne.n	34002734 <BSP_XSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
3400272c:	f06f 0319 	mvn.w	r3, #25
34002730:	60fb      	str	r3, [r7, #12]
34002732:	e065      	b.n	34002800 <BSP_XSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Xspi_Nor_Ctx[Instance].InterfaceMode)
34002734:	4935      	ldr	r1, [pc, #212]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002736:	687a      	ldr	r2, [r7, #4]
34002738:	4613      	mov	r3, r2
3400273a:	005b      	lsls	r3, r3, #1
3400273c:	4413      	add	r3, r2
3400273e:	440b      	add	r3, r1
34002740:	3301      	adds	r3, #1
34002742:	781b      	ldrb	r3, [r3, #0]
34002744:	2b01      	cmp	r3, #1
34002746:	d12b      	bne.n	340027a0 <BSP_XSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_XSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != Xspi_Nor_Ctx[Instance].TransferRate))
34002748:	78fb      	ldrb	r3, [r7, #3]
3400274a:	2b01      	cmp	r3, #1
3400274c:	d10a      	bne.n	34002764 <BSP_XSPI_NOR_ConfigFlash+0x6c>
3400274e:	492f      	ldr	r1, [pc, #188]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
34002750:	687a      	ldr	r2, [r7, #4]
34002752:	4613      	mov	r3, r2
34002754:	005b      	lsls	r3, r3, #1
34002756:	4413      	add	r3, r2
34002758:	440b      	add	r3, r1
3400275a:	3302      	adds	r3, #2
3400275c:	781b      	ldrb	r3, [r3, #0]
3400275e:	78ba      	ldrb	r2, [r7, #2]
34002760:	429a      	cmp	r2, r3
34002762:	d02d      	beq.n	340027c0 <BSP_XSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = XSPI_NOR_ExitOPIMode(Instance);
34002764:	6878      	ldr	r0, [r7, #4]
34002766:	f000 fb7d 	bl	34002e64 <XSPI_NOR_ExitOPIMode>
3400276a:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
3400276c:	68fb      	ldr	r3, [r7, #12]
3400276e:	2b00      	cmp	r3, #0
34002770:	d126      	bne.n	340027c0 <BSP_XSPI_NOR_ConfigFlash+0xc8>
34002772:	78fb      	ldrb	r3, [r7, #3]
34002774:	2b01      	cmp	r3, #1
34002776:	d123      	bne.n	340027c0 <BSP_XSPI_NOR_ConfigFlash+0xc8>
            {

              if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
34002778:	4924      	ldr	r1, [pc, #144]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
3400277a:	687a      	ldr	r2, [r7, #4]
3400277c:	4613      	mov	r3, r2
3400277e:	005b      	lsls	r3, r3, #1
34002780:	4413      	add	r3, r2
34002782:	440b      	add	r3, r1
34002784:	3302      	adds	r3, #2
34002786:	781b      	ldrb	r3, [r3, #0]
34002788:	2b00      	cmp	r3, #0
3400278a:	d104      	bne.n	34002796 <BSP_XSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = XSPI_NOR_EnterDOPIMode(Instance);
3400278c:	6878      	ldr	r0, [r7, #4]
3400278e:	f000 f9ad 	bl	34002aec <XSPI_NOR_EnterDOPIMode>
34002792:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = XSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
34002794:	e014      	b.n	340027c0 <BSP_XSPI_NOR_ConfigFlash+0xc8>
                ret = XSPI_NOR_EnterSOPIMode(Instance);
34002796:	6878      	ldr	r0, [r7, #4]
34002798:	f000 fa98 	bl	34002ccc <XSPI_NOR_EnterSOPIMode>
3400279c:	60f8      	str	r0, [r7, #12]
          break;
3400279e:	e00f      	b.n	340027c0 <BSP_XSPI_NOR_ConfigFlash+0xc8>

        case BSP_XSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
340027a0:	78fb      	ldrb	r3, [r7, #3]
340027a2:	2b01      	cmp	r3, #1
340027a4:	d10e      	bne.n	340027c4 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
340027a6:	78bb      	ldrb	r3, [r7, #2]
340027a8:	2b00      	cmp	r3, #0
340027aa:	d104      	bne.n	340027b6 <BSP_XSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = XSPI_NOR_EnterSOPIMode(Instance);
340027ac:	6878      	ldr	r0, [r7, #4]
340027ae:	f000 fa8d 	bl	34002ccc <XSPI_NOR_EnterSOPIMode>
340027b2:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = XSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
340027b4:	e006      	b.n	340027c4 <BSP_XSPI_NOR_ConfigFlash+0xcc>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
340027b6:	6878      	ldr	r0, [r7, #4]
340027b8:	f000 f998 	bl	34002aec <XSPI_NOR_EnterDOPIMode>
340027bc:	60f8      	str	r0, [r7, #12]
          break;
340027be:	e001      	b.n	340027c4 <BSP_XSPI_NOR_ConfigFlash+0xcc>
          break;
340027c0:	bf00      	nop
340027c2:	e000      	b.n	340027c6 <BSP_XSPI_NOR_ConfigFlash+0xce>
          break;
340027c4:	bf00      	nop
      }

      /* Update XSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
340027c6:	68fb      	ldr	r3, [r7, #12]
340027c8:	2b00      	cmp	r3, #0
340027ca:	d119      	bne.n	34002800 <BSP_XSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
340027cc:	490f      	ldr	r1, [pc, #60]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
340027ce:	687a      	ldr	r2, [r7, #4]
340027d0:	4613      	mov	r3, r2
340027d2:	005b      	lsls	r3, r3, #1
340027d4:	4413      	add	r3, r2
340027d6:	440b      	add	r3, r1
340027d8:	2201      	movs	r2, #1
340027da:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].InterfaceMode = Mode;
340027dc:	490b      	ldr	r1, [pc, #44]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
340027de:	687a      	ldr	r2, [r7, #4]
340027e0:	4613      	mov	r3, r2
340027e2:	005b      	lsls	r3, r3, #1
340027e4:	4413      	add	r3, r2
340027e6:	440b      	add	r3, r1
340027e8:	3301      	adds	r3, #1
340027ea:	78fa      	ldrb	r2, [r7, #3]
340027ec:	701a      	strb	r2, [r3, #0]
        Xspi_Nor_Ctx[Instance].TransferRate  = Rate;
340027ee:	4907      	ldr	r1, [pc, #28]	@ (3400280c <BSP_XSPI_NOR_ConfigFlash+0x114>)
340027f0:	687a      	ldr	r2, [r7, #4]
340027f2:	4613      	mov	r3, r2
340027f4:	005b      	lsls	r3, r3, #1
340027f6:	4413      	add	r3, r2
340027f8:	440b      	add	r3, r1
340027fa:	3302      	adds	r3, #2
340027fc:	78ba      	ldrb	r2, [r7, #2]
340027fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002800:	68fb      	ldr	r3, [r7, #12]
}
34002802:	4618      	mov	r0, r3
34002804:	3710      	adds	r7, #16
34002806:	46bd      	mov	sp, r7
34002808:	bd80      	pop	{r7, pc}
3400280a:	bf00      	nop
3400280c:	3401c1bc 	.word	0x3401c1bc

34002810 <XSPI_NOR_MspInit>:
  * @brief  Initializes the XSPI MSP.
  * @param  hxspi XSPI handle
  * @retval None
  */
static void XSPI_NOR_MspInit(XSPI_HandleTypeDef *hxspi)
{
34002810:	b580      	push	{r7, lr}
34002812:	b088      	sub	sp, #32
34002814:	af00      	add	r7, sp, #0
34002816:	6078      	str	r0, [r7, #4]

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

  /* Enable the XSPI memory interface clock */
  XSPI_CLK_ENABLE();
34002818:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3400281c:	f7ff fdea 	bl	340023f4 <LL_AHB5_GRP1_EnableClock>

  /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34002820:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34002824:	f7ff fdd0 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
34002828:	f003 f968 	bl	34005afc <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
3400282c:	2101      	movs	r1, #1
3400282e:	2002      	movs	r0, #2
34002830:	f003 f8f4 	bl	34005a1c <HAL_PWREx_ConfigVddIORange>

  /* Reset the XSPI memory interface */
  XSPI_FORCE_RESET();
34002834:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002838:	f7ff fdf2 	bl	34002420 <LL_AHB5_GRP1_ForceReset>
  XSPI_RELEASE_RESET();
3400283c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34002840:	f7ff fdfe 	bl	34002440 <LL_AHB5_GRP1_ReleaseReset>

  /* Enable GPIO clocks */
  XSPI_CLK_GPIO_CLK_ENABLE();
34002844:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002848:	f7ff fdbe 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_DQS_GPIO_CLK_ENABLE();
3400284c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002850:	f7ff fdba 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_CS_GPIO_CLK_ENABLE();
34002854:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002858:	f7ff fdb6 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D0_GPIO_CLK_ENABLE();
3400285c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002860:	f7ff fdb2 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D1_GPIO_CLK_ENABLE();
34002864:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002868:	f7ff fdae 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D2_GPIO_CLK_ENABLE();
3400286c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002870:	f7ff fdaa 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D3_GPIO_CLK_ENABLE();
34002874:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002878:	f7ff fda6 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D4_GPIO_CLK_ENABLE();
3400287c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002880:	f7ff fda2 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D5_GPIO_CLK_ENABLE();
34002884:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002888:	f7ff fd9e 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D6_GPIO_CLK_ENABLE();
3400288c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002890:	f7ff fd9a 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>
  XSPI_D7_GPIO_CLK_ENABLE();
34002894:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34002898:	f7ff fd96 	bl	340023c8 <LL_AHB4_GRP1_EnableClock>

  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CS_PIN;
3400289c:	2302      	movs	r3, #2
3400289e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
340028a0:	2302      	movs	r3, #2
340028a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340028a4:	2301      	movs	r3, #1
340028a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
340028a8:	2303      	movs	r3, #3
340028aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = XSPI_CS_PIN_AF;
340028ac:	2309      	movs	r3, #9
340028ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CS_GPIO_PORT, &GPIO_InitStruct);
340028b0:	f107 030c 	add.w	r3, r7, #12
340028b4:	4619      	mov	r1, r3
340028b6:	483c      	ldr	r0, [pc, #240]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
340028b8:	f002 fd24 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_CLK_PIN;
340028bc:	2340      	movs	r3, #64	@ 0x40
340028be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
340028c0:	2300      	movs	r3, #0
340028c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = XSPI_CLK_PIN_AF;
340028c4:	2309      	movs	r3, #9
340028c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
340028c8:	f107 030c 	add.w	r3, r7, #12
340028cc:	4619      	mov	r1, r3
340028ce:	4836      	ldr	r0, [pc, #216]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
340028d0:	f002 fd18 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D0_PIN;
340028d4:	2304      	movs	r3, #4
340028d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D0_PIN_AF;
340028d8:	2309      	movs	r3, #9
340028da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D0_GPIO_PORT, &GPIO_InitStruct);
340028dc:	f107 030c 	add.w	r3, r7, #12
340028e0:	4619      	mov	r1, r3
340028e2:	4831      	ldr	r0, [pc, #196]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
340028e4:	f002 fd0e 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D1_PIN;
340028e8:	2308      	movs	r3, #8
340028ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D1_PIN_AF;
340028ec:	2309      	movs	r3, #9
340028ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D1_GPIO_PORT, &GPIO_InitStruct);
340028f0:	f107 030c 	add.w	r3, r7, #12
340028f4:	4619      	mov	r1, r3
340028f6:	482c      	ldr	r0, [pc, #176]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
340028f8:	f002 fd04 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D2_PIN;
340028fc:	2310      	movs	r3, #16
340028fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D2_PIN_AF;
34002900:	2309      	movs	r3, #9
34002902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D2_GPIO_PORT, &GPIO_InitStruct);
34002904:	f107 030c 	add.w	r3, r7, #12
34002908:	4619      	mov	r1, r3
3400290a:	4827      	ldr	r0, [pc, #156]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
3400290c:	f002 fcfa 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D3_PIN;
34002910:	2320      	movs	r3, #32
34002912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D3_PIN_AF;
34002914:	2309      	movs	r3, #9
34002916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D3_GPIO_PORT, &GPIO_InitStruct);
34002918:	f107 030c 	add.w	r3, r7, #12
3400291c:	4619      	mov	r1, r3
3400291e:	4822      	ldr	r0, [pc, #136]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
34002920:	f002 fcf0 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D4_PIN;
34002924:	f44f 7380 	mov.w	r3, #256	@ 0x100
34002928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D4_PIN_AF;
3400292a:	2309      	movs	r3, #9
3400292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D4_GPIO_PORT, &GPIO_InitStruct);
3400292e:	f107 030c 	add.w	r3, r7, #12
34002932:	4619      	mov	r1, r3
34002934:	481c      	ldr	r0, [pc, #112]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
34002936:	f002 fce5 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D5_PIN;
3400293a:	f44f 7300 	mov.w	r3, #512	@ 0x200
3400293e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D5_PIN_AF;
34002940:	2309      	movs	r3, #9
34002942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D5_GPIO_PORT, &GPIO_InitStruct);
34002944:	f107 030c 	add.w	r3, r7, #12
34002948:	4619      	mov	r1, r3
3400294a:	4817      	ldr	r0, [pc, #92]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
3400294c:	f002 fcda 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D6_PIN;
34002950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34002954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D6_PIN_AF;
34002956:	2309      	movs	r3, #9
34002958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D6_GPIO_PORT, &GPIO_InitStruct);
3400295a:	f107 030c 	add.w	r3, r7, #12
3400295e:	4619      	mov	r1, r3
34002960:	4811      	ldr	r0, [pc, #68]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
34002962:	f002 fccf 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_D7_PIN;
34002966:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400296a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_D7_PIN_AF;
3400296c:	2309      	movs	r3, #9
3400296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_D7_GPIO_PORT, &GPIO_InitStruct);
34002970:	f107 030c 	add.w	r3, r7, #12
34002974:	4619      	mov	r1, r3
34002976:	480c      	ldr	r0, [pc, #48]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
34002978:	f002 fcc4 	bl	34005304 <HAL_GPIO_Init>

  /* XSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_DQS_PIN;
3400297c:	2301      	movs	r3, #1
3400297e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = XSPI_DQS_PIN_AF;
34002980:	2309      	movs	r3, #9
34002982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(XSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
34002984:	f107 030c 	add.w	r3, r7, #12
34002988:	4619      	mov	r1, r3
3400298a:	4807      	ldr	r0, [pc, #28]	@ (340029a8 <XSPI_NOR_MspInit+0x198>)
3400298c:	f002 fcba 	bl	34005304 <HAL_GPIO_Init>

  /* Configure the NVIC for XSPI */
  /* NVIC configuration for XSPI interrupt */
  HAL_NVIC_SetPriority(XSPI1_IRQn, 0x0F, 0);
34002990:	2200      	movs	r2, #0
34002992:	210f      	movs	r1, #15
34002994:	20aa      	movs	r0, #170	@ 0xaa
34002996:	f001 f92b 	bl	34003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(XSPI1_IRQn);
3400299a:	20aa      	movs	r0, #170	@ 0xaa
3400299c:	f001 f982 	bl	34003ca4 <HAL_NVIC_EnableIRQ>
}
340029a0:	bf00      	nop
340029a2:	3720      	adds	r7, #32
340029a4:	46bd      	mov	sp, r7
340029a6:	bd80      	pop	{r7, pc}
340029a8:	56023400 	.word	0x56023400

340029ac <XSPI_NOR_ResetMemory>:
  * @brief  This function reset the XSPI memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ResetMemory(uint32_t Instance)
{
340029ac:	b580      	push	{r7, lr}
340029ae:	b084      	sub	sp, #16
340029b0:	af00      	add	r7, sp, #0
340029b2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
340029b4:	2300      	movs	r3, #0
340029b6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
340029b8:	687b      	ldr	r3, [r7, #4]
340029ba:	2b00      	cmp	r3, #0
340029bc:	d003      	beq.n	340029c6 <XSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
340029be:	f06f 0301 	mvn.w	r3, #1
340029c2:	60fb      	str	r3, [r7, #12]
340029c4:	e088      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340029c6:	687b      	ldr	r3, [r7, #4]
340029c8:	2264      	movs	r2, #100	@ 0x64
340029ca:	fb02 f303 	mul.w	r3, r2, r3
340029ce:	4a45      	ldr	r2, [pc, #276]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
340029d0:	4413      	add	r3, r2
340029d2:	2200      	movs	r2, #0
340029d4:	2100      	movs	r1, #0
340029d6:	4618      	mov	r0, r3
340029d8:	f7ff fb04 	bl	34001fe4 <MX25UM51245G_ResetEnable>
340029dc:	4603      	mov	r3, r0
340029de:	2b00      	cmp	r3, #0
340029e0:	d003      	beq.n	340029ea <XSPI_NOR_ResetMemory+0x3e>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
340029e2:	f06f 0304 	mvn.w	r3, #4
340029e6:	60fb      	str	r3, [r7, #12]
340029e8:	e076      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340029ea:	687b      	ldr	r3, [r7, #4]
340029ec:	2264      	movs	r2, #100	@ 0x64
340029ee:	fb02 f303 	mul.w	r3, r2, r3
340029f2:	4a3c      	ldr	r2, [pc, #240]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
340029f4:	4413      	add	r3, r2
340029f6:	2200      	movs	r2, #0
340029f8:	2100      	movs	r1, #0
340029fa:	4618      	mov	r0, r3
340029fc:	f7ff fb48 	bl	34002090 <MX25UM51245G_ResetMemory>
34002a00:	4603      	mov	r3, r0
34002a02:	2b00      	cmp	r3, #0
34002a04:	d003      	beq.n	34002a0e <XSPI_NOR_ResetMemory+0x62>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a06:	f06f 0304 	mvn.w	r3, #4
34002a0a:	60fb      	str	r3, [r7, #12]
34002a0c:	e064      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002a0e:	687b      	ldr	r3, [r7, #4]
34002a10:	2264      	movs	r2, #100	@ 0x64
34002a12:	fb02 f303 	mul.w	r3, r2, r3
34002a16:	4a33      	ldr	r2, [pc, #204]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
34002a18:	4413      	add	r3, r2
34002a1a:	2200      	movs	r2, #0
34002a1c:	2101      	movs	r1, #1
34002a1e:	4618      	mov	r0, r3
34002a20:	f7ff fae0 	bl	34001fe4 <MX25UM51245G_ResetEnable>
34002a24:	4603      	mov	r3, r0
34002a26:	2b00      	cmp	r3, #0
34002a28:	d003      	beq.n	34002a32 <XSPI_NOR_ResetMemory+0x86>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a2a:	f06f 0304 	mvn.w	r3, #4
34002a2e:	60fb      	str	r3, [r7, #12]
34002a30:	e052      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002a32:	687b      	ldr	r3, [r7, #4]
34002a34:	2264      	movs	r2, #100	@ 0x64
34002a36:	fb02 f303 	mul.w	r3, r2, r3
34002a3a:	4a2a      	ldr	r2, [pc, #168]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
34002a3c:	4413      	add	r3, r2
34002a3e:	2200      	movs	r2, #0
34002a40:	2101      	movs	r1, #1
34002a42:	4618      	mov	r0, r3
34002a44:	f7ff fb24 	bl	34002090 <MX25UM51245G_ResetMemory>
34002a48:	4603      	mov	r3, r0
34002a4a:	2b00      	cmp	r3, #0
34002a4c:	d003      	beq.n	34002a56 <XSPI_NOR_ResetMemory+0xaa>
                                    BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a4e:	f06f 0304 	mvn.w	r3, #4
34002a52:	60fb      	str	r3, [r7, #12]
34002a54:	e040      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002a56:	687b      	ldr	r3, [r7, #4]
34002a58:	2264      	movs	r2, #100	@ 0x64
34002a5a:	fb02 f303 	mul.w	r3, r2, r3
34002a5e:	4a21      	ldr	r2, [pc, #132]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
34002a60:	4413      	add	r3, r2
34002a62:	2201      	movs	r2, #1
34002a64:	2101      	movs	r1, #1
34002a66:	4618      	mov	r0, r3
34002a68:	f7ff fabc 	bl	34001fe4 <MX25UM51245G_ResetEnable>
34002a6c:	4603      	mov	r3, r0
34002a6e:	2b00      	cmp	r3, #0
34002a70:	d003      	beq.n	34002a7a <XSPI_NOR_ResetMemory+0xce>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a72:	f06f 0304 	mvn.w	r3, #4
34002a76:	60fb      	str	r3, [r7, #12]
34002a78:	e02e      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else if (MX25UM51245G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002a7a:	687b      	ldr	r3, [r7, #4]
34002a7c:	2264      	movs	r2, #100	@ 0x64
34002a7e:	fb02 f303 	mul.w	r3, r2, r3
34002a82:	4a18      	ldr	r2, [pc, #96]	@ (34002ae4 <XSPI_NOR_ResetMemory+0x138>)
34002a84:	4413      	add	r3, r2
34002a86:	2201      	movs	r2, #1
34002a88:	2101      	movs	r1, #1
34002a8a:	4618      	mov	r0, r3
34002a8c:	f7ff fb00 	bl	34002090 <MX25UM51245G_ResetMemory>
34002a90:	4603      	mov	r3, r0
34002a92:	2b00      	cmp	r3, #0
34002a94:	d003      	beq.n	34002a9e <XSPI_NOR_ResetMemory+0xf2>
                                    BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002a96:	f06f 0304 	mvn.w	r3, #4
34002a9a:	60fb      	str	r3, [r7, #12]
34002a9c:	e01c      	b.n	34002ad8 <XSPI_NOR_ResetMemory+0x12c>
  }
  else
  {
    Xspi_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
34002a9e:	4912      	ldr	r1, [pc, #72]	@ (34002ae8 <XSPI_NOR_ResetMemory+0x13c>)
34002aa0:	687a      	ldr	r2, [r7, #4]
34002aa2:	4613      	mov	r3, r2
34002aa4:	005b      	lsls	r3, r3, #1
34002aa6:	4413      	add	r3, r2
34002aa8:	440b      	add	r3, r1
34002aaa:	2201      	movs	r2, #1
34002aac:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
34002aae:	490e      	ldr	r1, [pc, #56]	@ (34002ae8 <XSPI_NOR_ResetMemory+0x13c>)
34002ab0:	687a      	ldr	r2, [r7, #4]
34002ab2:	4613      	mov	r3, r2
34002ab4:	005b      	lsls	r3, r3, #1
34002ab6:	4413      	add	r3, r2
34002ab8:	440b      	add	r3, r1
34002aba:	3301      	adds	r3, #1
34002abc:	2200      	movs	r2, #0
34002abe:	701a      	strb	r2, [r3, #0]
    Xspi_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
34002ac0:	4909      	ldr	r1, [pc, #36]	@ (34002ae8 <XSPI_NOR_ResetMemory+0x13c>)
34002ac2:	687a      	ldr	r2, [r7, #4]
34002ac4:	4613      	mov	r3, r2
34002ac6:	005b      	lsls	r3, r3, #1
34002ac8:	4413      	add	r3, r2
34002aca:	440b      	add	r3, r1
34002acc:	3302      	adds	r3, #2
34002ace:	2200      	movs	r2, #0
34002ad0:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
34002ad2:	2064      	movs	r0, #100	@ 0x64
34002ad4:	f000 fd96 	bl	34003604 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
34002ad8:	68fb      	ldr	r3, [r7, #12]
}
34002ada:	4618      	mov	r0, r3
34002adc:	3710      	adds	r7, #16
34002ade:	46bd      	mov	sp, r7
34002ae0:	bd80      	pop	{r7, pc}
34002ae2:	bf00      	nop
34002ae4:	3401c158 	.word	0x3401c158
34002ae8:	3401c1bc 	.word	0x3401c1bc

34002aec <XSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
34002aec:	b590      	push	{r4, r7, lr}
34002aee:	b087      	sub	sp, #28
34002af0:	af02      	add	r7, sp, #8
34002af2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002af4:	687b      	ldr	r3, [r7, #4]
34002af6:	2b00      	cmp	r3, #0
34002af8:	d003      	beq.n	34002b02 <XSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002afa:	f06f 0301 	mvn.w	r3, #1
34002afe:	60fb      	str	r3, [r7, #12]
34002b00:	e0db      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002b02:	687b      	ldr	r3, [r7, #4]
34002b04:	2264      	movs	r2, #100	@ 0x64
34002b06:	fb02 f303 	mul.w	r3, r2, r3
34002b0a:	4a6e      	ldr	r2, [pc, #440]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002b0c:	1898      	adds	r0, r3, r2
34002b0e:	496e      	ldr	r1, [pc, #440]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b10:	687a      	ldr	r2, [r7, #4]
34002b12:	4613      	mov	r3, r2
34002b14:	005b      	lsls	r3, r3, #1
34002b16:	4413      	add	r3, r2
34002b18:	440b      	add	r3, r1
34002b1a:	3301      	adds	r3, #1
34002b1c:	7819      	ldrb	r1, [r3, #0]
34002b1e:	4c6a      	ldr	r4, [pc, #424]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b20:	687a      	ldr	r2, [r7, #4]
34002b22:	4613      	mov	r3, r2
34002b24:	005b      	lsls	r3, r3, #1
34002b26:	4413      	add	r3, r2
34002b28:	4423      	add	r3, r4
34002b2a:	3302      	adds	r3, #2
34002b2c:	781b      	ldrb	r3, [r3, #0]
34002b2e:	461a      	mov	r2, r3
34002b30:	f7ff f85a 	bl	34001be8 <MX25UM51245G_WriteEnable>
34002b34:	4603      	mov	r3, r0
34002b36:	2b00      	cmp	r3, #0
34002b38:	d003      	beq.n	34002b42 <XSPI_NOR_EnterDOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002b3a:	f06f 0304 	mvn.w	r3, #4
34002b3e:	60fb      	str	r3, [r7, #12]
34002b40:	e0bb      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002b42:	687b      	ldr	r3, [r7, #4]
34002b44:	2264      	movs	r2, #100	@ 0x64
34002b46:	fb02 f303 	mul.w	r3, r2, r3
34002b4a:	4a5e      	ldr	r2, [pc, #376]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002b4c:	1898      	adds	r0, r3, r2
34002b4e:	495e      	ldr	r1, [pc, #376]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b50:	687a      	ldr	r2, [r7, #4]
34002b52:	4613      	mov	r3, r2
34002b54:	005b      	lsls	r3, r3, #1
34002b56:	4413      	add	r3, r2
34002b58:	440b      	add	r3, r1
34002b5a:	3301      	adds	r3, #1
34002b5c:	7819      	ldrb	r1, [r3, #0]
34002b5e:	4c5a      	ldr	r4, [pc, #360]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b60:	687a      	ldr	r2, [r7, #4]
34002b62:	4613      	mov	r3, r2
34002b64:	005b      	lsls	r3, r3, #1
34002b66:	4413      	add	r3, r2
34002b68:	4423      	add	r3, r4
34002b6a:	3302      	adds	r3, #2
34002b6c:	781a      	ldrb	r2, [r3, #0]
34002b6e:	2300      	movs	r3, #0
34002b70:	9300      	str	r3, [sp, #0]
34002b72:	f44f 7340 	mov.w	r3, #768	@ 0x300
34002b76:	f7ff f905 	bl	34001d84 <MX25UM51245G_WriteCfg2Register>
34002b7a:	4603      	mov	r3, r0
34002b7c:	2b00      	cmp	r3, #0
34002b7e:	d003      	beq.n	34002b88 <XSPI_NOR_EnterDOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002b80:	f06f 0304 	mvn.w	r3, #4
34002b84:	60fb      	str	r3, [r7, #12]
34002b86:	e098      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002b88:	687b      	ldr	r3, [r7, #4]
34002b8a:	2264      	movs	r2, #100	@ 0x64
34002b8c:	fb02 f303 	mul.w	r3, r2, r3
34002b90:	4a4c      	ldr	r2, [pc, #304]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002b92:	1898      	adds	r0, r3, r2
34002b94:	494c      	ldr	r1, [pc, #304]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002b96:	687a      	ldr	r2, [r7, #4]
34002b98:	4613      	mov	r3, r2
34002b9a:	005b      	lsls	r3, r3, #1
34002b9c:	4413      	add	r3, r2
34002b9e:	440b      	add	r3, r1
34002ba0:	3301      	adds	r3, #1
34002ba2:	7819      	ldrb	r1, [r3, #0]
34002ba4:	4c48      	ldr	r4, [pc, #288]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002ba6:	687a      	ldr	r2, [r7, #4]
34002ba8:	4613      	mov	r3, r2
34002baa:	005b      	lsls	r3, r3, #1
34002bac:	4413      	add	r3, r2
34002bae:	4423      	add	r3, r4
34002bb0:	3302      	adds	r3, #2
34002bb2:	781b      	ldrb	r3, [r3, #0]
34002bb4:	461a      	mov	r2, r3
34002bb6:	f7ff f817 	bl	34001be8 <MX25UM51245G_WriteEnable>
34002bba:	4603      	mov	r3, r0
34002bbc:	2b00      	cmp	r3, #0
34002bbe:	d003      	beq.n	34002bc8 <XSPI_NOR_EnterDOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002bc0:	f06f 0304 	mvn.w	r3, #4
34002bc4:	60fb      	str	r3, [r7, #12]
34002bc6:	e078      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002bc8:	687b      	ldr	r3, [r7, #4]
34002bca:	2264      	movs	r2, #100	@ 0x64
34002bcc:	fb02 f303 	mul.w	r3, r2, r3
34002bd0:	4a3c      	ldr	r2, [pc, #240]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002bd2:	1898      	adds	r0, r3, r2
34002bd4:	493c      	ldr	r1, [pc, #240]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002bd6:	687a      	ldr	r2, [r7, #4]
34002bd8:	4613      	mov	r3, r2
34002bda:	005b      	lsls	r3, r3, #1
34002bdc:	4413      	add	r3, r2
34002bde:	440b      	add	r3, r1
34002be0:	3301      	adds	r3, #1
34002be2:	7819      	ldrb	r1, [r3, #0]
34002be4:	4c38      	ldr	r4, [pc, #224]	@ (34002cc8 <XSPI_NOR_EnterDOPIMode+0x1dc>)
34002be6:	687a      	ldr	r2, [r7, #4]
34002be8:	4613      	mov	r3, r2
34002bea:	005b      	lsls	r3, r3, #1
34002bec:	4413      	add	r3, r2
34002bee:	4423      	add	r3, r4
34002bf0:	3302      	adds	r3, #2
34002bf2:	781a      	ldrb	r2, [r3, #0]
34002bf4:	2302      	movs	r3, #2
34002bf6:	9300      	str	r3, [sp, #0]
34002bf8:	2300      	movs	r3, #0
34002bfa:	f7ff f8c3 	bl	34001d84 <MX25UM51245G_WriteCfg2Register>
34002bfe:	4603      	mov	r3, r0
34002c00:	2b00      	cmp	r3, #0
34002c02:	d003      	beq.n	34002c0c <XSPI_NOR_EnterDOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002c04:	f06f 0304 	mvn.w	r3, #4
34002c08:	60fb      	str	r3, [r7, #12]
34002c0a:	e056      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002c0c:	2028      	movs	r0, #40	@ 0x28
34002c0e:	f000 fcf9 	bl	34003604 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
34002c12:	4a2c      	ldr	r2, [pc, #176]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c14:	687b      	ldr	r3, [r7, #4]
34002c16:	2164      	movs	r1, #100	@ 0x64
34002c18:	fb01 f303 	mul.w	r3, r1, r3
34002c1c:	4413      	add	r3, r2
34002c1e:	330c      	adds	r3, #12
34002c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34002c24:	601a      	str	r2, [r3, #0]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34002c26:	4a27      	ldr	r2, [pc, #156]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c28:	687b      	ldr	r3, [r7, #4]
34002c2a:	2164      	movs	r1, #100	@ 0x64
34002c2c:	fb01 f303 	mul.w	r3, r1, r3
34002c30:	4413      	add	r3, r2
34002c32:	332c      	adds	r3, #44	@ 0x2c
34002c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34002c38:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34002c3a:	687b      	ldr	r3, [r7, #4]
34002c3c:	2264      	movs	r2, #100	@ 0x64
34002c3e:	fb02 f303 	mul.w	r3, r2, r3
34002c42:	4a20      	ldr	r2, [pc, #128]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c44:	4413      	add	r3, r2
34002c46:	4618      	mov	r0, r3
34002c48:	f013 faa4 	bl	34016194 <HAL_XSPI_Init>
34002c4c:	4603      	mov	r3, r0
34002c4e:	2b00      	cmp	r3, #0
34002c50:	d003      	beq.n	34002c5a <XSPI_NOR_EnterDOPIMode+0x16e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
34002c52:	f06f 0303 	mvn.w	r3, #3
34002c56:	60fb      	str	r3, [r7, #12]
34002c58:	e02f      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002c5a:	687b      	ldr	r3, [r7, #4]
34002c5c:	2264      	movs	r2, #100	@ 0x64
34002c5e:	fb02 f303 	mul.w	r3, r2, r3
34002c62:	4a18      	ldr	r2, [pc, #96]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c64:	4413      	add	r3, r2
34002c66:	2201      	movs	r2, #1
34002c68:	2101      	movs	r1, #1
34002c6a:	4618      	mov	r0, r3
34002c6c:	f7fe fdf3 	bl	34001856 <MX25UM51245G_AutoPollingMemReady>
34002c70:	4603      	mov	r3, r0
34002c72:	2b00      	cmp	r3, #0
34002c74:	d003      	beq.n	34002c7e <XSPI_NOR_EnterDOPIMode+0x192>
                                              BSP_XSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002c76:	f06f 0304 	mvn.w	r3, #4
34002c7a:	60fb      	str	r3, [r7, #12]
34002c7c:	e01d      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
34002c7e:	687b      	ldr	r3, [r7, #4]
34002c80:	2264      	movs	r2, #100	@ 0x64
34002c82:	fb02 f303 	mul.w	r3, r2, r3
34002c86:	4a0f      	ldr	r2, [pc, #60]	@ (34002cc4 <XSPI_NOR_EnterDOPIMode+0x1d8>)
34002c88:	1898      	adds	r0, r3, r2
34002c8a:	f107 0308 	add.w	r3, r7, #8
34002c8e:	9300      	str	r3, [sp, #0]
34002c90:	2300      	movs	r3, #0
34002c92:	2201      	movs	r2, #1
34002c94:	2101      	movs	r1, #1
34002c96:	f7ff f908 	bl	34001eaa <MX25UM51245G_ReadCfg2Register>
34002c9a:	4603      	mov	r3, r0
34002c9c:	2b00      	cmp	r3, #0
34002c9e:	d003      	beq.n	34002ca8 <XSPI_NOR_EnterDOPIMode+0x1bc>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002ca0:	f06f 0304 	mvn.w	r3, #4
34002ca4:	60fb      	str	r3, [r7, #12]
34002ca6:	e008      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
34002ca8:	7a3b      	ldrb	r3, [r7, #8]
34002caa:	2b02      	cmp	r3, #2
34002cac:	d003      	beq.n	34002cb6 <XSPI_NOR_EnterDOPIMode+0x1ca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002cae:	f06f 0304 	mvn.w	r3, #4
34002cb2:	60fb      	str	r3, [r7, #12]
34002cb4:	e001      	b.n	34002cba <XSPI_NOR_EnterDOPIMode+0x1ce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002cb6:	2300      	movs	r3, #0
34002cb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34002cba:	68fb      	ldr	r3, [r7, #12]
}
34002cbc:	4618      	mov	r0, r3
34002cbe:	3714      	adds	r7, #20
34002cc0:	46bd      	mov	sp, r7
34002cc2:	bd90      	pop	{r4, r7, pc}
34002cc4:	3401c158 	.word	0x3401c158
34002cc8:	3401c1bc 	.word	0x3401c1bc

34002ccc <XSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
34002ccc:	b590      	push	{r4, r7, lr}
34002cce:	b087      	sub	sp, #28
34002cd0:	af02      	add	r7, sp, #8
34002cd2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002cd4:	687b      	ldr	r3, [r7, #4]
34002cd6:	2b00      	cmp	r3, #0
34002cd8:	d003      	beq.n	34002ce2 <XSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002cda:	f06f 0301 	mvn.w	r3, #1
34002cde:	60fb      	str	r3, [r7, #12]
34002ce0:	e0b7      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002ce2:	687b      	ldr	r3, [r7, #4]
34002ce4:	2264      	movs	r2, #100	@ 0x64
34002ce6:	fb02 f303 	mul.w	r3, r2, r3
34002cea:	4a5c      	ldr	r2, [pc, #368]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002cec:	1898      	adds	r0, r3, r2
34002cee:	495c      	ldr	r1, [pc, #368]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002cf0:	687a      	ldr	r2, [r7, #4]
34002cf2:	4613      	mov	r3, r2
34002cf4:	005b      	lsls	r3, r3, #1
34002cf6:	4413      	add	r3, r2
34002cf8:	440b      	add	r3, r1
34002cfa:	3301      	adds	r3, #1
34002cfc:	7819      	ldrb	r1, [r3, #0]
34002cfe:	4c58      	ldr	r4, [pc, #352]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d00:	687a      	ldr	r2, [r7, #4]
34002d02:	4613      	mov	r3, r2
34002d04:	005b      	lsls	r3, r3, #1
34002d06:	4413      	add	r3, r2
34002d08:	4423      	add	r3, r4
34002d0a:	3302      	adds	r3, #2
34002d0c:	781b      	ldrb	r3, [r3, #0]
34002d0e:	461a      	mov	r2, r3
34002d10:	f7fe ff6a 	bl	34001be8 <MX25UM51245G_WriteEnable>
34002d14:	4603      	mov	r3, r0
34002d16:	2b00      	cmp	r3, #0
34002d18:	d003      	beq.n	34002d22 <XSPI_NOR_EnterSOPIMode+0x56>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002d1a:	f06f 0304 	mvn.w	r3, #4
34002d1e:	60fb      	str	r3, [r7, #12]
34002d20:	e097      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d22:	687b      	ldr	r3, [r7, #4]
34002d24:	2264      	movs	r2, #100	@ 0x64
34002d26:	fb02 f303 	mul.w	r3, r2, r3
34002d2a:	4a4c      	ldr	r2, [pc, #304]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002d2c:	1898      	adds	r0, r3, r2
34002d2e:	494c      	ldr	r1, [pc, #304]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d30:	687a      	ldr	r2, [r7, #4]
34002d32:	4613      	mov	r3, r2
34002d34:	005b      	lsls	r3, r3, #1
34002d36:	4413      	add	r3, r2
34002d38:	440b      	add	r3, r1
34002d3a:	3301      	adds	r3, #1
34002d3c:	7819      	ldrb	r1, [r3, #0]
34002d3e:	4c48      	ldr	r4, [pc, #288]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d40:	687a      	ldr	r2, [r7, #4]
34002d42:	4613      	mov	r3, r2
34002d44:	005b      	lsls	r3, r3, #1
34002d46:	4413      	add	r3, r2
34002d48:	4423      	add	r3, r4
34002d4a:	3302      	adds	r3, #2
34002d4c:	781a      	ldrb	r2, [r3, #0]
34002d4e:	2300      	movs	r3, #0
34002d50:	9300      	str	r3, [sp, #0]
34002d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
34002d56:	f7ff f815 	bl	34001d84 <MX25UM51245G_WriteCfg2Register>
34002d5a:	4603      	mov	r3, r0
34002d5c:	2b00      	cmp	r3, #0
34002d5e:	d003      	beq.n	34002d68 <XSPI_NOR_EnterSOPIMode+0x9c>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_20_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002d60:	f06f 0304 	mvn.w	r3, #4
34002d64:	60fb      	str	r3, [r7, #12]
34002d66:	e074      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002d68:	687b      	ldr	r3, [r7, #4]
34002d6a:	2264      	movs	r2, #100	@ 0x64
34002d6c:	fb02 f303 	mul.w	r3, r2, r3
34002d70:	4a3a      	ldr	r2, [pc, #232]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002d72:	1898      	adds	r0, r3, r2
34002d74:	493a      	ldr	r1, [pc, #232]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d76:	687a      	ldr	r2, [r7, #4]
34002d78:	4613      	mov	r3, r2
34002d7a:	005b      	lsls	r3, r3, #1
34002d7c:	4413      	add	r3, r2
34002d7e:	440b      	add	r3, r1
34002d80:	3301      	adds	r3, #1
34002d82:	7819      	ldrb	r1, [r3, #0]
34002d84:	4c36      	ldr	r4, [pc, #216]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002d86:	687a      	ldr	r2, [r7, #4]
34002d88:	4613      	mov	r3, r2
34002d8a:	005b      	lsls	r3, r3, #1
34002d8c:	4413      	add	r3, r2
34002d8e:	4423      	add	r3, r4
34002d90:	3302      	adds	r3, #2
34002d92:	781b      	ldrb	r3, [r3, #0]
34002d94:	461a      	mov	r2, r3
34002d96:	f7fe ff27 	bl	34001be8 <MX25UM51245G_WriteEnable>
34002d9a:	4603      	mov	r3, r0
34002d9c:	2b00      	cmp	r3, #0
34002d9e:	d003      	beq.n	34002da8 <XSPI_NOR_EnterSOPIMode+0xdc>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002da0:	f06f 0304 	mvn.w	r3, #4
34002da4:	60fb      	str	r3, [r7, #12]
34002da6:	e054      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002da8:	687b      	ldr	r3, [r7, #4]
34002daa:	2264      	movs	r2, #100	@ 0x64
34002dac:	fb02 f303 	mul.w	r3, r2, r3
34002db0:	4a2a      	ldr	r2, [pc, #168]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002db2:	1898      	adds	r0, r3, r2
34002db4:	492a      	ldr	r1, [pc, #168]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002db6:	687a      	ldr	r2, [r7, #4]
34002db8:	4613      	mov	r3, r2
34002dba:	005b      	lsls	r3, r3, #1
34002dbc:	4413      	add	r3, r2
34002dbe:	440b      	add	r3, r1
34002dc0:	3301      	adds	r3, #1
34002dc2:	7819      	ldrb	r1, [r3, #0]
34002dc4:	4c26      	ldr	r4, [pc, #152]	@ (34002e60 <XSPI_NOR_EnterSOPIMode+0x194>)
34002dc6:	687a      	ldr	r2, [r7, #4]
34002dc8:	4613      	mov	r3, r2
34002dca:	005b      	lsls	r3, r3, #1
34002dcc:	4413      	add	r3, r2
34002dce:	4423      	add	r3, r4
34002dd0:	3302      	adds	r3, #2
34002dd2:	781a      	ldrb	r2, [r3, #0]
34002dd4:	2301      	movs	r3, #1
34002dd6:	9300      	str	r3, [sp, #0]
34002dd8:	2300      	movs	r3, #0
34002dda:	f7fe ffd3 	bl	34001d84 <MX25UM51245G_WriteCfg2Register>
34002dde:	4603      	mov	r3, r0
34002de0:	2b00      	cmp	r3, #0
34002de2:	d003      	beq.n	34002dec <XSPI_NOR_EnterSOPIMode+0x120>
                                          Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002de4:	f06f 0304 	mvn.w	r3, #4
34002de8:	60fb      	str	r3, [r7, #12]
34002dea:	e032      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002dec:	2028      	movs	r0, #40	@ 0x28
34002dee:	f000 fc09 	bl	34003604 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34002df2:	687b      	ldr	r3, [r7, #4]
34002df4:	2264      	movs	r2, #100	@ 0x64
34002df6:	fb02 f303 	mul.w	r3, r2, r3
34002dfa:	4a18      	ldr	r2, [pc, #96]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002dfc:	4413      	add	r3, r2
34002dfe:	2200      	movs	r2, #0
34002e00:	2101      	movs	r1, #1
34002e02:	4618      	mov	r0, r3
34002e04:	f7fe fd27 	bl	34001856 <MX25UM51245G_AutoPollingMemReady>
34002e08:	4603      	mov	r3, r0
34002e0a:	2b00      	cmp	r3, #0
34002e0c:	d003      	beq.n	34002e16 <XSPI_NOR_EnterSOPIMode+0x14a>
                                         BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002e0e:	f06f 0304 	mvn.w	r3, #4
34002e12:	60fb      	str	r3, [r7, #12]
34002e14:	e01d      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34002e16:	687b      	ldr	r3, [r7, #4]
34002e18:	2264      	movs	r2, #100	@ 0x64
34002e1a:	fb02 f303 	mul.w	r3, r2, r3
34002e1e:	4a0f      	ldr	r2, [pc, #60]	@ (34002e5c <XSPI_NOR_EnterSOPIMode+0x190>)
34002e20:	1898      	adds	r0, r3, r2
34002e22:	f107 0308 	add.w	r3, r7, #8
34002e26:	9300      	str	r3, [sp, #0]
34002e28:	2300      	movs	r3, #0
34002e2a:	2200      	movs	r2, #0
34002e2c:	2101      	movs	r1, #1
34002e2e:	f7ff f83c 	bl	34001eaa <MX25UM51245G_ReadCfg2Register>
34002e32:	4603      	mov	r3, r0
34002e34:	2b00      	cmp	r3, #0
34002e36:	d003      	beq.n	34002e40 <XSPI_NOR_EnterSOPIMode+0x174>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002e38:	f06f 0304 	mvn.w	r3, #4
34002e3c:	60fb      	str	r3, [r7, #12]
34002e3e:	e008      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
34002e40:	7a3b      	ldrb	r3, [r7, #8]
34002e42:	2b01      	cmp	r3, #1
34002e44:	d003      	beq.n	34002e4e <XSPI_NOR_EnterSOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002e46:	f06f 0304 	mvn.w	r3, #4
34002e4a:	60fb      	str	r3, [r7, #12]
34002e4c:	e001      	b.n	34002e52 <XSPI_NOR_EnterSOPIMode+0x186>
    }
    else
    {
      ret = BSP_ERROR_NONE;
34002e4e:	2300      	movs	r3, #0
34002e50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
34002e52:	68fb      	ldr	r3, [r7, #12]
}
34002e54:	4618      	mov	r0, r3
34002e56:	3714      	adds	r7, #20
34002e58:	46bd      	mov	sp, r7
34002e5a:	bd90      	pop	{r4, r7, pc}
34002e5c:	3401c158 	.word	0x3401c158
34002e60:	3401c1bc 	.word	0x3401c1bc

34002e64 <XSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
34002e64:	b590      	push	{r4, r7, lr}
34002e66:	b087      	sub	sp, #28
34002e68:	af02      	add	r7, sp, #8
34002e6a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
34002e6c:	2300      	movs	r3, #0
34002e6e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
34002e70:	687b      	ldr	r3, [r7, #4]
34002e72:	2b00      	cmp	r3, #0
34002e74:	d003      	beq.n	34002e7e <XSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
34002e76:	f06f 0301 	mvn.w	r3, #1
34002e7a:	60fb      	str	r3, [r7, #12]
34002e7c:	e0a3      	b.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002e7e:	687b      	ldr	r3, [r7, #4]
34002e80:	2264      	movs	r2, #100	@ 0x64
34002e82:	fb02 f303 	mul.w	r3, r2, r3
34002e86:	4a52      	ldr	r2, [pc, #328]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002e88:	1898      	adds	r0, r3, r2
34002e8a:	4952      	ldr	r1, [pc, #328]	@ (34002fd4 <XSPI_NOR_ExitOPIMode+0x170>)
34002e8c:	687a      	ldr	r2, [r7, #4]
34002e8e:	4613      	mov	r3, r2
34002e90:	005b      	lsls	r3, r3, #1
34002e92:	4413      	add	r3, r2
34002e94:	440b      	add	r3, r1
34002e96:	3301      	adds	r3, #1
34002e98:	7819      	ldrb	r1, [r3, #0]
34002e9a:	4c4e      	ldr	r4, [pc, #312]	@ (34002fd4 <XSPI_NOR_ExitOPIMode+0x170>)
34002e9c:	687a      	ldr	r2, [r7, #4]
34002e9e:	4613      	mov	r3, r2
34002ea0:	005b      	lsls	r3, r3, #1
34002ea2:	4413      	add	r3, r2
34002ea4:	4423      	add	r3, r4
34002ea6:	3302      	adds	r3, #2
34002ea8:	781b      	ldrb	r3, [r3, #0]
34002eaa:	461a      	mov	r2, r3
34002eac:	f7fe fe9c 	bl	34001be8 <MX25UM51245G_WriteEnable>
34002eb0:	4603      	mov	r3, r0
34002eb2:	2b00      	cmp	r3, #0
34002eb4:	d003      	beq.n	34002ebe <XSPI_NOR_ExitOPIMode+0x5a>
                                    Xspi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
34002eb6:	f06f 0304 	mvn.w	r3, #4
34002eba:	60fb      	str	r3, [r7, #12]
34002ebc:	e083      	b.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
34002ebe:	2300      	movs	r3, #0
34002ec0:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
34002ec2:	2300      	movs	r3, #0
34002ec4:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hxspi_nor[Instance], Xspi_Nor_Ctx[Instance].InterfaceMode,
34002ec6:	687b      	ldr	r3, [r7, #4]
34002ec8:	2264      	movs	r2, #100	@ 0x64
34002eca:	fb02 f303 	mul.w	r3, r2, r3
34002ece:	4a40      	ldr	r2, [pc, #256]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002ed0:	1898      	adds	r0, r3, r2
34002ed2:	4940      	ldr	r1, [pc, #256]	@ (34002fd4 <XSPI_NOR_ExitOPIMode+0x170>)
34002ed4:	687a      	ldr	r2, [r7, #4]
34002ed6:	4613      	mov	r3, r2
34002ed8:	005b      	lsls	r3, r3, #1
34002eda:	4413      	add	r3, r2
34002edc:	440b      	add	r3, r1
34002ede:	3301      	adds	r3, #1
34002ee0:	7819      	ldrb	r1, [r3, #0]
34002ee2:	4c3c      	ldr	r4, [pc, #240]	@ (34002fd4 <XSPI_NOR_ExitOPIMode+0x170>)
34002ee4:	687a      	ldr	r2, [r7, #4]
34002ee6:	4613      	mov	r3, r2
34002ee8:	005b      	lsls	r3, r3, #1
34002eea:	4413      	add	r3, r2
34002eec:	4423      	add	r3, r4
34002eee:	3302      	adds	r3, #2
34002ef0:	781a      	ldrb	r2, [r3, #0]
34002ef2:	7a3b      	ldrb	r3, [r7, #8]
34002ef4:	9300      	str	r3, [sp, #0]
34002ef6:	2300      	movs	r3, #0
34002ef8:	f7fe ff44 	bl	34001d84 <MX25UM51245G_WriteCfg2Register>
34002efc:	4603      	mov	r3, r0
34002efe:	2b00      	cmp	r3, #0
34002f00:	d003      	beq.n	34002f0a <XSPI_NOR_ExitOPIMode+0xa6>
                                       Xspi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
34002f02:	f06f 0304 	mvn.w	r3, #4
34002f06:	60fb      	str	r3, [r7, #12]
34002f08:	e05d      	b.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
34002f0a:	2028      	movs	r0, #40	@ 0x28
34002f0c:	f000 fb7a 	bl	34003604 <HAL_Delay>

      if (Xspi_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
34002f10:	4930      	ldr	r1, [pc, #192]	@ (34002fd4 <XSPI_NOR_ExitOPIMode+0x170>)
34002f12:	687a      	ldr	r2, [r7, #4]
34002f14:	4613      	mov	r3, r2
34002f16:	005b      	lsls	r3, r3, #1
34002f18:	4413      	add	r3, r2
34002f1a:	440b      	add	r3, r1
34002f1c:	3302      	adds	r3, #2
34002f1e:	781b      	ldrb	r3, [r3, #0]
34002f20:	2b01      	cmp	r3, #1
34002f22:	d120      	bne.n	34002f66 <XSPI_NOR_ExitOPIMode+0x102>
      {
        /* Reconfigure the memory type of the peripheral */
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
34002f24:	4a2a      	ldr	r2, [pc, #168]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f26:	687b      	ldr	r3, [r7, #4]
34002f28:	2164      	movs	r1, #100	@ 0x64
34002f2a:	fb01 f303 	mul.w	r3, r1, r3
34002f2e:	4413      	add	r3, r2
34002f30:	330c      	adds	r3, #12
34002f32:	2200      	movs	r2, #0
34002f34:	601a      	str	r2, [r3, #0]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
34002f36:	4a26      	ldr	r2, [pc, #152]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f38:	687b      	ldr	r3, [r7, #4]
34002f3a:	2164      	movs	r1, #100	@ 0x64
34002f3c:	fb01 f303 	mul.w	r3, r1, r3
34002f40:	4413      	add	r3, r2
34002f42:	332c      	adds	r3, #44	@ 0x2c
34002f44:	2200      	movs	r2, #0
34002f46:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
34002f48:	687b      	ldr	r3, [r7, #4]
34002f4a:	2264      	movs	r2, #100	@ 0x64
34002f4c:	fb02 f303 	mul.w	r3, r2, r3
34002f50:	4a1f      	ldr	r2, [pc, #124]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f52:	4413      	add	r3, r2
34002f54:	4618      	mov	r0, r3
34002f56:	f013 f91d 	bl	34016194 <HAL_XSPI_Init>
34002f5a:	4603      	mov	r3, r0
34002f5c:	2b00      	cmp	r3, #0
34002f5e:	d002      	beq.n	34002f66 <XSPI_NOR_ExitOPIMode+0x102>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
34002f60:	f06f 0303 	mvn.w	r3, #3
34002f64:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
34002f66:	68fb      	ldr	r3, [r7, #12]
34002f68:	2b00      	cmp	r3, #0
34002f6a:	d12c      	bne.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
34002f6c:	687b      	ldr	r3, [r7, #4]
34002f6e:	2264      	movs	r2, #100	@ 0x64
34002f70:	fb02 f303 	mul.w	r3, r2, r3
34002f74:	4a16      	ldr	r2, [pc, #88]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f76:	4413      	add	r3, r2
34002f78:	2200      	movs	r2, #0
34002f7a:	2100      	movs	r1, #0
34002f7c:	4618      	mov	r0, r3
34002f7e:	f7fe fc6a 	bl	34001856 <MX25UM51245G_AutoPollingMemReady>
34002f82:	4603      	mov	r3, r0
34002f84:	2b00      	cmp	r3, #0
34002f86:	d003      	beq.n	34002f90 <XSPI_NOR_ExitOPIMode+0x12c>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002f88:	f06f 0304 	mvn.w	r3, #4
34002f8c:	60fb      	str	r3, [r7, #12]
34002f8e:	e01a      	b.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
34002f90:	687b      	ldr	r3, [r7, #4]
34002f92:	2264      	movs	r2, #100	@ 0x64
34002f94:	fb02 f303 	mul.w	r3, r2, r3
34002f98:	4a0d      	ldr	r2, [pc, #52]	@ (34002fd0 <XSPI_NOR_ExitOPIMode+0x16c>)
34002f9a:	1898      	adds	r0, r3, r2
34002f9c:	f107 0308 	add.w	r3, r7, #8
34002fa0:	9300      	str	r3, [sp, #0]
34002fa2:	2300      	movs	r3, #0
34002fa4:	2200      	movs	r2, #0
34002fa6:	2100      	movs	r1, #0
34002fa8:	f7fe ff7f 	bl	34001eaa <MX25UM51245G_ReadCfg2Register>
34002fac:	4603      	mov	r3, r0
34002fae:	2b00      	cmp	r3, #0
34002fb0:	d003      	beq.n	34002fba <XSPI_NOR_ExitOPIMode+0x156>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002fb2:	f06f 0304 	mvn.w	r3, #4
34002fb6:	60fb      	str	r3, [r7, #12]
34002fb8:	e005      	b.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
        }
        else if (reg[0] != 0U)
34002fba:	7a3b      	ldrb	r3, [r7, #8]
34002fbc:	2b00      	cmp	r3, #0
34002fbe:	d002      	beq.n	34002fc6 <XSPI_NOR_ExitOPIMode+0x162>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
34002fc0:	f06f 0304 	mvn.w	r3, #4
34002fc4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
34002fc6:	68fb      	ldr	r3, [r7, #12]
}
34002fc8:	4618      	mov	r0, r3
34002fca:	3714      	adds	r7, #20
34002fcc:	46bd      	mov	sp, r7
34002fce:	bd90      	pop	{r4, r7, pc}
34002fd0:	3401c158 	.word	0x3401c158
34002fd4:	3401c1bc 	.word	0x3401c1bc

34002fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
34002fd8:	b480      	push	{r7}
34002fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34002fdc:	4b6a      	ldr	r3, [pc, #424]	@ (34003188 <SystemInit+0x1b0>)
34002fde:	4a6b      	ldr	r2, [pc, #428]	@ (3400318c <SystemInit+0x1b4>)
34002fe0:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34002fe2:	4b6b      	ldr	r3, [pc, #428]	@ (34003190 <SystemInit+0x1b8>)
34002fe4:	2201      	movs	r2, #1
34002fe6:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34002fea:	4b69      	ldr	r3, [pc, #420]	@ (34003190 <SystemInit+0x1b8>)
34002fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34002ff0:	461a      	mov	r2, r3
34002ff2:	2301      	movs	r3, #1
34002ff4:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
34002ff8:	4b65      	ldr	r3, [pc, #404]	@ (34003190 <SystemInit+0x1b8>)
34002ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34002ffe:	461a      	mov	r2, r3
34003000:	2301      	movs	r3, #1
34003002:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
34003006:	4b63      	ldr	r3, [pc, #396]	@ (34003194 <SystemInit+0x1bc>)
34003008:	2200      	movs	r2, #0
3400300a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400300c:	4b61      	ldr	r3, [pc, #388]	@ (34003194 <SystemInit+0x1bc>)
3400300e:	2200      	movs	r2, #0
34003010:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003012:	4b60      	ldr	r3, [pc, #384]	@ (34003194 <SystemInit+0x1bc>)
34003014:	2200      	movs	r2, #0
34003016:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
34003018:	4b5e      	ldr	r3, [pc, #376]	@ (34003194 <SystemInit+0x1bc>)
3400301a:	2201      	movs	r2, #1
3400301c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400301e:	4b5d      	ldr	r3, [pc, #372]	@ (34003194 <SystemInit+0x1bc>)
34003020:	2200      	movs	r2, #0
34003022:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003024:	4b5b      	ldr	r3, [pc, #364]	@ (34003194 <SystemInit+0x1bc>)
34003026:	2200      	movs	r2, #0
34003028:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
3400302a:	4b5a      	ldr	r3, [pc, #360]	@ (34003194 <SystemInit+0x1bc>)
3400302c:	2202      	movs	r2, #2
3400302e:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003030:	4b58      	ldr	r3, [pc, #352]	@ (34003194 <SystemInit+0x1bc>)
34003032:	2200      	movs	r2, #0
34003034:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003036:	4b57      	ldr	r3, [pc, #348]	@ (34003194 <SystemInit+0x1bc>)
34003038:	2200      	movs	r2, #0
3400303a:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
3400303c:	4b55      	ldr	r3, [pc, #340]	@ (34003194 <SystemInit+0x1bc>)
3400303e:	2203      	movs	r2, #3
34003040:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003042:	4b54      	ldr	r3, [pc, #336]	@ (34003194 <SystemInit+0x1bc>)
34003044:	2200      	movs	r2, #0
34003046:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003048:	4b52      	ldr	r3, [pc, #328]	@ (34003194 <SystemInit+0x1bc>)
3400304a:	2200      	movs	r2, #0
3400304c:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
3400304e:	4b51      	ldr	r3, [pc, #324]	@ (34003194 <SystemInit+0x1bc>)
34003050:	2204      	movs	r2, #4
34003052:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003054:	4b4f      	ldr	r3, [pc, #316]	@ (34003194 <SystemInit+0x1bc>)
34003056:	2200      	movs	r2, #0
34003058:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400305a:	4b4e      	ldr	r3, [pc, #312]	@ (34003194 <SystemInit+0x1bc>)
3400305c:	2200      	movs	r2, #0
3400305e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34003060:	4b4c      	ldr	r3, [pc, #304]	@ (34003194 <SystemInit+0x1bc>)
34003062:	2205      	movs	r2, #5
34003064:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003066:	4b4b      	ldr	r3, [pc, #300]	@ (34003194 <SystemInit+0x1bc>)
34003068:	2200      	movs	r2, #0
3400306a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400306c:	4b49      	ldr	r3, [pc, #292]	@ (34003194 <SystemInit+0x1bc>)
3400306e:	2200      	movs	r2, #0
34003070:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34003072:	4b48      	ldr	r3, [pc, #288]	@ (34003194 <SystemInit+0x1bc>)
34003074:	2206      	movs	r2, #6
34003076:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34003078:	4b46      	ldr	r3, [pc, #280]	@ (34003194 <SystemInit+0x1bc>)
3400307a:	2200      	movs	r2, #0
3400307c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3400307e:	4b45      	ldr	r3, [pc, #276]	@ (34003194 <SystemInit+0x1bc>)
34003080:	2200      	movs	r2, #0
34003082:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34003084:	4b43      	ldr	r3, [pc, #268]	@ (34003194 <SystemInit+0x1bc>)
34003086:	2207      	movs	r2, #7
34003088:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3400308a:	4b42      	ldr	r3, [pc, #264]	@ (34003194 <SystemInit+0x1bc>)
3400308c:	2200      	movs	r2, #0
3400308e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34003090:	4b40      	ldr	r3, [pc, #256]	@ (34003194 <SystemInit+0x1bc>)
34003092:	2200      	movs	r2, #0
34003094:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34003096:	4b3e      	ldr	r3, [pc, #248]	@ (34003190 <SystemInit+0x1b8>)
34003098:	2201      	movs	r2, #1
3400309a:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
3400309e:	4b3c      	ldr	r3, [pc, #240]	@ (34003190 <SystemInit+0x1b8>)
340030a0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
340030a4:	4b38      	ldr	r3, [pc, #224]	@ (34003188 <SystemInit+0x1b0>)
340030a6:	4a3c      	ldr	r2, [pc, #240]	@ (34003198 <SystemInit+0x1c0>)
340030a8:	689b      	ldr	r3, [r3, #8]
340030aa:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
340030ac:	4b3b      	ldr	r3, [pc, #236]	@ (3400319c <SystemInit+0x1c4>)
340030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340030b0:	4a3a      	ldr	r2, [pc, #232]	@ (3400319c <SystemInit+0x1c4>)
340030b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
340030b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
340030b8:	4b38      	ldr	r3, [pc, #224]	@ (3400319c <SystemInit+0x1c4>)
340030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340030bc:	4a37      	ldr	r2, [pc, #220]	@ (3400319c <SystemInit+0x1c4>)
340030be:	f043 0310 	orr.w	r3, r3, #16
340030c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
340030c4:	4b35      	ldr	r3, [pc, #212]	@ (3400319c <SystemInit+0x1c4>)
340030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
340030c8:	4b31      	ldr	r3, [pc, #196]	@ (34003190 <SystemInit+0x1b8>)
340030ca:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
340030ce:	4a30      	ldr	r2, [pc, #192]	@ (34003190 <SystemInit+0x1b8>)
340030d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340030d4:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
340030d8:	4b2d      	ldr	r3, [pc, #180]	@ (34003190 <SystemInit+0x1b8>)
340030da:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340030de:	4a2c      	ldr	r2, [pc, #176]	@ (34003190 <SystemInit+0x1b8>)
340030e0:	f043 0310 	orr.w	r3, r3, #16
340030e4:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
340030e8:	4b29      	ldr	r3, [pc, #164]	@ (34003190 <SystemInit+0x1b8>)
340030ea:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
340030ee:	4b28      	ldr	r3, [pc, #160]	@ (34003190 <SystemInit+0x1b8>)
340030f0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
340030f4:	4a26      	ldr	r2, [pc, #152]	@ (34003190 <SystemInit+0x1b8>)
340030f6:	f023 0310 	bic.w	r3, r3, #16
340030fa:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340030fe:	4b24      	ldr	r3, [pc, #144]	@ (34003190 <SystemInit+0x1b8>)
34003100:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
34003104:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34003108:	4b21      	ldr	r3, [pc, #132]	@ (34003190 <SystemInit+0x1b8>)
3400310a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400310e:	461a      	mov	r2, r3
34003110:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34003114:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34003118:	4b1d      	ldr	r3, [pc, #116]	@ (34003190 <SystemInit+0x1b8>)
3400311a:	2201      	movs	r2, #1
3400311c:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
34003120:	4b1b      	ldr	r3, [pc, #108]	@ (34003190 <SystemInit+0x1b8>)
34003122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003126:	461a      	mov	r2, r3
34003128:	2301      	movs	r3, #1
3400312a:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3400312e:	4b18      	ldr	r3, [pc, #96]	@ (34003190 <SystemInit+0x1b8>)
34003130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003134:	461a      	mov	r2, r3
34003136:	2301      	movs	r3, #1
34003138:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400313c:	4b14      	ldr	r3, [pc, #80]	@ (34003190 <SystemInit+0x1b8>)
3400313e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003142:	461a      	mov	r2, r3
34003144:	2340      	movs	r3, #64	@ 0x40
34003146:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400314a:	4b13      	ldr	r3, [pc, #76]	@ (34003198 <SystemInit+0x1c0>)
3400314c:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3400314e:	4b10      	ldr	r3, [pc, #64]	@ (34003190 <SystemInit+0x1b8>)
34003150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34003154:	461a      	mov	r2, r3
34003156:	2301      	movs	r3, #1
34003158:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400315c:	4b0a      	ldr	r3, [pc, #40]	@ (34003188 <SystemInit+0x1b0>)
3400315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003162:	4a09      	ldr	r2, [pc, #36]	@ (34003188 <SystemInit+0x1b0>)
34003164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400316c:	4b0c      	ldr	r3, [pc, #48]	@ (340031a0 <SystemInit+0x1c8>)
3400316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34003172:	4a0b      	ldr	r2, [pc, #44]	@ (340031a0 <SystemInit+0x1c8>)
34003174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34003178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3400317c:	bf00      	nop
3400317e:	46bd      	mov	sp, r7
34003180:	f85d 7b04 	ldr.w	r7, [sp], #4
34003184:	4770      	bx	lr
34003186:	bf00      	nop
34003188:	e000ed00 	.word	0xe000ed00
3400318c:	34000400 	.word	0x34000400
34003190:	56028000 	.word	0x56028000
34003194:	e000edd0 	.word	0xe000edd0
34003198:	56008000 	.word	0x56008000
3400319c:	56024800 	.word	0x56024800
340031a0:	e002ed00 	.word	0xe002ed00

340031a4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
340031a4:	b480      	push	{r7}
340031a6:	b08d      	sub	sp, #52	@ 0x34
340031a8:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
340031aa:	2300      	movs	r3, #0
340031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
340031ae:	2300      	movs	r3, #0
340031b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
340031b2:	2300      	movs	r3, #0
340031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
340031b6:	2300      	movs	r3, #0
340031b8:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
340031ba:	2300      	movs	r3, #0
340031bc:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
340031be:	2300      	movs	r3, #0
340031c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340031c2:	4b9b      	ldr	r3, [pc, #620]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340031c4:	6a1b      	ldr	r3, [r3, #32]
340031c6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
340031ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340031ce:	d029      	beq.n	34003224 <SystemCoreClockUpdate+0x80>
340031d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340031d4:	f200 8180 	bhi.w	340034d8 <SystemCoreClockUpdate+0x334>
340031d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340031dc:	d01f      	beq.n	3400321e <SystemCoreClockUpdate+0x7a>
340031de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340031e2:	f200 8179 	bhi.w	340034d8 <SystemCoreClockUpdate+0x334>
340031e6:	2b00      	cmp	r3, #0
340031e8:	d003      	beq.n	340031f2 <SystemCoreClockUpdate+0x4e>
340031ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340031ee:	d00a      	beq.n	34003206 <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
340031f0:	e172      	b.n	340034d8 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340031f2:	4b8f      	ldr	r3, [pc, #572]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340031f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340031f6:	09db      	lsrs	r3, r3, #7
340031f8:	f003 0303 	and.w	r3, r3, #3
340031fc:	4a8d      	ldr	r2, [pc, #564]	@ (34003434 <SystemCoreClockUpdate+0x290>)
340031fe:	fa22 f303 	lsr.w	r3, r2, r3
34003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003204:	e169      	b.n	340034da <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34003206:	4b8a      	ldr	r3, [pc, #552]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400320a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400320e:	2b00      	cmp	r3, #0
34003210:	d102      	bne.n	34003218 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
34003212:	4b89      	ldr	r3, [pc, #548]	@ (34003438 <SystemCoreClockUpdate+0x294>)
34003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003216:	e160      	b.n	340034da <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
34003218:	4b88      	ldr	r3, [pc, #544]	@ (3400343c <SystemCoreClockUpdate+0x298>)
3400321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400321c:	e15d      	b.n	340034da <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
3400321e:	4b88      	ldr	r3, [pc, #544]	@ (34003440 <SystemCoreClockUpdate+0x29c>)
34003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
34003222:	e15a      	b.n	340034da <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
34003224:	4b82      	ldr	r3, [pc, #520]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003226:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400322a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
3400322e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003232:	d066      	beq.n	34003302 <SystemCoreClockUpdate+0x15e>
34003234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34003238:	f200 8091 	bhi.w	3400335e <SystemCoreClockUpdate+0x1ba>
3400323c:	2b00      	cmp	r3, #0
3400323e:	d003      	beq.n	34003248 <SystemCoreClockUpdate+0xa4>
34003240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34003244:	d02f      	beq.n	340032a6 <SystemCoreClockUpdate+0x102>
34003246:	e08a      	b.n	3400335e <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34003248:	4b79      	ldr	r3, [pc, #484]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
3400324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400324e:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34003250:	68fb      	ldr	r3, [r7, #12]
34003252:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003256:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34003258:	68fb      	ldr	r3, [r7, #12]
3400325a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400325e:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003260:	693b      	ldr	r3, [r7, #16]
34003262:	2b00      	cmp	r3, #0
34003264:	f040 80a9 	bne.w	340033ba <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34003268:	68fb      	ldr	r3, [r7, #12]
3400326a:	0d1b      	lsrs	r3, r3, #20
3400326c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003270:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34003272:	68fb      	ldr	r3, [r7, #12]
34003274:	0a1b      	lsrs	r3, r3, #8
34003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
3400327a:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400327c:	4b6c      	ldr	r3, [pc, #432]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
3400327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34003282:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34003286:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34003288:	4b69      	ldr	r3, [pc, #420]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
3400328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400328e:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34003290:	68fb      	ldr	r3, [r7, #12]
34003292:	0edb      	lsrs	r3, r3, #27
34003294:	f003 0307 	and.w	r3, r3, #7
34003298:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
3400329a:	68fb      	ldr	r3, [r7, #12]
3400329c:	0e1b      	lsrs	r3, r3, #24
3400329e:	f003 0307 	and.w	r3, r3, #7
340032a2:	61bb      	str	r3, [r7, #24]
      break;
340032a4:	e089      	b.n	340033ba <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340032a6:	4b62      	ldr	r3, [pc, #392]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340032ac:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340032ae:	68fb      	ldr	r3, [r7, #12]
340032b0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340032b4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
340032b6:	68fb      	ldr	r3, [r7, #12]
340032b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340032bc:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340032be:	693b      	ldr	r3, [r7, #16]
340032c0:	2b00      	cmp	r3, #0
340032c2:	d17c      	bne.n	340033be <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
340032c4:	68fb      	ldr	r3, [r7, #12]
340032c6:	0d1b      	lsrs	r3, r3, #20
340032c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340032ce:	68fb      	ldr	r3, [r7, #12]
340032d0:	0a1b      	lsrs	r3, r3, #8
340032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
340032d6:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340032d8:	4b55      	ldr	r3, [pc, #340]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340032de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340032e2:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340032e4:	4b52      	ldr	r3, [pc, #328]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
340032ea:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340032ec:	68fb      	ldr	r3, [r7, #12]
340032ee:	0edb      	lsrs	r3, r3, #27
340032f0:	f003 0307 	and.w	r3, r3, #7
340032f4:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
340032f6:	68fb      	ldr	r3, [r7, #12]
340032f8:	0e1b      	lsrs	r3, r3, #24
340032fa:	f003 0307 	and.w	r3, r3, #7
340032fe:	61bb      	str	r3, [r7, #24]
      break;
34003300:	e05d      	b.n	340033be <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34003302:	4b4b      	ldr	r3, [pc, #300]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34003308:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3400330a:	68fb      	ldr	r3, [r7, #12]
3400330c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34003310:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
34003312:	68fb      	ldr	r3, [r7, #12]
34003314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003318:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3400331a:	693b      	ldr	r3, [r7, #16]
3400331c:	2b00      	cmp	r3, #0
3400331e:	d150      	bne.n	340033c2 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
34003320:	68fb      	ldr	r3, [r7, #12]
34003322:	0d1b      	lsrs	r3, r3, #20
34003324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003328:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3400332a:	68fb      	ldr	r3, [r7, #12]
3400332c:	0a1b      	lsrs	r3, r3, #8
3400332e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34003332:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34003334:	4b3e      	ldr	r3, [pc, #248]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400333a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400333e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34003340:	4b3b      	ldr	r3, [pc, #236]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003346:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
34003348:	68fb      	ldr	r3, [r7, #12]
3400334a:	0edb      	lsrs	r3, r3, #27
3400334c:	f003 0307 	and.w	r3, r3, #7
34003350:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34003352:	68fb      	ldr	r3, [r7, #12]
34003354:	0e1b      	lsrs	r3, r3, #24
34003356:	f003 0307 	and.w	r3, r3, #7
3400335a:	61bb      	str	r3, [r7, #24]
      break;
3400335c:	e031      	b.n	340033c2 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3400335e:	4b34      	ldr	r3, [pc, #208]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34003364:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34003366:	68fb      	ldr	r3, [r7, #12]
34003368:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3400336c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
3400336e:	68fb      	ldr	r3, [r7, #12]
34003370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34003374:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34003376:	693b      	ldr	r3, [r7, #16]
34003378:	2b00      	cmp	r3, #0
3400337a:	d124      	bne.n	340033c6 <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3400337c:	68fb      	ldr	r3, [r7, #12]
3400337e:	0d1b      	lsrs	r3, r3, #20
34003380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34003384:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
34003386:	68fb      	ldr	r3, [r7, #12]
34003388:	0a1b      	lsrs	r3, r3, #8
3400338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3400338e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34003390:	4b27      	ldr	r3, [pc, #156]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
34003392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34003396:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400339a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400339c:	4b24      	ldr	r3, [pc, #144]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
3400339e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
340033a2:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
340033a4:	68fb      	ldr	r3, [r7, #12]
340033a6:	0edb      	lsrs	r3, r3, #27
340033a8:	f003 0307 	and.w	r3, r3, #7
340033ac:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
340033ae:	68fb      	ldr	r3, [r7, #12]
340033b0:	0e1b      	lsrs	r3, r3, #24
340033b2:	f003 0307 	and.w	r3, r3, #7
340033b6:	61bb      	str	r3, [r7, #24]
      break;
340033b8:	e005      	b.n	340033c6 <SystemCoreClockUpdate+0x222>
      break;
340033ba:	bf00      	nop
340033bc:	e004      	b.n	340033c8 <SystemCoreClockUpdate+0x224>
      break;
340033be:	bf00      	nop
340033c0:	e002      	b.n	340033c8 <SystemCoreClockUpdate+0x224>
      break;
340033c2:	bf00      	nop
340033c4:	e000      	b.n	340033c8 <SystemCoreClockUpdate+0x224>
      break;
340033c6:	bf00      	nop
    switch (pllsource)
340033c8:	697b      	ldr	r3, [r7, #20]
340033ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340033ce:	d02c      	beq.n	3400342a <SystemCoreClockUpdate+0x286>
340033d0:	697b      	ldr	r3, [r7, #20]
340033d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340033d6:	d839      	bhi.n	3400344c <SystemCoreClockUpdate+0x2a8>
340033d8:	697b      	ldr	r3, [r7, #20]
340033da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340033de:	d021      	beq.n	34003424 <SystemCoreClockUpdate+0x280>
340033e0:	697b      	ldr	r3, [r7, #20]
340033e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340033e6:	d831      	bhi.n	3400344c <SystemCoreClockUpdate+0x2a8>
340033e8:	697b      	ldr	r3, [r7, #20]
340033ea:	2b00      	cmp	r3, #0
340033ec:	d004      	beq.n	340033f8 <SystemCoreClockUpdate+0x254>
340033ee:	697b      	ldr	r3, [r7, #20]
340033f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340033f4:	d00a      	beq.n	3400340c <SystemCoreClockUpdate+0x268>
      break;
340033f6:	e029      	b.n	3400344c <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340033f8:	4b0d      	ldr	r3, [pc, #52]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
340033fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340033fc:	09db      	lsrs	r3, r3, #7
340033fe:	f003 0303 	and.w	r3, r3, #3
34003402:	4a0c      	ldr	r2, [pc, #48]	@ (34003434 <SystemCoreClockUpdate+0x290>)
34003404:	fa22 f303 	lsr.w	r3, r2, r3
34003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3400340a:	e020      	b.n	3400344e <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400340c:	4b08      	ldr	r3, [pc, #32]	@ (34003430 <SystemCoreClockUpdate+0x28c>)
3400340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003414:	2b00      	cmp	r3, #0
34003416:	d102      	bne.n	3400341e <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
34003418:	4b07      	ldr	r3, [pc, #28]	@ (34003438 <SystemCoreClockUpdate+0x294>)
3400341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3400341c:	e017      	b.n	3400344e <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
3400341e:	4b07      	ldr	r3, [pc, #28]	@ (3400343c <SystemCoreClockUpdate+0x298>)
34003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003422:	e014      	b.n	3400344e <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
34003424:	4b06      	ldr	r3, [pc, #24]	@ (34003440 <SystemCoreClockUpdate+0x29c>)
34003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34003428:	e011      	b.n	3400344e <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400342a:	4b06      	ldr	r3, [pc, #24]	@ (34003444 <SystemCoreClockUpdate+0x2a0>)
3400342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
3400342e:	e00e      	b.n	3400344e <SystemCoreClockUpdate+0x2aa>
34003430:	56028000 	.word	0x56028000
34003434:	03d09000 	.word	0x03d09000
34003438:	003d0900 	.word	0x003d0900
3400343c:	00f42400 	.word	0x00f42400
34003440:	02dc6c00 	.word	0x02dc6c00
34003444:	00bb8000 	.word	0x00bb8000
34003448:	4b800000 	.word	0x4b800000
      break;
3400344c:	bf00      	nop
    if (pllbypass == 0U)
3400344e:	693b      	ldr	r3, [r7, #16]
34003450:	2b00      	cmp	r3, #0
34003452:	d134      	bne.n	340034be <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34003456:	ee07 3a90 	vmov	s15, r3
3400345a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3400345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34003460:	ee07 3a90 	vmov	s15, r3
34003464:	eef8 6a67 	vcvt.f32.u32	s13, s15
34003468:	6a3b      	ldr	r3, [r7, #32]
3400346a:	ee07 3a90 	vmov	s15, r3
3400346e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34003472:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 34003448 <SystemCoreClockUpdate+0x2a4>
34003476:	eec6 7a25 	vdiv.f32	s15, s12, s11
3400347a:	ee76 7aa7 	vadd.f32	s15, s13, s15
3400347e:	ee67 6a27 	vmul.f32	s13, s14, s15
34003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34003484:	ee07 3a90 	vmov	s15, r3
34003488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3400348c:	eec6 7a87 	vdiv.f32	s15, s13, s14
34003490:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34003494:	69fb      	ldr	r3, [r7, #28]
34003496:	ee07 3a90 	vmov	s15, r3
3400349a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3400349e:	69bb      	ldr	r3, [r7, #24]
340034a0:	ee07 3a90 	vmov	s15, r3
340034a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
340034a8:	ee27 7a27 	vmul.f32	s14, s14, s15
340034ac:	edd7 6a02 	vldr	s13, [r7, #8]
340034b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
340034b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340034b8:	ee17 3a90 	vmov	r3, s15
340034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
340034be:	4b0b      	ldr	r3, [pc, #44]	@ (340034ec <SystemCoreClockUpdate+0x348>)
340034c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
340034c4:	0c1b      	lsrs	r3, r3, #16
340034c6:	b2db      	uxtb	r3, r3
340034c8:	3301      	adds	r3, #1
340034ca:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
340034cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
340034ce:	687b      	ldr	r3, [r7, #4]
340034d0:	fbb2 f3f3 	udiv	r3, r2, r3
340034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340034d6:	e000      	b.n	340034da <SystemCoreClockUpdate+0x336>
    break;
340034d8:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
340034da:	4a05      	ldr	r2, [pc, #20]	@ (340034f0 <SystemCoreClockUpdate+0x34c>)
340034dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340034de:	6013      	str	r3, [r2, #0]
}
340034e0:	bf00      	nop
340034e2:	3734      	adds	r7, #52	@ 0x34
340034e4:	46bd      	mov	sp, r7
340034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340034ea:	4770      	bx	lr
340034ec:	56028000 	.word	0x56028000
340034f0:	3401be34 	.word	0x3401be34

340034f4 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
340034f4:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
340034f8:	b588      	push	{r3, r7, lr}
340034fa:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
340034fc:	f7ff fe52 	bl	340031a4 <SystemCoreClockUpdate>

  return SystemCoreClock;
34003500:	4b06      	ldr	r3, [pc, #24]	@ (3400351c <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
34003502:	681b      	ldr	r3, [r3, #0]
}
34003504:	4618      	mov	r0, r3
34003506:	46bd      	mov	sp, r7
34003508:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
3400350c:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34003510:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
34003514:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34003518:	4774      	bxns	lr
3400351a:	bf00      	nop
3400351c:	3401be34 	.word	0x3401be34

34003520 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34003520:	b580      	push	{r7, lr}
34003522:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34003524:	2003      	movs	r0, #3
34003526:	f000 fb43 	bl	34003bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3400352a:	f7ff fe3b 	bl	340031a4 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3400352e:	200f      	movs	r0, #15
34003530:	f000 f812 	bl	34003558 <HAL_InitTick>
34003534:	4603      	mov	r3, r0
34003536:	2b00      	cmp	r3, #0
34003538:	d001      	beq.n	3400353e <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3400353a:	2301      	movs	r3, #1
3400353c:	e002      	b.n	34003544 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
3400353e:	f000 f803 	bl	34003548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34003542:	2300      	movs	r3, #0
}
34003544:	4618      	mov	r0, r3
34003546:	bd80      	pop	{r7, pc}

34003548 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
34003548:	b480      	push	{r7}
3400354a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
3400354c:	bf00      	nop
3400354e:	46bd      	mov	sp, r7
34003550:	f85d 7b04 	ldr.w	r7, [sp], #4
34003554:	4770      	bx	lr
	...

34003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34003558:	b580      	push	{r7, lr}
3400355a:	b082      	sub	sp, #8
3400355c:	af00      	add	r7, sp, #0
3400355e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34003560:	4b15      	ldr	r3, [pc, #84]	@ (340035b8 <HAL_InitTick+0x60>)
34003562:	781b      	ldrb	r3, [r3, #0]
34003564:	2b00      	cmp	r3, #0
34003566:	d101      	bne.n	3400356c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34003568:	2301      	movs	r3, #1
3400356a:	e021      	b.n	340035b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
3400356c:	4b13      	ldr	r3, [pc, #76]	@ (340035bc <HAL_InitTick+0x64>)
3400356e:	681a      	ldr	r2, [r3, #0]
34003570:	4b11      	ldr	r3, [pc, #68]	@ (340035b8 <HAL_InitTick+0x60>)
34003572:	781b      	ldrb	r3, [r3, #0]
34003574:	4619      	mov	r1, r3
34003576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3400357a:	fbb3 f3f1 	udiv	r3, r3, r1
3400357e:	fbb2 f3f3 	udiv	r3, r2, r3
34003582:	4618      	mov	r0, r3
34003584:	f000 fba8 	bl	34003cd8 <HAL_SYSTICK_Config>
34003588:	4603      	mov	r3, r0
3400358a:	2b00      	cmp	r3, #0
3400358c:	d001      	beq.n	34003592 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
3400358e:	2301      	movs	r3, #1
34003590:	e00e      	b.n	340035b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34003592:	687b      	ldr	r3, [r7, #4]
34003594:	2b0f      	cmp	r3, #15
34003596:	d80a      	bhi.n	340035ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34003598:	2200      	movs	r2, #0
3400359a:	6879      	ldr	r1, [r7, #4]
3400359c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340035a0:	f000 fb26 	bl	34003bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
340035a4:	4a06      	ldr	r2, [pc, #24]	@ (340035c0 <HAL_InitTick+0x68>)
340035a6:	687b      	ldr	r3, [r7, #4]
340035a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
340035aa:	2300      	movs	r3, #0
340035ac:	e000      	b.n	340035b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
340035ae:	2301      	movs	r3, #1
}
340035b0:	4618      	mov	r0, r3
340035b2:	3708      	adds	r7, #8
340035b4:	46bd      	mov	sp, r7
340035b6:	bd80      	pop	{r7, pc}
340035b8:	3401be3c 	.word	0x3401be3c
340035bc:	3401be34 	.word	0x3401be34
340035c0:	3401be38 	.word	0x3401be38

340035c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
340035c4:	b480      	push	{r7}
340035c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
340035c8:	4b06      	ldr	r3, [pc, #24]	@ (340035e4 <HAL_IncTick+0x20>)
340035ca:	781b      	ldrb	r3, [r3, #0]
340035cc:	461a      	mov	r2, r3
340035ce:	4b06      	ldr	r3, [pc, #24]	@ (340035e8 <HAL_IncTick+0x24>)
340035d0:	681b      	ldr	r3, [r3, #0]
340035d2:	4413      	add	r3, r2
340035d4:	4a04      	ldr	r2, [pc, #16]	@ (340035e8 <HAL_IncTick+0x24>)
340035d6:	6013      	str	r3, [r2, #0]
}
340035d8:	bf00      	nop
340035da:	46bd      	mov	sp, r7
340035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340035e0:	4770      	bx	lr
340035e2:	bf00      	nop
340035e4:	3401be3c 	.word	0x3401be3c
340035e8:	3401c1c0 	.word	0x3401c1c0

340035ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
340035ec:	b480      	push	{r7}
340035ee:	af00      	add	r7, sp, #0
  return uwTick;
340035f0:	4b03      	ldr	r3, [pc, #12]	@ (34003600 <HAL_GetTick+0x14>)
340035f2:	681b      	ldr	r3, [r3, #0]
}
340035f4:	4618      	mov	r0, r3
340035f6:	46bd      	mov	sp, r7
340035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340035fc:	4770      	bx	lr
340035fe:	bf00      	nop
34003600:	3401c1c0 	.word	0x3401c1c0

34003604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34003604:	b580      	push	{r7, lr}
34003606:	b084      	sub	sp, #16
34003608:	af00      	add	r7, sp, #0
3400360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
3400360c:	f7ff ffee 	bl	340035ec <HAL_GetTick>
34003610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34003612:	687b      	ldr	r3, [r7, #4]
34003614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34003616:	68fb      	ldr	r3, [r7, #12]
34003618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3400361c:	d005      	beq.n	3400362a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
3400361e:	4b0a      	ldr	r3, [pc, #40]	@ (34003648 <HAL_Delay+0x44>)
34003620:	781b      	ldrb	r3, [r3, #0]
34003622:	461a      	mov	r2, r3
34003624:	68fb      	ldr	r3, [r7, #12]
34003626:	4413      	add	r3, r2
34003628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3400362a:	bf00      	nop
3400362c:	f7ff ffde 	bl	340035ec <HAL_GetTick>
34003630:	4602      	mov	r2, r0
34003632:	68bb      	ldr	r3, [r7, #8]
34003634:	1ad3      	subs	r3, r2, r3
34003636:	68fa      	ldr	r2, [r7, #12]
34003638:	429a      	cmp	r2, r3
3400363a:	d8f7      	bhi.n	3400362c <HAL_Delay+0x28>
  {
  }
}
3400363c:	bf00      	nop
3400363e:	bf00      	nop
34003640:	3710      	adds	r7, #16
34003642:	46bd      	mov	sp, r7
34003644:	bd80      	pop	{r7, pc}
34003646:	bf00      	nop
34003648:	3401be3c 	.word	0x3401be3c

3400364c <HAL_BSEC_OTP_Read>:
  * @param  pFuseData  Returned value of fuse. The returned value is between 0 and 0xFFFFFFFFU
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Read(BSEC_HandleTypeDef * hbsec, uint32_t FuseId, uint32_t *pFuseData)
{
3400364c:	b580      	push	{r7, lr}
3400364e:	b084      	sub	sp, #16
34003650:	af00      	add	r7, sp, #0
34003652:	60f8      	str	r0, [r7, #12]
34003654:	60b9      	str	r1, [r7, #8]
34003656:	607a      	str	r2, [r7, #4]
  /* Check the handle pointer */
  if (hbsec == NULL)
34003658:	68fb      	ldr	r3, [r7, #12]
3400365a:	2b00      	cmp	r3, #0
3400365c:	d101      	bne.n	34003662 <HAL_BSEC_OTP_Read+0x16>
  {
    return HAL_ERROR;
3400365e:	2301      	movs	r3, #1
34003660:	e026      	b.n	340036b0 <HAL_BSEC_OTP_Read+0x64>
  }

  /* Check the address of returned value and instance */
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
34003662:	687b      	ldr	r3, [r7, #4]
34003664:	2b00      	cmp	r3, #0
34003666:	d004      	beq.n	34003672 <HAL_BSEC_OTP_Read+0x26>
34003668:	68fb      	ldr	r3, [r7, #12]
3400366a:	681b      	ldr	r3, [r3, #0]
3400366c:	4a12      	ldr	r2, [pc, #72]	@ (340036b8 <HAL_BSEC_OTP_Read+0x6c>)
3400366e:	4293      	cmp	r3, r2
34003670:	d004      	beq.n	3400367c <HAL_BSEC_OTP_Read+0x30>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003672:	68fb      	ldr	r3, [r7, #12]
34003674:	2201      	movs	r2, #1
34003676:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
34003678:	2301      	movs	r3, #1
3400367a:	e019      	b.n	340036b0 <HAL_BSEC_OTP_Read+0x64>
  }

  if (FuseId < BSEC_NB_FUSES)
3400367c:	68bb      	ldr	r3, [r7, #8]
3400367e:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003682:	d211      	bcs.n	340036a8 <HAL_BSEC_OTP_Read+0x5c>
  {
    /* Reload the data :
       - Unshadowed fuse are not automatically reload and data no more available after register read
       - Shadowed fuse contains by default the shadow value in the register */
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
34003684:	68b9      	ldr	r1, [r7, #8]
34003686:	68f8      	ldr	r0, [r7, #12]
34003688:	f000 f8ba 	bl	34003800 <HAL_BSEC_OTP_Reload>
3400368c:	4603      	mov	r3, r0
3400368e:	2b00      	cmp	r3, #0
34003690:	d108      	bne.n	340036a4 <HAL_BSEC_OTP_Read+0x58>
    {
      /* Read data from shadow register */
      *pFuseData = hbsec->Instance->FVRw[FuseId];
34003692:	68fb      	ldr	r3, [r7, #12]
34003694:	681b      	ldr	r3, [r3, #0]
34003696:	68ba      	ldr	r2, [r7, #8]
34003698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
3400369c:	687b      	ldr	r3, [r7, #4]
3400369e:	601a      	str	r2, [r3, #0]
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
340036a0:	2300      	movs	r3, #0
340036a2:	e005      	b.n	340036b0 <HAL_BSEC_OTP_Read+0x64>
      return HAL_ERROR;
340036a4:	2301      	movs	r3, #1
340036a6:	e003      	b.n	340036b0 <HAL_BSEC_OTP_Read+0x64>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340036a8:	68fb      	ldr	r3, [r7, #12]
340036aa:	2201      	movs	r2, #1
340036ac:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340036ae:	2301      	movs	r3, #1
}
340036b0:	4618      	mov	r0, r3
340036b2:	3710      	adds	r7, #16
340036b4:	46bd      	mov	sp, r7
340036b6:	bd80      	pop	{r7, pc}
340036b8:	56009000 	.word	0x56009000

340036bc <HAL_BSEC_OTP_Program>:
  * @param  Lock      Permanent lock value, this parameter is @ref BSEC_Permanent_Lock
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Program(BSEC_HandleTypeDef *hbsec, uint32_t FuseId, uint32_t FuseData, uint32_t Lock)
{
340036bc:	b580      	push	{r7, lr}
340036be:	b088      	sub	sp, #32
340036c0:	af00      	add	r7, sp, #0
340036c2:	60f8      	str	r0, [r7, #12]
340036c4:	60b9      	str	r1, [r7, #8]
340036c6:	607a      	str	r2, [r7, #4]
340036c8:	603b      	str	r3, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t read_data;
  uint32_t tick_start = HAL_GetTick();
340036ca:	f7ff ff8f 	bl	340035ec <HAL_GetTick>
340036ce:	61f8      	str	r0, [r7, #28]

  /* Check the handle pointer */
  if (hbsec == NULL)
340036d0:	68fb      	ldr	r3, [r7, #12]
340036d2:	2b00      	cmp	r3, #0
340036d4:	d101      	bne.n	340036da <HAL_BSEC_OTP_Program+0x1e>
  {
    return HAL_ERROR;
340036d6:	2301      	movs	r3, #1
340036d8:	e08a      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
340036da:	68fb      	ldr	r3, [r7, #12]
340036dc:	681b      	ldr	r3, [r3, #0]
340036de:	4a46      	ldr	r2, [pc, #280]	@ (340037f8 <HAL_BSEC_OTP_Program+0x13c>)
340036e0:	4293      	cmp	r3, r2
340036e2:	d004      	beq.n	340036ee <HAL_BSEC_OTP_Program+0x32>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340036e4:	68fb      	ldr	r3, [r7, #12]
340036e6:	2201      	movs	r2, #1
340036e8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340036ea:	2301      	movs	r3, #1
340036ec:	e080      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
  }

  /* Check the permanent lock */
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
340036ee:	683b      	ldr	r3, [r7, #0]
340036f0:	2b00      	cmp	r3, #0
340036f2:	d008      	beq.n	34003706 <HAL_BSEC_OTP_Program+0x4a>
340036f4:	683b      	ldr	r3, [r7, #0]
340036f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340036fa:	d004      	beq.n	34003706 <HAL_BSEC_OTP_Program+0x4a>
340036fc:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
34003700:	483e      	ldr	r0, [pc, #248]	@ (340037fc <HAL_BSEC_OTP_Program+0x140>)
34003702:	f7fd ff93 	bl	3400162c <assert_failed>

  /* Get the correct register value */
  if (FuseId < BSEC_NB_FUSES)
34003706:	68bb      	ldr	r3, [r7, #8]
34003708:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
3400370c:	d26a      	bcs.n	340037e4 <HAL_BSEC_OTP_Program+0x128>
  {
    status_reg = FuseId / 32U;
3400370e:	68bb      	ldr	r3, [r7, #8]
34003710:	095b      	lsrs	r3, r3, #5
34003712:	61bb      	str	r3, [r7, #24]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34003714:	68bb      	ldr	r3, [r7, #8]
34003716:	f003 031f 	and.w	r3, r3, #31
3400371a:	2201      	movs	r2, #1
3400371c:	fa02 f303 	lsl.w	r3, r2, r3
34003720:	617b      	str	r3, [r7, #20]

    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
34003722:	68fb      	ldr	r3, [r7, #12]
34003724:	681b      	ldr	r3, [r3, #0]
34003726:	69ba      	ldr	r2, [r7, #24]
34003728:	f502 7200 	add.w	r2, r2, #512	@ 0x200
3400372c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003730:	697b      	ldr	r3, [r7, #20]
34003732:	4013      	ands	r3, r2
34003734:	2b00      	cmp	r3, #0
34003736:	d150      	bne.n	340037da <HAL_BSEC_OTP_Program+0x11e>
    {
      /* Write data in register */
      hbsec->Instance->WDR = FuseData;
34003738:	68fb      	ldr	r3, [r7, #12]
3400373a:	681b      	ldr	r3, [r3, #0]
3400373c:	687a      	ldr	r2, [r7, #4]
3400373e:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08

      /* Perform a program of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34003742:	68fb      	ldr	r3, [r7, #12]
34003744:	681b      	ldr	r3, [r3, #0]
34003746:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
3400374a:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400374e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003752:	68b9      	ldr	r1, [r7, #8]
34003754:	683a      	ldr	r2, [r7, #0]
34003756:	430a      	orrs	r2, r1
34003758:	431a      	orrs	r2, r3
3400375a:	68fb      	ldr	r3, [r7, #12]
3400375c:	681b      	ldr	r3, [r3, #0]
3400375e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34003762:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
                                         (FuseId | BSEC_OTPCR_PROG | Lock));

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003766:	e00c      	b.n	34003782 <HAL_BSEC_OTP_Program+0xc6>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34003768:	f7ff ff40 	bl	340035ec <HAL_GetTick>
3400376c:	4602      	mov	r2, r0
3400376e:	69fb      	ldr	r3, [r7, #28]
34003770:	1ad3      	subs	r3, r2, r3
34003772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34003776:	d904      	bls.n	34003782 <HAL_BSEC_OTP_Program+0xc6>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34003778:	68fb      	ldr	r3, [r7, #12]
3400377a:	220a      	movs	r2, #10
3400377c:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
3400377e:	2301      	movs	r3, #1
34003780:	e036      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003782:	68fb      	ldr	r3, [r7, #12]
34003784:	681b      	ldr	r3, [r3, #0]
34003786:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400378a:	f003 0301 	and.w	r3, r3, #1
3400378e:	2b00      	cmp	r3, #0
34003790:	d1ea      	bne.n	34003768 <HAL_BSEC_OTP_Program+0xac>
        }
      }

      /* Check programming errors */
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
34003792:	68fb      	ldr	r3, [r7, #12]
34003794:	681b      	ldr	r3, [r3, #0]
34003796:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400379a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400379e:	2b00      	cmp	r3, #0
340037a0:	d005      	beq.n	340037ae <HAL_BSEC_OTP_Program+0xf2>
      {
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
340037a2:	68fb      	ldr	r3, [r7, #12]
340037a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340037a8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
340037aa:	2301      	movs	r3, #1
340037ac:	e020      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
      }

      /* Read back programmed data */
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
340037ae:	f107 0310 	add.w	r3, r7, #16
340037b2:	461a      	mov	r2, r3
340037b4:	68b9      	ldr	r1, [r7, #8]
340037b6:	68f8      	ldr	r0, [r7, #12]
340037b8:	f7ff ff48 	bl	3400364c <HAL_BSEC_OTP_Read>
340037bc:	4603      	mov	r3, r0
340037be:	2b00      	cmp	r3, #0
340037c0:	d109      	bne.n	340037d6 <HAL_BSEC_OTP_Program+0x11a>
      {
        /* Verify programmed data */
        if (read_data != FuseData)
340037c2:	693b      	ldr	r3, [r7, #16]
340037c4:	687a      	ldr	r2, [r7, #4]
340037c6:	429a      	cmp	r2, r3
340037c8:	d011      	beq.n	340037ee <HAL_BSEC_OTP_Program+0x132>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
340037ca:	68fb      	ldr	r3, [r7, #12]
340037cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340037d0:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
340037d2:	2301      	movs	r3, #1
340037d4:	e00c      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
        }
      }
      else
      {
        return HAL_ERROR;
340037d6:	2301      	movs	r3, #1
340037d8:	e00a      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
      }
    }
    else
    {
      /* Fuse is sticky programming locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340037da:	68fb      	ldr	r3, [r7, #12]
340037dc:	2204      	movs	r2, #4
340037de:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
340037e0:	2301      	movs	r3, #1
340037e2:	e005      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340037e4:	68fb      	ldr	r3, [r7, #12]
340037e6:	2201      	movs	r2, #1
340037e8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340037ea:	2301      	movs	r3, #1
340037ec:	e000      	b.n	340037f0 <HAL_BSEC_OTP_Program+0x134>
  }

  return HAL_OK;
340037ee:	2300      	movs	r3, #0
}
340037f0:	4618      	mov	r0, r3
340037f2:	3720      	adds	r7, #32
340037f4:	46bd      	mov	sp, r7
340037f6:	bd80      	pop	{r7, pc}
340037f8:	56009000 	.word	0x56009000
340037fc:	3401a8bc 	.word	0x3401a8bc

34003800 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34003800:	b580      	push	{r7, lr}
34003802:	b086      	sub	sp, #24
34003804:	af00      	add	r7, sp, #0
34003806:	6078      	str	r0, [r7, #4]
34003808:	6039      	str	r1, [r7, #0]
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400380a:	f7ff feef 	bl	340035ec <HAL_GetTick>
3400380e:	6178      	str	r0, [r7, #20]

  /* Check the handle pointer */
  if (hbsec == NULL)
34003810:	687b      	ldr	r3, [r7, #4]
34003812:	2b00      	cmp	r3, #0
34003814:	d101      	bne.n	3400381a <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
34003816:	2301      	movs	r3, #1
34003818:	e063      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400381a:	687b      	ldr	r3, [r7, #4]
3400381c:	681b      	ldr	r3, [r3, #0]
3400381e:	4a33      	ldr	r2, [pc, #204]	@ (340038ec <HAL_BSEC_OTP_Reload+0xec>)
34003820:	4293      	cmp	r3, r2
34003822:	d004      	beq.n	3400382e <HAL_BSEC_OTP_Reload+0x2e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34003824:	687b      	ldr	r3, [r7, #4]
34003826:	2201      	movs	r2, #1
34003828:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
3400382a:	2301      	movs	r3, #1
3400382c:	e059      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
  }

  if (FuseId < BSEC_NB_FUSES)
3400382e:	683b      	ldr	r3, [r7, #0]
34003830:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
34003834:	d24f      	bcs.n	340038d6 <HAL_BSEC_OTP_Reload+0xd6>
  {
    status_reg = FuseId / 32U;
34003836:	683b      	ldr	r3, [r7, #0]
34003838:	095b      	lsrs	r3, r3, #5
3400383a:	613b      	str	r3, [r7, #16]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400383c:	683b      	ldr	r3, [r7, #0]
3400383e:	f003 031f 	and.w	r3, r3, #31
34003842:	2201      	movs	r2, #1
34003844:	fa02 f303 	lsl.w	r3, r2, r3
34003848:	60fb      	str	r3, [r7, #12]

    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400384a:	687b      	ldr	r3, [r7, #4]
3400384c:	681b      	ldr	r3, [r3, #0]
3400384e:	693a      	ldr	r2, [r7, #16]
34003850:	f502 7208 	add.w	r2, r2, #544	@ 0x220
34003854:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
34003858:	68fb      	ldr	r3, [r7, #12]
3400385a:	4013      	ands	r3, r2
3400385c:	2b00      	cmp	r3, #0
3400385e:	d135      	bne.n	340038cc <HAL_BSEC_OTP_Reload+0xcc>
    {
      /* Perform a reload of the fuse register */
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
34003860:	687b      	ldr	r3, [r7, #4]
34003862:	681b      	ldr	r3, [r3, #0]
34003864:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
34003868:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400386c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34003870:	687a      	ldr	r2, [r7, #4]
34003872:	6812      	ldr	r2, [r2, #0]
34003874:	6839      	ldr	r1, [r7, #0]
34003876:	430b      	orrs	r3, r1
34003878:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04

      /* Wait the operation is finished */
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400387c:	e00c      	b.n	34003898 <HAL_BSEC_OTP_Reload+0x98>
      {
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400387e:	f7ff feb5 	bl	340035ec <HAL_GetTick>
34003882:	4602      	mov	r2, r0
34003884:	697b      	ldr	r3, [r7, #20]
34003886:	1ad3      	subs	r3, r2, r3
34003888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3400388c:	d904      	bls.n	34003898 <HAL_BSEC_OTP_Reload+0x98>
        {
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400388e:	687b      	ldr	r3, [r7, #4]
34003890:	220a      	movs	r2, #10
34003892:	605a      	str	r2, [r3, #4]
          return HAL_ERROR;
34003894:	2301      	movs	r3, #1
34003896:	e024      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34003898:	687b      	ldr	r3, [r7, #4]
3400389a:	681b      	ldr	r3, [r3, #0]
3400389c:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340038a0:	f003 0301 	and.w	r3, r3, #1
340038a4:	2b00      	cmp	r3, #0
340038a6:	d1ea      	bne.n	3400387e <HAL_BSEC_OTP_Reload+0x7e>
        }
      }

      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
340038a8:	687b      	ldr	r3, [r7, #4]
340038aa:	681b      	ldr	r3, [r3, #0]
340038ac:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340038b0:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
340038b4:	2b00      	cmp	r3, #0
340038b6:	d013      	beq.n	340038e0 <HAL_BSEC_OTP_Reload+0xe0>
      {
        /* An error occurred during reloading, value can't be relied on */
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
340038b8:	687b      	ldr	r3, [r7, #4]
340038ba:	681b      	ldr	r3, [r3, #0]
340038bc:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
340038c0:	f403 028c 	and.w	r2, r3, #4587520	@ 0x460000
340038c4:	687b      	ldr	r3, [r7, #4]
340038c6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
340038c8:	2301      	movs	r3, #1
340038ca:	e00a      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
      }
    }
    else
    {
      /* Shadow register is sticky reload locked */
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
340038cc:	687b      	ldr	r3, [r7, #4]
340038ce:	2204      	movs	r2, #4
340038d0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
340038d2:	2301      	movs	r3, #1
340038d4:	e005      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
    }
  }
  else
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340038d6:	687b      	ldr	r3, [r7, #4]
340038d8:	2201      	movs	r2, #1
340038da:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
340038dc:	2301      	movs	r3, #1
340038de:	e000      	b.n	340038e2 <HAL_BSEC_OTP_Reload+0xe2>
  }

  return HAL_OK;
340038e0:	2300      	movs	r3, #0
}
340038e2:	4618      	mov	r0, r3
340038e4:	3718      	adds	r7, #24
340038e6:	46bd      	mov	sp, r7
340038e8:	bd80      	pop	{r7, pc}
340038ea:	bf00      	nop
340038ec:	56009000 	.word	0x56009000

340038f0 <HAL_CACHEAXI_Init>:
  * @note   In case HAL_CACHEAXI_Init() returns HAL_BUSY because an invalidation
  *         procedure is ongoing, the application should call again HAL_CACHEAXI_Init()
  *         until it returns HAL_OK to have the CACHEAXI enabled
  */
HAL_StatusTypeDef  HAL_CACHEAXI_Init(CACHEAXI_HandleTypeDef *hcacheaxi)
{
340038f0:	b580      	push	{r7, lr}
340038f2:	b084      	sub	sp, #16
340038f4:	af00      	add	r7, sp, #0
340038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the CACHEAXI handle allocation */
  if (hcacheaxi == NULL)
340038f8:	687b      	ldr	r3, [r7, #4]
340038fa:	2b00      	cmp	r3, #0
340038fc:	d101      	bne.n	34003902 <HAL_CACHEAXI_Init+0x12>
  {
    return HAL_ERROR;
340038fe:	2301      	movs	r3, #1
34003900:	e021      	b.n	34003946 <HAL_CACHEAXI_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003902:	687b      	ldr	r3, [r7, #4]
34003904:	681b      	ldr	r3, [r3, #0]
34003906:	4a12      	ldr	r2, [pc, #72]	@ (34003950 <HAL_CACHEAXI_Init+0x60>)
34003908:	4293      	cmp	r3, r2
3400390a:	d008      	beq.n	3400391e <HAL_CACHEAXI_Init+0x2e>
3400390c:	687b      	ldr	r3, [r7, #4]
3400390e:	681b      	ldr	r3, [r3, #0]
34003910:	4a10      	ldr	r2, [pc, #64]	@ (34003954 <HAL_CACHEAXI_Init+0x64>)
34003912:	4293      	cmp	r3, r2
34003914:	d003      	beq.n	3400391e <HAL_CACHEAXI_Init+0x2e>
34003916:	21bc      	movs	r1, #188	@ 0xbc
34003918:	480f      	ldr	r0, [pc, #60]	@ (34003958 <HAL_CACHEAXI_Init+0x68>)
3400391a:	f7fd fe87 	bl	3400162c <assert_failed>

  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400391e:	687b      	ldr	r3, [r7, #4]
34003920:	791b      	ldrb	r3, [r3, #4]
34003922:	b2db      	uxtb	r3, r3
34003924:	2b00      	cmp	r3, #0
34003926:	d102      	bne.n	3400392e <HAL_CACHEAXI_Init+0x3e>

    /* Init the low level hardware */
    hcacheaxi->MspInitCallback(hcacheaxi);
#else
    /* Init the low level hardware */
    HAL_CACHEAXI_MspInit(hcacheaxi);
34003928:	6878      	ldr	r0, [r7, #4]
3400392a:	f7fd fe67 	bl	340015fc <HAL_CACHEAXI_MspInit>
#endif /* USE_HAL_CACHEAXI_REGISTER_CALLBACKS */
  }

  /* Init the error code */
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400392e:	687b      	ldr	r3, [r7, #4]
34003930:	2200      	movs	r2, #0
34003932:	609a      	str	r2, [r3, #8]

  /* Init the CACHEAXI handle state */
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34003934:	687b      	ldr	r3, [r7, #4]
34003936:	2201      	movs	r2, #1
34003938:	711a      	strb	r2, [r3, #4]

  /* Enable the selected CACHEAXI peripheral */
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400393a:	6878      	ldr	r0, [r7, #4]
3400393c:	f000 f80e 	bl	3400395c <HAL_CACHEAXI_Enable>
34003940:	4603      	mov	r3, r0
34003942:	73fb      	strb	r3, [r7, #15]

  return status;
34003944:	7bfb      	ldrb	r3, [r7, #15]
}
34003946:	4618      	mov	r0, r3
34003948:	3710      	adds	r7, #16
3400394a:	46bd      	mov	sp, r7
3400394c:	bd80      	pop	{r7, pc}
3400394e:	bf00      	nop
34003950:	580dfc00 	.word	0x580dfc00
34003954:	480dfc00 	.word	0x480dfc00
34003958:	3401a968 	.word	0x3401a968

3400395c <HAL_CACHEAXI_Enable>:
  * @param  hcacheaxi Pointer to a CACHEAXI_HandleTypeDef structure that contains
  *                   the configuration information for the specified CACHEAXIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CACHEAXI_Enable(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3400395c:	b580      	push	{r7, lr}
3400395e:	b084      	sub	sp, #16
34003960:	af00      	add	r7, sp, #0
34003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34003964:	2300      	movs	r3, #0
34003966:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the cacheaxi handle allocation */
  if (hcacheaxi == NULL)
34003968:	687b      	ldr	r3, [r7, #4]
3400396a:	2b00      	cmp	r3, #0
3400396c:	d101      	bne.n	34003972 <HAL_CACHEAXI_Enable+0x16>
  {
    return HAL_ERROR;
3400396e:	2301      	movs	r3, #1
34003970:	e043      	b.n	340039fa <HAL_CACHEAXI_Enable+0x9e>
  }

  /* Check the parameters */
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34003972:	687b      	ldr	r3, [r7, #4]
34003974:	681b      	ldr	r3, [r3, #0]
34003976:	4a23      	ldr	r2, [pc, #140]	@ (34003a04 <HAL_CACHEAXI_Enable+0xa8>)
34003978:	4293      	cmp	r3, r2
3400397a:	d009      	beq.n	34003990 <HAL_CACHEAXI_Enable+0x34>
3400397c:	687b      	ldr	r3, [r7, #4]
3400397e:	681b      	ldr	r3, [r3, #0]
34003980:	4a21      	ldr	r2, [pc, #132]	@ (34003a08 <HAL_CACHEAXI_Enable+0xac>)
34003982:	4293      	cmp	r3, r2
34003984:	d004      	beq.n	34003990 <HAL_CACHEAXI_Enable+0x34>
34003986:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400398a:	4820      	ldr	r0, [pc, #128]	@ (34003a0c <HAL_CACHEAXI_Enable+0xb0>)
3400398c:	f7fd fe4e 	bl	3400162c <assert_failed>

  /* Check if ongoing full invalidation operation */
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34003990:	687b      	ldr	r3, [r7, #4]
34003992:	681b      	ldr	r3, [r3, #0]
34003994:	685b      	ldr	r3, [r3, #4]
34003996:	f003 0301 	and.w	r3, r3, #1
3400399a:	2b00      	cmp	r3, #0
3400399c:	d01e      	beq.n	340039dc <HAL_CACHEAXI_Enable+0x80>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
3400399e:	f7ff fe25 	bl	340035ec <HAL_GetTick>
340039a2:	60b8      	str	r0, [r7, #8]

    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340039a4:	e013      	b.n	340039ce <HAL_CACHEAXI_Enable+0x72>
    {
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
340039a6:	f7ff fe21 	bl	340035ec <HAL_GetTick>
340039aa:	4602      	mov	r2, r0
340039ac:	68bb      	ldr	r3, [r7, #8]
340039ae:	1ad3      	subs	r3, r2, r3
340039b0:	2b01      	cmp	r3, #1
340039b2:	d90c      	bls.n	340039ce <HAL_CACHEAXI_Enable+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
340039b4:	687b      	ldr	r3, [r7, #4]
340039b6:	681b      	ldr	r3, [r3, #0]
340039b8:	685b      	ldr	r3, [r3, #4]
340039ba:	f003 0301 	and.w	r3, r3, #1
340039be:	2b00      	cmp	r3, #0
340039c0:	d105      	bne.n	340039ce <HAL_CACHEAXI_Enable+0x72>
        {
          /* Update error code */
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
340039c2:	687b      	ldr	r3, [r7, #4]
340039c4:	2210      	movs	r2, #16
340039c6:	609a      	str	r2, [r3, #8]
          /* Return error status */
          status =  HAL_ERROR;
340039c8:	2301      	movs	r3, #1
340039ca:	73fb      	strb	r3, [r7, #15]
          break;
340039cc:	e006      	b.n	340039dc <HAL_CACHEAXI_Enable+0x80>
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
340039ce:	687b      	ldr	r3, [r7, #4]
340039d0:	681b      	ldr	r3, [r3, #0]
340039d2:	685b      	ldr	r3, [r3, #4]
340039d4:	f003 0301 	and.w	r3, r3, #1
340039d8:	2b00      	cmp	r3, #0
340039da:	d1e4      	bne.n	340039a6 <HAL_CACHEAXI_Enable+0x4a>
        }
      }
    }
  }

  if (status == HAL_OK)
340039dc:	7bfb      	ldrb	r3, [r7, #15]
340039de:	2b00      	cmp	r3, #0
340039e0:	d10a      	bne.n	340039f8 <HAL_CACHEAXI_Enable+0x9c>
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340039e2:	687b      	ldr	r3, [r7, #4]
340039e4:	2200      	movs	r2, #0
340039e6:	609a      	str	r2, [r3, #8]
    /* Enable the selected CACHEAXI peripheral */
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
340039e8:	687b      	ldr	r3, [r7, #4]
340039ea:	681b      	ldr	r3, [r3, #0]
340039ec:	681a      	ldr	r2, [r3, #0]
340039ee:	687b      	ldr	r3, [r7, #4]
340039f0:	681b      	ldr	r3, [r3, #0]
340039f2:	f042 0201 	orr.w	r2, r2, #1
340039f6:	601a      	str	r2, [r3, #0]
  }

  return status;
340039f8:	7bfb      	ldrb	r3, [r7, #15]
}
340039fa:	4618      	mov	r0, r3
340039fc:	3710      	adds	r7, #16
340039fe:	46bd      	mov	sp, r7
34003a00:	bd80      	pop	{r7, pc}
34003a02:	bf00      	nop
34003a04:	580dfc00 	.word	0x580dfc00
34003a08:	480dfc00 	.word	0x480dfc00
34003a0c:	3401a968 	.word	0x3401a968

34003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34003a10:	b480      	push	{r7}
34003a12:	b085      	sub	sp, #20
34003a14:	af00      	add	r7, sp, #0
34003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34003a18:	687b      	ldr	r3, [r7, #4]
34003a1a:	f003 0307 	and.w	r3, r3, #7
34003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34003a20:	4b0c      	ldr	r3, [pc, #48]	@ (34003a54 <__NVIC_SetPriorityGrouping+0x44>)
34003a22:	68db      	ldr	r3, [r3, #12]
34003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34003a26:	68ba      	ldr	r2, [r7, #8]
34003a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34003a2c:	4013      	ands	r3, r2
34003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34003a30:	68fb      	ldr	r3, [r7, #12]
34003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34003a34:	68bb      	ldr	r3, [r7, #8]
34003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34003a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34003a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34003a42:	4a04      	ldr	r2, [pc, #16]	@ (34003a54 <__NVIC_SetPriorityGrouping+0x44>)
34003a44:	68bb      	ldr	r3, [r7, #8]
34003a46:	60d3      	str	r3, [r2, #12]
}
34003a48:	bf00      	nop
34003a4a:	3714      	adds	r7, #20
34003a4c:	46bd      	mov	sp, r7
34003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003a52:	4770      	bx	lr
34003a54:	e000ed00 	.word	0xe000ed00

34003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34003a58:	b480      	push	{r7}
34003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34003a5c:	4b04      	ldr	r3, [pc, #16]	@ (34003a70 <__NVIC_GetPriorityGrouping+0x18>)
34003a5e:	68db      	ldr	r3, [r3, #12]
34003a60:	0a1b      	lsrs	r3, r3, #8
34003a62:	f003 0307 	and.w	r3, r3, #7
}
34003a66:	4618      	mov	r0, r3
34003a68:	46bd      	mov	sp, r7
34003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34003a6e:	4770      	bx	lr
34003a70:	e000ed00 	.word	0xe000ed00

34003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34003a74:	b480      	push	{r7}
34003a76:	b083      	sub	sp, #12
34003a78:	af00      	add	r7, sp, #0
34003a7a:	4603      	mov	r3, r0
34003a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34003a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003a82:	2b00      	cmp	r3, #0
34003a84:	db0b      	blt.n	34003a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34003a86:	88fb      	ldrh	r3, [r7, #6]
34003a88:	f003 021f 	and.w	r2, r3, #31
34003a8c:	4907      	ldr	r1, [pc, #28]	@ (34003aac <__NVIC_EnableIRQ+0x38>)
34003a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003a92:	095b      	lsrs	r3, r3, #5
34003a94:	2001      	movs	r0, #1
34003a96:	fa00 f202 	lsl.w	r2, r0, r2
34003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34003a9e:	bf00      	nop
34003aa0:	370c      	adds	r7, #12
34003aa2:	46bd      	mov	sp, r7
34003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
34003aa8:	4770      	bx	lr
34003aaa:	bf00      	nop
34003aac:	e000e100 	.word	0xe000e100

34003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34003ab0:	b480      	push	{r7}
34003ab2:	b083      	sub	sp, #12
34003ab4:	af00      	add	r7, sp, #0
34003ab6:	4603      	mov	r3, r0
34003ab8:	6039      	str	r1, [r7, #0]
34003aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34003abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003ac0:	2b00      	cmp	r3, #0
34003ac2:	db0a      	blt.n	34003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34003ac4:	683b      	ldr	r3, [r7, #0]
34003ac6:	b2da      	uxtb	r2, r3
34003ac8:	490c      	ldr	r1, [pc, #48]	@ (34003afc <__NVIC_SetPriority+0x4c>)
34003aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003ace:	0112      	lsls	r2, r2, #4
34003ad0:	b2d2      	uxtb	r2, r2
34003ad2:	440b      	add	r3, r1
34003ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34003ad8:	e00a      	b.n	34003af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34003ada:	683b      	ldr	r3, [r7, #0]
34003adc:	b2da      	uxtb	r2, r3
34003ade:	4908      	ldr	r1, [pc, #32]	@ (34003b00 <__NVIC_SetPriority+0x50>)
34003ae0:	88fb      	ldrh	r3, [r7, #6]
34003ae2:	f003 030f 	and.w	r3, r3, #15
34003ae6:	3b04      	subs	r3, #4
34003ae8:	0112      	lsls	r2, r2, #4
34003aea:	b2d2      	uxtb	r2, r2
34003aec:	440b      	add	r3, r1
34003aee:	761a      	strb	r2, [r3, #24]
}
34003af0:	bf00      	nop
34003af2:	370c      	adds	r7, #12
34003af4:	46bd      	mov	sp, r7
34003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
34003afa:	4770      	bx	lr
34003afc:	e000e100 	.word	0xe000e100
34003b00:	e000ed00 	.word	0xe000ed00

34003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34003b04:	b480      	push	{r7}
34003b06:	b089      	sub	sp, #36	@ 0x24
34003b08:	af00      	add	r7, sp, #0
34003b0a:	60f8      	str	r0, [r7, #12]
34003b0c:	60b9      	str	r1, [r7, #8]
34003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34003b10:	68fb      	ldr	r3, [r7, #12]
34003b12:	f003 0307 	and.w	r3, r3, #7
34003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34003b18:	69fb      	ldr	r3, [r7, #28]
34003b1a:	f1c3 0307 	rsb	r3, r3, #7
34003b1e:	2b04      	cmp	r3, #4
34003b20:	bf28      	it	cs
34003b22:	2304      	movcs	r3, #4
34003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34003b26:	69fb      	ldr	r3, [r7, #28]
34003b28:	3304      	adds	r3, #4
34003b2a:	2b06      	cmp	r3, #6
34003b2c:	d902      	bls.n	34003b34 <NVIC_EncodePriority+0x30>
34003b2e:	69fb      	ldr	r3, [r7, #28]
34003b30:	3b03      	subs	r3, #3
34003b32:	e000      	b.n	34003b36 <NVIC_EncodePriority+0x32>
34003b34:	2300      	movs	r3, #0
34003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34003b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34003b3c:	69bb      	ldr	r3, [r7, #24]
34003b3e:	fa02 f303 	lsl.w	r3, r2, r3
34003b42:	43da      	mvns	r2, r3
34003b44:	68bb      	ldr	r3, [r7, #8]
34003b46:	401a      	ands	r2, r3
34003b48:	697b      	ldr	r3, [r7, #20]
34003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34003b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34003b50:	697b      	ldr	r3, [r7, #20]
34003b52:	fa01 f303 	lsl.w	r3, r1, r3
34003b56:	43d9      	mvns	r1, r3
34003b58:	687b      	ldr	r3, [r7, #4]
34003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34003b5c:	4313      	orrs	r3, r2
         );
}
34003b5e:	4618      	mov	r0, r3
34003b60:	3724      	adds	r7, #36	@ 0x24
34003b62:	46bd      	mov	sp, r7
34003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
34003b68:	4770      	bx	lr
	...

34003b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34003b6c:	b580      	push	{r7, lr}
34003b6e:	b082      	sub	sp, #8
34003b70:	af00      	add	r7, sp, #0
34003b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34003b74:	687b      	ldr	r3, [r7, #4]
34003b76:	3b01      	subs	r3, #1
34003b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34003b7c:	d301      	bcc.n	34003b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34003b7e:	2301      	movs	r3, #1
34003b80:	e00f      	b.n	34003ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34003b82:	4a0a      	ldr	r2, [pc, #40]	@ (34003bac <SysTick_Config+0x40>)
34003b84:	687b      	ldr	r3, [r7, #4]
34003b86:	3b01      	subs	r3, #1
34003b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34003b8a:	210f      	movs	r1, #15
34003b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34003b90:	f7ff ff8e 	bl	34003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34003b94:	4b05      	ldr	r3, [pc, #20]	@ (34003bac <SysTick_Config+0x40>)
34003b96:	2200      	movs	r2, #0
34003b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34003b9a:	4b04      	ldr	r3, [pc, #16]	@ (34003bac <SysTick_Config+0x40>)
34003b9c:	2207      	movs	r2, #7
34003b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34003ba0:	2300      	movs	r3, #0
}
34003ba2:	4618      	mov	r0, r3
34003ba4:	3708      	adds	r7, #8
34003ba6:	46bd      	mov	sp, r7
34003ba8:	bd80      	pop	{r7, pc}
34003baa:	bf00      	nop
34003bac:	e000e010 	.word	0xe000e010

34003bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34003bb0:	b580      	push	{r7, lr}
34003bb2:	b082      	sub	sp, #8
34003bb4:	af00      	add	r7, sp, #0
34003bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34003bb8:	687b      	ldr	r3, [r7, #4]
34003bba:	2b07      	cmp	r3, #7
34003bbc:	d00f      	beq.n	34003bde <HAL_NVIC_SetPriorityGrouping+0x2e>
34003bbe:	687b      	ldr	r3, [r7, #4]
34003bc0:	2b06      	cmp	r3, #6
34003bc2:	d00c      	beq.n	34003bde <HAL_NVIC_SetPriorityGrouping+0x2e>
34003bc4:	687b      	ldr	r3, [r7, #4]
34003bc6:	2b05      	cmp	r3, #5
34003bc8:	d009      	beq.n	34003bde <HAL_NVIC_SetPriorityGrouping+0x2e>
34003bca:	687b      	ldr	r3, [r7, #4]
34003bcc:	2b04      	cmp	r3, #4
34003bce:	d006      	beq.n	34003bde <HAL_NVIC_SetPriorityGrouping+0x2e>
34003bd0:	687b      	ldr	r3, [r7, #4]
34003bd2:	2b03      	cmp	r3, #3
34003bd4:	d003      	beq.n	34003bde <HAL_NVIC_SetPriorityGrouping+0x2e>
34003bd6:	21e6      	movs	r1, #230	@ 0xe6
34003bd8:	4804      	ldr	r0, [pc, #16]	@ (34003bec <HAL_NVIC_SetPriorityGrouping+0x3c>)
34003bda:	f7fd fd27 	bl	3400162c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
34003bde:	6878      	ldr	r0, [r7, #4]
34003be0:	f7ff ff16 	bl	34003a10 <__NVIC_SetPriorityGrouping>
}
34003be4:	bf00      	nop
34003be6:	3708      	adds	r7, #8
34003be8:	46bd      	mov	sp, r7
34003bea:	bd80      	pop	{r7, pc}
34003bec:	3401aa18 	.word	0x3401aa18

34003bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34003bf0:	b580      	push	{r7, lr}
34003bf2:	b086      	sub	sp, #24
34003bf4:	af00      	add	r7, sp, #0
34003bf6:	4603      	mov	r3, r0
34003bf8:	60b9      	str	r1, [r7, #8]
34003bfa:	607a      	str	r2, [r7, #4]
34003bfc:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34003bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34003c02:	f113 0f0c 	cmn.w	r3, #12
34003c06:	db04      	blt.n	34003c12 <HAL_NVIC_SetPriority+0x22>
34003c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34003c0c:	f113 0f04 	cmn.w	r3, #4
34003c10:	d103      	bne.n	34003c1a <HAL_NVIC_SetPriority+0x2a>
34003c12:	21ff      	movs	r1, #255	@ 0xff
34003c14:	4822      	ldr	r0, [pc, #136]	@ (34003ca0 <HAL_NVIC_SetPriority+0xb0>)
34003c16:	f7fd fd09 	bl	3400162c <assert_failed>

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34003c1a:	f7ff ff1d 	bl	34003a58 <__NVIC_GetPriorityGrouping>
34003c1e:	4603      	mov	r3, r0
34003c20:	f003 0307 	and.w	r3, r3, #7
34003c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34003c26:	697b      	ldr	r3, [r7, #20]
34003c28:	2b02      	cmp	r3, #2
34003c2a:	d806      	bhi.n	34003c3a <HAL_NVIC_SetPriority+0x4a>
34003c2c:	687b      	ldr	r3, [r7, #4]
34003c2e:	2b00      	cmp	r3, #0
34003c30:	bf0c      	ite	eq
34003c32:	2301      	moveq	r3, #1
34003c34:	2300      	movne	r3, #0
34003c36:	b2db      	uxtb	r3, r3
34003c38:	e00a      	b.n	34003c50 <HAL_NVIC_SetPriority+0x60>
34003c3a:	697b      	ldr	r3, [r7, #20]
34003c3c:	3b03      	subs	r3, #3
34003c3e:	2201      	movs	r2, #1
34003c40:	fa02 f303 	lsl.w	r3, r2, r3
34003c44:	687a      	ldr	r2, [r7, #4]
34003c46:	429a      	cmp	r2, r3
34003c48:	bf34      	ite	cc
34003c4a:	2301      	movcc	r3, #1
34003c4c:	2300      	movcs	r3, #0
34003c4e:	b2db      	uxtb	r3, r3
34003c50:	2b00      	cmp	r3, #0
34003c52:	d104      	bne.n	34003c5e <HAL_NVIC_SetPriority+0x6e>
34003c54:	f44f 7181 	mov.w	r1, #258	@ 0x102
34003c58:	4811      	ldr	r0, [pc, #68]	@ (34003ca0 <HAL_NVIC_SetPriority+0xb0>)
34003c5a:	f7fd fce7 	bl	3400162c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34003c5e:	68bb      	ldr	r3, [r7, #8]
34003c60:	2b0f      	cmp	r3, #15
34003c62:	d808      	bhi.n	34003c76 <HAL_NVIC_SetPriority+0x86>
34003c64:	697b      	ldr	r3, [r7, #20]
34003c66:	f1c3 0307 	rsb	r3, r3, #7
34003c6a:	2201      	movs	r2, #1
34003c6c:	fa02 f303 	lsl.w	r3, r2, r3
34003c70:	68ba      	ldr	r2, [r7, #8]
34003c72:	429a      	cmp	r2, r3
34003c74:	d304      	bcc.n	34003c80 <HAL_NVIC_SetPriority+0x90>
34003c76:	f240 1103 	movw	r1, #259	@ 0x103
34003c7a:	4809      	ldr	r0, [pc, #36]	@ (34003ca0 <HAL_NVIC_SetPriority+0xb0>)
34003c7c:	f7fd fcd6 	bl	3400162c <assert_failed>

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34003c80:	687a      	ldr	r2, [r7, #4]
34003c82:	68b9      	ldr	r1, [r7, #8]
34003c84:	6978      	ldr	r0, [r7, #20]
34003c86:	f7ff ff3d 	bl	34003b04 <NVIC_EncodePriority>
34003c8a:	4602      	mov	r2, r0
34003c8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34003c90:	4611      	mov	r1, r2
34003c92:	4618      	mov	r0, r3
34003c94:	f7ff ff0c 	bl	34003ab0 <__NVIC_SetPriority>
}
34003c98:	bf00      	nop
34003c9a:	3718      	adds	r7, #24
34003c9c:	46bd      	mov	sp, r7
34003c9e:	bd80      	pop	{r7, pc}
34003ca0:	3401aa18 	.word	0x3401aa18

34003ca4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34003ca4:	b580      	push	{r7, lr}
34003ca6:	b082      	sub	sp, #8
34003ca8:	af00      	add	r7, sp, #0
34003caa:	4603      	mov	r3, r0
34003cac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34003cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003cb2:	2b00      	cmp	r3, #0
34003cb4:	da04      	bge.n	34003cc0 <HAL_NVIC_EnableIRQ+0x1c>
34003cb6:	f240 1115 	movw	r1, #277	@ 0x115
34003cba:	4806      	ldr	r0, [pc, #24]	@ (34003cd4 <HAL_NVIC_EnableIRQ+0x30>)
34003cbc:	f7fd fcb6 	bl	3400162c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
34003cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34003cc4:	4618      	mov	r0, r3
34003cc6:	f7ff fed5 	bl	34003a74 <__NVIC_EnableIRQ>
}
34003cca:	bf00      	nop
34003ccc:	3708      	adds	r7, #8
34003cce:	46bd      	mov	sp, r7
34003cd0:	bd80      	pop	{r7, pc}
34003cd2:	bf00      	nop
34003cd4:	3401aa18 	.word	0x3401aa18

34003cd8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34003cd8:	b580      	push	{r7, lr}
34003cda:	b082      	sub	sp, #8
34003cdc:	af00      	add	r7, sp, #0
34003cde:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34003ce0:	6878      	ldr	r0, [r7, #4]
34003ce2:	f7ff ff43 	bl	34003b6c <SysTick_Config>
34003ce6:	4603      	mov	r3, r0
}
34003ce8:	4618      	mov	r0, r3
34003cea:	3708      	adds	r7, #8
34003cec:	46bd      	mov	sp, r7
34003cee:	bd80      	pop	{r7, pc}

34003cf0 <HAL_DCMIPP_IRQHandler>:
  * @brief  Handles DCMIPP interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
34003cf0:	b580      	push	{r7, lr}
34003cf2:	b084      	sub	sp, #16
34003cf4:	af00      	add	r7, sp, #0
34003cf6:	6078      	str	r0, [r7, #4]
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34003cf8:	687b      	ldr	r3, [r7, #4]
34003cfa:	681b      	ldr	r3, [r3, #0]
34003cfc:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
34003d00:	60fb      	str	r3, [r7, #12]
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34003d02:	687b      	ldr	r3, [r7, #4]
34003d04:	681b      	ldr	r3, [r3, #0]
34003d06:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
34003d0a:	60bb      	str	r3, [r7, #8]

  /* ========================= PIPE0 INTERRUPTS ==================== */
  /* Limit error on the PIPE0 ********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34003d0c:	68fb      	ldr	r3, [r7, #12]
34003d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34003d12:	2b00      	cmp	r3, #0
34003d14:	d01e      	beq.n	34003d54 <HAL_DCMIPP_IRQHandler+0x64>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
34003d16:	68bb      	ldr	r3, [r7, #8]
34003d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34003d1c:	2b00      	cmp	r3, #0
34003d1e:	d019      	beq.n	34003d54 <HAL_DCMIPP_IRQHandler+0x64>
    {
      /* Disable Limit error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34003d20:	687b      	ldr	r3, [r7, #4]
34003d22:	681b      	ldr	r3, [r3, #0]
34003d24:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003d28:	687b      	ldr	r3, [r7, #4]
34003d2a:	681b      	ldr	r3, [r3, #0]
34003d2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34003d30:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
34003d34:	687b      	ldr	r3, [r7, #4]
34003d36:	689b      	ldr	r3, [r3, #8]
34003d38:	f043 0204 	orr.w	r2, r3, #4
34003d3c:	687b      	ldr	r3, [r7, #4]
34003d3e:	609a      	str	r2, [r3, #8]

      /* Clear the Limit error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34003d40:	687b      	ldr	r3, [r7, #4]
34003d42:	681b      	ldr	r3, [r3, #0]
34003d44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34003d48:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LIMIT Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34003d4c:	2100      	movs	r1, #0
34003d4e:	6878      	ldr	r0, [r7, #4]
34003d50:	f000 fe67 	bl	34004a22 <HAL_DCMIPP_PIPE_LimitEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34003d54:	68fb      	ldr	r3, [r7, #12]
34003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34003d5a:	2b00      	cmp	r3, #0
34003d5c:	d00e      	beq.n	34003d7c <HAL_DCMIPP_IRQHandler+0x8c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34003d5e:	68bb      	ldr	r3, [r7, #8]
34003d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34003d64:	2b00      	cmp	r3, #0
34003d66:	d009      	beq.n	34003d7c <HAL_DCMIPP_IRQHandler+0x8c>
    {
      /* Clear the VSYNC flag for pipe0 */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34003d68:	687b      	ldr	r3, [r7, #4]
34003d6a:	681b      	ldr	r3, [r3, #0]
34003d6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34003d70:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34003d74:	2100      	movs	r1, #0
34003d76:	6878      	ldr	r0, [r7, #4]
34003d78:	f013 fbea 	bl	34017550 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* FRAME interrupt management ****************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34003d7c:	68fb      	ldr	r3, [r7, #12]
34003d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003d82:	2b00      	cmp	r3, #0
34003d84:	d023      	beq.n	34003dce <HAL_DCMIPP_IRQHandler+0xde>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34003d86:	68bb      	ldr	r3, [r7, #8]
34003d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003d8c:	2b00      	cmp	r3, #0
34003d8e:	d01e      	beq.n	34003dce <HAL_DCMIPP_IRQHandler+0xde>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003d90:	687b      	ldr	r3, [r7, #4]
34003d92:	681b      	ldr	r3, [r3, #0]
34003d94:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34003d98:	f003 0304 	and.w	r3, r3, #4
34003d9c:	2b04      	cmp	r3, #4
34003d9e:	d10c      	bne.n	34003dba <HAL_DCMIPP_IRQHandler+0xca>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34003da0:	687b      	ldr	r3, [r7, #4]
34003da2:	681b      	ldr	r3, [r3, #0]
34003da4:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003da8:	687b      	ldr	r3, [r7, #4]
34003daa:	681b      	ldr	r3, [r3, #0]
34003dac:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
34003db0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34003db4:	687b      	ldr	r3, [r7, #4]
34003db6:	2201      	movs	r2, #1
34003db8:	715a      	strb	r2, [r3, #5]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34003dba:	687b      	ldr	r3, [r7, #4]
34003dbc:	681b      	ldr	r3, [r3, #0]
34003dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
34003dc2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34003dc6:	2100      	movs	r1, #0
34003dc8:	6878      	ldr	r0, [r7, #4]
34003dca:	f013 fbdb 	bl	34017584 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* LINE interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34003dce:	68fb      	ldr	r3, [r7, #12]
34003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34003dd4:	2b00      	cmp	r3, #0
34003dd6:	d00e      	beq.n	34003df6 <HAL_DCMIPP_IRQHandler+0x106>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34003dd8:	68bb      	ldr	r3, [r7, #8]
34003dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34003dde:	2b00      	cmp	r3, #0
34003de0:	d009      	beq.n	34003df6 <HAL_DCMIPP_IRQHandler+0x106>
    {
      /* Clear the LINE flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34003de2:	687b      	ldr	r3, [r7, #4]
34003de4:	681b      	ldr	r3, [r3, #0]
34003de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
34003dea:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* LINE Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34003dee:	2100      	movs	r1, #0
34003df0:	6878      	ldr	r0, [r7, #4]
34003df2:	f000 fe0b 	bl	34004a0c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error interrupt for Pipe0 ***************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
34003df6:	68fb      	ldr	r3, [r7, #12]
34003df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34003dfc:	2b00      	cmp	r3, #0
34003dfe:	d021      	beq.n	34003e44 <HAL_DCMIPP_IRQHandler+0x154>
  {
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34003e00:	68bb      	ldr	r3, [r7, #8]
34003e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34003e06:	2b00      	cmp	r3, #0
34003e08:	d01c      	beq.n	34003e44 <HAL_DCMIPP_IRQHandler+0x154>
    {
      /* Disable Overrun Error Interrupt for pipe0 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34003e0a:	687b      	ldr	r3, [r7, #4]
34003e0c:	681b      	ldr	r3, [r3, #0]
34003e0e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003e12:	687b      	ldr	r3, [r7, #4]
34003e14:	681b      	ldr	r3, [r3, #0]
34003e16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34003e1a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34003e1e:	687b      	ldr	r3, [r7, #4]
34003e20:	689b      	ldr	r3, [r3, #8]
34003e22:	f043 0208 	orr.w	r2, r3, #8
34003e26:	687b      	ldr	r3, [r7, #4]
34003e28:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34003e2a:	687b      	ldr	r3, [r7, #4]
34003e2c:	681b      	ldr	r3, [r3, #0]
34003e2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34003e32:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP Pipe state */
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34003e36:	687b      	ldr	r3, [r7, #4]
34003e38:	2204      	movs	r2, #4
34003e3a:	715a      	strb	r2, [r3, #5]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34003e3c:	2100      	movs	r1, #0
34003e3e:	6878      	ldr	r0, [r7, #4]
34003e40:	f000 fdfa 	bl	34004a38 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE1 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34003e44:	68fb      	ldr	r3, [r7, #12]
34003e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003e4a:	2b00      	cmp	r3, #0
34003e4c:	d00e      	beq.n	34003e6c <HAL_DCMIPP_IRQHandler+0x17c>
  {
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34003e4e:	68bb      	ldr	r3, [r7, #8]
34003e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003e54:	2b00      	cmp	r3, #0
34003e56:	d009      	beq.n	34003e6c <HAL_DCMIPP_IRQHandler+0x17c>
    {
      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34003e58:	687b      	ldr	r3, [r7, #4]
34003e5a:	681b      	ldr	r3, [r3, #0]
34003e5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003e60:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34003e64:	2101      	movs	r1, #1
34003e66:	6878      	ldr	r0, [r7, #4]
34003e68:	f000 fdd0 	bl	34004a0c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34003e6c:	68fb      	ldr	r3, [r7, #12]
34003e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34003e72:	2b00      	cmp	r3, #0
34003e74:	d00e      	beq.n	34003e94 <HAL_DCMIPP_IRQHandler+0x1a4>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34003e76:	68bb      	ldr	r3, [r7, #8]
34003e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34003e7c:	2b00      	cmp	r3, #0
34003e7e:	d009      	beq.n	34003e94 <HAL_DCMIPP_IRQHandler+0x1a4>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34003e80:	687b      	ldr	r3, [r7, #4]
34003e82:	681b      	ldr	r3, [r3, #0]
34003e84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34003e88:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34003e8c:	2101      	movs	r1, #1
34003e8e:	6878      	ldr	r0, [r7, #4]
34003e90:	f013 fb5e 	bl	34017550 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
34003e94:	68fb      	ldr	r3, [r7, #12]
34003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34003e9a:	2b00      	cmp	r3, #0
34003e9c:	d023      	beq.n	34003ee6 <HAL_DCMIPP_IRQHandler+0x1f6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34003e9e:	68bb      	ldr	r3, [r7, #8]
34003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34003ea4:	2b00      	cmp	r3, #0
34003ea6:	d01e      	beq.n	34003ee6 <HAL_DCMIPP_IRQHandler+0x1f6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003ea8:	687b      	ldr	r3, [r7, #4]
34003eaa:	681b      	ldr	r3, [r3, #0]
34003eac:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
34003eb0:	f003 0304 	and.w	r3, r3, #4
34003eb4:	2b04      	cmp	r3, #4
34003eb6:	d10c      	bne.n	34003ed2 <HAL_DCMIPP_IRQHandler+0x1e2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
34003eb8:	687b      	ldr	r3, [r7, #4]
34003eba:	681b      	ldr	r3, [r3, #0]
34003ebc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003ec0:	687b      	ldr	r3, [r7, #4]
34003ec2:	681b      	ldr	r3, [r3, #0]
34003ec4:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34003ec8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
34003ecc:	687b      	ldr	r3, [r7, #4]
34003ece:	2201      	movs	r2, #1
34003ed0:	719a      	strb	r2, [r3, #6]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34003ed2:	687b      	ldr	r3, [r7, #4]
34003ed4:	681b      	ldr	r3, [r3, #0]
34003ed6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34003eda:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34003ede:	2101      	movs	r1, #1
34003ee0:	6878      	ldr	r0, [r7, #4]
34003ee2:	f013 fb4f 	bl	34017584 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Overrun error on the PIPE1 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
34003ee6:	68fb      	ldr	r3, [r7, #12]
34003ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34003eec:	2b00      	cmp	r3, #0
34003eee:	d021      	beq.n	34003f34 <HAL_DCMIPP_IRQHandler+0x244>
  {
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34003ef0:	68bb      	ldr	r3, [r7, #8]
34003ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34003ef6:	2b00      	cmp	r3, #0
34003ef8:	d01c      	beq.n	34003f34 <HAL_DCMIPP_IRQHandler+0x244>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34003efa:	687b      	ldr	r3, [r7, #4]
34003efc:	681b      	ldr	r3, [r3, #0]
34003efe:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003f02:	687b      	ldr	r3, [r7, #4]
34003f04:	681b      	ldr	r3, [r3, #0]
34003f06:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34003f0a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34003f0e:	687b      	ldr	r3, [r7, #4]
34003f10:	689b      	ldr	r3, [r3, #8]
34003f12:	f043 0210 	orr.w	r2, r3, #16
34003f16:	687b      	ldr	r3, [r7, #4]
34003f18:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34003f1a:	687b      	ldr	r3, [r7, #4]
34003f1c:	681b      	ldr	r3, [r3, #0]
34003f1e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34003f22:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34003f26:	687b      	ldr	r3, [r7, #4]
34003f28:	2204      	movs	r2, #4
34003f2a:	719a      	strb	r2, [r3, #6]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34003f2c:	2101      	movs	r1, #1
34003f2e:	6878      	ldr	r0, [r7, #4]
34003f30:	f000 fd82 	bl	34004a38 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* ========================= PIPE2 INTERRUPTS ==================== */
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34003f34:	68fb      	ldr	r3, [r7, #12]
34003f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34003f3a:	2b00      	cmp	r3, #0
34003f3c:	d00e      	beq.n	34003f5c <HAL_DCMIPP_IRQHandler+0x26c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34003f3e:	68bb      	ldr	r3, [r7, #8]
34003f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34003f44:	2b00      	cmp	r3, #0
34003f46:	d009      	beq.n	34003f5c <HAL_DCMIPP_IRQHandler+0x26c>
    {
      /* Clear the End of Line flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34003f48:	687b      	ldr	r3, [r7, #4]
34003f4a:	681b      	ldr	r3, [r3, #0]
34003f4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34003f50:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34003f54:	2102      	movs	r1, #2
34003f56:	6878      	ldr	r0, [r7, #4]
34003f58:	f000 fd58 	bl	34004a0c <HAL_DCMIPP_PIPE_LineEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* VSYNC interrupt management **********************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34003f5c:	68fb      	ldr	r3, [r7, #12]
34003f5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34003f62:	2b00      	cmp	r3, #0
34003f64:	d00e      	beq.n	34003f84 <HAL_DCMIPP_IRQHandler+0x294>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34003f66:	68bb      	ldr	r3, [r7, #8]
34003f68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34003f6c:	2b00      	cmp	r3, #0
34003f6e:	d009      	beq.n	34003f84 <HAL_DCMIPP_IRQHandler+0x294>
    {
      /* Clear the VSYNC flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34003f70:	687b      	ldr	r3, [r7, #4]
34003f72:	681b      	ldr	r3, [r3, #0]
34003f74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34003f78:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* VSYNC Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34003f7c:	2102      	movs	r1, #2
34003f7e:	6878      	ldr	r0, [r7, #4]
34003f80:	f013 fae6 	bl	34017550 <HAL_DCMIPP_PIPE_VsyncEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34003f84:	68fb      	ldr	r3, [r7, #12]
34003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34003f8a:	2b00      	cmp	r3, #0
34003f8c:	d023      	beq.n	34003fd6 <HAL_DCMIPP_IRQHandler+0x2e6>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34003f8e:	68bb      	ldr	r3, [r7, #8]
34003f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
34003f94:	2b00      	cmp	r3, #0
34003f96:	d01e      	beq.n	34003fd6 <HAL_DCMIPP_IRQHandler+0x2e6>
    {
      /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34003f98:	687b      	ldr	r3, [r7, #4]
34003f9a:	681b      	ldr	r3, [r3, #0]
34003f9c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
34003fa0:	f003 0304 	and.w	r3, r3, #4
34003fa4:	2b04      	cmp	r3, #4
34003fa6:	d10c      	bne.n	34003fc2 <HAL_DCMIPP_IRQHandler+0x2d2>
      {
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34003fa8:	687b      	ldr	r3, [r7, #4]
34003faa:	681b      	ldr	r3, [r3, #0]
34003fac:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003fb0:	687b      	ldr	r3, [r7, #4]
34003fb2:	681b      	ldr	r3, [r3, #0]
34003fb4:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34003fb8:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

        /* Update Pipe State */
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34003fbc:	687b      	ldr	r3, [r7, #4]
34003fbe:	2201      	movs	r2, #1
34003fc0:	71da      	strb	r2, [r3, #7]
      }

      /* Clear the End of Frame flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34003fc2:	687b      	ldr	r3, [r7, #4]
34003fc4:	681b      	ldr	r3, [r3, #0]
34003fc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34003fca:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Frame Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34003fce:	2102      	movs	r1, #2
34003fd0:	6878      	ldr	r0, [r7, #4]
34003fd2:	f013 fad7 	bl	34017584 <HAL_DCMIPP_PIPE_FrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
  /* Overrun error on the PIPE2 **************************************/
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34003fd6:	68fb      	ldr	r3, [r7, #12]
34003fd8:	2b00      	cmp	r3, #0
34003fda:	da1f      	bge.n	3400401c <HAL_DCMIPP_IRQHandler+0x32c>
  {
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34003fdc:	68bb      	ldr	r3, [r7, #8]
34003fde:	2b00      	cmp	r3, #0
34003fe0:	da1c      	bge.n	3400401c <HAL_DCMIPP_IRQHandler+0x32c>
    {
      /* Disable Overrun Error Interrupt for pipe1 */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34003fe2:	687b      	ldr	r3, [r7, #4]
34003fe4:	681b      	ldr	r3, [r3, #0]
34003fe6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34003fea:	687b      	ldr	r3, [r7, #4]
34003fec:	681b      	ldr	r3, [r3, #0]
34003fee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34003ff2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34003ff6:	687b      	ldr	r3, [r7, #4]
34003ff8:	689b      	ldr	r3, [r3, #8]
34003ffa:	f043 0220 	orr.w	r2, r3, #32
34003ffe:	687b      	ldr	r3, [r7, #4]
34004000:	609a      	str	r2, [r3, #8]

      /* Clear the overrun error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34004002:	687b      	ldr	r3, [r7, #4]
34004004:	681b      	ldr	r3, [r3, #0]
34004006:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3400400a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400400e:	687b      	ldr	r3, [r7, #4]
34004010:	2204      	movs	r2, #4
34004012:	71da      	strb	r2, [r3, #7]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
#else
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34004014:	2102      	movs	r1, #2
34004016:	6878      	ldr	r0, [r7, #4]
34004018:	f000 fd0e 	bl	34004a38 <HAL_DCMIPP_PIPE_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization Error Interrupt on the parallel interface  **************/
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
3400401c:	68fb      	ldr	r3, [r7, #12]
3400401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34004022:	2b00      	cmp	r3, #0
34004024:	d01f      	beq.n	34004066 <HAL_DCMIPP_IRQHandler+0x376>
  {
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
34004026:	68bb      	ldr	r3, [r7, #8]
34004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400402c:	2b00      	cmp	r3, #0
3400402e:	d01a      	beq.n	34004066 <HAL_DCMIPP_IRQHandler+0x376>
    {
      /* Disable Synchronization error interrupt on parallel interface */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34004030:	687b      	ldr	r3, [r7, #4]
34004032:	681b      	ldr	r3, [r3, #0]
34004034:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004038:	687b      	ldr	r3, [r7, #4]
3400403a:	681b      	ldr	r3, [r3, #0]
3400403c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
34004040:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34004044:	687b      	ldr	r3, [r7, #4]
34004046:	689b      	ldr	r3, [r3, #8]
34004048:	f043 0202 	orr.w	r2, r3, #2
3400404c:	687b      	ldr	r3, [r7, #4]
3400404e:	609a      	str	r2, [r3, #8]

      /* Clear the synchronization error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34004050:	687b      	ldr	r3, [r7, #4]
34004052:	681b      	ldr	r3, [r3, #0]
34004054:	2240      	movs	r2, #64	@ 0x40
34004056:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3400405a:	687b      	ldr	r3, [r7, #4]
3400405c:	2204      	movs	r2, #4
3400405e:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004060:	6878      	ldr	r0, [r7, #4]
34004062:	f000 fcf4 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* IPPLUG AXI transfer Error Interrupt     *********************************/
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34004066:	68fb      	ldr	r3, [r7, #12]
34004068:	f003 0320 	and.w	r3, r3, #32
3400406c:	2b00      	cmp	r3, #0
3400406e:	d01f      	beq.n	340040b0 <HAL_DCMIPP_IRQHandler+0x3c0>
  {
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
34004070:	68bb      	ldr	r3, [r7, #8]
34004072:	f003 0320 	and.w	r3, r3, #32
34004076:	2b00      	cmp	r3, #0
34004078:	d01a      	beq.n	340040b0 <HAL_DCMIPP_IRQHandler+0x3c0>
    {
      /* Disable IPPLUG AXI transfer Error Interrupt */
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3400407a:	687b      	ldr	r3, [r7, #4]
3400407c:	681b      	ldr	r3, [r3, #0]
3400407e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34004082:	687b      	ldr	r3, [r7, #4]
34004084:	681b      	ldr	r3, [r3, #0]
34004086:	f022 0220 	bic.w	r2, r2, #32
3400408a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
3400408e:	687b      	ldr	r3, [r7, #4]
34004090:	689b      	ldr	r3, [r3, #8]
34004092:	f043 0201 	orr.w	r2, r3, #1
34004096:	687b      	ldr	r3, [r7, #4]
34004098:	609a      	str	r2, [r3, #8]

      /* Clear the AXI transfer error flag */
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
3400409a:	687b      	ldr	r3, [r7, #4]
3400409c:	681b      	ldr	r3, [r3, #0]
3400409e:	2220      	movs	r2, #32
340040a0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc

      /* Change DCMIPP state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340040a4:	687b      	ldr	r3, [r7, #4]
340040a6:	2204      	movs	r2, #4
340040a8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340040aa:	6878      	ldr	r0, [r7, #4]
340040ac:	f000 fccf 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
340040b0:	bf00      	nop
340040b2:	3710      	adds	r7, #16
340040b4:	46bd      	mov	sp, r7
340040b6:	bd80      	pop	{r7, pc}

340040b8 <HAL_DCMIPP_CSI_IRQHandler>:
  * @brief  Handles DCMIPP CSI interrupt request.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
void HAL_DCMIPP_CSI_IRQHandler(DCMIPP_HandleTypeDef *hdcmipp)
{
340040b8:	b580      	push	{r7, lr}
340040ba:	b088      	sub	sp, #32
340040bc:	af00      	add	r7, sp, #0
340040be:	6078      	str	r0, [r7, #4]
  CSI_TypeDef *csi_instance;
  csi_instance = CSI;
340040c0:	4bb1      	ldr	r3, [pc, #708]	@ (34004388 <HAL_DCMIPP_CSI_IRQHandler+0x2d0>)
340040c2:	61fb      	str	r3, [r7, #28]

  /* Read the SR0 register once */
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340040c4:	69fb      	ldr	r3, [r7, #28]
340040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340040ca:	61bb      	str	r3, [r7, #24]
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
340040cc:	69fb      	ldr	r3, [r7, #28]
340040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
340040d2:	617b      	str	r3, [r7, #20]

  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
340040d4:	69fb      	ldr	r3, [r7, #28]
340040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340040da:	613b      	str	r3, [r7, #16]
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
340040dc:	69fb      	ldr	r3, [r7, #28]
340040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340040e2:	60fb      	str	r3, [r7, #12]

  /* Clock changer FIFO full event */
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340040e4:	69bb      	ldr	r3, [r7, #24]
340040e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340040ea:	2b00      	cmp	r3, #0
340040ec:	d014      	beq.n	34004118 <HAL_DCMIPP_CSI_IRQHandler+0x60>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
340040ee:	693b      	ldr	r3, [r7, #16]
340040f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
340040f4:	2b00      	cmp	r3, #0
340040f6:	d00f      	beq.n	34004118 <HAL_DCMIPP_CSI_IRQHandler+0x60>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
340040f8:	69fb      	ldr	r3, [r7, #28]
340040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340040fe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
34004102:	69fb      	ldr	r3, [r7, #28]
34004104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34004108:	69fb      	ldr	r3, [r7, #28]
3400410a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400410e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ClockChangerFifoFullEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34004112:	6878      	ldr	r0, [r7, #4]
34004114:	f000 fcb0 	bl	34004a78 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  }

  /*###############################
     Byte/Line Counter Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34004118:	69bb      	ldr	r3, [r7, #24]
3400411a:	f003 0308 	and.w	r3, r3, #8
3400411e:	2b00      	cmp	r3, #0
34004120:	d01c      	beq.n	3400415c <HAL_DCMIPP_CSI_IRQHandler+0xa4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34004122:	693b      	ldr	r3, [r7, #16]
34004124:	f003 0308 	and.w	r3, r3, #8
34004128:	2b00      	cmp	r3, #0
3400412a:	d017      	beq.n	3400415c <HAL_DCMIPP_CSI_IRQHandler+0xa4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400412c:	687b      	ldr	r3, [r7, #4]
3400412e:	681b      	ldr	r3, [r3, #0]
34004130:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004134:	f003 0304 	and.w	r3, r3, #4
34004138:	2b04      	cmp	r3, #4
3400413a:	d107      	bne.n	3400414c <HAL_DCMIPP_CSI_IRQHandler+0x94>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
3400413c:	69fb      	ldr	r3, [r7, #28]
3400413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004142:	f023 0208 	bic.w	r2, r3, #8
34004146:	69fb      	ldr	r3, [r7, #28]
34004148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
3400414c:	69fb      	ldr	r3, [r7, #28]
3400414e:	2208      	movs	r2, #8
34004150:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34004154:	2103      	movs	r1, #3
34004156:	6878      	ldr	r0, [r7, #4]
34004158:	f000 fcc3 	bl	34004ae2 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
3400415c:	69bb      	ldr	r3, [r7, #24]
3400415e:	f003 0304 	and.w	r3, r3, #4
34004162:	2b00      	cmp	r3, #0
34004164:	d01c      	beq.n	340041a0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34004166:	693b      	ldr	r3, [r7, #16]
34004168:	f003 0304 	and.w	r3, r3, #4
3400416c:	2b00      	cmp	r3, #0
3400416e:	d017      	beq.n	340041a0 <HAL_DCMIPP_CSI_IRQHandler+0xe8>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004170:	687b      	ldr	r3, [r7, #4]
34004172:	681b      	ldr	r3, [r3, #0]
34004174:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004178:	f003 0304 	and.w	r3, r3, #4
3400417c:	2b04      	cmp	r3, #4
3400417e:	d107      	bne.n	34004190 <HAL_DCMIPP_CSI_IRQHandler+0xd8>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34004180:	69fb      	ldr	r3, [r7, #28]
34004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004186:	f023 0204 	bic.w	r2, r3, #4
3400418a:	69fb      	ldr	r3, [r7, #28]
3400418c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34004190:	69fb      	ldr	r3, [r7, #28]
34004192:	2204      	movs	r2, #4
34004194:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34004198:	2102      	movs	r1, #2
3400419a:	6878      	ldr	r0, [r7, #4]
3400419c:	f000 fca1 	bl	34004ae2 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
340041a0:	69bb      	ldr	r3, [r7, #24]
340041a2:	f003 0302 	and.w	r3, r3, #2
340041a6:	2b00      	cmp	r3, #0
340041a8:	d01c      	beq.n	340041e4 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
340041aa:	693b      	ldr	r3, [r7, #16]
340041ac:	f003 0302 	and.w	r3, r3, #2
340041b0:	2b00      	cmp	r3, #0
340041b2:	d017      	beq.n	340041e4 <HAL_DCMIPP_CSI_IRQHandler+0x12c>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340041b4:	687b      	ldr	r3, [r7, #4]
340041b6:	681b      	ldr	r3, [r3, #0]
340041b8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340041bc:	f003 0304 	and.w	r3, r3, #4
340041c0:	2b04      	cmp	r3, #4
340041c2:	d107      	bne.n	340041d4 <HAL_DCMIPP_CSI_IRQHandler+0x11c>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340041c4:	69fb      	ldr	r3, [r7, #28]
340041c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340041ca:	f023 0202 	bic.w	r2, r3, #2
340041ce:	69fb      	ldr	r3, [r7, #28]
340041d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340041d4:	69fb      	ldr	r3, [r7, #28]
340041d6:	2202      	movs	r2, #2
340041d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340041dc:	2101      	movs	r1, #1
340041de:	6878      	ldr	r0, [r7, #4]
340041e0:	f000 fc7f 	bl	34004ae2 <HAL_DCMIPP_CSI_LineByteEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340041e4:	69bb      	ldr	r3, [r7, #24]
340041e6:	f003 0301 	and.w	r3, r3, #1
340041ea:	2b00      	cmp	r3, #0
340041ec:	d01c      	beq.n	34004228 <HAL_DCMIPP_CSI_IRQHandler+0x170>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340041ee:	693b      	ldr	r3, [r7, #16]
340041f0:	f003 0301 	and.w	r3, r3, #1
340041f4:	2b00      	cmp	r3, #0
340041f6:	d017      	beq.n	34004228 <HAL_DCMIPP_CSI_IRQHandler+0x170>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340041f8:	687b      	ldr	r3, [r7, #4]
340041fa:	681b      	ldr	r3, [r3, #0]
340041fc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004200:	f003 0304 	and.w	r3, r3, #4
34004204:	2b04      	cmp	r3, #4
34004206:	d107      	bne.n	34004218 <HAL_DCMIPP_CSI_IRQHandler+0x160>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34004208:	69fb      	ldr	r3, [r7, #28]
3400420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400420e:	f023 0201 	bic.w	r2, r3, #1
34004212:	69fb      	ldr	r3, [r7, #28]
34004214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34004218:	69fb      	ldr	r3, [r7, #28]
3400421a:	2201      	movs	r2, #1
3400421c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* LineByte Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
#else
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34004220:	2100      	movs	r1, #0
34004222:	6878      	ldr	r0, [r7, #4]
34004224:	f000 fc5d 	bl	34004ae2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  }

  /*###############################
            End Of Frame
    ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34004228:	69bb      	ldr	r3, [r7, #24]
3400422a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400422e:	2b00      	cmp	r3, #0
34004230:	d01d      	beq.n	3400426e <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34004232:	693b      	ldr	r3, [r7, #16]
34004234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34004238:	2b00      	cmp	r3, #0
3400423a:	d018      	beq.n	3400426e <HAL_DCMIPP_CSI_IRQHandler+0x1b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400423c:	687b      	ldr	r3, [r7, #4]
3400423e:	681b      	ldr	r3, [r3, #0]
34004240:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004244:	f003 0304 	and.w	r3, r3, #4
34004248:	2b04      	cmp	r3, #4
3400424a:	d107      	bne.n	3400425c <HAL_DCMIPP_CSI_IRQHandler+0x1a4>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
3400424c:	69fb      	ldr	r3, [r7, #28]
3400424e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004252:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34004256:	69fb      	ldr	r3, [r7, #28]
34004258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
3400425c:	69fb      	ldr	r3, [r7, #28]
3400425e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34004262:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34004266:	2103      	movs	r1, #3
34004268:	6878      	ldr	r0, [r7, #4]
3400426a:	f000 fc19 	bl	34004aa0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
3400426e:	69bb      	ldr	r3, [r7, #24]
34004270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004274:	2b00      	cmp	r3, #0
34004276:	d01d      	beq.n	340042b4 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34004278:	693b      	ldr	r3, [r7, #16]
3400427a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400427e:	2b00      	cmp	r3, #0
34004280:	d018      	beq.n	340042b4 <HAL_DCMIPP_CSI_IRQHandler+0x1fc>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004282:	687b      	ldr	r3, [r7, #4]
34004284:	681b      	ldr	r3, [r3, #0]
34004286:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400428a:	f003 0304 	and.w	r3, r3, #4
3400428e:	2b04      	cmp	r3, #4
34004290:	d107      	bne.n	340042a2 <HAL_DCMIPP_CSI_IRQHandler+0x1ea>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34004292:	69fb      	ldr	r3, [r7, #28]
34004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004298:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
3400429c:	69fb      	ldr	r3, [r7, #28]
3400429e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
340042a2:	69fb      	ldr	r3, [r7, #28]
340042a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340042a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340042ac:	2102      	movs	r1, #2
340042ae:	6878      	ldr	r0, [r7, #4]
340042b0:	f000 fbf6 	bl	34004aa0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
340042b4:	69bb      	ldr	r3, [r7, #24]
340042b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340042ba:	2b00      	cmp	r3, #0
340042bc:	d01d      	beq.n	340042fa <HAL_DCMIPP_CSI_IRQHandler+0x242>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
340042be:	693b      	ldr	r3, [r7, #16]
340042c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340042c4:	2b00      	cmp	r3, #0
340042c6:	d018      	beq.n	340042fa <HAL_DCMIPP_CSI_IRQHandler+0x242>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340042c8:	687b      	ldr	r3, [r7, #4]
340042ca:	681b      	ldr	r3, [r3, #0]
340042cc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340042d0:	f003 0304 	and.w	r3, r3, #4
340042d4:	2b04      	cmp	r3, #4
340042d6:	d107      	bne.n	340042e8 <HAL_DCMIPP_CSI_IRQHandler+0x230>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
340042d8:	69fb      	ldr	r3, [r7, #28]
340042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340042de:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
340042e2:	69fb      	ldr	r3, [r7, #28]
340042e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
340042e8:	69fb      	ldr	r3, [r7, #28]
340042ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340042ee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340042f2:	2101      	movs	r1, #1
340042f4:	6878      	ldr	r0, [r7, #4]
340042f6:	f000 fbd3 	bl	34004aa0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340042fa:	69bb      	ldr	r3, [r7, #24]
340042fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004300:	2b00      	cmp	r3, #0
34004302:	d01d      	beq.n	34004340 <HAL_DCMIPP_CSI_IRQHandler+0x288>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34004304:	693b      	ldr	r3, [r7, #16]
34004306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400430a:	2b00      	cmp	r3, #0
3400430c:	d018      	beq.n	34004340 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400430e:	687b      	ldr	r3, [r7, #4]
34004310:	681b      	ldr	r3, [r3, #0]
34004312:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004316:	f003 0304 	and.w	r3, r3, #4
3400431a:	2b04      	cmp	r3, #4
3400431c:	d107      	bne.n	3400432e <HAL_DCMIPP_CSI_IRQHandler+0x276>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
3400431e:	69fb      	ldr	r3, [r7, #28]
34004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
34004328:	69fb      	ldr	r3, [r7, #28]
3400432a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
3400432e:	69fb      	ldr	r3, [r7, #28]
34004330:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34004334:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_CSIREGISTER_CALLBACKS == 1)
      hdcmipp->EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004338:	2100      	movs	r1, #0
3400433a:	6878      	ldr	r0, [r7, #4]
3400433c:	f000 fbb0 	bl	34004aa0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  }

  /*###############################
           Start Of Frame
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34004340:	69bb      	ldr	r3, [r7, #24]
34004342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004346:	2b00      	cmp	r3, #0
34004348:	d020      	beq.n	3400438c <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
3400434a:	693b      	ldr	r3, [r7, #16]
3400434c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004350:	2b00      	cmp	r3, #0
34004352:	d01b      	beq.n	3400438c <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004354:	687b      	ldr	r3, [r7, #4]
34004356:	681b      	ldr	r3, [r3, #0]
34004358:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400435c:	f003 0304 	and.w	r3, r3, #4
34004360:	2b04      	cmp	r3, #4
34004362:	d107      	bne.n	34004374 <HAL_DCMIPP_CSI_IRQHandler+0x2bc>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34004364:	69fb      	ldr	r3, [r7, #28]
34004366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400436a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
3400436e:	69fb      	ldr	r3, [r7, #28]
34004370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34004374:	69fb      	ldr	r3, [r7, #28]
34004376:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400437a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3400437e:	2103      	movs	r1, #3
34004380:	6878      	ldr	r0, [r7, #4]
34004382:	f000 fb98 	bl	34004ab6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
34004386:	e001      	b.n	3400438c <HAL_DCMIPP_CSI_IRQHandler+0x2d4>
34004388:	58006000 	.word	0x58006000
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
3400438c:	69bb      	ldr	r3, [r7, #24]
3400438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004392:	2b00      	cmp	r3, #0
34004394:	d01d      	beq.n	340043d2 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34004396:	693b      	ldr	r3, [r7, #16]
34004398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400439c:	2b00      	cmp	r3, #0
3400439e:	d018      	beq.n	340043d2 <HAL_DCMIPP_CSI_IRQHandler+0x31a>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340043a0:	687b      	ldr	r3, [r7, #4]
340043a2:	681b      	ldr	r3, [r3, #0]
340043a4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340043a8:	f003 0304 	and.w	r3, r3, #4
340043ac:	2b04      	cmp	r3, #4
340043ae:	d107      	bne.n	340043c0 <HAL_DCMIPP_CSI_IRQHandler+0x308>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
340043b0:	69fb      	ldr	r3, [r7, #28]
340043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340043b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
340043ba:	69fb      	ldr	r3, [r7, #28]
340043bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
340043c0:	69fb      	ldr	r3, [r7, #28]
340043c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340043c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340043ca:	2102      	movs	r1, #2
340043cc:	6878      	ldr	r0, [r7, #4]
340043ce:	f000 fb72 	bl	34004ab6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
340043d2:	69bb      	ldr	r3, [r7, #24]
340043d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340043d8:	2b00      	cmp	r3, #0
340043da:	d01d      	beq.n	34004418 <HAL_DCMIPP_CSI_IRQHandler+0x360>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
340043dc:	693b      	ldr	r3, [r7, #16]
340043de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340043e2:	2b00      	cmp	r3, #0
340043e4:	d018      	beq.n	34004418 <HAL_DCMIPP_CSI_IRQHandler+0x360>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340043e6:	687b      	ldr	r3, [r7, #4]
340043e8:	681b      	ldr	r3, [r3, #0]
340043ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340043ee:	f003 0304 	and.w	r3, r3, #4
340043f2:	2b04      	cmp	r3, #4
340043f4:	d107      	bne.n	34004406 <HAL_DCMIPP_CSI_IRQHandler+0x34e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
340043f6:	69fb      	ldr	r3, [r7, #28]
340043f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340043fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34004400:	69fb      	ldr	r3, [r7, #28]
34004402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34004406:	69fb      	ldr	r3, [r7, #28]
34004408:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400440c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34004410:	2101      	movs	r1, #1
34004412:	6878      	ldr	r0, [r7, #4]
34004414:	f000 fb4f 	bl	34004ab6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34004418:	69bb      	ldr	r3, [r7, #24]
3400441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400441e:	2b00      	cmp	r3, #0
34004420:	d01d      	beq.n	3400445e <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34004422:	693b      	ldr	r3, [r7, #16]
34004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004428:	2b00      	cmp	r3, #0
3400442a:	d018      	beq.n	3400445e <HAL_DCMIPP_CSI_IRQHandler+0x3a6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400442c:	687b      	ldr	r3, [r7, #4]
3400442e:	681b      	ldr	r3, [r3, #0]
34004430:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004434:	f003 0304 	and.w	r3, r3, #4
34004438:	2b04      	cmp	r3, #4
3400443a:	d107      	bne.n	3400444c <HAL_DCMIPP_CSI_IRQHandler+0x394>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
3400443c:	69fb      	ldr	r3, [r7, #28]
3400443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004446:	69fb      	ldr	r3, [r7, #28]
34004448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
3400444c:	69fb      	ldr	r3, [r7, #28]
3400444e:	f44f 7280 	mov.w	r2, #256	@ 0x100
34004452:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
#else
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34004456:	2100      	movs	r1, #0
34004458:	6878      	ldr	r0, [r7, #4]
3400445a:	f000 fb2c 	bl	34004ab6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  }

  /*###############################
           Timer Interrupt
  ##############################*/
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
3400445e:	69bb      	ldr	r3, [r7, #24]
34004460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004464:	2b00      	cmp	r3, #0
34004466:	d01c      	beq.n	340044a2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34004468:	693b      	ldr	r3, [r7, #16]
3400446a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400446e:	2b00      	cmp	r3, #0
34004470:	d017      	beq.n	340044a2 <HAL_DCMIPP_CSI_IRQHandler+0x3ea>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34004472:	687b      	ldr	r3, [r7, #4]
34004474:	681b      	ldr	r3, [r3, #0]
34004476:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
3400447a:	f003 0304 	and.w	r3, r3, #4
3400447e:	2b04      	cmp	r3, #4
34004480:	d107      	bne.n	34004492 <HAL_DCMIPP_CSI_IRQHandler+0x3da>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34004482:	69fb      	ldr	r3, [r7, #28]
34004484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004488:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
3400448c:	69fb      	ldr	r3, [r7, #28]
3400448e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34004492:	69fb      	ldr	r3, [r7, #28]
34004494:	2280      	movs	r2, #128	@ 0x80
34004496:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
3400449a:	2103      	movs	r1, #3
3400449c:	6878      	ldr	r0, [r7, #4]
3400449e:	f000 fb15 	bl	34004acc <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
340044a2:	69bb      	ldr	r3, [r7, #24]
340044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340044a8:	2b00      	cmp	r3, #0
340044aa:	d01c      	beq.n	340044e6 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
340044ac:	693b      	ldr	r3, [r7, #16]
340044ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340044b2:	2b00      	cmp	r3, #0
340044b4:	d017      	beq.n	340044e6 <HAL_DCMIPP_CSI_IRQHandler+0x42e>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340044b6:	687b      	ldr	r3, [r7, #4]
340044b8:	681b      	ldr	r3, [r3, #0]
340044ba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
340044be:	f003 0304 	and.w	r3, r3, #4
340044c2:	2b04      	cmp	r3, #4
340044c4:	d107      	bne.n	340044d6 <HAL_DCMIPP_CSI_IRQHandler+0x41e>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
340044c6:	69fb      	ldr	r3, [r7, #28]
340044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340044cc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
340044d0:	69fb      	ldr	r3, [r7, #28]
340044d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
340044d6:	69fb      	ldr	r3, [r7, #28]
340044d8:	2240      	movs	r2, #64	@ 0x40
340044da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340044de:	2102      	movs	r1, #2
340044e0:	6878      	ldr	r0, [r7, #4]
340044e2:	f000 faf3 	bl	34004acc <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
340044e6:	69bb      	ldr	r3, [r7, #24]
340044e8:	f003 0320 	and.w	r3, r3, #32
340044ec:	2b00      	cmp	r3, #0
340044ee:	d01c      	beq.n	3400452a <HAL_DCMIPP_CSI_IRQHandler+0x472>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
340044f0:	693b      	ldr	r3, [r7, #16]
340044f2:	f003 0320 	and.w	r3, r3, #32
340044f6:	2b00      	cmp	r3, #0
340044f8:	d017      	beq.n	3400452a <HAL_DCMIPP_CSI_IRQHandler+0x472>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340044fa:	687b      	ldr	r3, [r7, #4]
340044fc:	681b      	ldr	r3, [r3, #0]
340044fe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004502:	f003 0304 	and.w	r3, r3, #4
34004506:	2b04      	cmp	r3, #4
34004508:	d107      	bne.n	3400451a <HAL_DCMIPP_CSI_IRQHandler+0x462>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
3400450a:	69fb      	ldr	r3, [r7, #28]
3400450c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004510:	f023 0220 	bic.w	r2, r3, #32
34004514:	69fb      	ldr	r3, [r7, #28]
34004516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
3400451a:	69fb      	ldr	r3, [r7, #28]
3400451c:	2220      	movs	r2, #32
3400451e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34004522:	2101      	movs	r1, #1
34004524:	6878      	ldr	r0, [r7, #4]
34004526:	f000 fad1 	bl	34004acc <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
3400452a:	69bb      	ldr	r3, [r7, #24]
3400452c:	f003 0310 	and.w	r3, r3, #16
34004530:	2b00      	cmp	r3, #0
34004532:	d01c      	beq.n	3400456e <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34004534:	693b      	ldr	r3, [r7, #16]
34004536:	f003 0310 	and.w	r3, r3, #16
3400453a:	2b00      	cmp	r3, #0
3400453c:	d017      	beq.n	3400456e <HAL_DCMIPP_CSI_IRQHandler+0x4b6>
    {
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400453e:	687b      	ldr	r3, [r7, #4]
34004540:	681b      	ldr	r3, [r3, #0]
34004542:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
34004546:	f003 0304 	and.w	r3, r3, #4
3400454a:	2b04      	cmp	r3, #4
3400454c:	d107      	bne.n	3400455e <HAL_DCMIPP_CSI_IRQHandler+0x4a6>
      {
        /* Disable IT */
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
3400454e:	69fb      	ldr	r3, [r7, #28]
34004550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004554:	f023 0210 	bic.w	r2, r3, #16
34004558:	69fb      	ldr	r3, [r7, #28]
3400455a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
3400455e:	69fb      	ldr	r3, [r7, #28]
34004560:	2210      	movs	r2, #16
34004562:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
#else
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34004566:	2100      	movs	r1, #0
34004568:	6878      	ldr	r0, [r7, #4]
3400456a:	f000 faaf 	bl	34004acc <HAL_DCMIPP_CSI_TimerCounterEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization error  */
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
3400456e:	69bb      	ldr	r3, [r7, #24]
34004570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34004574:	2b00      	cmp	r3, #0
34004576:	d01a      	beq.n	340045ae <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34004578:	693b      	ldr	r3, [r7, #16]
3400457a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400457e:	2b00      	cmp	r3, #0
34004580:	d015      	beq.n	340045ae <HAL_DCMIPP_CSI_IRQHandler+0x4f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34004582:	69fb      	ldr	r3, [r7, #28]
34004584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004588:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
3400458c:	69fb      	ldr	r3, [r7, #28]
3400458e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34004592:	69fb      	ldr	r3, [r7, #28]
34004594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004598:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
3400459c:	687b      	ldr	r3, [r7, #4]
3400459e:	689b      	ldr	r3, [r3, #8]
340045a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
340045a4:	687b      	ldr	r3, [r7, #4]
340045a6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340045a8:	6878      	ldr	r0, [r7, #4]
340045aa:	f000 fa50 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
340045ae:	69bb      	ldr	r3, [r7, #24]
340045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
340045b4:	2b00      	cmp	r3, #0
340045b6:	d01a      	beq.n	340045ee <HAL_DCMIPP_CSI_IRQHandler+0x536>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
340045b8:	693b      	ldr	r3, [r7, #16]
340045ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
340045be:	2b00      	cmp	r3, #0
340045c0:	d015      	beq.n	340045ee <HAL_DCMIPP_CSI_IRQHandler+0x536>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340045c2:	69fb      	ldr	r3, [r7, #28]
340045c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340045c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
340045cc:	69fb      	ldr	r3, [r7, #28]
340045ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
340045d2:	69fb      	ldr	r3, [r7, #28]
340045d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
340045d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
340045dc:	687b      	ldr	r3, [r7, #4]
340045de:	689b      	ldr	r3, [r3, #8]
340045e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
340045e4:	687b      	ldr	r3, [r7, #4]
340045e6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340045e8:	6878      	ldr	r0, [r7, #4]
340045ea:	f000 fa30 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
340045ee:	69bb      	ldr	r3, [r7, #24]
340045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
340045f4:	2b00      	cmp	r3, #0
340045f6:	d01a      	beq.n	3400462e <HAL_DCMIPP_CSI_IRQHandler+0x576>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
340045f8:	693b      	ldr	r3, [r7, #16]
340045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
340045fe:	2b00      	cmp	r3, #0
34004600:	d015      	beq.n	3400462e <HAL_DCMIPP_CSI_IRQHandler+0x576>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34004602:	69fb      	ldr	r3, [r7, #28]
34004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004608:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
3400460c:	69fb      	ldr	r3, [r7, #28]
3400460e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34004612:	69fb      	ldr	r3, [r7, #28]
34004614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34004618:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
3400461c:	687b      	ldr	r3, [r7, #4]
3400461e:	689b      	ldr	r3, [r3, #8]
34004620:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
34004624:	687b      	ldr	r3, [r7, #4]
34004626:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004628:	6878      	ldr	r0, [r7, #4]
3400462a:	f000 fa10 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
3400462e:	69bb      	ldr	r3, [r7, #24]
34004630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34004634:	2b00      	cmp	r3, #0
34004636:	d01a      	beq.n	3400466e <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34004638:	693b      	ldr	r3, [r7, #16]
3400463a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400463e:	2b00      	cmp	r3, #0
34004640:	d015      	beq.n	3400466e <HAL_DCMIPP_CSI_IRQHandler+0x5b6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34004642:	69fb      	ldr	r3, [r7, #28]
34004644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004648:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400464c:	69fb      	ldr	r3, [r7, #28]
3400464e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34004652:	69fb      	ldr	r3, [r7, #28]
34004654:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34004658:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
3400465c:	687b      	ldr	r3, [r7, #4]
3400465e:	689b      	ldr	r3, [r3, #8]
34004660:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
34004664:	687b      	ldr	r3, [r7, #4]
34004666:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004668:	6878      	ldr	r0, [r7, #4]
3400466a:	f000 f9f0 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
3400466e:	69bb      	ldr	r3, [r7, #24]
34004670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
34004674:	2b00      	cmp	r3, #0
34004676:	d01a      	beq.n	340046ae <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34004678:	693b      	ldr	r3, [r7, #16]
3400467a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
3400467e:	2b00      	cmp	r3, #0
34004680:	d015      	beq.n	340046ae <HAL_DCMIPP_CSI_IRQHandler+0x5f6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34004682:	69fb      	ldr	r3, [r7, #28]
34004684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004688:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
3400468c:	69fb      	ldr	r3, [r7, #28]
3400468e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34004692:	69fb      	ldr	r3, [r7, #28]
34004694:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34004698:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
3400469c:	687b      	ldr	r3, [r7, #4]
3400469e:	689b      	ldr	r3, [r3, #8]
340046a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
340046a4:	687b      	ldr	r3, [r7, #4]
340046a6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340046a8:	6878      	ldr	r0, [r7, #4]
340046aa:	f000 f9d0 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
340046ae:	69bb      	ldr	r3, [r7, #24]
340046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340046b4:	2b00      	cmp	r3, #0
340046b6:	d01a      	beq.n	340046ee <HAL_DCMIPP_CSI_IRQHandler+0x636>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
340046b8:	693b      	ldr	r3, [r7, #16]
340046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
340046be:	2b00      	cmp	r3, #0
340046c0:	d015      	beq.n	340046ee <HAL_DCMIPP_CSI_IRQHandler+0x636>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
340046c2:	69fb      	ldr	r3, [r7, #28]
340046c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340046c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
340046cc:	69fb      	ldr	r3, [r7, #28]
340046ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
340046d2:	69fb      	ldr	r3, [r7, #28]
340046d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
340046d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
340046dc:	687b      	ldr	r3, [r7, #4]
340046de:	689b      	ldr	r3, [r3, #8]
340046e0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
340046e4:	687b      	ldr	r3, [r7, #4]
340046e6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340046e8:	6878      	ldr	r0, [r7, #4]
340046ea:	f000 f9b0 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
340046ee:	69bb      	ldr	r3, [r7, #24]
340046f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340046f4:	2b00      	cmp	r3, #0
340046f6:	d01a      	beq.n	3400472e <HAL_DCMIPP_CSI_IRQHandler+0x676>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
340046f8:	693b      	ldr	r3, [r7, #16]
340046fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
340046fe:	2b00      	cmp	r3, #0
34004700:	d015      	beq.n	3400472e <HAL_DCMIPP_CSI_IRQHandler+0x676>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34004702:	69fb      	ldr	r3, [r7, #28]
34004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004708:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
3400470c:	69fb      	ldr	r3, [r7, #28]
3400470e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34004712:	69fb      	ldr	r3, [r7, #28]
34004714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34004718:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
3400471c:	687b      	ldr	r3, [r7, #4]
3400471e:	689b      	ldr	r3, [r3, #8]
34004720:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
34004724:	687b      	ldr	r3, [r7, #4]
34004726:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ErrorCallback(hdcmipp);
#else
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34004728:	6878      	ldr	r0, [r7, #4]
3400472a:	f000 f990 	bl	34004a4e <HAL_DCMIPP_ErrorCallback>
    }
  }

  /* Lane 0 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
3400472e:	697b      	ldr	r3, [r7, #20]
34004730:	f003 0301 	and.w	r3, r3, #1
34004734:	2b00      	cmp	r3, #0
34004736:	d01d      	beq.n	34004774 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34004738:	68fb      	ldr	r3, [r7, #12]
3400473a:	f003 0301 	and.w	r3, r3, #1
3400473e:	2b00      	cmp	r3, #0
34004740:	d018      	beq.n	34004774 <HAL_DCMIPP_CSI_IRQHandler+0x6bc>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34004742:	69fb      	ldr	r3, [r7, #28]
34004744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004748:	f023 0201 	bic.w	r2, r3, #1
3400474c:	69fb      	ldr	r3, [r7, #28]
3400474e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34004752:	69fb      	ldr	r3, [r7, #28]
34004754:	2201      	movs	r2, #1
34004756:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
3400475a:	687b      	ldr	r3, [r7, #4]
3400475c:	689b      	ldr	r3, [r3, #8]
3400475e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
34004762:	687b      	ldr	r3, [r7, #4]
34004764:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34004766:	687b      	ldr	r3, [r7, #4]
34004768:	2204      	movs	r2, #4
3400476a:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3400476c:	2101      	movs	r1, #1
3400476e:	6878      	ldr	r0, [r7, #4]
34004770:	f000 f977 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34004774:	697b      	ldr	r3, [r7, #20]
34004776:	f003 0302 	and.w	r3, r3, #2
3400477a:	2b00      	cmp	r3, #0
3400477c:	d01d      	beq.n	340047ba <HAL_DCMIPP_CSI_IRQHandler+0x702>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
3400477e:	68fb      	ldr	r3, [r7, #12]
34004780:	f003 0302 	and.w	r3, r3, #2
34004784:	2b00      	cmp	r3, #0
34004786:	d018      	beq.n	340047ba <HAL_DCMIPP_CSI_IRQHandler+0x702>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34004788:	69fb      	ldr	r3, [r7, #28]
3400478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400478e:	f023 0202 	bic.w	r2, r3, #2
34004792:	69fb      	ldr	r3, [r7, #28]
34004794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34004798:	69fb      	ldr	r3, [r7, #28]
3400479a:	2202      	movs	r2, #2
3400479c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
340047a0:	687b      	ldr	r3, [r7, #4]
340047a2:	689b      	ldr	r3, [r3, #8]
340047a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
340047a8:	687b      	ldr	r3, [r7, #4]
340047aa:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340047ac:	687b      	ldr	r3, [r7, #4]
340047ae:	2204      	movs	r2, #4
340047b0:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340047b2:	2101      	movs	r1, #1
340047b4:	6878      	ldr	r0, [r7, #4]
340047b6:	f000 f954 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
340047ba:	697b      	ldr	r3, [r7, #20]
340047bc:	f003 0304 	and.w	r3, r3, #4
340047c0:	2b00      	cmp	r3, #0
340047c2:	d01a      	beq.n	340047fa <HAL_DCMIPP_CSI_IRQHandler+0x742>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
340047c4:	68fb      	ldr	r3, [r7, #12]
340047c6:	f003 0304 	and.w	r3, r3, #4
340047ca:	2b00      	cmp	r3, #0
340047cc:	d015      	beq.n	340047fa <HAL_DCMIPP_CSI_IRQHandler+0x742>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
340047ce:	69fb      	ldr	r3, [r7, #28]
340047d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340047d4:	f023 0204 	bic.w	r2, r3, #4
340047d8:	69fb      	ldr	r3, [r7, #28]
340047da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
340047de:	69fb      	ldr	r3, [r7, #28]
340047e0:	2204      	movs	r2, #4
340047e2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
340047e6:	687b      	ldr	r3, [r7, #4]
340047e8:	689b      	ldr	r3, [r3, #8]
340047ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
340047ee:	687b      	ldr	r3, [r7, #4]
340047f0:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340047f2:	2101      	movs	r1, #1
340047f4:	6878      	ldr	r0, [r7, #4]
340047f6:	f000 f934 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
340047fa:	697b      	ldr	r3, [r7, #20]
340047fc:	f003 0308 	and.w	r3, r3, #8
34004800:	2b00      	cmp	r3, #0
34004802:	d01a      	beq.n	3400483a <HAL_DCMIPP_CSI_IRQHandler+0x782>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34004804:	68fb      	ldr	r3, [r7, #12]
34004806:	f003 0308 	and.w	r3, r3, #8
3400480a:	2b00      	cmp	r3, #0
3400480c:	d015      	beq.n	3400483a <HAL_DCMIPP_CSI_IRQHandler+0x782>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3400480e:	69fb      	ldr	r3, [r7, #28]
34004810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004814:	f023 0208 	bic.w	r2, r3, #8
34004818:	69fb      	ldr	r3, [r7, #28]
3400481a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
3400481e:	69fb      	ldr	r3, [r7, #28]
34004820:	2208      	movs	r2, #8
34004822:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34004826:	687b      	ldr	r3, [r7, #4]
34004828:	689b      	ldr	r3, [r3, #8]
3400482a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
3400482e:	687b      	ldr	r3, [r7, #4]
34004830:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004832:	2101      	movs	r1, #1
34004834:	6878      	ldr	r0, [r7, #4]
34004836:	f000 f914 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
3400483a:	697b      	ldr	r3, [r7, #20]
3400483c:	f003 0310 	and.w	r3, r3, #16
34004840:	2b00      	cmp	r3, #0
34004842:	d01a      	beq.n	3400487a <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34004844:	68fb      	ldr	r3, [r7, #12]
34004846:	f003 0310 	and.w	r3, r3, #16
3400484a:	2b00      	cmp	r3, #0
3400484c:	d015      	beq.n	3400487a <HAL_DCMIPP_CSI_IRQHandler+0x7c2>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
3400484e:	69fb      	ldr	r3, [r7, #28]
34004850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004854:	f023 0210 	bic.w	r2, r3, #16
34004858:	69fb      	ldr	r3, [r7, #28]
3400485a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
3400485e:	69fb      	ldr	r3, [r7, #28]
34004860:	2210      	movs	r2, #16
34004862:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34004866:	687b      	ldr	r3, [r7, #4]
34004868:	689b      	ldr	r3, [r3, #8]
3400486a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
3400486e:	687b      	ldr	r3, [r7, #4]
34004870:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34004872:	2101      	movs	r1, #1
34004874:	6878      	ldr	r0, [r7, #4]
34004876:	f000 f8f4 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
    }
  }

  /* Lane 1 Errors */
  /* Start Of Transmission error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
3400487a:	697b      	ldr	r3, [r7, #20]
3400487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004880:	2b00      	cmp	r3, #0
34004882:	d01e      	beq.n	340048c2 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34004884:	68fb      	ldr	r3, [r7, #12]
34004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400488a:	2b00      	cmp	r3, #0
3400488c:	d019      	beq.n	340048c2 <HAL_DCMIPP_CSI_IRQHandler+0x80a>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
3400488e:	69fb      	ldr	r3, [r7, #28]
34004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34004898:	69fb      	ldr	r3, [r7, #28]
3400489a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
3400489e:	69fb      	ldr	r3, [r7, #28]
340048a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
340048a4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340048a8:	687b      	ldr	r3, [r7, #4]
340048aa:	689b      	ldr	r3, [r3, #8]
340048ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
340048b0:	687b      	ldr	r3, [r7, #4]
340048b2:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340048b4:	687b      	ldr	r3, [r7, #4]
340048b6:	2204      	movs	r2, #4
340048b8:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340048ba:	2102      	movs	r1, #2
340048bc:	6878      	ldr	r0, [r7, #4]
340048be:	f000 f8d0 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Start Of Transmission Synchronisation error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
340048c2:	697b      	ldr	r3, [r7, #20]
340048c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340048c8:	2b00      	cmp	r3, #0
340048ca:	d01e      	beq.n	3400490a <HAL_DCMIPP_CSI_IRQHandler+0x852>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
340048cc:	68fb      	ldr	r3, [r7, #12]
340048ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340048d2:	2b00      	cmp	r3, #0
340048d4:	d019      	beq.n	3400490a <HAL_DCMIPP_CSI_IRQHandler+0x852>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340048d6:	69fb      	ldr	r3, [r7, #28]
340048d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340048dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
340048e0:	69fb      	ldr	r3, [r7, #28]
340048e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
340048e6:	69fb      	ldr	r3, [r7, #28]
340048e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
340048ec:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
340048f0:	687b      	ldr	r3, [r7, #4]
340048f2:	689b      	ldr	r3, [r3, #8]
340048f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
340048f8:	687b      	ldr	r3, [r7, #4]
340048fa:	609a      	str	r2, [r3, #8]

      /* Change CSI state */
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340048fc:	687b      	ldr	r3, [r7, #4]
340048fe:	2204      	movs	r2, #4
34004900:	711a      	strb	r2, [r3, #4]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004902:	2102      	movs	r1, #2
34004904:	6878      	ldr	r0, [r7, #4]
34004906:	f000 f8ac 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Escape entry error   */
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
3400490a:	697b      	ldr	r3, [r7, #20]
3400490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004910:	2b00      	cmp	r3, #0
34004912:	d01b      	beq.n	3400494c <HAL_DCMIPP_CSI_IRQHandler+0x894>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34004914:	68fb      	ldr	r3, [r7, #12]
34004916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400491a:	2b00      	cmp	r3, #0
3400491c:	d016      	beq.n	3400494c <HAL_DCMIPP_CSI_IRQHandler+0x894>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3400491e:	69fb      	ldr	r3, [r7, #28]
34004920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004924:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
34004928:	69fb      	ldr	r3, [r7, #28]
3400492a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3400492e:	69fb      	ldr	r3, [r7, #28]
34004930:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004934:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34004938:	687b      	ldr	r3, [r7, #4]
3400493a:	689b      	ldr	r3, [r3, #8]
3400493c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
34004940:	687b      	ldr	r3, [r7, #4]
34004942:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004944:	2102      	movs	r1, #2
34004946:	6878      	ldr	r0, [r7, #4]
34004948:	f000 f88b 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Low power data transmission synchronization error  */
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
3400494c:	697b      	ldr	r3, [r7, #20]
3400494e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004952:	2b00      	cmp	r3, #0
34004954:	d01b      	beq.n	3400498e <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34004956:	68fb      	ldr	r3, [r7, #12]
34004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400495c:	2b00      	cmp	r3, #0
3400495e:	d016      	beq.n	3400498e <HAL_DCMIPP_CSI_IRQHandler+0x8d6>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34004960:	69fb      	ldr	r3, [r7, #28]
34004962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34004966:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
3400496a:	69fb      	ldr	r3, [r7, #28]
3400496c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34004970:	69fb      	ldr	r3, [r7, #28]
34004972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004976:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
3400497a:	687b      	ldr	r3, [r7, #4]
3400497c:	689b      	ldr	r3, [r3, #8]
3400497e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
34004982:	687b      	ldr	r3, [r7, #4]
34004984:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34004986:	2102      	movs	r1, #2
34004988:	6878      	ldr	r0, [r7, #4]
3400498a:	f000 f86a 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  /* Error control on data line */
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3400498e:	697b      	ldr	r3, [r7, #20]
34004990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004994:	2b00      	cmp	r3, #0
34004996:	d01b      	beq.n	340049d0 <HAL_DCMIPP_CSI_IRQHandler+0x918>
  {
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34004998:	68fb      	ldr	r3, [r7, #12]
3400499a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400499e:	2b00      	cmp	r3, #0
340049a0:	d016      	beq.n	340049d0 <HAL_DCMIPP_CSI_IRQHandler+0x918>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340049a2:	69fb      	ldr	r3, [r7, #28]
340049a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
340049ac:	69fb      	ldr	r3, [r7, #28]
340049ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340049b2:	69fb      	ldr	r3, [r7, #28]
340049b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340049b8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

      /* Update error code */
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340049bc:	687b      	ldr	r3, [r7, #4]
340049be:	689b      	ldr	r3, [r3, #8]
340049c0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
340049c4:	687b      	ldr	r3, [r7, #4]
340049c6:	609a      	str	r2, [r3, #8]

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
#else
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340049c8:	2102      	movs	r1, #2
340049ca:	6878      	ldr	r0, [r7, #4]
340049cc:	f000 f849 	bl	34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }

  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340049d0:	69bb      	ldr	r3, [r7, #24]
340049d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340049d6:	2b00      	cmp	r3, #0
340049d8:	d014      	beq.n	34004a04 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
  {
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340049da:	693b      	ldr	r3, [r7, #16]
340049dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340049e0:	2b00      	cmp	r3, #0
340049e2:	d00f      	beq.n	34004a04 <HAL_DCMIPP_CSI_IRQHandler+0x94c>
    {
      /* Disable IT */
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340049e4:	69fb      	ldr	r3, [r7, #28]
340049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340049ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
340049ee:	69fb      	ldr	r3, [r7, #28]
340049f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear Flag */
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340049f4:	69fb      	ldr	r3, [r7, #28]
340049f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340049fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

      /* Error Callback */
#if (USE_HAL_DCMIPP_REGISTER_CALLBACKS == 1)
      hdcmipp->ShortPacketDetectionEventCallback(hdcmipp);
#else
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340049fe:	6878      	ldr	r0, [r7, #4]
34004a00:	f000 f844 	bl	34004a8c <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
#endif /* USE_HAL_DCMIPP_REGISTER_CALLBACKS */
    }
  }
}
34004a04:	bf00      	nop
34004a06:	3720      	adds	r7, #32
34004a08:	46bd      	mov	sp, r7
34004a0a:	bd80      	pop	{r7, pc}

34004a0c <HAL_DCMIPP_PIPE_LineEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004a0c:	b480      	push	{r7}
34004a0e:	b083      	sub	sp, #12
34004a10:	af00      	add	r7, sp, #0
34004a12:	6078      	str	r0, [r7, #4]
34004a14:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LineEventMainPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004a16:	bf00      	nop
34004a18:	370c      	adds	r7, #12
34004a1a:	46bd      	mov	sp, r7
34004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a20:	4770      	bx	lr

34004a22 <HAL_DCMIPP_PIPE_LimitEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004a22:	b480      	push	{r7}
34004a24:	b083      	sub	sp, #12
34004a26:	af00      	add	r7, sp, #0
34004a28:	6078      	str	r0, [r7, #4]
34004a2a:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_LimitEventDumpPipeCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004a2c:	bf00      	nop
34004a2e:	370c      	adds	r7, #12
34004a30:	46bd      	mov	sp, r7
34004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a36:	4770      	bx	lr

34004a38 <HAL_DCMIPP_PIPE_ErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Pipe     Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34004a38:	b480      	push	{r7}
34004a3a:	b083      	sub	sp, #12
34004a3c:	af00      	add	r7, sp, #0
34004a3e:	6078      	str	r0, [r7, #4]
34004a40:	6039      	str	r1, [r7, #0]
            the HAL_DCMIPP_SyncErrorEventCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Pipe);
  UNUSED(hdcmipp);
}
34004a42:	bf00      	nop
34004a44:	370c      	adds	r7, #12
34004a46:	46bd      	mov	sp, r7
34004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a4c:	4770      	bx	lr

34004a4e <HAL_DCMIPP_ErrorCallback>:
  * @brief  Error callback on DCMIPP
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004a4e:	b480      	push	{r7}
34004a50:	b083      	sub	sp, #12
34004a52:	af00      	add	r7, sp, #0
34004a54:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_ErrorCallback could be implemented in the user file
   */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmipp);
}
34004a56:	bf00      	nop
34004a58:	370c      	adds	r7, #12
34004a5a:	46bd      	mov	sp, r7
34004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a60:	4770      	bx	lr

34004a62 <HAL_DCMIPP_CSI_LineErrorCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  DataLane
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
{
34004a62:	b480      	push	{r7}
34004a64:	b083      	sub	sp, #12
34004a66:	af00      	add	r7, sp, #0
34004a68:	6078      	str	r0, [r7, #4]
34004a6a:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_LineErrorCallback could be implemented in the user file
   */
  UNUSED(DataLane);
  UNUSED(hdcmipp);
}
34004a6c:	bf00      	nop
34004a6e:	370c      	adds	r7, #12
34004a70:	46bd      	mov	sp, r7
34004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a76:	4770      	bx	lr

34004a78 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
  * @brief  Clock Changer Fifo Full Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004a78:	b480      	push	{r7}
34004a7a:	b083      	sub	sp, #12
34004a7c:	af00      	add	r7, sp, #0
34004a7e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34004a80:	bf00      	nop
34004a82:	370c      	adds	r7, #12
34004a84:	46bd      	mov	sp, r7
34004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a8a:	4770      	bx	lr

34004a8c <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
  * @brief  Short Packet Detection Event Callback
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
{
34004a8c:	b480      	push	{r7}
34004a8e:	b083      	sub	sp, #12
34004a90:	af00      	add	r7, sp, #0
34004a92:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
}
34004a94:	bf00      	nop
34004a96:	370c      	adds	r7, #12
34004a98:	46bd      	mov	sp, r7
34004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34004a9e:	4770      	bx	lr

34004aa0 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34004aa0:	b480      	push	{r7}
34004aa2:	b083      	sub	sp, #12
34004aa4:	af00      	add	r7, sp, #0
34004aa6:	6078      	str	r0, [r7, #4]
34004aa8:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_EndOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34004aaa:	bf00      	nop
34004aac:	370c      	adds	r7, #12
34004aae:	46bd      	mov	sp, r7
34004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
34004ab4:	4770      	bx	lr

34004ab6 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  VirtualChannel
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
{
34004ab6:	b480      	push	{r7}
34004ab8:	b083      	sub	sp, #12
34004aba:	af00      	add	r7, sp, #0
34004abc:	6078      	str	r0, [r7, #4]
34004abe:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_StartOfFrameEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(VirtualChannel);
}
34004ac0:	bf00      	nop
34004ac2:	370c      	adds	r7, #12
34004ac4:	46bd      	mov	sp, r7
34004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
34004aca:	4770      	bx	lr

34004acc <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Timer
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
{
34004acc:	b480      	push	{r7}
34004ace:	b083      	sub	sp, #12
34004ad0:	af00      	add	r7, sp, #0
34004ad2:	6078      	str	r0, [r7, #4]
34004ad4:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMIPP_CSI_TimerCounterEventCallback could be implemented in the user file
   */
  UNUSED(hdcmipp);
  UNUSED(Timer);
}
34004ad6:	bf00      	nop
34004ad8:	370c      	adds	r7, #12
34004ada:	46bd      	mov	sp, r7
34004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
34004ae0:	4770      	bx	lr

34004ae2 <HAL_DCMIPP_CSI_LineByteEventCallback>:
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @param  Counter
  * @retval None
  */
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
{
34004ae2:	b480      	push	{r7}
34004ae4:	b083      	sub	sp, #12
34004ae6:	af00      	add	r7, sp, #0
34004ae8:	6078      	str	r0, [r7, #4]
34004aea:	6039      	str	r1, [r7, #0]
  /* NOTE : This function Should not be modified, when the callback is needed,
          the HAL_DCMIPP_CSI_LineByteEventCallback could be implemented in the user file
  */
  UNUSED(hdcmipp);
  UNUSED(Counter);
}
34004aec:	bf00      	nop
34004aee:	370c      	adds	r7, #12
34004af0:	46bd      	mov	sp, r7
34004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
34004af6:	4770      	bx	lr

34004af8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
34004af8:	b580      	push	{r7, lr}
34004afa:	b084      	sub	sp, #16
34004afc:	af00      	add	r7, sp, #0
34004afe:	60f8      	str	r0, [r7, #12]
34004b00:	60b9      	str	r1, [r7, #8]
34004b02:	607a      	str	r2, [r7, #4]
34004b04:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34004b06:	68fb      	ldr	r3, [r7, #12]
34004b08:	2b00      	cmp	r3, #0
34004b0a:	d101      	bne.n	34004b10 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
34004b0c:	2301      	movs	r3, #1
34004b0e:	e05b      	b.n	34004bc8 <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
34004b10:	683b      	ldr	r3, [r7, #0]
34004b12:	2b00      	cmp	r3, #0
34004b14:	d003      	beq.n	34004b1e <HAL_DMA_Start_IT+0x26>
34004b16:	683b      	ldr	r3, [r7, #0]
34004b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004b1c:	d304      	bcc.n	34004b28 <HAL_DMA_Start_IT+0x30>
34004b1e:	f240 2143 	movw	r1, #579	@ 0x243
34004b22:	482b      	ldr	r0, [pc, #172]	@ (34004bd0 <HAL_DMA_Start_IT+0xd8>)
34004b24:	f7fc fd82 	bl	3400162c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
34004b28:	68fb      	ldr	r3, [r7, #12]
34004b2a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
34004b2e:	2b01      	cmp	r3, #1
34004b30:	d101      	bne.n	34004b36 <HAL_DMA_Start_IT+0x3e>
34004b32:	2302      	movs	r3, #2
34004b34:	e048      	b.n	34004bc8 <HAL_DMA_Start_IT+0xd0>
34004b36:	68fb      	ldr	r3, [r7, #12]
34004b38:	2201      	movs	r2, #1
34004b3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
34004b3e:	68fb      	ldr	r3, [r7, #12]
34004b40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34004b44:	b2db      	uxtb	r3, r3
34004b46:	2b01      	cmp	r3, #1
34004b48:	d136      	bne.n	34004bb8 <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
34004b4a:	68fb      	ldr	r3, [r7, #12]
34004b4c:	2202      	movs	r2, #2
34004b4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
34004b52:	68fb      	ldr	r3, [r7, #12]
34004b54:	2200      	movs	r2, #0
34004b56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
34004b58:	683b      	ldr	r3, [r7, #0]
34004b5a:	687a      	ldr	r2, [r7, #4]
34004b5c:	68b9      	ldr	r1, [r7, #8]
34004b5e:	68f8      	ldr	r0, [r7, #12]
34004b60:	f000 f9d6 	bl	34004f10 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
34004b64:	68fb      	ldr	r3, [r7, #12]
34004b66:	681b      	ldr	r3, [r3, #0]
34004b68:	695a      	ldr	r2, [r3, #20]
34004b6a:	68fb      	ldr	r3, [r7, #12]
34004b6c:	681b      	ldr	r3, [r3, #0]
34004b6e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
34004b72:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
34004b74:	68fb      	ldr	r3, [r7, #12]
34004b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34004b78:	2b00      	cmp	r3, #0
34004b7a:	d007      	beq.n	34004b8c <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34004b7c:	68fb      	ldr	r3, [r7, #12]
34004b7e:	681b      	ldr	r3, [r3, #0]
34004b80:	695a      	ldr	r2, [r3, #20]
34004b82:	68fb      	ldr	r3, [r7, #12]
34004b84:	681b      	ldr	r3, [r3, #0]
34004b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34004b8a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
34004b8c:	68fb      	ldr	r3, [r7, #12]
34004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34004b90:	2b00      	cmp	r3, #0
34004b92:	d007      	beq.n	34004ba4 <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
34004b94:	68fb      	ldr	r3, [r7, #12]
34004b96:	681b      	ldr	r3, [r3, #0]
34004b98:	695a      	ldr	r2, [r3, #20]
34004b9a:	68fb      	ldr	r3, [r7, #12]
34004b9c:	681b      	ldr	r3, [r3, #0]
34004b9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34004ba2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
34004ba4:	68fb      	ldr	r3, [r7, #12]
34004ba6:	681b      	ldr	r3, [r3, #0]
34004ba8:	695a      	ldr	r2, [r3, #20]
34004baa:	68fb      	ldr	r3, [r7, #12]
34004bac:	681b      	ldr	r3, [r3, #0]
34004bae:	f042 0201 	orr.w	r2, r2, #1
34004bb2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
34004bb4:	2300      	movs	r3, #0
34004bb6:	e007      	b.n	34004bc8 <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
34004bb8:	68fb      	ldr	r3, [r7, #12]
34004bba:	2240      	movs	r2, #64	@ 0x40
34004bbc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34004bbe:	68fb      	ldr	r3, [r7, #12]
34004bc0:	2200      	movs	r2, #0
34004bc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34004bc6:	2301      	movs	r3, #1
}
34004bc8:	4618      	mov	r0, r3
34004bca:	3710      	adds	r7, #16
34004bcc:	46bd      	mov	sp, r7
34004bce:	bd80      	pop	{r7, pc}
34004bd0:	3401aac4 	.word	0x3401aac4

34004bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
34004bd4:	b480      	push	{r7}
34004bd6:	b083      	sub	sp, #12
34004bd8:	af00      	add	r7, sp, #0
34004bda:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34004bdc:	687b      	ldr	r3, [r7, #4]
34004bde:	2b00      	cmp	r3, #0
34004be0:	d101      	bne.n	34004be6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
34004be2:	2301      	movs	r3, #1
34004be4:	e019      	b.n	34004c1a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34004be6:	687b      	ldr	r3, [r7, #4]
34004be8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34004bec:	b2db      	uxtb	r3, r3
34004bee:	2b02      	cmp	r3, #2
34004bf0:	d004      	beq.n	34004bfc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34004bf2:	687b      	ldr	r3, [r7, #4]
34004bf4:	2220      	movs	r2, #32
34004bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34004bf8:	2301      	movs	r3, #1
34004bfa:	e00e      	b.n	34004c1a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34004bfc:	687b      	ldr	r3, [r7, #4]
34004bfe:	2204      	movs	r2, #4
34004c00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34004c04:	687b      	ldr	r3, [r7, #4]
34004c06:	681b      	ldr	r3, [r3, #0]
34004c08:	695b      	ldr	r3, [r3, #20]
34004c0a:	687a      	ldr	r2, [r7, #4]
34004c0c:	6812      	ldr	r2, [r2, #0]
34004c0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34004c12:	f043 0304 	orr.w	r3, r3, #4
34004c16:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34004c18:	2300      	movs	r3, #0
}
34004c1a:	4618      	mov	r0, r3
34004c1c:	370c      	adds	r7, #12
34004c1e:	46bd      	mov	sp, r7
34004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
34004c24:	4770      	bx	lr

34004c26 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
34004c26:	b580      	push	{r7, lr}
34004c28:	b086      	sub	sp, #24
34004c2a:	af00      	add	r7, sp, #0
34004c2c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
34004c2e:	687b      	ldr	r3, [r7, #4]
34004c30:	681b      	ldr	r3, [r3, #0]
34004c32:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
34004c36:	f023 030f 	bic.w	r3, r3, #15
34004c3a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
34004c3c:	687b      	ldr	r3, [r7, #4]
34004c3e:	681b      	ldr	r3, [r3, #0]
34004c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
34004c44:	3b50      	subs	r3, #80	@ 0x50
34004c46:	09db      	lsrs	r3, r3, #7
34004c48:	f003 031f 	and.w	r3, r3, #31
34004c4c:	2201      	movs	r2, #1
34004c4e:	fa02 f303 	lsl.w	r3, r2, r3
34004c52:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
34004c54:	697b      	ldr	r3, [r7, #20]
34004c56:	68db      	ldr	r3, [r3, #12]
34004c58:	693a      	ldr	r2, [r7, #16]
34004c5a:	4013      	ands	r3, r2
34004c5c:	60fb      	str	r3, [r7, #12]
#if defined (CPU_IN_SECURE_STATE)
  uint32_t global_active_flag_s = IS_DMA_GLOBAL_ACTIVE_FLAG_S(p_dma_instance, global_it_flag);
34004c5e:	697b      	ldr	r3, [r7, #20]
34004c60:	691b      	ldr	r3, [r3, #16]
34004c62:	693a      	ldr	r2, [r7, #16]
34004c64:	4013      	ands	r3, r2
34004c66:	60bb      	str	r3, [r7, #8]
#endif /* CPU_IN_SECURE_STATE */

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
34004c68:	68bb      	ldr	r3, [r7, #8]
34004c6a:	2b00      	cmp	r3, #0
34004c6c:	d103      	bne.n	34004c76 <HAL_DMA_IRQHandler+0x50>
34004c6e:	68fb      	ldr	r3, [r7, #12]
34004c70:	2b00      	cmp	r3, #0
34004c72:	f000 813b 	beq.w	34004eec <HAL_DMA_IRQHandler+0x2c6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
34004c76:	687b      	ldr	r3, [r7, #4]
34004c78:	681b      	ldr	r3, [r3, #0]
34004c7a:	691b      	ldr	r3, [r3, #16]
34004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004c80:	2b00      	cmp	r3, #0
34004c82:	d011      	beq.n	34004ca8 <HAL_DMA_IRQHandler+0x82>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
34004c84:	687b      	ldr	r3, [r7, #4]
34004c86:	681b      	ldr	r3, [r3, #0]
34004c88:	695b      	ldr	r3, [r3, #20]
34004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34004c8e:	2b00      	cmp	r3, #0
34004c90:	d00a      	beq.n	34004ca8 <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
34004c92:	687b      	ldr	r3, [r7, #4]
34004c94:	681b      	ldr	r3, [r3, #0]
34004c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34004c9a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
34004c9c:	687b      	ldr	r3, [r7, #4]
34004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34004ca0:	f043 0201 	orr.w	r2, r3, #1
34004ca4:	687b      	ldr	r3, [r7, #4]
34004ca6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
34004ca8:	687b      	ldr	r3, [r7, #4]
34004caa:	681b      	ldr	r3, [r3, #0]
34004cac:	691b      	ldr	r3, [r3, #16]
34004cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004cb2:	2b00      	cmp	r3, #0
34004cb4:	d011      	beq.n	34004cda <HAL_DMA_IRQHandler+0xb4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
34004cb6:	687b      	ldr	r3, [r7, #4]
34004cb8:	681b      	ldr	r3, [r3, #0]
34004cba:	695b      	ldr	r3, [r3, #20]
34004cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34004cc0:	2b00      	cmp	r3, #0
34004cc2:	d00a      	beq.n	34004cda <HAL_DMA_IRQHandler+0xb4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
34004cc4:	687b      	ldr	r3, [r7, #4]
34004cc6:	681b      	ldr	r3, [r3, #0]
34004cc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34004ccc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
34004cce:	687b      	ldr	r3, [r7, #4]
34004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34004cd2:	f043 0202 	orr.w	r2, r3, #2
34004cd6:	687b      	ldr	r3, [r7, #4]
34004cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
34004cda:	687b      	ldr	r3, [r7, #4]
34004cdc:	681b      	ldr	r3, [r3, #0]
34004cde:	691b      	ldr	r3, [r3, #16]
34004ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004ce4:	2b00      	cmp	r3, #0
34004ce6:	d011      	beq.n	34004d0c <HAL_DMA_IRQHandler+0xe6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
34004ce8:	687b      	ldr	r3, [r7, #4]
34004cea:	681b      	ldr	r3, [r3, #0]
34004cec:	695b      	ldr	r3, [r3, #20]
34004cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34004cf2:	2b00      	cmp	r3, #0
34004cf4:	d00a      	beq.n	34004d0c <HAL_DMA_IRQHandler+0xe6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
34004cf6:	687b      	ldr	r3, [r7, #4]
34004cf8:	681b      	ldr	r3, [r3, #0]
34004cfa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34004cfe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
34004d00:	687b      	ldr	r3, [r7, #4]
34004d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34004d04:	f043 0204 	orr.w	r2, r3, #4
34004d08:	687b      	ldr	r3, [r7, #4]
34004d0a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
34004d0c:	687b      	ldr	r3, [r7, #4]
34004d0e:	681b      	ldr	r3, [r3, #0]
34004d10:	691b      	ldr	r3, [r3, #16]
34004d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004d16:	2b00      	cmp	r3, #0
34004d18:	d011      	beq.n	34004d3e <HAL_DMA_IRQHandler+0x118>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
34004d1a:	687b      	ldr	r3, [r7, #4]
34004d1c:	681b      	ldr	r3, [r3, #0]
34004d1e:	695b      	ldr	r3, [r3, #20]
34004d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34004d24:	2b00      	cmp	r3, #0
34004d26:	d00a      	beq.n	34004d3e <HAL_DMA_IRQHandler+0x118>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
34004d28:	687b      	ldr	r3, [r7, #4]
34004d2a:	681b      	ldr	r3, [r3, #0]
34004d2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34004d30:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
34004d32:	687b      	ldr	r3, [r7, #4]
34004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34004d36:	f043 0208 	orr.w	r2, r3, #8
34004d3a:	687b      	ldr	r3, [r7, #4]
34004d3c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
34004d3e:	687b      	ldr	r3, [r7, #4]
34004d40:	681b      	ldr	r3, [r3, #0]
34004d42:	691b      	ldr	r3, [r3, #16]
34004d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004d48:	2b00      	cmp	r3, #0
34004d4a:	d013      	beq.n	34004d74 <HAL_DMA_IRQHandler+0x14e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
34004d4c:	687b      	ldr	r3, [r7, #4]
34004d4e:	681b      	ldr	r3, [r3, #0]
34004d50:	695b      	ldr	r3, [r3, #20]
34004d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34004d56:	2b00      	cmp	r3, #0
34004d58:	d00c      	beq.n	34004d74 <HAL_DMA_IRQHandler+0x14e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
34004d5a:	687b      	ldr	r3, [r7, #4]
34004d5c:	681b      	ldr	r3, [r3, #0]
34004d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34004d62:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
34004d64:	687b      	ldr	r3, [r7, #4]
34004d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34004d68:	2b00      	cmp	r3, #0
34004d6a:	d003      	beq.n	34004d74 <HAL_DMA_IRQHandler+0x14e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
34004d6c:	687b      	ldr	r3, [r7, #4]
34004d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34004d70:	6878      	ldr	r0, [r7, #4]
34004d72:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
34004d74:	687b      	ldr	r3, [r7, #4]
34004d76:	681b      	ldr	r3, [r3, #0]
34004d78:	691b      	ldr	r3, [r3, #16]
34004d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34004d7e:	2b00      	cmp	r3, #0
34004d80:	d04c      	beq.n	34004e1c <HAL_DMA_IRQHandler+0x1f6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
34004d82:	687b      	ldr	r3, [r7, #4]
34004d84:	681b      	ldr	r3, [r3, #0]
34004d86:	695b      	ldr	r3, [r3, #20]
34004d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34004d8c:	2b00      	cmp	r3, #0
34004d8e:	d045      	beq.n	34004e1c <HAL_DMA_IRQHandler+0x1f6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
34004d90:	687b      	ldr	r3, [r7, #4]
34004d92:	681b      	ldr	r3, [r3, #0]
34004d94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34004d98:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
34004d9a:	687b      	ldr	r3, [r7, #4]
34004d9c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34004da0:	b2db      	uxtb	r3, r3
34004da2:	2b04      	cmp	r3, #4
34004da4:	d12e      	bne.n	34004e04 <HAL_DMA_IRQHandler+0x1de>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
34004da6:	687b      	ldr	r3, [r7, #4]
34004da8:	681b      	ldr	r3, [r3, #0]
34004daa:	695a      	ldr	r2, [r3, #20]
34004dac:	687b      	ldr	r3, [r7, #4]
34004dae:	681b      	ldr	r3, [r3, #0]
34004db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34004db4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
34004db6:	687b      	ldr	r3, [r7, #4]
34004db8:	681b      	ldr	r3, [r3, #0]
34004dba:	695a      	ldr	r2, [r3, #20]
34004dbc:	687b      	ldr	r3, [r7, #4]
34004dbe:	681b      	ldr	r3, [r3, #0]
34004dc0:	f042 0202 	orr.w	r2, r2, #2
34004dc4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
34004dc6:	687b      	ldr	r3, [r7, #4]
34004dc8:	2201      	movs	r2, #1
34004dca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34004dce:	687b      	ldr	r3, [r7, #4]
34004dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34004dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004dd6:	2b00      	cmp	r3, #0
34004dd8:	d007      	beq.n	34004dea <HAL_DMA_IRQHandler+0x1c4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34004dda:	687b      	ldr	r3, [r7, #4]
34004ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34004dde:	2201      	movs	r2, #1
34004de0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
34004de2:	687b      	ldr	r3, [r7, #4]
34004de4:	681b      	ldr	r3, [r3, #0]
34004de6:	2200      	movs	r2, #0
34004de8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34004dea:	687b      	ldr	r3, [r7, #4]
34004dec:	2200      	movs	r2, #0
34004dee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
34004df2:	687b      	ldr	r3, [r7, #4]
34004df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34004df6:	2b00      	cmp	r3, #0
34004df8:	d07a      	beq.n	34004ef0 <HAL_DMA_IRQHandler+0x2ca>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
34004dfa:	687b      	ldr	r3, [r7, #4]
34004dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34004dfe:	6878      	ldr	r0, [r7, #4]
34004e00:	4798      	blx	r3
        }

        return;
34004e02:	e075      	b.n	34004ef0 <HAL_DMA_IRQHandler+0x2ca>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
34004e04:	687b      	ldr	r3, [r7, #4]
34004e06:	2205      	movs	r2, #5
34004e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
34004e0c:	687b      	ldr	r3, [r7, #4]
34004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34004e10:	2b00      	cmp	r3, #0
34004e12:	d003      	beq.n	34004e1c <HAL_DMA_IRQHandler+0x1f6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
34004e14:	687b      	ldr	r3, [r7, #4]
34004e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34004e18:	6878      	ldr	r0, [r7, #4]
34004e1a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
34004e1c:	687b      	ldr	r3, [r7, #4]
34004e1e:	681b      	ldr	r3, [r3, #0]
34004e20:	691b      	ldr	r3, [r3, #16]
34004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004e26:	2b00      	cmp	r3, #0
34004e28:	d039      	beq.n	34004e9e <HAL_DMA_IRQHandler+0x278>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
34004e2a:	687b      	ldr	r3, [r7, #4]
34004e2c:	681b      	ldr	r3, [r3, #0]
34004e2e:	695b      	ldr	r3, [r3, #20]
34004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004e34:	2b00      	cmp	r3, #0
34004e36:	d032      	beq.n	34004e9e <HAL_DMA_IRQHandler+0x278>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34004e38:	687b      	ldr	r3, [r7, #4]
34004e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34004e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004e40:	2b00      	cmp	r3, #0
34004e42:	d012      	beq.n	34004e6a <HAL_DMA_IRQHandler+0x244>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
34004e44:	687b      	ldr	r3, [r7, #4]
34004e46:	681b      	ldr	r3, [r3, #0]
34004e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34004e4a:	2b00      	cmp	r3, #0
34004e4c:	d116      	bne.n	34004e7c <HAL_DMA_IRQHandler+0x256>
        {
          if (hdma->Instance->CBR1 == 0U)
34004e4e:	687b      	ldr	r3, [r7, #4]
34004e50:	681b      	ldr	r3, [r3, #0]
34004e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34004e54:	2b00      	cmp	r3, #0
34004e56:	d111      	bne.n	34004e7c <HAL_DMA_IRQHandler+0x256>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
34004e58:	687b      	ldr	r3, [r7, #4]
34004e5a:	2201      	movs	r2, #1
34004e5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34004e60:	687b      	ldr	r3, [r7, #4]
34004e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34004e64:	2201      	movs	r2, #1
34004e66:	731a      	strb	r2, [r3, #12]
34004e68:	e008      	b.n	34004e7c <HAL_DMA_IRQHandler+0x256>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
34004e6a:	687b      	ldr	r3, [r7, #4]
34004e6c:	681b      	ldr	r3, [r3, #0]
34004e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34004e70:	2b00      	cmp	r3, #0
34004e72:	d103      	bne.n	34004e7c <HAL_DMA_IRQHandler+0x256>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
34004e74:	687b      	ldr	r3, [r7, #4]
34004e76:	2201      	movs	r2, #1
34004e78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
34004e7c:	687b      	ldr	r3, [r7, #4]
34004e7e:	681b      	ldr	r3, [r3, #0]
34004e80:	f44f 7240 	mov.w	r2, #768	@ 0x300
34004e84:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
34004e86:	687b      	ldr	r3, [r7, #4]
34004e88:	2200      	movs	r2, #0
34004e8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
34004e8e:	687b      	ldr	r3, [r7, #4]
34004e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34004e92:	2b00      	cmp	r3, #0
34004e94:	d003      	beq.n	34004e9e <HAL_DMA_IRQHandler+0x278>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
34004e96:	687b      	ldr	r3, [r7, #4]
34004e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34004e9a:	6878      	ldr	r0, [r7, #4]
34004e9c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
34004e9e:	687b      	ldr	r3, [r7, #4]
34004ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34004ea2:	2b00      	cmp	r3, #0
34004ea4:	d025      	beq.n	34004ef2 <HAL_DMA_IRQHandler+0x2cc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
34004ea6:	687b      	ldr	r3, [r7, #4]
34004ea8:	681b      	ldr	r3, [r3, #0]
34004eaa:	695a      	ldr	r2, [r3, #20]
34004eac:	687b      	ldr	r3, [r7, #4]
34004eae:	681b      	ldr	r3, [r3, #0]
34004eb0:	f042 0202 	orr.w	r2, r2, #2
34004eb4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
34004eb6:	687b      	ldr	r3, [r7, #4]
34004eb8:	2201      	movs	r2, #1
34004eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34004ebe:	687b      	ldr	r3, [r7, #4]
34004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34004ec6:	2b00      	cmp	r3, #0
34004ec8:	d003      	beq.n	34004ed2 <HAL_DMA_IRQHandler+0x2ac>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34004eca:	687b      	ldr	r3, [r7, #4]
34004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34004ece:	2201      	movs	r2, #1
34004ed0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34004ed2:	687b      	ldr	r3, [r7, #4]
34004ed4:	2200      	movs	r2, #0
34004ed6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
34004eda:	687b      	ldr	r3, [r7, #4]
34004edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34004ede:	2b00      	cmp	r3, #0
34004ee0:	d007      	beq.n	34004ef2 <HAL_DMA_IRQHandler+0x2cc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
34004ee2:	687b      	ldr	r3, [r7, #4]
34004ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34004ee6:	6878      	ldr	r0, [r7, #4]
34004ee8:	4798      	blx	r3
34004eea:	e002      	b.n	34004ef2 <HAL_DMA_IRQHandler+0x2cc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
34004eec:	bf00      	nop
34004eee:	e000      	b.n	34004ef2 <HAL_DMA_IRQHandler+0x2cc>
        return;
34004ef0:	bf00      	nop
    }
  }
}
34004ef2:	3718      	adds	r7, #24
34004ef4:	46bd      	mov	sp, r7
34004ef6:	bd80      	pop	{r7, pc}

34004ef8 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
34004ef8:	b480      	push	{r7}
34004efa:	b083      	sub	sp, #12
34004efc:	af00      	add	r7, sp, #0
34004efe:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
34004f00:	687b      	ldr	r3, [r7, #4]
34004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
34004f04:	4618      	mov	r0, r3
34004f06:	370c      	adds	r7, #12
34004f08:	46bd      	mov	sp, r7
34004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f0e:	4770      	bx	lr

34004f10 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
34004f10:	b480      	push	{r7}
34004f12:	b085      	sub	sp, #20
34004f14:	af00      	add	r7, sp, #0
34004f16:	60f8      	str	r0, [r7, #12]
34004f18:	60b9      	str	r1, [r7, #8]
34004f1a:	607a      	str	r2, [r7, #4]
34004f1c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
34004f1e:	68fb      	ldr	r3, [r7, #12]
34004f20:	681b      	ldr	r3, [r3, #0]
34004f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34004f24:	0c1b      	lsrs	r3, r3, #16
34004f26:	041b      	lsls	r3, r3, #16
34004f28:	683a      	ldr	r2, [r7, #0]
34004f2a:	b291      	uxth	r1, r2
34004f2c:	68fa      	ldr	r2, [r7, #12]
34004f2e:	6812      	ldr	r2, [r2, #0]
34004f30:	430b      	orrs	r3, r1
34004f32:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34004f34:	68fb      	ldr	r3, [r7, #12]
34004f36:	681b      	ldr	r3, [r3, #0]
34004f38:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34004f3c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
34004f3e:	68fb      	ldr	r3, [r7, #12]
34004f40:	681b      	ldr	r3, [r3, #0]
34004f42:	68ba      	ldr	r2, [r7, #8]
34004f44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
34004f46:	68fb      	ldr	r3, [r7, #12]
34004f48:	681b      	ldr	r3, [r3, #0]
34004f4a:	687a      	ldr	r2, [r7, #4]
34004f4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
34004f4e:	bf00      	nop
34004f50:	3714      	adds	r7, #20
34004f52:	46bd      	mov	sp, r7
34004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
34004f58:	4770      	bx	lr

34004f5a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
34004f5a:	b580      	push	{r7, lr}
34004f5c:	b084      	sub	sp, #16
34004f5e:	af00      	add	r7, sp, #0
34004f60:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
34004f62:	687b      	ldr	r3, [r7, #4]
34004f64:	681b      	ldr	r3, [r3, #0]
34004f66:	685b      	ldr	r3, [r3, #4]
34004f68:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
34004f6a:	687b      	ldr	r3, [r7, #4]
34004f6c:	681b      	ldr	r3, [r3, #0]
34004f6e:	681b      	ldr	r3, [r3, #0]
34004f70:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
34004f72:	68fb      	ldr	r3, [r7, #12]
34004f74:	f003 0301 	and.w	r3, r3, #1
34004f78:	2b00      	cmp	r3, #0
34004f7a:	d026      	beq.n	34004fca <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
34004f7c:	68bb      	ldr	r3, [r7, #8]
34004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34004f82:	2b00      	cmp	r3, #0
34004f84:	d021      	beq.n	34004fca <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
34004f86:	687b      	ldr	r3, [r7, #4]
34004f88:	681b      	ldr	r3, [r3, #0]
34004f8a:	681a      	ldr	r2, [r3, #0]
34004f8c:	687b      	ldr	r3, [r7, #4]
34004f8e:	681b      	ldr	r3, [r3, #0]
34004f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34004f94:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34004f96:	687b      	ldr	r3, [r7, #4]
34004f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34004f9a:	f043 0201 	orr.w	r2, r3, #1
34004f9e:	687b      	ldr	r3, [r7, #4]
34004fa0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
34004fa2:	687b      	ldr	r3, [r7, #4]
34004fa4:	681b      	ldr	r3, [r3, #0]
34004fa6:	2201      	movs	r2, #1
34004fa8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34004faa:	687b      	ldr	r3, [r7, #4]
34004fac:	2204      	movs	r2, #4
34004fae:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34004fb2:	687b      	ldr	r3, [r7, #4]
34004fb4:	2200      	movs	r2, #0
34004fb6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34004fba:	687b      	ldr	r3, [r7, #4]
34004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34004fbe:	2b00      	cmp	r3, #0
34004fc0:	d003      	beq.n	34004fca <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34004fc2:	687b      	ldr	r3, [r7, #4]
34004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34004fc6:	6878      	ldr	r0, [r7, #4]
34004fc8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
34004fca:	68fb      	ldr	r3, [r7, #12]
34004fcc:	f003 0320 	and.w	r3, r3, #32
34004fd0:	2b00      	cmp	r3, #0
34004fd2:	d026      	beq.n	34005022 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
34004fd4:	68bb      	ldr	r3, [r7, #8]
34004fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34004fda:	2b00      	cmp	r3, #0
34004fdc:	d021      	beq.n	34005022 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
34004fde:	687b      	ldr	r3, [r7, #4]
34004fe0:	681b      	ldr	r3, [r3, #0]
34004fe2:	681a      	ldr	r2, [r3, #0]
34004fe4:	687b      	ldr	r3, [r7, #4]
34004fe6:	681b      	ldr	r3, [r3, #0]
34004fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
34004fec:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
34004fee:	687b      	ldr	r3, [r7, #4]
34004ff0:	681b      	ldr	r3, [r3, #0]
34004ff2:	2220      	movs	r2, #32
34004ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
34004ff6:	687b      	ldr	r3, [r7, #4]
34004ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34004ffa:	f043 0202 	orr.w	r2, r3, #2
34004ffe:	687b      	ldr	r3, [r7, #4]
34005000:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
34005002:	687b      	ldr	r3, [r7, #4]
34005004:	2204      	movs	r2, #4
34005006:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
3400500a:	687b      	ldr	r3, [r7, #4]
3400500c:	2200      	movs	r2, #0
3400500e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
34005012:	687b      	ldr	r3, [r7, #4]
34005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005016:	2b00      	cmp	r3, #0
34005018:	d003      	beq.n	34005022 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
3400501a:	687b      	ldr	r3, [r7, #4]
3400501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400501e:	6878      	ldr	r0, [r7, #4]
34005020:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
34005022:	68fb      	ldr	r3, [r7, #12]
34005024:	f003 0308 	and.w	r3, r3, #8
34005028:	2b00      	cmp	r3, #0
3400502a:	d026      	beq.n	3400507a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
3400502c:	68bb      	ldr	r3, [r7, #8]
3400502e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005032:	2b00      	cmp	r3, #0
34005034:	d021      	beq.n	3400507a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
34005036:	687b      	ldr	r3, [r7, #4]
34005038:	681b      	ldr	r3, [r3, #0]
3400503a:	681a      	ldr	r2, [r3, #0]
3400503c:	687b      	ldr	r3, [r7, #4]
3400503e:	681b      	ldr	r3, [r3, #0]
34005040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34005044:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
34005046:	687b      	ldr	r3, [r7, #4]
34005048:	681b      	ldr	r3, [r3, #0]
3400504a:	2208      	movs	r2, #8
3400504c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
3400504e:	687b      	ldr	r3, [r7, #4]
34005050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34005052:	f043 0204 	orr.w	r2, r3, #4
34005056:	687b      	ldr	r3, [r7, #4]
34005058:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
3400505a:	687b      	ldr	r3, [r7, #4]
3400505c:	2204      	movs	r2, #4
3400505e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
34005062:	687b      	ldr	r3, [r7, #4]
34005064:	2200      	movs	r2, #0
34005066:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
3400506a:	687b      	ldr	r3, [r7, #4]
3400506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400506e:	2b00      	cmp	r3, #0
34005070:	d003      	beq.n	3400507a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
34005072:	687b      	ldr	r3, [r7, #4]
34005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34005076:	6878      	ldr	r0, [r7, #4]
34005078:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
3400507a:	68fb      	ldr	r3, [r7, #12]
3400507c:	f003 0304 	and.w	r3, r3, #4
34005080:	2b00      	cmp	r3, #0
34005082:	d013      	beq.n	340050ac <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
34005084:	68bb      	ldr	r3, [r7, #8]
34005086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400508a:	2b00      	cmp	r3, #0
3400508c:	d00e      	beq.n	340050ac <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
3400508e:	687b      	ldr	r3, [r7, #4]
34005090:	681b      	ldr	r3, [r3, #0]
34005092:	681a      	ldr	r2, [r3, #0]
34005094:	687b      	ldr	r3, [r7, #4]
34005096:	681b      	ldr	r3, [r3, #0]
34005098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
3400509c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
3400509e:	687b      	ldr	r3, [r7, #4]
340050a0:	681b      	ldr	r3, [r3, #0]
340050a2:	2204      	movs	r2, #4
340050a4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
340050a6:	6878      	ldr	r0, [r7, #4]
340050a8:	f000 f853 	bl	34005152 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
340050ac:	68fb      	ldr	r3, [r7, #12]
340050ae:	f003 0302 	and.w	r3, r3, #2
340050b2:	2b00      	cmp	r3, #0
340050b4:	d024      	beq.n	34005100 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
340050b6:	68bb      	ldr	r3, [r7, #8]
340050b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340050bc:	2b00      	cmp	r3, #0
340050be:	d01f      	beq.n	34005100 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
340050c0:	687b      	ldr	r3, [r7, #4]
340050c2:	681b      	ldr	r3, [r3, #0]
340050c4:	681a      	ldr	r2, [r3, #0]
340050c6:	687b      	ldr	r3, [r7, #4]
340050c8:	681b      	ldr	r3, [r3, #0]
340050ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340050ce:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
340050d0:	687b      	ldr	r3, [r7, #4]
340050d2:	681b      	ldr	r3, [r3, #0]
340050d4:	2202      	movs	r2, #2
340050d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
340050d8:	687b      	ldr	r3, [r7, #4]
340050da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340050dc:	687b      	ldr	r3, [r7, #4]
340050de:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
340050e0:	687b      	ldr	r3, [r7, #4]
340050e2:	2201      	movs	r2, #1
340050e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
340050e8:	687b      	ldr	r3, [r7, #4]
340050ea:	2200      	movs	r2, #0
340050ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
340050f0:	687b      	ldr	r3, [r7, #4]
340050f2:	6a1b      	ldr	r3, [r3, #32]
340050f4:	2b00      	cmp	r3, #0
340050f6:	d003      	beq.n	34005100 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
340050f8:	687b      	ldr	r3, [r7, #4]
340050fa:	6a1b      	ldr	r3, [r3, #32]
340050fc:	6878      	ldr	r0, [r7, #4]
340050fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
34005100:	68fb      	ldr	r3, [r7, #12]
34005102:	f003 0310 	and.w	r3, r3, #16
34005106:	2b00      	cmp	r3, #0
34005108:	d01f      	beq.n	3400514a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
3400510a:	68bb      	ldr	r3, [r7, #8]
3400510c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34005110:	2b00      	cmp	r3, #0
34005112:	d01a      	beq.n	3400514a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
34005114:	687b      	ldr	r3, [r7, #4]
34005116:	681b      	ldr	r3, [r3, #0]
34005118:	681a      	ldr	r2, [r3, #0]
3400511a:	687b      	ldr	r3, [r7, #4]
3400511c:	681b      	ldr	r3, [r3, #0]
3400511e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34005122:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
34005124:	687b      	ldr	r3, [r7, #4]
34005126:	681b      	ldr	r3, [r3, #0]
34005128:	2210      	movs	r2, #16
3400512a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
3400512c:	687b      	ldr	r3, [r7, #4]
3400512e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
34005130:	687b      	ldr	r3, [r7, #4]
34005132:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
34005134:	687b      	ldr	r3, [r7, #4]
34005136:	2201      	movs	r2, #1
34005138:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
3400513c:	687b      	ldr	r3, [r7, #4]
3400513e:	2200      	movs	r2, #0
34005140:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
34005144:	6878      	ldr	r0, [r7, #4]
34005146:	f000 f80e 	bl	34005166 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
3400514a:	bf00      	nop
3400514c:	3710      	adds	r7, #16
3400514e:	46bd      	mov	sp, r7
34005150:	bd80      	pop	{r7, pc}

34005152 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
34005152:	b480      	push	{r7}
34005154:	b083      	sub	sp, #12
34005156:	af00      	add	r7, sp, #0
34005158:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
3400515a:	bf00      	nop
3400515c:	370c      	adds	r7, #12
3400515e:	46bd      	mov	sp, r7
34005160:	f85d 7b04 	ldr.w	r7, [sp], #4
34005164:	4770      	bx	lr

34005166 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
34005166:	b480      	push	{r7}
34005168:	b083      	sub	sp, #12
3400516a:	af00      	add	r7, sp, #0
3400516c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
3400516e:	bf00      	nop
34005170:	370c      	adds	r7, #12
34005172:	46bd      	mov	sp, r7
34005174:	f85d 7b04 	ldr.w	r7, [sp], #4
34005178:	4770      	bx	lr

3400517a <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
3400517a:	b580      	push	{r7, lr}
3400517c:	b086      	sub	sp, #24
3400517e:	af00      	add	r7, sp, #0
34005180:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
34005182:	687b      	ldr	r3, [r7, #4]
34005184:	2b00      	cmp	r3, #0
34005186:	d003      	beq.n	34005190 <HAL_DMAEx_List_Start_IT+0x16>
34005188:	687b      	ldr	r3, [r7, #4]
3400518a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400518c:	2b00      	cmp	r3, #0
3400518e:	d101      	bne.n	34005194 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
34005190:	2301      	movs	r3, #1
34005192:	e082      	b.n	3400529a <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
34005194:	687b      	ldr	r3, [r7, #4]
34005196:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
3400519a:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
3400519c:	687b      	ldr	r3, [r7, #4]
3400519e:	681b      	ldr	r3, [r3, #0]
340051a0:	695b      	ldr	r3, [r3, #20]
340051a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340051a6:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
340051a8:	7dfb      	ldrb	r3, [r7, #23]
340051aa:	2b01      	cmp	r3, #1
340051ac:	d005      	beq.n	340051ba <HAL_DMAEx_List_Start_IT+0x40>
340051ae:	7dfb      	ldrb	r3, [r7, #23]
340051b0:	2b02      	cmp	r3, #2
340051b2:	d16a      	bne.n	3400528a <HAL_DMAEx_List_Start_IT+0x110>
340051b4:	693b      	ldr	r3, [r7, #16]
340051b6:	2b00      	cmp	r3, #0
340051b8:	d067      	beq.n	3400528a <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
340051ba:	687b      	ldr	r3, [r7, #4]
340051bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
340051c0:	b2db      	uxtb	r3, r3
340051c2:	2b01      	cmp	r3, #1
340051c4:	d157      	bne.n	34005276 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
340051c6:	687b      	ldr	r3, [r7, #4]
340051c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
340051cc:	2b01      	cmp	r3, #1
340051ce:	d101      	bne.n	340051d4 <HAL_DMAEx_List_Start_IT+0x5a>
340051d0:	2302      	movs	r3, #2
340051d2:	e062      	b.n	3400529a <HAL_DMAEx_List_Start_IT+0x120>
340051d4:	687b      	ldr	r3, [r7, #4]
340051d6:	2201      	movs	r2, #1
340051d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
340051dc:	687b      	ldr	r3, [r7, #4]
340051de:	2202      	movs	r2, #2
340051e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
340051e4:	687b      	ldr	r3, [r7, #4]
340051e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340051e8:	2202      	movs	r2, #2
340051ea:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
340051ec:	687b      	ldr	r3, [r7, #4]
340051ee:	2200      	movs	r2, #0
340051f0:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
340051f2:	687b      	ldr	r3, [r7, #4]
340051f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340051f6:	2200      	movs	r2, #0
340051f8:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
340051fa:	687b      	ldr	r3, [r7, #4]
340051fc:	681b      	ldr	r3, [r3, #0]
340051fe:	695a      	ldr	r2, [r3, #20]
34005200:	687b      	ldr	r3, [r7, #4]
34005202:	681b      	ldr	r3, [r3, #0]
34005204:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
34005208:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
3400520a:	687b      	ldr	r3, [r7, #4]
3400520c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400520e:	2b00      	cmp	r3, #0
34005210:	d007      	beq.n	34005222 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
34005212:	687b      	ldr	r3, [r7, #4]
34005214:	681b      	ldr	r3, [r3, #0]
34005216:	695a      	ldr	r2, [r3, #20]
34005218:	687b      	ldr	r3, [r7, #4]
3400521a:	681b      	ldr	r3, [r3, #0]
3400521c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34005220:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
34005222:	687b      	ldr	r3, [r7, #4]
34005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34005226:	2b00      	cmp	r3, #0
34005228:	d007      	beq.n	3400523a <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
3400522a:	687b      	ldr	r3, [r7, #4]
3400522c:	681b      	ldr	r3, [r3, #0]
3400522e:	695a      	ldr	r2, [r3, #20]
34005230:	687b      	ldr	r3, [r7, #4]
34005232:	681b      	ldr	r3, [r3, #0]
34005234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
34005238:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
3400523a:	687b      	ldr	r3, [r7, #4]
3400523c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400523e:	681b      	ldr	r3, [r3, #0]
34005240:	f107 010c 	add.w	r1, r7, #12
34005244:	2200      	movs	r2, #0
34005246:	4618      	mov	r0, r3
34005248:	f000 f82c 	bl	340052a4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
3400524c:	687b      	ldr	r3, [r7, #4]
3400524e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005250:	681b      	ldr	r3, [r3, #0]
34005252:	4619      	mov	r1, r3
34005254:	687b      	ldr	r3, [r7, #4]
34005256:	681a      	ldr	r2, [r3, #0]
34005258:	0c0b      	lsrs	r3, r1, #16
3400525a:	041b      	lsls	r3, r3, #16
3400525c:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
3400525e:	687b      	ldr	r3, [r7, #4]
34005260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005262:	681b      	ldr	r3, [r3, #0]
34005264:	461a      	mov	r2, r3
34005266:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
3400526a:	4013      	ands	r3, r2
3400526c:	68f9      	ldr	r1, [r7, #12]
3400526e:	687a      	ldr	r2, [r7, #4]
34005270:	6812      	ldr	r2, [r2, #0]
34005272:	430b      	orrs	r3, r1
34005274:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
34005276:	687b      	ldr	r3, [r7, #4]
34005278:	681b      	ldr	r3, [r3, #0]
3400527a:	695a      	ldr	r2, [r3, #20]
3400527c:	687b      	ldr	r3, [r7, #4]
3400527e:	681b      	ldr	r3, [r3, #0]
34005280:	f042 0201 	orr.w	r2, r2, #1
34005284:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
34005286:	2300      	movs	r3, #0
34005288:	e007      	b.n	3400529a <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
3400528a:	687b      	ldr	r3, [r7, #4]
3400528c:	2240      	movs	r2, #64	@ 0x40
3400528e:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
34005290:	687b      	ldr	r3, [r7, #4]
34005292:	2200      	movs	r2, #0
34005294:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
34005298:	2301      	movs	r3, #1
}
3400529a:	4618      	mov	r0, r3
3400529c:	3718      	adds	r7, #24
3400529e:	46bd      	mov	sp, r7
340052a0:	bd80      	pop	{r7, pc}
	...

340052a4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
340052a4:	b480      	push	{r7}
340052a6:	b085      	sub	sp, #20
340052a8:	af00      	add	r7, sp, #0
340052aa:	60f8      	str	r0, [r7, #12]
340052ac:	60b9      	str	r1, [r7, #8]
340052ae:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
340052b0:	68fb      	ldr	r3, [r7, #12]
340052b2:	6a1b      	ldr	r3, [r3, #32]
340052b4:	f003 0302 	and.w	r3, r3, #2
340052b8:	2b00      	cmp	r3, #0
340052ba:	d00c      	beq.n	340052d6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
340052bc:	68bb      	ldr	r3, [r7, #8]
340052be:	2b00      	cmp	r3, #0
340052c0:	d002      	beq.n	340052c8 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
340052c2:	68bb      	ldr	r3, [r7, #8]
340052c4:	4a0d      	ldr	r2, [pc, #52]	@ (340052fc <DMA_List_GetCLLRNodeInfo+0x58>)
340052c6:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
340052c8:	687b      	ldr	r3, [r7, #4]
340052ca:	2b00      	cmp	r3, #0
340052cc:	d00f      	beq.n	340052ee <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
340052ce:	687b      	ldr	r3, [r7, #4]
340052d0:	2207      	movs	r2, #7
340052d2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
340052d4:	e00b      	b.n	340052ee <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
340052d6:	68bb      	ldr	r3, [r7, #8]
340052d8:	2b00      	cmp	r3, #0
340052da:	d002      	beq.n	340052e2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
340052dc:	68bb      	ldr	r3, [r7, #8]
340052de:	4a08      	ldr	r2, [pc, #32]	@ (34005300 <DMA_List_GetCLLRNodeInfo+0x5c>)
340052e0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
340052e2:	687b      	ldr	r3, [r7, #4]
340052e4:	2b00      	cmp	r3, #0
340052e6:	d002      	beq.n	340052ee <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
340052e8:	687b      	ldr	r3, [r7, #4]
340052ea:	2205      	movs	r2, #5
340052ec:	601a      	str	r2, [r3, #0]
}
340052ee:	bf00      	nop
340052f0:	3714      	adds	r7, #20
340052f2:	46bd      	mov	sp, r7
340052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340052f8:	4770      	bx	lr
340052fa:	bf00      	nop
340052fc:	fe010000 	.word	0xfe010000
34005300:	f8010000 	.word	0xf8010000

34005304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34005304:	b580      	push	{r7, lr}
34005306:	b086      	sub	sp, #24
34005308:	af00      	add	r7, sp, #0
3400530a:	6078      	str	r0, [r7, #4]
3400530c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
3400530e:	2300      	movs	r3, #0
34005310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34005312:	687b      	ldr	r3, [r7, #4]
34005314:	4a5b      	ldr	r2, [pc, #364]	@ (34005484 <HAL_GPIO_Init+0x180>)
34005316:	4293      	cmp	r3, r2
34005318:	d05f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400531a:	687b      	ldr	r3, [r7, #4]
3400531c:	4a5a      	ldr	r2, [pc, #360]	@ (34005488 <HAL_GPIO_Init+0x184>)
3400531e:	4293      	cmp	r3, r2
34005320:	d05b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005322:	687b      	ldr	r3, [r7, #4]
34005324:	4a59      	ldr	r2, [pc, #356]	@ (3400548c <HAL_GPIO_Init+0x188>)
34005326:	4293      	cmp	r3, r2
34005328:	d057      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400532a:	687b      	ldr	r3, [r7, #4]
3400532c:	4a58      	ldr	r2, [pc, #352]	@ (34005490 <HAL_GPIO_Init+0x18c>)
3400532e:	4293      	cmp	r3, r2
34005330:	d053      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005332:	687b      	ldr	r3, [r7, #4]
34005334:	4a57      	ldr	r2, [pc, #348]	@ (34005494 <HAL_GPIO_Init+0x190>)
34005336:	4293      	cmp	r3, r2
34005338:	d04f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400533a:	687b      	ldr	r3, [r7, #4]
3400533c:	4a56      	ldr	r2, [pc, #344]	@ (34005498 <HAL_GPIO_Init+0x194>)
3400533e:	4293      	cmp	r3, r2
34005340:	d04b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005342:	687b      	ldr	r3, [r7, #4]
34005344:	4a55      	ldr	r2, [pc, #340]	@ (3400549c <HAL_GPIO_Init+0x198>)
34005346:	4293      	cmp	r3, r2
34005348:	d047      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400534a:	687b      	ldr	r3, [r7, #4]
3400534c:	4a54      	ldr	r2, [pc, #336]	@ (340054a0 <HAL_GPIO_Init+0x19c>)
3400534e:	4293      	cmp	r3, r2
34005350:	d043      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005352:	687b      	ldr	r3, [r7, #4]
34005354:	4a53      	ldr	r2, [pc, #332]	@ (340054a4 <HAL_GPIO_Init+0x1a0>)
34005356:	4293      	cmp	r3, r2
34005358:	d03f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400535a:	687b      	ldr	r3, [r7, #4]
3400535c:	4a52      	ldr	r2, [pc, #328]	@ (340054a8 <HAL_GPIO_Init+0x1a4>)
3400535e:	4293      	cmp	r3, r2
34005360:	d03b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005362:	687b      	ldr	r3, [r7, #4]
34005364:	4a51      	ldr	r2, [pc, #324]	@ (340054ac <HAL_GPIO_Init+0x1a8>)
34005366:	4293      	cmp	r3, r2
34005368:	d037      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400536a:	687b      	ldr	r3, [r7, #4]
3400536c:	4a50      	ldr	r2, [pc, #320]	@ (340054b0 <HAL_GPIO_Init+0x1ac>)
3400536e:	4293      	cmp	r3, r2
34005370:	d033      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005372:	687b      	ldr	r3, [r7, #4]
34005374:	4a4f      	ldr	r2, [pc, #316]	@ (340054b4 <HAL_GPIO_Init+0x1b0>)
34005376:	4293      	cmp	r3, r2
34005378:	d02f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400537a:	687b      	ldr	r3, [r7, #4]
3400537c:	4a4e      	ldr	r2, [pc, #312]	@ (340054b8 <HAL_GPIO_Init+0x1b4>)
3400537e:	4293      	cmp	r3, r2
34005380:	d02b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005382:	687b      	ldr	r3, [r7, #4]
34005384:	4a4d      	ldr	r2, [pc, #308]	@ (340054bc <HAL_GPIO_Init+0x1b8>)
34005386:	4293      	cmp	r3, r2
34005388:	d027      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400538a:	687b      	ldr	r3, [r7, #4]
3400538c:	4a4c      	ldr	r2, [pc, #304]	@ (340054c0 <HAL_GPIO_Init+0x1bc>)
3400538e:	4293      	cmp	r3, r2
34005390:	d023      	beq.n	340053da <HAL_GPIO_Init+0xd6>
34005392:	687b      	ldr	r3, [r7, #4]
34005394:	4a4b      	ldr	r2, [pc, #300]	@ (340054c4 <HAL_GPIO_Init+0x1c0>)
34005396:	4293      	cmp	r3, r2
34005398:	d01f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
3400539a:	687b      	ldr	r3, [r7, #4]
3400539c:	4a4a      	ldr	r2, [pc, #296]	@ (340054c8 <HAL_GPIO_Init+0x1c4>)
3400539e:	4293      	cmp	r3, r2
340053a0:	d01b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053a2:	687b      	ldr	r3, [r7, #4]
340053a4:	4a49      	ldr	r2, [pc, #292]	@ (340054cc <HAL_GPIO_Init+0x1c8>)
340053a6:	4293      	cmp	r3, r2
340053a8:	d017      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053aa:	687b      	ldr	r3, [r7, #4]
340053ac:	4a48      	ldr	r2, [pc, #288]	@ (340054d0 <HAL_GPIO_Init+0x1cc>)
340053ae:	4293      	cmp	r3, r2
340053b0:	d013      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053b2:	687b      	ldr	r3, [r7, #4]
340053b4:	4a47      	ldr	r2, [pc, #284]	@ (340054d4 <HAL_GPIO_Init+0x1d0>)
340053b6:	4293      	cmp	r3, r2
340053b8:	d00f      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053ba:	687b      	ldr	r3, [r7, #4]
340053bc:	4a46      	ldr	r2, [pc, #280]	@ (340054d8 <HAL_GPIO_Init+0x1d4>)
340053be:	4293      	cmp	r3, r2
340053c0:	d00b      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053c2:	687b      	ldr	r3, [r7, #4]
340053c4:	4a45      	ldr	r2, [pc, #276]	@ (340054dc <HAL_GPIO_Init+0x1d8>)
340053c6:	4293      	cmp	r3, r2
340053c8:	d007      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053ca:	687b      	ldr	r3, [r7, #4]
340053cc:	4a44      	ldr	r2, [pc, #272]	@ (340054e0 <HAL_GPIO_Init+0x1dc>)
340053ce:	4293      	cmp	r3, r2
340053d0:	d003      	beq.n	340053da <HAL_GPIO_Init+0xd6>
340053d2:	21ad      	movs	r1, #173	@ 0xad
340053d4:	4843      	ldr	r0, [pc, #268]	@ (340054e4 <HAL_GPIO_Init+0x1e0>)
340053d6:	f7fc f929 	bl	3400162c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
340053da:	683b      	ldr	r3, [r7, #0]
340053dc:	681b      	ldr	r3, [r3, #0]
340053de:	b29b      	uxth	r3, r3
340053e0:	2b00      	cmp	r3, #0
340053e2:	d004      	beq.n	340053ee <HAL_GPIO_Init+0xea>
340053e4:	683b      	ldr	r3, [r7, #0]
340053e6:	681b      	ldr	r3, [r3, #0]
340053e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340053ec:	d303      	bcc.n	340053f6 <HAL_GPIO_Init+0xf2>
340053ee:	21ae      	movs	r1, #174	@ 0xae
340053f0:	483c      	ldr	r0, [pc, #240]	@ (340054e4 <HAL_GPIO_Init+0x1e0>)
340053f2:	f7fc f91b 	bl	3400162c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
340053f6:	683b      	ldr	r3, [r7, #0]
340053f8:	685b      	ldr	r3, [r3, #4]
340053fa:	2b00      	cmp	r3, #0
340053fc:	f000 82bb 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005400:	683b      	ldr	r3, [r7, #0]
34005402:	685b      	ldr	r3, [r3, #4]
34005404:	2b01      	cmp	r3, #1
34005406:	f000 82b6 	beq.w	34005976 <HAL_GPIO_Init+0x672>
3400540a:	683b      	ldr	r3, [r7, #0]
3400540c:	685b      	ldr	r3, [r3, #4]
3400540e:	2b11      	cmp	r3, #17
34005410:	f000 82b1 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005414:	683b      	ldr	r3, [r7, #0]
34005416:	685b      	ldr	r3, [r3, #4]
34005418:	2b02      	cmp	r3, #2
3400541a:	f000 82ac 	beq.w	34005976 <HAL_GPIO_Init+0x672>
3400541e:	683b      	ldr	r3, [r7, #0]
34005420:	685b      	ldr	r3, [r3, #4]
34005422:	2b12      	cmp	r3, #18
34005424:	f000 82a7 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005428:	683b      	ldr	r3, [r7, #0]
3400542a:	685b      	ldr	r3, [r3, #4]
3400542c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34005430:	f000 82a1 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005434:	683b      	ldr	r3, [r7, #0]
34005436:	685b      	ldr	r3, [r3, #4]
34005438:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
3400543c:	f000 829b 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005440:	683b      	ldr	r3, [r7, #0]
34005442:	685b      	ldr	r3, [r3, #4]
34005444:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34005448:	f000 8295 	beq.w	34005976 <HAL_GPIO_Init+0x672>
3400544c:	683b      	ldr	r3, [r7, #0]
3400544e:	685b      	ldr	r3, [r3, #4]
34005450:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34005454:	f000 828f 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005458:	683b      	ldr	r3, [r7, #0]
3400545a:	685b      	ldr	r3, [r3, #4]
3400545c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34005460:	f000 8289 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005464:	683b      	ldr	r3, [r7, #0]
34005466:	685b      	ldr	r3, [r3, #4]
34005468:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
3400546c:	f000 8283 	beq.w	34005976 <HAL_GPIO_Init+0x672>
34005470:	683b      	ldr	r3, [r7, #0]
34005472:	685b      	ldr	r3, [r3, #4]
34005474:	2b03      	cmp	r3, #3
34005476:	f000 827e 	beq.w	34005976 <HAL_GPIO_Init+0x672>
3400547a:	21af      	movs	r1, #175	@ 0xaf
3400547c:	4819      	ldr	r0, [pc, #100]	@ (340054e4 <HAL_GPIO_Init+0x1e0>)
3400547e:	f7fc f8d5 	bl	3400162c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34005482:	e278      	b.n	34005976 <HAL_GPIO_Init+0x672>
34005484:	56020000 	.word	0x56020000
34005488:	46020000 	.word	0x46020000
3400548c:	56020400 	.word	0x56020400
34005490:	46020400 	.word	0x46020400
34005494:	56020800 	.word	0x56020800
34005498:	46020800 	.word	0x46020800
3400549c:	56020c00 	.word	0x56020c00
340054a0:	46020c00 	.word	0x46020c00
340054a4:	56021000 	.word	0x56021000
340054a8:	46021000 	.word	0x46021000
340054ac:	56021400 	.word	0x56021400
340054b0:	46021400 	.word	0x46021400
340054b4:	56021800 	.word	0x56021800
340054b8:	46021800 	.word	0x46021800
340054bc:	56021c00 	.word	0x56021c00
340054c0:	46021c00 	.word	0x46021c00
340054c4:	56023400 	.word	0x56023400
340054c8:	46023400 	.word	0x46023400
340054cc:	56023800 	.word	0x56023800
340054d0:	46023800 	.word	0x46023800
340054d4:	56023c00 	.word	0x56023c00
340054d8:	46023c00 	.word	0x46023c00
340054dc:	56024000 	.word	0x56024000
340054e0:	46024000 	.word	0x46024000
340054e4:	3401ab6c 	.word	0x3401ab6c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
340054e8:	683b      	ldr	r3, [r7, #0]
340054ea:	681a      	ldr	r2, [r3, #0]
340054ec:	2101      	movs	r1, #1
340054ee:	697b      	ldr	r3, [r7, #20]
340054f0:	fa01 f303 	lsl.w	r3, r1, r3
340054f4:	4013      	ands	r3, r2
340054f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
340054f8:	68fb      	ldr	r3, [r7, #12]
340054fa:	2b00      	cmp	r3, #0
340054fc:	f000 8238 	beq.w	34005970 <HAL_GPIO_Init+0x66c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34005500:	683b      	ldr	r3, [r7, #0]
34005502:	685b      	ldr	r3, [r3, #4]
34005504:	f003 0303 	and.w	r3, r3, #3
34005508:	2b01      	cmp	r3, #1
3400550a:	d005      	beq.n	34005518 <HAL_GPIO_Init+0x214>
3400550c:	683b      	ldr	r3, [r7, #0]
3400550e:	685b      	ldr	r3, [r3, #4]
34005510:	f003 0303 	and.w	r3, r3, #3
34005514:	2b02      	cmp	r3, #2
34005516:	d144      	bne.n	340055a2 <HAL_GPIO_Init+0x29e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34005518:	683b      	ldr	r3, [r7, #0]
3400551a:	68db      	ldr	r3, [r3, #12]
3400551c:	2b00      	cmp	r3, #0
3400551e:	d00f      	beq.n	34005540 <HAL_GPIO_Init+0x23c>
34005520:	683b      	ldr	r3, [r7, #0]
34005522:	68db      	ldr	r3, [r3, #12]
34005524:	2b01      	cmp	r3, #1
34005526:	d00b      	beq.n	34005540 <HAL_GPIO_Init+0x23c>
34005528:	683b      	ldr	r3, [r7, #0]
3400552a:	68db      	ldr	r3, [r3, #12]
3400552c:	2b02      	cmp	r3, #2
3400552e:	d007      	beq.n	34005540 <HAL_GPIO_Init+0x23c>
34005530:	683b      	ldr	r3, [r7, #0]
34005532:	68db      	ldr	r3, [r3, #12]
34005534:	2b03      	cmp	r3, #3
34005536:	d003      	beq.n	34005540 <HAL_GPIO_Init+0x23c>
34005538:	21be      	movs	r1, #190	@ 0xbe
3400553a:	4896      	ldr	r0, [pc, #600]	@ (34005794 <HAL_GPIO_Init+0x490>)
3400553c:	f7fc f876 	bl	3400162c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34005540:	687b      	ldr	r3, [r7, #4]
34005542:	689b      	ldr	r3, [r3, #8]
34005544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005546:	697b      	ldr	r3, [r7, #20]
34005548:	005b      	lsls	r3, r3, #1
3400554a:	2203      	movs	r2, #3
3400554c:	fa02 f303 	lsl.w	r3, r2, r3
34005550:	43db      	mvns	r3, r3
34005552:	693a      	ldr	r2, [r7, #16]
34005554:	4013      	ands	r3, r2
34005556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34005558:	683b      	ldr	r3, [r7, #0]
3400555a:	68da      	ldr	r2, [r3, #12]
3400555c:	697b      	ldr	r3, [r7, #20]
3400555e:	005b      	lsls	r3, r3, #1
34005560:	fa02 f303 	lsl.w	r3, r2, r3
34005564:	693a      	ldr	r2, [r7, #16]
34005566:	4313      	orrs	r3, r2
34005568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
3400556a:	687b      	ldr	r3, [r7, #4]
3400556c:	693a      	ldr	r2, [r7, #16]
3400556e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34005570:	687b      	ldr	r3, [r7, #4]
34005572:	685b      	ldr	r3, [r3, #4]
34005574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34005576:	2201      	movs	r2, #1
34005578:	697b      	ldr	r3, [r7, #20]
3400557a:	fa02 f303 	lsl.w	r3, r2, r3
3400557e:	43db      	mvns	r3, r3
34005580:	693a      	ldr	r2, [r7, #16]
34005582:	4013      	ands	r3, r2
34005584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34005586:	683b      	ldr	r3, [r7, #0]
34005588:	685b      	ldr	r3, [r3, #4]
3400558a:	091b      	lsrs	r3, r3, #4
3400558c:	f003 0201 	and.w	r2, r3, #1
34005590:	697b      	ldr	r3, [r7, #20]
34005592:	fa02 f303 	lsl.w	r3, r2, r3
34005596:	693a      	ldr	r2, [r7, #16]
34005598:	4313      	orrs	r3, r2
3400559a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
3400559c:	687b      	ldr	r3, [r7, #4]
3400559e:	693a      	ldr	r2, [r7, #16]
340055a0:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340055a2:	683b      	ldr	r3, [r7, #0]
340055a4:	685b      	ldr	r3, [r3, #4]
340055a6:	f003 0303 	and.w	r3, r3, #3
340055aa:	2b03      	cmp	r3, #3
340055ac:	d109      	bne.n	340055c2 <HAL_GPIO_Init+0x2be>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
340055ae:	683b      	ldr	r3, [r7, #0]
340055b0:	685b      	ldr	r3, [r3, #4]
340055b2:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340055b6:	2b03      	cmp	r3, #3
340055b8:	d12b      	bne.n	34005612 <HAL_GPIO_Init+0x30e>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
340055ba:	683b      	ldr	r3, [r7, #0]
340055bc:	689b      	ldr	r3, [r3, #8]
340055be:	2b01      	cmp	r3, #1
340055c0:	d027      	beq.n	34005612 <HAL_GPIO_Init+0x30e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
340055c2:	683b      	ldr	r3, [r7, #0]
340055c4:	689b      	ldr	r3, [r3, #8]
340055c6:	2b00      	cmp	r3, #0
340055c8:	d00b      	beq.n	340055e2 <HAL_GPIO_Init+0x2de>
340055ca:	683b      	ldr	r3, [r7, #0]
340055cc:	689b      	ldr	r3, [r3, #8]
340055ce:	2b01      	cmp	r3, #1
340055d0:	d007      	beq.n	340055e2 <HAL_GPIO_Init+0x2de>
340055d2:	683b      	ldr	r3, [r7, #0]
340055d4:	689b      	ldr	r3, [r3, #8]
340055d6:	2b02      	cmp	r3, #2
340055d8:	d003      	beq.n	340055e2 <HAL_GPIO_Init+0x2de>
340055da:	21d1      	movs	r1, #209	@ 0xd1
340055dc:	486d      	ldr	r0, [pc, #436]	@ (34005794 <HAL_GPIO_Init+0x490>)
340055de:	f7fc f825 	bl	3400162c <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
340055e2:	687b      	ldr	r3, [r7, #4]
340055e4:	68db      	ldr	r3, [r3, #12]
340055e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340055e8:	697b      	ldr	r3, [r7, #20]
340055ea:	005b      	lsls	r3, r3, #1
340055ec:	2203      	movs	r2, #3
340055ee:	fa02 f303 	lsl.w	r3, r2, r3
340055f2:	43db      	mvns	r3, r3
340055f4:	693a      	ldr	r2, [r7, #16]
340055f6:	4013      	ands	r3, r2
340055f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
340055fa:	683b      	ldr	r3, [r7, #0]
340055fc:	689a      	ldr	r2, [r3, #8]
340055fe:	697b      	ldr	r3, [r7, #20]
34005600:	005b      	lsls	r3, r3, #1
34005602:	fa02 f303 	lsl.w	r3, r2, r3
34005606:	693a      	ldr	r2, [r7, #16]
34005608:	4313      	orrs	r3, r2
3400560a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
3400560c:	687b      	ldr	r3, [r7, #4]
3400560e:	693a      	ldr	r2, [r7, #16]
34005610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34005612:	683b      	ldr	r3, [r7, #0]
34005614:	685b      	ldr	r3, [r3, #4]
34005616:	f003 0303 	and.w	r3, r3, #3
3400561a:	2b02      	cmp	r3, #2
3400561c:	f040 8090 	bne.w	34005740 <HAL_GPIO_Init+0x43c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34005620:	687b      	ldr	r3, [r7, #4]
34005622:	4a5d      	ldr	r2, [pc, #372]	@ (34005798 <HAL_GPIO_Init+0x494>)
34005624:	4293      	cmp	r3, r2
34005626:	d05f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005628:	687b      	ldr	r3, [r7, #4]
3400562a:	4a5c      	ldr	r2, [pc, #368]	@ (3400579c <HAL_GPIO_Init+0x498>)
3400562c:	4293      	cmp	r3, r2
3400562e:	d05b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005630:	687b      	ldr	r3, [r7, #4]
34005632:	4a5b      	ldr	r2, [pc, #364]	@ (340057a0 <HAL_GPIO_Init+0x49c>)
34005634:	4293      	cmp	r3, r2
34005636:	d057      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005638:	687b      	ldr	r3, [r7, #4]
3400563a:	4a5a      	ldr	r2, [pc, #360]	@ (340057a4 <HAL_GPIO_Init+0x4a0>)
3400563c:	4293      	cmp	r3, r2
3400563e:	d053      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005640:	687b      	ldr	r3, [r7, #4]
34005642:	4a59      	ldr	r2, [pc, #356]	@ (340057a8 <HAL_GPIO_Init+0x4a4>)
34005644:	4293      	cmp	r3, r2
34005646:	d04f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005648:	687b      	ldr	r3, [r7, #4]
3400564a:	4a58      	ldr	r2, [pc, #352]	@ (340057ac <HAL_GPIO_Init+0x4a8>)
3400564c:	4293      	cmp	r3, r2
3400564e:	d04b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005650:	687b      	ldr	r3, [r7, #4]
34005652:	4a57      	ldr	r2, [pc, #348]	@ (340057b0 <HAL_GPIO_Init+0x4ac>)
34005654:	4293      	cmp	r3, r2
34005656:	d047      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005658:	687b      	ldr	r3, [r7, #4]
3400565a:	4a56      	ldr	r2, [pc, #344]	@ (340057b4 <HAL_GPIO_Init+0x4b0>)
3400565c:	4293      	cmp	r3, r2
3400565e:	d043      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005660:	687b      	ldr	r3, [r7, #4]
34005662:	4a55      	ldr	r2, [pc, #340]	@ (340057b8 <HAL_GPIO_Init+0x4b4>)
34005664:	4293      	cmp	r3, r2
34005666:	d03f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005668:	687b      	ldr	r3, [r7, #4]
3400566a:	4a54      	ldr	r2, [pc, #336]	@ (340057bc <HAL_GPIO_Init+0x4b8>)
3400566c:	4293      	cmp	r3, r2
3400566e:	d03b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005670:	687b      	ldr	r3, [r7, #4]
34005672:	4a53      	ldr	r2, [pc, #332]	@ (340057c0 <HAL_GPIO_Init+0x4bc>)
34005674:	4293      	cmp	r3, r2
34005676:	d037      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005678:	687b      	ldr	r3, [r7, #4]
3400567a:	4a52      	ldr	r2, [pc, #328]	@ (340057c4 <HAL_GPIO_Init+0x4c0>)
3400567c:	4293      	cmp	r3, r2
3400567e:	d033      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005680:	687b      	ldr	r3, [r7, #4]
34005682:	4a51      	ldr	r2, [pc, #324]	@ (340057c8 <HAL_GPIO_Init+0x4c4>)
34005684:	4293      	cmp	r3, r2
34005686:	d02f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005688:	687b      	ldr	r3, [r7, #4]
3400568a:	4a50      	ldr	r2, [pc, #320]	@ (340057cc <HAL_GPIO_Init+0x4c8>)
3400568c:	4293      	cmp	r3, r2
3400568e:	d02b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005690:	687b      	ldr	r3, [r7, #4]
34005692:	4a4f      	ldr	r2, [pc, #316]	@ (340057d0 <HAL_GPIO_Init+0x4cc>)
34005694:	4293      	cmp	r3, r2
34005696:	d027      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
34005698:	687b      	ldr	r3, [r7, #4]
3400569a:	4a4e      	ldr	r2, [pc, #312]	@ (340057d4 <HAL_GPIO_Init+0x4d0>)
3400569c:	4293      	cmp	r3, r2
3400569e:	d023      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056a0:	687b      	ldr	r3, [r7, #4]
340056a2:	4a4d      	ldr	r2, [pc, #308]	@ (340057d8 <HAL_GPIO_Init+0x4d4>)
340056a4:	4293      	cmp	r3, r2
340056a6:	d01f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056a8:	687b      	ldr	r3, [r7, #4]
340056aa:	4a4c      	ldr	r2, [pc, #304]	@ (340057dc <HAL_GPIO_Init+0x4d8>)
340056ac:	4293      	cmp	r3, r2
340056ae:	d01b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056b0:	687b      	ldr	r3, [r7, #4]
340056b2:	4a4b      	ldr	r2, [pc, #300]	@ (340057e0 <HAL_GPIO_Init+0x4dc>)
340056b4:	4293      	cmp	r3, r2
340056b6:	d017      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056b8:	687b      	ldr	r3, [r7, #4]
340056ba:	4a4a      	ldr	r2, [pc, #296]	@ (340057e4 <HAL_GPIO_Init+0x4e0>)
340056bc:	4293      	cmp	r3, r2
340056be:	d013      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056c0:	687b      	ldr	r3, [r7, #4]
340056c2:	4a49      	ldr	r2, [pc, #292]	@ (340057e8 <HAL_GPIO_Init+0x4e4>)
340056c4:	4293      	cmp	r3, r2
340056c6:	d00f      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056c8:	687b      	ldr	r3, [r7, #4]
340056ca:	4a48      	ldr	r2, [pc, #288]	@ (340057ec <HAL_GPIO_Init+0x4e8>)
340056cc:	4293      	cmp	r3, r2
340056ce:	d00b      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056d0:	687b      	ldr	r3, [r7, #4]
340056d2:	4a47      	ldr	r2, [pc, #284]	@ (340057f0 <HAL_GPIO_Init+0x4ec>)
340056d4:	4293      	cmp	r3, r2
340056d6:	d007      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056d8:	687b      	ldr	r3, [r7, #4]
340056da:	4a46      	ldr	r2, [pc, #280]	@ (340057f4 <HAL_GPIO_Init+0x4f0>)
340056dc:	4293      	cmp	r3, r2
340056de:	d003      	beq.n	340056e8 <HAL_GPIO_Init+0x3e4>
340056e0:	21de      	movs	r1, #222	@ 0xde
340056e2:	482c      	ldr	r0, [pc, #176]	@ (34005794 <HAL_GPIO_Init+0x490>)
340056e4:	f7fb ffa2 	bl	3400162c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
340056e8:	683b      	ldr	r3, [r7, #0]
340056ea:	691b      	ldr	r3, [r3, #16]
340056ec:	2b0f      	cmp	r3, #15
340056ee:	d903      	bls.n	340056f8 <HAL_GPIO_Init+0x3f4>
340056f0:	21df      	movs	r1, #223	@ 0xdf
340056f2:	4828      	ldr	r0, [pc, #160]	@ (34005794 <HAL_GPIO_Init+0x490>)
340056f4:	f7fb ff9a 	bl	3400162c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
340056f8:	697b      	ldr	r3, [r7, #20]
340056fa:	08da      	lsrs	r2, r3, #3
340056fc:	687b      	ldr	r3, [r7, #4]
340056fe:	3208      	adds	r2, #8
34005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34005704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34005706:	697b      	ldr	r3, [r7, #20]
34005708:	f003 0307 	and.w	r3, r3, #7
3400570c:	009b      	lsls	r3, r3, #2
3400570e:	220f      	movs	r2, #15
34005710:	fa02 f303 	lsl.w	r3, r2, r3
34005714:	43db      	mvns	r3, r3
34005716:	693a      	ldr	r2, [r7, #16]
34005718:	4013      	ands	r3, r2
3400571a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3400571c:	683b      	ldr	r3, [r7, #0]
3400571e:	691a      	ldr	r2, [r3, #16]
34005720:	697b      	ldr	r3, [r7, #20]
34005722:	f003 0307 	and.w	r3, r3, #7
34005726:	009b      	lsls	r3, r3, #2
34005728:	fa02 f303 	lsl.w	r3, r2, r3
3400572c:	693a      	ldr	r2, [r7, #16]
3400572e:	4313      	orrs	r3, r2
34005730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34005732:	697b      	ldr	r3, [r7, #20]
34005734:	08da      	lsrs	r2, r3, #3
34005736:	687b      	ldr	r3, [r7, #4]
34005738:	3208      	adds	r2, #8
3400573a:	6939      	ldr	r1, [r7, #16]
3400573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34005740:	687b      	ldr	r3, [r7, #4]
34005742:	681b      	ldr	r3, [r3, #0]
34005744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34005746:	697b      	ldr	r3, [r7, #20]
34005748:	005b      	lsls	r3, r3, #1
3400574a:	2203      	movs	r2, #3
3400574c:	fa02 f303 	lsl.w	r3, r2, r3
34005750:	43db      	mvns	r3, r3
34005752:	693a      	ldr	r2, [r7, #16]
34005754:	4013      	ands	r3, r2
34005756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34005758:	683b      	ldr	r3, [r7, #0]
3400575a:	685b      	ldr	r3, [r3, #4]
3400575c:	f003 0203 	and.w	r2, r3, #3
34005760:	697b      	ldr	r3, [r7, #20]
34005762:	005b      	lsls	r3, r3, #1
34005764:	fa02 f303 	lsl.w	r3, r2, r3
34005768:	693a      	ldr	r2, [r7, #16]
3400576a:	4313      	orrs	r3, r2
3400576c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
3400576e:	687b      	ldr	r3, [r7, #4]
34005770:	693a      	ldr	r2, [r7, #16]
34005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34005774:	683b      	ldr	r3, [r7, #0]
34005776:	685b      	ldr	r3, [r3, #4]
34005778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
3400577c:	2b00      	cmp	r3, #0
3400577e:	f000 80f7 	beq.w	34005970 <HAL_GPIO_Init+0x66c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34005782:	4a1d      	ldr	r2, [pc, #116]	@ (340057f8 <HAL_GPIO_Init+0x4f4>)
34005784:	697b      	ldr	r3, [r7, #20]
34005786:	089b      	lsrs	r3, r3, #2
34005788:	3318      	adds	r3, #24
3400578a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3400578e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005790:	697b      	ldr	r3, [r7, #20]
34005792:	e033      	b.n	340057fc <HAL_GPIO_Init+0x4f8>
34005794:	3401ab6c 	.word	0x3401ab6c
34005798:	56020000 	.word	0x56020000
3400579c:	46020000 	.word	0x46020000
340057a0:	56020400 	.word	0x56020400
340057a4:	46020400 	.word	0x46020400
340057a8:	56020800 	.word	0x56020800
340057ac:	46020800 	.word	0x46020800
340057b0:	56020c00 	.word	0x56020c00
340057b4:	46020c00 	.word	0x46020c00
340057b8:	56021000 	.word	0x56021000
340057bc:	46021000 	.word	0x46021000
340057c0:	56021400 	.word	0x56021400
340057c4:	46021400 	.word	0x46021400
340057c8:	56021800 	.word	0x56021800
340057cc:	46021800 	.word	0x46021800
340057d0:	56021c00 	.word	0x56021c00
340057d4:	46021c00 	.word	0x46021c00
340057d8:	56023400 	.word	0x56023400
340057dc:	46023400 	.word	0x46023400
340057e0:	56023800 	.word	0x56023800
340057e4:	46023800 	.word	0x46023800
340057e8:	56023c00 	.word	0x56023c00
340057ec:	46023c00 	.word	0x46023c00
340057f0:	56024000 	.word	0x56024000
340057f4:	46024000 	.word	0x46024000
340057f8:	56025000 	.word	0x56025000
340057fc:	f003 0303 	and.w	r3, r3, #3
34005800:	00db      	lsls	r3, r3, #3
34005802:	220f      	movs	r2, #15
34005804:	fa02 f303 	lsl.w	r3, r2, r3
34005808:	43db      	mvns	r3, r3
3400580a:	693a      	ldr	r2, [r7, #16]
3400580c:	4013      	ands	r3, r2
3400580e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34005810:	687b      	ldr	r3, [r7, #4]
34005812:	4a5f      	ldr	r2, [pc, #380]	@ (34005990 <HAL_GPIO_Init+0x68c>)
34005814:	4293      	cmp	r3, r2
34005816:	d043      	beq.n	340058a0 <HAL_GPIO_Init+0x59c>
34005818:	687b      	ldr	r3, [r7, #4]
3400581a:	4a5e      	ldr	r2, [pc, #376]	@ (34005994 <HAL_GPIO_Init+0x690>)
3400581c:	4293      	cmp	r3, r2
3400581e:	d03d      	beq.n	3400589c <HAL_GPIO_Init+0x598>
34005820:	687b      	ldr	r3, [r7, #4]
34005822:	4a5d      	ldr	r2, [pc, #372]	@ (34005998 <HAL_GPIO_Init+0x694>)
34005824:	4293      	cmp	r3, r2
34005826:	d037      	beq.n	34005898 <HAL_GPIO_Init+0x594>
34005828:	687b      	ldr	r3, [r7, #4]
3400582a:	4a5c      	ldr	r2, [pc, #368]	@ (3400599c <HAL_GPIO_Init+0x698>)
3400582c:	4293      	cmp	r3, r2
3400582e:	d031      	beq.n	34005894 <HAL_GPIO_Init+0x590>
34005830:	687b      	ldr	r3, [r7, #4]
34005832:	4a5b      	ldr	r2, [pc, #364]	@ (340059a0 <HAL_GPIO_Init+0x69c>)
34005834:	4293      	cmp	r3, r2
34005836:	d02b      	beq.n	34005890 <HAL_GPIO_Init+0x58c>
34005838:	687b      	ldr	r3, [r7, #4]
3400583a:	4a5a      	ldr	r2, [pc, #360]	@ (340059a4 <HAL_GPIO_Init+0x6a0>)
3400583c:	4293      	cmp	r3, r2
3400583e:	d025      	beq.n	3400588c <HAL_GPIO_Init+0x588>
34005840:	687b      	ldr	r3, [r7, #4]
34005842:	4a59      	ldr	r2, [pc, #356]	@ (340059a8 <HAL_GPIO_Init+0x6a4>)
34005844:	4293      	cmp	r3, r2
34005846:	d01f      	beq.n	34005888 <HAL_GPIO_Init+0x584>
34005848:	687b      	ldr	r3, [r7, #4]
3400584a:	4a58      	ldr	r2, [pc, #352]	@ (340059ac <HAL_GPIO_Init+0x6a8>)
3400584c:	4293      	cmp	r3, r2
3400584e:	d019      	beq.n	34005884 <HAL_GPIO_Init+0x580>
34005850:	687b      	ldr	r3, [r7, #4]
34005852:	4a57      	ldr	r2, [pc, #348]	@ (340059b0 <HAL_GPIO_Init+0x6ac>)
34005854:	4293      	cmp	r3, r2
34005856:	d013      	beq.n	34005880 <HAL_GPIO_Init+0x57c>
34005858:	687b      	ldr	r3, [r7, #4]
3400585a:	4a56      	ldr	r2, [pc, #344]	@ (340059b4 <HAL_GPIO_Init+0x6b0>)
3400585c:	4293      	cmp	r3, r2
3400585e:	d00d      	beq.n	3400587c <HAL_GPIO_Init+0x578>
34005860:	687b      	ldr	r3, [r7, #4]
34005862:	4a55      	ldr	r2, [pc, #340]	@ (340059b8 <HAL_GPIO_Init+0x6b4>)
34005864:	4293      	cmp	r3, r2
34005866:	d007      	beq.n	34005878 <HAL_GPIO_Init+0x574>
34005868:	687b      	ldr	r3, [r7, #4]
3400586a:	4a54      	ldr	r2, [pc, #336]	@ (340059bc <HAL_GPIO_Init+0x6b8>)
3400586c:	4293      	cmp	r3, r2
3400586e:	d101      	bne.n	34005874 <HAL_GPIO_Init+0x570>
34005870:	230b      	movs	r3, #11
34005872:	e016      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005874:	2310      	movs	r3, #16
34005876:	e014      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005878:	230a      	movs	r3, #10
3400587a:	e012      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
3400587c:	2309      	movs	r3, #9
3400587e:	e010      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005880:	2308      	movs	r3, #8
34005882:	e00e      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005884:	2307      	movs	r3, #7
34005886:	e00c      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005888:	2306      	movs	r3, #6
3400588a:	e00a      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
3400588c:	2305      	movs	r3, #5
3400588e:	e008      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005890:	2304      	movs	r3, #4
34005892:	e006      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005894:	2303      	movs	r3, #3
34005896:	e004      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
34005898:	2302      	movs	r3, #2
3400589a:	e002      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
3400589c:	2301      	movs	r3, #1
3400589e:	e000      	b.n	340058a2 <HAL_GPIO_Init+0x59e>
340058a0:	2300      	movs	r3, #0
340058a2:	697a      	ldr	r2, [r7, #20]
340058a4:	f002 0203 	and.w	r2, r2, #3
340058a8:	00d2      	lsls	r2, r2, #3
340058aa:	4093      	lsls	r3, r2
340058ac:	693a      	ldr	r2, [r7, #16]
340058ae:	4313      	orrs	r3, r2
340058b0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
340058b2:	4943      	ldr	r1, [pc, #268]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
340058b4:	697b      	ldr	r3, [r7, #20]
340058b6:	089b      	lsrs	r3, r3, #2
340058b8:	3318      	adds	r3, #24
340058ba:	693a      	ldr	r2, [r7, #16]
340058bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
340058c0:	4b3f      	ldr	r3, [pc, #252]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
340058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340058c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
340058c8:	68fb      	ldr	r3, [r7, #12]
340058ca:	43db      	mvns	r3, r3
340058cc:	693a      	ldr	r2, [r7, #16]
340058ce:	4013      	ands	r3, r2
340058d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
340058d2:	683b      	ldr	r3, [r7, #0]
340058d4:	685b      	ldr	r3, [r3, #4]
340058d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340058da:	2b00      	cmp	r3, #0
340058dc:	d003      	beq.n	340058e6 <HAL_GPIO_Init+0x5e2>
        {
          temp |= iocurrent;
340058de:	693a      	ldr	r2, [r7, #16]
340058e0:	68fb      	ldr	r3, [r7, #12]
340058e2:	4313      	orrs	r3, r2
340058e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
340058e6:	4a36      	ldr	r2, [pc, #216]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
340058e8:	693b      	ldr	r3, [r7, #16]
340058ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
340058ee:	4b34      	ldr	r3, [pc, #208]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
340058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340058f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
340058f6:	68fb      	ldr	r3, [r7, #12]
340058f8:	43db      	mvns	r3, r3
340058fa:	693a      	ldr	r2, [r7, #16]
340058fc:	4013      	ands	r3, r2
340058fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34005900:	683b      	ldr	r3, [r7, #0]
34005902:	685b      	ldr	r3, [r3, #4]
34005904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34005908:	2b00      	cmp	r3, #0
3400590a:	d003      	beq.n	34005914 <HAL_GPIO_Init+0x610>
        {
          temp |= iocurrent;
3400590c:	693a      	ldr	r2, [r7, #16]
3400590e:	68fb      	ldr	r3, [r7, #12]
34005910:	4313      	orrs	r3, r2
34005912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34005914:	4a2a      	ldr	r2, [pc, #168]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
34005916:	693b      	ldr	r3, [r7, #16]
34005918:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
3400591c:	4b28      	ldr	r3, [pc, #160]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
3400591e:	681b      	ldr	r3, [r3, #0]
34005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34005922:	68fb      	ldr	r3, [r7, #12]
34005924:	43db      	mvns	r3, r3
34005926:	693a      	ldr	r2, [r7, #16]
34005928:	4013      	ands	r3, r2
3400592a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
3400592c:	683b      	ldr	r3, [r7, #0]
3400592e:	685b      	ldr	r3, [r3, #4]
34005930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34005934:	2b00      	cmp	r3, #0
34005936:	d003      	beq.n	34005940 <HAL_GPIO_Init+0x63c>
        {
          temp |= iocurrent;
34005938:	693a      	ldr	r2, [r7, #16]
3400593a:	68fb      	ldr	r3, [r7, #12]
3400593c:	4313      	orrs	r3, r2
3400593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34005940:	4a1f      	ldr	r2, [pc, #124]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
34005942:	693b      	ldr	r3, [r7, #16]
34005944:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34005946:	4b1e      	ldr	r3, [pc, #120]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
34005948:	685b      	ldr	r3, [r3, #4]
3400594a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
3400594c:	68fb      	ldr	r3, [r7, #12]
3400594e:	43db      	mvns	r3, r3
34005950:	693a      	ldr	r2, [r7, #16]
34005952:	4013      	ands	r3, r2
34005954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34005956:	683b      	ldr	r3, [r7, #0]
34005958:	685b      	ldr	r3, [r3, #4]
3400595a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400595e:	2b00      	cmp	r3, #0
34005960:	d003      	beq.n	3400596a <HAL_GPIO_Init+0x666>
        {
          temp |= iocurrent;
34005962:	693a      	ldr	r2, [r7, #16]
34005964:	68fb      	ldr	r3, [r7, #12]
34005966:	4313      	orrs	r3, r2
34005968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
3400596a:	4a15      	ldr	r2, [pc, #84]	@ (340059c0 <HAL_GPIO_Init+0x6bc>)
3400596c:	693b      	ldr	r3, [r7, #16]
3400596e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34005970:	697b      	ldr	r3, [r7, #20]
34005972:	3301      	adds	r3, #1
34005974:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34005976:	683b      	ldr	r3, [r7, #0]
34005978:	681a      	ldr	r2, [r3, #0]
3400597a:	697b      	ldr	r3, [r7, #20]
3400597c:	fa22 f303 	lsr.w	r3, r2, r3
34005980:	2b00      	cmp	r3, #0
34005982:	f47f adb1 	bne.w	340054e8 <HAL_GPIO_Init+0x1e4>
  }
}
34005986:	bf00      	nop
34005988:	bf00      	nop
3400598a:	3718      	adds	r7, #24
3400598c:	46bd      	mov	sp, r7
3400598e:	bd80      	pop	{r7, pc}
34005990:	56020000 	.word	0x56020000
34005994:	56020400 	.word	0x56020400
34005998:	56020800 	.word	0x56020800
3400599c:	56020c00 	.word	0x56020c00
340059a0:	56021000 	.word	0x56021000
340059a4:	56021400 	.word	0x56021400
340059a8:	56021800 	.word	0x56021800
340059ac:	56021c00 	.word	0x56021c00
340059b0:	56023400 	.word	0x56023400
340059b4:	56023800 	.word	0x56023800
340059b8:	56023c00 	.word	0x56023c00
340059bc:	56024000 	.word	0x56024000
340059c0:	56025000 	.word	0x56025000

340059c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
340059c4:	b580      	push	{r7, lr}
340059c6:	b082      	sub	sp, #8
340059c8:	af00      	add	r7, sp, #0
340059ca:	6078      	str	r0, [r7, #4]
340059cc:	460b      	mov	r3, r1
340059ce:	807b      	strh	r3, [r7, #2]
340059d0:	4613      	mov	r3, r2
340059d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340059d4:	887b      	ldrh	r3, [r7, #2]
340059d6:	2b00      	cmp	r3, #0
340059d8:	d104      	bne.n	340059e4 <HAL_GPIO_WritePin+0x20>
340059da:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
340059de:	480e      	ldr	r0, [pc, #56]	@ (34005a18 <HAL_GPIO_WritePin+0x54>)
340059e0:	f7fb fe24 	bl	3400162c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
340059e4:	787b      	ldrb	r3, [r7, #1]
340059e6:	2b00      	cmp	r3, #0
340059e8:	d007      	beq.n	340059fa <HAL_GPIO_WritePin+0x36>
340059ea:	787b      	ldrb	r3, [r7, #1]
340059ec:	2b01      	cmp	r3, #1
340059ee:	d004      	beq.n	340059fa <HAL_GPIO_WritePin+0x36>
340059f0:	f240 11a1 	movw	r1, #417	@ 0x1a1
340059f4:	4808      	ldr	r0, [pc, #32]	@ (34005a18 <HAL_GPIO_WritePin+0x54>)
340059f6:	f7fb fe19 	bl	3400162c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
340059fa:	787b      	ldrb	r3, [r7, #1]
340059fc:	2b00      	cmp	r3, #0
340059fe:	d003      	beq.n	34005a08 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34005a00:	887a      	ldrh	r2, [r7, #2]
34005a02:	687b      	ldr	r3, [r7, #4]
34005a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34005a06:	e002      	b.n	34005a0e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34005a08:	887a      	ldrh	r2, [r7, #2]
34005a0a:	687b      	ldr	r3, [r7, #4]
34005a0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
34005a0e:	bf00      	nop
34005a10:	3708      	adds	r7, #8
34005a12:	46bd      	mov	sp, r7
34005a14:	bd80      	pop	{r7, pc}
34005a16:	bf00      	nop
34005a18:	3401ab6c 	.word	0x3401ab6c

34005a1c <HAL_PWREx_ConfigVddIORange>:
  * @note   Setting this configuration while VDDIOx is in 3v3 range
  *         damages the device.
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
34005a1c:	b580      	push	{r7, lr}
34005a1e:	b082      	sub	sp, #8
34005a20:	af00      	add	r7, sp, #0
34005a22:	6078      	str	r0, [r7, #4]
34005a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34005a26:	687b      	ldr	r3, [r7, #4]
34005a28:	2b00      	cmp	r3, #0
34005a2a:	d010      	beq.n	34005a4e <HAL_PWREx_ConfigVddIORange+0x32>
34005a2c:	687b      	ldr	r3, [r7, #4]
34005a2e:	2b01      	cmp	r3, #1
34005a30:	d00d      	beq.n	34005a4e <HAL_PWREx_ConfigVddIORange+0x32>
34005a32:	687b      	ldr	r3, [r7, #4]
34005a34:	2b02      	cmp	r3, #2
34005a36:	d00a      	beq.n	34005a4e <HAL_PWREx_ConfigVddIORange+0x32>
34005a38:	687b      	ldr	r3, [r7, #4]
34005a3a:	2b03      	cmp	r3, #3
34005a3c:	d007      	beq.n	34005a4e <HAL_PWREx_ConfigVddIORange+0x32>
34005a3e:	687b      	ldr	r3, [r7, #4]
34005a40:	2b04      	cmp	r3, #4
34005a42:	d004      	beq.n	34005a4e <HAL_PWREx_ConfigVddIORange+0x32>
34005a44:	f240 316a 	movw	r1, #874	@ 0x36a
34005a48:	482a      	ldr	r0, [pc, #168]	@ (34005af4 <HAL_PWREx_ConfigVddIORange+0xd8>)
34005a4a:	f7fb fdef 	bl	3400162c <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34005a4e:	683b      	ldr	r3, [r7, #0]
34005a50:	2b00      	cmp	r3, #0
34005a52:	d007      	beq.n	34005a64 <HAL_PWREx_ConfigVddIORange+0x48>
34005a54:	683b      	ldr	r3, [r7, #0]
34005a56:	2b01      	cmp	r3, #1
34005a58:	d004      	beq.n	34005a64 <HAL_PWREx_ConfigVddIORange+0x48>
34005a5a:	f240 316b 	movw	r1, #875	@ 0x36b
34005a5e:	4825      	ldr	r0, [pc, #148]	@ (34005af4 <HAL_PWREx_ConfigVddIORange+0xd8>)
34005a60:	f7fb fde4 	bl	3400162c <assert_failed>

  switch (VddIOPort)
34005a64:	687b      	ldr	r3, [r7, #4]
34005a66:	2b04      	cmp	r3, #4
34005a68:	d83e      	bhi.n	34005ae8 <HAL_PWREx_ConfigVddIORange+0xcc>
34005a6a:	a201      	add	r2, pc, #4	@ (adr r2, 34005a70 <HAL_PWREx_ConfigVddIORange+0x54>)
34005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34005a70:	34005a85 	.word	0x34005a85
34005a74:	34005a99 	.word	0x34005a99
34005a78:	34005aad 	.word	0x34005aad
34005a7c:	34005ac1 	.word	0x34005ac1
34005a80:	34005ad5 	.word	0x34005ad5
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34005a84:	4b1c      	ldr	r3, [pc, #112]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005a88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005a8c:	683b      	ldr	r3, [r7, #0]
34005a8e:	061b      	lsls	r3, r3, #24
34005a90:	4919      	ldr	r1, [pc, #100]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005a92:	4313      	orrs	r3, r2
34005a94:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005a96:	e028      	b.n	34005aea <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34005a98:	4b17      	ldr	r3, [pc, #92]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005a9c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34005aa0:	683b      	ldr	r3, [r7, #0]
34005aa2:	065b      	lsls	r3, r3, #25
34005aa4:	4914      	ldr	r1, [pc, #80]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005aa6:	4313      	orrs	r3, r2
34005aa8:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005aaa:	e01e      	b.n	34005aea <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34005aac:	4b12      	ldr	r3, [pc, #72]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005ab0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34005ab4:	683b      	ldr	r3, [r7, #0]
34005ab6:	069b      	lsls	r3, r3, #26
34005ab8:	490f      	ldr	r1, [pc, #60]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005aba:	4313      	orrs	r3, r2
34005abc:	63cb      	str	r3, [r1, #60]	@ 0x3c
      break;
34005abe:	e014      	b.n	34005aea <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO4:
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34005ac0:	4b0d      	ldr	r3, [pc, #52]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34005ac4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005ac8:	683b      	ldr	r3, [r7, #0]
34005aca:	061b      	lsls	r3, r3, #24
34005acc:	490a      	ldr	r1, [pc, #40]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005ace:	4313      	orrs	r3, r2
34005ad0:	634b      	str	r3, [r1, #52]	@ 0x34
      break;
34005ad2:	e00a      	b.n	34005aea <HAL_PWREx_ConfigVddIORange+0xce>

    case PWR_VDDIO5:
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34005ad4:	4b08      	ldr	r3, [pc, #32]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34005ad8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34005adc:	683b      	ldr	r3, [r7, #0]
34005ade:	061b      	lsls	r3, r3, #24
34005ae0:	4905      	ldr	r1, [pc, #20]	@ (34005af8 <HAL_PWREx_ConfigVddIORange+0xdc>)
34005ae2:	4313      	orrs	r3, r2
34005ae4:	638b      	str	r3, [r1, #56]	@ 0x38
      break;
34005ae6:	e000      	b.n	34005aea <HAL_PWREx_ConfigVddIORange+0xce>

    default:
      break;
34005ae8:	bf00      	nop
  }
}
34005aea:	bf00      	nop
34005aec:	3708      	adds	r7, #8
34005aee:	46bd      	mov	sp, r7
34005af0:	bd80      	pop	{r7, pc}
34005af2:	bf00      	nop
34005af4:	3401ac18 	.word	0x3401ac18
34005af8:	56024800 	.word	0x56024800

34005afc <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34005afc:	b480      	push	{r7}
34005afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34005b00:	4b05      	ldr	r3, [pc, #20]	@ (34005b18 <HAL_PWREx_EnableVddIO3+0x1c>)
34005b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34005b04:	4a04      	ldr	r2, [pc, #16]	@ (34005b18 <HAL_PWREx_EnableVddIO3+0x1c>)
34005b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34005b0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34005b0c:	bf00      	nop
34005b0e:	46bd      	mov	sp, r7
34005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
34005b14:	4770      	bx	lr
34005b16:	bf00      	nop
34005b18:	56024800 	.word	0x56024800

34005b1c <HAL_RAMCFG_EnableAXISRAM>:
  *                   contains the configuration information for the
  *                   specified RAMCFG instance.
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
34005b1c:	b580      	push	{r7, lr}
34005b1e:	b082      	sub	sp, #8
34005b20:	af00      	add	r7, sp, #0
34005b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34005b24:	687b      	ldr	r3, [r7, #4]
34005b26:	681b      	ldr	r3, [r3, #0]
34005b28:	4a20      	ldr	r2, [pc, #128]	@ (34005bac <HAL_RAMCFG_EnableAXISRAM+0x90>)
34005b2a:	4293      	cmp	r3, r2
34005b2c:	d031      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b2e:	687b      	ldr	r3, [r7, #4]
34005b30:	681b      	ldr	r3, [r3, #0]
34005b32:	4a1f      	ldr	r2, [pc, #124]	@ (34005bb0 <HAL_RAMCFG_EnableAXISRAM+0x94>)
34005b34:	4293      	cmp	r3, r2
34005b36:	d02c      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b38:	687b      	ldr	r3, [r7, #4]
34005b3a:	681b      	ldr	r3, [r3, #0]
34005b3c:	4a1d      	ldr	r2, [pc, #116]	@ (34005bb4 <HAL_RAMCFG_EnableAXISRAM+0x98>)
34005b3e:	4293      	cmp	r3, r2
34005b40:	d027      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b42:	687b      	ldr	r3, [r7, #4]
34005b44:	681b      	ldr	r3, [r3, #0]
34005b46:	4a1c      	ldr	r2, [pc, #112]	@ (34005bb8 <HAL_RAMCFG_EnableAXISRAM+0x9c>)
34005b48:	4293      	cmp	r3, r2
34005b4a:	d022      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b4c:	687b      	ldr	r3, [r7, #4]
34005b4e:	681b      	ldr	r3, [r3, #0]
34005b50:	4a1a      	ldr	r2, [pc, #104]	@ (34005bbc <HAL_RAMCFG_EnableAXISRAM+0xa0>)
34005b52:	4293      	cmp	r3, r2
34005b54:	d01d      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b56:	687b      	ldr	r3, [r7, #4]
34005b58:	681b      	ldr	r3, [r3, #0]
34005b5a:	4a19      	ldr	r2, [pc, #100]	@ (34005bc0 <HAL_RAMCFG_EnableAXISRAM+0xa4>)
34005b5c:	4293      	cmp	r3, r2
34005b5e:	d018      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b60:	687b      	ldr	r3, [r7, #4]
34005b62:	681b      	ldr	r3, [r3, #0]
34005b64:	4a17      	ldr	r2, [pc, #92]	@ (34005bc4 <HAL_RAMCFG_EnableAXISRAM+0xa8>)
34005b66:	4293      	cmp	r3, r2
34005b68:	d013      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b6a:	687b      	ldr	r3, [r7, #4]
34005b6c:	681b      	ldr	r3, [r3, #0]
34005b6e:	4a16      	ldr	r2, [pc, #88]	@ (34005bc8 <HAL_RAMCFG_EnableAXISRAM+0xac>)
34005b70:	4293      	cmp	r3, r2
34005b72:	d00e      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b74:	687b      	ldr	r3, [r7, #4]
34005b76:	681b      	ldr	r3, [r3, #0]
34005b78:	4a14      	ldr	r2, [pc, #80]	@ (34005bcc <HAL_RAMCFG_EnableAXISRAM+0xb0>)
34005b7a:	4293      	cmp	r3, r2
34005b7c:	d009      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b7e:	687b      	ldr	r3, [r7, #4]
34005b80:	681b      	ldr	r3, [r3, #0]
34005b82:	4a13      	ldr	r2, [pc, #76]	@ (34005bd0 <HAL_RAMCFG_EnableAXISRAM+0xb4>)
34005b84:	4293      	cmp	r3, r2
34005b86:	d004      	beq.n	34005b92 <HAL_RAMCFG_EnableAXISRAM+0x76>
34005b88:	f240 4107 	movw	r1, #1031	@ 0x407
34005b8c:	4811      	ldr	r0, [pc, #68]	@ (34005bd4 <HAL_RAMCFG_EnableAXISRAM+0xb8>)
34005b8e:	f7fb fd4d 	bl	3400162c <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
34005b92:	687b      	ldr	r3, [r7, #4]
34005b94:	681b      	ldr	r3, [r3, #0]
34005b96:	681a      	ldr	r2, [r3, #0]
34005b98:	687b      	ldr	r3, [r7, #4]
34005b9a:	681b      	ldr	r3, [r3, #0]
34005b9c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
34005ba0:	601a      	str	r2, [r3, #0]
}
34005ba2:	bf00      	nop
34005ba4:	3708      	adds	r7, #8
34005ba6:	46bd      	mov	sp, r7
34005ba8:	bd80      	pop	{r7, pc}
34005baa:	bf00      	nop
34005bac:	52023080 	.word	0x52023080
34005bb0:	42023080 	.word	0x42023080
34005bb4:	52023100 	.word	0x52023100
34005bb8:	42023100 	.word	0x42023100
34005bbc:	52023180 	.word	0x52023180
34005bc0:	42023180 	.word	0x42023180
34005bc4:	52023200 	.word	0x52023200
34005bc8:	42023200 	.word	0x42023200
34005bcc:	52023280 	.word	0x52023280
34005bd0:	42023280 	.word	0x42023280
34005bd4:	3401acc4 	.word	0x3401acc4

34005bd8 <LL_RCC_HSE_IsReady>:
{
34005bd8:	b480      	push	{r7}
34005bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34005bdc:	4b06      	ldr	r3, [pc, #24]	@ (34005bf8 <LL_RCC_HSE_IsReady+0x20>)
34005bde:	685b      	ldr	r3, [r3, #4]
34005be0:	f003 0310 	and.w	r3, r3, #16
34005be4:	2b00      	cmp	r3, #0
34005be6:	d001      	beq.n	34005bec <LL_RCC_HSE_IsReady+0x14>
34005be8:	2301      	movs	r3, #1
34005bea:	e000      	b.n	34005bee <LL_RCC_HSE_IsReady+0x16>
34005bec:	2300      	movs	r3, #0
}
34005bee:	4618      	mov	r0, r3
34005bf0:	46bd      	mov	sp, r7
34005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
34005bf6:	4770      	bx	lr
34005bf8:	56028000 	.word	0x56028000

34005bfc <LL_RCC_HSI_Enable>:
{
34005bfc:	b480      	push	{r7}
34005bfe:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34005c00:	4b04      	ldr	r3, [pc, #16]	@ (34005c14 <LL_RCC_HSI_Enable+0x18>)
34005c02:	2208      	movs	r2, #8
34005c04:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34005c08:	bf00      	nop
34005c0a:	46bd      	mov	sp, r7
34005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005c10:	4770      	bx	lr
34005c12:	bf00      	nop
34005c14:	56028000 	.word	0x56028000

34005c18 <LL_RCC_HSI_Disable>:
{
34005c18:	b480      	push	{r7}
34005c1a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34005c1c:	4b05      	ldr	r3, [pc, #20]	@ (34005c34 <LL_RCC_HSI_Disable+0x1c>)
34005c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005c22:	461a      	mov	r2, r3
34005c24:	2308      	movs	r3, #8
34005c26:	6013      	str	r3, [r2, #0]
}
34005c28:	bf00      	nop
34005c2a:	46bd      	mov	sp, r7
34005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005c30:	4770      	bx	lr
34005c32:	bf00      	nop
34005c34:	56028000 	.word	0x56028000

34005c38 <LL_RCC_HSI_IsReady>:
{
34005c38:	b480      	push	{r7}
34005c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34005c3c:	4b06      	ldr	r3, [pc, #24]	@ (34005c58 <LL_RCC_HSI_IsReady+0x20>)
34005c3e:	685b      	ldr	r3, [r3, #4]
34005c40:	f003 0308 	and.w	r3, r3, #8
34005c44:	2b00      	cmp	r3, #0
34005c46:	d001      	beq.n	34005c4c <LL_RCC_HSI_IsReady+0x14>
34005c48:	2301      	movs	r3, #1
34005c4a:	e000      	b.n	34005c4e <LL_RCC_HSI_IsReady+0x16>
34005c4c:	2300      	movs	r3, #0
}
34005c4e:	4618      	mov	r0, r3
34005c50:	46bd      	mov	sp, r7
34005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
34005c56:	4770      	bx	lr
34005c58:	56028000 	.word	0x56028000

34005c5c <LL_RCC_HSI_SetDivider>:
{
34005c5c:	b480      	push	{r7}
34005c5e:	b083      	sub	sp, #12
34005c60:	af00      	add	r7, sp, #0
34005c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34005c64:	4b06      	ldr	r3, [pc, #24]	@ (34005c80 <LL_RCC_HSI_SetDivider+0x24>)
34005c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005c68:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34005c6c:	4904      	ldr	r1, [pc, #16]	@ (34005c80 <LL_RCC_HSI_SetDivider+0x24>)
34005c6e:	687b      	ldr	r3, [r7, #4]
34005c70:	4313      	orrs	r3, r2
34005c72:	648b      	str	r3, [r1, #72]	@ 0x48
}
34005c74:	bf00      	nop
34005c76:	370c      	adds	r7, #12
34005c78:	46bd      	mov	sp, r7
34005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34005c7e:	4770      	bx	lr
34005c80:	56028000 	.word	0x56028000

34005c84 <LL_RCC_HSI_GetDivider>:
{
34005c84:	b480      	push	{r7}
34005c86:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34005c88:	4b04      	ldr	r3, [pc, #16]	@ (34005c9c <LL_RCC_HSI_GetDivider+0x18>)
34005c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005c8c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34005c90:	4618      	mov	r0, r3
34005c92:	46bd      	mov	sp, r7
34005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
34005c98:	4770      	bx	lr
34005c9a:	bf00      	nop
34005c9c:	56028000 	.word	0x56028000

34005ca0 <LL_RCC_HSI_SetCalibTrimming>:
{
34005ca0:	b480      	push	{r7}
34005ca2:	b083      	sub	sp, #12
34005ca4:	af00      	add	r7, sp, #0
34005ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34005ca8:	4b07      	ldr	r3, [pc, #28]	@ (34005cc8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34005caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34005cac:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34005cb0:	687b      	ldr	r3, [r7, #4]
34005cb2:	041b      	lsls	r3, r3, #16
34005cb4:	4904      	ldr	r1, [pc, #16]	@ (34005cc8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34005cb6:	4313      	orrs	r3, r2
34005cb8:	648b      	str	r3, [r1, #72]	@ 0x48
}
34005cba:	bf00      	nop
34005cbc:	370c      	adds	r7, #12
34005cbe:	46bd      	mov	sp, r7
34005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34005cc4:	4770      	bx	lr
34005cc6:	bf00      	nop
34005cc8:	56028000 	.word	0x56028000

34005ccc <LL_RCC_MSI_Enable>:
{
34005ccc:	b480      	push	{r7}
34005cce:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34005cd0:	4b04      	ldr	r3, [pc, #16]	@ (34005ce4 <LL_RCC_MSI_Enable+0x18>)
34005cd2:	2204      	movs	r2, #4
34005cd4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34005cd8:	bf00      	nop
34005cda:	46bd      	mov	sp, r7
34005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
34005ce0:	4770      	bx	lr
34005ce2:	bf00      	nop
34005ce4:	56028000 	.word	0x56028000

34005ce8 <LL_RCC_MSI_Disable>:
{
34005ce8:	b480      	push	{r7}
34005cea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34005cec:	4b05      	ldr	r3, [pc, #20]	@ (34005d04 <LL_RCC_MSI_Disable+0x1c>)
34005cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005cf2:	461a      	mov	r2, r3
34005cf4:	2304      	movs	r3, #4
34005cf6:	6013      	str	r3, [r2, #0]
}
34005cf8:	bf00      	nop
34005cfa:	46bd      	mov	sp, r7
34005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
34005d00:	4770      	bx	lr
34005d02:	bf00      	nop
34005d04:	56028000 	.word	0x56028000

34005d08 <LL_RCC_MSI_IsReady>:
{
34005d08:	b480      	push	{r7}
34005d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34005d0c:	4b06      	ldr	r3, [pc, #24]	@ (34005d28 <LL_RCC_MSI_IsReady+0x20>)
34005d0e:	685b      	ldr	r3, [r3, #4]
34005d10:	f003 0304 	and.w	r3, r3, #4
34005d14:	2b00      	cmp	r3, #0
34005d16:	d001      	beq.n	34005d1c <LL_RCC_MSI_IsReady+0x14>
34005d18:	2301      	movs	r3, #1
34005d1a:	e000      	b.n	34005d1e <LL_RCC_MSI_IsReady+0x16>
34005d1c:	2300      	movs	r3, #0
}
34005d1e:	4618      	mov	r0, r3
34005d20:	46bd      	mov	sp, r7
34005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
34005d26:	4770      	bx	lr
34005d28:	56028000 	.word	0x56028000

34005d2c <LL_RCC_MSI_SetFrequency>:
{
34005d2c:	b480      	push	{r7}
34005d2e:	b083      	sub	sp, #12
34005d30:	af00      	add	r7, sp, #0
34005d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34005d34:	4b06      	ldr	r3, [pc, #24]	@ (34005d50 <LL_RCC_MSI_SetFrequency+0x24>)
34005d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005d38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34005d3c:	4904      	ldr	r1, [pc, #16]	@ (34005d50 <LL_RCC_MSI_SetFrequency+0x24>)
34005d3e:	687b      	ldr	r3, [r7, #4]
34005d40:	4313      	orrs	r3, r2
34005d42:	644b      	str	r3, [r1, #68]	@ 0x44
}
34005d44:	bf00      	nop
34005d46:	370c      	adds	r7, #12
34005d48:	46bd      	mov	sp, r7
34005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34005d4e:	4770      	bx	lr
34005d50:	56028000 	.word	0x56028000

34005d54 <LL_RCC_MSI_GetFrequency>:
{
34005d54:	b480      	push	{r7}
34005d56:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34005d58:	4b04      	ldr	r3, [pc, #16]	@ (34005d6c <LL_RCC_MSI_GetFrequency+0x18>)
34005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34005d60:	4618      	mov	r0, r3
34005d62:	46bd      	mov	sp, r7
34005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
34005d68:	4770      	bx	lr
34005d6a:	bf00      	nop
34005d6c:	56028000 	.word	0x56028000

34005d70 <LL_RCC_MSI_SetCalibTrimming>:
{
34005d70:	b480      	push	{r7}
34005d72:	b083      	sub	sp, #12
34005d74:	af00      	add	r7, sp, #0
34005d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34005d78:	4b07      	ldr	r3, [pc, #28]	@ (34005d98 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34005d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34005d7c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34005d80:	687b      	ldr	r3, [r7, #4]
34005d82:	041b      	lsls	r3, r3, #16
34005d84:	4904      	ldr	r1, [pc, #16]	@ (34005d98 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34005d86:	4313      	orrs	r3, r2
34005d88:	644b      	str	r3, [r1, #68]	@ 0x44
}
34005d8a:	bf00      	nop
34005d8c:	370c      	adds	r7, #12
34005d8e:	46bd      	mov	sp, r7
34005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
34005d94:	4770      	bx	lr
34005d96:	bf00      	nop
34005d98:	56028000 	.word	0x56028000

34005d9c <LL_RCC_LSE_IsReady>:
{
34005d9c:	b480      	push	{r7}
34005d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34005da0:	4b06      	ldr	r3, [pc, #24]	@ (34005dbc <LL_RCC_LSE_IsReady+0x20>)
34005da2:	685b      	ldr	r3, [r3, #4]
34005da4:	f003 0302 	and.w	r3, r3, #2
34005da8:	2b00      	cmp	r3, #0
34005daa:	d001      	beq.n	34005db0 <LL_RCC_LSE_IsReady+0x14>
34005dac:	2301      	movs	r3, #1
34005dae:	e000      	b.n	34005db2 <LL_RCC_LSE_IsReady+0x16>
34005db0:	2300      	movs	r3, #0
}
34005db2:	4618      	mov	r0, r3
34005db4:	46bd      	mov	sp, r7
34005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
34005dba:	4770      	bx	lr
34005dbc:	56028000 	.word	0x56028000

34005dc0 <LL_RCC_LSI_Enable>:
{
34005dc0:	b480      	push	{r7}
34005dc2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34005dc4:	4b04      	ldr	r3, [pc, #16]	@ (34005dd8 <LL_RCC_LSI_Enable+0x18>)
34005dc6:	2201      	movs	r2, #1
34005dc8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34005dcc:	bf00      	nop
34005dce:	46bd      	mov	sp, r7
34005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34005dd4:	4770      	bx	lr
34005dd6:	bf00      	nop
34005dd8:	56028000 	.word	0x56028000

34005ddc <LL_RCC_LSI_Disable>:
{
34005ddc:	b480      	push	{r7}
34005dde:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34005de0:	4b05      	ldr	r3, [pc, #20]	@ (34005df8 <LL_RCC_LSI_Disable+0x1c>)
34005de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34005de6:	461a      	mov	r2, r3
34005de8:	2301      	movs	r3, #1
34005dea:	6013      	str	r3, [r2, #0]
}
34005dec:	bf00      	nop
34005dee:	46bd      	mov	sp, r7
34005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34005df4:	4770      	bx	lr
34005df6:	bf00      	nop
34005df8:	56028000 	.word	0x56028000

34005dfc <LL_RCC_LSI_IsReady>:
{
34005dfc:	b480      	push	{r7}
34005dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34005e00:	4b04      	ldr	r3, [pc, #16]	@ (34005e14 <LL_RCC_LSI_IsReady+0x18>)
34005e02:	685b      	ldr	r3, [r3, #4]
34005e04:	f003 0301 	and.w	r3, r3, #1
}
34005e08:	4618      	mov	r0, r3
34005e0a:	46bd      	mov	sp, r7
34005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34005e10:	4770      	bx	lr
34005e12:	bf00      	nop
34005e14:	56028000 	.word	0x56028000

34005e18 <LL_RCC_GetCpuClkSource>:
{
34005e18:	b480      	push	{r7}
34005e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34005e1c:	4b04      	ldr	r3, [pc, #16]	@ (34005e30 <LL_RCC_GetCpuClkSource+0x18>)
34005e1e:	6a1b      	ldr	r3, [r3, #32]
34005e20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34005e24:	4618      	mov	r0, r3
34005e26:	46bd      	mov	sp, r7
34005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
34005e2c:	4770      	bx	lr
34005e2e:	bf00      	nop
34005e30:	56028000 	.word	0x56028000

34005e34 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34005e34:	b480      	push	{r7}
34005e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34005e38:	4b04      	ldr	r3, [pc, #16]	@ (34005e4c <LL_RCC_GetSysClkSource+0x18>)
34005e3a:	6a1b      	ldr	r3, [r3, #32]
34005e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34005e40:	4618      	mov	r0, r3
34005e42:	46bd      	mov	sp, r7
34005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
34005e48:	4770      	bx	lr
34005e4a:	bf00      	nop
34005e4c:	56028000 	.word	0x56028000

34005e50 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34005e50:	b480      	push	{r7}
34005e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34005e54:	4b04      	ldr	r3, [pc, #16]	@ (34005e68 <LL_RCC_PLL1_GetSource+0x18>)
34005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005e5a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34005e5e:	4618      	mov	r0, r3
34005e60:	46bd      	mov	sp, r7
34005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
34005e66:	4770      	bx	lr
34005e68:	56028000 	.word	0x56028000

34005e6c <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
34005e6c:	b480      	push	{r7}
34005e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34005e70:	4b07      	ldr	r3, [pc, #28]	@ (34005e90 <LL_RCC_PLL1_IsReady+0x24>)
34005e72:	685b      	ldr	r3, [r3, #4]
34005e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34005e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34005e7c:	d101      	bne.n	34005e82 <LL_RCC_PLL1_IsReady+0x16>
34005e7e:	2301      	movs	r3, #1
34005e80:	e000      	b.n	34005e84 <LL_RCC_PLL1_IsReady+0x18>
34005e82:	2300      	movs	r3, #0
}
34005e84:	4618      	mov	r0, r3
34005e86:	46bd      	mov	sp, r7
34005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
34005e8c:	4770      	bx	lr
34005e8e:	bf00      	nop
34005e90:	56028000 	.word	0x56028000

34005e94 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34005e94:	b480      	push	{r7}
34005e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34005e98:	4b07      	ldr	r3, [pc, #28]	@ (34005eb8 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34005e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34005e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34005ea6:	d101      	bne.n	34005eac <LL_RCC_PLL1_IsEnabledBypass+0x18>
34005ea8:	2301      	movs	r3, #1
34005eaa:	e000      	b.n	34005eae <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34005eac:	2300      	movs	r3, #0
}
34005eae:	4618      	mov	r0, r3
34005eb0:	46bd      	mov	sp, r7
34005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34005eb6:	4770      	bx	lr
34005eb8:	56028000 	.word	0x56028000

34005ebc <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
34005ebc:	b480      	push	{r7}
34005ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34005ec0:	4b04      	ldr	r3, [pc, #16]	@ (34005ed4 <LL_RCC_PLL2_GetSource+0x18>)
34005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34005ec6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34005eca:	4618      	mov	r0, r3
34005ecc:	46bd      	mov	sp, r7
34005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
34005ed2:	4770      	bx	lr
34005ed4:	56028000 	.word	0x56028000

34005ed8 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34005ed8:	b480      	push	{r7}
34005eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34005edc:	4b07      	ldr	r3, [pc, #28]	@ (34005efc <LL_RCC_PLL2_IsReady+0x24>)
34005ede:	685b      	ldr	r3, [r3, #4]
34005ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34005ee8:	d101      	bne.n	34005eee <LL_RCC_PLL2_IsReady+0x16>
34005eea:	2301      	movs	r3, #1
34005eec:	e000      	b.n	34005ef0 <LL_RCC_PLL2_IsReady+0x18>
34005eee:	2300      	movs	r3, #0
}
34005ef0:	4618      	mov	r0, r3
34005ef2:	46bd      	mov	sp, r7
34005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
34005ef8:	4770      	bx	lr
34005efa:	bf00      	nop
34005efc:	56028000 	.word	0x56028000

34005f00 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34005f00:	b480      	push	{r7}
34005f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34005f04:	4b07      	ldr	r3, [pc, #28]	@ (34005f24 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34005f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34005f12:	d101      	bne.n	34005f18 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34005f14:	2301      	movs	r3, #1
34005f16:	e000      	b.n	34005f1a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34005f18:	2300      	movs	r3, #0
}
34005f1a:	4618      	mov	r0, r3
34005f1c:	46bd      	mov	sp, r7
34005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f22:	4770      	bx	lr
34005f24:	56028000 	.word	0x56028000

34005f28 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34005f28:	b480      	push	{r7}
34005f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34005f2c:	4b04      	ldr	r3, [pc, #16]	@ (34005f40 <LL_RCC_PLL3_GetSource+0x18>)
34005f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34005f32:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34005f36:	4618      	mov	r0, r3
34005f38:	46bd      	mov	sp, r7
34005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f3e:	4770      	bx	lr
34005f40:	56028000 	.word	0x56028000

34005f44 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34005f44:	b480      	push	{r7}
34005f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34005f48:	4b07      	ldr	r3, [pc, #28]	@ (34005f68 <LL_RCC_PLL3_IsReady+0x24>)
34005f4a:	685b      	ldr	r3, [r3, #4]
34005f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34005f54:	d101      	bne.n	34005f5a <LL_RCC_PLL3_IsReady+0x16>
34005f56:	2301      	movs	r3, #1
34005f58:	e000      	b.n	34005f5c <LL_RCC_PLL3_IsReady+0x18>
34005f5a:	2300      	movs	r3, #0
}
34005f5c:	4618      	mov	r0, r3
34005f5e:	46bd      	mov	sp, r7
34005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f64:	4770      	bx	lr
34005f66:	bf00      	nop
34005f68:	56028000 	.word	0x56028000

34005f6c <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
34005f6c:	b480      	push	{r7}
34005f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34005f70:	4b07      	ldr	r3, [pc, #28]	@ (34005f90 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34005f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34005f76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34005f7e:	d101      	bne.n	34005f84 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34005f80:	2301      	movs	r3, #1
34005f82:	e000      	b.n	34005f86 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34005f84:	2300      	movs	r3, #0
}
34005f86:	4618      	mov	r0, r3
34005f88:	46bd      	mov	sp, r7
34005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34005f8e:	4770      	bx	lr
34005f90:	56028000 	.word	0x56028000

34005f94 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34005f94:	b480      	push	{r7}
34005f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34005f98:	4b04      	ldr	r3, [pc, #16]	@ (34005fac <LL_RCC_PLL4_GetSource+0x18>)
34005f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34005f9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34005fa2:	4618      	mov	r0, r3
34005fa4:	46bd      	mov	sp, r7
34005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34005faa:	4770      	bx	lr
34005fac:	56028000 	.word	0x56028000

34005fb0 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
34005fb0:	b480      	push	{r7}
34005fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34005fb4:	4b07      	ldr	r3, [pc, #28]	@ (34005fd4 <LL_RCC_PLL4_IsReady+0x24>)
34005fb6:	685b      	ldr	r3, [r3, #4]
34005fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34005fc0:	d101      	bne.n	34005fc6 <LL_RCC_PLL4_IsReady+0x16>
34005fc2:	2301      	movs	r3, #1
34005fc4:	e000      	b.n	34005fc8 <LL_RCC_PLL4_IsReady+0x18>
34005fc6:	2300      	movs	r3, #0
}
34005fc8:	4618      	mov	r0, r3
34005fca:	46bd      	mov	sp, r7
34005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
34005fd0:	4770      	bx	lr
34005fd2:	bf00      	nop
34005fd4:	56028000 	.word	0x56028000

34005fd8 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34005fd8:	b480      	push	{r7}
34005fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34005fdc:	4b07      	ldr	r3, [pc, #28]	@ (34005ffc <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34005fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34005fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34005fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34005fea:	d101      	bne.n	34005ff0 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34005fec:	2301      	movs	r3, #1
34005fee:	e000      	b.n	34005ff2 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34005ff0:	2300      	movs	r3, #0
}
34005ff2:	4618      	mov	r0, r3
34005ff4:	46bd      	mov	sp, r7
34005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
34005ffa:	4770      	bx	lr
34005ffc:	56028000 	.word	0x56028000

34006000 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34006000:	b480      	push	{r7}
34006002:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34006004:	4b04      	ldr	r3, [pc, #16]	@ (34006018 <LL_RCC_IC1_Enable+0x18>)
34006006:	2201      	movs	r2, #1
34006008:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3400600c:	bf00      	nop
3400600e:	46bd      	mov	sp, r7
34006010:	f85d 7b04 	ldr.w	r7, [sp], #4
34006014:	4770      	bx	lr
34006016:	bf00      	nop
34006018:	56028000 	.word	0x56028000

3400601c <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
3400601c:	b480      	push	{r7}
3400601e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34006020:	4b04      	ldr	r3, [pc, #16]	@ (34006034 <LL_RCC_IC1_GetSource+0x18>)
34006022:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34006026:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400602a:	4618      	mov	r0, r3
3400602c:	46bd      	mov	sp, r7
3400602e:	f85d 7b04 	ldr.w	r7, [sp], #4
34006032:	4770      	bx	lr
34006034:	56028000 	.word	0x56028000

34006038 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34006038:	b480      	push	{r7}
3400603a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3400603c:	4b05      	ldr	r3, [pc, #20]	@ (34006054 <LL_RCC_IC1_GetDivider+0x1c>)
3400603e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34006042:	0c1b      	lsrs	r3, r3, #16
34006044:	b2db      	uxtb	r3, r3
34006046:	3301      	adds	r3, #1
}
34006048:	4618      	mov	r0, r3
3400604a:	46bd      	mov	sp, r7
3400604c:	f85d 7b04 	ldr.w	r7, [sp], #4
34006050:	4770      	bx	lr
34006052:	bf00      	nop
34006054:	56028000 	.word	0x56028000

34006058 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34006058:	b480      	push	{r7}
3400605a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3400605c:	4b04      	ldr	r3, [pc, #16]	@ (34006070 <LL_RCC_IC2_GetSource+0x18>)
3400605e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34006062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34006066:	4618      	mov	r0, r3
34006068:	46bd      	mov	sp, r7
3400606a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400606e:	4770      	bx	lr
34006070:	56028000 	.word	0x56028000

34006074 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34006074:	b480      	push	{r7}
34006076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34006078:	4b05      	ldr	r3, [pc, #20]	@ (34006090 <LL_RCC_IC2_GetDivider+0x1c>)
3400607a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400607e:	0c1b      	lsrs	r3, r3, #16
34006080:	b2db      	uxtb	r3, r3
34006082:	3301      	adds	r3, #1
}
34006084:	4618      	mov	r0, r3
34006086:	46bd      	mov	sp, r7
34006088:	f85d 7b04 	ldr.w	r7, [sp], #4
3400608c:	4770      	bx	lr
3400608e:	bf00      	nop
34006090:	56028000 	.word	0x56028000

34006094 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34006094:	b480      	push	{r7}
34006096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34006098:	4b04      	ldr	r3, [pc, #16]	@ (340060ac <LL_RCC_IC6_GetSource+0x18>)
3400609a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400609e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340060a2:	4618      	mov	r0, r3
340060a4:	46bd      	mov	sp, r7
340060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340060aa:	4770      	bx	lr
340060ac:	56028000 	.word	0x56028000

340060b0 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
340060b0:	b480      	push	{r7}
340060b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340060b4:	4b04      	ldr	r3, [pc, #16]	@ (340060c8 <LL_RCC_IC11_GetSource+0x18>)
340060b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340060ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340060be:	4618      	mov	r0, r3
340060c0:	46bd      	mov	sp, r7
340060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
340060c6:	4770      	bx	lr
340060c8:	56028000 	.word	0x56028000

340060cc <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
340060cc:	b580      	push	{r7, lr}
340060ce:	b0a2      	sub	sp, #136	@ 0x88
340060d0:	af00      	add	r7, sp, #0
340060d2:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
340060d4:	687b      	ldr	r3, [r7, #4]
340060d6:	2b00      	cmp	r3, #0
340060d8:	d102      	bne.n	340060e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
340060da:	2301      	movs	r3, #1
340060dc:	f000 bd10 	b.w	34006b00 <HAL_RCC_OscConfig+0xa34>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340060e0:	687b      	ldr	r3, [r7, #4]
340060e2:	681b      	ldr	r3, [r3, #0]
340060e4:	2b00      	cmp	r3, #0
340060e6:	d022      	beq.n	3400612e <HAL_RCC_OscConfig+0x62>
340060e8:	687b      	ldr	r3, [r7, #4]
340060ea:	681b      	ldr	r3, [r3, #0]
340060ec:	f003 0301 	and.w	r3, r3, #1
340060f0:	2b00      	cmp	r3, #0
340060f2:	d11c      	bne.n	3400612e <HAL_RCC_OscConfig+0x62>
340060f4:	687b      	ldr	r3, [r7, #4]
340060f6:	681b      	ldr	r3, [r3, #0]
340060f8:	f003 0302 	and.w	r3, r3, #2
340060fc:	2b00      	cmp	r3, #0
340060fe:	d116      	bne.n	3400612e <HAL_RCC_OscConfig+0x62>
34006100:	687b      	ldr	r3, [r7, #4]
34006102:	681b      	ldr	r3, [r3, #0]
34006104:	f003 0310 	and.w	r3, r3, #16
34006108:	2b00      	cmp	r3, #0
3400610a:	d110      	bne.n	3400612e <HAL_RCC_OscConfig+0x62>
3400610c:	687b      	ldr	r3, [r7, #4]
3400610e:	681b      	ldr	r3, [r3, #0]
34006110:	f003 0308 	and.w	r3, r3, #8
34006114:	2b00      	cmp	r3, #0
34006116:	d10a      	bne.n	3400612e <HAL_RCC_OscConfig+0x62>
34006118:	687b      	ldr	r3, [r7, #4]
3400611a:	681b      	ldr	r3, [r3, #0]
3400611c:	f003 0304 	and.w	r3, r3, #4
34006120:	2b00      	cmp	r3, #0
34006122:	d104      	bne.n	3400612e <HAL_RCC_OscConfig+0x62>
34006124:	f44f 71b9 	mov.w	r1, #370	@ 0x172
34006128:	4892      	ldr	r0, [pc, #584]	@ (34006374 <HAL_RCC_OscConfig+0x2a8>)
3400612a:	f7fb fa7f 	bl	3400162c <assert_failed>

  cpuclksrc = LL_RCC_GetCpuClkSource();
3400612e:	f7ff fe73 	bl	34005e18 <LL_RCC_GetCpuClkSource>
34006132:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34006136:	f7ff fe7d 	bl	34005e34 <LL_RCC_GetSysClkSource>
3400613a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3400613e:	f7ff fe87 	bl	34005e50 <LL_RCC_PLL1_GetSource>
34006142:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34006144:	f7ff feba 	bl	34005ebc <LL_RCC_PLL2_GetSource>
34006148:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3400614a:	f7ff feed 	bl	34005f28 <LL_RCC_PLL3_GetSource>
3400614e:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34006150:	f7ff ff20 	bl	34005f94 <LL_RCC_PLL4_GetSource>
34006154:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34006156:	4b88      	ldr	r3, [pc, #544]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006158:	685b      	ldr	r3, [r3, #4]
3400615a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3400615c:	687b      	ldr	r3, [r7, #4]
3400615e:	681b      	ldr	r3, [r3, #0]
34006160:	f003 0301 	and.w	r3, r3, #1
34006164:	2b00      	cmp	r3, #0
34006166:	f000 80c3 	beq.w	340062f0 <HAL_RCC_OscConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
3400616a:	687b      	ldr	r3, [r7, #4]
3400616c:	685b      	ldr	r3, [r3, #4]
3400616e:	2b00      	cmp	r3, #0
34006170:	d013      	beq.n	3400619a <HAL_RCC_OscConfig+0xce>
34006172:	687b      	ldr	r3, [r7, #4]
34006174:	685b      	ldr	r3, [r3, #4]
34006176:	2b10      	cmp	r3, #16
34006178:	d00f      	beq.n	3400619a <HAL_RCC_OscConfig+0xce>
3400617a:	687b      	ldr	r3, [r7, #4]
3400617c:	685b      	ldr	r3, [r3, #4]
3400617e:	f248 0210 	movw	r2, #32784	@ 0x8010
34006182:	4293      	cmp	r3, r2
34006184:	d009      	beq.n	3400619a <HAL_RCC_OscConfig+0xce>
34006186:	687b      	ldr	r3, [r7, #4]
34006188:	685b      	ldr	r3, [r3, #4]
3400618a:	4a7c      	ldr	r2, [pc, #496]	@ (3400637c <HAL_RCC_OscConfig+0x2b0>)
3400618c:	4293      	cmp	r3, r2
3400618e:	d004      	beq.n	3400619a <HAL_RCC_OscConfig+0xce>
34006190:	f44f 71c0 	mov.w	r1, #384	@ 0x180
34006194:	4877      	ldr	r0, [pc, #476]	@ (34006374 <HAL_RCC_OscConfig+0x2a8>)
34006196:	f7fb fa49 	bl	3400162c <assert_failed>

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3400619a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400619e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340061a2:	d028      	beq.n	340061f6 <HAL_RCC_OscConfig+0x12a>
340061a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340061a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340061ac:	d023      	beq.n	340061f6 <HAL_RCC_OscConfig+0x12a>
340061ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
340061b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340061b4:	d104      	bne.n	340061c0 <HAL_RCC_OscConfig+0xf4>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340061b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340061b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340061bc:	2b00      	cmp	r3, #0
340061be:	d11a      	bne.n	340061f6 <HAL_RCC_OscConfig+0x12a>
340061c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
340061c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340061c6:	d104      	bne.n	340061d2 <HAL_RCC_OscConfig+0x106>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340061c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340061ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340061ce:	2b00      	cmp	r3, #0
340061d0:	d111      	bne.n	340061f6 <HAL_RCC_OscConfig+0x12a>
340061d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340061d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340061d8:	d104      	bne.n	340061e4 <HAL_RCC_OscConfig+0x118>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340061da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340061e0:	2b00      	cmp	r3, #0
340061e2:	d108      	bne.n	340061f6 <HAL_RCC_OscConfig+0x12a>
340061e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340061e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340061ea:	d10b      	bne.n	34006204 <HAL_RCC_OscConfig+0x138>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340061ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340061ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340061f2:	2b00      	cmp	r3, #0
340061f4:	d006      	beq.n	34006204 <HAL_RCC_OscConfig+0x138>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
340061f6:	687b      	ldr	r3, [r7, #4]
340061f8:	685b      	ldr	r3, [r3, #4]
340061fa:	2b00      	cmp	r3, #0
340061fc:	d178      	bne.n	340062f0 <HAL_RCC_OscConfig+0x224>
      {
        return HAL_ERROR;
340061fe:	2301      	movs	r3, #1
34006200:	f000 bc7e 	b.w	34006b00 <HAL_RCC_OscConfig+0xa34>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34006204:	687b      	ldr	r3, [r7, #4]
34006206:	685b      	ldr	r3, [r3, #4]
34006208:	2b10      	cmp	r3, #16
3400620a:	d104      	bne.n	34006216 <HAL_RCC_OscConfig+0x14a>
3400620c:	4b5a      	ldr	r3, [pc, #360]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
3400620e:	2210      	movs	r2, #16
34006210:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006214:	e043      	b.n	3400629e <HAL_RCC_OscConfig+0x1d2>
34006216:	687b      	ldr	r3, [r7, #4]
34006218:	685b      	ldr	r3, [r3, #4]
3400621a:	2b00      	cmp	r3, #0
3400621c:	d10c      	bne.n	34006238 <HAL_RCC_OscConfig+0x16c>
3400621e:	4b56      	ldr	r3, [pc, #344]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006224:	461a      	mov	r2, r3
34006226:	2310      	movs	r3, #16
34006228:	6013      	str	r3, [r2, #0]
3400622a:	4b53      	ldr	r3, [pc, #332]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
3400622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400622e:	4a52      	ldr	r2, [pc, #328]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006230:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34006234:	6553      	str	r3, [r2, #84]	@ 0x54
34006236:	e032      	b.n	3400629e <HAL_RCC_OscConfig+0x1d2>
34006238:	687b      	ldr	r3, [r7, #4]
3400623a:	685b      	ldr	r3, [r3, #4]
3400623c:	f248 0210 	movw	r2, #32784	@ 0x8010
34006240:	4293      	cmp	r3, r2
34006242:	d110      	bne.n	34006266 <HAL_RCC_OscConfig+0x19a>
34006244:	4b4c      	ldr	r3, [pc, #304]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006248:	4a4b      	ldr	r2, [pc, #300]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
3400624a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3400624e:	6553      	str	r3, [r2, #84]	@ 0x54
34006250:	4b49      	ldr	r3, [pc, #292]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006254:	4a48      	ldr	r2, [pc, #288]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400625a:	6553      	str	r3, [r2, #84]	@ 0x54
3400625c:	4b46      	ldr	r3, [pc, #280]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
3400625e:	2210      	movs	r2, #16
34006260:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006264:	e01b      	b.n	3400629e <HAL_RCC_OscConfig+0x1d2>
34006266:	687b      	ldr	r3, [r7, #4]
34006268:	685b      	ldr	r3, [r3, #4]
3400626a:	4a44      	ldr	r2, [pc, #272]	@ (3400637c <HAL_RCC_OscConfig+0x2b0>)
3400626c:	4293      	cmp	r3, r2
3400626e:	d10a      	bne.n	34006286 <HAL_RCC_OscConfig+0x1ba>
34006270:	4b41      	ldr	r3, [pc, #260]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006274:	4a40      	ldr	r2, [pc, #256]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006276:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
3400627a:	6553      	str	r3, [r2, #84]	@ 0x54
3400627c:	4b3e      	ldr	r3, [pc, #248]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
3400627e:	2210      	movs	r2, #16
34006280:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34006284:	e00b      	b.n	3400629e <HAL_RCC_OscConfig+0x1d2>
34006286:	4b3c      	ldr	r3, [pc, #240]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400628c:	461a      	mov	r2, r3
3400628e:	2310      	movs	r3, #16
34006290:	6013      	str	r3, [r2, #0]
34006292:	4b39      	ldr	r3, [pc, #228]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34006296:	4a38      	ldr	r2, [pc, #224]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
34006298:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3400629c:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400629e:	f7fd f9a5 	bl	340035ec <HAL_GetTick>
340062a2:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340062a4:	687b      	ldr	r3, [r7, #4]
340062a6:	685b      	ldr	r3, [r3, #4]
340062a8:	2b00      	cmp	r3, #0
340062aa:	d01b      	beq.n	340062e4 <HAL_RCC_OscConfig+0x218>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340062ac:	e009      	b.n	340062c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340062ae:	f7fd f99d 	bl	340035ec <HAL_GetTick>
340062b2:	4602      	mov	r2, r0
340062b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340062b6:	1ad3      	subs	r3, r2, r3
340062b8:	2b64      	cmp	r3, #100	@ 0x64
340062ba:	d902      	bls.n	340062c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
340062bc:	2303      	movs	r3, #3
340062be:	f000 bc1f 	b.w	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340062c2:	4b2d      	ldr	r3, [pc, #180]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
340062c4:	685b      	ldr	r3, [r3, #4]
340062c6:	f003 0310 	and.w	r3, r3, #16
340062ca:	2b00      	cmp	r3, #0
340062cc:	d0ef      	beq.n	340062ae <HAL_RCC_OscConfig+0x1e2>
340062ce:	e00f      	b.n	340062f0 <HAL_RCC_OscConfig+0x224>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340062d0:	f7fd f98c 	bl	340035ec <HAL_GetTick>
340062d4:	4602      	mov	r2, r0
340062d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340062d8:	1ad3      	subs	r3, r2, r3
340062da:	2b64      	cmp	r3, #100	@ 0x64
340062dc:	d902      	bls.n	340062e4 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
340062de:	2303      	movs	r3, #3
340062e0:	f000 bc0e 	b.w	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340062e4:	4b24      	ldr	r3, [pc, #144]	@ (34006378 <HAL_RCC_OscConfig+0x2ac>)
340062e6:	685b      	ldr	r3, [r3, #4]
340062e8:	f003 0310 	and.w	r3, r3, #16
340062ec:	2b00      	cmp	r3, #0
340062ee:	d1ef      	bne.n	340062d0 <HAL_RCC_OscConfig+0x204>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
340062f0:	687b      	ldr	r3, [r7, #4]
340062f2:	681b      	ldr	r3, [r3, #0]
340062f4:	f003 0302 	and.w	r3, r3, #2
340062f8:	2b00      	cmp	r3, #0
340062fa:	f000 80c3 	beq.w	34006484 <HAL_RCC_OscConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340062fe:	687b      	ldr	r3, [r7, #4]
34006300:	68db      	ldr	r3, [r3, #12]
34006302:	2b00      	cmp	r3, #0
34006304:	d008      	beq.n	34006318 <HAL_RCC_OscConfig+0x24c>
34006306:	687b      	ldr	r3, [r7, #4]
34006308:	68db      	ldr	r3, [r3, #12]
3400630a:	2b08      	cmp	r3, #8
3400630c:	d004      	beq.n	34006318 <HAL_RCC_OscConfig+0x24c>
3400630e:	f240 11b5 	movw	r1, #437	@ 0x1b5
34006312:	4818      	ldr	r0, [pc, #96]	@ (34006374 <HAL_RCC_OscConfig+0x2a8>)
34006314:	f7fb f98a 	bl	3400162c <assert_failed>

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3400631c:	2b00      	cmp	r3, #0
3400631e:	d023      	beq.n	34006368 <HAL_RCC_OscConfig+0x29c>
34006320:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006324:	2b00      	cmp	r3, #0
34006326:	d01f      	beq.n	34006368 <HAL_RCC_OscConfig+0x29c>
34006328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
3400632a:	2b00      	cmp	r3, #0
3400632c:	d104      	bne.n	34006338 <HAL_RCC_OscConfig+0x26c>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3400632e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34006334:	2b00      	cmp	r3, #0
34006336:	d117      	bne.n	34006368 <HAL_RCC_OscConfig+0x29c>
34006338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
3400633a:	2b00      	cmp	r3, #0
3400633c:	d104      	bne.n	34006348 <HAL_RCC_OscConfig+0x27c>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3400633e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34006344:	2b00      	cmp	r3, #0
34006346:	d10f      	bne.n	34006368 <HAL_RCC_OscConfig+0x29c>
34006348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
3400634a:	2b00      	cmp	r3, #0
3400634c:	d104      	bne.n	34006358 <HAL_RCC_OscConfig+0x28c>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3400634e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34006354:	2b00      	cmp	r3, #0
34006356:	d107      	bne.n	34006368 <HAL_RCC_OscConfig+0x29c>
34006358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
3400635a:	2b00      	cmp	r3, #0
3400635c:	d13b      	bne.n	340063d6 <HAL_RCC_OscConfig+0x30a>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3400635e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006364:	2b00      	cmp	r3, #0
34006366:	d036      	beq.n	340063d6 <HAL_RCC_OscConfig+0x30a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34006368:	687b      	ldr	r3, [r7, #4]
3400636a:	68db      	ldr	r3, [r3, #12]
3400636c:	2b00      	cmp	r3, #0
3400636e:	d107      	bne.n	34006380 <HAL_RCC_OscConfig+0x2b4>
      {
        return HAL_ERROR;
34006370:	2301      	movs	r3, #1
34006372:	e3c5      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
34006374:	3401ad70 	.word	0x3401ad70
34006378:	56028000 	.word	0x56028000
3400637c:	00018010 	.word	0x00018010
      }
      /* Otherwise, just the divider and calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34006380:	687b      	ldr	r3, [r7, #4]
34006382:	691b      	ldr	r3, [r3, #16]
34006384:	2b00      	cmp	r3, #0
34006386:	d012      	beq.n	340063ae <HAL_RCC_OscConfig+0x2e2>
34006388:	687b      	ldr	r3, [r7, #4]
3400638a:	691b      	ldr	r3, [r3, #16]
3400638c:	2b80      	cmp	r3, #128	@ 0x80
3400638e:	d00e      	beq.n	340063ae <HAL_RCC_OscConfig+0x2e2>
34006390:	687b      	ldr	r3, [r7, #4]
34006392:	691b      	ldr	r3, [r3, #16]
34006394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006398:	d009      	beq.n	340063ae <HAL_RCC_OscConfig+0x2e2>
3400639a:	687b      	ldr	r3, [r7, #4]
3400639c:	691b      	ldr	r3, [r3, #16]
3400639e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
340063a2:	d004      	beq.n	340063ae <HAL_RCC_OscConfig+0x2e2>
340063a4:	f240 11c7 	movw	r1, #455	@ 0x1c7
340063a8:	48a2      	ldr	r0, [pc, #648]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
340063aa:	f7fb f93f 	bl	3400162c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340063ae:	687b      	ldr	r3, [r7, #4]
340063b0:	695b      	ldr	r3, [r3, #20]
340063b2:	2b7f      	cmp	r3, #127	@ 0x7f
340063b4:	d904      	bls.n	340063c0 <HAL_RCC_OscConfig+0x2f4>
340063b6:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340063ba:	489e      	ldr	r0, [pc, #632]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
340063bc:	f7fb f936 	bl	3400162c <assert_failed>

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
340063c0:	687b      	ldr	r3, [r7, #4]
340063c2:	691b      	ldr	r3, [r3, #16]
340063c4:	4618      	mov	r0, r3
340063c6:	f7ff fc49 	bl	34005c5c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
340063ca:	687b      	ldr	r3, [r7, #4]
340063cc:	695b      	ldr	r3, [r3, #20]
340063ce:	4618      	mov	r0, r3
340063d0:	f7ff fc66 	bl	34005ca0 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340063d4:	e056      	b.n	34006484 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
340063d6:	687b      	ldr	r3, [r7, #4]
340063d8:	68db      	ldr	r3, [r3, #12]
340063da:	2b00      	cmp	r3, #0
340063dc:	d03e      	beq.n	3400645c <HAL_RCC_OscConfig+0x390>
      {
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340063de:	687b      	ldr	r3, [r7, #4]
340063e0:	691b      	ldr	r3, [r3, #16]
340063e2:	2b00      	cmp	r3, #0
340063e4:	d012      	beq.n	3400640c <HAL_RCC_OscConfig+0x340>
340063e6:	687b      	ldr	r3, [r7, #4]
340063e8:	691b      	ldr	r3, [r3, #16]
340063ea:	2b80      	cmp	r3, #128	@ 0x80
340063ec:	d00e      	beq.n	3400640c <HAL_RCC_OscConfig+0x340>
340063ee:	687b      	ldr	r3, [r7, #4]
340063f0:	691b      	ldr	r3, [r3, #16]
340063f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340063f6:	d009      	beq.n	3400640c <HAL_RCC_OscConfig+0x340>
340063f8:	687b      	ldr	r3, [r7, #4]
340063fa:	691b      	ldr	r3, [r3, #16]
340063fc:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
34006400:	d004      	beq.n	3400640c <HAL_RCC_OscConfig+0x340>
34006402:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34006406:	488b      	ldr	r0, [pc, #556]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
34006408:	f7fb f910 	bl	3400162c <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3400640c:	687b      	ldr	r3, [r7, #4]
3400640e:	695b      	ldr	r3, [r3, #20]
34006410:	2b7f      	cmp	r3, #127	@ 0x7f
34006412:	d904      	bls.n	3400641e <HAL_RCC_OscConfig+0x352>
34006414:	f240 11d7 	movw	r1, #471	@ 0x1d7
34006418:	4886      	ldr	r0, [pc, #536]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
3400641a:	f7fb f907 	bl	3400162c <assert_failed>

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
3400641e:	f7ff fbed 	bl	34005bfc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006422:	f7fd f8e3 	bl	340035ec <HAL_GetTick>
34006426:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
34006428:	e008      	b.n	3400643c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3400642a:	f7fd f8df 	bl	340035ec <HAL_GetTick>
3400642e:	4602      	mov	r2, r0
34006430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006432:	1ad3      	subs	r3, r2, r3
34006434:	2b01      	cmp	r3, #1
34006436:	d901      	bls.n	3400643c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
34006438:	2303      	movs	r3, #3
3400643a:	e361      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() == 0U)
3400643c:	f7ff fbfc 	bl	34005c38 <LL_RCC_HSI_IsReady>
34006440:	4603      	mov	r3, r0
34006442:	2b00      	cmp	r3, #0
34006444:	d0f1      	beq.n	3400642a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34006446:	687b      	ldr	r3, [r7, #4]
34006448:	691b      	ldr	r3, [r3, #16]
3400644a:	4618      	mov	r0, r3
3400644c:	f7ff fc06 	bl	34005c5c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34006450:	687b      	ldr	r3, [r7, #4]
34006452:	695b      	ldr	r3, [r3, #20]
34006454:	4618      	mov	r0, r3
34006456:	f7ff fc23 	bl	34005ca0 <LL_RCC_HSI_SetCalibTrimming>
3400645a:	e013      	b.n	34006484 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3400645c:	f7ff fbdc 	bl	34005c18 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006460:	f7fd f8c4 	bl	340035ec <HAL_GetTick>
34006464:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34006466:	e008      	b.n	3400647a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34006468:	f7fd f8c0 	bl	340035ec <HAL_GetTick>
3400646c:	4602      	mov	r2, r0
3400646e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006470:	1ad3      	subs	r3, r2, r3
34006472:	2b01      	cmp	r3, #1
34006474:	d901      	bls.n	3400647a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
34006476:	2303      	movs	r3, #3
34006478:	e342      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_HSI_IsReady() != 0U)
3400647a:	f7ff fbdd 	bl	34005c38 <LL_RCC_HSI_IsReady>
3400647e:	4603      	mov	r3, r0
34006480:	2b00      	cmp	r3, #0
34006482:	d1f1      	bne.n	34006468 <HAL_RCC_OscConfig+0x39c>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34006484:	687b      	ldr	r3, [r7, #4]
34006486:	681b      	ldr	r3, [r3, #0]
34006488:	f003 0310 	and.w	r3, r3, #16
3400648c:	2b00      	cmp	r3, #0
3400648e:	f000 809e 	beq.w	340065ce <HAL_RCC_OscConfig+0x502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34006492:	687b      	ldr	r3, [r7, #4]
34006494:	69db      	ldr	r3, [r3, #28]
34006496:	2b00      	cmp	r3, #0
34006498:	d008      	beq.n	340064ac <HAL_RCC_OscConfig+0x3e0>
3400649a:	687b      	ldr	r3, [r7, #4]
3400649c:	69db      	ldr	r3, [r3, #28]
3400649e:	2b04      	cmp	r3, #4
340064a0:	d004      	beq.n	340064ac <HAL_RCC_OscConfig+0x3e0>
340064a2:	f240 2105 	movw	r1, #517	@ 0x205
340064a6:	4863      	ldr	r0, [pc, #396]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
340064a8:	f7fb f8c0 	bl	3400162c <assert_failed>

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340064ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340064b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340064b4:	d028      	beq.n	34006508 <HAL_RCC_OscConfig+0x43c>
340064b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340064ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340064be:	d023      	beq.n	34006508 <HAL_RCC_OscConfig+0x43c>
340064c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
340064c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340064c6:	d104      	bne.n	340064d2 <HAL_RCC_OscConfig+0x406>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340064c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340064ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340064ce:	2b00      	cmp	r3, #0
340064d0:	d11a      	bne.n	34006508 <HAL_RCC_OscConfig+0x43c>
340064d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
340064d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340064d8:	d104      	bne.n	340064e4 <HAL_RCC_OscConfig+0x418>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340064da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340064dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340064e0:	2b00      	cmp	r3, #0
340064e2:	d111      	bne.n	34006508 <HAL_RCC_OscConfig+0x43c>
340064e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
340064e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340064ea:	d104      	bne.n	340064f6 <HAL_RCC_OscConfig+0x42a>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340064ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340064ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
340064f2:	2b00      	cmp	r3, #0
340064f4:	d108      	bne.n	34006508 <HAL_RCC_OscConfig+0x43c>
340064f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
340064f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340064fc:	d119      	bne.n	34006532 <HAL_RCC_OscConfig+0x466>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340064fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34006500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34006504:	2b00      	cmp	r3, #0
34006506:	d014      	beq.n	34006532 <HAL_RCC_OscConfig+0x466>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006508:	687b      	ldr	r3, [r7, #4]
3400650a:	69db      	ldr	r3, [r3, #28]
3400650c:	2b00      	cmp	r3, #0
3400650e:	d101      	bne.n	34006514 <HAL_RCC_OscConfig+0x448>
      {
        return HAL_ERROR;
34006510:	2301      	movs	r3, #1
34006512:	e2f5      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006514:	687b      	ldr	r3, [r7, #4]
34006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006518:	2b1f      	cmp	r3, #31
3400651a:	d904      	bls.n	34006526 <HAL_RCC_OscConfig+0x45a>
3400651c:	f44f 7106 	mov.w	r1, #536	@ 0x218
34006520:	4844      	ldr	r0, [pc, #272]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
34006522:	f7fb f883 	bl	3400162c <assert_failed>

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34006526:	687b      	ldr	r3, [r7, #4]
34006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400652a:	4618      	mov	r0, r3
3400652c:	f7ff fc20 	bl	34005d70 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34006530:	e04d      	b.n	340065ce <HAL_RCC_OscConfig+0x502>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34006532:	687b      	ldr	r3, [r7, #4]
34006534:	69db      	ldr	r3, [r3, #28]
34006536:	2b00      	cmp	r3, #0
34006538:	d035      	beq.n	340065a6 <HAL_RCC_OscConfig+0x4da>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
3400653a:	687b      	ldr	r3, [r7, #4]
3400653c:	6a1b      	ldr	r3, [r3, #32]
3400653e:	2b00      	cmp	r3, #0
34006540:	d009      	beq.n	34006556 <HAL_RCC_OscConfig+0x48a>
34006542:	687b      	ldr	r3, [r7, #4]
34006544:	6a1b      	ldr	r3, [r3, #32]
34006546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400654a:	d004      	beq.n	34006556 <HAL_RCC_OscConfig+0x48a>
3400654c:	f44f 7109 	mov.w	r1, #548	@ 0x224
34006550:	4838      	ldr	r0, [pc, #224]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
34006552:	f7fb f86b 	bl	3400162c <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34006556:	687b      	ldr	r3, [r7, #4]
34006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400655a:	2b1f      	cmp	r3, #31
3400655c:	d904      	bls.n	34006568 <HAL_RCC_OscConfig+0x49c>
3400655e:	f240 2125 	movw	r1, #549	@ 0x225
34006562:	4834      	ldr	r0, [pc, #208]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
34006564:	f7fb f862 	bl	3400162c <assert_failed>

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34006568:	687b      	ldr	r3, [r7, #4]
3400656a:	6a1b      	ldr	r3, [r3, #32]
3400656c:	4618      	mov	r0, r3
3400656e:	f7ff fbdd 	bl	34005d2c <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34006572:	f7ff fbab 	bl	34005ccc <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34006576:	f7fd f839 	bl	340035ec <HAL_GetTick>
3400657a:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3400657c:	e008      	b.n	34006590 <HAL_RCC_OscConfig+0x4c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3400657e:	f7fd f835 	bl	340035ec <HAL_GetTick>
34006582:	4602      	mov	r2, r0
34006584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006586:	1ad3      	subs	r3, r2, r3
34006588:	2b01      	cmp	r3, #1
3400658a:	d901      	bls.n	34006590 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
3400658c:	2303      	movs	r3, #3
3400658e:	e2b7      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() == 0U)
34006590:	f7ff fbba 	bl	34005d08 <LL_RCC_MSI_IsReady>
34006594:	4603      	mov	r3, r0
34006596:	2b00      	cmp	r3, #0
34006598:	d0f1      	beq.n	3400657e <HAL_RCC_OscConfig+0x4b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
3400659a:	687b      	ldr	r3, [r7, #4]
3400659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400659e:	4618      	mov	r0, r3
340065a0:	f7ff fbe6 	bl	34005d70 <LL_RCC_MSI_SetCalibTrimming>
340065a4:	e013      	b.n	340065ce <HAL_RCC_OscConfig+0x502>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
340065a6:	f7ff fb9f 	bl	34005ce8 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
340065aa:	f7fd f81f 	bl	340035ec <HAL_GetTick>
340065ae:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
340065b0:	e008      	b.n	340065c4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
340065b2:	f7fd f81b 	bl	340035ec <HAL_GetTick>
340065b6:	4602      	mov	r2, r0
340065b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
340065ba:	1ad3      	subs	r3, r2, r3
340065bc:	2b01      	cmp	r3, #1
340065be:	d901      	bls.n	340065c4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
340065c0:	2303      	movs	r3, #3
340065c2:	e29d      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
        while (LL_RCC_MSI_IsReady() != 0U)
340065c4:	f7ff fba0 	bl	34005d08 <LL_RCC_MSI_IsReady>
340065c8:	4603      	mov	r3, r0
340065ca:	2b00      	cmp	r3, #0
340065cc:	d1f1      	bne.n	340065b2 <HAL_RCC_OscConfig+0x4e6>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
340065ce:	687b      	ldr	r3, [r7, #4]
340065d0:	681b      	ldr	r3, [r3, #0]
340065d2:	f003 0308 	and.w	r3, r3, #8
340065d6:	2b00      	cmp	r3, #0
340065d8:	d03c      	beq.n	34006654 <HAL_RCC_OscConfig+0x588>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
340065da:	687b      	ldr	r3, [r7, #4]
340065dc:	699b      	ldr	r3, [r3, #24]
340065de:	2b00      	cmp	r3, #0
340065e0:	d008      	beq.n	340065f4 <HAL_RCC_OscConfig+0x528>
340065e2:	687b      	ldr	r3, [r7, #4]
340065e4:	699b      	ldr	r3, [r3, #24]
340065e6:	2b01      	cmp	r3, #1
340065e8:	d004      	beq.n	340065f4 <HAL_RCC_OscConfig+0x528>
340065ea:	f240 2155 	movw	r1, #597	@ 0x255
340065ee:	4811      	ldr	r0, [pc, #68]	@ (34006634 <HAL_RCC_OscConfig+0x568>)
340065f0:	f7fb f81c 	bl	3400162c <assert_failed>

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
340065f4:	687b      	ldr	r3, [r7, #4]
340065f6:	699b      	ldr	r3, [r3, #24]
340065f8:	2b00      	cmp	r3, #0
340065fa:	d014      	beq.n	34006626 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
340065fc:	f7ff fbe0 	bl	34005dc0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006600:	f7fc fff4 	bl	340035ec <HAL_GetTick>
34006604:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
34006606:	e008      	b.n	3400661a <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006608:	f7fc fff0 	bl	340035ec <HAL_GetTick>
3400660c:	4602      	mov	r2, r0
3400660e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006610:	1ad3      	subs	r3, r2, r3
34006612:	2b01      	cmp	r3, #1
34006614:	d901      	bls.n	3400661a <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
34006616:	2303      	movs	r3, #3
34006618:	e272      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() == 0U)
3400661a:	f7ff fbef 	bl	34005dfc <LL_RCC_LSI_IsReady>
3400661e:	4603      	mov	r3, r0
34006620:	2b00      	cmp	r3, #0
34006622:	d0f1      	beq.n	34006608 <HAL_RCC_OscConfig+0x53c>
34006624:	e016      	b.n	34006654 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
34006626:	f7ff fbd9 	bl	34005ddc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400662a:	f7fc ffdf 	bl	340035ec <HAL_GetTick>
3400662e:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34006630:	e00b      	b.n	3400664a <HAL_RCC_OscConfig+0x57e>
34006632:	bf00      	nop
34006634:	3401ad70 	.word	0x3401ad70
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34006638:	f7fc ffd8 	bl	340035ec <HAL_GetTick>
3400663c:	4602      	mov	r2, r0
3400663e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006640:	1ad3      	subs	r3, r2, r3
34006642:	2b01      	cmp	r3, #1
34006644:	d901      	bls.n	3400664a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
34006646:	2303      	movs	r3, #3
34006648:	e25a      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSI_IsReady() != 0U)
3400664a:	f7ff fbd7 	bl	34005dfc <LL_RCC_LSI_IsReady>
3400664e:	4603      	mov	r3, r0
34006650:	2b00      	cmp	r3, #0
34006652:	d1f1      	bne.n	34006638 <HAL_RCC_OscConfig+0x56c>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34006654:	687b      	ldr	r3, [r7, #4]
34006656:	681b      	ldr	r3, [r3, #0]
34006658:	f003 0304 	and.w	r3, r3, #4
3400665c:	2b00      	cmp	r3, #0
3400665e:	f000 80a4 	beq.w	340067aa <HAL_RCC_OscConfig+0x6de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34006662:	687b      	ldr	r3, [r7, #4]
34006664:	689b      	ldr	r3, [r3, #8]
34006666:	2b00      	cmp	r3, #0
34006668:	d013      	beq.n	34006692 <HAL_RCC_OscConfig+0x5c6>
3400666a:	687b      	ldr	r3, [r7, #4]
3400666c:	689b      	ldr	r3, [r3, #8]
3400666e:	2b02      	cmp	r3, #2
34006670:	d00f      	beq.n	34006692 <HAL_RCC_OscConfig+0x5c6>
34006672:	687b      	ldr	r3, [r7, #4]
34006674:	689b      	ldr	r3, [r3, #8]
34006676:	f248 0202 	movw	r2, #32770	@ 0x8002
3400667a:	4293      	cmp	r3, r2
3400667c:	d009      	beq.n	34006692 <HAL_RCC_OscConfig+0x5c6>
3400667e:	687b      	ldr	r3, [r7, #4]
34006680:	689b      	ldr	r3, [r3, #8]
34006682:	4a9b      	ldr	r2, [pc, #620]	@ (340068f0 <HAL_RCC_OscConfig+0x824>)
34006684:	4293      	cmp	r3, r2
34006686:	d004      	beq.n	34006692 <HAL_RCC_OscConfig+0x5c6>
34006688:	f44f 7120 	mov.w	r1, #640	@ 0x280
3400668c:	4899      	ldr	r0, [pc, #612]	@ (340068f4 <HAL_RCC_OscConfig+0x828>)
3400668e:	f7fa ffcd 	bl	3400162c <assert_failed>

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34006692:	687b      	ldr	r3, [r7, #4]
34006694:	689b      	ldr	r3, [r3, #8]
34006696:	2b02      	cmp	r3, #2
34006698:	d104      	bne.n	340066a4 <HAL_RCC_OscConfig+0x5d8>
3400669a:	4b97      	ldr	r3, [pc, #604]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400669c:	2202      	movs	r2, #2
3400669e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
340066a2:	e055      	b.n	34006750 <HAL_RCC_OscConfig+0x684>
340066a4:	687b      	ldr	r3, [r7, #4]
340066a6:	689b      	ldr	r3, [r3, #8]
340066a8:	2b00      	cmp	r3, #0
340066aa:	d112      	bne.n	340066d2 <HAL_RCC_OscConfig+0x606>
340066ac:	4b92      	ldr	r3, [pc, #584]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340066b2:	461a      	mov	r2, r3
340066b4:	2302      	movs	r3, #2
340066b6:	6013      	str	r3, [r2, #0]
340066b8:	4b8f      	ldr	r3, [pc, #572]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340066bc:	4a8e      	ldr	r2, [pc, #568]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340066c2:	6413      	str	r3, [r2, #64]	@ 0x40
340066c4:	4b8c      	ldr	r3, [pc, #560]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340066c8:	4a8b      	ldr	r2, [pc, #556]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
340066ce:	6413      	str	r3, [r2, #64]	@ 0x40
340066d0:	e03e      	b.n	34006750 <HAL_RCC_OscConfig+0x684>
340066d2:	687b      	ldr	r3, [r7, #4]
340066d4:	689b      	ldr	r3, [r3, #8]
340066d6:	f248 0202 	movw	r2, #32770	@ 0x8002
340066da:	4293      	cmp	r3, r2
340066dc:	d110      	bne.n	34006700 <HAL_RCC_OscConfig+0x634>
340066de:	4b86      	ldr	r3, [pc, #536]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340066e2:	4a85      	ldr	r2, [pc, #532]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340066e8:	6413      	str	r3, [r2, #64]	@ 0x40
340066ea:	4b83      	ldr	r3, [pc, #524]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
340066ee:	4a82      	ldr	r2, [pc, #520]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340066f4:	6413      	str	r3, [r2, #64]	@ 0x40
340066f6:	4b80      	ldr	r3, [pc, #512]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
340066f8:	2202      	movs	r2, #2
340066fa:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
340066fe:	e027      	b.n	34006750 <HAL_RCC_OscConfig+0x684>
34006700:	687b      	ldr	r3, [r7, #4]
34006702:	689b      	ldr	r3, [r3, #8]
34006704:	4a7a      	ldr	r2, [pc, #488]	@ (340068f0 <HAL_RCC_OscConfig+0x824>)
34006706:	4293      	cmp	r3, r2
34006708:	d110      	bne.n	3400672c <HAL_RCC_OscConfig+0x660>
3400670a:	4b7b      	ldr	r3, [pc, #492]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400670e:	4a7a      	ldr	r2, [pc, #488]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
34006710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34006714:	6413      	str	r3, [r2, #64]	@ 0x40
34006716:	4b78      	ldr	r3, [pc, #480]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
34006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400671a:	4a77      	ldr	r2, [pc, #476]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400671c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34006720:	6413      	str	r3, [r2, #64]	@ 0x40
34006722:	4b75      	ldr	r3, [pc, #468]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
34006724:	2202      	movs	r2, #2
34006726:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3400672a:	e011      	b.n	34006750 <HAL_RCC_OscConfig+0x684>
3400672c:	4b72      	ldr	r3, [pc, #456]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400672e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34006732:	461a      	mov	r2, r3
34006734:	2302      	movs	r3, #2
34006736:	6013      	str	r3, [r2, #0]
34006738:	4b6f      	ldr	r3, [pc, #444]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400673a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400673c:	4a6e      	ldr	r2, [pc, #440]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400673e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34006742:	6413      	str	r3, [r2, #64]	@ 0x40
34006744:	4b6c      	ldr	r3, [pc, #432]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
34006746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34006748:	4a6b      	ldr	r2, [pc, #428]	@ (340068f8 <HAL_RCC_OscConfig+0x82c>)
3400674a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3400674e:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34006750:	687b      	ldr	r3, [r7, #4]
34006752:	689b      	ldr	r3, [r3, #8]
34006754:	2b00      	cmp	r3, #0
34006756:	d014      	beq.n	34006782 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006758:	f7fc ff48 	bl	340035ec <HAL_GetTick>
3400675c:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
3400675e:	e00a      	b.n	34006776 <HAL_RCC_OscConfig+0x6aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34006760:	f7fc ff44 	bl	340035ec <HAL_GetTick>
34006764:	4602      	mov	r2, r0
34006766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006768:	1ad3      	subs	r3, r2, r3
3400676a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400676e:	4293      	cmp	r3, r2
34006770:	d901      	bls.n	34006776 <HAL_RCC_OscConfig+0x6aa>
        {
          return HAL_TIMEOUT;
34006772:	2303      	movs	r3, #3
34006774:	e1c4      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() == 0U)
34006776:	f7ff fb11 	bl	34005d9c <LL_RCC_LSE_IsReady>
3400677a:	4603      	mov	r3, r0
3400677c:	2b00      	cmp	r3, #0
3400677e:	d0ef      	beq.n	34006760 <HAL_RCC_OscConfig+0x694>
34006780:	e013      	b.n	340067aa <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34006782:	f7fc ff33 	bl	340035ec <HAL_GetTick>
34006786:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34006788:	e00a      	b.n	340067a0 <HAL_RCC_OscConfig+0x6d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400678a:	f7fc ff2f 	bl	340035ec <HAL_GetTick>
3400678e:	4602      	mov	r2, r0
34006790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34006792:	1ad3      	subs	r3, r2, r3
34006794:	f241 3288 	movw	r2, #5000	@ 0x1388
34006798:	4293      	cmp	r3, r2
3400679a:	d901      	bls.n	340067a0 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
3400679c:	2303      	movs	r3, #3
3400679e:	e1af      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      while (LL_RCC_LSE_IsReady() != 0U)
340067a0:	f7ff fafc 	bl	34005d9c <LL_RCC_LSE_IsReady>
340067a4:	4603      	mov	r3, r0
340067a6:	2b00      	cmp	r3, #0
340067a8:	d1ef      	bne.n	3400678a <HAL_RCC_OscConfig+0x6be>
    }
  }

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340067aa:	687b      	ldr	r3, [r7, #4]
340067ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340067ae:	2b00      	cmp	r3, #0
340067b0:	d010      	beq.n	340067d4 <HAL_RCC_OscConfig+0x708>
340067b2:	687b      	ldr	r3, [r7, #4]
340067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340067b6:	2b01      	cmp	r3, #1
340067b8:	d00c      	beq.n	340067d4 <HAL_RCC_OscConfig+0x708>
340067ba:	687b      	ldr	r3, [r7, #4]
340067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340067be:	2b02      	cmp	r3, #2
340067c0:	d008      	beq.n	340067d4 <HAL_RCC_OscConfig+0x708>
340067c2:	687b      	ldr	r3, [r7, #4]
340067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340067c6:	2b03      	cmp	r3, #3
340067c8:	d004      	beq.n	340067d4 <HAL_RCC_OscConfig+0x708>
340067ca:	f240 21a5 	movw	r1, #677	@ 0x2a5
340067ce:	4849      	ldr	r0, [pc, #292]	@ (340068f4 <HAL_RCC_OscConfig+0x828>)
340067d0:	f7fa ff2c 	bl	3400162c <assert_failed>

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
340067d4:	687b      	ldr	r3, [r7, #4]
340067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340067d8:	2b00      	cmp	r3, #0
340067da:	d04c      	beq.n	34006876 <HAL_RCC_OscConfig+0x7aa>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
340067dc:	687b      	ldr	r3, [r7, #4]
340067de:	3328      	adds	r3, #40	@ 0x28
340067e0:	4619      	mov	r1, r3
340067e2:	2000      	movs	r0, #0
340067e4:	f001 f8e0 	bl	340079a8 <RCC_PLL_IsNewConfig>
340067e8:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340067ea:	f7ff fb3f 	bl	34005e6c <LL_RCC_PLL1_IsReady>
340067ee:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
340067f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
340067f2:	2b01      	cmp	r3, #1
340067f4:	d130      	bne.n	34006858 <HAL_RCC_OscConfig+0x78c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
340067f6:	f7ff fc11 	bl	3400601c <LL_RCC_IC1_GetSource>
340067fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340067fc:	f7ff fc2c 	bl	34006058 <LL_RCC_IC2_GetSource>
34006800:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006802:	f7ff fc47 	bl	34006094 <LL_RCC_IC6_GetSource>
34006806:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006808:	f7ff fc52 	bl	340060b0 <LL_RCC_IC11_GetSource>
3400680c:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
3400680e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006812:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006816:	d104      	bne.n	34006822 <HAL_RCC_OscConfig+0x756>
34006818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3400681a:	2b00      	cmp	r3, #0
3400681c:	d101      	bne.n	34006822 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
3400681e:	2301      	movs	r3, #1
34006820:	e16e      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006822:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006826:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400682a:	d10a      	bne.n	34006842 <HAL_RCC_OscConfig+0x776>
3400682c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
3400682e:	2b00      	cmp	r3, #0
34006830:	d005      	beq.n	3400683e <HAL_RCC_OscConfig+0x772>
34006832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34006834:	2b00      	cmp	r3, #0
34006836:	d002      	beq.n	3400683e <HAL_RCC_OscConfig+0x772>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34006838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3400683a:	2b00      	cmp	r3, #0
3400683c:	d101      	bne.n	34006842 <HAL_RCC_OscConfig+0x776>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
3400683e:	2301      	movs	r3, #1
34006840:	e15e      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34006842:	687b      	ldr	r3, [r7, #4]
34006844:	3328      	adds	r3, #40	@ 0x28
34006846:	4619      	mov	r1, r3
34006848:	2000      	movs	r0, #0
3400684a:	f000 fedd 	bl	34007608 <RCC_PLL_Config>
3400684e:	4603      	mov	r3, r0
34006850:	2b00      	cmp	r3, #0
34006852:	d010      	beq.n	34006876 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006854:	2301      	movs	r3, #1
34006856:	e153      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34006858:	687b      	ldr	r3, [r7, #4]
3400685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400685c:	2b02      	cmp	r3, #2
3400685e:	d10a      	bne.n	34006876 <HAL_RCC_OscConfig+0x7aa>
34006860:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34006862:	2b00      	cmp	r3, #0
34006864:	d107      	bne.n	34006876 <HAL_RCC_OscConfig+0x7aa>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34006866:	2000      	movs	r0, #0
34006868:	f001 f872 	bl	34007950 <RCC_PLL_Enable>
3400686c:	4603      	mov	r3, r0
3400686e:	2b00      	cmp	r3, #0
34006870:	d001      	beq.n	34006876 <HAL_RCC_OscConfig+0x7aa>
      {
        return HAL_ERROR;
34006872:	2301      	movs	r3, #1
34006874:	e144      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34006876:	687b      	ldr	r3, [r7, #4]
34006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400687a:	2b00      	cmp	r3, #0
3400687c:	d010      	beq.n	340068a0 <HAL_RCC_OscConfig+0x7d4>
3400687e:	687b      	ldr	r3, [r7, #4]
34006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006882:	2b01      	cmp	r3, #1
34006884:	d00c      	beq.n	340068a0 <HAL_RCC_OscConfig+0x7d4>
34006886:	687b      	ldr	r3, [r7, #4]
34006888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400688a:	2b02      	cmp	r3, #2
3400688c:	d008      	beq.n	340068a0 <HAL_RCC_OscConfig+0x7d4>
3400688e:	687b      	ldr	r3, [r7, #4]
34006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34006892:	2b03      	cmp	r3, #3
34006894:	d004      	beq.n	340068a0 <HAL_RCC_OscConfig+0x7d4>
34006896:	f240 21d3 	movw	r1, #723	@ 0x2d3
3400689a:	4816      	ldr	r0, [pc, #88]	@ (340068f4 <HAL_RCC_OscConfig+0x828>)
3400689c:	f7fa fec6 	bl	3400162c <assert_failed>

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340068a0:	687b      	ldr	r3, [r7, #4]
340068a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340068a4:	2b00      	cmp	r3, #0
340068a6:	d056      	beq.n	34006956 <HAL_RCC_OscConfig+0x88a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
340068a8:	687b      	ldr	r3, [r7, #4]
340068aa:	3344      	adds	r3, #68	@ 0x44
340068ac:	4619      	mov	r1, r3
340068ae:	2001      	movs	r0, #1
340068b0:	f001 f87a 	bl	340079a8 <RCC_PLL_IsNewConfig>
340068b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
340068b6:	f7ff fb0f 	bl	34005ed8 <LL_RCC_PLL2_IsReady>
340068ba:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
340068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340068be:	2b01      	cmp	r3, #1
340068c0:	d13a      	bne.n	34006938 <HAL_RCC_OscConfig+0x86c>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
340068c2:	f7ff fbab 	bl	3400601c <LL_RCC_IC1_GetSource>
340068c6:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340068c8:	f7ff fbc6 	bl	34006058 <LL_RCC_IC2_GetSource>
340068cc:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340068ce:	f7ff fbe1 	bl	34006094 <LL_RCC_IC6_GetSource>
340068d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340068d4:	f7ff fbec 	bl	340060b0 <LL_RCC_IC11_GetSource>
340068d8:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
340068da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340068de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340068e2:	d10b      	bne.n	340068fc <HAL_RCC_OscConfig+0x830>
340068e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
340068e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340068ea:	d107      	bne.n	340068fc <HAL_RCC_OscConfig+0x830>
      {
        return HAL_ERROR;
340068ec:	2301      	movs	r3, #1
340068ee:	e107      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
340068f0:	00018002 	.word	0x00018002
340068f4:	3401ad70 	.word	0x3401ad70
340068f8:	56028000 	.word	0x56028000
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
340068fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006900:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006904:	d10d      	bne.n	34006922 <HAL_RCC_OscConfig+0x856>
34006906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34006908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400690c:	d007      	beq.n	3400691e <HAL_RCC_OscConfig+0x852>
3400690e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34006910:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006914:	d003      	beq.n	3400691e <HAL_RCC_OscConfig+0x852>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34006918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400691c:	d101      	bne.n	34006922 <HAL_RCC_OscConfig+0x856>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3400691e:	2301      	movs	r3, #1
34006920:	e0ee      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34006922:	687b      	ldr	r3, [r7, #4]
34006924:	3344      	adds	r3, #68	@ 0x44
34006926:	4619      	mov	r1, r3
34006928:	2001      	movs	r0, #1
3400692a:	f000 fe6d 	bl	34007608 <RCC_PLL_Config>
3400692e:	4603      	mov	r3, r0
34006930:	2b00      	cmp	r3, #0
34006932:	d010      	beq.n	34006956 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34006934:	2301      	movs	r3, #1
34006936:	e0e3      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34006938:	687b      	ldr	r3, [r7, #4]
3400693a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400693c:	2b02      	cmp	r3, #2
3400693e:	d10a      	bne.n	34006956 <HAL_RCC_OscConfig+0x88a>
34006940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34006942:	2b00      	cmp	r3, #0
34006944:	d107      	bne.n	34006956 <HAL_RCC_OscConfig+0x88a>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34006946:	2001      	movs	r0, #1
34006948:	f001 f802 	bl	34007950 <RCC_PLL_Enable>
3400694c:	4603      	mov	r3, r0
3400694e:	2b00      	cmp	r3, #0
34006950:	d001      	beq.n	34006956 <HAL_RCC_OscConfig+0x88a>
      {
        return HAL_ERROR;
34006952:	2301      	movs	r3, #1
34006954:	e0d4      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34006956:	687b      	ldr	r3, [r7, #4]
34006958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400695a:	2b00      	cmp	r3, #0
3400695c:	d010      	beq.n	34006980 <HAL_RCC_OscConfig+0x8b4>
3400695e:	687b      	ldr	r3, [r7, #4]
34006960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006962:	2b01      	cmp	r3, #1
34006964:	d00c      	beq.n	34006980 <HAL_RCC_OscConfig+0x8b4>
34006966:	687b      	ldr	r3, [r7, #4]
34006968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400696a:	2b02      	cmp	r3, #2
3400696c:	d008      	beq.n	34006980 <HAL_RCC_OscConfig+0x8b4>
3400696e:	687b      	ldr	r3, [r7, #4]
34006970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006972:	2b03      	cmp	r3, #3
34006974:	d004      	beq.n	34006980 <HAL_RCC_OscConfig+0x8b4>
34006976:	f240 3101 	movw	r1, #769	@ 0x301
3400697a:	4863      	ldr	r0, [pc, #396]	@ (34006b08 <HAL_RCC_OscConfig+0xa3c>)
3400697c:	f7fa fe56 	bl	3400162c <assert_failed>

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34006980:	687b      	ldr	r3, [r7, #4]
34006982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006984:	2b00      	cmp	r3, #0
34006986:	d050      	beq.n	34006a2a <HAL_RCC_OscConfig+0x95e>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34006988:	687b      	ldr	r3, [r7, #4]
3400698a:	3360      	adds	r3, #96	@ 0x60
3400698c:	4619      	mov	r1, r3
3400698e:	2002      	movs	r0, #2
34006990:	f001 f80a 	bl	340079a8 <RCC_PLL_IsNewConfig>
34006994:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34006996:	f7ff fa69 	bl	34005e6c <LL_RCC_PLL1_IsReady>
3400699a:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
3400699c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3400699e:	2b01      	cmp	r3, #1
340069a0:	d134      	bne.n	34006a0c <HAL_RCC_OscConfig+0x940>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
340069a2:	f7ff fb3b 	bl	3400601c <LL_RCC_IC1_GetSource>
340069a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
340069a8:	f7ff fb56 	bl	34006058 <LL_RCC_IC2_GetSource>
340069ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
340069ae:	f7ff fb71 	bl	34006094 <LL_RCC_IC6_GetSource>
340069b2:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
340069b4:	f7ff fb7c 	bl	340060b0 <LL_RCC_IC11_GetSource>
340069b8:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
340069ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340069be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340069c2:	d105      	bne.n	340069d0 <HAL_RCC_OscConfig+0x904>
340069c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340069c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340069ca:	d101      	bne.n	340069d0 <HAL_RCC_OscConfig+0x904>
      {
        return HAL_ERROR;
340069cc:	2301      	movs	r3, #1
340069ce:	e097      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
340069d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
340069d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340069d8:	d10d      	bne.n	340069f6 <HAL_RCC_OscConfig+0x92a>
340069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
340069dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340069e0:	d007      	beq.n	340069f2 <HAL_RCC_OscConfig+0x926>
340069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340069e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340069e8:	d003      	beq.n	340069f2 <HAL_RCC_OscConfig+0x926>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
340069ea:	6a3b      	ldr	r3, [r7, #32]
340069ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340069f0:	d101      	bne.n	340069f6 <HAL_RCC_OscConfig+0x92a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
340069f2:	2301      	movs	r3, #1
340069f4:	e084      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
340069f6:	687b      	ldr	r3, [r7, #4]
340069f8:	3360      	adds	r3, #96	@ 0x60
340069fa:	4619      	mov	r1, r3
340069fc:	2002      	movs	r0, #2
340069fe:	f000 fe03 	bl	34007608 <RCC_PLL_Config>
34006a02:	4603      	mov	r3, r0
34006a04:	2b00      	cmp	r3, #0
34006a06:	d010      	beq.n	34006a2a <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34006a08:	2301      	movs	r3, #1
34006a0a:	e079      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34006a0c:	687b      	ldr	r3, [r7, #4]
34006a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006a10:	2b02      	cmp	r3, #2
34006a12:	d10a      	bne.n	34006a2a <HAL_RCC_OscConfig+0x95e>
34006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34006a16:	2b00      	cmp	r3, #0
34006a18:	d107      	bne.n	34006a2a <HAL_RCC_OscConfig+0x95e>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34006a1a:	2002      	movs	r0, #2
34006a1c:	f000 ff98 	bl	34007950 <RCC_PLL_Enable>
34006a20:	4603      	mov	r3, r0
34006a22:	2b00      	cmp	r3, #0
34006a24:	d001      	beq.n	34006a2a <HAL_RCC_OscConfig+0x95e>
      {
        return HAL_ERROR;
34006a26:	2301      	movs	r3, #1
34006a28:	e06a      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
    }
  }

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34006a2a:	687b      	ldr	r3, [r7, #4]
34006a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006a2e:	2b00      	cmp	r3, #0
34006a30:	d010      	beq.n	34006a54 <HAL_RCC_OscConfig+0x988>
34006a32:	687b      	ldr	r3, [r7, #4]
34006a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006a36:	2b01      	cmp	r3, #1
34006a38:	d00c      	beq.n	34006a54 <HAL_RCC_OscConfig+0x988>
34006a3a:	687b      	ldr	r3, [r7, #4]
34006a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006a3e:	2b02      	cmp	r3, #2
34006a40:	d008      	beq.n	34006a54 <HAL_RCC_OscConfig+0x988>
34006a42:	687b      	ldr	r3, [r7, #4]
34006a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006a46:	2b03      	cmp	r3, #3
34006a48:	d004      	beq.n	34006a54 <HAL_RCC_OscConfig+0x988>
34006a4a:	f240 312e 	movw	r1, #814	@ 0x32e
34006a4e:	482e      	ldr	r0, [pc, #184]	@ (34006b08 <HAL_RCC_OscConfig+0xa3c>)
34006a50:	f7fa fdec 	bl	3400162c <assert_failed>

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34006a54:	687b      	ldr	r3, [r7, #4]
34006a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006a58:	2b00      	cmp	r3, #0
34006a5a:	d050      	beq.n	34006afe <HAL_RCC_OscConfig+0xa32>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34006a5c:	687b      	ldr	r3, [r7, #4]
34006a5e:	337c      	adds	r3, #124	@ 0x7c
34006a60:	4619      	mov	r1, r3
34006a62:	2003      	movs	r0, #3
34006a64:	f000 ffa0 	bl	340079a8 <RCC_PLL_IsNewConfig>
34006a68:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34006a6a:	f7ff faa1 	bl	34005fb0 <LL_RCC_PLL4_IsReady>
34006a6e:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34006a70:	69fb      	ldr	r3, [r7, #28]
34006a72:	2b01      	cmp	r3, #1
34006a74:	d134      	bne.n	34006ae0 <HAL_RCC_OscConfig+0xa14>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34006a76:	f7ff fad1 	bl	3400601c <LL_RCC_IC1_GetSource>
34006a7a:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34006a7c:	f7ff faec 	bl	34006058 <LL_RCC_IC2_GetSource>
34006a80:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34006a82:	f7ff fb07 	bl	34006094 <LL_RCC_IC6_GetSource>
34006a86:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34006a88:	f7ff fb12 	bl	340060b0 <LL_RCC_IC11_GetSource>
34006a8c:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34006a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34006a92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006a96:	d105      	bne.n	34006aa4 <HAL_RCC_OscConfig+0x9d8>
34006a98:	697b      	ldr	r3, [r7, #20]
34006a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006a9e:	d101      	bne.n	34006aa4 <HAL_RCC_OscConfig+0x9d8>
      {
        return HAL_ERROR;
34006aa0:	2301      	movs	r3, #1
34006aa2:	e02d      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34006aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34006aa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006aac:	d10d      	bne.n	34006aca <HAL_RCC_OscConfig+0x9fe>
34006aae:	693b      	ldr	r3, [r7, #16]
34006ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006ab4:	d007      	beq.n	34006ac6 <HAL_RCC_OscConfig+0x9fa>
34006ab6:	68fb      	ldr	r3, [r7, #12]
34006ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006abc:	d003      	beq.n	34006ac6 <HAL_RCC_OscConfig+0x9fa>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34006abe:	68bb      	ldr	r3, [r7, #8]
34006ac0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006ac4:	d101      	bne.n	34006aca <HAL_RCC_OscConfig+0x9fe>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34006ac6:	2301      	movs	r3, #1
34006ac8:	e01a      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34006aca:	687b      	ldr	r3, [r7, #4]
34006acc:	337c      	adds	r3, #124	@ 0x7c
34006ace:	4619      	mov	r1, r3
34006ad0:	2003      	movs	r0, #3
34006ad2:	f000 fd99 	bl	34007608 <RCC_PLL_Config>
34006ad6:	4603      	mov	r3, r0
34006ad8:	2b00      	cmp	r3, #0
34006ada:	d010      	beq.n	34006afe <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
34006adc:	2301      	movs	r3, #1
34006ade:	e00f      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34006ae0:	687b      	ldr	r3, [r7, #4]
34006ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34006ae4:	2b02      	cmp	r3, #2
34006ae6:	d10a      	bne.n	34006afe <HAL_RCC_OscConfig+0xa32>
34006ae8:	69bb      	ldr	r3, [r7, #24]
34006aea:	2b00      	cmp	r3, #0
34006aec:	d107      	bne.n	34006afe <HAL_RCC_OscConfig+0xa32>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34006aee:	2003      	movs	r0, #3
34006af0:	f000 ff2e 	bl	34007950 <RCC_PLL_Enable>
34006af4:	4603      	mov	r3, r0
34006af6:	2b00      	cmp	r3, #0
34006af8:	d001      	beq.n	34006afe <HAL_RCC_OscConfig+0xa32>
      {
        return HAL_ERROR;
34006afa:	2301      	movs	r3, #1
34006afc:	e000      	b.n	34006b00 <HAL_RCC_OscConfig+0xa34>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34006afe:	2300      	movs	r3, #0
}
34006b00:	4618      	mov	r0, r3
34006b02:	3788      	adds	r7, #136	@ 0x88
34006b04:	46bd      	mov	sp, r7
34006b06:	bd80      	pop	{r7, pc}
34006b08:	3401ad70 	.word	0x3401ad70

34006b0c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34006b0c:	b580      	push	{r7, lr}
34006b0e:	b084      	sub	sp, #16
34006b10:	af00      	add	r7, sp, #0
34006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34006b14:	687b      	ldr	r3, [r7, #4]
34006b16:	2b00      	cmp	r3, #0
34006b18:	d102      	bne.n	34006b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
34006b1a:	2301      	movs	r3, #1
34006b1c:	f000 bc6d 	b.w	340073fa <HAL_RCC_ClockConfig+0x8ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34006b20:	687b      	ldr	r3, [r7, #4]
34006b22:	681b      	ldr	r3, [r3, #0]
34006b24:	2b7f      	cmp	r3, #127	@ 0x7f
34006b26:	d904      	bls.n	34006b32 <HAL_RCC_ClockConfig+0x26>
34006b28:	f240 317e 	movw	r1, #894	@ 0x37e
34006b2c:	4880      	ldr	r0, [pc, #512]	@ (34006d30 <HAL_RCC_ClockConfig+0x224>)
34006b2e:	f7fa fd7d 	bl	3400162c <assert_failed>

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34006b32:	687b      	ldr	r3, [r7, #4]
34006b34:	681b      	ldr	r3, [r3, #0]
34006b36:	f003 0308 	and.w	r3, r3, #8
34006b3a:	2b00      	cmp	r3, #0
34006b3c:	d035      	beq.n	34006baa <HAL_RCC_ClockConfig+0x9e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34006b3e:	687b      	ldr	r3, [r7, #4]
34006b40:	691b      	ldr	r3, [r3, #16]
34006b42:	2b00      	cmp	r3, #0
34006b44:	d020      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b46:	687b      	ldr	r3, [r7, #4]
34006b48:	691b      	ldr	r3, [r3, #16]
34006b4a:	2b01      	cmp	r3, #1
34006b4c:	d01c      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b4e:	687b      	ldr	r3, [r7, #4]
34006b50:	691b      	ldr	r3, [r3, #16]
34006b52:	2b02      	cmp	r3, #2
34006b54:	d018      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b56:	687b      	ldr	r3, [r7, #4]
34006b58:	691b      	ldr	r3, [r3, #16]
34006b5a:	2b03      	cmp	r3, #3
34006b5c:	d014      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b5e:	687b      	ldr	r3, [r7, #4]
34006b60:	691b      	ldr	r3, [r3, #16]
34006b62:	2b04      	cmp	r3, #4
34006b64:	d010      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b66:	687b      	ldr	r3, [r7, #4]
34006b68:	691b      	ldr	r3, [r3, #16]
34006b6a:	2b05      	cmp	r3, #5
34006b6c:	d00c      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b6e:	687b      	ldr	r3, [r7, #4]
34006b70:	691b      	ldr	r3, [r3, #16]
34006b72:	2b06      	cmp	r3, #6
34006b74:	d008      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b76:	687b      	ldr	r3, [r7, #4]
34006b78:	691b      	ldr	r3, [r3, #16]
34006b7a:	2b07      	cmp	r3, #7
34006b7c:	d004      	beq.n	34006b88 <HAL_RCC_ClockConfig+0x7c>
34006b7e:	f240 3185 	movw	r1, #901	@ 0x385
34006b82:	486b      	ldr	r0, [pc, #428]	@ (34006d30 <HAL_RCC_ClockConfig+0x224>)
34006b84:	f7fa fd52 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34006b88:	687b      	ldr	r3, [r7, #4]
34006b8a:	691a      	ldr	r2, [r3, #16]
34006b8c:	4b69      	ldr	r3, [pc, #420]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006b90:	f003 0307 	and.w	r3, r3, #7
34006b94:	429a      	cmp	r2, r3
34006b96:	d908      	bls.n	34006baa <HAL_RCC_ClockConfig+0x9e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34006b98:	4b66      	ldr	r3, [pc, #408]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006b9c:	f023 0207 	bic.w	r2, r3, #7
34006ba0:	687b      	ldr	r3, [r7, #4]
34006ba2:	691b      	ldr	r3, [r3, #16]
34006ba4:	4963      	ldr	r1, [pc, #396]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006ba6:	4313      	orrs	r3, r2
34006ba8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34006baa:	687b      	ldr	r3, [r7, #4]
34006bac:	681b      	ldr	r3, [r3, #0]
34006bae:	f003 0310 	and.w	r3, r3, #16
34006bb2:	2b00      	cmp	r3, #0
34006bb4:	d035      	beq.n	34006c22 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34006bb6:	687b      	ldr	r3, [r7, #4]
34006bb8:	695b      	ldr	r3, [r3, #20]
34006bba:	2b00      	cmp	r3, #0
34006bbc:	d020      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bbe:	687b      	ldr	r3, [r7, #4]
34006bc0:	695b      	ldr	r3, [r3, #20]
34006bc2:	2b10      	cmp	r3, #16
34006bc4:	d01c      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bc6:	687b      	ldr	r3, [r7, #4]
34006bc8:	695b      	ldr	r3, [r3, #20]
34006bca:	2b20      	cmp	r3, #32
34006bcc:	d018      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bce:	687b      	ldr	r3, [r7, #4]
34006bd0:	695b      	ldr	r3, [r3, #20]
34006bd2:	2b30      	cmp	r3, #48	@ 0x30
34006bd4:	d014      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bd6:	687b      	ldr	r3, [r7, #4]
34006bd8:	695b      	ldr	r3, [r3, #20]
34006bda:	2b40      	cmp	r3, #64	@ 0x40
34006bdc:	d010      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bde:	687b      	ldr	r3, [r7, #4]
34006be0:	695b      	ldr	r3, [r3, #20]
34006be2:	2b50      	cmp	r3, #80	@ 0x50
34006be4:	d00c      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006be6:	687b      	ldr	r3, [r7, #4]
34006be8:	695b      	ldr	r3, [r3, #20]
34006bea:	2b60      	cmp	r3, #96	@ 0x60
34006bec:	d008      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bee:	687b      	ldr	r3, [r7, #4]
34006bf0:	695b      	ldr	r3, [r3, #20]
34006bf2:	2b70      	cmp	r3, #112	@ 0x70
34006bf4:	d004      	beq.n	34006c00 <HAL_RCC_ClockConfig+0xf4>
34006bf6:	f240 318f 	movw	r1, #911	@ 0x38f
34006bfa:	484d      	ldr	r0, [pc, #308]	@ (34006d30 <HAL_RCC_ClockConfig+0x224>)
34006bfc:	f7fa fd16 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34006c00:	687b      	ldr	r3, [r7, #4]
34006c02:	695a      	ldr	r2, [r3, #20]
34006c04:	4b4b      	ldr	r3, [pc, #300]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34006c0c:	429a      	cmp	r2, r3
34006c0e:	d908      	bls.n	34006c22 <HAL_RCC_ClockConfig+0x116>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34006c10:	4b48      	ldr	r3, [pc, #288]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34006c18:	687b      	ldr	r3, [r7, #4]
34006c1a:	695b      	ldr	r3, [r3, #20]
34006c1c:	4945      	ldr	r1, [pc, #276]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006c1e:	4313      	orrs	r3, r2
34006c20:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34006c22:	687b      	ldr	r3, [r7, #4]
34006c24:	681b      	ldr	r3, [r3, #0]
34006c26:	f003 0320 	and.w	r3, r3, #32
34006c2a:	2b00      	cmp	r3, #0
34006c2c:	d03c      	beq.n	34006ca8 <HAL_RCC_ClockConfig+0x19c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34006c2e:	687b      	ldr	r3, [r7, #4]
34006c30:	699b      	ldr	r3, [r3, #24]
34006c32:	2b00      	cmp	r3, #0
34006c34:	d027      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c36:	687b      	ldr	r3, [r7, #4]
34006c38:	699b      	ldr	r3, [r3, #24]
34006c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34006c3e:	d022      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c40:	687b      	ldr	r3, [r7, #4]
34006c42:	699b      	ldr	r3, [r3, #24]
34006c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34006c48:	d01d      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c4a:	687b      	ldr	r3, [r7, #4]
34006c4c:	699b      	ldr	r3, [r3, #24]
34006c4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34006c52:	d018      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c54:	687b      	ldr	r3, [r7, #4]
34006c56:	699b      	ldr	r3, [r3, #24]
34006c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34006c5c:	d013      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c5e:	687b      	ldr	r3, [r7, #4]
34006c60:	699b      	ldr	r3, [r3, #24]
34006c62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34006c66:	d00e      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c68:	687b      	ldr	r3, [r7, #4]
34006c6a:	699b      	ldr	r3, [r3, #24]
34006c6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34006c70:	d009      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c72:	687b      	ldr	r3, [r7, #4]
34006c74:	699b      	ldr	r3, [r3, #24]
34006c76:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
34006c7a:	d004      	beq.n	34006c86 <HAL_RCC_ClockConfig+0x17a>
34006c7c:	f240 3199 	movw	r1, #921	@ 0x399
34006c80:	482b      	ldr	r0, [pc, #172]	@ (34006d30 <HAL_RCC_ClockConfig+0x224>)
34006c82:	f7fa fcd3 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34006c86:	687b      	ldr	r3, [r7, #4]
34006c88:	699a      	ldr	r2, [r3, #24]
34006c8a:	4b2a      	ldr	r3, [pc, #168]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34006c92:	429a      	cmp	r2, r3
34006c94:	d908      	bls.n	34006ca8 <HAL_RCC_ClockConfig+0x19c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34006c96:	4b27      	ldr	r3, [pc, #156]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c9a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34006c9e:	687b      	ldr	r3, [r7, #4]
34006ca0:	699b      	ldr	r3, [r3, #24]
34006ca2:	4924      	ldr	r1, [pc, #144]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006ca4:	4313      	orrs	r3, r2
34006ca6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34006ca8:	687b      	ldr	r3, [r7, #4]
34006caa:	681b      	ldr	r3, [r3, #0]
34006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34006cb0:	2b00      	cmp	r3, #0
34006cb2:	d041      	beq.n	34006d38 <HAL_RCC_ClockConfig+0x22c>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34006cb4:	687b      	ldr	r3, [r7, #4]
34006cb6:	69db      	ldr	r3, [r3, #28]
34006cb8:	2b00      	cmp	r3, #0
34006cba:	d027      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cbc:	687b      	ldr	r3, [r7, #4]
34006cbe:	69db      	ldr	r3, [r3, #28]
34006cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34006cc4:	d022      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cc6:	687b      	ldr	r3, [r7, #4]
34006cc8:	69db      	ldr	r3, [r3, #28]
34006cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34006cce:	d01d      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cd0:	687b      	ldr	r3, [r7, #4]
34006cd2:	69db      	ldr	r3, [r3, #28]
34006cd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34006cd8:	d018      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cda:	687b      	ldr	r3, [r7, #4]
34006cdc:	69db      	ldr	r3, [r3, #28]
34006cde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34006ce2:	d013      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006ce4:	687b      	ldr	r3, [r7, #4]
34006ce6:	69db      	ldr	r3, [r3, #28]
34006ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34006cec:	d00e      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cee:	687b      	ldr	r3, [r7, #4]
34006cf0:	69db      	ldr	r3, [r3, #28]
34006cf2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34006cf6:	d009      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006cf8:	687b      	ldr	r3, [r7, #4]
34006cfa:	69db      	ldr	r3, [r3, #28]
34006cfc:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34006d00:	d004      	beq.n	34006d0c <HAL_RCC_ClockConfig+0x200>
34006d02:	f240 31a3 	movw	r1, #931	@ 0x3a3
34006d06:	480a      	ldr	r0, [pc, #40]	@ (34006d30 <HAL_RCC_ClockConfig+0x224>)
34006d08:	f7fa fc90 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34006d0c:	687b      	ldr	r3, [r7, #4]
34006d0e:	69da      	ldr	r2, [r3, #28]
34006d10:	4b08      	ldr	r3, [pc, #32]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006d14:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34006d18:	429a      	cmp	r2, r3
34006d1a:	d90d      	bls.n	34006d38 <HAL_RCC_ClockConfig+0x22c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34006d1c:	4b05      	ldr	r3, [pc, #20]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006d20:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34006d24:	687b      	ldr	r3, [r7, #4]
34006d26:	69db      	ldr	r3, [r3, #28]
34006d28:	4902      	ldr	r1, [pc, #8]	@ (34006d34 <HAL_RCC_ClockConfig+0x228>)
34006d2a:	4313      	orrs	r3, r2
34006d2c:	624b      	str	r3, [r1, #36]	@ 0x24
34006d2e:	e003      	b.n	34006d38 <HAL_RCC_ClockConfig+0x22c>
34006d30:	3401ad70 	.word	0x3401ad70
34006d34:	56028000 	.word	0x56028000
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34006d38:	687b      	ldr	r3, [r7, #4]
34006d3a:	681b      	ldr	r3, [r3, #0]
34006d3c:	f003 0304 	and.w	r3, r3, #4
34006d40:	2b00      	cmp	r3, #0
34006d42:	d03c      	beq.n	34006dbe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34006d44:	687b      	ldr	r3, [r7, #4]
34006d46:	68db      	ldr	r3, [r3, #12]
34006d48:	2b00      	cmp	r3, #0
34006d4a:	d027      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d4c:	687b      	ldr	r3, [r7, #4]
34006d4e:	68db      	ldr	r3, [r3, #12]
34006d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34006d54:	d022      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d56:	687b      	ldr	r3, [r7, #4]
34006d58:	68db      	ldr	r3, [r3, #12]
34006d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34006d5e:	d01d      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d60:	687b      	ldr	r3, [r7, #4]
34006d62:	68db      	ldr	r3, [r3, #12]
34006d64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34006d68:	d018      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d6a:	687b      	ldr	r3, [r7, #4]
34006d6c:	68db      	ldr	r3, [r3, #12]
34006d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34006d72:	d013      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d74:	687b      	ldr	r3, [r7, #4]
34006d76:	68db      	ldr	r3, [r3, #12]
34006d78:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
34006d7c:	d00e      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d7e:	687b      	ldr	r3, [r7, #4]
34006d80:	68db      	ldr	r3, [r3, #12]
34006d82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34006d86:	d009      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d88:	687b      	ldr	r3, [r7, #4]
34006d8a:	68db      	ldr	r3, [r3, #12]
34006d8c:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
34006d90:	d004      	beq.n	34006d9c <HAL_RCC_ClockConfig+0x290>
34006d92:	f240 31ad 	movw	r1, #941	@ 0x3ad
34006d96:	4874      	ldr	r0, [pc, #464]	@ (34006f68 <HAL_RCC_ClockConfig+0x45c>)
34006d98:	f7fa fc48 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34006d9c:	687b      	ldr	r3, [r7, #4]
34006d9e:	68da      	ldr	r2, [r3, #12]
34006da0:	4b72      	ldr	r3, [pc, #456]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006da4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34006da8:	429a      	cmp	r2, r3
34006daa:	d908      	bls.n	34006dbe <HAL_RCC_ClockConfig+0x2b2>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34006dac:	4b6f      	ldr	r3, [pc, #444]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006db0:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34006db4:	687b      	ldr	r3, [r7, #4]
34006db6:	68db      	ldr	r3, [r3, #12]
34006db8:	496c      	ldr	r1, [pc, #432]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006dba:	4313      	orrs	r3, r2
34006dbc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34006dbe:	687b      	ldr	r3, [r7, #4]
34006dc0:	681b      	ldr	r3, [r3, #0]
34006dc2:	f003 0301 	and.w	r3, r3, #1
34006dc6:	2b00      	cmp	r3, #0
34006dc8:	f000 80a2 	beq.w	34006f10 <HAL_RCC_ClockConfig+0x404>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34006dcc:	687b      	ldr	r3, [r7, #4]
34006dce:	685b      	ldr	r3, [r3, #4]
34006dd0:	2b00      	cmp	r3, #0
34006dd2:	d013      	beq.n	34006dfc <HAL_RCC_ClockConfig+0x2f0>
34006dd4:	687b      	ldr	r3, [r7, #4]
34006dd6:	685b      	ldr	r3, [r3, #4]
34006dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34006ddc:	d00e      	beq.n	34006dfc <HAL_RCC_ClockConfig+0x2f0>
34006dde:	687b      	ldr	r3, [r7, #4]
34006de0:	685b      	ldr	r3, [r3, #4]
34006de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34006de6:	d009      	beq.n	34006dfc <HAL_RCC_ClockConfig+0x2f0>
34006de8:	687b      	ldr	r3, [r7, #4]
34006dea:	685b      	ldr	r3, [r3, #4]
34006dec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34006df0:	d004      	beq.n	34006dfc <HAL_RCC_ClockConfig+0x2f0>
34006df2:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34006df6:	485c      	ldr	r0, [pc, #368]	@ (34006f68 <HAL_RCC_ClockConfig+0x45c>)
34006df8:	f7fa fc18 	bl	3400162c <assert_failed>

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34006dfc:	687b      	ldr	r3, [r7, #4]
34006dfe:	685b      	ldr	r3, [r3, #4]
34006e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34006e04:	d106      	bne.n	34006e14 <HAL_RCC_ClockConfig+0x308>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34006e06:	f7fe fee7 	bl	34005bd8 <LL_RCC_HSE_IsReady>
34006e0a:	4603      	mov	r3, r0
34006e0c:	2b00      	cmp	r3, #0
34006e0e:	d15a      	bne.n	34006ec6 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34006e10:	2301      	movs	r3, #1
34006e12:	e2f2      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34006e14:	687b      	ldr	r3, [r7, #4]
34006e16:	685b      	ldr	r3, [r3, #4]
34006e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34006e1c:	d140      	bne.n	34006ea0 <HAL_RCC_ClockConfig+0x394>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34006e1e:	687b      	ldr	r3, [r7, #4]
34006e20:	6a1b      	ldr	r3, [r3, #32]
34006e22:	2b00      	cmp	r3, #0
34006e24:	d013      	beq.n	34006e4e <HAL_RCC_ClockConfig+0x342>
34006e26:	687b      	ldr	r3, [r7, #4]
34006e28:	6a1b      	ldr	r3, [r3, #32]
34006e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006e2e:	d00e      	beq.n	34006e4e <HAL_RCC_ClockConfig+0x342>
34006e30:	687b      	ldr	r3, [r7, #4]
34006e32:	6a1b      	ldr	r3, [r3, #32]
34006e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006e38:	d009      	beq.n	34006e4e <HAL_RCC_ClockConfig+0x342>
34006e3a:	687b      	ldr	r3, [r7, #4]
34006e3c:	6a1b      	ldr	r3, [r3, #32]
34006e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006e42:	d004      	beq.n	34006e4e <HAL_RCC_ClockConfig+0x342>
34006e44:	f240 31c7 	movw	r1, #967	@ 0x3c7
34006e48:	4847      	ldr	r0, [pc, #284]	@ (34006f68 <HAL_RCC_ClockConfig+0x45c>)
34006e4a:	f7fa fbef 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34006e4e:	687b      	ldr	r3, [r7, #4]
34006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006e52:	2b00      	cmp	r3, #0
34006e54:	d004      	beq.n	34006e60 <HAL_RCC_ClockConfig+0x354>
34006e56:	687b      	ldr	r3, [r7, #4]
34006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006e5e:	d904      	bls.n	34006e6a <HAL_RCC_ClockConfig+0x35e>
34006e60:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34006e64:	4840      	ldr	r0, [pc, #256]	@ (34006f68 <HAL_RCC_ClockConfig+0x45c>)
34006e66:	f7fa fbe1 	bl	3400162c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34006e6a:	f7ff f8d7 	bl	3400601c <LL_RCC_IC1_GetSource>
34006e6e:	4602      	mov	r2, r0
34006e70:	687b      	ldr	r3, [r7, #4]
34006e72:	6a1b      	ldr	r3, [r3, #32]
34006e74:	4619      	mov	r1, r3
34006e76:	4610      	mov	r0, r2
34006e78:	f000 fe4a 	bl	34007b10 <RCC_IC_CheckPLLSources>
34006e7c:	4603      	mov	r3, r0
34006e7e:	2b01      	cmp	r3, #1
34006e80:	d001      	beq.n	34006e86 <HAL_RCC_ClockConfig+0x37a>
      {
        return HAL_ERROR;
34006e82:	2301      	movs	r3, #1
34006e84:	e2b9      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34006e86:	687b      	ldr	r3, [r7, #4]
34006e88:	6a1a      	ldr	r2, [r3, #32]
34006e8a:	687b      	ldr	r3, [r7, #4]
34006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006e8e:	3b01      	subs	r3, #1
34006e90:	041b      	lsls	r3, r3, #16
34006e92:	4936      	ldr	r1, [pc, #216]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006e94:	4313      	orrs	r3, r2
34006e96:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34006e9a:	f7ff f8b1 	bl	34006000 <LL_RCC_IC1_Enable>
34006e9e:	e012      	b.n	34006ec6 <HAL_RCC_ClockConfig+0x3ba>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34006ea0:	687b      	ldr	r3, [r7, #4]
34006ea2:	685b      	ldr	r3, [r3, #4]
34006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34006ea8:	d106      	bne.n	34006eb8 <HAL_RCC_ClockConfig+0x3ac>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34006eaa:	f7fe ff2d 	bl	34005d08 <LL_RCC_MSI_IsReady>
34006eae:	4603      	mov	r3, r0
34006eb0:	2b00      	cmp	r3, #0
34006eb2:	d108      	bne.n	34006ec6 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34006eb4:	2301      	movs	r3, #1
34006eb6:	e2a0      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34006eb8:	f7fe febe 	bl	34005c38 <LL_RCC_HSI_IsReady>
34006ebc:	4603      	mov	r3, r0
34006ebe:	2b00      	cmp	r3, #0
34006ec0:	d101      	bne.n	34006ec6 <HAL_RCC_ClockConfig+0x3ba>
      {
        return HAL_ERROR;
34006ec2:	2301      	movs	r3, #1
34006ec4:	e299      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34006ec6:	4b29      	ldr	r3, [pc, #164]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006ec8:	6a1b      	ldr	r3, [r3, #32]
34006eca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34006ece:	687b      	ldr	r3, [r7, #4]
34006ed0:	685b      	ldr	r3, [r3, #4]
34006ed2:	4926      	ldr	r1, [pc, #152]	@ (34006f6c <HAL_RCC_ClockConfig+0x460>)
34006ed4:	4313      	orrs	r3, r2
34006ed6:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34006ed8:	f7fc fb88 	bl	340035ec <HAL_GetTick>
34006edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34006ede:	e00a      	b.n	34006ef6 <HAL_RCC_ClockConfig+0x3ea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34006ee0:	f7fc fb84 	bl	340035ec <HAL_GetTick>
34006ee4:	4602      	mov	r2, r0
34006ee6:	68fb      	ldr	r3, [r7, #12]
34006ee8:	1ad3      	subs	r3, r2, r3
34006eea:	f241 3288 	movw	r2, #5000	@ 0x1388
34006eee:	4293      	cmp	r3, r2
34006ef0:	d901      	bls.n	34006ef6 <HAL_RCC_ClockConfig+0x3ea>
      {
        return HAL_TIMEOUT;
34006ef2:	2303      	movs	r3, #3
34006ef4:	e281      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34006ef6:	f7fe ff8f 	bl	34005e18 <LL_RCC_GetCpuClkSource>
34006efa:	4602      	mov	r2, r0
34006efc:	687b      	ldr	r3, [r7, #4]
34006efe:	685b      	ldr	r3, [r3, #4]
34006f00:	011b      	lsls	r3, r3, #4
34006f02:	429a      	cmp	r2, r3
34006f04:	d1ec      	bne.n	34006ee0 <HAL_RCC_ClockConfig+0x3d4>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34006f06:	f000 fa83 	bl	34007410 <HAL_RCC_GetCpuClockFreq>
34006f0a:	4603      	mov	r3, r0
34006f0c:	4a18      	ldr	r2, [pc, #96]	@ (34006f70 <HAL_RCC_ClockConfig+0x464>)
34006f0e:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34006f10:	687b      	ldr	r3, [r7, #4]
34006f12:	681b      	ldr	r3, [r3, #0]
34006f14:	f003 0302 	and.w	r3, r3, #2
34006f18:	2b00      	cmp	r3, #0
34006f1a:	f000 8127 	beq.w	3400716c <HAL_RCC_ClockConfig+0x660>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34006f1e:	687b      	ldr	r3, [r7, #4]
34006f20:	689b      	ldr	r3, [r3, #8]
34006f22:	2b00      	cmp	r3, #0
34006f24:	d013      	beq.n	34006f4e <HAL_RCC_ClockConfig+0x442>
34006f26:	687b      	ldr	r3, [r7, #4]
34006f28:	689b      	ldr	r3, [r3, #8]
34006f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34006f2e:	d00e      	beq.n	34006f4e <HAL_RCC_ClockConfig+0x442>
34006f30:	687b      	ldr	r3, [r7, #4]
34006f32:	689b      	ldr	r3, [r3, #8]
34006f34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34006f38:	d009      	beq.n	34006f4e <HAL_RCC_ClockConfig+0x442>
34006f3a:	687b      	ldr	r3, [r7, #4]
34006f3c:	689b      	ldr	r3, [r3, #8]
34006f3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34006f42:	d004      	beq.n	34006f4e <HAL_RCC_ClockConfig+0x442>
34006f44:	f240 4101 	movw	r1, #1025	@ 0x401
34006f48:	4807      	ldr	r0, [pc, #28]	@ (34006f68 <HAL_RCC_ClockConfig+0x45c>)
34006f4a:	f7fa fb6f 	bl	3400162c <assert_failed>

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34006f4e:	687b      	ldr	r3, [r7, #4]
34006f50:	689b      	ldr	r3, [r3, #8]
34006f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34006f56:	d10d      	bne.n	34006f74 <HAL_RCC_ClockConfig+0x468>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34006f58:	f7fe fe3e 	bl	34005bd8 <LL_RCC_HSE_IsReady>
34006f5c:	4603      	mov	r3, r0
34006f5e:	2b00      	cmp	r3, #0
34006f60:	f040 80e0 	bne.w	34007124 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34006f64:	2301      	movs	r3, #1
34006f66:	e248      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
34006f68:	3401ad70 	.word	0x3401ad70
34006f6c:	56028000 	.word	0x56028000
34006f70:	3401be34 	.word	0x3401be34
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34006f74:	687b      	ldr	r3, [r7, #4]
34006f76:	689b      	ldr	r3, [r3, #8]
34006f78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34006f7c:	f040 80c0 	bne.w	34007100 <HAL_RCC_ClockConfig+0x5f4>
    {
      /* Check parameters */
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34006f80:	687b      	ldr	r3, [r7, #4]
34006f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006f84:	2b00      	cmp	r3, #0
34006f86:	d013      	beq.n	34006fb0 <HAL_RCC_ClockConfig+0x4a4>
34006f88:	687b      	ldr	r3, [r7, #4]
34006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006f90:	d00e      	beq.n	34006fb0 <HAL_RCC_ClockConfig+0x4a4>
34006f92:	687b      	ldr	r3, [r7, #4]
34006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006f9a:	d009      	beq.n	34006fb0 <HAL_RCC_ClockConfig+0x4a4>
34006f9c:	687b      	ldr	r3, [r7, #4]
34006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34006fa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006fa4:	d004      	beq.n	34006fb0 <HAL_RCC_ClockConfig+0x4a4>
34006fa6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34006faa:	486a      	ldr	r0, [pc, #424]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34006fac:	f7fa fb3e 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34006fb0:	687b      	ldr	r3, [r7, #4]
34006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34006fb4:	2b00      	cmp	r3, #0
34006fb6:	d004      	beq.n	34006fc2 <HAL_RCC_ClockConfig+0x4b6>
34006fb8:	687b      	ldr	r3, [r7, #4]
34006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34006fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34006fc0:	d904      	bls.n	34006fcc <HAL_RCC_ClockConfig+0x4c0>
34006fc2:	f240 4111 	movw	r1, #1041	@ 0x411
34006fc6:	4863      	ldr	r0, [pc, #396]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34006fc8:	f7fa fb30 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34006fcc:	687b      	ldr	r3, [r7, #4]
34006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34006fd0:	2b00      	cmp	r3, #0
34006fd2:	d013      	beq.n	34006ffc <HAL_RCC_ClockConfig+0x4f0>
34006fd4:	687b      	ldr	r3, [r7, #4]
34006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34006fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006fdc:	d00e      	beq.n	34006ffc <HAL_RCC_ClockConfig+0x4f0>
34006fde:	687b      	ldr	r3, [r7, #4]
34006fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34006fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006fe6:	d009      	beq.n	34006ffc <HAL_RCC_ClockConfig+0x4f0>
34006fe8:	687b      	ldr	r3, [r7, #4]
34006fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34006fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006ff0:	d004      	beq.n	34006ffc <HAL_RCC_ClockConfig+0x4f0>
34006ff2:	f240 4112 	movw	r1, #1042	@ 0x412
34006ff6:	4857      	ldr	r0, [pc, #348]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34006ff8:	f7fa fb18 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34006ffc:	687b      	ldr	r3, [r7, #4]
34006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34007000:	2b00      	cmp	r3, #0
34007002:	d004      	beq.n	3400700e <HAL_RCC_ClockConfig+0x502>
34007004:	687b      	ldr	r3, [r7, #4]
34007006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34007008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400700c:	d904      	bls.n	34007018 <HAL_RCC_ClockConfig+0x50c>
3400700e:	f240 4113 	movw	r1, #1043	@ 0x413
34007012:	4850      	ldr	r0, [pc, #320]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34007014:	f7fa fb0a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34007018:	687b      	ldr	r3, [r7, #4]
3400701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400701c:	2b00      	cmp	r3, #0
3400701e:	d013      	beq.n	34007048 <HAL_RCC_ClockConfig+0x53c>
34007020:	687b      	ldr	r3, [r7, #4]
34007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007028:	d00e      	beq.n	34007048 <HAL_RCC_ClockConfig+0x53c>
3400702a:	687b      	ldr	r3, [r7, #4]
3400702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400702e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007032:	d009      	beq.n	34007048 <HAL_RCC_ClockConfig+0x53c>
34007034:	687b      	ldr	r3, [r7, #4]
34007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34007038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400703c:	d004      	beq.n	34007048 <HAL_RCC_ClockConfig+0x53c>
3400703e:	f240 4114 	movw	r1, #1044	@ 0x414
34007042:	4844      	ldr	r0, [pc, #272]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34007044:	f7fa faf2 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34007048:	687b      	ldr	r3, [r7, #4]
3400704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400704c:	2b00      	cmp	r3, #0
3400704e:	d004      	beq.n	3400705a <HAL_RCC_ClockConfig+0x54e>
34007050:	687b      	ldr	r3, [r7, #4]
34007052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34007054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007058:	d904      	bls.n	34007064 <HAL_RCC_ClockConfig+0x558>
3400705a:	f240 4115 	movw	r1, #1045	@ 0x415
3400705e:	483d      	ldr	r0, [pc, #244]	@ (34007154 <HAL_RCC_ClockConfig+0x648>)
34007060:	f7fa fae4 	bl	3400162c <assert_failed>

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34007064:	f7fe fff8 	bl	34006058 <LL_RCC_IC2_GetSource>
34007068:	4602      	mov	r2, r0
3400706a:	687b      	ldr	r3, [r7, #4]
3400706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400706e:	4619      	mov	r1, r3
34007070:	4610      	mov	r0, r2
34007072:	f000 fd4d 	bl	34007b10 <RCC_IC_CheckPLLSources>
34007076:	4603      	mov	r3, r0
34007078:	2b01      	cmp	r3, #1
3400707a:	d001      	beq.n	34007080 <HAL_RCC_ClockConfig+0x574>
      {
        return HAL_ERROR;
3400707c:	2301      	movs	r3, #1
3400707e:	e1bc      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34007080:	f7ff f808 	bl	34006094 <LL_RCC_IC6_GetSource>
34007084:	4602      	mov	r2, r0
34007086:	687b      	ldr	r3, [r7, #4]
34007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3400708a:	4619      	mov	r1, r3
3400708c:	4610      	mov	r0, r2
3400708e:	f000 fd3f 	bl	34007b10 <RCC_IC_CheckPLLSources>
34007092:	4603      	mov	r3, r0
34007094:	2b01      	cmp	r3, #1
34007096:	d001      	beq.n	3400709c <HAL_RCC_ClockConfig+0x590>
      {
        return HAL_ERROR;
34007098:	2301      	movs	r3, #1
3400709a:	e1ae      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
3400709c:	f7ff f808 	bl	340060b0 <LL_RCC_IC11_GetSource>
340070a0:	4602      	mov	r2, r0
340070a2:	687b      	ldr	r3, [r7, #4]
340070a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340070a6:	4619      	mov	r1, r3
340070a8:	4610      	mov	r0, r2
340070aa:	f000 fd31 	bl	34007b10 <RCC_IC_CheckPLLSources>
340070ae:	4603      	mov	r3, r0
340070b0:	2b01      	cmp	r3, #1
340070b2:	d001      	beq.n	340070b8 <HAL_RCC_ClockConfig+0x5ac>
      {
        return HAL_ERROR;
340070b4:	2301      	movs	r3, #1
340070b6:	e1a0      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340070b8:	687b      	ldr	r3, [r7, #4]
340070ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340070bc:	687b      	ldr	r3, [r7, #4]
340070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340070c0:	3b01      	subs	r3, #1
340070c2:	041b      	lsls	r3, r3, #16
340070c4:	4924      	ldr	r1, [pc, #144]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
340070c6:	4313      	orrs	r3, r2
340070c8:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
340070cc:	687b      	ldr	r3, [r7, #4]
340070ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
340070d0:	687b      	ldr	r3, [r7, #4]
340070d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340070d4:	3b01      	subs	r3, #1
340070d6:	041b      	lsls	r3, r3, #16
340070d8:	491f      	ldr	r1, [pc, #124]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
340070da:	4313      	orrs	r3, r2
340070dc:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340070e0:	687b      	ldr	r3, [r7, #4]
340070e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340070e4:	687b      	ldr	r3, [r7, #4]
340070e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340070e8:	3b01      	subs	r3, #1
340070ea:	041b      	lsls	r3, r3, #16
340070ec:	491a      	ldr	r1, [pc, #104]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
340070ee:	4313      	orrs	r3, r2
340070f0:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340070f4:	4b18      	ldr	r3, [pc, #96]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
340070f6:	f240 4222 	movw	r2, #1058	@ 0x422
340070fa:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
340070fe:	e011      	b.n	34007124 <HAL_RCC_ClockConfig+0x618>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34007100:	687b      	ldr	r3, [r7, #4]
34007102:	689b      	ldr	r3, [r3, #8]
34007104:	2b00      	cmp	r3, #0
34007106:	d106      	bne.n	34007116 <HAL_RCC_ClockConfig+0x60a>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34007108:	f7fe fd96 	bl	34005c38 <LL_RCC_HSI_IsReady>
3400710c:	4603      	mov	r3, r0
3400710e:	2b00      	cmp	r3, #0
34007110:	d108      	bne.n	34007124 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007112:	2301      	movs	r3, #1
34007114:	e171      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34007116:	f7fe fdf7 	bl	34005d08 <LL_RCC_MSI_IsReady>
3400711a:	4603      	mov	r3, r0
3400711c:	2b00      	cmp	r3, #0
3400711e:	d101      	bne.n	34007124 <HAL_RCC_ClockConfig+0x618>
      {
        return HAL_ERROR;
34007120:	2301      	movs	r3, #1
34007122:	e16a      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34007124:	4b0c      	ldr	r3, [pc, #48]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
34007126:	6a1b      	ldr	r3, [r3, #32]
34007128:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
3400712c:	687b      	ldr	r3, [r7, #4]
3400712e:	689b      	ldr	r3, [r3, #8]
34007130:	4909      	ldr	r1, [pc, #36]	@ (34007158 <HAL_RCC_ClockConfig+0x64c>)
34007132:	4313      	orrs	r3, r2
34007134:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007136:	f7fc fa59 	bl	340035ec <HAL_GetTick>
3400713a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3400713c:	e00e      	b.n	3400715c <HAL_RCC_ClockConfig+0x650>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3400713e:	f7fc fa55 	bl	340035ec <HAL_GetTick>
34007142:	4602      	mov	r2, r0
34007144:	68fb      	ldr	r3, [r7, #12]
34007146:	1ad3      	subs	r3, r2, r3
34007148:	f241 3288 	movw	r2, #5000	@ 0x1388
3400714c:	4293      	cmp	r3, r2
3400714e:	d905      	bls.n	3400715c <HAL_RCC_ClockConfig+0x650>
      {
        return HAL_TIMEOUT;
34007150:	2303      	movs	r3, #3
34007152:	e152      	b.n	340073fa <HAL_RCC_ClockConfig+0x8ee>
34007154:	3401ad70 	.word	0x3401ad70
34007158:	56028000 	.word	0x56028000
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3400715c:	f7fe fe6a 	bl	34005e34 <LL_RCC_GetSysClkSource>
34007160:	4602      	mov	r2, r0
34007162:	687b      	ldr	r3, [r7, #4]
34007164:	689b      	ldr	r3, [r3, #8]
34007166:	011b      	lsls	r3, r3, #4
34007168:	429a      	cmp	r2, r3
3400716a:	d1e8      	bne.n	3400713e <HAL_RCC_ClockConfig+0x632>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
3400716c:	687b      	ldr	r3, [r7, #4]
3400716e:	681b      	ldr	r3, [r3, #0]
34007170:	f003 0304 	and.w	r3, r3, #4
34007174:	2b00      	cmp	r3, #0
34007176:	d03c      	beq.n	340071f2 <HAL_RCC_ClockConfig+0x6e6>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34007178:	687b      	ldr	r3, [r7, #4]
3400717a:	68db      	ldr	r3, [r3, #12]
3400717c:	2b00      	cmp	r3, #0
3400717e:	d027      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
34007180:	687b      	ldr	r3, [r7, #4]
34007182:	68db      	ldr	r3, [r3, #12]
34007184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007188:	d022      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
3400718a:	687b      	ldr	r3, [r7, #4]
3400718c:	68db      	ldr	r3, [r3, #12]
3400718e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007192:	d01d      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
34007194:	687b      	ldr	r3, [r7, #4]
34007196:	68db      	ldr	r3, [r3, #12]
34007198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400719c:	d018      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
3400719e:	687b      	ldr	r3, [r7, #4]
340071a0:	68db      	ldr	r3, [r3, #12]
340071a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340071a6:	d013      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
340071a8:	687b      	ldr	r3, [r7, #4]
340071aa:	68db      	ldr	r3, [r3, #12]
340071ac:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
340071b0:	d00e      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
340071b2:	687b      	ldr	r3, [r7, #4]
340071b4:	68db      	ldr	r3, [r3, #12]
340071b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
340071ba:	d009      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
340071bc:	687b      	ldr	r3, [r7, #4]
340071be:	68db      	ldr	r3, [r3, #12]
340071c0:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
340071c4:	d004      	beq.n	340071d0 <HAL_RCC_ClockConfig+0x6c4>
340071c6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
340071ca:	488e      	ldr	r0, [pc, #568]	@ (34007404 <HAL_RCC_ClockConfig+0x8f8>)
340071cc:	f7fa fa2e 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
340071d0:	687b      	ldr	r3, [r7, #4]
340071d2:	68da      	ldr	r2, [r3, #12]
340071d4:	4b8c      	ldr	r3, [pc, #560]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340071d8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340071dc:	429a      	cmp	r2, r3
340071de:	d208      	bcs.n	340071f2 <HAL_RCC_ClockConfig+0x6e6>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340071e0:	4b89      	ldr	r3, [pc, #548]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340071e4:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
340071e8:	687b      	ldr	r3, [r7, #4]
340071ea:	68db      	ldr	r3, [r3, #12]
340071ec:	4986      	ldr	r1, [pc, #536]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340071ee:	4313      	orrs	r3, r2
340071f0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340071f2:	687b      	ldr	r3, [r7, #4]
340071f4:	681b      	ldr	r3, [r3, #0]
340071f6:	f003 0308 	and.w	r3, r3, #8
340071fa:	2b00      	cmp	r3, #0
340071fc:	d035      	beq.n	3400726a <HAL_RCC_ClockConfig+0x75e>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340071fe:	687b      	ldr	r3, [r7, #4]
34007200:	691b      	ldr	r3, [r3, #16]
34007202:	2b00      	cmp	r3, #0
34007204:	d020      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
34007206:	687b      	ldr	r3, [r7, #4]
34007208:	691b      	ldr	r3, [r3, #16]
3400720a:	2b01      	cmp	r3, #1
3400720c:	d01c      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
3400720e:	687b      	ldr	r3, [r7, #4]
34007210:	691b      	ldr	r3, [r3, #16]
34007212:	2b02      	cmp	r3, #2
34007214:	d018      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
34007216:	687b      	ldr	r3, [r7, #4]
34007218:	691b      	ldr	r3, [r3, #16]
3400721a:	2b03      	cmp	r3, #3
3400721c:	d014      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
3400721e:	687b      	ldr	r3, [r7, #4]
34007220:	691b      	ldr	r3, [r3, #16]
34007222:	2b04      	cmp	r3, #4
34007224:	d010      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
34007226:	687b      	ldr	r3, [r7, #4]
34007228:	691b      	ldr	r3, [r3, #16]
3400722a:	2b05      	cmp	r3, #5
3400722c:	d00c      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
3400722e:	687b      	ldr	r3, [r7, #4]
34007230:	691b      	ldr	r3, [r3, #16]
34007232:	2b06      	cmp	r3, #6
34007234:	d008      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
34007236:	687b      	ldr	r3, [r7, #4]
34007238:	691b      	ldr	r3, [r3, #16]
3400723a:	2b07      	cmp	r3, #7
3400723c:	d004      	beq.n	34007248 <HAL_RCC_ClockConfig+0x73c>
3400723e:	f240 4163 	movw	r1, #1123	@ 0x463
34007242:	4870      	ldr	r0, [pc, #448]	@ (34007404 <HAL_RCC_ClockConfig+0x8f8>)
34007244:	f7fa f9f2 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34007248:	687b      	ldr	r3, [r7, #4]
3400724a:	691a      	ldr	r2, [r3, #16]
3400724c:	4b6e      	ldr	r3, [pc, #440]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
3400724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007250:	f003 0307 	and.w	r3, r3, #7
34007254:	429a      	cmp	r2, r3
34007256:	d208      	bcs.n	3400726a <HAL_RCC_ClockConfig+0x75e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34007258:	4b6b      	ldr	r3, [pc, #428]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
3400725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400725c:	f023 0207 	bic.w	r2, r3, #7
34007260:	687b      	ldr	r3, [r7, #4]
34007262:	691b      	ldr	r3, [r3, #16]
34007264:	4968      	ldr	r1, [pc, #416]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
34007266:	4313      	orrs	r3, r2
34007268:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
3400726a:	687b      	ldr	r3, [r7, #4]
3400726c:	681b      	ldr	r3, [r3, #0]
3400726e:	f003 0310 	and.w	r3, r3, #16
34007272:	2b00      	cmp	r3, #0
34007274:	d035      	beq.n	340072e2 <HAL_RCC_ClockConfig+0x7d6>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34007276:	687b      	ldr	r3, [r7, #4]
34007278:	695b      	ldr	r3, [r3, #20]
3400727a:	2b00      	cmp	r3, #0
3400727c:	d020      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
3400727e:	687b      	ldr	r3, [r7, #4]
34007280:	695b      	ldr	r3, [r3, #20]
34007282:	2b10      	cmp	r3, #16
34007284:	d01c      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
34007286:	687b      	ldr	r3, [r7, #4]
34007288:	695b      	ldr	r3, [r3, #20]
3400728a:	2b20      	cmp	r3, #32
3400728c:	d018      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
3400728e:	687b      	ldr	r3, [r7, #4]
34007290:	695b      	ldr	r3, [r3, #20]
34007292:	2b30      	cmp	r3, #48	@ 0x30
34007294:	d014      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
34007296:	687b      	ldr	r3, [r7, #4]
34007298:	695b      	ldr	r3, [r3, #20]
3400729a:	2b40      	cmp	r3, #64	@ 0x40
3400729c:	d010      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
3400729e:	687b      	ldr	r3, [r7, #4]
340072a0:	695b      	ldr	r3, [r3, #20]
340072a2:	2b50      	cmp	r3, #80	@ 0x50
340072a4:	d00c      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
340072a6:	687b      	ldr	r3, [r7, #4]
340072a8:	695b      	ldr	r3, [r3, #20]
340072aa:	2b60      	cmp	r3, #96	@ 0x60
340072ac:	d008      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
340072ae:	687b      	ldr	r3, [r7, #4]
340072b0:	695b      	ldr	r3, [r3, #20]
340072b2:	2b70      	cmp	r3, #112	@ 0x70
340072b4:	d004      	beq.n	340072c0 <HAL_RCC_ClockConfig+0x7b4>
340072b6:	f240 416d 	movw	r1, #1133	@ 0x46d
340072ba:	4852      	ldr	r0, [pc, #328]	@ (34007404 <HAL_RCC_ClockConfig+0x8f8>)
340072bc:	f7fa f9b6 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340072c0:	687b      	ldr	r3, [r7, #4]
340072c2:	695a      	ldr	r2, [r3, #20]
340072c4:	4b50      	ldr	r3, [pc, #320]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340072c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340072c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340072cc:	429a      	cmp	r2, r3
340072ce:	d208      	bcs.n	340072e2 <HAL_RCC_ClockConfig+0x7d6>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340072d0:	4b4d      	ldr	r3, [pc, #308]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340072d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
340072d8:	687b      	ldr	r3, [r7, #4]
340072da:	695b      	ldr	r3, [r3, #20]
340072dc:	494a      	ldr	r1, [pc, #296]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340072de:	4313      	orrs	r3, r2
340072e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340072e2:	687b      	ldr	r3, [r7, #4]
340072e4:	681b      	ldr	r3, [r3, #0]
340072e6:	f003 0320 	and.w	r3, r3, #32
340072ea:	2b00      	cmp	r3, #0
340072ec:	d03c      	beq.n	34007368 <HAL_RCC_ClockConfig+0x85c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340072ee:	687b      	ldr	r3, [r7, #4]
340072f0:	699b      	ldr	r3, [r3, #24]
340072f2:	2b00      	cmp	r3, #0
340072f4:	d027      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
340072f6:	687b      	ldr	r3, [r7, #4]
340072f8:	699b      	ldr	r3, [r3, #24]
340072fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340072fe:	d022      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
34007300:	687b      	ldr	r3, [r7, #4]
34007302:	699b      	ldr	r3, [r3, #24]
34007304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34007308:	d01d      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
3400730a:	687b      	ldr	r3, [r7, #4]
3400730c:	699b      	ldr	r3, [r3, #24]
3400730e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34007312:	d018      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
34007314:	687b      	ldr	r3, [r7, #4]
34007316:	699b      	ldr	r3, [r3, #24]
34007318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3400731c:	d013      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
3400731e:	687b      	ldr	r3, [r7, #4]
34007320:	699b      	ldr	r3, [r3, #24]
34007322:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
34007326:	d00e      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
34007328:	687b      	ldr	r3, [r7, #4]
3400732a:	699b      	ldr	r3, [r3, #24]
3400732c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
34007330:	d009      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
34007332:	687b      	ldr	r3, [r7, #4]
34007334:	699b      	ldr	r3, [r3, #24]
34007336:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
3400733a:	d004      	beq.n	34007346 <HAL_RCC_ClockConfig+0x83a>
3400733c:	f240 4177 	movw	r1, #1143	@ 0x477
34007340:	4830      	ldr	r0, [pc, #192]	@ (34007404 <HAL_RCC_ClockConfig+0x8f8>)
34007342:	f7fa f973 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34007346:	687b      	ldr	r3, [r7, #4]
34007348:	699a      	ldr	r2, [r3, #24]
3400734a:	4b2f      	ldr	r3, [pc, #188]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
3400734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400734e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34007352:	429a      	cmp	r2, r3
34007354:	d208      	bcs.n	34007368 <HAL_RCC_ClockConfig+0x85c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34007356:	4b2c      	ldr	r3, [pc, #176]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
34007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400735a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
3400735e:	687b      	ldr	r3, [r7, #4]
34007360:	699b      	ldr	r3, [r3, #24]
34007362:	4929      	ldr	r1, [pc, #164]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
34007364:	4313      	orrs	r3, r2
34007366:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34007368:	687b      	ldr	r3, [r7, #4]
3400736a:	681b      	ldr	r3, [r3, #0]
3400736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34007370:	2b00      	cmp	r3, #0
34007372:	d03c      	beq.n	340073ee <HAL_RCC_ClockConfig+0x8e2>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34007374:	687b      	ldr	r3, [r7, #4]
34007376:	69db      	ldr	r3, [r3, #28]
34007378:	2b00      	cmp	r3, #0
3400737a:	d027      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
3400737c:	687b      	ldr	r3, [r7, #4]
3400737e:	69db      	ldr	r3, [r3, #28]
34007380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34007384:	d022      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
34007386:	687b      	ldr	r3, [r7, #4]
34007388:	69db      	ldr	r3, [r3, #28]
3400738a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400738e:	d01d      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
34007390:	687b      	ldr	r3, [r7, #4]
34007392:	69db      	ldr	r3, [r3, #28]
34007394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34007398:	d018      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
3400739a:	687b      	ldr	r3, [r7, #4]
3400739c:	69db      	ldr	r3, [r3, #28]
3400739e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340073a2:	d013      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
340073a4:	687b      	ldr	r3, [r7, #4]
340073a6:	69db      	ldr	r3, [r3, #28]
340073a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340073ac:	d00e      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
340073ae:	687b      	ldr	r3, [r7, #4]
340073b0:	69db      	ldr	r3, [r3, #28]
340073b2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340073b6:	d009      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
340073b8:	687b      	ldr	r3, [r7, #4]
340073ba:	69db      	ldr	r3, [r3, #28]
340073bc:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340073c0:	d004      	beq.n	340073cc <HAL_RCC_ClockConfig+0x8c0>
340073c2:	f240 4181 	movw	r1, #1153	@ 0x481
340073c6:	480f      	ldr	r0, [pc, #60]	@ (34007404 <HAL_RCC_ClockConfig+0x8f8>)
340073c8:	f7fa f930 	bl	3400162c <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
340073cc:	687b      	ldr	r3, [r7, #4]
340073ce:	69da      	ldr	r2, [r3, #28]
340073d0:	4b0d      	ldr	r3, [pc, #52]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340073d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
340073d8:	429a      	cmp	r2, r3
340073da:	d208      	bcs.n	340073ee <HAL_RCC_ClockConfig+0x8e2>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
340073dc:	4b0a      	ldr	r3, [pc, #40]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340073e0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
340073e4:	687b      	ldr	r3, [r7, #4]
340073e6:	69db      	ldr	r3, [r3, #28]
340073e8:	4907      	ldr	r1, [pc, #28]	@ (34007408 <HAL_RCC_ClockConfig+0x8fc>)
340073ea:	4313      	orrs	r3, r2
340073ec:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
340073ee:	4b07      	ldr	r3, [pc, #28]	@ (3400740c <HAL_RCC_ClockConfig+0x900>)
340073f0:	681b      	ldr	r3, [r3, #0]
340073f2:	4618      	mov	r0, r3
340073f4:	f7fc f8b0 	bl	34003558 <HAL_InitTick>
340073f8:	4603      	mov	r3, r0
}
340073fa:	4618      	mov	r0, r3
340073fc:	3710      	adds	r7, #16
340073fe:	46bd      	mov	sp, r7
34007400:	bd80      	pop	{r7, pc}
34007402:	bf00      	nop
34007404:	3401ad70 	.word	0x3401ad70
34007408:	56028000 	.word	0x56028000
3400740c:	3401be38 	.word	0x3401be38

34007410 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34007410:	b580      	push	{r7, lr}
34007412:	b082      	sub	sp, #8
34007414:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007416:	2300      	movs	r3, #0
34007418:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
3400741a:	f7fe fcfd 	bl	34005e18 <LL_RCC_GetCpuClkSource>
3400741e:	4603      	mov	r3, r0
34007420:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34007424:	d025      	beq.n	34007472 <HAL_RCC_GetCpuClockFreq+0x62>
34007426:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400742a:	d860      	bhi.n	340074ee <HAL_RCC_GetCpuClockFreq+0xde>
3400742c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007430:	d01c      	beq.n	3400746c <HAL_RCC_GetCpuClockFreq+0x5c>
34007432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34007436:	d85a      	bhi.n	340074ee <HAL_RCC_GetCpuClockFreq+0xde>
34007438:	2b00      	cmp	r3, #0
3400743a:	d003      	beq.n	34007444 <HAL_RCC_GetCpuClockFreq+0x34>
3400743c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34007440:	d009      	beq.n	34007456 <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007442:	e054      	b.n	340074ee <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007444:	f7fe fc1e 	bl	34005c84 <LL_RCC_HSI_GetDivider>
34007448:	4603      	mov	r3, r0
3400744a:	09db      	lsrs	r3, r3, #7
3400744c:	4a2b      	ldr	r2, [pc, #172]	@ (340074fc <HAL_RCC_GetCpuClockFreq+0xec>)
3400744e:	fa22 f303 	lsr.w	r3, r2, r3
34007452:	607b      	str	r3, [r7, #4]
      break;
34007454:	e04c      	b.n	340074f0 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007456:	f7fe fc7d 	bl	34005d54 <LL_RCC_MSI_GetFrequency>
3400745a:	4603      	mov	r3, r0
3400745c:	2b00      	cmp	r3, #0
3400745e:	d102      	bne.n	34007466 <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34007460:	4b27      	ldr	r3, [pc, #156]	@ (34007500 <HAL_RCC_GetCpuClockFreq+0xf0>)
34007462:	607b      	str	r3, [r7, #4]
      break;
34007464:	e044      	b.n	340074f0 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34007466:	4b27      	ldr	r3, [pc, #156]	@ (34007504 <HAL_RCC_GetCpuClockFreq+0xf4>)
34007468:	607b      	str	r3, [r7, #4]
      break;
3400746a:	e041      	b.n	340074f0 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
3400746c:	4b26      	ldr	r3, [pc, #152]	@ (34007508 <HAL_RCC_GetCpuClockFreq+0xf8>)
3400746e:	607b      	str	r3, [r7, #4]
      break;
34007470:	e03e      	b.n	340074f0 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34007472:	f7fe fde1 	bl	34006038 <LL_RCC_IC1_GetDivider>
34007476:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34007478:	f7fe fdd0 	bl	3400601c <LL_RCC_IC1_GetSource>
3400747c:	4603      	mov	r3, r0
3400747e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007482:	d029      	beq.n	340074d8 <HAL_RCC_GetCpuClockFreq+0xc8>
34007484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007488:	d82f      	bhi.n	340074ea <HAL_RCC_GetCpuClockFreq+0xda>
3400748a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400748e:	d01a      	beq.n	340074c6 <HAL_RCC_GetCpuClockFreq+0xb6>
34007490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007494:	d829      	bhi.n	340074ea <HAL_RCC_GetCpuClockFreq+0xda>
34007496:	2b00      	cmp	r3, #0
34007498:	d003      	beq.n	340074a2 <HAL_RCC_GetCpuClockFreq+0x92>
3400749a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400749e:	d009      	beq.n	340074b4 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
340074a0:	e023      	b.n	340074ea <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
340074a2:	f009 f813 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340074a6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340074a8:	687a      	ldr	r2, [r7, #4]
340074aa:	683b      	ldr	r3, [r7, #0]
340074ac:	fbb2 f3f3 	udiv	r3, r2, r3
340074b0:	607b      	str	r3, [r7, #4]
          break;
340074b2:	e01b      	b.n	340074ec <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
340074b4:	f009 f850 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340074b8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340074ba:	687a      	ldr	r2, [r7, #4]
340074bc:	683b      	ldr	r3, [r7, #0]
340074be:	fbb2 f3f3 	udiv	r3, r2, r3
340074c2:	607b      	str	r3, [r7, #4]
          break;
340074c4:	e012      	b.n	340074ec <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340074c6:	f009 f88d 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340074ca:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340074cc:	687a      	ldr	r2, [r7, #4]
340074ce:	683b      	ldr	r3, [r7, #0]
340074d0:	fbb2 f3f3 	udiv	r3, r2, r3
340074d4:	607b      	str	r3, [r7, #4]
          break;
340074d6:	e009      	b.n	340074ec <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340074d8:	f009 f8ca 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340074dc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340074de:	687a      	ldr	r2, [r7, #4]
340074e0:	683b      	ldr	r3, [r7, #0]
340074e2:	fbb2 f3f3 	udiv	r3, r2, r3
340074e6:	607b      	str	r3, [r7, #4]
          break;
340074e8:	e000      	b.n	340074ec <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
340074ea:	bf00      	nop
      break;
340074ec:	e000      	b.n	340074f0 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
340074ee:	bf00      	nop
  }

  return frequency;
340074f0:	687b      	ldr	r3, [r7, #4]
}
340074f2:	4618      	mov	r0, r3
340074f4:	3708      	adds	r7, #8
340074f6:	46bd      	mov	sp, r7
340074f8:	bd80      	pop	{r7, pc}
340074fa:	bf00      	nop
340074fc:	03d09000 	.word	0x03d09000
34007500:	003d0900 	.word	0x003d0900
34007504:	00f42400 	.word	0x00f42400
34007508:	02dc6c00 	.word	0x02dc6c00

3400750c <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
3400750c:	b580      	push	{r7, lr}
3400750e:	b082      	sub	sp, #8
34007510:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34007512:	2300      	movs	r3, #0
34007514:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34007516:	f7fe fc8d 	bl	34005e34 <LL_RCC_GetSysClkSource>
3400751a:	4603      	mov	r3, r0
3400751c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007520:	d025      	beq.n	3400756e <HAL_RCC_GetSysClockFreq+0x62>
34007522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007526:	d860      	bhi.n	340075ea <HAL_RCC_GetSysClockFreq+0xde>
34007528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400752c:	d01c      	beq.n	34007568 <HAL_RCC_GetSysClockFreq+0x5c>
3400752e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007532:	d85a      	bhi.n	340075ea <HAL_RCC_GetSysClockFreq+0xde>
34007534:	2b00      	cmp	r3, #0
34007536:	d003      	beq.n	34007540 <HAL_RCC_GetSysClockFreq+0x34>
34007538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400753c:	d009      	beq.n	34007552 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
3400753e:	e054      	b.n	340075ea <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007540:	f7fe fba0 	bl	34005c84 <LL_RCC_HSI_GetDivider>
34007544:	4603      	mov	r3, r0
34007546:	09db      	lsrs	r3, r3, #7
34007548:	4a2b      	ldr	r2, [pc, #172]	@ (340075f8 <HAL_RCC_GetSysClockFreq+0xec>)
3400754a:	fa22 f303 	lsr.w	r3, r2, r3
3400754e:	607b      	str	r3, [r7, #4]
      break;
34007550:	e04c      	b.n	340075ec <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34007552:	f7fe fbff 	bl	34005d54 <LL_RCC_MSI_GetFrequency>
34007556:	4603      	mov	r3, r0
34007558:	2b00      	cmp	r3, #0
3400755a:	d102      	bne.n	34007562 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
3400755c:	4b27      	ldr	r3, [pc, #156]	@ (340075fc <HAL_RCC_GetSysClockFreq+0xf0>)
3400755e:	607b      	str	r3, [r7, #4]
      break;
34007560:	e044      	b.n	340075ec <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34007562:	4b27      	ldr	r3, [pc, #156]	@ (34007600 <HAL_RCC_GetSysClockFreq+0xf4>)
34007564:	607b      	str	r3, [r7, #4]
      break;
34007566:	e041      	b.n	340075ec <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34007568:	4b26      	ldr	r3, [pc, #152]	@ (34007604 <HAL_RCC_GetSysClockFreq+0xf8>)
3400756a:	607b      	str	r3, [r7, #4]
      break;
3400756c:	e03e      	b.n	340075ec <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
3400756e:	f7fe fd81 	bl	34006074 <LL_RCC_IC2_GetDivider>
34007572:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34007574:	f7fe fd70 	bl	34006058 <LL_RCC_IC2_GetSource>
34007578:	4603      	mov	r3, r0
3400757a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400757e:	d029      	beq.n	340075d4 <HAL_RCC_GetSysClockFreq+0xc8>
34007580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007584:	d82f      	bhi.n	340075e6 <HAL_RCC_GetSysClockFreq+0xda>
34007586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400758a:	d01a      	beq.n	340075c2 <HAL_RCC_GetSysClockFreq+0xb6>
3400758c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007590:	d829      	bhi.n	340075e6 <HAL_RCC_GetSysClockFreq+0xda>
34007592:	2b00      	cmp	r3, #0
34007594:	d003      	beq.n	3400759e <HAL_RCC_GetSysClockFreq+0x92>
34007596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400759a:	d009      	beq.n	340075b0 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
3400759c:	e023      	b.n	340075e6 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400759e:	f008 ff95 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340075a2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340075a4:	687a      	ldr	r2, [r7, #4]
340075a6:	683b      	ldr	r3, [r7, #0]
340075a8:	fbb2 f3f3 	udiv	r3, r2, r3
340075ac:	607b      	str	r3, [r7, #4]
          break;
340075ae:	e01b      	b.n	340075e8 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
340075b0:	f008 ffd2 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340075b4:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340075b6:	687a      	ldr	r2, [r7, #4]
340075b8:	683b      	ldr	r3, [r7, #0]
340075ba:	fbb2 f3f3 	udiv	r3, r2, r3
340075be:	607b      	str	r3, [r7, #4]
          break;
340075c0:	e012      	b.n	340075e8 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340075c2:	f009 f80f 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340075c6:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340075c8:	687a      	ldr	r2, [r7, #4]
340075ca:	683b      	ldr	r3, [r7, #0]
340075cc:	fbb2 f3f3 	udiv	r3, r2, r3
340075d0:	607b      	str	r3, [r7, #4]
          break;
340075d2:	e009      	b.n	340075e8 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340075d4:	f009 f84c 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340075d8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
340075da:	687a      	ldr	r2, [r7, #4]
340075dc:	683b      	ldr	r3, [r7, #0]
340075de:	fbb2 f3f3 	udiv	r3, r2, r3
340075e2:	607b      	str	r3, [r7, #4]
          break;
340075e4:	e000      	b.n	340075e8 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
340075e6:	bf00      	nop
      break;
340075e8:	e000      	b.n	340075ec <HAL_RCC_GetSysClockFreq+0xe0>
      break;
340075ea:	bf00      	nop
  }

  return frequency;
340075ec:	687b      	ldr	r3, [r7, #4]
}
340075ee:	4618      	mov	r0, r3
340075f0:	3708      	adds	r7, #8
340075f2:	46bd      	mov	sp, r7
340075f4:	bd80      	pop	{r7, pc}
340075f6:	bf00      	nop
340075f8:	03d09000 	.word	0x03d09000
340075fc:	003d0900 	.word	0x003d0900
34007600:	00f42400 	.word	0x00f42400
34007604:	02dc6c00 	.word	0x02dc6c00

34007608 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34007608:	b580      	push	{r7, lr}
3400760a:	b088      	sub	sp, #32
3400760c:	af00      	add	r7, sp, #0
3400760e:	6078      	str	r0, [r7, #4]
34007610:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
34007612:	2300      	movs	r3, #0
34007614:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34007616:	687b      	ldr	r3, [r7, #4]
34007618:	011a      	lsls	r2, r3, #4
3400761a:	4b9a      	ldr	r3, [pc, #616]	@ (34007884 <RCC_PLL_Config+0x27c>)
3400761c:	4413      	add	r3, r2
3400761e:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34007620:	687b      	ldr	r3, [r7, #4]
34007622:	011a      	lsls	r2, r3, #4
34007624:	4b98      	ldr	r3, [pc, #608]	@ (34007888 <RCC_PLL_Config+0x280>)
34007626:	4413      	add	r3, r2
34007628:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3400762a:	687b      	ldr	r3, [r7, #4]
3400762c:	011a      	lsls	r2, r3, #4
3400762e:	4b97      	ldr	r3, [pc, #604]	@ (3400788c <RCC_PLL_Config+0x284>)
34007630:	4413      	add	r3, r2
34007632:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34007634:	683b      	ldr	r3, [r7, #0]
34007636:	681b      	ldr	r3, [r3, #0]
34007638:	2b02      	cmp	r3, #2
3400763a:	f040 80e9 	bne.w	34007810 <RCC_PLL_Config+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3400763e:	683b      	ldr	r3, [r7, #0]
34007640:	685b      	ldr	r3, [r3, #4]
34007642:	2b00      	cmp	r3, #0
34007644:	d013      	beq.n	3400766e <RCC_PLL_Config+0x66>
34007646:	683b      	ldr	r3, [r7, #0]
34007648:	685b      	ldr	r3, [r3, #4]
3400764a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400764e:	d00e      	beq.n	3400766e <RCC_PLL_Config+0x66>
34007650:	683b      	ldr	r3, [r7, #0]
34007652:	685b      	ldr	r3, [r3, #4]
34007654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007658:	d009      	beq.n	3400766e <RCC_PLL_Config+0x66>
3400765a:	683b      	ldr	r3, [r7, #0]
3400765c:	685b      	ldr	r3, [r3, #4]
3400765e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007662:	d004      	beq.n	3400766e <RCC_PLL_Config+0x66>
34007664:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34007668:	4889      	ldr	r0, [pc, #548]	@ (34007890 <RCC_PLL_Config+0x288>)
3400766a:	f7f9 ffdf 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
3400766e:	683b      	ldr	r3, [r7, #0]
34007670:	68db      	ldr	r3, [r3, #12]
34007672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34007676:	d304      	bcc.n	34007682 <RCC_PLL_Config+0x7a>
34007678:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400767c:	4884      	ldr	r0, [pc, #528]	@ (34007890 <RCC_PLL_Config+0x288>)
3400767e:	f7f9 ffd5 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34007682:	683b      	ldr	r3, [r7, #0]
34007684:	689b      	ldr	r3, [r3, #8]
34007686:	2b00      	cmp	r3, #0
34007688:	d003      	beq.n	34007692 <RCC_PLL_Config+0x8a>
3400768a:	683b      	ldr	r3, [r7, #0]
3400768c:	689b      	ldr	r3, [r3, #8]
3400768e:	2b3f      	cmp	r3, #63	@ 0x3f
34007690:	d904      	bls.n	3400769c <RCC_PLL_Config+0x94>
34007692:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34007696:	487e      	ldr	r0, [pc, #504]	@ (34007890 <RCC_PLL_Config+0x288>)
34007698:	f7f9 ffc8 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3400769c:	683b      	ldr	r3, [r7, #0]
3400769e:	691b      	ldr	r3, [r3, #16]
340076a0:	2b09      	cmp	r3, #9
340076a2:	d905      	bls.n	340076b0 <RCC_PLL_Config+0xa8>
340076a4:	683b      	ldr	r3, [r7, #0]
340076a6:	691b      	ldr	r3, [r3, #16]
340076a8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
340076ac:	4293      	cmp	r3, r2
340076ae:	d904      	bls.n	340076ba <RCC_PLL_Config+0xb2>
340076b0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
340076b4:	4876      	ldr	r0, [pc, #472]	@ (34007890 <RCC_PLL_Config+0x288>)
340076b6:	f7f9 ffb9 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
340076ba:	683b      	ldr	r3, [r7, #0]
340076bc:	695b      	ldr	r3, [r3, #20]
340076be:	2b00      	cmp	r3, #0
340076c0:	d003      	beq.n	340076ca <RCC_PLL_Config+0xc2>
340076c2:	683b      	ldr	r3, [r7, #0]
340076c4:	695b      	ldr	r3, [r3, #20]
340076c6:	2b07      	cmp	r3, #7
340076c8:	d904      	bls.n	340076d4 <RCC_PLL_Config+0xcc>
340076ca:	f240 71fe 	movw	r1, #2046	@ 0x7fe
340076ce:	4870      	ldr	r0, [pc, #448]	@ (34007890 <RCC_PLL_Config+0x288>)
340076d0:	f7f9 ffac 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
340076d4:	683b      	ldr	r3, [r7, #0]
340076d6:	699b      	ldr	r3, [r3, #24]
340076d8:	2b00      	cmp	r3, #0
340076da:	d003      	beq.n	340076e4 <RCC_PLL_Config+0xdc>
340076dc:	683b      	ldr	r3, [r7, #0]
340076de:	699b      	ldr	r3, [r3, #24]
340076e0:	2b07      	cmp	r3, #7
340076e2:	d904      	bls.n	340076ee <RCC_PLL_Config+0xe6>
340076e4:	f240 71ff 	movw	r1, #2047	@ 0x7ff
340076e8:	4869      	ldr	r0, [pc, #420]	@ (34007890 <RCC_PLL_Config+0x288>)
340076ea:	f7f9 ff9f 	bl	3400162c <assert_failed>

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340076ee:	4a69      	ldr	r2, [pc, #420]	@ (34007894 <RCC_PLL_Config+0x28c>)
340076f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
340076f4:	687b      	ldr	r3, [r7, #4]
340076f6:	fa01 f303 	lsl.w	r3, r1, r3
340076fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
340076fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34007700:	f7fb ff74 	bl	340035ec <HAL_GetTick>
34007704:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007706:	e008      	b.n	3400771a <RCC_PLL_Config+0x112>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007708:	f7fb ff70 	bl	340035ec <HAL_GetTick>
3400770c:	4602      	mov	r2, r0
3400770e:	68fb      	ldr	r3, [r7, #12]
34007710:	1ad3      	subs	r3, r2, r3
34007712:	2b01      	cmp	r3, #1
34007714:	d901      	bls.n	3400771a <RCC_PLL_Config+0x112>
      {
        return HAL_TIMEOUT;
34007716:	2303      	movs	r3, #3
34007718:	e114      	b.n	34007944 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400771a:	4b5e      	ldr	r3, [pc, #376]	@ (34007894 <RCC_PLL_Config+0x28c>)
3400771c:	685a      	ldr	r2, [r3, #4]
3400771e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007722:	687b      	ldr	r3, [r7, #4]
34007724:	fa01 f303 	lsl.w	r3, r1, r3
34007728:	401a      	ands	r2, r3
3400772a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400772e:	687b      	ldr	r3, [r7, #4]
34007730:	fa01 f303 	lsl.w	r3, r1, r3
34007734:	429a      	cmp	r2, r3
34007736:	d0e7      	beq.n	34007708 <RCC_PLL_Config+0x100>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34007738:	693b      	ldr	r3, [r7, #16]
3400773a:	681b      	ldr	r3, [r3, #0]
3400773c:	f043 0204 	orr.w	r2, r3, #4
34007740:	693b      	ldr	r3, [r7, #16]
34007742:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007744:	69bb      	ldr	r3, [r7, #24]
34007746:	681b      	ldr	r3, [r3, #0]
34007748:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400774c:	69bb      	ldr	r3, [r7, #24]
3400774e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34007750:	69bb      	ldr	r3, [r7, #24]
34007752:	681a      	ldr	r2, [r3, #0]
34007754:	4b50      	ldr	r3, [pc, #320]	@ (34007898 <RCC_PLL_Config+0x290>)
34007756:	4013      	ands	r3, r2
34007758:	683a      	ldr	r2, [r7, #0]
3400775a:	6851      	ldr	r1, [r2, #4]
3400775c:	683a      	ldr	r2, [r7, #0]
3400775e:	6892      	ldr	r2, [r2, #8]
34007760:	0512      	lsls	r2, r2, #20
34007762:	4311      	orrs	r1, r2
34007764:	683a      	ldr	r2, [r7, #0]
34007766:	6912      	ldr	r2, [r2, #16]
34007768:	0212      	lsls	r2, r2, #8
3400776a:	430a      	orrs	r2, r1
3400776c:	431a      	orrs	r2, r3
3400776e:	69bb      	ldr	r3, [r7, #24]
34007770:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34007772:	693b      	ldr	r3, [r7, #16]
34007774:	681b      	ldr	r3, [r3, #0]
34007776:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3400777a:	683b      	ldr	r3, [r7, #0]
3400777c:	695b      	ldr	r3, [r3, #20]
3400777e:	06d9      	lsls	r1, r3, #27
34007780:	683b      	ldr	r3, [r7, #0]
34007782:	699b      	ldr	r3, [r3, #24]
34007784:	061b      	lsls	r3, r3, #24
34007786:	430b      	orrs	r3, r1
34007788:	431a      	orrs	r2, r3
3400778a:	693b      	ldr	r3, [r7, #16]
3400778c:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3400778e:	697b      	ldr	r3, [r7, #20]
34007790:	681b      	ldr	r3, [r3, #0]
34007792:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34007796:	683b      	ldr	r3, [r7, #0]
34007798:	68db      	ldr	r3, [r3, #12]
3400779a:	431a      	orrs	r2, r3
3400779c:	697b      	ldr	r3, [r7, #20]
3400779e:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
340077a0:	693b      	ldr	r3, [r7, #16]
340077a2:	681b      	ldr	r3, [r3, #0]
340077a4:	f023 0208 	bic.w	r2, r3, #8
340077a8:	693b      	ldr	r3, [r7, #16]
340077aa:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
340077ac:	683b      	ldr	r3, [r7, #0]
340077ae:	68db      	ldr	r3, [r3, #12]
340077b0:	2b00      	cmp	r3, #0
340077b2:	d005      	beq.n	340077c0 <RCC_PLL_Config+0x1b8>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
340077b4:	693b      	ldr	r3, [r7, #16]
340077b6:	681b      	ldr	r3, [r3, #0]
340077b8:	f043 020a 	orr.w	r2, r3, #10
340077bc:	693b      	ldr	r3, [r7, #16]
340077be:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340077c0:	693b      	ldr	r3, [r7, #16]
340077c2:	681b      	ldr	r3, [r3, #0]
340077c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340077c8:	f043 0301 	orr.w	r3, r3, #1
340077cc:	693a      	ldr	r2, [r7, #16]
340077ce:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340077d0:	4a30      	ldr	r2, [pc, #192]	@ (34007894 <RCC_PLL_Config+0x28c>)
340077d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
340077d6:	687b      	ldr	r3, [r7, #4]
340077d8:	fa01 f303 	lsl.w	r3, r1, r3
340077dc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
340077e0:	f7fb ff04 	bl	340035ec <HAL_GetTick>
340077e4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340077e6:	e008      	b.n	340077fa <RCC_PLL_Config+0x1f2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340077e8:	f7fb ff00 	bl	340035ec <HAL_GetTick>
340077ec:	4602      	mov	r2, r0
340077ee:	68fb      	ldr	r3, [r7, #12]
340077f0:	1ad3      	subs	r3, r2, r3
340077f2:	2b01      	cmp	r3, #1
340077f4:	d901      	bls.n	340077fa <RCC_PLL_Config+0x1f2>
      {
        return HAL_TIMEOUT;
340077f6:	2303      	movs	r3, #3
340077f8:	e0a4      	b.n	34007944 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340077fa:	4b26      	ldr	r3, [pc, #152]	@ (34007894 <RCC_PLL_Config+0x28c>)
340077fc:	685a      	ldr	r2, [r3, #4]
340077fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007802:	687b      	ldr	r3, [r7, #4]
34007804:	fa01 f303 	lsl.w	r3, r1, r3
34007808:	4013      	ands	r3, r2
3400780a:	2b00      	cmp	r3, #0
3400780c:	d0ec      	beq.n	340077e8 <RCC_PLL_Config+0x1e0>
3400780e:	e098      	b.n	34007942 <RCC_PLL_Config+0x33a>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34007810:	683b      	ldr	r3, [r7, #0]
34007812:	681b      	ldr	r3, [r3, #0]
34007814:	2b03      	cmp	r3, #3
34007816:	d15f      	bne.n	340078d8 <RCC_PLL_Config+0x2d0>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34007818:	683b      	ldr	r3, [r7, #0]
3400781a:	685b      	ldr	r3, [r3, #4]
3400781c:	2b00      	cmp	r3, #0
3400781e:	d013      	beq.n	34007848 <RCC_PLL_Config+0x240>
34007820:	683b      	ldr	r3, [r7, #0]
34007822:	685b      	ldr	r3, [r3, #4]
34007824:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007828:	d00e      	beq.n	34007848 <RCC_PLL_Config+0x240>
3400782a:	683b      	ldr	r3, [r7, #0]
3400782c:	685b      	ldr	r3, [r3, #4]
3400782e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007832:	d009      	beq.n	34007848 <RCC_PLL_Config+0x240>
34007834:	683b      	ldr	r3, [r7, #0]
34007836:	685b      	ldr	r3, [r3, #4]
34007838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400783c:	d004      	beq.n	34007848 <RCC_PLL_Config+0x240>
3400783e:	f640 013f 	movw	r1, #2111	@ 0x83f
34007842:	4813      	ldr	r0, [pc, #76]	@ (34007890 <RCC_PLL_Config+0x288>)
34007844:	f7f9 fef2 	bl	3400162c <assert_failed>

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34007848:	683b      	ldr	r3, [r7, #0]
3400784a:	685b      	ldr	r3, [r3, #4]
3400784c:	4618      	mov	r0, r3
3400784e:	f000 f925 	bl	34007a9c <RCC_PLL_Source_IsReady>
34007852:	4603      	mov	r3, r0
34007854:	2b01      	cmp	r3, #1
34007856:	d13c      	bne.n	340078d2 <RCC_PLL_Config+0x2ca>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34007858:	4a0e      	ldr	r2, [pc, #56]	@ (34007894 <RCC_PLL_Config+0x28c>)
3400785a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400785e:	687b      	ldr	r3, [r7, #4]
34007860:	fa01 f303 	lsl.w	r3, r1, r3
34007864:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34007868:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3400786a:	f7fb febf 	bl	340035ec <HAL_GetTick>
3400786e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007870:	e014      	b.n	3400789c <RCC_PLL_Config+0x294>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007872:	f7fb febb 	bl	340035ec <HAL_GetTick>
34007876:	4602      	mov	r2, r0
34007878:	68fb      	ldr	r3, [r7, #12]
3400787a:	1ad3      	subs	r3, r2, r3
3400787c:	2b01      	cmp	r3, #1
3400787e:	d90d      	bls.n	3400789c <RCC_PLL_Config+0x294>
        {
          return HAL_TIMEOUT;
34007880:	2303      	movs	r3, #3
34007882:	e05f      	b.n	34007944 <RCC_PLL_Config+0x33c>
34007884:	56028080 	.word	0x56028080
34007888:	56028084 	.word	0x56028084
3400788c:	56028088 	.word	0x56028088
34007890:	3401ad70 	.word	0x3401ad70
34007894:	56028000 	.word	0x56028000
34007898:	8c0000ff 	.word	0x8c0000ff
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3400789c:	4b2b      	ldr	r3, [pc, #172]	@ (3400794c <RCC_PLL_Config+0x344>)
3400789e:	685a      	ldr	r2, [r3, #4]
340078a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
340078a4:	687b      	ldr	r3, [r7, #4]
340078a6:	fa01 f303 	lsl.w	r3, r1, r3
340078aa:	401a      	ands	r2, r3
340078ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
340078b0:	687b      	ldr	r3, [r7, #4]
340078b2:	fa01 f303 	lsl.w	r3, r1, r3
340078b6:	429a      	cmp	r2, r3
340078b8:	d0db      	beq.n	34007872 <RCC_PLL_Config+0x26a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
340078ba:	69bb      	ldr	r3, [r7, #24]
340078bc:	681b      	ldr	r3, [r3, #0]
340078be:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
340078c2:	683b      	ldr	r3, [r7, #0]
340078c4:	685b      	ldr	r3, [r3, #4]
340078c6:	4313      	orrs	r3, r2
340078c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
340078cc:	69bb      	ldr	r3, [r7, #24]
340078ce:	601a      	str	r2, [r3, #0]
340078d0:	e037      	b.n	34007942 <RCC_PLL_Config+0x33a>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
340078d2:	2301      	movs	r3, #1
340078d4:	77fb      	strb	r3, [r7, #31]
340078d6:	e034      	b.n	34007942 <RCC_PLL_Config+0x33a>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
340078d8:	683b      	ldr	r3, [r7, #0]
340078da:	681b      	ldr	r3, [r3, #0]
340078dc:	2b01      	cmp	r3, #1
340078de:	d130      	bne.n	34007942 <RCC_PLL_Config+0x33a>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340078e0:	693b      	ldr	r3, [r7, #16]
340078e2:	681b      	ldr	r3, [r3, #0]
340078e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
340078e8:	693b      	ldr	r3, [r7, #16]
340078ea:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340078ec:	4a17      	ldr	r2, [pc, #92]	@ (3400794c <RCC_PLL_Config+0x344>)
340078ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
340078f2:	687b      	ldr	r3, [r7, #4]
340078f4:	fa01 f303 	lsl.w	r3, r1, r3
340078f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
340078fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
340078fe:	f7fb fe75 	bl	340035ec <HAL_GetTick>
34007902:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007904:	e008      	b.n	34007918 <RCC_PLL_Config+0x310>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007906:	f7fb fe71 	bl	340035ec <HAL_GetTick>
3400790a:	4602      	mov	r2, r0
3400790c:	68fb      	ldr	r3, [r7, #12]
3400790e:	1ad3      	subs	r3, r2, r3
34007910:	2b01      	cmp	r3, #1
34007912:	d901      	bls.n	34007918 <RCC_PLL_Config+0x310>
      {
        return HAL_TIMEOUT;
34007914:	2303      	movs	r3, #3
34007916:	e015      	b.n	34007944 <RCC_PLL_Config+0x33c>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007918:	4b0c      	ldr	r3, [pc, #48]	@ (3400794c <RCC_PLL_Config+0x344>)
3400791a:	685a      	ldr	r2, [r3, #4]
3400791c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007920:	687b      	ldr	r3, [r7, #4]
34007922:	fa01 f303 	lsl.w	r3, r1, r3
34007926:	401a      	ands	r2, r3
34007928:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400792c:	687b      	ldr	r3, [r7, #4]
3400792e:	fa01 f303 	lsl.w	r3, r1, r3
34007932:	429a      	cmp	r2, r3
34007934:	d0e7      	beq.n	34007906 <RCC_PLL_Config+0x2fe>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34007936:	69bb      	ldr	r3, [r7, #24]
34007938:	681b      	ldr	r3, [r3, #0]
3400793a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3400793e:	69bb      	ldr	r3, [r7, #24]
34007940:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
34007942:	7ffb      	ldrb	r3, [r7, #31]
}
34007944:	4618      	mov	r0, r3
34007946:	3720      	adds	r7, #32
34007948:	46bd      	mov	sp, r7
3400794a:	bd80      	pop	{r7, pc}
3400794c:	56028000 	.word	0x56028000

34007950 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34007950:	b580      	push	{r7, lr}
34007952:	b084      	sub	sp, #16
34007954:	af00      	add	r7, sp, #0
34007956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34007958:	2300      	movs	r3, #0
3400795a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3400795c:	4a11      	ldr	r2, [pc, #68]	@ (340079a4 <RCC_PLL_Enable+0x54>)
3400795e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007962:	687b      	ldr	r3, [r7, #4]
34007964:	fa01 f303 	lsl.w	r3, r1, r3
34007968:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
3400796c:	f7fb fe3e 	bl	340035ec <HAL_GetTick>
34007970:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007972:	e008      	b.n	34007986 <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34007974:	f7fb fe3a 	bl	340035ec <HAL_GetTick>
34007978:	4602      	mov	r2, r0
3400797a:	68bb      	ldr	r3, [r7, #8]
3400797c:	1ad3      	subs	r3, r2, r3
3400797e:	2b01      	cmp	r3, #1
34007980:	d901      	bls.n	34007986 <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
34007982:	2303      	movs	r3, #3
34007984:	e00a      	b.n	3400799c <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34007986:	4b07      	ldr	r3, [pc, #28]	@ (340079a4 <RCC_PLL_Enable+0x54>)
34007988:	685a      	ldr	r2, [r3, #4]
3400798a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400798e:	687b      	ldr	r3, [r7, #4]
34007990:	fa01 f303 	lsl.w	r3, r1, r3
34007994:	4013      	ands	r3, r2
34007996:	2b00      	cmp	r3, #0
34007998:	d0ec      	beq.n	34007974 <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
3400799a:	7bfb      	ldrb	r3, [r7, #15]
}
3400799c:	4618      	mov	r0, r3
3400799e:	3710      	adds	r7, #16
340079a0:	46bd      	mov	sp, r7
340079a2:	bd80      	pop	{r7, pc}
340079a4:	56028000 	.word	0x56028000

340079a8 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
340079a8:	b480      	push	{r7}
340079aa:	b089      	sub	sp, #36	@ 0x24
340079ac:	af00      	add	r7, sp, #0
340079ae:	6078      	str	r0, [r7, #4]
340079b0:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
340079b2:	2300      	movs	r3, #0
340079b4:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340079b6:	687b      	ldr	r3, [r7, #4]
340079b8:	011a      	lsls	r2, r3, #4
340079ba:	4b34      	ldr	r3, [pc, #208]	@ (34007a8c <RCC_PLL_IsNewConfig+0xe4>)
340079bc:	4413      	add	r3, r2
340079be:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340079c0:	687b      	ldr	r3, [r7, #4]
340079c2:	011a      	lsls	r2, r3, #4
340079c4:	4b32      	ldr	r3, [pc, #200]	@ (34007a90 <RCC_PLL_IsNewConfig+0xe8>)
340079c6:	4413      	add	r3, r2
340079c8:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340079ca:	687b      	ldr	r3, [r7, #4]
340079cc:	011a      	lsls	r2, r3, #4
340079ce:	4b31      	ldr	r3, [pc, #196]	@ (34007a94 <RCC_PLL_IsNewConfig+0xec>)
340079d0:	4413      	add	r3, r2
340079d2:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340079d4:	697b      	ldr	r3, [r7, #20]
340079d6:	681b      	ldr	r3, [r3, #0]
340079d8:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
340079dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
340079e0:	683a      	ldr	r2, [r7, #0]
340079e2:	6851      	ldr	r1, [r2, #4]
340079e4:	683a      	ldr	r2, [r7, #0]
340079e6:	6892      	ldr	r2, [r2, #8]
340079e8:	0512      	lsls	r2, r2, #20
340079ea:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340079ec:	683a      	ldr	r2, [r7, #0]
340079ee:	6912      	ldr	r2, [r2, #16]
340079f0:	0212      	lsls	r2, r2, #8
340079f2:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340079f4:	4293      	cmp	r3, r2
340079f6:	d002      	beq.n	340079fe <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
340079f8:	2301      	movs	r3, #1
340079fa:	61fb      	str	r3, [r7, #28]
340079fc:	e03e      	b.n	34007a7c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
340079fe:	693b      	ldr	r3, [r7, #16]
34007a00:	681b      	ldr	r3, [r3, #0]
34007a02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
34007a06:	683b      	ldr	r3, [r7, #0]
34007a08:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34007a0a:	429a      	cmp	r2, r3
34007a0c:	d002      	beq.n	34007a14 <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
34007a0e:	2301      	movs	r3, #1
34007a10:	61fb      	str	r3, [r7, #28]
34007a12:	e033      	b.n	34007a7c <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34007a14:	68fb      	ldr	r3, [r7, #12]
34007a16:	681b      	ldr	r3, [r3, #0]
34007a18:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34007a1c:	683b      	ldr	r3, [r7, #0]
34007a1e:	695b      	ldr	r3, [r3, #20]
34007a20:	06d9      	lsls	r1, r3, #27
34007a22:	683b      	ldr	r3, [r7, #0]
34007a24:	699b      	ldr	r3, [r3, #24]
34007a26:	061b      	lsls	r3, r3, #24
34007a28:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34007a2a:	429a      	cmp	r2, r3
34007a2c:	d002      	beq.n	34007a34 <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
34007a2e:	2301      	movs	r3, #1
34007a30:	61fb      	str	r3, [r7, #28]
34007a32:	e023      	b.n	34007a7c <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34007a34:	4b18      	ldr	r3, [pc, #96]	@ (34007a98 <RCC_PLL_IsNewConfig+0xf0>)
34007a36:	685a      	ldr	r2, [r3, #4]
34007a38:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007a3c:	687b      	ldr	r3, [r7, #4]
34007a3e:	fa01 f303 	lsl.w	r3, r1, r3
34007a42:	401a      	ands	r2, r3
34007a44:	f44f 7180 	mov.w	r1, #256	@ 0x100
34007a48:	687b      	ldr	r3, [r7, #4]
34007a4a:	fa01 f303 	lsl.w	r3, r1, r3
34007a4e:	429a      	cmp	r2, r3
34007a50:	d102      	bne.n	34007a58 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
34007a52:	2302      	movs	r3, #2
34007a54:	61bb      	str	r3, [r7, #24]
34007a56:	e00a      	b.n	34007a6e <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34007a58:	697b      	ldr	r3, [r7, #20]
34007a5a:	681b      	ldr	r3, [r3, #0]
34007a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34007a60:	2b00      	cmp	r3, #0
34007a62:	d002      	beq.n	34007a6a <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
34007a64:	2303      	movs	r3, #3
34007a66:	61bb      	str	r3, [r7, #24]
34007a68:	e001      	b.n	34007a6e <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34007a6a:	2301      	movs	r3, #1
34007a6c:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34007a6e:	683b      	ldr	r3, [r7, #0]
34007a70:	681b      	ldr	r3, [r3, #0]
34007a72:	69ba      	ldr	r2, [r7, #24]
34007a74:	429a      	cmp	r2, r3
34007a76:	d001      	beq.n	34007a7c <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34007a78:	2301      	movs	r3, #1
34007a7a:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34007a7c:	69fb      	ldr	r3, [r7, #28]
}
34007a7e:	4618      	mov	r0, r3
34007a80:	3724      	adds	r7, #36	@ 0x24
34007a82:	46bd      	mov	sp, r7
34007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
34007a88:	4770      	bx	lr
34007a8a:	bf00      	nop
34007a8c:	56028080 	.word	0x56028080
34007a90:	56028084 	.word	0x56028084
34007a94:	56028088 	.word	0x56028088
34007a98:	56028000 	.word	0x56028000

34007a9c <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34007a9c:	b580      	push	{r7, lr}
34007a9e:	b084      	sub	sp, #16
34007aa0:	af00      	add	r7, sp, #0
34007aa2:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
34007aa4:	2301      	movs	r3, #1
34007aa6:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34007aa8:	687b      	ldr	r3, [r7, #4]
34007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007aae:	d01b      	beq.n	34007ae8 <RCC_PLL_Source_IsReady+0x4c>
34007ab0:	687b      	ldr	r3, [r7, #4]
34007ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007ab6:	d81f      	bhi.n	34007af8 <RCC_PLL_Source_IsReady+0x5c>
34007ab8:	687b      	ldr	r3, [r7, #4]
34007aba:	2b00      	cmp	r3, #0
34007abc:	d004      	beq.n	34007ac8 <RCC_PLL_Source_IsReady+0x2c>
34007abe:	687b      	ldr	r3, [r7, #4]
34007ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007ac4:	d008      	beq.n	34007ad8 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
34007ac6:	e017      	b.n	34007af8 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34007ac8:	f7fe f8b6 	bl	34005c38 <LL_RCC_HSI_IsReady>
34007acc:	4603      	mov	r3, r0
34007ace:	2b00      	cmp	r3, #0
34007ad0:	d114      	bne.n	34007afc <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
34007ad2:	2300      	movs	r3, #0
34007ad4:	60fb      	str	r3, [r7, #12]
      break;
34007ad6:	e011      	b.n	34007afc <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34007ad8:	f7fe f916 	bl	34005d08 <LL_RCC_MSI_IsReady>
34007adc:	4603      	mov	r3, r0
34007ade:	2b00      	cmp	r3, #0
34007ae0:	d10e      	bne.n	34007b00 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
34007ae2:	2300      	movs	r3, #0
34007ae4:	60fb      	str	r3, [r7, #12]
      break;
34007ae6:	e00b      	b.n	34007b00 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
34007ae8:	f7fe f876 	bl	34005bd8 <LL_RCC_HSE_IsReady>
34007aec:	4603      	mov	r3, r0
34007aee:	2b00      	cmp	r3, #0
34007af0:	d108      	bne.n	34007b04 <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
34007af2:	2300      	movs	r3, #0
34007af4:	60fb      	str	r3, [r7, #12]
      break;
34007af6:	e005      	b.n	34007b04 <RCC_PLL_Source_IsReady+0x68>
      break;
34007af8:	bf00      	nop
34007afa:	e004      	b.n	34007b06 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007afc:	bf00      	nop
34007afe:	e002      	b.n	34007b06 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007b00:	bf00      	nop
34007b02:	e000      	b.n	34007b06 <RCC_PLL_Source_IsReady+0x6a>
      break;
34007b04:	bf00      	nop
  }

  return ret;
34007b06:	68fb      	ldr	r3, [r7, #12]
}
34007b08:	4618      	mov	r0, r3
34007b0a:	3710      	adds	r7, #16
34007b0c:	46bd      	mov	sp, r7
34007b0e:	bd80      	pop	{r7, pc}

34007b10 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
34007b10:	b580      	push	{r7, lr}
34007b12:	b084      	sub	sp, #16
34007b14:	af00      	add	r7, sp, #0
34007b16:	6078      	str	r0, [r7, #4]
34007b18:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
34007b1a:	2301      	movs	r3, #1
34007b1c:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34007b1e:	687b      	ldr	r3, [r7, #4]
34007b20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b24:	d03a      	beq.n	34007b9c <RCC_IC_CheckPLLSources+0x8c>
34007b26:	687b      	ldr	r3, [r7, #4]
34007b28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b2c:	d843      	bhi.n	34007bb6 <RCC_IC_CheckPLLSources+0xa6>
34007b2e:	687b      	ldr	r3, [r7, #4]
34007b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b34:	d025      	beq.n	34007b82 <RCC_IC_CheckPLLSources+0x72>
34007b36:	687b      	ldr	r3, [r7, #4]
34007b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b3c:	d83b      	bhi.n	34007bb6 <RCC_IC_CheckPLLSources+0xa6>
34007b3e:	687b      	ldr	r3, [r7, #4]
34007b40:	2b00      	cmp	r3, #0
34007b42:	d004      	beq.n	34007b4e <RCC_IC_CheckPLLSources+0x3e>
34007b44:	687b      	ldr	r3, [r7, #4]
34007b46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007b4a:	d00d      	beq.n	34007b68 <RCC_IC_CheckPLLSources+0x58>
34007b4c:	e033      	b.n	34007bb6 <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34007b4e:	f7fe f98d 	bl	34005e6c <LL_RCC_PLL1_IsReady>
34007b52:	4603      	mov	r3, r0
34007b54:	2b00      	cmp	r3, #0
34007b56:	d131      	bne.n	34007bbc <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34007b58:	f7fe f99c 	bl	34005e94 <LL_RCC_PLL1_IsEnabledBypass>
34007b5c:	4603      	mov	r3, r0
34007b5e:	2b00      	cmp	r3, #0
34007b60:	d12c      	bne.n	34007bbc <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
34007b62:	2300      	movs	r3, #0
34007b64:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007b66:	e029      	b.n	34007bbc <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34007b68:	f7fe f9b6 	bl	34005ed8 <LL_RCC_PLL2_IsReady>
34007b6c:	4603      	mov	r3, r0
34007b6e:	2b00      	cmp	r3, #0
34007b70:	d126      	bne.n	34007bc0 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34007b72:	f7fe f9c5 	bl	34005f00 <LL_RCC_PLL2_IsEnabledBypass>
34007b76:	4603      	mov	r3, r0
34007b78:	2b00      	cmp	r3, #0
34007b7a:	d121      	bne.n	34007bc0 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34007b7c:	2300      	movs	r3, #0
34007b7e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007b80:	e01e      	b.n	34007bc0 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34007b82:	f7fe f9df 	bl	34005f44 <LL_RCC_PLL3_IsReady>
34007b86:	4603      	mov	r3, r0
34007b88:	2b00      	cmp	r3, #0
34007b8a:	d11b      	bne.n	34007bc4 <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34007b8c:	f7fe f9ee 	bl	34005f6c <LL_RCC_PLL3_IsEnabledBypass>
34007b90:	4603      	mov	r3, r0
34007b92:	2b00      	cmp	r3, #0
34007b94:	d116      	bne.n	34007bc4 <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
34007b96:	2300      	movs	r3, #0
34007b98:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007b9a:	e013      	b.n	34007bc4 <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34007b9c:	f7fe fa08 	bl	34005fb0 <LL_RCC_PLL4_IsReady>
34007ba0:	4603      	mov	r3, r0
34007ba2:	2b00      	cmp	r3, #0
34007ba4:	d110      	bne.n	34007bc8 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34007ba6:	f7fe fa17 	bl	34005fd8 <LL_RCC_PLL4_IsEnabledBypass>
34007baa:	4603      	mov	r3, r0
34007bac:	2b00      	cmp	r3, #0
34007bae:	d10b      	bne.n	34007bc8 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34007bb0:	2300      	movs	r3, #0
34007bb2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007bb4:	e008      	b.n	34007bc8 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
34007bb6:	2300      	movs	r3, #0
34007bb8:	60fb      	str	r3, [r7, #12]
      break;
34007bba:	e006      	b.n	34007bca <RCC_IC_CheckPLLSources+0xba>
      break;
34007bbc:	bf00      	nop
34007bbe:	e004      	b.n	34007bca <RCC_IC_CheckPLLSources+0xba>
      break;
34007bc0:	bf00      	nop
34007bc2:	e002      	b.n	34007bca <RCC_IC_CheckPLLSources+0xba>
      break;
34007bc4:	bf00      	nop
34007bc6:	e000      	b.n	34007bca <RCC_IC_CheckPLLSources+0xba>
      break;
34007bc8:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34007bca:	683b      	ldr	r3, [r7, #0]
34007bcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007bd0:	d03a      	beq.n	34007c48 <RCC_IC_CheckPLLSources+0x138>
34007bd2:	683b      	ldr	r3, [r7, #0]
34007bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007bd8:	d843      	bhi.n	34007c62 <RCC_IC_CheckPLLSources+0x152>
34007bda:	683b      	ldr	r3, [r7, #0]
34007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007be0:	d025      	beq.n	34007c2e <RCC_IC_CheckPLLSources+0x11e>
34007be2:	683b      	ldr	r3, [r7, #0]
34007be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007be8:	d83b      	bhi.n	34007c62 <RCC_IC_CheckPLLSources+0x152>
34007bea:	683b      	ldr	r3, [r7, #0]
34007bec:	2b00      	cmp	r3, #0
34007bee:	d004      	beq.n	34007bfa <RCC_IC_CheckPLLSources+0xea>
34007bf0:	683b      	ldr	r3, [r7, #0]
34007bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007bf6:	d00d      	beq.n	34007c14 <RCC_IC_CheckPLLSources+0x104>
34007bf8:	e033      	b.n	34007c62 <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34007bfa:	f7fe f937 	bl	34005e6c <LL_RCC_PLL1_IsReady>
34007bfe:	4603      	mov	r3, r0
34007c00:	2b00      	cmp	r3, #0
34007c02:	d131      	bne.n	34007c68 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34007c04:	f7fe f946 	bl	34005e94 <LL_RCC_PLL1_IsEnabledBypass>
34007c08:	4603      	mov	r3, r0
34007c0a:	2b00      	cmp	r3, #0
34007c0c:	d12c      	bne.n	34007c68 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
34007c0e:	2300      	movs	r3, #0
34007c10:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007c12:	e029      	b.n	34007c68 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34007c14:	f7fe f960 	bl	34005ed8 <LL_RCC_PLL2_IsReady>
34007c18:	4603      	mov	r3, r0
34007c1a:	2b00      	cmp	r3, #0
34007c1c:	d126      	bne.n	34007c6c <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34007c1e:	f7fe f96f 	bl	34005f00 <LL_RCC_PLL2_IsEnabledBypass>
34007c22:	4603      	mov	r3, r0
34007c24:	2b00      	cmp	r3, #0
34007c26:	d121      	bne.n	34007c6c <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34007c28:	2300      	movs	r3, #0
34007c2a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007c2c:	e01e      	b.n	34007c6c <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34007c2e:	f7fe f989 	bl	34005f44 <LL_RCC_PLL3_IsReady>
34007c32:	4603      	mov	r3, r0
34007c34:	2b00      	cmp	r3, #0
34007c36:	d11b      	bne.n	34007c70 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34007c38:	f7fe f998 	bl	34005f6c <LL_RCC_PLL3_IsEnabledBypass>
34007c3c:	4603      	mov	r3, r0
34007c3e:	2b00      	cmp	r3, #0
34007c40:	d116      	bne.n	34007c70 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
34007c42:	2300      	movs	r3, #0
34007c44:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007c46:	e013      	b.n	34007c70 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34007c48:	f7fe f9b2 	bl	34005fb0 <LL_RCC_PLL4_IsReady>
34007c4c:	4603      	mov	r3, r0
34007c4e:	2b00      	cmp	r3, #0
34007c50:	d110      	bne.n	34007c74 <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
34007c52:	f7fe f9c1 	bl	34005fd8 <LL_RCC_PLL4_IsEnabledBypass>
34007c56:	4603      	mov	r3, r0
34007c58:	2b00      	cmp	r3, #0
34007c5a:	d10b      	bne.n	34007c74 <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34007c5c:	2300      	movs	r3, #0
34007c5e:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34007c60:	e008      	b.n	34007c74 <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
34007c62:	2300      	movs	r3, #0
34007c64:	60fb      	str	r3, [r7, #12]
      break;
34007c66:	e006      	b.n	34007c76 <RCC_IC_CheckPLLSources+0x166>
      break;
34007c68:	bf00      	nop
34007c6a:	e004      	b.n	34007c76 <RCC_IC_CheckPLLSources+0x166>
      break;
34007c6c:	bf00      	nop
34007c6e:	e002      	b.n	34007c76 <RCC_IC_CheckPLLSources+0x166>
      break;
34007c70:	bf00      	nop
34007c72:	e000      	b.n	34007c76 <RCC_IC_CheckPLLSources+0x166>
      break;
34007c74:	bf00      	nop
  }

  return ret;
34007c76:	68fb      	ldr	r3, [r7, #12]
}
34007c78:	4618      	mov	r0, r3
34007c7a:	3710      	adds	r7, #16
34007c7c:	46bd      	mov	sp, r7
34007c7e:	bd80      	pop	{r7, pc}

34007c80 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34007c80:	b480      	push	{r7}
34007c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34007c84:	4b05      	ldr	r3, [pc, #20]	@ (34007c9c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34007c88:	4a04      	ldr	r2, [pc, #16]	@ (34007c9c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34007c8e:	6553      	str	r3, [r2, #84]	@ 0x54
}
34007c90:	bf00      	nop
34007c92:	46bd      	mov	sp, r7
34007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
34007c98:	4770      	bx	lr
34007c9a:	bf00      	nop
34007c9c:	56028000 	.word	0x56028000

34007ca0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34007ca0:	b480      	push	{r7}
34007ca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34007ca4:	4b05      	ldr	r3, [pc, #20]	@ (34007cbc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34007ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34007ca8:	4a04      	ldr	r2, [pc, #16]	@ (34007cbc <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34007caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34007cae:	6553      	str	r3, [r2, #84]	@ 0x54
}
34007cb0:	bf00      	nop
34007cb2:	46bd      	mov	sp, r7
34007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
34007cb8:	4770      	bx	lr
34007cba:	bf00      	nop
34007cbc:	56028000 	.word	0x56028000

34007cc0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34007cc0:	b480      	push	{r7}
34007cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34007cc4:	4b06      	ldr	r3, [pc, #24]	@ (34007ce0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34007cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34007cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34007ccc:	2b40      	cmp	r3, #64	@ 0x40
34007cce:	d101      	bne.n	34007cd4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34007cd0:	2301      	movs	r3, #1
34007cd2:	e000      	b.n	34007cd6 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34007cd4:	2300      	movs	r3, #0
}
34007cd6:	4618      	mov	r0, r3
34007cd8:	46bd      	mov	sp, r7
34007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
34007cde:	4770      	bx	lr
34007ce0:	56028000 	.word	0x56028000

34007ce4 <LL_RCC_HSE_IsReady>:
{
34007ce4:	b480      	push	{r7}
34007ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34007ce8:	4b06      	ldr	r3, [pc, #24]	@ (34007d04 <LL_RCC_HSE_IsReady+0x20>)
34007cea:	685b      	ldr	r3, [r3, #4]
34007cec:	f003 0310 	and.w	r3, r3, #16
34007cf0:	2b00      	cmp	r3, #0
34007cf2:	d001      	beq.n	34007cf8 <LL_RCC_HSE_IsReady+0x14>
34007cf4:	2301      	movs	r3, #1
34007cf6:	e000      	b.n	34007cfa <LL_RCC_HSE_IsReady+0x16>
34007cf8:	2300      	movs	r3, #0
}
34007cfa:	4618      	mov	r0, r3
34007cfc:	46bd      	mov	sp, r7
34007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d02:	4770      	bx	lr
34007d04:	56028000 	.word	0x56028000

34007d08 <LL_RCC_HSI_IsReady>:
{
34007d08:	b480      	push	{r7}
34007d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34007d0c:	4b06      	ldr	r3, [pc, #24]	@ (34007d28 <LL_RCC_HSI_IsReady+0x20>)
34007d0e:	685b      	ldr	r3, [r3, #4]
34007d10:	f003 0308 	and.w	r3, r3, #8
34007d14:	2b00      	cmp	r3, #0
34007d16:	d001      	beq.n	34007d1c <LL_RCC_HSI_IsReady+0x14>
34007d18:	2301      	movs	r3, #1
34007d1a:	e000      	b.n	34007d1e <LL_RCC_HSI_IsReady+0x16>
34007d1c:	2300      	movs	r3, #0
}
34007d1e:	4618      	mov	r0, r3
34007d20:	46bd      	mov	sp, r7
34007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d26:	4770      	bx	lr
34007d28:	56028000 	.word	0x56028000

34007d2c <LL_RCC_HSI_GetDivider>:
{
34007d2c:	b480      	push	{r7}
34007d2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34007d30:	4b04      	ldr	r3, [pc, #16]	@ (34007d44 <LL_RCC_HSI_GetDivider+0x18>)
34007d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34007d34:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34007d38:	4618      	mov	r0, r3
34007d3a:	46bd      	mov	sp, r7
34007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d40:	4770      	bx	lr
34007d42:	bf00      	nop
34007d44:	56028000 	.word	0x56028000

34007d48 <LL_RCC_MSI_IsReady>:
{
34007d48:	b480      	push	{r7}
34007d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34007d4c:	4b06      	ldr	r3, [pc, #24]	@ (34007d68 <LL_RCC_MSI_IsReady+0x20>)
34007d4e:	685b      	ldr	r3, [r3, #4]
34007d50:	f003 0304 	and.w	r3, r3, #4
34007d54:	2b00      	cmp	r3, #0
34007d56:	d001      	beq.n	34007d5c <LL_RCC_MSI_IsReady+0x14>
34007d58:	2301      	movs	r3, #1
34007d5a:	e000      	b.n	34007d5e <LL_RCC_MSI_IsReady+0x16>
34007d5c:	2300      	movs	r3, #0
}
34007d5e:	4618      	mov	r0, r3
34007d60:	46bd      	mov	sp, r7
34007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d66:	4770      	bx	lr
34007d68:	56028000 	.word	0x56028000

34007d6c <LL_RCC_MSI_GetFrequency>:
{
34007d6c:	b480      	push	{r7}
34007d6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34007d70:	4b04      	ldr	r3, [pc, #16]	@ (34007d84 <LL_RCC_MSI_GetFrequency+0x18>)
34007d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34007d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34007d78:	4618      	mov	r0, r3
34007d7a:	46bd      	mov	sp, r7
34007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007d80:	4770      	bx	lr
34007d82:	bf00      	nop
34007d84:	56028000 	.word	0x56028000

34007d88 <LL_RCC_LSE_IsReady>:
{
34007d88:	b480      	push	{r7}
34007d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34007d8c:	4b06      	ldr	r3, [pc, #24]	@ (34007da8 <LL_RCC_LSE_IsReady+0x20>)
34007d8e:	685b      	ldr	r3, [r3, #4]
34007d90:	f003 0302 	and.w	r3, r3, #2
34007d94:	2b00      	cmp	r3, #0
34007d96:	d001      	beq.n	34007d9c <LL_RCC_LSE_IsReady+0x14>
34007d98:	2301      	movs	r3, #1
34007d9a:	e000      	b.n	34007d9e <LL_RCC_LSE_IsReady+0x16>
34007d9c:	2300      	movs	r3, #0
}
34007d9e:	4618      	mov	r0, r3
34007da0:	46bd      	mov	sp, r7
34007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
34007da6:	4770      	bx	lr
34007da8:	56028000 	.word	0x56028000

34007dac <LL_RCC_LSI_IsReady>:
{
34007dac:	b480      	push	{r7}
34007dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34007db0:	4b04      	ldr	r3, [pc, #16]	@ (34007dc4 <LL_RCC_LSI_IsReady+0x18>)
34007db2:	685b      	ldr	r3, [r3, #4]
34007db4:	f003 0301 	and.w	r3, r3, #1
}
34007db8:	4618      	mov	r0, r3
34007dba:	46bd      	mov	sp, r7
34007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
34007dc0:	4770      	bx	lr
34007dc2:	bf00      	nop
34007dc4:	56028000 	.word	0x56028000

34007dc8 <LL_RCC_GetAHBPrescaler>:
{
34007dc8:	b480      	push	{r7}
34007dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34007dcc:	4b04      	ldr	r3, [pc, #16]	@ (34007de0 <LL_RCC_GetAHBPrescaler+0x18>)
34007dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007dd0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34007dd4:	4618      	mov	r0, r3
34007dd6:	46bd      	mov	sp, r7
34007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34007ddc:	4770      	bx	lr
34007dde:	bf00      	nop
34007de0:	56028000 	.word	0x56028000

34007de4 <LL_RCC_GetAPB1Prescaler>:
{
34007de4:	b480      	push	{r7}
34007de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34007de8:	4b04      	ldr	r3, [pc, #16]	@ (34007dfc <LL_RCC_GetAPB1Prescaler+0x18>)
34007dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007dec:	f003 0307 	and.w	r3, r3, #7
}
34007df0:	4618      	mov	r0, r3
34007df2:	46bd      	mov	sp, r7
34007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
34007df8:	4770      	bx	lr
34007dfa:	bf00      	nop
34007dfc:	56028000 	.word	0x56028000

34007e00 <LL_RCC_GetAPB2Prescaler>:
{
34007e00:	b480      	push	{r7}
34007e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34007e04:	4b04      	ldr	r3, [pc, #16]	@ (34007e18 <LL_RCC_GetAPB2Prescaler+0x18>)
34007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34007e0c:	4618      	mov	r0, r3
34007e0e:	46bd      	mov	sp, r7
34007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
34007e14:	4770      	bx	lr
34007e16:	bf00      	nop
34007e18:	56028000 	.word	0x56028000

34007e1c <LL_RCC_GetAPB4Prescaler>:
{
34007e1c:	b480      	push	{r7}
34007e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34007e20:	4b04      	ldr	r3, [pc, #16]	@ (34007e34 <LL_RCC_GetAPB4Prescaler+0x18>)
34007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007e24:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34007e28:	4618      	mov	r0, r3
34007e2a:	46bd      	mov	sp, r7
34007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007e30:	4770      	bx	lr
34007e32:	bf00      	nop
34007e34:	56028000 	.word	0x56028000

34007e38 <LL_RCC_GetAPB5Prescaler>:
{
34007e38:	b480      	push	{r7}
34007e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34007e3c:	4b04      	ldr	r3, [pc, #16]	@ (34007e50 <LL_RCC_GetAPB5Prescaler+0x18>)
34007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34007e40:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34007e44:	4618      	mov	r0, r3
34007e46:	46bd      	mov	sp, r7
34007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
34007e4c:	4770      	bx	lr
34007e4e:	bf00      	nop
34007e50:	56028000 	.word	0x56028000

34007e54 <LL_RCC_SetClockSource>:
{
34007e54:	b480      	push	{r7}
34007e56:	b085      	sub	sp, #20
34007e58:	af00      	add	r7, sp, #0
34007e5a:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34007e5c:	687b      	ldr	r3, [r7, #4]
34007e5e:	b2da      	uxtb	r2, r3
34007e60:	4b10      	ldr	r3, [pc, #64]	@ (34007ea4 <LL_RCC_SetClockSource+0x50>)
34007e62:	4413      	add	r3, r2
34007e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34007e66:	68fb      	ldr	r3, [r7, #12]
34007e68:	681a      	ldr	r2, [r3, #0]
34007e6a:	687b      	ldr	r3, [r7, #4]
34007e6c:	0e19      	lsrs	r1, r3, #24
34007e6e:	687b      	ldr	r3, [r7, #4]
34007e70:	0a1b      	lsrs	r3, r3, #8
34007e72:	f003 031f 	and.w	r3, r3, #31
34007e76:	fa01 f303 	lsl.w	r3, r1, r3
34007e7a:	43db      	mvns	r3, r3
34007e7c:	401a      	ands	r2, r3
34007e7e:	687b      	ldr	r3, [r7, #4]
34007e80:	0c1b      	lsrs	r3, r3, #16
34007e82:	b2d9      	uxtb	r1, r3
34007e84:	687b      	ldr	r3, [r7, #4]
34007e86:	0a1b      	lsrs	r3, r3, #8
34007e88:	f003 031f 	and.w	r3, r3, #31
34007e8c:	fa01 f303 	lsl.w	r3, r1, r3
34007e90:	431a      	orrs	r2, r3
34007e92:	68fb      	ldr	r3, [r7, #12]
34007e94:	601a      	str	r2, [r3, #0]
}
34007e96:	bf00      	nop
34007e98:	3714      	adds	r7, #20
34007e9a:	46bd      	mov	sp, r7
34007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34007ea0:	4770      	bx	lr
34007ea2:	bf00      	nop
34007ea4:	56028144 	.word	0x56028144

34007ea8 <LL_RCC_GetADCPrescaler>:
{
34007ea8:	b480      	push	{r7}
34007eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34007eac:	4b04      	ldr	r3, [pc, #16]	@ (34007ec0 <LL_RCC_GetADCPrescaler+0x18>)
34007eae:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34007eb2:	0a1b      	lsrs	r3, r3, #8
34007eb4:	b2db      	uxtb	r3, r3
}
34007eb6:	4618      	mov	r0, r3
34007eb8:	46bd      	mov	sp, r7
34007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
34007ebe:	4770      	bx	lr
34007ec0:	56028000 	.word	0x56028000

34007ec4 <LL_RCC_SetADFClockSource>:
{
34007ec4:	b480      	push	{r7}
34007ec6:	b083      	sub	sp, #12
34007ec8:	af00      	add	r7, sp, #0
34007eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34007ecc:	4b07      	ldr	r3, [pc, #28]	@ (34007eec <LL_RCC_SetADFClockSource+0x28>)
34007ece:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34007ed2:	f023 0207 	bic.w	r2, r3, #7
34007ed6:	4905      	ldr	r1, [pc, #20]	@ (34007eec <LL_RCC_SetADFClockSource+0x28>)
34007ed8:	687b      	ldr	r3, [r7, #4]
34007eda:	4313      	orrs	r3, r2
34007edc:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34007ee0:	bf00      	nop
34007ee2:	370c      	adds	r7, #12
34007ee4:	46bd      	mov	sp, r7
34007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
34007eea:	4770      	bx	lr
34007eec:	56028000 	.word	0x56028000

34007ef0 <LL_RCC_SetCLKPClockSource>:
{
34007ef0:	b480      	push	{r7}
34007ef2:	b083      	sub	sp, #12
34007ef4:	af00      	add	r7, sp, #0
34007ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34007ef8:	4b07      	ldr	r3, [pc, #28]	@ (34007f18 <LL_RCC_SetCLKPClockSource+0x28>)
34007efa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34007efe:	f023 0207 	bic.w	r2, r3, #7
34007f02:	4905      	ldr	r1, [pc, #20]	@ (34007f18 <LL_RCC_SetCLKPClockSource+0x28>)
34007f04:	687b      	ldr	r3, [r7, #4]
34007f06:	4313      	orrs	r3, r2
34007f08:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34007f0c:	bf00      	nop
34007f0e:	370c      	adds	r7, #12
34007f10:	46bd      	mov	sp, r7
34007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
34007f16:	4770      	bx	lr
34007f18:	56028000 	.word	0x56028000

34007f1c <LL_RCC_SetDCMIPPClockSource>:
{
34007f1c:	b480      	push	{r7}
34007f1e:	b083      	sub	sp, #12
34007f20:	af00      	add	r7, sp, #0
34007f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34007f24:	4b07      	ldr	r3, [pc, #28]	@ (34007f44 <LL_RCC_SetDCMIPPClockSource+0x28>)
34007f26:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34007f2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34007f2e:	4905      	ldr	r1, [pc, #20]	@ (34007f44 <LL_RCC_SetDCMIPPClockSource+0x28>)
34007f30:	687b      	ldr	r3, [r7, #4]
34007f32:	4313      	orrs	r3, r2
34007f34:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34007f38:	bf00      	nop
34007f3a:	370c      	adds	r7, #12
34007f3c:	46bd      	mov	sp, r7
34007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34007f42:	4770      	bx	lr
34007f44:	56028000 	.word	0x56028000

34007f48 <LL_RCC_SetETHClockSource>:
{
34007f48:	b480      	push	{r7}
34007f4a:	b083      	sub	sp, #12
34007f4c:	af00      	add	r7, sp, #0
34007f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34007f50:	4b07      	ldr	r3, [pc, #28]	@ (34007f70 <LL_RCC_SetETHClockSource+0x28>)
34007f52:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34007f56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34007f5a:	4905      	ldr	r1, [pc, #20]	@ (34007f70 <LL_RCC_SetETHClockSource+0x28>)
34007f5c:	687b      	ldr	r3, [r7, #4]
34007f5e:	4313      	orrs	r3, r2
34007f60:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34007f64:	bf00      	nop
34007f66:	370c      	adds	r7, #12
34007f68:	46bd      	mov	sp, r7
34007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34007f6e:	4770      	bx	lr
34007f70:	56028000 	.word	0x56028000

34007f74 <LL_RCC_SetETHPHYInterface>:
{
34007f74:	b480      	push	{r7}
34007f76:	b083      	sub	sp, #12
34007f78:	af00      	add	r7, sp, #0
34007f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34007f7c:	4b07      	ldr	r3, [pc, #28]	@ (34007f9c <LL_RCC_SetETHPHYInterface+0x28>)
34007f7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34007f82:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34007f86:	4905      	ldr	r1, [pc, #20]	@ (34007f9c <LL_RCC_SetETHPHYInterface+0x28>)
34007f88:	687b      	ldr	r3, [r7, #4]
34007f8a:	4313      	orrs	r3, r2
34007f8c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34007f90:	bf00      	nop
34007f92:	370c      	adds	r7, #12
34007f94:	46bd      	mov	sp, r7
34007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
34007f9a:	4770      	bx	lr
34007f9c:	56028000 	.word	0x56028000

34007fa0 <LL_RCC_GetETH1PTPDivider>:
{
34007fa0:	b480      	push	{r7}
34007fa2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34007fa4:	4b04      	ldr	r3, [pc, #16]	@ (34007fb8 <LL_RCC_GetETH1PTPDivider+0x18>)
34007fa6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34007faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34007fae:	4618      	mov	r0, r3
34007fb0:	46bd      	mov	sp, r7
34007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34007fb6:	4770      	bx	lr
34007fb8:	56028000 	.word	0x56028000

34007fbc <LL_RCC_SetETHREFRXClockSource>:
{
34007fbc:	b480      	push	{r7}
34007fbe:	b083      	sub	sp, #12
34007fc0:	af00      	add	r7, sp, #0
34007fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34007fc4:	4b07      	ldr	r3, [pc, #28]	@ (34007fe4 <LL_RCC_SetETHREFRXClockSource+0x28>)
34007fc6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34007fca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34007fce:	4905      	ldr	r1, [pc, #20]	@ (34007fe4 <LL_RCC_SetETHREFRXClockSource+0x28>)
34007fd0:	687b      	ldr	r3, [r7, #4]
34007fd2:	4313      	orrs	r3, r2
34007fd4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34007fd8:	bf00      	nop
34007fda:	370c      	adds	r7, #12
34007fdc:	46bd      	mov	sp, r7
34007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
34007fe2:	4770      	bx	lr
34007fe4:	56028000 	.word	0x56028000

34007fe8 <LL_RCC_SetETHREFTXClockSource>:
{
34007fe8:	b480      	push	{r7}
34007fea:	b083      	sub	sp, #12
34007fec:	af00      	add	r7, sp, #0
34007fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34007ff0:	4b07      	ldr	r3, [pc, #28]	@ (34008010 <LL_RCC_SetETHREFTXClockSource+0x28>)
34007ff2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34007ff6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34007ffa:	4905      	ldr	r1, [pc, #20]	@ (34008010 <LL_RCC_SetETHREFTXClockSource+0x28>)
34007ffc:	687b      	ldr	r3, [r7, #4]
34007ffe:	4313      	orrs	r3, r2
34008000:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34008004:	bf00      	nop
34008006:	370c      	adds	r7, #12
34008008:	46bd      	mov	sp, r7
3400800a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400800e:	4770      	bx	lr
34008010:	56028000 	.word	0x56028000

34008014 <LL_RCC_SetFDCANClockSource>:
{
34008014:	b480      	push	{r7}
34008016:	b083      	sub	sp, #12
34008018:	af00      	add	r7, sp, #0
3400801a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
3400801c:	4b07      	ldr	r3, [pc, #28]	@ (3400803c <LL_RCC_SetFDCANClockSource+0x28>)
3400801e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34008022:	f023 0203 	bic.w	r2, r3, #3
34008026:	4905      	ldr	r1, [pc, #20]	@ (3400803c <LL_RCC_SetFDCANClockSource+0x28>)
34008028:	687b      	ldr	r3, [r7, #4]
3400802a:	4313      	orrs	r3, r2
3400802c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34008030:	bf00      	nop
34008032:	370c      	adds	r7, #12
34008034:	46bd      	mov	sp, r7
34008036:	f85d 7b04 	ldr.w	r7, [sp], #4
3400803a:	4770      	bx	lr
3400803c:	56028000 	.word	0x56028000

34008040 <LL_RCC_SetFMCClockSource>:
{
34008040:	b480      	push	{r7}
34008042:	b083      	sub	sp, #12
34008044:	af00      	add	r7, sp, #0
34008046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34008048:	4b07      	ldr	r3, [pc, #28]	@ (34008068 <LL_RCC_SetFMCClockSource+0x28>)
3400804a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400804e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34008052:	4905      	ldr	r1, [pc, #20]	@ (34008068 <LL_RCC_SetFMCClockSource+0x28>)
34008054:	687b      	ldr	r3, [r7, #4]
34008056:	4313      	orrs	r3, r2
34008058:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
3400805c:	bf00      	nop
3400805e:	370c      	adds	r7, #12
34008060:	46bd      	mov	sp, r7
34008062:	f85d 7b04 	ldr.w	r7, [sp], #4
34008066:	4770      	bx	lr
34008068:	56028000 	.word	0x56028000

3400806c <LL_RCC_SetI2CClockSource>:
{
3400806c:	b580      	push	{r7, lr}
3400806e:	b082      	sub	sp, #8
34008070:	af00      	add	r7, sp, #0
34008072:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008074:	6878      	ldr	r0, [r7, #4]
34008076:	f7ff feed 	bl	34007e54 <LL_RCC_SetClockSource>
}
3400807a:	bf00      	nop
3400807c:	3708      	adds	r7, #8
3400807e:	46bd      	mov	sp, r7
34008080:	bd80      	pop	{r7, pc}

34008082 <LL_RCC_SetI3CClockSource>:
{
34008082:	b580      	push	{r7, lr}
34008084:	b082      	sub	sp, #8
34008086:	af00      	add	r7, sp, #0
34008088:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400808a:	6878      	ldr	r0, [r7, #4]
3400808c:	f7ff fee2 	bl	34007e54 <LL_RCC_SetClockSource>
}
34008090:	bf00      	nop
34008092:	3708      	adds	r7, #8
34008094:	46bd      	mov	sp, r7
34008096:	bd80      	pop	{r7, pc}

34008098 <LL_RCC_SetLPTIMClockSource>:
{
34008098:	b580      	push	{r7, lr}
3400809a:	b082      	sub	sp, #8
3400809c:	af00      	add	r7, sp, #0
3400809e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340080a0:	6878      	ldr	r0, [r7, #4]
340080a2:	f7ff fed7 	bl	34007e54 <LL_RCC_SetClockSource>
}
340080a6:	bf00      	nop
340080a8:	3708      	adds	r7, #8
340080aa:	46bd      	mov	sp, r7
340080ac:	bd80      	pop	{r7, pc}
	...

340080b0 <LL_RCC_SetLPUARTClockSource>:
{
340080b0:	b480      	push	{r7}
340080b2:	b083      	sub	sp, #12
340080b4:	af00      	add	r7, sp, #0
340080b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
340080b8:	4b07      	ldr	r3, [pc, #28]	@ (340080d8 <LL_RCC_SetLPUARTClockSource+0x28>)
340080ba:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340080be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
340080c2:	4905      	ldr	r1, [pc, #20]	@ (340080d8 <LL_RCC_SetLPUARTClockSource+0x28>)
340080c4:	687b      	ldr	r3, [r7, #4]
340080c6:	4313      	orrs	r3, r2
340080c8:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
340080cc:	bf00      	nop
340080ce:	370c      	adds	r7, #12
340080d0:	46bd      	mov	sp, r7
340080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
340080d6:	4770      	bx	lr
340080d8:	56028000 	.word	0x56028000

340080dc <LL_RCC_SetLTDCClockSource>:
{
340080dc:	b480      	push	{r7}
340080de:	b083      	sub	sp, #12
340080e0:	af00      	add	r7, sp, #0
340080e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340080e4:	4b07      	ldr	r3, [pc, #28]	@ (34008104 <LL_RCC_SetLTDCClockSource+0x28>)
340080e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340080ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340080ee:	4905      	ldr	r1, [pc, #20]	@ (34008104 <LL_RCC_SetLTDCClockSource+0x28>)
340080f0:	687b      	ldr	r3, [r7, #4]
340080f2:	4313      	orrs	r3, r2
340080f4:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
340080f8:	bf00      	nop
340080fa:	370c      	adds	r7, #12
340080fc:	46bd      	mov	sp, r7
340080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34008102:	4770      	bx	lr
34008104:	56028000 	.word	0x56028000

34008108 <LL_RCC_SetMDFClockSource>:
{
34008108:	b480      	push	{r7}
3400810a:	b083      	sub	sp, #12
3400810c:	af00      	add	r7, sp, #0
3400810e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34008110:	4b07      	ldr	r3, [pc, #28]	@ (34008130 <LL_RCC_SetMDFClockSource+0x28>)
34008112:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34008116:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400811a:	4905      	ldr	r1, [pc, #20]	@ (34008130 <LL_RCC_SetMDFClockSource+0x28>)
3400811c:	687b      	ldr	r3, [r7, #4]
3400811e:	4313      	orrs	r3, r2
34008120:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34008124:	bf00      	nop
34008126:	370c      	adds	r7, #12
34008128:	46bd      	mov	sp, r7
3400812a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400812e:	4770      	bx	lr
34008130:	56028000 	.word	0x56028000

34008134 <LL_RCC_SetOTGPHYClockSource>:
{
34008134:	b580      	push	{r7, lr}
34008136:	b082      	sub	sp, #8
34008138:	af00      	add	r7, sp, #0
3400813a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400813c:	6878      	ldr	r0, [r7, #4]
3400813e:	f7ff fe89 	bl	34007e54 <LL_RCC_SetClockSource>
}
34008142:	bf00      	nop
34008144:	3708      	adds	r7, #8
34008146:	46bd      	mov	sp, r7
34008148:	bd80      	pop	{r7, pc}

3400814a <LL_RCC_SetOTGPHYCKREFClockSource>:
{
3400814a:	b580      	push	{r7, lr}
3400814c:	b082      	sub	sp, #8
3400814e:	af00      	add	r7, sp, #0
34008150:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008152:	6878      	ldr	r0, [r7, #4]
34008154:	f7ff fe7e 	bl	34007e54 <LL_RCC_SetClockSource>
}
34008158:	bf00      	nop
3400815a:	3708      	adds	r7, #8
3400815c:	46bd      	mov	sp, r7
3400815e:	bd80      	pop	{r7, pc}

34008160 <LL_RCC_SetPSSIClockSource>:
{
34008160:	b480      	push	{r7}
34008162:	b083      	sub	sp, #12
34008164:	af00      	add	r7, sp, #0
34008166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34008168:	4b07      	ldr	r3, [pc, #28]	@ (34008188 <LL_RCC_SetPSSIClockSource+0x28>)
3400816a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400816e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34008172:	4905      	ldr	r1, [pc, #20]	@ (34008188 <LL_RCC_SetPSSIClockSource+0x28>)
34008174:	687b      	ldr	r3, [r7, #4]
34008176:	4313      	orrs	r3, r2
34008178:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400817c:	bf00      	nop
3400817e:	370c      	adds	r7, #12
34008180:	46bd      	mov	sp, r7
34008182:	f85d 7b04 	ldr.w	r7, [sp], #4
34008186:	4770      	bx	lr
34008188:	56028000 	.word	0x56028000

3400818c <LL_RCC_SetSAIClockSource>:
{
3400818c:	b580      	push	{r7, lr}
3400818e:	b082      	sub	sp, #8
34008190:	af00      	add	r7, sp, #0
34008192:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008194:	6878      	ldr	r0, [r7, #4]
34008196:	f7ff fe5d 	bl	34007e54 <LL_RCC_SetClockSource>
}
3400819a:	bf00      	nop
3400819c:	3708      	adds	r7, #8
3400819e:	46bd      	mov	sp, r7
340081a0:	bd80      	pop	{r7, pc}

340081a2 <LL_RCC_SetSDMMCClockSource>:
{
340081a2:	b580      	push	{r7, lr}
340081a4:	b082      	sub	sp, #8
340081a6:	af00      	add	r7, sp, #0
340081a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340081aa:	6878      	ldr	r0, [r7, #4]
340081ac:	f7ff fe52 	bl	34007e54 <LL_RCC_SetClockSource>
}
340081b0:	bf00      	nop
340081b2:	3708      	adds	r7, #8
340081b4:	46bd      	mov	sp, r7
340081b6:	bd80      	pop	{r7, pc}

340081b8 <LL_RCC_SetSPDIFRXClockSource>:
{
340081b8:	b480      	push	{r7}
340081ba:	b083      	sub	sp, #12
340081bc:	af00      	add	r7, sp, #0
340081be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
340081c0:	4b07      	ldr	r3, [pc, #28]	@ (340081e0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
340081c2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
340081c6:	f023 0207 	bic.w	r2, r3, #7
340081ca:	4905      	ldr	r1, [pc, #20]	@ (340081e0 <LL_RCC_SetSPDIFRXClockSource+0x28>)
340081cc:	687b      	ldr	r3, [r7, #4]
340081ce:	4313      	orrs	r3, r2
340081d0:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
340081d4:	bf00      	nop
340081d6:	370c      	adds	r7, #12
340081d8:	46bd      	mov	sp, r7
340081da:	f85d 7b04 	ldr.w	r7, [sp], #4
340081de:	4770      	bx	lr
340081e0:	56028000 	.word	0x56028000

340081e4 <LL_RCC_SetSPIClockSource>:
{
340081e4:	b580      	push	{r7, lr}
340081e6:	b082      	sub	sp, #8
340081e8:	af00      	add	r7, sp, #0
340081ea:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340081ec:	6878      	ldr	r0, [r7, #4]
340081ee:	f7ff fe31 	bl	34007e54 <LL_RCC_SetClockSource>
}
340081f2:	bf00      	nop
340081f4:	3708      	adds	r7, #8
340081f6:	46bd      	mov	sp, r7
340081f8:	bd80      	pop	{r7, pc}

340081fa <LL_RCC_SetUSARTClockSource>:
{
340081fa:	b580      	push	{r7, lr}
340081fc:	b082      	sub	sp, #8
340081fe:	af00      	add	r7, sp, #0
34008200:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008202:	6878      	ldr	r0, [r7, #4]
34008204:	f7ff fe26 	bl	34007e54 <LL_RCC_SetClockSource>
}
34008208:	bf00      	nop
3400820a:	3708      	adds	r7, #8
3400820c:	46bd      	mov	sp, r7
3400820e:	bd80      	pop	{r7, pc}

34008210 <LL_RCC_SetXSPIClockSource>:
{
34008210:	b580      	push	{r7, lr}
34008212:	b082      	sub	sp, #8
34008214:	af00      	add	r7, sp, #0
34008216:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34008218:	6878      	ldr	r0, [r7, #4]
3400821a:	f7ff fe1b 	bl	34007e54 <LL_RCC_SetClockSource>
}
3400821e:	bf00      	nop
34008220:	3708      	adds	r7, #8
34008222:	46bd      	mov	sp, r7
34008224:	bd80      	pop	{r7, pc}
	...

34008228 <LL_RCC_GetClockSource>:
{
34008228:	b480      	push	{r7}
3400822a:	b085      	sub	sp, #20
3400822c:	af00      	add	r7, sp, #0
3400822e:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34008230:	687b      	ldr	r3, [r7, #4]
34008232:	b2da      	uxtb	r2, r3
34008234:	4b0e      	ldr	r3, [pc, #56]	@ (34008270 <LL_RCC_GetClockSource+0x48>)
34008236:	4413      	add	r3, r2
34008238:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3400823a:	68fb      	ldr	r3, [r7, #12]
3400823c:	681a      	ldr	r2, [r3, #0]
3400823e:	687b      	ldr	r3, [r7, #4]
34008240:	0e19      	lsrs	r1, r3, #24
34008242:	687b      	ldr	r3, [r7, #4]
34008244:	0a1b      	lsrs	r3, r3, #8
34008246:	f003 031f 	and.w	r3, r3, #31
3400824a:	fa01 f303 	lsl.w	r3, r1, r3
3400824e:	401a      	ands	r2, r3
34008250:	687b      	ldr	r3, [r7, #4]
34008252:	0a1b      	lsrs	r3, r3, #8
34008254:	f003 031f 	and.w	r3, r3, #31
34008258:	fa22 f303 	lsr.w	r3, r2, r3
3400825c:	041a      	lsls	r2, r3, #16
3400825e:	687b      	ldr	r3, [r7, #4]
34008260:	4313      	orrs	r3, r2
}
34008262:	4618      	mov	r0, r3
34008264:	3714      	adds	r7, #20
34008266:	46bd      	mov	sp, r7
34008268:	f85d 7b04 	ldr.w	r7, [sp], #4
3400826c:	4770      	bx	lr
3400826e:	bf00      	nop
34008270:	56028144 	.word	0x56028144

34008274 <LL_RCC_GetADCClockSource>:
{
34008274:	b480      	push	{r7}
34008276:	b083      	sub	sp, #12
34008278:	af00      	add	r7, sp, #0
3400827a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3400827c:	4b05      	ldr	r3, [pc, #20]	@ (34008294 <LL_RCC_GetADCClockSource+0x20>)
3400827e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34008282:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34008286:	4618      	mov	r0, r3
34008288:	370c      	adds	r7, #12
3400828a:	46bd      	mov	sp, r7
3400828c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008290:	4770      	bx	lr
34008292:	bf00      	nop
34008294:	56028000 	.word	0x56028000

34008298 <LL_RCC_GetADFClockSource>:
{
34008298:	b480      	push	{r7}
3400829a:	b083      	sub	sp, #12
3400829c:	af00      	add	r7, sp, #0
3400829e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
340082a0:	4b05      	ldr	r3, [pc, #20]	@ (340082b8 <LL_RCC_GetADFClockSource+0x20>)
340082a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340082a6:	f003 0307 	and.w	r3, r3, #7
}
340082aa:	4618      	mov	r0, r3
340082ac:	370c      	adds	r7, #12
340082ae:	46bd      	mov	sp, r7
340082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
340082b4:	4770      	bx	lr
340082b6:	bf00      	nop
340082b8:	56028000 	.word	0x56028000

340082bc <LL_RCC_GetCLKPClockSource>:
{
340082bc:	b480      	push	{r7}
340082be:	b083      	sub	sp, #12
340082c0:	af00      	add	r7, sp, #0
340082c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340082c4:	4b05      	ldr	r3, [pc, #20]	@ (340082dc <LL_RCC_GetCLKPClockSource+0x20>)
340082c6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340082ca:	f003 0307 	and.w	r3, r3, #7
}
340082ce:	4618      	mov	r0, r3
340082d0:	370c      	adds	r7, #12
340082d2:	46bd      	mov	sp, r7
340082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340082d8:	4770      	bx	lr
340082da:	bf00      	nop
340082dc:	56028000 	.word	0x56028000

340082e0 <LL_RCC_GetDCMIPPClockSource>:
{
340082e0:	b480      	push	{r7}
340082e2:	b083      	sub	sp, #12
340082e4:	af00      	add	r7, sp, #0
340082e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
340082e8:	4b05      	ldr	r3, [pc, #20]	@ (34008300 <LL_RCC_GetDCMIPPClockSource+0x20>)
340082ea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340082ee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
340082f2:	4618      	mov	r0, r3
340082f4:	370c      	adds	r7, #12
340082f6:	46bd      	mov	sp, r7
340082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
340082fc:	4770      	bx	lr
340082fe:	bf00      	nop
34008300:	56028000 	.word	0x56028000

34008304 <LL_RCC_GetETHClockSource>:
{
34008304:	b480      	push	{r7}
34008306:	b083      	sub	sp, #12
34008308:	af00      	add	r7, sp, #0
3400830a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3400830c:	4b05      	ldr	r3, [pc, #20]	@ (34008324 <LL_RCC_GetETHClockSource+0x20>)
3400830e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008312:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34008316:	4618      	mov	r0, r3
34008318:	370c      	adds	r7, #12
3400831a:	46bd      	mov	sp, r7
3400831c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008320:	4770      	bx	lr
34008322:	bf00      	nop
34008324:	56028000 	.word	0x56028000

34008328 <LL_RCC_GetETHPTPClockSource>:
{
34008328:	b480      	push	{r7}
3400832a:	b083      	sub	sp, #12
3400832c:	af00      	add	r7, sp, #0
3400832e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34008330:	4b05      	ldr	r3, [pc, #20]	@ (34008348 <LL_RCC_GetETHPTPClockSource+0x20>)
34008332:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34008336:	f003 0303 	and.w	r3, r3, #3
}
3400833a:	4618      	mov	r0, r3
3400833c:	370c      	adds	r7, #12
3400833e:	46bd      	mov	sp, r7
34008340:	f85d 7b04 	ldr.w	r7, [sp], #4
34008344:	4770      	bx	lr
34008346:	bf00      	nop
34008348:	56028000 	.word	0x56028000

3400834c <LL_RCC_GetFDCANClockSource>:
{
3400834c:	b480      	push	{r7}
3400834e:	b083      	sub	sp, #12
34008350:	af00      	add	r7, sp, #0
34008352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34008354:	4b05      	ldr	r3, [pc, #20]	@ (3400836c <LL_RCC_GetFDCANClockSource+0x20>)
34008356:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400835a:	f003 0303 	and.w	r3, r3, #3
}
3400835e:	4618      	mov	r0, r3
34008360:	370c      	adds	r7, #12
34008362:	46bd      	mov	sp, r7
34008364:	f85d 7b04 	ldr.w	r7, [sp], #4
34008368:	4770      	bx	lr
3400836a:	bf00      	nop
3400836c:	56028000 	.word	0x56028000

34008370 <LL_RCC_GetFMCClockSource>:
{
34008370:	b480      	push	{r7}
34008372:	b083      	sub	sp, #12
34008374:	af00      	add	r7, sp, #0
34008376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34008378:	4b05      	ldr	r3, [pc, #20]	@ (34008390 <LL_RCC_GetFMCClockSource+0x20>)
3400837a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400837e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34008382:	4618      	mov	r0, r3
34008384:	370c      	adds	r7, #12
34008386:	46bd      	mov	sp, r7
34008388:	f85d 7b04 	ldr.w	r7, [sp], #4
3400838c:	4770      	bx	lr
3400838e:	bf00      	nop
34008390:	56028000 	.word	0x56028000

34008394 <LL_RCC_GetI2CClockSource>:
{
34008394:	b580      	push	{r7, lr}
34008396:	b082      	sub	sp, #8
34008398:	af00      	add	r7, sp, #0
3400839a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400839c:	6878      	ldr	r0, [r7, #4]
3400839e:	f7ff ff43 	bl	34008228 <LL_RCC_GetClockSource>
340083a2:	4603      	mov	r3, r0
}
340083a4:	4618      	mov	r0, r3
340083a6:	3708      	adds	r7, #8
340083a8:	46bd      	mov	sp, r7
340083aa:	bd80      	pop	{r7, pc}

340083ac <LL_RCC_GetI3CClockSource>:
{
340083ac:	b580      	push	{r7, lr}
340083ae:	b082      	sub	sp, #8
340083b0:	af00      	add	r7, sp, #0
340083b2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340083b4:	6878      	ldr	r0, [r7, #4]
340083b6:	f7ff ff37 	bl	34008228 <LL_RCC_GetClockSource>
340083ba:	4603      	mov	r3, r0
}
340083bc:	4618      	mov	r0, r3
340083be:	3708      	adds	r7, #8
340083c0:	46bd      	mov	sp, r7
340083c2:	bd80      	pop	{r7, pc}

340083c4 <LL_RCC_GetLPTIMClockSource>:
{
340083c4:	b580      	push	{r7, lr}
340083c6:	b082      	sub	sp, #8
340083c8:	af00      	add	r7, sp, #0
340083ca:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340083cc:	6878      	ldr	r0, [r7, #4]
340083ce:	f7ff ff2b 	bl	34008228 <LL_RCC_GetClockSource>
340083d2:	4603      	mov	r3, r0
}
340083d4:	4618      	mov	r0, r3
340083d6:	3708      	adds	r7, #8
340083d8:	46bd      	mov	sp, r7
340083da:	bd80      	pop	{r7, pc}

340083dc <LL_RCC_GetLPUARTClockSource>:
{
340083dc:	b480      	push	{r7}
340083de:	b083      	sub	sp, #12
340083e0:	af00      	add	r7, sp, #0
340083e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
340083e4:	4b05      	ldr	r3, [pc, #20]	@ (340083fc <LL_RCC_GetLPUARTClockSource+0x20>)
340083e6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
340083ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
340083ee:	4618      	mov	r0, r3
340083f0:	370c      	adds	r7, #12
340083f2:	46bd      	mov	sp, r7
340083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340083f8:	4770      	bx	lr
340083fa:	bf00      	nop
340083fc:	56028000 	.word	0x56028000

34008400 <LL_RCC_GetLTDCClockSource>:
{
34008400:	b480      	push	{r7}
34008402:	b083      	sub	sp, #12
34008404:	af00      	add	r7, sp, #0
34008406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34008408:	4b05      	ldr	r3, [pc, #20]	@ (34008420 <LL_RCC_GetLTDCClockSource+0x20>)
3400840a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400840e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34008412:	4618      	mov	r0, r3
34008414:	370c      	adds	r7, #12
34008416:	46bd      	mov	sp, r7
34008418:	f85d 7b04 	ldr.w	r7, [sp], #4
3400841c:	4770      	bx	lr
3400841e:	bf00      	nop
34008420:	56028000 	.word	0x56028000

34008424 <LL_RCC_GetMDFClockSource>:
{
34008424:	b480      	push	{r7}
34008426:	b083      	sub	sp, #12
34008428:	af00      	add	r7, sp, #0
3400842a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3400842c:	4b05      	ldr	r3, [pc, #20]	@ (34008444 <LL_RCC_GetMDFClockSource+0x20>)
3400842e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34008432:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34008436:	4618      	mov	r0, r3
34008438:	370c      	adds	r7, #12
3400843a:	46bd      	mov	sp, r7
3400843c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008440:	4770      	bx	lr
34008442:	bf00      	nop
34008444:	56028000 	.word	0x56028000

34008448 <LL_RCC_GetPSSIClockSource>:
{
34008448:	b480      	push	{r7}
3400844a:	b083      	sub	sp, #12
3400844c:	af00      	add	r7, sp, #0
3400844e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34008450:	4b05      	ldr	r3, [pc, #20]	@ (34008468 <LL_RCC_GetPSSIClockSource+0x20>)
34008452:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008456:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3400845a:	4618      	mov	r0, r3
3400845c:	370c      	adds	r7, #12
3400845e:	46bd      	mov	sp, r7
34008460:	f85d 7b04 	ldr.w	r7, [sp], #4
34008464:	4770      	bx	lr
34008466:	bf00      	nop
34008468:	56028000 	.word	0x56028000

3400846c <LL_RCC_GetSAIClockSource>:
{
3400846c:	b580      	push	{r7, lr}
3400846e:	b082      	sub	sp, #8
34008470:	af00      	add	r7, sp, #0
34008472:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008474:	6878      	ldr	r0, [r7, #4]
34008476:	f7ff fed7 	bl	34008228 <LL_RCC_GetClockSource>
3400847a:	4603      	mov	r3, r0
}
3400847c:	4618      	mov	r0, r3
3400847e:	3708      	adds	r7, #8
34008480:	46bd      	mov	sp, r7
34008482:	bd80      	pop	{r7, pc}

34008484 <LL_RCC_GetSDMMCClockSource>:
{
34008484:	b580      	push	{r7, lr}
34008486:	b082      	sub	sp, #8
34008488:	af00      	add	r7, sp, #0
3400848a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400848c:	6878      	ldr	r0, [r7, #4]
3400848e:	f7ff fecb 	bl	34008228 <LL_RCC_GetClockSource>
34008492:	4603      	mov	r3, r0
}
34008494:	4618      	mov	r0, r3
34008496:	3708      	adds	r7, #8
34008498:	46bd      	mov	sp, r7
3400849a:	bd80      	pop	{r7, pc}

3400849c <LL_RCC_GetSPDIFRXClockSource>:
{
3400849c:	b480      	push	{r7}
3400849e:	b083      	sub	sp, #12
340084a0:	af00      	add	r7, sp, #0
340084a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
340084a4:	4b05      	ldr	r3, [pc, #20]	@ (340084bc <LL_RCC_GetSPDIFRXClockSource+0x20>)
340084a6:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
340084aa:	f003 0307 	and.w	r3, r3, #7
}
340084ae:	4618      	mov	r0, r3
340084b0:	370c      	adds	r7, #12
340084b2:	46bd      	mov	sp, r7
340084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
340084b8:	4770      	bx	lr
340084ba:	bf00      	nop
340084bc:	56028000 	.word	0x56028000

340084c0 <LL_RCC_GetSPIClockSource>:
{
340084c0:	b580      	push	{r7, lr}
340084c2:	b082      	sub	sp, #8
340084c4:	af00      	add	r7, sp, #0
340084c6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340084c8:	6878      	ldr	r0, [r7, #4]
340084ca:	f7ff fead 	bl	34008228 <LL_RCC_GetClockSource>
340084ce:	4603      	mov	r3, r0
}
340084d0:	4618      	mov	r0, r3
340084d2:	3708      	adds	r7, #8
340084d4:	46bd      	mov	sp, r7
340084d6:	bd80      	pop	{r7, pc}

340084d8 <LL_RCC_GetUSARTClockSource>:
{
340084d8:	b580      	push	{r7, lr}
340084da:	b082      	sub	sp, #8
340084dc:	af00      	add	r7, sp, #0
340084de:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340084e0:	6878      	ldr	r0, [r7, #4]
340084e2:	f7ff fea1 	bl	34008228 <LL_RCC_GetClockSource>
340084e6:	4603      	mov	r3, r0
}
340084e8:	4618      	mov	r0, r3
340084ea:	3708      	adds	r7, #8
340084ec:	46bd      	mov	sp, r7
340084ee:	bd80      	pop	{r7, pc}

340084f0 <LL_RCC_GetUARTClockSource>:
{
340084f0:	b580      	push	{r7, lr}
340084f2:	b082      	sub	sp, #8
340084f4:	af00      	add	r7, sp, #0
340084f6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340084f8:	6878      	ldr	r0, [r7, #4]
340084fa:	f7ff fe95 	bl	34008228 <LL_RCC_GetClockSource>
340084fe:	4603      	mov	r3, r0
}
34008500:	4618      	mov	r0, r3
34008502:	3708      	adds	r7, #8
34008504:	46bd      	mov	sp, r7
34008506:	bd80      	pop	{r7, pc}

34008508 <LL_RCC_GetUSBClockSource>:
{
34008508:	b580      	push	{r7, lr}
3400850a:	b082      	sub	sp, #8
3400850c:	af00      	add	r7, sp, #0
3400850e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008510:	6878      	ldr	r0, [r7, #4]
34008512:	f7ff fe89 	bl	34008228 <LL_RCC_GetClockSource>
34008516:	4603      	mov	r3, r0
}
34008518:	4618      	mov	r0, r3
3400851a:	3708      	adds	r7, #8
3400851c:	46bd      	mov	sp, r7
3400851e:	bd80      	pop	{r7, pc}

34008520 <LL_RCC_GetXSPIClockSource>:
{
34008520:	b580      	push	{r7, lr}
34008522:	b082      	sub	sp, #8
34008524:	af00      	add	r7, sp, #0
34008526:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34008528:	6878      	ldr	r0, [r7, #4]
3400852a:	f7ff fe7d 	bl	34008228 <LL_RCC_GetClockSource>
3400852e:	4603      	mov	r3, r0
}
34008530:	4618      	mov	r0, r3
34008532:	3708      	adds	r7, #8
34008534:	46bd      	mov	sp, r7
34008536:	bd80      	pop	{r7, pc}

34008538 <LL_RCC_SetRTCClockSource>:
{
34008538:	b480      	push	{r7}
3400853a:	b083      	sub	sp, #12
3400853c:	af00      	add	r7, sp, #0
3400853e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34008540:	4b07      	ldr	r3, [pc, #28]	@ (34008560 <LL_RCC_SetRTCClockSource+0x28>)
34008542:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34008546:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
3400854a:	4905      	ldr	r1, [pc, #20]	@ (34008560 <LL_RCC_SetRTCClockSource+0x28>)
3400854c:	687b      	ldr	r3, [r7, #4]
3400854e:	4313      	orrs	r3, r2
34008550:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34008554:	bf00      	nop
34008556:	370c      	adds	r7, #12
34008558:	46bd      	mov	sp, r7
3400855a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400855e:	4770      	bx	lr
34008560:	56028000 	.word	0x56028000

34008564 <LL_RCC_GetRTCClockSource>:
{
34008564:	b480      	push	{r7}
34008566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34008568:	4b04      	ldr	r3, [pc, #16]	@ (3400857c <LL_RCC_GetRTCClockSource+0x18>)
3400856a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400856e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34008572:	4618      	mov	r0, r3
34008574:	46bd      	mov	sp, r7
34008576:	f85d 7b04 	ldr.w	r7, [sp], #4
3400857a:	4770      	bx	lr
3400857c:	56028000 	.word	0x56028000

34008580 <LL_RCC_SetRTC_HSEPrescaler>:
{
34008580:	b480      	push	{r7}
34008582:	b083      	sub	sp, #12
34008584:	af00      	add	r7, sp, #0
34008586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34008588:	4b07      	ldr	r3, [pc, #28]	@ (340085a8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3400858a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400858e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34008592:	4905      	ldr	r1, [pc, #20]	@ (340085a8 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34008594:	687b      	ldr	r3, [r7, #4]
34008596:	4313      	orrs	r3, r2
34008598:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3400859c:	bf00      	nop
3400859e:	370c      	adds	r7, #12
340085a0:	46bd      	mov	sp, r7
340085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340085a6:	4770      	bx	lr
340085a8:	56028000 	.word	0x56028000

340085ac <LL_RCC_SetTIMPrescaler>:
{
340085ac:	b480      	push	{r7}
340085ae:	b083      	sub	sp, #12
340085b0:	af00      	add	r7, sp, #0
340085b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
340085b4:	4b07      	ldr	r3, [pc, #28]	@ (340085d4 <LL_RCC_SetTIMPrescaler+0x28>)
340085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340085b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340085bc:	687b      	ldr	r3, [r7, #4]
340085be:	061b      	lsls	r3, r3, #24
340085c0:	4904      	ldr	r1, [pc, #16]	@ (340085d4 <LL_RCC_SetTIMPrescaler+0x28>)
340085c2:	4313      	orrs	r3, r2
340085c4:	624b      	str	r3, [r1, #36]	@ 0x24
}
340085c6:	bf00      	nop
340085c8:	370c      	adds	r7, #12
340085ca:	46bd      	mov	sp, r7
340085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340085d0:	4770      	bx	lr
340085d2:	bf00      	nop
340085d4:	56028000 	.word	0x56028000

340085d8 <LL_RCC_GetTIMPrescaler>:
{
340085d8:	b480      	push	{r7}
340085da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
340085dc:	4b04      	ldr	r3, [pc, #16]	@ (340085f0 <LL_RCC_GetTIMPrescaler+0x18>)
340085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340085e0:	0e1b      	lsrs	r3, r3, #24
340085e2:	f003 0303 	and.w	r3, r3, #3
}
340085e6:	4618      	mov	r0, r3
340085e8:	46bd      	mov	sp, r7
340085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340085ee:	4770      	bx	lr
340085f0:	56028000 	.word	0x56028000

340085f4 <LL_RCC_PLL1_GetSource>:
{
340085f4:	b480      	push	{r7}
340085f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340085f8:	4b04      	ldr	r3, [pc, #16]	@ (3400860c <LL_RCC_PLL1_GetSource+0x18>)
340085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340085fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008602:	4618      	mov	r0, r3
34008604:	46bd      	mov	sp, r7
34008606:	f85d 7b04 	ldr.w	r7, [sp], #4
3400860a:	4770      	bx	lr
3400860c:	56028000 	.word	0x56028000

34008610 <LL_RCC_PLL1_IsReady>:
{
34008610:	b480      	push	{r7}
34008612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34008614:	4b07      	ldr	r3, [pc, #28]	@ (34008634 <LL_RCC_PLL1_IsReady+0x24>)
34008616:	685b      	ldr	r3, [r3, #4]
34008618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400861c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008620:	d101      	bne.n	34008626 <LL_RCC_PLL1_IsReady+0x16>
34008622:	2301      	movs	r3, #1
34008624:	e000      	b.n	34008628 <LL_RCC_PLL1_IsReady+0x18>
34008626:	2300      	movs	r3, #0
}
34008628:	4618      	mov	r0, r3
3400862a:	46bd      	mov	sp, r7
3400862c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008630:	4770      	bx	lr
34008632:	bf00      	nop
34008634:	56028000 	.word	0x56028000

34008638 <LL_RCC_PLL1_IsEnabledBypass>:
{
34008638:	b480      	push	{r7}
3400863a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3400863c:	4b07      	ldr	r3, [pc, #28]	@ (3400865c <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3400863e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34008642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400864a:	d101      	bne.n	34008650 <LL_RCC_PLL1_IsEnabledBypass+0x18>
3400864c:	2301      	movs	r3, #1
3400864e:	e000      	b.n	34008652 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34008650:	2300      	movs	r3, #0
}
34008652:	4618      	mov	r0, r3
34008654:	46bd      	mov	sp, r7
34008656:	f85d 7b04 	ldr.w	r7, [sp], #4
3400865a:	4770      	bx	lr
3400865c:	56028000 	.word	0x56028000

34008660 <LL_RCC_PLL1_GetN>:
{
34008660:	b480      	push	{r7}
34008662:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34008664:	4b05      	ldr	r3, [pc, #20]	@ (3400867c <LL_RCC_PLL1_GetN+0x1c>)
34008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400866a:	0a1b      	lsrs	r3, r3, #8
3400866c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008670:	4618      	mov	r0, r3
34008672:	46bd      	mov	sp, r7
34008674:	f85d 7b04 	ldr.w	r7, [sp], #4
34008678:	4770      	bx	lr
3400867a:	bf00      	nop
3400867c:	56028000 	.word	0x56028000

34008680 <LL_RCC_PLL1_GetM>:
{
34008680:	b480      	push	{r7}
34008682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34008684:	4b05      	ldr	r3, [pc, #20]	@ (3400869c <LL_RCC_PLL1_GetM+0x1c>)
34008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400868a:	0d1b      	lsrs	r3, r3, #20
3400868c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008690:	4618      	mov	r0, r3
34008692:	46bd      	mov	sp, r7
34008694:	f85d 7b04 	ldr.w	r7, [sp], #4
34008698:	4770      	bx	lr
3400869a:	bf00      	nop
3400869c:	56028000 	.word	0x56028000

340086a0 <LL_RCC_PLL1_GetP1>:
{
340086a0:	b480      	push	{r7}
340086a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
340086a4:	4b05      	ldr	r3, [pc, #20]	@ (340086bc <LL_RCC_PLL1_GetP1+0x1c>)
340086a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
340086aa:	0edb      	lsrs	r3, r3, #27
340086ac:	f003 0307 	and.w	r3, r3, #7
}
340086b0:	4618      	mov	r0, r3
340086b2:	46bd      	mov	sp, r7
340086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
340086b8:	4770      	bx	lr
340086ba:	bf00      	nop
340086bc:	56028000 	.word	0x56028000

340086c0 <LL_RCC_PLL1_GetP2>:
{
340086c0:	b480      	push	{r7}
340086c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
340086c4:	4b05      	ldr	r3, [pc, #20]	@ (340086dc <LL_RCC_PLL1_GetP2+0x1c>)
340086c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
340086ca:	0e1b      	lsrs	r3, r3, #24
340086cc:	f003 0307 	and.w	r3, r3, #7
}
340086d0:	4618      	mov	r0, r3
340086d2:	46bd      	mov	sp, r7
340086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340086d8:	4770      	bx	lr
340086da:	bf00      	nop
340086dc:	56028000 	.word	0x56028000

340086e0 <LL_RCC_PLL1P_IsEnabled>:
{
340086e0:	b480      	push	{r7}
340086e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
340086e4:	4b07      	ldr	r3, [pc, #28]	@ (34008704 <LL_RCC_PLL1P_IsEnabled+0x24>)
340086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
340086ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
340086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340086f2:	d101      	bne.n	340086f8 <LL_RCC_PLL1P_IsEnabled+0x18>
340086f4:	2301      	movs	r3, #1
340086f6:	e000      	b.n	340086fa <LL_RCC_PLL1P_IsEnabled+0x1a>
340086f8:	2300      	movs	r3, #0
}
340086fa:	4618      	mov	r0, r3
340086fc:	46bd      	mov	sp, r7
340086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34008702:	4770      	bx	lr
34008704:	56028000 	.word	0x56028000

34008708 <LL_RCC_PLL1_GetFRACN>:
{
34008708:	b480      	push	{r7}
3400870a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3400870c:	4b04      	ldr	r3, [pc, #16]	@ (34008720 <LL_RCC_PLL1_GetFRACN+0x18>)
3400870e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34008712:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008716:	4618      	mov	r0, r3
34008718:	46bd      	mov	sp, r7
3400871a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400871e:	4770      	bx	lr
34008720:	56028000 	.word	0x56028000

34008724 <LL_RCC_PLL2_GetSource>:
{
34008724:	b480      	push	{r7}
34008726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34008728:	4b04      	ldr	r3, [pc, #16]	@ (3400873c <LL_RCC_PLL2_GetSource+0x18>)
3400872a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400872e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008732:	4618      	mov	r0, r3
34008734:	46bd      	mov	sp, r7
34008736:	f85d 7b04 	ldr.w	r7, [sp], #4
3400873a:	4770      	bx	lr
3400873c:	56028000 	.word	0x56028000

34008740 <LL_RCC_PLL2_IsReady>:
{
34008740:	b480      	push	{r7}
34008742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34008744:	4b07      	ldr	r3, [pc, #28]	@ (34008764 <LL_RCC_PLL2_IsReady+0x24>)
34008746:	685b      	ldr	r3, [r3, #4]
34008748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400874c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008750:	d101      	bne.n	34008756 <LL_RCC_PLL2_IsReady+0x16>
34008752:	2301      	movs	r3, #1
34008754:	e000      	b.n	34008758 <LL_RCC_PLL2_IsReady+0x18>
34008756:	2300      	movs	r3, #0
}
34008758:	4618      	mov	r0, r3
3400875a:	46bd      	mov	sp, r7
3400875c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008760:	4770      	bx	lr
34008762:	bf00      	nop
34008764:	56028000 	.word	0x56028000

34008768 <LL_RCC_PLL2_IsEnabledBypass>:
{
34008768:	b480      	push	{r7}
3400876a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3400876c:	4b07      	ldr	r3, [pc, #28]	@ (3400878c <LL_RCC_PLL2_IsEnabledBypass+0x24>)
3400876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34008772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34008776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3400877a:	d101      	bne.n	34008780 <LL_RCC_PLL2_IsEnabledBypass+0x18>
3400877c:	2301      	movs	r3, #1
3400877e:	e000      	b.n	34008782 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34008780:	2300      	movs	r3, #0
}
34008782:	4618      	mov	r0, r3
34008784:	46bd      	mov	sp, r7
34008786:	f85d 7b04 	ldr.w	r7, [sp], #4
3400878a:	4770      	bx	lr
3400878c:	56028000 	.word	0x56028000

34008790 <LL_RCC_PLL2_GetN>:
{
34008790:	b480      	push	{r7}
34008792:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34008794:	4b05      	ldr	r3, [pc, #20]	@ (340087ac <LL_RCC_PLL2_GetN+0x1c>)
34008796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400879a:	0a1b      	lsrs	r3, r3, #8
3400879c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
340087a0:	4618      	mov	r0, r3
340087a2:	46bd      	mov	sp, r7
340087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
340087a8:	4770      	bx	lr
340087aa:	bf00      	nop
340087ac:	56028000 	.word	0x56028000

340087b0 <LL_RCC_PLL2_GetM>:
{
340087b0:	b480      	push	{r7}
340087b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340087b4:	4b05      	ldr	r3, [pc, #20]	@ (340087cc <LL_RCC_PLL2_GetM+0x1c>)
340087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340087ba:	0d1b      	lsrs	r3, r3, #20
340087bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
340087c0:	4618      	mov	r0, r3
340087c2:	46bd      	mov	sp, r7
340087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
340087c8:	4770      	bx	lr
340087ca:	bf00      	nop
340087cc:	56028000 	.word	0x56028000

340087d0 <LL_RCC_PLL2_GetP1>:
{
340087d0:	b480      	push	{r7}
340087d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340087d4:	4b05      	ldr	r3, [pc, #20]	@ (340087ec <LL_RCC_PLL2_GetP1+0x1c>)
340087d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
340087da:	0edb      	lsrs	r3, r3, #27
340087dc:	f003 0307 	and.w	r3, r3, #7
}
340087e0:	4618      	mov	r0, r3
340087e2:	46bd      	mov	sp, r7
340087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
340087e8:	4770      	bx	lr
340087ea:	bf00      	nop
340087ec:	56028000 	.word	0x56028000

340087f0 <LL_RCC_PLL2_GetP2>:
{
340087f0:	b480      	push	{r7}
340087f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340087f4:	4b05      	ldr	r3, [pc, #20]	@ (3400880c <LL_RCC_PLL2_GetP2+0x1c>)
340087f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
340087fa:	0e1b      	lsrs	r3, r3, #24
340087fc:	f003 0307 	and.w	r3, r3, #7
}
34008800:	4618      	mov	r0, r3
34008802:	46bd      	mov	sp, r7
34008804:	f85d 7b04 	ldr.w	r7, [sp], #4
34008808:	4770      	bx	lr
3400880a:	bf00      	nop
3400880c:	56028000 	.word	0x56028000

34008810 <LL_RCC_PLL2P_IsEnabled>:
{
34008810:	b480      	push	{r7}
34008812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34008814:	4b07      	ldr	r3, [pc, #28]	@ (34008834 <LL_RCC_PLL2P_IsEnabled+0x24>)
34008816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400881a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008822:	d101      	bne.n	34008828 <LL_RCC_PLL2P_IsEnabled+0x18>
34008824:	2301      	movs	r3, #1
34008826:	e000      	b.n	3400882a <LL_RCC_PLL2P_IsEnabled+0x1a>
34008828:	2300      	movs	r3, #0
}
3400882a:	4618      	mov	r0, r3
3400882c:	46bd      	mov	sp, r7
3400882e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008832:	4770      	bx	lr
34008834:	56028000 	.word	0x56028000

34008838 <LL_RCC_PLL2_GetFRACN>:
{
34008838:	b480      	push	{r7}
3400883a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3400883c:	4b04      	ldr	r3, [pc, #16]	@ (34008850 <LL_RCC_PLL2_GetFRACN+0x18>)
3400883e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34008842:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008846:	4618      	mov	r0, r3
34008848:	46bd      	mov	sp, r7
3400884a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400884e:	4770      	bx	lr
34008850:	56028000 	.word	0x56028000

34008854 <LL_RCC_PLL3_GetSource>:
{
34008854:	b480      	push	{r7}
34008856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34008858:	4b04      	ldr	r3, [pc, #16]	@ (3400886c <LL_RCC_PLL3_GetSource+0x18>)
3400885a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400885e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008862:	4618      	mov	r0, r3
34008864:	46bd      	mov	sp, r7
34008866:	f85d 7b04 	ldr.w	r7, [sp], #4
3400886a:	4770      	bx	lr
3400886c:	56028000 	.word	0x56028000

34008870 <LL_RCC_PLL3_IsReady>:
{
34008870:	b480      	push	{r7}
34008872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34008874:	4b07      	ldr	r3, [pc, #28]	@ (34008894 <LL_RCC_PLL3_IsReady+0x24>)
34008876:	685b      	ldr	r3, [r3, #4]
34008878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400887c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34008880:	d101      	bne.n	34008886 <LL_RCC_PLL3_IsReady+0x16>
34008882:	2301      	movs	r3, #1
34008884:	e000      	b.n	34008888 <LL_RCC_PLL3_IsReady+0x18>
34008886:	2300      	movs	r3, #0
}
34008888:	4618      	mov	r0, r3
3400888a:	46bd      	mov	sp, r7
3400888c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008890:	4770      	bx	lr
34008892:	bf00      	nop
34008894:	56028000 	.word	0x56028000

34008898 <LL_RCC_PLL3_IsEnabledBypass>:
{
34008898:	b480      	push	{r7}
3400889a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3400889c:	4b07      	ldr	r3, [pc, #28]	@ (340088bc <LL_RCC_PLL3_IsEnabledBypass+0x24>)
3400889e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340088a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340088a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340088aa:	d101      	bne.n	340088b0 <LL_RCC_PLL3_IsEnabledBypass+0x18>
340088ac:	2301      	movs	r3, #1
340088ae:	e000      	b.n	340088b2 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
340088b0:	2300      	movs	r3, #0
}
340088b2:	4618      	mov	r0, r3
340088b4:	46bd      	mov	sp, r7
340088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
340088ba:	4770      	bx	lr
340088bc:	56028000 	.word	0x56028000

340088c0 <LL_RCC_PLL3_GetN>:
{
340088c0:	b480      	push	{r7}
340088c2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
340088c4:	4b05      	ldr	r3, [pc, #20]	@ (340088dc <LL_RCC_PLL3_GetN+0x1c>)
340088c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340088ca:	0a1b      	lsrs	r3, r3, #8
340088cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
340088d0:	4618      	mov	r0, r3
340088d2:	46bd      	mov	sp, r7
340088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340088d8:	4770      	bx	lr
340088da:	bf00      	nop
340088dc:	56028000 	.word	0x56028000

340088e0 <LL_RCC_PLL3_GetM>:
{
340088e0:	b480      	push	{r7}
340088e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
340088e4:	4b05      	ldr	r3, [pc, #20]	@ (340088fc <LL_RCC_PLL3_GetM+0x1c>)
340088e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340088ea:	0d1b      	lsrs	r3, r3, #20
340088ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
340088f0:	4618      	mov	r0, r3
340088f2:	46bd      	mov	sp, r7
340088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340088f8:	4770      	bx	lr
340088fa:	bf00      	nop
340088fc:	56028000 	.word	0x56028000

34008900 <LL_RCC_PLL3_GetP1>:
{
34008900:	b480      	push	{r7}
34008902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34008904:	4b05      	ldr	r3, [pc, #20]	@ (3400891c <LL_RCC_PLL3_GetP1+0x1c>)
34008906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400890a:	0edb      	lsrs	r3, r3, #27
3400890c:	f003 0307 	and.w	r3, r3, #7
}
34008910:	4618      	mov	r0, r3
34008912:	46bd      	mov	sp, r7
34008914:	f85d 7b04 	ldr.w	r7, [sp], #4
34008918:	4770      	bx	lr
3400891a:	bf00      	nop
3400891c:	56028000 	.word	0x56028000

34008920 <LL_RCC_PLL3_GetP2>:
{
34008920:	b480      	push	{r7}
34008922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34008924:	4b05      	ldr	r3, [pc, #20]	@ (3400893c <LL_RCC_PLL3_GetP2+0x1c>)
34008926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400892a:	0e1b      	lsrs	r3, r3, #24
3400892c:	f003 0307 	and.w	r3, r3, #7
}
34008930:	4618      	mov	r0, r3
34008932:	46bd      	mov	sp, r7
34008934:	f85d 7b04 	ldr.w	r7, [sp], #4
34008938:	4770      	bx	lr
3400893a:	bf00      	nop
3400893c:	56028000 	.word	0x56028000

34008940 <LL_RCC_PLL3P_IsEnabled>:
{
34008940:	b480      	push	{r7}
34008942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34008944:	4b07      	ldr	r3, [pc, #28]	@ (34008964 <LL_RCC_PLL3P_IsEnabled+0x24>)
34008946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400894a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
3400894e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008952:	d101      	bne.n	34008958 <LL_RCC_PLL3P_IsEnabled+0x18>
34008954:	2301      	movs	r3, #1
34008956:	e000      	b.n	3400895a <LL_RCC_PLL3P_IsEnabled+0x1a>
34008958:	2300      	movs	r3, #0
}
3400895a:	4618      	mov	r0, r3
3400895c:	46bd      	mov	sp, r7
3400895e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008962:	4770      	bx	lr
34008964:	56028000 	.word	0x56028000

34008968 <LL_RCC_PLL3_GetFRACN>:
{
34008968:	b480      	push	{r7}
3400896a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3400896c:	4b04      	ldr	r3, [pc, #16]	@ (34008980 <LL_RCC_PLL3_GetFRACN+0x18>)
3400896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34008972:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008976:	4618      	mov	r0, r3
34008978:	46bd      	mov	sp, r7
3400897a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400897e:	4770      	bx	lr
34008980:	56028000 	.word	0x56028000

34008984 <LL_RCC_PLL4_GetSource>:
{
34008984:	b480      	push	{r7}
34008986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34008988:	4b04      	ldr	r3, [pc, #16]	@ (3400899c <LL_RCC_PLL4_GetSource+0x18>)
3400898a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400898e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34008992:	4618      	mov	r0, r3
34008994:	46bd      	mov	sp, r7
34008996:	f85d 7b04 	ldr.w	r7, [sp], #4
3400899a:	4770      	bx	lr
3400899c:	56028000 	.word	0x56028000

340089a0 <LL_RCC_PLL4_IsReady>:
{
340089a0:	b480      	push	{r7}
340089a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340089a4:	4b07      	ldr	r3, [pc, #28]	@ (340089c4 <LL_RCC_PLL4_IsReady+0x24>)
340089a6:	685b      	ldr	r3, [r3, #4]
340089a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
340089ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340089b0:	d101      	bne.n	340089b6 <LL_RCC_PLL4_IsReady+0x16>
340089b2:	2301      	movs	r3, #1
340089b4:	e000      	b.n	340089b8 <LL_RCC_PLL4_IsReady+0x18>
340089b6:	2300      	movs	r3, #0
}
340089b8:	4618      	mov	r0, r3
340089ba:	46bd      	mov	sp, r7
340089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
340089c0:	4770      	bx	lr
340089c2:	bf00      	nop
340089c4:	56028000 	.word	0x56028000

340089c8 <LL_RCC_PLL4_IsEnabledBypass>:
{
340089c8:	b480      	push	{r7}
340089ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340089cc:	4b07      	ldr	r3, [pc, #28]	@ (340089ec <LL_RCC_PLL4_IsEnabledBypass+0x24>)
340089ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340089d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340089d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340089da:	d101      	bne.n	340089e0 <LL_RCC_PLL4_IsEnabledBypass+0x18>
340089dc:	2301      	movs	r3, #1
340089de:	e000      	b.n	340089e2 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
340089e0:	2300      	movs	r3, #0
}
340089e2:	4618      	mov	r0, r3
340089e4:	46bd      	mov	sp, r7
340089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340089ea:	4770      	bx	lr
340089ec:	56028000 	.word	0x56028000

340089f0 <LL_RCC_PLL4_GetN>:
{
340089f0:	b480      	push	{r7}
340089f2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340089f4:	4b05      	ldr	r3, [pc, #20]	@ (34008a0c <LL_RCC_PLL4_GetN+0x1c>)
340089f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340089fa:	0a1b      	lsrs	r3, r3, #8
340089fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34008a00:	4618      	mov	r0, r3
34008a02:	46bd      	mov	sp, r7
34008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a08:	4770      	bx	lr
34008a0a:	bf00      	nop
34008a0c:	56028000 	.word	0x56028000

34008a10 <LL_RCC_PLL4_GetM>:
{
34008a10:	b480      	push	{r7}
34008a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34008a14:	4b05      	ldr	r3, [pc, #20]	@ (34008a2c <LL_RCC_PLL4_GetM+0x1c>)
34008a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34008a1a:	0d1b      	lsrs	r3, r3, #20
34008a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34008a20:	4618      	mov	r0, r3
34008a22:	46bd      	mov	sp, r7
34008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a28:	4770      	bx	lr
34008a2a:	bf00      	nop
34008a2c:	56028000 	.word	0x56028000

34008a30 <LL_RCC_PLL4_GetP1>:
{
34008a30:	b480      	push	{r7}
34008a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34008a34:	4b05      	ldr	r3, [pc, #20]	@ (34008a4c <LL_RCC_PLL4_GetP1+0x1c>)
34008a36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008a3a:	0edb      	lsrs	r3, r3, #27
34008a3c:	f003 0307 	and.w	r3, r3, #7
}
34008a40:	4618      	mov	r0, r3
34008a42:	46bd      	mov	sp, r7
34008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a48:	4770      	bx	lr
34008a4a:	bf00      	nop
34008a4c:	56028000 	.word	0x56028000

34008a50 <LL_RCC_PLL4_GetP2>:
{
34008a50:	b480      	push	{r7}
34008a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34008a54:	4b05      	ldr	r3, [pc, #20]	@ (34008a6c <LL_RCC_PLL4_GetP2+0x1c>)
34008a56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008a5a:	0e1b      	lsrs	r3, r3, #24
34008a5c:	f003 0307 	and.w	r3, r3, #7
}
34008a60:	4618      	mov	r0, r3
34008a62:	46bd      	mov	sp, r7
34008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a68:	4770      	bx	lr
34008a6a:	bf00      	nop
34008a6c:	56028000 	.word	0x56028000

34008a70 <LL_RCC_PLL4P_IsEnabled>:
{
34008a70:	b480      	push	{r7}
34008a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34008a74:	4b07      	ldr	r3, [pc, #28]	@ (34008a94 <LL_RCC_PLL4P_IsEnabled+0x24>)
34008a76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34008a7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34008a82:	d101      	bne.n	34008a88 <LL_RCC_PLL4P_IsEnabled+0x18>
34008a84:	2301      	movs	r3, #1
34008a86:	e000      	b.n	34008a8a <LL_RCC_PLL4P_IsEnabled+0x1a>
34008a88:	2300      	movs	r3, #0
}
34008a8a:	4618      	mov	r0, r3
34008a8c:	46bd      	mov	sp, r7
34008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008a92:	4770      	bx	lr
34008a94:	56028000 	.word	0x56028000

34008a98 <LL_RCC_PLL4_GetFRACN>:
{
34008a98:	b480      	push	{r7}
34008a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34008a9c:	4b04      	ldr	r3, [pc, #16]	@ (34008ab0 <LL_RCC_PLL4_GetFRACN+0x18>)
34008a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34008aa2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34008aa6:	4618      	mov	r0, r3
34008aa8:	46bd      	mov	sp, r7
34008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
34008aae:	4770      	bx	lr
34008ab0:	56028000 	.word	0x56028000

34008ab4 <LL_RCC_IC3_Enable>:
{
34008ab4:	b480      	push	{r7}
34008ab6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34008ab8:	4b04      	ldr	r3, [pc, #16]	@ (34008acc <LL_RCC_IC3_Enable+0x18>)
34008aba:	2204      	movs	r2, #4
34008abc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008ac0:	bf00      	nop
34008ac2:	46bd      	mov	sp, r7
34008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ac8:	4770      	bx	lr
34008aca:	bf00      	nop
34008acc:	56028000 	.word	0x56028000

34008ad0 <LL_RCC_IC3_IsEnabled>:
{
34008ad0:	b480      	push	{r7}
34008ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34008ad4:	4b07      	ldr	r3, [pc, #28]	@ (34008af4 <LL_RCC_IC3_IsEnabled+0x24>)
34008ad6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008ada:	f003 0304 	and.w	r3, r3, #4
34008ade:	2b04      	cmp	r3, #4
34008ae0:	d101      	bne.n	34008ae6 <LL_RCC_IC3_IsEnabled+0x16>
34008ae2:	2301      	movs	r3, #1
34008ae4:	e000      	b.n	34008ae8 <LL_RCC_IC3_IsEnabled+0x18>
34008ae6:	2300      	movs	r3, #0
}
34008ae8:	4618      	mov	r0, r3
34008aea:	46bd      	mov	sp, r7
34008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
34008af0:	4770      	bx	lr
34008af2:	bf00      	nop
34008af4:	56028000 	.word	0x56028000

34008af8 <LL_RCC_IC3_GetSource>:
{
34008af8:	b480      	push	{r7}
34008afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34008afc:	4b04      	ldr	r3, [pc, #16]	@ (34008b10 <LL_RCC_IC3_GetSource+0x18>)
34008afe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34008b02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008b06:	4618      	mov	r0, r3
34008b08:	46bd      	mov	sp, r7
34008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b0e:	4770      	bx	lr
34008b10:	56028000 	.word	0x56028000

34008b14 <LL_RCC_IC3_GetDivider>:
{
34008b14:	b480      	push	{r7}
34008b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34008b18:	4b05      	ldr	r3, [pc, #20]	@ (34008b30 <LL_RCC_IC3_GetDivider+0x1c>)
34008b1a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34008b1e:	0c1b      	lsrs	r3, r3, #16
34008b20:	b2db      	uxtb	r3, r3
34008b22:	3301      	adds	r3, #1
}
34008b24:	4618      	mov	r0, r3
34008b26:	46bd      	mov	sp, r7
34008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b2c:	4770      	bx	lr
34008b2e:	bf00      	nop
34008b30:	56028000 	.word	0x56028000

34008b34 <LL_RCC_IC4_Enable>:
{
34008b34:	b480      	push	{r7}
34008b36:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34008b38:	4b04      	ldr	r3, [pc, #16]	@ (34008b4c <LL_RCC_IC4_Enable+0x18>)
34008b3a:	2208      	movs	r2, #8
34008b3c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008b40:	bf00      	nop
34008b42:	46bd      	mov	sp, r7
34008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b48:	4770      	bx	lr
34008b4a:	bf00      	nop
34008b4c:	56028000 	.word	0x56028000

34008b50 <LL_RCC_IC4_IsEnabled>:
{
34008b50:	b480      	push	{r7}
34008b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34008b54:	4b07      	ldr	r3, [pc, #28]	@ (34008b74 <LL_RCC_IC4_IsEnabled+0x24>)
34008b56:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008b5a:	f003 0308 	and.w	r3, r3, #8
34008b5e:	2b08      	cmp	r3, #8
34008b60:	d101      	bne.n	34008b66 <LL_RCC_IC4_IsEnabled+0x16>
34008b62:	2301      	movs	r3, #1
34008b64:	e000      	b.n	34008b68 <LL_RCC_IC4_IsEnabled+0x18>
34008b66:	2300      	movs	r3, #0
}
34008b68:	4618      	mov	r0, r3
34008b6a:	46bd      	mov	sp, r7
34008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b70:	4770      	bx	lr
34008b72:	bf00      	nop
34008b74:	56028000 	.word	0x56028000

34008b78 <LL_RCC_IC4_GetSource>:
{
34008b78:	b480      	push	{r7}
34008b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34008b7c:	4b04      	ldr	r3, [pc, #16]	@ (34008b90 <LL_RCC_IC4_GetSource+0x18>)
34008b7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34008b82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008b86:	4618      	mov	r0, r3
34008b88:	46bd      	mov	sp, r7
34008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008b8e:	4770      	bx	lr
34008b90:	56028000 	.word	0x56028000

34008b94 <LL_RCC_IC4_GetDivider>:
{
34008b94:	b480      	push	{r7}
34008b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34008b98:	4b05      	ldr	r3, [pc, #20]	@ (34008bb0 <LL_RCC_IC4_GetDivider+0x1c>)
34008b9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34008b9e:	0c1b      	lsrs	r3, r3, #16
34008ba0:	b2db      	uxtb	r3, r3
34008ba2:	3301      	adds	r3, #1
}
34008ba4:	4618      	mov	r0, r3
34008ba6:	46bd      	mov	sp, r7
34008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bac:	4770      	bx	lr
34008bae:	bf00      	nop
34008bb0:	56028000 	.word	0x56028000

34008bb4 <LL_RCC_IC5_Enable>:
{
34008bb4:	b480      	push	{r7}
34008bb6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34008bb8:	4b04      	ldr	r3, [pc, #16]	@ (34008bcc <LL_RCC_IC5_Enable+0x18>)
34008bba:	2210      	movs	r2, #16
34008bbc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008bc0:	bf00      	nop
34008bc2:	46bd      	mov	sp, r7
34008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bc8:	4770      	bx	lr
34008bca:	bf00      	nop
34008bcc:	56028000 	.word	0x56028000

34008bd0 <LL_RCC_IC5_IsEnabled>:
{
34008bd0:	b480      	push	{r7}
34008bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34008bd4:	4b07      	ldr	r3, [pc, #28]	@ (34008bf4 <LL_RCC_IC5_IsEnabled+0x24>)
34008bd6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008bda:	f003 0310 	and.w	r3, r3, #16
34008bde:	2b10      	cmp	r3, #16
34008be0:	d101      	bne.n	34008be6 <LL_RCC_IC5_IsEnabled+0x16>
34008be2:	2301      	movs	r3, #1
34008be4:	e000      	b.n	34008be8 <LL_RCC_IC5_IsEnabled+0x18>
34008be6:	2300      	movs	r3, #0
}
34008be8:	4618      	mov	r0, r3
34008bea:	46bd      	mov	sp, r7
34008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
34008bf0:	4770      	bx	lr
34008bf2:	bf00      	nop
34008bf4:	56028000 	.word	0x56028000

34008bf8 <LL_RCC_IC5_GetSource>:
{
34008bf8:	b480      	push	{r7}
34008bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34008bfc:	4b04      	ldr	r3, [pc, #16]	@ (34008c10 <LL_RCC_IC5_GetSource+0x18>)
34008bfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34008c02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008c06:	4618      	mov	r0, r3
34008c08:	46bd      	mov	sp, r7
34008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c0e:	4770      	bx	lr
34008c10:	56028000 	.word	0x56028000

34008c14 <LL_RCC_IC5_GetDivider>:
{
34008c14:	b480      	push	{r7}
34008c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34008c18:	4b05      	ldr	r3, [pc, #20]	@ (34008c30 <LL_RCC_IC5_GetDivider+0x1c>)
34008c1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34008c1e:	0c1b      	lsrs	r3, r3, #16
34008c20:	b2db      	uxtb	r3, r3
34008c22:	3301      	adds	r3, #1
}
34008c24:	4618      	mov	r0, r3
34008c26:	46bd      	mov	sp, r7
34008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c2c:	4770      	bx	lr
34008c2e:	bf00      	nop
34008c30:	56028000 	.word	0x56028000

34008c34 <LL_RCC_IC7_Enable>:
{
34008c34:	b480      	push	{r7}
34008c36:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34008c38:	4b04      	ldr	r3, [pc, #16]	@ (34008c4c <LL_RCC_IC7_Enable+0x18>)
34008c3a:	2240      	movs	r2, #64	@ 0x40
34008c3c:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008c40:	bf00      	nop
34008c42:	46bd      	mov	sp, r7
34008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c48:	4770      	bx	lr
34008c4a:	bf00      	nop
34008c4c:	56028000 	.word	0x56028000

34008c50 <LL_RCC_IC7_IsEnabled>:
{
34008c50:	b480      	push	{r7}
34008c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34008c54:	4b07      	ldr	r3, [pc, #28]	@ (34008c74 <LL_RCC_IC7_IsEnabled+0x24>)
34008c56:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34008c5e:	2b40      	cmp	r3, #64	@ 0x40
34008c60:	d101      	bne.n	34008c66 <LL_RCC_IC7_IsEnabled+0x16>
34008c62:	2301      	movs	r3, #1
34008c64:	e000      	b.n	34008c68 <LL_RCC_IC7_IsEnabled+0x18>
34008c66:	2300      	movs	r3, #0
}
34008c68:	4618      	mov	r0, r3
34008c6a:	46bd      	mov	sp, r7
34008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c70:	4770      	bx	lr
34008c72:	bf00      	nop
34008c74:	56028000 	.word	0x56028000

34008c78 <LL_RCC_IC7_GetSource>:
{
34008c78:	b480      	push	{r7}
34008c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34008c7c:	4b04      	ldr	r3, [pc, #16]	@ (34008c90 <LL_RCC_IC7_GetSource+0x18>)
34008c7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34008c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008c86:	4618      	mov	r0, r3
34008c88:	46bd      	mov	sp, r7
34008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008c8e:	4770      	bx	lr
34008c90:	56028000 	.word	0x56028000

34008c94 <LL_RCC_IC7_GetDivider>:
{
34008c94:	b480      	push	{r7}
34008c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34008c98:	4b05      	ldr	r3, [pc, #20]	@ (34008cb0 <LL_RCC_IC7_GetDivider+0x1c>)
34008c9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34008c9e:	0c1b      	lsrs	r3, r3, #16
34008ca0:	b2db      	uxtb	r3, r3
34008ca2:	3301      	adds	r3, #1
}
34008ca4:	4618      	mov	r0, r3
34008ca6:	46bd      	mov	sp, r7
34008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cac:	4770      	bx	lr
34008cae:	bf00      	nop
34008cb0:	56028000 	.word	0x56028000

34008cb4 <LL_RCC_IC8_Enable>:
{
34008cb4:	b480      	push	{r7}
34008cb6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34008cb8:	4b04      	ldr	r3, [pc, #16]	@ (34008ccc <LL_RCC_IC8_Enable+0x18>)
34008cba:	2280      	movs	r2, #128	@ 0x80
34008cbc:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008cc0:	bf00      	nop
34008cc2:	46bd      	mov	sp, r7
34008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cc8:	4770      	bx	lr
34008cca:	bf00      	nop
34008ccc:	56028000 	.word	0x56028000

34008cd0 <LL_RCC_IC8_IsEnabled>:
{
34008cd0:	b480      	push	{r7}
34008cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34008cd4:	4b07      	ldr	r3, [pc, #28]	@ (34008cf4 <LL_RCC_IC8_IsEnabled+0x24>)
34008cd6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34008cde:	2b80      	cmp	r3, #128	@ 0x80
34008ce0:	d101      	bne.n	34008ce6 <LL_RCC_IC8_IsEnabled+0x16>
34008ce2:	2301      	movs	r3, #1
34008ce4:	e000      	b.n	34008ce8 <LL_RCC_IC8_IsEnabled+0x18>
34008ce6:	2300      	movs	r3, #0
}
34008ce8:	4618      	mov	r0, r3
34008cea:	46bd      	mov	sp, r7
34008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
34008cf0:	4770      	bx	lr
34008cf2:	bf00      	nop
34008cf4:	56028000 	.word	0x56028000

34008cf8 <LL_RCC_IC8_GetSource>:
{
34008cf8:	b480      	push	{r7}
34008cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34008cfc:	4b04      	ldr	r3, [pc, #16]	@ (34008d10 <LL_RCC_IC8_GetSource+0x18>)
34008cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34008d02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008d06:	4618      	mov	r0, r3
34008d08:	46bd      	mov	sp, r7
34008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d0e:	4770      	bx	lr
34008d10:	56028000 	.word	0x56028000

34008d14 <LL_RCC_IC8_GetDivider>:
{
34008d14:	b480      	push	{r7}
34008d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34008d18:	4b05      	ldr	r3, [pc, #20]	@ (34008d30 <LL_RCC_IC8_GetDivider+0x1c>)
34008d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34008d1e:	0c1b      	lsrs	r3, r3, #16
34008d20:	b2db      	uxtb	r3, r3
34008d22:	3301      	adds	r3, #1
}
34008d24:	4618      	mov	r0, r3
34008d26:	46bd      	mov	sp, r7
34008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d2c:	4770      	bx	lr
34008d2e:	bf00      	nop
34008d30:	56028000 	.word	0x56028000

34008d34 <LL_RCC_IC9_Enable>:
{
34008d34:	b480      	push	{r7}
34008d36:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34008d38:	4b04      	ldr	r3, [pc, #16]	@ (34008d4c <LL_RCC_IC9_Enable+0x18>)
34008d3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
34008d3e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008d42:	bf00      	nop
34008d44:	46bd      	mov	sp, r7
34008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d4a:	4770      	bx	lr
34008d4c:	56028000 	.word	0x56028000

34008d50 <LL_RCC_IC9_IsEnabled>:
{
34008d50:	b480      	push	{r7}
34008d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34008d54:	4b07      	ldr	r3, [pc, #28]	@ (34008d74 <LL_RCC_IC9_IsEnabled+0x24>)
34008d56:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34008d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34008d62:	d101      	bne.n	34008d68 <LL_RCC_IC9_IsEnabled+0x18>
34008d64:	2301      	movs	r3, #1
34008d66:	e000      	b.n	34008d6a <LL_RCC_IC9_IsEnabled+0x1a>
34008d68:	2300      	movs	r3, #0
}
34008d6a:	4618      	mov	r0, r3
34008d6c:	46bd      	mov	sp, r7
34008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d72:	4770      	bx	lr
34008d74:	56028000 	.word	0x56028000

34008d78 <LL_RCC_IC9_GetSource>:
{
34008d78:	b480      	push	{r7}
34008d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34008d7c:	4b04      	ldr	r3, [pc, #16]	@ (34008d90 <LL_RCC_IC9_GetSource+0x18>)
34008d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008d86:	4618      	mov	r0, r3
34008d88:	46bd      	mov	sp, r7
34008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008d8e:	4770      	bx	lr
34008d90:	56028000 	.word	0x56028000

34008d94 <LL_RCC_IC9_GetDivider>:
{
34008d94:	b480      	push	{r7}
34008d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34008d98:	4b05      	ldr	r3, [pc, #20]	@ (34008db0 <LL_RCC_IC9_GetDivider+0x1c>)
34008d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34008d9e:	0c1b      	lsrs	r3, r3, #16
34008da0:	b2db      	uxtb	r3, r3
34008da2:	3301      	adds	r3, #1
}
34008da4:	4618      	mov	r0, r3
34008da6:	46bd      	mov	sp, r7
34008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dac:	4770      	bx	lr
34008dae:	bf00      	nop
34008db0:	56028000 	.word	0x56028000

34008db4 <LL_RCC_IC10_Enable>:
{
34008db4:	b480      	push	{r7}
34008db6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34008db8:	4b04      	ldr	r3, [pc, #16]	@ (34008dcc <LL_RCC_IC10_Enable+0x18>)
34008dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
34008dbe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008dc2:	bf00      	nop
34008dc4:	46bd      	mov	sp, r7
34008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008dca:	4770      	bx	lr
34008dcc:	56028000 	.word	0x56028000

34008dd0 <LL_RCC_IC10_IsEnabled>:
{
34008dd0:	b480      	push	{r7}
34008dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34008dd4:	4b07      	ldr	r3, [pc, #28]	@ (34008df4 <LL_RCC_IC10_IsEnabled+0x24>)
34008dd6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34008dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34008de2:	d101      	bne.n	34008de8 <LL_RCC_IC10_IsEnabled+0x18>
34008de4:	2301      	movs	r3, #1
34008de6:	e000      	b.n	34008dea <LL_RCC_IC10_IsEnabled+0x1a>
34008de8:	2300      	movs	r3, #0
}
34008dea:	4618      	mov	r0, r3
34008dec:	46bd      	mov	sp, r7
34008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
34008df2:	4770      	bx	lr
34008df4:	56028000 	.word	0x56028000

34008df8 <LL_RCC_IC10_GetSource>:
{
34008df8:	b480      	push	{r7}
34008dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34008dfc:	4b04      	ldr	r3, [pc, #16]	@ (34008e10 <LL_RCC_IC10_GetSource+0x18>)
34008dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34008e02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008e06:	4618      	mov	r0, r3
34008e08:	46bd      	mov	sp, r7
34008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e0e:	4770      	bx	lr
34008e10:	56028000 	.word	0x56028000

34008e14 <LL_RCC_IC10_GetDivider>:
{
34008e14:	b480      	push	{r7}
34008e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34008e18:	4b05      	ldr	r3, [pc, #20]	@ (34008e30 <LL_RCC_IC10_GetDivider+0x1c>)
34008e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34008e1e:	0c1b      	lsrs	r3, r3, #16
34008e20:	b2db      	uxtb	r3, r3
34008e22:	3301      	adds	r3, #1
}
34008e24:	4618      	mov	r0, r3
34008e26:	46bd      	mov	sp, r7
34008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e2c:	4770      	bx	lr
34008e2e:	bf00      	nop
34008e30:	56028000 	.word	0x56028000

34008e34 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34008e34:	b480      	push	{r7}
34008e36:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34008e38:	4b04      	ldr	r3, [pc, #16]	@ (34008e4c <LL_RCC_IC12_Enable+0x18>)
34008e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34008e3e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008e42:	bf00      	nop
34008e44:	46bd      	mov	sp, r7
34008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e4a:	4770      	bx	lr
34008e4c:	56028000 	.word	0x56028000

34008e50 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34008e50:	b480      	push	{r7}
34008e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34008e54:	4b07      	ldr	r3, [pc, #28]	@ (34008e74 <LL_RCC_IC12_IsEnabled+0x24>)
34008e56:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34008e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34008e62:	d101      	bne.n	34008e68 <LL_RCC_IC12_IsEnabled+0x18>
34008e64:	2301      	movs	r3, #1
34008e66:	e000      	b.n	34008e6a <LL_RCC_IC12_IsEnabled+0x1a>
34008e68:	2300      	movs	r3, #0
}
34008e6a:	4618      	mov	r0, r3
34008e6c:	46bd      	mov	sp, r7
34008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e72:	4770      	bx	lr
34008e74:	56028000 	.word	0x56028000

34008e78 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34008e78:	b480      	push	{r7}
34008e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34008e7c:	4b04      	ldr	r3, [pc, #16]	@ (34008e90 <LL_RCC_IC12_GetSource+0x18>)
34008e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34008e82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008e86:	4618      	mov	r0, r3
34008e88:	46bd      	mov	sp, r7
34008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008e8e:	4770      	bx	lr
34008e90:	56028000 	.word	0x56028000

34008e94 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34008e94:	b480      	push	{r7}
34008e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34008e98:	4b05      	ldr	r3, [pc, #20]	@ (34008eb0 <LL_RCC_IC12_GetDivider+0x1c>)
34008e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34008e9e:	0c1b      	lsrs	r3, r3, #16
34008ea0:	b2db      	uxtb	r3, r3
34008ea2:	3301      	adds	r3, #1
}
34008ea4:	4618      	mov	r0, r3
34008ea6:	46bd      	mov	sp, r7
34008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008eac:	4770      	bx	lr
34008eae:	bf00      	nop
34008eb0:	56028000 	.word	0x56028000

34008eb4 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34008eb4:	b480      	push	{r7}
34008eb6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34008eb8:	4b04      	ldr	r3, [pc, #16]	@ (34008ecc <LL_RCC_IC13_Enable+0x18>)
34008eba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34008ebe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008ec2:	bf00      	nop
34008ec4:	46bd      	mov	sp, r7
34008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008eca:	4770      	bx	lr
34008ecc:	56028000 	.word	0x56028000

34008ed0 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34008ed0:	b480      	push	{r7}
34008ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34008ed4:	4b07      	ldr	r3, [pc, #28]	@ (34008ef4 <LL_RCC_IC13_IsEnabled+0x24>)
34008ed6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34008ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34008ee2:	d101      	bne.n	34008ee8 <LL_RCC_IC13_IsEnabled+0x18>
34008ee4:	2301      	movs	r3, #1
34008ee6:	e000      	b.n	34008eea <LL_RCC_IC13_IsEnabled+0x1a>
34008ee8:	2300      	movs	r3, #0
}
34008eea:	4618      	mov	r0, r3
34008eec:	46bd      	mov	sp, r7
34008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ef2:	4770      	bx	lr
34008ef4:	56028000 	.word	0x56028000

34008ef8 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34008ef8:	b480      	push	{r7}
34008efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34008efc:	4b04      	ldr	r3, [pc, #16]	@ (34008f10 <LL_RCC_IC13_GetSource+0x18>)
34008efe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34008f02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008f06:	4618      	mov	r0, r3
34008f08:	46bd      	mov	sp, r7
34008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f0e:	4770      	bx	lr
34008f10:	56028000 	.word	0x56028000

34008f14 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34008f14:	b480      	push	{r7}
34008f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34008f18:	4b05      	ldr	r3, [pc, #20]	@ (34008f30 <LL_RCC_IC13_GetDivider+0x1c>)
34008f1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34008f1e:	0c1b      	lsrs	r3, r3, #16
34008f20:	b2db      	uxtb	r3, r3
34008f22:	3301      	adds	r3, #1
}
34008f24:	4618      	mov	r0, r3
34008f26:	46bd      	mov	sp, r7
34008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f2c:	4770      	bx	lr
34008f2e:	bf00      	nop
34008f30:	56028000 	.word	0x56028000

34008f34 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34008f34:	b480      	push	{r7}
34008f36:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34008f38:	4b04      	ldr	r3, [pc, #16]	@ (34008f4c <LL_RCC_IC14_Enable+0x18>)
34008f3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34008f3e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008f42:	bf00      	nop
34008f44:	46bd      	mov	sp, r7
34008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f4a:	4770      	bx	lr
34008f4c:	56028000 	.word	0x56028000

34008f50 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34008f50:	b480      	push	{r7}
34008f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34008f54:	4b07      	ldr	r3, [pc, #28]	@ (34008f74 <LL_RCC_IC14_IsEnabled+0x24>)
34008f56:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34008f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34008f62:	d101      	bne.n	34008f68 <LL_RCC_IC14_IsEnabled+0x18>
34008f64:	2301      	movs	r3, #1
34008f66:	e000      	b.n	34008f6a <LL_RCC_IC14_IsEnabled+0x1a>
34008f68:	2300      	movs	r3, #0
}
34008f6a:	4618      	mov	r0, r3
34008f6c:	46bd      	mov	sp, r7
34008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f72:	4770      	bx	lr
34008f74:	56028000 	.word	0x56028000

34008f78 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34008f78:	b480      	push	{r7}
34008f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34008f7c:	4b04      	ldr	r3, [pc, #16]	@ (34008f90 <LL_RCC_IC14_GetSource+0x18>)
34008f7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34008f86:	4618      	mov	r0, r3
34008f88:	46bd      	mov	sp, r7
34008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34008f8e:	4770      	bx	lr
34008f90:	56028000 	.word	0x56028000

34008f94 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34008f94:	b480      	push	{r7}
34008f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34008f98:	4b05      	ldr	r3, [pc, #20]	@ (34008fb0 <LL_RCC_IC14_GetDivider+0x1c>)
34008f9a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34008f9e:	0c1b      	lsrs	r3, r3, #16
34008fa0:	b2db      	uxtb	r3, r3
34008fa2:	3301      	adds	r3, #1
}
34008fa4:	4618      	mov	r0, r3
34008fa6:	46bd      	mov	sp, r7
34008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fac:	4770      	bx	lr
34008fae:	bf00      	nop
34008fb0:	56028000 	.word	0x56028000

34008fb4 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34008fb4:	b480      	push	{r7}
34008fb6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34008fb8:	4b04      	ldr	r3, [pc, #16]	@ (34008fcc <LL_RCC_IC15_Enable+0x18>)
34008fba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34008fbe:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34008fc2:	bf00      	nop
34008fc4:	46bd      	mov	sp, r7
34008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
34008fca:	4770      	bx	lr
34008fcc:	56028000 	.word	0x56028000

34008fd0 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34008fd0:	b480      	push	{r7}
34008fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34008fd4:	4b07      	ldr	r3, [pc, #28]	@ (34008ff4 <LL_RCC_IC15_IsEnabled+0x24>)
34008fd6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34008fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34008fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34008fe2:	d101      	bne.n	34008fe8 <LL_RCC_IC15_IsEnabled+0x18>
34008fe4:	2301      	movs	r3, #1
34008fe6:	e000      	b.n	34008fea <LL_RCC_IC15_IsEnabled+0x1a>
34008fe8:	2300      	movs	r3, #0
}
34008fea:	4618      	mov	r0, r3
34008fec:	46bd      	mov	sp, r7
34008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
34008ff2:	4770      	bx	lr
34008ff4:	56028000 	.word	0x56028000

34008ff8 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34008ff8:	b480      	push	{r7}
34008ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34008ffc:	4b04      	ldr	r3, [pc, #16]	@ (34009010 <LL_RCC_IC15_GetSource+0x18>)
34008ffe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34009002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009006:	4618      	mov	r0, r3
34009008:	46bd      	mov	sp, r7
3400900a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400900e:	4770      	bx	lr
34009010:	56028000 	.word	0x56028000

34009014 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34009014:	b480      	push	{r7}
34009016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34009018:	4b05      	ldr	r3, [pc, #20]	@ (34009030 <LL_RCC_IC15_GetDivider+0x1c>)
3400901a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400901e:	0c1b      	lsrs	r3, r3, #16
34009020:	b2db      	uxtb	r3, r3
34009022:	3301      	adds	r3, #1
}
34009024:	4618      	mov	r0, r3
34009026:	46bd      	mov	sp, r7
34009028:	f85d 7b04 	ldr.w	r7, [sp], #4
3400902c:	4770      	bx	lr
3400902e:	bf00      	nop
34009030:	56028000 	.word	0x56028000

34009034 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34009034:	b480      	push	{r7}
34009036:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34009038:	4b04      	ldr	r3, [pc, #16]	@ (3400904c <LL_RCC_IC16_Enable+0x18>)
3400903a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400903e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009042:	bf00      	nop
34009044:	46bd      	mov	sp, r7
34009046:	f85d 7b04 	ldr.w	r7, [sp], #4
3400904a:	4770      	bx	lr
3400904c:	56028000 	.word	0x56028000

34009050 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34009050:	b480      	push	{r7}
34009052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34009054:	4b07      	ldr	r3, [pc, #28]	@ (34009074 <LL_RCC_IC16_IsEnabled+0x24>)
34009056:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400905a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400905e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34009062:	d101      	bne.n	34009068 <LL_RCC_IC16_IsEnabled+0x18>
34009064:	2301      	movs	r3, #1
34009066:	e000      	b.n	3400906a <LL_RCC_IC16_IsEnabled+0x1a>
34009068:	2300      	movs	r3, #0
}
3400906a:	4618      	mov	r0, r3
3400906c:	46bd      	mov	sp, r7
3400906e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009072:	4770      	bx	lr
34009074:	56028000 	.word	0x56028000

34009078 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34009078:	b480      	push	{r7}
3400907a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3400907c:	4b04      	ldr	r3, [pc, #16]	@ (34009090 <LL_RCC_IC16_GetSource+0x18>)
3400907e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34009082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009086:	4618      	mov	r0, r3
34009088:	46bd      	mov	sp, r7
3400908a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400908e:	4770      	bx	lr
34009090:	56028000 	.word	0x56028000

34009094 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34009094:	b480      	push	{r7}
34009096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34009098:	4b05      	ldr	r3, [pc, #20]	@ (340090b0 <LL_RCC_IC16_GetDivider+0x1c>)
3400909a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400909e:	0c1b      	lsrs	r3, r3, #16
340090a0:	b2db      	uxtb	r3, r3
340090a2:	3301      	adds	r3, #1
}
340090a4:	4618      	mov	r0, r3
340090a6:	46bd      	mov	sp, r7
340090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340090ac:	4770      	bx	lr
340090ae:	bf00      	nop
340090b0:	56028000 	.word	0x56028000

340090b4 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
340090b4:	b480      	push	{r7}
340090b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
340090b8:	4b04      	ldr	r3, [pc, #16]	@ (340090cc <LL_RCC_IC17_Enable+0x18>)
340090ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340090be:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340090c2:	bf00      	nop
340090c4:	46bd      	mov	sp, r7
340090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340090ca:	4770      	bx	lr
340090cc:	56028000 	.word	0x56028000

340090d0 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
340090d0:	b480      	push	{r7}
340090d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
340090d4:	4b07      	ldr	r3, [pc, #28]	@ (340090f4 <LL_RCC_IC17_IsEnabled+0x24>)
340090d6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340090da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340090de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340090e2:	d101      	bne.n	340090e8 <LL_RCC_IC17_IsEnabled+0x18>
340090e4:	2301      	movs	r3, #1
340090e6:	e000      	b.n	340090ea <LL_RCC_IC17_IsEnabled+0x1a>
340090e8:	2300      	movs	r3, #0
}
340090ea:	4618      	mov	r0, r3
340090ec:	46bd      	mov	sp, r7
340090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340090f2:	4770      	bx	lr
340090f4:	56028000 	.word	0x56028000

340090f8 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
340090f8:	b480      	push	{r7}
340090fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340090fc:	4b04      	ldr	r3, [pc, #16]	@ (34009110 <LL_RCC_IC17_GetSource+0x18>)
340090fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34009102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009106:	4618      	mov	r0, r3
34009108:	46bd      	mov	sp, r7
3400910a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400910e:	4770      	bx	lr
34009110:	56028000 	.word	0x56028000

34009114 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34009114:	b480      	push	{r7}
34009116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34009118:	4b05      	ldr	r3, [pc, #20]	@ (34009130 <LL_RCC_IC17_GetDivider+0x1c>)
3400911a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400911e:	0c1b      	lsrs	r3, r3, #16
34009120:	b2db      	uxtb	r3, r3
34009122:	3301      	adds	r3, #1
}
34009124:	4618      	mov	r0, r3
34009126:	46bd      	mov	sp, r7
34009128:	f85d 7b04 	ldr.w	r7, [sp], #4
3400912c:	4770      	bx	lr
3400912e:	bf00      	nop
34009130:	56028000 	.word	0x56028000

34009134 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34009134:	b480      	push	{r7}
34009136:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34009138:	4b04      	ldr	r3, [pc, #16]	@ (3400914c <LL_RCC_IC18_Enable+0x18>)
3400913a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3400913e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009142:	bf00      	nop
34009144:	46bd      	mov	sp, r7
34009146:	f85d 7b04 	ldr.w	r7, [sp], #4
3400914a:	4770      	bx	lr
3400914c:	56028000 	.word	0x56028000

34009150 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34009150:	b480      	push	{r7}
34009152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34009154:	4b07      	ldr	r3, [pc, #28]	@ (34009174 <LL_RCC_IC18_IsEnabled+0x24>)
34009156:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400915a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400915e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34009162:	d101      	bne.n	34009168 <LL_RCC_IC18_IsEnabled+0x18>
34009164:	2301      	movs	r3, #1
34009166:	e000      	b.n	3400916a <LL_RCC_IC18_IsEnabled+0x1a>
34009168:	2300      	movs	r3, #0
}
3400916a:	4618      	mov	r0, r3
3400916c:	46bd      	mov	sp, r7
3400916e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009172:	4770      	bx	lr
34009174:	56028000 	.word	0x56028000

34009178 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34009178:	b480      	push	{r7}
3400917a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
3400917c:	4b04      	ldr	r3, [pc, #16]	@ (34009190 <LL_RCC_IC18_GetSource+0x18>)
3400917e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34009182:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009186:	4618      	mov	r0, r3
34009188:	46bd      	mov	sp, r7
3400918a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400918e:	4770      	bx	lr
34009190:	56028000 	.word	0x56028000

34009194 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34009194:	b480      	push	{r7}
34009196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34009198:	4b05      	ldr	r3, [pc, #20]	@ (340091b0 <LL_RCC_IC18_GetDivider+0x1c>)
3400919a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400919e:	0c1b      	lsrs	r3, r3, #16
340091a0:	b2db      	uxtb	r3, r3
340091a2:	3301      	adds	r3, #1
}
340091a4:	4618      	mov	r0, r3
340091a6:	46bd      	mov	sp, r7
340091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340091ac:	4770      	bx	lr
340091ae:	bf00      	nop
340091b0:	56028000 	.word	0x56028000

340091b4 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
340091b4:	b480      	push	{r7}
340091b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340091b8:	4b04      	ldr	r3, [pc, #16]	@ (340091cc <LL_RCC_IC19_Enable+0x18>)
340091ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340091be:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340091c2:	bf00      	nop
340091c4:	46bd      	mov	sp, r7
340091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340091ca:	4770      	bx	lr
340091cc:	56028000 	.word	0x56028000

340091d0 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
340091d0:	b480      	push	{r7}
340091d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
340091d4:	4b07      	ldr	r3, [pc, #28]	@ (340091f4 <LL_RCC_IC19_IsEnabled+0x24>)
340091d6:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
340091da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
340091de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340091e2:	d101      	bne.n	340091e8 <LL_RCC_IC19_IsEnabled+0x18>
340091e4:	2301      	movs	r3, #1
340091e6:	e000      	b.n	340091ea <LL_RCC_IC19_IsEnabled+0x1a>
340091e8:	2300      	movs	r3, #0
}
340091ea:	4618      	mov	r0, r3
340091ec:	46bd      	mov	sp, r7
340091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340091f2:	4770      	bx	lr
340091f4:	56028000 	.word	0x56028000

340091f8 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
340091f8:	b480      	push	{r7}
340091fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340091fc:	4b04      	ldr	r3, [pc, #16]	@ (34009210 <LL_RCC_IC19_GetSource+0x18>)
340091fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34009202:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009206:	4618      	mov	r0, r3
34009208:	46bd      	mov	sp, r7
3400920a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400920e:	4770      	bx	lr
34009210:	56028000 	.word	0x56028000

34009214 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34009214:	b480      	push	{r7}
34009216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34009218:	4b05      	ldr	r3, [pc, #20]	@ (34009230 <LL_RCC_IC19_GetDivider+0x1c>)
3400921a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400921e:	0c1b      	lsrs	r3, r3, #16
34009220:	b2db      	uxtb	r3, r3
34009222:	3301      	adds	r3, #1
}
34009224:	4618      	mov	r0, r3
34009226:	46bd      	mov	sp, r7
34009228:	f85d 7b04 	ldr.w	r7, [sp], #4
3400922c:	4770      	bx	lr
3400922e:	bf00      	nop
34009230:	56028000 	.word	0x56028000

34009234 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34009234:	b480      	push	{r7}
34009236:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34009238:	4b04      	ldr	r3, [pc, #16]	@ (3400924c <LL_RCC_IC20_Enable+0x18>)
3400923a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3400923e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34009242:	bf00      	nop
34009244:	46bd      	mov	sp, r7
34009246:	f85d 7b04 	ldr.w	r7, [sp], #4
3400924a:	4770      	bx	lr
3400924c:	56028000 	.word	0x56028000

34009250 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34009250:	b480      	push	{r7}
34009252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34009254:	4b07      	ldr	r3, [pc, #28]	@ (34009274 <LL_RCC_IC20_IsEnabled+0x24>)
34009256:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400925a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400925e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34009262:	d101      	bne.n	34009268 <LL_RCC_IC20_IsEnabled+0x18>
34009264:	2301      	movs	r3, #1
34009266:	e000      	b.n	3400926a <LL_RCC_IC20_IsEnabled+0x1a>
34009268:	2300      	movs	r3, #0
}
3400926a:	4618      	mov	r0, r3
3400926c:	46bd      	mov	sp, r7
3400926e:	f85d 7b04 	ldr.w	r7, [sp], #4
34009272:	4770      	bx	lr
34009274:	56028000 	.word	0x56028000

34009278 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34009278:	b480      	push	{r7}
3400927a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3400927c:	4b04      	ldr	r3, [pc, #16]	@ (34009290 <LL_RCC_IC20_GetSource+0x18>)
3400927e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34009282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34009286:	4618      	mov	r0, r3
34009288:	46bd      	mov	sp, r7
3400928a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400928e:	4770      	bx	lr
34009290:	56028000 	.word	0x56028000

34009294 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34009294:	b480      	push	{r7}
34009296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34009298:	4b05      	ldr	r3, [pc, #20]	@ (340092b0 <LL_RCC_IC20_GetDivider+0x1c>)
3400929a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400929e:	0c1b      	lsrs	r3, r3, #16
340092a0:	b2db      	uxtb	r3, r3
340092a2:	3301      	adds	r3, #1
}
340092a4:	4618      	mov	r0, r3
340092a6:	46bd      	mov	sp, r7
340092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340092ac:	4770      	bx	lr
340092ae:	bf00      	nop
340092b0:	56028000 	.word	0x56028000

340092b4 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
340092b4:	b480      	push	{r7}
340092b6:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340092b8:	4b04      	ldr	r3, [pc, #16]	@ (340092cc <LL_RCC_CLKP_Enable+0x18>)
340092ba:	2240      	movs	r2, #64	@ 0x40
340092bc:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
340092c0:	bf00      	nop
340092c2:	46bd      	mov	sp, r7
340092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
340092c8:	4770      	bx	lr
340092ca:	bf00      	nop
340092cc:	56028000 	.word	0x56028000

340092d0 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
340092d0:	b480      	push	{r7}
340092d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340092d4:	4b07      	ldr	r3, [pc, #28]	@ (340092f4 <LL_RCC_CLKP_IsEnabled+0x24>)
340092d6:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
340092da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340092de:	2b40      	cmp	r3, #64	@ 0x40
340092e0:	d101      	bne.n	340092e6 <LL_RCC_CLKP_IsEnabled+0x16>
340092e2:	2301      	movs	r3, #1
340092e4:	e000      	b.n	340092e8 <LL_RCC_CLKP_IsEnabled+0x18>
340092e6:	2300      	movs	r3, #0
}
340092e8:	4618      	mov	r0, r3
340092ea:	46bd      	mov	sp, r7
340092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340092f0:	4770      	bx	lr
340092f2:	bf00      	nop
340092f4:	56028000 	.word	0x56028000

340092f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
340092f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
340092fc:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
34009300:	af00      	add	r7, sp, #0
34009302:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34009306:	2300      	movs	r3, #0
34009308:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3400930c:	2300      	movs	r3, #0
3400930e:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34009312:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009316:	e9d3 2300 	ldrd	r2, r3, [r3]
3400931a:	f402 6400 	and.w	r4, r2, #2048	@ 0x800
3400931e:	2500      	movs	r5, #0
34009320:	ea54 0305 	orrs.w	r3, r4, r5
34009324:	f040 83e0 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009328:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400932c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009330:	f04f 0800 	mov.w	r8, #0
34009334:	f403 0980 	and.w	r9, r3, #4194304	@ 0x400000
34009338:	ea58 0309 	orrs.w	r3, r8, r9
3400933c:	f040 83d4 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009340:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009344:	e9d3 2300 	ldrd	r2, r3, [r3]
34009348:	f04f 0a00 	mov.w	sl, #0
3400934c:	f403 0b00 	and.w	fp, r3, #8388608	@ 0x800000
34009350:	ea5a 030b 	orrs.w	r3, sl, fp
34009354:	f040 83c8 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009358:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400935c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009360:	2100      	movs	r1, #0
34009362:	f8c7 1370 	str.w	r1, [r7, #880]	@ 0x370
34009366:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400936a:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
3400936e:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	@ 0x370
34009372:	4603      	mov	r3, r0
34009374:	460a      	mov	r2, r1
34009376:	4313      	orrs	r3, r2
34009378:	f040 83b6 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400937c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009380:	e9d3 2300 	ldrd	r2, r3, [r3]
34009384:	f002 0304 	and.w	r3, r2, #4
34009388:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
3400938c:	2300      	movs	r3, #0
3400938e:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
34009392:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
34009396:	4603      	mov	r3, r0
34009398:	460a      	mov	r2, r1
3400939a:	4313      	orrs	r3, r2
3400939c:	f040 83a4 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340093a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
340093a8:	f002 0301 	and.w	r3, r2, #1
340093ac:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
340093b0:	2300      	movs	r3, #0
340093b2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
340093b6:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	@ 0x360
340093ba:	4603      	mov	r3, r0
340093bc:	460a      	mov	r2, r1
340093be:	4313      	orrs	r3, r2
340093c0:	f040 8392 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340093c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
340093cc:	f002 0302 	and.w	r3, r2, #2
340093d0:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
340093d4:	2300      	movs	r3, #0
340093d6:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
340093da:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
340093de:	4603      	mov	r3, r0
340093e0:	460a      	mov	r2, r1
340093e2:	4313      	orrs	r3, r2
340093e4:	f040 8380 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340093e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
340093f0:	f002 0308 	and.w	r3, r2, #8
340093f4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
340093f8:	2300      	movs	r3, #0
340093fa:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
340093fe:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	@ 0x350
34009402:	4603      	mov	r3, r0
34009404:	460a      	mov	r2, r1
34009406:	4313      	orrs	r3, r2
34009408:	f040 836e 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400940c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009410:	e9d3 2300 	ldrd	r2, r3, [r3]
34009414:	f002 0310 	and.w	r3, r2, #16
34009418:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
3400941c:	2300      	movs	r3, #0
3400941e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
34009422:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
34009426:	4603      	mov	r3, r0
34009428:	460a      	mov	r2, r1
3400942a:	4313      	orrs	r3, r2
3400942c:	f040 835c 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009430:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009434:	e9d3 2300 	ldrd	r2, r3, [r3]
34009438:	f002 0320 	and.w	r3, r2, #32
3400943c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
34009440:	2300      	movs	r3, #0
34009442:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
34009446:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
3400944a:	4603      	mov	r3, r0
3400944c:	460a      	mov	r2, r1
3400944e:	4313      	orrs	r3, r2
34009450:	f040 834a 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009454:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009458:	e9d3 2300 	ldrd	r2, r3, [r3]
3400945c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34009460:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
34009464:	2300      	movs	r3, #0
34009466:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
3400946a:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
3400946e:	4603      	mov	r3, r0
34009470:	460a      	mov	r2, r1
34009472:	4313      	orrs	r3, r2
34009474:	f040 8338 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400947c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009480:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34009484:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
34009488:	2300      	movs	r3, #0
3400948a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
3400948e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
34009492:	4603      	mov	r3, r0
34009494:	460a      	mov	r2, r1
34009496:	4313      	orrs	r3, r2
34009498:	f040 8326 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400949c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
340094a4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
340094a8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
340094ac:	2300      	movs	r3, #0
340094ae:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
340094b2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
340094b6:	4603      	mov	r3, r0
340094b8:	460a      	mov	r2, r1
340094ba:	4313      	orrs	r3, r2
340094bc:	f040 8314 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340094c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
340094c8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
340094cc:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
340094d0:	2300      	movs	r3, #0
340094d2:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
340094d6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
340094da:	4603      	mov	r3, r0
340094dc:	460a      	mov	r2, r1
340094de:	4313      	orrs	r3, r2
340094e0:	f040 8302 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340094e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
340094ec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
340094f0:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
340094f4:	2300      	movs	r3, #0
340094f6:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
340094fa:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
340094fe:	4603      	mov	r3, r0
34009500:	460a      	mov	r2, r1
34009502:	4313      	orrs	r3, r2
34009504:	f040 82f0 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400950c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009510:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34009514:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
34009518:	2300      	movs	r3, #0
3400951a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
3400951e:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
34009522:	4603      	mov	r3, r0
34009524:	460a      	mov	r2, r1
34009526:	4313      	orrs	r3, r2
34009528:	f040 82de 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400952c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009530:	e9d3 2300 	ldrd	r2, r3, [r3]
34009534:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34009538:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
3400953c:	2300      	movs	r3, #0
3400953e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
34009542:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	@ 0x308
34009546:	4603      	mov	r3, r0
34009548:	460a      	mov	r2, r1
3400954a:	4313      	orrs	r3, r2
3400954c:	f040 82cc 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009550:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009554:	e9d3 2300 	ldrd	r2, r3, [r3]
34009558:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400955c:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
34009560:	2300      	movs	r3, #0
34009562:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
34009566:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
3400956a:	4603      	mov	r3, r0
3400956c:	460a      	mov	r2, r1
3400956e:	4313      	orrs	r3, r2
34009570:	f040 82ba 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009574:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009578:	e9d3 2300 	ldrd	r2, r3, [r3]
3400957c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34009580:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
34009584:	2300      	movs	r3, #0
34009586:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
3400958a:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
3400958e:	4603      	mov	r3, r0
34009590:	460a      	mov	r2, r1
34009592:	4313      	orrs	r3, r2
34009594:	f040 82a8 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400959c:	e9d3 2300 	ldrd	r2, r3, [r3]
340095a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
340095a4:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
340095a8:	2300      	movs	r3, #0
340095aa:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
340095ae:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
340095b2:	4603      	mov	r3, r0
340095b4:	460a      	mov	r2, r1
340095b6:	4313      	orrs	r3, r2
340095b8:	f040 8296 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340095bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
340095c4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
340095c8:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
340095cc:	2300      	movs	r3, #0
340095ce:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
340095d2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
340095d6:	4603      	mov	r3, r0
340095d8:	460a      	mov	r2, r1
340095da:	4313      	orrs	r3, r2
340095dc:	f040 8284 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340095e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
340095e8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
340095ec:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
340095f0:	2300      	movs	r3, #0
340095f2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
340095f6:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
340095fa:	4603      	mov	r3, r0
340095fc:	460a      	mov	r2, r1
340095fe:	4313      	orrs	r3, r2
34009600:	f040 8272 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009608:	e9d3 2300 	ldrd	r2, r3, [r3]
3400960c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34009610:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
34009614:	2300      	movs	r3, #0
34009616:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
3400961a:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
3400961e:	4603      	mov	r3, r0
34009620:	460a      	mov	r2, r1
34009622:	4313      	orrs	r3, r2
34009624:	f040 8260 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400962c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009630:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34009634:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
34009638:	2300      	movs	r3, #0
3400963a:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
3400963e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
34009642:	4603      	mov	r3, r0
34009644:	460a      	mov	r2, r1
34009646:	4313      	orrs	r3, r2
34009648:	f040 824e 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400964c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009650:	e9d3 2300 	ldrd	r2, r3, [r3]
34009654:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34009658:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
3400965c:	2300      	movs	r3, #0
3400965e:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
34009662:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
34009666:	4603      	mov	r3, r0
34009668:	460a      	mov	r2, r1
3400966a:	4313      	orrs	r3, r2
3400966c:	f040 823c 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009670:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009674:	e9d3 2300 	ldrd	r2, r3, [r3]
34009678:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400967c:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
34009680:	2300      	movs	r3, #0
34009682:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
34009686:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
3400968a:	4603      	mov	r3, r0
3400968c:	460a      	mov	r2, r1
3400968e:	4313      	orrs	r3, r2
34009690:	f040 822a 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009694:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009698:	e9d3 2300 	ldrd	r2, r3, [r3]
3400969c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
340096a0:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
340096a4:	2300      	movs	r3, #0
340096a6:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
340096aa:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
340096ae:	4603      	mov	r3, r0
340096b0:	460a      	mov	r2, r1
340096b2:	4313      	orrs	r3, r2
340096b4:	f040 8218 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340096b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
340096c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
340096c4:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
340096c8:	2300      	movs	r3, #0
340096ca:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
340096ce:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
340096d2:	4603      	mov	r3, r0
340096d4:	460a      	mov	r2, r1
340096d6:	4313      	orrs	r3, r2
340096d8:	f040 8206 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340096dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
340096e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
340096e8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
340096ec:	2300      	movs	r3, #0
340096ee:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
340096f2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
340096f6:	4603      	mov	r3, r0
340096f8:	460a      	mov	r2, r1
340096fa:	4313      	orrs	r3, r2
340096fc:	f040 81f4 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009700:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009704:	e9d3 2300 	ldrd	r2, r3, [r3]
34009708:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400970c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
34009710:	2300      	movs	r3, #0
34009712:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
34009716:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
3400971a:	4603      	mov	r3, r0
3400971c:	460a      	mov	r2, r1
3400971e:	4313      	orrs	r3, r2
34009720:	f040 81e2 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009724:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009728:	e9d3 2300 	ldrd	r2, r3, [r3]
3400972c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009730:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
34009734:	2300      	movs	r3, #0
34009736:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
3400973a:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
3400973e:	4603      	mov	r3, r0
34009740:	460a      	mov	r2, r1
34009742:	4313      	orrs	r3, r2
34009744:	f040 81d0 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009748:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400974c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009750:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34009754:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
34009758:	2300      	movs	r3, #0
3400975a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
3400975e:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
34009762:	4603      	mov	r3, r0
34009764:	460a      	mov	r2, r1
34009766:	4313      	orrs	r3, r2
34009768:	f040 81be 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400976c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009770:	e9d3 2300 	ldrd	r2, r3, [r3]
34009774:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34009778:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
3400977c:	2300      	movs	r3, #0
3400977e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
34009782:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
34009786:	4603      	mov	r3, r0
34009788:	460a      	mov	r2, r1
3400978a:	4313      	orrs	r3, r2
3400978c:	f040 81ac 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009794:	e9d3 2300 	ldrd	r2, r3, [r3]
34009798:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400979c:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
340097a0:	2300      	movs	r3, #0
340097a2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
340097a6:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
340097aa:	4603      	mov	r3, r0
340097ac:	460a      	mov	r2, r1
340097ae:	4313      	orrs	r3, r2
340097b0:	f040 819a 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340097b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
340097bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
340097c0:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
340097c4:	2300      	movs	r3, #0
340097c6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
340097ca:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
340097ce:	4603      	mov	r3, r0
340097d0:	460a      	mov	r2, r1
340097d2:	4313      	orrs	r3, r2
340097d4:	f040 8188 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340097d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
340097e0:	2100      	movs	r1, #0
340097e2:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
340097e6:	f003 0301 	and.w	r3, r3, #1
340097ea:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
340097ee:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
340097f2:	4603      	mov	r3, r0
340097f4:	460a      	mov	r2, r1
340097f6:	4313      	orrs	r3, r2
340097f8:	f040 8176 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340097fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009800:	e9d3 2300 	ldrd	r2, r3, [r3]
34009804:	2100      	movs	r1, #0
34009806:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
3400980a:	f003 0302 	and.w	r3, r3, #2
3400980e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
34009812:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
34009816:	4603      	mov	r3, r0
34009818:	460a      	mov	r2, r1
3400981a:	4313      	orrs	r3, r2
3400981c:	f040 8164 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009820:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009824:	e9d3 2300 	ldrd	r2, r3, [r3]
34009828:	2100      	movs	r1, #0
3400982a:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
3400982e:	f003 0304 	and.w	r3, r3, #4
34009832:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
34009836:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
3400983a:	4603      	mov	r3, r0
3400983c:	460a      	mov	r2, r1
3400983e:	4313      	orrs	r3, r2
34009840:	f040 8152 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009844:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009848:	e9d3 2300 	ldrd	r2, r3, [r3]
3400984c:	2100      	movs	r1, #0
3400984e:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
34009852:	f003 0308 	and.w	r3, r3, #8
34009856:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
3400985a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
3400985e:	4603      	mov	r3, r0
34009860:	460a      	mov	r2, r1
34009862:	4313      	orrs	r3, r2
34009864:	f040 8140 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009868:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400986c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009870:	2100      	movs	r1, #0
34009872:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
34009876:	f003 0310 	and.w	r3, r3, #16
3400987a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
3400987e:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
34009882:	4603      	mov	r3, r0
34009884:	460a      	mov	r2, r1
34009886:	4313      	orrs	r3, r2
34009888:	f040 812e 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400988c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009890:	e9d3 2300 	ldrd	r2, r3, [r3]
34009894:	2100      	movs	r1, #0
34009896:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
3400989a:	f003 0320 	and.w	r3, r3, #32
3400989e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
340098a2:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
340098a6:	4603      	mov	r3, r0
340098a8:	460a      	mov	r2, r1
340098aa:	4313      	orrs	r3, r2
340098ac:	f040 811c 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
340098b8:	2100      	movs	r1, #0
340098ba:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
340098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
340098c2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
340098c6:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
340098ca:	4603      	mov	r3, r0
340098cc:	460a      	mov	r2, r1
340098ce:	4313      	orrs	r3, r2
340098d0:	f040 810a 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
340098dc:	2100      	movs	r1, #0
340098de:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
340098e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340098e6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
340098ea:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
340098ee:	4603      	mov	r3, r0
340098f0:	460a      	mov	r2, r1
340098f2:	4313      	orrs	r3, r2
340098f4:	f040 80f8 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340098f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
34009900:	2100      	movs	r1, #0
34009902:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
34009906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400990a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
3400990e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
34009912:	4603      	mov	r3, r0
34009914:	460a      	mov	r2, r1
34009916:	4313      	orrs	r3, r2
34009918:	f040 80e6 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
3400991c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009920:	e9d3 2300 	ldrd	r2, r3, [r3]
34009924:	2100      	movs	r1, #0
34009926:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
3400992a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400992e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
34009932:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
34009936:	4603      	mov	r3, r0
34009938:	460a      	mov	r2, r1
3400993a:	4313      	orrs	r3, r2
3400993c:	f040 80d4 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009940:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009944:	e9d3 2300 	ldrd	r2, r3, [r3]
34009948:	2100      	movs	r1, #0
3400994a:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
3400994e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34009952:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
34009956:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
3400995a:	4603      	mov	r3, r0
3400995c:	460a      	mov	r2, r1
3400995e:	4313      	orrs	r3, r2
34009960:	f040 80c2 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009964:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009968:	e9d3 2300 	ldrd	r2, r3, [r3]
3400996c:	2100      	movs	r1, #0
3400996e:	f8c7 1218 	str.w	r1, [r7, #536]	@ 0x218
34009972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34009976:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
3400997a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
3400997e:	4603      	mov	r3, r0
34009980:	460a      	mov	r2, r1
34009982:	4313      	orrs	r3, r2
34009984:	f040 80b0 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009988:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400998c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009990:	2100      	movs	r1, #0
34009992:	f8c7 1210 	str.w	r1, [r7, #528]	@ 0x210
34009996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400999a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
3400999e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
340099a2:	4603      	mov	r3, r0
340099a4:	460a      	mov	r2, r1
340099a6:	4313      	orrs	r3, r2
340099a8:	f040 809e 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340099ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
340099b4:	2100      	movs	r1, #0
340099b6:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
340099ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
340099be:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
340099c2:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
340099c6:	4603      	mov	r3, r0
340099c8:	460a      	mov	r2, r1
340099ca:	4313      	orrs	r3, r2
340099cc:	f040 808c 	bne.w	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340099d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
340099d8:	2100      	movs	r1, #0
340099da:	f8c7 1200 	str.w	r1, [r7, #512]	@ 0x200
340099de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
340099e2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
340099e6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
340099ea:	4603      	mov	r3, r0
340099ec:	460a      	mov	r2, r1
340099ee:	4313      	orrs	r3, r2
340099f0:	d17a      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
340099f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
340099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
340099fa:	2100      	movs	r1, #0
340099fc:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
34009a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34009a04:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
34009a08:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
34009a0c:	4603      	mov	r3, r0
34009a0e:	460a      	mov	r2, r1
34009a10:	4313      	orrs	r3, r2
34009a12:	d169      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a1c:	2100      	movs	r1, #0
34009a1e:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
34009a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34009a26:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
34009a2a:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
34009a2e:	4603      	mov	r3, r0
34009a30:	460a      	mov	r2, r1
34009a32:	4313      	orrs	r3, r2
34009a34:	d158      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a36:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a3e:	2100      	movs	r1, #0
34009a40:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
34009a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34009a48:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
34009a4c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
34009a50:	4603      	mov	r3, r0
34009a52:	460a      	mov	r2, r1
34009a54:	4313      	orrs	r3, r2
34009a56:	d147      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a60:	2100      	movs	r1, #0
34009a62:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
34009a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34009a6a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
34009a6e:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
34009a72:	4603      	mov	r3, r0
34009a74:	460a      	mov	r2, r1
34009a76:	4313      	orrs	r3, r2
34009a78:	d136      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
34009a82:	2100      	movs	r1, #0
34009a84:	f8c7 11d8 	str.w	r1, [r7, #472]	@ 0x1d8
34009a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34009a8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
34009a90:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
34009a94:	4603      	mov	r3, r0
34009a96:	460a      	mov	r2, r1
34009a98:	4313      	orrs	r3, r2
34009a9a:	d125      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009a9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
34009aa4:	2100      	movs	r1, #0
34009aa6:	f8c7 11d0 	str.w	r1, [r7, #464]	@ 0x1d0
34009aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34009aae:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
34009ab2:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
34009ab6:	4603      	mov	r3, r0
34009ab8:	460a      	mov	r2, r1
34009aba:	4313      	orrs	r3, r2
34009abc:	d114      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009abe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
34009ac6:	2100      	movs	r1, #0
34009ac8:	f8c7 11c8 	str.w	r1, [r7, #456]	@ 0x1c8
34009acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34009ad0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
34009ad4:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
34009ad8:	4603      	mov	r3, r0
34009ada:	460a      	mov	r2, r1
34009adc:	4313      	orrs	r3, r2
34009ade:	d103      	bne.n	34009ae8 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
34009ae0:	2188      	movs	r1, #136	@ 0x88
34009ae2:	48d3      	ldr	r0, [pc, #844]	@ (34009e30 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34009ae4:	f7f7 fda2 	bl	3400162c <assert_failed>

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34009ae8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
34009af0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
34009af4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
34009af8:	2300      	movs	r3, #0
34009afa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
34009afe:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
34009b02:	4603      	mov	r3, r0
34009b04:	460a      	mov	r2, r1
34009b06:	4313      	orrs	r3, r2
34009b08:	f000 82b5 	beq.w	3400a076 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34009b0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b10:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009b18:	f000 8240 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b20:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34009b28:	f000 8238 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b30:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34009b38:	f000 8230 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b40:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b44:	f5b3 5f98 	cmp.w	r3, #4864	@ 0x1300
34009b48:	f000 8228 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b50:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b54:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
34009b58:	f000 8220 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b60:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b64:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
34009b68:	f000 8218 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b70:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b74:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
34009b78:	f000 8210 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b80:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b84:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
34009b88:	f000 8208 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009b90:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009b94:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
34009b98:	f000 8200 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009b9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ba0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009ba4:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
34009ba8:	f000 81f8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bb0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009bb4:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
34009bb8:	f000 81f0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bc0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009bc4:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
34009bc8:	f000 81e8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bd0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009bd4:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
34009bd8:	f000 81e0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009be0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009be4:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
34009be8:	f000 81d8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009bf0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009bf4:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
34009bf8:	f000 81d0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009bfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c00:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009c04:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
34009c08:	f000 81c8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c10:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009c14:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
34009c18:	f000 81c0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c20:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009c24:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
34009c28:	f000 81b8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c30:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c34:	4b7f      	ldr	r3, [pc, #508]	@ (34009e34 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34009c36:	429a      	cmp	r2, r3
34009c38:	f000 81b0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c40:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c44:	4b7c      	ldr	r3, [pc, #496]	@ (34009e38 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34009c46:	429a      	cmp	r2, r3
34009c48:	f000 81a8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c50:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c54:	4b79      	ldr	r3, [pc, #484]	@ (34009e3c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34009c56:	429a      	cmp	r2, r3
34009c58:	f000 81a0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c60:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c64:	4b76      	ldr	r3, [pc, #472]	@ (34009e40 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34009c66:	429a      	cmp	r2, r3
34009c68:	f000 8198 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c70:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c74:	4b73      	ldr	r3, [pc, #460]	@ (34009e44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34009c76:	429a      	cmp	r2, r3
34009c78:	f000 8190 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c80:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c84:	4b70      	ldr	r3, [pc, #448]	@ (34009e48 <HAL_RCCEx_PeriphCLKConfig+0xb50>)
34009c86:	429a      	cmp	r2, r3
34009c88:	f000 8188 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009c90:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009c94:	4b6d      	ldr	r3, [pc, #436]	@ (34009e4c <HAL_RCCEx_PeriphCLKConfig+0xb54>)
34009c96:	429a      	cmp	r2, r3
34009c98:	f000 8180 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009c9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ca0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ca4:	4b6a      	ldr	r3, [pc, #424]	@ (34009e50 <HAL_RCCEx_PeriphCLKConfig+0xb58>)
34009ca6:	429a      	cmp	r2, r3
34009ca8:	f000 8178 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009cac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cb0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009cb4:	4b67      	ldr	r3, [pc, #412]	@ (34009e54 <HAL_RCCEx_PeriphCLKConfig+0xb5c>)
34009cb6:	429a      	cmp	r2, r3
34009cb8:	f000 8170 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009cbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cc0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009cc4:	4b64      	ldr	r3, [pc, #400]	@ (34009e58 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
34009cc6:	429a      	cmp	r2, r3
34009cc8:	f000 8168 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ccc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cd0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009cd4:	4b61      	ldr	r3, [pc, #388]	@ (34009e5c <HAL_RCCEx_PeriphCLKConfig+0xb64>)
34009cd6:	429a      	cmp	r2, r3
34009cd8:	f000 8160 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009cdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ce0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ce4:	4b5e      	ldr	r3, [pc, #376]	@ (34009e60 <HAL_RCCEx_PeriphCLKConfig+0xb68>)
34009ce6:	429a      	cmp	r2, r3
34009ce8:	f000 8158 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009cec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009cf0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009cf4:	4b5b      	ldr	r3, [pc, #364]	@ (34009e64 <HAL_RCCEx_PeriphCLKConfig+0xb6c>)
34009cf6:	429a      	cmp	r2, r3
34009cf8:	f000 8150 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009cfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d00:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d04:	4b58      	ldr	r3, [pc, #352]	@ (34009e68 <HAL_RCCEx_PeriphCLKConfig+0xb70>)
34009d06:	429a      	cmp	r2, r3
34009d08:	f000 8148 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d10:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d14:	4b55      	ldr	r3, [pc, #340]	@ (34009e6c <HAL_RCCEx_PeriphCLKConfig+0xb74>)
34009d16:	429a      	cmp	r2, r3
34009d18:	f000 8140 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d20:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d24:	4b52      	ldr	r3, [pc, #328]	@ (34009e70 <HAL_RCCEx_PeriphCLKConfig+0xb78>)
34009d26:	429a      	cmp	r2, r3
34009d28:	f000 8138 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d30:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d34:	4b4f      	ldr	r3, [pc, #316]	@ (34009e74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
34009d36:	429a      	cmp	r2, r3
34009d38:	f000 8130 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d40:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d44:	4b4c      	ldr	r3, [pc, #304]	@ (34009e78 <HAL_RCCEx_PeriphCLKConfig+0xb80>)
34009d46:	429a      	cmp	r2, r3
34009d48:	f000 8128 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d50:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d54:	4b49      	ldr	r3, [pc, #292]	@ (34009e7c <HAL_RCCEx_PeriphCLKConfig+0xb84>)
34009d56:	429a      	cmp	r2, r3
34009d58:	f000 8120 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d60:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d64:	4b46      	ldr	r3, [pc, #280]	@ (34009e80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
34009d66:	429a      	cmp	r2, r3
34009d68:	f000 8118 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d70:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d74:	4b43      	ldr	r3, [pc, #268]	@ (34009e84 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
34009d76:	429a      	cmp	r2, r3
34009d78:	f000 8110 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d80:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d84:	4b40      	ldr	r3, [pc, #256]	@ (34009e88 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
34009d86:	429a      	cmp	r2, r3
34009d88:	f000 8108 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009d90:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009d94:	4b3d      	ldr	r3, [pc, #244]	@ (34009e8c <HAL_RCCEx_PeriphCLKConfig+0xb94>)
34009d96:	429a      	cmp	r2, r3
34009d98:	f000 8100 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009d9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009da0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009da4:	4b3a      	ldr	r3, [pc, #232]	@ (34009e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
34009da6:	429a      	cmp	r2, r3
34009da8:	f000 80f8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009dac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009db0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009db4:	4b37      	ldr	r3, [pc, #220]	@ (34009e94 <HAL_RCCEx_PeriphCLKConfig+0xb9c>)
34009db6:	429a      	cmp	r2, r3
34009db8:	f000 80f0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009dbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009dc0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009dc4:	4b34      	ldr	r3, [pc, #208]	@ (34009e98 <HAL_RCCEx_PeriphCLKConfig+0xba0>)
34009dc6:	429a      	cmp	r2, r3
34009dc8:	f000 80e8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009dcc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009dd0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009dd4:	4b31      	ldr	r3, [pc, #196]	@ (34009e9c <HAL_RCCEx_PeriphCLKConfig+0xba4>)
34009dd6:	429a      	cmp	r2, r3
34009dd8:	f000 80e0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009de0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009de4:	4b2e      	ldr	r3, [pc, #184]	@ (34009ea0 <HAL_RCCEx_PeriphCLKConfig+0xba8>)
34009de6:	429a      	cmp	r2, r3
34009de8:	f000 80d8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009dec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009df0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009df4:	4b2b      	ldr	r3, [pc, #172]	@ (34009ea4 <HAL_RCCEx_PeriphCLKConfig+0xbac>)
34009df6:	429a      	cmp	r2, r3
34009df8:	f000 80d0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009dfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e00:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009e04:	4b28      	ldr	r3, [pc, #160]	@ (34009ea8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
34009e06:	429a      	cmp	r2, r3
34009e08:	f000 80c8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009e0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e10:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009e14:	4b25      	ldr	r3, [pc, #148]	@ (34009eac <HAL_RCCEx_PeriphCLKConfig+0xbb4>)
34009e16:	429a      	cmp	r2, r3
34009e18:	f000 80c0 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009e1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009e20:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009e24:	4b22      	ldr	r3, [pc, #136]	@ (34009eb0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>)
34009e26:	429a      	cmp	r2, r3
34009e28:	f000 80b8 	beq.w	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009e2c:	e042      	b.n	34009eb4 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
34009e2e:	bf00      	nop
34009e30:	3401ae18 	.word	0x3401ae18
34009e34:	00010300 	.word	0x00010300
34009e38:	00011300 	.word	0x00011300
34009e3c:	00012300 	.word	0x00012300
34009e40:	00013300 	.word	0x00013300
34009e44:	00014300 	.word	0x00014300
34009e48:	00015300 	.word	0x00015300
34009e4c:	00016300 	.word	0x00016300
34009e50:	00017300 	.word	0x00017300
34009e54:	00018300 	.word	0x00018300
34009e58:	00019300 	.word	0x00019300
34009e5c:	0001a300 	.word	0x0001a300
34009e60:	0001b300 	.word	0x0001b300
34009e64:	0001c300 	.word	0x0001c300
34009e68:	0001d300 	.word	0x0001d300
34009e6c:	0001e300 	.word	0x0001e300
34009e70:	0001f300 	.word	0x0001f300
34009e74:	00020300 	.word	0x00020300
34009e78:	00021300 	.word	0x00021300
34009e7c:	00022300 	.word	0x00022300
34009e80:	00023300 	.word	0x00023300
34009e84:	00024300 	.word	0x00024300
34009e88:	00025300 	.word	0x00025300
34009e8c:	00026300 	.word	0x00026300
34009e90:	00027300 	.word	0x00027300
34009e94:	00028300 	.word	0x00028300
34009e98:	00029300 	.word	0x00029300
34009e9c:	0002a300 	.word	0x0002a300
34009ea0:	0002b300 	.word	0x0002b300
34009ea4:	0002c300 	.word	0x0002c300
34009ea8:	0002d300 	.word	0x0002d300
34009eac:	0002e300 	.word	0x0002e300
34009eb0:	0002f300 	.word	0x0002f300
34009eb4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009eb8:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ebc:	4bb4      	ldr	r3, [pc, #720]	@ (3400a190 <HAL_RCCEx_PeriphCLKConfig+0xe98>)
34009ebe:	429a      	cmp	r2, r3
34009ec0:	d06c      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ec2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ec6:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009eca:	4bb2      	ldr	r3, [pc, #712]	@ (3400a194 <HAL_RCCEx_PeriphCLKConfig+0xe9c>)
34009ecc:	429a      	cmp	r2, r3
34009ece:	d065      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ed0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ed4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ed8:	4baf      	ldr	r3, [pc, #700]	@ (3400a198 <HAL_RCCEx_PeriphCLKConfig+0xea0>)
34009eda:	429a      	cmp	r2, r3
34009edc:	d05e      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009ede:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ee2:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ee6:	4bad      	ldr	r3, [pc, #692]	@ (3400a19c <HAL_RCCEx_PeriphCLKConfig+0xea4>)
34009ee8:	429a      	cmp	r2, r3
34009eea:	d057      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009eec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009ef0:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009ef4:	4baa      	ldr	r3, [pc, #680]	@ (3400a1a0 <HAL_RCCEx_PeriphCLKConfig+0xea8>)
34009ef6:	429a      	cmp	r2, r3
34009ef8:	d050      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009efa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009efe:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f02:	4ba8      	ldr	r3, [pc, #672]	@ (3400a1a4 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
34009f04:	429a      	cmp	r2, r3
34009f06:	d049      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f0c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f10:	4ba5      	ldr	r3, [pc, #660]	@ (3400a1a8 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
34009f12:	429a      	cmp	r2, r3
34009f14:	d042      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f1a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f1e:	4ba3      	ldr	r3, [pc, #652]	@ (3400a1ac <HAL_RCCEx_PeriphCLKConfig+0xeb4>)
34009f20:	429a      	cmp	r2, r3
34009f22:	d03b      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f28:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f2c:	4ba0      	ldr	r3, [pc, #640]	@ (3400a1b0 <HAL_RCCEx_PeriphCLKConfig+0xeb8>)
34009f2e:	429a      	cmp	r2, r3
34009f30:	d034      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f36:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f3a:	4b9e      	ldr	r3, [pc, #632]	@ (3400a1b4 <HAL_RCCEx_PeriphCLKConfig+0xebc>)
34009f3c:	429a      	cmp	r2, r3
34009f3e:	d02d      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f44:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f48:	4b9b      	ldr	r3, [pc, #620]	@ (3400a1b8 <HAL_RCCEx_PeriphCLKConfig+0xec0>)
34009f4a:	429a      	cmp	r2, r3
34009f4c:	d026      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f52:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f56:	4b99      	ldr	r3, [pc, #612]	@ (3400a1bc <HAL_RCCEx_PeriphCLKConfig+0xec4>)
34009f58:	429a      	cmp	r2, r3
34009f5a:	d01f      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f60:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f64:	4b96      	ldr	r3, [pc, #600]	@ (3400a1c0 <HAL_RCCEx_PeriphCLKConfig+0xec8>)
34009f66:	429a      	cmp	r2, r3
34009f68:	d018      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f6e:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f72:	4b94      	ldr	r3, [pc, #592]	@ (3400a1c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
34009f74:	429a      	cmp	r2, r3
34009f76:	d011      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f7c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f80:	4b91      	ldr	r3, [pc, #580]	@ (3400a1c8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
34009f82:	429a      	cmp	r2, r3
34009f84:	d00a      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009f8a:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
34009f8e:	4b8f      	ldr	r3, [pc, #572]	@ (3400a1cc <HAL_RCCEx_PeriphCLKConfig+0xed4>)
34009f90:	429a      	cmp	r2, r3
34009f92:	d003      	beq.n	34009f9c <HAL_RCCEx_PeriphCLKConfig+0xca4>
34009f94:	218e      	movs	r1, #142	@ 0x8e
34009f96:	488e      	ldr	r0, [pc, #568]	@ (3400a1d0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
34009f98:	f7f7 fb48 	bl	3400162c <assert_failed>

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34009f9c:	f7fe fae2 	bl	34008564 <LL_RCC_GetRTCClockSource>
34009fa0:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34009fa4:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
34009fa8:	2b00      	cmp	r3, #0
34009faa:	d018      	beq.n	34009fde <HAL_RCCEx_PeriphCLKConfig+0xce6>
34009fac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fb0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009fb4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34009fb8:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
34009fbc:	4293      	cmp	r3, r2
34009fbe:	d00e      	beq.n	34009fde <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34009fc0:	4b84      	ldr	r3, [pc, #528]	@ (3400a1d4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
34009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34009fc4:	4a83      	ldr	r2, [pc, #524]	@ (3400a1d4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
34009fc6:	f043 0301 	orr.w	r3, r3, #1
34009fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34009fcc:	4b81      	ldr	r3, [pc, #516]	@ (3400a1d4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
34009fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34009fd0:	f003 0301 	and.w	r3, r3, #1
34009fd4:	2b00      	cmp	r3, #0
34009fd6:	d102      	bne.n	34009fde <HAL_RCCEx_PeriphCLKConfig+0xce6>
      {
        ret = HAL_ERROR;
34009fd8:	2301      	movs	r3, #1
34009fda:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34009fde:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
34009fe2:	2b00      	cmp	r3, #0
34009fe4:	d143      	bne.n	3400a06e <HAL_RCCEx_PeriphCLKConfig+0xd76>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34009fe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
34009fea:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34009fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34009ff2:	d117      	bne.n	3400a024 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34009ff4:	f7f9 fafa 	bl	340035ec <HAL_GetTick>
34009ff8:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34009ffc:	e00d      	b.n	3400a01a <HAL_RCCEx_PeriphCLKConfig+0xd22>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34009ffe:	f7f9 faf5 	bl	340035ec <HAL_GetTick>
3400a002:	4602      	mov	r2, r0
3400a004:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
3400a008:	1ad2      	subs	r2, r2, r3
3400a00a:	f241 3388 	movw	r3, #5000	@ 0x1388
3400a00e:	429a      	cmp	r2, r3
3400a010:	d903      	bls.n	3400a01a <HAL_RCCEx_PeriphCLKConfig+0xd22>
          {
            ret = HAL_TIMEOUT;
3400a012:	2303      	movs	r3, #3
3400a014:	f887 338f 	strb.w	r3, [r7, #911]	@ 0x38f
            break;
3400a018:	e004      	b.n	3400a024 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
        while (LL_RCC_LSE_IsReady() == 0U)
3400a01a:	f7fd feb5 	bl	34007d88 <LL_RCC_LSE_IsReady>
3400a01e:	4603      	mov	r3, r0
3400a020:	2b00      	cmp	r3, #0
3400a022:	d0ec      	beq.n	34009ffe <HAL_RCCEx_PeriphCLKConfig+0xd06>
          }
        }
      }

      if (ret == HAL_OK)
3400a024:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a028:	2b00      	cmp	r3, #0
3400a02a:	d11b      	bne.n	3400a064 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3400a02c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a030:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a03c:	d108      	bne.n	3400a050 <HAL_RCCEx_PeriphCLKConfig+0xd58>
3400a03e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a042:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3400a04a:	4618      	mov	r0, r3
3400a04c:	f7fe fa98 	bl	34008580 <LL_RCC_SetRTC_HSEPrescaler>
3400a050:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a054:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400a058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
3400a05c:	4618      	mov	r0, r3
3400a05e:	f7fe fa6b 	bl	34008538 <LL_RCC_SetRTCClockSource>
3400a062:	e008      	b.n	3400a076 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
      else
      {
        /* set overall return value */
        status = ret;
3400a064:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a068:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
3400a06c:	e003      	b.n	3400a076 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
3400a06e:	f897 338f 	ldrb.w	r3, [r7, #911]	@ 0x38f
3400a072:	f887 338e 	strb.w	r3, [r7, #910]	@ 0x38e
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3400a076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a07e:	f002 0304 	and.w	r3, r2, #4
3400a082:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
3400a086:	2300      	movs	r3, #0
3400a088:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
3400a08c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
3400a090:	4603      	mov	r3, r0
3400a092:	460a      	mov	r2, r1
3400a094:	4313      	orrs	r3, r2
3400a096:	f000 81dc 	beq.w	3400a452 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
3400a09a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a09e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0a2:	2b00      	cmp	r3, #0
3400a0a4:	d02d      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0ae:	2b01      	cmp	r3, #1
3400a0b0:	d027      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0ba:	2b02      	cmp	r3, #2
3400a0bc:	d021      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0c6:	2b03      	cmp	r3, #3
3400a0c8:	d01b      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0d2:	2b04      	cmp	r3, #4
3400a0d4:	d015      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0de:	2b05      	cmp	r3, #5
3400a0e0:	d00f      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0ea:	2b06      	cmp	r3, #6
3400a0ec:	d009      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a0f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a0f6:	2b07      	cmp	r3, #7
3400a0f8:	d003      	beq.n	3400a102 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
3400a0fa:	21d4      	movs	r1, #212	@ 0xd4
3400a0fc:	4834      	ldr	r0, [pc, #208]	@ (3400a1d0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a0fe:	f7f7 fa95 	bl	3400162c <assert_failed>

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3400a102:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a10a:	2b04      	cmp	r3, #4
3400a10c:	d166      	bne.n	3400a1dc <HAL_RCCEx_PeriphCLKConfig+0xee4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400a10e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a114:	2b00      	cmp	r3, #0
3400a116:	d015      	beq.n	3400a144 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a118:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a11e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a122:	d00f      	beq.n	3400a144 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a124:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a12a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a12e:	d009      	beq.n	3400a144 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a130:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a13a:	d003      	beq.n	3400a144 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
3400a13c:	21d9      	movs	r1, #217	@ 0xd9
3400a13e:	4824      	ldr	r0, [pc, #144]	@ (3400a1d0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a140:	f7f7 fa74 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400a144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a14a:	2b00      	cmp	r3, #0
3400a14c:	d005      	beq.n	3400a15a <HAL_RCCEx_PeriphCLKConfig+0xe62>
3400a14e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a158:	d903      	bls.n	3400a162 <HAL_RCCEx_PeriphCLKConfig+0xe6a>
3400a15a:	21da      	movs	r1, #218	@ 0xda
3400a15c:	481c      	ldr	r0, [pc, #112]	@ (3400a1d0 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
3400a15e:	f7f7 fa65 	bl	3400162c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400a162:	4b1d      	ldr	r3, [pc, #116]	@ (3400a1d8 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400a168:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a16c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a170:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400a176:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a17c:	3b01      	subs	r3, #1
3400a17e:	041b      	lsls	r3, r3, #16
3400a180:	4313      	orrs	r3, r2
3400a182:	4a15      	ldr	r2, [pc, #84]	@ (3400a1d8 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
3400a184:	430b      	orrs	r3, r1
3400a186:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400a18a:	f7fe fd13 	bl	34008bb4 <LL_RCC_IC5_Enable>
3400a18e:	e159      	b.n	3400a444 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a190:	00030300 	.word	0x00030300
3400a194:	00031300 	.word	0x00031300
3400a198:	00032300 	.word	0x00032300
3400a19c:	00033300 	.word	0x00033300
3400a1a0:	00034300 	.word	0x00034300
3400a1a4:	00035300 	.word	0x00035300
3400a1a8:	00036300 	.word	0x00036300
3400a1ac:	00037300 	.word	0x00037300
3400a1b0:	00038300 	.word	0x00038300
3400a1b4:	00039300 	.word	0x00039300
3400a1b8:	0003a300 	.word	0x0003a300
3400a1bc:	0003b300 	.word	0x0003b300
3400a1c0:	0003c300 	.word	0x0003c300
3400a1c4:	0003d300 	.word	0x0003d300
3400a1c8:	0003e300 	.word	0x0003e300
3400a1cc:	0003f300 	.word	0x0003f300
3400a1d0:	3401ae18 	.word	0x3401ae18
3400a1d4:	56024800 	.word	0x56024800
3400a1d8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
3400a1dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a1e4:	2b05      	cmp	r3, #5
3400a1e6:	d140      	bne.n	3400a26a <HAL_RCCEx_PeriphCLKConfig+0xf72>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400a1e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a1ee:	2b00      	cmp	r3, #0
3400a1f0:	d015      	beq.n	3400a21e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a1f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a1f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a1f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a1fc:	d00f      	beq.n	3400a21e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a1fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a208:	d009      	beq.n	3400a21e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a20a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a20e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400a210:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a214:	d003      	beq.n	3400a21e <HAL_RCCEx_PeriphCLKConfig+0xf26>
3400a216:	21e6      	movs	r1, #230	@ 0xe6
3400a218:	4860      	ldr	r0, [pc, #384]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a21a:	f7f7 fa07 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400a21e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a224:	2b00      	cmp	r3, #0
3400a226:	d005      	beq.n	3400a234 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
3400a228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a232:	d903      	bls.n	3400a23c <HAL_RCCEx_PeriphCLKConfig+0xf44>
3400a234:	21e7      	movs	r1, #231	@ 0xe7
3400a236:	4859      	ldr	r0, [pc, #356]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a238:	f7f7 f9f8 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400a23c:	4b58      	ldr	r3, [pc, #352]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a23e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400a242:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a246:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a24a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a24e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400a250:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400a256:	3b01      	subs	r3, #1
3400a258:	041b      	lsls	r3, r3, #16
3400a25a:	4313      	orrs	r3, r2
3400a25c:	4a50      	ldr	r2, [pc, #320]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a25e:	430b      	orrs	r3, r1
3400a260:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400a264:	f7fe fda6 	bl	34008db4 <LL_RCC_IC10_Enable>
3400a268:	e0ec      	b.n	3400a444 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400a26a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a26e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a272:	2b06      	cmp	r3, #6
3400a274:	d140      	bne.n	3400a2f8 <HAL_RCCEx_PeriphCLKConfig+0x1000>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400a276:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a27a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a27c:	2b00      	cmp	r3, #0
3400a27e:	d015      	beq.n	3400a2ac <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a28a:	d00f      	beq.n	3400a2ac <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a28c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a296:	d009      	beq.n	3400a2ac <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a29c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400a29e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a2a2:	d003      	beq.n	3400a2ac <HAL_RCCEx_PeriphCLKConfig+0xfb4>
3400a2a4:	21f3      	movs	r1, #243	@ 0xf3
3400a2a6:	483d      	ldr	r0, [pc, #244]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a2a8:	f7f7 f9c0 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400a2ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a2b2:	2b00      	cmp	r3, #0
3400a2b4:	d005      	beq.n	3400a2c2 <HAL_RCCEx_PeriphCLKConfig+0xfca>
3400a2b6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a2bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a2c0:	d903      	bls.n	3400a2ca <HAL_RCCEx_PeriphCLKConfig+0xfd2>
3400a2c2:	21f4      	movs	r1, #244	@ 0xf4
3400a2c4:	4835      	ldr	r0, [pc, #212]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a2c6:	f7f7 f9b1 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400a2ca:	4b35      	ldr	r3, [pc, #212]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a2cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400a2d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a2d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a2d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400a2de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400a2e4:	3b01      	subs	r3, #1
3400a2e6:	041b      	lsls	r3, r3, #16
3400a2e8:	4313      	orrs	r3, r2
3400a2ea:	4a2d      	ldr	r2, [pc, #180]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a2ec:	430b      	orrs	r3, r1
3400a2ee:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400a2f2:	f7fe fe5f 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400a2f6:	e0a5      	b.n	3400a444 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
3400a2f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a2fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a300:	2b03      	cmp	r3, #3
3400a302:	d14f      	bne.n	3400a3a4 <HAL_RCCEx_PeriphCLKConfig+0x10ac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400a304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a308:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a30c:	2b00      	cmp	r3, #0
3400a30e:	d019      	beq.n	3400a344 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a31c:	d012      	beq.n	3400a344 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a31e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a32a:	d00b      	beq.n	3400a344 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a32c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a330:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400a334:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a338:	d004      	beq.n	3400a344 <HAL_RCCEx_PeriphCLKConfig+0x104c>
3400a33a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3400a33e:	4817      	ldr	r0, [pc, #92]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a340:	f7f7 f974 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400a344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a34c:	2b00      	cmp	r3, #0
3400a34e:	d006      	beq.n	3400a35e <HAL_RCCEx_PeriphCLKConfig+0x1066>
3400a350:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a354:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a35c:	d904      	bls.n	3400a368 <HAL_RCCEx_PeriphCLKConfig+0x1070>
3400a35e:	f240 1101 	movw	r1, #257	@ 0x101
3400a362:	480e      	ldr	r0, [pc, #56]	@ (3400a39c <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
3400a364:	f7f7 f962 	bl	3400162c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400a368:	4b0d      	ldr	r3, [pc, #52]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a36a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400a36e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a372:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a376:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a37a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400a37e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400a386:	3b01      	subs	r3, #1
3400a388:	041b      	lsls	r3, r3, #16
3400a38a:	4313      	orrs	r3, r2
3400a38c:	4a04      	ldr	r2, [pc, #16]	@ (3400a3a0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>)
3400a38e:	430b      	orrs	r3, r1
3400a390:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400a394:	f7fe ff0e 	bl	340091b4 <LL_RCC_IC19_Enable>
3400a398:	e054      	b.n	3400a444 <HAL_RCCEx_PeriphCLKConfig+0x114c>
3400a39a:	bf00      	nop
3400a39c:	3401ae18 	.word	0x3401ae18
3400a3a0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
3400a3a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a3ac:	2b07      	cmp	r3, #7
3400a3ae:	d149      	bne.n	3400a444 <HAL_RCCEx_PeriphCLKConfig+0x114c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400a3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a3b8:	2b00      	cmp	r3, #0
3400a3ba:	d019      	beq.n	3400a3f0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a3bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a3c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a3c8:	d012      	beq.n	3400a3f0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a3ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a3d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a3d6:	d00b      	beq.n	3400a3f0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400a3e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a3e4:	d004      	beq.n	3400a3f0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
3400a3e6:	f240 110d 	movw	r1, #269	@ 0x10d
3400a3ea:	487d      	ldr	r0, [pc, #500]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a3ec:	f7f7 f91e 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400a3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a3f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a3f8:	2b00      	cmp	r3, #0
3400a3fa:	d006      	beq.n	3400a40a <HAL_RCCEx_PeriphCLKConfig+0x1112>
3400a3fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a400:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a408:	d904      	bls.n	3400a414 <HAL_RCCEx_PeriphCLKConfig+0x111c>
3400a40a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3400a40e:	4874      	ldr	r0, [pc, #464]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a410:	f7f7 f90c 	bl	3400162c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400a414:	4b73      	ldr	r3, [pc, #460]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a416:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400a41a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a41e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a422:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a426:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400a42a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a42e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400a432:	3b01      	subs	r3, #1
3400a434:	041b      	lsls	r3, r3, #16
3400a436:	4313      	orrs	r3, r2
3400a438:	4a6a      	ldr	r2, [pc, #424]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a43a:	430b      	orrs	r3, r1
3400a43c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400a440:	f7fe fef8 	bl	34009234 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
3400a444:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400a44c:	4618      	mov	r0, r3
3400a44e:	f7fd fd4f 	bl	34007ef0 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3400a452:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a456:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a45a:	2100      	movs	r1, #0
3400a45c:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
3400a460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3400a464:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
3400a468:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
3400a46c:	4603      	mov	r3, r0
3400a46e:	460a      	mov	r2, r1
3400a470:	4313      	orrs	r3, r2
3400a472:	f000 80d1 	beq.w	3400a618 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
3400a476:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a47a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a47e:	4b5a      	ldr	r3, [pc, #360]	@ (3400a5e8 <HAL_RCCEx_PeriphCLKConfig+0x12f0>)
3400a480:	429a      	cmp	r2, r3
3400a482:	d019      	beq.n	3400a4b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a488:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a48c:	4b57      	ldr	r3, [pc, #348]	@ (3400a5ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
3400a48e:	429a      	cmp	r2, r3
3400a490:	d012      	beq.n	3400a4b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a492:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a496:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a49a:	4b55      	ldr	r3, [pc, #340]	@ (3400a5f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400a49c:	429a      	cmp	r2, r3
3400a49e:	d00b      	beq.n	3400a4b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a4a8:	4b52      	ldr	r3, [pc, #328]	@ (3400a5f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400a4aa:	429a      	cmp	r2, r3
3400a4ac:	d004      	beq.n	3400a4b8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
3400a4ae:	f44f 7192 	mov.w	r1, #292	@ 0x124
3400a4b2:	484b      	ldr	r0, [pc, #300]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a4b4:	f7f7 f8ba 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3400a4b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a4c0:	4b4b      	ldr	r3, [pc, #300]	@ (3400a5f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
3400a4c2:	429a      	cmp	r2, r3
3400a4c4:	d142      	bne.n	3400a54c <HAL_RCCEx_PeriphCLKConfig+0x1254>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400a4c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4ca:	699b      	ldr	r3, [r3, #24]
3400a4cc:	2b00      	cmp	r3, #0
3400a4ce:	d016      	beq.n	3400a4fe <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a4d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4d4:	699b      	ldr	r3, [r3, #24]
3400a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a4da:	d010      	beq.n	3400a4fe <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a4dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4e0:	699b      	ldr	r3, [r3, #24]
3400a4e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a4e6:	d00a      	beq.n	3400a4fe <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a4e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a4ec:	699b      	ldr	r3, [r3, #24]
3400a4ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a4f2:	d004      	beq.n	3400a4fe <HAL_RCCEx_PeriphCLKConfig+0x1206>
3400a4f4:	f240 1129 	movw	r1, #297	@ 0x129
3400a4f8:	4839      	ldr	r0, [pc, #228]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a4fa:	f7f7 f897 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400a4fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a502:	69db      	ldr	r3, [r3, #28]
3400a504:	2b00      	cmp	r3, #0
3400a506:	d005      	beq.n	3400a514 <HAL_RCCEx_PeriphCLKConfig+0x121c>
3400a508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a50c:	69db      	ldr	r3, [r3, #28]
3400a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a512:	d904      	bls.n	3400a51e <HAL_RCCEx_PeriphCLKConfig+0x1226>
3400a514:	f44f 7195 	mov.w	r1, #298	@ 0x12a
3400a518:	4831      	ldr	r0, [pc, #196]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a51a:	f7f7 f887 	bl	3400162c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400a51e:	4b31      	ldr	r3, [pc, #196]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a520:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400a524:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a528:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a52c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a530:	699a      	ldr	r2, [r3, #24]
3400a532:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a536:	69db      	ldr	r3, [r3, #28]
3400a538:	3b01      	subs	r3, #1
3400a53a:	041b      	lsls	r3, r3, #16
3400a53c:	4313      	orrs	r3, r2
3400a53e:	4a29      	ldr	r2, [pc, #164]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a540:	430b      	orrs	r3, r1
3400a542:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400a546:	f7fe fab5 	bl	34008ab4 <LL_RCC_IC3_Enable>
3400a54a:	e05e      	b.n	3400a60a <HAL_RCCEx_PeriphCLKConfig+0x1312>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
3400a54c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a550:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a554:	4b27      	ldr	r3, [pc, #156]	@ (3400a5f4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
3400a556:	429a      	cmp	r2, r3
3400a558:	d14e      	bne.n	3400a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1300>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400a55a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a55e:	6a1b      	ldr	r3, [r3, #32]
3400a560:	2b00      	cmp	r3, #0
3400a562:	d016      	beq.n	3400a592 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400a564:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a568:	6a1b      	ldr	r3, [r3, #32]
3400a56a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a56e:	d010      	beq.n	3400a592 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400a570:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a574:	6a1b      	ldr	r3, [r3, #32]
3400a576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a57a:	d00a      	beq.n	3400a592 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400a57c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a580:	6a1b      	ldr	r3, [r3, #32]
3400a582:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a586:	d004      	beq.n	3400a592 <HAL_RCCEx_PeriphCLKConfig+0x129a>
3400a588:	f44f 719b 	mov.w	r1, #310	@ 0x136
3400a58c:	4814      	ldr	r0, [pc, #80]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a58e:	f7f7 f84d 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400a592:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a598:	2b00      	cmp	r3, #0
3400a59a:	d005      	beq.n	3400a5a8 <HAL_RCCEx_PeriphCLKConfig+0x12b0>
3400a59c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a5a6:	d904      	bls.n	3400a5b2 <HAL_RCCEx_PeriphCLKConfig+0x12ba>
3400a5a8:	f240 1137 	movw	r1, #311	@ 0x137
3400a5ac:	480c      	ldr	r0, [pc, #48]	@ (3400a5e0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>)
3400a5ae:	f7f7 f83d 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400a5b2:	4b0c      	ldr	r3, [pc, #48]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a5b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400a5b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a5bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a5c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5c4:	6a1a      	ldr	r2, [r3, #32]
3400a5c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a5cc:	3b01      	subs	r3, #1
3400a5ce:	041b      	lsls	r3, r3, #16
3400a5d0:	4313      	orrs	r3, r2
3400a5d2:	4a04      	ldr	r2, [pc, #16]	@ (3400a5e4 <HAL_RCCEx_PeriphCLKConfig+0x12ec>)
3400a5d4:	430b      	orrs	r3, r1
3400a5d6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400a5da:	f7fe faab 	bl	34008b34 <LL_RCC_IC4_Enable>
3400a5de:	e014      	b.n	3400a60a <HAL_RCCEx_PeriphCLKConfig+0x1312>
3400a5e0:	3401ae18 	.word	0x3401ae18
3400a5e4:	56028000 	.word	0x56028000
3400a5e8:	03000014 	.word	0x03000014
3400a5ec:	03010014 	.word	0x03010014
3400a5f0:	03020014 	.word	0x03020014
3400a5f4:	03030014 	.word	0x03030014
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400a5f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a5fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400a600:	4baf      	ldr	r3, [pc, #700]	@ (3400a8c0 <HAL_RCCEx_PeriphCLKConfig+0x15c8>)
3400a602:	429a      	cmp	r2, r3
3400a604:	d101      	bne.n	3400a60a <HAL_RCCEx_PeriphCLKConfig+0x1312>
    {
      LL_RCC_CLKP_Enable();
3400a606:	f7fe fe55 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
3400a60a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a60e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
3400a612:	4618      	mov	r0, r3
3400a614:	f7fd fdfc 	bl	34008210 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3400a618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a620:	2100      	movs	r1, #0
3400a622:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
3400a626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
3400a62a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
3400a62e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3400a632:	4603      	mov	r3, r0
3400a634:	460a      	mov	r2, r1
3400a636:	4313      	orrs	r3, r2
3400a638:	f000 80c5 	beq.w	3400a7c6 <HAL_RCCEx_PeriphCLKConfig+0x14ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
3400a63c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a640:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a644:	4b9f      	ldr	r3, [pc, #636]	@ (3400a8c4 <HAL_RCCEx_PeriphCLKConfig+0x15cc>)
3400a646:	429a      	cmp	r2, r3
3400a648:	d019      	beq.n	3400a67e <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400a64a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a64e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a652:	4b9d      	ldr	r3, [pc, #628]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400a654:	429a      	cmp	r2, r3
3400a656:	d012      	beq.n	3400a67e <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400a658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a65c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a660:	4b9a      	ldr	r3, [pc, #616]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400a662:	429a      	cmp	r2, r3
3400a664:	d00b      	beq.n	3400a67e <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400a666:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a66a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a66e:	4b98      	ldr	r3, [pc, #608]	@ (3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400a670:	429a      	cmp	r2, r3
3400a672:	d004      	beq.n	3400a67e <HAL_RCCEx_PeriphCLKConfig+0x1386>
3400a674:	f240 1151 	movw	r1, #337	@ 0x151
3400a678:	4896      	ldr	r0, [pc, #600]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a67a:	f7f6 ffd7 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
3400a67e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a682:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a686:	4b91      	ldr	r3, [pc, #580]	@ (3400a8cc <HAL_RCCEx_PeriphCLKConfig+0x15d4>)
3400a688:	429a      	cmp	r2, r3
3400a68a:	d142      	bne.n	3400a712 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400a68c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a690:	699b      	ldr	r3, [r3, #24]
3400a692:	2b00      	cmp	r3, #0
3400a694:	d016      	beq.n	3400a6c4 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400a696:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a69a:	699b      	ldr	r3, [r3, #24]
3400a69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a6a0:	d010      	beq.n	3400a6c4 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400a6a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6a6:	699b      	ldr	r3, [r3, #24]
3400a6a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a6ac:	d00a      	beq.n	3400a6c4 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400a6ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6b2:	699b      	ldr	r3, [r3, #24]
3400a6b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a6b8:	d004      	beq.n	3400a6c4 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3400a6ba:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3400a6be:	4885      	ldr	r0, [pc, #532]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a6c0:	f7f6 ffb4 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400a6c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6c8:	69db      	ldr	r3, [r3, #28]
3400a6ca:	2b00      	cmp	r3, #0
3400a6cc:	d005      	beq.n	3400a6da <HAL_RCCEx_PeriphCLKConfig+0x13e2>
3400a6ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6d2:	69db      	ldr	r3, [r3, #28]
3400a6d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a6d8:	d904      	bls.n	3400a6e4 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
3400a6da:	f240 1157 	movw	r1, #343	@ 0x157
3400a6de:	487d      	ldr	r0, [pc, #500]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a6e0:	f7f6 ffa4 	bl	3400162c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400a6e4:	4b7c      	ldr	r3, [pc, #496]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a6e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400a6ea:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a6ee:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a6f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6f6:	699a      	ldr	r2, [r3, #24]
3400a6f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a6fc:	69db      	ldr	r3, [r3, #28]
3400a6fe:	3b01      	subs	r3, #1
3400a700:	041b      	lsls	r3, r3, #16
3400a702:	4313      	orrs	r3, r2
3400a704:	4a74      	ldr	r2, [pc, #464]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a706:	430b      	orrs	r3, r1
3400a708:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400a70c:	f7fe f9d2 	bl	34008ab4 <LL_RCC_IC3_Enable>
3400a710:	e052      	b.n	3400a7b8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3400a712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a716:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a71a:	4b6d      	ldr	r3, [pc, #436]	@ (3400a8d0 <HAL_RCCEx_PeriphCLKConfig+0x15d8>)
3400a71c:	429a      	cmp	r2, r3
3400a71e:	d142      	bne.n	3400a7a6 <HAL_RCCEx_PeriphCLKConfig+0x14ae>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400a720:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a724:	6a1b      	ldr	r3, [r3, #32]
3400a726:	2b00      	cmp	r3, #0
3400a728:	d016      	beq.n	3400a758 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400a72a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a72e:	6a1b      	ldr	r3, [r3, #32]
3400a730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a734:	d010      	beq.n	3400a758 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400a736:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a73a:	6a1b      	ldr	r3, [r3, #32]
3400a73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a740:	d00a      	beq.n	3400a758 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400a742:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a746:	6a1b      	ldr	r3, [r3, #32]
3400a748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a74c:	d004      	beq.n	3400a758 <HAL_RCCEx_PeriphCLKConfig+0x1460>
3400a74e:	f240 1163 	movw	r1, #355	@ 0x163
3400a752:	4860      	ldr	r0, [pc, #384]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a754:	f7f6 ff6a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400a758:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a75e:	2b00      	cmp	r3, #0
3400a760:	d005      	beq.n	3400a76e <HAL_RCCEx_PeriphCLKConfig+0x1476>
3400a762:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a76c:	d904      	bls.n	3400a778 <HAL_RCCEx_PeriphCLKConfig+0x1480>
3400a76e:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3400a772:	4858      	ldr	r0, [pc, #352]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a774:	f7f6 ff5a 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400a778:	4b57      	ldr	r3, [pc, #348]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a77a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400a77e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a782:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a786:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a78a:	6a1a      	ldr	r2, [r3, #32]
3400a78c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a792:	3b01      	subs	r3, #1
3400a794:	041b      	lsls	r3, r3, #16
3400a796:	4313      	orrs	r3, r2
3400a798:	4a4f      	ldr	r2, [pc, #316]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a79a:	430b      	orrs	r3, r1
3400a79c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400a7a0:	f7fe f9c8 	bl	34008b34 <LL_RCC_IC4_Enable>
3400a7a4:	e008      	b.n	3400a7b8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3400a7a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400a7ae:	4b46      	ldr	r3, [pc, #280]	@ (3400a8c8 <HAL_RCCEx_PeriphCLKConfig+0x15d0>)
3400a7b0:	429a      	cmp	r2, r3
3400a7b2:	d101      	bne.n	3400a7b8 <HAL_RCCEx_PeriphCLKConfig+0x14c0>
    {
      LL_RCC_CLKP_Enable();
3400a7b4:	f7fe fd7e 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
3400a7b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400a7c0:	4618      	mov	r0, r3
3400a7c2:	f7fd fd25 	bl	34008210 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
3400a7c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a7ce:	2100      	movs	r1, #0
3400a7d0:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400a7d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
3400a7d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3400a7dc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400a7e0:	4603      	mov	r3, r0
3400a7e2:	460a      	mov	r2, r1
3400a7e4:	4313      	orrs	r3, r2
3400a7e6:	f000 80db 	beq.w	3400a9a0 <HAL_RCCEx_PeriphCLKConfig+0x16a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3400a7ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7ee:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a7f2:	4b3a      	ldr	r3, [pc, #232]	@ (3400a8dc <HAL_RCCEx_PeriphCLKConfig+0x15e4>)
3400a7f4:	429a      	cmp	r2, r3
3400a7f6:	d019      	beq.n	3400a82c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400a7f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a7fc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a800:	4b37      	ldr	r3, [pc, #220]	@ (3400a8e0 <HAL_RCCEx_PeriphCLKConfig+0x15e8>)
3400a802:	429a      	cmp	r2, r3
3400a804:	d012      	beq.n	3400a82c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400a806:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a80a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a80e:	4b35      	ldr	r3, [pc, #212]	@ (3400a8e4 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400a810:	429a      	cmp	r2, r3
3400a812:	d00b      	beq.n	3400a82c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400a814:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a818:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a81c:	4b32      	ldr	r3, [pc, #200]	@ (3400a8e8 <HAL_RCCEx_PeriphCLKConfig+0x15f0>)
3400a81e:	429a      	cmp	r2, r3
3400a820:	d004      	beq.n	3400a82c <HAL_RCCEx_PeriphCLKConfig+0x1534>
3400a822:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3400a826:	482b      	ldr	r0, [pc, #172]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a828:	f7f6 ff00 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3400a82c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a830:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a834:	4b2b      	ldr	r3, [pc, #172]	@ (3400a8e4 <HAL_RCCEx_PeriphCLKConfig+0x15ec>)
3400a836:	429a      	cmp	r2, r3
3400a838:	d158      	bne.n	3400a8ec <HAL_RCCEx_PeriphCLKConfig+0x15f4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400a83a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a83e:	699b      	ldr	r3, [r3, #24]
3400a840:	2b00      	cmp	r3, #0
3400a842:	d016      	beq.n	3400a872 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400a844:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a848:	699b      	ldr	r3, [r3, #24]
3400a84a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a84e:	d010      	beq.n	3400a872 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400a850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a854:	699b      	ldr	r3, [r3, #24]
3400a856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a85a:	d00a      	beq.n	3400a872 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400a85c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a860:	699b      	ldr	r3, [r3, #24]
3400a862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a866:	d004      	beq.n	3400a872 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3400a868:	f240 1183 	movw	r1, #387	@ 0x183
3400a86c:	4819      	ldr	r0, [pc, #100]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a86e:	f7f6 fedd 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400a872:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a876:	69db      	ldr	r3, [r3, #28]
3400a878:	2b00      	cmp	r3, #0
3400a87a:	d005      	beq.n	3400a888 <HAL_RCCEx_PeriphCLKConfig+0x1590>
3400a87c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a880:	69db      	ldr	r3, [r3, #28]
3400a882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a886:	d904      	bls.n	3400a892 <HAL_RCCEx_PeriphCLKConfig+0x159a>
3400a888:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3400a88c:	4811      	ldr	r0, [pc, #68]	@ (3400a8d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>)
3400a88e:	f7f6 fecd 	bl	3400162c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400a892:	4b11      	ldr	r3, [pc, #68]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a894:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400a898:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a89c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a8a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8a4:	699a      	ldr	r2, [r3, #24]
3400a8a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8aa:	69db      	ldr	r3, [r3, #28]
3400a8ac:	3b01      	subs	r3, #1
3400a8ae:	041b      	lsls	r3, r3, #16
3400a8b0:	4313      	orrs	r3, r2
3400a8b2:	4a09      	ldr	r2, [pc, #36]	@ (3400a8d8 <HAL_RCCEx_PeriphCLKConfig+0x15e0>)
3400a8b4:	430b      	orrs	r3, r1
3400a8b6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400a8ba:	f7fe f8fb 	bl	34008ab4 <LL_RCC_IC3_Enable>
3400a8be:	e068      	b.n	3400a992 <HAL_RCCEx_PeriphCLKConfig+0x169a>
3400a8c0:	03010014 	.word	0x03010014
3400a8c4:	03000414 	.word	0x03000414
3400a8c8:	03010414 	.word	0x03010414
3400a8cc:	03020414 	.word	0x03020414
3400a8d0:	03030414 	.word	0x03030414
3400a8d4:	3401ae18 	.word	0x3401ae18
3400a8d8:	56028000 	.word	0x56028000
3400a8dc:	03000814 	.word	0x03000814
3400a8e0:	03010814 	.word	0x03010814
3400a8e4:	03020814 	.word	0x03020814
3400a8e8:	03030814 	.word	0x03030814
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3400a8ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a8f4:	4b8b      	ldr	r3, [pc, #556]	@ (3400ab24 <HAL_RCCEx_PeriphCLKConfig+0x182c>)
3400a8f6:	429a      	cmp	r2, r3
3400a8f8:	d142      	bne.n	3400a980 <HAL_RCCEx_PeriphCLKConfig+0x1688>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400a8fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a8fe:	6a1b      	ldr	r3, [r3, #32]
3400a900:	2b00      	cmp	r3, #0
3400a902:	d016      	beq.n	3400a932 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400a904:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a908:	6a1b      	ldr	r3, [r3, #32]
3400a90a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a90e:	d010      	beq.n	3400a932 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400a910:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a914:	6a1b      	ldr	r3, [r3, #32]
3400a916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400a91a:	d00a      	beq.n	3400a932 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400a91c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a920:	6a1b      	ldr	r3, [r3, #32]
3400a922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400a926:	d004      	beq.n	3400a932 <HAL_RCCEx_PeriphCLKConfig+0x163a>
3400a928:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3400a92c:	487e      	ldr	r0, [pc, #504]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400a92e:	f7f6 fe7d 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400a932:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a938:	2b00      	cmp	r3, #0
3400a93a:	d005      	beq.n	3400a948 <HAL_RCCEx_PeriphCLKConfig+0x1650>
3400a93c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400a946:	d904      	bls.n	3400a952 <HAL_RCCEx_PeriphCLKConfig+0x165a>
3400a948:	f240 1191 	movw	r1, #401	@ 0x191
3400a94c:	4876      	ldr	r0, [pc, #472]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400a94e:	f7f6 fe6d 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400a952:	4b76      	ldr	r3, [pc, #472]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400a954:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400a958:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400a95c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400a960:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a964:	6a1a      	ldr	r2, [r3, #32]
3400a966:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a96c:	3b01      	subs	r3, #1
3400a96e:	041b      	lsls	r3, r3, #16
3400a970:	4313      	orrs	r3, r2
3400a972:	4a6e      	ldr	r2, [pc, #440]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400a974:	430b      	orrs	r3, r1
3400a976:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400a97a:	f7fe f8db 	bl	34008b34 <LL_RCC_IC4_Enable>
3400a97e:	e008      	b.n	3400a992 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3400a980:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a984:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400a988:	4b69      	ldr	r3, [pc, #420]	@ (3400ab30 <HAL_RCCEx_PeriphCLKConfig+0x1838>)
3400a98a:	429a      	cmp	r2, r3
3400a98c:	d101      	bne.n	3400a992 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    {
      LL_RCC_CLKP_Enable();
3400a98e:	f7fe fc91 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
3400a992:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400a99a:	4618      	mov	r0, r3
3400a99c:	f7fd fc38 	bl	34008210 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3400a9a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400a9a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3400a9ac:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3400a9b0:	2300      	movs	r3, #0
3400a9b2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
3400a9b6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
3400a9ba:	4603      	mov	r3, r0
3400a9bc:	460a      	mov	r2, r1
3400a9be:	4313      	orrs	r3, r2
3400a9c0:	f000 80c7 	beq.w	3400ab52 <HAL_RCCEx_PeriphCLKConfig+0x185a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
3400a9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400a9cc:	2b00      	cmp	r3, #0
3400a9ce:	d016      	beq.n	3400a9fe <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400a9d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400a9d8:	2b10      	cmp	r3, #16
3400a9da:	d010      	beq.n	3400a9fe <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400a9dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400a9e4:	2b20      	cmp	r3, #32
3400a9e6:	d00a      	beq.n	3400a9fe <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400a9e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400a9ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400a9f0:	2b30      	cmp	r3, #48	@ 0x30
3400a9f2:	d004      	beq.n	3400a9fe <HAL_RCCEx_PeriphCLKConfig+0x1706>
3400a9f4:	f240 11ab 	movw	r1, #427	@ 0x1ab
3400a9f8:	484b      	ldr	r0, [pc, #300]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400a9fa:	f7f6 fe17 	bl	3400162c <assert_failed>

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
3400a9fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aa06:	2b20      	cmp	r3, #32
3400aa08:	d142      	bne.n	3400aa90 <HAL_RCCEx_PeriphCLKConfig+0x1798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3400aa0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa0e:	699b      	ldr	r3, [r3, #24]
3400aa10:	2b00      	cmp	r3, #0
3400aa12:	d016      	beq.n	3400aa42 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aa14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa18:	699b      	ldr	r3, [r3, #24]
3400aa1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aa1e:	d010      	beq.n	3400aa42 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aa20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa24:	699b      	ldr	r3, [r3, #24]
3400aa26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aa2a:	d00a      	beq.n	3400aa42 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aa2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa30:	699b      	ldr	r3, [r3, #24]
3400aa32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aa36:	d004      	beq.n	3400aa42 <HAL_RCCEx_PeriphCLKConfig+0x174a>
3400aa38:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3400aa3c:	483a      	ldr	r0, [pc, #232]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400aa3e:	f7f6 fdf5 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3400aa42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa46:	69db      	ldr	r3, [r3, #28]
3400aa48:	2b00      	cmp	r3, #0
3400aa4a:	d005      	beq.n	3400aa58 <HAL_RCCEx_PeriphCLKConfig+0x1760>
3400aa4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa50:	69db      	ldr	r3, [r3, #28]
3400aa52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aa56:	d904      	bls.n	3400aa62 <HAL_RCCEx_PeriphCLKConfig+0x176a>
3400aa58:	f240 11b1 	movw	r1, #433	@ 0x1b1
3400aa5c:	4832      	ldr	r0, [pc, #200]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400aa5e:	f7f6 fde5 	bl	3400162c <assert_failed>

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3400aa62:	4b32      	ldr	r3, [pc, #200]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400aa64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400aa68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aa6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400aa70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa74:	699a      	ldr	r2, [r3, #24]
3400aa76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa7a:	69db      	ldr	r3, [r3, #28]
3400aa7c:	3b01      	subs	r3, #1
3400aa7e:	041b      	lsls	r3, r3, #16
3400aa80:	4313      	orrs	r3, r2
3400aa82:	4a2a      	ldr	r2, [pc, #168]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400aa84:	430b      	orrs	r3, r1
3400aa86:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400aa8a:	f7fe f813 	bl	34008ab4 <LL_RCC_IC3_Enable>
3400aa8e:	e059      	b.n	3400ab44 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3400aa90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aa94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400aa98:	2b30      	cmp	r3, #48	@ 0x30
3400aa9a:	d14b      	bne.n	3400ab34 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400aa9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaa0:	6a1b      	ldr	r3, [r3, #32]
3400aaa2:	2b00      	cmp	r3, #0
3400aaa4:	d016      	beq.n	3400aad4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400aaa6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aaaa:	6a1b      	ldr	r3, [r3, #32]
3400aaac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400aab0:	d010      	beq.n	3400aad4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400aab2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aab6:	6a1b      	ldr	r3, [r3, #32]
3400aab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400aabc:	d00a      	beq.n	3400aad4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400aabe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aac2:	6a1b      	ldr	r3, [r3, #32]
3400aac4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400aac8:	d004      	beq.n	3400aad4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
3400aaca:	f240 11bd 	movw	r1, #445	@ 0x1bd
3400aace:	4816      	ldr	r0, [pc, #88]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400aad0:	f7f6 fdac 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400aad4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aada:	2b00      	cmp	r3, #0
3400aadc:	d005      	beq.n	3400aaea <HAL_RCCEx_PeriphCLKConfig+0x17f2>
3400aade:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400aae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aae8:	d904      	bls.n	3400aaf4 <HAL_RCCEx_PeriphCLKConfig+0x17fc>
3400aaea:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3400aaee:	480e      	ldr	r0, [pc, #56]	@ (3400ab28 <HAL_RCCEx_PeriphCLKConfig+0x1830>)
3400aaf0:	f7f6 fd9c 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400aaf4:	4b0d      	ldr	r3, [pc, #52]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400aaf6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400aafa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aafe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ab02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab06:	6a1a      	ldr	r2, [r3, #32]
3400ab08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ab0e:	3b01      	subs	r3, #1
3400ab10:	041b      	lsls	r3, r3, #16
3400ab12:	4313      	orrs	r3, r2
3400ab14:	4a05      	ldr	r2, [pc, #20]	@ (3400ab2c <HAL_RCCEx_PeriphCLKConfig+0x1834>)
3400ab16:	430b      	orrs	r3, r1
3400ab18:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ab1c:	f7fe f80a 	bl	34008b34 <LL_RCC_IC4_Enable>
3400ab20:	e010      	b.n	3400ab44 <HAL_RCCEx_PeriphCLKConfig+0x184c>
3400ab22:	bf00      	nop
3400ab24:	03030814 	.word	0x03030814
3400ab28:	3401ae18 	.word	0x3401ae18
3400ab2c:	56028000 	.word	0x56028000
3400ab30:	03010814 	.word	0x03010814
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
3400ab34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400ab3c:	2b10      	cmp	r3, #16
3400ab3e:	d101      	bne.n	3400ab44 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    {
      LL_RCC_CLKP_Enable();
3400ab40:	f7fe fbb8 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
3400ab44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3400ab4c:	4618      	mov	r0, r3
3400ab4e:	f7fd fa77 	bl	34008040 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3400ab52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ab5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3400ab5e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
3400ab62:	2300      	movs	r3, #0
3400ab64:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
3400ab68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3400ab6c:	4603      	mov	r3, r0
3400ab6e:	460a      	mov	r2, r1
3400ab70:	4313      	orrs	r3, r2
3400ab72:	f000 80c5 	beq.w	3400ad00 <HAL_RCCEx_PeriphCLKConfig+0x1a08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
3400ab76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab7a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400ab7e:	4b9f      	ldr	r3, [pc, #636]	@ (3400adfc <HAL_RCCEx_PeriphCLKConfig+0x1b04>)
3400ab80:	429a      	cmp	r2, r3
3400ab82:	d019      	beq.n	3400abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400ab84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab88:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400ab8c:	4b9c      	ldr	r3, [pc, #624]	@ (3400ae00 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400ab8e:	429a      	cmp	r2, r3
3400ab90:	d012      	beq.n	3400abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400ab92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ab96:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400ab9a:	4b9a      	ldr	r3, [pc, #616]	@ (3400ae04 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400ab9c:	429a      	cmp	r2, r3
3400ab9e:	d00b      	beq.n	3400abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400aba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aba4:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400aba8:	4b97      	ldr	r3, [pc, #604]	@ (3400ae08 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400abaa:	429a      	cmp	r2, r3
3400abac:	d004      	beq.n	3400abb8 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
3400abae:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
3400abb2:	4896      	ldr	r0, [pc, #600]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400abb4:	f7f6 fd3a 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3400abb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abbc:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400abc0:	4b90      	ldr	r3, [pc, #576]	@ (3400ae04 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>)
3400abc2:	429a      	cmp	r2, r3
3400abc4:	d142      	bne.n	3400ac4c <HAL_RCCEx_PeriphCLKConfig+0x1954>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400abc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abca:	6a1b      	ldr	r3, [r3, #32]
3400abcc:	2b00      	cmp	r3, #0
3400abce:	d016      	beq.n	3400abfe <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400abd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abd4:	6a1b      	ldr	r3, [r3, #32]
3400abd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400abda:	d010      	beq.n	3400abfe <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400abdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abe0:	6a1b      	ldr	r3, [r3, #32]
3400abe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400abe6:	d00a      	beq.n	3400abfe <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400abe8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400abec:	6a1b      	ldr	r3, [r3, #32]
3400abee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400abf2:	d004      	beq.n	3400abfe <HAL_RCCEx_PeriphCLKConfig+0x1906>
3400abf4:	f240 11dd 	movw	r1, #477	@ 0x1dd
3400abf8:	4884      	ldr	r0, [pc, #528]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400abfa:	f7f6 fd17 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400abfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac04:	2b00      	cmp	r3, #0
3400ac06:	d005      	beq.n	3400ac14 <HAL_RCCEx_PeriphCLKConfig+0x191c>
3400ac08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ac12:	d904      	bls.n	3400ac1e <HAL_RCCEx_PeriphCLKConfig+0x1926>
3400ac14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3400ac18:	487c      	ldr	r0, [pc, #496]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400ac1a:	f7f6 fd07 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400ac1e:	4b7c      	ldr	r3, [pc, #496]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400ac20:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400ac24:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ac28:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ac2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac30:	6a1a      	ldr	r2, [r3, #32]
3400ac32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ac38:	3b01      	subs	r3, #1
3400ac3a:	041b      	lsls	r3, r3, #16
3400ac3c:	4313      	orrs	r3, r2
3400ac3e:	4a74      	ldr	r2, [pc, #464]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400ac40:	430b      	orrs	r3, r1
3400ac42:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400ac46:	f7fd ff75 	bl	34008b34 <LL_RCC_IC4_Enable>
3400ac4a:	e052      	b.n	3400acf2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3400ac4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac50:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400ac54:	4b6c      	ldr	r3, [pc, #432]	@ (3400ae08 <HAL_RCCEx_PeriphCLKConfig+0x1b10>)
3400ac56:	429a      	cmp	r2, r3
3400ac58:	d142      	bne.n	3400ace0 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400ac5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ac60:	2b00      	cmp	r3, #0
3400ac62:	d016      	beq.n	3400ac92 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400ac64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ac6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ac6e:	d010      	beq.n	3400ac92 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400ac70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ac76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ac7a:	d00a      	beq.n	3400ac92 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400ac7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ac82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ac86:	d004      	beq.n	3400ac92 <HAL_RCCEx_PeriphCLKConfig+0x199a>
3400ac88:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3400ac8c:	485f      	ldr	r0, [pc, #380]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400ac8e:	f7f6 fccd 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400ac92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ac98:	2b00      	cmp	r3, #0
3400ac9a:	d005      	beq.n	3400aca8 <HAL_RCCEx_PeriphCLKConfig+0x19b0>
3400ac9c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400aca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400aca6:	d904      	bls.n	3400acb2 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
3400aca8:	f240 11eb 	movw	r1, #491	@ 0x1eb
3400acac:	4857      	ldr	r0, [pc, #348]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400acae:	f7f6 fcbd 	bl	3400162c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400acb2:	4b57      	ldr	r3, [pc, #348]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400acb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400acb8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400acbc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400acc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400acc6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400accc:	3b01      	subs	r3, #1
3400acce:	041b      	lsls	r3, r3, #16
3400acd0:	4313      	orrs	r3, r2
3400acd2:	4a4f      	ldr	r2, [pc, #316]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400acd4:	430b      	orrs	r3, r1
3400acd6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400acda:	f7fd ff6b 	bl	34008bb4 <LL_RCC_IC5_Enable>
3400acde:	e008      	b.n	3400acf2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3400ace0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ace4:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3400ace8:	4b45      	ldr	r3, [pc, #276]	@ (3400ae00 <HAL_RCCEx_PeriphCLKConfig+0x1b08>)
3400acea:	429a      	cmp	r2, r3
3400acec:	d101      	bne.n	3400acf2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
    {
      LL_RCC_CLKP_Enable();
3400acee:	f7fe fae1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3400acf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400acf6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
3400acfa:	4618      	mov	r0, r3
3400acfc:	f7fd fa51 	bl	340081a2 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
3400ad00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ad08:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
3400ad0c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
3400ad10:	2300      	movs	r3, #0
3400ad12:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
3400ad16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
3400ad1a:	4603      	mov	r3, r0
3400ad1c:	460a      	mov	r2, r1
3400ad1e:	4313      	orrs	r3, r2
3400ad20:	f000 80da 	beq.w	3400aed8 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3400ad24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad28:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ad2c:	4b39      	ldr	r3, [pc, #228]	@ (3400ae14 <HAL_RCCEx_PeriphCLKConfig+0x1b1c>)
3400ad2e:	429a      	cmp	r2, r3
3400ad30:	d019      	beq.n	3400ad66 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400ad32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad36:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ad3a:	4b37      	ldr	r3, [pc, #220]	@ (3400ae18 <HAL_RCCEx_PeriphCLKConfig+0x1b20>)
3400ad3c:	429a      	cmp	r2, r3
3400ad3e:	d012      	beq.n	3400ad66 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400ad40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad44:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ad48:	4b34      	ldr	r3, [pc, #208]	@ (3400ae1c <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400ad4a:	429a      	cmp	r2, r3
3400ad4c:	d00b      	beq.n	3400ad66 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400ad4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad52:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ad56:	4b32      	ldr	r3, [pc, #200]	@ (3400ae20 <HAL_RCCEx_PeriphCLKConfig+0x1b28>)
3400ad58:	429a      	cmp	r2, r3
3400ad5a:	d004      	beq.n	3400ad66 <HAL_RCCEx_PeriphCLKConfig+0x1a6e>
3400ad5c:	f240 2105 	movw	r1, #517	@ 0x205
3400ad60:	482a      	ldr	r0, [pc, #168]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400ad62:	f7f6 fc63 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3400ad66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad6a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ad6e:	4b2b      	ldr	r3, [pc, #172]	@ (3400ae1c <HAL_RCCEx_PeriphCLKConfig+0x1b24>)
3400ad70:	429a      	cmp	r2, r3
3400ad72:	d157      	bne.n	3400ae24 <HAL_RCCEx_PeriphCLKConfig+0x1b2c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3400ad74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad78:	6a1b      	ldr	r3, [r3, #32]
3400ad7a:	2b00      	cmp	r3, #0
3400ad7c:	d016      	beq.n	3400adac <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400ad7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad82:	6a1b      	ldr	r3, [r3, #32]
3400ad84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ad88:	d010      	beq.n	3400adac <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400ad8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad8e:	6a1b      	ldr	r3, [r3, #32]
3400ad90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ad94:	d00a      	beq.n	3400adac <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400ad96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ad9a:	6a1b      	ldr	r3, [r3, #32]
3400ad9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ada0:	d004      	beq.n	3400adac <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
3400ada2:	f240 210a 	movw	r1, #522	@ 0x20a
3400ada6:	4819      	ldr	r0, [pc, #100]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400ada8:	f7f6 fc40 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3400adac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400adb2:	2b00      	cmp	r3, #0
3400adb4:	d005      	beq.n	3400adc2 <HAL_RCCEx_PeriphCLKConfig+0x1aca>
3400adb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400adbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400adc0:	d904      	bls.n	3400adcc <HAL_RCCEx_PeriphCLKConfig+0x1ad4>
3400adc2:	f240 210b 	movw	r1, #523	@ 0x20b
3400adc6:	4811      	ldr	r0, [pc, #68]	@ (3400ae0c <HAL_RCCEx_PeriphCLKConfig+0x1b14>)
3400adc8:	f7f6 fc30 	bl	3400162c <assert_failed>

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3400adcc:	4b10      	ldr	r3, [pc, #64]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400adce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400add2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400add6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400adda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400adde:	6a1a      	ldr	r2, [r3, #32]
3400ade0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400ade6:	3b01      	subs	r3, #1
3400ade8:	041b      	lsls	r3, r3, #16
3400adea:	4313      	orrs	r3, r2
3400adec:	4a08      	ldr	r2, [pc, #32]	@ (3400ae10 <HAL_RCCEx_PeriphCLKConfig+0x1b18>)
3400adee:	430b      	orrs	r3, r1
3400adf0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400adf4:	f7fd fe9e 	bl	34008b34 <LL_RCC_IC4_Enable>
3400adf8:	e067      	b.n	3400aeca <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
3400adfa:	bf00      	nop
3400adfc:	0300001c 	.word	0x0300001c
3400ae00:	0301001c 	.word	0x0301001c
3400ae04:	0302001c 	.word	0x0302001c
3400ae08:	0303001c 	.word	0x0303001c
3400ae0c:	3401ae18 	.word	0x3401ae18
3400ae10:	56028000 	.word	0x56028000
3400ae14:	0300041c 	.word	0x0300041c
3400ae18:	0301041c 	.word	0x0301041c
3400ae1c:	0302041c 	.word	0x0302041c
3400ae20:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3400ae24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae28:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400ae2c:	4ba0      	ldr	r3, [pc, #640]	@ (3400b0b0 <HAL_RCCEx_PeriphCLKConfig+0x1db8>)
3400ae2e:	429a      	cmp	r2, r3
3400ae30:	d142      	bne.n	3400aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3400ae32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ae38:	2b00      	cmp	r3, #0
3400ae3a:	d016      	beq.n	3400ae6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400ae3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ae42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ae46:	d010      	beq.n	3400ae6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400ae48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ae4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ae52:	d00a      	beq.n	3400ae6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400ae54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400ae5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ae5e:	d004      	beq.n	3400ae6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
3400ae60:	f240 2117 	movw	r1, #535	@ 0x217
3400ae64:	4893      	ldr	r0, [pc, #588]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400ae66:	f7f6 fbe1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
3400ae6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ae70:	2b00      	cmp	r3, #0
3400ae72:	d005      	beq.n	3400ae80 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
3400ae74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ae7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ae7e:	d904      	bls.n	3400ae8a <HAL_RCCEx_PeriphCLKConfig+0x1b92>
3400ae80:	f44f 7106 	mov.w	r1, #536	@ 0x218
3400ae84:	488b      	ldr	r0, [pc, #556]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400ae86:	f7f6 fbd1 	bl	3400162c <assert_failed>

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3400ae8a:	4b8b      	ldr	r3, [pc, #556]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400ae8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400ae90:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ae94:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ae98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ae9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400ae9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400aea4:	3b01      	subs	r3, #1
3400aea6:	041b      	lsls	r3, r3, #16
3400aea8:	4313      	orrs	r3, r2
3400aeaa:	4a83      	ldr	r2, [pc, #524]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400aeac:	430b      	orrs	r3, r1
3400aeae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
3400aeb2:	f7fd fe7f 	bl	34008bb4 <LL_RCC_IC5_Enable>
3400aeb6:	e008      	b.n	3400aeca <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
3400aeb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aebc:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3400aec0:	4b7e      	ldr	r3, [pc, #504]	@ (3400b0bc <HAL_RCCEx_PeriphCLKConfig+0x1dc4>)
3400aec2:	429a      	cmp	r2, r3
3400aec4:	d101      	bne.n	3400aeca <HAL_RCCEx_PeriphCLKConfig+0x1bd2>
    {
      LL_RCC_CLKP_Enable();
3400aec6:	f7fe f9f5 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
3400aeca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aece:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3400aed2:	4618      	mov	r0, r3
3400aed4:	f7fd f965 	bl	340081a2 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
3400aed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400aee0:	f002 0301 	and.w	r3, r2, #1
3400aee4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
3400aee8:	2300      	movs	r3, #0
3400aeea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
3400aeee:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
3400aef2:	4603      	mov	r3, r0
3400aef4:	460a      	mov	r2, r1
3400aef6:	4313      	orrs	r3, r2
3400aef8:	f000 8100 	beq.w	3400b0fc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3400aefc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af04:	2b00      	cmp	r3, #0
3400af06:	d02e      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af08:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af10:	2b10      	cmp	r3, #16
3400af12:	d028      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af1c:	2b20      	cmp	r3, #32
3400af1e:	d022      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af28:	2b30      	cmp	r3, #48	@ 0x30
3400af2a:	d01c      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af34:	2b40      	cmp	r3, #64	@ 0x40
3400af36:	d016      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af40:	2b50      	cmp	r3, #80	@ 0x50
3400af42:	d010      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af4c:	2b60      	cmp	r3, #96	@ 0x60
3400af4e:	d00a      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af58:	2b70      	cmp	r3, #112	@ 0x70
3400af5a:	d004      	beq.n	3400af66 <HAL_RCCEx_PeriphCLKConfig+0x1c6e>
3400af5c:	f240 2132 	movw	r1, #562	@ 0x232
3400af60:	4854      	ldr	r0, [pc, #336]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400af62:	f7f6 fb63 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
3400af66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400af6e:	2b00      	cmp	r3, #0
3400af70:	d006      	beq.n	3400af80 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
3400af72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400af7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400af7e:	d904      	bls.n	3400af8a <HAL_RCCEx_PeriphCLKConfig+0x1c92>
3400af80:	f240 2133 	movw	r1, #563	@ 0x233
3400af84:	484b      	ldr	r0, [pc, #300]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400af86:	f7f6 fb51 	bl	3400162c <assert_failed>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
3400af8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400af92:	2b20      	cmp	r3, #32
3400af94:	d142      	bne.n	3400b01c <HAL_RCCEx_PeriphCLKConfig+0x1d24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400af96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400af9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400af9c:	2b00      	cmp	r3, #0
3400af9e:	d016      	beq.n	3400afce <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400afa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400afa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400afaa:	d010      	beq.n	3400afce <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400afac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400afb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400afb6:	d00a      	beq.n	3400afce <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400afb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400afbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400afc2:	d004      	beq.n	3400afce <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
3400afc4:	f44f 710e 	mov.w	r1, #568	@ 0x238
3400afc8:	483a      	ldr	r0, [pc, #232]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400afca:	f7f6 fb2f 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400afce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400afd4:	2b00      	cmp	r3, #0
3400afd6:	d005      	beq.n	3400afe4 <HAL_RCCEx_PeriphCLKConfig+0x1cec>
3400afd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400afdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400afde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400afe2:	d904      	bls.n	3400afee <HAL_RCCEx_PeriphCLKConfig+0x1cf6>
3400afe4:	f240 2139 	movw	r1, #569	@ 0x239
3400afe8:	4832      	ldr	r0, [pc, #200]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400afea:	f7f6 fb1f 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400afee:	4b32      	ldr	r3, [pc, #200]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400aff0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400aff4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400aff8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400affc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b002:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b008:	3b01      	subs	r3, #1
3400b00a:	041b      	lsls	r3, r3, #16
3400b00c:	4313      	orrs	r3, r2
3400b00e:	4a2a      	ldr	r2, [pc, #168]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b010:	430b      	orrs	r3, r1
3400b012:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b016:	f7fd fe0d 	bl	34008c34 <LL_RCC_IC7_Enable>
3400b01a:	e059      	b.n	3400b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
3400b01c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b020:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b024:	2b30      	cmp	r3, #48	@ 0x30
3400b026:	d14b      	bne.n	3400b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b028:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b02e:	2b00      	cmp	r3, #0
3400b030:	d016      	beq.n	3400b060 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b032:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b03c:	d010      	beq.n	3400b060 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b03e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b048:	d00a      	beq.n	3400b060 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b050:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b054:	d004      	beq.n	3400b060 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
3400b056:	f240 2145 	movw	r1, #581	@ 0x245
3400b05a:	4816      	ldr	r0, [pc, #88]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b05c:	f7f6 fae6 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b060:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b066:	2b00      	cmp	r3, #0
3400b068:	d005      	beq.n	3400b076 <HAL_RCCEx_PeriphCLKConfig+0x1d7e>
3400b06a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b074:	d904      	bls.n	3400b080 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
3400b076:	f240 2146 	movw	r1, #582	@ 0x246
3400b07a:	480e      	ldr	r0, [pc, #56]	@ (3400b0b4 <HAL_RCCEx_PeriphCLKConfig+0x1dbc>)
3400b07c:	f7f6 fad6 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b080:	4b0d      	ldr	r3, [pc, #52]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b086:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b08a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b08e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b094:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b09a:	3b01      	subs	r3, #1
3400b09c:	041b      	lsls	r3, r3, #16
3400b09e:	4313      	orrs	r3, r2
3400b0a0:	4a05      	ldr	r2, [pc, #20]	@ (3400b0b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc0>)
3400b0a2:	430b      	orrs	r3, r1
3400b0a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b0a8:	f7fd fe04 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400b0ac:	e010      	b.n	3400b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
3400b0ae:	bf00      	nop
3400b0b0:	0303041c 	.word	0x0303041c
3400b0b4:	3401ae18 	.word	0x3401ae18
3400b0b8:	56028000 	.word	0x56028000
3400b0bc:	0301041c 	.word	0x0301041c
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3400b0c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b0c8:	2b10      	cmp	r3, #16
3400b0ca:	d101      	bne.n	3400b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1dd8>
    {
      LL_RCC_CLKP_Enable();
3400b0cc:	f7fe f8f2 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3400b0d0:	4b77      	ldr	r3, [pc, #476]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b0d2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400b0d6:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
3400b0da:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
3400b0de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
3400b0e6:	3b01      	subs	r3, #1
3400b0e8:	021a      	lsls	r2, r3, #8
3400b0ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b0ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3400b0f2:	4313      	orrs	r3, r2
3400b0f4:	4a6e      	ldr	r2, [pc, #440]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b0f6:	430b      	orrs	r3, r1
3400b0f8:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
3400b0fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b100:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b104:	f002 0302 	and.w	r3, r2, #2
3400b108:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
3400b10c:	2300      	movs	r3, #0
3400b10e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3400b112:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
3400b116:	4603      	mov	r3, r0
3400b118:	460a      	mov	r2, r1
3400b11a:	4313      	orrs	r3, r2
3400b11c:	f000 80db 	beq.w	3400b2d6 <HAL_RCCEx_PeriphCLKConfig+0x1fde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3400b120:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b124:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b128:	2b00      	cmp	r3, #0
3400b12a:	d02e      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b12c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b130:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b134:	2b01      	cmp	r3, #1
3400b136:	d028      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b138:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b13c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b140:	2b02      	cmp	r3, #2
3400b142:	d022      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b144:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b148:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b14c:	2b03      	cmp	r3, #3
3400b14e:	d01c      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b150:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b154:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b158:	2b04      	cmp	r3, #4
3400b15a:	d016      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b15c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b160:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b164:	2b05      	cmp	r3, #5
3400b166:	d010      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b168:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b16c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b170:	2b06      	cmp	r3, #6
3400b172:	d00a      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b174:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b178:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b17c:	2b07      	cmp	r3, #7
3400b17e:	d004      	beq.n	3400b18a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
3400b180:	f240 2161 	movw	r1, #609	@ 0x261
3400b184:	484b      	ldr	r0, [pc, #300]	@ (3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b186:	f7f6 fa51 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
3400b18a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b18e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b192:	2b02      	cmp	r3, #2
3400b194:	d142      	bne.n	3400b21c <HAL_RCCEx_PeriphCLKConfig+0x1f24>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400b196:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b19c:	2b00      	cmp	r3, #0
3400b19e:	d016      	beq.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b1a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b1aa:	d010      	beq.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b1ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b1b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b1b6:	d00a      	beq.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400b1be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b1c2:	d004      	beq.n	3400b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ed6>
3400b1c4:	f240 2166 	movw	r1, #614	@ 0x266
3400b1c8:	483a      	ldr	r0, [pc, #232]	@ (3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b1ca:	f7f6 fa2f 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400b1ce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b1d4:	2b00      	cmp	r3, #0
3400b1d6:	d005      	beq.n	3400b1e4 <HAL_RCCEx_PeriphCLKConfig+0x1eec>
3400b1d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b1e2:	d904      	bls.n	3400b1ee <HAL_RCCEx_PeriphCLKConfig+0x1ef6>
3400b1e4:	f240 2167 	movw	r1, #615	@ 0x267
3400b1e8:	4832      	ldr	r0, [pc, #200]	@ (3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b1ea:	f7f6 fa1f 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400b1ee:	4b30      	ldr	r3, [pc, #192]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b1f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b1f4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b1f8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b1fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400b202:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400b208:	3b01      	subs	r3, #1
3400b20a:	041b      	lsls	r3, r3, #16
3400b20c:	4313      	orrs	r3, r2
3400b20e:	4a28      	ldr	r2, [pc, #160]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b210:	430b      	orrs	r3, r1
3400b212:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400b216:	f7fd fd0d 	bl	34008c34 <LL_RCC_IC7_Enable>
3400b21a:	e055      	b.n	3400b2c8 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
3400b21c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b224:	2b03      	cmp	r3, #3
3400b226:	d147      	bne.n	3400b2b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400b228:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b22e:	2b00      	cmp	r3, #0
3400b230:	d016      	beq.n	3400b260 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b232:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b23c:	d010      	beq.n	3400b260 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b23e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b248:	d00a      	beq.n	3400b260 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b24a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b24e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400b250:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b254:	d004      	beq.n	3400b260 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
3400b256:	f240 2173 	movw	r1, #627	@ 0x273
3400b25a:	4816      	ldr	r0, [pc, #88]	@ (3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b25c:	f7f6 f9e6 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400b260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b266:	2b00      	cmp	r3, #0
3400b268:	d005      	beq.n	3400b276 <HAL_RCCEx_PeriphCLKConfig+0x1f7e>
3400b26a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b26e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b274:	d904      	bls.n	3400b280 <HAL_RCCEx_PeriphCLKConfig+0x1f88>
3400b276:	f44f 711d 	mov.w	r1, #628	@ 0x274
3400b27a:	480e      	ldr	r0, [pc, #56]	@ (3400b2b4 <HAL_RCCEx_PeriphCLKConfig+0x1fbc>)
3400b27c:	f7f6 f9d6 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400b280:	4b0b      	ldr	r3, [pc, #44]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b286:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b28a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400b294:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400b29a:	3b01      	subs	r3, #1
3400b29c:	041b      	lsls	r3, r3, #16
3400b29e:	4313      	orrs	r3, r2
3400b2a0:	4a03      	ldr	r2, [pc, #12]	@ (3400b2b0 <HAL_RCCEx_PeriphCLKConfig+0x1fb8>)
3400b2a2:	430b      	orrs	r3, r1
3400b2a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400b2a8:	f7fd fd04 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400b2ac:	e00c      	b.n	3400b2c8 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
3400b2ae:	bf00      	nop
3400b2b0:	56028000 	.word	0x56028000
3400b2b4:	3401ae18 	.word	0x3401ae18
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3400b2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b2c0:	2b01      	cmp	r3, #1
3400b2c2:	d101      	bne.n	3400b2c8 <HAL_RCCEx_PeriphCLKConfig+0x1fd0>
    {
      LL_RCC_CLKP_Enable();
3400b2c4:	f7fd fff6 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3400b2c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400b2d0:	4618      	mov	r0, r3
3400b2d2:	f7fc fdf7 	bl	34007ec4 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3400b2d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b2de:	f002 0308 	and.w	r3, r2, #8
3400b2e2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3400b2e6:	2300      	movs	r3, #0
3400b2e8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
3400b2ec:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
3400b2f0:	4603      	mov	r3, r0
3400b2f2:	460a      	mov	r2, r1
3400b2f4:	4313      	orrs	r3, r2
3400b2f6:	d049      	beq.n	3400b38c <HAL_RCCEx_PeriphCLKConfig+0x2094>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
3400b2f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b300:	2b00      	cmp	r3, #0
3400b302:	d019      	beq.n	3400b338 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b30c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b310:	d012      	beq.n	3400b338 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b312:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b31e:	d00b      	beq.n	3400b338 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b320:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3400b328:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b32c:	d004      	beq.n	3400b338 <HAL_RCCEx_PeriphCLKConfig+0x2040>
3400b32e:	f240 218e 	movw	r1, #654	@ 0x28e
3400b332:	489e      	ldr	r0, [pc, #632]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b334:	f7f6 f97a 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
3400b338:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b340:	2b00      	cmp	r3, #0
3400b342:	d006      	beq.n	3400b352 <HAL_RCCEx_PeriphCLKConfig+0x205a>
3400b344:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b34c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b350:	d904      	bls.n	3400b35c <HAL_RCCEx_PeriphCLKConfig+0x2064>
3400b352:	f240 218f 	movw	r1, #655	@ 0x28f
3400b356:	4895      	ldr	r0, [pc, #596]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b358:	f7f6 f968 	bl	3400162c <assert_failed>

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3400b35c:	4b94      	ldr	r3, [pc, #592]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b35e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400b362:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b366:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b36a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b36e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3400b372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3400b37a:	3b01      	subs	r3, #1
3400b37c:	041b      	lsls	r3, r3, #16
3400b37e:	4313      	orrs	r3, r2
3400b380:	4a8b      	ldr	r2, [pc, #556]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b382:	430b      	orrs	r3, r1
3400b384:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
3400b388:	f7fd fed4 	bl	34009134 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3400b38c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b390:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b394:	f002 0310 	and.w	r3, r2, #16
3400b398:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3400b39c:	2300      	movs	r3, #0
3400b39e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
3400b3a2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
3400b3a6:	4603      	mov	r3, r0
3400b3a8:	460a      	mov	r2, r1
3400b3aa:	4313      	orrs	r3, r2
3400b3ac:	f000 8082 	beq.w	3400b4b4 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
3400b3b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b3b8:	2b00      	cmp	r3, #0
3400b3ba:	d019      	beq.n	3400b3f0 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b3bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b3c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400b3c8:	d012      	beq.n	3400b3f0 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b3ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b3d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400b3d6:	d00b      	beq.n	3400b3f0 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b3d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b3e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400b3e4:	d004      	beq.n	3400b3f0 <HAL_RCCEx_PeriphCLKConfig+0x20f8>
3400b3e6:	f240 219d 	movw	r1, #669	@ 0x29d
3400b3ea:	4870      	ldr	r0, [pc, #448]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b3ec:	f7f6 f91e 	bl	3400162c <assert_failed>

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3400b3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b3f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b3f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400b3fc:	d14a      	bne.n	3400b494 <HAL_RCCEx_PeriphCLKConfig+0x219c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
3400b3fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b406:	2b00      	cmp	r3, #0
3400b408:	d019      	beq.n	3400b43e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b40a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b416:	d012      	beq.n	3400b43e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b424:	d00b      	beq.n	3400b43e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b426:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400b42e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b432:	d004      	beq.n	3400b43e <HAL_RCCEx_PeriphCLKConfig+0x2146>
3400b434:	f240 21a2 	movw	r1, #674	@ 0x2a2
3400b438:	485c      	ldr	r0, [pc, #368]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b43a:	f7f6 f8f7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
3400b43e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b446:	2b00      	cmp	r3, #0
3400b448:	d006      	beq.n	3400b458 <HAL_RCCEx_PeriphCLKConfig+0x2160>
3400b44a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b456:	d904      	bls.n	3400b462 <HAL_RCCEx_PeriphCLKConfig+0x216a>
3400b458:	f240 21a3 	movw	r1, #675	@ 0x2a3
3400b45c:	4853      	ldr	r0, [pc, #332]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b45e:	f7f6 f8e5 	bl	3400162c <assert_failed>

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3400b462:	4b53      	ldr	r3, [pc, #332]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b464:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400b468:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b46c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b470:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b474:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400b478:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b47c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400b480:	3b01      	subs	r3, #1
3400b482:	041b      	lsls	r3, r3, #16
3400b484:	4313      	orrs	r3, r2
3400b486:	4a4a      	ldr	r2, [pc, #296]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b488:	430b      	orrs	r3, r1
3400b48a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
3400b48e:	f7fd fe11 	bl	340090b4 <LL_RCC_IC17_Enable>
3400b492:	e008      	b.n	3400b4a6 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3400b494:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b498:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b49c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400b4a0:	d101      	bne.n	3400b4a6 <HAL_RCCEx_PeriphCLKConfig+0x21ae>
    {
      LL_RCC_CLKP_Enable();
3400b4a2:	f7fd ff07 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
3400b4a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
3400b4ae:	4618      	mov	r0, r3
3400b4b0:	f7fc fd34 	bl	34007f1c <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3400b4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b4bc:	f002 0320 	and.w	r3, r2, #32
3400b4c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3400b4c4:	2300      	movs	r3, #0
3400b4c6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
3400b4ca:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
3400b4ce:	4603      	mov	r3, r0
3400b4d0:	460a      	mov	r2, r1
3400b4d2:	4313      	orrs	r3, r2
3400b4d4:	d07e      	beq.n	3400b5d4 <HAL_RCCEx_PeriphCLKConfig+0x22dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
3400b4d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b4de:	2b00      	cmp	r3, #0
3400b4e0:	d019      	beq.n	3400b516 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b4e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b4ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400b4ee:	d012      	beq.n	3400b516 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b4f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b4f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b4f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400b4fc:	d00b      	beq.n	3400b516 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b4fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b502:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b506:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3400b50a:	d004      	beq.n	3400b516 <HAL_RCCEx_PeriphCLKConfig+0x221e>
3400b50c:	f240 21bd 	movw	r1, #701	@ 0x2bd
3400b510:	4826      	ldr	r0, [pc, #152]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b512:	f7f6 f88b 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
3400b516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b51a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b51e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3400b522:	d147      	bne.n	3400b5b4 <HAL_RCCEx_PeriphCLKConfig+0x22bc>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
3400b524:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400b52a:	2b00      	cmp	r3, #0
3400b52c:	d016      	beq.n	3400b55c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400b52e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400b534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b538:	d010      	beq.n	3400b55c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400b53a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b53e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400b540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b544:	d00a      	beq.n	3400b55c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400b546:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400b54c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b550:	d004      	beq.n	3400b55c <HAL_RCCEx_PeriphCLKConfig+0x2264>
3400b552:	f240 21c2 	movw	r1, #706	@ 0x2c2
3400b556:	4815      	ldr	r0, [pc, #84]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b558:	f7f6 f868 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
3400b55c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400b562:	2b00      	cmp	r3, #0
3400b564:	d005      	beq.n	3400b572 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3400b566:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b56a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400b56c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b570:	d904      	bls.n	3400b57c <HAL_RCCEx_PeriphCLKConfig+0x2284>
3400b572:	f240 21c3 	movw	r1, #707	@ 0x2c3
3400b576:	480d      	ldr	r0, [pc, #52]	@ (3400b5ac <HAL_RCCEx_PeriphCLKConfig+0x22b4>)
3400b578:	f7f6 f858 	bl	3400162c <assert_failed>

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3400b57c:	4b0c      	ldr	r3, [pc, #48]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b57e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400b582:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b586:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b58a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b58e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
3400b590:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400b596:	3b01      	subs	r3, #1
3400b598:	041b      	lsls	r3, r3, #16
3400b59a:	4313      	orrs	r3, r2
3400b59c:	4a04      	ldr	r2, [pc, #16]	@ (3400b5b0 <HAL_RCCEx_PeriphCLKConfig+0x22b8>)
3400b59e:	430b      	orrs	r3, r1
3400b5a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
3400b5a4:	f7fd fc46 	bl	34008e34 <LL_RCC_IC12_Enable>
3400b5a8:	e00d      	b.n	3400b5c6 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
3400b5aa:	bf00      	nop
3400b5ac:	3401ae18 	.word	0x3401ae18
3400b5b0:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
3400b5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400b5c0:	d101      	bne.n	3400b5c6 <HAL_RCCEx_PeriphCLKConfig+0x22ce>
    {
      LL_RCC_CLKP_Enable();
3400b5c2:	f7fd fe77 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
3400b5c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400b5ce:	4618      	mov	r0, r3
3400b5d0:	f7fc fcba 	bl	34007f48 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3400b5d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b5dc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
3400b5e0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
3400b5e4:	2300      	movs	r3, #0
3400b5e6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3400b5ea:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3400b5ee:	4603      	mov	r3, r0
3400b5f0:	460a      	mov	r2, r1
3400b5f2:	4313      	orrs	r3, r2
3400b5f4:	d01f      	beq.n	3400b636 <HAL_RCCEx_PeriphCLKConfig+0x233e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
3400b5f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b5fa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b5fe:	2b00      	cmp	r3, #0
3400b600:	d012      	beq.n	3400b628 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400b602:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b606:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b60a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400b60e:	d00b      	beq.n	3400b628 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400b610:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b614:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400b61c:	d004      	beq.n	3400b628 <HAL_RCCEx_PeriphCLKConfig+0x2330>
3400b61e:	f240 21dd 	movw	r1, #733	@ 0x2dd
3400b622:	48c1      	ldr	r0, [pc, #772]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b624:	f7f6 f802 	bl	3400162c <assert_failed>

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
3400b628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b62c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3400b630:	4618      	mov	r0, r3
3400b632:	f7fc fc9f 	bl	34007f74 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
3400b636:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b63e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
3400b642:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
3400b646:	2300      	movs	r3, #0
3400b648:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
3400b64c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
3400b650:	4603      	mov	r3, r0
3400b652:	460a      	mov	r2, r1
3400b654:	4313      	orrs	r3, r2
3400b656:	d018      	beq.n	3400b68a <HAL_RCCEx_PeriphCLKConfig+0x2392>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
3400b658:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b65c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b660:	2b00      	cmp	r3, #0
3400b662:	d00b      	beq.n	3400b67c <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400b664:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b668:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b66c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400b670:	d004      	beq.n	3400b67c <HAL_RCCEx_PeriphCLKConfig+0x2384>
3400b672:	f240 21e7 	movw	r1, #743	@ 0x2e7
3400b676:	48ac      	ldr	r0, [pc, #688]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b678:	f7f5 ffd8 	bl	3400162c <assert_failed>

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
3400b67c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b680:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3400b684:	4618      	mov	r0, r3
3400b686:	f7fc fc99 	bl	34007fbc <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3400b68a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b692:	f402 7380 	and.w	r3, r2, #256	@ 0x100
3400b696:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
3400b69a:	2300      	movs	r3, #0
3400b69c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3400b6a0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3400b6a4:	4603      	mov	r3, r0
3400b6a6:	460a      	mov	r2, r1
3400b6a8:	4313      	orrs	r3, r2
3400b6aa:	d018      	beq.n	3400b6de <HAL_RCCEx_PeriphCLKConfig+0x23e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
3400b6ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400b6b4:	2b00      	cmp	r3, #0
3400b6b6:	d00b      	beq.n	3400b6d0 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400b6b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400b6c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400b6c4:	d004      	beq.n	3400b6d0 <HAL_RCCEx_PeriphCLKConfig+0x23d8>
3400b6c6:	f240 21f1 	movw	r1, #753	@ 0x2f1
3400b6ca:	4897      	ldr	r0, [pc, #604]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b6cc:	f7f5 ffae 	bl	3400162c <assert_failed>

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
3400b6d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3400b6d8:	4618      	mov	r0, r3
3400b6da:	f7fc fc85 	bl	34007fe8 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
3400b6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b6e6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400b6ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
3400b6ee:	2300      	movs	r3, #0
3400b6f0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3400b6f4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400b6f8:	4603      	mov	r3, r0
3400b6fa:	460a      	mov	r2, r1
3400b6fc:	4313      	orrs	r3, r2
3400b6fe:	f000 8093 	beq.w	3400b828 <HAL_RCCEx_PeriphCLKConfig+0x2530>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
3400b702:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b706:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b70a:	2b00      	cmp	r3, #0
3400b70c:	d016      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400b70e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b712:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b716:	2b01      	cmp	r3, #1
3400b718:	d010      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400b71a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b71e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b722:	2b02      	cmp	r3, #2
3400b724:	d00a      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400b726:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b72a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b72e:	2b03      	cmp	r3, #3
3400b730:	d004      	beq.n	3400b73c <HAL_RCCEx_PeriphCLKConfig+0x2444>
3400b732:	f240 21fb 	movw	r1, #763	@ 0x2fb
3400b736:	487c      	ldr	r0, [pc, #496]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b738:	f7f5 ff78 	bl	3400162c <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
3400b73c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b744:	2b00      	cmp	r3, #0
3400b746:	d005      	beq.n	3400b754 <HAL_RCCEx_PeriphCLKConfig+0x245c>
3400b748:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b750:	2b10      	cmp	r3, #16
3400b752:	d904      	bls.n	3400b75e <HAL_RCCEx_PeriphCLKConfig+0x2466>
3400b754:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3400b758:	4873      	ldr	r0, [pc, #460]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b75a:	f7f5 ff67 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3400b75e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b762:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b766:	2b02      	cmp	r3, #2
3400b768:	d142      	bne.n	3400b7f0 <HAL_RCCEx_PeriphCLKConfig+0x24f8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3400b76a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b76e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400b770:	2b00      	cmp	r3, #0
3400b772:	d016      	beq.n	3400b7a2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400b774:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400b77a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b77e:	d010      	beq.n	3400b7a2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400b780:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400b786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b78a:	d00a      	beq.n	3400b7a2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400b78c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3400b792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b796:	d004      	beq.n	3400b7a2 <HAL_RCCEx_PeriphCLKConfig+0x24aa>
3400b798:	f240 3101 	movw	r1, #769	@ 0x301
3400b79c:	4862      	ldr	r0, [pc, #392]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b79e:	f7f5 ff45 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3400b7a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400b7a8:	2b00      	cmp	r3, #0
3400b7aa:	d005      	beq.n	3400b7b8 <HAL_RCCEx_PeriphCLKConfig+0x24c0>
3400b7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400b7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b7b6:	d904      	bls.n	3400b7c2 <HAL_RCCEx_PeriphCLKConfig+0x24ca>
3400b7b8:	f240 3102 	movw	r1, #770	@ 0x302
3400b7bc:	485a      	ldr	r0, [pc, #360]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b7be:	f7f5 ff35 	bl	3400162c <assert_failed>

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400b7c2:	4b5a      	ldr	r3, [pc, #360]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b7c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400b7c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b7cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b7d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3400b7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400b7dc:	3b01      	subs	r3, #1
3400b7de:	041b      	lsls	r3, r3, #16
3400b7e0:	4313      	orrs	r3, r2
3400b7e2:	4a52      	ldr	r2, [pc, #328]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b7e4:	430b      	orrs	r3, r1
3400b7e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3400b7ea:	f7fd fb63 	bl	34008eb4 <LL_RCC_IC13_Enable>
3400b7ee:	e007      	b.n	3400b800 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400b7f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b7f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b7f8:	2b01      	cmp	r3, #1
3400b7fa:	d101      	bne.n	3400b800 <HAL_RCCEx_PeriphCLKConfig+0x2508>
    {
      LL_RCC_CLKP_Enable();
3400b7fc:	f7fd fd5a 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400b800:	4b4a      	ldr	r3, [pc, #296]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b802:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400b806:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3400b80a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b80e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400b812:	3b01      	subs	r3, #1
3400b814:	011a      	lsls	r2, r3, #4
3400b816:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b81a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400b81e:	4313      	orrs	r3, r2
3400b820:	4a42      	ldr	r2, [pc, #264]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b822:	430b      	orrs	r3, r1
3400b824:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
3400b828:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b830:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
3400b834:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
3400b838:	2300      	movs	r3, #0
3400b83a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
3400b83e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
3400b842:	4603      	mov	r3, r0
3400b844:	460a      	mov	r2, r1
3400b846:	4313      	orrs	r3, r2
3400b848:	f000 8081 	beq.w	3400b94e <HAL_RCCEx_PeriphCLKConfig+0x2656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3400b84c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b850:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b854:	2b00      	cmp	r3, #0
3400b856:	d016      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400b858:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b85c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b860:	2b01      	cmp	r3, #1
3400b862:	d010      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400b864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b86c:	2b02      	cmp	r3, #2
3400b86e:	d00a      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400b870:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b878:	2b03      	cmp	r3, #3
3400b87a:	d004      	beq.n	3400b886 <HAL_RCCEx_PeriphCLKConfig+0x258e>
3400b87c:	f240 311d 	movw	r1, #797	@ 0x31d
3400b880:	4829      	ldr	r0, [pc, #164]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b882:	f7f5 fed3 	bl	3400162c <assert_failed>

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3400b886:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b88a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b88e:	2b02      	cmp	r3, #2
3400b890:	d14e      	bne.n	3400b930 <HAL_RCCEx_PeriphCLKConfig+0x2638>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
3400b892:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b89a:	2b00      	cmp	r3, #0
3400b89c:	d019      	beq.n	3400b8d2 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400b89e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b8a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b8aa:	d012      	beq.n	3400b8d2 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400b8ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b8b8:	d00b      	beq.n	3400b8d2 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400b8ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400b8c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400b8c6:	d004      	beq.n	3400b8d2 <HAL_RCCEx_PeriphCLKConfig+0x25da>
3400b8c8:	f240 3122 	movw	r1, #802	@ 0x322
3400b8cc:	4816      	ldr	r0, [pc, #88]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b8ce:	f7f5 fead 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3400b8d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400b8da:	2b00      	cmp	r3, #0
3400b8dc:	d006      	beq.n	3400b8ec <HAL_RCCEx_PeriphCLKConfig+0x25f4>
3400b8de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b8e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400b8e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400b8ea:	d904      	bls.n	3400b8f6 <HAL_RCCEx_PeriphCLKConfig+0x25fe>
3400b8ec:	f240 3123 	movw	r1, #803	@ 0x323
3400b8f0:	480d      	ldr	r0, [pc, #52]	@ (3400b928 <HAL_RCCEx_PeriphCLKConfig+0x2630>)
3400b8f2:	f7f5 fe9b 	bl	3400162c <assert_failed>

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3400b8f6:	4b0d      	ldr	r3, [pc, #52]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b8f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400b8fc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400b900:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400b904:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b908:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400b90c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
3400b914:	3b01      	subs	r3, #1
3400b916:	041b      	lsls	r3, r3, #16
3400b918:	4313      	orrs	r3, r2
3400b91a:	4a04      	ldr	r2, [pc, #16]	@ (3400b92c <HAL_RCCEx_PeriphCLKConfig+0x2634>)
3400b91c:	430b      	orrs	r3, r1
3400b91e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
3400b922:	f7fd fc47 	bl	340091b4 <LL_RCC_IC19_Enable>
3400b926:	e00b      	b.n	3400b940 <HAL_RCCEx_PeriphCLKConfig+0x2648>
3400b928:	3401ae18 	.word	0x3401ae18
3400b92c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
3400b930:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b934:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b938:	2b01      	cmp	r3, #1
3400b93a:	d101      	bne.n	3400b940 <HAL_RCCEx_PeriphCLKConfig+0x2648>
    {
      LL_RCC_CLKP_Enable();
3400b93c:	f7fd fcba 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
3400b940:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400b948:	4618      	mov	r0, r3
3400b94a:	f7fc fb63 	bl	34008014 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3400b94e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b952:	e9d3 2300 	ldrd	r2, r3, [r3]
3400b956:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400b95a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
3400b95e:	2300      	movs	r3, #0
3400b960:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3400b964:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400b968:	4603      	mov	r3, r0
3400b96a:	460a      	mov	r2, r1
3400b96c:	4313      	orrs	r3, r2
3400b96e:	f000 80d3 	beq.w	3400bb18 <HAL_RCCEx_PeriphCLKConfig+0x2820>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3400b972:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b976:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b97a:	4bad      	ldr	r3, [pc, #692]	@ (3400bc30 <HAL_RCCEx_PeriphCLKConfig+0x2938>)
3400b97c:	429a      	cmp	r2, r3
3400b97e:	d027      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b980:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b984:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b988:	4baa      	ldr	r3, [pc, #680]	@ (3400bc34 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400b98a:	429a      	cmp	r2, r3
3400b98c:	d020      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b98e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b992:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b996:	4ba8      	ldr	r3, [pc, #672]	@ (3400bc38 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400b998:	429a      	cmp	r2, r3
3400b99a:	d019      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b99c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b9a4:	4ba5      	ldr	r3, [pc, #660]	@ (3400bc3c <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400b9a6:	429a      	cmp	r2, r3
3400b9a8:	d012      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b9aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9ae:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b9b2:	4ba3      	ldr	r3, [pc, #652]	@ (3400bc40 <HAL_RCCEx_PeriphCLKConfig+0x2948>)
3400b9b4:	429a      	cmp	r2, r3
3400b9b6:	d00b      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b9b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b9c0:	4ba0      	ldr	r3, [pc, #640]	@ (3400bc44 <HAL_RCCEx_PeriphCLKConfig+0x294c>)
3400b9c2:	429a      	cmp	r2, r3
3400b9c4:	d004      	beq.n	3400b9d0 <HAL_RCCEx_PeriphCLKConfig+0x26d8>
3400b9c6:	f240 313d 	movw	r1, #829	@ 0x33d
3400b9ca:	489f      	ldr	r0, [pc, #636]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400b9cc:	f7f5 fe2e 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
3400b9d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400b9d8:	4b97      	ldr	r3, [pc, #604]	@ (3400bc38 <HAL_RCCEx_PeriphCLKConfig+0x2940>)
3400b9da:	429a      	cmp	r2, r3
3400b9dc:	d142      	bne.n	3400ba64 <HAL_RCCEx_PeriphCLKConfig+0x276c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400b9de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400b9e4:	2b00      	cmp	r3, #0
3400b9e6:	d016      	beq.n	3400ba16 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400b9e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400b9ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400b9f2:	d010      	beq.n	3400ba16 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400b9f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400b9f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400b9fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400b9fe:	d00a      	beq.n	3400ba16 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400ba00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400ba06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ba0a:	d004      	beq.n	3400ba16 <HAL_RCCEx_PeriphCLKConfig+0x271e>
3400ba0c:	f240 3142 	movw	r1, #834	@ 0x342
3400ba10:	488d      	ldr	r0, [pc, #564]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400ba12:	f7f5 fe0b 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400ba16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ba1c:	2b00      	cmp	r3, #0
3400ba1e:	d005      	beq.n	3400ba2c <HAL_RCCEx_PeriphCLKConfig+0x2734>
3400ba20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ba26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ba2a:	d904      	bls.n	3400ba36 <HAL_RCCEx_PeriphCLKConfig+0x273e>
3400ba2c:	f240 3143 	movw	r1, #835	@ 0x343
3400ba30:	4885      	ldr	r0, [pc, #532]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400ba32:	f7f5 fdfb 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400ba36:	4b85      	ldr	r3, [pc, #532]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400ba38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400ba3c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ba40:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ba44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400ba4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400ba50:	3b01      	subs	r3, #1
3400ba52:	041b      	lsls	r3, r3, #16
3400ba54:	4313      	orrs	r3, r2
3400ba56:	4a7d      	ldr	r2, [pc, #500]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400ba58:	430b      	orrs	r3, r1
3400ba5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400ba5e:	f7fd f9a9 	bl	34008db4 <LL_RCC_IC10_Enable>
3400ba62:	e052      	b.n	3400bb0a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
3400ba64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba68:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400ba6c:	4b73      	ldr	r3, [pc, #460]	@ (3400bc3c <HAL_RCCEx_PeriphCLKConfig+0x2944>)
3400ba6e:	429a      	cmp	r2, r3
3400ba70:	d142      	bne.n	3400baf8 <HAL_RCCEx_PeriphCLKConfig+0x2800>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400ba72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ba78:	2b00      	cmp	r3, #0
3400ba7a:	d016      	beq.n	3400baaa <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400ba7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ba82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ba86:	d010      	beq.n	3400baaa <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400ba88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ba8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ba92:	d00a      	beq.n	3400baaa <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400ba94:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ba98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400ba9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ba9e:	d004      	beq.n	3400baaa <HAL_RCCEx_PeriphCLKConfig+0x27b2>
3400baa0:	f240 314f 	movw	r1, #847	@ 0x34f
3400baa4:	4868      	ldr	r0, [pc, #416]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400baa6:	f7f5 fdc1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400baaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400baae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bab0:	2b00      	cmp	r3, #0
3400bab2:	d005      	beq.n	3400bac0 <HAL_RCCEx_PeriphCLKConfig+0x27c8>
3400bab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400baba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400babe:	d904      	bls.n	3400baca <HAL_RCCEx_PeriphCLKConfig+0x27d2>
3400bac0:	f44f 7154 	mov.w	r1, #848	@ 0x350
3400bac4:	4860      	ldr	r0, [pc, #384]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bac6:	f7f5 fdb1 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400baca:	4b60      	ldr	r3, [pc, #384]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bacc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400bad0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bad4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bad8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400badc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400bade:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bae4:	3b01      	subs	r3, #1
3400bae6:	041b      	lsls	r3, r3, #16
3400bae8:	4313      	orrs	r3, r2
3400baea:	4a58      	ldr	r2, [pc, #352]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400baec:	430b      	orrs	r3, r1
3400baee:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400baf2:	f7fd fa5f 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400baf6:	e008      	b.n	3400bb0a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
3400baf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bafc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400bb00:	4b4c      	ldr	r3, [pc, #304]	@ (3400bc34 <HAL_RCCEx_PeriphCLKConfig+0x293c>)
3400bb02:	429a      	cmp	r2, r3
3400bb04:	d101      	bne.n	3400bb0a <HAL_RCCEx_PeriphCLKConfig+0x2812>
    {
      LL_RCC_CLKP_Enable();
3400bb06:	f7fd fbd5 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
3400bb0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400bb12:	4618      	mov	r0, r3
3400bb14:	f7fc faaa 	bl	3400806c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
3400bb18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bb20:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
3400bb24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
3400bb28:	2300      	movs	r3, #0
3400bb2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
3400bb2e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
3400bb32:	4603      	mov	r3, r0
3400bb34:	460a      	mov	r2, r1
3400bb36:	4313      	orrs	r3, r2
3400bb38:	f000 80f0 	beq.w	3400bd1c <HAL_RCCEx_PeriphCLKConfig+0x2a24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
3400bb3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb40:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb44:	4b42      	ldr	r3, [pc, #264]	@ (3400bc50 <HAL_RCCEx_PeriphCLKConfig+0x2958>)
3400bb46:	429a      	cmp	r2, r3
3400bb48:	d027      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb4e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb52:	4b40      	ldr	r3, [pc, #256]	@ (3400bc54 <HAL_RCCEx_PeriphCLKConfig+0x295c>)
3400bb54:	429a      	cmp	r2, r3
3400bb56:	d020      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb5c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb60:	4b3d      	ldr	r3, [pc, #244]	@ (3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400bb62:	429a      	cmp	r2, r3
3400bb64:	d019      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb6a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb6e:	4b3b      	ldr	r3, [pc, #236]	@ (3400bc5c <HAL_RCCEx_PeriphCLKConfig+0x2964>)
3400bb70:	429a      	cmp	r2, r3
3400bb72:	d012      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb78:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb7c:	4b38      	ldr	r3, [pc, #224]	@ (3400bc60 <HAL_RCCEx_PeriphCLKConfig+0x2968>)
3400bb7e:	429a      	cmp	r2, r3
3400bb80:	d00b      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb86:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bb8a:	4b36      	ldr	r3, [pc, #216]	@ (3400bc64 <HAL_RCCEx_PeriphCLKConfig+0x296c>)
3400bb8c:	429a      	cmp	r2, r3
3400bb8e:	d004      	beq.n	3400bb9a <HAL_RCCEx_PeriphCLKConfig+0x28a2>
3400bb90:	f240 316a 	movw	r1, #874	@ 0x36a
3400bb94:	482c      	ldr	r0, [pc, #176]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bb96:	f7f5 fd49 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
3400bb9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bb9e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bba2:	4b2d      	ldr	r3, [pc, #180]	@ (3400bc58 <HAL_RCCEx_PeriphCLKConfig+0x2960>)
3400bba4:	429a      	cmp	r2, r3
3400bba6:	d15f      	bne.n	3400bc68 <HAL_RCCEx_PeriphCLKConfig+0x2970>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400bba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bbae:	2b00      	cmp	r3, #0
3400bbb0:	d016      	beq.n	3400bbe0 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400bbb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bbb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bbbc:	d010      	beq.n	3400bbe0 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400bbbe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bbc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bbc8:	d00a      	beq.n	3400bbe0 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400bbca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bbd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bbd4:	d004      	beq.n	3400bbe0 <HAL_RCCEx_PeriphCLKConfig+0x28e8>
3400bbd6:	f240 316f 	movw	r1, #879	@ 0x36f
3400bbda:	481b      	ldr	r0, [pc, #108]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bbdc:	f7f5 fd26 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400bbe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bbe6:	2b00      	cmp	r3, #0
3400bbe8:	d005      	beq.n	3400bbf6 <HAL_RCCEx_PeriphCLKConfig+0x28fe>
3400bbea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bbee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bbf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bbf4:	d904      	bls.n	3400bc00 <HAL_RCCEx_PeriphCLKConfig+0x2908>
3400bbf6:	f44f 715c 	mov.w	r1, #880	@ 0x370
3400bbfa:	4813      	ldr	r0, [pc, #76]	@ (3400bc48 <HAL_RCCEx_PeriphCLKConfig+0x2950>)
3400bbfc:	f7f5 fd16 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400bc00:	4b12      	ldr	r3, [pc, #72]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bc02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400bc06:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bc0a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bc0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400bc14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bc1a:	3b01      	subs	r3, #1
3400bc1c:	041b      	lsls	r3, r3, #16
3400bc1e:	4313      	orrs	r3, r2
3400bc20:	4a0a      	ldr	r2, [pc, #40]	@ (3400bc4c <HAL_RCCEx_PeriphCLKConfig+0x2954>)
3400bc22:	430b      	orrs	r3, r1
3400bc24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400bc28:	f7fd f8c4 	bl	34008db4 <LL_RCC_IC10_Enable>
3400bc2c:	e06f      	b.n	3400bd0e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
3400bc2e:	bf00      	nop
3400bc30:	0700000c 	.word	0x0700000c
3400bc34:	0701000c 	.word	0x0701000c
3400bc38:	0702000c 	.word	0x0702000c
3400bc3c:	0703000c 	.word	0x0703000c
3400bc40:	0704000c 	.word	0x0704000c
3400bc44:	0705000c 	.word	0x0705000c
3400bc48:	3401ae18 	.word	0x3401ae18
3400bc4c:	56028000 	.word	0x56028000
3400bc50:	0700040c 	.word	0x0700040c
3400bc54:	0701040c 	.word	0x0701040c
3400bc58:	0702040c 	.word	0x0702040c
3400bc5c:	0703040c 	.word	0x0703040c
3400bc60:	0704040c 	.word	0x0704040c
3400bc64:	0705040c 	.word	0x0705040c
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400bc68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc6c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bc70:	4b95      	ldr	r3, [pc, #596]	@ (3400bec8 <HAL_RCCEx_PeriphCLKConfig+0x2bd0>)
3400bc72:	429a      	cmp	r2, r3
3400bc74:	d142      	bne.n	3400bcfc <HAL_RCCEx_PeriphCLKConfig+0x2a04>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400bc76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bc7c:	2b00      	cmp	r3, #0
3400bc7e:	d016      	beq.n	3400bcae <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400bc80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bc86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bc8a:	d010      	beq.n	3400bcae <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400bc8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bc92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bc96:	d00a      	beq.n	3400bcae <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400bc98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bc9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400bc9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bca2:	d004      	beq.n	3400bcae <HAL_RCCEx_PeriphCLKConfig+0x29b6>
3400bca4:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3400bca8:	4888      	ldr	r0, [pc, #544]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400bcaa:	f7f5 fcbf 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400bcae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bcb4:	2b00      	cmp	r3, #0
3400bcb6:	d005      	beq.n	3400bcc4 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
3400bcb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bcbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bcbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bcc2:	d904      	bls.n	3400bcce <HAL_RCCEx_PeriphCLKConfig+0x29d6>
3400bcc4:	f240 317d 	movw	r1, #893	@ 0x37d
3400bcc8:	4880      	ldr	r0, [pc, #512]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400bcca:	f7f5 fcaf 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400bcce:	4b80      	ldr	r3, [pc, #512]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400bcd0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400bcd4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bcd8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bcdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bce0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400bce2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400bce8:	3b01      	subs	r3, #1
3400bcea:	041b      	lsls	r3, r3, #16
3400bcec:	4313      	orrs	r3, r2
3400bcee:	4a78      	ldr	r2, [pc, #480]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400bcf0:	430b      	orrs	r3, r1
3400bcf2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400bcf6:	f7fd f95d 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400bcfa:	e008      	b.n	3400bd0e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3400bcfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd00:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400bd04:	4b73      	ldr	r3, [pc, #460]	@ (3400bed4 <HAL_RCCEx_PeriphCLKConfig+0x2bdc>)
3400bd06:	429a      	cmp	r2, r3
3400bd08:	d101      	bne.n	3400bd0e <HAL_RCCEx_PeriphCLKConfig+0x2a16>
    {
      LL_RCC_CLKP_Enable();
3400bd0a:	f7fd fad3 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
3400bd0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3400bd16:	4618      	mov	r0, r3
3400bd18:	f7fc f9a8 	bl	3400806c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3400bd1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bd24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
3400bd28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
3400bd2c:	2300      	movs	r3, #0
3400bd2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400bd32:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
3400bd36:	4603      	mov	r3, r0
3400bd38:	460a      	mov	r2, r1
3400bd3a:	4313      	orrs	r3, r2
3400bd3c:	f000 80e8 	beq.w	3400bf10 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3400bd40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd44:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd48:	4b63      	ldr	r3, [pc, #396]	@ (3400bed8 <HAL_RCCEx_PeriphCLKConfig+0x2be0>)
3400bd4a:	429a      	cmp	r2, r3
3400bd4c:	d027      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd4e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd52:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd56:	4b61      	ldr	r3, [pc, #388]	@ (3400bedc <HAL_RCCEx_PeriphCLKConfig+0x2be4>)
3400bd58:	429a      	cmp	r2, r3
3400bd5a:	d020      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd64:	4b5e      	ldr	r3, [pc, #376]	@ (3400bee0 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400bd66:	429a      	cmp	r2, r3
3400bd68:	d019      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd6e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd72:	4b5c      	ldr	r3, [pc, #368]	@ (3400bee4 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400bd74:	429a      	cmp	r2, r3
3400bd76:	d012      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd80:	4b59      	ldr	r3, [pc, #356]	@ (3400bee8 <HAL_RCCEx_PeriphCLKConfig+0x2bf0>)
3400bd82:	429a      	cmp	r2, r3
3400bd84:	d00b      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bd8a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bd8e:	4b57      	ldr	r3, [pc, #348]	@ (3400beec <HAL_RCCEx_PeriphCLKConfig+0x2bf4>)
3400bd90:	429a      	cmp	r2, r3
3400bd92:	d004      	beq.n	3400bd9e <HAL_RCCEx_PeriphCLKConfig+0x2aa6>
3400bd94:	f240 3197 	movw	r1, #919	@ 0x397
3400bd98:	484c      	ldr	r0, [pc, #304]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400bd9a:	f7f5 fc47 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
3400bd9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bda2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bda6:	4b4e      	ldr	r3, [pc, #312]	@ (3400bee0 <HAL_RCCEx_PeriphCLKConfig+0x2be8>)
3400bda8:	429a      	cmp	r2, r3
3400bdaa:	d142      	bne.n	3400be32 <HAL_RCCEx_PeriphCLKConfig+0x2b3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400bdac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bdb2:	2b00      	cmp	r3, #0
3400bdb4:	d016      	beq.n	3400bde4 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400bdb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bdbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bdc0:	d010      	beq.n	3400bde4 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400bdc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bdc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bdcc:	d00a      	beq.n	3400bde4 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400bdce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bdd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bdd8:	d004      	beq.n	3400bde4 <HAL_RCCEx_PeriphCLKConfig+0x2aec>
3400bdda:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3400bdde:	483b      	ldr	r0, [pc, #236]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400bde0:	f7f5 fc24 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400bde4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bdea:	2b00      	cmp	r3, #0
3400bdec:	d005      	beq.n	3400bdfa <HAL_RCCEx_PeriphCLKConfig+0x2b02>
3400bdee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bdf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bdf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bdf8:	d904      	bls.n	3400be04 <HAL_RCCEx_PeriphCLKConfig+0x2b0c>
3400bdfa:	f240 319d 	movw	r1, #925	@ 0x39d
3400bdfe:	4833      	ldr	r0, [pc, #204]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400be00:	f7f5 fc14 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400be04:	4b32      	ldr	r3, [pc, #200]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400be06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400be0a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400be0e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400be12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400be18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400be1e:	3b01      	subs	r3, #1
3400be20:	041b      	lsls	r3, r3, #16
3400be22:	4313      	orrs	r3, r2
3400be24:	4a2a      	ldr	r2, [pc, #168]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400be26:	430b      	orrs	r3, r1
3400be28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400be2c:	f7fc ffc2 	bl	34008db4 <LL_RCC_IC10_Enable>
3400be30:	e067      	b.n	3400bf02 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
3400be32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be36:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400be3a:	4b2a      	ldr	r3, [pc, #168]	@ (3400bee4 <HAL_RCCEx_PeriphCLKConfig+0x2bec>)
3400be3c:	429a      	cmp	r2, r3
3400be3e:	d157      	bne.n	3400bef0 <HAL_RCCEx_PeriphCLKConfig+0x2bf8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400be40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400be46:	2b00      	cmp	r3, #0
3400be48:	d016      	beq.n	3400be78 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400be4a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400be50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400be54:	d010      	beq.n	3400be78 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400be56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400be5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400be60:	d00a      	beq.n	3400be78 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400be62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400be68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400be6c:	d004      	beq.n	3400be78 <HAL_RCCEx_PeriphCLKConfig+0x2b80>
3400be6e:	f240 31a9 	movw	r1, #937	@ 0x3a9
3400be72:	4816      	ldr	r0, [pc, #88]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400be74:	f7f5 fbda 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400be78:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400be7e:	2b00      	cmp	r3, #0
3400be80:	d005      	beq.n	3400be8e <HAL_RCCEx_PeriphCLKConfig+0x2b96>
3400be82:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400be86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400be88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400be8c:	d904      	bls.n	3400be98 <HAL_RCCEx_PeriphCLKConfig+0x2ba0>
3400be8e:	f240 31aa 	movw	r1, #938	@ 0x3aa
3400be92:	480e      	ldr	r0, [pc, #56]	@ (3400becc <HAL_RCCEx_PeriphCLKConfig+0x2bd4>)
3400be94:	f7f5 fbca 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400be98:	4b0d      	ldr	r3, [pc, #52]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400be9a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400be9e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400bea2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400bea6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400beaa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400beac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400beb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400beb2:	3b01      	subs	r3, #1
3400beb4:	041b      	lsls	r3, r3, #16
3400beb6:	4313      	orrs	r3, r2
3400beb8:	4a05      	ldr	r2, [pc, #20]	@ (3400bed0 <HAL_RCCEx_PeriphCLKConfig+0x2bd8>)
3400beba:	430b      	orrs	r3, r1
3400bebc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400bec0:	f7fd f878 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400bec4:	e01d      	b.n	3400bf02 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
3400bec6:	bf00      	nop
3400bec8:	0703040c 	.word	0x0703040c
3400becc:	3401ae18 	.word	0x3401ae18
3400bed0:	56028000 	.word	0x56028000
3400bed4:	0701040c 	.word	0x0701040c
3400bed8:	0700080c 	.word	0x0700080c
3400bedc:	0701080c 	.word	0x0701080c
3400bee0:	0702080c 	.word	0x0702080c
3400bee4:	0703080c 	.word	0x0703080c
3400bee8:	0704080c 	.word	0x0704080c
3400beec:	0705080c 	.word	0x0705080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
3400bef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bef4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400bef8:	4b70      	ldr	r3, [pc, #448]	@ (3400c0bc <HAL_RCCEx_PeriphCLKConfig+0x2dc4>)
3400befa:	429a      	cmp	r2, r3
3400befc:	d101      	bne.n	3400bf02 <HAL_RCCEx_PeriphCLKConfig+0x2c0a>
    {
      LL_RCC_CLKP_Enable();
3400befe:	f7fd f9d9 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
3400bf02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400bf0a:	4618      	mov	r0, r3
3400bf0c:	f7fc f8ae 	bl	3400806c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
3400bf10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
3400bf18:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
3400bf1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
3400bf20:	2300      	movs	r3, #0
3400bf22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400bf26:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400bf2a:	4603      	mov	r3, r0
3400bf2c:	460a      	mov	r2, r1
3400bf2e:	4313      	orrs	r3, r2
3400bf30:	f000 80e6 	beq.w	3400c100 <HAL_RCCEx_PeriphCLKConfig+0x2e08>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
3400bf34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf38:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf3c:	4b60      	ldr	r3, [pc, #384]	@ (3400c0c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc8>)
3400bf3e:	429a      	cmp	r2, r3
3400bf40:	d027      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf46:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf4a:	4b5e      	ldr	r3, [pc, #376]	@ (3400c0c4 <HAL_RCCEx_PeriphCLKConfig+0x2dcc>)
3400bf4c:	429a      	cmp	r2, r3
3400bf4e:	d020      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf50:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf54:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf58:	4b5b      	ldr	r3, [pc, #364]	@ (3400c0c8 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400bf5a:	429a      	cmp	r2, r3
3400bf5c:	d019      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf62:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf66:	4b59      	ldr	r3, [pc, #356]	@ (3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400bf68:	429a      	cmp	r2, r3
3400bf6a:	d012      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf70:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf74:	4b56      	ldr	r3, [pc, #344]	@ (3400c0d0 <HAL_RCCEx_PeriphCLKConfig+0x2dd8>)
3400bf76:	429a      	cmp	r2, r3
3400bf78:	d00b      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf7e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf82:	4b54      	ldr	r3, [pc, #336]	@ (3400c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2ddc>)
3400bf84:	429a      	cmp	r2, r3
3400bf86:	d004      	beq.n	3400bf92 <HAL_RCCEx_PeriphCLKConfig+0x2c9a>
3400bf88:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400bf8c:	4852      	ldr	r0, [pc, #328]	@ (3400c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400bf8e:	f7f5 fb4d 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
3400bf92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bf96:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400bf9a:	4b4b      	ldr	r3, [pc, #300]	@ (3400c0c8 <HAL_RCCEx_PeriphCLKConfig+0x2dd0>)
3400bf9c:	429a      	cmp	r2, r3
3400bf9e:	d142      	bne.n	3400c026 <HAL_RCCEx_PeriphCLKConfig+0x2d2e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400bfa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bfa6:	2b00      	cmp	r3, #0
3400bfa8:	d016      	beq.n	3400bfd8 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400bfaa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bfb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400bfb4:	d010      	beq.n	3400bfd8 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400bfb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bfbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400bfc0:	d00a      	beq.n	3400bfd8 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400bfc2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400bfc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400bfcc:	d004      	beq.n	3400bfd8 <HAL_RCCEx_PeriphCLKConfig+0x2ce0>
3400bfce:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400bfd2:	4841      	ldr	r0, [pc, #260]	@ (3400c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400bfd4:	f7f5 fb2a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400bfd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bfde:	2b00      	cmp	r3, #0
3400bfe0:	d005      	beq.n	3400bfee <HAL_RCCEx_PeriphCLKConfig+0x2cf6>
3400bfe2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400bfe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400bfe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400bfec:	d904      	bls.n	3400bff8 <HAL_RCCEx_PeriphCLKConfig+0x2d00>
3400bfee:	f240 31ca 	movw	r1, #970	@ 0x3ca
3400bff2:	4839      	ldr	r0, [pc, #228]	@ (3400c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400bff4:	f7f5 fb1a 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400bff8:	4b38      	ldr	r3, [pc, #224]	@ (3400c0dc <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400bffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400bffe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c002:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c006:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c00a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c00c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c012:	3b01      	subs	r3, #1
3400c014:	041b      	lsls	r3, r3, #16
3400c016:	4313      	orrs	r3, r2
3400c018:	4a30      	ldr	r2, [pc, #192]	@ (3400c0dc <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c01a:	430b      	orrs	r3, r1
3400c01c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c020:	f7fc fec8 	bl	34008db4 <LL_RCC_IC10_Enable>
3400c024:	e065      	b.n	3400c0f2 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
3400c026:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c02a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c02e:	4b27      	ldr	r3, [pc, #156]	@ (3400c0cc <HAL_RCCEx_PeriphCLKConfig+0x2dd4>)
3400c030:	429a      	cmp	r2, r3
3400c032:	d155      	bne.n	3400c0e0 <HAL_RCCEx_PeriphCLKConfig+0x2de8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c03a:	2b00      	cmp	r3, #0
3400c03c:	d016      	beq.n	3400c06c <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c03e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c048:	d010      	beq.n	3400c06c <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c04a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c054:	d00a      	beq.n	3400c06c <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c056:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c05a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c05c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c060:	d004      	beq.n	3400c06c <HAL_RCCEx_PeriphCLKConfig+0x2d74>
3400c062:	f240 31d6 	movw	r1, #982	@ 0x3d6
3400c066:	481c      	ldr	r0, [pc, #112]	@ (3400c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c068:	f7f5 fae0 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c06c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c072:	2b00      	cmp	r3, #0
3400c074:	d005      	beq.n	3400c082 <HAL_RCCEx_PeriphCLKConfig+0x2d8a>
3400c076:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c07a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c07c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c080:	d904      	bls.n	3400c08c <HAL_RCCEx_PeriphCLKConfig+0x2d94>
3400c082:	f240 31d7 	movw	r1, #983	@ 0x3d7
3400c086:	4814      	ldr	r0, [pc, #80]	@ (3400c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2de0>)
3400c088:	f7f5 fad0 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c08c:	4b13      	ldr	r3, [pc, #76]	@ (3400c0dc <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c08e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c092:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c096:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c09a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c09e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c0a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c0a6:	3b01      	subs	r3, #1
3400c0a8:	041b      	lsls	r3, r3, #16
3400c0aa:	4313      	orrs	r3, r2
3400c0ac:	4a0b      	ldr	r2, [pc, #44]	@ (3400c0dc <HAL_RCCEx_PeriphCLKConfig+0x2de4>)
3400c0ae:	430b      	orrs	r3, r1
3400c0b0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c0b4:	f7fc ff7e 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c0b8:	e01b      	b.n	3400c0f2 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
3400c0ba:	bf00      	nop
3400c0bc:	0701080c 	.word	0x0701080c
3400c0c0:	07000c0c 	.word	0x07000c0c
3400c0c4:	07010c0c 	.word	0x07010c0c
3400c0c8:	07020c0c 	.word	0x07020c0c
3400c0cc:	07030c0c 	.word	0x07030c0c
3400c0d0:	07040c0c 	.word	0x07040c0c
3400c0d4:	07050c0c 	.word	0x07050c0c
3400c0d8:	3401ae18 	.word	0x3401ae18
3400c0dc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
3400c0e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0e4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400c0e8:	4b70      	ldr	r3, [pc, #448]	@ (3400c2ac <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3400c0ea:	429a      	cmp	r2, r3
3400c0ec:	d101      	bne.n	3400c0f2 <HAL_RCCEx_PeriphCLKConfig+0x2dfa>
    {
      LL_RCC_CLKP_Enable();
3400c0ee:	f7fd f8e1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
3400c0f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c0f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
3400c0fa:	4618      	mov	r0, r3
3400c0fc:	f7fb ffb6 	bl	3400806c <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400c100:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c104:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c108:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400c10c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400c110:	2300      	movs	r3, #0
3400c112:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
3400c116:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
3400c11a:	4603      	mov	r3, r0
3400c11c:	460a      	mov	r2, r1
3400c11e:	4313      	orrs	r3, r2
3400c120:	f000 80e6 	beq.w	3400c2f0 <HAL_RCCEx_PeriphCLKConfig+0x2ff8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
3400c124:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c128:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c12c:	4b60      	ldr	r3, [pc, #384]	@ (3400c2b0 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
3400c12e:	429a      	cmp	r2, r3
3400c130:	d027      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c132:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c136:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c13a:	4b5e      	ldr	r3, [pc, #376]	@ (3400c2b4 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
3400c13c:	429a      	cmp	r2, r3
3400c13e:	d020      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c144:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c148:	4b5b      	ldr	r3, [pc, #364]	@ (3400c2b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c14a:	429a      	cmp	r2, r3
3400c14c:	d019      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c14e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c152:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c156:	4b59      	ldr	r3, [pc, #356]	@ (3400c2bc <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c158:	429a      	cmp	r2, r3
3400c15a:	d012      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c15c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c160:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c164:	4b56      	ldr	r3, [pc, #344]	@ (3400c2c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
3400c166:	429a      	cmp	r2, r3
3400c168:	d00b      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c16a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c16e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c172:	4b54      	ldr	r3, [pc, #336]	@ (3400c2c4 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3400c174:	429a      	cmp	r2, r3
3400c176:	d004      	beq.n	3400c182 <HAL_RCCEx_PeriphCLKConfig+0x2e8a>
3400c178:	f240 31f1 	movw	r1, #1009	@ 0x3f1
3400c17c:	4852      	ldr	r0, [pc, #328]	@ (3400c2c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c17e:	f7f5 fa55 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3400c182:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c186:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c18a:	4b4b      	ldr	r3, [pc, #300]	@ (3400c2b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3400c18c:	429a      	cmp	r2, r3
3400c18e:	d142      	bne.n	3400c216 <HAL_RCCEx_PeriphCLKConfig+0x2f1e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c190:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c196:	2b00      	cmp	r3, #0
3400c198:	d016      	beq.n	3400c1c8 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c19a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c19e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c1a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c1a4:	d010      	beq.n	3400c1c8 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c1a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c1ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c1b0:	d00a      	beq.n	3400c1c8 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c1b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c1b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c1bc:	d004      	beq.n	3400c1c8 <HAL_RCCEx_PeriphCLKConfig+0x2ed0>
3400c1be:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3400c1c2:	4841      	ldr	r0, [pc, #260]	@ (3400c2c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c1c4:	f7f5 fa32 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c1c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c1ce:	2b00      	cmp	r3, #0
3400c1d0:	d005      	beq.n	3400c1de <HAL_RCCEx_PeriphCLKConfig+0x2ee6>
3400c1d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c1d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c1dc:	d904      	bls.n	3400c1e8 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
3400c1de:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3400c1e2:	4839      	ldr	r0, [pc, #228]	@ (3400c2c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c1e4:	f7f5 fa22 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c1e8:	4b38      	ldr	r3, [pc, #224]	@ (3400c2cc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c1ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c1ee:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c1f2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c1f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c1fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c1fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c202:	3b01      	subs	r3, #1
3400c204:	041b      	lsls	r3, r3, #16
3400c206:	4313      	orrs	r3, r2
3400c208:	4a30      	ldr	r2, [pc, #192]	@ (3400c2cc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c20a:	430b      	orrs	r3, r1
3400c20c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c210:	f7fc fdd0 	bl	34008db4 <LL_RCC_IC10_Enable>
3400c214:	e065      	b.n	3400c2e2 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400c216:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c21a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c21e:	4b27      	ldr	r3, [pc, #156]	@ (3400c2bc <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3400c220:	429a      	cmp	r2, r3
3400c222:	d155      	bne.n	3400c2d0 <HAL_RCCEx_PeriphCLKConfig+0x2fd8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c224:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c228:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c22a:	2b00      	cmp	r3, #0
3400c22c:	d016      	beq.n	3400c25c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c22e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c238:	d010      	beq.n	3400c25c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c23a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c23e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c244:	d00a      	beq.n	3400c25c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c24a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c24c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c250:	d004      	beq.n	3400c25c <HAL_RCCEx_PeriphCLKConfig+0x2f64>
3400c252:	f240 4103 	movw	r1, #1027	@ 0x403
3400c256:	481c      	ldr	r0, [pc, #112]	@ (3400c2c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c258:	f7f5 f9e8 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c25c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c262:	2b00      	cmp	r3, #0
3400c264:	d005      	beq.n	3400c272 <HAL_RCCEx_PeriphCLKConfig+0x2f7a>
3400c266:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c26a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c26c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c270:	d904      	bls.n	3400c27c <HAL_RCCEx_PeriphCLKConfig+0x2f84>
3400c272:	f240 4104 	movw	r1, #1028	@ 0x404
3400c276:	4814      	ldr	r0, [pc, #80]	@ (3400c2c8 <HAL_RCCEx_PeriphCLKConfig+0x2fd0>)
3400c278:	f7f5 f9d8 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c27c:	4b13      	ldr	r3, [pc, #76]	@ (3400c2cc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c27e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c282:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c286:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c28a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c28e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c290:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c296:	3b01      	subs	r3, #1
3400c298:	041b      	lsls	r3, r3, #16
3400c29a:	4313      	orrs	r3, r2
3400c29c:	4a0b      	ldr	r2, [pc, #44]	@ (3400c2cc <HAL_RCCEx_PeriphCLKConfig+0x2fd4>)
3400c29e:	430b      	orrs	r3, r1
3400c2a0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c2a4:	f7fc fe86 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c2a8:	e01b      	b.n	3400c2e2 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
3400c2aa:	bf00      	nop
3400c2ac:	07010c0c 	.word	0x07010c0c
3400c2b0:	0700100c 	.word	0x0700100c
3400c2b4:	0701100c 	.word	0x0701100c
3400c2b8:	0702100c 	.word	0x0702100c
3400c2bc:	0703100c 	.word	0x0703100c
3400c2c0:	0704100c 	.word	0x0704100c
3400c2c4:	0705100c 	.word	0x0705100c
3400c2c8:	3401ae18 	.word	0x3401ae18
3400c2cc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
3400c2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2d4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
3400c2d8:	4b70      	ldr	r3, [pc, #448]	@ (3400c49c <HAL_RCCEx_PeriphCLKConfig+0x31a4>)
3400c2da:	429a      	cmp	r2, r3
3400c2dc:	d101      	bne.n	3400c2e2 <HAL_RCCEx_PeriphCLKConfig+0x2fea>
    {
      LL_RCC_CLKP_Enable();
3400c2de:	f7fc ffe9 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
3400c2e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400c2ea:	4618      	mov	r0, r3
3400c2ec:	f7fb fec9 	bl	34008082 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
3400c2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c2f8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
3400c2fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
3400c300:	2300      	movs	r3, #0
3400c302:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
3400c306:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
3400c30a:	4603      	mov	r3, r0
3400c30c:	460a      	mov	r2, r1
3400c30e:	4313      	orrs	r3, r2
3400c310:	f000 80e6 	beq.w	3400c4e0 <HAL_RCCEx_PeriphCLKConfig+0x31e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3400c314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c318:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c31c:	4b60      	ldr	r3, [pc, #384]	@ (3400c4a0 <HAL_RCCEx_PeriphCLKConfig+0x31a8>)
3400c31e:	429a      	cmp	r2, r3
3400c320:	d027      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c322:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c326:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c32a:	4b5e      	ldr	r3, [pc, #376]	@ (3400c4a4 <HAL_RCCEx_PeriphCLKConfig+0x31ac>)
3400c32c:	429a      	cmp	r2, r3
3400c32e:	d020      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c330:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c334:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c338:	4b5b      	ldr	r3, [pc, #364]	@ (3400c4a8 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400c33a:	429a      	cmp	r2, r3
3400c33c:	d019      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c33e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c342:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c346:	4b59      	ldr	r3, [pc, #356]	@ (3400c4ac <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400c348:	429a      	cmp	r2, r3
3400c34a:	d012      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c34c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c350:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c354:	4b56      	ldr	r3, [pc, #344]	@ (3400c4b0 <HAL_RCCEx_PeriphCLKConfig+0x31b8>)
3400c356:	429a      	cmp	r2, r3
3400c358:	d00b      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c35a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c35e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c362:	4b54      	ldr	r3, [pc, #336]	@ (3400c4b4 <HAL_RCCEx_PeriphCLKConfig+0x31bc>)
3400c364:	429a      	cmp	r2, r3
3400c366:	d004      	beq.n	3400c372 <HAL_RCCEx_PeriphCLKConfig+0x307a>
3400c368:	f240 411e 	movw	r1, #1054	@ 0x41e
3400c36c:	4852      	ldr	r0, [pc, #328]	@ (3400c4b8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c36e:	f7f5 f95d 	bl	3400162c <assert_failed>

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3400c372:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c376:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c37a:	4b4b      	ldr	r3, [pc, #300]	@ (3400c4a8 <HAL_RCCEx_PeriphCLKConfig+0x31b0>)
3400c37c:	429a      	cmp	r2, r3
3400c37e:	d142      	bne.n	3400c406 <HAL_RCCEx_PeriphCLKConfig+0x310e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3400c380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c386:	2b00      	cmp	r3, #0
3400c388:	d016      	beq.n	3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c38a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c394:	d010      	beq.n	3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c396:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c3a0:	d00a      	beq.n	3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c3a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400c3a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c3ac:	d004      	beq.n	3400c3b8 <HAL_RCCEx_PeriphCLKConfig+0x30c0>
3400c3ae:	f240 4123 	movw	r1, #1059	@ 0x423
3400c3b2:	4841      	ldr	r0, [pc, #260]	@ (3400c4b8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c3b4:	f7f5 f93a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3400c3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c3be:	2b00      	cmp	r3, #0
3400c3c0:	d005      	beq.n	3400c3ce <HAL_RCCEx_PeriphCLKConfig+0x30d6>
3400c3c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c3c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c3cc:	d904      	bls.n	3400c3d8 <HAL_RCCEx_PeriphCLKConfig+0x30e0>
3400c3ce:	f240 4124 	movw	r1, #1060	@ 0x424
3400c3d2:	4839      	ldr	r0, [pc, #228]	@ (3400c4b8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c3d4:	f7f5 f92a 	bl	3400162c <assert_failed>

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400c3d8:	4b38      	ldr	r3, [pc, #224]	@ (3400c4bc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c3da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400c3de:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c3e2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c3e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400c3ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400c3f2:	3b01      	subs	r3, #1
3400c3f4:	041b      	lsls	r3, r3, #16
3400c3f6:	4313      	orrs	r3, r2
3400c3f8:	4a30      	ldr	r2, [pc, #192]	@ (3400c4bc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c3fa:	430b      	orrs	r3, r1
3400c3fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400c400:	f7fc fcd8 	bl	34008db4 <LL_RCC_IC10_Enable>
3400c404:	e065      	b.n	3400c4d2 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
3400c406:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c40a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c40e:	4b27      	ldr	r3, [pc, #156]	@ (3400c4ac <HAL_RCCEx_PeriphCLKConfig+0x31b4>)
3400c410:	429a      	cmp	r2, r3
3400c412:	d155      	bne.n	3400c4c0 <HAL_RCCEx_PeriphCLKConfig+0x31c8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c414:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c41a:	2b00      	cmp	r3, #0
3400c41c:	d016      	beq.n	3400c44c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c41e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c428:	d010      	beq.n	3400c44c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c42a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c42e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c434:	d00a      	beq.n	3400c44c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c436:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c43a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c43c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c440:	d004      	beq.n	3400c44c <HAL_RCCEx_PeriphCLKConfig+0x3154>
3400c442:	f44f 6186 	mov.w	r1, #1072	@ 0x430
3400c446:	481c      	ldr	r0, [pc, #112]	@ (3400c4b8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c448:	f7f5 f8f0 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c44c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c452:	2b00      	cmp	r3, #0
3400c454:	d005      	beq.n	3400c462 <HAL_RCCEx_PeriphCLKConfig+0x316a>
3400c456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c45a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c45c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c460:	d904      	bls.n	3400c46c <HAL_RCCEx_PeriphCLKConfig+0x3174>
3400c462:	f240 4131 	movw	r1, #1073	@ 0x431
3400c466:	4814      	ldr	r0, [pc, #80]	@ (3400c4b8 <HAL_RCCEx_PeriphCLKConfig+0x31c0>)
3400c468:	f7f5 f8e0 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c46c:	4b13      	ldr	r3, [pc, #76]	@ (3400c4bc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c46e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c472:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c476:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c47a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c47e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c480:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c486:	3b01      	subs	r3, #1
3400c488:	041b      	lsls	r3, r3, #16
3400c48a:	4313      	orrs	r3, r2
3400c48c:	4a0b      	ldr	r2, [pc, #44]	@ (3400c4bc <HAL_RCCEx_PeriphCLKConfig+0x31c4>)
3400c48e:	430b      	orrs	r3, r1
3400c490:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c494:	f7fc fd8e 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c498:	e01b      	b.n	3400c4d2 <HAL_RCCEx_PeriphCLKConfig+0x31da>
3400c49a:	bf00      	nop
3400c49c:	0701100c 	.word	0x0701100c
3400c4a0:	0700140c 	.word	0x0700140c
3400c4a4:	0701140c 	.word	0x0701140c
3400c4a8:	0702140c 	.word	0x0702140c
3400c4ac:	0703140c 	.word	0x0703140c
3400c4b0:	0704140c 	.word	0x0704140c
3400c4b4:	0705140c 	.word	0x0705140c
3400c4b8:	3401ae18 	.word	0x3401ae18
3400c4bc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
3400c4c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4c4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400c4c8:	4b98      	ldr	r3, [pc, #608]	@ (3400c72c <HAL_RCCEx_PeriphCLKConfig+0x3434>)
3400c4ca:	429a      	cmp	r2, r3
3400c4cc:	d101      	bne.n	3400c4d2 <HAL_RCCEx_PeriphCLKConfig+0x31da>
    {
      LL_RCC_CLKP_Enable();
3400c4ce:	f7fc fef1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
3400c4d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c4da:	4618      	mov	r0, r3
3400c4dc:	f7fb fdd1 	bl	34008082 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
3400c4e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c4e8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400c4ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
3400c4f0:	2300      	movs	r3, #0
3400c4f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
3400c4f6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
3400c4fa:	4603      	mov	r3, r0
3400c4fc:	460a      	mov	r2, r1
3400c4fe:	4313      	orrs	r3, r2
3400c500:	f000 8089 	beq.w	3400c616 <HAL_RCCEx_PeriphCLKConfig+0x331e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
3400c504:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c508:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c50c:	4b88      	ldr	r3, [pc, #544]	@ (3400c730 <HAL_RCCEx_PeriphCLKConfig+0x3438>)
3400c50e:	429a      	cmp	r2, r3
3400c510:	d027      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c512:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c516:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c51a:	4b86      	ldr	r3, [pc, #536]	@ (3400c734 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400c51c:	429a      	cmp	r2, r3
3400c51e:	d020      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c520:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c524:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c528:	4b83      	ldr	r3, [pc, #524]	@ (3400c738 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400c52a:	429a      	cmp	r2, r3
3400c52c:	d019      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c52e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c532:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c536:	4b81      	ldr	r3, [pc, #516]	@ (3400c73c <HAL_RCCEx_PeriphCLKConfig+0x3444>)
3400c538:	429a      	cmp	r2, r3
3400c53a:	d012      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c53c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c540:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c544:	4b7e      	ldr	r3, [pc, #504]	@ (3400c740 <HAL_RCCEx_PeriphCLKConfig+0x3448>)
3400c546:	429a      	cmp	r2, r3
3400c548:	d00b      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c54e:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c552:	4b7c      	ldr	r3, [pc, #496]	@ (3400c744 <HAL_RCCEx_PeriphCLKConfig+0x344c>)
3400c554:	429a      	cmp	r2, r3
3400c556:	d004      	beq.n	3400c562 <HAL_RCCEx_PeriphCLKConfig+0x326a>
3400c558:	f240 414b 	movw	r1, #1099	@ 0x44b
3400c55c:	487a      	ldr	r0, [pc, #488]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c55e:	f7f5 f865 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3400c562:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c566:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c56a:	4b73      	ldr	r3, [pc, #460]	@ (3400c738 <HAL_RCCEx_PeriphCLKConfig+0x3440>)
3400c56c:	429a      	cmp	r2, r3
3400c56e:	d142      	bne.n	3400c5f6 <HAL_RCCEx_PeriphCLKConfig+0x32fe>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c570:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c576:	2b00      	cmp	r3, #0
3400c578:	d016      	beq.n	3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400c57a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c57e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c584:	d010      	beq.n	3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400c586:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c58a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c58c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c590:	d00a      	beq.n	3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400c592:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c596:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c598:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c59c:	d004      	beq.n	3400c5a8 <HAL_RCCEx_PeriphCLKConfig+0x32b0>
3400c59e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3400c5a2:	4869      	ldr	r0, [pc, #420]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c5a4:	f7f5 f842 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c5a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c5ae:	2b00      	cmp	r3, #0
3400c5b0:	d005      	beq.n	3400c5be <HAL_RCCEx_PeriphCLKConfig+0x32c6>
3400c5b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c5b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c5bc:	d904      	bls.n	3400c5c8 <HAL_RCCEx_PeriphCLKConfig+0x32d0>
3400c5be:	f240 4151 	movw	r1, #1105	@ 0x451
3400c5c2:	4861      	ldr	r0, [pc, #388]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c5c4:	f7f5 f832 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c5c8:	4b60      	ldr	r3, [pc, #384]	@ (3400c74c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400c5ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c5ce:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c5d2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c5d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c5dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c5e2:	3b01      	subs	r3, #1
3400c5e4:	041b      	lsls	r3, r3, #16
3400c5e6:	4313      	orrs	r3, r2
3400c5e8:	4a58      	ldr	r2, [pc, #352]	@ (3400c74c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400c5ea:	430b      	orrs	r3, r1
3400c5ec:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c5f0:	f7fc fce0 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c5f4:	e008      	b.n	3400c608 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
3400c5f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c5fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
3400c5fe:	4b4d      	ldr	r3, [pc, #308]	@ (3400c734 <HAL_RCCEx_PeriphCLKConfig+0x343c>)
3400c600:	429a      	cmp	r2, r3
3400c602:	d101      	bne.n	3400c608 <HAL_RCCEx_PeriphCLKConfig+0x3310>
    {
      LL_RCC_CLKP_Enable();
3400c604:	f7fc fe56 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
3400c608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c60c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400c610:	4618      	mov	r0, r3
3400c612:	f7fb fd41 	bl	34008098 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
3400c616:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c61e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400c622:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
3400c626:	2300      	movs	r3, #0
3400c628:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
3400c62c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400c630:	4603      	mov	r3, r0
3400c632:	460a      	mov	r2, r1
3400c634:	4313      	orrs	r3, r2
3400c636:	f000 80a7 	beq.w	3400c788 <HAL_RCCEx_PeriphCLKConfig+0x3490>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3400c63a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c63e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c642:	4b43      	ldr	r3, [pc, #268]	@ (3400c750 <HAL_RCCEx_PeriphCLKConfig+0x3458>)
3400c644:	429a      	cmp	r2, r3
3400c646:	d027      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c648:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c64c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c650:	4b40      	ldr	r3, [pc, #256]	@ (3400c754 <HAL_RCCEx_PeriphCLKConfig+0x345c>)
3400c652:	429a      	cmp	r2, r3
3400c654:	d020      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c656:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c65a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c65e:	4b3e      	ldr	r3, [pc, #248]	@ (3400c758 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400c660:	429a      	cmp	r2, r3
3400c662:	d019      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c664:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c668:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c66c:	4b3b      	ldr	r3, [pc, #236]	@ (3400c75c <HAL_RCCEx_PeriphCLKConfig+0x3464>)
3400c66e:	429a      	cmp	r2, r3
3400c670:	d012      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c672:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c676:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c67a:	4b39      	ldr	r3, [pc, #228]	@ (3400c760 <HAL_RCCEx_PeriphCLKConfig+0x3468>)
3400c67c:	429a      	cmp	r2, r3
3400c67e:	d00b      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c680:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c684:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c688:	4b36      	ldr	r3, [pc, #216]	@ (3400c764 <HAL_RCCEx_PeriphCLKConfig+0x346c>)
3400c68a:	429a      	cmp	r2, r3
3400c68c:	d004      	beq.n	3400c698 <HAL_RCCEx_PeriphCLKConfig+0x33a0>
3400c68e:	f240 416b 	movw	r1, #1131	@ 0x46b
3400c692:	482d      	ldr	r0, [pc, #180]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c694:	f7f4 ffca 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3400c698:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c69c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c6a0:	4b2d      	ldr	r3, [pc, #180]	@ (3400c758 <HAL_RCCEx_PeriphCLKConfig+0x3460>)
3400c6a2:	429a      	cmp	r2, r3
3400c6a4:	d160      	bne.n	3400c768 <HAL_RCCEx_PeriphCLKConfig+0x3470>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c6a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c6ac:	2b00      	cmp	r3, #0
3400c6ae:	d016      	beq.n	3400c6de <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400c6b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c6b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c6ba:	d010      	beq.n	3400c6de <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400c6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c6c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c6c6:	d00a      	beq.n	3400c6de <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400c6c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c6ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c6d2:	d004      	beq.n	3400c6de <HAL_RCCEx_PeriphCLKConfig+0x33e6>
3400c6d4:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3400c6d8:	481b      	ldr	r0, [pc, #108]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c6da:	f7f4 ffa7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c6e4:	2b00      	cmp	r3, #0
3400c6e6:	d005      	beq.n	3400c6f4 <HAL_RCCEx_PeriphCLKConfig+0x33fc>
3400c6e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c6ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c6f2:	d904      	bls.n	3400c6fe <HAL_RCCEx_PeriphCLKConfig+0x3406>
3400c6f4:	f240 4171 	movw	r1, #1137	@ 0x471
3400c6f8:	4813      	ldr	r0, [pc, #76]	@ (3400c748 <HAL_RCCEx_PeriphCLKConfig+0x3450>)
3400c6fa:	f7f4 ff97 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c6fe:	4b13      	ldr	r3, [pc, #76]	@ (3400c74c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400c700:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c704:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c708:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c710:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c718:	3b01      	subs	r3, #1
3400c71a:	041b      	lsls	r3, r3, #16
3400c71c:	4313      	orrs	r3, r2
3400c71e:	4a0b      	ldr	r2, [pc, #44]	@ (3400c74c <HAL_RCCEx_PeriphCLKConfig+0x3454>)
3400c720:	430b      	orrs	r3, r1
3400c722:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c726:	f7fc fc45 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c72a:	e026      	b.n	3400c77a <HAL_RCCEx_PeriphCLKConfig+0x3482>
3400c72c:	0701140c 	.word	0x0701140c
3400c730:	0700082c 	.word	0x0700082c
3400c734:	0701082c 	.word	0x0701082c
3400c738:	0702082c 	.word	0x0702082c
3400c73c:	0703082c 	.word	0x0703082c
3400c740:	0704082c 	.word	0x0704082c
3400c744:	0705082c 	.word	0x0705082c
3400c748:	3401ae18 	.word	0x3401ae18
3400c74c:	56028000 	.word	0x56028000
3400c750:	07000c2c 	.word	0x07000c2c
3400c754:	07010c2c 	.word	0x07010c2c
3400c758:	07020c2c 	.word	0x07020c2c
3400c75c:	07030c2c 	.word	0x07030c2c
3400c760:	07040c2c 	.word	0x07040c2c
3400c764:	07050c2c 	.word	0x07050c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3400c768:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c76c:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400c770:	4b98      	ldr	r3, [pc, #608]	@ (3400c9d4 <HAL_RCCEx_PeriphCLKConfig+0x36dc>)
3400c772:	429a      	cmp	r2, r3
3400c774:	d101      	bne.n	3400c77a <HAL_RCCEx_PeriphCLKConfig+0x3482>
    {
      LL_RCC_CLKP_Enable();
3400c776:	f7fc fd9d 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
3400c77a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c77e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
3400c782:	4618      	mov	r0, r3
3400c784:	f7fb fc88 	bl	34008098 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3400c788:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c790:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
3400c794:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3400c798:	2300      	movs	r3, #0
3400c79a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
3400c79e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
3400c7a2:	4603      	mov	r3, r0
3400c7a4:	460a      	mov	r2, r1
3400c7a6:	4313      	orrs	r3, r2
3400c7a8:	f000 8089 	beq.w	3400c8be <HAL_RCCEx_PeriphCLKConfig+0x35c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
3400c7ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7b4:	4b88      	ldr	r3, [pc, #544]	@ (3400c9d8 <HAL_RCCEx_PeriphCLKConfig+0x36e0>)
3400c7b6:	429a      	cmp	r2, r3
3400c7b8:	d027      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c7ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7be:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7c2:	4b86      	ldr	r3, [pc, #536]	@ (3400c9dc <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400c7c4:	429a      	cmp	r2, r3
3400c7c6:	d020      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c7c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7d0:	4b83      	ldr	r3, [pc, #524]	@ (3400c9e0 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400c7d2:	429a      	cmp	r2, r3
3400c7d4:	d019      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c7d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7da:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7de:	4b81      	ldr	r3, [pc, #516]	@ (3400c9e4 <HAL_RCCEx_PeriphCLKConfig+0x36ec>)
3400c7e0:	429a      	cmp	r2, r3
3400c7e2:	d012      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c7e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7ec:	4b7e      	ldr	r3, [pc, #504]	@ (3400c9e8 <HAL_RCCEx_PeriphCLKConfig+0x36f0>)
3400c7ee:	429a      	cmp	r2, r3
3400c7f0:	d00b      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c7f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c7f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c7fa:	4b7c      	ldr	r3, [pc, #496]	@ (3400c9ec <HAL_RCCEx_PeriphCLKConfig+0x36f4>)
3400c7fc:	429a      	cmp	r2, r3
3400c7fe:	d004      	beq.n	3400c80a <HAL_RCCEx_PeriphCLKConfig+0x3512>
3400c800:	f240 418b 	movw	r1, #1163	@ 0x48b
3400c804:	487a      	ldr	r0, [pc, #488]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c806:	f7f4 ff11 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3400c80a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c80e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c812:	4b73      	ldr	r3, [pc, #460]	@ (3400c9e0 <HAL_RCCEx_PeriphCLKConfig+0x36e8>)
3400c814:	429a      	cmp	r2, r3
3400c816:	d142      	bne.n	3400c89e <HAL_RCCEx_PeriphCLKConfig+0x35a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c81c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c81e:	2b00      	cmp	r3, #0
3400c820:	d016      	beq.n	3400c850 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400c822:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c82c:	d010      	beq.n	3400c850 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400c82e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c838:	d00a      	beq.n	3400c850 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400c83a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c83e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c844:	d004      	beq.n	3400c850 <HAL_RCCEx_PeriphCLKConfig+0x3558>
3400c846:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3400c84a:	4869      	ldr	r0, [pc, #420]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c84c:	f7f4 feee 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c856:	2b00      	cmp	r3, #0
3400c858:	d005      	beq.n	3400c866 <HAL_RCCEx_PeriphCLKConfig+0x356e>
3400c85a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c85e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c864:	d904      	bls.n	3400c870 <HAL_RCCEx_PeriphCLKConfig+0x3578>
3400c866:	f240 4191 	movw	r1, #1169	@ 0x491
3400c86a:	4861      	ldr	r0, [pc, #388]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c86c:	f7f4 fede 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c870:	4b60      	ldr	r3, [pc, #384]	@ (3400c9f4 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400c872:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c876:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c87a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c87e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c882:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c88a:	3b01      	subs	r3, #1
3400c88c:	041b      	lsls	r3, r3, #16
3400c88e:	4313      	orrs	r3, r2
3400c890:	4a58      	ldr	r2, [pc, #352]	@ (3400c9f4 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400c892:	430b      	orrs	r3, r1
3400c894:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c898:	f7fc fb8c 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c89c:	e008      	b.n	3400c8b0 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3400c89e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400c8a6:	4b4d      	ldr	r3, [pc, #308]	@ (3400c9dc <HAL_RCCEx_PeriphCLKConfig+0x36e4>)
3400c8a8:	429a      	cmp	r2, r3
3400c8aa:	d101      	bne.n	3400c8b0 <HAL_RCCEx_PeriphCLKConfig+0x35b8>
    {
      LL_RCC_CLKP_Enable();
3400c8ac:	f7fc fd02 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3400c8b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3400c8b8:	4618      	mov	r0, r3
3400c8ba:	f7fb fbed 	bl	34008098 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3400c8be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c8c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
3400c8ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3400c8ce:	2300      	movs	r3, #0
3400c8d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400c8d4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
3400c8d8:	4603      	mov	r3, r0
3400c8da:	460a      	mov	r2, r1
3400c8dc:	4313      	orrs	r3, r2
3400c8de:	f000 80a7 	beq.w	3400ca30 <HAL_RCCEx_PeriphCLKConfig+0x3738>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
3400c8e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c8ea:	4b43      	ldr	r3, [pc, #268]	@ (3400c9f8 <HAL_RCCEx_PeriphCLKConfig+0x3700>)
3400c8ec:	429a      	cmp	r2, r3
3400c8ee:	d027      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c8f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c8f4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c8f8:	4b40      	ldr	r3, [pc, #256]	@ (3400c9fc <HAL_RCCEx_PeriphCLKConfig+0x3704>)
3400c8fa:	429a      	cmp	r2, r3
3400c8fc:	d020      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c8fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c902:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c906:	4b3e      	ldr	r3, [pc, #248]	@ (3400ca00 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400c908:	429a      	cmp	r2, r3
3400c90a:	d019      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c90c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c910:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c914:	4b3b      	ldr	r3, [pc, #236]	@ (3400ca04 <HAL_RCCEx_PeriphCLKConfig+0x370c>)
3400c916:	429a      	cmp	r2, r3
3400c918:	d012      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c91a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c91e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c922:	4b39      	ldr	r3, [pc, #228]	@ (3400ca08 <HAL_RCCEx_PeriphCLKConfig+0x3710>)
3400c924:	429a      	cmp	r2, r3
3400c926:	d00b      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c928:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c92c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c930:	4b36      	ldr	r3, [pc, #216]	@ (3400ca0c <HAL_RCCEx_PeriphCLKConfig+0x3714>)
3400c932:	429a      	cmp	r2, r3
3400c934:	d004      	beq.n	3400c940 <HAL_RCCEx_PeriphCLKConfig+0x3648>
3400c936:	f240 41ab 	movw	r1, #1195	@ 0x4ab
3400c93a:	482d      	ldr	r0, [pc, #180]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c93c:	f7f4 fe76 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3400c940:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c944:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400c948:	4b2d      	ldr	r3, [pc, #180]	@ (3400ca00 <HAL_RCCEx_PeriphCLKConfig+0x3708>)
3400c94a:	429a      	cmp	r2, r3
3400c94c:	d160      	bne.n	3400ca10 <HAL_RCCEx_PeriphCLKConfig+0x3718>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400c94e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c954:	2b00      	cmp	r3, #0
3400c956:	d016      	beq.n	3400c986 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400c958:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c95c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c95e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400c962:	d010      	beq.n	3400c986 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400c964:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c96a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400c96e:	d00a      	beq.n	3400c986 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400c970:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400c976:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400c97a:	d004      	beq.n	3400c986 <HAL_RCCEx_PeriphCLKConfig+0x368e>
3400c97c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
3400c980:	481b      	ldr	r0, [pc, #108]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c982:	f7f4 fe53 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400c986:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c98a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c98c:	2b00      	cmp	r3, #0
3400c98e:	d005      	beq.n	3400c99c <HAL_RCCEx_PeriphCLKConfig+0x36a4>
3400c990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400c99a:	d904      	bls.n	3400c9a6 <HAL_RCCEx_PeriphCLKConfig+0x36ae>
3400c99c:	f240 41b1 	movw	r1, #1201	@ 0x4b1
3400c9a0:	4813      	ldr	r0, [pc, #76]	@ (3400c9f0 <HAL_RCCEx_PeriphCLKConfig+0x36f8>)
3400c9a2:	f7f4 fe43 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400c9a6:	4b13      	ldr	r3, [pc, #76]	@ (3400c9f4 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400c9a8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400c9ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400c9b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400c9b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9b8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400c9ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400c9be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400c9c0:	3b01      	subs	r3, #1
3400c9c2:	041b      	lsls	r3, r3, #16
3400c9c4:	4313      	orrs	r3, r2
3400c9c6:	4a0b      	ldr	r2, [pc, #44]	@ (3400c9f4 <HAL_RCCEx_PeriphCLKConfig+0x36fc>)
3400c9c8:	430b      	orrs	r3, r1
3400c9ca:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400c9ce:	f7fc faf1 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400c9d2:	e026      	b.n	3400ca22 <HAL_RCCEx_PeriphCLKConfig+0x372a>
3400c9d4:	07010c2c 	.word	0x07010c2c
3400c9d8:	0700102c 	.word	0x0700102c
3400c9dc:	0701102c 	.word	0x0701102c
3400c9e0:	0702102c 	.word	0x0702102c
3400c9e4:	0703102c 	.word	0x0703102c
3400c9e8:	0704102c 	.word	0x0704102c
3400c9ec:	0705102c 	.word	0x0705102c
3400c9f0:	3401ae18 	.word	0x3401ae18
3400c9f4:	56028000 	.word	0x56028000
3400c9f8:	0700142c 	.word	0x0700142c
3400c9fc:	0701142c 	.word	0x0701142c
3400ca00:	0702142c 	.word	0x0702142c
3400ca04:	0703142c 	.word	0x0703142c
3400ca08:	0704142c 	.word	0x0704142c
3400ca0c:	0705142c 	.word	0x0705142c
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
3400ca10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca14:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
3400ca18:	4b9b      	ldr	r3, [pc, #620]	@ (3400cc88 <HAL_RCCEx_PeriphCLKConfig+0x3990>)
3400ca1a:	429a      	cmp	r2, r3
3400ca1c:	d101      	bne.n	3400ca22 <HAL_RCCEx_PeriphCLKConfig+0x372a>
    {
      LL_RCC_CLKP_Enable();
3400ca1e:	f7fc fc49 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
3400ca22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca26:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400ca2a:	4618      	mov	r0, r3
3400ca2c:	f7fb fb34 	bl	34008098 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
3400ca30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ca38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
3400ca3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
3400ca40:	2300      	movs	r3, #0
3400ca42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3400ca46:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
3400ca4a:	4603      	mov	r3, r0
3400ca4c:	460a      	mov	r2, r1
3400ca4e:	4313      	orrs	r3, r2
3400ca50:	f000 8089 	beq.w	3400cb66 <HAL_RCCEx_PeriphCLKConfig+0x386e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3400ca54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca58:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400ca5c:	4b8b      	ldr	r3, [pc, #556]	@ (3400cc8c <HAL_RCCEx_PeriphCLKConfig+0x3994>)
3400ca5e:	429a      	cmp	r2, r3
3400ca60:	d027      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400ca62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca66:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400ca6a:	4b89      	ldr	r3, [pc, #548]	@ (3400cc90 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400ca6c:	429a      	cmp	r2, r3
3400ca6e:	d020      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400ca70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca74:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400ca78:	4b86      	ldr	r3, [pc, #536]	@ (3400cc94 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400ca7a:	429a      	cmp	r2, r3
3400ca7c:	d019      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400ca7e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca82:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400ca86:	4b84      	ldr	r3, [pc, #528]	@ (3400cc98 <HAL_RCCEx_PeriphCLKConfig+0x39a0>)
3400ca88:	429a      	cmp	r2, r3
3400ca8a:	d012      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400ca8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca90:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400ca94:	4b81      	ldr	r3, [pc, #516]	@ (3400cc9c <HAL_RCCEx_PeriphCLKConfig+0x39a4>)
3400ca96:	429a      	cmp	r2, r3
3400ca98:	d00b      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400ca9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ca9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400caa2:	4b7f      	ldr	r3, [pc, #508]	@ (3400cca0 <HAL_RCCEx_PeriphCLKConfig+0x39a8>)
3400caa4:	429a      	cmp	r2, r3
3400caa6:	d004      	beq.n	3400cab2 <HAL_RCCEx_PeriphCLKConfig+0x37ba>
3400caa8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
3400caac:	487d      	ldr	r0, [pc, #500]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400caae:	f7f4 fdbd 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3400cab2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cab6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400caba:	4b76      	ldr	r3, [pc, #472]	@ (3400cc94 <HAL_RCCEx_PeriphCLKConfig+0x399c>)
3400cabc:	429a      	cmp	r2, r3
3400cabe:	d142      	bne.n	3400cb46 <HAL_RCCEx_PeriphCLKConfig+0x384e>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400cac0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cac6:	2b00      	cmp	r3, #0
3400cac8:	d016      	beq.n	3400caf8 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400caca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cad4:	d010      	beq.n	3400caf8 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cad6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cadc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cae0:	d00a      	beq.n	3400caf8 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400cae2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400cae8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400caec:	d004      	beq.n	3400caf8 <HAL_RCCEx_PeriphCLKConfig+0x3800>
3400caee:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
3400caf2:	486c      	ldr	r0, [pc, #432]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400caf4:	f7f4 fd9a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400caf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cafc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cafe:	2b00      	cmp	r3, #0
3400cb00:	d005      	beq.n	3400cb0e <HAL_RCCEx_PeriphCLKConfig+0x3816>
3400cb02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cb0c:	d904      	bls.n	3400cb18 <HAL_RCCEx_PeriphCLKConfig+0x3820>
3400cb0e:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3400cb12:	4864      	ldr	r0, [pc, #400]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cb14:	f7f4 fd8a 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400cb18:	4b63      	ldr	r3, [pc, #396]	@ (3400cca8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400cb1a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400cb1e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cb22:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cb26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb2a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400cb2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400cb32:	3b01      	subs	r3, #1
3400cb34:	041b      	lsls	r3, r3, #16
3400cb36:	4313      	orrs	r3, r2
3400cb38:	4a5b      	ldr	r2, [pc, #364]	@ (3400cca8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400cb3a:	430b      	orrs	r3, r1
3400cb3c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400cb40:	f7fc fa38 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400cb44:	e008      	b.n	3400cb58 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
3400cb46:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb4a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400cb4e:	4b50      	ldr	r3, [pc, #320]	@ (3400cc90 <HAL_RCCEx_PeriphCLKConfig+0x3998>)
3400cb50:	429a      	cmp	r2, r3
3400cb52:	d101      	bne.n	3400cb58 <HAL_RCCEx_PeriphCLKConfig+0x3860>
    {
      LL_RCC_CLKP_Enable();
3400cb54:	f7fc fbae 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
3400cb58:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400cb60:	4618      	mov	r0, r3
3400cb62:	f7fb fa99 	bl	34008098 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3400cb66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cb6e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400cb72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
3400cb76:	2300      	movs	r3, #0
3400cb78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3400cb7c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400cb80:	4603      	mov	r3, r0
3400cb82:	460a      	mov	r2, r1
3400cb84:	4313      	orrs	r3, r2
3400cb86:	f000 80eb 	beq.w	3400cd60 <HAL_RCCEx_PeriphCLKConfig+0x3a68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3400cb8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cb92:	2b00      	cmp	r3, #0
3400cb94:	d02e      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cb96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cb9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cb9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cba2:	d027      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cba4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cba8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400cbb0:	d020      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cbb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400cbbe:	d019      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cbc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400cbcc:	d012      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cbce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbd6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3400cbda:	d00b      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cbdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbe0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbe4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3400cbe8:	d004      	beq.n	3400cbf4 <HAL_RCCEx_PeriphCLKConfig+0x38fc>
3400cbea:	f240 41eb 	movw	r1, #1259	@ 0x4eb
3400cbee:	482d      	ldr	r0, [pc, #180]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cbf0:	f7f4 fd1c 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3400cbf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cbf8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cbfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400cc00:	d154      	bne.n	3400ccac <HAL_RCCEx_PeriphCLKConfig+0x39b4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400cc02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400cc08:	2b00      	cmp	r3, #0
3400cc0a:	d016      	beq.n	3400cc3a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400cc0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400cc12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cc16:	d010      	beq.n	3400cc3a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400cc18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400cc1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cc22:	d00a      	beq.n	3400cc3a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400cc24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400cc2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cc2e:	d004      	beq.n	3400cc3a <HAL_RCCEx_PeriphCLKConfig+0x3942>
3400cc30:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3400cc34:	481b      	ldr	r0, [pc, #108]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cc36:	f7f4 fcf9 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400cc3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400cc40:	2b00      	cmp	r3, #0
3400cc42:	d005      	beq.n	3400cc50 <HAL_RCCEx_PeriphCLKConfig+0x3958>
3400cc44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400cc4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cc4e:	d904      	bls.n	3400cc5a <HAL_RCCEx_PeriphCLKConfig+0x3962>
3400cc50:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3400cc54:	4813      	ldr	r0, [pc, #76]	@ (3400cca4 <HAL_RCCEx_PeriphCLKConfig+0x39ac>)
3400cc56:	f7f4 fce9 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400cc5a:	4b13      	ldr	r3, [pc, #76]	@ (3400cca8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400cc5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400cc60:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cc64:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cc68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400cc6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cc72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400cc74:	3b01      	subs	r3, #1
3400cc76:	041b      	lsls	r3, r3, #16
3400cc78:	4313      	orrs	r3, r2
3400cc7a:	4a0b      	ldr	r2, [pc, #44]	@ (3400cca8 <HAL_RCCEx_PeriphCLKConfig+0x39b0>)
3400cc7c:	430b      	orrs	r3, r1
3400cc7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400cc82:	f7fc f857 	bl	34008d34 <LL_RCC_IC9_Enable>
3400cc86:	e064      	b.n	3400cd52 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
3400cc88:	0701142c 	.word	0x0701142c
3400cc8c:	0700182c 	.word	0x0700182c
3400cc90:	0701182c 	.word	0x0701182c
3400cc94:	0702182c 	.word	0x0702182c
3400cc98:	0703182c 	.word	0x0703182c
3400cc9c:	0704182c 	.word	0x0704182c
3400cca0:	0705182c 	.word	0x0705182c
3400cca4:	3401ae18 	.word	0x3401ae18
3400cca8:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
3400ccac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccb0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400ccb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400ccb8:	d142      	bne.n	3400cd40 <HAL_RCCEx_PeriphCLKConfig+0x3a48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ccba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ccc0:	2b00      	cmp	r3, #0
3400ccc2:	d016      	beq.n	3400ccf2 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400ccc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ccca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ccce:	d010      	beq.n	3400ccf2 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400ccd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ccd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ccda:	d00a      	beq.n	3400ccf2 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400ccdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400cce2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cce6:	d004      	beq.n	3400ccf2 <HAL_RCCEx_PeriphCLKConfig+0x39fa>
3400cce8:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3400ccec:	48b2      	ldr	r0, [pc, #712]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400ccee:	f7f4 fc9d 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ccf2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ccf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ccf8:	2b00      	cmp	r3, #0
3400ccfa:	d005      	beq.n	3400cd08 <HAL_RCCEx_PeriphCLKConfig+0x3a10>
3400ccfc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400cd02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cd06:	d904      	bls.n	3400cd12 <HAL_RCCEx_PeriphCLKConfig+0x3a1a>
3400cd08:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400cd0c:	48aa      	ldr	r0, [pc, #680]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400cd0e:	f7f4 fc8d 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400cd12:	4baa      	ldr	r3, [pc, #680]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400cd14:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400cd18:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cd1c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cd20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400cd26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400cd2c:	3b01      	subs	r3, #1
3400cd2e:	041b      	lsls	r3, r3, #16
3400cd30:	4313      	orrs	r3, r2
3400cd32:	4aa2      	ldr	r2, [pc, #648]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400cd34:	430b      	orrs	r3, r1
3400cd36:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400cd3a:	f7fc f8fb 	bl	34008f34 <LL_RCC_IC14_Enable>
3400cd3e:	e008      	b.n	3400cd52 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
3400cd40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cd48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cd4c:	d101      	bne.n	3400cd52 <HAL_RCCEx_PeriphCLKConfig+0x3a5a>
    {
      LL_RCC_CLKP_Enable();
3400cd4e:	f7fc fab1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
3400cd52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd56:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400cd5a:	4618      	mov	r0, r3
3400cd5c:	f7fb f9a8 	bl	340080b0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3400cd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
3400cd68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3400cd6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400cd70:	2300      	movs	r3, #0
3400cd72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
3400cd76:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3400cd7a:	4603      	mov	r3, r0
3400cd7c:	460a      	mov	r2, r1
3400cd7e:	4313      	orrs	r3, r2
3400cd80:	f000 8082 	beq.w	3400ce88 <HAL_RCCEx_PeriphCLKConfig+0x3b90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3400cd84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd88:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400cd8c:	2b00      	cmp	r3, #0
3400cd8e:	d019      	beq.n	3400cdc4 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400cd90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cd94:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400cd98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400cd9c:	d012      	beq.n	3400cdc4 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400cd9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cda2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400cda6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400cdaa:	d00b      	beq.n	3400cdc4 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400cdac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdb0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400cdb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400cdb8:	d004      	beq.n	3400cdc4 <HAL_RCCEx_PeriphCLKConfig+0x3acc>
3400cdba:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
3400cdbe:	487e      	ldr	r0, [pc, #504]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400cdc0:	f7f4 fc34 	bl	3400162c <assert_failed>

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400cdc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdc8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400cdcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400cdd0:	d14a      	bne.n	3400ce68 <HAL_RCCEx_PeriphCLKConfig+0x3b70>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
3400cdd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400cdda:	2b00      	cmp	r3, #0
3400cddc:	d019      	beq.n	3400ce12 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400cdde:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400cde6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cdea:	d012      	beq.n	3400ce12 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400cdec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400cdf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cdf8:	d00b      	beq.n	3400ce12 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400cdfa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400ce02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ce06:	d004      	beq.n	3400ce12 <HAL_RCCEx_PeriphCLKConfig+0x3b1a>
3400ce08:	f240 511d 	movw	r1, #1309	@ 0x51d
3400ce0c:	486a      	ldr	r0, [pc, #424]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400ce0e:	f7f4 fc0d 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3400ce12:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400ce1a:	2b00      	cmp	r3, #0
3400ce1c:	d006      	beq.n	3400ce2c <HAL_RCCEx_PeriphCLKConfig+0x3b34>
3400ce1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400ce26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ce2a:	d904      	bls.n	3400ce36 <HAL_RCCEx_PeriphCLKConfig+0x3b3e>
3400ce2c:	f240 511e 	movw	r1, #1310	@ 0x51e
3400ce30:	4861      	ldr	r0, [pc, #388]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400ce32:	f7f4 fbfb 	bl	3400162c <assert_failed>

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400ce36:	4b61      	ldr	r3, [pc, #388]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400ce38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400ce3c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ce40:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ce44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce48:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400ce4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400ce54:	3b01      	subs	r3, #1
3400ce56:	041b      	lsls	r3, r3, #16
3400ce58:	4313      	orrs	r3, r2
3400ce5a:	4a58      	ldr	r2, [pc, #352]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400ce5c:	430b      	orrs	r3, r1
3400ce5e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3400ce62:	f7fc f8e7 	bl	34009034 <LL_RCC_IC16_Enable>
3400ce66:	e008      	b.n	3400ce7a <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400ce68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400ce70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400ce74:	d101      	bne.n	3400ce7a <HAL_RCCEx_PeriphCLKConfig+0x3b82>
    {
      LL_RCC_CLKP_Enable();
3400ce76:	f7fc fa1d 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
3400ce7a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce7e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3400ce82:	4618      	mov	r0, r3
3400ce84:	f7fb f92a 	bl	340080dc <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400ce88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ce8c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ce90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400ce94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400ce98:	2300      	movs	r3, #0
3400ce9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
3400ce9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3400cea2:	4603      	mov	r3, r0
3400cea4:	460a      	mov	r2, r1
3400cea6:	4313      	orrs	r3, r2
3400cea8:	f000 80e4 	beq.w	3400d074 <HAL_RCCEx_PeriphCLKConfig+0x3d7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3400ceac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceb0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400ceb4:	2b00      	cmp	r3, #0
3400ceb6:	d035      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400ceb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cebc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400cec4:	d02e      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cec6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ceca:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400ced2:	d027      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400ced4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ced8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cedc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400cee0:	d020      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cee2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cee6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400ceea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3400ceee:	d019      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cef0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cef4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3400cefc:	d012      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cefe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf02:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cf06:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3400cf0a:	d00b      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cf0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf10:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cf14:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3400cf18:	d004      	beq.n	3400cf24 <HAL_RCCEx_PeriphCLKConfig+0x3c2c>
3400cf1a:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3400cf1e:	4826      	ldr	r0, [pc, #152]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400cf20:	f7f4 fb84 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
3400cf24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf28:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cf2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400cf30:	d146      	bne.n	3400cfc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400cf32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400cf38:	2b00      	cmp	r3, #0
3400cf3a:	d016      	beq.n	3400cf6a <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400cf3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400cf42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cf46:	d010      	beq.n	3400cf6a <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400cf48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400cf4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cf52:	d00a      	beq.n	3400cf6a <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400cf54:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400cf5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cf5e:	d004      	beq.n	3400cf6a <HAL_RCCEx_PeriphCLKConfig+0x3c72>
3400cf60:	f240 513d 	movw	r1, #1341	@ 0x53d
3400cf64:	4814      	ldr	r0, [pc, #80]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400cf66:	f7f4 fb61 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400cf6a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400cf70:	2b00      	cmp	r3, #0
3400cf72:	d005      	beq.n	3400cf80 <HAL_RCCEx_PeriphCLKConfig+0x3c88>
3400cf74:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400cf7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400cf7e:	d904      	bls.n	3400cf8a <HAL_RCCEx_PeriphCLKConfig+0x3c92>
3400cf80:	f240 513e 	movw	r1, #1342	@ 0x53e
3400cf84:	480c      	ldr	r0, [pc, #48]	@ (3400cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3cc0>)
3400cf86:	f7f4 fb51 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400cf8a:	4b0c      	ldr	r3, [pc, #48]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400cf8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400cf90:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400cf94:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400cf98:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cf9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400cf9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400cfa4:	3b01      	subs	r3, #1
3400cfa6:	041b      	lsls	r3, r3, #16
3400cfa8:	4313      	orrs	r3, r2
3400cfaa:	4a04      	ldr	r2, [pc, #16]	@ (3400cfbc <HAL_RCCEx_PeriphCLKConfig+0x3cc4>)
3400cfac:	430b      	orrs	r3, r1
3400cfae:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400cfb2:	f7fb fe3f 	bl	34008c34 <LL_RCC_IC7_Enable>
3400cfb6:	e056      	b.n	3400d066 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
3400cfb8:	3401ae18 	.word	0x3401ae18
3400cfbc:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
3400cfc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfc4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400cfc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400cfcc:	d142      	bne.n	3400d054 <HAL_RCCEx_PeriphCLKConfig+0x3d5c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400cfce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400cfd4:	2b00      	cmp	r3, #0
3400cfd6:	d016      	beq.n	3400d006 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400cfd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400cfde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400cfe2:	d010      	beq.n	3400d006 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400cfe4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cfe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400cfea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400cfee:	d00a      	beq.n	3400d006 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400cff0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400cff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400cff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400cffa:	d004      	beq.n	3400d006 <HAL_RCCEx_PeriphCLKConfig+0x3d0e>
3400cffc:	f240 514a 	movw	r1, #1354	@ 0x54a
3400d000:	48b0      	ldr	r0, [pc, #704]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d002:	f7f4 fb13 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d006:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d00a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d00c:	2b00      	cmp	r3, #0
3400d00e:	d005      	beq.n	3400d01c <HAL_RCCEx_PeriphCLKConfig+0x3d24>
3400d010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d01a:	d904      	bls.n	3400d026 <HAL_RCCEx_PeriphCLKConfig+0x3d2e>
3400d01c:	f240 514b 	movw	r1, #1355	@ 0x54b
3400d020:	48a8      	ldr	r0, [pc, #672]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d022:	f7f4 fb03 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d026:	4ba8      	ldr	r3, [pc, #672]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d02c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d030:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d03a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d03e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d040:	3b01      	subs	r3, #1
3400d042:	041b      	lsls	r3, r3, #16
3400d044:	4313      	orrs	r3, r2
3400d046:	4aa0      	ldr	r2, [pc, #640]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d048:	430b      	orrs	r3, r1
3400d04a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d04e:	f7fb fe31 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400d052:	e008      	b.n	3400d066 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3400d054:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d058:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d05c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400d060:	d101      	bne.n	3400d066 <HAL_RCCEx_PeriphCLKConfig+0x3d6e>
    {
      LL_RCC_CLKP_Enable();
3400d062:	f7fc f927 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3400d066:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d06a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
3400d06e:	4618      	mov	r0, r3
3400d070:	f7fb f84a 	bl	34008108 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3400d074:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d078:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d07c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
3400d080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3400d084:	2300      	movs	r3, #0
3400d086:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
3400d08a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
3400d08e:	4603      	mov	r3, r0
3400d090:	460a      	mov	r2, r1
3400d092:	4313      	orrs	r3, r2
3400d094:	d07c      	beq.n	3400d190 <HAL_RCCEx_PeriphCLKConfig+0x3e98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3400d096:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d09a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d09e:	2b00      	cmp	r3, #0
3400d0a0:	d016      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d0a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d0aa:	2b10      	cmp	r3, #16
3400d0ac:	d010      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d0ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d0b6:	2b20      	cmp	r3, #32
3400d0b8:	d00a      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d0ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0be:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d0c2:	2b30      	cmp	r3, #48	@ 0x30
3400d0c4:	d004      	beq.n	3400d0d0 <HAL_RCCEx_PeriphCLKConfig+0x3dd8>
3400d0c6:	f240 5165 	movw	r1, #1381	@ 0x565
3400d0ca:	487e      	ldr	r0, [pc, #504]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d0cc:	f7f4 faae 	bl	3400162c <assert_failed>

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3400d0d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d0d8:	2b20      	cmp	r3, #32
3400d0da:	d14a      	bne.n	3400d172 <HAL_RCCEx_PeriphCLKConfig+0x3e7a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3400d0dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d0e4:	2b00      	cmp	r3, #0
3400d0e6:	d019      	beq.n	3400d11c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d0e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d0f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d0f4:	d012      	beq.n	3400d11c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d0f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d0fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d0fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d102:	d00b      	beq.n	3400d11c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d104:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3400d10c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d110:	d004      	beq.n	3400d11c <HAL_RCCEx_PeriphCLKConfig+0x3e24>
3400d112:	f240 516a 	movw	r1, #1386	@ 0x56a
3400d116:	486b      	ldr	r0, [pc, #428]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d118:	f7f4 fa88 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3400d11c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d124:	2b00      	cmp	r3, #0
3400d126:	d006      	beq.n	3400d136 <HAL_RCCEx_PeriphCLKConfig+0x3e3e>
3400d128:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d12c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d134:	d904      	bls.n	3400d140 <HAL_RCCEx_PeriphCLKConfig+0x3e48>
3400d136:	f240 516b 	movw	r1, #1387	@ 0x56b
3400d13a:	4862      	ldr	r0, [pc, #392]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d13c:	f7f4 fa76 	bl	3400162c <assert_failed>

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3400d140:	4b61      	ldr	r3, [pc, #388]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d142:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400d146:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d14a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d14e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d152:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3400d156:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d15a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400d15e:	3b01      	subs	r3, #1
3400d160:	041b      	lsls	r3, r3, #16
3400d162:	4313      	orrs	r3, r2
3400d164:	4a58      	ldr	r2, [pc, #352]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d166:	430b      	orrs	r3, r1
3400d168:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
3400d16c:	f7fc f862 	bl	34009234 <LL_RCC_IC20_Enable>
3400d170:	e007      	b.n	3400d182 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
3400d172:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d176:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d17a:	2b10      	cmp	r3, #16
3400d17c:	d101      	bne.n	3400d182 <HAL_RCCEx_PeriphCLKConfig+0x3e8a>
    {
      LL_RCC_CLKP_Enable();
3400d17e:	f7fc f899 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3400d182:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d186:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
3400d18a:	4618      	mov	r0, r3
3400d18c:	f7fa ffe8 	bl	34008160 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3400d190:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d194:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d198:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
3400d19c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3400d1a0:	2300      	movs	r3, #0
3400d1a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
3400d1a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
3400d1aa:	4603      	mov	r3, r0
3400d1ac:	460a      	mov	r2, r1
3400d1ae:	4313      	orrs	r3, r2
3400d1b0:	f000 80f6 	beq.w	3400d3a0 <HAL_RCCEx_PeriphCLKConfig+0x40a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3400d1b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1b8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d1bc:	4b43      	ldr	r3, [pc, #268]	@ (3400d2cc <HAL_RCCEx_PeriphCLKConfig+0x3fd4>)
3400d1be:	429a      	cmp	r2, r3
3400d1c0:	d035      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d1c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1c6:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d1ca:	4b41      	ldr	r3, [pc, #260]	@ (3400d2d0 <HAL_RCCEx_PeriphCLKConfig+0x3fd8>)
3400d1cc:	429a      	cmp	r2, r3
3400d1ce:	d02e      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d1d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d1d8:	4b3e      	ldr	r3, [pc, #248]	@ (3400d2d4 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d1da:	429a      	cmp	r2, r3
3400d1dc:	d027      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d1de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1e2:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d1e6:	4b3c      	ldr	r3, [pc, #240]	@ (3400d2d8 <HAL_RCCEx_PeriphCLKConfig+0x3fe0>)
3400d1e8:	429a      	cmp	r2, r3
3400d1ea:	d020      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1f0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d1f4:	4b39      	ldr	r3, [pc, #228]	@ (3400d2dc <HAL_RCCEx_PeriphCLKConfig+0x3fe4>)
3400d1f6:	429a      	cmp	r2, r3
3400d1f8:	d019      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d1fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d1fe:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d202:	4b37      	ldr	r3, [pc, #220]	@ (3400d2e0 <HAL_RCCEx_PeriphCLKConfig+0x3fe8>)
3400d204:	429a      	cmp	r2, r3
3400d206:	d012      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d208:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d20c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d210:	4b34      	ldr	r3, [pc, #208]	@ (3400d2e4 <HAL_RCCEx_PeriphCLKConfig+0x3fec>)
3400d212:	429a      	cmp	r2, r3
3400d214:	d00b      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d216:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d21a:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d21e:	4b32      	ldr	r3, [pc, #200]	@ (3400d2e8 <HAL_RCCEx_PeriphCLKConfig+0x3ff0>)
3400d220:	429a      	cmp	r2, r3
3400d222:	d004      	beq.n	3400d22e <HAL_RCCEx_PeriphCLKConfig+0x3f36>
3400d224:	f240 5185 	movw	r1, #1413	@ 0x585
3400d228:	4826      	ldr	r0, [pc, #152]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d22a:	f7f4 f9ff 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3400d22e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d232:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d236:	4b27      	ldr	r3, [pc, #156]	@ (3400d2d4 <HAL_RCCEx_PeriphCLKConfig+0x3fdc>)
3400d238:	429a      	cmp	r2, r3
3400d23a:	d157      	bne.n	3400d2ec <HAL_RCCEx_PeriphCLKConfig+0x3ff4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d242:	2b00      	cmp	r3, #0
3400d244:	d016      	beq.n	3400d274 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d246:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d24c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d250:	d010      	beq.n	3400d274 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d252:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d25c:	d00a      	beq.n	3400d274 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d25e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d264:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d268:	d004      	beq.n	3400d274 <HAL_RCCEx_PeriphCLKConfig+0x3f7c>
3400d26a:	f240 518a 	movw	r1, #1418	@ 0x58a
3400d26e:	4815      	ldr	r0, [pc, #84]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d270:	f7f4 f9dc 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d274:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d27a:	2b00      	cmp	r3, #0
3400d27c:	d005      	beq.n	3400d28a <HAL_RCCEx_PeriphCLKConfig+0x3f92>
3400d27e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d288:	d904      	bls.n	3400d294 <HAL_RCCEx_PeriphCLKConfig+0x3f9c>
3400d28a:	f240 518b 	movw	r1, #1419	@ 0x58b
3400d28e:	480d      	ldr	r0, [pc, #52]	@ (3400d2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fcc>)
3400d290:	f7f4 f9cc 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d294:	4b0c      	ldr	r3, [pc, #48]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d296:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d29a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d29e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d2a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d2a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d2ae:	3b01      	subs	r3, #1
3400d2b0:	041b      	lsls	r3, r3, #16
3400d2b2:	4313      	orrs	r3, r2
3400d2b4:	4a04      	ldr	r2, [pc, #16]	@ (3400d2c8 <HAL_RCCEx_PeriphCLKConfig+0x3fd0>)
3400d2b6:	430b      	orrs	r3, r1
3400d2b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d2bc:	f7fb fcba 	bl	34008c34 <LL_RCC_IC7_Enable>
3400d2c0:	e067      	b.n	3400d392 <HAL_RCCEx_PeriphCLKConfig+0x409a>
3400d2c2:	bf00      	nop
3400d2c4:	3401ae18 	.word	0x3401ae18
3400d2c8:	56028000 	.word	0x56028000
3400d2cc:	07001418 	.word	0x07001418
3400d2d0:	07011418 	.word	0x07011418
3400d2d4:	07021418 	.word	0x07021418
3400d2d8:	07031418 	.word	0x07031418
3400d2dc:	07041418 	.word	0x07041418
3400d2e0:	07051418 	.word	0x07051418
3400d2e4:	07061418 	.word	0x07061418
3400d2e8:	07071418 	.word	0x07071418
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
3400d2ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2f0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d2f4:	4b9c      	ldr	r3, [pc, #624]	@ (3400d568 <HAL_RCCEx_PeriphCLKConfig+0x4270>)
3400d2f6:	429a      	cmp	r2, r3
3400d2f8:	d142      	bne.n	3400d380 <HAL_RCCEx_PeriphCLKConfig+0x4088>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d300:	2b00      	cmp	r3, #0
3400d302:	d016      	beq.n	3400d332 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d304:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d30e:	d010      	beq.n	3400d332 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d310:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d31a:	d00a      	beq.n	3400d332 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d31c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d326:	d004      	beq.n	3400d332 <HAL_RCCEx_PeriphCLKConfig+0x403a>
3400d328:	f240 5197 	movw	r1, #1431	@ 0x597
3400d32c:	488f      	ldr	r0, [pc, #572]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d32e:	f7f4 f97d 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d332:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d338:	2b00      	cmp	r3, #0
3400d33a:	d005      	beq.n	3400d348 <HAL_RCCEx_PeriphCLKConfig+0x4050>
3400d33c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d346:	d904      	bls.n	3400d352 <HAL_RCCEx_PeriphCLKConfig+0x405a>
3400d348:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
3400d34c:	4887      	ldr	r0, [pc, #540]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d34e:	f7f4 f96d 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d352:	4b87      	ldr	r3, [pc, #540]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d358:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d35c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d360:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d364:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d366:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d36a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d36c:	3b01      	subs	r3, #1
3400d36e:	041b      	lsls	r3, r3, #16
3400d370:	4313      	orrs	r3, r2
3400d372:	4a7f      	ldr	r2, [pc, #508]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d374:	430b      	orrs	r3, r1
3400d376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d37a:	f7fb fc9b 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400d37e:	e008      	b.n	3400d392 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
3400d380:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d384:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3400d388:	4b7a      	ldr	r3, [pc, #488]	@ (3400d574 <HAL_RCCEx_PeriphCLKConfig+0x427c>)
3400d38a:	429a      	cmp	r2, r3
3400d38c:	d101      	bne.n	3400d392 <HAL_RCCEx_PeriphCLKConfig+0x409a>
    {
      LL_RCC_CLKP_Enable();
3400d38e:	f7fb ff91 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
3400d392:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d396:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3400d39a:	4618      	mov	r0, r3
3400d39c:	f7fa fef6 	bl	3400818c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
3400d3a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d3a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
3400d3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
3400d3b0:	2300      	movs	r3, #0
3400d3b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
3400d3b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
3400d3ba:	4603      	mov	r3, r0
3400d3bc:	460a      	mov	r2, r1
3400d3be:	4313      	orrs	r3, r2
3400d3c0:	f000 80fa 	beq.w	3400d5b8 <HAL_RCCEx_PeriphCLKConfig+0x42c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3400d3c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3c8:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d3cc:	4b6a      	ldr	r3, [pc, #424]	@ (3400d578 <HAL_RCCEx_PeriphCLKConfig+0x4280>)
3400d3ce:	429a      	cmp	r2, r3
3400d3d0:	d035      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d3d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3d6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d3da:	4b68      	ldr	r3, [pc, #416]	@ (3400d57c <HAL_RCCEx_PeriphCLKConfig+0x4284>)
3400d3dc:	429a      	cmp	r2, r3
3400d3de:	d02e      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d3e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3e4:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d3e8:	4b65      	ldr	r3, [pc, #404]	@ (3400d580 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400d3ea:	429a      	cmp	r2, r3
3400d3ec:	d027      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d3ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d3f2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d3f6:	4b63      	ldr	r3, [pc, #396]	@ (3400d584 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400d3f8:	429a      	cmp	r2, r3
3400d3fa:	d020      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d3fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d400:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d404:	4b60      	ldr	r3, [pc, #384]	@ (3400d588 <HAL_RCCEx_PeriphCLKConfig+0x4290>)
3400d406:	429a      	cmp	r2, r3
3400d408:	d019      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d40a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d40e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d412:	4b5e      	ldr	r3, [pc, #376]	@ (3400d58c <HAL_RCCEx_PeriphCLKConfig+0x4294>)
3400d414:	429a      	cmp	r2, r3
3400d416:	d012      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d41c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d420:	4b5b      	ldr	r3, [pc, #364]	@ (3400d590 <HAL_RCCEx_PeriphCLKConfig+0x4298>)
3400d422:	429a      	cmp	r2, r3
3400d424:	d00b      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d426:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d42a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d42e:	4b59      	ldr	r3, [pc, #356]	@ (3400d594 <HAL_RCCEx_PeriphCLKConfig+0x429c>)
3400d430:	429a      	cmp	r2, r3
3400d432:	d004      	beq.n	3400d43e <HAL_RCCEx_PeriphCLKConfig+0x4146>
3400d434:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3400d438:	484c      	ldr	r0, [pc, #304]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d43a:	f7f4 f8f7 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
3400d43e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d442:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d446:	4b4e      	ldr	r3, [pc, #312]	@ (3400d580 <HAL_RCCEx_PeriphCLKConfig+0x4288>)
3400d448:	429a      	cmp	r2, r3
3400d44a:	d142      	bne.n	3400d4d2 <HAL_RCCEx_PeriphCLKConfig+0x41da>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d44c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d452:	2b00      	cmp	r3, #0
3400d454:	d016      	beq.n	3400d484 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d456:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d460:	d010      	beq.n	3400d484 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d46c:	d00a      	beq.n	3400d484 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d46e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d474:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d478:	d004      	beq.n	3400d484 <HAL_RCCEx_PeriphCLKConfig+0x418c>
3400d47a:	f240 51b7 	movw	r1, #1463	@ 0x5b7
3400d47e:	483b      	ldr	r0, [pc, #236]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d480:	f7f4 f8d4 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d484:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d48a:	2b00      	cmp	r3, #0
3400d48c:	d005      	beq.n	3400d49a <HAL_RCCEx_PeriphCLKConfig+0x41a2>
3400d48e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d498:	d904      	bls.n	3400d4a4 <HAL_RCCEx_PeriphCLKConfig+0x41ac>
3400d49a:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
3400d49e:	4833      	ldr	r0, [pc, #204]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d4a0:	f7f4 f8c4 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d4a4:	4b32      	ldr	r3, [pc, #200]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d4a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d4aa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d4ae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d4b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d4b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d4be:	3b01      	subs	r3, #1
3400d4c0:	041b      	lsls	r3, r3, #16
3400d4c2:	4313      	orrs	r3, r2
3400d4c4:	4a2a      	ldr	r2, [pc, #168]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d4c6:	430b      	orrs	r3, r1
3400d4c8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d4cc:	f7fb fbb2 	bl	34008c34 <LL_RCC_IC7_Enable>
3400d4d0:	e06b      	b.n	3400d5aa <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
3400d4d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4d6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d4da:	4b2a      	ldr	r3, [pc, #168]	@ (3400d584 <HAL_RCCEx_PeriphCLKConfig+0x428c>)
3400d4dc:	429a      	cmp	r2, r3
3400d4de:	d15b      	bne.n	3400d598 <HAL_RCCEx_PeriphCLKConfig+0x42a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d4e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4e6:	2b00      	cmp	r3, #0
3400d4e8:	d016      	beq.n	3400d518 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d4ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d4f4:	d010      	beq.n	3400d518 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d4f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d4fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d4fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d500:	d00a      	beq.n	3400d518 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d502:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d508:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d50c:	d004      	beq.n	3400d518 <HAL_RCCEx_PeriphCLKConfig+0x4220>
3400d50e:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3400d512:	4816      	ldr	r0, [pc, #88]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d514:	f7f4 f88a 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d518:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d51e:	2b00      	cmp	r3, #0
3400d520:	d005      	beq.n	3400d52e <HAL_RCCEx_PeriphCLKConfig+0x4236>
3400d522:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d52c:	d904      	bls.n	3400d538 <HAL_RCCEx_PeriphCLKConfig+0x4240>
3400d52e:	f240 51c5 	movw	r1, #1477	@ 0x5c5
3400d532:	480e      	ldr	r0, [pc, #56]	@ (3400d56c <HAL_RCCEx_PeriphCLKConfig+0x4274>)
3400d534:	f7f4 f87a 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d538:	4b0d      	ldr	r3, [pc, #52]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d53a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d53e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d542:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d546:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d54a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d54c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d552:	3b01      	subs	r3, #1
3400d554:	041b      	lsls	r3, r3, #16
3400d556:	4313      	orrs	r3, r2
3400d558:	4a05      	ldr	r2, [pc, #20]	@ (3400d570 <HAL_RCCEx_PeriphCLKConfig+0x4278>)
3400d55a:	430b      	orrs	r3, r1
3400d55c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d560:	f7fb fba8 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400d564:	e021      	b.n	3400d5aa <HAL_RCCEx_PeriphCLKConfig+0x42b2>
3400d566:	bf00      	nop
3400d568:	07031418 	.word	0x07031418
3400d56c:	3401ae18 	.word	0x3401ae18
3400d570:	56028000 	.word	0x56028000
3400d574:	07011418 	.word	0x07011418
3400d578:	07001818 	.word	0x07001818
3400d57c:	07011818 	.word	0x07011818
3400d580:	07021818 	.word	0x07021818
3400d584:	07031818 	.word	0x07031818
3400d588:	07041818 	.word	0x07041818
3400d58c:	07051818 	.word	0x07051818
3400d590:	07061818 	.word	0x07061818
3400d594:	07071818 	.word	0x07071818
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3400d598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d59c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3400d5a0:	4b6f      	ldr	r3, [pc, #444]	@ (3400d760 <HAL_RCCEx_PeriphCLKConfig+0x4468>)
3400d5a2:	429a      	cmp	r2, r3
3400d5a4:	d101      	bne.n	3400d5aa <HAL_RCCEx_PeriphCLKConfig+0x42b2>
    {
      LL_RCC_CLKP_Enable();
3400d5a6:	f7fb fe85 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
3400d5aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
3400d5b2:	4618      	mov	r0, r3
3400d5b4:	f7fa fdea 	bl	3400818c <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3400d5b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d5c0:	2100      	movs	r1, #0
3400d5c2:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3400d5c6:	f003 0301 	and.w	r3, r3, #1
3400d5ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
3400d5ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
3400d5d2:	4603      	mov	r3, r0
3400d5d4:	460a      	mov	r2, r1
3400d5d6:	4313      	orrs	r3, r2
3400d5d8:	f000 80d7 	beq.w	3400d78a <HAL_RCCEx_PeriphCLKConfig+0x4492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3400d5dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d5e4:	2b00      	cmp	r3, #0
3400d5e6:	d028      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d5e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5ec:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d5f0:	2b01      	cmp	r3, #1
3400d5f2:	d022      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d5f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d5f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d5fc:	2b02      	cmp	r3, #2
3400d5fe:	d01c      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d600:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d604:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d608:	2b03      	cmp	r3, #3
3400d60a:	d016      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d60c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d610:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d614:	2b04      	cmp	r3, #4
3400d616:	d010      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d618:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d61c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d620:	2b05      	cmp	r3, #5
3400d622:	d00a      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d624:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d628:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d62c:	2b06      	cmp	r3, #6
3400d62e:	d004      	beq.n	3400d63a <HAL_RCCEx_PeriphCLKConfig+0x4342>
3400d630:	f240 51df 	movw	r1, #1503	@ 0x5df
3400d634:	484b      	ldr	r0, [pc, #300]	@ (3400d764 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400d636:	f7f3 fff9 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3400d63a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d63e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d642:	2b02      	cmp	r3, #2
3400d644:	d142      	bne.n	3400d6cc <HAL_RCCEx_PeriphCLKConfig+0x43d4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3400d646:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d64c:	2b00      	cmp	r3, #0
3400d64e:	d016      	beq.n	3400d67e <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400d650:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d65a:	d010      	beq.n	3400d67e <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400d65c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d666:	d00a      	beq.n	3400d67e <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400d668:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3400d66e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d672:	d004      	beq.n	3400d67e <HAL_RCCEx_PeriphCLKConfig+0x4386>
3400d674:	f240 51e4 	movw	r1, #1508	@ 0x5e4
3400d678:	483a      	ldr	r0, [pc, #232]	@ (3400d764 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400d67a:	f7f3 ffd7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3400d67e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d684:	2b00      	cmp	r3, #0
3400d686:	d005      	beq.n	3400d694 <HAL_RCCEx_PeriphCLKConfig+0x439c>
3400d688:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d68c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d68e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d692:	d904      	bls.n	3400d69e <HAL_RCCEx_PeriphCLKConfig+0x43a6>
3400d694:	f240 51e5 	movw	r1, #1509	@ 0x5e5
3400d698:	4832      	ldr	r0, [pc, #200]	@ (3400d764 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400d69a:	f7f3 ffc7 	bl	3400162c <assert_failed>

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3400d69e:	4b32      	ldr	r3, [pc, #200]	@ (3400d768 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400d6a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400d6a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d6a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d6ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400d6b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3400d6b8:	3b01      	subs	r3, #1
3400d6ba:	041b      	lsls	r3, r3, #16
3400d6bc:	4313      	orrs	r3, r2
3400d6be:	4a2a      	ldr	r2, [pc, #168]	@ (3400d768 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400d6c0:	430b      	orrs	r3, r1
3400d6c2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3400d6c6:	f7fb fab5 	bl	34008c34 <LL_RCC_IC7_Enable>
3400d6ca:	e057      	b.n	3400d77c <HAL_RCCEx_PeriphCLKConfig+0x4484>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3400d6cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6d0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d6d4:	2b03      	cmp	r3, #3
3400d6d6:	d149      	bne.n	3400d76c <HAL_RCCEx_PeriphCLKConfig+0x4474>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d6d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6de:	2b00      	cmp	r3, #0
3400d6e0:	d016      	beq.n	3400d710 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400d6e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d6ec:	d010      	beq.n	3400d710 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400d6ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d6f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d6f8:	d00a      	beq.n	3400d710 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400d6fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d700:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d704:	d004      	beq.n	3400d710 <HAL_RCCEx_PeriphCLKConfig+0x4418>
3400d706:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3400d70a:	4816      	ldr	r0, [pc, #88]	@ (3400d764 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400d70c:	f7f3 ff8e 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d710:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d716:	2b00      	cmp	r3, #0
3400d718:	d005      	beq.n	3400d726 <HAL_RCCEx_PeriphCLKConfig+0x442e>
3400d71a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d71e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d724:	d904      	bls.n	3400d730 <HAL_RCCEx_PeriphCLKConfig+0x4438>
3400d726:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3400d72a:	480e      	ldr	r0, [pc, #56]	@ (3400d764 <HAL_RCCEx_PeriphCLKConfig+0x446c>)
3400d72c:	f7f3 ff7e 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d730:	4b0d      	ldr	r3, [pc, #52]	@ (3400d768 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400d732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d736:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d73a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d73e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d744:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d74a:	3b01      	subs	r3, #1
3400d74c:	041b      	lsls	r3, r3, #16
3400d74e:	4313      	orrs	r3, r2
3400d750:	4a05      	ldr	r2, [pc, #20]	@ (3400d768 <HAL_RCCEx_PeriphCLKConfig+0x4470>)
3400d752:	430b      	orrs	r3, r1
3400d754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d758:	f7fb faac 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400d75c:	e00e      	b.n	3400d77c <HAL_RCCEx_PeriphCLKConfig+0x4484>
3400d75e:	bf00      	nop
3400d760:	07011818 	.word	0x07011818
3400d764:	3401ae18 	.word	0x3401ae18
3400d768:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3400d76c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d770:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d774:	2b01      	cmp	r3, #1
3400d776:	d101      	bne.n	3400d77c <HAL_RCCEx_PeriphCLKConfig+0x4484>
    {
      LL_RCC_CLKP_Enable();
3400d778:	f7fb fd9c 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
3400d77c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d780:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400d784:	4618      	mov	r0, r3
3400d786:	f7fa fd17 	bl	340081b8 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3400d78a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d792:	2100      	movs	r1, #0
3400d794:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3400d798:	f003 0302 	and.w	r3, r3, #2
3400d79c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
3400d7a0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
3400d7a4:	4603      	mov	r3, r0
3400d7a6:	460a      	mov	r2, r1
3400d7a8:	4313      	orrs	r3, r2
3400d7aa:	f000 80da 	beq.w	3400d962 <HAL_RCCEx_PeriphCLKConfig+0x466a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3400d7ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7b2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7b6:	4bb4      	ldr	r3, [pc, #720]	@ (3400da88 <HAL_RCCEx_PeriphCLKConfig+0x4790>)
3400d7b8:	429a      	cmp	r2, r3
3400d7ba:	d02e      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d7bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7c4:	4bb1      	ldr	r3, [pc, #708]	@ (3400da8c <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400d7c6:	429a      	cmp	r2, r3
3400d7c8:	d027      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d7ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ce:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7d2:	4baf      	ldr	r3, [pc, #700]	@ (3400da90 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400d7d4:	429a      	cmp	r2, r3
3400d7d6:	d020      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d7d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7dc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7e0:	4bac      	ldr	r3, [pc, #688]	@ (3400da94 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400d7e2:	429a      	cmp	r2, r3
3400d7e4:	d019      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d7e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7ea:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7ee:	4baa      	ldr	r3, [pc, #680]	@ (3400da98 <HAL_RCCEx_PeriphCLKConfig+0x47a0>)
3400d7f0:	429a      	cmp	r2, r3
3400d7f2:	d012      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d7f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d7f8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d7fc:	4ba7      	ldr	r3, [pc, #668]	@ (3400da9c <HAL_RCCEx_PeriphCLKConfig+0x47a4>)
3400d7fe:	429a      	cmp	r2, r3
3400d800:	d00b      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d802:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d806:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d80a:	4ba5      	ldr	r3, [pc, #660]	@ (3400daa0 <HAL_RCCEx_PeriphCLKConfig+0x47a8>)
3400d80c:	429a      	cmp	r2, r3
3400d80e:	d004      	beq.n	3400d81a <HAL_RCCEx_PeriphCLKConfig+0x4522>
3400d810:	f240 610c 	movw	r1, #1548	@ 0x60c
3400d814:	48a3      	ldr	r0, [pc, #652]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d816:	f7f3 ff09 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
3400d81a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d81e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d822:	4b9b      	ldr	r3, [pc, #620]	@ (3400da90 <HAL_RCCEx_PeriphCLKConfig+0x4798>)
3400d824:	429a      	cmp	r2, r3
3400d826:	d142      	bne.n	3400d8ae <HAL_RCCEx_PeriphCLKConfig+0x45b6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400d828:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d82e:	2b00      	cmp	r3, #0
3400d830:	d016      	beq.n	3400d860 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400d832:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d83c:	d010      	beq.n	3400d860 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400d83e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d848:	d00a      	beq.n	3400d860 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400d84a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400d850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d854:	d004      	beq.n	3400d860 <HAL_RCCEx_PeriphCLKConfig+0x4568>
3400d856:	f240 6111 	movw	r1, #1553	@ 0x611
3400d85a:	4892      	ldr	r0, [pc, #584]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d85c:	f7f3 fee6 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400d860:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d866:	2b00      	cmp	r3, #0
3400d868:	d005      	beq.n	3400d876 <HAL_RCCEx_PeriphCLKConfig+0x457e>
3400d86a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d86e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d874:	d904      	bls.n	3400d880 <HAL_RCCEx_PeriphCLKConfig+0x4588>
3400d876:	f240 6112 	movw	r1, #1554	@ 0x612
3400d87a:	488a      	ldr	r0, [pc, #552]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d87c:	f7f3 fed6 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400d880:	4b89      	ldr	r3, [pc, #548]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400d882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400d886:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d88a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d88e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400d894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400d89a:	3b01      	subs	r3, #1
3400d89c:	041b      	lsls	r3, r3, #16
3400d89e:	4313      	orrs	r3, r2
3400d8a0:	4a81      	ldr	r2, [pc, #516]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400d8a2:	430b      	orrs	r3, r1
3400d8a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400d8a8:	f7fb fa04 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400d8ac:	e052      	b.n	3400d954 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3400d8ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8b2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d8b6:	4b77      	ldr	r3, [pc, #476]	@ (3400da94 <HAL_RCCEx_PeriphCLKConfig+0x479c>)
3400d8b8:	429a      	cmp	r2, r3
3400d8ba:	d142      	bne.n	3400d942 <HAL_RCCEx_PeriphCLKConfig+0x464a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400d8bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d8c2:	2b00      	cmp	r3, #0
3400d8c4:	d016      	beq.n	3400d8f4 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400d8c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d8cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400d8d0:	d010      	beq.n	3400d8f4 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400d8d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400d8dc:	d00a      	beq.n	3400d8f4 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400d8de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400d8e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400d8e8:	d004      	beq.n	3400d8f4 <HAL_RCCEx_PeriphCLKConfig+0x45fc>
3400d8ea:	f240 611e 	movw	r1, #1566	@ 0x61e
3400d8ee:	486d      	ldr	r0, [pc, #436]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d8f0:	f7f3 fe9c 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400d8f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d8fa:	2b00      	cmp	r3, #0
3400d8fc:	d005      	beq.n	3400d90a <HAL_RCCEx_PeriphCLKConfig+0x4612>
3400d8fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400d908:	d904      	bls.n	3400d914 <HAL_RCCEx_PeriphCLKConfig+0x461c>
3400d90a:	f240 611f 	movw	r1, #1567	@ 0x61f
3400d90e:	4865      	ldr	r0, [pc, #404]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d910:	f7f3 fe8c 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400d914:	4b64      	ldr	r3, [pc, #400]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400d916:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400d91a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400d91e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400d922:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d926:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400d928:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400d92e:	3b01      	subs	r3, #1
3400d930:	041b      	lsls	r3, r3, #16
3400d932:	4313      	orrs	r3, r2
3400d934:	4a5c      	ldr	r2, [pc, #368]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400d936:	430b      	orrs	r3, r1
3400d938:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400d93c:	f7fb f9fa 	bl	34008d34 <LL_RCC_IC9_Enable>
3400d940:	e008      	b.n	3400d954 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
3400d942:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d946:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
3400d94a:	4b50      	ldr	r3, [pc, #320]	@ (3400da8c <HAL_RCCEx_PeriphCLKConfig+0x4794>)
3400d94c:	429a      	cmp	r2, r3
3400d94e:	d101      	bne.n	3400d954 <HAL_RCCEx_PeriphCLKConfig+0x465c>
    {
      LL_RCC_CLKP_Enable();
3400d950:	f7fb fcb0 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3400d954:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d958:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
3400d95c:	4618      	mov	r0, r3
3400d95e:	f7fa fc41 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
3400d962:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d966:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d96a:	2100      	movs	r1, #0
3400d96c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
3400d970:	f003 0304 	and.w	r3, r3, #4
3400d974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3400d978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
3400d97c:	4603      	mov	r3, r0
3400d97e:	460a      	mov	r2, r1
3400d980:	4313      	orrs	r3, r2
3400d982:	f000 80fb 	beq.w	3400db7c <HAL_RCCEx_PeriphCLKConfig+0x4884>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3400d986:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d98a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d98e:	4b47      	ldr	r3, [pc, #284]	@ (3400daac <HAL_RCCEx_PeriphCLKConfig+0x47b4>)
3400d990:	429a      	cmp	r2, r3
3400d992:	d02e      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d994:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d998:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d99c:	4b44      	ldr	r3, [pc, #272]	@ (3400dab0 <HAL_RCCEx_PeriphCLKConfig+0x47b8>)
3400d99e:	429a      	cmp	r2, r3
3400d9a0:	d027      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9a6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9aa:	4b42      	ldr	r3, [pc, #264]	@ (3400dab4 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400d9ac:	429a      	cmp	r2, r3
3400d9ae:	d020      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9b4:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9b8:	4b3f      	ldr	r3, [pc, #252]	@ (3400dab8 <HAL_RCCEx_PeriphCLKConfig+0x47c0>)
3400d9ba:	429a      	cmp	r2, r3
3400d9bc:	d019      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9c2:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9c6:	4b3d      	ldr	r3, [pc, #244]	@ (3400dabc <HAL_RCCEx_PeriphCLKConfig+0x47c4>)
3400d9c8:	429a      	cmp	r2, r3
3400d9ca:	d012      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9d4:	4b3a      	ldr	r3, [pc, #232]	@ (3400dac0 <HAL_RCCEx_PeriphCLKConfig+0x47c8>)
3400d9d6:	429a      	cmp	r2, r3
3400d9d8:	d00b      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9de:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9e2:	4b38      	ldr	r3, [pc, #224]	@ (3400dac4 <HAL_RCCEx_PeriphCLKConfig+0x47cc>)
3400d9e4:	429a      	cmp	r2, r3
3400d9e6:	d004      	beq.n	3400d9f2 <HAL_RCCEx_PeriphCLKConfig+0x46fa>
3400d9e8:	f240 6139 	movw	r1, #1593	@ 0x639
3400d9ec:	482d      	ldr	r0, [pc, #180]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400d9ee:	f7f3 fe1d 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3400d9f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400d9f6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400d9fa:	4b2e      	ldr	r3, [pc, #184]	@ (3400dab4 <HAL_RCCEx_PeriphCLKConfig+0x47bc>)
3400d9fc:	429a      	cmp	r2, r3
3400d9fe:	d163      	bne.n	3400dac8 <HAL_RCCEx_PeriphCLKConfig+0x47d0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400da00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da06:	2b00      	cmp	r3, #0
3400da08:	d016      	beq.n	3400da38 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400da0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400da14:	d010      	beq.n	3400da38 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400da16:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400da20:	d00a      	beq.n	3400da38 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400da22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400da28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400da2c:	d004      	beq.n	3400da38 <HAL_RCCEx_PeriphCLKConfig+0x4740>
3400da2e:	f240 613e 	movw	r1, #1598	@ 0x63e
3400da32:	481c      	ldr	r0, [pc, #112]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400da34:	f7f3 fdfa 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400da38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da3e:	2b00      	cmp	r3, #0
3400da40:	d005      	beq.n	3400da4e <HAL_RCCEx_PeriphCLKConfig+0x4756>
3400da42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400da4c:	d904      	bls.n	3400da58 <HAL_RCCEx_PeriphCLKConfig+0x4760>
3400da4e:	f240 613f 	movw	r1, #1599	@ 0x63f
3400da52:	4814      	ldr	r0, [pc, #80]	@ (3400daa4 <HAL_RCCEx_PeriphCLKConfig+0x47ac>)
3400da54:	f7f3 fdea 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400da58:	4b13      	ldr	r3, [pc, #76]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400da5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400da5e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400da62:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400da66:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400da6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400da70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400da72:	3b01      	subs	r3, #1
3400da74:	041b      	lsls	r3, r3, #16
3400da76:	4313      	orrs	r3, r2
3400da78:	4a0b      	ldr	r2, [pc, #44]	@ (3400daa8 <HAL_RCCEx_PeriphCLKConfig+0x47b0>)
3400da7a:	430b      	orrs	r3, r1
3400da7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400da80:	f7fb f918 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400da84:	e073      	b.n	3400db6e <HAL_RCCEx_PeriphCLKConfig+0x4876>
3400da86:	bf00      	nop
3400da88:	07000420 	.word	0x07000420
3400da8c:	07010420 	.word	0x07010420
3400da90:	07020420 	.word	0x07020420
3400da94:	07030420 	.word	0x07030420
3400da98:	07040420 	.word	0x07040420
3400da9c:	07050420 	.word	0x07050420
3400daa0:	07060420 	.word	0x07060420
3400daa4:	3401ae18 	.word	0x3401ae18
3400daa8:	56028000 	.word	0x56028000
3400daac:	07000820 	.word	0x07000820
3400dab0:	07010820 	.word	0x07010820
3400dab4:	07020820 	.word	0x07020820
3400dab8:	07030820 	.word	0x07030820
3400dabc:	07040820 	.word	0x07040820
3400dac0:	07050820 	.word	0x07050820
3400dac4:	07060820 	.word	0x07060820
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3400dac8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dacc:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400dad0:	4b98      	ldr	r3, [pc, #608]	@ (3400dd34 <HAL_RCCEx_PeriphCLKConfig+0x4a3c>)
3400dad2:	429a      	cmp	r2, r3
3400dad4:	d142      	bne.n	3400db5c <HAL_RCCEx_PeriphCLKConfig+0x4864>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dad6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dadc:	2b00      	cmp	r3, #0
3400dade:	d016      	beq.n	3400db0e <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400dae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400daea:	d010      	beq.n	3400db0e <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400daec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400daf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400daf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400daf6:	d00a      	beq.n	3400db0e <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400daf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dafc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dafe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400db02:	d004      	beq.n	3400db0e <HAL_RCCEx_PeriphCLKConfig+0x4816>
3400db04:	f240 614b 	movw	r1, #1611	@ 0x64b
3400db08:	488b      	ldr	r0, [pc, #556]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400db0a:	f7f3 fd8f 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400db0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400db14:	2b00      	cmp	r3, #0
3400db16:	d005      	beq.n	3400db24 <HAL_RCCEx_PeriphCLKConfig+0x482c>
3400db18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400db1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400db22:	d904      	bls.n	3400db2e <HAL_RCCEx_PeriphCLKConfig+0x4836>
3400db24:	f240 614c 	movw	r1, #1612	@ 0x64c
3400db28:	4883      	ldr	r0, [pc, #524]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400db2a:	f7f3 fd7f 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400db2e:	4b83      	ldr	r3, [pc, #524]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400db30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400db34:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400db38:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400db3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400db42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400db48:	3b01      	subs	r3, #1
3400db4a:	041b      	lsls	r3, r3, #16
3400db4c:	4313      	orrs	r3, r2
3400db4e:	4a7b      	ldr	r2, [pc, #492]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400db50:	430b      	orrs	r3, r1
3400db52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400db56:	f7fb f8ed 	bl	34008d34 <LL_RCC_IC9_Enable>
3400db5a:	e008      	b.n	3400db6e <HAL_RCCEx_PeriphCLKConfig+0x4876>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3400db5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db60:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3400db64:	4b76      	ldr	r3, [pc, #472]	@ (3400dd40 <HAL_RCCEx_PeriphCLKConfig+0x4a48>)
3400db66:	429a      	cmp	r2, r3
3400db68:	d101      	bne.n	3400db6e <HAL_RCCEx_PeriphCLKConfig+0x4876>
    {
      LL_RCC_CLKP_Enable();
3400db6a:	f7fb fba3 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
3400db6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db72:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3400db76:	4618      	mov	r0, r3
3400db78:	f7fa fb34 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
3400db7c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400db80:	e9d3 2300 	ldrd	r2, r3, [r3]
3400db84:	2100      	movs	r1, #0
3400db86:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
3400db8a:	f003 0308 	and.w	r3, r3, #8
3400db8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
3400db92:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
3400db96:	4603      	mov	r3, r0
3400db98:	460a      	mov	r2, r1
3400db9a:	4313      	orrs	r3, r2
3400db9c:	f000 80f0 	beq.w	3400dd80 <HAL_RCCEx_PeriphCLKConfig+0x4a88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
3400dba0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dba4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dba8:	4b66      	ldr	r3, [pc, #408]	@ (3400dd44 <HAL_RCCEx_PeriphCLKConfig+0x4a4c>)
3400dbaa:	429a      	cmp	r2, r3
3400dbac:	d02e      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbb2:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbb6:	4b64      	ldr	r3, [pc, #400]	@ (3400dd48 <HAL_RCCEx_PeriphCLKConfig+0x4a50>)
3400dbb8:	429a      	cmp	r2, r3
3400dbba:	d027      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbc0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbc4:	4b61      	ldr	r3, [pc, #388]	@ (3400dd4c <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400dbc6:	429a      	cmp	r2, r3
3400dbc8:	d020      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbce:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbd2:	4b5f      	ldr	r3, [pc, #380]	@ (3400dd50 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400dbd4:	429a      	cmp	r2, r3
3400dbd6:	d019      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbdc:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbe0:	4b5c      	ldr	r3, [pc, #368]	@ (3400dd54 <HAL_RCCEx_PeriphCLKConfig+0x4a5c>)
3400dbe2:	429a      	cmp	r2, r3
3400dbe4:	d012      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbe6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbea:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbee:	4b5a      	ldr	r3, [pc, #360]	@ (3400dd58 <HAL_RCCEx_PeriphCLKConfig+0x4a60>)
3400dbf0:	429a      	cmp	r2, r3
3400dbf2:	d00b      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dbf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dbf8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dbfc:	4b57      	ldr	r3, [pc, #348]	@ (3400dd5c <HAL_RCCEx_PeriphCLKConfig+0x4a64>)
3400dbfe:	429a      	cmp	r2, r3
3400dc00:	d004      	beq.n	3400dc0c <HAL_RCCEx_PeriphCLKConfig+0x4914>
3400dc02:	f240 6166 	movw	r1, #1638	@ 0x666
3400dc06:	484c      	ldr	r0, [pc, #304]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dc08:	f7f3 fd10 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
3400dc0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc10:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dc14:	4b4d      	ldr	r3, [pc, #308]	@ (3400dd4c <HAL_RCCEx_PeriphCLKConfig+0x4a54>)
3400dc16:	429a      	cmp	r2, r3
3400dc18:	d142      	bne.n	3400dca0 <HAL_RCCEx_PeriphCLKConfig+0x49a8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400dc1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc20:	2b00      	cmp	r3, #0
3400dc22:	d016      	beq.n	3400dc52 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400dc24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dc2e:	d010      	beq.n	3400dc52 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400dc30:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dc3a:	d00a      	beq.n	3400dc52 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400dc3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400dc42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dc46:	d004      	beq.n	3400dc52 <HAL_RCCEx_PeriphCLKConfig+0x495a>
3400dc48:	f240 616b 	movw	r1, #1643	@ 0x66b
3400dc4c:	483a      	ldr	r0, [pc, #232]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dc4e:	f7f3 fced 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400dc52:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc58:	2b00      	cmp	r3, #0
3400dc5a:	d005      	beq.n	3400dc68 <HAL_RCCEx_PeriphCLKConfig+0x4970>
3400dc5c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dc66:	d904      	bls.n	3400dc72 <HAL_RCCEx_PeriphCLKConfig+0x497a>
3400dc68:	f240 616c 	movw	r1, #1644	@ 0x66c
3400dc6c:	4832      	ldr	r0, [pc, #200]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dc6e:	f7f3 fcdd 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400dc72:	4b32      	ldr	r3, [pc, #200]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400dc74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400dc78:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dc7c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dc80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400dc86:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400dc8c:	3b01      	subs	r3, #1
3400dc8e:	041b      	lsls	r3, r3, #16
3400dc90:	4313      	orrs	r3, r2
3400dc92:	4a2a      	ldr	r2, [pc, #168]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400dc94:	430b      	orrs	r3, r1
3400dc96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400dc9a:	f7fb f80b 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400dc9e:	e068      	b.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3400dca0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dca4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dca8:	4b29      	ldr	r3, [pc, #164]	@ (3400dd50 <HAL_RCCEx_PeriphCLKConfig+0x4a58>)
3400dcaa:	429a      	cmp	r2, r3
3400dcac:	d158      	bne.n	3400dd60 <HAL_RCCEx_PeriphCLKConfig+0x4a68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400dcae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dcb4:	2b00      	cmp	r3, #0
3400dcb6:	d016      	beq.n	3400dce6 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400dcb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dcbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dcc2:	d010      	beq.n	3400dce6 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400dcc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dcca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400dcce:	d00a      	beq.n	3400dce6 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400dcd0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400dcd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dcda:	d004      	beq.n	3400dce6 <HAL_RCCEx_PeriphCLKConfig+0x49ee>
3400dcdc:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3400dce0:	4815      	ldr	r0, [pc, #84]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dce2:	f7f3 fca3 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400dce6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dcec:	2b00      	cmp	r3, #0
3400dcee:	d005      	beq.n	3400dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a04>
3400dcf0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dcf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dcf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400dcfa:	d904      	bls.n	3400dd06 <HAL_RCCEx_PeriphCLKConfig+0x4a0e>
3400dcfc:	f240 6179 	movw	r1, #1657	@ 0x679
3400dd00:	480d      	ldr	r0, [pc, #52]	@ (3400dd38 <HAL_RCCEx_PeriphCLKConfig+0x4a40>)
3400dd02:	f7f3 fc93 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400dd06:	4b0d      	ldr	r3, [pc, #52]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400dd08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400dd0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400dd10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400dd14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400dd1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400dd20:	3b01      	subs	r3, #1
3400dd22:	041b      	lsls	r3, r3, #16
3400dd24:	4313      	orrs	r3, r2
3400dd26:	4a05      	ldr	r2, [pc, #20]	@ (3400dd3c <HAL_RCCEx_PeriphCLKConfig+0x4a44>)
3400dd28:	430b      	orrs	r3, r1
3400dd2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400dd2e:	f7fb f801 	bl	34008d34 <LL_RCC_IC9_Enable>
3400dd32:	e01e      	b.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
3400dd34:	07030820 	.word	0x07030820
3400dd38:	3401ae18 	.word	0x3401ae18
3400dd3c:	56028000 	.word	0x56028000
3400dd40:	07010820 	.word	0x07010820
3400dd44:	07000c20 	.word	0x07000c20
3400dd48:	07010c20 	.word	0x07010c20
3400dd4c:	07020c20 	.word	0x07020c20
3400dd50:	07030c20 	.word	0x07030c20
3400dd54:	07040c20 	.word	0x07040c20
3400dd58:	07050c20 	.word	0x07050c20
3400dd5c:	07060c20 	.word	0x07060c20
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3400dd60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd64:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
3400dd68:	4b73      	ldr	r3, [pc, #460]	@ (3400df38 <HAL_RCCEx_PeriphCLKConfig+0x4c40>)
3400dd6a:	429a      	cmp	r2, r3
3400dd6c:	d101      	bne.n	3400dd72 <HAL_RCCEx_PeriphCLKConfig+0x4a7a>
    {
      LL_RCC_CLKP_Enable();
3400dd6e:	f7fb faa1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3400dd72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd76:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
3400dd7a:	4618      	mov	r0, r3
3400dd7c:	f7fa fa32 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3400dd80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
3400dd88:	2100      	movs	r1, #0
3400dd8a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3400dd8e:	f003 0310 	and.w	r3, r3, #16
3400dd92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
3400dd96:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
3400dd9a:	4603      	mov	r3, r0
3400dd9c:	460a      	mov	r2, r1
3400dd9e:	4313      	orrs	r3, r2
3400dda0:	f000 80ee 	beq.w	3400df80 <HAL_RCCEx_PeriphCLKConfig+0x4c88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3400dda4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dda8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400ddac:	4b63      	ldr	r3, [pc, #396]	@ (3400df3c <HAL_RCCEx_PeriphCLKConfig+0x4c44>)
3400ddae:	429a      	cmp	r2, r3
3400ddb0:	d02e      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400ddb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddb6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400ddba:	4b61      	ldr	r3, [pc, #388]	@ (3400df40 <HAL_RCCEx_PeriphCLKConfig+0x4c48>)
3400ddbc:	429a      	cmp	r2, r3
3400ddbe:	d027      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400ddc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddc4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400ddc8:	4b5e      	ldr	r3, [pc, #376]	@ (3400df44 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400ddca:	429a      	cmp	r2, r3
3400ddcc:	d020      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400ddce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400ddd6:	4b5c      	ldr	r3, [pc, #368]	@ (3400df48 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400ddd8:	429a      	cmp	r2, r3
3400ddda:	d019      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400dddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dde0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400dde4:	4b59      	ldr	r3, [pc, #356]	@ (3400df4c <HAL_RCCEx_PeriphCLKConfig+0x4c54>)
3400dde6:	429a      	cmp	r2, r3
3400dde8:	d012      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400ddea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddee:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400ddf2:	4b57      	ldr	r3, [pc, #348]	@ (3400df50 <HAL_RCCEx_PeriphCLKConfig+0x4c58>)
3400ddf4:	429a      	cmp	r2, r3
3400ddf6:	d00b      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400ddf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ddfc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400de00:	4b54      	ldr	r3, [pc, #336]	@ (3400df54 <HAL_RCCEx_PeriphCLKConfig+0x4c5c>)
3400de02:	429a      	cmp	r2, r3
3400de04:	d004      	beq.n	3400de10 <HAL_RCCEx_PeriphCLKConfig+0x4b18>
3400de06:	f240 6193 	movw	r1, #1683	@ 0x693
3400de0a:	4853      	ldr	r0, [pc, #332]	@ (3400df58 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400de0c:	f7f3 fc0e 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3400de10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de14:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400de18:	4b4a      	ldr	r3, [pc, #296]	@ (3400df44 <HAL_RCCEx_PeriphCLKConfig+0x4c4c>)
3400de1a:	429a      	cmp	r2, r3
3400de1c:	d142      	bne.n	3400dea4 <HAL_RCCEx_PeriphCLKConfig+0x4bac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400de1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400de24:	2b00      	cmp	r3, #0
3400de26:	d016      	beq.n	3400de56 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400de28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400de2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400de32:	d010      	beq.n	3400de56 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400de34:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400de3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400de3e:	d00a      	beq.n	3400de56 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400de40:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400de46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400de4a:	d004      	beq.n	3400de56 <HAL_RCCEx_PeriphCLKConfig+0x4b5e>
3400de4c:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
3400de50:	4841      	ldr	r0, [pc, #260]	@ (3400df58 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400de52:	f7f3 fbeb 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400de56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400de5c:	2b00      	cmp	r3, #0
3400de5e:	d005      	beq.n	3400de6c <HAL_RCCEx_PeriphCLKConfig+0x4b74>
3400de60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400de66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400de6a:	d904      	bls.n	3400de76 <HAL_RCCEx_PeriphCLKConfig+0x4b7e>
3400de6c:	f240 6199 	movw	r1, #1689	@ 0x699
3400de70:	4839      	ldr	r0, [pc, #228]	@ (3400df58 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400de72:	f7f3 fbdb 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400de76:	4b39      	ldr	r3, [pc, #228]	@ (3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400de78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400de7c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400de80:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400de84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400de8a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400de8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400de90:	3b01      	subs	r3, #1
3400de92:	041b      	lsls	r3, r3, #16
3400de94:	4313      	orrs	r3, r2
3400de96:	4a31      	ldr	r2, [pc, #196]	@ (3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400de98:	430b      	orrs	r3, r1
3400de9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400de9e:	f7fa ff49 	bl	34008d34 <LL_RCC_IC9_Enable>
3400dea2:	e066      	b.n	3400df72 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
3400dea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dea8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400deac:	4b26      	ldr	r3, [pc, #152]	@ (3400df48 <HAL_RCCEx_PeriphCLKConfig+0x4c50>)
3400deae:	429a      	cmp	r2, r3
3400deb0:	d156      	bne.n	3400df60 <HAL_RCCEx_PeriphCLKConfig+0x4c68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400deb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400deb8:	2b00      	cmp	r3, #0
3400deba:	d016      	beq.n	3400deea <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400debc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400dec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400dec6:	d010      	beq.n	3400deea <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400dec8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400decc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400dece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ded2:	d00a      	beq.n	3400deea <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400ded4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ded8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400deda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400dede:	d004      	beq.n	3400deea <HAL_RCCEx_PeriphCLKConfig+0x4bf2>
3400dee0:	f240 61a5 	movw	r1, #1701	@ 0x6a5
3400dee4:	481c      	ldr	r0, [pc, #112]	@ (3400df58 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400dee6:	f7f3 fba1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400deea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400deee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400def0:	2b00      	cmp	r3, #0
3400def2:	d005      	beq.n	3400df00 <HAL_RCCEx_PeriphCLKConfig+0x4c08>
3400def4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400def8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400defa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400defe:	d904      	bls.n	3400df0a <HAL_RCCEx_PeriphCLKConfig+0x4c12>
3400df00:	f240 61a6 	movw	r1, #1702	@ 0x6a6
3400df04:	4814      	ldr	r0, [pc, #80]	@ (3400df58 <HAL_RCCEx_PeriphCLKConfig+0x4c60>)
3400df06:	f7f3 fb91 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400df0a:	4b14      	ldr	r3, [pc, #80]	@ (3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400df0c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400df10:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400df14:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400df18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400df1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400df24:	3b01      	subs	r3, #1
3400df26:	041b      	lsls	r3, r3, #16
3400df28:	4313      	orrs	r3, r2
3400df2a:	4a0c      	ldr	r2, [pc, #48]	@ (3400df5c <HAL_RCCEx_PeriphCLKConfig+0x4c64>)
3400df2c:	430b      	orrs	r3, r1
3400df2e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400df32:	f7fa ffff 	bl	34008f34 <LL_RCC_IC14_Enable>
3400df36:	e01c      	b.n	3400df72 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
3400df38:	07010c20 	.word	0x07010c20
3400df3c:	07001020 	.word	0x07001020
3400df40:	07011020 	.word	0x07011020
3400df44:	07021020 	.word	0x07021020
3400df48:	07031020 	.word	0x07031020
3400df4c:	07041020 	.word	0x07041020
3400df50:	07051020 	.word	0x07051020
3400df54:	07061020 	.word	0x07061020
3400df58:	3401ae18 	.word	0x3401ae18
3400df5c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3400df60:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df64:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3400df68:	4b73      	ldr	r3, [pc, #460]	@ (3400e138 <HAL_RCCEx_PeriphCLKConfig+0x4e40>)
3400df6a:	429a      	cmp	r2, r3
3400df6c:	d101      	bne.n	3400df72 <HAL_RCCEx_PeriphCLKConfig+0x4c7a>
    {
      LL_RCC_CLKP_Enable();
3400df6e:	f7fb f9a1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
3400df72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
3400df7a:	4618      	mov	r0, r3
3400df7c:	f7fa f932 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
3400df80:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400df84:	e9d3 2300 	ldrd	r2, r3, [r3]
3400df88:	2100      	movs	r1, #0
3400df8a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
3400df8e:	f003 0320 	and.w	r3, r3, #32
3400df92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3400df96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3400df9a:	4603      	mov	r3, r0
3400df9c:	460a      	mov	r2, r1
3400df9e:	4313      	orrs	r3, r2
3400dfa0:	f000 80ee 	beq.w	3400e180 <HAL_RCCEx_PeriphCLKConfig+0x4e88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
3400dfa4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfa8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dfac:	4b63      	ldr	r3, [pc, #396]	@ (3400e13c <HAL_RCCEx_PeriphCLKConfig+0x4e44>)
3400dfae:	429a      	cmp	r2, r3
3400dfb0:	d02e      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dfb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfb6:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dfba:	4b61      	ldr	r3, [pc, #388]	@ (3400e140 <HAL_RCCEx_PeriphCLKConfig+0x4e48>)
3400dfbc:	429a      	cmp	r2, r3
3400dfbe:	d027      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dfc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfc4:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dfc8:	4b5e      	ldr	r3, [pc, #376]	@ (3400e144 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400dfca:	429a      	cmp	r2, r3
3400dfcc:	d020      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dfce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfd2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dfd6:	4b5c      	ldr	r3, [pc, #368]	@ (3400e148 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400dfd8:	429a      	cmp	r2, r3
3400dfda:	d019      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dfdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfe0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dfe4:	4b59      	ldr	r3, [pc, #356]	@ (3400e14c <HAL_RCCEx_PeriphCLKConfig+0x4e54>)
3400dfe6:	429a      	cmp	r2, r3
3400dfe8:	d012      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dfea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dfee:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400dff2:	4b57      	ldr	r3, [pc, #348]	@ (3400e150 <HAL_RCCEx_PeriphCLKConfig+0x4e58>)
3400dff4:	429a      	cmp	r2, r3
3400dff6:	d00b      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400dff8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400dffc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e000:	4b54      	ldr	r3, [pc, #336]	@ (3400e154 <HAL_RCCEx_PeriphCLKConfig+0x4e5c>)
3400e002:	429a      	cmp	r2, r3
3400e004:	d004      	beq.n	3400e010 <HAL_RCCEx_PeriphCLKConfig+0x4d18>
3400e006:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3400e00a:	4853      	ldr	r0, [pc, #332]	@ (3400e158 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e00c:	f7f3 fb0e 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
3400e010:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e014:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e018:	4b4a      	ldr	r3, [pc, #296]	@ (3400e144 <HAL_RCCEx_PeriphCLKConfig+0x4e4c>)
3400e01a:	429a      	cmp	r2, r3
3400e01c:	d142      	bne.n	3400e0a4 <HAL_RCCEx_PeriphCLKConfig+0x4dac>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e01e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e024:	2b00      	cmp	r3, #0
3400e026:	d016      	beq.n	3400e056 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e028:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e02c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e02e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e032:	d010      	beq.n	3400e056 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e034:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e03e:	d00a      	beq.n	3400e056 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e040:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e04a:	d004      	beq.n	3400e056 <HAL_RCCEx_PeriphCLKConfig+0x4d5e>
3400e04c:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3400e050:	4841      	ldr	r0, [pc, #260]	@ (3400e158 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e052:	f7f3 faeb 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e056:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e05a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e05c:	2b00      	cmp	r3, #0
3400e05e:	d005      	beq.n	3400e06c <HAL_RCCEx_PeriphCLKConfig+0x4d74>
3400e060:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e06a:	d904      	bls.n	3400e076 <HAL_RCCEx_PeriphCLKConfig+0x4d7e>
3400e06c:	f240 61c6 	movw	r1, #1734	@ 0x6c6
3400e070:	4839      	ldr	r0, [pc, #228]	@ (3400e158 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e072:	f7f3 fadb 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e076:	4b39      	ldr	r3, [pc, #228]	@ (3400e15c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e07c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e080:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e08a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e08e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e090:	3b01      	subs	r3, #1
3400e092:	041b      	lsls	r3, r3, #16
3400e094:	4313      	orrs	r3, r2
3400e096:	4a31      	ldr	r2, [pc, #196]	@ (3400e15c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e098:	430b      	orrs	r3, r1
3400e09a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e09e:	f7fa fe49 	bl	34008d34 <LL_RCC_IC9_Enable>
3400e0a2:	e066      	b.n	3400e172 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3400e0a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0a8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e0ac:	4b26      	ldr	r3, [pc, #152]	@ (3400e148 <HAL_RCCEx_PeriphCLKConfig+0x4e50>)
3400e0ae:	429a      	cmp	r2, r3
3400e0b0:	d156      	bne.n	3400e160 <HAL_RCCEx_PeriphCLKConfig+0x4e68>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e0b2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e0b8:	2b00      	cmp	r3, #0
3400e0ba:	d016      	beq.n	3400e0ea <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e0bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e0c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e0c6:	d010      	beq.n	3400e0ea <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e0c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e0d2:	d00a      	beq.n	3400e0ea <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e0d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e0da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e0de:	d004      	beq.n	3400e0ea <HAL_RCCEx_PeriphCLKConfig+0x4df2>
3400e0e0:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3400e0e4:	481c      	ldr	r0, [pc, #112]	@ (3400e158 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e0e6:	f7f3 faa1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e0ea:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e0f0:	2b00      	cmp	r3, #0
3400e0f2:	d005      	beq.n	3400e100 <HAL_RCCEx_PeriphCLKConfig+0x4e08>
3400e0f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e0fe:	d904      	bls.n	3400e10a <HAL_RCCEx_PeriphCLKConfig+0x4e12>
3400e100:	f240 61d3 	movw	r1, #1747	@ 0x6d3
3400e104:	4814      	ldr	r0, [pc, #80]	@ (3400e158 <HAL_RCCEx_PeriphCLKConfig+0x4e60>)
3400e106:	f7f3 fa91 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e10a:	4b14      	ldr	r3, [pc, #80]	@ (3400e15c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e10c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e110:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e114:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e118:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e11c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e11e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e124:	3b01      	subs	r3, #1
3400e126:	041b      	lsls	r3, r3, #16
3400e128:	4313      	orrs	r3, r2
3400e12a:	4a0c      	ldr	r2, [pc, #48]	@ (3400e15c <HAL_RCCEx_PeriphCLKConfig+0x4e64>)
3400e12c:	430b      	orrs	r3, r1
3400e12e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e132:	f7fa feff 	bl	34008f34 <LL_RCC_IC14_Enable>
3400e136:	e01c      	b.n	3400e172 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
3400e138:	07011020 	.word	0x07011020
3400e13c:	07001420 	.word	0x07001420
3400e140:	07011420 	.word	0x07011420
3400e144:	07021420 	.word	0x07021420
3400e148:	07031420 	.word	0x07031420
3400e14c:	07041420 	.word	0x07041420
3400e150:	07051420 	.word	0x07051420
3400e154:	07061420 	.word	0x07061420
3400e158:	3401ae18 	.word	0x3401ae18
3400e15c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3400e160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e164:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400e168:	4b72      	ldr	r3, [pc, #456]	@ (3400e334 <HAL_RCCEx_PeriphCLKConfig+0x503c>)
3400e16a:	429a      	cmp	r2, r3
3400e16c:	d101      	bne.n	3400e172 <HAL_RCCEx_PeriphCLKConfig+0x4e7a>
    {
      LL_RCC_CLKP_Enable();
3400e16e:	f7fb f8a1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
3400e172:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e176:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400e17a:	4618      	mov	r0, r3
3400e17c:	f7fa f832 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
3400e180:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e184:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e188:	2100      	movs	r1, #0
3400e18a:	67b9      	str	r1, [r7, #120]	@ 0x78
3400e18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400e190:	67fb      	str	r3, [r7, #124]	@ 0x7c
3400e192:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3400e196:	4603      	mov	r3, r0
3400e198:	460a      	mov	r2, r1
3400e19a:	4313      	orrs	r3, r2
3400e19c:	f000 80ee 	beq.w	3400e37c <HAL_RCCEx_PeriphCLKConfig+0x5084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
3400e1a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1a4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1a8:	4b63      	ldr	r3, [pc, #396]	@ (3400e338 <HAL_RCCEx_PeriphCLKConfig+0x5040>)
3400e1aa:	429a      	cmp	r2, r3
3400e1ac:	d02e      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1b2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1b6:	4b61      	ldr	r3, [pc, #388]	@ (3400e33c <HAL_RCCEx_PeriphCLKConfig+0x5044>)
3400e1b8:	429a      	cmp	r2, r3
3400e1ba:	d027      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1c0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1c4:	4b5e      	ldr	r3, [pc, #376]	@ (3400e340 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e1c6:	429a      	cmp	r2, r3
3400e1c8:	d020      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1ce:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1d2:	4b5c      	ldr	r3, [pc, #368]	@ (3400e344 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e1d4:	429a      	cmp	r2, r3
3400e1d6:	d019      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1d8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1e0:	4b59      	ldr	r3, [pc, #356]	@ (3400e348 <HAL_RCCEx_PeriphCLKConfig+0x5050>)
3400e1e2:	429a      	cmp	r2, r3
3400e1e4:	d012      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1ea:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1ee:	4b57      	ldr	r3, [pc, #348]	@ (3400e34c <HAL_RCCEx_PeriphCLKConfig+0x5054>)
3400e1f0:	429a      	cmp	r2, r3
3400e1f2:	d00b      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e1f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e1f8:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e1fc:	4b54      	ldr	r3, [pc, #336]	@ (3400e350 <HAL_RCCEx_PeriphCLKConfig+0x5058>)
3400e1fe:	429a      	cmp	r2, r3
3400e200:	d004      	beq.n	3400e20c <HAL_RCCEx_PeriphCLKConfig+0x4f14>
3400e202:	f240 61ed 	movw	r1, #1773	@ 0x6ed
3400e206:	4853      	ldr	r0, [pc, #332]	@ (3400e354 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e208:	f7f3 fa10 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
3400e20c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e210:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e214:	4b4a      	ldr	r3, [pc, #296]	@ (3400e340 <HAL_RCCEx_PeriphCLKConfig+0x5048>)
3400e216:	429a      	cmp	r2, r3
3400e218:	d142      	bne.n	3400e2a0 <HAL_RCCEx_PeriphCLKConfig+0x4fa8>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3400e21a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e220:	2b00      	cmp	r3, #0
3400e222:	d016      	beq.n	3400e252 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e224:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e22a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e22e:	d010      	beq.n	3400e252 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e230:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e23a:	d00a      	beq.n	3400e252 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3400e242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e246:	d004      	beq.n	3400e252 <HAL_RCCEx_PeriphCLKConfig+0x4f5a>
3400e248:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3400e24c:	4841      	ldr	r0, [pc, #260]	@ (3400e354 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e24e:	f7f3 f9ed 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3400e252:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e258:	2b00      	cmp	r3, #0
3400e25a:	d005      	beq.n	3400e268 <HAL_RCCEx_PeriphCLKConfig+0x4f70>
3400e25c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e266:	d904      	bls.n	3400e272 <HAL_RCCEx_PeriphCLKConfig+0x4f7a>
3400e268:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3400e26c:	4839      	ldr	r0, [pc, #228]	@ (3400e354 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e26e:	f7f3 f9dd 	bl	3400162c <assert_failed>

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3400e272:	4b39      	ldr	r3, [pc, #228]	@ (3400e358 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400e278:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e27c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400e286:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400e28c:	3b01      	subs	r3, #1
3400e28e:	041b      	lsls	r3, r3, #16
3400e290:	4313      	orrs	r3, r2
3400e292:	4a31      	ldr	r2, [pc, #196]	@ (3400e358 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e294:	430b      	orrs	r3, r1
3400e296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3400e29a:	f7fa fd0b 	bl	34008cb4 <LL_RCC_IC8_Enable>
3400e29e:	e066      	b.n	3400e36e <HAL_RCCEx_PeriphCLKConfig+0x5076>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3400e2a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2a4:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e2a8:	4b26      	ldr	r3, [pc, #152]	@ (3400e344 <HAL_RCCEx_PeriphCLKConfig+0x504c>)
3400e2aa:	429a      	cmp	r2, r3
3400e2ac:	d156      	bne.n	3400e35c <HAL_RCCEx_PeriphCLKConfig+0x5064>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e2ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e2b4:	2b00      	cmp	r3, #0
3400e2b6:	d016      	beq.n	3400e2e6 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e2b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e2be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e2c2:	d010      	beq.n	3400e2e6 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e2c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e2ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e2ce:	d00a      	beq.n	3400e2e6 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e2d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e2da:	d004      	beq.n	3400e2e6 <HAL_RCCEx_PeriphCLKConfig+0x4fee>
3400e2dc:	f240 61ff 	movw	r1, #1791	@ 0x6ff
3400e2e0:	481c      	ldr	r0, [pc, #112]	@ (3400e354 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e2e2:	f7f3 f9a3 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e2e6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e2ec:	2b00      	cmp	r3, #0
3400e2ee:	d005      	beq.n	3400e2fc <HAL_RCCEx_PeriphCLKConfig+0x5004>
3400e2f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e2fa:	d904      	bls.n	3400e306 <HAL_RCCEx_PeriphCLKConfig+0x500e>
3400e2fc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
3400e300:	4814      	ldr	r0, [pc, #80]	@ (3400e354 <HAL_RCCEx_PeriphCLKConfig+0x505c>)
3400e302:	f7f3 f993 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e306:	4b14      	ldr	r3, [pc, #80]	@ (3400e358 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e30c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e310:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e314:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e318:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e31a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e31e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e320:	3b01      	subs	r3, #1
3400e322:	041b      	lsls	r3, r3, #16
3400e324:	4313      	orrs	r3, r2
3400e326:	4a0c      	ldr	r2, [pc, #48]	@ (3400e358 <HAL_RCCEx_PeriphCLKConfig+0x5060>)
3400e328:	430b      	orrs	r3, r1
3400e32a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e32e:	f7fa fd01 	bl	34008d34 <LL_RCC_IC9_Enable>
3400e332:	e01c      	b.n	3400e36e <HAL_RCCEx_PeriphCLKConfig+0x5076>
3400e334:	07011420 	.word	0x07011420
3400e338:	07001820 	.word	0x07001820
3400e33c:	07011820 	.word	0x07011820
3400e340:	07021820 	.word	0x07021820
3400e344:	07031820 	.word	0x07031820
3400e348:	07041820 	.word	0x07041820
3400e34c:	07051820 	.word	0x07051820
3400e350:	07061820 	.word	0x07061820
3400e354:	3401ae18 	.word	0x3401ae18
3400e358:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3400e35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e360:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400e364:	4b72      	ldr	r3, [pc, #456]	@ (3400e530 <HAL_RCCEx_PeriphCLKConfig+0x5238>)
3400e366:	429a      	cmp	r2, r3
3400e368:	d101      	bne.n	3400e36e <HAL_RCCEx_PeriphCLKConfig+0x5076>
    {
      LL_RCC_CLKP_Enable();
3400e36a:	f7fa ffa3 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3400e36e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e372:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400e376:	4618      	mov	r0, r3
3400e378:	f7f9 ff34 	bl	340081e4 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3400e37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e380:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e384:	2100      	movs	r1, #0
3400e386:	6739      	str	r1, [r7, #112]	@ 0x70
3400e388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3400e38c:	677b      	str	r3, [r7, #116]	@ 0x74
3400e38e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
3400e392:	4603      	mov	r3, r0
3400e394:	460a      	mov	r2, r1
3400e396:	4313      	orrs	r3, r2
3400e398:	f000 80ee 	beq.w	3400e578 <HAL_RCCEx_PeriphCLKConfig+0x5280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
3400e39c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3a0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3a4:	4b63      	ldr	r3, [pc, #396]	@ (3400e534 <HAL_RCCEx_PeriphCLKConfig+0x523c>)
3400e3a6:	429a      	cmp	r2, r3
3400e3a8:	d02e      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3ae:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3b2:	4b61      	ldr	r3, [pc, #388]	@ (3400e538 <HAL_RCCEx_PeriphCLKConfig+0x5240>)
3400e3b4:	429a      	cmp	r2, r3
3400e3b6:	d027      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3bc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3c0:	4b5e      	ldr	r3, [pc, #376]	@ (3400e53c <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400e3c2:	429a      	cmp	r2, r3
3400e3c4:	d020      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3ce:	4b5c      	ldr	r3, [pc, #368]	@ (3400e540 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400e3d0:	429a      	cmp	r2, r3
3400e3d2:	d019      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3d8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3dc:	4b59      	ldr	r3, [pc, #356]	@ (3400e544 <HAL_RCCEx_PeriphCLKConfig+0x524c>)
3400e3de:	429a      	cmp	r2, r3
3400e3e0:	d012      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3e6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3ea:	4b57      	ldr	r3, [pc, #348]	@ (3400e548 <HAL_RCCEx_PeriphCLKConfig+0x5250>)
3400e3ec:	429a      	cmp	r2, r3
3400e3ee:	d00b      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e3f4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e3f8:	4b54      	ldr	r3, [pc, #336]	@ (3400e54c <HAL_RCCEx_PeriphCLKConfig+0x5254>)
3400e3fa:	429a      	cmp	r2, r3
3400e3fc:	d004      	beq.n	3400e408 <HAL_RCCEx_PeriphCLKConfig+0x5110>
3400e3fe:	f240 711a 	movw	r1, #1818	@ 0x71a
3400e402:	4853      	ldr	r0, [pc, #332]	@ (3400e550 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e404:	f7f3 f912 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
3400e408:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e40c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e410:	4b4a      	ldr	r3, [pc, #296]	@ (3400e53c <HAL_RCCEx_PeriphCLKConfig+0x5244>)
3400e412:	429a      	cmp	r2, r3
3400e414:	d142      	bne.n	3400e49c <HAL_RCCEx_PeriphCLKConfig+0x51a4>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e416:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e41a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e41c:	2b00      	cmp	r3, #0
3400e41e:	d016      	beq.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e420:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e42a:	d010      	beq.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e42c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e436:	d00a      	beq.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e438:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e43c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e43e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e442:	d004      	beq.n	3400e44e <HAL_RCCEx_PeriphCLKConfig+0x5156>
3400e444:	f240 711f 	movw	r1, #1823	@ 0x71f
3400e448:	4841      	ldr	r0, [pc, #260]	@ (3400e550 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e44a:	f7f3 f8ef 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e44e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e454:	2b00      	cmp	r3, #0
3400e456:	d005      	beq.n	3400e464 <HAL_RCCEx_PeriphCLKConfig+0x516c>
3400e458:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e45c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e45e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e462:	d904      	bls.n	3400e46e <HAL_RCCEx_PeriphCLKConfig+0x5176>
3400e464:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3400e468:	4839      	ldr	r0, [pc, #228]	@ (3400e550 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e46a:	f7f3 f8df 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e46e:	4b39      	ldr	r3, [pc, #228]	@ (3400e554 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e474:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e478:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e482:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e488:	3b01      	subs	r3, #1
3400e48a:	041b      	lsls	r3, r3, #16
3400e48c:	4313      	orrs	r3, r2
3400e48e:	4a31      	ldr	r2, [pc, #196]	@ (3400e554 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e490:	430b      	orrs	r3, r1
3400e492:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e496:	f7fa fc4d 	bl	34008d34 <LL_RCC_IC9_Enable>
3400e49a:	e066      	b.n	3400e56a <HAL_RCCEx_PeriphCLKConfig+0x5272>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3400e49c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4a0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e4a4:	4b26      	ldr	r3, [pc, #152]	@ (3400e540 <HAL_RCCEx_PeriphCLKConfig+0x5248>)
3400e4a6:	429a      	cmp	r2, r3
3400e4a8:	d156      	bne.n	3400e558 <HAL_RCCEx_PeriphCLKConfig+0x5260>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e4aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e4b0:	2b00      	cmp	r3, #0
3400e4b2:	d016      	beq.n	3400e4e2 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e4b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e4ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e4be:	d010      	beq.n	3400e4e2 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e4c0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e4c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e4ca:	d00a      	beq.n	3400e4e2 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e4cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e4d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e4d6:	d004      	beq.n	3400e4e2 <HAL_RCCEx_PeriphCLKConfig+0x51ea>
3400e4d8:	f240 712c 	movw	r1, #1836	@ 0x72c
3400e4dc:	481c      	ldr	r0, [pc, #112]	@ (3400e550 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e4de:	f7f3 f8a5 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e4e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e4e8:	2b00      	cmp	r3, #0
3400e4ea:	d005      	beq.n	3400e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5200>
3400e4ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e4f6:	d904      	bls.n	3400e502 <HAL_RCCEx_PeriphCLKConfig+0x520a>
3400e4f8:	f240 712d 	movw	r1, #1837	@ 0x72d
3400e4fc:	4814      	ldr	r0, [pc, #80]	@ (3400e550 <HAL_RCCEx_PeriphCLKConfig+0x5258>)
3400e4fe:	f7f3 f895 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e502:	4b14      	ldr	r3, [pc, #80]	@ (3400e554 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e504:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e508:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e50c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e510:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e514:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e516:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e51a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e51c:	3b01      	subs	r3, #1
3400e51e:	041b      	lsls	r3, r3, #16
3400e520:	4313      	orrs	r3, r2
3400e522:	4a0c      	ldr	r2, [pc, #48]	@ (3400e554 <HAL_RCCEx_PeriphCLKConfig+0x525c>)
3400e524:	430b      	orrs	r3, r1
3400e526:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e52a:	f7fa fd03 	bl	34008f34 <LL_RCC_IC14_Enable>
3400e52e:	e01c      	b.n	3400e56a <HAL_RCCEx_PeriphCLKConfig+0x5272>
3400e530:	07011820 	.word	0x07011820
3400e534:	07000030 	.word	0x07000030
3400e538:	07010030 	.word	0x07010030
3400e53c:	07020030 	.word	0x07020030
3400e540:	07030030 	.word	0x07030030
3400e544:	07040030 	.word	0x07040030
3400e548:	07050030 	.word	0x07050030
3400e54c:	07060030 	.word	0x07060030
3400e550:	3401ae18 	.word	0x3401ae18
3400e554:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3400e558:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e55c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400e560:	4b72      	ldr	r3, [pc, #456]	@ (3400e72c <HAL_RCCEx_PeriphCLKConfig+0x5434>)
3400e562:	429a      	cmp	r2, r3
3400e564:	d101      	bne.n	3400e56a <HAL_RCCEx_PeriphCLKConfig+0x5272>
    {
      LL_RCC_CLKP_Enable();
3400e566:	f7fa fea5 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
3400e56a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e56e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400e572:	4618      	mov	r0, r3
3400e574:	f7f9 fe41 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
3400e578:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e580:	2100      	movs	r1, #0
3400e582:	66b9      	str	r1, [r7, #104]	@ 0x68
3400e584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3400e588:	66fb      	str	r3, [r7, #108]	@ 0x6c
3400e58a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
3400e58e:	4603      	mov	r3, r0
3400e590:	460a      	mov	r2, r1
3400e592:	4313      	orrs	r3, r2
3400e594:	f000 80ee 	beq.w	3400e774 <HAL_RCCEx_PeriphCLKConfig+0x547c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
3400e598:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e59c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5a0:	4b63      	ldr	r3, [pc, #396]	@ (3400e730 <HAL_RCCEx_PeriphCLKConfig+0x5438>)
3400e5a2:	429a      	cmp	r2, r3
3400e5a4:	d02e      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5aa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5ae:	4b61      	ldr	r3, [pc, #388]	@ (3400e734 <HAL_RCCEx_PeriphCLKConfig+0x543c>)
3400e5b0:	429a      	cmp	r2, r3
3400e5b2:	d027      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5b8:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5bc:	4b5e      	ldr	r3, [pc, #376]	@ (3400e738 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400e5be:	429a      	cmp	r2, r3
3400e5c0:	d020      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5c6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5ca:	4b5c      	ldr	r3, [pc, #368]	@ (3400e73c <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400e5cc:	429a      	cmp	r2, r3
3400e5ce:	d019      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5d4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5d8:	4b59      	ldr	r3, [pc, #356]	@ (3400e740 <HAL_RCCEx_PeriphCLKConfig+0x5448>)
3400e5da:	429a      	cmp	r2, r3
3400e5dc:	d012      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5e2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5e6:	4b57      	ldr	r3, [pc, #348]	@ (3400e744 <HAL_RCCEx_PeriphCLKConfig+0x544c>)
3400e5e8:	429a      	cmp	r2, r3
3400e5ea:	d00b      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e5f0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e5f4:	4b54      	ldr	r3, [pc, #336]	@ (3400e748 <HAL_RCCEx_PeriphCLKConfig+0x5450>)
3400e5f6:	429a      	cmp	r2, r3
3400e5f8:	d004      	beq.n	3400e604 <HAL_RCCEx_PeriphCLKConfig+0x530c>
3400e5fa:	f240 7147 	movw	r1, #1863	@ 0x747
3400e5fe:	4853      	ldr	r0, [pc, #332]	@ (3400e74c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400e600:	f7f3 f814 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3400e604:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e608:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e60c:	4b4a      	ldr	r3, [pc, #296]	@ (3400e738 <HAL_RCCEx_PeriphCLKConfig+0x5440>)
3400e60e:	429a      	cmp	r2, r3
3400e610:	d142      	bne.n	3400e698 <HAL_RCCEx_PeriphCLKConfig+0x53a0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e612:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e618:	2b00      	cmp	r3, #0
3400e61a:	d016      	beq.n	3400e64a <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400e61c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e626:	d010      	beq.n	3400e64a <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400e628:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e62c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e62e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e632:	d00a      	beq.n	3400e64a <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400e634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e63a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e63e:	d004      	beq.n	3400e64a <HAL_RCCEx_PeriphCLKConfig+0x5352>
3400e640:	f240 714c 	movw	r1, #1868	@ 0x74c
3400e644:	4841      	ldr	r0, [pc, #260]	@ (3400e74c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400e646:	f7f2 fff1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e64a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e64e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e650:	2b00      	cmp	r3, #0
3400e652:	d005      	beq.n	3400e660 <HAL_RCCEx_PeriphCLKConfig+0x5368>
3400e654:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e65e:	d904      	bls.n	3400e66a <HAL_RCCEx_PeriphCLKConfig+0x5372>
3400e660:	f240 714d 	movw	r1, #1869	@ 0x74d
3400e664:	4839      	ldr	r0, [pc, #228]	@ (3400e74c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400e666:	f7f2 ffe1 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e66a:	4b39      	ldr	r3, [pc, #228]	@ (3400e750 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400e66c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e670:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e674:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e678:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e67c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e67e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e684:	3b01      	subs	r3, #1
3400e686:	041b      	lsls	r3, r3, #16
3400e688:	4313      	orrs	r3, r2
3400e68a:	4a31      	ldr	r2, [pc, #196]	@ (3400e750 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400e68c:	430b      	orrs	r3, r1
3400e68e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e692:	f7fa fb4f 	bl	34008d34 <LL_RCC_IC9_Enable>
3400e696:	e066      	b.n	3400e766 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3400e698:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e69c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e6a0:	4b26      	ldr	r3, [pc, #152]	@ (3400e73c <HAL_RCCEx_PeriphCLKConfig+0x5444>)
3400e6a2:	429a      	cmp	r2, r3
3400e6a4:	d156      	bne.n	3400e754 <HAL_RCCEx_PeriphCLKConfig+0x545c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e6a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e6ac:	2b00      	cmp	r3, #0
3400e6ae:	d016      	beq.n	3400e6de <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400e6b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e6b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e6ba:	d010      	beq.n	3400e6de <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400e6bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e6c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e6c6:	d00a      	beq.n	3400e6de <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400e6c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e6ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e6d2:	d004      	beq.n	3400e6de <HAL_RCCEx_PeriphCLKConfig+0x53e6>
3400e6d4:	f240 7159 	movw	r1, #1881	@ 0x759
3400e6d8:	481c      	ldr	r0, [pc, #112]	@ (3400e74c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400e6da:	f7f2 ffa7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e6de:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e6e4:	2b00      	cmp	r3, #0
3400e6e6:	d005      	beq.n	3400e6f4 <HAL_RCCEx_PeriphCLKConfig+0x53fc>
3400e6e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e6f2:	d904      	bls.n	3400e6fe <HAL_RCCEx_PeriphCLKConfig+0x5406>
3400e6f4:	f240 715a 	movw	r1, #1882	@ 0x75a
3400e6f8:	4814      	ldr	r0, [pc, #80]	@ (3400e74c <HAL_RCCEx_PeriphCLKConfig+0x5454>)
3400e6fa:	f7f2 ff97 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e6fe:	4b14      	ldr	r3, [pc, #80]	@ (3400e750 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400e700:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e704:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e708:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e710:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e712:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e718:	3b01      	subs	r3, #1
3400e71a:	041b      	lsls	r3, r3, #16
3400e71c:	4313      	orrs	r3, r2
3400e71e:	4a0c      	ldr	r2, [pc, #48]	@ (3400e750 <HAL_RCCEx_PeriphCLKConfig+0x5458>)
3400e720:	430b      	orrs	r3, r1
3400e722:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e726:	f7fa fc05 	bl	34008f34 <LL_RCC_IC14_Enable>
3400e72a:	e01c      	b.n	3400e766 <HAL_RCCEx_PeriphCLKConfig+0x546e>
3400e72c:	07010030 	.word	0x07010030
3400e730:	07000430 	.word	0x07000430
3400e734:	07010430 	.word	0x07010430
3400e738:	07020430 	.word	0x07020430
3400e73c:	07030430 	.word	0x07030430
3400e740:	07040430 	.word	0x07040430
3400e744:	07050430 	.word	0x07050430
3400e748:	07060430 	.word	0x07060430
3400e74c:	3401ae18 	.word	0x3401ae18
3400e750:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3400e754:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e758:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
3400e75c:	4b72      	ldr	r3, [pc, #456]	@ (3400e928 <HAL_RCCEx_PeriphCLKConfig+0x5630>)
3400e75e:	429a      	cmp	r2, r3
3400e760:	d101      	bne.n	3400e766 <HAL_RCCEx_PeriphCLKConfig+0x546e>
    {
      LL_RCC_CLKP_Enable();
3400e762:	f7fa fda7 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
3400e766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e76a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3400e76e:	4618      	mov	r0, r3
3400e770:	f7f9 fd43 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
3400e774:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e778:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e77c:	2100      	movs	r1, #0
3400e77e:	6639      	str	r1, [r7, #96]	@ 0x60
3400e780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
3400e784:	667b      	str	r3, [r7, #100]	@ 0x64
3400e786:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3400e78a:	4603      	mov	r3, r0
3400e78c:	460a      	mov	r2, r1
3400e78e:	4313      	orrs	r3, r2
3400e790:	f000 80ee 	beq.w	3400e970 <HAL_RCCEx_PeriphCLKConfig+0x5678>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3400e794:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e798:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e79c:	4b63      	ldr	r3, [pc, #396]	@ (3400e92c <HAL_RCCEx_PeriphCLKConfig+0x5634>)
3400e79e:	429a      	cmp	r2, r3
3400e7a0:	d02e      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7a6:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7aa:	4b61      	ldr	r3, [pc, #388]	@ (3400e930 <HAL_RCCEx_PeriphCLKConfig+0x5638>)
3400e7ac:	429a      	cmp	r2, r3
3400e7ae:	d027      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7b4:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7b8:	4b5e      	ldr	r3, [pc, #376]	@ (3400e934 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400e7ba:	429a      	cmp	r2, r3
3400e7bc:	d020      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7c2:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7c6:	4b5c      	ldr	r3, [pc, #368]	@ (3400e938 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400e7c8:	429a      	cmp	r2, r3
3400e7ca:	d019      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7d0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7d4:	4b59      	ldr	r3, [pc, #356]	@ (3400e93c <HAL_RCCEx_PeriphCLKConfig+0x5644>)
3400e7d6:	429a      	cmp	r2, r3
3400e7d8:	d012      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7de:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7e2:	4b57      	ldr	r3, [pc, #348]	@ (3400e940 <HAL_RCCEx_PeriphCLKConfig+0x5648>)
3400e7e4:	429a      	cmp	r2, r3
3400e7e6:	d00b      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e7ec:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e7f0:	4b54      	ldr	r3, [pc, #336]	@ (3400e944 <HAL_RCCEx_PeriphCLKConfig+0x564c>)
3400e7f2:	429a      	cmp	r2, r3
3400e7f4:	d004      	beq.n	3400e800 <HAL_RCCEx_PeriphCLKConfig+0x5508>
3400e7f6:	f240 7174 	movw	r1, #1908	@ 0x774
3400e7fa:	4853      	ldr	r0, [pc, #332]	@ (3400e948 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400e7fc:	f7f2 ff16 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3400e800:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e804:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e808:	4b4a      	ldr	r3, [pc, #296]	@ (3400e934 <HAL_RCCEx_PeriphCLKConfig+0x563c>)
3400e80a:	429a      	cmp	r2, r3
3400e80c:	d142      	bne.n	3400e894 <HAL_RCCEx_PeriphCLKConfig+0x559c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400e80e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e814:	2b00      	cmp	r3, #0
3400e816:	d016      	beq.n	3400e846 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400e818:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e81c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e81e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e822:	d010      	beq.n	3400e846 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400e824:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e82a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e82e:	d00a      	beq.n	3400e846 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400e830:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400e836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e83a:	d004      	beq.n	3400e846 <HAL_RCCEx_PeriphCLKConfig+0x554e>
3400e83c:	f240 7179 	movw	r1, #1913	@ 0x779
3400e840:	4841      	ldr	r0, [pc, #260]	@ (3400e948 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400e842:	f7f2 fef3 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400e846:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e84a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e84c:	2b00      	cmp	r3, #0
3400e84e:	d005      	beq.n	3400e85c <HAL_RCCEx_PeriphCLKConfig+0x5564>
3400e850:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e85a:	d904      	bls.n	3400e866 <HAL_RCCEx_PeriphCLKConfig+0x556e>
3400e85c:	f240 717a 	movw	r1, #1914	@ 0x77a
3400e860:	4839      	ldr	r0, [pc, #228]	@ (3400e948 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400e862:	f7f2 fee3 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400e866:	4b39      	ldr	r3, [pc, #228]	@ (3400e94c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400e868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400e86c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e870:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e874:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400e87a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e87e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400e880:	3b01      	subs	r3, #1
3400e882:	041b      	lsls	r3, r3, #16
3400e884:	4313      	orrs	r3, r2
3400e886:	4a31      	ldr	r2, [pc, #196]	@ (3400e94c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400e888:	430b      	orrs	r3, r1
3400e88a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400e88e:	f7fa fa51 	bl	34008d34 <LL_RCC_IC9_Enable>
3400e892:	e066      	b.n	3400e962 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3400e894:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e898:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e89c:	4b26      	ldr	r3, [pc, #152]	@ (3400e938 <HAL_RCCEx_PeriphCLKConfig+0x5640>)
3400e89e:	429a      	cmp	r2, r3
3400e8a0:	d156      	bne.n	3400e950 <HAL_RCCEx_PeriphCLKConfig+0x5658>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400e8a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e8a8:	2b00      	cmp	r3, #0
3400e8aa:	d016      	beq.n	3400e8da <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400e8ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e8b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400e8b6:	d010      	beq.n	3400e8da <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400e8b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e8be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400e8c2:	d00a      	beq.n	3400e8da <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400e8c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400e8ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400e8ce:	d004      	beq.n	3400e8da <HAL_RCCEx_PeriphCLKConfig+0x55e2>
3400e8d0:	f240 7186 	movw	r1, #1926	@ 0x786
3400e8d4:	481c      	ldr	r0, [pc, #112]	@ (3400e948 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400e8d6:	f7f2 fea9 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400e8da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e8e0:	2b00      	cmp	r3, #0
3400e8e2:	d005      	beq.n	3400e8f0 <HAL_RCCEx_PeriphCLKConfig+0x55f8>
3400e8e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e8e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e8ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400e8ee:	d904      	bls.n	3400e8fa <HAL_RCCEx_PeriphCLKConfig+0x5602>
3400e8f0:	f240 7187 	movw	r1, #1927	@ 0x787
3400e8f4:	4814      	ldr	r0, [pc, #80]	@ (3400e948 <HAL_RCCEx_PeriphCLKConfig+0x5650>)
3400e8f6:	f7f2 fe99 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400e8fa:	4b14      	ldr	r3, [pc, #80]	@ (3400e94c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400e8fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400e900:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400e904:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400e908:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e90c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400e90e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400e914:	3b01      	subs	r3, #1
3400e916:	041b      	lsls	r3, r3, #16
3400e918:	4313      	orrs	r3, r2
3400e91a:	4a0c      	ldr	r2, [pc, #48]	@ (3400e94c <HAL_RCCEx_PeriphCLKConfig+0x5654>)
3400e91c:	430b      	orrs	r3, r1
3400e91e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400e922:	f7fa fb07 	bl	34008f34 <LL_RCC_IC14_Enable>
3400e926:	e01c      	b.n	3400e962 <HAL_RCCEx_PeriphCLKConfig+0x566a>
3400e928:	07010430 	.word	0x07010430
3400e92c:	07000830 	.word	0x07000830
3400e930:	07010830 	.word	0x07010830
3400e934:	07020830 	.word	0x07020830
3400e938:	07030830 	.word	0x07030830
3400e93c:	07040830 	.word	0x07040830
3400e940:	07050830 	.word	0x07050830
3400e944:	07060830 	.word	0x07060830
3400e948:	3401ae18 	.word	0x3401ae18
3400e94c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3400e950:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e954:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400e958:	4b72      	ldr	r3, [pc, #456]	@ (3400eb24 <HAL_RCCEx_PeriphCLKConfig+0x582c>)
3400e95a:	429a      	cmp	r2, r3
3400e95c:	d101      	bne.n	3400e962 <HAL_RCCEx_PeriphCLKConfig+0x566a>
    {
      LL_RCC_CLKP_Enable();
3400e95e:	f7fa fca9 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
3400e962:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e966:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
3400e96a:	4618      	mov	r0, r3
3400e96c:	f7f9 fc45 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3400e970:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e974:	e9d3 2300 	ldrd	r2, r3, [r3]
3400e978:	2100      	movs	r1, #0
3400e97a:	65b9      	str	r1, [r7, #88]	@ 0x58
3400e97c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400e980:	65fb      	str	r3, [r7, #92]	@ 0x5c
3400e982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3400e986:	4603      	mov	r3, r0
3400e988:	460a      	mov	r2, r1
3400e98a:	4313      	orrs	r3, r2
3400e98c:	f000 80ee 	beq.w	3400eb6c <HAL_RCCEx_PeriphCLKConfig+0x5874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
3400e990:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e994:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e998:	4b63      	ldr	r3, [pc, #396]	@ (3400eb28 <HAL_RCCEx_PeriphCLKConfig+0x5830>)
3400e99a:	429a      	cmp	r2, r3
3400e99c:	d02e      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e99e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9a2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9a6:	4b61      	ldr	r3, [pc, #388]	@ (3400eb2c <HAL_RCCEx_PeriphCLKConfig+0x5834>)
3400e9a8:	429a      	cmp	r2, r3
3400e9aa:	d027      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9b0:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9b4:	4b5e      	ldr	r3, [pc, #376]	@ (3400eb30 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400e9b6:	429a      	cmp	r2, r3
3400e9b8:	d020      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9ba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9be:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9c2:	4b5c      	ldr	r3, [pc, #368]	@ (3400eb34 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400e9c4:	429a      	cmp	r2, r3
3400e9c6:	d019      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9cc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9d0:	4b59      	ldr	r3, [pc, #356]	@ (3400eb38 <HAL_RCCEx_PeriphCLKConfig+0x5840>)
3400e9d2:	429a      	cmp	r2, r3
3400e9d4:	d012      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9d6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9da:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9de:	4b57      	ldr	r3, [pc, #348]	@ (3400eb3c <HAL_RCCEx_PeriphCLKConfig+0x5844>)
3400e9e0:	429a      	cmp	r2, r3
3400e9e2:	d00b      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400e9e8:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400e9ec:	4b54      	ldr	r3, [pc, #336]	@ (3400eb40 <HAL_RCCEx_PeriphCLKConfig+0x5848>)
3400e9ee:	429a      	cmp	r2, r3
3400e9f0:	d004      	beq.n	3400e9fc <HAL_RCCEx_PeriphCLKConfig+0x5704>
3400e9f2:	f240 71a1 	movw	r1, #1953	@ 0x7a1
3400e9f6:	4853      	ldr	r0, [pc, #332]	@ (3400eb44 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400e9f8:	f7f2 fe18 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3400e9fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea00:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ea04:	4b4a      	ldr	r3, [pc, #296]	@ (3400eb30 <HAL_RCCEx_PeriphCLKConfig+0x5838>)
3400ea06:	429a      	cmp	r2, r3
3400ea08:	d142      	bne.n	3400ea90 <HAL_RCCEx_PeriphCLKConfig+0x5798>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ea0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ea10:	2b00      	cmp	r3, #0
3400ea12:	d016      	beq.n	3400ea42 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ea14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ea1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ea1e:	d010      	beq.n	3400ea42 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ea20:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ea26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ea2a:	d00a      	beq.n	3400ea42 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ea2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ea32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ea36:	d004      	beq.n	3400ea42 <HAL_RCCEx_PeriphCLKConfig+0x574a>
3400ea38:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3400ea3c:	4841      	ldr	r0, [pc, #260]	@ (3400eb44 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400ea3e:	f7f2 fdf5 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ea42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ea48:	2b00      	cmp	r3, #0
3400ea4a:	d005      	beq.n	3400ea58 <HAL_RCCEx_PeriphCLKConfig+0x5760>
3400ea4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ea52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ea56:	d904      	bls.n	3400ea62 <HAL_RCCEx_PeriphCLKConfig+0x576a>
3400ea58:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3400ea5c:	4839      	ldr	r0, [pc, #228]	@ (3400eb44 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400ea5e:	f7f2 fde5 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ea62:	4b39      	ldr	r3, [pc, #228]	@ (3400eb48 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400ea64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ea68:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ea6c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ea70:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ea76:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ea7c:	3b01      	subs	r3, #1
3400ea7e:	041b      	lsls	r3, r3, #16
3400ea80:	4313      	orrs	r3, r2
3400ea82:	4a31      	ldr	r2, [pc, #196]	@ (3400eb48 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400ea84:	430b      	orrs	r3, r1
3400ea86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ea8a:	f7fa f953 	bl	34008d34 <LL_RCC_IC9_Enable>
3400ea8e:	e066      	b.n	3400eb5e <HAL_RCCEx_PeriphCLKConfig+0x5866>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3400ea90:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ea94:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400ea98:	4b26      	ldr	r3, [pc, #152]	@ (3400eb34 <HAL_RCCEx_PeriphCLKConfig+0x583c>)
3400ea9a:	429a      	cmp	r2, r3
3400ea9c:	d156      	bne.n	3400eb4c <HAL_RCCEx_PeriphCLKConfig+0x5854>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ea9e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eaa4:	2b00      	cmp	r3, #0
3400eaa6:	d016      	beq.n	3400ead6 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400eaa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eaac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eaae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eab2:	d010      	beq.n	3400ead6 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400eab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eaba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eabe:	d00a      	beq.n	3400ead6 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400eac0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eaca:	d004      	beq.n	3400ead6 <HAL_RCCEx_PeriphCLKConfig+0x57de>
3400eacc:	f240 71b3 	movw	r1, #1971	@ 0x7b3
3400ead0:	481c      	ldr	r0, [pc, #112]	@ (3400eb44 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400ead2:	f7f2 fdab 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ead6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400eadc:	2b00      	cmp	r3, #0
3400eade:	d005      	beq.n	3400eaec <HAL_RCCEx_PeriphCLKConfig+0x57f4>
3400eae0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400eae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eaea:	d904      	bls.n	3400eaf6 <HAL_RCCEx_PeriphCLKConfig+0x57fe>
3400eaec:	f240 71b4 	movw	r1, #1972	@ 0x7b4
3400eaf0:	4814      	ldr	r0, [pc, #80]	@ (3400eb44 <HAL_RCCEx_PeriphCLKConfig+0x584c>)
3400eaf2:	f7f2 fd9b 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400eaf6:	4b14      	ldr	r3, [pc, #80]	@ (3400eb48 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400eaf8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400eafc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eb00:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eb04:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400eb0a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400eb10:	3b01      	subs	r3, #1
3400eb12:	041b      	lsls	r3, r3, #16
3400eb14:	4313      	orrs	r3, r2
3400eb16:	4a0c      	ldr	r2, [pc, #48]	@ (3400eb48 <HAL_RCCEx_PeriphCLKConfig+0x5850>)
3400eb18:	430b      	orrs	r3, r1
3400eb1a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400eb1e:	f7fa fa09 	bl	34008f34 <LL_RCC_IC14_Enable>
3400eb22:	e01c      	b.n	3400eb5e <HAL_RCCEx_PeriphCLKConfig+0x5866>
3400eb24:	07010830 	.word	0x07010830
3400eb28:	07000c30 	.word	0x07000c30
3400eb2c:	07010c30 	.word	0x07010c30
3400eb30:	07020c30 	.word	0x07020c30
3400eb34:	07030c30 	.word	0x07030c30
3400eb38:	07040c30 	.word	0x07040c30
3400eb3c:	07050c30 	.word	0x07050c30
3400eb40:	07060c30 	.word	0x07060c30
3400eb44:	3401ae18 	.word	0x3401ae18
3400eb48:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400eb4c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb50:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400eb54:	4b72      	ldr	r3, [pc, #456]	@ (3400ed20 <HAL_RCCEx_PeriphCLKConfig+0x5a28>)
3400eb56:	429a      	cmp	r2, r3
3400eb58:	d101      	bne.n	3400eb5e <HAL_RCCEx_PeriphCLKConfig+0x5866>
    {
      LL_RCC_CLKP_Enable();
3400eb5a:	f7fa fbab 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
3400eb5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb62:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400eb66:	4618      	mov	r0, r3
3400eb68:	f7f9 fb47 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3400eb6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
3400eb74:	2100      	movs	r1, #0
3400eb76:	6539      	str	r1, [r7, #80]	@ 0x50
3400eb78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3400eb7c:	657b      	str	r3, [r7, #84]	@ 0x54
3400eb7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
3400eb82:	4603      	mov	r3, r0
3400eb84:	460a      	mov	r2, r1
3400eb86:	4313      	orrs	r3, r2
3400eb88:	f000 80ee 	beq.w	3400ed68 <HAL_RCCEx_PeriphCLKConfig+0x5a70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3400eb8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb90:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400eb94:	4b63      	ldr	r3, [pc, #396]	@ (3400ed24 <HAL_RCCEx_PeriphCLKConfig+0x5a2c>)
3400eb96:	429a      	cmp	r2, r3
3400eb98:	d02e      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400eb9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eb9e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400eba2:	4b61      	ldr	r3, [pc, #388]	@ (3400ed28 <HAL_RCCEx_PeriphCLKConfig+0x5a30>)
3400eba4:	429a      	cmp	r2, r3
3400eba6:	d027      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400eba8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebac:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ebb0:	4b5e      	ldr	r3, [pc, #376]	@ (3400ed2c <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400ebb2:	429a      	cmp	r2, r3
3400ebb4:	d020      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400ebb6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebba:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ebbe:	4b5c      	ldr	r3, [pc, #368]	@ (3400ed30 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400ebc0:	429a      	cmp	r2, r3
3400ebc2:	d019      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400ebc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebc8:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ebcc:	4b59      	ldr	r3, [pc, #356]	@ (3400ed34 <HAL_RCCEx_PeriphCLKConfig+0x5a3c>)
3400ebce:	429a      	cmp	r2, r3
3400ebd0:	d012      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400ebd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebd6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ebda:	4b57      	ldr	r3, [pc, #348]	@ (3400ed38 <HAL_RCCEx_PeriphCLKConfig+0x5a40>)
3400ebdc:	429a      	cmp	r2, r3
3400ebde:	d00b      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400ebe0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebe4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ebe8:	4b54      	ldr	r3, [pc, #336]	@ (3400ed3c <HAL_RCCEx_PeriphCLKConfig+0x5a44>)
3400ebea:	429a      	cmp	r2, r3
3400ebec:	d004      	beq.n	3400ebf8 <HAL_RCCEx_PeriphCLKConfig+0x5900>
3400ebee:	f240 71ce 	movw	r1, #1998	@ 0x7ce
3400ebf2:	4853      	ldr	r0, [pc, #332]	@ (3400ed40 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400ebf4:	f7f2 fd1a 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3400ebf8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ebfc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ec00:	4b4a      	ldr	r3, [pc, #296]	@ (3400ed2c <HAL_RCCEx_PeriphCLKConfig+0x5a34>)
3400ec02:	429a      	cmp	r2, r3
3400ec04:	d142      	bne.n	3400ec8c <HAL_RCCEx_PeriphCLKConfig+0x5994>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ec06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ec0c:	2b00      	cmp	r3, #0
3400ec0e:	d016      	beq.n	3400ec3e <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400ec10:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ec16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ec1a:	d010      	beq.n	3400ec3e <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400ec1c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ec22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ec26:	d00a      	beq.n	3400ec3e <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400ec28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ec2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ec32:	d004      	beq.n	3400ec3e <HAL_RCCEx_PeriphCLKConfig+0x5946>
3400ec34:	f240 71d3 	movw	r1, #2003	@ 0x7d3
3400ec38:	4841      	ldr	r0, [pc, #260]	@ (3400ed40 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400ec3a:	f7f2 fcf7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ec3e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ec44:	2b00      	cmp	r3, #0
3400ec46:	d005      	beq.n	3400ec54 <HAL_RCCEx_PeriphCLKConfig+0x595c>
3400ec48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ec4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ec52:	d904      	bls.n	3400ec5e <HAL_RCCEx_PeriphCLKConfig+0x5966>
3400ec54:	f240 71d4 	movw	r1, #2004	@ 0x7d4
3400ec58:	4839      	ldr	r0, [pc, #228]	@ (3400ed40 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400ec5a:	f7f2 fce7 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ec5e:	4b39      	ldr	r3, [pc, #228]	@ (3400ed44 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400ec60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ec64:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ec68:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ec6c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ec72:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ec78:	3b01      	subs	r3, #1
3400ec7a:	041b      	lsls	r3, r3, #16
3400ec7c:	4313      	orrs	r3, r2
3400ec7e:	4a31      	ldr	r2, [pc, #196]	@ (3400ed44 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400ec80:	430b      	orrs	r3, r1
3400ec82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ec86:	f7fa f855 	bl	34008d34 <LL_RCC_IC9_Enable>
3400ec8a:	e066      	b.n	3400ed5a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
3400ec8c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec90:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ec94:	4b26      	ldr	r3, [pc, #152]	@ (3400ed30 <HAL_RCCEx_PeriphCLKConfig+0x5a38>)
3400ec96:	429a      	cmp	r2, r3
3400ec98:	d156      	bne.n	3400ed48 <HAL_RCCEx_PeriphCLKConfig+0x5a50>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ec9a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ec9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eca0:	2b00      	cmp	r3, #0
3400eca2:	d016      	beq.n	3400ecd2 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400eca4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ecaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ecae:	d010      	beq.n	3400ecd2 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400ecb0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ecb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ecba:	d00a      	beq.n	3400ecd2 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400ecbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ecc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ecc6:	d004      	beq.n	3400ecd2 <HAL_RCCEx_PeriphCLKConfig+0x59da>
3400ecc8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3400eccc:	481c      	ldr	r0, [pc, #112]	@ (3400ed40 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400ecce:	f7f2 fcad 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400ecd2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ecd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ecd8:	2b00      	cmp	r3, #0
3400ecda:	d005      	beq.n	3400ece8 <HAL_RCCEx_PeriphCLKConfig+0x59f0>
3400ecdc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ece0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ece2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ece6:	d904      	bls.n	3400ecf2 <HAL_RCCEx_PeriphCLKConfig+0x59fa>
3400ece8:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3400ecec:	4814      	ldr	r0, [pc, #80]	@ (3400ed40 <HAL_RCCEx_PeriphCLKConfig+0x5a48>)
3400ecee:	f7f2 fc9d 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400ecf2:	4b14      	ldr	r3, [pc, #80]	@ (3400ed44 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400ecf4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400ecf8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ecfc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ed00:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ed06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ed0c:	3b01      	subs	r3, #1
3400ed0e:	041b      	lsls	r3, r3, #16
3400ed10:	4313      	orrs	r3, r2
3400ed12:	4a0c      	ldr	r2, [pc, #48]	@ (3400ed44 <HAL_RCCEx_PeriphCLKConfig+0x5a4c>)
3400ed14:	430b      	orrs	r3, r1
3400ed16:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ed1a:	f7fa f90b 	bl	34008f34 <LL_RCC_IC14_Enable>
3400ed1e:	e01c      	b.n	3400ed5a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
3400ed20:	07010c30 	.word	0x07010c30
3400ed24:	07001030 	.word	0x07001030
3400ed28:	07011030 	.word	0x07011030
3400ed2c:	07021030 	.word	0x07021030
3400ed30:	07031030 	.word	0x07031030
3400ed34:	07041030 	.word	0x07041030
3400ed38:	07051030 	.word	0x07051030
3400ed3c:	07061030 	.word	0x07061030
3400ed40:	3401ae18 	.word	0x3401ae18
3400ed44:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
3400ed48:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed4c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400ed50:	4b72      	ldr	r3, [pc, #456]	@ (3400ef1c <HAL_RCCEx_PeriphCLKConfig+0x5c24>)
3400ed52:	429a      	cmp	r2, r3
3400ed54:	d101      	bne.n	3400ed5a <HAL_RCCEx_PeriphCLKConfig+0x5a62>
    {
      LL_RCC_CLKP_Enable();
3400ed56:	f7fa faad 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
3400ed5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed5e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3400ed62:	4618      	mov	r0, r3
3400ed64:	f7f9 fa49 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3400ed68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ed70:	2100      	movs	r1, #0
3400ed72:	64b9      	str	r1, [r7, #72]	@ 0x48
3400ed74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
3400ed78:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400ed7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
3400ed7e:	4603      	mov	r3, r0
3400ed80:	460a      	mov	r2, r1
3400ed82:	4313      	orrs	r3, r2
3400ed84:	f000 80ee 	beq.w	3400ef64 <HAL_RCCEx_PeriphCLKConfig+0x5c6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
3400ed88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed8c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400ed90:	4b63      	ldr	r3, [pc, #396]	@ (3400ef20 <HAL_RCCEx_PeriphCLKConfig+0x5c28>)
3400ed92:	429a      	cmp	r2, r3
3400ed94:	d02e      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400ed96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ed9a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400ed9e:	4b61      	ldr	r3, [pc, #388]	@ (3400ef24 <HAL_RCCEx_PeriphCLKConfig+0x5c2c>)
3400eda0:	429a      	cmp	r2, r3
3400eda2:	d027      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400eda4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eda8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400edac:	4b5e      	ldr	r3, [pc, #376]	@ (3400ef28 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400edae:	429a      	cmp	r2, r3
3400edb0:	d020      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400edb2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edb6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400edba:	4b5c      	ldr	r3, [pc, #368]	@ (3400ef2c <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400edbc:	429a      	cmp	r2, r3
3400edbe:	d019      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400edc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edc4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400edc8:	4b59      	ldr	r3, [pc, #356]	@ (3400ef30 <HAL_RCCEx_PeriphCLKConfig+0x5c38>)
3400edca:	429a      	cmp	r2, r3
3400edcc:	d012      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400edce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edd2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400edd6:	4b57      	ldr	r3, [pc, #348]	@ (3400ef34 <HAL_RCCEx_PeriphCLKConfig+0x5c3c>)
3400edd8:	429a      	cmp	r2, r3
3400edda:	d00b      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400eddc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ede0:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400ede4:	4b54      	ldr	r3, [pc, #336]	@ (3400ef38 <HAL_RCCEx_PeriphCLKConfig+0x5c40>)
3400ede6:	429a      	cmp	r2, r3
3400ede8:	d004      	beq.n	3400edf4 <HAL_RCCEx_PeriphCLKConfig+0x5afc>
3400edea:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3400edee:	4853      	ldr	r0, [pc, #332]	@ (3400ef3c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400edf0:	f7f2 fc1c 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3400edf4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400edf8:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400edfc:	4b4a      	ldr	r3, [pc, #296]	@ (3400ef28 <HAL_RCCEx_PeriphCLKConfig+0x5c30>)
3400edfe:	429a      	cmp	r2, r3
3400ee00:	d142      	bne.n	3400ee88 <HAL_RCCEx_PeriphCLKConfig+0x5b90>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400ee02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ee08:	2b00      	cmp	r3, #0
3400ee0a:	d016      	beq.n	3400ee3a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400ee0c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ee12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400ee16:	d010      	beq.n	3400ee3a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400ee18:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ee1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400ee22:	d00a      	beq.n	3400ee3a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400ee24:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400ee2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400ee2e:	d004      	beq.n	3400ee3a <HAL_RCCEx_PeriphCLKConfig+0x5b42>
3400ee30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3400ee34:	4841      	ldr	r0, [pc, #260]	@ (3400ef3c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400ee36:	f7f2 fbf9 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400ee3a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ee40:	2b00      	cmp	r3, #0
3400ee42:	d005      	beq.n	3400ee50 <HAL_RCCEx_PeriphCLKConfig+0x5b58>
3400ee44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ee4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400ee4e:	d904      	bls.n	3400ee5a <HAL_RCCEx_PeriphCLKConfig+0x5b62>
3400ee50:	f640 0101 	movw	r1, #2049	@ 0x801
3400ee54:	4839      	ldr	r0, [pc, #228]	@ (3400ef3c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400ee56:	f7f2 fbe9 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400ee5a:	4b39      	ldr	r3, [pc, #228]	@ (3400ef40 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400ee5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400ee60:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400ee64:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400ee68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ee6e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400ee74:	3b01      	subs	r3, #1
3400ee76:	041b      	lsls	r3, r3, #16
3400ee78:	4313      	orrs	r3, r2
3400ee7a:	4a31      	ldr	r2, [pc, #196]	@ (3400ef40 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400ee7c:	430b      	orrs	r3, r1
3400ee7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400ee82:	f7f9 ff57 	bl	34008d34 <LL_RCC_IC9_Enable>
3400ee86:	e066      	b.n	3400ef56 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3400ee88:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee8c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400ee90:	4b26      	ldr	r3, [pc, #152]	@ (3400ef2c <HAL_RCCEx_PeriphCLKConfig+0x5c34>)
3400ee92:	429a      	cmp	r2, r3
3400ee94:	d156      	bne.n	3400ef44 <HAL_RCCEx_PeriphCLKConfig+0x5c4c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400ee96:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ee9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400ee9c:	2b00      	cmp	r3, #0
3400ee9e:	d016      	beq.n	3400eece <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400eea0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400eeaa:	d010      	beq.n	3400eece <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400eeac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eeb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eeb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400eeb6:	d00a      	beq.n	3400eece <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400eeb8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400eebe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400eec2:	d004      	beq.n	3400eece <HAL_RCCEx_PeriphCLKConfig+0x5bd6>
3400eec4:	f640 010d 	movw	r1, #2061	@ 0x80d
3400eec8:	481c      	ldr	r0, [pc, #112]	@ (3400ef3c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400eeca:	f7f2 fbaf 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400eece:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400eed4:	2b00      	cmp	r3, #0
3400eed6:	d005      	beq.n	3400eee4 <HAL_RCCEx_PeriphCLKConfig+0x5bec>
3400eed8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400eede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400eee2:	d904      	bls.n	3400eeee <HAL_RCCEx_PeriphCLKConfig+0x5bf6>
3400eee4:	f640 010e 	movw	r1, #2062	@ 0x80e
3400eee8:	4814      	ldr	r0, [pc, #80]	@ (3400ef3c <HAL_RCCEx_PeriphCLKConfig+0x5c44>)
3400eeea:	f7f2 fb9f 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400eeee:	4b14      	ldr	r3, [pc, #80]	@ (3400ef40 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400eef0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400eef4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400eef8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400eefc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400ef02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400ef08:	3b01      	subs	r3, #1
3400ef0a:	041b      	lsls	r3, r3, #16
3400ef0c:	4313      	orrs	r3, r2
3400ef0e:	4a0c      	ldr	r2, [pc, #48]	@ (3400ef40 <HAL_RCCEx_PeriphCLKConfig+0x5c48>)
3400ef10:	430b      	orrs	r3, r1
3400ef12:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400ef16:	f7fa f80d 	bl	34008f34 <LL_RCC_IC14_Enable>
3400ef1a:	e01c      	b.n	3400ef56 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
3400ef1c:	07011030 	.word	0x07011030
3400ef20:	07001430 	.word	0x07001430
3400ef24:	07011430 	.word	0x07011430
3400ef28:	07021430 	.word	0x07021430
3400ef2c:	07031430 	.word	0x07031430
3400ef30:	07041430 	.word	0x07041430
3400ef34:	07051430 	.word	0x07051430
3400ef38:	07061430 	.word	0x07061430
3400ef3c:	3401ae18 	.word	0x3401ae18
3400ef40:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3400ef44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef48:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400ef4c:	4b72      	ldr	r3, [pc, #456]	@ (3400f118 <HAL_RCCEx_PeriphCLKConfig+0x5e20>)
3400ef4e:	429a      	cmp	r2, r3
3400ef50:	d101      	bne.n	3400ef56 <HAL_RCCEx_PeriphCLKConfig+0x5c5e>
    {
      LL_RCC_CLKP_Enable();
3400ef52:	f7fa f9af 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
3400ef56:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef5a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400ef5e:	4618      	mov	r0, r3
3400ef60:	f7f9 f94b 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3400ef64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
3400ef6c:	2100      	movs	r1, #0
3400ef6e:	6439      	str	r1, [r7, #64]	@ 0x40
3400ef70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
3400ef74:	647b      	str	r3, [r7, #68]	@ 0x44
3400ef76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3400ef7a:	4603      	mov	r3, r0
3400ef7c:	460a      	mov	r2, r1
3400ef7e:	4313      	orrs	r3, r2
3400ef80:	f000 80ee 	beq.w	3400f160 <HAL_RCCEx_PeriphCLKConfig+0x5e68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
3400ef84:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef88:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400ef8c:	4b63      	ldr	r3, [pc, #396]	@ (3400f11c <HAL_RCCEx_PeriphCLKConfig+0x5e24>)
3400ef8e:	429a      	cmp	r2, r3
3400ef90:	d02e      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400ef92:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400ef96:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400ef9a:	4b61      	ldr	r3, [pc, #388]	@ (3400f120 <HAL_RCCEx_PeriphCLKConfig+0x5e28>)
3400ef9c:	429a      	cmp	r2, r3
3400ef9e:	d027      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efa0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efa4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400efa8:	4b5e      	ldr	r3, [pc, #376]	@ (3400f124 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400efaa:	429a      	cmp	r2, r3
3400efac:	d020      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efb2:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400efb6:	4b5c      	ldr	r3, [pc, #368]	@ (3400f128 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400efb8:	429a      	cmp	r2, r3
3400efba:	d019      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efbc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efc0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400efc4:	4b59      	ldr	r3, [pc, #356]	@ (3400f12c <HAL_RCCEx_PeriphCLKConfig+0x5e34>)
3400efc6:	429a      	cmp	r2, r3
3400efc8:	d012      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efce:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400efd2:	4b57      	ldr	r3, [pc, #348]	@ (3400f130 <HAL_RCCEx_PeriphCLKConfig+0x5e38>)
3400efd4:	429a      	cmp	r2, r3
3400efd6:	d00b      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efd8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400efdc:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400efe0:	4b54      	ldr	r3, [pc, #336]	@ (3400f134 <HAL_RCCEx_PeriphCLKConfig+0x5e3c>)
3400efe2:	429a      	cmp	r2, r3
3400efe4:	d004      	beq.n	3400eff0 <HAL_RCCEx_PeriphCLKConfig+0x5cf8>
3400efe6:	f640 0128 	movw	r1, #2088	@ 0x828
3400efea:	4853      	ldr	r0, [pc, #332]	@ (3400f138 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400efec:	f7f2 fb1e 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3400eff0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400eff4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400eff8:	4b4a      	ldr	r3, [pc, #296]	@ (3400f124 <HAL_RCCEx_PeriphCLKConfig+0x5e2c>)
3400effa:	429a      	cmp	r2, r3
3400effc:	d142      	bne.n	3400f084 <HAL_RCCEx_PeriphCLKConfig+0x5d8c>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400effe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f004:	2b00      	cmp	r3, #0
3400f006:	d016      	beq.n	3400f036 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f008:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f00c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f00e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f012:	d010      	beq.n	3400f036 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f014:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f01a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f01e:	d00a      	beq.n	3400f036 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f020:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f026:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f02a:	d004      	beq.n	3400f036 <HAL_RCCEx_PeriphCLKConfig+0x5d3e>
3400f02c:	f640 012d 	movw	r1, #2093	@ 0x82d
3400f030:	4841      	ldr	r0, [pc, #260]	@ (3400f138 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f032:	f7f2 fafb 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f036:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f03a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f03c:	2b00      	cmp	r3, #0
3400f03e:	d005      	beq.n	3400f04c <HAL_RCCEx_PeriphCLKConfig+0x5d54>
3400f040:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f04a:	d904      	bls.n	3400f056 <HAL_RCCEx_PeriphCLKConfig+0x5d5e>
3400f04c:	f640 012e 	movw	r1, #2094	@ 0x82e
3400f050:	4839      	ldr	r0, [pc, #228]	@ (3400f138 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f052:	f7f2 faeb 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f056:	4b39      	ldr	r3, [pc, #228]	@ (3400f13c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f05c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f060:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f064:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f068:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f06a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f06e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f070:	3b01      	subs	r3, #1
3400f072:	041b      	lsls	r3, r3, #16
3400f074:	4313      	orrs	r3, r2
3400f076:	4a31      	ldr	r2, [pc, #196]	@ (3400f13c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f078:	430b      	orrs	r3, r1
3400f07a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f07e:	f7f9 fe59 	bl	34008d34 <LL_RCC_IC9_Enable>
3400f082:	e066      	b.n	3400f152 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3400f084:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f088:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f08c:	4b26      	ldr	r3, [pc, #152]	@ (3400f128 <HAL_RCCEx_PeriphCLKConfig+0x5e30>)
3400f08e:	429a      	cmp	r2, r3
3400f090:	d156      	bne.n	3400f140 <HAL_RCCEx_PeriphCLKConfig+0x5e48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f092:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f098:	2b00      	cmp	r3, #0
3400f09a:	d016      	beq.n	3400f0ca <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f09c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f0a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f0a6:	d010      	beq.n	3400f0ca <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f0a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f0ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f0b2:	d00a      	beq.n	3400f0ca <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f0b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f0ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f0be:	d004      	beq.n	3400f0ca <HAL_RCCEx_PeriphCLKConfig+0x5dd2>
3400f0c0:	f640 013a 	movw	r1, #2106	@ 0x83a
3400f0c4:	481c      	ldr	r0, [pc, #112]	@ (3400f138 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f0c6:	f7f2 fab1 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f0ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f0d0:	2b00      	cmp	r3, #0
3400f0d2:	d005      	beq.n	3400f0e0 <HAL_RCCEx_PeriphCLKConfig+0x5de8>
3400f0d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f0de:	d904      	bls.n	3400f0ea <HAL_RCCEx_PeriphCLKConfig+0x5df2>
3400f0e0:	f640 013b 	movw	r1, #2107	@ 0x83b
3400f0e4:	4814      	ldr	r0, [pc, #80]	@ (3400f138 <HAL_RCCEx_PeriphCLKConfig+0x5e40>)
3400f0e6:	f7f2 faa1 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f0ea:	4b14      	ldr	r3, [pc, #80]	@ (3400f13c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f0ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f0f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f0f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f0f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f0fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f0fe:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f104:	3b01      	subs	r3, #1
3400f106:	041b      	lsls	r3, r3, #16
3400f108:	4313      	orrs	r3, r2
3400f10a:	4a0c      	ldr	r2, [pc, #48]	@ (3400f13c <HAL_RCCEx_PeriphCLKConfig+0x5e44>)
3400f10c:	430b      	orrs	r3, r1
3400f10e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f112:	f7f9 ff0f 	bl	34008f34 <LL_RCC_IC14_Enable>
3400f116:	e01c      	b.n	3400f152 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
3400f118:	07011430 	.word	0x07011430
3400f11c:	07001830 	.word	0x07001830
3400f120:	07011830 	.word	0x07011830
3400f124:	07021830 	.word	0x07021830
3400f128:	07031830 	.word	0x07031830
3400f12c:	07041830 	.word	0x07041830
3400f130:	07051830 	.word	0x07051830
3400f134:	07061830 	.word	0x07061830
3400f138:	3401ae18 	.word	0x3401ae18
3400f13c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3400f140:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f144:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400f148:	4b72      	ldr	r3, [pc, #456]	@ (3400f314 <HAL_RCCEx_PeriphCLKConfig+0x601c>)
3400f14a:	429a      	cmp	r2, r3
3400f14c:	d101      	bne.n	3400f152 <HAL_RCCEx_PeriphCLKConfig+0x5e5a>
    {
      LL_RCC_CLKP_Enable();
3400f14e:	f7fa f8b1 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
3400f152:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f156:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3400f15a:	4618      	mov	r0, r3
3400f15c:	f7f9 f84d 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
3400f160:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f164:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f168:	2100      	movs	r1, #0
3400f16a:	63b9      	str	r1, [r7, #56]	@ 0x38
3400f16c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
3400f170:	63fb      	str	r3, [r7, #60]	@ 0x3c
3400f172:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3400f176:	4603      	mov	r3, r0
3400f178:	460a      	mov	r2, r1
3400f17a:	4313      	orrs	r3, r2
3400f17c:	f000 80ee 	beq.w	3400f35c <HAL_RCCEx_PeriphCLKConfig+0x6064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
3400f180:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f184:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f188:	4b63      	ldr	r3, [pc, #396]	@ (3400f318 <HAL_RCCEx_PeriphCLKConfig+0x6020>)
3400f18a:	429a      	cmp	r2, r3
3400f18c:	d02e      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f18e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f192:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f196:	4b61      	ldr	r3, [pc, #388]	@ (3400f31c <HAL_RCCEx_PeriphCLKConfig+0x6024>)
3400f198:	429a      	cmp	r2, r3
3400f19a:	d027      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f19c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1a0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1a4:	4b5e      	ldr	r3, [pc, #376]	@ (3400f320 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f1a6:	429a      	cmp	r2, r3
3400f1a8:	d020      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f1aa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1ae:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1b2:	4b5c      	ldr	r3, [pc, #368]	@ (3400f324 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f1b4:	429a      	cmp	r2, r3
3400f1b6:	d019      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f1b8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1bc:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1c0:	4b59      	ldr	r3, [pc, #356]	@ (3400f328 <HAL_RCCEx_PeriphCLKConfig+0x6030>)
3400f1c2:	429a      	cmp	r2, r3
3400f1c4:	d012      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f1c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1ca:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1ce:	4b57      	ldr	r3, [pc, #348]	@ (3400f32c <HAL_RCCEx_PeriphCLKConfig+0x6034>)
3400f1d0:	429a      	cmp	r2, r3
3400f1d2:	d00b      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f1d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1d8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1dc:	4b54      	ldr	r3, [pc, #336]	@ (3400f330 <HAL_RCCEx_PeriphCLKConfig+0x6038>)
3400f1de:	429a      	cmp	r2, r3
3400f1e0:	d004      	beq.n	3400f1ec <HAL_RCCEx_PeriphCLKConfig+0x5ef4>
3400f1e2:	f640 0155 	movw	r1, #2133	@ 0x855
3400f1e6:	4853      	ldr	r0, [pc, #332]	@ (3400f334 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f1e8:	f7f2 fa20 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3400f1ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1f0:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f1f4:	4b4a      	ldr	r3, [pc, #296]	@ (3400f320 <HAL_RCCEx_PeriphCLKConfig+0x6028>)
3400f1f6:	429a      	cmp	r2, r3
3400f1f8:	d142      	bne.n	3400f280 <HAL_RCCEx_PeriphCLKConfig+0x5f88>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f1fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f1fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f200:	2b00      	cmp	r3, #0
3400f202:	d016      	beq.n	3400f232 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f204:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f20a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f20e:	d010      	beq.n	3400f232 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f210:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f21a:	d00a      	beq.n	3400f232 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f21c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f226:	d004      	beq.n	3400f232 <HAL_RCCEx_PeriphCLKConfig+0x5f3a>
3400f228:	f640 015a 	movw	r1, #2138	@ 0x85a
3400f22c:	4841      	ldr	r0, [pc, #260]	@ (3400f334 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f22e:	f7f2 f9fd 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f232:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f238:	2b00      	cmp	r3, #0
3400f23a:	d005      	beq.n	3400f248 <HAL_RCCEx_PeriphCLKConfig+0x5f50>
3400f23c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f246:	d904      	bls.n	3400f252 <HAL_RCCEx_PeriphCLKConfig+0x5f5a>
3400f248:	f640 015b 	movw	r1, #2139	@ 0x85b
3400f24c:	4839      	ldr	r0, [pc, #228]	@ (3400f334 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f24e:	f7f2 f9ed 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f252:	4b39      	ldr	r3, [pc, #228]	@ (3400f338 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f258:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f25c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f260:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f264:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f266:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f26a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f26c:	3b01      	subs	r3, #1
3400f26e:	041b      	lsls	r3, r3, #16
3400f270:	4313      	orrs	r3, r2
3400f272:	4a31      	ldr	r2, [pc, #196]	@ (3400f338 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f274:	430b      	orrs	r3, r1
3400f276:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f27a:	f7f9 fd5b 	bl	34008d34 <LL_RCC_IC9_Enable>
3400f27e:	e066      	b.n	3400f34e <HAL_RCCEx_PeriphCLKConfig+0x6056>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400f280:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f284:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f288:	4b26      	ldr	r3, [pc, #152]	@ (3400f324 <HAL_RCCEx_PeriphCLKConfig+0x602c>)
3400f28a:	429a      	cmp	r2, r3
3400f28c:	d156      	bne.n	3400f33c <HAL_RCCEx_PeriphCLKConfig+0x6044>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f28e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f294:	2b00      	cmp	r3, #0
3400f296:	d016      	beq.n	3400f2c6 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f298:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f29c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f29e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f2a2:	d010      	beq.n	3400f2c6 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f2a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f2aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f2ae:	d00a      	beq.n	3400f2c6 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f2b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f2b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f2ba:	d004      	beq.n	3400f2c6 <HAL_RCCEx_PeriphCLKConfig+0x5fce>
3400f2bc:	f640 0167 	movw	r1, #2151	@ 0x867
3400f2c0:	481c      	ldr	r0, [pc, #112]	@ (3400f334 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f2c2:	f7f2 f9b3 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f2c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f2cc:	2b00      	cmp	r3, #0
3400f2ce:	d005      	beq.n	3400f2dc <HAL_RCCEx_PeriphCLKConfig+0x5fe4>
3400f2d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f2da:	d904      	bls.n	3400f2e6 <HAL_RCCEx_PeriphCLKConfig+0x5fee>
3400f2dc:	f640 0168 	movw	r1, #2152	@ 0x868
3400f2e0:	4814      	ldr	r0, [pc, #80]	@ (3400f334 <HAL_RCCEx_PeriphCLKConfig+0x603c>)
3400f2e2:	f7f2 f9a3 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f2e6:	4b14      	ldr	r3, [pc, #80]	@ (3400f338 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f2e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f2ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f2f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f2f4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f2fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f2fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f300:	3b01      	subs	r3, #1
3400f302:	041b      	lsls	r3, r3, #16
3400f304:	4313      	orrs	r3, r2
3400f306:	4a0c      	ldr	r2, [pc, #48]	@ (3400f338 <HAL_RCCEx_PeriphCLKConfig+0x6040>)
3400f308:	430b      	orrs	r3, r1
3400f30a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f30e:	f7f9 fe11 	bl	34008f34 <LL_RCC_IC14_Enable>
3400f312:	e01c      	b.n	3400f34e <HAL_RCCEx_PeriphCLKConfig+0x6056>
3400f314:	07011830 	.word	0x07011830
3400f318:	07001c30 	.word	0x07001c30
3400f31c:	07011c30 	.word	0x07011c30
3400f320:	07021c30 	.word	0x07021c30
3400f324:	07031c30 	.word	0x07031c30
3400f328:	07041c30 	.word	0x07041c30
3400f32c:	07051c30 	.word	0x07051c30
3400f330:	07061c30 	.word	0x07061c30
3400f334:	3401ae18 	.word	0x3401ae18
3400f338:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3400f33c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f340:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3400f344:	4b72      	ldr	r3, [pc, #456]	@ (3400f510 <HAL_RCCEx_PeriphCLKConfig+0x6218>)
3400f346:	429a      	cmp	r2, r3
3400f348:	d101      	bne.n	3400f34e <HAL_RCCEx_PeriphCLKConfig+0x6056>
    {
      LL_RCC_CLKP_Enable();
3400f34a:	f7f9 ffb3 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
3400f34e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f352:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
3400f356:	4618      	mov	r0, r3
3400f358:	f7f8 ff4f 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3400f35c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f360:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f364:	2100      	movs	r1, #0
3400f366:	6339      	str	r1, [r7, #48]	@ 0x30
3400f368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3400f36c:	637b      	str	r3, [r7, #52]	@ 0x34
3400f36e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400f372:	4603      	mov	r3, r0
3400f374:	460a      	mov	r2, r1
3400f376:	4313      	orrs	r3, r2
3400f378:	f000 80ee 	beq.w	3400f558 <HAL_RCCEx_PeriphCLKConfig+0x6260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3400f37c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f380:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f384:	4a63      	ldr	r2, [pc, #396]	@ (3400f514 <HAL_RCCEx_PeriphCLKConfig+0x621c>)
3400f386:	4293      	cmp	r3, r2
3400f388:	d02e      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f38a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f38e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f392:	4a61      	ldr	r2, [pc, #388]	@ (3400f518 <HAL_RCCEx_PeriphCLKConfig+0x6220>)
3400f394:	4293      	cmp	r3, r2
3400f396:	d027      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f398:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f39c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3a0:	4a5e      	ldr	r2, [pc, #376]	@ (3400f51c <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400f3a2:	4293      	cmp	r3, r2
3400f3a4:	d020      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f3a6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3aa:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3ae:	4a5c      	ldr	r2, [pc, #368]	@ (3400f520 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400f3b0:	4293      	cmp	r3, r2
3400f3b2:	d019      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f3b4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3b8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3bc:	4a59      	ldr	r2, [pc, #356]	@ (3400f524 <HAL_RCCEx_PeriphCLKConfig+0x622c>)
3400f3be:	4293      	cmp	r3, r2
3400f3c0:	d012      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f3c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3c6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3ca:	4a57      	ldr	r2, [pc, #348]	@ (3400f528 <HAL_RCCEx_PeriphCLKConfig+0x6230>)
3400f3cc:	4293      	cmp	r3, r2
3400f3ce:	d00b      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f3d0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3d4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3d8:	4a54      	ldr	r2, [pc, #336]	@ (3400f52c <HAL_RCCEx_PeriphCLKConfig+0x6234>)
3400f3da:	4293      	cmp	r3, r2
3400f3dc:	d004      	beq.n	3400f3e8 <HAL_RCCEx_PeriphCLKConfig+0x60f0>
3400f3de:	f640 0182 	movw	r1, #2178	@ 0x882
3400f3e2:	4853      	ldr	r0, [pc, #332]	@ (3400f530 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f3e4:	f7f2 f922 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3400f3e8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3ec:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f3f0:	4a4a      	ldr	r2, [pc, #296]	@ (3400f51c <HAL_RCCEx_PeriphCLKConfig+0x6224>)
3400f3f2:	4293      	cmp	r3, r2
3400f3f4:	d142      	bne.n	3400f47c <HAL_RCCEx_PeriphCLKConfig+0x6184>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f3f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f3fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f3fc:	2b00      	cmp	r3, #0
3400f3fe:	d016      	beq.n	3400f42e <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f400:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f40a:	d010      	beq.n	3400f42e <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f40c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f416:	d00a      	beq.n	3400f42e <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f418:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f41c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f41e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f422:	d004      	beq.n	3400f42e <HAL_RCCEx_PeriphCLKConfig+0x6136>
3400f424:	f640 0187 	movw	r1, #2183	@ 0x887
3400f428:	4841      	ldr	r0, [pc, #260]	@ (3400f530 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f42a:	f7f2 f8ff 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f42e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f434:	2b00      	cmp	r3, #0
3400f436:	d005      	beq.n	3400f444 <HAL_RCCEx_PeriphCLKConfig+0x614c>
3400f438:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f43c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f43e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f442:	d904      	bls.n	3400f44e <HAL_RCCEx_PeriphCLKConfig+0x6156>
3400f444:	f640 0188 	movw	r1, #2184	@ 0x888
3400f448:	4839      	ldr	r0, [pc, #228]	@ (3400f530 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f44a:	f7f2 f8ef 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f44e:	4b39      	ldr	r3, [pc, #228]	@ (3400f534 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f454:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f458:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f45c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f462:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f468:	3b01      	subs	r3, #1
3400f46a:	041b      	lsls	r3, r3, #16
3400f46c:	4313      	orrs	r3, r2
3400f46e:	4a31      	ldr	r2, [pc, #196]	@ (3400f534 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f470:	430b      	orrs	r3, r1
3400f472:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f476:	f7f9 fc5d 	bl	34008d34 <LL_RCC_IC9_Enable>
3400f47a:	e066      	b.n	3400f54a <HAL_RCCEx_PeriphCLKConfig+0x6252>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3400f47c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f480:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f484:	4a26      	ldr	r2, [pc, #152]	@ (3400f520 <HAL_RCCEx_PeriphCLKConfig+0x6228>)
3400f486:	4293      	cmp	r3, r2
3400f488:	d156      	bne.n	3400f538 <HAL_RCCEx_PeriphCLKConfig+0x6240>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f48a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f490:	2b00      	cmp	r3, #0
3400f492:	d016      	beq.n	3400f4c2 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f494:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f49a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f49e:	d010      	beq.n	3400f4c2 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f4a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f4aa:	d00a      	beq.n	3400f4c2 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f4ac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f4b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f4b6:	d004      	beq.n	3400f4c2 <HAL_RCCEx_PeriphCLKConfig+0x61ca>
3400f4b8:	f640 0194 	movw	r1, #2196	@ 0x894
3400f4bc:	481c      	ldr	r0, [pc, #112]	@ (3400f530 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f4be:	f7f2 f8b5 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f4c2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f4c8:	2b00      	cmp	r3, #0
3400f4ca:	d005      	beq.n	3400f4d8 <HAL_RCCEx_PeriphCLKConfig+0x61e0>
3400f4cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f4d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f4d6:	d904      	bls.n	3400f4e2 <HAL_RCCEx_PeriphCLKConfig+0x61ea>
3400f4d8:	f640 0195 	movw	r1, #2197	@ 0x895
3400f4dc:	4814      	ldr	r0, [pc, #80]	@ (3400f530 <HAL_RCCEx_PeriphCLKConfig+0x6238>)
3400f4de:	f7f2 f8a5 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f4e2:	4b14      	ldr	r3, [pc, #80]	@ (3400f534 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f4e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f4e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400f4ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400f4f0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400f4f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f4fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f4fc:	3b01      	subs	r3, #1
3400f4fe:	041b      	lsls	r3, r3, #16
3400f500:	4313      	orrs	r3, r2
3400f502:	4a0c      	ldr	r2, [pc, #48]	@ (3400f534 <HAL_RCCEx_PeriphCLKConfig+0x623c>)
3400f504:	430b      	orrs	r3, r1
3400f506:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f50a:	f7f9 fd13 	bl	34008f34 <LL_RCC_IC14_Enable>
3400f50e:	e01c      	b.n	3400f54a <HAL_RCCEx_PeriphCLKConfig+0x6252>
3400f510:	07011c30 	.word	0x07011c30
3400f514:	07000034 	.word	0x07000034
3400f518:	07010034 	.word	0x07010034
3400f51c:	07020034 	.word	0x07020034
3400f520:	07030034 	.word	0x07030034
3400f524:	07040034 	.word	0x07040034
3400f528:	07050034 	.word	0x07050034
3400f52c:	07060034 	.word	0x07060034
3400f530:	3401ae18 	.word	0x3401ae18
3400f534:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3400f538:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f53c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f540:	4ab7      	ldr	r2, [pc, #732]	@ (3400f820 <HAL_RCCEx_PeriphCLKConfig+0x6528>)
3400f542:	4293      	cmp	r3, r2
3400f544:	d101      	bne.n	3400f54a <HAL_RCCEx_PeriphCLKConfig+0x6252>
    {
      LL_RCC_CLKP_Enable();
3400f546:	f7f9 feb5 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3400f54a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f54e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3400f552:	4618      	mov	r0, r3
3400f554:	f7f8 fe51 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3400f558:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f560:	2100      	movs	r1, #0
3400f562:	62b9      	str	r1, [r7, #40]	@ 0x28
3400f564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400f568:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400f56a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3400f56e:	4603      	mov	r3, r0
3400f570:	460a      	mov	r2, r1
3400f572:	4313      	orrs	r3, r2
3400f574:	f000 80da 	beq.w	3400f72c <HAL_RCCEx_PeriphCLKConfig+0x6434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3400f578:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f57c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f580:	4aa8      	ldr	r2, [pc, #672]	@ (3400f824 <HAL_RCCEx_PeriphCLKConfig+0x652c>)
3400f582:	4293      	cmp	r3, r2
3400f584:	d02e      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f586:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f58a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f58e:	4aa6      	ldr	r2, [pc, #664]	@ (3400f828 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400f590:	4293      	cmp	r3, r2
3400f592:	d027      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f594:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f598:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f59c:	4aa3      	ldr	r2, [pc, #652]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400f59e:	4293      	cmp	r3, r2
3400f5a0:	d020      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f5a2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5a6:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f5aa:	4aa1      	ldr	r2, [pc, #644]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400f5ac:	4293      	cmp	r3, r2
3400f5ae:	d019      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f5b0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f5b8:	4a9e      	ldr	r2, [pc, #632]	@ (3400f834 <HAL_RCCEx_PeriphCLKConfig+0x653c>)
3400f5ba:	4293      	cmp	r3, r2
3400f5bc:	d012      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f5be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5c2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f5c6:	4a9c      	ldr	r2, [pc, #624]	@ (3400f838 <HAL_RCCEx_PeriphCLKConfig+0x6540>)
3400f5c8:	4293      	cmp	r3, r2
3400f5ca:	d00b      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f5cc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5d0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f5d4:	4a99      	ldr	r2, [pc, #612]	@ (3400f83c <HAL_RCCEx_PeriphCLKConfig+0x6544>)
3400f5d6:	4293      	cmp	r3, r2
3400f5d8:	d004      	beq.n	3400f5e4 <HAL_RCCEx_PeriphCLKConfig+0x62ec>
3400f5da:	f640 01af 	movw	r1, #2223	@ 0x8af
3400f5de:	4898      	ldr	r0, [pc, #608]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f5e0:	f7f2 f824 	bl	3400162c <assert_failed>

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3400f5e4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5e8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f5ec:	4a8f      	ldr	r2, [pc, #572]	@ (3400f82c <HAL_RCCEx_PeriphCLKConfig+0x6534>)
3400f5ee:	4293      	cmp	r3, r2
3400f5f0:	d142      	bne.n	3400f678 <HAL_RCCEx_PeriphCLKConfig+0x6380>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3400f5f2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f5f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f5f8:	2b00      	cmp	r3, #0
3400f5fa:	d016      	beq.n	3400f62a <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400f5fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f606:	d010      	beq.n	3400f62a <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400f608:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f60c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f60e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f612:	d00a      	beq.n	3400f62a <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400f614:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400f61a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f61e:	d004      	beq.n	3400f62a <HAL_RCCEx_PeriphCLKConfig+0x6332>
3400f620:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3400f624:	4886      	ldr	r0, [pc, #536]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f626:	f7f2 f801 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3400f62a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f62e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f630:	2b00      	cmp	r3, #0
3400f632:	d005      	beq.n	3400f640 <HAL_RCCEx_PeriphCLKConfig+0x6348>
3400f634:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400f63a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f63e:	d904      	bls.n	3400f64a <HAL_RCCEx_PeriphCLKConfig+0x6352>
3400f640:	f640 01b5 	movw	r1, #2229	@ 0x8b5
3400f644:	487e      	ldr	r0, [pc, #504]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f646:	f7f1 fff1 	bl	3400162c <assert_failed>

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400f64a:	4b7e      	ldr	r3, [pc, #504]	@ (3400f844 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400f64c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400f650:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400f654:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400f658:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f65c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3400f65e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f662:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3400f664:	3a01      	subs	r2, #1
3400f666:	0412      	lsls	r2, r2, #16
3400f668:	430a      	orrs	r2, r1
3400f66a:	4976      	ldr	r1, [pc, #472]	@ (3400f844 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400f66c:	4313      	orrs	r3, r2
3400f66e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400f672:	f7f9 fb5f 	bl	34008d34 <LL_RCC_IC9_Enable>
3400f676:	e052      	b.n	3400f71e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3400f678:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f67c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f680:	4a6b      	ldr	r2, [pc, #428]	@ (3400f830 <HAL_RCCEx_PeriphCLKConfig+0x6538>)
3400f682:	4293      	cmp	r3, r2
3400f684:	d142      	bne.n	3400f70c <HAL_RCCEx_PeriphCLKConfig+0x6414>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3400f686:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f68a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f68c:	2b00      	cmp	r3, #0
3400f68e:	d016      	beq.n	3400f6be <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400f690:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f69a:	d010      	beq.n	3400f6be <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400f69c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f6a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f6a6:	d00a      	beq.n	3400f6be <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400f6a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3400f6ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f6b2:	d004      	beq.n	3400f6be <HAL_RCCEx_PeriphCLKConfig+0x63c6>
3400f6b4:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3400f6b8:	4861      	ldr	r0, [pc, #388]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f6ba:	f7f1 ffb7 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3400f6be:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f6c4:	2b00      	cmp	r3, #0
3400f6c6:	d005      	beq.n	3400f6d4 <HAL_RCCEx_PeriphCLKConfig+0x63dc>
3400f6c8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f6cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400f6ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f6d2:	d904      	bls.n	3400f6de <HAL_RCCEx_PeriphCLKConfig+0x63e6>
3400f6d4:	f640 01c2 	movw	r1, #2242	@ 0x8c2
3400f6d8:	4859      	ldr	r0, [pc, #356]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f6da:	f7f1 ffa7 	bl	3400162c <assert_failed>

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400f6de:	4b59      	ldr	r3, [pc, #356]	@ (3400f844 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400f6e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400f6e4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400f6e8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400f6ec:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f6f0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3400f6f2:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f6f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3400f6f8:	3a01      	subs	r2, #1
3400f6fa:	0412      	lsls	r2, r2, #16
3400f6fc:	430a      	orrs	r2, r1
3400f6fe:	4951      	ldr	r1, [pc, #324]	@ (3400f844 <HAL_RCCEx_PeriphCLKConfig+0x654c>)
3400f700:	4313      	orrs	r3, r2
3400f702:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400f706:	f7f9 fc15 	bl	34008f34 <LL_RCC_IC14_Enable>
3400f70a:	e008      	b.n	3400f71e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3400f70c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f710:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f714:	4a44      	ldr	r2, [pc, #272]	@ (3400f828 <HAL_RCCEx_PeriphCLKConfig+0x6530>)
3400f716:	4293      	cmp	r3, r2
3400f718:	d101      	bne.n	3400f71e <HAL_RCCEx_PeriphCLKConfig+0x6426>
    {
      LL_RCC_CLKP_Enable();
3400f71a:	f7f9 fdcb 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3400f71e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f722:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400f726:	4618      	mov	r0, r3
3400f728:	f7f8 fd67 	bl	340081fa <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3400f72c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f730:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f734:	2100      	movs	r1, #0
3400f736:	6239      	str	r1, [r7, #32]
3400f738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3400f73c:	627b      	str	r3, [r7, #36]	@ 0x24
3400f73e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3400f742:	4603      	mov	r3, r0
3400f744:	460a      	mov	r2, r1
3400f746:	4313      	orrs	r3, r2
3400f748:	d02e      	beq.n	3400f7a8 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
3400f74a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f74e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400f752:	4a3d      	ldr	r2, [pc, #244]	@ (3400f848 <HAL_RCCEx_PeriphCLKConfig+0x6550>)
3400f754:	4293      	cmp	r3, r2
3400f756:	d012      	beq.n	3400f77e <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400f758:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f75c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400f760:	4a3a      	ldr	r2, [pc, #232]	@ (3400f84c <HAL_RCCEx_PeriphCLKConfig+0x6554>)
3400f762:	4293      	cmp	r3, r2
3400f764:	d00b      	beq.n	3400f77e <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400f766:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f76a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400f76e:	4a38      	ldr	r2, [pc, #224]	@ (3400f850 <HAL_RCCEx_PeriphCLKConfig+0x6558>)
3400f770:	4293      	cmp	r3, r2
3400f772:	d004      	beq.n	3400f77e <HAL_RCCEx_PeriphCLKConfig+0x6486>
3400f774:	f640 01dc 	movw	r1, #2268	@ 0x8dc
3400f778:	4831      	ldr	r0, [pc, #196]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f77a:	f7f1 ff57 	bl	3400162c <assert_failed>

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3400f77e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f782:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400f786:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400f78a:	4618      	mov	r0, r3
3400f78c:	f7f8 fcdd 	bl	3400814a <LL_RCC_SetOTGPHYCKREFClockSource>
3400f790:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f794:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400f798:	0fdb      	lsrs	r3, r3, #31
3400f79a:	2b01      	cmp	r3, #1
3400f79c:	d102      	bne.n	3400f7a4 <HAL_RCCEx_PeriphCLKConfig+0x64ac>
3400f79e:	f7f8 fa7f 	bl	34007ca0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400f7a2:	e001      	b.n	3400f7a8 <HAL_RCCEx_PeriphCLKConfig+0x64b0>
3400f7a4:	f7f8 fa6c 	bl	34007c80 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400f7a8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f7b0:	2100      	movs	r1, #0
3400f7b2:	61b9      	str	r1, [r7, #24]
3400f7b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400f7b8:	61fb      	str	r3, [r7, #28]
3400f7ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3400f7be:	4603      	mov	r3, r0
3400f7c0:	460a      	mov	r2, r1
3400f7c2:	4313      	orrs	r3, r2
3400f7c4:	d04e      	beq.n	3400f864 <HAL_RCCEx_PeriphCLKConfig+0x656c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3400f7c6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7ca:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400f7ce:	4a21      	ldr	r2, [pc, #132]	@ (3400f854 <HAL_RCCEx_PeriphCLKConfig+0x655c>)
3400f7d0:	4293      	cmp	r3, r2
3400f7d2:	d012      	beq.n	3400f7fa <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400f7d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7d8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400f7dc:	4a1e      	ldr	r2, [pc, #120]	@ (3400f858 <HAL_RCCEx_PeriphCLKConfig+0x6560>)
3400f7de:	4293      	cmp	r3, r2
3400f7e0:	d00b      	beq.n	3400f7fa <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400f7e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7e6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400f7ea:	4a1c      	ldr	r2, [pc, #112]	@ (3400f85c <HAL_RCCEx_PeriphCLKConfig+0x6564>)
3400f7ec:	4293      	cmp	r3, r2
3400f7ee:	d004      	beq.n	3400f7fa <HAL_RCCEx_PeriphCLKConfig+0x6502>
3400f7f0:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3400f7f4:	4812      	ldr	r0, [pc, #72]	@ (3400f840 <HAL_RCCEx_PeriphCLKConfig+0x6548>)
3400f7f6:	f7f1 ff19 	bl	3400162c <assert_failed>

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3400f7fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f7fe:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400f802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400f806:	4618      	mov	r0, r3
3400f808:	f7f8 fc9f 	bl	3400814a <LL_RCC_SetOTGPHYCKREFClockSource>
3400f80c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f810:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3400f814:	0fdb      	lsrs	r3, r3, #31
3400f816:	2b01      	cmp	r3, #1
3400f818:	d122      	bne.n	3400f860 <HAL_RCCEx_PeriphCLKConfig+0x6568>
3400f81a:	f7f8 fa41 	bl	34007ca0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400f81e:	e021      	b.n	3400f864 <HAL_RCCEx_PeriphCLKConfig+0x656c>
3400f820:	07010034 	.word	0x07010034
3400f824:	07000434 	.word	0x07000434
3400f828:	07010434 	.word	0x07010434
3400f82c:	07020434 	.word	0x07020434
3400f830:	07030434 	.word	0x07030434
3400f834:	07040434 	.word	0x07040434
3400f838:	07050434 	.word	0x07050434
3400f83c:	07060434 	.word	0x07060434
3400f840:	3401ae18 	.word	0x3401ae18
3400f844:	56028000 	.word	0x56028000
3400f848:	01001014 	.word	0x01001014
3400f84c:	01011014 	.word	0x01011014
3400f850:	81011014 	.word	0x81011014
3400f854:	01001814 	.word	0x01001814
3400f858:	01011814 	.word	0x01011814
3400f85c:	81011814 	.word	0x81011814
3400f860:	f7f8 fa0e 	bl	34007c80 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3400f864:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f868:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f86c:	2100      	movs	r1, #0
3400f86e:	6139      	str	r1, [r7, #16]
3400f870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3400f874:	617b      	str	r3, [r7, #20]
3400f876:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3400f87a:	4603      	mov	r3, r0
3400f87c:	460a      	mov	r2, r1
3400f87e:	4313      	orrs	r3, r2
3400f880:	f000 8090 	beq.w	3400f9a4 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3400f884:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f888:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f88c:	4ab5      	ldr	r2, [pc, #724]	@ (3400fb64 <HAL_RCCEx_PeriphCLKConfig+0x686c>)
3400f88e:	4293      	cmp	r3, r2
3400f890:	d020      	beq.n	3400f8d4 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400f892:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f896:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f89a:	4ab3      	ldr	r2, [pc, #716]	@ (3400fb68 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400f89c:	4293      	cmp	r3, r2
3400f89e:	d019      	beq.n	3400f8d4 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400f8a0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8a4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f8a8:	4ab0      	ldr	r2, [pc, #704]	@ (3400fb6c <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400f8aa:	4293      	cmp	r3, r2
3400f8ac:	d012      	beq.n	3400f8d4 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400f8ae:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8b2:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f8b6:	4aae      	ldr	r2, [pc, #696]	@ (3400fb70 <HAL_RCCEx_PeriphCLKConfig+0x6878>)
3400f8b8:	4293      	cmp	r3, r2
3400f8ba:	d00b      	beq.n	3400f8d4 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400f8bc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8c0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f8c4:	4aab      	ldr	r2, [pc, #684]	@ (3400fb74 <HAL_RCCEx_PeriphCLKConfig+0x687c>)
3400f8c6:	4293      	cmp	r3, r2
3400f8c8:	d004      	beq.n	3400f8d4 <HAL_RCCEx_PeriphCLKConfig+0x65dc>
3400f8ca:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
3400f8ce:	48aa      	ldr	r0, [pc, #680]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400f8d0:	f7f1 feac 	bl	3400162c <assert_failed>

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3400f8d4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8d8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f8dc:	4aa3      	ldr	r2, [pc, #652]	@ (3400fb6c <HAL_RCCEx_PeriphCLKConfig+0x6874>)
3400f8de:	4293      	cmp	r3, r2
3400f8e0:	d142      	bne.n	3400f968 <HAL_RCCEx_PeriphCLKConfig+0x6670>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400f8e2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f8e8:	2b00      	cmp	r3, #0
3400f8ea:	d016      	beq.n	3400f91a <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400f8ec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f8f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400f8f6:	d010      	beq.n	3400f91a <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400f8f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f8fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f8fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400f902:	d00a      	beq.n	3400f91a <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400f904:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400f90a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400f90e:	d004      	beq.n	3400f91a <HAL_RCCEx_PeriphCLKConfig+0x6622>
3400f910:	f640 01f5 	movw	r1, #2293	@ 0x8f5
3400f914:	4898      	ldr	r0, [pc, #608]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400f916:	f7f1 fe89 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400f91a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f91e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f920:	2b00      	cmp	r3, #0
3400f922:	d005      	beq.n	3400f930 <HAL_RCCEx_PeriphCLKConfig+0x6638>
3400f924:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400f92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f92e:	d904      	bls.n	3400f93a <HAL_RCCEx_PeriphCLKConfig+0x6642>
3400f930:	f640 01f6 	movw	r1, #2294	@ 0x8f6
3400f934:	4890      	ldr	r0, [pc, #576]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400f936:	f7f1 fe79 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400f93a:	4b90      	ldr	r3, [pc, #576]	@ (3400fb7c <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400f93c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400f940:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400f944:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400f948:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f94c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3400f94e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400f952:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3400f954:	3a01      	subs	r2, #1
3400f956:	0412      	lsls	r2, r2, #16
3400f958:	430a      	orrs	r2, r1
3400f95a:	4988      	ldr	r1, [pc, #544]	@ (3400fb7c <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400f95c:	4313      	orrs	r3, r2
3400f95e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400f962:	f7f9 fb27 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400f966:	e008      	b.n	3400f97a <HAL_RCCEx_PeriphCLKConfig+0x6682>
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3400f968:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f96c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f970:	4a7d      	ldr	r2, [pc, #500]	@ (3400fb68 <HAL_RCCEx_PeriphCLKConfig+0x6870>)
3400f972:	4293      	cmp	r3, r2
3400f974:	d101      	bne.n	3400f97a <HAL_RCCEx_PeriphCLKConfig+0x6682>
    {
      LL_RCC_CLKP_Enable();
3400f976:	f7f9 fc9d 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3400f97a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f97e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f982:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400f986:	4618      	mov	r0, r3
3400f988:	f7f8 fbd4 	bl	34008134 <LL_RCC_SetOTGPHYClockSource>
3400f98c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f990:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3400f994:	0fdb      	lsrs	r3, r3, #31
3400f996:	2b01      	cmp	r3, #1
3400f998:	d102      	bne.n	3400f9a0 <HAL_RCCEx_PeriphCLKConfig+0x66a8>
3400f99a:	f7f8 f981 	bl	34007ca0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400f99e:	e001      	b.n	3400f9a4 <HAL_RCCEx_PeriphCLKConfig+0x66ac>
3400f9a0:	f7f8 f96e 	bl	34007c80 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3400f9a4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400f9ac:	2100      	movs	r1, #0
3400f9ae:	60b9      	str	r1, [r7, #8]
3400f9b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3400f9b4:	60fb      	str	r3, [r7, #12]
3400f9b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3400f9ba:	4603      	mov	r3, r0
3400f9bc:	460a      	mov	r2, r1
3400f9be:	4313      	orrs	r3, r2
3400f9c0:	f000 8090 	beq.w	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
3400f9c4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9c8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400f9cc:	4a6c      	ldr	r2, [pc, #432]	@ (3400fb80 <HAL_RCCEx_PeriphCLKConfig+0x6888>)
3400f9ce:	4293      	cmp	r3, r2
3400f9d0:	d020      	beq.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400f9d2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9d6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400f9da:	4a6a      	ldr	r2, [pc, #424]	@ (3400fb84 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
3400f9dc:	4293      	cmp	r3, r2
3400f9de:	d019      	beq.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400f9e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9e4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400f9e8:	4a67      	ldr	r2, [pc, #412]	@ (3400fb88 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3400f9ea:	4293      	cmp	r3, r2
3400f9ec:	d012      	beq.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400f9ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400f9f2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400f9f6:	4a65      	ldr	r2, [pc, #404]	@ (3400fb8c <HAL_RCCEx_PeriphCLKConfig+0x6894>)
3400f9f8:	4293      	cmp	r3, r2
3400f9fa:	d00b      	beq.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400f9fc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa00:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fa04:	4a62      	ldr	r2, [pc, #392]	@ (3400fb90 <HAL_RCCEx_PeriphCLKConfig+0x6898>)
3400fa06:	4293      	cmp	r3, r2
3400fa08:	d004      	beq.n	3400fa14 <HAL_RCCEx_PeriphCLKConfig+0x671c>
3400fa0a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
3400fa0e:	485a      	ldr	r0, [pc, #360]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fa10:	f7f1 fe0c 	bl	3400162c <assert_failed>

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3400fa14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa18:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fa1c:	4a5a      	ldr	r2, [pc, #360]	@ (3400fb88 <HAL_RCCEx_PeriphCLKConfig+0x6890>)
3400fa1e:	4293      	cmp	r3, r2
3400fa20:	d142      	bne.n	3400faa8 <HAL_RCCEx_PeriphCLKConfig+0x67b0>
    {
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3400fa22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fa28:	2b00      	cmp	r3, #0
3400fa2a:	d016      	beq.n	3400fa5a <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400fa2c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fa32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400fa36:	d010      	beq.n	3400fa5a <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400fa38:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fa3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400fa42:	d00a      	beq.n	3400fa5a <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400fa44:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
3400fa4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400fa4e:	d004      	beq.n	3400fa5a <HAL_RCCEx_PeriphCLKConfig+0x6762>
3400fa50:	f640 1115 	movw	r1, #2325	@ 0x915
3400fa54:	4848      	ldr	r0, [pc, #288]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fa56:	f7f1 fde9 	bl	3400162c <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3400fa5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400fa60:	2b00      	cmp	r3, #0
3400fa62:	d005      	beq.n	3400fa70 <HAL_RCCEx_PeriphCLKConfig+0x6778>
3400fa64:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fa68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400fa6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fa6e:	d904      	bls.n	3400fa7a <HAL_RCCEx_PeriphCLKConfig+0x6782>
3400fa70:	f640 1116 	movw	r1, #2326	@ 0x916
3400fa74:	4840      	ldr	r0, [pc, #256]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fa76:	f7f1 fdd9 	bl	3400162c <assert_failed>

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400fa7a:	4b40      	ldr	r3, [pc, #256]	@ (3400fb7c <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400fa7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400fa80:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3400fa84:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3400fa88:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fa8c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3400fa8e:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
3400fa92:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3400fa94:	3a01      	subs	r2, #1
3400fa96:	0412      	lsls	r2, r2, #16
3400fa98:	430a      	orrs	r2, r1
3400fa9a:	4938      	ldr	r1, [pc, #224]	@ (3400fb7c <HAL_RCCEx_PeriphCLKConfig+0x6884>)
3400fa9c:	4313      	orrs	r3, r2
3400fa9e:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400faa2:	f7f9 fa87 	bl	34008fb4 <LL_RCC_IC15_Enable>
3400faa6:	e008      	b.n	3400faba <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3400faa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400faac:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fab0:	4a34      	ldr	r2, [pc, #208]	@ (3400fb84 <HAL_RCCEx_PeriphCLKConfig+0x688c>)
3400fab2:	4293      	cmp	r3, r2
3400fab4:	d101      	bne.n	3400faba <HAL_RCCEx_PeriphCLKConfig+0x67c2>
    {
      LL_RCC_CLKP_Enable();
3400fab6:	f7f9 fbfd 	bl	340092b4 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3400faba:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fabe:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fac2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400fac6:	4618      	mov	r0, r3
3400fac8:	f7f8 fb34 	bl	34008134 <LL_RCC_SetOTGPHYClockSource>
3400facc:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fad0:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3400fad4:	0fdb      	lsrs	r3, r3, #31
3400fad6:	2b01      	cmp	r3, #1
3400fad8:	d102      	bne.n	3400fae0 <HAL_RCCEx_PeriphCLKConfig+0x67e8>
3400fada:	f7f8 f8e1 	bl	34007ca0 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3400fade:	e001      	b.n	3400fae4 <HAL_RCCEx_PeriphCLKConfig+0x67ec>
3400fae0:	f7f8 f8ce 	bl	34007c80 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3400fae4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
3400faec:	2100      	movs	r1, #0
3400faee:	6039      	str	r1, [r7, #0]
3400faf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400faf4:	607b      	str	r3, [r7, #4]
3400faf6:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fafa:	4603      	mov	r3, r0
3400fafc:	460a      	mov	r2, r1
3400fafe:	4313      	orrs	r3, r2
3400fb00:	d023      	beq.n	3400fb4a <HAL_RCCEx_PeriphCLKConfig+0x6852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
3400fb02:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb06:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fb0a:	2b00      	cmp	r3, #0
3400fb0c:	d016      	beq.n	3400fb3c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400fb0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb12:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fb16:	2b01      	cmp	r3, #1
3400fb18:	d010      	beq.n	3400fb3c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400fb1a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb1e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fb22:	2b02      	cmp	r3, #2
3400fb24:	d00a      	beq.n	3400fb3c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400fb26:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb2a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fb2e:	2b03      	cmp	r3, #3
3400fb30:	d004      	beq.n	3400fb3c <HAL_RCCEx_PeriphCLKConfig+0x6844>
3400fb32:	f44f 6113 	mov.w	r1, #2352	@ 0x930
3400fb36:	4810      	ldr	r0, [pc, #64]	@ (3400fb78 <HAL_RCCEx_PeriphCLKConfig+0x6880>)
3400fb38:	f7f1 fd78 	bl	3400162c <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3400fb3c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
3400fb40:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3400fb44:	4618      	mov	r0, r3
3400fb46:	f7f8 fd31 	bl	340085ac <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3400fb4a:	f897 338e 	ldrb.w	r3, [r7, #910]	@ 0x38e
3400fb4e:	2b00      	cmp	r3, #0
3400fb50:	d101      	bne.n	3400fb56 <HAL_RCCEx_PeriphCLKConfig+0x685e>
  {
    return HAL_OK;
3400fb52:	2300      	movs	r3, #0
3400fb54:	e000      	b.n	3400fb58 <HAL_RCCEx_PeriphCLKConfig+0x6860>
  }
  return HAL_ERROR;
3400fb56:	2301      	movs	r3, #1
}
3400fb58:	4618      	mov	r0, r3
3400fb5a:	f507 7764 	add.w	r7, r7, #912	@ 0x390
3400fb5e:	46bd      	mov	sp, r7
3400fb60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3400fb64:	03000c14 	.word	0x03000c14
3400fb68:	03010c14 	.word	0x03010c14
3400fb6c:	03020c14 	.word	0x03020c14
3400fb70:	03030c14 	.word	0x03030c14
3400fb74:	83030c14 	.word	0x83030c14
3400fb78:	3401ae18 	.word	0x3401ae18
3400fb7c:	56028000 	.word	0x56028000
3400fb80:	03001414 	.word	0x03001414
3400fb84:	03011414 	.word	0x03011414
3400fb88:	03021414 	.word	0x03021414
3400fb8c:	03031414 	.word	0x03031414
3400fb90:	83031414 	.word	0x83031414

3400fb94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
3400fb94:	b590      	push	{r4, r7, lr}
3400fb96:	b085      	sub	sp, #20
3400fb98:	af00      	add	r7, sp, #0
3400fb9a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3400fb9e:	2100      	movs	r1, #0
3400fba0:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3400fba2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fba6:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
3400fbaa:	ea50 0104 	orrs.w	r1, r0, r4
3400fbae:	f000 8436 	beq.w	3401041e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
3400fbb2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fbb6:	2801      	cmp	r0, #1
3400fbb8:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
3400fbbc:	f080 8434 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fbc0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fbc4:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
3400fbc8:	ea50 0104 	orrs.w	r1, r0, r4
3400fbcc:	f000 8422 	beq.w	34010414 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
3400fbd0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fbd4:	2801      	cmp	r0, #1
3400fbd6:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
3400fbda:	f080 8425 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fbde:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fbe2:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
3400fbe6:	ea50 0104 	orrs.w	r1, r0, r4
3400fbea:	f000 840e 	beq.w	3401040a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
3400fbee:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fbf2:	2801      	cmp	r0, #1
3400fbf4:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
3400fbf8:	f080 8416 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fbfc:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc00:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
3400fc04:	ea50 0104 	orrs.w	r1, r0, r4
3400fc08:	f000 83fa 	beq.w	34010400 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
3400fc0c:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc10:	2801      	cmp	r0, #1
3400fc12:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
3400fc16:	f080 8407 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fc1a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc1e:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
3400fc22:	ea50 0104 	orrs.w	r1, r0, r4
3400fc26:	f000 83e6 	beq.w	340103f6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3400fc2a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc2e:	2801      	cmp	r0, #1
3400fc30:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
3400fc34:	f080 83f8 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fc38:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc3c:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3400fc40:	ea50 0104 	orrs.w	r1, r0, r4
3400fc44:	f000 83d2 	beq.w	340103ec <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3400fc48:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc4c:	2801      	cmp	r0, #1
3400fc4e:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3400fc52:	f080 83e9 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fc56:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc5a:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3400fc5e:	ea50 0104 	orrs.w	r1, r0, r4
3400fc62:	f000 83be 	beq.w	340103e2 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3400fc66:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc6a:	2801      	cmp	r0, #1
3400fc6c:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3400fc70:	f080 83da 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fc74:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc78:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
3400fc7c:	ea50 0104 	orrs.w	r1, r0, r4
3400fc80:	f000 83aa 	beq.w	340103d8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
3400fc84:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc88:	2801      	cmp	r0, #1
3400fc8a:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3400fc8e:	f080 83cb 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fc92:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fc96:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
3400fc9a:	ea50 0104 	orrs.w	r1, r0, r4
3400fc9e:	f000 8396 	beq.w	340103ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3400fca2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fca6:	2801      	cmp	r0, #1
3400fca8:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
3400fcac:	f080 83bc 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fcb0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fcb4:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
3400fcb8:	ea50 0104 	orrs.w	r1, r0, r4
3400fcbc:	f000 8382 	beq.w	340103c4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3400fcc0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fcc4:	2801      	cmp	r0, #1
3400fcc6:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
3400fcca:	f080 83ad 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fcce:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fcd2:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
3400fcd6:	ea50 0104 	orrs.w	r1, r0, r4
3400fcda:	f000 836e 	beq.w	340103ba <HAL_RCCEx_GetPeriphCLKFreq+0x826>
3400fcde:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fce2:	2801      	cmp	r0, #1
3400fce4:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
3400fce8:	f080 839e 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fcec:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fcf0:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
3400fcf4:	ea50 0104 	orrs.w	r1, r0, r4
3400fcf8:	f000 835a 	beq.w	340103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
3400fcfc:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd00:	2801      	cmp	r0, #1
3400fd02:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
3400fd06:	f080 838f 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fd0a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd0e:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3400fd12:	ea50 0104 	orrs.w	r1, r0, r4
3400fd16:	f000 8346 	beq.w	340103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3400fd1a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd1e:	2801      	cmp	r0, #1
3400fd20:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
3400fd24:	f080 8380 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fd28:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd2c:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3400fd30:	ea50 0104 	orrs.w	r1, r0, r4
3400fd34:	f000 8332 	beq.w	3401039c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3400fd38:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd3c:	2801      	cmp	r0, #1
3400fd3e:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3400fd42:	f080 8371 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fd46:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd4a:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3400fd4e:	ea50 0104 	orrs.w	r1, r0, r4
3400fd52:	f000 831e 	beq.w	34010392 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3400fd56:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd5a:	2801      	cmp	r0, #1
3400fd5c:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3400fd60:	f080 8362 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fd64:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd68:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
3400fd6c:	ea50 0104 	orrs.w	r1, r0, r4
3400fd70:	f000 830a 	beq.w	34010388 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
3400fd74:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd78:	2801      	cmp	r0, #1
3400fd7a:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3400fd7e:	f080 8353 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fd82:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd86:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
3400fd8a:	ea50 0104 	orrs.w	r1, r0, r4
3400fd8e:	f000 82f6 	beq.w	3401037e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3400fd92:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fd96:	2801      	cmp	r0, #1
3400fd98:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
3400fd9c:	f080 8344 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fda0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fda4:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
3400fda8:	ea50 0104 	orrs.w	r1, r0, r4
3400fdac:	f000 82e2 	beq.w	34010374 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3400fdb0:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fdb4:	2801      	cmp	r0, #1
3400fdb6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
3400fdba:	f080 8335 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fdbe:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fdc2:	f1a1 0420 	sub.w	r4, r1, #32
3400fdc6:	ea50 0104 	orrs.w	r1, r0, r4
3400fdca:	f000 82ce 	beq.w	3401036a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3400fdce:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fdd2:	2801      	cmp	r0, #1
3400fdd4:	f171 0120 	sbcs.w	r1, r1, #32
3400fdd8:	f080 8326 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fddc:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fde0:	f1a1 0410 	sub.w	r4, r1, #16
3400fde4:	ea50 0104 	orrs.w	r1, r0, r4
3400fde8:	f000 82ba 	beq.w	34010360 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
3400fdec:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fdf0:	2801      	cmp	r0, #1
3400fdf2:	f171 0110 	sbcs.w	r1, r1, #16
3400fdf6:	f080 8317 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fdfa:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fdfe:	f1a1 0408 	sub.w	r4, r1, #8
3400fe02:	ea50 0104 	orrs.w	r1, r0, r4
3400fe06:	f000 82a6 	beq.w	34010356 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
3400fe0a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe0e:	2801      	cmp	r0, #1
3400fe10:	f171 0108 	sbcs.w	r1, r1, #8
3400fe14:	f080 8308 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fe18:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe1c:	1f0c      	subs	r4, r1, #4
3400fe1e:	ea50 0104 	orrs.w	r1, r0, r4
3400fe22:	f000 8293 	beq.w	3401034c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3400fe26:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe2a:	2801      	cmp	r0, #1
3400fe2c:	f171 0104 	sbcs.w	r1, r1, #4
3400fe30:	f080 82fa 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fe34:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe38:	1e8c      	subs	r4, r1, #2
3400fe3a:	ea50 0104 	orrs.w	r1, r0, r4
3400fe3e:	f000 8280 	beq.w	34010342 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3400fe42:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe46:	2801      	cmp	r0, #1
3400fe48:	f171 0102 	sbcs.w	r1, r1, #2
3400fe4c:	f080 82ec 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fe50:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe54:	1e4c      	subs	r4, r1, #1
3400fe56:	ea50 0104 	orrs.w	r1, r0, r4
3400fe5a:	f000 826d 	beq.w	34010338 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3400fe5e:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe62:	2801      	cmp	r0, #1
3400fe64:	f171 0101 	sbcs.w	r1, r1, #1
3400fe68:	f080 82de 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fe6c:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe70:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
3400fe74:	4321      	orrs	r1, r4
3400fe76:	f000 825a 	beq.w	3401032e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3400fe7a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe7e:	4cda      	ldr	r4, [pc, #872]	@ (340101e8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3400fe80:	42a0      	cmp	r0, r4
3400fe82:	f171 0100 	sbcs.w	r1, r1, #0
3400fe86:	f080 82cf 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fe8a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe8e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3400fe92:	4321      	orrs	r1, r4
3400fe94:	f000 8246 	beq.w	34010324 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
3400fe98:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fe9c:	4cd3      	ldr	r4, [pc, #844]	@ (340101ec <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3400fe9e:	42a0      	cmp	r0, r4
3400fea0:	f171 0100 	sbcs.w	r1, r1, #0
3400fea4:	f080 82c0 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fea8:	e9d7 0100 	ldrd	r0, r1, [r7]
3400feac:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3400feb0:	4321      	orrs	r1, r4
3400feb2:	f000 8232 	beq.w	3401031a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
3400feb6:	e9d7 0100 	ldrd	r0, r1, [r7]
3400feba:	4ccd      	ldr	r4, [pc, #820]	@ (340101f0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
3400febc:	42a0      	cmp	r0, r4
3400febe:	f171 0100 	sbcs.w	r1, r1, #0
3400fec2:	f080 82b1 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fec6:	e9d7 0100 	ldrd	r0, r1, [r7]
3400feca:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3400fece:	4321      	orrs	r1, r4
3400fed0:	f000 821e 	beq.w	34010310 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
3400fed4:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fed8:	4cc6      	ldr	r4, [pc, #792]	@ (340101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
3400feda:	42a0      	cmp	r0, r4
3400fedc:	f171 0100 	sbcs.w	r1, r1, #0
3400fee0:	f080 82a2 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fee4:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fee8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
3400feec:	4321      	orrs	r1, r4
3400feee:	f000 820b 	beq.w	34010308 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
3400fef2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fef6:	4cc0      	ldr	r4, [pc, #768]	@ (340101f8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
3400fef8:	42a0      	cmp	r0, r4
3400fefa:	f171 0100 	sbcs.w	r1, r1, #0
3400fefe:	f080 8293 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff02:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff06:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
3400ff0a:	4321      	orrs	r1, r4
3400ff0c:	f000 81f7 	beq.w	340102fe <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
3400ff10:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff14:	4cb9      	ldr	r4, [pc, #740]	@ (340101fc <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3400ff16:	42a0      	cmp	r0, r4
3400ff18:	f171 0100 	sbcs.w	r1, r1, #0
3400ff1c:	f080 8284 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff20:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff24:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
3400ff28:	4321      	orrs	r1, r4
3400ff2a:	f000 81e2 	beq.w	340102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3400ff2e:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff32:	4cb3      	ldr	r4, [pc, #716]	@ (34010200 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
3400ff34:	42a0      	cmp	r0, r4
3400ff36:	f171 0100 	sbcs.w	r1, r1, #0
3400ff3a:	f080 8275 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff3e:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff42:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3400ff46:	4321      	orrs	r1, r4
3400ff48:	f000 81cd 	beq.w	340102e6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
3400ff4c:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff50:	4cac      	ldr	r4, [pc, #688]	@ (34010204 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3400ff52:	42a0      	cmp	r0, r4
3400ff54:	f171 0100 	sbcs.w	r1, r1, #0
3400ff58:	f080 8266 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff5c:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff60:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
3400ff64:	4321      	orrs	r1, r4
3400ff66:	f000 81b8 	beq.w	340102da <HAL_RCCEx_GetPeriphCLKFreq+0x746>
3400ff6a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff6e:	4ca6      	ldr	r4, [pc, #664]	@ (34010208 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3400ff70:	42a0      	cmp	r0, r4
3400ff72:	f171 0100 	sbcs.w	r1, r1, #0
3400ff76:	f080 8257 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff7a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff7e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3400ff82:	4321      	orrs	r1, r4
3400ff84:	f000 81a4 	beq.w	340102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
3400ff88:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff8c:	4c9f      	ldr	r4, [pc, #636]	@ (3401020c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3400ff8e:	42a0      	cmp	r0, r4
3400ff90:	f171 0100 	sbcs.w	r1, r1, #0
3400ff94:	f080 8248 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ff98:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ff9c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3400ffa0:	4321      	orrs	r1, r4
3400ffa2:	f000 8190 	beq.w	340102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
3400ffa6:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffaa:	4c99      	ldr	r4, [pc, #612]	@ (34010210 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
3400ffac:	42a0      	cmp	r0, r4
3400ffae:	f171 0100 	sbcs.w	r1, r1, #0
3400ffb2:	f080 8239 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ffb6:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffba:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3400ffbe:	4321      	orrs	r1, r4
3400ffc0:	f000 817c 	beq.w	340102bc <HAL_RCCEx_GetPeriphCLKFreq+0x728>
3400ffc4:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffc8:	4c92      	ldr	r4, [pc, #584]	@ (34010214 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
3400ffca:	42a0      	cmp	r0, r4
3400ffcc:	f171 0100 	sbcs.w	r1, r1, #0
3400ffd0:	f080 822a 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400ffd4:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffd8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
3400ffdc:	4321      	orrs	r1, r4
3400ffde:	f000 8168 	beq.w	340102b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
3400ffe2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400ffe6:	4c8c      	ldr	r4, [pc, #560]	@ (34010218 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
3400ffe8:	42a0      	cmp	r0, r4
3400ffea:	f171 0100 	sbcs.w	r1, r1, #0
3400ffee:	f080 821b 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400fff2:	e9d7 0100 	ldrd	r0, r1, [r7]
3400fff6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
3400fffa:	4321      	orrs	r1, r4
3400fffc:	f000 8154 	beq.w	340102a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34010000:	e9d7 0100 	ldrd	r0, r1, [r7]
34010004:	4c85      	ldr	r4, [pc, #532]	@ (3401021c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34010006:	42a0      	cmp	r0, r4
34010008:	f171 0100 	sbcs.w	r1, r1, #0
3401000c:	f080 820c 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010010:	e9d7 0100 	ldrd	r0, r1, [r7]
34010014:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34010018:	4321      	orrs	r1, r4
3401001a:	f000 8140 	beq.w	3401029e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
3401001e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010022:	4c7f      	ldr	r4, [pc, #508]	@ (34010220 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34010024:	42a0      	cmp	r0, r4
34010026:	f171 0100 	sbcs.w	r1, r1, #0
3401002a:	f080 81fd 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401002e:	e9d7 0100 	ldrd	r0, r1, [r7]
34010032:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34010036:	4321      	orrs	r1, r4
34010038:	f000 812c 	beq.w	34010294 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
3401003c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010040:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34010044:	f171 0100 	sbcs.w	r1, r1, #0
34010048:	f080 81ee 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401004c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010050:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34010054:	4321      	orrs	r1, r4
34010056:	f000 8118 	beq.w	3401028a <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3401005a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401005e:	f248 0401 	movw	r4, #32769	@ 0x8001
34010062:	42a0      	cmp	r0, r4
34010064:	f171 0100 	sbcs.w	r1, r1, #0
34010068:	f080 81de 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401006c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010070:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34010074:	4321      	orrs	r1, r4
34010076:	f000 8103 	beq.w	34010280 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3401007a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401007e:	f244 0401 	movw	r4, #16385	@ 0x4001
34010082:	42a0      	cmp	r0, r4
34010084:	f171 0100 	sbcs.w	r1, r1, #0
34010088:	f080 81ce 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401008c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010090:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34010094:	4321      	orrs	r1, r4
34010096:	f000 80ee 	beq.w	34010276 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3401009a:	e9d7 0100 	ldrd	r0, r1, [r7]
3401009e:	f242 0401 	movw	r4, #8193	@ 0x2001
340100a2:	42a0      	cmp	r0, r4
340100a4:	f171 0100 	sbcs.w	r1, r1, #0
340100a8:	f080 81be 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340100b0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
340100b4:	4321      	orrs	r1, r4
340100b6:	f000 80d9 	beq.w	3401026c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
340100ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340100be:	f241 0401 	movw	r4, #4097	@ 0x1001
340100c2:	42a0      	cmp	r0, r4
340100c4:	f171 0100 	sbcs.w	r1, r1, #0
340100c8:	f080 81ae 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100cc:	e9d7 0100 	ldrd	r0, r1, [r7]
340100d0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
340100d4:	4321      	orrs	r1, r4
340100d6:	f000 80c4 	beq.w	34010262 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
340100da:	e9d7 0100 	ldrd	r0, r1, [r7]
340100de:	f640 0401 	movw	r4, #2049	@ 0x801
340100e2:	42a0      	cmp	r0, r4
340100e4:	f171 0100 	sbcs.w	r1, r1, #0
340100e8:	f080 819e 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340100ec:	e9d7 0100 	ldrd	r0, r1, [r7]
340100f0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
340100f4:	4321      	orrs	r1, r4
340100f6:	f000 80af 	beq.w	34010258 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340100fa:	e9d7 0100 	ldrd	r0, r1, [r7]
340100fe:	f240 4401 	movw	r4, #1025	@ 0x401
34010102:	42a0      	cmp	r0, r4
34010104:	f171 0100 	sbcs.w	r1, r1, #0
34010108:	f080 818e 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401010c:	e9d7 0100 	ldrd	r0, r1, [r7]
34010110:	2821      	cmp	r0, #33	@ 0x21
34010112:	f171 0100 	sbcs.w	r1, r1, #0
34010116:	d255      	bcs.n	340101c4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34010118:	e9d7 0100 	ldrd	r0, r1, [r7]
3401011c:	4301      	orrs	r1, r0
3401011e:	f000 8183 	beq.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010122:	e9d7 0100 	ldrd	r0, r1, [r7]
34010126:	1e42      	subs	r2, r0, #1
34010128:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
3401012c:	2a20      	cmp	r2, #32
3401012e:	f173 0100 	sbcs.w	r1, r3, #0
34010132:	f080 8179 	bcs.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34010136:	2a1f      	cmp	r2, #31
34010138:	f200 8176 	bhi.w	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3401013c:	a101      	add	r1, pc, #4	@ (adr r1, 34010144 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3401013e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34010142:	bf00      	nop
34010144:	340101d3 	.word	0x340101d3
34010148:	340101dd 	.word	0x340101dd
3401014c:	34010429 	.word	0x34010429
34010150:	3401022d 	.word	0x3401022d
34010154:	34010429 	.word	0x34010429
34010158:	34010429 	.word	0x34010429
3401015c:	34010429 	.word	0x34010429
34010160:	34010225 	.word	0x34010225
34010164:	34010429 	.word	0x34010429
34010168:	34010429 	.word	0x34010429
3401016c:	34010429 	.word	0x34010429
34010170:	34010429 	.word	0x34010429
34010174:	34010429 	.word	0x34010429
34010178:	34010429 	.word	0x34010429
3401017c:	34010429 	.word	0x34010429
34010180:	34010237 	.word	0x34010237
34010184:	34010429 	.word	0x34010429
34010188:	34010429 	.word	0x34010429
3401018c:	34010429 	.word	0x34010429
34010190:	34010429 	.word	0x34010429
34010194:	34010429 	.word	0x34010429
34010198:	34010429 	.word	0x34010429
3401019c:	34010429 	.word	0x34010429
340101a0:	34010429 	.word	0x34010429
340101a4:	34010429 	.word	0x34010429
340101a8:	34010429 	.word	0x34010429
340101ac:	34010429 	.word	0x34010429
340101b0:	34010429 	.word	0x34010429
340101b4:	34010429 	.word	0x34010429
340101b8:	34010429 	.word	0x34010429
340101bc:	34010429 	.word	0x34010429
340101c0:	34010243 	.word	0x34010243
340101c4:	e9d7 2300 	ldrd	r2, r3, [r7]
340101c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
340101cc:	430b      	orrs	r3, r1
340101ce:	d03e      	beq.n	3401024e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
340101d0:	e12a      	b.n	34010428 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
340101d2:	2070      	movs	r0, #112	@ 0x70
340101d4:	f000 fb90 	bl	340108f8 <RCCEx_GetADCCLKFreq>
340101d8:	60f8      	str	r0, [r7, #12]
      break;
340101da:	e126      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
340101dc:	2007      	movs	r0, #7
340101de:	f000 fc8d 	bl	34010afc <RCCEx_GetADFCLKFreq>
340101e2:	60f8      	str	r0, [r7, #12]
      break;
340101e4:	e121      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
340101e6:	bf00      	nop
340101e8:	80000001 	.word	0x80000001
340101ec:	40000001 	.word	0x40000001
340101f0:	20000001 	.word	0x20000001
340101f4:	10000001 	.word	0x10000001
340101f8:	08000001 	.word	0x08000001
340101fc:	04000001 	.word	0x04000001
34010200:	02000001 	.word	0x02000001
34010204:	01000001 	.word	0x01000001
34010208:	00800001 	.word	0x00800001
3401020c:	00400001 	.word	0x00400001
34010210:	00200001 	.word	0x00200001
34010214:	00100001 	.word	0x00100001
34010218:	00080001 	.word	0x00080001
3401021c:	00040001 	.word	0x00040001
34010220:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34010224:	f000 ff0c 	bl	34011040 <RCCEx_GetCSICLKFreq>
34010228:	60f8      	str	r0, [r7, #12]
      break;
3401022a:	e0fe      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401022c:	2007      	movs	r0, #7
3401022e:	f000 fd51 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34010232:	60f8      	str	r0, [r7, #12]
      break;
34010234:	e0f9      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34010236:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3401023a:	f000 ff4d 	bl	340110d8 <RCCEx_GetDCMIPPCLKFreq>
3401023e:	60f8      	str	r0, [r7, #12]
      break;
34010240:	e0f3      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34010242:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34010246:	f000 ffd1 	bl	340111ec <RCCEx_GetETH1CLKFreq>
3401024a:	60f8      	str	r0, [r7, #12]
      break;
3401024c:	e0ed      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3401024e:	2003      	movs	r0, #3
34010250:	f001 f84c 	bl	340112ec <RCCEx_GetETH1PTPCLKFreq>
34010254:	60f8      	str	r0, [r7, #12]
      break;
34010256:	e0e8      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34010258:	2003      	movs	r0, #3
3401025a:	f001 f8cb 	bl	340113f4 <RCCEx_GetFDCANCLKFreq>
3401025e:	60f8      	str	r0, [r7, #12]
      break;
34010260:	e0e3      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34010262:	2030      	movs	r0, #48	@ 0x30
34010264:	f001 f946 	bl	340114f4 <RCCEx_GetFMCCLKFreq>
34010268:	60f8      	str	r0, [r7, #12]
      break;
3401026a:	e0de      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3401026c:	4871      	ldr	r0, [pc, #452]	@ (34010434 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3401026e:	f001 f9f9 	bl	34011664 <RCCEx_GetI2CCLKFreq>
34010272:	60f8      	str	r0, [r7, #12]
      break;
34010274:	e0d9      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34010276:	4870      	ldr	r0, [pc, #448]	@ (34010438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34010278:	f001 f9f4 	bl	34011664 <RCCEx_GetI2CCLKFreq>
3401027c:	60f8      	str	r0, [r7, #12]
      break;
3401027e:	e0d4      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34010280:	486e      	ldr	r0, [pc, #440]	@ (3401043c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34010282:	f001 f9ef 	bl	34011664 <RCCEx_GetI2CCLKFreq>
34010286:	60f8      	str	r0, [r7, #12]
      break;
34010288:	e0cf      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3401028a:	486d      	ldr	r0, [pc, #436]	@ (34010440 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
3401028c:	f001 f9ea 	bl	34011664 <RCCEx_GetI2CCLKFreq>
34010290:	60f8      	str	r0, [r7, #12]
      break;
34010292:	e0ca      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34010294:	486b      	ldr	r0, [pc, #428]	@ (34010444 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34010296:	f001 fb8d 	bl	340119b4 <RCCEx_GetI3CCLKFreq>
3401029a:	60f8      	str	r0, [r7, #12]
      break;
3401029c:	e0c5      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401029e:	486a      	ldr	r0, [pc, #424]	@ (34010448 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
340102a0:	f001 fb88 	bl	340119b4 <RCCEx_GetI3CCLKFreq>
340102a4:	60f8      	str	r0, [r7, #12]
      break;
340102a6:	e0c0      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
340102a8:	4868      	ldr	r0, [pc, #416]	@ (3401044c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
340102aa:	f001 fcb7 	bl	34011c1c <RCCEx_GetLPTIMCLKFreq>
340102ae:	60f8      	str	r0, [r7, #12]
      break;
340102b0:	e0bb      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
340102b2:	4867      	ldr	r0, [pc, #412]	@ (34010450 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
340102b4:	f001 fcb2 	bl	34011c1c <RCCEx_GetLPTIMCLKFreq>
340102b8:	60f8      	str	r0, [r7, #12]
      break;
340102ba:	e0b6      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
340102bc:	4865      	ldr	r0, [pc, #404]	@ (34010454 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
340102be:	f001 fcad 	bl	34011c1c <RCCEx_GetLPTIMCLKFreq>
340102c2:	60f8      	str	r0, [r7, #12]
      break;
340102c4:	e0b1      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340102c6:	4864      	ldr	r0, [pc, #400]	@ (34010458 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
340102c8:	f001 fca8 	bl	34011c1c <RCCEx_GetLPTIMCLKFreq>
340102cc:	60f8      	str	r0, [r7, #12]
      break;
340102ce:	e0ac      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340102d0:	4862      	ldr	r0, [pc, #392]	@ (3401045c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
340102d2:	f001 fca3 	bl	34011c1c <RCCEx_GetLPTIMCLKFreq>
340102d6:	60f8      	str	r0, [r7, #12]
      break;
340102d8:	e0a7      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
340102da:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
340102de:	f001 fe47 	bl	34011f70 <RCCEx_GetLPUARTCLKFreq>
340102e2:	60f8      	str	r0, [r7, #12]
      break;
340102e4:	e0a1      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
340102e6:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
340102ea:	f001 ff43 	bl	34012174 <RCCEx_GetLTDCCLKFreq>
340102ee:	60f8      	str	r0, [r7, #12]
      break;
340102f0:	e09b      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
340102f2:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
340102f6:	f001 ffc7 	bl	34012288 <RCCEx_GetMDFCLKFreq>
340102fa:	60f8      	str	r0, [r7, #12]
      break;
340102fc:	e095      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
340102fe:	2030      	movs	r0, #48	@ 0x30
34010300:	f002 f8cc 	bl	3401249c <RCCEx_GetPSSICLKFreq>
34010304:	60f8      	str	r0, [r7, #12]
      break;
34010306:	e090      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34010308:	f002 f94a 	bl	340125a0 <RCCEx_GetRTCCLKFreq>
3401030c:	60f8      	str	r0, [r7, #12]
      break;
3401030e:	e08c      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34010310:	4853      	ldr	r0, [pc, #332]	@ (34010460 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34010312:	f002 f997 	bl	34012644 <RCCEx_GetSAICLKFreq>
34010316:	60f8      	str	r0, [r7, #12]
      break;
34010318:	e087      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3401031a:	4852      	ldr	r0, [pc, #328]	@ (34010464 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
3401031c:	f002 f992 	bl	34012644 <RCCEx_GetSAICLKFreq>
34010320:	60f8      	str	r0, [r7, #12]
      break;
34010322:	e082      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34010324:	4850      	ldr	r0, [pc, #320]	@ (34010468 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34010326:	f002 faf3 	bl	34012910 <RCCEx_GetSDMMCCLKFreq>
3401032a:	60f8      	str	r0, [r7, #12]
      break;
3401032c:	e07d      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401032e:	484f      	ldr	r0, [pc, #316]	@ (3401046c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34010330:	f002 faee 	bl	34012910 <RCCEx_GetSDMMCCLKFreq>
34010334:	60f8      	str	r0, [r7, #12]
      break;
34010336:	e078      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34010338:	2007      	movs	r0, #7
3401033a:	f002 fbd3 	bl	34012ae4 <RCCEx_GetSPDIFRXCLKFreq>
3401033e:	60f8      	str	r0, [r7, #12]
      break;
34010340:	e073      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34010342:	484b      	ldr	r0, [pc, #300]	@ (34010470 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34010344:	f002 fcb2 	bl	34012cac <RCCEx_GetSPICLKFreq>
34010348:	60f8      	str	r0, [r7, #12]
      break;
3401034a:	e06e      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3401034c:	4849      	ldr	r0, [pc, #292]	@ (34010474 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
3401034e:	f002 fcad 	bl	34012cac <RCCEx_GetSPICLKFreq>
34010352:	60f8      	str	r0, [r7, #12]
      break;
34010354:	e069      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34010356:	4848      	ldr	r0, [pc, #288]	@ (34010478 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34010358:	f002 fca8 	bl	34012cac <RCCEx_GetSPICLKFreq>
3401035c:	60f8      	str	r0, [r7, #12]
      break;
3401035e:	e064      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34010360:	4846      	ldr	r0, [pc, #280]	@ (3401047c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34010362:	f002 fca3 	bl	34012cac <RCCEx_GetSPICLKFreq>
34010366:	60f8      	str	r0, [r7, #12]
      break;
34010368:	e05f      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3401036a:	4845      	ldr	r0, [pc, #276]	@ (34010480 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
3401036c:	f002 fc9e 	bl	34012cac <RCCEx_GetSPICLKFreq>
34010370:	60f8      	str	r0, [r7, #12]
      break;
34010372:	e05a      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34010374:	4843      	ldr	r0, [pc, #268]	@ (34010484 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34010376:	f002 fc99 	bl	34012cac <RCCEx_GetSPICLKFreq>
3401037a:	60f8      	str	r0, [r7, #12]
      break;
3401037c:	e055      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3401037e:	4842      	ldr	r0, [pc, #264]	@ (34010488 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34010380:	f003 f990 	bl	340136a4 <RCCEx_GetUSARTCLKFreq>
34010384:	60f8      	str	r0, [r7, #12]
      break;
34010386:	e050      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34010388:	4840      	ldr	r0, [pc, #256]	@ (3401048c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
3401038a:	f003 f98b 	bl	340136a4 <RCCEx_GetUSARTCLKFreq>
3401038e:	60f8      	str	r0, [r7, #12]
      break;
34010390:	e04b      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34010392:	483f      	ldr	r0, [pc, #252]	@ (34010490 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34010394:	f003 f986 	bl	340136a4 <RCCEx_GetUSARTCLKFreq>
34010398:	60f8      	str	r0, [r7, #12]
      break;
3401039a:	e046      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3401039c:	483d      	ldr	r0, [pc, #244]	@ (34010494 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3401039e:	f002 ff57 	bl	34013250 <RCCEx_GetUARTCLKFreq>
340103a2:	60f8      	str	r0, [r7, #12]
      break;
340103a4:	e041      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
340103a6:	483c      	ldr	r0, [pc, #240]	@ (34010498 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
340103a8:	f002 ff52 	bl	34013250 <RCCEx_GetUARTCLKFreq>
340103ac:	60f8      	str	r0, [r7, #12]
      break;
340103ae:	e03c      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
340103b0:	483a      	ldr	r0, [pc, #232]	@ (3401049c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
340103b2:	f003 f977 	bl	340136a4 <RCCEx_GetUSARTCLKFreq>
340103b6:	60f8      	str	r0, [r7, #12]
      break;
340103b8:	e037      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
340103ba:	4839      	ldr	r0, [pc, #228]	@ (340104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
340103bc:	f002 ff48 	bl	34013250 <RCCEx_GetUARTCLKFreq>
340103c0:	60f8      	str	r0, [r7, #12]
      break;
340103c2:	e032      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
340103c4:	4837      	ldr	r0, [pc, #220]	@ (340104a4 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
340103c6:	f002 ff43 	bl	34013250 <RCCEx_GetUARTCLKFreq>
340103ca:	60f8      	str	r0, [r7, #12]
      break;
340103cc:	e02d      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
340103ce:	4836      	ldr	r0, [pc, #216]	@ (340104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
340103d0:	f002 ff3e 	bl	34013250 <RCCEx_GetUARTCLKFreq>
340103d4:	60f8      	str	r0, [r7, #12]
      break;
340103d6:	e028      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
340103d8:	4834      	ldr	r0, [pc, #208]	@ (340104ac <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
340103da:	f003 f963 	bl	340136a4 <RCCEx_GetUSARTCLKFreq>
340103de:	60f8      	str	r0, [r7, #12]
      break;
340103e0:	e023      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340103e2:	4833      	ldr	r0, [pc, #204]	@ (340104b0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
340103e4:	f003 fc3e 	bl	34013c64 <RCCEx_GetOTGPHYCKREFCLKFreq>
340103e8:	60f8      	str	r0, [r7, #12]
      break;
340103ea:	e01e      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340103ec:	4831      	ldr	r0, [pc, #196]	@ (340104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
340103ee:	f003 fb83 	bl	34013af8 <RCCEx_GetOTGPHYCLKFreq>
340103f2:	60f8      	str	r0, [r7, #12]
      break;
340103f4:	e019      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340103f6:	4830      	ldr	r0, [pc, #192]	@ (340104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
340103f8:	f003 fc34 	bl	34013c64 <RCCEx_GetOTGPHYCKREFCLKFreq>
340103fc:	60f8      	str	r0, [r7, #12]
      break;
340103fe:	e014      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34010400:	482e      	ldr	r0, [pc, #184]	@ (340104bc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34010402:	f003 fb79 	bl	34013af8 <RCCEx_GetOTGPHYCLKFreq>
34010406:	60f8      	str	r0, [r7, #12]
      break;
34010408:	e00f      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3401040a:	482d      	ldr	r0, [pc, #180]	@ (340104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3401040c:	f003 fc7a 	bl	34013d04 <RCCEx_GetXSPICLKFreq>
34010410:	60f8      	str	r0, [r7, #12]
      break;
34010412:	e00a      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34010414:	482b      	ldr	r0, [pc, #172]	@ (340104c4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34010416:	f003 fc75 	bl	34013d04 <RCCEx_GetXSPICLKFreq>
3401041a:	60f8      	str	r0, [r7, #12]
      break;
3401041c:	e005      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3401041e:	482a      	ldr	r0, [pc, #168]	@ (340104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34010420:	f003 fc70 	bl	34013d04 <RCCEx_GetXSPICLKFreq>
34010424:	60f8      	str	r0, [r7, #12]
      break;
34010426:	e000      	b.n	3401042a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34010428:	bf00      	nop
  }

  return frequency;
3401042a:	68fb      	ldr	r3, [r7, #12]
}
3401042c:	4618      	mov	r0, r3
3401042e:	3714      	adds	r7, #20
34010430:	46bd      	mov	sp, r7
34010432:	bd90      	pop	{r4, r7, pc}
34010434:	0700000c 	.word	0x0700000c
34010438:	0700040c 	.word	0x0700040c
3401043c:	0700080c 	.word	0x0700080c
34010440:	07000c0c 	.word	0x07000c0c
34010444:	0700100c 	.word	0x0700100c
34010448:	0700140c 	.word	0x0700140c
3401044c:	0700082c 	.word	0x0700082c
34010450:	07000c2c 	.word	0x07000c2c
34010454:	0700102c 	.word	0x0700102c
34010458:	0700142c 	.word	0x0700142c
3401045c:	0700182c 	.word	0x0700182c
34010460:	07001418 	.word	0x07001418
34010464:	07001818 	.word	0x07001818
34010468:	0300001c 	.word	0x0300001c
3401046c:	0300041c 	.word	0x0300041c
34010470:	07000420 	.word	0x07000420
34010474:	07000820 	.word	0x07000820
34010478:	07000c20 	.word	0x07000c20
3401047c:	07001020 	.word	0x07001020
34010480:	07001420 	.word	0x07001420
34010484:	07001820 	.word	0x07001820
34010488:	07000030 	.word	0x07000030
3401048c:	07000430 	.word	0x07000430
34010490:	07000830 	.word	0x07000830
34010494:	07000c30 	.word	0x07000c30
34010498:	07001030 	.word	0x07001030
3401049c:	07001430 	.word	0x07001430
340104a0:	07001830 	.word	0x07001830
340104a4:	07001c30 	.word	0x07001c30
340104a8:	07000034 	.word	0x07000034
340104ac:	07000434 	.word	0x07000434
340104b0:	01001014 	.word	0x01001014
340104b4:	03000c14 	.word	0x03000c14
340104b8:	01001814 	.word	0x01001814
340104bc:	03001414 	.word	0x03001414
340104c0:	03000014 	.word	0x03000014
340104c4:	03000414 	.word	0x03000414
340104c8:	03000814 	.word	0x03000814

340104cc <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
340104cc:	b5f0      	push	{r4, r5, r6, r7, lr}
340104ce:	b087      	sub	sp, #28
340104d0:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340104d2:	2300      	movs	r3, #0
340104d4:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
340104d6:	f7f8 f89b 	bl	34008610 <LL_RCC_PLL1_IsReady>
340104da:	4603      	mov	r3, r0
340104dc:	2b00      	cmp	r3, #0
340104de:	d02a      	beq.n	34010536 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
340104e0:	f7f8 f8fe 	bl	340086e0 <LL_RCC_PLL1P_IsEnabled>
340104e4:	4603      	mov	r3, r0
340104e6:	2b00      	cmp	r3, #0
340104e8:	d031      	beq.n	3401054e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340104ea:	f7f8 f883 	bl	340085f4 <LL_RCC_PLL1_GetSource>
340104ee:	4603      	mov	r3, r0
340104f0:	4618      	mov	r0, r3
340104f2:	f000 f957 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
340104f6:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340104f8:	68bb      	ldr	r3, [r7, #8]
340104fa:	2b00      	cmp	r3, #0
340104fc:	d027      	beq.n	3401054e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
340104fe:	f7f8 f8bf 	bl	34008680 <LL_RCC_PLL1_GetM>
34010502:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010504:	687b      	ldr	r3, [r7, #4]
34010506:	2b00      	cmp	r3, #0
34010508:	d021      	beq.n	3401054e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3401050a:	f7f8 f8a9 	bl	34008660 <LL_RCC_PLL1_GetN>
3401050e:	4605      	mov	r5, r0
34010510:	f7f8 f8fa 	bl	34008708 <LL_RCC_PLL1_GetFRACN>
34010514:	4606      	mov	r6, r0
34010516:	f7f8 f8c3 	bl	340086a0 <LL_RCC_PLL1_GetP1>
3401051a:	4604      	mov	r4, r0
3401051c:	f7f8 f8d0 	bl	340086c0 <LL_RCC_PLL1_GetP2>
34010520:	4603      	mov	r3, r0
34010522:	9301      	str	r3, [sp, #4]
34010524:	9400      	str	r4, [sp, #0]
34010526:	4633      	mov	r3, r6
34010528:	462a      	mov	r2, r5
3401052a:	6879      	ldr	r1, [r7, #4]
3401052c:	68b8      	ldr	r0, [r7, #8]
3401052e:	f000 f997 	bl	34010860 <RCCEx_CalcPLLFreq>
34010532:	60f8      	str	r0, [r7, #12]
34010534:	e00b      	b.n	3401054e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34010536:	f7f8 f87f 	bl	34008638 <LL_RCC_PLL1_IsEnabledBypass>
3401053a:	4603      	mov	r3, r0
3401053c:	2b00      	cmp	r3, #0
3401053e:	d006      	beq.n	3401054e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34010540:	f7f8 f858 	bl	340085f4 <LL_RCC_PLL1_GetSource>
34010544:	4603      	mov	r3, r0
34010546:	4618      	mov	r0, r3
34010548:	f000 f92c 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
3401054c:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3401054e:	68fb      	ldr	r3, [r7, #12]
}
34010550:	4618      	mov	r0, r3
34010552:	3714      	adds	r7, #20
34010554:	46bd      	mov	sp, r7
34010556:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010558 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34010558:	b5f0      	push	{r4, r5, r6, r7, lr}
3401055a:	b087      	sub	sp, #28
3401055c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3401055e:	2300      	movs	r3, #0
34010560:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34010562:	f7f8 f8ed 	bl	34008740 <LL_RCC_PLL2_IsReady>
34010566:	4603      	mov	r3, r0
34010568:	2b00      	cmp	r3, #0
3401056a:	d02a      	beq.n	340105c2 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3401056c:	f7f8 f950 	bl	34008810 <LL_RCC_PLL2P_IsEnabled>
34010570:	4603      	mov	r3, r0
34010572:	2b00      	cmp	r3, #0
34010574:	d031      	beq.n	340105da <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34010576:	f7f8 f8d5 	bl	34008724 <LL_RCC_PLL2_GetSource>
3401057a:	4603      	mov	r3, r0
3401057c:	4618      	mov	r0, r3
3401057e:	f000 f911 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
34010582:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010584:	68bb      	ldr	r3, [r7, #8]
34010586:	2b00      	cmp	r3, #0
34010588:	d027      	beq.n	340105da <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3401058a:	f7f8 f911 	bl	340087b0 <LL_RCC_PLL2_GetM>
3401058e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34010590:	687b      	ldr	r3, [r7, #4]
34010592:	2b00      	cmp	r3, #0
34010594:	d021      	beq.n	340105da <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34010596:	f7f8 f8fb 	bl	34008790 <LL_RCC_PLL2_GetN>
3401059a:	4605      	mov	r5, r0
3401059c:	f7f8 f94c 	bl	34008838 <LL_RCC_PLL2_GetFRACN>
340105a0:	4606      	mov	r6, r0
340105a2:	f7f8 f915 	bl	340087d0 <LL_RCC_PLL2_GetP1>
340105a6:	4604      	mov	r4, r0
340105a8:	f7f8 f922 	bl	340087f0 <LL_RCC_PLL2_GetP2>
340105ac:	4603      	mov	r3, r0
340105ae:	9301      	str	r3, [sp, #4]
340105b0:	9400      	str	r4, [sp, #0]
340105b2:	4633      	mov	r3, r6
340105b4:	462a      	mov	r2, r5
340105b6:	6879      	ldr	r1, [r7, #4]
340105b8:	68b8      	ldr	r0, [r7, #8]
340105ba:	f000 f951 	bl	34010860 <RCCEx_CalcPLLFreq>
340105be:	60f8      	str	r0, [r7, #12]
340105c0:	e00b      	b.n	340105da <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
340105c2:	f7f8 f8d1 	bl	34008768 <LL_RCC_PLL2_IsEnabledBypass>
340105c6:	4603      	mov	r3, r0
340105c8:	2b00      	cmp	r3, #0
340105ca:	d006      	beq.n	340105da <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340105cc:	f7f8 f8aa 	bl	34008724 <LL_RCC_PLL2_GetSource>
340105d0:	4603      	mov	r3, r0
340105d2:	4618      	mov	r0, r3
340105d4:	f000 f8e6 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
340105d8:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
340105da:	68fb      	ldr	r3, [r7, #12]
}
340105dc:	4618      	mov	r0, r3
340105de:	3714      	adds	r7, #20
340105e0:	46bd      	mov	sp, r7
340105e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

340105e4 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
340105e4:	b5f0      	push	{r4, r5, r6, r7, lr}
340105e6:	b087      	sub	sp, #28
340105e8:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340105ea:	2300      	movs	r3, #0
340105ec:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
340105ee:	f7f8 f93f 	bl	34008870 <LL_RCC_PLL3_IsReady>
340105f2:	4603      	mov	r3, r0
340105f4:	2b00      	cmp	r3, #0
340105f6:	d02a      	beq.n	3401064e <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
340105f8:	f7f8 f9a2 	bl	34008940 <LL_RCC_PLL3P_IsEnabled>
340105fc:	4603      	mov	r3, r0
340105fe:	2b00      	cmp	r3, #0
34010600:	d031      	beq.n	34010666 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010602:	f7f8 f927 	bl	34008854 <LL_RCC_PLL3_GetSource>
34010606:	4603      	mov	r3, r0
34010608:	4618      	mov	r0, r3
3401060a:	f000 f8cb 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
3401060e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34010610:	68bb      	ldr	r3, [r7, #8]
34010612:	2b00      	cmp	r3, #0
34010614:	d027      	beq.n	34010666 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
34010616:	f7f8 f963 	bl	340088e0 <LL_RCC_PLL3_GetM>
3401061a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3401061c:	687b      	ldr	r3, [r7, #4]
3401061e:	2b00      	cmp	r3, #0
34010620:	d021      	beq.n	34010666 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34010622:	f7f8 f94d 	bl	340088c0 <LL_RCC_PLL3_GetN>
34010626:	4605      	mov	r5, r0
34010628:	f7f8 f99e 	bl	34008968 <LL_RCC_PLL3_GetFRACN>
3401062c:	4606      	mov	r6, r0
3401062e:	f7f8 f967 	bl	34008900 <LL_RCC_PLL3_GetP1>
34010632:	4604      	mov	r4, r0
34010634:	f7f8 f974 	bl	34008920 <LL_RCC_PLL3_GetP2>
34010638:	4603      	mov	r3, r0
3401063a:	9301      	str	r3, [sp, #4]
3401063c:	9400      	str	r4, [sp, #0]
3401063e:	4633      	mov	r3, r6
34010640:	462a      	mov	r2, r5
34010642:	6879      	ldr	r1, [r7, #4]
34010644:	68b8      	ldr	r0, [r7, #8]
34010646:	f000 f90b 	bl	34010860 <RCCEx_CalcPLLFreq>
3401064a:	60f8      	str	r0, [r7, #12]
3401064c:	e00b      	b.n	34010666 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3401064e:	f7f8 f923 	bl	34008898 <LL_RCC_PLL3_IsEnabledBypass>
34010652:	4603      	mov	r3, r0
34010654:	2b00      	cmp	r3, #0
34010656:	d006      	beq.n	34010666 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34010658:	f7f8 f8fc 	bl	34008854 <LL_RCC_PLL3_GetSource>
3401065c:	4603      	mov	r3, r0
3401065e:	4618      	mov	r0, r3
34010660:	f000 f8a0 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
34010664:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34010666:	68fb      	ldr	r3, [r7, #12]
}
34010668:	4618      	mov	r0, r3
3401066a:	3714      	adds	r7, #20
3401066c:	46bd      	mov	sp, r7
3401066e:	bdf0      	pop	{r4, r5, r6, r7, pc}

34010670 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34010670:	b5f0      	push	{r4, r5, r6, r7, lr}
34010672:	b087      	sub	sp, #28
34010674:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34010676:	2300      	movs	r3, #0
34010678:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3401067a:	f7f8 f991 	bl	340089a0 <LL_RCC_PLL4_IsReady>
3401067e:	4603      	mov	r3, r0
34010680:	2b00      	cmp	r3, #0
34010682:	d02a      	beq.n	340106da <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34010684:	f7f8 f9f4 	bl	34008a70 <LL_RCC_PLL4P_IsEnabled>
34010688:	4603      	mov	r3, r0
3401068a:	2b00      	cmp	r3, #0
3401068c:	d031      	beq.n	340106f2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3401068e:	f7f8 f979 	bl	34008984 <LL_RCC_PLL4_GetSource>
34010692:	4603      	mov	r3, r0
34010694:	4618      	mov	r0, r3
34010696:	f000 f885 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
3401069a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401069c:	68bb      	ldr	r3, [r7, #8]
3401069e:	2b00      	cmp	r3, #0
340106a0:	d027      	beq.n	340106f2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
340106a2:	f7f8 f9b5 	bl	34008a10 <LL_RCC_PLL4_GetM>
340106a6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
340106a8:	687b      	ldr	r3, [r7, #4]
340106aa:	2b00      	cmp	r3, #0
340106ac:	d021      	beq.n	340106f2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340106ae:	f7f8 f99f 	bl	340089f0 <LL_RCC_PLL4_GetN>
340106b2:	4605      	mov	r5, r0
340106b4:	f7f8 f9f0 	bl	34008a98 <LL_RCC_PLL4_GetFRACN>
340106b8:	4606      	mov	r6, r0
340106ba:	f7f8 f9b9 	bl	34008a30 <LL_RCC_PLL4_GetP1>
340106be:	4604      	mov	r4, r0
340106c0:	f7f8 f9c6 	bl	34008a50 <LL_RCC_PLL4_GetP2>
340106c4:	4603      	mov	r3, r0
340106c6:	9301      	str	r3, [sp, #4]
340106c8:	9400      	str	r4, [sp, #0]
340106ca:	4633      	mov	r3, r6
340106cc:	462a      	mov	r2, r5
340106ce:	6879      	ldr	r1, [r7, #4]
340106d0:	68b8      	ldr	r0, [r7, #8]
340106d2:	f000 f8c5 	bl	34010860 <RCCEx_CalcPLLFreq>
340106d6:	60f8      	str	r0, [r7, #12]
340106d8:	e00b      	b.n	340106f2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
340106da:	f7f8 f975 	bl	340089c8 <LL_RCC_PLL4_IsEnabledBypass>
340106de:	4603      	mov	r3, r0
340106e0:	2b00      	cmp	r3, #0
340106e2:	d006      	beq.n	340106f2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340106e4:	f7f8 f94e 	bl	34008984 <LL_RCC_PLL4_GetSource>
340106e8:	4603      	mov	r3, r0
340106ea:	4618      	mov	r0, r3
340106ec:	f000 f85a 	bl	340107a4 <RCCEx_GetPLLSourceFreq>
340106f0:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
340106f2:	68fb      	ldr	r3, [r7, #12]
}
340106f4:	4618      	mov	r0, r3
340106f6:	3714      	adds	r7, #20
340106f8:	46bd      	mov	sp, r7
340106fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

340106fc <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
340106fc:	b580      	push	{r7, lr}
340106fe:	b082      	sub	sp, #8
34010700:	af00      	add	r7, sp, #0
34010702:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34010704:	f7f7 fb60 	bl	34007dc8 <LL_RCC_GetAHBPrescaler>
34010708:	4603      	mov	r3, r0
3401070a:	0d1b      	lsrs	r3, r3, #20
3401070c:	f003 0307 	and.w	r3, r3, #7
34010710:	687a      	ldr	r2, [r7, #4]
34010712:	fa22 f303 	lsr.w	r3, r2, r3
}
34010716:	4618      	mov	r0, r3
34010718:	3708      	adds	r7, #8
3401071a:	46bd      	mov	sp, r7
3401071c:	bd80      	pop	{r7, pc}

3401071e <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
3401071e:	b580      	push	{r7, lr}
34010720:	b082      	sub	sp, #8
34010722:	af00      	add	r7, sp, #0
34010724:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34010726:	f7f7 fb5d 	bl	34007de4 <LL_RCC_GetAPB1Prescaler>
3401072a:	4603      	mov	r3, r0
3401072c:	f003 0307 	and.w	r3, r3, #7
34010730:	687a      	ldr	r2, [r7, #4]
34010732:	fa22 f303 	lsr.w	r3, r2, r3
}
34010736:	4618      	mov	r0, r3
34010738:	3708      	adds	r7, #8
3401073a:	46bd      	mov	sp, r7
3401073c:	bd80      	pop	{r7, pc}

3401073e <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3401073e:	b580      	push	{r7, lr}
34010740:	b082      	sub	sp, #8
34010742:	af00      	add	r7, sp, #0
34010744:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34010746:	f7f7 fb5b 	bl	34007e00 <LL_RCC_GetAPB2Prescaler>
3401074a:	4603      	mov	r3, r0
3401074c:	091b      	lsrs	r3, r3, #4
3401074e:	f003 0307 	and.w	r3, r3, #7
34010752:	687a      	ldr	r2, [r7, #4]
34010754:	fa22 f303 	lsr.w	r3, r2, r3
}
34010758:	4618      	mov	r0, r3
3401075a:	3708      	adds	r7, #8
3401075c:	46bd      	mov	sp, r7
3401075e:	bd80      	pop	{r7, pc}

34010760 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34010760:	b580      	push	{r7, lr}
34010762:	b082      	sub	sp, #8
34010764:	af00      	add	r7, sp, #0
34010766:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34010768:	f7f7 fb58 	bl	34007e1c <LL_RCC_GetAPB4Prescaler>
3401076c:	4603      	mov	r3, r0
3401076e:	0b1b      	lsrs	r3, r3, #12
34010770:	f003 0307 	and.w	r3, r3, #7
34010774:	687a      	ldr	r2, [r7, #4]
34010776:	fa22 f303 	lsr.w	r3, r2, r3
}
3401077a:	4618      	mov	r0, r3
3401077c:	3708      	adds	r7, #8
3401077e:	46bd      	mov	sp, r7
34010780:	bd80      	pop	{r7, pc}

34010782 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34010782:	b580      	push	{r7, lr}
34010784:	b082      	sub	sp, #8
34010786:	af00      	add	r7, sp, #0
34010788:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3401078a:	f7f7 fb55 	bl	34007e38 <LL_RCC_GetAPB5Prescaler>
3401078e:	4603      	mov	r3, r0
34010790:	0c1b      	lsrs	r3, r3, #16
34010792:	f003 0307 	and.w	r3, r3, #7
34010796:	687a      	ldr	r2, [r7, #4]
34010798:	fa22 f303 	lsr.w	r3, r2, r3
}
3401079c:	4618      	mov	r0, r3
3401079e:	3708      	adds	r7, #8
340107a0:	46bd      	mov	sp, r7
340107a2:	bd80      	pop	{r7, pc}

340107a4 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
340107a4:	b580      	push	{r7, lr}
340107a6:	b084      	sub	sp, #16
340107a8:	af00      	add	r7, sp, #0
340107aa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
340107ac:	2300      	movs	r3, #0
340107ae:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
340107b0:	687b      	ldr	r3, [r7, #4]
340107b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340107b6:	d039      	beq.n	3401082c <RCCEx_GetPLLSourceFreq+0x88>
340107b8:	687b      	ldr	r3, [r7, #4]
340107ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340107be:	d838      	bhi.n	34010832 <RCCEx_GetPLLSourceFreq+0x8e>
340107c0:	687b      	ldr	r3, [r7, #4]
340107c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340107c6:	d029      	beq.n	3401081c <RCCEx_GetPLLSourceFreq+0x78>
340107c8:	687b      	ldr	r3, [r7, #4]
340107ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340107ce:	d830      	bhi.n	34010832 <RCCEx_GetPLLSourceFreq+0x8e>
340107d0:	687b      	ldr	r3, [r7, #4]
340107d2:	2b00      	cmp	r3, #0
340107d4:	d004      	beq.n	340107e0 <RCCEx_GetPLLSourceFreq+0x3c>
340107d6:	687b      	ldr	r3, [r7, #4]
340107d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340107dc:	d00e      	beq.n	340107fc <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
340107de:	e028      	b.n	34010832 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
340107e0:	f7f7 fa92 	bl	34007d08 <LL_RCC_HSI_IsReady>
340107e4:	4603      	mov	r3, r0
340107e6:	2b00      	cmp	r3, #0
340107e8:	d025      	beq.n	34010836 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340107ea:	f7f7 fa9f 	bl	34007d2c <LL_RCC_HSI_GetDivider>
340107ee:	4603      	mov	r3, r0
340107f0:	09db      	lsrs	r3, r3, #7
340107f2:	4a16      	ldr	r2, [pc, #88]	@ (3401084c <RCCEx_GetPLLSourceFreq+0xa8>)
340107f4:	fa22 f303 	lsr.w	r3, r2, r3
340107f8:	60fb      	str	r3, [r7, #12]
      break;
340107fa:	e01c      	b.n	34010836 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
340107fc:	f7f7 faa4 	bl	34007d48 <LL_RCC_MSI_IsReady>
34010800:	4603      	mov	r3, r0
34010802:	2b00      	cmp	r3, #0
34010804:	d019      	beq.n	3401083a <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34010806:	f7f7 fab1 	bl	34007d6c <LL_RCC_MSI_GetFrequency>
3401080a:	4603      	mov	r3, r0
3401080c:	2b00      	cmp	r3, #0
3401080e:	d102      	bne.n	34010816 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34010810:	4b0f      	ldr	r3, [pc, #60]	@ (34010850 <RCCEx_GetPLLSourceFreq+0xac>)
34010812:	60fb      	str	r3, [r7, #12]
      break;
34010814:	e011      	b.n	3401083a <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
34010816:	4b0f      	ldr	r3, [pc, #60]	@ (34010854 <RCCEx_GetPLLSourceFreq+0xb0>)
34010818:	60fb      	str	r3, [r7, #12]
      break;
3401081a:	e00e      	b.n	3401083a <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3401081c:	f7f7 fa62 	bl	34007ce4 <LL_RCC_HSE_IsReady>
34010820:	4603      	mov	r3, r0
34010822:	2b00      	cmp	r3, #0
34010824:	d00b      	beq.n	3401083e <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34010826:	4b0c      	ldr	r3, [pc, #48]	@ (34010858 <RCCEx_GetPLLSourceFreq+0xb4>)
34010828:	60fb      	str	r3, [r7, #12]
      break;
3401082a:	e008      	b.n	3401083e <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3401082c:	4b0b      	ldr	r3, [pc, #44]	@ (3401085c <RCCEx_GetPLLSourceFreq+0xb8>)
3401082e:	60fb      	str	r3, [r7, #12]
      break;
34010830:	e006      	b.n	34010840 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010832:	bf00      	nop
34010834:	e004      	b.n	34010840 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34010836:	bf00      	nop
34010838:	e002      	b.n	34010840 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3401083a:	bf00      	nop
3401083c:	e000      	b.n	34010840 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3401083e:	bf00      	nop
  }

  return pllinputfreq;
34010840:	68fb      	ldr	r3, [r7, #12]
}
34010842:	4618      	mov	r0, r3
34010844:	3710      	adds	r7, #16
34010846:	46bd      	mov	sp, r7
34010848:	bd80      	pop	{r7, pc}
3401084a:	bf00      	nop
3401084c:	03d09000 	.word	0x03d09000
34010850:	003d0900 	.word	0x003d0900
34010854:	00f42400 	.word	0x00f42400
34010858:	02dc6c00 	.word	0x02dc6c00
3401085c:	00bb8000 	.word	0x00bb8000

34010860 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34010860:	b480      	push	{r7}
34010862:	b087      	sub	sp, #28
34010864:	af00      	add	r7, sp, #0
34010866:	60f8      	str	r0, [r7, #12]
34010868:	60b9      	str	r1, [r7, #8]
3401086a:	607a      	str	r2, [r7, #4]
3401086c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3401086e:	68fb      	ldr	r3, [r7, #12]
34010870:	ee07 3a90 	vmov	s15, r3
34010874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34010878:	687b      	ldr	r3, [r7, #4]
3401087a:	ee07 3a90 	vmov	s15, r3
3401087e:	eef8 6a67 	vcvt.f32.u32	s13, s15
34010882:	683b      	ldr	r3, [r7, #0]
34010884:	ee07 3a90 	vmov	s15, r3
34010888:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3401088c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 340108f4 <RCCEx_CalcPLLFreq+0x94>
34010890:	eec6 7a25 	vdiv.f32	s15, s12, s11
34010894:	ee76 7aa7 	vadd.f32	s15, s13, s15
34010898:	ee67 6a27 	vmul.f32	s13, s14, s15
3401089c:	68bb      	ldr	r3, [r7, #8]
3401089e:	ee07 3a90 	vmov	s15, r3
340108a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340108a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
340108aa:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
340108ae:	6a3b      	ldr	r3, [r7, #32]
340108b0:	ee07 3a90 	vmov	s15, r3
340108b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340108b8:	edd7 6a05 	vldr	s13, [r7, #20]
340108bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
340108c0:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
340108c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340108c6:	ee07 3a90 	vmov	s15, r3
340108ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340108ce:	edd7 6a05 	vldr	s13, [r7, #20]
340108d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
340108d6:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
340108da:	edd7 7a05 	vldr	s15, [r7, #20]
340108de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340108e2:	ee17 3a90 	vmov	r3, s15
}
340108e6:	4618      	mov	r0, r3
340108e8:	371c      	adds	r7, #28
340108ea:	46bd      	mov	sp, r7
340108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
340108f0:	4770      	bx	lr
340108f2:	bf00      	nop
340108f4:	4b800000 	.word	0x4b800000

340108f8 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
340108f8:	b590      	push	{r4, r7, lr}
340108fa:	b085      	sub	sp, #20
340108fc:	af00      	add	r7, sp, #0
340108fe:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34010900:	2300      	movs	r3, #0
34010902:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34010904:	6878      	ldr	r0, [r7, #4]
34010906:	f7f7 fcb5 	bl	34008274 <LL_RCC_GetADCClockSource>
3401090a:	4603      	mov	r3, r0
3401090c:	2b70      	cmp	r3, #112	@ 0x70
3401090e:	f000 80d1 	beq.w	34010ab4 <RCCEx_GetADCCLKFreq+0x1bc>
34010912:	2b70      	cmp	r3, #112	@ 0x70
34010914:	f200 80d8 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
34010918:	2b60      	cmp	r3, #96	@ 0x60
3401091a:	f000 80c8 	beq.w	34010aae <RCCEx_GetADCCLKFreq+0x1b6>
3401091e:	2b60      	cmp	r3, #96	@ 0x60
34010920:	f200 80d2 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
34010924:	2b50      	cmp	r3, #80	@ 0x50
34010926:	f000 80ac 	beq.w	34010a82 <RCCEx_GetADCCLKFreq+0x18a>
3401092a:	2b50      	cmp	r3, #80	@ 0x50
3401092c:	f200 80cc 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
34010930:	2b40      	cmp	r3, #64	@ 0x40
34010932:	f000 80b4 	beq.w	34010a9e <RCCEx_GetADCCLKFreq+0x1a6>
34010936:	2b40      	cmp	r3, #64	@ 0x40
34010938:	f200 80c6 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
3401093c:	2b30      	cmp	r3, #48	@ 0x30
3401093e:	d05d      	beq.n	340109fc <RCCEx_GetADCCLKFreq+0x104>
34010940:	2b30      	cmp	r3, #48	@ 0x30
34010942:	f200 80c1 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
34010946:	2b20      	cmp	r3, #32
34010948:	d014      	beq.n	34010974 <RCCEx_GetADCCLKFreq+0x7c>
3401094a:	2b20      	cmp	r3, #32
3401094c:	f200 80bc 	bhi.w	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
34010950:	2b00      	cmp	r3, #0
34010952:	d002      	beq.n	3401095a <RCCEx_GetADCCLKFreq+0x62>
34010954:	2b10      	cmp	r3, #16
34010956:	d008      	beq.n	3401096a <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34010958:	e0b6      	b.n	34010ac8 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401095a:	f7f6 fdd7 	bl	3400750c <HAL_RCC_GetSysClockFreq>
3401095e:	4603      	mov	r3, r0
34010960:	4618      	mov	r0, r3
34010962:	f7ff fecb 	bl	340106fc <RCCEx_GetHCLKFreq>
34010966:	60f8      	str	r0, [r7, #12]
      break;
34010968:	e0b7      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401096a:	2007      	movs	r0, #7
3401096c:	f000 f9b2 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34010970:	60f8      	str	r0, [r7, #12]
      break;
34010972:	e0b2      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34010974:	f7f8 f96c 	bl	34008c50 <LL_RCC_IC7_IsEnabled>
34010978:	4603      	mov	r3, r0
3401097a:	2b00      	cmp	r3, #0
3401097c:	f000 80a6 	beq.w	34010acc <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34010980:	f7f8 f988 	bl	34008c94 <LL_RCC_IC7_GetDivider>
34010984:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34010986:	f7f8 f977 	bl	34008c78 <LL_RCC_IC7_GetSource>
3401098a:	4603      	mov	r3, r0
3401098c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010990:	d029      	beq.n	340109e6 <RCCEx_GetADCCLKFreq+0xee>
34010992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010996:	d82f      	bhi.n	340109f8 <RCCEx_GetADCCLKFreq+0x100>
34010998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401099c:	d01a      	beq.n	340109d4 <RCCEx_GetADCCLKFreq+0xdc>
3401099e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340109a2:	d829      	bhi.n	340109f8 <RCCEx_GetADCCLKFreq+0x100>
340109a4:	2b00      	cmp	r3, #0
340109a6:	d003      	beq.n	340109b0 <RCCEx_GetADCCLKFreq+0xb8>
340109a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340109ac:	d009      	beq.n	340109c2 <RCCEx_GetADCCLKFreq+0xca>
            break;
340109ae:	e023      	b.n	340109f8 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340109b0:	f7ff fd8c 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340109b4:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340109b6:	68fa      	ldr	r2, [r7, #12]
340109b8:	68bb      	ldr	r3, [r7, #8]
340109ba:	fbb2 f3f3 	udiv	r3, r2, r3
340109be:	60fb      	str	r3, [r7, #12]
            break;
340109c0:	e01b      	b.n	340109fa <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340109c2:	f7ff fdc9 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340109c6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340109c8:	68fa      	ldr	r2, [r7, #12]
340109ca:	68bb      	ldr	r3, [r7, #8]
340109cc:	fbb2 f3f3 	udiv	r3, r2, r3
340109d0:	60fb      	str	r3, [r7, #12]
            break;
340109d2:	e012      	b.n	340109fa <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340109d4:	f7ff fe06 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340109d8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340109da:	68fa      	ldr	r2, [r7, #12]
340109dc:	68bb      	ldr	r3, [r7, #8]
340109de:	fbb2 f3f3 	udiv	r3, r2, r3
340109e2:	60fb      	str	r3, [r7, #12]
            break;
340109e4:	e009      	b.n	340109fa <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340109e6:	f7ff fe43 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340109ea:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340109ec:	68fa      	ldr	r2, [r7, #12]
340109ee:	68bb      	ldr	r3, [r7, #8]
340109f0:	fbb2 f3f3 	udiv	r3, r2, r3
340109f4:	60fb      	str	r3, [r7, #12]
            break;
340109f6:	e000      	b.n	340109fa <RCCEx_GetADCCLKFreq+0x102>
            break;
340109f8:	bf00      	nop
      break;
340109fa:	e067      	b.n	34010acc <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340109fc:	f7f8 f968 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
34010a00:	4603      	mov	r3, r0
34010a02:	2b00      	cmp	r3, #0
34010a04:	d064      	beq.n	34010ad0 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34010a06:	f7f8 f985 	bl	34008d14 <LL_RCC_IC8_GetDivider>
34010a0a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34010a0c:	f7f8 f974 	bl	34008cf8 <LL_RCC_IC8_GetSource>
34010a10:	4603      	mov	r3, r0
34010a12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010a16:	d029      	beq.n	34010a6c <RCCEx_GetADCCLKFreq+0x174>
34010a18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010a1c:	d82f      	bhi.n	34010a7e <RCCEx_GetADCCLKFreq+0x186>
34010a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010a22:	d01a      	beq.n	34010a5a <RCCEx_GetADCCLKFreq+0x162>
34010a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010a28:	d829      	bhi.n	34010a7e <RCCEx_GetADCCLKFreq+0x186>
34010a2a:	2b00      	cmp	r3, #0
34010a2c:	d003      	beq.n	34010a36 <RCCEx_GetADCCLKFreq+0x13e>
34010a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010a32:	d009      	beq.n	34010a48 <RCCEx_GetADCCLKFreq+0x150>
            break;
34010a34:	e023      	b.n	34010a7e <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010a36:	f7ff fd49 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010a3a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010a3c:	68fa      	ldr	r2, [r7, #12]
34010a3e:	68bb      	ldr	r3, [r7, #8]
34010a40:	fbb2 f3f3 	udiv	r3, r2, r3
34010a44:	60fb      	str	r3, [r7, #12]
            break;
34010a46:	e01b      	b.n	34010a80 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010a48:	f7ff fd86 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010a4c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010a4e:	68fa      	ldr	r2, [r7, #12]
34010a50:	68bb      	ldr	r3, [r7, #8]
34010a52:	fbb2 f3f3 	udiv	r3, r2, r3
34010a56:	60fb      	str	r3, [r7, #12]
            break;
34010a58:	e012      	b.n	34010a80 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010a5a:	f7ff fdc3 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010a5e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010a60:	68fa      	ldr	r2, [r7, #12]
34010a62:	68bb      	ldr	r3, [r7, #8]
34010a64:	fbb2 f3f3 	udiv	r3, r2, r3
34010a68:	60fb      	str	r3, [r7, #12]
            break;
34010a6a:	e009      	b.n	34010a80 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010a6c:	f7ff fe00 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010a70:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34010a72:	68fa      	ldr	r2, [r7, #12]
34010a74:	68bb      	ldr	r3, [r7, #8]
34010a76:	fbb2 f3f3 	udiv	r3, r2, r3
34010a7a:	60fb      	str	r3, [r7, #12]
            break;
34010a7c:	e000      	b.n	34010a80 <RCCEx_GetADCCLKFreq+0x188>
            break;
34010a7e:	bf00      	nop
      break;
34010a80:	e026      	b.n	34010ad0 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34010a82:	f7f7 f941 	bl	34007d08 <LL_RCC_HSI_IsReady>
34010a86:	4603      	mov	r3, r0
34010a88:	2b00      	cmp	r3, #0
34010a8a:	d023      	beq.n	34010ad4 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010a8c:	f7f7 f94e 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34010a90:	4603      	mov	r3, r0
34010a92:	09db      	lsrs	r3, r3, #7
34010a94:	4a16      	ldr	r2, [pc, #88]	@ (34010af0 <RCCEx_GetADCCLKFreq+0x1f8>)
34010a96:	fa22 f303 	lsr.w	r3, r2, r3
34010a9a:	60fb      	str	r3, [r7, #12]
      break;
34010a9c:	e01a      	b.n	34010ad4 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34010a9e:	f7f7 f953 	bl	34007d48 <LL_RCC_MSI_IsReady>
34010aa2:	4603      	mov	r3, r0
34010aa4:	2b00      	cmp	r3, #0
34010aa6:	d017      	beq.n	34010ad8 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34010aa8:	4b12      	ldr	r3, [pc, #72]	@ (34010af4 <RCCEx_GetADCCLKFreq+0x1fc>)
34010aaa:	60fb      	str	r3, [r7, #12]
      break;
34010aac:	e014      	b.n	34010ad8 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34010aae:	4b12      	ldr	r3, [pc, #72]	@ (34010af8 <RCCEx_GetADCCLKFreq+0x200>)
34010ab0:	60fb      	str	r3, [r7, #12]
      break;
34010ab2:	e012      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34010ab4:	f7f6 fd2a 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34010ab8:	4604      	mov	r4, r0
34010aba:	f7f7 fd8d 	bl	340085d8 <LL_RCC_GetTIMPrescaler>
34010abe:	4603      	mov	r3, r0
34010ac0:	fa24 f303 	lsr.w	r3, r4, r3
34010ac4:	60fb      	str	r3, [r7, #12]
      break;
34010ac6:	e008      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010ac8:	bf00      	nop
34010aca:	e006      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010acc:	bf00      	nop
34010ace:	e004      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010ad0:	bf00      	nop
34010ad2:	e002      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010ad4:	bf00      	nop
34010ad6:	e000      	b.n	34010ada <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34010ad8:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34010ada:	f7f7 f9e5 	bl	34007ea8 <LL_RCC_GetADCPrescaler>
34010ade:	4603      	mov	r3, r0
34010ae0:	3301      	adds	r3, #1
34010ae2:	68fa      	ldr	r2, [r7, #12]
34010ae4:	fbb2 f3f3 	udiv	r3, r2, r3
}
34010ae8:	4618      	mov	r0, r3
34010aea:	3714      	adds	r7, #20
34010aec:	46bd      	mov	sp, r7
34010aee:	bd90      	pop	{r4, r7, pc}
34010af0:	03d09000 	.word	0x03d09000
34010af4:	003d0900 	.word	0x003d0900
34010af8:	00bb8000 	.word	0x00bb8000

34010afc <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34010afc:	b590      	push	{r4, r7, lr}
34010afe:	b085      	sub	sp, #20
34010b00:	af00      	add	r7, sp, #0
34010b02:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34010b04:	2300      	movs	r3, #0
34010b06:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34010b08:	6878      	ldr	r0, [r7, #4]
34010b0a:	f7f7 fbc5 	bl	34008298 <LL_RCC_GetADFClockSource>
34010b0e:	4603      	mov	r3, r0
34010b10:	2b07      	cmp	r3, #7
34010b12:	f200 80ca 	bhi.w	34010caa <RCCEx_GetADFCLKFreq+0x1ae>
34010b16:	a201      	add	r2, pc, #4	@ (adr r2, 34010b1c <RCCEx_GetADFCLKFreq+0x20>)
34010b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34010b1c:	34010b3d 	.word	0x34010b3d
34010b20:	34010b4d 	.word	0x34010b4d
34010b24:	34010b57 	.word	0x34010b57
34010b28:	34010bdf 	.word	0x34010bdf
34010b2c:	34010c81 	.word	0x34010c81
34010b30:	34010c65 	.word	0x34010c65
34010b34:	34010c91 	.word	0x34010c91
34010b38:	34010c97 	.word	0x34010c97
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34010b3c:	f7f6 fce6 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34010b40:	4603      	mov	r3, r0
34010b42:	4618      	mov	r0, r3
34010b44:	f7ff fdda 	bl	340106fc <RCCEx_GetHCLKFreq>
34010b48:	60f8      	str	r0, [r7, #12]
      break;
34010b4a:	e0b7      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34010b4c:	2007      	movs	r0, #7
34010b4e:	f000 f8c1 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34010b52:	60f8      	str	r0, [r7, #12]
      break;
34010b54:	e0b2      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34010b56:	f7f8 f87b 	bl	34008c50 <LL_RCC_IC7_IsEnabled>
34010b5a:	4603      	mov	r3, r0
34010b5c:	2b00      	cmp	r3, #0
34010b5e:	f000 80a6 	beq.w	34010cae <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34010b62:	f7f8 f897 	bl	34008c94 <LL_RCC_IC7_GetDivider>
34010b66:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34010b68:	f7f8 f886 	bl	34008c78 <LL_RCC_IC7_GetSource>
34010b6c:	4603      	mov	r3, r0
34010b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010b72:	d029      	beq.n	34010bc8 <RCCEx_GetADFCLKFreq+0xcc>
34010b74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010b78:	d82f      	bhi.n	34010bda <RCCEx_GetADFCLKFreq+0xde>
34010b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010b7e:	d01a      	beq.n	34010bb6 <RCCEx_GetADFCLKFreq+0xba>
34010b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010b84:	d829      	bhi.n	34010bda <RCCEx_GetADFCLKFreq+0xde>
34010b86:	2b00      	cmp	r3, #0
34010b88:	d003      	beq.n	34010b92 <RCCEx_GetADFCLKFreq+0x96>
34010b8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010b8e:	d009      	beq.n	34010ba4 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34010b90:	e023      	b.n	34010bda <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010b92:	f7ff fc9b 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010b96:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010b98:	68fa      	ldr	r2, [r7, #12]
34010b9a:	68bb      	ldr	r3, [r7, #8]
34010b9c:	fbb2 f3f3 	udiv	r3, r2, r3
34010ba0:	60fb      	str	r3, [r7, #12]
            break;
34010ba2:	e01b      	b.n	34010bdc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010ba4:	f7ff fcd8 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010ba8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010baa:	68fa      	ldr	r2, [r7, #12]
34010bac:	68bb      	ldr	r3, [r7, #8]
34010bae:	fbb2 f3f3 	udiv	r3, r2, r3
34010bb2:	60fb      	str	r3, [r7, #12]
            break;
34010bb4:	e012      	b.n	34010bdc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010bb6:	f7ff fd15 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010bba:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010bbc:	68fa      	ldr	r2, [r7, #12]
34010bbe:	68bb      	ldr	r3, [r7, #8]
34010bc0:	fbb2 f3f3 	udiv	r3, r2, r3
34010bc4:	60fb      	str	r3, [r7, #12]
            break;
34010bc6:	e009      	b.n	34010bdc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010bc8:	f7ff fd52 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010bcc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010bce:	68fa      	ldr	r2, [r7, #12]
34010bd0:	68bb      	ldr	r3, [r7, #8]
34010bd2:	fbb2 f3f3 	udiv	r3, r2, r3
34010bd6:	60fb      	str	r3, [r7, #12]
            break;
34010bd8:	e000      	b.n	34010bdc <RCCEx_GetADFCLKFreq+0xe0>
            break;
34010bda:	bf00      	nop
        }
      }
      break;
34010bdc:	e067      	b.n	34010cae <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34010bde:	f7f8 f877 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
34010be2:	4603      	mov	r3, r0
34010be4:	2b00      	cmp	r3, #0
34010be6:	d064      	beq.n	34010cb2 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34010be8:	f7f8 f894 	bl	34008d14 <LL_RCC_IC8_GetDivider>
34010bec:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34010bee:	f7f8 f883 	bl	34008cf8 <LL_RCC_IC8_GetSource>
34010bf2:	4603      	mov	r3, r0
34010bf4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010bf8:	d029      	beq.n	34010c4e <RCCEx_GetADFCLKFreq+0x152>
34010bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010bfe:	d82f      	bhi.n	34010c60 <RCCEx_GetADFCLKFreq+0x164>
34010c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010c04:	d01a      	beq.n	34010c3c <RCCEx_GetADFCLKFreq+0x140>
34010c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010c0a:	d829      	bhi.n	34010c60 <RCCEx_GetADFCLKFreq+0x164>
34010c0c:	2b00      	cmp	r3, #0
34010c0e:	d003      	beq.n	34010c18 <RCCEx_GetADFCLKFreq+0x11c>
34010c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010c14:	d009      	beq.n	34010c2a <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34010c16:	e023      	b.n	34010c60 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010c18:	f7ff fc58 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010c1c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010c1e:	68fa      	ldr	r2, [r7, #12]
34010c20:	68bb      	ldr	r3, [r7, #8]
34010c22:	fbb2 f3f3 	udiv	r3, r2, r3
34010c26:	60fb      	str	r3, [r7, #12]
            break;
34010c28:	e01b      	b.n	34010c62 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010c2a:	f7ff fc95 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010c2e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010c30:	68fa      	ldr	r2, [r7, #12]
34010c32:	68bb      	ldr	r3, [r7, #8]
34010c34:	fbb2 f3f3 	udiv	r3, r2, r3
34010c38:	60fb      	str	r3, [r7, #12]
            break;
34010c3a:	e012      	b.n	34010c62 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010c3c:	f7ff fcd2 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010c40:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010c42:	68fa      	ldr	r2, [r7, #12]
34010c44:	68bb      	ldr	r3, [r7, #8]
34010c46:	fbb2 f3f3 	udiv	r3, r2, r3
34010c4a:	60fb      	str	r3, [r7, #12]
            break;
34010c4c:	e009      	b.n	34010c62 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010c4e:	f7ff fd0f 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010c52:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34010c54:	68fa      	ldr	r2, [r7, #12]
34010c56:	68bb      	ldr	r3, [r7, #8]
34010c58:	fbb2 f3f3 	udiv	r3, r2, r3
34010c5c:	60fb      	str	r3, [r7, #12]
            break;
34010c5e:	e000      	b.n	34010c62 <RCCEx_GetADFCLKFreq+0x166>
            break;
34010c60:	bf00      	nop
        }
      }
      break;
34010c62:	e026      	b.n	34010cb2 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34010c64:	f7f7 f850 	bl	34007d08 <LL_RCC_HSI_IsReady>
34010c68:	4603      	mov	r3, r0
34010c6a:	2b00      	cmp	r3, #0
34010c6c:	d023      	beq.n	34010cb6 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010c6e:	f7f7 f85d 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34010c72:	4603      	mov	r3, r0
34010c74:	09db      	lsrs	r3, r3, #7
34010c76:	4a14      	ldr	r2, [pc, #80]	@ (34010cc8 <RCCEx_GetADFCLKFreq+0x1cc>)
34010c78:	fa22 f303 	lsr.w	r3, r2, r3
34010c7c:	60fb      	str	r3, [r7, #12]
      }
      break;
34010c7e:	e01a      	b.n	34010cb6 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34010c80:	f7f7 f862 	bl	34007d48 <LL_RCC_MSI_IsReady>
34010c84:	4603      	mov	r3, r0
34010c86:	2b00      	cmp	r3, #0
34010c88:	d017      	beq.n	34010cba <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34010c8a:	4b10      	ldr	r3, [pc, #64]	@ (34010ccc <RCCEx_GetADFCLKFreq+0x1d0>)
34010c8c:	60fb      	str	r3, [r7, #12]
      }
      break;
34010c8e:	e014      	b.n	34010cba <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34010c90:	4b0f      	ldr	r3, [pc, #60]	@ (34010cd0 <RCCEx_GetADFCLKFreq+0x1d4>)
34010c92:	60fb      	str	r3, [r7, #12]
      break;
34010c94:	e012      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34010c96:	f7f6 fc39 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34010c9a:	4604      	mov	r4, r0
34010c9c:	f7f7 fc9c 	bl	340085d8 <LL_RCC_GetTIMPrescaler>
34010ca0:	4603      	mov	r3, r0
34010ca2:	fa24 f303 	lsr.w	r3, r4, r3
34010ca6:	60fb      	str	r3, [r7, #12]
      break;
34010ca8:	e008      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34010caa:	bf00      	nop
34010cac:	e006      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34010cae:	bf00      	nop
34010cb0:	e004      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34010cb2:	bf00      	nop
34010cb4:	e002      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34010cb6:	bf00      	nop
34010cb8:	e000      	b.n	34010cbc <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34010cba:	bf00      	nop
  }

  return adf_frequency;
34010cbc:	68fb      	ldr	r3, [r7, #12]
}
34010cbe:	4618      	mov	r0, r3
34010cc0:	3714      	adds	r7, #20
34010cc2:	46bd      	mov	sp, r7
34010cc4:	bd90      	pop	{r4, r7, pc}
34010cc6:	bf00      	nop
34010cc8:	03d09000 	.word	0x03d09000
34010ccc:	003d0900 	.word	0x003d0900
34010cd0:	00bb8000 	.word	0x00bb8000

34010cd4 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
34010cd4:	b580      	push	{r7, lr}
34010cd6:	b084      	sub	sp, #16
34010cd8:	af00      	add	r7, sp, #0
34010cda:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34010cdc:	2300      	movs	r3, #0
34010cde:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34010ce0:	f7f8 faf6 	bl	340092d0 <LL_RCC_CLKP_IsEnabled>
34010ce4:	4603      	mov	r3, r0
34010ce6:	2b01      	cmp	r3, #1
34010ce8:	f040 81a5 	bne.w	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34010cec:	6878      	ldr	r0, [r7, #4]
34010cee:	f7f7 fae5 	bl	340082bc <LL_RCC_GetCLKPClockSource>
34010cf2:	4603      	mov	r3, r0
34010cf4:	2b07      	cmp	r3, #7
34010cf6:	f200 818d 	bhi.w	34011014 <RCCEx_GetCLKPCLKFreq+0x340>
34010cfa:	a201      	add	r2, pc, #4	@ (adr r2, 34010d00 <RCCEx_GetCLKPCLKFreq+0x2c>)
34010cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34010d00:	34010d21 	.word	0x34010d21
34010d04:	34010d3f 	.word	0x34010d3f
34010d08:	34010d51 	.word	0x34010d51
34010d0c:	34010efb 	.word	0x34010efb
34010d10:	34010d63 	.word	0x34010d63
34010d14:	34010deb 	.word	0x34010deb
34010d18:	34010e73 	.word	0x34010e73
34010d1c:	34010f83 	.word	0x34010f83
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34010d20:	f7f6 fff2 	bl	34007d08 <LL_RCC_HSI_IsReady>
34010d24:	4603      	mov	r3, r0
34010d26:	2b00      	cmp	r3, #0
34010d28:	f000 8176 	beq.w	34011018 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34010d2c:	f7f6 fffe 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34010d30:	4603      	mov	r3, r0
34010d32:	09db      	lsrs	r3, r3, #7
34010d34:	4aa1      	ldr	r2, [pc, #644]	@ (34010fbc <RCCEx_GetCLKPCLKFreq+0x2e8>)
34010d36:	fa22 f303 	lsr.w	r3, r2, r3
34010d3a:	60fb      	str	r3, [r7, #12]
        }
        break;
34010d3c:	e16c      	b.n	34011018 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34010d3e:	f7f7 f803 	bl	34007d48 <LL_RCC_MSI_IsReady>
34010d42:	4603      	mov	r3, r0
34010d44:	2b00      	cmp	r3, #0
34010d46:	f000 8169 	beq.w	3401101c <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34010d4a:	4b9d      	ldr	r3, [pc, #628]	@ (34010fc0 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34010d4c:	60fb      	str	r3, [r7, #12]
        }
        break;
34010d4e:	e165      	b.n	3401101c <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34010d50:	f7f6 ffc8 	bl	34007ce4 <LL_RCC_HSE_IsReady>
34010d54:	4603      	mov	r3, r0
34010d56:	2b00      	cmp	r3, #0
34010d58:	f000 8162 	beq.w	34011020 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34010d5c:	4b99      	ldr	r3, [pc, #612]	@ (34010fc4 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34010d5e:	60fb      	str	r3, [r7, #12]
        }
        break;
34010d60:	e15e      	b.n	34011020 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34010d62:	f7f7 ff35 	bl	34008bd0 <LL_RCC_IC5_IsEnabled>
34010d66:	4603      	mov	r3, r0
34010d68:	2b00      	cmp	r3, #0
34010d6a:	f000 815b 	beq.w	34011024 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34010d6e:	f7f7 ff51 	bl	34008c14 <LL_RCC_IC5_GetDivider>
34010d72:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34010d74:	f7f7 ff40 	bl	34008bf8 <LL_RCC_IC5_GetSource>
34010d78:	4603      	mov	r3, r0
34010d7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010d7e:	d029      	beq.n	34010dd4 <RCCEx_GetCLKPCLKFreq+0x100>
34010d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010d84:	d82f      	bhi.n	34010de6 <RCCEx_GetCLKPCLKFreq+0x112>
34010d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010d8a:	d01a      	beq.n	34010dc2 <RCCEx_GetCLKPCLKFreq+0xee>
34010d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010d90:	d829      	bhi.n	34010de6 <RCCEx_GetCLKPCLKFreq+0x112>
34010d92:	2b00      	cmp	r3, #0
34010d94:	d003      	beq.n	34010d9e <RCCEx_GetCLKPCLKFreq+0xca>
34010d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010d9a:	d009      	beq.n	34010db0 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34010d9c:	e023      	b.n	34010de6 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010d9e:	f7ff fb95 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010da2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010da4:	68fa      	ldr	r2, [r7, #12]
34010da6:	68bb      	ldr	r3, [r7, #8]
34010da8:	fbb2 f3f3 	udiv	r3, r2, r3
34010dac:	60fb      	str	r3, [r7, #12]
              break;
34010dae:	e01b      	b.n	34010de8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010db0:	f7ff fbd2 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010db4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010db6:	68fa      	ldr	r2, [r7, #12]
34010db8:	68bb      	ldr	r3, [r7, #8]
34010dba:	fbb2 f3f3 	udiv	r3, r2, r3
34010dbe:	60fb      	str	r3, [r7, #12]
              break;
34010dc0:	e012      	b.n	34010de8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010dc2:	f7ff fc0f 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010dc6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010dc8:	68fa      	ldr	r2, [r7, #12]
34010dca:	68bb      	ldr	r3, [r7, #8]
34010dcc:	fbb2 f3f3 	udiv	r3, r2, r3
34010dd0:	60fb      	str	r3, [r7, #12]
              break;
34010dd2:	e009      	b.n	34010de8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010dd4:	f7ff fc4c 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010dd8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010dda:	68fa      	ldr	r2, [r7, #12]
34010ddc:	68bb      	ldr	r3, [r7, #8]
34010dde:	fbb2 f3f3 	udiv	r3, r2, r3
34010de2:	60fb      	str	r3, [r7, #12]
              break;
34010de4:	e000      	b.n	34010de8 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
34010de6:	bf00      	nop
          }
        }
        break;
34010de8:	e11c      	b.n	34011024 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
34010dea:	f7f7 fff1 	bl	34008dd0 <LL_RCC_IC10_IsEnabled>
34010dee:	4603      	mov	r3, r0
34010df0:	2b00      	cmp	r3, #0
34010df2:	f000 8119 	beq.w	34011028 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
34010df6:	f7f8 f80d 	bl	34008e14 <LL_RCC_IC10_GetDivider>
34010dfa:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34010dfc:	f7f7 fffc 	bl	34008df8 <LL_RCC_IC10_GetSource>
34010e00:	4603      	mov	r3, r0
34010e02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e06:	d029      	beq.n	34010e5c <RCCEx_GetCLKPCLKFreq+0x188>
34010e08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e0c:	d82f      	bhi.n	34010e6e <RCCEx_GetCLKPCLKFreq+0x19a>
34010e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e12:	d01a      	beq.n	34010e4a <RCCEx_GetCLKPCLKFreq+0x176>
34010e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e18:	d829      	bhi.n	34010e6e <RCCEx_GetCLKPCLKFreq+0x19a>
34010e1a:	2b00      	cmp	r3, #0
34010e1c:	d003      	beq.n	34010e26 <RCCEx_GetCLKPCLKFreq+0x152>
34010e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010e22:	d009      	beq.n	34010e38 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34010e24:	e023      	b.n	34010e6e <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010e26:	f7ff fb51 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010e2a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010e2c:	68fa      	ldr	r2, [r7, #12]
34010e2e:	68bb      	ldr	r3, [r7, #8]
34010e30:	fbb2 f3f3 	udiv	r3, r2, r3
34010e34:	60fb      	str	r3, [r7, #12]
              break;
34010e36:	e01b      	b.n	34010e70 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010e38:	f7ff fb8e 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010e3c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010e3e:	68fa      	ldr	r2, [r7, #12]
34010e40:	68bb      	ldr	r3, [r7, #8]
34010e42:	fbb2 f3f3 	udiv	r3, r2, r3
34010e46:	60fb      	str	r3, [r7, #12]
              break;
34010e48:	e012      	b.n	34010e70 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010e4a:	f7ff fbcb 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010e4e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010e50:	68fa      	ldr	r2, [r7, #12]
34010e52:	68bb      	ldr	r3, [r7, #8]
34010e54:	fbb2 f3f3 	udiv	r3, r2, r3
34010e58:	60fb      	str	r3, [r7, #12]
              break;
34010e5a:	e009      	b.n	34010e70 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010e5c:	f7ff fc08 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010e60:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010e62:	68fa      	ldr	r2, [r7, #12]
34010e64:	68bb      	ldr	r3, [r7, #8]
34010e66:	fbb2 f3f3 	udiv	r3, r2, r3
34010e6a:	60fb      	str	r3, [r7, #12]
              break;
34010e6c:	e000      	b.n	34010e70 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34010e6e:	bf00      	nop
          }
        }
        break;
34010e70:	e0da      	b.n	34011028 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34010e72:	f7f8 f8ad 	bl	34008fd0 <LL_RCC_IC15_IsEnabled>
34010e76:	4603      	mov	r3, r0
34010e78:	2b00      	cmp	r3, #0
34010e7a:	f000 80d7 	beq.w	3401102c <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
34010e7e:	f7f8 f8c9 	bl	34009014 <LL_RCC_IC15_GetDivider>
34010e82:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34010e84:	f7f8 f8b8 	bl	34008ff8 <LL_RCC_IC15_GetSource>
34010e88:	4603      	mov	r3, r0
34010e8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e8e:	d029      	beq.n	34010ee4 <RCCEx_GetCLKPCLKFreq+0x210>
34010e90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010e94:	d82f      	bhi.n	34010ef6 <RCCEx_GetCLKPCLKFreq+0x222>
34010e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010e9a:	d01a      	beq.n	34010ed2 <RCCEx_GetCLKPCLKFreq+0x1fe>
34010e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010ea0:	d829      	bhi.n	34010ef6 <RCCEx_GetCLKPCLKFreq+0x222>
34010ea2:	2b00      	cmp	r3, #0
34010ea4:	d003      	beq.n	34010eae <RCCEx_GetCLKPCLKFreq+0x1da>
34010ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010eaa:	d009      	beq.n	34010ec0 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34010eac:	e023      	b.n	34010ef6 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010eae:	f7ff fb0d 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010eb2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010eb4:	68fa      	ldr	r2, [r7, #12]
34010eb6:	68bb      	ldr	r3, [r7, #8]
34010eb8:	fbb2 f3f3 	udiv	r3, r2, r3
34010ebc:	60fb      	str	r3, [r7, #12]
              break;
34010ebe:	e01b      	b.n	34010ef8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010ec0:	f7ff fb4a 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010ec4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010ec6:	68fa      	ldr	r2, [r7, #12]
34010ec8:	68bb      	ldr	r3, [r7, #8]
34010eca:	fbb2 f3f3 	udiv	r3, r2, r3
34010ece:	60fb      	str	r3, [r7, #12]
              break;
34010ed0:	e012      	b.n	34010ef8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010ed2:	f7ff fb87 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010ed6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010ed8:	68fa      	ldr	r2, [r7, #12]
34010eda:	68bb      	ldr	r3, [r7, #8]
34010edc:	fbb2 f3f3 	udiv	r3, r2, r3
34010ee0:	60fb      	str	r3, [r7, #12]
              break;
34010ee2:	e009      	b.n	34010ef8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010ee4:	f7ff fbc4 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010ee8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010eea:	68fa      	ldr	r2, [r7, #12]
34010eec:	68bb      	ldr	r3, [r7, #8]
34010eee:	fbb2 f3f3 	udiv	r3, r2, r3
34010ef2:	60fb      	str	r3, [r7, #12]
              break;
34010ef4:	e000      	b.n	34010ef8 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
34010ef6:	bf00      	nop
          }
        }
        break;
34010ef8:	e098      	b.n	3401102c <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
34010efa:	f7f8 f969 	bl	340091d0 <LL_RCC_IC19_IsEnabled>
34010efe:	4603      	mov	r3, r0
34010f00:	2b00      	cmp	r3, #0
34010f02:	f000 8095 	beq.w	34011030 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34010f06:	f7f8 f985 	bl	34009214 <LL_RCC_IC19_GetDivider>
34010f0a:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34010f0c:	f7f8 f974 	bl	340091f8 <LL_RCC_IC19_GetSource>
34010f10:	4603      	mov	r3, r0
34010f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010f16:	d029      	beq.n	34010f6c <RCCEx_GetCLKPCLKFreq+0x298>
34010f18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010f1c:	d82f      	bhi.n	34010f7e <RCCEx_GetCLKPCLKFreq+0x2aa>
34010f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010f22:	d01a      	beq.n	34010f5a <RCCEx_GetCLKPCLKFreq+0x286>
34010f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010f28:	d829      	bhi.n	34010f7e <RCCEx_GetCLKPCLKFreq+0x2aa>
34010f2a:	2b00      	cmp	r3, #0
34010f2c:	d003      	beq.n	34010f36 <RCCEx_GetCLKPCLKFreq+0x262>
34010f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010f32:	d009      	beq.n	34010f48 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34010f34:	e023      	b.n	34010f7e <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010f36:	f7ff fac9 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010f3a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010f3c:	68fa      	ldr	r2, [r7, #12]
34010f3e:	68bb      	ldr	r3, [r7, #8]
34010f40:	fbb2 f3f3 	udiv	r3, r2, r3
34010f44:	60fb      	str	r3, [r7, #12]
              break;
34010f46:	e01b      	b.n	34010f80 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010f48:	f7ff fb06 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010f4c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010f4e:	68fa      	ldr	r2, [r7, #12]
34010f50:	68bb      	ldr	r3, [r7, #8]
34010f52:	fbb2 f3f3 	udiv	r3, r2, r3
34010f56:	60fb      	str	r3, [r7, #12]
              break;
34010f58:	e012      	b.n	34010f80 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010f5a:	f7ff fb43 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010f5e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010f60:	68fa      	ldr	r2, [r7, #12]
34010f62:	68bb      	ldr	r3, [r7, #8]
34010f64:	fbb2 f3f3 	udiv	r3, r2, r3
34010f68:	60fb      	str	r3, [r7, #12]
              break;
34010f6a:	e009      	b.n	34010f80 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010f6c:	f7ff fb80 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34010f70:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010f72:	68fa      	ldr	r2, [r7, #12]
34010f74:	68bb      	ldr	r3, [r7, #8]
34010f76:	fbb2 f3f3 	udiv	r3, r2, r3
34010f7a:	60fb      	str	r3, [r7, #12]
              break;
34010f7c:	e000      	b.n	34010f80 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
34010f7e:	bf00      	nop
          }
        }
        break;
34010f80:	e056      	b.n	34011030 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
34010f82:	f7f8 f965 	bl	34009250 <LL_RCC_IC20_IsEnabled>
34010f86:	4603      	mov	r3, r0
34010f88:	2b00      	cmp	r3, #0
34010f8a:	d053      	beq.n	34011034 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34010f8c:	f7f8 f982 	bl	34009294 <LL_RCC_IC20_GetDivider>
34010f90:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
34010f92:	f7f8 f971 	bl	34009278 <LL_RCC_IC20_GetSource>
34010f96:	4603      	mov	r3, r0
34010f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010f9c:	d02f      	beq.n	34010ffe <RCCEx_GetCLKPCLKFreq+0x32a>
34010f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34010fa2:	d835      	bhi.n	34011010 <RCCEx_GetCLKPCLKFreq+0x33c>
34010fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010fa8:	d020      	beq.n	34010fec <RCCEx_GetCLKPCLKFreq+0x318>
34010faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34010fae:	d82f      	bhi.n	34011010 <RCCEx_GetCLKPCLKFreq+0x33c>
34010fb0:	2b00      	cmp	r3, #0
34010fb2:	d009      	beq.n	34010fc8 <RCCEx_GetCLKPCLKFreq+0x2f4>
34010fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34010fb8:	d00f      	beq.n	34010fda <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34010fba:	e029      	b.n	34011010 <RCCEx_GetCLKPCLKFreq+0x33c>
34010fbc:	03d09000 	.word	0x03d09000
34010fc0:	003d0900 	.word	0x003d0900
34010fc4:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34010fc8:	f7ff fa80 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34010fcc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010fce:	68fa      	ldr	r2, [r7, #12]
34010fd0:	68bb      	ldr	r3, [r7, #8]
34010fd2:	fbb2 f3f3 	udiv	r3, r2, r3
34010fd6:	60fb      	str	r3, [r7, #12]
              break;
34010fd8:	e01b      	b.n	34011012 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34010fda:	f7ff fabd 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34010fde:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010fe0:	68fa      	ldr	r2, [r7, #12]
34010fe2:	68bb      	ldr	r3, [r7, #8]
34010fe4:	fbb2 f3f3 	udiv	r3, r2, r3
34010fe8:	60fb      	str	r3, [r7, #12]
              break;
34010fea:	e012      	b.n	34011012 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34010fec:	f7ff fafa 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34010ff0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34010ff2:	68fa      	ldr	r2, [r7, #12]
34010ff4:	68bb      	ldr	r3, [r7, #8]
34010ff6:	fbb2 f3f3 	udiv	r3, r2, r3
34010ffa:	60fb      	str	r3, [r7, #12]
              break;
34010ffc:	e009      	b.n	34011012 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34010ffe:	f7ff fb37 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34011002:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34011004:	68fa      	ldr	r2, [r7, #12]
34011006:	68bb      	ldr	r3, [r7, #8]
34011008:	fbb2 f3f3 	udiv	r3, r2, r3
3401100c:	60fb      	str	r3, [r7, #12]
              break;
3401100e:	e000      	b.n	34011012 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34011010:	bf00      	nop
          }
        }
        break;
34011012:	e00f      	b.n	34011034 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34011014:	bf00      	nop
34011016:	e00e      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011018:	bf00      	nop
3401101a:	e00c      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401101c:	bf00      	nop
3401101e:	e00a      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011020:	bf00      	nop
34011022:	e008      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011024:	bf00      	nop
34011026:	e006      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011028:	bf00      	nop
3401102a:	e004      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3401102c:	bf00      	nop
3401102e:	e002      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011030:	bf00      	nop
34011032:	e000      	b.n	34011036 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34011034:	bf00      	nop
    }
  }

  return clkp_frequency;
34011036:	68fb      	ldr	r3, [r7, #12]
}
34011038:	4618      	mov	r0, r3
3401103a:	3710      	adds	r7, #16
3401103c:	46bd      	mov	sp, r7
3401103e:	bd80      	pop	{r7, pc}

34011040 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34011040:	b580      	push	{r7, lr}
34011042:	b082      	sub	sp, #8
34011044:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34011046:	2300      	movs	r3, #0
34011048:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3401104a:	f7f8 f881 	bl	34009150 <LL_RCC_IC18_IsEnabled>
3401104e:	4603      	mov	r3, r0
34011050:	2b00      	cmp	r3, #0
34011052:	d03c      	beq.n	340110ce <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34011054:	f7f8 f89e 	bl	34009194 <LL_RCC_IC18_GetDivider>
34011058:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3401105a:	f7f8 f88d 	bl	34009178 <LL_RCC_IC18_GetSource>
3401105e:	4603      	mov	r3, r0
34011060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011064:	d029      	beq.n	340110ba <RCCEx_GetCSICLKFreq+0x7a>
34011066:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401106a:	d82f      	bhi.n	340110cc <RCCEx_GetCSICLKFreq+0x8c>
3401106c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011070:	d01a      	beq.n	340110a8 <RCCEx_GetCSICLKFreq+0x68>
34011072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011076:	d829      	bhi.n	340110cc <RCCEx_GetCSICLKFreq+0x8c>
34011078:	2b00      	cmp	r3, #0
3401107a:	d003      	beq.n	34011084 <RCCEx_GetCSICLKFreq+0x44>
3401107c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011080:	d009      	beq.n	34011096 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34011082:	e023      	b.n	340110cc <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011084:	f7ff fa22 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011088:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3401108a:	687a      	ldr	r2, [r7, #4]
3401108c:	683b      	ldr	r3, [r7, #0]
3401108e:	fbb2 f3f3 	udiv	r3, r2, r3
34011092:	607b      	str	r3, [r7, #4]
        break;
34011094:	e01b      	b.n	340110ce <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011096:	f7ff fa5f 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
3401109a:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3401109c:	687a      	ldr	r2, [r7, #4]
3401109e:	683b      	ldr	r3, [r7, #0]
340110a0:	fbb2 f3f3 	udiv	r3, r2, r3
340110a4:	607b      	str	r3, [r7, #4]
        break;
340110a6:	e012      	b.n	340110ce <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340110a8:	f7ff fa9c 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340110ac:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340110ae:	687a      	ldr	r2, [r7, #4]
340110b0:	683b      	ldr	r3, [r7, #0]
340110b2:	fbb2 f3f3 	udiv	r3, r2, r3
340110b6:	607b      	str	r3, [r7, #4]
        break;
340110b8:	e009      	b.n	340110ce <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340110ba:	f7ff fad9 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340110be:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340110c0:	687a      	ldr	r2, [r7, #4]
340110c2:	683b      	ldr	r3, [r7, #0]
340110c4:	fbb2 f3f3 	udiv	r3, r2, r3
340110c8:	607b      	str	r3, [r7, #4]
        break;
340110ca:	e000      	b.n	340110ce <RCCEx_GetCSICLKFreq+0x8e>
        break;
340110cc:	bf00      	nop
    }
  }

  return clkp_frequency;
340110ce:	687b      	ldr	r3, [r7, #4]
}
340110d0:	4618      	mov	r0, r3
340110d2:	3708      	adds	r7, #8
340110d4:	46bd      	mov	sp, r7
340110d6:	bd80      	pop	{r7, pc}

340110d8 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
340110d8:	b580      	push	{r7, lr}
340110da:	b084      	sub	sp, #16
340110dc:	af00      	add	r7, sp, #0
340110de:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
340110e0:	2300      	movs	r3, #0
340110e2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340110e4:	6878      	ldr	r0, [r7, #4]
340110e6:	f7f7 f8fb 	bl	340082e0 <LL_RCC_GetDCMIPPClockSource>
340110ea:	4603      	mov	r3, r0
340110ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340110f0:	d062      	beq.n	340111b8 <RCCEx_GetDCMIPPCLKFreq+0xe0>
340110f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340110f6:	d86d      	bhi.n	340111d4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340110f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340110fc:	d019      	beq.n	34011132 <RCCEx_GetDCMIPPCLKFreq+0x5a>
340110fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34011102:	d867      	bhi.n	340111d4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34011104:	2b00      	cmp	r3, #0
34011106:	d003      	beq.n	34011110 <RCCEx_GetDCMIPPCLKFreq+0x38>
34011108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3401110c:	d00c      	beq.n	34011128 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3401110e:	e061      	b.n	340111d4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011110:	f7f6 f9fc 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011114:	4603      	mov	r3, r0
34011116:	4618      	mov	r0, r3
34011118:	f7ff faf0 	bl	340106fc <RCCEx_GetHCLKFreq>
3401111c:	4603      	mov	r3, r0
3401111e:	4618      	mov	r0, r3
34011120:	f7ff fb2f 	bl	34010782 <RCCEx_GetPCLK5Freq>
34011124:	60f8      	str	r0, [r7, #12]
      break;
34011126:	e05a      	b.n	340111de <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011128:	2007      	movs	r0, #7
3401112a:	f7ff fdd3 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401112e:	60f8      	str	r0, [r7, #12]
      break;
34011130:	e055      	b.n	340111de <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34011132:	f7f7 ffcd 	bl	340090d0 <LL_RCC_IC17_IsEnabled>
34011136:	4603      	mov	r3, r0
34011138:	2b00      	cmp	r3, #0
3401113a:	d04d      	beq.n	340111d8 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
3401113c:	f7f7 ffea 	bl	34009114 <LL_RCC_IC17_GetDivider>
34011140:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34011142:	f7f7 ffd9 	bl	340090f8 <LL_RCC_IC17_GetSource>
34011146:	4603      	mov	r3, r0
34011148:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401114c:	d029      	beq.n	340111a2 <RCCEx_GetDCMIPPCLKFreq+0xca>
3401114e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011152:	d82f      	bhi.n	340111b4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011158:	d01a      	beq.n	34011190 <RCCEx_GetDCMIPPCLKFreq+0xb8>
3401115a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401115e:	d829      	bhi.n	340111b4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34011160:	2b00      	cmp	r3, #0
34011162:	d003      	beq.n	3401116c <RCCEx_GetDCMIPPCLKFreq+0x94>
34011164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011168:	d009      	beq.n	3401117e <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3401116a:	e023      	b.n	340111b4 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401116c:	f7ff f9ae 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011170:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011172:	68fa      	ldr	r2, [r7, #12]
34011174:	68bb      	ldr	r3, [r7, #8]
34011176:	fbb2 f3f3 	udiv	r3, r2, r3
3401117a:	60fb      	str	r3, [r7, #12]
            break;
3401117c:	e01b      	b.n	340111b6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401117e:	f7ff f9eb 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011182:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011184:	68fa      	ldr	r2, [r7, #12]
34011186:	68bb      	ldr	r3, [r7, #8]
34011188:	fbb2 f3f3 	udiv	r3, r2, r3
3401118c:	60fb      	str	r3, [r7, #12]
            break;
3401118e:	e012      	b.n	340111b6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011190:	f7ff fa28 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011194:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34011196:	68fa      	ldr	r2, [r7, #12]
34011198:	68bb      	ldr	r3, [r7, #8]
3401119a:	fbb2 f3f3 	udiv	r3, r2, r3
3401119e:	60fb      	str	r3, [r7, #12]
            break;
340111a0:	e009      	b.n	340111b6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340111a2:	f7ff fa65 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340111a6:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
340111a8:	68fa      	ldr	r2, [r7, #12]
340111aa:	68bb      	ldr	r3, [r7, #8]
340111ac:	fbb2 f3f3 	udiv	r3, r2, r3
340111b0:	60fb      	str	r3, [r7, #12]
            break;
340111b2:	e000      	b.n	340111b6 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
340111b4:	bf00      	nop
      break;
340111b6:	e00f      	b.n	340111d8 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
340111b8:	f7f6 fda6 	bl	34007d08 <LL_RCC_HSI_IsReady>
340111bc:	4603      	mov	r3, r0
340111be:	2b00      	cmp	r3, #0
340111c0:	d00c      	beq.n	340111dc <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340111c2:	f7f6 fdb3 	bl	34007d2c <LL_RCC_HSI_GetDivider>
340111c6:	4603      	mov	r3, r0
340111c8:	09db      	lsrs	r3, r3, #7
340111ca:	4a07      	ldr	r2, [pc, #28]	@ (340111e8 <RCCEx_GetDCMIPPCLKFreq+0x110>)
340111cc:	fa22 f303 	lsr.w	r3, r2, r3
340111d0:	60fb      	str	r3, [r7, #12]
      break;
340111d2:	e003      	b.n	340111dc <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
340111d4:	bf00      	nop
340111d6:	e002      	b.n	340111de <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340111d8:	bf00      	nop
340111da:	e000      	b.n	340111de <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340111dc:	bf00      	nop
  }

  return dcmipp_frequency;
340111de:	68fb      	ldr	r3, [r7, #12]
}
340111e0:	4618      	mov	r0, r3
340111e2:	3710      	adds	r7, #16
340111e4:	46bd      	mov	sp, r7
340111e6:	bd80      	pop	{r7, pc}
340111e8:	03d09000 	.word	0x03d09000

340111ec <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
340111ec:	b580      	push	{r7, lr}
340111ee:	b084      	sub	sp, #16
340111f0:	af00      	add	r7, sp, #0
340111f2:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
340111f4:	2300      	movs	r3, #0
340111f6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340111f8:	6878      	ldr	r0, [r7, #4]
340111fa:	f7f7 f883 	bl	34008304 <LL_RCC_GetETHClockSource>
340111fe:	4603      	mov	r3, r0
34011200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34011204:	d05e      	beq.n	340112c4 <RCCEx_GetETH1CLKFreq+0xd8>
34011206:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3401120a:	d863      	bhi.n	340112d4 <RCCEx_GetETH1CLKFreq+0xe8>
3401120c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34011210:	d015      	beq.n	3401123e <RCCEx_GetETH1CLKFreq+0x52>
34011212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34011216:	d85d      	bhi.n	340112d4 <RCCEx_GetETH1CLKFreq+0xe8>
34011218:	2b00      	cmp	r3, #0
3401121a:	d003      	beq.n	34011224 <RCCEx_GetETH1CLKFreq+0x38>
3401121c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011220:	d008      	beq.n	34011234 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011222:	e057      	b.n	340112d4 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011224:	f7f6 f972 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011228:	4603      	mov	r3, r0
3401122a:	4618      	mov	r0, r3
3401122c:	f7ff fa66 	bl	340106fc <RCCEx_GetHCLKFreq>
34011230:	60f8      	str	r0, [r7, #12]
      break;
34011232:	e054      	b.n	340112de <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011234:	2007      	movs	r0, #7
34011236:	f7ff fd4d 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401123a:	60f8      	str	r0, [r7, #12]
      break;
3401123c:	e04f      	b.n	340112de <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3401123e:	f7f7 fe07 	bl	34008e50 <LL_RCC_IC12_IsEnabled>
34011242:	4603      	mov	r3, r0
34011244:	2b00      	cmp	r3, #0
34011246:	d047      	beq.n	340112d8 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34011248:	f7f7 fe24 	bl	34008e94 <LL_RCC_IC12_GetDivider>
3401124c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3401124e:	f7f7 fe13 	bl	34008e78 <LL_RCC_IC12_GetSource>
34011252:	4603      	mov	r3, r0
34011254:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011258:	d029      	beq.n	340112ae <RCCEx_GetETH1CLKFreq+0xc2>
3401125a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401125e:	d82f      	bhi.n	340112c0 <RCCEx_GetETH1CLKFreq+0xd4>
34011260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011264:	d01a      	beq.n	3401129c <RCCEx_GetETH1CLKFreq+0xb0>
34011266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401126a:	d829      	bhi.n	340112c0 <RCCEx_GetETH1CLKFreq+0xd4>
3401126c:	2b00      	cmp	r3, #0
3401126e:	d003      	beq.n	34011278 <RCCEx_GetETH1CLKFreq+0x8c>
34011270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011274:	d009      	beq.n	3401128a <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34011276:	e023      	b.n	340112c0 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011278:	f7ff f928 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401127c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3401127e:	68fa      	ldr	r2, [r7, #12]
34011280:	68bb      	ldr	r3, [r7, #8]
34011282:	fbb2 f3f3 	udiv	r3, r2, r3
34011286:	60fb      	str	r3, [r7, #12]
            break;
34011288:	e01b      	b.n	340112c2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401128a:	f7ff f965 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
3401128e:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34011290:	68fa      	ldr	r2, [r7, #12]
34011292:	68bb      	ldr	r3, [r7, #8]
34011294:	fbb2 f3f3 	udiv	r3, r2, r3
34011298:	60fb      	str	r3, [r7, #12]
            break;
3401129a:	e012      	b.n	340112c2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401129c:	f7ff f9a2 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340112a0:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
340112a2:	68fa      	ldr	r2, [r7, #12]
340112a4:	68bb      	ldr	r3, [r7, #8]
340112a6:	fbb2 f3f3 	udiv	r3, r2, r3
340112aa:	60fb      	str	r3, [r7, #12]
            break;
340112ac:	e009      	b.n	340112c2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340112ae:	f7ff f9df 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340112b2:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
340112b4:	68fa      	ldr	r2, [r7, #12]
340112b6:	68bb      	ldr	r3, [r7, #8]
340112b8:	fbb2 f3f3 	udiv	r3, r2, r3
340112bc:	60fb      	str	r3, [r7, #12]
            break;
340112be:	e000      	b.n	340112c2 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
340112c0:	bf00      	nop
      break;
340112c2:	e009      	b.n	340112d8 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
340112c4:	f7f6 fd0e 	bl	34007ce4 <LL_RCC_HSE_IsReady>
340112c8:	4603      	mov	r3, r0
340112ca:	2b00      	cmp	r3, #0
340112cc:	d006      	beq.n	340112dc <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
340112ce:	4b06      	ldr	r3, [pc, #24]	@ (340112e8 <RCCEx_GetETH1CLKFreq+0xfc>)
340112d0:	60fb      	str	r3, [r7, #12]
      break;
340112d2:	e003      	b.n	340112dc <RCCEx_GetETH1CLKFreq+0xf0>
      break;
340112d4:	bf00      	nop
340112d6:	e002      	b.n	340112de <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340112d8:	bf00      	nop
340112da:	e000      	b.n	340112de <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340112dc:	bf00      	nop
  }

  return eth1_frequency;
340112de:	68fb      	ldr	r3, [r7, #12]
}
340112e0:	4618      	mov	r0, r3
340112e2:	3710      	adds	r7, #16
340112e4:	46bd      	mov	sp, r7
340112e6:	bd80      	pop	{r7, pc}
340112e8:	02dc6c00 	.word	0x02dc6c00

340112ec <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
340112ec:	b580      	push	{r7, lr}
340112ee:	b084      	sub	sp, #16
340112f0:	af00      	add	r7, sp, #0
340112f2:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
340112f4:	2300      	movs	r3, #0
340112f6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
340112f8:	6878      	ldr	r0, [r7, #4]
340112fa:	f7f7 f815 	bl	34008328 <LL_RCC_GetETHPTPClockSource>
340112fe:	4603      	mov	r3, r0
34011300:	2b03      	cmp	r3, #3
34011302:	d863      	bhi.n	340113cc <RCCEx_GetETH1PTPCLKFreq+0xe0>
34011304:	a201      	add	r2, pc, #4	@ (adr r2, 3401130c <RCCEx_GetETH1PTPCLKFreq+0x20>)
34011306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401130a:	bf00      	nop
3401130c:	3401131d 	.word	0x3401131d
34011310:	3401132d 	.word	0x3401132d
34011314:	34011337 	.word	0x34011337
34011318:	340113bd 	.word	0x340113bd
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401131c:	f7f6 f8f6 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011320:	4603      	mov	r3, r0
34011322:	4618      	mov	r0, r3
34011324:	f7ff f9ea 	bl	340106fc <RCCEx_GetHCLKFreq>
34011328:	60f8      	str	r0, [r7, #12]
      break;
3401132a:	e054      	b.n	340113d6 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401132c:	2007      	movs	r0, #7
3401132e:	f7ff fcd1 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34011332:	60f8      	str	r0, [r7, #12]
      break;
34011334:	e04f      	b.n	340113d6 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34011336:	f7f7 fdcb 	bl	34008ed0 <LL_RCC_IC13_IsEnabled>
3401133a:	4603      	mov	r3, r0
3401133c:	2b00      	cmp	r3, #0
3401133e:	d047      	beq.n	340113d0 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34011340:	f7f7 fde8 	bl	34008f14 <LL_RCC_IC13_GetDivider>
34011344:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34011346:	f7f7 fdd7 	bl	34008ef8 <LL_RCC_IC13_GetSource>
3401134a:	4603      	mov	r3, r0
3401134c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011350:	d029      	beq.n	340113a6 <RCCEx_GetETH1PTPCLKFreq+0xba>
34011352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011356:	d82f      	bhi.n	340113b8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401135c:	d01a      	beq.n	34011394 <RCCEx_GetETH1PTPCLKFreq+0xa8>
3401135e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011362:	d829      	bhi.n	340113b8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34011364:	2b00      	cmp	r3, #0
34011366:	d003      	beq.n	34011370 <RCCEx_GetETH1PTPCLKFreq+0x84>
34011368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401136c:	d009      	beq.n	34011382 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401136e:	e023      	b.n	340113b8 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011370:	f7ff f8ac 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011374:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011376:	68fa      	ldr	r2, [r7, #12]
34011378:	68bb      	ldr	r3, [r7, #8]
3401137a:	fbb2 f3f3 	udiv	r3, r2, r3
3401137e:	60fb      	str	r3, [r7, #12]
            break;
34011380:	e01b      	b.n	340113ba <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011382:	f7ff f8e9 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011386:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34011388:	68fa      	ldr	r2, [r7, #12]
3401138a:	68bb      	ldr	r3, [r7, #8]
3401138c:	fbb2 f3f3 	udiv	r3, r2, r3
34011390:	60fb      	str	r3, [r7, #12]
            break;
34011392:	e012      	b.n	340113ba <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011394:	f7ff f926 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011398:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3401139a:	68fa      	ldr	r2, [r7, #12]
3401139c:	68bb      	ldr	r3, [r7, #8]
3401139e:	fbb2 f3f3 	udiv	r3, r2, r3
340113a2:	60fb      	str	r3, [r7, #12]
            break;
340113a4:	e009      	b.n	340113ba <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340113a6:	f7ff f963 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340113aa:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
340113ac:	68fa      	ldr	r2, [r7, #12]
340113ae:	68bb      	ldr	r3, [r7, #8]
340113b0:	fbb2 f3f3 	udiv	r3, r2, r3
340113b4:	60fb      	str	r3, [r7, #12]
            break;
340113b6:	e000      	b.n	340113ba <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
340113b8:	bf00      	nop
        }
      }
      break;
340113ba:	e009      	b.n	340113d0 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340113bc:	f7f6 fc92 	bl	34007ce4 <LL_RCC_HSE_IsReady>
340113c0:	4603      	mov	r3, r0
340113c2:	2b00      	cmp	r3, #0
340113c4:	d006      	beq.n	340113d4 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
340113c6:	4b0a      	ldr	r3, [pc, #40]	@ (340113f0 <RCCEx_GetETH1PTPCLKFreq+0x104>)
340113c8:	60fb      	str	r3, [r7, #12]
      }
      break;
340113ca:	e003      	b.n	340113d4 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
340113cc:	bf00      	nop
340113ce:	e002      	b.n	340113d6 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340113d0:	bf00      	nop
340113d2:	e000      	b.n	340113d6 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340113d4:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340113d6:	f7f6 fde3 	bl	34007fa0 <LL_RCC_GetETH1PTPDivider>
340113da:	4603      	mov	r3, r0
340113dc:	091b      	lsrs	r3, r3, #4
340113de:	3301      	adds	r3, #1
340113e0:	68fa      	ldr	r2, [r7, #12]
340113e2:	fbb2 f3f3 	udiv	r3, r2, r3
}
340113e6:	4618      	mov	r0, r3
340113e8:	3710      	adds	r7, #16
340113ea:	46bd      	mov	sp, r7
340113ec:	bd80      	pop	{r7, pc}
340113ee:	bf00      	nop
340113f0:	02dc6c00 	.word	0x02dc6c00

340113f4 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
340113f4:	b580      	push	{r7, lr}
340113f6:	b084      	sub	sp, #16
340113f8:	af00      	add	r7, sp, #0
340113fa:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
340113fc:	2300      	movs	r3, #0
340113fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34011400:	6878      	ldr	r0, [r7, #4]
34011402:	f7f6 ffa3 	bl	3400834c <LL_RCC_GetFDCANClockSource>
34011406:	4603      	mov	r3, r0
34011408:	2b03      	cmp	r3, #3
3401140a:	d867      	bhi.n	340114dc <RCCEx_GetFDCANCLKFreq+0xe8>
3401140c:	a201      	add	r2, pc, #4	@ (adr r2, 34011414 <RCCEx_GetFDCANCLKFreq+0x20>)
3401140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34011412:	bf00      	nop
34011414:	34011425 	.word	0x34011425
34011418:	3401143d 	.word	0x3401143d
3401141c:	34011447 	.word	0x34011447
34011420:	340114cd 	.word	0x340114cd
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011424:	f7f6 f872 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011428:	4603      	mov	r3, r0
3401142a:	4618      	mov	r0, r3
3401142c:	f7ff f966 	bl	340106fc <RCCEx_GetHCLKFreq>
34011430:	4603      	mov	r3, r0
34011432:	4618      	mov	r0, r3
34011434:	f7ff f973 	bl	3401071e <RCCEx_GetPCLK1Freq>
34011438:	60f8      	str	r0, [r7, #12]
      break;
3401143a:	e054      	b.n	340114e6 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401143c:	2007      	movs	r0, #7
3401143e:	f7ff fc49 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34011442:	60f8      	str	r0, [r7, #12]
      break;
34011444:	e04f      	b.n	340114e6 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34011446:	f7f7 fec3 	bl	340091d0 <LL_RCC_IC19_IsEnabled>
3401144a:	4603      	mov	r3, r0
3401144c:	2b00      	cmp	r3, #0
3401144e:	d047      	beq.n	340114e0 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34011450:	f7f7 fee0 	bl	34009214 <LL_RCC_IC19_GetDivider>
34011454:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34011456:	f7f7 fecf 	bl	340091f8 <LL_RCC_IC19_GetSource>
3401145a:	4603      	mov	r3, r0
3401145c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011460:	d029      	beq.n	340114b6 <RCCEx_GetFDCANCLKFreq+0xc2>
34011462:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011466:	d82f      	bhi.n	340114c8 <RCCEx_GetFDCANCLKFreq+0xd4>
34011468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401146c:	d01a      	beq.n	340114a4 <RCCEx_GetFDCANCLKFreq+0xb0>
3401146e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011472:	d829      	bhi.n	340114c8 <RCCEx_GetFDCANCLKFreq+0xd4>
34011474:	2b00      	cmp	r3, #0
34011476:	d003      	beq.n	34011480 <RCCEx_GetFDCANCLKFreq+0x8c>
34011478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401147c:	d009      	beq.n	34011492 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401147e:	e023      	b.n	340114c8 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011480:	f7ff f824 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011484:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011486:	68fa      	ldr	r2, [r7, #12]
34011488:	68bb      	ldr	r3, [r7, #8]
3401148a:	fbb2 f3f3 	udiv	r3, r2, r3
3401148e:	60fb      	str	r3, [r7, #12]
            break;
34011490:	e01b      	b.n	340114ca <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011492:	f7ff f861 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011496:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34011498:	68fa      	ldr	r2, [r7, #12]
3401149a:	68bb      	ldr	r3, [r7, #8]
3401149c:	fbb2 f3f3 	udiv	r3, r2, r3
340114a0:	60fb      	str	r3, [r7, #12]
            break;
340114a2:	e012      	b.n	340114ca <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340114a4:	f7ff f89e 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340114a8:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
340114aa:	68fa      	ldr	r2, [r7, #12]
340114ac:	68bb      	ldr	r3, [r7, #8]
340114ae:	fbb2 f3f3 	udiv	r3, r2, r3
340114b2:	60fb      	str	r3, [r7, #12]
            break;
340114b4:	e009      	b.n	340114ca <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340114b6:	f7ff f8db 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340114ba:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
340114bc:	68fa      	ldr	r2, [r7, #12]
340114be:	68bb      	ldr	r3, [r7, #8]
340114c0:	fbb2 f3f3 	udiv	r3, r2, r3
340114c4:	60fb      	str	r3, [r7, #12]
            break;
340114c6:	e000      	b.n	340114ca <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
340114c8:	bf00      	nop
        }
      }
      break;
340114ca:	e009      	b.n	340114e0 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340114cc:	f7f6 fc0a 	bl	34007ce4 <LL_RCC_HSE_IsReady>
340114d0:	4603      	mov	r3, r0
340114d2:	2b00      	cmp	r3, #0
340114d4:	d006      	beq.n	340114e4 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
340114d6:	4b06      	ldr	r3, [pc, #24]	@ (340114f0 <RCCEx_GetFDCANCLKFreq+0xfc>)
340114d8:	60fb      	str	r3, [r7, #12]
      }
      break;
340114da:	e003      	b.n	340114e4 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
340114dc:	bf00      	nop
340114de:	e002      	b.n	340114e6 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340114e0:	bf00      	nop
340114e2:	e000      	b.n	340114e6 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340114e4:	bf00      	nop
  }

  return fdcan_frequency;
340114e6:	68fb      	ldr	r3, [r7, #12]
}
340114e8:	4618      	mov	r0, r3
340114ea:	3710      	adds	r7, #16
340114ec:	46bd      	mov	sp, r7
340114ee:	bd80      	pop	{r7, pc}
340114f0:	02dc6c00 	.word	0x02dc6c00

340114f4 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
340114f4:	b580      	push	{r7, lr}
340114f6:	b084      	sub	sp, #16
340114f8:	af00      	add	r7, sp, #0
340114fa:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340114fc:	2300      	movs	r3, #0
340114fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34011500:	6878      	ldr	r0, [r7, #4]
34011502:	f7f6 ff35 	bl	34008370 <LL_RCC_GetFMCClockSource>
34011506:	4603      	mov	r3, r0
34011508:	2b30      	cmp	r3, #48	@ 0x30
3401150a:	d05d      	beq.n	340115c8 <RCCEx_GetFMCCLKFreq+0xd4>
3401150c:	2b30      	cmp	r3, #48	@ 0x30
3401150e:	f200 809e 	bhi.w	3401164e <RCCEx_GetFMCCLKFreq+0x15a>
34011512:	2b20      	cmp	r3, #32
34011514:	d014      	beq.n	34011540 <RCCEx_GetFMCCLKFreq+0x4c>
34011516:	2b20      	cmp	r3, #32
34011518:	f200 8099 	bhi.w	3401164e <RCCEx_GetFMCCLKFreq+0x15a>
3401151c:	2b00      	cmp	r3, #0
3401151e:	d002      	beq.n	34011526 <RCCEx_GetFMCCLKFreq+0x32>
34011520:	2b10      	cmp	r3, #16
34011522:	d008      	beq.n	34011536 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011524:	e093      	b.n	3401164e <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34011526:	f7f5 fff1 	bl	3400750c <HAL_RCC_GetSysClockFreq>
3401152a:	4603      	mov	r3, r0
3401152c:	4618      	mov	r0, r3
3401152e:	f7ff f8e5 	bl	340106fc <RCCEx_GetHCLKFreq>
34011532:	60f8      	str	r0, [r7, #12]
      break;
34011534:	e090      	b.n	34011658 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011536:	2007      	movs	r0, #7
34011538:	f7ff fbcc 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401153c:	60f8      	str	r0, [r7, #12]
      break;
3401153e:	e08b      	b.n	34011658 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34011540:	f7f7 fac6 	bl	34008ad0 <LL_RCC_IC3_IsEnabled>
34011544:	4603      	mov	r3, r0
34011546:	2b00      	cmp	r3, #0
34011548:	f000 8083 	beq.w	34011652 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
3401154c:	f7f7 fae2 	bl	34008b14 <LL_RCC_IC3_GetDivider>
34011550:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34011552:	f7f7 fad1 	bl	34008af8 <LL_RCC_IC3_GetSource>
34011556:	4603      	mov	r3, r0
34011558:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401155c:	d029      	beq.n	340115b2 <RCCEx_GetFMCCLKFreq+0xbe>
3401155e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011562:	d82f      	bhi.n	340115c4 <RCCEx_GetFMCCLKFreq+0xd0>
34011564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011568:	d01a      	beq.n	340115a0 <RCCEx_GetFMCCLKFreq+0xac>
3401156a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401156e:	d829      	bhi.n	340115c4 <RCCEx_GetFMCCLKFreq+0xd0>
34011570:	2b00      	cmp	r3, #0
34011572:	d003      	beq.n	3401157c <RCCEx_GetFMCCLKFreq+0x88>
34011574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011578:	d009      	beq.n	3401158e <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3401157a:	e023      	b.n	340115c4 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401157c:	f7fe ffa6 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011580:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011582:	68fa      	ldr	r2, [r7, #12]
34011584:	68bb      	ldr	r3, [r7, #8]
34011586:	fbb2 f3f3 	udiv	r3, r2, r3
3401158a:	60fb      	str	r3, [r7, #12]
            break;
3401158c:	e01b      	b.n	340115c6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401158e:	f7fe ffe3 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011592:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011594:	68fa      	ldr	r2, [r7, #12]
34011596:	68bb      	ldr	r3, [r7, #8]
34011598:	fbb2 f3f3 	udiv	r3, r2, r3
3401159c:	60fb      	str	r3, [r7, #12]
            break;
3401159e:	e012      	b.n	340115c6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340115a0:	f7ff f820 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340115a4:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
340115a6:	68fa      	ldr	r2, [r7, #12]
340115a8:	68bb      	ldr	r3, [r7, #8]
340115aa:	fbb2 f3f3 	udiv	r3, r2, r3
340115ae:	60fb      	str	r3, [r7, #12]
            break;
340115b0:	e009      	b.n	340115c6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340115b2:	f7ff f85d 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340115b6:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
340115b8:	68fa      	ldr	r2, [r7, #12]
340115ba:	68bb      	ldr	r3, [r7, #8]
340115bc:	fbb2 f3f3 	udiv	r3, r2, r3
340115c0:	60fb      	str	r3, [r7, #12]
            break;
340115c2:	e000      	b.n	340115c6 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
340115c4:	bf00      	nop
      break;
340115c6:	e044      	b.n	34011652 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
340115c8:	f7f7 fac2 	bl	34008b50 <LL_RCC_IC4_IsEnabled>
340115cc:	4603      	mov	r3, r0
340115ce:	2b00      	cmp	r3, #0
340115d0:	d041      	beq.n	34011656 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
340115d2:	f7f7 fadf 	bl	34008b94 <LL_RCC_IC4_GetDivider>
340115d6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340115d8:	f7f7 face 	bl	34008b78 <LL_RCC_IC4_GetSource>
340115dc:	4603      	mov	r3, r0
340115de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340115e2:	d029      	beq.n	34011638 <RCCEx_GetFMCCLKFreq+0x144>
340115e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340115e8:	d82f      	bhi.n	3401164a <RCCEx_GetFMCCLKFreq+0x156>
340115ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340115ee:	d01a      	beq.n	34011626 <RCCEx_GetFMCCLKFreq+0x132>
340115f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340115f4:	d829      	bhi.n	3401164a <RCCEx_GetFMCCLKFreq+0x156>
340115f6:	2b00      	cmp	r3, #0
340115f8:	d003      	beq.n	34011602 <RCCEx_GetFMCCLKFreq+0x10e>
340115fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340115fe:	d009      	beq.n	34011614 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34011600:	e023      	b.n	3401164a <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011602:	f7fe ff63 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011606:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34011608:	68fa      	ldr	r2, [r7, #12]
3401160a:	68bb      	ldr	r3, [r7, #8]
3401160c:	fbb2 f3f3 	udiv	r3, r2, r3
34011610:	60fb      	str	r3, [r7, #12]
            break;
34011612:	e01b      	b.n	3401164c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011614:	f7fe ffa0 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011618:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401161a:	68fa      	ldr	r2, [r7, #12]
3401161c:	68bb      	ldr	r3, [r7, #8]
3401161e:	fbb2 f3f3 	udiv	r3, r2, r3
34011622:	60fb      	str	r3, [r7, #12]
            break;
34011624:	e012      	b.n	3401164c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011626:	f7fe ffdd 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
3401162a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401162c:	68fa      	ldr	r2, [r7, #12]
3401162e:	68bb      	ldr	r3, [r7, #8]
34011630:	fbb2 f3f3 	udiv	r3, r2, r3
34011634:	60fb      	str	r3, [r7, #12]
            break;
34011636:	e009      	b.n	3401164c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011638:	f7ff f81a 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
3401163c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3401163e:	68fa      	ldr	r2, [r7, #12]
34011640:	68bb      	ldr	r3, [r7, #8]
34011642:	fbb2 f3f3 	udiv	r3, r2, r3
34011646:	60fb      	str	r3, [r7, #12]
            break;
34011648:	e000      	b.n	3401164c <RCCEx_GetFMCCLKFreq+0x158>
            break;
3401164a:	bf00      	nop
      break;
3401164c:	e003      	b.n	34011656 <RCCEx_GetFMCCLKFreq+0x162>
      break;
3401164e:	bf00      	nop
34011650:	e002      	b.n	34011658 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011652:	bf00      	nop
34011654:	e000      	b.n	34011658 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34011656:	bf00      	nop
  }

  return fmc_frequency;
34011658:	68fb      	ldr	r3, [r7, #12]
}
3401165a:	4618      	mov	r0, r3
3401165c:	3710      	adds	r7, #16
3401165e:	46bd      	mov	sp, r7
34011660:	bd80      	pop	{r7, pc}
	...

34011664 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34011664:	b580      	push	{r7, lr}
34011666:	b084      	sub	sp, #16
34011668:	af00      	add	r7, sp, #0
3401166a:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3401166c:	2300      	movs	r3, #0
3401166e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34011670:	6878      	ldr	r0, [r7, #4]
34011672:	f7f6 fe8f 	bl	34008394 <LL_RCC_GetI2CClockSource>
34011676:	4603      	mov	r3, r0
34011678:	4aa2      	ldr	r2, [pc, #648]	@ (34011904 <RCCEx_GetI2CCLKFreq+0x2a0>)
3401167a:	4293      	cmp	r3, r2
3401167c:	f000 8172 	beq.w	34011964 <RCCEx_GetI2CCLKFreq+0x300>
34011680:	4aa0      	ldr	r2, [pc, #640]	@ (34011904 <RCCEx_GetI2CCLKFreq+0x2a0>)
34011682:	4293      	cmp	r3, r2
34011684:	f200 8184 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011688:	4a9f      	ldr	r2, [pc, #636]	@ (34011908 <RCCEx_GetI2CCLKFreq+0x2a4>)
3401168a:	4293      	cmp	r3, r2
3401168c:	f000 816a 	beq.w	34011964 <RCCEx_GetI2CCLKFreq+0x300>
34011690:	4a9d      	ldr	r2, [pc, #628]	@ (34011908 <RCCEx_GetI2CCLKFreq+0x2a4>)
34011692:	4293      	cmp	r3, r2
34011694:	f200 817c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011698:	4a9c      	ldr	r2, [pc, #624]	@ (3401190c <RCCEx_GetI2CCLKFreq+0x2a8>)
3401169a:	4293      	cmp	r3, r2
3401169c:	f000 8162 	beq.w	34011964 <RCCEx_GetI2CCLKFreq+0x300>
340116a0:	4a9a      	ldr	r2, [pc, #616]	@ (3401190c <RCCEx_GetI2CCLKFreq+0x2a8>)
340116a2:	4293      	cmp	r3, r2
340116a4:	f200 8174 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116a8:	4a99      	ldr	r2, [pc, #612]	@ (34011910 <RCCEx_GetI2CCLKFreq+0x2ac>)
340116aa:	4293      	cmp	r3, r2
340116ac:	f000 815a 	beq.w	34011964 <RCCEx_GetI2CCLKFreq+0x300>
340116b0:	4a97      	ldr	r2, [pc, #604]	@ (34011910 <RCCEx_GetI2CCLKFreq+0x2ac>)
340116b2:	4293      	cmp	r3, r2
340116b4:	f200 816c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116b8:	4a96      	ldr	r2, [pc, #600]	@ (34011914 <RCCEx_GetI2CCLKFreq+0x2b0>)
340116ba:	4293      	cmp	r3, r2
340116bc:	f000 8160 	beq.w	34011980 <RCCEx_GetI2CCLKFreq+0x31c>
340116c0:	4a94      	ldr	r2, [pc, #592]	@ (34011914 <RCCEx_GetI2CCLKFreq+0x2b0>)
340116c2:	4293      	cmp	r3, r2
340116c4:	f200 8164 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116c8:	4a93      	ldr	r2, [pc, #588]	@ (34011918 <RCCEx_GetI2CCLKFreq+0x2b4>)
340116ca:	4293      	cmp	r3, r2
340116cc:	f000 8158 	beq.w	34011980 <RCCEx_GetI2CCLKFreq+0x31c>
340116d0:	4a91      	ldr	r2, [pc, #580]	@ (34011918 <RCCEx_GetI2CCLKFreq+0x2b4>)
340116d2:	4293      	cmp	r3, r2
340116d4:	f200 815c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116d8:	4a90      	ldr	r2, [pc, #576]	@ (3401191c <RCCEx_GetI2CCLKFreq+0x2b8>)
340116da:	4293      	cmp	r3, r2
340116dc:	f000 8150 	beq.w	34011980 <RCCEx_GetI2CCLKFreq+0x31c>
340116e0:	4a8e      	ldr	r2, [pc, #568]	@ (3401191c <RCCEx_GetI2CCLKFreq+0x2b8>)
340116e2:	4293      	cmp	r3, r2
340116e4:	f200 8154 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116e8:	4a8d      	ldr	r2, [pc, #564]	@ (34011920 <RCCEx_GetI2CCLKFreq+0x2bc>)
340116ea:	4293      	cmp	r3, r2
340116ec:	f000 8148 	beq.w	34011980 <RCCEx_GetI2CCLKFreq+0x31c>
340116f0:	4a8b      	ldr	r2, [pc, #556]	@ (34011920 <RCCEx_GetI2CCLKFreq+0x2bc>)
340116f2:	4293      	cmp	r3, r2
340116f4:	f200 814c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340116f8:	4a8a      	ldr	r2, [pc, #552]	@ (34011924 <RCCEx_GetI2CCLKFreq+0x2c0>)
340116fa:	4293      	cmp	r3, r2
340116fc:	f000 80be 	beq.w	3401187c <RCCEx_GetI2CCLKFreq+0x218>
34011700:	4a88      	ldr	r2, [pc, #544]	@ (34011924 <RCCEx_GetI2CCLKFreq+0x2c0>)
34011702:	4293      	cmp	r3, r2
34011704:	f200 8144 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011708:	4a87      	ldr	r2, [pc, #540]	@ (34011928 <RCCEx_GetI2CCLKFreq+0x2c4>)
3401170a:	4293      	cmp	r3, r2
3401170c:	f000 80b6 	beq.w	3401187c <RCCEx_GetI2CCLKFreq+0x218>
34011710:	4a85      	ldr	r2, [pc, #532]	@ (34011928 <RCCEx_GetI2CCLKFreq+0x2c4>)
34011712:	4293      	cmp	r3, r2
34011714:	f200 813c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011718:	4a84      	ldr	r2, [pc, #528]	@ (3401192c <RCCEx_GetI2CCLKFreq+0x2c8>)
3401171a:	4293      	cmp	r3, r2
3401171c:	f000 80ae 	beq.w	3401187c <RCCEx_GetI2CCLKFreq+0x218>
34011720:	4a82      	ldr	r2, [pc, #520]	@ (3401192c <RCCEx_GetI2CCLKFreq+0x2c8>)
34011722:	4293      	cmp	r3, r2
34011724:	f200 8134 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011728:	4a81      	ldr	r2, [pc, #516]	@ (34011930 <RCCEx_GetI2CCLKFreq+0x2cc>)
3401172a:	4293      	cmp	r3, r2
3401172c:	f000 80a6 	beq.w	3401187c <RCCEx_GetI2CCLKFreq+0x218>
34011730:	4a7f      	ldr	r2, [pc, #508]	@ (34011930 <RCCEx_GetI2CCLKFreq+0x2cc>)
34011732:	4293      	cmp	r3, r2
34011734:	f200 812c 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011738:	4a7e      	ldr	r2, [pc, #504]	@ (34011934 <RCCEx_GetI2CCLKFreq+0x2d0>)
3401173a:	4293      	cmp	r3, r2
3401173c:	d05a      	beq.n	340117f4 <RCCEx_GetI2CCLKFreq+0x190>
3401173e:	4a7d      	ldr	r2, [pc, #500]	@ (34011934 <RCCEx_GetI2CCLKFreq+0x2d0>)
34011740:	4293      	cmp	r3, r2
34011742:	f200 8125 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011746:	4a7c      	ldr	r2, [pc, #496]	@ (34011938 <RCCEx_GetI2CCLKFreq+0x2d4>)
34011748:	4293      	cmp	r3, r2
3401174a:	d053      	beq.n	340117f4 <RCCEx_GetI2CCLKFreq+0x190>
3401174c:	4a7a      	ldr	r2, [pc, #488]	@ (34011938 <RCCEx_GetI2CCLKFreq+0x2d4>)
3401174e:	4293      	cmp	r3, r2
34011750:	f200 811e 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011754:	4a79      	ldr	r2, [pc, #484]	@ (3401193c <RCCEx_GetI2CCLKFreq+0x2d8>)
34011756:	4293      	cmp	r3, r2
34011758:	d04c      	beq.n	340117f4 <RCCEx_GetI2CCLKFreq+0x190>
3401175a:	4a78      	ldr	r2, [pc, #480]	@ (3401193c <RCCEx_GetI2CCLKFreq+0x2d8>)
3401175c:	4293      	cmp	r3, r2
3401175e:	f200 8117 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011762:	4a77      	ldr	r2, [pc, #476]	@ (34011940 <RCCEx_GetI2CCLKFreq+0x2dc>)
34011764:	4293      	cmp	r3, r2
34011766:	d045      	beq.n	340117f4 <RCCEx_GetI2CCLKFreq+0x190>
34011768:	4a75      	ldr	r2, [pc, #468]	@ (34011940 <RCCEx_GetI2CCLKFreq+0x2dc>)
3401176a:	4293      	cmp	r3, r2
3401176c:	f200 8110 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
34011770:	4a74      	ldr	r2, [pc, #464]	@ (34011944 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011772:	4293      	cmp	r3, r2
34011774:	d039      	beq.n	340117ea <RCCEx_GetI2CCLKFreq+0x186>
34011776:	4a73      	ldr	r2, [pc, #460]	@ (34011944 <RCCEx_GetI2CCLKFreq+0x2e0>)
34011778:	4293      	cmp	r3, r2
3401177a:	f200 8109 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
3401177e:	4a72      	ldr	r2, [pc, #456]	@ (34011948 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011780:	4293      	cmp	r3, r2
34011782:	d032      	beq.n	340117ea <RCCEx_GetI2CCLKFreq+0x186>
34011784:	4a70      	ldr	r2, [pc, #448]	@ (34011948 <RCCEx_GetI2CCLKFreq+0x2e4>)
34011786:	4293      	cmp	r3, r2
34011788:	f200 8102 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
3401178c:	4a6f      	ldr	r2, [pc, #444]	@ (3401194c <RCCEx_GetI2CCLKFreq+0x2e8>)
3401178e:	4293      	cmp	r3, r2
34011790:	d02b      	beq.n	340117ea <RCCEx_GetI2CCLKFreq+0x186>
34011792:	4a6e      	ldr	r2, [pc, #440]	@ (3401194c <RCCEx_GetI2CCLKFreq+0x2e8>)
34011794:	4293      	cmp	r3, r2
34011796:	f200 80fb 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
3401179a:	4a6d      	ldr	r2, [pc, #436]	@ (34011950 <RCCEx_GetI2CCLKFreq+0x2ec>)
3401179c:	4293      	cmp	r3, r2
3401179e:	d024      	beq.n	340117ea <RCCEx_GetI2CCLKFreq+0x186>
340117a0:	4a6b      	ldr	r2, [pc, #428]	@ (34011950 <RCCEx_GetI2CCLKFreq+0x2ec>)
340117a2:	4293      	cmp	r3, r2
340117a4:	f200 80f4 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340117a8:	4a6a      	ldr	r2, [pc, #424]	@ (34011954 <RCCEx_GetI2CCLKFreq+0x2f0>)
340117aa:	4293      	cmp	r3, r2
340117ac:	d011      	beq.n	340117d2 <RCCEx_GetI2CCLKFreq+0x16e>
340117ae:	4a69      	ldr	r2, [pc, #420]	@ (34011954 <RCCEx_GetI2CCLKFreq+0x2f0>)
340117b0:	4293      	cmp	r3, r2
340117b2:	f200 80ed 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340117b6:	4a68      	ldr	r2, [pc, #416]	@ (34011958 <RCCEx_GetI2CCLKFreq+0x2f4>)
340117b8:	4293      	cmp	r3, r2
340117ba:	d00a      	beq.n	340117d2 <RCCEx_GetI2CCLKFreq+0x16e>
340117bc:	4a66      	ldr	r2, [pc, #408]	@ (34011958 <RCCEx_GetI2CCLKFreq+0x2f4>)
340117be:	4293      	cmp	r3, r2
340117c0:	f200 80e6 	bhi.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
340117c4:	4a65      	ldr	r2, [pc, #404]	@ (3401195c <RCCEx_GetI2CCLKFreq+0x2f8>)
340117c6:	4293      	cmp	r3, r2
340117c8:	d003      	beq.n	340117d2 <RCCEx_GetI2CCLKFreq+0x16e>
340117ca:	4a65      	ldr	r2, [pc, #404]	@ (34011960 <RCCEx_GetI2CCLKFreq+0x2fc>)
340117cc:	4293      	cmp	r3, r2
340117ce:	f040 80df 	bne.w	34011990 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340117d2:	f7f5 fe9b 	bl	3400750c <HAL_RCC_GetSysClockFreq>
340117d6:	4603      	mov	r3, r0
340117d8:	4618      	mov	r0, r3
340117da:	f7fe ff8f 	bl	340106fc <RCCEx_GetHCLKFreq>
340117de:	4603      	mov	r3, r0
340117e0:	4618      	mov	r0, r3
340117e2:	f7fe ff9c 	bl	3401071e <RCCEx_GetPCLK1Freq>
340117e6:	60f8      	str	r0, [r7, #12]
      break;
340117e8:	e0db      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340117ea:	2007      	movs	r0, #7
340117ec:	f7ff fa72 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
340117f0:	60f8      	str	r0, [r7, #12]
      break;
340117f2:	e0d6      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
340117f4:	f7f7 faec 	bl	34008dd0 <LL_RCC_IC10_IsEnabled>
340117f8:	4603      	mov	r3, r0
340117fa:	2b00      	cmp	r3, #0
340117fc:	f000 80ca 	beq.w	34011994 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011800:	f7f7 fb08 	bl	34008e14 <LL_RCC_IC10_GetDivider>
34011804:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011806:	f7f7 faf7 	bl	34008df8 <LL_RCC_IC10_GetSource>
3401180a:	4603      	mov	r3, r0
3401180c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011810:	d029      	beq.n	34011866 <RCCEx_GetI2CCLKFreq+0x202>
34011812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011816:	d82f      	bhi.n	34011878 <RCCEx_GetI2CCLKFreq+0x214>
34011818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401181c:	d01a      	beq.n	34011854 <RCCEx_GetI2CCLKFreq+0x1f0>
3401181e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011822:	d829      	bhi.n	34011878 <RCCEx_GetI2CCLKFreq+0x214>
34011824:	2b00      	cmp	r3, #0
34011826:	d003      	beq.n	34011830 <RCCEx_GetI2CCLKFreq+0x1cc>
34011828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401182c:	d009      	beq.n	34011842 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401182e:	e023      	b.n	34011878 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011830:	f7fe fe4c 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011834:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011836:	68fa      	ldr	r2, [r7, #12]
34011838:	68bb      	ldr	r3, [r7, #8]
3401183a:	fbb2 f3f3 	udiv	r3, r2, r3
3401183e:	60fb      	str	r3, [r7, #12]
            break;
34011840:	e01b      	b.n	3401187a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011842:	f7fe fe89 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011846:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34011848:	68fa      	ldr	r2, [r7, #12]
3401184a:	68bb      	ldr	r3, [r7, #8]
3401184c:	fbb2 f3f3 	udiv	r3, r2, r3
34011850:	60fb      	str	r3, [r7, #12]
            break;
34011852:	e012      	b.n	3401187a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011854:	f7fe fec6 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011858:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3401185a:	68fa      	ldr	r2, [r7, #12]
3401185c:	68bb      	ldr	r3, [r7, #8]
3401185e:	fbb2 f3f3 	udiv	r3, r2, r3
34011862:	60fb      	str	r3, [r7, #12]
            break;
34011864:	e009      	b.n	3401187a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011866:	f7fe ff03 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
3401186a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3401186c:	68fa      	ldr	r2, [r7, #12]
3401186e:	68bb      	ldr	r3, [r7, #8]
34011870:	fbb2 f3f3 	udiv	r3, r2, r3
34011874:	60fb      	str	r3, [r7, #12]
            break;
34011876:	e000      	b.n	3401187a <RCCEx_GetI2CCLKFreq+0x216>
            break;
34011878:	bf00      	nop
        }
      }
      break;
3401187a:	e08b      	b.n	34011994 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401187c:	f7f7 fba8 	bl	34008fd0 <LL_RCC_IC15_IsEnabled>
34011880:	4603      	mov	r3, r0
34011882:	2b00      	cmp	r3, #0
34011884:	f000 8088 	beq.w	34011998 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011888:	f7f7 fbc4 	bl	34009014 <LL_RCC_IC15_GetDivider>
3401188c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3401188e:	f7f7 fbb3 	bl	34008ff8 <LL_RCC_IC15_GetSource>
34011892:	4603      	mov	r3, r0
34011894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011898:	d029      	beq.n	340118ee <RCCEx_GetI2CCLKFreq+0x28a>
3401189a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401189e:	d82f      	bhi.n	34011900 <RCCEx_GetI2CCLKFreq+0x29c>
340118a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340118a4:	d01a      	beq.n	340118dc <RCCEx_GetI2CCLKFreq+0x278>
340118a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340118aa:	d829      	bhi.n	34011900 <RCCEx_GetI2CCLKFreq+0x29c>
340118ac:	2b00      	cmp	r3, #0
340118ae:	d003      	beq.n	340118b8 <RCCEx_GetI2CCLKFreq+0x254>
340118b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340118b4:	d009      	beq.n	340118ca <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340118b6:	e023      	b.n	34011900 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340118b8:	f7fe fe08 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340118bc:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340118be:	68fa      	ldr	r2, [r7, #12]
340118c0:	68bb      	ldr	r3, [r7, #8]
340118c2:	fbb2 f3f3 	udiv	r3, r2, r3
340118c6:	60fb      	str	r3, [r7, #12]
            break;
340118c8:	e01b      	b.n	34011902 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340118ca:	f7fe fe45 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340118ce:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340118d0:	68fa      	ldr	r2, [r7, #12]
340118d2:	68bb      	ldr	r3, [r7, #8]
340118d4:	fbb2 f3f3 	udiv	r3, r2, r3
340118d8:	60fb      	str	r3, [r7, #12]
            break;
340118da:	e012      	b.n	34011902 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340118dc:	f7fe fe82 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340118e0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340118e2:	68fa      	ldr	r2, [r7, #12]
340118e4:	68bb      	ldr	r3, [r7, #8]
340118e6:	fbb2 f3f3 	udiv	r3, r2, r3
340118ea:	60fb      	str	r3, [r7, #12]
            break;
340118ec:	e009      	b.n	34011902 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340118ee:	f7fe febf 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340118f2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340118f4:	68fa      	ldr	r2, [r7, #12]
340118f6:	68bb      	ldr	r3, [r7, #8]
340118f8:	fbb2 f3f3 	udiv	r3, r2, r3
340118fc:	60fb      	str	r3, [r7, #12]
            break;
340118fe:	e000      	b.n	34011902 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34011900:	bf00      	nop
        }
      }
      break;
34011902:	e049      	b.n	34011998 <RCCEx_GetI2CCLKFreq+0x334>
34011904:	07050c0c 	.word	0x07050c0c
34011908:	0705080c 	.word	0x0705080c
3401190c:	0705040c 	.word	0x0705040c
34011910:	0705000c 	.word	0x0705000c
34011914:	07040c0c 	.word	0x07040c0c
34011918:	0704080c 	.word	0x0704080c
3401191c:	0704040c 	.word	0x0704040c
34011920:	0704000c 	.word	0x0704000c
34011924:	07030c0c 	.word	0x07030c0c
34011928:	0703080c 	.word	0x0703080c
3401192c:	0703040c 	.word	0x0703040c
34011930:	0703000c 	.word	0x0703000c
34011934:	07020c0c 	.word	0x07020c0c
34011938:	0702080c 	.word	0x0702080c
3401193c:	0702040c 	.word	0x0702040c
34011940:	0702000c 	.word	0x0702000c
34011944:	07010c0c 	.word	0x07010c0c
34011948:	0701080c 	.word	0x0701080c
3401194c:	0701040c 	.word	0x0701040c
34011950:	0701000c 	.word	0x0701000c
34011954:	07000c0c 	.word	0x07000c0c
34011958:	0700080c 	.word	0x0700080c
3401195c:	0700000c 	.word	0x0700000c
34011960:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011964:	f7f6 f9d0 	bl	34007d08 <LL_RCC_HSI_IsReady>
34011968:	4603      	mov	r3, r0
3401196a:	2b00      	cmp	r3, #0
3401196c:	d016      	beq.n	3401199c <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401196e:	f7f6 f9dd 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34011972:	4603      	mov	r3, r0
34011974:	09db      	lsrs	r3, r3, #7
34011976:	4a0d      	ldr	r2, [pc, #52]	@ (340119ac <RCCEx_GetI2CCLKFreq+0x348>)
34011978:	fa22 f303 	lsr.w	r3, r2, r3
3401197c:	60fb      	str	r3, [r7, #12]
      }
      break;
3401197e:	e00d      	b.n	3401199c <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34011980:	f7f6 f9e2 	bl	34007d48 <LL_RCC_MSI_IsReady>
34011984:	4603      	mov	r3, r0
34011986:	2b00      	cmp	r3, #0
34011988:	d00a      	beq.n	340119a0 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3401198a:	4b09      	ldr	r3, [pc, #36]	@ (340119b0 <RCCEx_GetI2CCLKFreq+0x34c>)
3401198c:	60fb      	str	r3, [r7, #12]
      }
      break;
3401198e:	e007      	b.n	340119a0 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34011990:	bf00      	nop
34011992:	e006      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011994:	bf00      	nop
34011996:	e004      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34011998:	bf00      	nop
3401199a:	e002      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3401199c:	bf00      	nop
3401199e:	e000      	b.n	340119a2 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
340119a0:	bf00      	nop
  }

  return i2c_frequency;
340119a2:	68fb      	ldr	r3, [r7, #12]
}
340119a4:	4618      	mov	r0, r3
340119a6:	3710      	adds	r7, #16
340119a8:	46bd      	mov	sp, r7
340119aa:	bd80      	pop	{r7, pc}
340119ac:	03d09000 	.word	0x03d09000
340119b0:	003d0900 	.word	0x003d0900

340119b4 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
340119b4:	b580      	push	{r7, lr}
340119b6:	b084      	sub	sp, #16
340119b8:	af00      	add	r7, sp, #0
340119ba:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340119bc:	2300      	movs	r3, #0
340119be:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340119c0:	6878      	ldr	r0, [r7, #4]
340119c2:	f7f6 fcf3 	bl	340083ac <LL_RCC_GetI3CClockSource>
340119c6:	4603      	mov	r3, r0
340119c8:	4a86      	ldr	r2, [pc, #536]	@ (34011be4 <RCCEx_GetI3CCLKFreq+0x230>)
340119ca:	4293      	cmp	r3, r2
340119cc:	f000 80e6 	beq.w	34011b9c <RCCEx_GetI3CCLKFreq+0x1e8>
340119d0:	4a84      	ldr	r2, [pc, #528]	@ (34011be4 <RCCEx_GetI3CCLKFreq+0x230>)
340119d2:	4293      	cmp	r3, r2
340119d4:	f200 80f8 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
340119d8:	4a83      	ldr	r2, [pc, #524]	@ (34011be8 <RCCEx_GetI3CCLKFreq+0x234>)
340119da:	4293      	cmp	r3, r2
340119dc:	f000 80de 	beq.w	34011b9c <RCCEx_GetI3CCLKFreq+0x1e8>
340119e0:	4a81      	ldr	r2, [pc, #516]	@ (34011be8 <RCCEx_GetI3CCLKFreq+0x234>)
340119e2:	4293      	cmp	r3, r2
340119e4:	f200 80f0 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
340119e8:	4a80      	ldr	r2, [pc, #512]	@ (34011bec <RCCEx_GetI3CCLKFreq+0x238>)
340119ea:	4293      	cmp	r3, r2
340119ec:	f000 80e4 	beq.w	34011bb8 <RCCEx_GetI3CCLKFreq+0x204>
340119f0:	4a7e      	ldr	r2, [pc, #504]	@ (34011bec <RCCEx_GetI3CCLKFreq+0x238>)
340119f2:	4293      	cmp	r3, r2
340119f4:	f200 80e8 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
340119f8:	4a7d      	ldr	r2, [pc, #500]	@ (34011bf0 <RCCEx_GetI3CCLKFreq+0x23c>)
340119fa:	4293      	cmp	r3, r2
340119fc:	f000 80dc 	beq.w	34011bb8 <RCCEx_GetI3CCLKFreq+0x204>
34011a00:	4a7b      	ldr	r2, [pc, #492]	@ (34011bf0 <RCCEx_GetI3CCLKFreq+0x23c>)
34011a02:	4293      	cmp	r3, r2
34011a04:	f200 80e0 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a08:	4a7a      	ldr	r2, [pc, #488]	@ (34011bf4 <RCCEx_GetI3CCLKFreq+0x240>)
34011a0a:	4293      	cmp	r3, r2
34011a0c:	f000 8083 	beq.w	34011b16 <RCCEx_GetI3CCLKFreq+0x162>
34011a10:	4a78      	ldr	r2, [pc, #480]	@ (34011bf4 <RCCEx_GetI3CCLKFreq+0x240>)
34011a12:	4293      	cmp	r3, r2
34011a14:	f200 80d8 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a18:	4a77      	ldr	r2, [pc, #476]	@ (34011bf8 <RCCEx_GetI3CCLKFreq+0x244>)
34011a1a:	4293      	cmp	r3, r2
34011a1c:	d07b      	beq.n	34011b16 <RCCEx_GetI3CCLKFreq+0x162>
34011a1e:	4a76      	ldr	r2, [pc, #472]	@ (34011bf8 <RCCEx_GetI3CCLKFreq+0x244>)
34011a20:	4293      	cmp	r3, r2
34011a22:	f200 80d1 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a26:	4a75      	ldr	r2, [pc, #468]	@ (34011bfc <RCCEx_GetI3CCLKFreq+0x248>)
34011a28:	4293      	cmp	r3, r2
34011a2a:	d030      	beq.n	34011a8e <RCCEx_GetI3CCLKFreq+0xda>
34011a2c:	4a73      	ldr	r2, [pc, #460]	@ (34011bfc <RCCEx_GetI3CCLKFreq+0x248>)
34011a2e:	4293      	cmp	r3, r2
34011a30:	f200 80ca 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a34:	4a72      	ldr	r2, [pc, #456]	@ (34011c00 <RCCEx_GetI3CCLKFreq+0x24c>)
34011a36:	4293      	cmp	r3, r2
34011a38:	d029      	beq.n	34011a8e <RCCEx_GetI3CCLKFreq+0xda>
34011a3a:	4a71      	ldr	r2, [pc, #452]	@ (34011c00 <RCCEx_GetI3CCLKFreq+0x24c>)
34011a3c:	4293      	cmp	r3, r2
34011a3e:	f200 80c3 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a42:	4a70      	ldr	r2, [pc, #448]	@ (34011c04 <RCCEx_GetI3CCLKFreq+0x250>)
34011a44:	4293      	cmp	r3, r2
34011a46:	d01d      	beq.n	34011a84 <RCCEx_GetI3CCLKFreq+0xd0>
34011a48:	4a6e      	ldr	r2, [pc, #440]	@ (34011c04 <RCCEx_GetI3CCLKFreq+0x250>)
34011a4a:	4293      	cmp	r3, r2
34011a4c:	f200 80bc 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a50:	4a6d      	ldr	r2, [pc, #436]	@ (34011c08 <RCCEx_GetI3CCLKFreq+0x254>)
34011a52:	4293      	cmp	r3, r2
34011a54:	d016      	beq.n	34011a84 <RCCEx_GetI3CCLKFreq+0xd0>
34011a56:	4a6c      	ldr	r2, [pc, #432]	@ (34011c08 <RCCEx_GetI3CCLKFreq+0x254>)
34011a58:	4293      	cmp	r3, r2
34011a5a:	f200 80b5 	bhi.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
34011a5e:	4a6b      	ldr	r2, [pc, #428]	@ (34011c0c <RCCEx_GetI3CCLKFreq+0x258>)
34011a60:	4293      	cmp	r3, r2
34011a62:	d003      	beq.n	34011a6c <RCCEx_GetI3CCLKFreq+0xb8>
34011a64:	4a6a      	ldr	r2, [pc, #424]	@ (34011c10 <RCCEx_GetI3CCLKFreq+0x25c>)
34011a66:	4293      	cmp	r3, r2
34011a68:	f040 80ae 	bne.w	34011bc8 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011a6c:	f7f5 fd4e 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011a70:	4603      	mov	r3, r0
34011a72:	4618      	mov	r0, r3
34011a74:	f7fe fe42 	bl	340106fc <RCCEx_GetHCLKFreq>
34011a78:	4603      	mov	r3, r0
34011a7a:	4618      	mov	r0, r3
34011a7c:	f7fe fe4f 	bl	3401071e <RCCEx_GetPCLK1Freq>
34011a80:	60f8      	str	r0, [r7, #12]
      break;
34011a82:	e0aa      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011a84:	2007      	movs	r0, #7
34011a86:	f7ff f925 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34011a8a:	60f8      	str	r0, [r7, #12]
      break;
34011a8c:	e0a5      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34011a8e:	f7f7 f99f 	bl	34008dd0 <LL_RCC_IC10_IsEnabled>
34011a92:	4603      	mov	r3, r0
34011a94:	2b00      	cmp	r3, #0
34011a96:	f000 8099 	beq.w	34011bcc <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34011a9a:	f7f7 f9bb 	bl	34008e14 <LL_RCC_IC10_GetDivider>
34011a9e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34011aa0:	f7f7 f9aa 	bl	34008df8 <LL_RCC_IC10_GetSource>
34011aa4:	4603      	mov	r3, r0
34011aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011aaa:	d029      	beq.n	34011b00 <RCCEx_GetI3CCLKFreq+0x14c>
34011aac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011ab0:	d82f      	bhi.n	34011b12 <RCCEx_GetI3CCLKFreq+0x15e>
34011ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011ab6:	d01a      	beq.n	34011aee <RCCEx_GetI3CCLKFreq+0x13a>
34011ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011abc:	d829      	bhi.n	34011b12 <RCCEx_GetI3CCLKFreq+0x15e>
34011abe:	2b00      	cmp	r3, #0
34011ac0:	d003      	beq.n	34011aca <RCCEx_GetI3CCLKFreq+0x116>
34011ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011ac6:	d009      	beq.n	34011adc <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011ac8:	e023      	b.n	34011b12 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011aca:	f7fe fcff 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011ace:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011ad0:	68fa      	ldr	r2, [r7, #12]
34011ad2:	68bb      	ldr	r3, [r7, #8]
34011ad4:	fbb2 f3f3 	udiv	r3, r2, r3
34011ad8:	60fb      	str	r3, [r7, #12]
            break;
34011ada:	e01b      	b.n	34011b14 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011adc:	f7fe fd3c 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011ae0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011ae2:	68fa      	ldr	r2, [r7, #12]
34011ae4:	68bb      	ldr	r3, [r7, #8]
34011ae6:	fbb2 f3f3 	udiv	r3, r2, r3
34011aea:	60fb      	str	r3, [r7, #12]
            break;
34011aec:	e012      	b.n	34011b14 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011aee:	f7fe fd79 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011af2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011af4:	68fa      	ldr	r2, [r7, #12]
34011af6:	68bb      	ldr	r3, [r7, #8]
34011af8:	fbb2 f3f3 	udiv	r3, r2, r3
34011afc:	60fb      	str	r3, [r7, #12]
            break;
34011afe:	e009      	b.n	34011b14 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011b00:	f7fe fdb6 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34011b04:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011b06:	68fa      	ldr	r2, [r7, #12]
34011b08:	68bb      	ldr	r3, [r7, #8]
34011b0a:	fbb2 f3f3 	udiv	r3, r2, r3
34011b0e:	60fb      	str	r3, [r7, #12]
            break;
34011b10:	e000      	b.n	34011b14 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34011b12:	bf00      	nop
        }
      }
      break;
34011b14:	e05a      	b.n	34011bcc <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011b16:	f7f7 fa5b 	bl	34008fd0 <LL_RCC_IC15_IsEnabled>
34011b1a:	4603      	mov	r3, r0
34011b1c:	2b00      	cmp	r3, #0
34011b1e:	d057      	beq.n	34011bd0 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34011b20:	f7f7 fa78 	bl	34009014 <LL_RCC_IC15_GetDivider>
34011b24:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34011b26:	f7f7 fa67 	bl	34008ff8 <LL_RCC_IC15_GetSource>
34011b2a:	4603      	mov	r3, r0
34011b2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b30:	d029      	beq.n	34011b86 <RCCEx_GetI3CCLKFreq+0x1d2>
34011b32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011b36:	d82f      	bhi.n	34011b98 <RCCEx_GetI3CCLKFreq+0x1e4>
34011b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b3c:	d01a      	beq.n	34011b74 <RCCEx_GetI3CCLKFreq+0x1c0>
34011b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011b42:	d829      	bhi.n	34011b98 <RCCEx_GetI3CCLKFreq+0x1e4>
34011b44:	2b00      	cmp	r3, #0
34011b46:	d003      	beq.n	34011b50 <RCCEx_GetI3CCLKFreq+0x19c>
34011b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011b4c:	d009      	beq.n	34011b62 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34011b4e:	e023      	b.n	34011b98 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011b50:	f7fe fcbc 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011b54:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011b56:	68fa      	ldr	r2, [r7, #12]
34011b58:	68bb      	ldr	r3, [r7, #8]
34011b5a:	fbb2 f3f3 	udiv	r3, r2, r3
34011b5e:	60fb      	str	r3, [r7, #12]
            break;
34011b60:	e01b      	b.n	34011b9a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011b62:	f7fe fcf9 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011b66:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011b68:	68fa      	ldr	r2, [r7, #12]
34011b6a:	68bb      	ldr	r3, [r7, #8]
34011b6c:	fbb2 f3f3 	udiv	r3, r2, r3
34011b70:	60fb      	str	r3, [r7, #12]
            break;
34011b72:	e012      	b.n	34011b9a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011b74:	f7fe fd36 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011b78:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011b7a:	68fa      	ldr	r2, [r7, #12]
34011b7c:	68bb      	ldr	r3, [r7, #8]
34011b7e:	fbb2 f3f3 	udiv	r3, r2, r3
34011b82:	60fb      	str	r3, [r7, #12]
            break;
34011b84:	e009      	b.n	34011b9a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011b86:	f7fe fd73 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34011b8a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34011b8c:	68fa      	ldr	r2, [r7, #12]
34011b8e:	68bb      	ldr	r3, [r7, #8]
34011b90:	fbb2 f3f3 	udiv	r3, r2, r3
34011b94:	60fb      	str	r3, [r7, #12]
            break;
34011b96:	e000      	b.n	34011b9a <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34011b98:	bf00      	nop
        }
      }
      break;
34011b9a:	e019      	b.n	34011bd0 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34011b9c:	f7f6 f8b4 	bl	34007d08 <LL_RCC_HSI_IsReady>
34011ba0:	4603      	mov	r3, r0
34011ba2:	2b00      	cmp	r3, #0
34011ba4:	d016      	beq.n	34011bd4 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34011ba6:	f7f6 f8c1 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34011baa:	4603      	mov	r3, r0
34011bac:	09db      	lsrs	r3, r3, #7
34011bae:	4a19      	ldr	r2, [pc, #100]	@ (34011c14 <RCCEx_GetI3CCLKFreq+0x260>)
34011bb0:	fa22 f303 	lsr.w	r3, r2, r3
34011bb4:	60fb      	str	r3, [r7, #12]
      }
      break;
34011bb6:	e00d      	b.n	34011bd4 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34011bb8:	f7f6 f8c6 	bl	34007d48 <LL_RCC_MSI_IsReady>
34011bbc:	4603      	mov	r3, r0
34011bbe:	2b00      	cmp	r3, #0
34011bc0:	d00a      	beq.n	34011bd8 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34011bc2:	4b15      	ldr	r3, [pc, #84]	@ (34011c18 <RCCEx_GetI3CCLKFreq+0x264>)
34011bc4:	60fb      	str	r3, [r7, #12]
      }
      break;
34011bc6:	e007      	b.n	34011bd8 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34011bc8:	bf00      	nop
34011bca:	e006      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>
      break;
34011bcc:	bf00      	nop
34011bce:	e004      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>
      break;
34011bd0:	bf00      	nop
34011bd2:	e002      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>
      break;
34011bd4:	bf00      	nop
34011bd6:	e000      	b.n	34011bda <RCCEx_GetI3CCLKFreq+0x226>
      break;
34011bd8:	bf00      	nop
  }

  return i3c_frequency;
34011bda:	68fb      	ldr	r3, [r7, #12]
}
34011bdc:	4618      	mov	r0, r3
34011bde:	3710      	adds	r7, #16
34011be0:	46bd      	mov	sp, r7
34011be2:	bd80      	pop	{r7, pc}
34011be4:	0705140c 	.word	0x0705140c
34011be8:	0705100c 	.word	0x0705100c
34011bec:	0704140c 	.word	0x0704140c
34011bf0:	0704100c 	.word	0x0704100c
34011bf4:	0703140c 	.word	0x0703140c
34011bf8:	0703100c 	.word	0x0703100c
34011bfc:	0702140c 	.word	0x0702140c
34011c00:	0702100c 	.word	0x0702100c
34011c04:	0701140c 	.word	0x0701140c
34011c08:	0701100c 	.word	0x0701100c
34011c0c:	0700100c 	.word	0x0700100c
34011c10:	0700140c 	.word	0x0700140c
34011c14:	03d09000 	.word	0x03d09000
34011c18:	003d0900 	.word	0x003d0900

34011c1c <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34011c1c:	b590      	push	{r4, r7, lr}
34011c1e:	b085      	sub	sp, #20
34011c20:	af00      	add	r7, sp, #0
34011c22:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34011c24:	2300      	movs	r3, #0
34011c26:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34011c28:	6878      	ldr	r0, [r7, #4]
34011c2a:	f7f6 fbcb 	bl	340083c4 <LL_RCC_GetLPTIMClockSource>
34011c2e:	4603      	mov	r3, r0
34011c30:	4aa1      	ldr	r2, [pc, #644]	@ (34011eb8 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34011c32:	4293      	cmp	r3, r2
34011c34:	f000 8185 	beq.w	34011f42 <RCCEx_GetLPTIMCLKFreq+0x326>
34011c38:	4a9f      	ldr	r2, [pc, #636]	@ (34011eb8 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34011c3a:	4293      	cmp	r3, r2
34011c3c:	f200 818b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c40:	4a9e      	ldr	r2, [pc, #632]	@ (34011ebc <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34011c42:	4293      	cmp	r3, r2
34011c44:	f000 817d 	beq.w	34011f42 <RCCEx_GetLPTIMCLKFreq+0x326>
34011c48:	4a9c      	ldr	r2, [pc, #624]	@ (34011ebc <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34011c4a:	4293      	cmp	r3, r2
34011c4c:	f200 8183 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c50:	4a9b      	ldr	r2, [pc, #620]	@ (34011ec0 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34011c52:	4293      	cmp	r3, r2
34011c54:	f000 8175 	beq.w	34011f42 <RCCEx_GetLPTIMCLKFreq+0x326>
34011c58:	4a99      	ldr	r2, [pc, #612]	@ (34011ec0 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34011c5a:	4293      	cmp	r3, r2
34011c5c:	f200 817b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c60:	4a98      	ldr	r2, [pc, #608]	@ (34011ec4 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34011c62:	4293      	cmp	r3, r2
34011c64:	f000 816d 	beq.w	34011f42 <RCCEx_GetLPTIMCLKFreq+0x326>
34011c68:	4a96      	ldr	r2, [pc, #600]	@ (34011ec4 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34011c6a:	4293      	cmp	r3, r2
34011c6c:	f200 8173 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c70:	4a95      	ldr	r2, [pc, #596]	@ (34011ec8 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34011c72:	4293      	cmp	r3, r2
34011c74:	f000 8165 	beq.w	34011f42 <RCCEx_GetLPTIMCLKFreq+0x326>
34011c78:	4a93      	ldr	r2, [pc, #588]	@ (34011ec8 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34011c7a:	4293      	cmp	r3, r2
34011c7c:	f200 816b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c80:	4a92      	ldr	r2, [pc, #584]	@ (34011ecc <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34011c82:	4293      	cmp	r3, r2
34011c84:	f000 8154 	beq.w	34011f30 <RCCEx_GetLPTIMCLKFreq+0x314>
34011c88:	4a90      	ldr	r2, [pc, #576]	@ (34011ecc <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34011c8a:	4293      	cmp	r3, r2
34011c8c:	f200 8163 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011c90:	4a8f      	ldr	r2, [pc, #572]	@ (34011ed0 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34011c92:	4293      	cmp	r3, r2
34011c94:	f000 814c 	beq.w	34011f30 <RCCEx_GetLPTIMCLKFreq+0x314>
34011c98:	4a8d      	ldr	r2, [pc, #564]	@ (34011ed0 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34011c9a:	4293      	cmp	r3, r2
34011c9c:	f200 815b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011ca0:	4a8c      	ldr	r2, [pc, #560]	@ (34011ed4 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34011ca2:	4293      	cmp	r3, r2
34011ca4:	f000 8144 	beq.w	34011f30 <RCCEx_GetLPTIMCLKFreq+0x314>
34011ca8:	4a8a      	ldr	r2, [pc, #552]	@ (34011ed4 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34011caa:	4293      	cmp	r3, r2
34011cac:	f200 8153 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011cb0:	4a89      	ldr	r2, [pc, #548]	@ (34011ed8 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34011cb2:	4293      	cmp	r3, r2
34011cb4:	f000 813c 	beq.w	34011f30 <RCCEx_GetLPTIMCLKFreq+0x314>
34011cb8:	4a87      	ldr	r2, [pc, #540]	@ (34011ed8 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34011cba:	4293      	cmp	r3, r2
34011cbc:	f200 814b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011cc0:	4a86      	ldr	r2, [pc, #536]	@ (34011edc <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34011cc2:	4293      	cmp	r3, r2
34011cc4:	f000 8134 	beq.w	34011f30 <RCCEx_GetLPTIMCLKFreq+0x314>
34011cc8:	4a84      	ldr	r2, [pc, #528]	@ (34011edc <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34011cca:	4293      	cmp	r3, r2
34011ccc:	f200 8143 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011cd0:	4a83      	ldr	r2, [pc, #524]	@ (34011ee0 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34011cd2:	4293      	cmp	r3, r2
34011cd4:	f000 80e7 	beq.w	34011ea6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34011cd8:	4a81      	ldr	r2, [pc, #516]	@ (34011ee0 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34011cda:	4293      	cmp	r3, r2
34011cdc:	f200 813b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011ce0:	4a80      	ldr	r2, [pc, #512]	@ (34011ee4 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34011ce2:	4293      	cmp	r3, r2
34011ce4:	f000 80df 	beq.w	34011ea6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34011ce8:	4a7e      	ldr	r2, [pc, #504]	@ (34011ee4 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34011cea:	4293      	cmp	r3, r2
34011cec:	f200 8133 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011cf0:	4a7d      	ldr	r2, [pc, #500]	@ (34011ee8 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34011cf2:	4293      	cmp	r3, r2
34011cf4:	f000 80d7 	beq.w	34011ea6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34011cf8:	4a7b      	ldr	r2, [pc, #492]	@ (34011ee8 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34011cfa:	4293      	cmp	r3, r2
34011cfc:	f200 812b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d00:	4a7a      	ldr	r2, [pc, #488]	@ (34011eec <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34011d02:	4293      	cmp	r3, r2
34011d04:	f000 80cf 	beq.w	34011ea6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34011d08:	4a78      	ldr	r2, [pc, #480]	@ (34011eec <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34011d0a:	4293      	cmp	r3, r2
34011d0c:	f200 8123 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d10:	4a77      	ldr	r2, [pc, #476]	@ (34011ef0 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34011d12:	4293      	cmp	r3, r2
34011d14:	f000 80c7 	beq.w	34011ea6 <RCCEx_GetLPTIMCLKFreq+0x28a>
34011d18:	4a75      	ldr	r2, [pc, #468]	@ (34011ef0 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34011d1a:	4293      	cmp	r3, r2
34011d1c:	f200 811b 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d20:	4a74      	ldr	r2, [pc, #464]	@ (34011ef4 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34011d22:	4293      	cmp	r3, r2
34011d24:	d07b      	beq.n	34011e1e <RCCEx_GetLPTIMCLKFreq+0x202>
34011d26:	4a73      	ldr	r2, [pc, #460]	@ (34011ef4 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34011d28:	4293      	cmp	r3, r2
34011d2a:	f200 8114 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d2e:	4a72      	ldr	r2, [pc, #456]	@ (34011ef8 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34011d30:	4293      	cmp	r3, r2
34011d32:	d074      	beq.n	34011e1e <RCCEx_GetLPTIMCLKFreq+0x202>
34011d34:	4a70      	ldr	r2, [pc, #448]	@ (34011ef8 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34011d36:	4293      	cmp	r3, r2
34011d38:	f200 810d 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d3c:	4a6f      	ldr	r2, [pc, #444]	@ (34011efc <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34011d3e:	4293      	cmp	r3, r2
34011d40:	d06d      	beq.n	34011e1e <RCCEx_GetLPTIMCLKFreq+0x202>
34011d42:	4a6e      	ldr	r2, [pc, #440]	@ (34011efc <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34011d44:	4293      	cmp	r3, r2
34011d46:	f200 8106 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d4a:	4a6d      	ldr	r2, [pc, #436]	@ (34011f00 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34011d4c:	4293      	cmp	r3, r2
34011d4e:	d066      	beq.n	34011e1e <RCCEx_GetLPTIMCLKFreq+0x202>
34011d50:	4a6b      	ldr	r2, [pc, #428]	@ (34011f00 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34011d52:	4293      	cmp	r3, r2
34011d54:	f200 80ff 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d58:	4a6a      	ldr	r2, [pc, #424]	@ (34011f04 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34011d5a:	4293      	cmp	r3, r2
34011d5c:	d05f      	beq.n	34011e1e <RCCEx_GetLPTIMCLKFreq+0x202>
34011d5e:	4a69      	ldr	r2, [pc, #420]	@ (34011f04 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34011d60:	4293      	cmp	r3, r2
34011d62:	f200 80f8 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d66:	4a68      	ldr	r2, [pc, #416]	@ (34011f08 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34011d68:	4293      	cmp	r3, r2
34011d6a:	d053      	beq.n	34011e14 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34011d6c:	4a66      	ldr	r2, [pc, #408]	@ (34011f08 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34011d6e:	4293      	cmp	r3, r2
34011d70:	f200 80f1 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d74:	4a65      	ldr	r2, [pc, #404]	@ (34011f0c <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34011d76:	4293      	cmp	r3, r2
34011d78:	d04c      	beq.n	34011e14 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34011d7a:	4a64      	ldr	r2, [pc, #400]	@ (34011f0c <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34011d7c:	4293      	cmp	r3, r2
34011d7e:	f200 80ea 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d82:	4a63      	ldr	r2, [pc, #396]	@ (34011f10 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34011d84:	4293      	cmp	r3, r2
34011d86:	d045      	beq.n	34011e14 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34011d88:	4a61      	ldr	r2, [pc, #388]	@ (34011f10 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34011d8a:	4293      	cmp	r3, r2
34011d8c:	f200 80e3 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d90:	4a60      	ldr	r2, [pc, #384]	@ (34011f14 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34011d92:	4293      	cmp	r3, r2
34011d94:	d03e      	beq.n	34011e14 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34011d96:	4a5f      	ldr	r2, [pc, #380]	@ (34011f14 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34011d98:	4293      	cmp	r3, r2
34011d9a:	f200 80dc 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011d9e:	4a5e      	ldr	r2, [pc, #376]	@ (34011f18 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34011da0:	4293      	cmp	r3, r2
34011da2:	d037      	beq.n	34011e14 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34011da4:	4a5c      	ldr	r2, [pc, #368]	@ (34011f18 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34011da6:	4293      	cmp	r3, r2
34011da8:	f200 80d5 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011dac:	4a5b      	ldr	r2, [pc, #364]	@ (34011f1c <RCCEx_GetLPTIMCLKFreq+0x300>)
34011dae:	4293      	cmp	r3, r2
34011db0:	d024      	beq.n	34011dfc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34011db2:	4a5a      	ldr	r2, [pc, #360]	@ (34011f1c <RCCEx_GetLPTIMCLKFreq+0x300>)
34011db4:	4293      	cmp	r3, r2
34011db6:	f200 80ce 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011dba:	4a59      	ldr	r2, [pc, #356]	@ (34011f20 <RCCEx_GetLPTIMCLKFreq+0x304>)
34011dbc:	4293      	cmp	r3, r2
34011dbe:	d01d      	beq.n	34011dfc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34011dc0:	4a57      	ldr	r2, [pc, #348]	@ (34011f20 <RCCEx_GetLPTIMCLKFreq+0x304>)
34011dc2:	4293      	cmp	r3, r2
34011dc4:	f200 80c7 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011dc8:	4a56      	ldr	r2, [pc, #344]	@ (34011f24 <RCCEx_GetLPTIMCLKFreq+0x308>)
34011dca:	4293      	cmp	r3, r2
34011dcc:	d016      	beq.n	34011dfc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34011dce:	4a55      	ldr	r2, [pc, #340]	@ (34011f24 <RCCEx_GetLPTIMCLKFreq+0x308>)
34011dd0:	4293      	cmp	r3, r2
34011dd2:	f200 80c0 	bhi.w	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
34011dd6:	4a54      	ldr	r2, [pc, #336]	@ (34011f28 <RCCEx_GetLPTIMCLKFreq+0x30c>)
34011dd8:	4293      	cmp	r3, r2
34011dda:	d003      	beq.n	34011de4 <RCCEx_GetLPTIMCLKFreq+0x1c8>
34011ddc:	4a53      	ldr	r2, [pc, #332]	@ (34011f2c <RCCEx_GetLPTIMCLKFreq+0x310>)
34011dde:	4293      	cmp	r3, r2
34011de0:	d00c      	beq.n	34011dfc <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34011de2:	e0b8      	b.n	34011f56 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011de4:	f7f5 fb92 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011de8:	4603      	mov	r3, r0
34011dea:	4618      	mov	r0, r3
34011dec:	f7fe fc86 	bl	340106fc <RCCEx_GetHCLKFreq>
34011df0:	4603      	mov	r3, r0
34011df2:	4618      	mov	r0, r3
34011df4:	f7fe fc93 	bl	3401071e <RCCEx_GetPCLK1Freq>
34011df8:	60f8      	str	r0, [r7, #12]
      break;
34011dfa:	e0b3      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011dfc:	f7f5 fb86 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011e00:	4603      	mov	r3, r0
34011e02:	4618      	mov	r0, r3
34011e04:	f7fe fc7a 	bl	340106fc <RCCEx_GetHCLKFreq>
34011e08:	4603      	mov	r3, r0
34011e0a:	4618      	mov	r0, r3
34011e0c:	f7fe fca8 	bl	34010760 <RCCEx_GetPCLK4Freq>
34011e10:	60f8      	str	r0, [r7, #12]
      break;
34011e12:	e0a7      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011e14:	2007      	movs	r0, #7
34011e16:	f7fe ff5d 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34011e1a:	60f8      	str	r0, [r7, #12]
      break;
34011e1c:	e0a2      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34011e1e:	f7f7 f8d7 	bl	34008fd0 <LL_RCC_IC15_IsEnabled>
34011e22:	4603      	mov	r3, r0
34011e24:	2b00      	cmp	r3, #0
34011e26:	f000 8098 	beq.w	34011f5a <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34011e2a:	f7f7 f8f3 	bl	34009014 <LL_RCC_IC15_GetDivider>
34011e2e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34011e30:	f7f7 f8e2 	bl	34008ff8 <LL_RCC_IC15_GetSource>
34011e34:	4603      	mov	r3, r0
34011e36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011e3a:	d029      	beq.n	34011e90 <RCCEx_GetLPTIMCLKFreq+0x274>
34011e3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34011e40:	d82f      	bhi.n	34011ea2 <RCCEx_GetLPTIMCLKFreq+0x286>
34011e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011e46:	d01a      	beq.n	34011e7e <RCCEx_GetLPTIMCLKFreq+0x262>
34011e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34011e4c:	d829      	bhi.n	34011ea2 <RCCEx_GetLPTIMCLKFreq+0x286>
34011e4e:	2b00      	cmp	r3, #0
34011e50:	d003      	beq.n	34011e5a <RCCEx_GetLPTIMCLKFreq+0x23e>
34011e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34011e56:	d009      	beq.n	34011e6c <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34011e58:	e023      	b.n	34011ea2 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34011e5a:	f7fe fb37 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34011e5e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34011e60:	68fa      	ldr	r2, [r7, #12]
34011e62:	68bb      	ldr	r3, [r7, #8]
34011e64:	fbb2 f3f3 	udiv	r3, r2, r3
34011e68:	60fb      	str	r3, [r7, #12]
            break;
34011e6a:	e01b      	b.n	34011ea4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34011e6c:	f7fe fb74 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34011e70:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34011e72:	68fa      	ldr	r2, [r7, #12]
34011e74:	68bb      	ldr	r3, [r7, #8]
34011e76:	fbb2 f3f3 	udiv	r3, r2, r3
34011e7a:	60fb      	str	r3, [r7, #12]
            break;
34011e7c:	e012      	b.n	34011ea4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34011e7e:	f7fe fbb1 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34011e82:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34011e84:	68fa      	ldr	r2, [r7, #12]
34011e86:	68bb      	ldr	r3, [r7, #8]
34011e88:	fbb2 f3f3 	udiv	r3, r2, r3
34011e8c:	60fb      	str	r3, [r7, #12]
            break;
34011e8e:	e009      	b.n	34011ea4 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34011e90:	f7fe fbee 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34011e94:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34011e96:	68fa      	ldr	r2, [r7, #12]
34011e98:	68bb      	ldr	r3, [r7, #8]
34011e9a:	fbb2 f3f3 	udiv	r3, r2, r3
34011e9e:	60fb      	str	r3, [r7, #12]
            break;
34011ea0:	e000      	b.n	34011ea4 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
34011ea2:	bf00      	nop
      break;
34011ea4:	e059      	b.n	34011f5a <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
34011ea6:	f7f5 ff6f 	bl	34007d88 <LL_RCC_LSE_IsReady>
34011eaa:	4603      	mov	r3, r0
34011eac:	2b00      	cmp	r3, #0
34011eae:	d056      	beq.n	34011f5e <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
34011eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34011eb4:	60fb      	str	r3, [r7, #12]
      break;
34011eb6:	e052      	b.n	34011f5e <RCCEx_GetLPTIMCLKFreq+0x342>
34011eb8:	0705182c 	.word	0x0705182c
34011ebc:	0705142c 	.word	0x0705142c
34011ec0:	0705102c 	.word	0x0705102c
34011ec4:	07050c2c 	.word	0x07050c2c
34011ec8:	0705082c 	.word	0x0705082c
34011ecc:	0704182c 	.word	0x0704182c
34011ed0:	0704142c 	.word	0x0704142c
34011ed4:	0704102c 	.word	0x0704102c
34011ed8:	07040c2c 	.word	0x07040c2c
34011edc:	0704082c 	.word	0x0704082c
34011ee0:	0703182c 	.word	0x0703182c
34011ee4:	0703142c 	.word	0x0703142c
34011ee8:	0703102c 	.word	0x0703102c
34011eec:	07030c2c 	.word	0x07030c2c
34011ef0:	0703082c 	.word	0x0703082c
34011ef4:	0702182c 	.word	0x0702182c
34011ef8:	0702142c 	.word	0x0702142c
34011efc:	0702102c 	.word	0x0702102c
34011f00:	07020c2c 	.word	0x07020c2c
34011f04:	0702082c 	.word	0x0702082c
34011f08:	0701182c 	.word	0x0701182c
34011f0c:	0701142c 	.word	0x0701142c
34011f10:	0701102c 	.word	0x0701102c
34011f14:	07010c2c 	.word	0x07010c2c
34011f18:	0701082c 	.word	0x0701082c
34011f1c:	0700182c 	.word	0x0700182c
34011f20:	0700142c 	.word	0x0700142c
34011f24:	0700102c 	.word	0x0700102c
34011f28:	0700082c 	.word	0x0700082c
34011f2c:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34011f30:	f7f5 ff3c 	bl	34007dac <LL_RCC_LSI_IsReady>
34011f34:	4603      	mov	r3, r0
34011f36:	2b00      	cmp	r3, #0
34011f38:	d013      	beq.n	34011f62 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34011f3a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34011f3e:	60fb      	str	r3, [r7, #12]
      break;
34011f40:	e00f      	b.n	34011f62 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34011f42:	f7f5 fae3 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011f46:	4604      	mov	r4, r0
34011f48:	f7f6 fb46 	bl	340085d8 <LL_RCC_GetTIMPrescaler>
34011f4c:	4603      	mov	r3, r0
34011f4e:	fa24 f303 	lsr.w	r3, r4, r3
34011f52:	60fb      	str	r3, [r7, #12]
      break;
34011f54:	e006      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34011f56:	bf00      	nop
34011f58:	e004      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34011f5a:	bf00      	nop
34011f5c:	e002      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34011f5e:	bf00      	nop
34011f60:	e000      	b.n	34011f64 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34011f62:	bf00      	nop
  }

  return lptim_frequency;
34011f64:	68fb      	ldr	r3, [r7, #12]
}
34011f66:	4618      	mov	r0, r3
34011f68:	3714      	adds	r7, #20
34011f6a:	46bd      	mov	sp, r7
34011f6c:	bd90      	pop	{r4, r7, pc}
34011f6e:	bf00      	nop

34011f70 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
34011f70:	b580      	push	{r7, lr}
34011f72:	b084      	sub	sp, #16
34011f74:	af00      	add	r7, sp, #0
34011f76:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34011f78:	2300      	movs	r3, #0
34011f7a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34011f7c:	6878      	ldr	r0, [r7, #4]
34011f7e:	f7f6 fa2d 	bl	340083dc <LL_RCC_GetLPUARTClockSource>
34011f82:	4603      	mov	r3, r0
34011f84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34011f88:	f000 80c0 	beq.w	3401210c <RCCEx_GetLPUARTCLKFreq+0x19c>
34011f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34011f90:	f200 80db 	bhi.w	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
34011f94:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34011f98:	f000 80c6 	beq.w	34012128 <RCCEx_GetLPUARTCLKFreq+0x1b8>
34011f9c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34011fa0:	f200 80d3 	bhi.w	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
34011fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34011fa8:	f000 80c6 	beq.w	34012138 <RCCEx_GetLPUARTCLKFreq+0x1c8>
34011fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34011fb0:	f200 80cb 	bhi.w	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
34011fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34011fb8:	d065      	beq.n	34012086 <RCCEx_GetLPUARTCLKFreq+0x116>
34011fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34011fbe:	f200 80c4 	bhi.w	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
34011fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34011fc6:	d01a      	beq.n	34011ffe <RCCEx_GetLPUARTCLKFreq+0x8e>
34011fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34011fcc:	f200 80bd 	bhi.w	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
34011fd0:	2b00      	cmp	r3, #0
34011fd2:	d003      	beq.n	34011fdc <RCCEx_GetLPUARTCLKFreq+0x6c>
34011fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34011fd8:	d00c      	beq.n	34011ff4 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
34011fda:	e0b6      	b.n	3401214a <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34011fdc:	f7f5 fa96 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34011fe0:	4603      	mov	r3, r0
34011fe2:	4618      	mov	r0, r3
34011fe4:	f7fe fb8a 	bl	340106fc <RCCEx_GetHCLKFreq>
34011fe8:	4603      	mov	r3, r0
34011fea:	4618      	mov	r0, r3
34011fec:	f7fe fbb8 	bl	34010760 <RCCEx_GetPCLK4Freq>
34011ff0:	60f8      	str	r0, [r7, #12]
      break;
34011ff2:	e0b5      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34011ff4:	2007      	movs	r0, #7
34011ff6:	f7fe fe6d 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34011ffa:	60f8      	str	r0, [r7, #12]
      break;
34011ffc:	e0b0      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34011ffe:	f7f6 fea7 	bl	34008d50 <LL_RCC_IC9_IsEnabled>
34012002:	4603      	mov	r3, r0
34012004:	2b00      	cmp	r3, #0
34012006:	f000 80a2 	beq.w	3401214e <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3401200a:	f7f6 fec3 	bl	34008d94 <LL_RCC_IC9_GetDivider>
3401200e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34012010:	f7f6 feb2 	bl	34008d78 <LL_RCC_IC9_GetSource>
34012014:	4603      	mov	r3, r0
34012016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401201a:	d029      	beq.n	34012070 <RCCEx_GetLPUARTCLKFreq+0x100>
3401201c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012020:	d82f      	bhi.n	34012082 <RCCEx_GetLPUARTCLKFreq+0x112>
34012022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012026:	d01a      	beq.n	3401205e <RCCEx_GetLPUARTCLKFreq+0xee>
34012028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401202c:	d829      	bhi.n	34012082 <RCCEx_GetLPUARTCLKFreq+0x112>
3401202e:	2b00      	cmp	r3, #0
34012030:	d003      	beq.n	3401203a <RCCEx_GetLPUARTCLKFreq+0xca>
34012032:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012036:	d009      	beq.n	3401204c <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34012038:	e023      	b.n	34012082 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401203a:	f7fe fa47 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401203e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012040:	68fa      	ldr	r2, [r7, #12]
34012042:	68bb      	ldr	r3, [r7, #8]
34012044:	fbb2 f3f3 	udiv	r3, r2, r3
34012048:	60fb      	str	r3, [r7, #12]
            break;
3401204a:	e01b      	b.n	34012084 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401204c:	f7fe fa84 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012050:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012052:	68fa      	ldr	r2, [r7, #12]
34012054:	68bb      	ldr	r3, [r7, #8]
34012056:	fbb2 f3f3 	udiv	r3, r2, r3
3401205a:	60fb      	str	r3, [r7, #12]
            break;
3401205c:	e012      	b.n	34012084 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401205e:	f7fe fac1 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012062:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012064:	68fa      	ldr	r2, [r7, #12]
34012066:	68bb      	ldr	r3, [r7, #8]
34012068:	fbb2 f3f3 	udiv	r3, r2, r3
3401206c:	60fb      	str	r3, [r7, #12]
            break;
3401206e:	e009      	b.n	34012084 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012070:	f7fe fafe 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012074:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34012076:	68fa      	ldr	r2, [r7, #12]
34012078:	68bb      	ldr	r3, [r7, #8]
3401207a:	fbb2 f3f3 	udiv	r3, r2, r3
3401207e:	60fb      	str	r3, [r7, #12]
            break;
34012080:	e000      	b.n	34012084 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
34012082:	bf00      	nop
      break;
34012084:	e063      	b.n	3401214e <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34012086:	f7f6 ff63 	bl	34008f50 <LL_RCC_IC14_IsEnabled>
3401208a:	4603      	mov	r3, r0
3401208c:	2b00      	cmp	r3, #0
3401208e:	d060      	beq.n	34012152 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
34012090:	f7f6 ff80 	bl	34008f94 <LL_RCC_IC14_GetDivider>
34012094:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34012096:	f7f6 ff6f 	bl	34008f78 <LL_RCC_IC14_GetSource>
3401209a:	4603      	mov	r3, r0
3401209c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340120a0:	d029      	beq.n	340120f6 <RCCEx_GetLPUARTCLKFreq+0x186>
340120a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340120a6:	d82f      	bhi.n	34012108 <RCCEx_GetLPUARTCLKFreq+0x198>
340120a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340120ac:	d01a      	beq.n	340120e4 <RCCEx_GetLPUARTCLKFreq+0x174>
340120ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340120b2:	d829      	bhi.n	34012108 <RCCEx_GetLPUARTCLKFreq+0x198>
340120b4:	2b00      	cmp	r3, #0
340120b6:	d003      	beq.n	340120c0 <RCCEx_GetLPUARTCLKFreq+0x150>
340120b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340120bc:	d009      	beq.n	340120d2 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
340120be:	e023      	b.n	34012108 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340120c0:	f7fe fa04 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340120c4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340120c6:	68fa      	ldr	r2, [r7, #12]
340120c8:	68bb      	ldr	r3, [r7, #8]
340120ca:	fbb2 f3f3 	udiv	r3, r2, r3
340120ce:	60fb      	str	r3, [r7, #12]
            break;
340120d0:	e01b      	b.n	3401210a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340120d2:	f7fe fa41 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340120d6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340120d8:	68fa      	ldr	r2, [r7, #12]
340120da:	68bb      	ldr	r3, [r7, #8]
340120dc:	fbb2 f3f3 	udiv	r3, r2, r3
340120e0:	60fb      	str	r3, [r7, #12]
            break;
340120e2:	e012      	b.n	3401210a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340120e4:	f7fe fa7e 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340120e8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340120ea:	68fa      	ldr	r2, [r7, #12]
340120ec:	68bb      	ldr	r3, [r7, #8]
340120ee:	fbb2 f3f3 	udiv	r3, r2, r3
340120f2:	60fb      	str	r3, [r7, #12]
            break;
340120f4:	e009      	b.n	3401210a <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340120f6:	f7fe fabb 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340120fa:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340120fc:	68fa      	ldr	r2, [r7, #12]
340120fe:	68bb      	ldr	r3, [r7, #8]
34012100:	fbb2 f3f3 	udiv	r3, r2, r3
34012104:	60fb      	str	r3, [r7, #12]
            break;
34012106:	e000      	b.n	3401210a <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
34012108:	bf00      	nop
      break;
3401210a:	e022      	b.n	34012152 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
3401210c:	f7f5 fdfc 	bl	34007d08 <LL_RCC_HSI_IsReady>
34012110:	4603      	mov	r3, r0
34012112:	2b00      	cmp	r3, #0
34012114:	d01f      	beq.n	34012156 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012116:	f7f5 fe09 	bl	34007d2c <LL_RCC_HSI_GetDivider>
3401211a:	4603      	mov	r3, r0
3401211c:	09db      	lsrs	r3, r3, #7
3401211e:	4a13      	ldr	r2, [pc, #76]	@ (3401216c <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34012120:	fa22 f303 	lsr.w	r3, r2, r3
34012124:	60fb      	str	r3, [r7, #12]
      break;
34012126:	e016      	b.n	34012156 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012128:	f7f5 fe0e 	bl	34007d48 <LL_RCC_MSI_IsReady>
3401212c:	4603      	mov	r3, r0
3401212e:	2b00      	cmp	r3, #0
34012130:	d013      	beq.n	3401215a <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34012132:	4b0f      	ldr	r3, [pc, #60]	@ (34012170 <RCCEx_GetLPUARTCLKFreq+0x200>)
34012134:	60fb      	str	r3, [r7, #12]
      break;
34012136:	e010      	b.n	3401215a <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34012138:	f7f5 fe26 	bl	34007d88 <LL_RCC_LSE_IsReady>
3401213c:	4603      	mov	r3, r0
3401213e:	2b00      	cmp	r3, #0
34012140:	d00d      	beq.n	3401215e <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34012142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34012146:	60fb      	str	r3, [r7, #12]
      break;
34012148:	e009      	b.n	3401215e <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3401214a:	bf00      	nop
3401214c:	e008      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401214e:	bf00      	nop
34012150:	e006      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012152:	bf00      	nop
34012154:	e004      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34012156:	bf00      	nop
34012158:	e002      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401215a:	bf00      	nop
3401215c:	e000      	b.n	34012160 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3401215e:	bf00      	nop
  }

  return lpuart_frequency;
34012160:	68fb      	ldr	r3, [r7, #12]
}
34012162:	4618      	mov	r0, r3
34012164:	3710      	adds	r7, #16
34012166:	46bd      	mov	sp, r7
34012168:	bd80      	pop	{r7, pc}
3401216a:	bf00      	nop
3401216c:	03d09000 	.word	0x03d09000
34012170:	003d0900 	.word	0x003d0900

34012174 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34012174:	b580      	push	{r7, lr}
34012176:	b084      	sub	sp, #16
34012178:	af00      	add	r7, sp, #0
3401217a:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3401217c:	2300      	movs	r3, #0
3401217e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34012180:	6878      	ldr	r0, [r7, #4]
34012182:	f7f6 f93d 	bl	34008400 <LL_RCC_GetLTDCClockSource>
34012186:	4603      	mov	r3, r0
34012188:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401218c:	d062      	beq.n	34012254 <RCCEx_GetLTDCCLKFreq+0xe0>
3401218e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34012192:	d86d      	bhi.n	34012270 <RCCEx_GetLTDCCLKFreq+0xfc>
34012194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34012198:	d019      	beq.n	340121ce <RCCEx_GetLTDCCLKFreq+0x5a>
3401219a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401219e:	d867      	bhi.n	34012270 <RCCEx_GetLTDCCLKFreq+0xfc>
340121a0:	2b00      	cmp	r3, #0
340121a2:	d003      	beq.n	340121ac <RCCEx_GetLTDCCLKFreq+0x38>
340121a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340121a8:	d00c      	beq.n	340121c4 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
340121aa:	e061      	b.n	34012270 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340121ac:	f7f5 f9ae 	bl	3400750c <HAL_RCC_GetSysClockFreq>
340121b0:	4603      	mov	r3, r0
340121b2:	4618      	mov	r0, r3
340121b4:	f7fe faa2 	bl	340106fc <RCCEx_GetHCLKFreq>
340121b8:	4603      	mov	r3, r0
340121ba:	4618      	mov	r0, r3
340121bc:	f7fe fae1 	bl	34010782 <RCCEx_GetPCLK5Freq>
340121c0:	60f8      	str	r0, [r7, #12]
      break;
340121c2:	e05a      	b.n	3401227a <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340121c4:	2007      	movs	r0, #7
340121c6:	f7fe fd85 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
340121ca:	60f8      	str	r0, [r7, #12]
      break;
340121cc:	e055      	b.n	3401227a <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
340121ce:	f7f6 ff3f 	bl	34009050 <LL_RCC_IC16_IsEnabled>
340121d2:	4603      	mov	r3, r0
340121d4:	2b00      	cmp	r3, #0
340121d6:	d04d      	beq.n	34012274 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
340121d8:	f7f6 ff5c 	bl	34009094 <LL_RCC_IC16_GetDivider>
340121dc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
340121de:	f7f6 ff4b 	bl	34009078 <LL_RCC_IC16_GetSource>
340121e2:	4603      	mov	r3, r0
340121e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340121e8:	d029      	beq.n	3401223e <RCCEx_GetLTDCCLKFreq+0xca>
340121ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340121ee:	d82f      	bhi.n	34012250 <RCCEx_GetLTDCCLKFreq+0xdc>
340121f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121f4:	d01a      	beq.n	3401222c <RCCEx_GetLTDCCLKFreq+0xb8>
340121f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340121fa:	d829      	bhi.n	34012250 <RCCEx_GetLTDCCLKFreq+0xdc>
340121fc:	2b00      	cmp	r3, #0
340121fe:	d003      	beq.n	34012208 <RCCEx_GetLTDCCLKFreq+0x94>
34012200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012204:	d009      	beq.n	3401221a <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
34012206:	e023      	b.n	34012250 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012208:	f7fe f960 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401220c:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3401220e:	68fa      	ldr	r2, [r7, #12]
34012210:	68bb      	ldr	r3, [r7, #8]
34012212:	fbb2 f3f3 	udiv	r3, r2, r3
34012216:	60fb      	str	r3, [r7, #12]
            break;
34012218:	e01b      	b.n	34012252 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401221a:	f7fe f99d 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
3401221e:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012220:	68fa      	ldr	r2, [r7, #12]
34012222:	68bb      	ldr	r3, [r7, #8]
34012224:	fbb2 f3f3 	udiv	r3, r2, r3
34012228:	60fb      	str	r3, [r7, #12]
            break;
3401222a:	e012      	b.n	34012252 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401222c:	f7fe f9da 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012230:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012232:	68fa      	ldr	r2, [r7, #12]
34012234:	68bb      	ldr	r3, [r7, #8]
34012236:	fbb2 f3f3 	udiv	r3, r2, r3
3401223a:	60fb      	str	r3, [r7, #12]
            break;
3401223c:	e009      	b.n	34012252 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401223e:	f7fe fa17 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012242:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34012244:	68fa      	ldr	r2, [r7, #12]
34012246:	68bb      	ldr	r3, [r7, #8]
34012248:	fbb2 f3f3 	udiv	r3, r2, r3
3401224c:	60fb      	str	r3, [r7, #12]
            break;
3401224e:	e000      	b.n	34012252 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34012250:	bf00      	nop
      break;
34012252:	e00f      	b.n	34012274 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34012254:	f7f5 fd58 	bl	34007d08 <LL_RCC_HSI_IsReady>
34012258:	4603      	mov	r3, r0
3401225a:	2b00      	cmp	r3, #0
3401225c:	d00c      	beq.n	34012278 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401225e:	f7f5 fd65 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34012262:	4603      	mov	r3, r0
34012264:	09db      	lsrs	r3, r3, #7
34012266:	4a07      	ldr	r2, [pc, #28]	@ (34012284 <RCCEx_GetLTDCCLKFreq+0x110>)
34012268:	fa22 f303 	lsr.w	r3, r2, r3
3401226c:	60fb      	str	r3, [r7, #12]
      break;
3401226e:	e003      	b.n	34012278 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34012270:	bf00      	nop
34012272:	e002      	b.n	3401227a <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012274:	bf00      	nop
34012276:	e000      	b.n	3401227a <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34012278:	bf00      	nop
  }

  return ltdc_frequency;
3401227a:	68fb      	ldr	r3, [r7, #12]
}
3401227c:	4618      	mov	r0, r3
3401227e:	3710      	adds	r7, #16
34012280:	46bd      	mov	sp, r7
34012282:	bd80      	pop	{r7, pc}
34012284:	03d09000 	.word	0x03d09000

34012288 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34012288:	b590      	push	{r4, r7, lr}
3401228a:	b085      	sub	sp, #20
3401228c:	af00      	add	r7, sp, #0
3401228e:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34012290:	2300      	movs	r3, #0
34012292:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34012294:	6878      	ldr	r0, [r7, #4]
34012296:	f7f6 f8c5 	bl	34008424 <LL_RCC_GetMDFClockSource>
3401229a:	4603      	mov	r3, r0
3401229c:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340122a0:	f000 80dd 	beq.w	3401245e <RCCEx_GetMDFCLKFreq+0x1d6>
340122a4:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
340122a8:	f200 80e3 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340122b0:	f000 80d2 	beq.w	34012458 <RCCEx_GetMDFCLKFreq+0x1d0>
340122b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340122b8:	f200 80db 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340122c0:	f000 80b4 	beq.w	3401242c <RCCEx_GetMDFCLKFreq+0x1a4>
340122c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340122c8:	f200 80d3 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340122d0:	f000 80ba 	beq.w	34012448 <RCCEx_GetMDFCLKFreq+0x1c0>
340122d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340122d8:	f200 80cb 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340122e0:	d061      	beq.n	340123a6 <RCCEx_GetMDFCLKFreq+0x11e>
340122e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340122e6:	f200 80c4 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340122ee:	d016      	beq.n	3401231e <RCCEx_GetMDFCLKFreq+0x96>
340122f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340122f4:	f200 80bd 	bhi.w	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
340122f8:	2b00      	cmp	r3, #0
340122fa:	d003      	beq.n	34012304 <RCCEx_GetMDFCLKFreq+0x7c>
340122fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34012300:	d008      	beq.n	34012314 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34012302:	e0b6      	b.n	34012472 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012304:	f7f5 f902 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34012308:	4603      	mov	r3, r0
3401230a:	4618      	mov	r0, r3
3401230c:	f7fe f9f6 	bl	340106fc <RCCEx_GetHCLKFreq>
34012310:	60f8      	str	r0, [r7, #12]
      break;
34012312:	e0b7      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012314:	2007      	movs	r0, #7
34012316:	f7fe fcdd 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401231a:	60f8      	str	r0, [r7, #12]
      break;
3401231c:	e0b2      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401231e:	f7f6 fc97 	bl	34008c50 <LL_RCC_IC7_IsEnabled>
34012322:	4603      	mov	r3, r0
34012324:	2b00      	cmp	r3, #0
34012326:	f000 80a6 	beq.w	34012476 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3401232a:	f7f6 fcb3 	bl	34008c94 <LL_RCC_IC7_GetDivider>
3401232e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012330:	f7f6 fca2 	bl	34008c78 <LL_RCC_IC7_GetSource>
34012334:	4603      	mov	r3, r0
34012336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401233a:	d029      	beq.n	34012390 <RCCEx_GetMDFCLKFreq+0x108>
3401233c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012340:	d82f      	bhi.n	340123a2 <RCCEx_GetMDFCLKFreq+0x11a>
34012342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012346:	d01a      	beq.n	3401237e <RCCEx_GetMDFCLKFreq+0xf6>
34012348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401234c:	d829      	bhi.n	340123a2 <RCCEx_GetMDFCLKFreq+0x11a>
3401234e:	2b00      	cmp	r3, #0
34012350:	d003      	beq.n	3401235a <RCCEx_GetMDFCLKFreq+0xd2>
34012352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012356:	d009      	beq.n	3401236c <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34012358:	e023      	b.n	340123a2 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401235a:	f7fe f8b7 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401235e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012360:	68fa      	ldr	r2, [r7, #12]
34012362:	68bb      	ldr	r3, [r7, #8]
34012364:	fbb2 f3f3 	udiv	r3, r2, r3
34012368:	60fb      	str	r3, [r7, #12]
            break;
3401236a:	e01b      	b.n	340123a4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401236c:	f7fe f8f4 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012370:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012372:	68fa      	ldr	r2, [r7, #12]
34012374:	68bb      	ldr	r3, [r7, #8]
34012376:	fbb2 f3f3 	udiv	r3, r2, r3
3401237a:	60fb      	str	r3, [r7, #12]
            break;
3401237c:	e012      	b.n	340123a4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401237e:	f7fe f931 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012382:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012384:	68fa      	ldr	r2, [r7, #12]
34012386:	68bb      	ldr	r3, [r7, #8]
34012388:	fbb2 f3f3 	udiv	r3, r2, r3
3401238c:	60fb      	str	r3, [r7, #12]
            break;
3401238e:	e009      	b.n	340123a4 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012390:	f7fe f96e 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012394:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34012396:	68fa      	ldr	r2, [r7, #12]
34012398:	68bb      	ldr	r3, [r7, #8]
3401239a:	fbb2 f3f3 	udiv	r3, r2, r3
3401239e:	60fb      	str	r3, [r7, #12]
            break;
340123a0:	e000      	b.n	340123a4 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
340123a2:	bf00      	nop
      break;
340123a4:	e067      	b.n	34012476 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340123a6:	f7f6 fc93 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
340123aa:	4603      	mov	r3, r0
340123ac:	2b00      	cmp	r3, #0
340123ae:	d064      	beq.n	3401247a <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
340123b0:	f7f6 fcb0 	bl	34008d14 <LL_RCC_IC8_GetDivider>
340123b4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340123b6:	f7f6 fc9f 	bl	34008cf8 <LL_RCC_IC8_GetSource>
340123ba:	4603      	mov	r3, r0
340123bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340123c0:	d029      	beq.n	34012416 <RCCEx_GetMDFCLKFreq+0x18e>
340123c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340123c6:	d82f      	bhi.n	34012428 <RCCEx_GetMDFCLKFreq+0x1a0>
340123c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340123cc:	d01a      	beq.n	34012404 <RCCEx_GetMDFCLKFreq+0x17c>
340123ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340123d2:	d829      	bhi.n	34012428 <RCCEx_GetMDFCLKFreq+0x1a0>
340123d4:	2b00      	cmp	r3, #0
340123d6:	d003      	beq.n	340123e0 <RCCEx_GetMDFCLKFreq+0x158>
340123d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340123dc:	d009      	beq.n	340123f2 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
340123de:	e023      	b.n	34012428 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340123e0:	f7fe f874 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340123e4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340123e6:	68fa      	ldr	r2, [r7, #12]
340123e8:	68bb      	ldr	r3, [r7, #8]
340123ea:	fbb2 f3f3 	udiv	r3, r2, r3
340123ee:	60fb      	str	r3, [r7, #12]
            break;
340123f0:	e01b      	b.n	3401242a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340123f2:	f7fe f8b1 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340123f6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340123f8:	68fa      	ldr	r2, [r7, #12]
340123fa:	68bb      	ldr	r3, [r7, #8]
340123fc:	fbb2 f3f3 	udiv	r3, r2, r3
34012400:	60fb      	str	r3, [r7, #12]
            break;
34012402:	e012      	b.n	3401242a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012404:	f7fe f8ee 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012408:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401240a:	68fa      	ldr	r2, [r7, #12]
3401240c:	68bb      	ldr	r3, [r7, #8]
3401240e:	fbb2 f3f3 	udiv	r3, r2, r3
34012412:	60fb      	str	r3, [r7, #12]
            break;
34012414:	e009      	b.n	3401242a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012416:	f7fe f92b 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
3401241a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3401241c:	68fa      	ldr	r2, [r7, #12]
3401241e:	68bb      	ldr	r3, [r7, #8]
34012420:	fbb2 f3f3 	udiv	r3, r2, r3
34012424:	60fb      	str	r3, [r7, #12]
            break;
34012426:	e000      	b.n	3401242a <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34012428:	bf00      	nop
      break;
3401242a:	e026      	b.n	3401247a <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3401242c:	f7f5 fc6c 	bl	34007d08 <LL_RCC_HSI_IsReady>
34012430:	4603      	mov	r3, r0
34012432:	2b00      	cmp	r3, #0
34012434:	d023      	beq.n	3401247e <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012436:	f7f5 fc79 	bl	34007d2c <LL_RCC_HSI_GetDivider>
3401243a:	4603      	mov	r3, r0
3401243c:	09db      	lsrs	r3, r3, #7
3401243e:	4a14      	ldr	r2, [pc, #80]	@ (34012490 <RCCEx_GetMDFCLKFreq+0x208>)
34012440:	fa22 f303 	lsr.w	r3, r2, r3
34012444:	60fb      	str	r3, [r7, #12]
      break;
34012446:	e01a      	b.n	3401247e <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34012448:	f7f5 fc7e 	bl	34007d48 <LL_RCC_MSI_IsReady>
3401244c:	4603      	mov	r3, r0
3401244e:	2b00      	cmp	r3, #0
34012450:	d017      	beq.n	34012482 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34012452:	4b10      	ldr	r3, [pc, #64]	@ (34012494 <RCCEx_GetMDFCLKFreq+0x20c>)
34012454:	60fb      	str	r3, [r7, #12]
      break;
34012456:	e014      	b.n	34012482 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34012458:	4b0f      	ldr	r3, [pc, #60]	@ (34012498 <RCCEx_GetMDFCLKFreq+0x210>)
3401245a:	60fb      	str	r3, [r7, #12]
      break;
3401245c:	e012      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401245e:	f7f5 f855 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34012462:	4604      	mov	r4, r0
34012464:	f7f6 f8b8 	bl	340085d8 <LL_RCC_GetTIMPrescaler>
34012468:	4603      	mov	r3, r0
3401246a:	fa24 f303 	lsr.w	r3, r4, r3
3401246e:	60fb      	str	r3, [r7, #12]
      break;
34012470:	e008      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012472:	bf00      	nop
34012474:	e006      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012476:	bf00      	nop
34012478:	e004      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3401247a:	bf00      	nop
3401247c:	e002      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3401247e:	bf00      	nop
34012480:	e000      	b.n	34012484 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34012482:	bf00      	nop
  }

  return adf_frequency;
34012484:	68fb      	ldr	r3, [r7, #12]
}
34012486:	4618      	mov	r0, r3
34012488:	3714      	adds	r7, #20
3401248a:	46bd      	mov	sp, r7
3401248c:	bd90      	pop	{r4, r7, pc}
3401248e:	bf00      	nop
34012490:	03d09000 	.word	0x03d09000
34012494:	003d0900 	.word	0x003d0900
34012498:	00bb8000 	.word	0x00bb8000

3401249c <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3401249c:	b580      	push	{r7, lr}
3401249e:	b084      	sub	sp, #16
340124a0:	af00      	add	r7, sp, #0
340124a2:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
340124a4:	2300      	movs	r3, #0
340124a6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
340124a8:	6878      	ldr	r0, [r7, #4]
340124aa:	f7f5 ffcd 	bl	34008448 <LL_RCC_GetPSSIClockSource>
340124ae:	4603      	mov	r3, r0
340124b0:	2b30      	cmp	r3, #48	@ 0x30
340124b2:	d05a      	beq.n	3401256a <RCCEx_GetPSSICLKFreq+0xce>
340124b4:	2b30      	cmp	r3, #48	@ 0x30
340124b6:	d866      	bhi.n	34012586 <RCCEx_GetPSSICLKFreq+0xea>
340124b8:	2b20      	cmp	r3, #32
340124ba:	d013      	beq.n	340124e4 <RCCEx_GetPSSICLKFreq+0x48>
340124bc:	2b20      	cmp	r3, #32
340124be:	d862      	bhi.n	34012586 <RCCEx_GetPSSICLKFreq+0xea>
340124c0:	2b00      	cmp	r3, #0
340124c2:	d002      	beq.n	340124ca <RCCEx_GetPSSICLKFreq+0x2e>
340124c4:	2b10      	cmp	r3, #16
340124c6:	d008      	beq.n	340124da <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
340124c8:	e05d      	b.n	34012586 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340124ca:	f7f5 f81f 	bl	3400750c <HAL_RCC_GetSysClockFreq>
340124ce:	4603      	mov	r3, r0
340124d0:	4618      	mov	r0, r3
340124d2:	f7fe f913 	bl	340106fc <RCCEx_GetHCLKFreq>
340124d6:	60f8      	str	r0, [r7, #12]
      break;
340124d8:	e05a      	b.n	34012590 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340124da:	2007      	movs	r0, #7
340124dc:	f7fe fbfa 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
340124e0:	60f8      	str	r0, [r7, #12]
      break;
340124e2:	e055      	b.n	34012590 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
340124e4:	f7f6 feb4 	bl	34009250 <LL_RCC_IC20_IsEnabled>
340124e8:	4603      	mov	r3, r0
340124ea:	2b00      	cmp	r3, #0
340124ec:	d04d      	beq.n	3401258a <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
340124ee:	f7f6 fed1 	bl	34009294 <LL_RCC_IC20_GetDivider>
340124f2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
340124f4:	f7f6 fec0 	bl	34009278 <LL_RCC_IC20_GetSource>
340124f8:	4603      	mov	r3, r0
340124fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340124fe:	d029      	beq.n	34012554 <RCCEx_GetPSSICLKFreq+0xb8>
34012500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012504:	d82f      	bhi.n	34012566 <RCCEx_GetPSSICLKFreq+0xca>
34012506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401250a:	d01a      	beq.n	34012542 <RCCEx_GetPSSICLKFreq+0xa6>
3401250c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012510:	d829      	bhi.n	34012566 <RCCEx_GetPSSICLKFreq+0xca>
34012512:	2b00      	cmp	r3, #0
34012514:	d003      	beq.n	3401251e <RCCEx_GetPSSICLKFreq+0x82>
34012516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401251a:	d009      	beq.n	34012530 <RCCEx_GetPSSICLKFreq+0x94>
            break;
3401251c:	e023      	b.n	34012566 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401251e:	f7fd ffd5 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34012522:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012524:	68fa      	ldr	r2, [r7, #12]
34012526:	68bb      	ldr	r3, [r7, #8]
34012528:	fbb2 f3f3 	udiv	r3, r2, r3
3401252c:	60fb      	str	r3, [r7, #12]
            break;
3401252e:	e01b      	b.n	34012568 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012530:	f7fe f812 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012534:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012536:	68fa      	ldr	r2, [r7, #12]
34012538:	68bb      	ldr	r3, [r7, #8]
3401253a:	fbb2 f3f3 	udiv	r3, r2, r3
3401253e:	60fb      	str	r3, [r7, #12]
            break;
34012540:	e012      	b.n	34012568 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012542:	f7fe f84f 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012546:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34012548:	68fa      	ldr	r2, [r7, #12]
3401254a:	68bb      	ldr	r3, [r7, #8]
3401254c:	fbb2 f3f3 	udiv	r3, r2, r3
34012550:	60fb      	str	r3, [r7, #12]
            break;
34012552:	e009      	b.n	34012568 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012554:	f7fe f88c 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012558:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3401255a:	68fa      	ldr	r2, [r7, #12]
3401255c:	68bb      	ldr	r3, [r7, #8]
3401255e:	fbb2 f3f3 	udiv	r3, r2, r3
34012562:	60fb      	str	r3, [r7, #12]
            break;
34012564:	e000      	b.n	34012568 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34012566:	bf00      	nop
      break;
34012568:	e00f      	b.n	3401258a <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3401256a:	f7f5 fbcd 	bl	34007d08 <LL_RCC_HSI_IsReady>
3401256e:	4603      	mov	r3, r0
34012570:	2b00      	cmp	r3, #0
34012572:	d00c      	beq.n	3401258e <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012574:	f7f5 fbda 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34012578:	4603      	mov	r3, r0
3401257a:	09db      	lsrs	r3, r3, #7
3401257c:	4a07      	ldr	r2, [pc, #28]	@ (3401259c <RCCEx_GetPSSICLKFreq+0x100>)
3401257e:	fa22 f303 	lsr.w	r3, r2, r3
34012582:	60fb      	str	r3, [r7, #12]
      break;
34012584:	e003      	b.n	3401258e <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34012586:	bf00      	nop
34012588:	e002      	b.n	34012590 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3401258a:	bf00      	nop
3401258c:	e000      	b.n	34012590 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3401258e:	bf00      	nop
  }

  return pssi_frequency;
34012590:	68fb      	ldr	r3, [r7, #12]
}
34012592:	4618      	mov	r0, r3
34012594:	3710      	adds	r7, #16
34012596:	46bd      	mov	sp, r7
34012598:	bd80      	pop	{r7, pc}
3401259a:	bf00      	nop
3401259c:	03d09000 	.word	0x03d09000

340125a0 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
340125a0:	b580      	push	{r7, lr}
340125a2:	b082      	sub	sp, #8
340125a4:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
340125a6:	2300      	movs	r3, #0
340125a8:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
340125aa:	f7f5 ffdb 	bl	34008564 <LL_RCC_GetRTCClockSource>
340125ae:	4603      	mov	r3, r0
340125b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340125b4:	d020      	beq.n	340125f8 <RCCEx_GetRTCCLKFreq+0x58>
340125b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340125ba:	d830      	bhi.n	3401261e <RCCEx_GetRTCCLKFreq+0x7e>
340125bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340125c0:	d011      	beq.n	340125e6 <RCCEx_GetRTCCLKFreq+0x46>
340125c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340125c6:	d82a      	bhi.n	3401261e <RCCEx_GetRTCCLKFreq+0x7e>
340125c8:	2b00      	cmp	r3, #0
340125ca:	d02a      	beq.n	34012622 <RCCEx_GetRTCCLKFreq+0x82>
340125cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340125d0:	d000      	beq.n	340125d4 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
340125d2:	e024      	b.n	3401261e <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
340125d4:	f7f5 fbd8 	bl	34007d88 <LL_RCC_LSE_IsReady>
340125d8:	4603      	mov	r3, r0
340125da:	2b00      	cmp	r3, #0
340125dc:	d023      	beq.n	34012626 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
340125de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340125e2:	607b      	str	r3, [r7, #4]
      break;
340125e4:	e01f      	b.n	34012626 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
340125e6:	f7f5 fbe1 	bl	34007dac <LL_RCC_LSI_IsReady>
340125ea:	4603      	mov	r3, r0
340125ec:	2b00      	cmp	r3, #0
340125ee:	d01c      	beq.n	3401262a <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
340125f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
340125f4:	607b      	str	r3, [r7, #4]
      break;
340125f6:	e018      	b.n	3401262a <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
340125f8:	f7f5 fb74 	bl	34007ce4 <LL_RCC_HSE_IsReady>
340125fc:	4603      	mov	r3, r0
340125fe:	2b00      	cmp	r3, #0
34012600:	d015      	beq.n	3401262e <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34012602:	4b0e      	ldr	r3, [pc, #56]	@ (3401263c <RCCEx_GetRTCCLKFreq+0x9c>)
34012604:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34012608:	0b1b      	lsrs	r3, r3, #12
3401260a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3401260e:	3301      	adds	r3, #1
34012610:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34012612:	4a0b      	ldr	r2, [pc, #44]	@ (34012640 <RCCEx_GetRTCCLKFreq+0xa0>)
34012614:	683b      	ldr	r3, [r7, #0]
34012616:	fbb2 f3f3 	udiv	r3, r2, r3
3401261a:	607b      	str	r3, [r7, #4]
      break;
3401261c:	e007      	b.n	3401262e <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3401261e:	bf00      	nop
34012620:	e006      	b.n	34012630 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012622:	bf00      	nop
34012624:	e004      	b.n	34012630 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34012626:	bf00      	nop
34012628:	e002      	b.n	34012630 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3401262a:	bf00      	nop
3401262c:	e000      	b.n	34012630 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3401262e:	bf00      	nop
  }

  return rtc_frequency;
34012630:	687b      	ldr	r3, [r7, #4]
}
34012632:	4618      	mov	r0, r3
34012634:	3708      	adds	r7, #8
34012636:	46bd      	mov	sp, r7
34012638:	bd80      	pop	{r7, pc}
3401263a:	bf00      	nop
3401263c:	56028000 	.word	0x56028000
34012640:	02dc6c00 	.word	0x02dc6c00

34012644 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34012644:	b580      	push	{r7, lr}
34012646:	b084      	sub	sp, #16
34012648:	af00      	add	r7, sp, #0
3401264a:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3401264c:	2300      	movs	r3, #0
3401264e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34012650:	6878      	ldr	r0, [r7, #4]
34012652:	f7f5 ff0b 	bl	3400846c <LL_RCC_GetSAIClockSource>
34012656:	4603      	mov	r3, r0
34012658:	4a9a      	ldr	r2, [pc, #616]	@ (340128c4 <RCCEx_GetSAICLKFreq+0x280>)
3401265a:	4293      	cmp	r3, r2
3401265c:	f000 811f 	beq.w	3401289e <RCCEx_GetSAICLKFreq+0x25a>
34012660:	4a98      	ldr	r2, [pc, #608]	@ (340128c4 <RCCEx_GetSAICLKFreq+0x280>)
34012662:	4293      	cmp	r3, r2
34012664:	f200 8120 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012668:	4a97      	ldr	r2, [pc, #604]	@ (340128c8 <RCCEx_GetSAICLKFreq+0x284>)
3401266a:	4293      	cmp	r3, r2
3401266c:	f000 8117 	beq.w	3401289e <RCCEx_GetSAICLKFreq+0x25a>
34012670:	4a95      	ldr	r2, [pc, #596]	@ (340128c8 <RCCEx_GetSAICLKFreq+0x284>)
34012672:	4293      	cmp	r3, r2
34012674:	f200 8118 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012678:	4a94      	ldr	r2, [pc, #592]	@ (340128cc <RCCEx_GetSAICLKFreq+0x288>)
3401267a:	4293      	cmp	r3, r2
3401267c:	f000 810c 	beq.w	34012898 <RCCEx_GetSAICLKFreq+0x254>
34012680:	4a92      	ldr	r2, [pc, #584]	@ (340128cc <RCCEx_GetSAICLKFreq+0x288>)
34012682:	4293      	cmp	r3, r2
34012684:	f200 8110 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012688:	4a91      	ldr	r2, [pc, #580]	@ (340128d0 <RCCEx_GetSAICLKFreq+0x28c>)
3401268a:	4293      	cmp	r3, r2
3401268c:	f000 8104 	beq.w	34012898 <RCCEx_GetSAICLKFreq+0x254>
34012690:	4a8f      	ldr	r2, [pc, #572]	@ (340128d0 <RCCEx_GetSAICLKFreq+0x28c>)
34012692:	4293      	cmp	r3, r2
34012694:	f200 8108 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012698:	4a8e      	ldr	r2, [pc, #568]	@ (340128d4 <RCCEx_GetSAICLKFreq+0x290>)
3401269a:	4293      	cmp	r3, r2
3401269c:	f000 80e6 	beq.w	3401286c <RCCEx_GetSAICLKFreq+0x228>
340126a0:	4a8c      	ldr	r2, [pc, #560]	@ (340128d4 <RCCEx_GetSAICLKFreq+0x290>)
340126a2:	4293      	cmp	r3, r2
340126a4:	f200 8100 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126a8:	4a8b      	ldr	r2, [pc, #556]	@ (340128d8 <RCCEx_GetSAICLKFreq+0x294>)
340126aa:	4293      	cmp	r3, r2
340126ac:	f000 80de 	beq.w	3401286c <RCCEx_GetSAICLKFreq+0x228>
340126b0:	4a89      	ldr	r2, [pc, #548]	@ (340128d8 <RCCEx_GetSAICLKFreq+0x294>)
340126b2:	4293      	cmp	r3, r2
340126b4:	f200 80f8 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126b8:	4a88      	ldr	r2, [pc, #544]	@ (340128dc <RCCEx_GetSAICLKFreq+0x298>)
340126ba:	4293      	cmp	r3, r2
340126bc:	f000 80e4 	beq.w	34012888 <RCCEx_GetSAICLKFreq+0x244>
340126c0:	4a86      	ldr	r2, [pc, #536]	@ (340128dc <RCCEx_GetSAICLKFreq+0x298>)
340126c2:	4293      	cmp	r3, r2
340126c4:	f200 80f0 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126c8:	4a85      	ldr	r2, [pc, #532]	@ (340128e0 <RCCEx_GetSAICLKFreq+0x29c>)
340126ca:	4293      	cmp	r3, r2
340126cc:	f000 80dc 	beq.w	34012888 <RCCEx_GetSAICLKFreq+0x244>
340126d0:	4a83      	ldr	r2, [pc, #524]	@ (340128e0 <RCCEx_GetSAICLKFreq+0x29c>)
340126d2:	4293      	cmp	r3, r2
340126d4:	f200 80e8 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126d8:	4a82      	ldr	r2, [pc, #520]	@ (340128e4 <RCCEx_GetSAICLKFreq+0x2a0>)
340126da:	4293      	cmp	r3, r2
340126dc:	f000 8083 	beq.w	340127e6 <RCCEx_GetSAICLKFreq+0x1a2>
340126e0:	4a80      	ldr	r2, [pc, #512]	@ (340128e4 <RCCEx_GetSAICLKFreq+0x2a0>)
340126e2:	4293      	cmp	r3, r2
340126e4:	f200 80e0 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126e8:	4a7f      	ldr	r2, [pc, #508]	@ (340128e8 <RCCEx_GetSAICLKFreq+0x2a4>)
340126ea:	4293      	cmp	r3, r2
340126ec:	d07b      	beq.n	340127e6 <RCCEx_GetSAICLKFreq+0x1a2>
340126ee:	4a7e      	ldr	r2, [pc, #504]	@ (340128e8 <RCCEx_GetSAICLKFreq+0x2a4>)
340126f0:	4293      	cmp	r3, r2
340126f2:	f200 80d9 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
340126f6:	4a7d      	ldr	r2, [pc, #500]	@ (340128ec <RCCEx_GetSAICLKFreq+0x2a8>)
340126f8:	4293      	cmp	r3, r2
340126fa:	d030      	beq.n	3401275e <RCCEx_GetSAICLKFreq+0x11a>
340126fc:	4a7b      	ldr	r2, [pc, #492]	@ (340128ec <RCCEx_GetSAICLKFreq+0x2a8>)
340126fe:	4293      	cmp	r3, r2
34012700:	f200 80d2 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012704:	4a7a      	ldr	r2, [pc, #488]	@ (340128f0 <RCCEx_GetSAICLKFreq+0x2ac>)
34012706:	4293      	cmp	r3, r2
34012708:	d029      	beq.n	3401275e <RCCEx_GetSAICLKFreq+0x11a>
3401270a:	4a79      	ldr	r2, [pc, #484]	@ (340128f0 <RCCEx_GetSAICLKFreq+0x2ac>)
3401270c:	4293      	cmp	r3, r2
3401270e:	f200 80cb 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012712:	4a78      	ldr	r2, [pc, #480]	@ (340128f4 <RCCEx_GetSAICLKFreq+0x2b0>)
34012714:	4293      	cmp	r3, r2
34012716:	d01d      	beq.n	34012754 <RCCEx_GetSAICLKFreq+0x110>
34012718:	4a76      	ldr	r2, [pc, #472]	@ (340128f4 <RCCEx_GetSAICLKFreq+0x2b0>)
3401271a:	4293      	cmp	r3, r2
3401271c:	f200 80c4 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
34012720:	4a75      	ldr	r2, [pc, #468]	@ (340128f8 <RCCEx_GetSAICLKFreq+0x2b4>)
34012722:	4293      	cmp	r3, r2
34012724:	d016      	beq.n	34012754 <RCCEx_GetSAICLKFreq+0x110>
34012726:	4a74      	ldr	r2, [pc, #464]	@ (340128f8 <RCCEx_GetSAICLKFreq+0x2b4>)
34012728:	4293      	cmp	r3, r2
3401272a:	f200 80bd 	bhi.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
3401272e:	4a73      	ldr	r2, [pc, #460]	@ (340128fc <RCCEx_GetSAICLKFreq+0x2b8>)
34012730:	4293      	cmp	r3, r2
34012732:	d003      	beq.n	3401273c <RCCEx_GetSAICLKFreq+0xf8>
34012734:	4a72      	ldr	r2, [pc, #456]	@ (34012900 <RCCEx_GetSAICLKFreq+0x2bc>)
34012736:	4293      	cmp	r3, r2
34012738:	f040 80b6 	bne.w	340128a8 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401273c:	f7f4 fee6 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34012740:	4603      	mov	r3, r0
34012742:	4618      	mov	r0, r3
34012744:	f7fd ffda 	bl	340106fc <RCCEx_GetHCLKFreq>
34012748:	4603      	mov	r3, r0
3401274a:	4618      	mov	r0, r3
3401274c:	f7fd fff7 	bl	3401073e <RCCEx_GetPCLK2Freq>
34012750:	60f8      	str	r0, [r7, #12]
      break;
34012752:	e0b2      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012754:	2007      	movs	r0, #7
34012756:	f7fe fabd 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401275a:	60f8      	str	r0, [r7, #12]
      break;
3401275c:	e0ad      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401275e:	f7f6 fa77 	bl	34008c50 <LL_RCC_IC7_IsEnabled>
34012762:	4603      	mov	r3, r0
34012764:	2b00      	cmp	r3, #0
34012766:	f000 80a1 	beq.w	340128ac <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3401276a:	f7f6 fa93 	bl	34008c94 <LL_RCC_IC7_GetDivider>
3401276e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012770:	f7f6 fa82 	bl	34008c78 <LL_RCC_IC7_GetSource>
34012774:	4603      	mov	r3, r0
34012776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401277a:	d029      	beq.n	340127d0 <RCCEx_GetSAICLKFreq+0x18c>
3401277c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012780:	d82f      	bhi.n	340127e2 <RCCEx_GetSAICLKFreq+0x19e>
34012782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012786:	d01a      	beq.n	340127be <RCCEx_GetSAICLKFreq+0x17a>
34012788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401278c:	d829      	bhi.n	340127e2 <RCCEx_GetSAICLKFreq+0x19e>
3401278e:	2b00      	cmp	r3, #0
34012790:	d003      	beq.n	3401279a <RCCEx_GetSAICLKFreq+0x156>
34012792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012796:	d009      	beq.n	340127ac <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012798:	e023      	b.n	340127e2 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401279a:	f7fd fe97 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401279e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340127a0:	68fa      	ldr	r2, [r7, #12]
340127a2:	68bb      	ldr	r3, [r7, #8]
340127a4:	fbb2 f3f3 	udiv	r3, r2, r3
340127a8:	60fb      	str	r3, [r7, #12]
            break;
340127aa:	e01b      	b.n	340127e4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340127ac:	f7fd fed4 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340127b0:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340127b2:	68fa      	ldr	r2, [r7, #12]
340127b4:	68bb      	ldr	r3, [r7, #8]
340127b6:	fbb2 f3f3 	udiv	r3, r2, r3
340127ba:	60fb      	str	r3, [r7, #12]
            break;
340127bc:	e012      	b.n	340127e4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340127be:	f7fd ff11 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340127c2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340127c4:	68fa      	ldr	r2, [r7, #12]
340127c6:	68bb      	ldr	r3, [r7, #8]
340127c8:	fbb2 f3f3 	udiv	r3, r2, r3
340127cc:	60fb      	str	r3, [r7, #12]
            break;
340127ce:	e009      	b.n	340127e4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340127d0:	f7fd ff4e 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340127d4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340127d6:	68fa      	ldr	r2, [r7, #12]
340127d8:	68bb      	ldr	r3, [r7, #8]
340127da:	fbb2 f3f3 	udiv	r3, r2, r3
340127de:	60fb      	str	r3, [r7, #12]
            break;
340127e0:	e000      	b.n	340127e4 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
340127e2:	bf00      	nop
        }
      }
      break;
340127e4:	e062      	b.n	340128ac <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340127e6:	f7f6 fa73 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
340127ea:	4603      	mov	r3, r0
340127ec:	2b00      	cmp	r3, #0
340127ee:	d05f      	beq.n	340128b0 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340127f0:	f7f6 fa90 	bl	34008d14 <LL_RCC_IC8_GetDivider>
340127f4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340127f6:	f7f6 fa7f 	bl	34008cf8 <LL_RCC_IC8_GetSource>
340127fa:	4603      	mov	r3, r0
340127fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012800:	d029      	beq.n	34012856 <RCCEx_GetSAICLKFreq+0x212>
34012802:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012806:	d82f      	bhi.n	34012868 <RCCEx_GetSAICLKFreq+0x224>
34012808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401280c:	d01a      	beq.n	34012844 <RCCEx_GetSAICLKFreq+0x200>
3401280e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012812:	d829      	bhi.n	34012868 <RCCEx_GetSAICLKFreq+0x224>
34012814:	2b00      	cmp	r3, #0
34012816:	d003      	beq.n	34012820 <RCCEx_GetSAICLKFreq+0x1dc>
34012818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401281c:	d009      	beq.n	34012832 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401281e:	e023      	b.n	34012868 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012820:	f7fd fe54 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34012824:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012826:	68fa      	ldr	r2, [r7, #12]
34012828:	68bb      	ldr	r3, [r7, #8]
3401282a:	fbb2 f3f3 	udiv	r3, r2, r3
3401282e:	60fb      	str	r3, [r7, #12]
            break;
34012830:	e01b      	b.n	3401286a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012832:	f7fd fe91 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012836:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34012838:	68fa      	ldr	r2, [r7, #12]
3401283a:	68bb      	ldr	r3, [r7, #8]
3401283c:	fbb2 f3f3 	udiv	r3, r2, r3
34012840:	60fb      	str	r3, [r7, #12]
            break;
34012842:	e012      	b.n	3401286a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012844:	f7fd fece 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012848:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3401284a:	68fa      	ldr	r2, [r7, #12]
3401284c:	68bb      	ldr	r3, [r7, #8]
3401284e:	fbb2 f3f3 	udiv	r3, r2, r3
34012852:	60fb      	str	r3, [r7, #12]
            break;
34012854:	e009      	b.n	3401286a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012856:	f7fd ff0b 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
3401285a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3401285c:	68fa      	ldr	r2, [r7, #12]
3401285e:	68bb      	ldr	r3, [r7, #8]
34012860:	fbb2 f3f3 	udiv	r3, r2, r3
34012864:	60fb      	str	r3, [r7, #12]
            break;
34012866:	e000      	b.n	3401286a <RCCEx_GetSAICLKFreq+0x226>
            break;
34012868:	bf00      	nop
        }
      }
      break;
3401286a:	e021      	b.n	340128b0 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3401286c:	f7f5 fa4c 	bl	34007d08 <LL_RCC_HSI_IsReady>
34012870:	4603      	mov	r3, r0
34012872:	2b00      	cmp	r3, #0
34012874:	d01e      	beq.n	340128b4 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012876:	f7f5 fa59 	bl	34007d2c <LL_RCC_HSI_GetDivider>
3401287a:	4603      	mov	r3, r0
3401287c:	09db      	lsrs	r3, r3, #7
3401287e:	4a21      	ldr	r2, [pc, #132]	@ (34012904 <RCCEx_GetSAICLKFreq+0x2c0>)
34012880:	fa22 f303 	lsr.w	r3, r2, r3
34012884:	60fb      	str	r3, [r7, #12]
      }
      break;
34012886:	e015      	b.n	340128b4 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012888:	f7f5 fa5e 	bl	34007d48 <LL_RCC_MSI_IsReady>
3401288c:	4603      	mov	r3, r0
3401288e:	2b00      	cmp	r3, #0
34012890:	d012      	beq.n	340128b8 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34012892:	4b1d      	ldr	r3, [pc, #116]	@ (34012908 <RCCEx_GetSAICLKFreq+0x2c4>)
34012894:	60fb      	str	r3, [r7, #12]
      }
      break;
34012896:	e00f      	b.n	340128b8 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34012898:	4b1c      	ldr	r3, [pc, #112]	@ (3401290c <RCCEx_GetSAICLKFreq+0x2c8>)
3401289a:	60fb      	str	r3, [r7, #12]
      break;
3401289c:	e00d      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3401289e:	2007      	movs	r0, #7
340128a0:	f000 f920 	bl	34012ae4 <RCCEx_GetSPDIFRXCLKFreq>
340128a4:	60f8      	str	r0, [r7, #12]
      break;
340128a6:	e008      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
340128a8:	bf00      	nop
340128aa:	e006      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>
      break;
340128ac:	bf00      	nop
340128ae:	e004      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>
      break;
340128b0:	bf00      	nop
340128b2:	e002      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>
      break;
340128b4:	bf00      	nop
340128b6:	e000      	b.n	340128ba <RCCEx_GetSAICLKFreq+0x276>
      break;
340128b8:	bf00      	nop
  }

  return sai_frequency;
340128ba:	68fb      	ldr	r3, [r7, #12]
}
340128bc:	4618      	mov	r0, r3
340128be:	3710      	adds	r7, #16
340128c0:	46bd      	mov	sp, r7
340128c2:	bd80      	pop	{r7, pc}
340128c4:	07071818 	.word	0x07071818
340128c8:	07071418 	.word	0x07071418
340128cc:	07061818 	.word	0x07061818
340128d0:	07061418 	.word	0x07061418
340128d4:	07051818 	.word	0x07051818
340128d8:	07051418 	.word	0x07051418
340128dc:	07041818 	.word	0x07041818
340128e0:	07041418 	.word	0x07041418
340128e4:	07031818 	.word	0x07031818
340128e8:	07031418 	.word	0x07031418
340128ec:	07021818 	.word	0x07021818
340128f0:	07021418 	.word	0x07021418
340128f4:	07011818 	.word	0x07011818
340128f8:	07011418 	.word	0x07011418
340128fc:	07001418 	.word	0x07001418
34012900:	07001818 	.word	0x07001818
34012904:	03d09000 	.word	0x03d09000
34012908:	003d0900 	.word	0x003d0900
3401290c:	00bb8000 	.word	0x00bb8000

34012910 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
34012910:	b580      	push	{r7, lr}
34012912:	b084      	sub	sp, #16
34012914:	af00      	add	r7, sp, #0
34012916:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34012918:	2300      	movs	r3, #0
3401291a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401291c:	6878      	ldr	r0, [r7, #4]
3401291e:	f7f5 fdb1 	bl	34008484 <LL_RCC_GetSDMMCClockSource>
34012922:	4603      	mov	r3, r0
34012924:	4a67      	ldr	r2, [pc, #412]	@ (34012ac4 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34012926:	4293      	cmp	r3, r2
34012928:	d07e      	beq.n	34012a28 <RCCEx_GetSDMMCCLKFreq+0x118>
3401292a:	4a66      	ldr	r2, [pc, #408]	@ (34012ac4 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3401292c:	4293      	cmp	r3, r2
3401292e:	f200 80be 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
34012932:	4a65      	ldr	r2, [pc, #404]	@ (34012ac8 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34012934:	4293      	cmp	r3, r2
34012936:	d077      	beq.n	34012a28 <RCCEx_GetSDMMCCLKFreq+0x118>
34012938:	4a63      	ldr	r2, [pc, #396]	@ (34012ac8 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3401293a:	4293      	cmp	r3, r2
3401293c:	f200 80b7 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
34012940:	4a62      	ldr	r2, [pc, #392]	@ (34012acc <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34012942:	4293      	cmp	r3, r2
34012944:	d02c      	beq.n	340129a0 <RCCEx_GetSDMMCCLKFreq+0x90>
34012946:	4a61      	ldr	r2, [pc, #388]	@ (34012acc <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34012948:	4293      	cmp	r3, r2
3401294a:	f200 80b0 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
3401294e:	4a60      	ldr	r2, [pc, #384]	@ (34012ad0 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34012950:	4293      	cmp	r3, r2
34012952:	d025      	beq.n	340129a0 <RCCEx_GetSDMMCCLKFreq+0x90>
34012954:	4a5e      	ldr	r2, [pc, #376]	@ (34012ad0 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34012956:	4293      	cmp	r3, r2
34012958:	f200 80a9 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
3401295c:	4a5d      	ldr	r2, [pc, #372]	@ (34012ad4 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3401295e:	4293      	cmp	r3, r2
34012960:	d019      	beq.n	34012996 <RCCEx_GetSDMMCCLKFreq+0x86>
34012962:	4a5c      	ldr	r2, [pc, #368]	@ (34012ad4 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34012964:	4293      	cmp	r3, r2
34012966:	f200 80a2 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
3401296a:	4a5b      	ldr	r2, [pc, #364]	@ (34012ad8 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3401296c:	4293      	cmp	r3, r2
3401296e:	d012      	beq.n	34012996 <RCCEx_GetSDMMCCLKFreq+0x86>
34012970:	4a59      	ldr	r2, [pc, #356]	@ (34012ad8 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34012972:	4293      	cmp	r3, r2
34012974:	f200 809b 	bhi.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
34012978:	4a58      	ldr	r2, [pc, #352]	@ (34012adc <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3401297a:	4293      	cmp	r3, r2
3401297c:	d003      	beq.n	34012986 <RCCEx_GetSDMMCCLKFreq+0x76>
3401297e:	4a58      	ldr	r2, [pc, #352]	@ (34012ae0 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34012980:	4293      	cmp	r3, r2
34012982:	f040 8094 	bne.w	34012aae <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34012986:	f7f4 fdc1 	bl	3400750c <HAL_RCC_GetSysClockFreq>
3401298a:	4603      	mov	r3, r0
3401298c:	4618      	mov	r0, r3
3401298e:	f7fd feb5 	bl	340106fc <RCCEx_GetHCLKFreq>
34012992:	60f8      	str	r0, [r7, #12]
      break;
34012994:	e090      	b.n	34012ab8 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012996:	2007      	movs	r0, #7
34012998:	f7fe f99c 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401299c:	60f8      	str	r0, [r7, #12]
      break;
3401299e:	e08b      	b.n	34012ab8 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
340129a0:	f7f6 f8d6 	bl	34008b50 <LL_RCC_IC4_IsEnabled>
340129a4:	4603      	mov	r3, r0
340129a6:	2b00      	cmp	r3, #0
340129a8:	f000 8083 	beq.w	34012ab2 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
340129ac:	f7f6 f8f2 	bl	34008b94 <LL_RCC_IC4_GetDivider>
340129b0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340129b2:	f7f6 f8e1 	bl	34008b78 <LL_RCC_IC4_GetSource>
340129b6:	4603      	mov	r3, r0
340129b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340129bc:	d029      	beq.n	34012a12 <RCCEx_GetSDMMCCLKFreq+0x102>
340129be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340129c2:	d82f      	bhi.n	34012a24 <RCCEx_GetSDMMCCLKFreq+0x114>
340129c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340129c8:	d01a      	beq.n	34012a00 <RCCEx_GetSDMMCCLKFreq+0xf0>
340129ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340129ce:	d829      	bhi.n	34012a24 <RCCEx_GetSDMMCCLKFreq+0x114>
340129d0:	2b00      	cmp	r3, #0
340129d2:	d003      	beq.n	340129dc <RCCEx_GetSDMMCCLKFreq+0xcc>
340129d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340129d8:	d009      	beq.n	340129ee <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340129da:	e023      	b.n	34012a24 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340129dc:	f7fd fd76 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340129e0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340129e2:	68fa      	ldr	r2, [r7, #12]
340129e4:	68bb      	ldr	r3, [r7, #8]
340129e6:	fbb2 f3f3 	udiv	r3, r2, r3
340129ea:	60fb      	str	r3, [r7, #12]
            break;
340129ec:	e01b      	b.n	34012a26 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340129ee:	f7fd fdb3 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340129f2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340129f4:	68fa      	ldr	r2, [r7, #12]
340129f6:	68bb      	ldr	r3, [r7, #8]
340129f8:	fbb2 f3f3 	udiv	r3, r2, r3
340129fc:	60fb      	str	r3, [r7, #12]
            break;
340129fe:	e012      	b.n	34012a26 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012a00:	f7fd fdf0 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012a04:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a06:	68fa      	ldr	r2, [r7, #12]
34012a08:	68bb      	ldr	r3, [r7, #8]
34012a0a:	fbb2 f3f3 	udiv	r3, r2, r3
34012a0e:	60fb      	str	r3, [r7, #12]
            break;
34012a10:	e009      	b.n	34012a26 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012a12:	f7fd fe2d 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012a16:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a18:	68fa      	ldr	r2, [r7, #12]
34012a1a:	68bb      	ldr	r3, [r7, #8]
34012a1c:	fbb2 f3f3 	udiv	r3, r2, r3
34012a20:	60fb      	str	r3, [r7, #12]
            break;
34012a22:	e000      	b.n	34012a26 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34012a24:	bf00      	nop
        }
      }
      break;
34012a26:	e044      	b.n	34012ab2 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34012a28:	f7f6 f8d2 	bl	34008bd0 <LL_RCC_IC5_IsEnabled>
34012a2c:	4603      	mov	r3, r0
34012a2e:	2b00      	cmp	r3, #0
34012a30:	d041      	beq.n	34012ab6 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34012a32:	f7f6 f8ef 	bl	34008c14 <LL_RCC_IC5_GetDivider>
34012a36:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34012a38:	f7f6 f8de 	bl	34008bf8 <LL_RCC_IC5_GetSource>
34012a3c:	4603      	mov	r3, r0
34012a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a42:	d029      	beq.n	34012a98 <RCCEx_GetSDMMCCLKFreq+0x188>
34012a44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012a48:	d82f      	bhi.n	34012aaa <RCCEx_GetSDMMCCLKFreq+0x19a>
34012a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a4e:	d01a      	beq.n	34012a86 <RCCEx_GetSDMMCCLKFreq+0x176>
34012a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012a54:	d829      	bhi.n	34012aaa <RCCEx_GetSDMMCCLKFreq+0x19a>
34012a56:	2b00      	cmp	r3, #0
34012a58:	d003      	beq.n	34012a62 <RCCEx_GetSDMMCCLKFreq+0x152>
34012a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012a5e:	d009      	beq.n	34012a74 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012a60:	e023      	b.n	34012aaa <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012a62:	f7fd fd33 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34012a66:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a68:	68fa      	ldr	r2, [r7, #12]
34012a6a:	68bb      	ldr	r3, [r7, #8]
34012a6c:	fbb2 f3f3 	udiv	r3, r2, r3
34012a70:	60fb      	str	r3, [r7, #12]
            break;
34012a72:	e01b      	b.n	34012aac <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012a74:	f7fd fd70 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012a78:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a7a:	68fa      	ldr	r2, [r7, #12]
34012a7c:	68bb      	ldr	r3, [r7, #8]
34012a7e:	fbb2 f3f3 	udiv	r3, r2, r3
34012a82:	60fb      	str	r3, [r7, #12]
            break;
34012a84:	e012      	b.n	34012aac <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012a86:	f7fd fdad 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012a8a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a8c:	68fa      	ldr	r2, [r7, #12]
34012a8e:	68bb      	ldr	r3, [r7, #8]
34012a90:	fbb2 f3f3 	udiv	r3, r2, r3
34012a94:	60fb      	str	r3, [r7, #12]
            break;
34012a96:	e009      	b.n	34012aac <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012a98:	f7fd fdea 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012a9c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34012a9e:	68fa      	ldr	r2, [r7, #12]
34012aa0:	68bb      	ldr	r3, [r7, #8]
34012aa2:	fbb2 f3f3 	udiv	r3, r2, r3
34012aa6:	60fb      	str	r3, [r7, #12]
            break;
34012aa8:	e000      	b.n	34012aac <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
34012aaa:	bf00      	nop
        }
      }
      break;
34012aac:	e003      	b.n	34012ab6 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
34012aae:	bf00      	nop
34012ab0:	e002      	b.n	34012ab8 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34012ab2:	bf00      	nop
34012ab4:	e000      	b.n	34012ab8 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34012ab6:	bf00      	nop
  }

  return sdmmc_frequency;
34012ab8:	68fb      	ldr	r3, [r7, #12]
}
34012aba:	4618      	mov	r0, r3
34012abc:	3710      	adds	r7, #16
34012abe:	46bd      	mov	sp, r7
34012ac0:	bd80      	pop	{r7, pc}
34012ac2:	bf00      	nop
34012ac4:	0303041c 	.word	0x0303041c
34012ac8:	0303001c 	.word	0x0303001c
34012acc:	0302041c 	.word	0x0302041c
34012ad0:	0302001c 	.word	0x0302001c
34012ad4:	0301041c 	.word	0x0301041c
34012ad8:	0301001c 	.word	0x0301001c
34012adc:	0300001c 	.word	0x0300001c
34012ae0:	0300041c 	.word	0x0300041c

34012ae4 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34012ae4:	b580      	push	{r7, lr}
34012ae6:	b084      	sub	sp, #16
34012ae8:	af00      	add	r7, sp, #0
34012aea:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34012aec:	2300      	movs	r3, #0
34012aee:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34012af0:	6878      	ldr	r0, [r7, #4]
34012af2:	f7f5 fcd3 	bl	3400849c <LL_RCC_GetSPDIFRXClockSource>
34012af6:	4603      	mov	r3, r0
34012af8:	2b06      	cmp	r3, #6
34012afa:	f200 80c2 	bhi.w	34012c82 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
34012afe:	a201      	add	r2, pc, #4	@ (adr r2, 34012b04 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34012b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34012b04:	34012b21 	.word	0x34012b21
34012b08:	34012b39 	.word	0x34012b39
34012b0c:	34012b43 	.word	0x34012b43
34012b10:	34012bcb 	.word	0x34012bcb
34012b14:	34012c6d 	.word	0x34012c6d
34012b18:	34012c51 	.word	0x34012c51
34012b1c:	34012c7d 	.word	0x34012c7d
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012b20:	f7f4 fcf4 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34012b24:	4603      	mov	r3, r0
34012b26:	4618      	mov	r0, r3
34012b28:	f7fd fde8 	bl	340106fc <RCCEx_GetHCLKFreq>
34012b2c:	4603      	mov	r3, r0
34012b2e:	4618      	mov	r0, r3
34012b30:	f7fd fdf5 	bl	3401071e <RCCEx_GetPCLK1Freq>
34012b34:	60f8      	str	r0, [r7, #12]
      break;
34012b36:	e0ad      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34012b38:	2007      	movs	r0, #7
34012b3a:	f7fe f8cb 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34012b3e:	60f8      	str	r0, [r7, #12]
      break;
34012b40:	e0a8      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34012b42:	f7f6 f885 	bl	34008c50 <LL_RCC_IC7_IsEnabled>
34012b46:	4603      	mov	r3, r0
34012b48:	2b00      	cmp	r3, #0
34012b4a:	f000 809c 	beq.w	34012c86 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34012b4e:	f7f6 f8a1 	bl	34008c94 <LL_RCC_IC7_GetDivider>
34012b52:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34012b54:	f7f6 f890 	bl	34008c78 <LL_RCC_IC7_GetSource>
34012b58:	4603      	mov	r3, r0
34012b5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012b5e:	d029      	beq.n	34012bb4 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
34012b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012b64:	d82f      	bhi.n	34012bc6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34012b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012b6a:	d01a      	beq.n	34012ba2 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34012b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012b70:	d829      	bhi.n	34012bc6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34012b72:	2b00      	cmp	r3, #0
34012b74:	d003      	beq.n	34012b7e <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34012b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012b7a:	d009      	beq.n	34012b90 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012b7c:	e023      	b.n	34012bc6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012b7e:	f7fd fca5 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34012b82:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012b84:	68fa      	ldr	r2, [r7, #12]
34012b86:	68bb      	ldr	r3, [r7, #8]
34012b88:	fbb2 f3f3 	udiv	r3, r2, r3
34012b8c:	60fb      	str	r3, [r7, #12]
            break;
34012b8e:	e01b      	b.n	34012bc8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012b90:	f7fd fce2 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012b94:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012b96:	68fa      	ldr	r2, [r7, #12]
34012b98:	68bb      	ldr	r3, [r7, #8]
34012b9a:	fbb2 f3f3 	udiv	r3, r2, r3
34012b9e:	60fb      	str	r3, [r7, #12]
            break;
34012ba0:	e012      	b.n	34012bc8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012ba2:	f7fd fd1f 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012ba6:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012ba8:	68fa      	ldr	r2, [r7, #12]
34012baa:	68bb      	ldr	r3, [r7, #8]
34012bac:	fbb2 f3f3 	udiv	r3, r2, r3
34012bb0:	60fb      	str	r3, [r7, #12]
            break;
34012bb2:	e009      	b.n	34012bc8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012bb4:	f7fd fd5c 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012bb8:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012bba:	68fa      	ldr	r2, [r7, #12]
34012bbc:	68bb      	ldr	r3, [r7, #8]
34012bbe:	fbb2 f3f3 	udiv	r3, r2, r3
34012bc2:	60fb      	str	r3, [r7, #12]
            break;
34012bc4:	e000      	b.n	34012bc8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
34012bc6:	bf00      	nop
        }
      }
      break;
34012bc8:	e05d      	b.n	34012c86 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34012bca:	f7f6 f881 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
34012bce:	4603      	mov	r3, r0
34012bd0:	2b00      	cmp	r3, #0
34012bd2:	d05a      	beq.n	34012c8a <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34012bd4:	f7f6 f89e 	bl	34008d14 <LL_RCC_IC8_GetDivider>
34012bd8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34012bda:	f7f6 f88d 	bl	34008cf8 <LL_RCC_IC8_GetSource>
34012bde:	4603      	mov	r3, r0
34012be0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012be4:	d029      	beq.n	34012c3a <RCCEx_GetSPDIFRXCLKFreq+0x156>
34012be6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34012bea:	d82f      	bhi.n	34012c4c <RCCEx_GetSPDIFRXCLKFreq+0x168>
34012bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012bf0:	d01a      	beq.n	34012c28 <RCCEx_GetSPDIFRXCLKFreq+0x144>
34012bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34012bf6:	d829      	bhi.n	34012c4c <RCCEx_GetSPDIFRXCLKFreq+0x168>
34012bf8:	2b00      	cmp	r3, #0
34012bfa:	d003      	beq.n	34012c04 <RCCEx_GetSPDIFRXCLKFreq+0x120>
34012bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34012c00:	d009      	beq.n	34012c16 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34012c02:	e023      	b.n	34012c4c <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34012c04:	f7fd fc62 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34012c08:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012c0a:	68fa      	ldr	r2, [r7, #12]
34012c0c:	68bb      	ldr	r3, [r7, #8]
34012c0e:	fbb2 f3f3 	udiv	r3, r2, r3
34012c12:	60fb      	str	r3, [r7, #12]
            break;
34012c14:	e01b      	b.n	34012c4e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34012c16:	f7fd fc9f 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34012c1a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012c1c:	68fa      	ldr	r2, [r7, #12]
34012c1e:	68bb      	ldr	r3, [r7, #8]
34012c20:	fbb2 f3f3 	udiv	r3, r2, r3
34012c24:	60fb      	str	r3, [r7, #12]
            break;
34012c26:	e012      	b.n	34012c4e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34012c28:	f7fd fcdc 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34012c2c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012c2e:	68fa      	ldr	r2, [r7, #12]
34012c30:	68bb      	ldr	r3, [r7, #8]
34012c32:	fbb2 f3f3 	udiv	r3, r2, r3
34012c36:	60fb      	str	r3, [r7, #12]
            break;
34012c38:	e009      	b.n	34012c4e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34012c3a:	f7fd fd19 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34012c3e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34012c40:	68fa      	ldr	r2, [r7, #12]
34012c42:	68bb      	ldr	r3, [r7, #8]
34012c44:	fbb2 f3f3 	udiv	r3, r2, r3
34012c48:	60fb      	str	r3, [r7, #12]
            break;
34012c4a:	e000      	b.n	34012c4e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34012c4c:	bf00      	nop
        }
      }
      break;
34012c4e:	e01c      	b.n	34012c8a <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34012c50:	f7f5 f85a 	bl	34007d08 <LL_RCC_HSI_IsReady>
34012c54:	4603      	mov	r3, r0
34012c56:	2b00      	cmp	r3, #0
34012c58:	d019      	beq.n	34012c8e <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34012c5a:	f7f5 f867 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34012c5e:	4603      	mov	r3, r0
34012c60:	09db      	lsrs	r3, r3, #7
34012c62:	4a0f      	ldr	r2, [pc, #60]	@ (34012ca0 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34012c64:	fa22 f303 	lsr.w	r3, r2, r3
34012c68:	60fb      	str	r3, [r7, #12]
      }
      break;
34012c6a:	e010      	b.n	34012c8e <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34012c6c:	f7f5 f86c 	bl	34007d48 <LL_RCC_MSI_IsReady>
34012c70:	4603      	mov	r3, r0
34012c72:	2b00      	cmp	r3, #0
34012c74:	d00d      	beq.n	34012c92 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34012c76:	4b0b      	ldr	r3, [pc, #44]	@ (34012ca4 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34012c78:	60fb      	str	r3, [r7, #12]
      }
      break;
34012c7a:	e00a      	b.n	34012c92 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34012c7c:	4b0a      	ldr	r3, [pc, #40]	@ (34012ca8 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
34012c7e:	60fb      	str	r3, [r7, #12]
      break;
34012c80:	e008      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
34012c82:	bf00      	nop
34012c84:	e006      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34012c86:	bf00      	nop
34012c88:	e004      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34012c8a:	bf00      	nop
34012c8c:	e002      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34012c8e:	bf00      	nop
34012c90:	e000      	b.n	34012c94 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34012c92:	bf00      	nop
  }

  return spdifrx_frequency;
34012c94:	68fb      	ldr	r3, [r7, #12]
}
34012c96:	4618      	mov	r0, r3
34012c98:	3710      	adds	r7, #16
34012c9a:	46bd      	mov	sp, r7
34012c9c:	bd80      	pop	{r7, pc}
34012c9e:	bf00      	nop
34012ca0:	03d09000 	.word	0x03d09000
34012ca4:	003d0900 	.word	0x003d0900
34012ca8:	00bb8000 	.word	0x00bb8000

34012cac <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
34012cac:	b580      	push	{r7, lr}
34012cae:	b084      	sub	sp, #16
34012cb0:	af00      	add	r7, sp, #0
34012cb2:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34012cb4:	2300      	movs	r3, #0
34012cb6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34012cb8:	6878      	ldr	r0, [r7, #4]
34012cba:	f7f5 fc01 	bl	340084c0 <LL_RCC_GetSPIClockSource>
34012cbe:	4603      	mov	r3, r0
34012cc0:	4aa7      	ldr	r2, [pc, #668]	@ (34012f60 <RCCEx_GetSPICLKFreq+0x2b4>)
34012cc2:	4293      	cmp	r3, r2
34012cc4:	f000 829e 	beq.w	34013204 <RCCEx_GetSPICLKFreq+0x558>
34012cc8:	4aa5      	ldr	r2, [pc, #660]	@ (34012f60 <RCCEx_GetSPICLKFreq+0x2b4>)
34012cca:	4293      	cmp	r3, r2
34012ccc:	f200 82a5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012cd0:	4aa4      	ldr	r2, [pc, #656]	@ (34012f64 <RCCEx_GetSPICLKFreq+0x2b8>)
34012cd2:	4293      	cmp	r3, r2
34012cd4:	f000 8299 	beq.w	3401320a <RCCEx_GetSPICLKFreq+0x55e>
34012cd8:	4aa2      	ldr	r2, [pc, #648]	@ (34012f64 <RCCEx_GetSPICLKFreq+0x2b8>)
34012cda:	4293      	cmp	r3, r2
34012cdc:	f200 829d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ce0:	4aa1      	ldr	r2, [pc, #644]	@ (34012f68 <RCCEx_GetSPICLKFreq+0x2bc>)
34012ce2:	4293      	cmp	r3, r2
34012ce4:	f000 8291 	beq.w	3401320a <RCCEx_GetSPICLKFreq+0x55e>
34012ce8:	4a9f      	ldr	r2, [pc, #636]	@ (34012f68 <RCCEx_GetSPICLKFreq+0x2bc>)
34012cea:	4293      	cmp	r3, r2
34012cec:	f200 8295 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012cf0:	4a9e      	ldr	r2, [pc, #632]	@ (34012f6c <RCCEx_GetSPICLKFreq+0x2c0>)
34012cf2:	4293      	cmp	r3, r2
34012cf4:	f000 8286 	beq.w	34013204 <RCCEx_GetSPICLKFreq+0x558>
34012cf8:	4a9c      	ldr	r2, [pc, #624]	@ (34012f6c <RCCEx_GetSPICLKFreq+0x2c0>)
34012cfa:	4293      	cmp	r3, r2
34012cfc:	f200 828d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d00:	4a9b      	ldr	r2, [pc, #620]	@ (34012f70 <RCCEx_GetSPICLKFreq+0x2c4>)
34012d02:	4293      	cmp	r3, r2
34012d04:	f000 827e 	beq.w	34013204 <RCCEx_GetSPICLKFreq+0x558>
34012d08:	4a99      	ldr	r2, [pc, #612]	@ (34012f70 <RCCEx_GetSPICLKFreq+0x2c4>)
34012d0a:	4293      	cmp	r3, r2
34012d0c:	f200 8285 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d10:	4a98      	ldr	r2, [pc, #608]	@ (34012f74 <RCCEx_GetSPICLKFreq+0x2c8>)
34012d12:	4293      	cmp	r3, r2
34012d14:	f000 8276 	beq.w	34013204 <RCCEx_GetSPICLKFreq+0x558>
34012d18:	4a96      	ldr	r2, [pc, #600]	@ (34012f74 <RCCEx_GetSPICLKFreq+0x2c8>)
34012d1a:	4293      	cmp	r3, r2
34012d1c:	f200 827d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d20:	4a95      	ldr	r2, [pc, #596]	@ (34012f78 <RCCEx_GetSPICLKFreq+0x2cc>)
34012d22:	4293      	cmp	r3, r2
34012d24:	f000 8258 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d28:	4a93      	ldr	r2, [pc, #588]	@ (34012f78 <RCCEx_GetSPICLKFreq+0x2cc>)
34012d2a:	4293      	cmp	r3, r2
34012d2c:	f200 8275 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d30:	4a92      	ldr	r2, [pc, #584]	@ (34012f7c <RCCEx_GetSPICLKFreq+0x2d0>)
34012d32:	4293      	cmp	r3, r2
34012d34:	f000 8250 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d38:	4a90      	ldr	r2, [pc, #576]	@ (34012f7c <RCCEx_GetSPICLKFreq+0x2d0>)
34012d3a:	4293      	cmp	r3, r2
34012d3c:	f200 826d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d40:	4a8f      	ldr	r2, [pc, #572]	@ (34012f80 <RCCEx_GetSPICLKFreq+0x2d4>)
34012d42:	4293      	cmp	r3, r2
34012d44:	f000 8248 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d48:	4a8d      	ldr	r2, [pc, #564]	@ (34012f80 <RCCEx_GetSPICLKFreq+0x2d4>)
34012d4a:	4293      	cmp	r3, r2
34012d4c:	f200 8265 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d50:	4a8c      	ldr	r2, [pc, #560]	@ (34012f84 <RCCEx_GetSPICLKFreq+0x2d8>)
34012d52:	4293      	cmp	r3, r2
34012d54:	f000 8240 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d58:	4a8a      	ldr	r2, [pc, #552]	@ (34012f84 <RCCEx_GetSPICLKFreq+0x2d8>)
34012d5a:	4293      	cmp	r3, r2
34012d5c:	f200 825d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d60:	4a89      	ldr	r2, [pc, #548]	@ (34012f88 <RCCEx_GetSPICLKFreq+0x2dc>)
34012d62:	4293      	cmp	r3, r2
34012d64:	f000 8238 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d68:	4a87      	ldr	r2, [pc, #540]	@ (34012f88 <RCCEx_GetSPICLKFreq+0x2dc>)
34012d6a:	4293      	cmp	r3, r2
34012d6c:	f200 8255 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d70:	4a86      	ldr	r2, [pc, #536]	@ (34012f8c <RCCEx_GetSPICLKFreq+0x2e0>)
34012d72:	4293      	cmp	r3, r2
34012d74:	f000 8230 	beq.w	340131d8 <RCCEx_GetSPICLKFreq+0x52c>
34012d78:	4a84      	ldr	r2, [pc, #528]	@ (34012f8c <RCCEx_GetSPICLKFreq+0x2e0>)
34012d7a:	4293      	cmp	r3, r2
34012d7c:	f200 824d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d80:	4a83      	ldr	r2, [pc, #524]	@ (34012f90 <RCCEx_GetSPICLKFreq+0x2e4>)
34012d82:	4293      	cmp	r3, r2
34012d84:	f000 8236 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012d88:	4a81      	ldr	r2, [pc, #516]	@ (34012f90 <RCCEx_GetSPICLKFreq+0x2e4>)
34012d8a:	4293      	cmp	r3, r2
34012d8c:	f200 8245 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012d90:	4a80      	ldr	r2, [pc, #512]	@ (34012f94 <RCCEx_GetSPICLKFreq+0x2e8>)
34012d92:	4293      	cmp	r3, r2
34012d94:	f000 822e 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012d98:	4a7e      	ldr	r2, [pc, #504]	@ (34012f94 <RCCEx_GetSPICLKFreq+0x2e8>)
34012d9a:	4293      	cmp	r3, r2
34012d9c:	f200 823d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012da0:	4a7d      	ldr	r2, [pc, #500]	@ (34012f98 <RCCEx_GetSPICLKFreq+0x2ec>)
34012da2:	4293      	cmp	r3, r2
34012da4:	f000 8226 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012da8:	4a7b      	ldr	r2, [pc, #492]	@ (34012f98 <RCCEx_GetSPICLKFreq+0x2ec>)
34012daa:	4293      	cmp	r3, r2
34012dac:	f200 8235 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012db0:	4a7a      	ldr	r2, [pc, #488]	@ (34012f9c <RCCEx_GetSPICLKFreq+0x2f0>)
34012db2:	4293      	cmp	r3, r2
34012db4:	f000 821e 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012db8:	4a78      	ldr	r2, [pc, #480]	@ (34012f9c <RCCEx_GetSPICLKFreq+0x2f0>)
34012dba:	4293      	cmp	r3, r2
34012dbc:	f200 822d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012dc0:	4a77      	ldr	r2, [pc, #476]	@ (34012fa0 <RCCEx_GetSPICLKFreq+0x2f4>)
34012dc2:	4293      	cmp	r3, r2
34012dc4:	f000 8216 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012dc8:	4a75      	ldr	r2, [pc, #468]	@ (34012fa0 <RCCEx_GetSPICLKFreq+0x2f4>)
34012dca:	4293      	cmp	r3, r2
34012dcc:	f200 8225 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012dd0:	4a74      	ldr	r2, [pc, #464]	@ (34012fa4 <RCCEx_GetSPICLKFreq+0x2f8>)
34012dd2:	4293      	cmp	r3, r2
34012dd4:	f000 820e 	beq.w	340131f4 <RCCEx_GetSPICLKFreq+0x548>
34012dd8:	4a72      	ldr	r2, [pc, #456]	@ (34012fa4 <RCCEx_GetSPICLKFreq+0x2f8>)
34012dda:	4293      	cmp	r3, r2
34012ddc:	f200 821d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012de0:	4a71      	ldr	r2, [pc, #452]	@ (34012fa8 <RCCEx_GetSPICLKFreq+0x2fc>)
34012de2:	4293      	cmp	r3, r2
34012de4:	f000 8171 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012de8:	4a6f      	ldr	r2, [pc, #444]	@ (34012fa8 <RCCEx_GetSPICLKFreq+0x2fc>)
34012dea:	4293      	cmp	r3, r2
34012dec:	f200 8215 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012df0:	4a6e      	ldr	r2, [pc, #440]	@ (34012fac <RCCEx_GetSPICLKFreq+0x300>)
34012df2:	4293      	cmp	r3, r2
34012df4:	f000 81ad 	beq.w	34013152 <RCCEx_GetSPICLKFreq+0x4a6>
34012df8:	4a6c      	ldr	r2, [pc, #432]	@ (34012fac <RCCEx_GetSPICLKFreq+0x300>)
34012dfa:	4293      	cmp	r3, r2
34012dfc:	f200 820d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e00:	4a6b      	ldr	r2, [pc, #428]	@ (34012fb0 <RCCEx_GetSPICLKFreq+0x304>)
34012e02:	4293      	cmp	r3, r2
34012e04:	f000 81a5 	beq.w	34013152 <RCCEx_GetSPICLKFreq+0x4a6>
34012e08:	4a69      	ldr	r2, [pc, #420]	@ (34012fb0 <RCCEx_GetSPICLKFreq+0x304>)
34012e0a:	4293      	cmp	r3, r2
34012e0c:	f200 8205 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e10:	4a68      	ldr	r2, [pc, #416]	@ (34012fb4 <RCCEx_GetSPICLKFreq+0x308>)
34012e12:	4293      	cmp	r3, r2
34012e14:	f000 8159 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012e18:	4a66      	ldr	r2, [pc, #408]	@ (34012fb4 <RCCEx_GetSPICLKFreq+0x308>)
34012e1a:	4293      	cmp	r3, r2
34012e1c:	f200 81fd 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e20:	4a65      	ldr	r2, [pc, #404]	@ (34012fb8 <RCCEx_GetSPICLKFreq+0x30c>)
34012e22:	4293      	cmp	r3, r2
34012e24:	f000 8151 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012e28:	4a63      	ldr	r2, [pc, #396]	@ (34012fb8 <RCCEx_GetSPICLKFreq+0x30c>)
34012e2a:	4293      	cmp	r3, r2
34012e2c:	f200 81f5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e30:	4a62      	ldr	r2, [pc, #392]	@ (34012fbc <RCCEx_GetSPICLKFreq+0x310>)
34012e32:	4293      	cmp	r3, r2
34012e34:	f000 8149 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012e38:	4a60      	ldr	r2, [pc, #384]	@ (34012fbc <RCCEx_GetSPICLKFreq+0x310>)
34012e3a:	4293      	cmp	r3, r2
34012e3c:	f200 81ed 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e40:	4a5f      	ldr	r2, [pc, #380]	@ (34012fc0 <RCCEx_GetSPICLKFreq+0x314>)
34012e42:	4293      	cmp	r3, r2
34012e44:	f000 80fd 	beq.w	34013042 <RCCEx_GetSPICLKFreq+0x396>
34012e48:	4a5d      	ldr	r2, [pc, #372]	@ (34012fc0 <RCCEx_GetSPICLKFreq+0x314>)
34012e4a:	4293      	cmp	r3, r2
34012e4c:	f200 81e5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e50:	4a5c      	ldr	r2, [pc, #368]	@ (34012fc4 <RCCEx_GetSPICLKFreq+0x318>)
34012e52:	4293      	cmp	r3, r2
34012e54:	f000 8139 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012e58:	4a5a      	ldr	r2, [pc, #360]	@ (34012fc4 <RCCEx_GetSPICLKFreq+0x318>)
34012e5a:	4293      	cmp	r3, r2
34012e5c:	f200 81dd 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e60:	4a59      	ldr	r2, [pc, #356]	@ (34012fc8 <RCCEx_GetSPICLKFreq+0x31c>)
34012e62:	4293      	cmp	r3, r2
34012e64:	f000 8131 	beq.w	340130ca <RCCEx_GetSPICLKFreq+0x41e>
34012e68:	4a57      	ldr	r2, [pc, #348]	@ (34012fc8 <RCCEx_GetSPICLKFreq+0x31c>)
34012e6a:	4293      	cmp	r3, r2
34012e6c:	f200 81d5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e70:	4a56      	ldr	r2, [pc, #344]	@ (34012fcc <RCCEx_GetSPICLKFreq+0x320>)
34012e72:	4293      	cmp	r3, r2
34012e74:	f000 80e5 	beq.w	34013042 <RCCEx_GetSPICLKFreq+0x396>
34012e78:	4a54      	ldr	r2, [pc, #336]	@ (34012fcc <RCCEx_GetSPICLKFreq+0x320>)
34012e7a:	4293      	cmp	r3, r2
34012e7c:	f200 81cd 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e80:	4a53      	ldr	r2, [pc, #332]	@ (34012fd0 <RCCEx_GetSPICLKFreq+0x324>)
34012e82:	4293      	cmp	r3, r2
34012e84:	f000 80dd 	beq.w	34013042 <RCCEx_GetSPICLKFreq+0x396>
34012e88:	4a51      	ldr	r2, [pc, #324]	@ (34012fd0 <RCCEx_GetSPICLKFreq+0x324>)
34012e8a:	4293      	cmp	r3, r2
34012e8c:	f200 81c5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012e90:	4a50      	ldr	r2, [pc, #320]	@ (34012fd4 <RCCEx_GetSPICLKFreq+0x328>)
34012e92:	4293      	cmp	r3, r2
34012e94:	f000 80d5 	beq.w	34013042 <RCCEx_GetSPICLKFreq+0x396>
34012e98:	4a4e      	ldr	r2, [pc, #312]	@ (34012fd4 <RCCEx_GetSPICLKFreq+0x328>)
34012e9a:	4293      	cmp	r3, r2
34012e9c:	f200 81bd 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ea0:	4a4d      	ldr	r2, [pc, #308]	@ (34012fd8 <RCCEx_GetSPICLKFreq+0x32c>)
34012ea2:	4293      	cmp	r3, r2
34012ea4:	f000 80c8 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012ea8:	4a4b      	ldr	r2, [pc, #300]	@ (34012fd8 <RCCEx_GetSPICLKFreq+0x32c>)
34012eaa:	4293      	cmp	r3, r2
34012eac:	f200 81b5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012eb0:	4a4a      	ldr	r2, [pc, #296]	@ (34012fdc <RCCEx_GetSPICLKFreq+0x330>)
34012eb2:	4293      	cmp	r3, r2
34012eb4:	f000 80c0 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012eb8:	4a48      	ldr	r2, [pc, #288]	@ (34012fdc <RCCEx_GetSPICLKFreq+0x330>)
34012eba:	4293      	cmp	r3, r2
34012ebc:	f200 81ad 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ec0:	4a47      	ldr	r2, [pc, #284]	@ (34012fe0 <RCCEx_GetSPICLKFreq+0x334>)
34012ec2:	4293      	cmp	r3, r2
34012ec4:	f000 80b8 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012ec8:	4a45      	ldr	r2, [pc, #276]	@ (34012fe0 <RCCEx_GetSPICLKFreq+0x334>)
34012eca:	4293      	cmp	r3, r2
34012ecc:	f200 81a5 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ed0:	4a44      	ldr	r2, [pc, #272]	@ (34012fe4 <RCCEx_GetSPICLKFreq+0x338>)
34012ed2:	4293      	cmp	r3, r2
34012ed4:	f000 80b0 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012ed8:	4a42      	ldr	r2, [pc, #264]	@ (34012fe4 <RCCEx_GetSPICLKFreq+0x338>)
34012eda:	4293      	cmp	r3, r2
34012edc:	f200 819d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ee0:	4a41      	ldr	r2, [pc, #260]	@ (34012fe8 <RCCEx_GetSPICLKFreq+0x33c>)
34012ee2:	4293      	cmp	r3, r2
34012ee4:	f000 80a8 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012ee8:	4a3f      	ldr	r2, [pc, #252]	@ (34012fe8 <RCCEx_GetSPICLKFreq+0x33c>)
34012eea:	4293      	cmp	r3, r2
34012eec:	f200 8195 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012ef0:	4a3e      	ldr	r2, [pc, #248]	@ (34012fec <RCCEx_GetSPICLKFreq+0x340>)
34012ef2:	4293      	cmp	r3, r2
34012ef4:	f000 80a0 	beq.w	34013038 <RCCEx_GetSPICLKFreq+0x38c>
34012ef8:	4a3c      	ldr	r2, [pc, #240]	@ (34012fec <RCCEx_GetSPICLKFreq+0x340>)
34012efa:	4293      	cmp	r3, r2
34012efc:	f200 818d 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012f00:	4a3b      	ldr	r2, [pc, #236]	@ (34012ff0 <RCCEx_GetSPICLKFreq+0x344>)
34012f02:	4293      	cmp	r3, r2
34012f04:	f000 808c 	beq.w	34013020 <RCCEx_GetSPICLKFreq+0x374>
34012f08:	4a39      	ldr	r2, [pc, #228]	@ (34012ff0 <RCCEx_GetSPICLKFreq+0x344>)
34012f0a:	4293      	cmp	r3, r2
34012f0c:	f200 8185 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012f10:	4a38      	ldr	r2, [pc, #224]	@ (34012ff4 <RCCEx_GetSPICLKFreq+0x348>)
34012f12:	4293      	cmp	r3, r2
34012f14:	d078      	beq.n	34013008 <RCCEx_GetSPICLKFreq+0x35c>
34012f16:	4a37      	ldr	r2, [pc, #220]	@ (34012ff4 <RCCEx_GetSPICLKFreq+0x348>)
34012f18:	4293      	cmp	r3, r2
34012f1a:	f200 817e 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012f1e:	4a36      	ldr	r2, [pc, #216]	@ (34012ff8 <RCCEx_GetSPICLKFreq+0x34c>)
34012f20:	4293      	cmp	r3, r2
34012f22:	d071      	beq.n	34013008 <RCCEx_GetSPICLKFreq+0x35c>
34012f24:	4a34      	ldr	r2, [pc, #208]	@ (34012ff8 <RCCEx_GetSPICLKFreq+0x34c>)
34012f26:	4293      	cmp	r3, r2
34012f28:	f200 8177 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012f2c:	4a33      	ldr	r2, [pc, #204]	@ (34012ffc <RCCEx_GetSPICLKFreq+0x350>)
34012f2e:	4293      	cmp	r3, r2
34012f30:	d00a      	beq.n	34012f48 <RCCEx_GetSPICLKFreq+0x29c>
34012f32:	4a32      	ldr	r2, [pc, #200]	@ (34012ffc <RCCEx_GetSPICLKFreq+0x350>)
34012f34:	4293      	cmp	r3, r2
34012f36:	f200 8170 	bhi.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
34012f3a:	4a31      	ldr	r2, [pc, #196]	@ (34013000 <RCCEx_GetSPICLKFreq+0x354>)
34012f3c:	4293      	cmp	r3, r2
34012f3e:	d063      	beq.n	34013008 <RCCEx_GetSPICLKFreq+0x35c>
34012f40:	4a30      	ldr	r2, [pc, #192]	@ (34013004 <RCCEx_GetSPICLKFreq+0x358>)
34012f42:	4293      	cmp	r3, r2
34012f44:	f040 8169 	bne.w	3401321a <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34012f48:	f7f4 fae0 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34012f4c:	4603      	mov	r3, r0
34012f4e:	4618      	mov	r0, r3
34012f50:	f7fd fbd4 	bl	340106fc <RCCEx_GetHCLKFreq>
34012f54:	4603      	mov	r3, r0
34012f56:	4618      	mov	r0, r3
34012f58:	f7fd fbe1 	bl	3401071e <RCCEx_GetPCLK1Freq>
34012f5c:	60f8      	str	r0, [r7, #12]
      break;
34012f5e:	e169      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
34012f60:	07061820 	.word	0x07061820
34012f64:	07061420 	.word	0x07061420
34012f68:	07061020 	.word	0x07061020
34012f6c:	07060c20 	.word	0x07060c20
34012f70:	07060820 	.word	0x07060820
34012f74:	07060420 	.word	0x07060420
34012f78:	07051820 	.word	0x07051820
34012f7c:	07051420 	.word	0x07051420
34012f80:	07051020 	.word	0x07051020
34012f84:	07050c20 	.word	0x07050c20
34012f88:	07050820 	.word	0x07050820
34012f8c:	07050420 	.word	0x07050420
34012f90:	07041820 	.word	0x07041820
34012f94:	07041420 	.word	0x07041420
34012f98:	07041020 	.word	0x07041020
34012f9c:	07040c20 	.word	0x07040c20
34012fa0:	07040820 	.word	0x07040820
34012fa4:	07040420 	.word	0x07040420
34012fa8:	07031820 	.word	0x07031820
34012fac:	07031420 	.word	0x07031420
34012fb0:	07031020 	.word	0x07031020
34012fb4:	07030c20 	.word	0x07030c20
34012fb8:	07030820 	.word	0x07030820
34012fbc:	07030420 	.word	0x07030420
34012fc0:	07021820 	.word	0x07021820
34012fc4:	07021420 	.word	0x07021420
34012fc8:	07021020 	.word	0x07021020
34012fcc:	07020c20 	.word	0x07020c20
34012fd0:	07020820 	.word	0x07020820
34012fd4:	07020420 	.word	0x07020420
34012fd8:	07011820 	.word	0x07011820
34012fdc:	07011420 	.word	0x07011420
34012fe0:	07011020 	.word	0x07011020
34012fe4:	07010c20 	.word	0x07010c20
34012fe8:	07010820 	.word	0x07010820
34012fec:	07010420 	.word	0x07010420
34012ff0:	07001820 	.word	0x07001820
34012ff4:	07001420 	.word	0x07001420
34012ff8:	07001020 	.word	0x07001020
34012ffc:	07000c20 	.word	0x07000c20
34013000:	07000420 	.word	0x07000420
34013004:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013008:	f7f4 fa80 	bl	3400750c <HAL_RCC_GetSysClockFreq>
3401300c:	4603      	mov	r3, r0
3401300e:	4618      	mov	r0, r3
34013010:	f7fd fb74 	bl	340106fc <RCCEx_GetHCLKFreq>
34013014:	4603      	mov	r3, r0
34013016:	4618      	mov	r0, r3
34013018:	f7fd fb91 	bl	3401073e <RCCEx_GetPCLK2Freq>
3401301c:	60f8      	str	r0, [r7, #12]
      break;
3401301e:	e109      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013020:	f7f4 fa74 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34013024:	4603      	mov	r3, r0
34013026:	4618      	mov	r0, r3
34013028:	f7fd fb68 	bl	340106fc <RCCEx_GetHCLKFreq>
3401302c:	4603      	mov	r3, r0
3401302e:	4618      	mov	r0, r3
34013030:	f7fd fb96 	bl	34010760 <RCCEx_GetPCLK4Freq>
34013034:	60f8      	str	r0, [r7, #12]
      break;
34013036:	e0fd      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013038:	2007      	movs	r0, #7
3401303a:	f7fd fe4b 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401303e:	60f8      	str	r0, [r7, #12]
      break;
34013040:	e0f8      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34013042:	f7f5 fe45 	bl	34008cd0 <LL_RCC_IC8_IsEnabled>
34013046:	4603      	mov	r3, r0
34013048:	2b00      	cmp	r3, #0
3401304a:	f000 80e8 	beq.w	3401321e <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3401304e:	f7f5 fe61 	bl	34008d14 <LL_RCC_IC8_GetDivider>
34013052:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34013054:	f7f5 fe50 	bl	34008cf8 <LL_RCC_IC8_GetSource>
34013058:	4603      	mov	r3, r0
3401305a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401305e:	d029      	beq.n	340130b4 <RCCEx_GetSPICLKFreq+0x408>
34013060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013064:	d82f      	bhi.n	340130c6 <RCCEx_GetSPICLKFreq+0x41a>
34013066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401306a:	d01a      	beq.n	340130a2 <RCCEx_GetSPICLKFreq+0x3f6>
3401306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013070:	d829      	bhi.n	340130c6 <RCCEx_GetSPICLKFreq+0x41a>
34013072:	2b00      	cmp	r3, #0
34013074:	d003      	beq.n	3401307e <RCCEx_GetSPICLKFreq+0x3d2>
34013076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401307a:	d009      	beq.n	34013090 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401307c:	e023      	b.n	340130c6 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401307e:	f7fd fa25 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013082:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013084:	68fa      	ldr	r2, [r7, #12]
34013086:	68bb      	ldr	r3, [r7, #8]
34013088:	fbb2 f3f3 	udiv	r3, r2, r3
3401308c:	60fb      	str	r3, [r7, #12]
            break;
3401308e:	e01b      	b.n	340130c8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013090:	f7fd fa62 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013094:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013096:	68fa      	ldr	r2, [r7, #12]
34013098:	68bb      	ldr	r3, [r7, #8]
3401309a:	fbb2 f3f3 	udiv	r3, r2, r3
3401309e:	60fb      	str	r3, [r7, #12]
            break;
340130a0:	e012      	b.n	340130c8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340130a2:	f7fd fa9f 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340130a6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340130a8:	68fa      	ldr	r2, [r7, #12]
340130aa:	68bb      	ldr	r3, [r7, #8]
340130ac:	fbb2 f3f3 	udiv	r3, r2, r3
340130b0:	60fb      	str	r3, [r7, #12]
            break;
340130b2:	e009      	b.n	340130c8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340130b4:	f7fd fadc 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340130b8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340130ba:	68fa      	ldr	r2, [r7, #12]
340130bc:	68bb      	ldr	r3, [r7, #8]
340130be:	fbb2 f3f3 	udiv	r3, r2, r3
340130c2:	60fb      	str	r3, [r7, #12]
            break;
340130c4:	e000      	b.n	340130c8 <RCCEx_GetSPICLKFreq+0x41c>
            break;
340130c6:	bf00      	nop
        }
      }
      break;
340130c8:	e0a9      	b.n	3401321e <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340130ca:	f7f5 fe41 	bl	34008d50 <LL_RCC_IC9_IsEnabled>
340130ce:	4603      	mov	r3, r0
340130d0:	2b00      	cmp	r3, #0
340130d2:	f000 80a6 	beq.w	34013222 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340130d6:	f7f5 fe5d 	bl	34008d94 <LL_RCC_IC9_GetDivider>
340130da:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340130dc:	f7f5 fe4c 	bl	34008d78 <LL_RCC_IC9_GetSource>
340130e0:	4603      	mov	r3, r0
340130e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130e6:	d029      	beq.n	3401313c <RCCEx_GetSPICLKFreq+0x490>
340130e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340130ec:	d82f      	bhi.n	3401314e <RCCEx_GetSPICLKFreq+0x4a2>
340130ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130f2:	d01a      	beq.n	3401312a <RCCEx_GetSPICLKFreq+0x47e>
340130f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340130f8:	d829      	bhi.n	3401314e <RCCEx_GetSPICLKFreq+0x4a2>
340130fa:	2b00      	cmp	r3, #0
340130fc:	d003      	beq.n	34013106 <RCCEx_GetSPICLKFreq+0x45a>
340130fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013102:	d009      	beq.n	34013118 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013104:	e023      	b.n	3401314e <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013106:	f7fd f9e1 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
3401310a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401310c:	68fa      	ldr	r2, [r7, #12]
3401310e:	68bb      	ldr	r3, [r7, #8]
34013110:	fbb2 f3f3 	udiv	r3, r2, r3
34013114:	60fb      	str	r3, [r7, #12]
            break;
34013116:	e01b      	b.n	34013150 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013118:	f7fd fa1e 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
3401311c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3401311e:	68fa      	ldr	r2, [r7, #12]
34013120:	68bb      	ldr	r3, [r7, #8]
34013122:	fbb2 f3f3 	udiv	r3, r2, r3
34013126:	60fb      	str	r3, [r7, #12]
            break;
34013128:	e012      	b.n	34013150 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401312a:	f7fd fa5b 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
3401312e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013130:	68fa      	ldr	r2, [r7, #12]
34013132:	68bb      	ldr	r3, [r7, #8]
34013134:	fbb2 f3f3 	udiv	r3, r2, r3
34013138:	60fb      	str	r3, [r7, #12]
            break;
3401313a:	e009      	b.n	34013150 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401313c:	f7fd fa98 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34013140:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013142:	68fa      	ldr	r2, [r7, #12]
34013144:	68bb      	ldr	r3, [r7, #8]
34013146:	fbb2 f3f3 	udiv	r3, r2, r3
3401314a:	60fb      	str	r3, [r7, #12]
            break;
3401314c:	e000      	b.n	34013150 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3401314e:	bf00      	nop
        }
      }
      break;
34013150:	e067      	b.n	34013222 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013152:	f7f5 fefd 	bl	34008f50 <LL_RCC_IC14_IsEnabled>
34013156:	4603      	mov	r3, r0
34013158:	2b00      	cmp	r3, #0
3401315a:	d064      	beq.n	34013226 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3401315c:	f7f5 ff1a 	bl	34008f94 <LL_RCC_IC14_GetDivider>
34013160:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013162:	f7f5 ff09 	bl	34008f78 <LL_RCC_IC14_GetSource>
34013166:	4603      	mov	r3, r0
34013168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401316c:	d029      	beq.n	340131c2 <RCCEx_GetSPICLKFreq+0x516>
3401316e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013172:	d82f      	bhi.n	340131d4 <RCCEx_GetSPICLKFreq+0x528>
34013174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013178:	d01a      	beq.n	340131b0 <RCCEx_GetSPICLKFreq+0x504>
3401317a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401317e:	d829      	bhi.n	340131d4 <RCCEx_GetSPICLKFreq+0x528>
34013180:	2b00      	cmp	r3, #0
34013182:	d003      	beq.n	3401318c <RCCEx_GetSPICLKFreq+0x4e0>
34013184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013188:	d009      	beq.n	3401319e <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3401318a:	e023      	b.n	340131d4 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401318c:	f7fd f99e 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013190:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34013192:	68fa      	ldr	r2, [r7, #12]
34013194:	68bb      	ldr	r3, [r7, #8]
34013196:	fbb2 f3f3 	udiv	r3, r2, r3
3401319a:	60fb      	str	r3, [r7, #12]
            break;
3401319c:	e01b      	b.n	340131d6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401319e:	f7fd f9db 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340131a2:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340131a4:	68fa      	ldr	r2, [r7, #12]
340131a6:	68bb      	ldr	r3, [r7, #8]
340131a8:	fbb2 f3f3 	udiv	r3, r2, r3
340131ac:	60fb      	str	r3, [r7, #12]
            break;
340131ae:	e012      	b.n	340131d6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340131b0:	f7fd fa18 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340131b4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340131b6:	68fa      	ldr	r2, [r7, #12]
340131b8:	68bb      	ldr	r3, [r7, #8]
340131ba:	fbb2 f3f3 	udiv	r3, r2, r3
340131be:	60fb      	str	r3, [r7, #12]
            break;
340131c0:	e009      	b.n	340131d6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340131c2:	f7fd fa55 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340131c6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340131c8:	68fa      	ldr	r2, [r7, #12]
340131ca:	68bb      	ldr	r3, [r7, #8]
340131cc:	fbb2 f3f3 	udiv	r3, r2, r3
340131d0:	60fb      	str	r3, [r7, #12]
            break;
340131d2:	e000      	b.n	340131d6 <RCCEx_GetSPICLKFreq+0x52a>
            break;
340131d4:	bf00      	nop
        }
      }
      break;
340131d6:	e026      	b.n	34013226 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340131d8:	f7f4 fd96 	bl	34007d08 <LL_RCC_HSI_IsReady>
340131dc:	4603      	mov	r3, r0
340131de:	2b00      	cmp	r3, #0
340131e0:	d023      	beq.n	3401322a <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340131e2:	f7f4 fda3 	bl	34007d2c <LL_RCC_HSI_GetDivider>
340131e6:	4603      	mov	r3, r0
340131e8:	09db      	lsrs	r3, r3, #7
340131ea:	4a15      	ldr	r2, [pc, #84]	@ (34013240 <RCCEx_GetSPICLKFreq+0x594>)
340131ec:	fa22 f303 	lsr.w	r3, r2, r3
340131f0:	60fb      	str	r3, [r7, #12]
      }
      break;
340131f2:	e01a      	b.n	3401322a <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340131f4:	f7f4 fda8 	bl	34007d48 <LL_RCC_MSI_IsReady>
340131f8:	4603      	mov	r3, r0
340131fa:	2b00      	cmp	r3, #0
340131fc:	d017      	beq.n	3401322e <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
340131fe:	4b11      	ldr	r3, [pc, #68]	@ (34013244 <RCCEx_GetSPICLKFreq+0x598>)
34013200:	60fb      	str	r3, [r7, #12]
      }
      break;
34013202:	e014      	b.n	3401322e <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
34013204:	4b10      	ldr	r3, [pc, #64]	@ (34013248 <RCCEx_GetSPICLKFreq+0x59c>)
34013206:	60fb      	str	r3, [r7, #12]
      break;
34013208:	e014      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3401320a:	f7f4 fd6b 	bl	34007ce4 <LL_RCC_HSE_IsReady>
3401320e:	4603      	mov	r3, r0
34013210:	2b00      	cmp	r3, #0
34013212:	d00e      	beq.n	34013232 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
34013214:	4b0d      	ldr	r3, [pc, #52]	@ (3401324c <RCCEx_GetSPICLKFreq+0x5a0>)
34013216:	60fb      	str	r3, [r7, #12]
      }
      break;
34013218:	e00b      	b.n	34013232 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3401321a:	bf00      	nop
3401321c:	e00a      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401321e:	bf00      	nop
34013220:	e008      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013222:	bf00      	nop
34013224:	e006      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013226:	bf00      	nop
34013228:	e004      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401322a:	bf00      	nop
3401322c:	e002      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
3401322e:	bf00      	nop
34013230:	e000      	b.n	34013234 <RCCEx_GetSPICLKFreq+0x588>
      break;
34013232:	bf00      	nop
  }

  return spi_frequency;
34013234:	68fb      	ldr	r3, [r7, #12]
}
34013236:	4618      	mov	r0, r3
34013238:	3710      	adds	r7, #16
3401323a:	46bd      	mov	sp, r7
3401323c:	bd80      	pop	{r7, pc}
3401323e:	bf00      	nop
34013240:	03d09000 	.word	0x03d09000
34013244:	003d0900 	.word	0x003d0900
34013248:	00bb8000 	.word	0x00bb8000
3401324c:	02dc6c00 	.word	0x02dc6c00

34013250 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
34013250:	b580      	push	{r7, lr}
34013252:	b084      	sub	sp, #16
34013254:	af00      	add	r7, sp, #0
34013256:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34013258:	2300      	movs	r3, #0
3401325a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401325c:	6878      	ldr	r0, [r7, #4]
3401325e:	f7f5 f947 	bl	340084f0 <LL_RCC_GetUARTClockSource>
34013262:	4603      	mov	r3, r0
34013264:	4aa2      	ldr	r2, [pc, #648]	@ (340134f0 <RCCEx_GetUARTCLKFreq+0x2a0>)
34013266:	4293      	cmp	r3, r2
34013268:	f000 81e8 	beq.w	3401363c <RCCEx_GetUARTCLKFreq+0x3ec>
3401326c:	4aa0      	ldr	r2, [pc, #640]	@ (340134f0 <RCCEx_GetUARTCLKFreq+0x2a0>)
3401326e:	4293      	cmp	r3, r2
34013270:	f200 8203 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013274:	4a9f      	ldr	r2, [pc, #636]	@ (340134f4 <RCCEx_GetUARTCLKFreq+0x2a4>)
34013276:	4293      	cmp	r3, r2
34013278:	f000 81e0 	beq.w	3401363c <RCCEx_GetUARTCLKFreq+0x3ec>
3401327c:	4a9d      	ldr	r2, [pc, #628]	@ (340134f4 <RCCEx_GetUARTCLKFreq+0x2a4>)
3401327e:	4293      	cmp	r3, r2
34013280:	f200 81fb 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013284:	4a9c      	ldr	r2, [pc, #624]	@ (340134f8 <RCCEx_GetUARTCLKFreq+0x2a8>)
34013286:	4293      	cmp	r3, r2
34013288:	f000 81d8 	beq.w	3401363c <RCCEx_GetUARTCLKFreq+0x3ec>
3401328c:	4a9a      	ldr	r2, [pc, #616]	@ (340134f8 <RCCEx_GetUARTCLKFreq+0x2a8>)
3401328e:	4293      	cmp	r3, r2
34013290:	f200 81f3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013294:	4a99      	ldr	r2, [pc, #612]	@ (340134fc <RCCEx_GetUARTCLKFreq+0x2ac>)
34013296:	4293      	cmp	r3, r2
34013298:	f000 81d0 	beq.w	3401363c <RCCEx_GetUARTCLKFreq+0x3ec>
3401329c:	4a97      	ldr	r2, [pc, #604]	@ (340134fc <RCCEx_GetUARTCLKFreq+0x2ac>)
3401329e:	4293      	cmp	r3, r2
340132a0:	f200 81eb 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132a4:	4a96      	ldr	r2, [pc, #600]	@ (34013500 <RCCEx_GetUARTCLKFreq+0x2b0>)
340132a6:	4293      	cmp	r3, r2
340132a8:	f000 81c8 	beq.w	3401363c <RCCEx_GetUARTCLKFreq+0x3ec>
340132ac:	4a94      	ldr	r2, [pc, #592]	@ (34013500 <RCCEx_GetUARTCLKFreq+0x2b0>)
340132ae:	4293      	cmp	r3, r2
340132b0:	f200 81e3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132b4:	4a93      	ldr	r2, [pc, #588]	@ (34013504 <RCCEx_GetUARTCLKFreq+0x2b4>)
340132b6:	4293      	cmp	r3, r2
340132b8:	f000 81ce 	beq.w	34013658 <RCCEx_GetUARTCLKFreq+0x408>
340132bc:	4a91      	ldr	r2, [pc, #580]	@ (34013504 <RCCEx_GetUARTCLKFreq+0x2b4>)
340132be:	4293      	cmp	r3, r2
340132c0:	f200 81db 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132c4:	4a90      	ldr	r2, [pc, #576]	@ (34013508 <RCCEx_GetUARTCLKFreq+0x2b8>)
340132c6:	4293      	cmp	r3, r2
340132c8:	f000 81c6 	beq.w	34013658 <RCCEx_GetUARTCLKFreq+0x408>
340132cc:	4a8e      	ldr	r2, [pc, #568]	@ (34013508 <RCCEx_GetUARTCLKFreq+0x2b8>)
340132ce:	4293      	cmp	r3, r2
340132d0:	f200 81d3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132d4:	4a8d      	ldr	r2, [pc, #564]	@ (3401350c <RCCEx_GetUARTCLKFreq+0x2bc>)
340132d6:	4293      	cmp	r3, r2
340132d8:	f000 81be 	beq.w	34013658 <RCCEx_GetUARTCLKFreq+0x408>
340132dc:	4a8b      	ldr	r2, [pc, #556]	@ (3401350c <RCCEx_GetUARTCLKFreq+0x2bc>)
340132de:	4293      	cmp	r3, r2
340132e0:	f200 81cb 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132e4:	4a8a      	ldr	r2, [pc, #552]	@ (34013510 <RCCEx_GetUARTCLKFreq+0x2c0>)
340132e6:	4293      	cmp	r3, r2
340132e8:	f000 81b6 	beq.w	34013658 <RCCEx_GetUARTCLKFreq+0x408>
340132ec:	4a88      	ldr	r2, [pc, #544]	@ (34013510 <RCCEx_GetUARTCLKFreq+0x2c0>)
340132ee:	4293      	cmp	r3, r2
340132f0:	f200 81c3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340132f4:	4a87      	ldr	r2, [pc, #540]	@ (34013514 <RCCEx_GetUARTCLKFreq+0x2c4>)
340132f6:	4293      	cmp	r3, r2
340132f8:	f000 81ae 	beq.w	34013658 <RCCEx_GetUARTCLKFreq+0x408>
340132fc:	4a85      	ldr	r2, [pc, #532]	@ (34013514 <RCCEx_GetUARTCLKFreq+0x2c4>)
340132fe:	4293      	cmp	r3, r2
34013300:	f200 81bb 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013304:	4a84      	ldr	r2, [pc, #528]	@ (34013518 <RCCEx_GetUARTCLKFreq+0x2c8>)
34013306:	4293      	cmp	r3, r2
34013308:	f000 81ae 	beq.w	34013668 <RCCEx_GetUARTCLKFreq+0x418>
3401330c:	4a82      	ldr	r2, [pc, #520]	@ (34013518 <RCCEx_GetUARTCLKFreq+0x2c8>)
3401330e:	4293      	cmp	r3, r2
34013310:	f200 81b3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013314:	4a81      	ldr	r2, [pc, #516]	@ (3401351c <RCCEx_GetUARTCLKFreq+0x2cc>)
34013316:	4293      	cmp	r3, r2
34013318:	f000 81a6 	beq.w	34013668 <RCCEx_GetUARTCLKFreq+0x418>
3401331c:	4a7f      	ldr	r2, [pc, #508]	@ (3401351c <RCCEx_GetUARTCLKFreq+0x2cc>)
3401331e:	4293      	cmp	r3, r2
34013320:	f200 81ab 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013324:	4a7e      	ldr	r2, [pc, #504]	@ (34013520 <RCCEx_GetUARTCLKFreq+0x2d0>)
34013326:	4293      	cmp	r3, r2
34013328:	f000 819e 	beq.w	34013668 <RCCEx_GetUARTCLKFreq+0x418>
3401332c:	4a7c      	ldr	r2, [pc, #496]	@ (34013520 <RCCEx_GetUARTCLKFreq+0x2d0>)
3401332e:	4293      	cmp	r3, r2
34013330:	f200 81a3 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013334:	4a7b      	ldr	r2, [pc, #492]	@ (34013524 <RCCEx_GetUARTCLKFreq+0x2d4>)
34013336:	4293      	cmp	r3, r2
34013338:	f000 8196 	beq.w	34013668 <RCCEx_GetUARTCLKFreq+0x418>
3401333c:	4a79      	ldr	r2, [pc, #484]	@ (34013524 <RCCEx_GetUARTCLKFreq+0x2d4>)
3401333e:	4293      	cmp	r3, r2
34013340:	f200 819b 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013344:	4a78      	ldr	r2, [pc, #480]	@ (34013528 <RCCEx_GetUARTCLKFreq+0x2d8>)
34013346:	4293      	cmp	r3, r2
34013348:	f000 818e 	beq.w	34013668 <RCCEx_GetUARTCLKFreq+0x418>
3401334c:	4a76      	ldr	r2, [pc, #472]	@ (34013528 <RCCEx_GetUARTCLKFreq+0x2d8>)
3401334e:	4293      	cmp	r3, r2
34013350:	f200 8193 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013354:	4a75      	ldr	r2, [pc, #468]	@ (3401352c <RCCEx_GetUARTCLKFreq+0x2dc>)
34013356:	4293      	cmp	r3, r2
34013358:	f000 812d 	beq.w	340135b6 <RCCEx_GetUARTCLKFreq+0x366>
3401335c:	4a73      	ldr	r2, [pc, #460]	@ (3401352c <RCCEx_GetUARTCLKFreq+0x2dc>)
3401335e:	4293      	cmp	r3, r2
34013360:	f200 818b 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013364:	4a72      	ldr	r2, [pc, #456]	@ (34013530 <RCCEx_GetUARTCLKFreq+0x2e0>)
34013366:	4293      	cmp	r3, r2
34013368:	f000 8125 	beq.w	340135b6 <RCCEx_GetUARTCLKFreq+0x366>
3401336c:	4a70      	ldr	r2, [pc, #448]	@ (34013530 <RCCEx_GetUARTCLKFreq+0x2e0>)
3401336e:	4293      	cmp	r3, r2
34013370:	f200 8183 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013374:	4a6f      	ldr	r2, [pc, #444]	@ (34013534 <RCCEx_GetUARTCLKFreq+0x2e4>)
34013376:	4293      	cmp	r3, r2
34013378:	f000 811d 	beq.w	340135b6 <RCCEx_GetUARTCLKFreq+0x366>
3401337c:	4a6d      	ldr	r2, [pc, #436]	@ (34013534 <RCCEx_GetUARTCLKFreq+0x2e4>)
3401337e:	4293      	cmp	r3, r2
34013380:	f200 817b 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013384:	4a6c      	ldr	r2, [pc, #432]	@ (34013538 <RCCEx_GetUARTCLKFreq+0x2e8>)
34013386:	4293      	cmp	r3, r2
34013388:	f000 8115 	beq.w	340135b6 <RCCEx_GetUARTCLKFreq+0x366>
3401338c:	4a6a      	ldr	r2, [pc, #424]	@ (34013538 <RCCEx_GetUARTCLKFreq+0x2e8>)
3401338e:	4293      	cmp	r3, r2
34013390:	f200 8173 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013394:	4a69      	ldr	r2, [pc, #420]	@ (3401353c <RCCEx_GetUARTCLKFreq+0x2ec>)
34013396:	4293      	cmp	r3, r2
34013398:	f000 810d 	beq.w	340135b6 <RCCEx_GetUARTCLKFreq+0x366>
3401339c:	4a67      	ldr	r2, [pc, #412]	@ (3401353c <RCCEx_GetUARTCLKFreq+0x2ec>)
3401339e:	4293      	cmp	r3, r2
340133a0:	f200 816b 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133a4:	4a66      	ldr	r2, [pc, #408]	@ (34013540 <RCCEx_GetUARTCLKFreq+0x2f0>)
340133a6:	4293      	cmp	r3, r2
340133a8:	d07b      	beq.n	340134a2 <RCCEx_GetUARTCLKFreq+0x252>
340133aa:	4a65      	ldr	r2, [pc, #404]	@ (34013540 <RCCEx_GetUARTCLKFreq+0x2f0>)
340133ac:	4293      	cmp	r3, r2
340133ae:	f200 8164 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133b2:	4a64      	ldr	r2, [pc, #400]	@ (34013544 <RCCEx_GetUARTCLKFreq+0x2f4>)
340133b4:	4293      	cmp	r3, r2
340133b6:	d074      	beq.n	340134a2 <RCCEx_GetUARTCLKFreq+0x252>
340133b8:	4a62      	ldr	r2, [pc, #392]	@ (34013544 <RCCEx_GetUARTCLKFreq+0x2f4>)
340133ba:	4293      	cmp	r3, r2
340133bc:	f200 815d 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133c0:	4a61      	ldr	r2, [pc, #388]	@ (34013548 <RCCEx_GetUARTCLKFreq+0x2f8>)
340133c2:	4293      	cmp	r3, r2
340133c4:	d06d      	beq.n	340134a2 <RCCEx_GetUARTCLKFreq+0x252>
340133c6:	4a60      	ldr	r2, [pc, #384]	@ (34013548 <RCCEx_GetUARTCLKFreq+0x2f8>)
340133c8:	4293      	cmp	r3, r2
340133ca:	f200 8156 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133ce:	4a5f      	ldr	r2, [pc, #380]	@ (3401354c <RCCEx_GetUARTCLKFreq+0x2fc>)
340133d0:	4293      	cmp	r3, r2
340133d2:	d066      	beq.n	340134a2 <RCCEx_GetUARTCLKFreq+0x252>
340133d4:	4a5d      	ldr	r2, [pc, #372]	@ (3401354c <RCCEx_GetUARTCLKFreq+0x2fc>)
340133d6:	4293      	cmp	r3, r2
340133d8:	f200 814f 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133dc:	4a5c      	ldr	r2, [pc, #368]	@ (34013550 <RCCEx_GetUARTCLKFreq+0x300>)
340133de:	4293      	cmp	r3, r2
340133e0:	d05f      	beq.n	340134a2 <RCCEx_GetUARTCLKFreq+0x252>
340133e2:	4a5b      	ldr	r2, [pc, #364]	@ (34013550 <RCCEx_GetUARTCLKFreq+0x300>)
340133e4:	4293      	cmp	r3, r2
340133e6:	f200 8148 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133ea:	4a5a      	ldr	r2, [pc, #360]	@ (34013554 <RCCEx_GetUARTCLKFreq+0x304>)
340133ec:	4293      	cmp	r3, r2
340133ee:	d053      	beq.n	34013498 <RCCEx_GetUARTCLKFreq+0x248>
340133f0:	4a58      	ldr	r2, [pc, #352]	@ (34013554 <RCCEx_GetUARTCLKFreq+0x304>)
340133f2:	4293      	cmp	r3, r2
340133f4:	f200 8141 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
340133f8:	4a57      	ldr	r2, [pc, #348]	@ (34013558 <RCCEx_GetUARTCLKFreq+0x308>)
340133fa:	4293      	cmp	r3, r2
340133fc:	d04c      	beq.n	34013498 <RCCEx_GetUARTCLKFreq+0x248>
340133fe:	4a56      	ldr	r2, [pc, #344]	@ (34013558 <RCCEx_GetUARTCLKFreq+0x308>)
34013400:	4293      	cmp	r3, r2
34013402:	f200 813a 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013406:	4a55      	ldr	r2, [pc, #340]	@ (3401355c <RCCEx_GetUARTCLKFreq+0x30c>)
34013408:	4293      	cmp	r3, r2
3401340a:	d045      	beq.n	34013498 <RCCEx_GetUARTCLKFreq+0x248>
3401340c:	4a53      	ldr	r2, [pc, #332]	@ (3401355c <RCCEx_GetUARTCLKFreq+0x30c>)
3401340e:	4293      	cmp	r3, r2
34013410:	f200 8133 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013414:	4a52      	ldr	r2, [pc, #328]	@ (34013560 <RCCEx_GetUARTCLKFreq+0x310>)
34013416:	4293      	cmp	r3, r2
34013418:	d03e      	beq.n	34013498 <RCCEx_GetUARTCLKFreq+0x248>
3401341a:	4a51      	ldr	r2, [pc, #324]	@ (34013560 <RCCEx_GetUARTCLKFreq+0x310>)
3401341c:	4293      	cmp	r3, r2
3401341e:	f200 812c 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013422:	4a50      	ldr	r2, [pc, #320]	@ (34013564 <RCCEx_GetUARTCLKFreq+0x314>)
34013424:	4293      	cmp	r3, r2
34013426:	d037      	beq.n	34013498 <RCCEx_GetUARTCLKFreq+0x248>
34013428:	4a4e      	ldr	r2, [pc, #312]	@ (34013564 <RCCEx_GetUARTCLKFreq+0x314>)
3401342a:	4293      	cmp	r3, r2
3401342c:	f200 8125 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
34013430:	4a4d      	ldr	r2, [pc, #308]	@ (34013568 <RCCEx_GetUARTCLKFreq+0x318>)
34013432:	4293      	cmp	r3, r2
34013434:	d018      	beq.n	34013468 <RCCEx_GetUARTCLKFreq+0x218>
34013436:	4a4c      	ldr	r2, [pc, #304]	@ (34013568 <RCCEx_GetUARTCLKFreq+0x318>)
34013438:	4293      	cmp	r3, r2
3401343a:	f200 811e 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
3401343e:	4a4b      	ldr	r2, [pc, #300]	@ (3401356c <RCCEx_GetUARTCLKFreq+0x31c>)
34013440:	4293      	cmp	r3, r2
34013442:	d011      	beq.n	34013468 <RCCEx_GetUARTCLKFreq+0x218>
34013444:	4a49      	ldr	r2, [pc, #292]	@ (3401356c <RCCEx_GetUARTCLKFreq+0x31c>)
34013446:	4293      	cmp	r3, r2
34013448:	f200 8117 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
3401344c:	4a48      	ldr	r2, [pc, #288]	@ (34013570 <RCCEx_GetUARTCLKFreq+0x320>)
3401344e:	4293      	cmp	r3, r2
34013450:	d00a      	beq.n	34013468 <RCCEx_GetUARTCLKFreq+0x218>
34013452:	4a47      	ldr	r2, [pc, #284]	@ (34013570 <RCCEx_GetUARTCLKFreq+0x320>)
34013454:	4293      	cmp	r3, r2
34013456:	f200 8110 	bhi.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
3401345a:	4a46      	ldr	r2, [pc, #280]	@ (34013574 <RCCEx_GetUARTCLKFreq+0x324>)
3401345c:	4293      	cmp	r3, r2
3401345e:	d00f      	beq.n	34013480 <RCCEx_GetUARTCLKFreq+0x230>
34013460:	4a45      	ldr	r2, [pc, #276]	@ (34013578 <RCCEx_GetUARTCLKFreq+0x328>)
34013462:	4293      	cmp	r3, r2
34013464:	f040 8109 	bne.w	3401367a <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013468:	f7f4 f850 	bl	3400750c <HAL_RCC_GetSysClockFreq>
3401346c:	4603      	mov	r3, r0
3401346e:	4618      	mov	r0, r3
34013470:	f7fd f944 	bl	340106fc <RCCEx_GetHCLKFreq>
34013474:	4603      	mov	r3, r0
34013476:	4618      	mov	r0, r3
34013478:	f7fd f951 	bl	3401071e <RCCEx_GetPCLK1Freq>
3401347c:	60f8      	str	r0, [r7, #12]
      break;
3401347e:	e107      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34013480:	f7f4 f844 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34013484:	4603      	mov	r3, r0
34013486:	4618      	mov	r0, r3
34013488:	f7fd f938 	bl	340106fc <RCCEx_GetHCLKFreq>
3401348c:	4603      	mov	r3, r0
3401348e:	4618      	mov	r0, r3
34013490:	f7fd f955 	bl	3401073e <RCCEx_GetPCLK2Freq>
34013494:	60f8      	str	r0, [r7, #12]
      break;
34013496:	e0fb      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013498:	2007      	movs	r0, #7
3401349a:	f7fd fc1b 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
3401349e:	60f8      	str	r0, [r7, #12]
      break;
340134a0:	e0f6      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340134a2:	f7f5 fc55 	bl	34008d50 <LL_RCC_IC9_IsEnabled>
340134a6:	4603      	mov	r3, r0
340134a8:	2b00      	cmp	r3, #0
340134aa:	f000 80e8 	beq.w	3401367e <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340134ae:	f7f5 fc71 	bl	34008d94 <LL_RCC_IC9_GetDivider>
340134b2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340134b4:	f7f5 fc60 	bl	34008d78 <LL_RCC_IC9_GetSource>
340134b8:	4603      	mov	r3, r0
340134ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340134be:	d06f      	beq.n	340135a0 <RCCEx_GetUARTCLKFreq+0x350>
340134c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340134c4:	d875      	bhi.n	340135b2 <RCCEx_GetUARTCLKFreq+0x362>
340134c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340134ca:	d060      	beq.n	3401358e <RCCEx_GetUARTCLKFreq+0x33e>
340134cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340134d0:	d86f      	bhi.n	340135b2 <RCCEx_GetUARTCLKFreq+0x362>
340134d2:	2b00      	cmp	r3, #0
340134d4:	d003      	beq.n	340134de <RCCEx_GetUARTCLKFreq+0x28e>
340134d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340134da:	d04f      	beq.n	3401357c <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340134dc:	e069      	b.n	340135b2 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340134de:	f7fc fff5 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340134e2:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340134e4:	68fa      	ldr	r2, [r7, #12]
340134e6:	68bb      	ldr	r3, [r7, #8]
340134e8:	fbb2 f3f3 	udiv	r3, r2, r3
340134ec:	60fb      	str	r3, [r7, #12]
            break;
340134ee:	e061      	b.n	340135b4 <RCCEx_GetUARTCLKFreq+0x364>
340134f0:	07061c30 	.word	0x07061c30
340134f4:	07061830 	.word	0x07061830
340134f8:	07061030 	.word	0x07061030
340134fc:	07060c30 	.word	0x07060c30
34013500:	07060034 	.word	0x07060034
34013504:	07051c30 	.word	0x07051c30
34013508:	07051830 	.word	0x07051830
3401350c:	07051030 	.word	0x07051030
34013510:	07050c30 	.word	0x07050c30
34013514:	07050034 	.word	0x07050034
34013518:	07041c30 	.word	0x07041c30
3401351c:	07041830 	.word	0x07041830
34013520:	07041030 	.word	0x07041030
34013524:	07040c30 	.word	0x07040c30
34013528:	07040034 	.word	0x07040034
3401352c:	07031c30 	.word	0x07031c30
34013530:	07031830 	.word	0x07031830
34013534:	07031030 	.word	0x07031030
34013538:	07030c30 	.word	0x07030c30
3401353c:	07030034 	.word	0x07030034
34013540:	07021c30 	.word	0x07021c30
34013544:	07021830 	.word	0x07021830
34013548:	07021030 	.word	0x07021030
3401354c:	07020c30 	.word	0x07020c30
34013550:	07020034 	.word	0x07020034
34013554:	07011c30 	.word	0x07011c30
34013558:	07011830 	.word	0x07011830
3401355c:	07011030 	.word	0x07011030
34013560:	07010c30 	.word	0x07010c30
34013564:	07010034 	.word	0x07010034
34013568:	07001c30 	.word	0x07001c30
3401356c:	07001830 	.word	0x07001830
34013570:	07001030 	.word	0x07001030
34013574:	07000034 	.word	0x07000034
34013578:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401357c:	f7fc ffec 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013580:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013582:	68fa      	ldr	r2, [r7, #12]
34013584:	68bb      	ldr	r3, [r7, #8]
34013586:	fbb2 f3f3 	udiv	r3, r2, r3
3401358a:	60fb      	str	r3, [r7, #12]
            break;
3401358c:	e012      	b.n	340135b4 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401358e:	f7fd f829 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013592:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013594:	68fa      	ldr	r2, [r7, #12]
34013596:	68bb      	ldr	r3, [r7, #8]
34013598:	fbb2 f3f3 	udiv	r3, r2, r3
3401359c:	60fb      	str	r3, [r7, #12]
            break;
3401359e:	e009      	b.n	340135b4 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340135a0:	f7fd f866 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340135a4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340135a6:	68fa      	ldr	r2, [r7, #12]
340135a8:	68bb      	ldr	r3, [r7, #8]
340135aa:	fbb2 f3f3 	udiv	r3, r2, r3
340135ae:	60fb      	str	r3, [r7, #12]
            break;
340135b0:	e000      	b.n	340135b4 <RCCEx_GetUARTCLKFreq+0x364>
            break;
340135b2:	bf00      	nop
        }
      }
      break;
340135b4:	e063      	b.n	3401367e <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
340135b6:	f7f5 fccb 	bl	34008f50 <LL_RCC_IC14_IsEnabled>
340135ba:	4603      	mov	r3, r0
340135bc:	2b00      	cmp	r3, #0
340135be:	d060      	beq.n	34013682 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
340135c0:	f7f5 fce8 	bl	34008f94 <LL_RCC_IC14_GetDivider>
340135c4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
340135c6:	f7f5 fcd7 	bl	34008f78 <LL_RCC_IC14_GetSource>
340135ca:	4603      	mov	r3, r0
340135cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135d0:	d029      	beq.n	34013626 <RCCEx_GetUARTCLKFreq+0x3d6>
340135d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340135d6:	d82f      	bhi.n	34013638 <RCCEx_GetUARTCLKFreq+0x3e8>
340135d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135dc:	d01a      	beq.n	34013614 <RCCEx_GetUARTCLKFreq+0x3c4>
340135de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340135e2:	d829      	bhi.n	34013638 <RCCEx_GetUARTCLKFreq+0x3e8>
340135e4:	2b00      	cmp	r3, #0
340135e6:	d003      	beq.n	340135f0 <RCCEx_GetUARTCLKFreq+0x3a0>
340135e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340135ec:	d009      	beq.n	34013602 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340135ee:	e023      	b.n	34013638 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340135f0:	f7fc ff6c 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
340135f4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340135f6:	68fa      	ldr	r2, [r7, #12]
340135f8:	68bb      	ldr	r3, [r7, #8]
340135fa:	fbb2 f3f3 	udiv	r3, r2, r3
340135fe:	60fb      	str	r3, [r7, #12]
            break;
34013600:	e01b      	b.n	3401363a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013602:	f7fc ffa9 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013606:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34013608:	68fa      	ldr	r2, [r7, #12]
3401360a:	68bb      	ldr	r3, [r7, #8]
3401360c:	fbb2 f3f3 	udiv	r3, r2, r3
34013610:	60fb      	str	r3, [r7, #12]
            break;
34013612:	e012      	b.n	3401363a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013614:	f7fc ffe6 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013618:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3401361a:	68fa      	ldr	r2, [r7, #12]
3401361c:	68bb      	ldr	r3, [r7, #8]
3401361e:	fbb2 f3f3 	udiv	r3, r2, r3
34013622:	60fb      	str	r3, [r7, #12]
            break;
34013624:	e009      	b.n	3401363a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013626:	f7fd f823 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
3401362a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3401362c:	68fa      	ldr	r2, [r7, #12]
3401362e:	68bb      	ldr	r3, [r7, #8]
34013630:	fbb2 f3f3 	udiv	r3, r2, r3
34013634:	60fb      	str	r3, [r7, #12]
            break;
34013636:	e000      	b.n	3401363a <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34013638:	bf00      	nop
        }
      }
      break;
3401363a:	e022      	b.n	34013682 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3401363c:	f7f4 fb64 	bl	34007d08 <LL_RCC_HSI_IsReady>
34013640:	4603      	mov	r3, r0
34013642:	2b00      	cmp	r3, #0
34013644:	d01f      	beq.n	34013686 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013646:	f7f4 fb71 	bl	34007d2c <LL_RCC_HSI_GetDivider>
3401364a:	4603      	mov	r3, r0
3401364c:	09db      	lsrs	r3, r3, #7
3401364e:	4a13      	ldr	r2, [pc, #76]	@ (3401369c <RCCEx_GetUARTCLKFreq+0x44c>)
34013650:	fa22 f303 	lsr.w	r3, r2, r3
34013654:	60fb      	str	r3, [r7, #12]
      }
      break;
34013656:	e016      	b.n	34013686 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34013658:	f7f4 fb76 	bl	34007d48 <LL_RCC_MSI_IsReady>
3401365c:	4603      	mov	r3, r0
3401365e:	2b00      	cmp	r3, #0
34013660:	d013      	beq.n	3401368a <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34013662:	4b0f      	ldr	r3, [pc, #60]	@ (340136a0 <RCCEx_GetUARTCLKFreq+0x450>)
34013664:	60fb      	str	r3, [r7, #12]
      }
      break;
34013666:	e010      	b.n	3401368a <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
34013668:	f7f4 fb8e 	bl	34007d88 <LL_RCC_LSE_IsReady>
3401366c:	4603      	mov	r3, r0
3401366e:	2b00      	cmp	r3, #0
34013670:	d00d      	beq.n	3401368e <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34013672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013676:	60fb      	str	r3, [r7, #12]
      }
      break;
34013678:	e009      	b.n	3401368e <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3401367a:	bf00      	nop
3401367c:	e008      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3401367e:	bf00      	nop
34013680:	e006      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013682:	bf00      	nop
34013684:	e004      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34013686:	bf00      	nop
34013688:	e002      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3401368a:	bf00      	nop
3401368c:	e000      	b.n	34013690 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3401368e:	bf00      	nop
  }

  return uart_frequency;
34013690:	68fb      	ldr	r3, [r7, #12]
}
34013692:	4618      	mov	r0, r3
34013694:	3710      	adds	r7, #16
34013696:	46bd      	mov	sp, r7
34013698:	bd80      	pop	{r7, pc}
3401369a:	bf00      	nop
3401369c:	03d09000 	.word	0x03d09000
340136a0:	003d0900 	.word	0x003d0900

340136a4 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
340136a4:	b580      	push	{r7, lr}
340136a6:	b084      	sub	sp, #16
340136a8:	af00      	add	r7, sp, #0
340136aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
340136ac:	2300      	movs	r3, #0
340136ae:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340136b0:	6878      	ldr	r0, [r7, #4]
340136b2:	f7f4 ff11 	bl	340084d8 <LL_RCC_GetUSARTClockSource>
340136b6:	4603      	mov	r3, r0
340136b8:	4aa2      	ldr	r2, [pc, #648]	@ (34013944 <RCCEx_GetUSARTCLKFreq+0x2a0>)
340136ba:	4293      	cmp	r3, r2
340136bc:	f000 81e8 	beq.w	34013a90 <RCCEx_GetUSARTCLKFreq+0x3ec>
340136c0:	4aa0      	ldr	r2, [pc, #640]	@ (34013944 <RCCEx_GetUSARTCLKFreq+0x2a0>)
340136c2:	4293      	cmp	r3, r2
340136c4:	f200 8203 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340136c8:	4a9f      	ldr	r2, [pc, #636]	@ (34013948 <RCCEx_GetUSARTCLKFreq+0x2a4>)
340136ca:	4293      	cmp	r3, r2
340136cc:	f000 81e0 	beq.w	34013a90 <RCCEx_GetUSARTCLKFreq+0x3ec>
340136d0:	4a9d      	ldr	r2, [pc, #628]	@ (34013948 <RCCEx_GetUSARTCLKFreq+0x2a4>)
340136d2:	4293      	cmp	r3, r2
340136d4:	f200 81fb 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340136d8:	4a9c      	ldr	r2, [pc, #624]	@ (3401394c <RCCEx_GetUSARTCLKFreq+0x2a8>)
340136da:	4293      	cmp	r3, r2
340136dc:	f000 81d8 	beq.w	34013a90 <RCCEx_GetUSARTCLKFreq+0x3ec>
340136e0:	4a9a      	ldr	r2, [pc, #616]	@ (3401394c <RCCEx_GetUSARTCLKFreq+0x2a8>)
340136e2:	4293      	cmp	r3, r2
340136e4:	f200 81f3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340136e8:	4a99      	ldr	r2, [pc, #612]	@ (34013950 <RCCEx_GetUSARTCLKFreq+0x2ac>)
340136ea:	4293      	cmp	r3, r2
340136ec:	f000 81d0 	beq.w	34013a90 <RCCEx_GetUSARTCLKFreq+0x3ec>
340136f0:	4a97      	ldr	r2, [pc, #604]	@ (34013950 <RCCEx_GetUSARTCLKFreq+0x2ac>)
340136f2:	4293      	cmp	r3, r2
340136f4:	f200 81eb 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340136f8:	4a96      	ldr	r2, [pc, #600]	@ (34013954 <RCCEx_GetUSARTCLKFreq+0x2b0>)
340136fa:	4293      	cmp	r3, r2
340136fc:	f000 81c8 	beq.w	34013a90 <RCCEx_GetUSARTCLKFreq+0x3ec>
34013700:	4a94      	ldr	r2, [pc, #592]	@ (34013954 <RCCEx_GetUSARTCLKFreq+0x2b0>)
34013702:	4293      	cmp	r3, r2
34013704:	f200 81e3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013708:	4a93      	ldr	r2, [pc, #588]	@ (34013958 <RCCEx_GetUSARTCLKFreq+0x2b4>)
3401370a:	4293      	cmp	r3, r2
3401370c:	f000 81ce 	beq.w	34013aac <RCCEx_GetUSARTCLKFreq+0x408>
34013710:	4a91      	ldr	r2, [pc, #580]	@ (34013958 <RCCEx_GetUSARTCLKFreq+0x2b4>)
34013712:	4293      	cmp	r3, r2
34013714:	f200 81db 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013718:	4a90      	ldr	r2, [pc, #576]	@ (3401395c <RCCEx_GetUSARTCLKFreq+0x2b8>)
3401371a:	4293      	cmp	r3, r2
3401371c:	f000 81c6 	beq.w	34013aac <RCCEx_GetUSARTCLKFreq+0x408>
34013720:	4a8e      	ldr	r2, [pc, #568]	@ (3401395c <RCCEx_GetUSARTCLKFreq+0x2b8>)
34013722:	4293      	cmp	r3, r2
34013724:	f200 81d3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013728:	4a8d      	ldr	r2, [pc, #564]	@ (34013960 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3401372a:	4293      	cmp	r3, r2
3401372c:	f000 81be 	beq.w	34013aac <RCCEx_GetUSARTCLKFreq+0x408>
34013730:	4a8b      	ldr	r2, [pc, #556]	@ (34013960 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34013732:	4293      	cmp	r3, r2
34013734:	f200 81cb 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013738:	4a8a      	ldr	r2, [pc, #552]	@ (34013964 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3401373a:	4293      	cmp	r3, r2
3401373c:	f000 81b6 	beq.w	34013aac <RCCEx_GetUSARTCLKFreq+0x408>
34013740:	4a88      	ldr	r2, [pc, #544]	@ (34013964 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34013742:	4293      	cmp	r3, r2
34013744:	f200 81c3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013748:	4a87      	ldr	r2, [pc, #540]	@ (34013968 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3401374a:	4293      	cmp	r3, r2
3401374c:	f000 81ae 	beq.w	34013aac <RCCEx_GetUSARTCLKFreq+0x408>
34013750:	4a85      	ldr	r2, [pc, #532]	@ (34013968 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34013752:	4293      	cmp	r3, r2
34013754:	f200 81bb 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013758:	4a84      	ldr	r2, [pc, #528]	@ (3401396c <RCCEx_GetUSARTCLKFreq+0x2c8>)
3401375a:	4293      	cmp	r3, r2
3401375c:	f000 81ae 	beq.w	34013abc <RCCEx_GetUSARTCLKFreq+0x418>
34013760:	4a82      	ldr	r2, [pc, #520]	@ (3401396c <RCCEx_GetUSARTCLKFreq+0x2c8>)
34013762:	4293      	cmp	r3, r2
34013764:	f200 81b3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013768:	4a81      	ldr	r2, [pc, #516]	@ (34013970 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3401376a:	4293      	cmp	r3, r2
3401376c:	f000 81a6 	beq.w	34013abc <RCCEx_GetUSARTCLKFreq+0x418>
34013770:	4a7f      	ldr	r2, [pc, #508]	@ (34013970 <RCCEx_GetUSARTCLKFreq+0x2cc>)
34013772:	4293      	cmp	r3, r2
34013774:	f200 81ab 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013778:	4a7e      	ldr	r2, [pc, #504]	@ (34013974 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3401377a:	4293      	cmp	r3, r2
3401377c:	f000 819e 	beq.w	34013abc <RCCEx_GetUSARTCLKFreq+0x418>
34013780:	4a7c      	ldr	r2, [pc, #496]	@ (34013974 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34013782:	4293      	cmp	r3, r2
34013784:	f200 81a3 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013788:	4a7b      	ldr	r2, [pc, #492]	@ (34013978 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3401378a:	4293      	cmp	r3, r2
3401378c:	f000 8196 	beq.w	34013abc <RCCEx_GetUSARTCLKFreq+0x418>
34013790:	4a79      	ldr	r2, [pc, #484]	@ (34013978 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34013792:	4293      	cmp	r3, r2
34013794:	f200 819b 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013798:	4a78      	ldr	r2, [pc, #480]	@ (3401397c <RCCEx_GetUSARTCLKFreq+0x2d8>)
3401379a:	4293      	cmp	r3, r2
3401379c:	f000 818e 	beq.w	34013abc <RCCEx_GetUSARTCLKFreq+0x418>
340137a0:	4a76      	ldr	r2, [pc, #472]	@ (3401397c <RCCEx_GetUSARTCLKFreq+0x2d8>)
340137a2:	4293      	cmp	r3, r2
340137a4:	f200 8193 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137a8:	4a75      	ldr	r2, [pc, #468]	@ (34013980 <RCCEx_GetUSARTCLKFreq+0x2dc>)
340137aa:	4293      	cmp	r3, r2
340137ac:	f000 812d 	beq.w	34013a0a <RCCEx_GetUSARTCLKFreq+0x366>
340137b0:	4a73      	ldr	r2, [pc, #460]	@ (34013980 <RCCEx_GetUSARTCLKFreq+0x2dc>)
340137b2:	4293      	cmp	r3, r2
340137b4:	f200 818b 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137b8:	4a72      	ldr	r2, [pc, #456]	@ (34013984 <RCCEx_GetUSARTCLKFreq+0x2e0>)
340137ba:	4293      	cmp	r3, r2
340137bc:	f000 8125 	beq.w	34013a0a <RCCEx_GetUSARTCLKFreq+0x366>
340137c0:	4a70      	ldr	r2, [pc, #448]	@ (34013984 <RCCEx_GetUSARTCLKFreq+0x2e0>)
340137c2:	4293      	cmp	r3, r2
340137c4:	f200 8183 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137c8:	4a6f      	ldr	r2, [pc, #444]	@ (34013988 <RCCEx_GetUSARTCLKFreq+0x2e4>)
340137ca:	4293      	cmp	r3, r2
340137cc:	f000 811d 	beq.w	34013a0a <RCCEx_GetUSARTCLKFreq+0x366>
340137d0:	4a6d      	ldr	r2, [pc, #436]	@ (34013988 <RCCEx_GetUSARTCLKFreq+0x2e4>)
340137d2:	4293      	cmp	r3, r2
340137d4:	f200 817b 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137d8:	4a6c      	ldr	r2, [pc, #432]	@ (3401398c <RCCEx_GetUSARTCLKFreq+0x2e8>)
340137da:	4293      	cmp	r3, r2
340137dc:	f000 8115 	beq.w	34013a0a <RCCEx_GetUSARTCLKFreq+0x366>
340137e0:	4a6a      	ldr	r2, [pc, #424]	@ (3401398c <RCCEx_GetUSARTCLKFreq+0x2e8>)
340137e2:	4293      	cmp	r3, r2
340137e4:	f200 8173 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137e8:	4a69      	ldr	r2, [pc, #420]	@ (34013990 <RCCEx_GetUSARTCLKFreq+0x2ec>)
340137ea:	4293      	cmp	r3, r2
340137ec:	f000 810d 	beq.w	34013a0a <RCCEx_GetUSARTCLKFreq+0x366>
340137f0:	4a67      	ldr	r2, [pc, #412]	@ (34013990 <RCCEx_GetUSARTCLKFreq+0x2ec>)
340137f2:	4293      	cmp	r3, r2
340137f4:	f200 816b 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340137f8:	4a66      	ldr	r2, [pc, #408]	@ (34013994 <RCCEx_GetUSARTCLKFreq+0x2f0>)
340137fa:	4293      	cmp	r3, r2
340137fc:	d07b      	beq.n	340138f6 <RCCEx_GetUSARTCLKFreq+0x252>
340137fe:	4a65      	ldr	r2, [pc, #404]	@ (34013994 <RCCEx_GetUSARTCLKFreq+0x2f0>)
34013800:	4293      	cmp	r3, r2
34013802:	f200 8164 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013806:	4a64      	ldr	r2, [pc, #400]	@ (34013998 <RCCEx_GetUSARTCLKFreq+0x2f4>)
34013808:	4293      	cmp	r3, r2
3401380a:	d074      	beq.n	340138f6 <RCCEx_GetUSARTCLKFreq+0x252>
3401380c:	4a62      	ldr	r2, [pc, #392]	@ (34013998 <RCCEx_GetUSARTCLKFreq+0x2f4>)
3401380e:	4293      	cmp	r3, r2
34013810:	f200 815d 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013814:	4a61      	ldr	r2, [pc, #388]	@ (3401399c <RCCEx_GetUSARTCLKFreq+0x2f8>)
34013816:	4293      	cmp	r3, r2
34013818:	d06d      	beq.n	340138f6 <RCCEx_GetUSARTCLKFreq+0x252>
3401381a:	4a60      	ldr	r2, [pc, #384]	@ (3401399c <RCCEx_GetUSARTCLKFreq+0x2f8>)
3401381c:	4293      	cmp	r3, r2
3401381e:	f200 8156 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013822:	4a5f      	ldr	r2, [pc, #380]	@ (340139a0 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34013824:	4293      	cmp	r3, r2
34013826:	d066      	beq.n	340138f6 <RCCEx_GetUSARTCLKFreq+0x252>
34013828:	4a5d      	ldr	r2, [pc, #372]	@ (340139a0 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3401382a:	4293      	cmp	r3, r2
3401382c:	f200 814f 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013830:	4a5c      	ldr	r2, [pc, #368]	@ (340139a4 <RCCEx_GetUSARTCLKFreq+0x300>)
34013832:	4293      	cmp	r3, r2
34013834:	d05f      	beq.n	340138f6 <RCCEx_GetUSARTCLKFreq+0x252>
34013836:	4a5b      	ldr	r2, [pc, #364]	@ (340139a4 <RCCEx_GetUSARTCLKFreq+0x300>)
34013838:	4293      	cmp	r3, r2
3401383a:	f200 8148 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
3401383e:	4a5a      	ldr	r2, [pc, #360]	@ (340139a8 <RCCEx_GetUSARTCLKFreq+0x304>)
34013840:	4293      	cmp	r3, r2
34013842:	d053      	beq.n	340138ec <RCCEx_GetUSARTCLKFreq+0x248>
34013844:	4a58      	ldr	r2, [pc, #352]	@ (340139a8 <RCCEx_GetUSARTCLKFreq+0x304>)
34013846:	4293      	cmp	r3, r2
34013848:	f200 8141 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
3401384c:	4a57      	ldr	r2, [pc, #348]	@ (340139ac <RCCEx_GetUSARTCLKFreq+0x308>)
3401384e:	4293      	cmp	r3, r2
34013850:	d04c      	beq.n	340138ec <RCCEx_GetUSARTCLKFreq+0x248>
34013852:	4a56      	ldr	r2, [pc, #344]	@ (340139ac <RCCEx_GetUSARTCLKFreq+0x308>)
34013854:	4293      	cmp	r3, r2
34013856:	f200 813a 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
3401385a:	4a55      	ldr	r2, [pc, #340]	@ (340139b0 <RCCEx_GetUSARTCLKFreq+0x30c>)
3401385c:	4293      	cmp	r3, r2
3401385e:	d045      	beq.n	340138ec <RCCEx_GetUSARTCLKFreq+0x248>
34013860:	4a53      	ldr	r2, [pc, #332]	@ (340139b0 <RCCEx_GetUSARTCLKFreq+0x30c>)
34013862:	4293      	cmp	r3, r2
34013864:	f200 8133 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013868:	4a52      	ldr	r2, [pc, #328]	@ (340139b4 <RCCEx_GetUSARTCLKFreq+0x310>)
3401386a:	4293      	cmp	r3, r2
3401386c:	d03e      	beq.n	340138ec <RCCEx_GetUSARTCLKFreq+0x248>
3401386e:	4a51      	ldr	r2, [pc, #324]	@ (340139b4 <RCCEx_GetUSARTCLKFreq+0x310>)
34013870:	4293      	cmp	r3, r2
34013872:	f200 812c 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013876:	4a50      	ldr	r2, [pc, #320]	@ (340139b8 <RCCEx_GetUSARTCLKFreq+0x314>)
34013878:	4293      	cmp	r3, r2
3401387a:	d037      	beq.n	340138ec <RCCEx_GetUSARTCLKFreq+0x248>
3401387c:	4a4e      	ldr	r2, [pc, #312]	@ (340139b8 <RCCEx_GetUSARTCLKFreq+0x314>)
3401387e:	4293      	cmp	r3, r2
34013880:	f200 8125 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013884:	4a4d      	ldr	r2, [pc, #308]	@ (340139bc <RCCEx_GetUSARTCLKFreq+0x318>)
34013886:	4293      	cmp	r3, r2
34013888:	d018      	beq.n	340138bc <RCCEx_GetUSARTCLKFreq+0x218>
3401388a:	4a4c      	ldr	r2, [pc, #304]	@ (340139bc <RCCEx_GetUSARTCLKFreq+0x318>)
3401388c:	4293      	cmp	r3, r2
3401388e:	f200 811e 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
34013892:	4a4b      	ldr	r2, [pc, #300]	@ (340139c0 <RCCEx_GetUSARTCLKFreq+0x31c>)
34013894:	4293      	cmp	r3, r2
34013896:	d01d      	beq.n	340138d4 <RCCEx_GetUSARTCLKFreq+0x230>
34013898:	4a49      	ldr	r2, [pc, #292]	@ (340139c0 <RCCEx_GetUSARTCLKFreq+0x31c>)
3401389a:	4293      	cmp	r3, r2
3401389c:	f200 8117 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340138a0:	4a48      	ldr	r2, [pc, #288]	@ (340139c4 <RCCEx_GetUSARTCLKFreq+0x320>)
340138a2:	4293      	cmp	r3, r2
340138a4:	d00a      	beq.n	340138bc <RCCEx_GetUSARTCLKFreq+0x218>
340138a6:	4a47      	ldr	r2, [pc, #284]	@ (340139c4 <RCCEx_GetUSARTCLKFreq+0x320>)
340138a8:	4293      	cmp	r3, r2
340138aa:	f200 8110 	bhi.w	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
340138ae:	4a46      	ldr	r2, [pc, #280]	@ (340139c8 <RCCEx_GetUSARTCLKFreq+0x324>)
340138b0:	4293      	cmp	r3, r2
340138b2:	d003      	beq.n	340138bc <RCCEx_GetUSARTCLKFreq+0x218>
340138b4:	4a45      	ldr	r2, [pc, #276]	@ (340139cc <RCCEx_GetUSARTCLKFreq+0x328>)
340138b6:	4293      	cmp	r3, r2
340138b8:	d00c      	beq.n	340138d4 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
340138ba:	e108      	b.n	34013ace <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340138bc:	f7f3 fe26 	bl	3400750c <HAL_RCC_GetSysClockFreq>
340138c0:	4603      	mov	r3, r0
340138c2:	4618      	mov	r0, r3
340138c4:	f7fc ff1a 	bl	340106fc <RCCEx_GetHCLKFreq>
340138c8:	4603      	mov	r3, r0
340138ca:	4618      	mov	r0, r3
340138cc:	f7fc ff37 	bl	3401073e <RCCEx_GetPCLK2Freq>
340138d0:	60f8      	str	r0, [r7, #12]
      break;
340138d2:	e107      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340138d4:	f7f3 fe1a 	bl	3400750c <HAL_RCC_GetSysClockFreq>
340138d8:	4603      	mov	r3, r0
340138da:	4618      	mov	r0, r3
340138dc:	f7fc ff0e 	bl	340106fc <RCCEx_GetHCLKFreq>
340138e0:	4603      	mov	r3, r0
340138e2:	4618      	mov	r0, r3
340138e4:	f7fc ff1b 	bl	3401071e <RCCEx_GetPCLK1Freq>
340138e8:	60f8      	str	r0, [r7, #12]
      break;
340138ea:	e0fb      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340138ec:	2007      	movs	r0, #7
340138ee:	f7fd f9f1 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
340138f2:	60f8      	str	r0, [r7, #12]
      break;
340138f4:	e0f6      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340138f6:	f7f5 fa2b 	bl	34008d50 <LL_RCC_IC9_IsEnabled>
340138fa:	4603      	mov	r3, r0
340138fc:	2b00      	cmp	r3, #0
340138fe:	f000 80e8 	beq.w	34013ad2 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
34013902:	f7f5 fa47 	bl	34008d94 <LL_RCC_IC9_GetDivider>
34013906:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34013908:	f7f5 fa36 	bl	34008d78 <LL_RCC_IC9_GetSource>
3401390c:	4603      	mov	r3, r0
3401390e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013912:	d06f      	beq.n	340139f4 <RCCEx_GetUSARTCLKFreq+0x350>
34013914:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013918:	d875      	bhi.n	34013a06 <RCCEx_GetUSARTCLKFreq+0x362>
3401391a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401391e:	d060      	beq.n	340139e2 <RCCEx_GetUSARTCLKFreq+0x33e>
34013920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013924:	d86f      	bhi.n	34013a06 <RCCEx_GetUSARTCLKFreq+0x362>
34013926:	2b00      	cmp	r3, #0
34013928:	d003      	beq.n	34013932 <RCCEx_GetUSARTCLKFreq+0x28e>
3401392a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401392e:	d04f      	beq.n	340139d0 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34013930:	e069      	b.n	34013a06 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013932:	f7fc fdcb 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013936:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013938:	68fa      	ldr	r2, [r7, #12]
3401393a:	68bb      	ldr	r3, [r7, #8]
3401393c:	fbb2 f3f3 	udiv	r3, r2, r3
34013940:	60fb      	str	r3, [r7, #12]
            break;
34013942:	e061      	b.n	34013a08 <RCCEx_GetUSARTCLKFreq+0x364>
34013944:	07061430 	.word	0x07061430
34013948:	07060830 	.word	0x07060830
3401394c:	07060434 	.word	0x07060434
34013950:	07060430 	.word	0x07060430
34013954:	07060030 	.word	0x07060030
34013958:	07051430 	.word	0x07051430
3401395c:	07050830 	.word	0x07050830
34013960:	07050434 	.word	0x07050434
34013964:	07050430 	.word	0x07050430
34013968:	07050030 	.word	0x07050030
3401396c:	07041430 	.word	0x07041430
34013970:	07040830 	.word	0x07040830
34013974:	07040434 	.word	0x07040434
34013978:	07040430 	.word	0x07040430
3401397c:	07040030 	.word	0x07040030
34013980:	07031430 	.word	0x07031430
34013984:	07030830 	.word	0x07030830
34013988:	07030434 	.word	0x07030434
3401398c:	07030430 	.word	0x07030430
34013990:	07030030 	.word	0x07030030
34013994:	07021430 	.word	0x07021430
34013998:	07020830 	.word	0x07020830
3401399c:	07020434 	.word	0x07020434
340139a0:	07020430 	.word	0x07020430
340139a4:	07020030 	.word	0x07020030
340139a8:	07011430 	.word	0x07011430
340139ac:	07010830 	.word	0x07010830
340139b0:	07010434 	.word	0x07010434
340139b4:	07010430 	.word	0x07010430
340139b8:	07010030 	.word	0x07010030
340139bc:	07001430 	.word	0x07001430
340139c0:	07000830 	.word	0x07000830
340139c4:	07000434 	.word	0x07000434
340139c8:	07000030 	.word	0x07000030
340139cc:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340139d0:	f7fc fdc2 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
340139d4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340139d6:	68fa      	ldr	r2, [r7, #12]
340139d8:	68bb      	ldr	r3, [r7, #8]
340139da:	fbb2 f3f3 	udiv	r3, r2, r3
340139de:	60fb      	str	r3, [r7, #12]
            break;
340139e0:	e012      	b.n	34013a08 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340139e2:	f7fc fdff 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
340139e6:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340139e8:	68fa      	ldr	r2, [r7, #12]
340139ea:	68bb      	ldr	r3, [r7, #8]
340139ec:	fbb2 f3f3 	udiv	r3, r2, r3
340139f0:	60fb      	str	r3, [r7, #12]
            break;
340139f2:	e009      	b.n	34013a08 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340139f4:	f7fc fe3c 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
340139f8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340139fa:	68fa      	ldr	r2, [r7, #12]
340139fc:	68bb      	ldr	r3, [r7, #8]
340139fe:	fbb2 f3f3 	udiv	r3, r2, r3
34013a02:	60fb      	str	r3, [r7, #12]
            break;
34013a04:	e000      	b.n	34013a08 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
34013a06:	bf00      	nop
      break;
34013a08:	e063      	b.n	34013ad2 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34013a0a:	f7f5 faa1 	bl	34008f50 <LL_RCC_IC14_IsEnabled>
34013a0e:	4603      	mov	r3, r0
34013a10:	2b00      	cmp	r3, #0
34013a12:	d060      	beq.n	34013ad6 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
34013a14:	f7f5 fabe 	bl	34008f94 <LL_RCC_IC14_GetDivider>
34013a18:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34013a1a:	f7f5 faad 	bl	34008f78 <LL_RCC_IC14_GetSource>
34013a1e:	4603      	mov	r3, r0
34013a20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013a24:	d029      	beq.n	34013a7a <RCCEx_GetUSARTCLKFreq+0x3d6>
34013a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013a2a:	d82f      	bhi.n	34013a8c <RCCEx_GetUSARTCLKFreq+0x3e8>
34013a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013a30:	d01a      	beq.n	34013a68 <RCCEx_GetUSARTCLKFreq+0x3c4>
34013a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013a36:	d829      	bhi.n	34013a8c <RCCEx_GetUSARTCLKFreq+0x3e8>
34013a38:	2b00      	cmp	r3, #0
34013a3a:	d003      	beq.n	34013a44 <RCCEx_GetUSARTCLKFreq+0x3a0>
34013a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013a40:	d009      	beq.n	34013a56 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34013a42:	e023      	b.n	34013a8c <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013a44:	f7fc fd42 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013a48:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013a4a:	68fa      	ldr	r2, [r7, #12]
34013a4c:	68bb      	ldr	r3, [r7, #8]
34013a4e:	fbb2 f3f3 	udiv	r3, r2, r3
34013a52:	60fb      	str	r3, [r7, #12]
            break;
34013a54:	e01b      	b.n	34013a8e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013a56:	f7fc fd7f 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013a5a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013a5c:	68fa      	ldr	r2, [r7, #12]
34013a5e:	68bb      	ldr	r3, [r7, #8]
34013a60:	fbb2 f3f3 	udiv	r3, r2, r3
34013a64:	60fb      	str	r3, [r7, #12]
            break;
34013a66:	e012      	b.n	34013a8e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013a68:	f7fc fdbc 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013a6c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013a6e:	68fa      	ldr	r2, [r7, #12]
34013a70:	68bb      	ldr	r3, [r7, #8]
34013a72:	fbb2 f3f3 	udiv	r3, r2, r3
34013a76:	60fb      	str	r3, [r7, #12]
            break;
34013a78:	e009      	b.n	34013a8e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013a7a:	f7fc fdf9 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34013a7e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34013a80:	68fa      	ldr	r2, [r7, #12]
34013a82:	68bb      	ldr	r3, [r7, #8]
34013a84:	fbb2 f3f3 	udiv	r3, r2, r3
34013a88:	60fb      	str	r3, [r7, #12]
            break;
34013a8a:	e000      	b.n	34013a8e <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34013a8c:	bf00      	nop
      break;
34013a8e:	e022      	b.n	34013ad6 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
34013a90:	f7f4 f93a 	bl	34007d08 <LL_RCC_HSI_IsReady>
34013a94:	4603      	mov	r3, r0
34013a96:	2b00      	cmp	r3, #0
34013a98:	d01f      	beq.n	34013ada <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34013a9a:	f7f4 f947 	bl	34007d2c <LL_RCC_HSI_GetDivider>
34013a9e:	4603      	mov	r3, r0
34013aa0:	09db      	lsrs	r3, r3, #7
34013aa2:	4a13      	ldr	r2, [pc, #76]	@ (34013af0 <RCCEx_GetUSARTCLKFreq+0x44c>)
34013aa4:	fa22 f303 	lsr.w	r3, r2, r3
34013aa8:	60fb      	str	r3, [r7, #12]
      break;
34013aaa:	e016      	b.n	34013ada <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
34013aac:	f7f4 f94c 	bl	34007d48 <LL_RCC_MSI_IsReady>
34013ab0:	4603      	mov	r3, r0
34013ab2:	2b00      	cmp	r3, #0
34013ab4:	d013      	beq.n	34013ade <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
34013ab6:	4b0f      	ldr	r3, [pc, #60]	@ (34013af4 <RCCEx_GetUSARTCLKFreq+0x450>)
34013ab8:	60fb      	str	r3, [r7, #12]
      break;
34013aba:	e010      	b.n	34013ade <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
34013abc:	f7f4 f964 	bl	34007d88 <LL_RCC_LSE_IsReady>
34013ac0:	4603      	mov	r3, r0
34013ac2:	2b00      	cmp	r3, #0
34013ac4:	d00d      	beq.n	34013ae2 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
34013ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34013aca:	60fb      	str	r3, [r7, #12]
      break;
34013acc:	e009      	b.n	34013ae2 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
34013ace:	bf00      	nop
34013ad0:	e008      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013ad2:	bf00      	nop
34013ad4:	e006      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013ad6:	bf00      	nop
34013ad8:	e004      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013ada:	bf00      	nop
34013adc:	e002      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013ade:	bf00      	nop
34013ae0:	e000      	b.n	34013ae4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34013ae2:	bf00      	nop
  }

  return usart_frequency;
34013ae4:	68fb      	ldr	r3, [r7, #12]
}
34013ae6:	4618      	mov	r0, r3
34013ae8:	3710      	adds	r7, #16
34013aea:	46bd      	mov	sp, r7
34013aec:	bd80      	pop	{r7, pc}
34013aee:	bf00      	nop
34013af0:	03d09000 	.word	0x03d09000
34013af4:	003d0900 	.word	0x003d0900

34013af8 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
34013af8:	b580      	push	{r7, lr}
34013afa:	b084      	sub	sp, #16
34013afc:	af00      	add	r7, sp, #0
34013afe:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34013b00:	2300      	movs	r3, #0
34013b02:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34013b04:	6878      	ldr	r0, [r7, #4]
34013b06:	f7f4 fcff 	bl	34008508 <LL_RCC_GetUSBClockSource>
34013b0a:	4603      	mov	r3, r0
34013b0c:	4a4b      	ldr	r2, [pc, #300]	@ (34013c3c <RCCEx_GetOTGPHYCLKFreq+0x144>)
34013b0e:	4293      	cmp	r3, r2
34013b10:	d035      	beq.n	34013b7e <RCCEx_GetOTGPHYCLKFreq+0x86>
34013b12:	4a4a      	ldr	r2, [pc, #296]	@ (34013c3c <RCCEx_GetOTGPHYCLKFreq+0x144>)
34013b14:	4293      	cmp	r3, r2
34013b16:	f200 8085 	bhi.w	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b1a:	4a49      	ldr	r2, [pc, #292]	@ (34013c40 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34013b1c:	4293      	cmp	r3, r2
34013b1e:	d02e      	beq.n	34013b7e <RCCEx_GetOTGPHYCLKFreq+0x86>
34013b20:	4a47      	ldr	r2, [pc, #284]	@ (34013c40 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34013b22:	4293      	cmp	r3, r2
34013b24:	d87e      	bhi.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b26:	4a47      	ldr	r2, [pc, #284]	@ (34013c44 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34013b28:	4293      	cmp	r3, r2
34013b2a:	d038      	beq.n	34013b9e <RCCEx_GetOTGPHYCLKFreq+0xa6>
34013b2c:	4a45      	ldr	r2, [pc, #276]	@ (34013c44 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34013b2e:	4293      	cmp	r3, r2
34013b30:	d878      	bhi.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b32:	4a45      	ldr	r2, [pc, #276]	@ (34013c48 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34013b34:	4293      	cmp	r3, r2
34013b36:	d032      	beq.n	34013b9e <RCCEx_GetOTGPHYCLKFreq+0xa6>
34013b38:	4a43      	ldr	r2, [pc, #268]	@ (34013c48 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34013b3a:	4293      	cmp	r3, r2
34013b3c:	d872      	bhi.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b3e:	4a43      	ldr	r2, [pc, #268]	@ (34013c4c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34013b40:	4293      	cmp	r3, r2
34013b42:	d00f      	beq.n	34013b64 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34013b44:	4a41      	ldr	r2, [pc, #260]	@ (34013c4c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34013b46:	4293      	cmp	r3, r2
34013b48:	d86c      	bhi.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b4a:	4a41      	ldr	r2, [pc, #260]	@ (34013c50 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34013b4c:	4293      	cmp	r3, r2
34013b4e:	d009      	beq.n	34013b64 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34013b50:	4a3f      	ldr	r2, [pc, #252]	@ (34013c50 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34013b52:	4293      	cmp	r3, r2
34013b54:	d866      	bhi.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34013b56:	4a3f      	ldr	r2, [pc, #252]	@ (34013c54 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34013b58:	4293      	cmp	r3, r2
34013b5a:	d008      	beq.n	34013b6e <RCCEx_GetOTGPHYCLKFreq+0x76>
34013b5c:	4a3e      	ldr	r2, [pc, #248]	@ (34013c58 <RCCEx_GetOTGPHYCLKFreq+0x160>)
34013b5e:	4293      	cmp	r3, r2
34013b60:	d005      	beq.n	34013b6e <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
34013b62:	e05f      	b.n	34013c24 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013b64:	2007      	movs	r0, #7
34013b66:	f7fd f8b5 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34013b6a:	60f8      	str	r0, [r7, #12]
      break;
34013b6c:	e061      	b.n	34013c32 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
34013b6e:	f7f4 f8b9 	bl	34007ce4 <LL_RCC_HSE_IsReady>
34013b72:	4603      	mov	r3, r0
34013b74:	2b00      	cmp	r3, #0
34013b76:	d057      	beq.n	34013c28 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
34013b78:	4b38      	ldr	r3, [pc, #224]	@ (34013c5c <RCCEx_GetOTGPHYCLKFreq+0x164>)
34013b7a:	60fb      	str	r3, [r7, #12]
      break;
34013b7c:	e054      	b.n	34013c28 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
34013b7e:	f7f4 f8b1 	bl	34007ce4 <LL_RCC_HSE_IsReady>
34013b82:	4603      	mov	r3, r0
34013b84:	2b00      	cmp	r3, #0
34013b86:	d051      	beq.n	34013c2c <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34013b88:	f7f4 f89a 	bl	34007cc0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34013b8c:	4603      	mov	r3, r0
34013b8e:	2b00      	cmp	r3, #0
34013b90:	d102      	bne.n	34013b98 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
34013b92:	4b33      	ldr	r3, [pc, #204]	@ (34013c60 <RCCEx_GetOTGPHYCLKFreq+0x168>)
34013b94:	60fb      	str	r3, [r7, #12]
      break;
34013b96:	e049      	b.n	34013c2c <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
34013b98:	4b30      	ldr	r3, [pc, #192]	@ (34013c5c <RCCEx_GetOTGPHYCLKFreq+0x164>)
34013b9a:	60fb      	str	r3, [r7, #12]
      break;
34013b9c:	e046      	b.n	34013c2c <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34013b9e:	f7f5 fa17 	bl	34008fd0 <LL_RCC_IC15_IsEnabled>
34013ba2:	4603      	mov	r3, r0
34013ba4:	2b00      	cmp	r3, #0
34013ba6:	d043      	beq.n	34013c30 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34013ba8:	f7f5 fa34 	bl	34009014 <LL_RCC_IC15_GetDivider>
34013bac:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34013bae:	f7f5 fa23 	bl	34008ff8 <LL_RCC_IC15_GetSource>
34013bb2:	4603      	mov	r3, r0
34013bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bb8:	d029      	beq.n	34013c0e <RCCEx_GetOTGPHYCLKFreq+0x116>
34013bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013bbe:	d82f      	bhi.n	34013c20 <RCCEx_GetOTGPHYCLKFreq+0x128>
34013bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bc4:	d01a      	beq.n	34013bfc <RCCEx_GetOTGPHYCLKFreq+0x104>
34013bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013bca:	d829      	bhi.n	34013c20 <RCCEx_GetOTGPHYCLKFreq+0x128>
34013bcc:	2b00      	cmp	r3, #0
34013bce:	d003      	beq.n	34013bd8 <RCCEx_GetOTGPHYCLKFreq+0xe0>
34013bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013bd4:	d009      	beq.n	34013bea <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
34013bd6:	e023      	b.n	34013c20 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013bd8:	f7fc fc78 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013bdc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34013bde:	68fa      	ldr	r2, [r7, #12]
34013be0:	68bb      	ldr	r3, [r7, #8]
34013be2:	fbb2 f3f3 	udiv	r3, r2, r3
34013be6:	60fb      	str	r3, [r7, #12]
            break;
34013be8:	e01b      	b.n	34013c22 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013bea:	f7fc fcb5 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013bee:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34013bf0:	68fa      	ldr	r2, [r7, #12]
34013bf2:	68bb      	ldr	r3, [r7, #8]
34013bf4:	fbb2 f3f3 	udiv	r3, r2, r3
34013bf8:	60fb      	str	r3, [r7, #12]
            break;
34013bfa:	e012      	b.n	34013c22 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013bfc:	f7fc fcf2 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013c00:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34013c02:	68fa      	ldr	r2, [r7, #12]
34013c04:	68bb      	ldr	r3, [r7, #8]
34013c06:	fbb2 f3f3 	udiv	r3, r2, r3
34013c0a:	60fb      	str	r3, [r7, #12]
            break;
34013c0c:	e009      	b.n	34013c22 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013c0e:	f7fc fd2f 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34013c12:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34013c14:	68fa      	ldr	r2, [r7, #12]
34013c16:	68bb      	ldr	r3, [r7, #8]
34013c18:	fbb2 f3f3 	udiv	r3, r2, r3
34013c1c:	60fb      	str	r3, [r7, #12]
            break;
34013c1e:	e000      	b.n	34013c22 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
34013c20:	bf00      	nop
      break;
34013c22:	e005      	b.n	34013c30 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34013c24:	bf00      	nop
34013c26:	e004      	b.n	34013c32 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34013c28:	bf00      	nop
34013c2a:	e002      	b.n	34013c32 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34013c2c:	bf00      	nop
34013c2e:	e000      	b.n	34013c32 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34013c30:	bf00      	nop
  }

  return usb_frequency;
34013c32:	68fb      	ldr	r3, [r7, #12]
}
34013c34:	4618      	mov	r0, r3
34013c36:	3710      	adds	r7, #16
34013c38:	46bd      	mov	sp, r7
34013c3a:	bd80      	pop	{r7, pc}
34013c3c:	03031414 	.word	0x03031414
34013c40:	03030c14 	.word	0x03030c14
34013c44:	03021414 	.word	0x03021414
34013c48:	03020c14 	.word	0x03020c14
34013c4c:	03011414 	.word	0x03011414
34013c50:	03010c14 	.word	0x03010c14
34013c54:	03000c14 	.word	0x03000c14
34013c58:	03001414 	.word	0x03001414
34013c5c:	016e3600 	.word	0x016e3600
34013c60:	02dc6c00 	.word	0x02dc6c00

34013c64 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34013c64:	b580      	push	{r7, lr}
34013c66:	b084      	sub	sp, #16
34013c68:	af00      	add	r7, sp, #0
34013c6a:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34013c6c:	2300      	movs	r3, #0
34013c6e:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34013c70:	6878      	ldr	r0, [r7, #4]
34013c72:	f7f4 fc49 	bl	34008508 <LL_RCC_GetUSBClockSource>
34013c76:	4603      	mov	r3, r0
34013c78:	4a1a      	ldr	r2, [pc, #104]	@ (34013ce4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34013c7a:	4293      	cmp	r3, r2
34013c7c:	d00f      	beq.n	34013c9e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34013c7e:	4a19      	ldr	r2, [pc, #100]	@ (34013ce4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34013c80:	4293      	cmp	r3, r2
34013c82:	d826      	bhi.n	34013cd2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34013c84:	4a18      	ldr	r2, [pc, #96]	@ (34013ce8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34013c86:	4293      	cmp	r3, r2
34013c88:	d009      	beq.n	34013c9e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34013c8a:	4a17      	ldr	r2, [pc, #92]	@ (34013ce8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34013c8c:	4293      	cmp	r3, r2
34013c8e:	d820      	bhi.n	34013cd2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34013c90:	4a16      	ldr	r2, [pc, #88]	@ (34013cec <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
34013c92:	4293      	cmp	r3, r2
34013c94:	d013      	beq.n	34013cbe <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
34013c96:	4a16      	ldr	r2, [pc, #88]	@ (34013cf0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
34013c98:	4293      	cmp	r3, r2
34013c9a:	d015      	beq.n	34013cc8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34013c9c:	e019      	b.n	34013cd2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
34013c9e:	f7f4 f821 	bl	34007ce4 <LL_RCC_HSE_IsReady>
34013ca2:	4603      	mov	r3, r0
34013ca4:	2b00      	cmp	r3, #0
34013ca6:	d016      	beq.n	34013cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34013ca8:	f7f4 f80a 	bl	34007cc0 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34013cac:	4603      	mov	r3, r0
34013cae:	2b00      	cmp	r3, #0
34013cb0:	d102      	bne.n	34013cb8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
34013cb2:	4b10      	ldr	r3, [pc, #64]	@ (34013cf4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
34013cb4:	60fb      	str	r3, [r7, #12]
      break;
34013cb6:	e00e      	b.n	34013cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
34013cb8:	4b0f      	ldr	r3, [pc, #60]	@ (34013cf8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
34013cba:	60fb      	str	r3, [r7, #12]
      break;
34013cbc:	e00b      	b.n	34013cd6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34013cbe:	480f      	ldr	r0, [pc, #60]	@ (34013cfc <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
34013cc0:	f7ff ff1a 	bl	34013af8 <RCCEx_GetOTGPHYCLKFreq>
34013cc4:	60f8      	str	r0, [r7, #12]
      break;
34013cc6:	e007      	b.n	34013cd8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34013cc8:	480d      	ldr	r0, [pc, #52]	@ (34013d00 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
34013cca:	f7ff ff15 	bl	34013af8 <RCCEx_GetOTGPHYCLKFreq>
34013cce:	60f8      	str	r0, [r7, #12]
      break;
34013cd0:	e002      	b.n	34013cd8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34013cd2:	bf00      	nop
34013cd4:	e000      	b.n	34013cd8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34013cd6:	bf00      	nop
  }

  return usb_frequency;
34013cd8:	68fb      	ldr	r3, [r7, #12]
}
34013cda:	4618      	mov	r0, r3
34013cdc:	3710      	adds	r7, #16
34013cde:	46bd      	mov	sp, r7
34013ce0:	bd80      	pop	{r7, pc}
34013ce2:	bf00      	nop
34013ce4:	01011814 	.word	0x01011814
34013ce8:	01011014 	.word	0x01011014
34013cec:	01001014 	.word	0x01001014
34013cf0:	01001814 	.word	0x01001814
34013cf4:	02dc6c00 	.word	0x02dc6c00
34013cf8:	016e3600 	.word	0x016e3600
34013cfc:	03000c14 	.word	0x03000c14
34013d00:	03001414 	.word	0x03001414

34013d04 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34013d04:	b580      	push	{r7, lr}
34013d06:	b084      	sub	sp, #16
34013d08:	af00      	add	r7, sp, #0
34013d0a:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34013d0c:	2300      	movs	r3, #0
34013d0e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34013d10:	6878      	ldr	r0, [r7, #4]
34013d12:	f7f4 fc05 	bl	34008520 <LL_RCC_GetXSPIClockSource>
34013d16:	4603      	mov	r3, r0
34013d18:	4a76      	ldr	r2, [pc, #472]	@ (34013ef4 <RCCEx_GetXSPICLKFreq+0x1f0>)
34013d1a:	4293      	cmp	r3, r2
34013d1c:	f000 809d 	beq.w	34013e5a <RCCEx_GetXSPICLKFreq+0x156>
34013d20:	4a74      	ldr	r2, [pc, #464]	@ (34013ef4 <RCCEx_GetXSPICLKFreq+0x1f0>)
34013d22:	4293      	cmp	r3, r2
34013d24:	f200 80dc 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d28:	4a73      	ldr	r2, [pc, #460]	@ (34013ef8 <RCCEx_GetXSPICLKFreq+0x1f4>)
34013d2a:	4293      	cmp	r3, r2
34013d2c:	f000 8095 	beq.w	34013e5a <RCCEx_GetXSPICLKFreq+0x156>
34013d30:	4a71      	ldr	r2, [pc, #452]	@ (34013ef8 <RCCEx_GetXSPICLKFreq+0x1f4>)
34013d32:	4293      	cmp	r3, r2
34013d34:	f200 80d4 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d38:	4a70      	ldr	r2, [pc, #448]	@ (34013efc <RCCEx_GetXSPICLKFreq+0x1f8>)
34013d3a:	4293      	cmp	r3, r2
34013d3c:	f000 808d 	beq.w	34013e5a <RCCEx_GetXSPICLKFreq+0x156>
34013d40:	4a6e      	ldr	r2, [pc, #440]	@ (34013efc <RCCEx_GetXSPICLKFreq+0x1f8>)
34013d42:	4293      	cmp	r3, r2
34013d44:	f200 80cc 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d48:	4a6d      	ldr	r2, [pc, #436]	@ (34013f00 <RCCEx_GetXSPICLKFreq+0x1fc>)
34013d4a:	4293      	cmp	r3, r2
34013d4c:	d041      	beq.n	34013dd2 <RCCEx_GetXSPICLKFreq+0xce>
34013d4e:	4a6c      	ldr	r2, [pc, #432]	@ (34013f00 <RCCEx_GetXSPICLKFreq+0x1fc>)
34013d50:	4293      	cmp	r3, r2
34013d52:	f200 80c5 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d56:	4a6b      	ldr	r2, [pc, #428]	@ (34013f04 <RCCEx_GetXSPICLKFreq+0x200>)
34013d58:	4293      	cmp	r3, r2
34013d5a:	d03a      	beq.n	34013dd2 <RCCEx_GetXSPICLKFreq+0xce>
34013d5c:	4a69      	ldr	r2, [pc, #420]	@ (34013f04 <RCCEx_GetXSPICLKFreq+0x200>)
34013d5e:	4293      	cmp	r3, r2
34013d60:	f200 80be 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d64:	4a68      	ldr	r2, [pc, #416]	@ (34013f08 <RCCEx_GetXSPICLKFreq+0x204>)
34013d66:	4293      	cmp	r3, r2
34013d68:	d033      	beq.n	34013dd2 <RCCEx_GetXSPICLKFreq+0xce>
34013d6a:	4a67      	ldr	r2, [pc, #412]	@ (34013f08 <RCCEx_GetXSPICLKFreq+0x204>)
34013d6c:	4293      	cmp	r3, r2
34013d6e:	f200 80b7 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d72:	4a66      	ldr	r2, [pc, #408]	@ (34013f0c <RCCEx_GetXSPICLKFreq+0x208>)
34013d74:	4293      	cmp	r3, r2
34013d76:	d027      	beq.n	34013dc8 <RCCEx_GetXSPICLKFreq+0xc4>
34013d78:	4a64      	ldr	r2, [pc, #400]	@ (34013f0c <RCCEx_GetXSPICLKFreq+0x208>)
34013d7a:	4293      	cmp	r3, r2
34013d7c:	f200 80b0 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d80:	4a63      	ldr	r2, [pc, #396]	@ (34013f10 <RCCEx_GetXSPICLKFreq+0x20c>)
34013d82:	4293      	cmp	r3, r2
34013d84:	d020      	beq.n	34013dc8 <RCCEx_GetXSPICLKFreq+0xc4>
34013d86:	4a62      	ldr	r2, [pc, #392]	@ (34013f10 <RCCEx_GetXSPICLKFreq+0x20c>)
34013d88:	4293      	cmp	r3, r2
34013d8a:	f200 80a9 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d8e:	4a61      	ldr	r2, [pc, #388]	@ (34013f14 <RCCEx_GetXSPICLKFreq+0x210>)
34013d90:	4293      	cmp	r3, r2
34013d92:	d019      	beq.n	34013dc8 <RCCEx_GetXSPICLKFreq+0xc4>
34013d94:	4a5f      	ldr	r2, [pc, #380]	@ (34013f14 <RCCEx_GetXSPICLKFreq+0x210>)
34013d96:	4293      	cmp	r3, r2
34013d98:	f200 80a2 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013d9c:	4a5e      	ldr	r2, [pc, #376]	@ (34013f18 <RCCEx_GetXSPICLKFreq+0x214>)
34013d9e:	4293      	cmp	r3, r2
34013da0:	d00a      	beq.n	34013db8 <RCCEx_GetXSPICLKFreq+0xb4>
34013da2:	4a5d      	ldr	r2, [pc, #372]	@ (34013f18 <RCCEx_GetXSPICLKFreq+0x214>)
34013da4:	4293      	cmp	r3, r2
34013da6:	f200 809b 	bhi.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
34013daa:	4a5c      	ldr	r2, [pc, #368]	@ (34013f1c <RCCEx_GetXSPICLKFreq+0x218>)
34013dac:	4293      	cmp	r3, r2
34013dae:	d003      	beq.n	34013db8 <RCCEx_GetXSPICLKFreq+0xb4>
34013db0:	4a5b      	ldr	r2, [pc, #364]	@ (34013f20 <RCCEx_GetXSPICLKFreq+0x21c>)
34013db2:	4293      	cmp	r3, r2
34013db4:	f040 8094 	bne.w	34013ee0 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34013db8:	f7f3 fba8 	bl	3400750c <HAL_RCC_GetSysClockFreq>
34013dbc:	4603      	mov	r3, r0
34013dbe:	4618      	mov	r0, r3
34013dc0:	f7fc fc9c 	bl	340106fc <RCCEx_GetHCLKFreq>
34013dc4:	60f8      	str	r0, [r7, #12]
      break;
34013dc6:	e090      	b.n	34013eea <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34013dc8:	2007      	movs	r0, #7
34013dca:	f7fc ff83 	bl	34010cd4 <RCCEx_GetCLKPCLKFreq>
34013dce:	60f8      	str	r0, [r7, #12]
      break;
34013dd0:	e08b      	b.n	34013eea <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
34013dd2:	f7f4 fe7d 	bl	34008ad0 <LL_RCC_IC3_IsEnabled>
34013dd6:	4603      	mov	r3, r0
34013dd8:	2b00      	cmp	r3, #0
34013dda:	f000 8083 	beq.w	34013ee4 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
34013dde:	f7f4 fe99 	bl	34008b14 <LL_RCC_IC3_GetDivider>
34013de2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34013de4:	f7f4 fe88 	bl	34008af8 <LL_RCC_IC3_GetSource>
34013de8:	4603      	mov	r3, r0
34013dea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013dee:	d029      	beq.n	34013e44 <RCCEx_GetXSPICLKFreq+0x140>
34013df0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013df4:	d82f      	bhi.n	34013e56 <RCCEx_GetXSPICLKFreq+0x152>
34013df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013dfa:	d01a      	beq.n	34013e32 <RCCEx_GetXSPICLKFreq+0x12e>
34013dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013e00:	d829      	bhi.n	34013e56 <RCCEx_GetXSPICLKFreq+0x152>
34013e02:	2b00      	cmp	r3, #0
34013e04:	d003      	beq.n	34013e0e <RCCEx_GetXSPICLKFreq+0x10a>
34013e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013e0a:	d009      	beq.n	34013e20 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013e0c:	e023      	b.n	34013e56 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013e0e:	f7fc fb5d 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013e12:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013e14:	68fa      	ldr	r2, [r7, #12]
34013e16:	68bb      	ldr	r3, [r7, #8]
34013e18:	fbb2 f3f3 	udiv	r3, r2, r3
34013e1c:	60fb      	str	r3, [r7, #12]
            break;
34013e1e:	e01b      	b.n	34013e58 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013e20:	f7fc fb9a 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013e24:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013e26:	68fa      	ldr	r2, [r7, #12]
34013e28:	68bb      	ldr	r3, [r7, #8]
34013e2a:	fbb2 f3f3 	udiv	r3, r2, r3
34013e2e:	60fb      	str	r3, [r7, #12]
            break;
34013e30:	e012      	b.n	34013e58 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013e32:	f7fc fbd7 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013e36:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013e38:	68fa      	ldr	r2, [r7, #12]
34013e3a:	68bb      	ldr	r3, [r7, #8]
34013e3c:	fbb2 f3f3 	udiv	r3, r2, r3
34013e40:	60fb      	str	r3, [r7, #12]
            break;
34013e42:	e009      	b.n	34013e58 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013e44:	f7fc fc14 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34013e48:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013e4a:	68fa      	ldr	r2, [r7, #12]
34013e4c:	68bb      	ldr	r3, [r7, #8]
34013e4e:	fbb2 f3f3 	udiv	r3, r2, r3
34013e52:	60fb      	str	r3, [r7, #12]
            break;
34013e54:	e000      	b.n	34013e58 <RCCEx_GetXSPICLKFreq+0x154>
            break;
34013e56:	bf00      	nop
        }
      }
      break;
34013e58:	e044      	b.n	34013ee4 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34013e5a:	f7f4 fe79 	bl	34008b50 <LL_RCC_IC4_IsEnabled>
34013e5e:	4603      	mov	r3, r0
34013e60:	2b00      	cmp	r3, #0
34013e62:	d041      	beq.n	34013ee8 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34013e64:	f7f4 fe96 	bl	34008b94 <LL_RCC_IC4_GetDivider>
34013e68:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34013e6a:	f7f4 fe85 	bl	34008b78 <LL_RCC_IC4_GetSource>
34013e6e:	4603      	mov	r3, r0
34013e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013e74:	d029      	beq.n	34013eca <RCCEx_GetXSPICLKFreq+0x1c6>
34013e76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34013e7a:	d82f      	bhi.n	34013edc <RCCEx_GetXSPICLKFreq+0x1d8>
34013e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013e80:	d01a      	beq.n	34013eb8 <RCCEx_GetXSPICLKFreq+0x1b4>
34013e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34013e86:	d829      	bhi.n	34013edc <RCCEx_GetXSPICLKFreq+0x1d8>
34013e88:	2b00      	cmp	r3, #0
34013e8a:	d003      	beq.n	34013e94 <RCCEx_GetXSPICLKFreq+0x190>
34013e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34013e90:	d009      	beq.n	34013ea6 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34013e92:	e023      	b.n	34013edc <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34013e94:	f7fc fb1a 	bl	340104cc <HAL_RCCEx_GetPLL1CLKFreq>
34013e98:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013e9a:	68fa      	ldr	r2, [r7, #12]
34013e9c:	68bb      	ldr	r3, [r7, #8]
34013e9e:	fbb2 f3f3 	udiv	r3, r2, r3
34013ea2:	60fb      	str	r3, [r7, #12]
            break;
34013ea4:	e01b      	b.n	34013ede <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34013ea6:	f7fc fb57 	bl	34010558 <HAL_RCCEx_GetPLL2CLKFreq>
34013eaa:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013eac:	68fa      	ldr	r2, [r7, #12]
34013eae:	68bb      	ldr	r3, [r7, #8]
34013eb0:	fbb2 f3f3 	udiv	r3, r2, r3
34013eb4:	60fb      	str	r3, [r7, #12]
            break;
34013eb6:	e012      	b.n	34013ede <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34013eb8:	f7fc fb94 	bl	340105e4 <HAL_RCCEx_GetPLL3CLKFreq>
34013ebc:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013ebe:	68fa      	ldr	r2, [r7, #12]
34013ec0:	68bb      	ldr	r3, [r7, #8]
34013ec2:	fbb2 f3f3 	udiv	r3, r2, r3
34013ec6:	60fb      	str	r3, [r7, #12]
            break;
34013ec8:	e009      	b.n	34013ede <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34013eca:	f7fc fbd1 	bl	34010670 <HAL_RCCEx_GetPLL4CLKFreq>
34013ece:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34013ed0:	68fa      	ldr	r2, [r7, #12]
34013ed2:	68bb      	ldr	r3, [r7, #8]
34013ed4:	fbb2 f3f3 	udiv	r3, r2, r3
34013ed8:	60fb      	str	r3, [r7, #12]
            break;
34013eda:	e000      	b.n	34013ede <RCCEx_GetXSPICLKFreq+0x1da>
            break;
34013edc:	bf00      	nop
        }
      }
      break;
34013ede:	e003      	b.n	34013ee8 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
34013ee0:	bf00      	nop
34013ee2:	e002      	b.n	34013eea <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34013ee4:	bf00      	nop
34013ee6:	e000      	b.n	34013eea <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34013ee8:	bf00      	nop
  }

  return xspi_frequency;
34013eea:	68fb      	ldr	r3, [r7, #12]
}
34013eec:	4618      	mov	r0, r3
34013eee:	3710      	adds	r7, #16
34013ef0:	46bd      	mov	sp, r7
34013ef2:	bd80      	pop	{r7, pc}
34013ef4:	03030814 	.word	0x03030814
34013ef8:	03030414 	.word	0x03030414
34013efc:	03030014 	.word	0x03030014
34013f00:	03020814 	.word	0x03020814
34013f04:	03020414 	.word	0x03020414
34013f08:	03020014 	.word	0x03020014
34013f0c:	03010814 	.word	0x03010814
34013f10:	03010414 	.word	0x03010414
34013f14:	03010014 	.word	0x03010014
34013f18:	03000814 	.word	0x03000814
34013f1c:	03000014 	.word	0x03000014
34013f20:	03000414 	.word	0x03000414

34013f24 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
34013f24:	b580      	push	{r7, lr}
34013f26:	b088      	sub	sp, #32
34013f28:	af00      	add	r7, sp, #0
34013f2a:	6078      	str	r0, [r7, #4]
34013f2c:	6039      	str	r1, [r7, #0]
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
34013f2e:	683b      	ldr	r3, [r7, #0]
34013f30:	2b00      	cmp	r3, #0
34013f32:	d104      	bne.n	34013f3e <HAL_RIF_RIMC_ConfigMasterAttributes+0x1a>
34013f34:	f240 1111 	movw	r1, #273	@ 0x111
34013f38:	484d      	ldr	r0, [pc, #308]	@ (34014070 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34013f3a:	f7ed fb77 	bl	3400162c <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
34013f3e:	687b      	ldr	r3, [r7, #4]
34013f40:	2b00      	cmp	r3, #0
34013f42:	d028      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f44:	687b      	ldr	r3, [r7, #4]
34013f46:	2b01      	cmp	r3, #1
34013f48:	d025      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f4a:	687b      	ldr	r3, [r7, #4]
34013f4c:	2b02      	cmp	r3, #2
34013f4e:	d022      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f50:	687b      	ldr	r3, [r7, #4]
34013f52:	2b03      	cmp	r3, #3
34013f54:	d01f      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f56:	687b      	ldr	r3, [r7, #4]
34013f58:	2b04      	cmp	r3, #4
34013f5a:	d01c      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f5c:	687b      	ldr	r3, [r7, #4]
34013f5e:	2b05      	cmp	r3, #5
34013f60:	d019      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f62:	687b      	ldr	r3, [r7, #4]
34013f64:	2b06      	cmp	r3, #6
34013f66:	d016      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f68:	687b      	ldr	r3, [r7, #4]
34013f6a:	2b07      	cmp	r3, #7
34013f6c:	d013      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f6e:	687b      	ldr	r3, [r7, #4]
34013f70:	2b08      	cmp	r3, #8
34013f72:	d010      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f74:	687b      	ldr	r3, [r7, #4]
34013f76:	2b09      	cmp	r3, #9
34013f78:	d00d      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f7a:	687b      	ldr	r3, [r7, #4]
34013f7c:	2b0a      	cmp	r3, #10
34013f7e:	d00a      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f80:	687b      	ldr	r3, [r7, #4]
34013f82:	2b0b      	cmp	r3, #11
34013f84:	d007      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f86:	687b      	ldr	r3, [r7, #4]
34013f88:	2b0c      	cmp	r3, #12
34013f8a:	d004      	beq.n	34013f96 <HAL_RIF_RIMC_ConfigMasterAttributes+0x72>
34013f8c:	f44f 7189 	mov.w	r1, #274	@ 0x112
34013f90:	4837      	ldr	r0, [pc, #220]	@ (34014070 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34013f92:	f7ed fb4b 	bl	3400162c <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
34013f96:	683b      	ldr	r3, [r7, #0]
34013f98:	681b      	ldr	r3, [r3, #0]
34013f9a:	2b01      	cmp	r3, #1
34013f9c:	d020      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013f9e:	683b      	ldr	r3, [r7, #0]
34013fa0:	681b      	ldr	r3, [r3, #0]
34013fa2:	2b02      	cmp	r3, #2
34013fa4:	d01c      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fa6:	683b      	ldr	r3, [r7, #0]
34013fa8:	681b      	ldr	r3, [r3, #0]
34013faa:	2b04      	cmp	r3, #4
34013fac:	d018      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fae:	683b      	ldr	r3, [r7, #0]
34013fb0:	681b      	ldr	r3, [r3, #0]
34013fb2:	2b08      	cmp	r3, #8
34013fb4:	d014      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fb6:	683b      	ldr	r3, [r7, #0]
34013fb8:	681b      	ldr	r3, [r3, #0]
34013fba:	2b10      	cmp	r3, #16
34013fbc:	d010      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fbe:	683b      	ldr	r3, [r7, #0]
34013fc0:	681b      	ldr	r3, [r3, #0]
34013fc2:	2b20      	cmp	r3, #32
34013fc4:	d00c      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fc6:	683b      	ldr	r3, [r7, #0]
34013fc8:	681b      	ldr	r3, [r3, #0]
34013fca:	2b40      	cmp	r3, #64	@ 0x40
34013fcc:	d008      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fce:	683b      	ldr	r3, [r7, #0]
34013fd0:	681b      	ldr	r3, [r3, #0]
34013fd2:	2b80      	cmp	r3, #128	@ 0x80
34013fd4:	d004      	beq.n	34013fe0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xbc>
34013fd6:	f240 1113 	movw	r1, #275	@ 0x113
34013fda:	4825      	ldr	r0, [pc, #148]	@ (34014070 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34013fdc:	f7ed fb26 	bl	3400162c <assert_failed>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
34013fe0:	683b      	ldr	r3, [r7, #0]
34013fe2:	681b      	ldr	r3, [r3, #0]
34013fe4:	2b80      	cmp	r3, #128	@ 0x80
34013fe6:	d003      	beq.n	34013ff0 <HAL_RIF_RIMC_ConfigMasterAttributes+0xcc>
34013fe8:	683b      	ldr	r3, [r7, #0]
34013fea:	681b      	ldr	r3, [r3, #0]
34013fec:	2bff      	cmp	r3, #255	@ 0xff
34013fee:	d904      	bls.n	34013ffa <HAL_RIF_RIMC_ConfigMasterAttributes+0xd6>
34013ff0:	f44f 718a 	mov.w	r1, #276	@ 0x114
34013ff4:	481e      	ldr	r0, [pc, #120]	@ (34014070 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34013ff6:	f7ed fb19 	bl	3400162c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
34013ffa:	683b      	ldr	r3, [r7, #0]
34013ffc:	685b      	ldr	r3, [r3, #4]
34013ffe:	2b03      	cmp	r3, #3
34014000:	d904      	bls.n	3401400c <HAL_RIF_RIMC_ConfigMasterAttributes+0xe8>
34014002:	f240 1115 	movw	r1, #277	@ 0x115
34014006:	481a      	ldr	r0, [pc, #104]	@ (34014070 <HAL_RIF_RIMC_ConfigMasterAttributes+0x14c>)
34014008:	f7ed fb10 	bl	3400162c <assert_failed>

  master_cid = POSITION_VAL(pConfig->MasterCID);
3401400c:	683b      	ldr	r3, [r7, #0]
3401400e:	681b      	ldr	r3, [r3, #0]
34014010:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
34014012:	693b      	ldr	r3, [r7, #16]
34014014:	fa93 f3a3 	rbit	r3, r3
34014018:	60fb      	str	r3, [r7, #12]
  return result;
3401401a:	68fb      	ldr	r3, [r7, #12]
3401401c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
3401401e:	697b      	ldr	r3, [r7, #20]
34014020:	2b00      	cmp	r3, #0
34014022:	d101      	bne.n	34014028 <HAL_RIF_RIMC_ConfigMasterAttributes+0x104>
    return 32U;
34014024:	2320      	movs	r3, #32
34014026:	e003      	b.n	34014030 <HAL_RIF_RIMC_ConfigMasterAttributes+0x10c>
  return __builtin_clz(value);
34014028:	697b      	ldr	r3, [r7, #20]
3401402a:	fab3 f383 	clz	r3, r3
3401402e:	b2db      	uxtb	r3, r3
34014030:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
34014032:	4a10      	ldr	r2, [pc, #64]	@ (34014074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
34014034:	687b      	ldr	r3, [r7, #4]
34014036:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3401403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3401403e:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
34014040:	69bb      	ldr	r3, [r7, #24]
34014042:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
34014046:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
34014048:	69fb      	ldr	r3, [r7, #28]
3401404a:	011a      	lsls	r2, r3, #4
3401404c:	683b      	ldr	r3, [r7, #0]
3401404e:	685b      	ldr	r3, [r3, #4]
34014050:	021b      	lsls	r3, r3, #8
34014052:	4313      	orrs	r3, r2
34014054:	69ba      	ldr	r2, [r7, #24]
34014056:	4313      	orrs	r3, r2
34014058:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3401405a:	4906      	ldr	r1, [pc, #24]	@ (34014074 <HAL_RIF_RIMC_ConfigMasterAttributes+0x150>)
3401405c:	687b      	ldr	r3, [r7, #4]
3401405e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
34014062:	69ba      	ldr	r2, [r7, #24]
34014064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
34014068:	bf00      	nop
3401406a:	3720      	adds	r7, #32
3401406c:	46bd      	mov	sp, r7
3401406e:	bd80      	pop	{r7, pc}
34014070:	3401aec4 	.word	0x3401aec4
34014074:	54024000 	.word	0x54024000

34014078 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
34014078:	b580      	push	{r7, lr}
3401407a:	b084      	sub	sp, #16
3401407c:	af00      	add	r7, sp, #0
3401407e:	6078      	str	r0, [r7, #4]
34014080:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
34014082:	687b      	ldr	r3, [r7, #4]
34014084:	2b00      	cmp	r3, #0
34014086:	f000 82c6 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401408a:	687b      	ldr	r3, [r7, #4]
3401408c:	2b01      	cmp	r3, #1
3401408e:	f000 82c2 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014092:	687b      	ldr	r3, [r7, #4]
34014094:	2b02      	cmp	r3, #2
34014096:	f000 82be 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401409a:	687b      	ldr	r3, [r7, #4]
3401409c:	2b03      	cmp	r3, #3
3401409e:	f000 82ba 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140a2:	687b      	ldr	r3, [r7, #4]
340140a4:	2b04      	cmp	r3, #4
340140a6:	f000 82b6 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140aa:	687b      	ldr	r3, [r7, #4]
340140ac:	2b05      	cmp	r3, #5
340140ae:	f000 82b2 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140b2:	687b      	ldr	r3, [r7, #4]
340140b4:	2b06      	cmp	r3, #6
340140b6:	f000 82ae 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140ba:	687b      	ldr	r3, [r7, #4]
340140bc:	2b08      	cmp	r3, #8
340140be:	f000 82aa 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140c2:	687b      	ldr	r3, [r7, #4]
340140c4:	2b09      	cmp	r3, #9
340140c6:	f000 82a6 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140ca:	687b      	ldr	r3, [r7, #4]
340140cc:	2b0a      	cmp	r3, #10
340140ce:	f000 82a2 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140d2:	687b      	ldr	r3, [r7, #4]
340140d4:	2b0b      	cmp	r3, #11
340140d6:	f000 829e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140da:	687b      	ldr	r3, [r7, #4]
340140dc:	2b0c      	cmp	r3, #12
340140de:	f000 829a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140e2:	687b      	ldr	r3, [r7, #4]
340140e4:	2b0d      	cmp	r3, #13
340140e6:	f000 8296 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140ea:	687b      	ldr	r3, [r7, #4]
340140ec:	2b0e      	cmp	r3, #14
340140ee:	f000 8292 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140f2:	687b      	ldr	r3, [r7, #4]
340140f4:	2b0f      	cmp	r3, #15
340140f6:	f000 828e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340140fa:	687b      	ldr	r3, [r7, #4]
340140fc:	2b10      	cmp	r3, #16
340140fe:	f000 828a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014102:	687b      	ldr	r3, [r7, #4]
34014104:	2b11      	cmp	r3, #17
34014106:	f000 8286 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401410a:	687b      	ldr	r3, [r7, #4]
3401410c:	2b12      	cmp	r3, #18
3401410e:	f000 8282 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014112:	687b      	ldr	r3, [r7, #4]
34014114:	2b13      	cmp	r3, #19
34014116:	f000 827e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401411a:	687b      	ldr	r3, [r7, #4]
3401411c:	2b14      	cmp	r3, #20
3401411e:	f000 827a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014122:	687b      	ldr	r3, [r7, #4]
34014124:	2b15      	cmp	r3, #21
34014126:	f000 8276 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401412a:	687b      	ldr	r3, [r7, #4]
3401412c:	2b16      	cmp	r3, #22
3401412e:	f000 8272 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014132:	687b      	ldr	r3, [r7, #4]
34014134:	2b17      	cmp	r3, #23
34014136:	f000 826e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401413a:	687b      	ldr	r3, [r7, #4]
3401413c:	2b18      	cmp	r3, #24
3401413e:	f000 826a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014142:	687b      	ldr	r3, [r7, #4]
34014144:	2b19      	cmp	r3, #25
34014146:	f000 8266 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401414a:	687b      	ldr	r3, [r7, #4]
3401414c:	2b1a      	cmp	r3, #26
3401414e:	f000 8262 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014152:	687b      	ldr	r3, [r7, #4]
34014154:	2b1b      	cmp	r3, #27
34014156:	f000 825e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401415a:	687b      	ldr	r3, [r7, #4]
3401415c:	2b1c      	cmp	r3, #28
3401415e:	f000 825a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014162:	687b      	ldr	r3, [r7, #4]
34014164:	2b1d      	cmp	r3, #29
34014166:	f000 8256 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401416a:	687b      	ldr	r3, [r7, #4]
3401416c:	2b1e      	cmp	r3, #30
3401416e:	f000 8252 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014172:	687b      	ldr	r3, [r7, #4]
34014174:	2b1f      	cmp	r3, #31
34014176:	f000 824e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401417a:	687b      	ldr	r3, [r7, #4]
3401417c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014180:	f000 8249 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014184:	687b      	ldr	r3, [r7, #4]
34014186:	4aa0      	ldr	r2, [pc, #640]	@ (34014408 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x390>)
34014188:	4293      	cmp	r3, r2
3401418a:	f000 8244 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401418e:	687b      	ldr	r3, [r7, #4]
34014190:	4a9e      	ldr	r2, [pc, #632]	@ (3401440c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x394>)
34014192:	4293      	cmp	r3, r2
34014194:	f000 823f 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014198:	687b      	ldr	r3, [r7, #4]
3401419a:	4a9d      	ldr	r2, [pc, #628]	@ (34014410 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x398>)
3401419c:	4293      	cmp	r3, r2
3401419e:	f000 823a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141a2:	687b      	ldr	r3, [r7, #4]
340141a4:	4a9b      	ldr	r2, [pc, #620]	@ (34014414 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x39c>)
340141a6:	4293      	cmp	r3, r2
340141a8:	f000 8235 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141ac:	687b      	ldr	r3, [r7, #4]
340141ae:	4a9a      	ldr	r2, [pc, #616]	@ (34014418 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a0>)
340141b0:	4293      	cmp	r3, r2
340141b2:	f000 8230 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141b6:	687b      	ldr	r3, [r7, #4]
340141b8:	4a98      	ldr	r2, [pc, #608]	@ (3401441c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a4>)
340141ba:	4293      	cmp	r3, r2
340141bc:	f000 822b 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141c0:	687b      	ldr	r3, [r7, #4]
340141c2:	4a97      	ldr	r2, [pc, #604]	@ (34014420 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a8>)
340141c4:	4293      	cmp	r3, r2
340141c6:	f000 8226 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141ca:	687b      	ldr	r3, [r7, #4]
340141cc:	4a95      	ldr	r2, [pc, #596]	@ (34014424 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ac>)
340141ce:	4293      	cmp	r3, r2
340141d0:	f000 8221 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141d4:	687b      	ldr	r3, [r7, #4]
340141d6:	4a94      	ldr	r2, [pc, #592]	@ (34014428 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b0>)
340141d8:	4293      	cmp	r3, r2
340141da:	f000 821c 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141de:	687b      	ldr	r3, [r7, #4]
340141e0:	4a92      	ldr	r2, [pc, #584]	@ (3401442c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b4>)
340141e2:	4293      	cmp	r3, r2
340141e4:	f000 8217 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141e8:	687b      	ldr	r3, [r7, #4]
340141ea:	4a91      	ldr	r2, [pc, #580]	@ (34014430 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3b8>)
340141ec:	4293      	cmp	r3, r2
340141ee:	f000 8212 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141f2:	687b      	ldr	r3, [r7, #4]
340141f4:	4a8f      	ldr	r2, [pc, #572]	@ (34014434 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3bc>)
340141f6:	4293      	cmp	r3, r2
340141f8:	f000 820d 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340141fc:	687b      	ldr	r3, [r7, #4]
340141fe:	4a8e      	ldr	r2, [pc, #568]	@ (34014438 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c0>)
34014200:	4293      	cmp	r3, r2
34014202:	f000 8208 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014206:	687b      	ldr	r3, [r7, #4]
34014208:	4a8c      	ldr	r2, [pc, #560]	@ (3401443c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c4>)
3401420a:	4293      	cmp	r3, r2
3401420c:	f000 8203 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014210:	687b      	ldr	r3, [r7, #4]
34014212:	4a8b      	ldr	r2, [pc, #556]	@ (34014440 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3c8>)
34014214:	4293      	cmp	r3, r2
34014216:	f000 81fe 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401421a:	687b      	ldr	r3, [r7, #4]
3401421c:	4a89      	ldr	r2, [pc, #548]	@ (34014444 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3cc>)
3401421e:	4293      	cmp	r3, r2
34014220:	f000 81f9 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014224:	687b      	ldr	r3, [r7, #4]
34014226:	4a88      	ldr	r2, [pc, #544]	@ (34014448 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d0>)
34014228:	4293      	cmp	r3, r2
3401422a:	f000 81f4 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401422e:	687b      	ldr	r3, [r7, #4]
34014230:	4a86      	ldr	r2, [pc, #536]	@ (3401444c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d4>)
34014232:	4293      	cmp	r3, r2
34014234:	f000 81ef 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014238:	687b      	ldr	r3, [r7, #4]
3401423a:	4a85      	ldr	r2, [pc, #532]	@ (34014450 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3d8>)
3401423c:	4293      	cmp	r3, r2
3401423e:	f000 81ea 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014242:	687b      	ldr	r3, [r7, #4]
34014244:	4a83      	ldr	r2, [pc, #524]	@ (34014454 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3dc>)
34014246:	4293      	cmp	r3, r2
34014248:	f000 81e5 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401424c:	687b      	ldr	r3, [r7, #4]
3401424e:	4a82      	ldr	r2, [pc, #520]	@ (34014458 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e0>)
34014250:	4293      	cmp	r3, r2
34014252:	f000 81e0 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014256:	687b      	ldr	r3, [r7, #4]
34014258:	4a80      	ldr	r2, [pc, #512]	@ (3401445c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e4>)
3401425a:	4293      	cmp	r3, r2
3401425c:	f000 81db 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014260:	687b      	ldr	r3, [r7, #4]
34014262:	4a7f      	ldr	r2, [pc, #508]	@ (34014460 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3e8>)
34014264:	4293      	cmp	r3, r2
34014266:	f000 81d6 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401426a:	687b      	ldr	r3, [r7, #4]
3401426c:	4a7d      	ldr	r2, [pc, #500]	@ (34014464 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3ec>)
3401426e:	4293      	cmp	r3, r2
34014270:	f000 81d1 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014274:	687b      	ldr	r3, [r7, #4]
34014276:	4a7c      	ldr	r2, [pc, #496]	@ (34014468 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f0>)
34014278:	4293      	cmp	r3, r2
3401427a:	f000 81cc 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401427e:	687b      	ldr	r3, [r7, #4]
34014280:	4a7a      	ldr	r2, [pc, #488]	@ (3401446c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f4>)
34014282:	4293      	cmp	r3, r2
34014284:	f000 81c7 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014288:	687b      	ldr	r3, [r7, #4]
3401428a:	4a79      	ldr	r2, [pc, #484]	@ (34014470 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3f8>)
3401428c:	4293      	cmp	r3, r2
3401428e:	f000 81c2 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014292:	687b      	ldr	r3, [r7, #4]
34014294:	4a77      	ldr	r2, [pc, #476]	@ (34014474 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3fc>)
34014296:	4293      	cmp	r3, r2
34014298:	f000 81bd 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401429c:	687b      	ldr	r3, [r7, #4]
3401429e:	4a76      	ldr	r2, [pc, #472]	@ (34014478 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x400>)
340142a0:	4293      	cmp	r3, r2
340142a2:	f000 81b8 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142a6:	687b      	ldr	r3, [r7, #4]
340142a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340142ac:	f000 81b3 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142b0:	687b      	ldr	r3, [r7, #4]
340142b2:	4a72      	ldr	r2, [pc, #456]	@ (3401447c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x404>)
340142b4:	4293      	cmp	r3, r2
340142b6:	f000 81ae 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142ba:	687b      	ldr	r3, [r7, #4]
340142bc:	4a70      	ldr	r2, [pc, #448]	@ (34014480 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x408>)
340142be:	4293      	cmp	r3, r2
340142c0:	f000 81a9 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142c4:	687b      	ldr	r3, [r7, #4]
340142c6:	4a6f      	ldr	r2, [pc, #444]	@ (34014484 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x40c>)
340142c8:	4293      	cmp	r3, r2
340142ca:	f000 81a4 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142ce:	687b      	ldr	r3, [r7, #4]
340142d0:	4a6d      	ldr	r2, [pc, #436]	@ (34014488 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x410>)
340142d2:	4293      	cmp	r3, r2
340142d4:	f000 819f 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142d8:	687b      	ldr	r3, [r7, #4]
340142da:	4a6c      	ldr	r2, [pc, #432]	@ (3401448c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x414>)
340142dc:	4293      	cmp	r3, r2
340142de:	f000 819a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142e2:	687b      	ldr	r3, [r7, #4]
340142e4:	4a6a      	ldr	r2, [pc, #424]	@ (34014490 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x418>)
340142e6:	4293      	cmp	r3, r2
340142e8:	f000 8195 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142ec:	687b      	ldr	r3, [r7, #4]
340142ee:	4a69      	ldr	r2, [pc, #420]	@ (34014494 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x41c>)
340142f0:	4293      	cmp	r3, r2
340142f2:	f000 8190 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340142f6:	687b      	ldr	r3, [r7, #4]
340142f8:	4a67      	ldr	r2, [pc, #412]	@ (34014498 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x420>)
340142fa:	4293      	cmp	r3, r2
340142fc:	f000 818b 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014300:	687b      	ldr	r3, [r7, #4]
34014302:	4a66      	ldr	r2, [pc, #408]	@ (3401449c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x424>)
34014304:	4293      	cmp	r3, r2
34014306:	f000 8186 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401430a:	687b      	ldr	r3, [r7, #4]
3401430c:	4a64      	ldr	r2, [pc, #400]	@ (340144a0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x428>)
3401430e:	4293      	cmp	r3, r2
34014310:	f000 8181 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014314:	687b      	ldr	r3, [r7, #4]
34014316:	4a63      	ldr	r2, [pc, #396]	@ (340144a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x42c>)
34014318:	4293      	cmp	r3, r2
3401431a:	f000 817c 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401431e:	687b      	ldr	r3, [r7, #4]
34014320:	4a61      	ldr	r2, [pc, #388]	@ (340144a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x430>)
34014322:	4293      	cmp	r3, r2
34014324:	f000 8177 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014328:	687b      	ldr	r3, [r7, #4]
3401432a:	4a60      	ldr	r2, [pc, #384]	@ (340144ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x434>)
3401432c:	4293      	cmp	r3, r2
3401432e:	f000 8172 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014332:	687b      	ldr	r3, [r7, #4]
34014334:	4a5e      	ldr	r2, [pc, #376]	@ (340144b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x438>)
34014336:	4293      	cmp	r3, r2
34014338:	f000 816d 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401433c:	687b      	ldr	r3, [r7, #4]
3401433e:	4a5d      	ldr	r2, [pc, #372]	@ (340144b4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x43c>)
34014340:	4293      	cmp	r3, r2
34014342:	f000 8168 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014346:	687b      	ldr	r3, [r7, #4]
34014348:	4a5b      	ldr	r2, [pc, #364]	@ (340144b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x440>)
3401434a:	4293      	cmp	r3, r2
3401434c:	f000 8163 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014350:	687b      	ldr	r3, [r7, #4]
34014352:	4a5a      	ldr	r2, [pc, #360]	@ (340144bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x444>)
34014354:	4293      	cmp	r3, r2
34014356:	f000 815e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401435a:	687b      	ldr	r3, [r7, #4]
3401435c:	4a58      	ldr	r2, [pc, #352]	@ (340144c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x448>)
3401435e:	4293      	cmp	r3, r2
34014360:	f000 8159 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014364:	687b      	ldr	r3, [r7, #4]
34014366:	4a57      	ldr	r2, [pc, #348]	@ (340144c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x44c>)
34014368:	4293      	cmp	r3, r2
3401436a:	f000 8154 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401436e:	687b      	ldr	r3, [r7, #4]
34014370:	4a55      	ldr	r2, [pc, #340]	@ (340144c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x450>)
34014372:	4293      	cmp	r3, r2
34014374:	f000 814f 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014378:	687b      	ldr	r3, [r7, #4]
3401437a:	4a54      	ldr	r2, [pc, #336]	@ (340144cc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x454>)
3401437c:	4293      	cmp	r3, r2
3401437e:	f000 814a 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014382:	687b      	ldr	r3, [r7, #4]
34014384:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014388:	f000 8145 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401438c:	687b      	ldr	r3, [r7, #4]
3401438e:	4a50      	ldr	r2, [pc, #320]	@ (340144d0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x458>)
34014390:	4293      	cmp	r3, r2
34014392:	f000 8140 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014396:	687b      	ldr	r3, [r7, #4]
34014398:	4a4e      	ldr	r2, [pc, #312]	@ (340144d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x45c>)
3401439a:	4293      	cmp	r3, r2
3401439c:	f000 813b 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143a0:	687b      	ldr	r3, [r7, #4]
340143a2:	4a4d      	ldr	r2, [pc, #308]	@ (340144d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x460>)
340143a4:	4293      	cmp	r3, r2
340143a6:	f000 8136 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143aa:	687b      	ldr	r3, [r7, #4]
340143ac:	4a4b      	ldr	r2, [pc, #300]	@ (340144dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x464>)
340143ae:	4293      	cmp	r3, r2
340143b0:	f000 8131 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143b4:	687b      	ldr	r3, [r7, #4]
340143b6:	4a4a      	ldr	r2, [pc, #296]	@ (340144e0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x468>)
340143b8:	4293      	cmp	r3, r2
340143ba:	f000 812c 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143be:	687b      	ldr	r3, [r7, #4]
340143c0:	4a48      	ldr	r2, [pc, #288]	@ (340144e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x46c>)
340143c2:	4293      	cmp	r3, r2
340143c4:	f000 8127 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143c8:	687b      	ldr	r3, [r7, #4]
340143ca:	4a47      	ldr	r2, [pc, #284]	@ (340144e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x470>)
340143cc:	4293      	cmp	r3, r2
340143ce:	f000 8122 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143d2:	687b      	ldr	r3, [r7, #4]
340143d4:	4a45      	ldr	r2, [pc, #276]	@ (340144ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x474>)
340143d6:	4293      	cmp	r3, r2
340143d8:	f000 811d 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143dc:	687b      	ldr	r3, [r7, #4]
340143de:	4a44      	ldr	r2, [pc, #272]	@ (340144f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x478>)
340143e0:	4293      	cmp	r3, r2
340143e2:	f000 8118 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143e6:	687b      	ldr	r3, [r7, #4]
340143e8:	4a42      	ldr	r2, [pc, #264]	@ (340144f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x47c>)
340143ea:	4293      	cmp	r3, r2
340143ec:	f000 8113 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143f0:	687b      	ldr	r3, [r7, #4]
340143f2:	4a41      	ldr	r2, [pc, #260]	@ (340144f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x480>)
340143f4:	4293      	cmp	r3, r2
340143f6:	f000 810e 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340143fa:	687b      	ldr	r3, [r7, #4]
340143fc:	4a3f      	ldr	r2, [pc, #252]	@ (340144fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x484>)
340143fe:	4293      	cmp	r3, r2
34014400:	f000 8109 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014404:	e07c      	b.n	34014500 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x488>
34014406:	bf00      	nop
34014408:	10000001 	.word	0x10000001
3401440c:	10000002 	.word	0x10000002
34014410:	10000003 	.word	0x10000003
34014414:	10000004 	.word	0x10000004
34014418:	10000005 	.word	0x10000005
3401441c:	10000006 	.word	0x10000006
34014420:	10000007 	.word	0x10000007
34014424:	10000008 	.word	0x10000008
34014428:	10000009 	.word	0x10000009
3401442c:	1000000a 	.word	0x1000000a
34014430:	1000000b 	.word	0x1000000b
34014434:	1000000c 	.word	0x1000000c
34014438:	1000000d 	.word	0x1000000d
3401443c:	1000000e 	.word	0x1000000e
34014440:	1000000f 	.word	0x1000000f
34014444:	10000010 	.word	0x10000010
34014448:	10000011 	.word	0x10000011
3401444c:	10000012 	.word	0x10000012
34014450:	10000013 	.word	0x10000013
34014454:	10000014 	.word	0x10000014
34014458:	10000015 	.word	0x10000015
3401445c:	10000016 	.word	0x10000016
34014460:	10000017 	.word	0x10000017
34014464:	10000018 	.word	0x10000018
34014468:	10000019 	.word	0x10000019
3401446c:	1000001a 	.word	0x1000001a
34014470:	1000001c 	.word	0x1000001c
34014474:	1000001d 	.word	0x1000001d
34014478:	1000001e 	.word	0x1000001e
3401447c:	20000001 	.word	0x20000001
34014480:	20000003 	.word	0x20000003
34014484:	20000004 	.word	0x20000004
34014488:	20000005 	.word	0x20000005
3401448c:	2000000c 	.word	0x2000000c
34014490:	2000000d 	.word	0x2000000d
34014494:	2000000e 	.word	0x2000000e
34014498:	2000000f 	.word	0x2000000f
3401449c:	20000010 	.word	0x20000010
340144a0:	20000011 	.word	0x20000011
340144a4:	20000012 	.word	0x20000012
340144a8:	20000013 	.word	0x20000013
340144ac:	20000014 	.word	0x20000014
340144b0:	20000016 	.word	0x20000016
340144b4:	20000017 	.word	0x20000017
340144b8:	20000018 	.word	0x20000018
340144bc:	20000019 	.word	0x20000019
340144c0:	2000001a 	.word	0x2000001a
340144c4:	2000001c 	.word	0x2000001c
340144c8:	2000001d 	.word	0x2000001d
340144cc:	2000001e 	.word	0x2000001e
340144d0:	30000001 	.word	0x30000001
340144d4:	30000002 	.word	0x30000002
340144d8:	30000003 	.word	0x30000003
340144dc:	30000004 	.word	0x30000004
340144e0:	30000005 	.word	0x30000005
340144e4:	30000006 	.word	0x30000006
340144e8:	30000007 	.word	0x30000007
340144ec:	30000008 	.word	0x30000008
340144f0:	3000000a 	.word	0x3000000a
340144f4:	40000002 	.word	0x40000002
340144f8:	40000003 	.word	0x40000003
340144fc:	40000005 	.word	0x40000005
34014500:	687b      	ldr	r3, [r7, #4]
34014502:	4a6d      	ldr	r2, [pc, #436]	@ (340146b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x640>)
34014504:	4293      	cmp	r3, r2
34014506:	f000 8086 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401450a:	687b      	ldr	r3, [r7, #4]
3401450c:	4a6b      	ldr	r2, [pc, #428]	@ (340146bc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x644>)
3401450e:	4293      	cmp	r3, r2
34014510:	f000 8081 	beq.w	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014514:	687b      	ldr	r3, [r7, #4]
34014516:	4a6a      	ldr	r2, [pc, #424]	@ (340146c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x648>)
34014518:	4293      	cmp	r3, r2
3401451a:	d07c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401451c:	687b      	ldr	r3, [r7, #4]
3401451e:	4a69      	ldr	r2, [pc, #420]	@ (340146c4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x64c>)
34014520:	4293      	cmp	r3, r2
34014522:	d078      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014524:	687b      	ldr	r3, [r7, #4]
34014526:	4a68      	ldr	r2, [pc, #416]	@ (340146c8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x650>)
34014528:	4293      	cmp	r3, r2
3401452a:	d074      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401452c:	687b      	ldr	r3, [r7, #4]
3401452e:	4a67      	ldr	r2, [pc, #412]	@ (340146cc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x654>)
34014530:	4293      	cmp	r3, r2
34014532:	d070      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014534:	687b      	ldr	r3, [r7, #4]
34014536:	4a66      	ldr	r2, [pc, #408]	@ (340146d0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x658>)
34014538:	4293      	cmp	r3, r2
3401453a:	d06c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401453c:	687b      	ldr	r3, [r7, #4]
3401453e:	4a65      	ldr	r2, [pc, #404]	@ (340146d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x65c>)
34014540:	4293      	cmp	r3, r2
34014542:	d068      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014544:	687b      	ldr	r3, [r7, #4]
34014546:	4a64      	ldr	r2, [pc, #400]	@ (340146d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x660>)
34014548:	4293      	cmp	r3, r2
3401454a:	d064      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401454c:	687b      	ldr	r3, [r7, #4]
3401454e:	4a63      	ldr	r2, [pc, #396]	@ (340146dc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x664>)
34014550:	4293      	cmp	r3, r2
34014552:	d060      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014554:	687b      	ldr	r3, [r7, #4]
34014556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401455a:	d05c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401455c:	687b      	ldr	r3, [r7, #4]
3401455e:	4a60      	ldr	r2, [pc, #384]	@ (340146e0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x668>)
34014560:	4293      	cmp	r3, r2
34014562:	d058      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014564:	687b      	ldr	r3, [r7, #4]
34014566:	4a5f      	ldr	r2, [pc, #380]	@ (340146e4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x66c>)
34014568:	4293      	cmp	r3, r2
3401456a:	d054      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401456c:	687b      	ldr	r3, [r7, #4]
3401456e:	4a5e      	ldr	r2, [pc, #376]	@ (340146e8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x670>)
34014570:	4293      	cmp	r3, r2
34014572:	d050      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014574:	687b      	ldr	r3, [r7, #4]
34014576:	4a5d      	ldr	r2, [pc, #372]	@ (340146ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0x674>)
34014578:	4293      	cmp	r3, r2
3401457a:	d04c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401457c:	687b      	ldr	r3, [r7, #4]
3401457e:	4a5c      	ldr	r2, [pc, #368]	@ (340146f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x678>)
34014580:	4293      	cmp	r3, r2
34014582:	d048      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014584:	687b      	ldr	r3, [r7, #4]
34014586:	4a5b      	ldr	r2, [pc, #364]	@ (340146f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x67c>)
34014588:	4293      	cmp	r3, r2
3401458a:	d044      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401458c:	687b      	ldr	r3, [r7, #4]
3401458e:	4a5a      	ldr	r2, [pc, #360]	@ (340146f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x680>)
34014590:	4293      	cmp	r3, r2
34014592:	d040      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014594:	687b      	ldr	r3, [r7, #4]
34014596:	4a59      	ldr	r2, [pc, #356]	@ (340146fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0x684>)
34014598:	4293      	cmp	r3, r2
3401459a:	d03c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401459c:	687b      	ldr	r3, [r7, #4]
3401459e:	4a58      	ldr	r2, [pc, #352]	@ (34014700 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x688>)
340145a0:	4293      	cmp	r3, r2
340145a2:	d038      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145a4:	687b      	ldr	r3, [r7, #4]
340145a6:	4a57      	ldr	r2, [pc, #348]	@ (34014704 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x68c>)
340145a8:	4293      	cmp	r3, r2
340145aa:	d034      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145ac:	687b      	ldr	r3, [r7, #4]
340145ae:	4a56      	ldr	r2, [pc, #344]	@ (34014708 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x690>)
340145b0:	4293      	cmp	r3, r2
340145b2:	d030      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145b4:	687b      	ldr	r3, [r7, #4]
340145b6:	4a55      	ldr	r2, [pc, #340]	@ (3401470c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x694>)
340145b8:	4293      	cmp	r3, r2
340145ba:	d02c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145bc:	687b      	ldr	r3, [r7, #4]
340145be:	4a54      	ldr	r2, [pc, #336]	@ (34014710 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x698>)
340145c0:	4293      	cmp	r3, r2
340145c2:	d028      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145c4:	687b      	ldr	r3, [r7, #4]
340145c6:	4a53      	ldr	r2, [pc, #332]	@ (34014714 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x69c>)
340145c8:	4293      	cmp	r3, r2
340145ca:	d024      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145cc:	687b      	ldr	r3, [r7, #4]
340145ce:	4a52      	ldr	r2, [pc, #328]	@ (34014718 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a0>)
340145d0:	4293      	cmp	r3, r2
340145d2:	d020      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145d4:	687b      	ldr	r3, [r7, #4]
340145d6:	4a51      	ldr	r2, [pc, #324]	@ (3401471c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a4>)
340145d8:	4293      	cmp	r3, r2
340145da:	d01c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145dc:	687b      	ldr	r3, [r7, #4]
340145de:	4a50      	ldr	r2, [pc, #320]	@ (34014720 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6a8>)
340145e0:	4293      	cmp	r3, r2
340145e2:	d018      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145e4:	687b      	ldr	r3, [r7, #4]
340145e6:	4a4f      	ldr	r2, [pc, #316]	@ (34014724 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6ac>)
340145e8:	4293      	cmp	r3, r2
340145ea:	d014      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145ec:	687b      	ldr	r3, [r7, #4]
340145ee:	4a4e      	ldr	r2, [pc, #312]	@ (34014728 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b0>)
340145f0:	4293      	cmp	r3, r2
340145f2:	d010      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145f4:	687b      	ldr	r3, [r7, #4]
340145f6:	4a4d      	ldr	r2, [pc, #308]	@ (3401472c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b4>)
340145f8:	4293      	cmp	r3, r2
340145fa:	d00c      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
340145fc:	687b      	ldr	r3, [r7, #4]
340145fe:	4a4c      	ldr	r2, [pc, #304]	@ (34014730 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6b8>)
34014600:	4293      	cmp	r3, r2
34014602:	d008      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
34014604:	687b      	ldr	r3, [r7, #4]
34014606:	4a4b      	ldr	r2, [pc, #300]	@ (34014734 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6bc>)
34014608:	4293      	cmp	r3, r2
3401460a:	d004      	beq.n	34014616 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x59e>
3401460c:	f240 1173 	movw	r1, #371	@ 0x173
34014610:	4849      	ldr	r0, [pc, #292]	@ (34014738 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014612:	f7ed f80b 	bl	3400162c <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
34014616:	683b      	ldr	r3, [r7, #0]
34014618:	2b03      	cmp	r3, #3
3401461a:	d904      	bls.n	34014626 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x5ae>
3401461c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
34014620:	4845      	ldr	r0, [pc, #276]	@ (34014738 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c0>)
34014622:	f7ed f803 	bl	3400162c <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
34014626:	4a45      	ldr	r2, [pc, #276]	@ (3401473c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
34014628:	687b      	ldr	r3, [r7, #4]
3401462a:	0f1b      	lsrs	r3, r3, #28
3401462c:	3304      	adds	r3, #4
3401462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014632:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014634:	687b      	ldr	r3, [r7, #4]
34014636:	f003 031f 	and.w	r3, r3, #31
3401463a:	2201      	movs	r2, #1
3401463c:	fa02 f303 	lsl.w	r3, r2, r3
34014640:	43da      	mvns	r2, r3
34014642:	68fb      	ldr	r3, [r7, #12]
34014644:	4013      	ands	r3, r2
34014646:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
34014648:	683b      	ldr	r3, [r7, #0]
3401464a:	f003 0201 	and.w	r2, r3, #1
3401464e:	687b      	ldr	r3, [r7, #4]
34014650:	f003 031f 	and.w	r3, r3, #31
34014654:	409a      	lsls	r2, r3
34014656:	68fb      	ldr	r3, [r7, #12]
34014658:	4313      	orrs	r3, r2
3401465a:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401465c:	4937      	ldr	r1, [pc, #220]	@ (3401473c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3401465e:	687b      	ldr	r3, [r7, #4]
34014660:	0f1b      	lsrs	r3, r3, #28
34014662:	68fa      	ldr	r2, [r7, #12]
34014664:	3304      	adds	r3, #4
34014666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401466a:	4a34      	ldr	r2, [pc, #208]	@ (3401473c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
3401466c:	687b      	ldr	r3, [r7, #4]
3401466e:	0f1b      	lsrs	r3, r3, #28
34014670:	330c      	adds	r3, #12
34014672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34014676:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
34014678:	687b      	ldr	r3, [r7, #4]
3401467a:	f003 031f 	and.w	r3, r3, #31
3401467e:	2201      	movs	r2, #1
34014680:	fa02 f303 	lsl.w	r3, r2, r3
34014684:	43da      	mvns	r2, r3
34014686:	68fb      	ldr	r3, [r7, #12]
34014688:	4013      	ands	r3, r2
3401468a:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401468c:	683b      	ldr	r3, [r7, #0]
3401468e:	085b      	lsrs	r3, r3, #1
34014690:	f003 0201 	and.w	r2, r3, #1
34014694:	687b      	ldr	r3, [r7, #4]
34014696:	f003 031f 	and.w	r3, r3, #31
3401469a:	409a      	lsls	r2, r3
3401469c:	68fb      	ldr	r3, [r7, #12]
3401469e:	4313      	orrs	r3, r2
340146a0:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
340146a2:	4926      	ldr	r1, [pc, #152]	@ (3401473c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x6c4>)
340146a4:	687b      	ldr	r3, [r7, #4]
340146a6:	0f1b      	lsrs	r3, r3, #28
340146a8:	68fa      	ldr	r2, [r7, #12]
340146aa:	330c      	adds	r3, #12
340146ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
340146b0:	bf00      	nop
340146b2:	3710      	adds	r7, #16
340146b4:	46bd      	mov	sp, r7
340146b6:	bd80      	pop	{r7, pc}
340146b8:	4000000c 	.word	0x4000000c
340146bc:	4000000d 	.word	0x4000000d
340146c0:	40000011 	.word	0x40000011
340146c4:	40000012 	.word	0x40000012
340146c8:	40000013 	.word	0x40000013
340146cc:	40000019 	.word	0x40000019
340146d0:	4000001b 	.word	0x4000001b
340146d4:	4000001c 	.word	0x4000001c
340146d8:	4000001d 	.word	0x4000001d
340146dc:	4000001f 	.word	0x4000001f
340146e0:	50000001 	.word	0x50000001
340146e4:	50000002 	.word	0x50000002
340146e8:	50000003 	.word	0x50000003
340146ec:	50000004 	.word	0x50000004
340146f0:	50000005 	.word	0x50000005
340146f4:	50000006 	.word	0x50000006
340146f8:	50000008 	.word	0x50000008
340146fc:	50000009 	.word	0x50000009
34014700:	5000000a 	.word	0x5000000a
34014704:	5000000b 	.word	0x5000000b
34014708:	5000000d 	.word	0x5000000d
3401470c:	5000000e 	.word	0x5000000e
34014710:	5000000f 	.word	0x5000000f
34014714:	50000011 	.word	0x50000011
34014718:	50000012 	.word	0x50000012
3401471c:	50000013 	.word	0x50000013
34014720:	50000014 	.word	0x50000014
34014724:	50000016 	.word	0x50000016
34014728:	50000017 	.word	0x50000017
3401472c:	50000018 	.word	0x50000018
34014730:	5000001b 	.word	0x5000001b
34014734:	5000001e 	.word	0x5000001e
34014738:	3401aec4 	.word	0x3401aec4
3401473c:	54024000 	.word	0x54024000

34014740 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
34014740:	b580      	push	{r7, lr}
34014742:	b086      	sub	sp, #24
34014744:	af00      	add	r7, sp, #0
34014746:	60f8      	str	r0, [r7, #12]
34014748:	60b9      	str	r1, [r7, #8]
3401474a:	4613      	mov	r3, r2
3401474c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
3401474e:	68fb      	ldr	r3, [r7, #12]
34014750:	689b      	ldr	r3, [r3, #8]
34014752:	2b00      	cmp	r3, #0
34014754:	d00e      	beq.n	34014774 <HAL_SPI_Transmit_DMA+0x34>
34014756:	68fb      	ldr	r3, [r7, #12]
34014758:	689b      	ldr	r3, [r3, #8]
3401475a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401475e:	d009      	beq.n	34014774 <HAL_SPI_Transmit_DMA+0x34>
34014760:	68fb      	ldr	r3, [r7, #12]
34014762:	689b      	ldr	r3, [r3, #8]
34014764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014768:	d004      	beq.n	34014774 <HAL_SPI_Transmit_DMA+0x34>
3401476a:	f240 71a5 	movw	r1, #1957	@ 0x7a5
3401476e:	4882      	ldr	r0, [pc, #520]	@ (34014978 <HAL_SPI_Transmit_DMA+0x238>)
34014770:	f7ec ff5c 	bl	3400162c <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
34014774:	68fb      	ldr	r3, [r7, #12]
34014776:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401477a:	b2db      	uxtb	r3, r3
3401477c:	2b01      	cmp	r3, #1
3401477e:	d001      	beq.n	34014784 <HAL_SPI_Transmit_DMA+0x44>
  {
    return HAL_BUSY;
34014780:	2302      	movs	r3, #2
34014782:	e1b7      	b.n	34014af4 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  if ((pData == NULL) || (Size == 0UL))
34014784:	68bb      	ldr	r3, [r7, #8]
34014786:	2b00      	cmp	r3, #0
34014788:	d002      	beq.n	34014790 <HAL_SPI_Transmit_DMA+0x50>
3401478a:	88fb      	ldrh	r3, [r7, #6]
3401478c:	2b00      	cmp	r3, #0
3401478e:	d101      	bne.n	34014794 <HAL_SPI_Transmit_DMA+0x54>
  {
    return HAL_ERROR;
34014790:	2301      	movs	r3, #1
34014792:	e1af      	b.n	34014af4 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
34014794:	68fb      	ldr	r3, [r7, #12]
34014796:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
3401479a:	2b01      	cmp	r3, #1
3401479c:	d101      	bne.n	340147a2 <HAL_SPI_Transmit_DMA+0x62>
3401479e:	2302      	movs	r3, #2
340147a0:	e1a8      	b.n	34014af4 <HAL_SPI_Transmit_DMA+0x3b4>
340147a2:	68fb      	ldr	r3, [r7, #12]
340147a4:	2201      	movs	r2, #1
340147a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
340147aa:	68fb      	ldr	r3, [r7, #12]
340147ac:	2203      	movs	r2, #3
340147ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
340147b2:	68fb      	ldr	r3, [r7, #12]
340147b4:	2200      	movs	r2, #0
340147b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
340147ba:	68fb      	ldr	r3, [r7, #12]
340147bc:	68ba      	ldr	r2, [r7, #8]
340147be:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
340147c0:	68fb      	ldr	r3, [r7, #12]
340147c2:	88fa      	ldrh	r2, [r7, #6]
340147c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
340147c8:	68fb      	ldr	r3, [r7, #12]
340147ca:	88fa      	ldrh	r2, [r7, #6]
340147cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
340147d0:	68fb      	ldr	r3, [r7, #12]
340147d2:	2200      	movs	r2, #0
340147d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
340147d6:	68fb      	ldr	r3, [r7, #12]
340147d8:	2200      	movs	r2, #0
340147da:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
340147dc:	68fb      	ldr	r3, [r7, #12]
340147de:	2200      	movs	r2, #0
340147e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
340147e2:	68fb      	ldr	r3, [r7, #12]
340147e4:	2200      	movs	r2, #0
340147e6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
340147ea:	68fb      	ldr	r3, [r7, #12]
340147ec:	2200      	movs	r2, #0
340147ee:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
340147f2:	68fb      	ldr	r3, [r7, #12]
340147f4:	689b      	ldr	r3, [r3, #8]
340147f6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
340147fa:	d108      	bne.n	3401480e <HAL_SPI_Transmit_DMA+0xce>
  {
    SPI_1LINE_TX(hspi);
340147fc:	68fb      	ldr	r3, [r7, #12]
340147fe:	681b      	ldr	r3, [r3, #0]
34014800:	681a      	ldr	r2, [r3, #0]
34014802:	68fb      	ldr	r3, [r7, #12]
34014804:	681b      	ldr	r3, [r3, #0]
34014806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
3401480a:	601a      	str	r2, [r3, #0]
3401480c:	e009      	b.n	34014822 <HAL_SPI_Transmit_DMA+0xe2>
  }
  else
  {
    SPI_2LINES_TX(hspi);
3401480e:	68fb      	ldr	r3, [r7, #12]
34014810:	681b      	ldr	r3, [r3, #0]
34014812:	68db      	ldr	r3, [r3, #12]
34014814:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
34014818:	68fb      	ldr	r3, [r7, #12]
3401481a:	681b      	ldr	r3, [r3, #0]
3401481c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
34014820:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
34014822:	68fb      	ldr	r3, [r7, #12]
34014824:	68db      	ldr	r3, [r3, #12]
34014826:	2b0f      	cmp	r3, #15
34014828:	d92d      	bls.n	34014886 <HAL_SPI_Transmit_DMA+0x146>
3401482a:	68fb      	ldr	r3, [r7, #12]
3401482c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014830:	699b      	ldr	r3, [r3, #24]
34014832:	2b02      	cmp	r3, #2
34014834:	d027      	beq.n	34014886 <HAL_SPI_Transmit_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014836:	68fb      	ldr	r3, [r7, #12]
34014838:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
3401483a:	4a50      	ldr	r2, [pc, #320]	@ (3401497c <HAL_SPI_Transmit_DMA+0x23c>)
3401483c:	4293      	cmp	r3, r2
3401483e:	d02c      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
34014840:	68fb      	ldr	r3, [r7, #12]
34014842:	681b      	ldr	r3, [r3, #0]
34014844:	4a4e      	ldr	r2, [pc, #312]	@ (34014980 <HAL_SPI_Transmit_DMA+0x240>)
34014846:	4293      	cmp	r3, r2
34014848:	d027      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
3401484a:	68fb      	ldr	r3, [r7, #12]
3401484c:	681b      	ldr	r3, [r3, #0]
3401484e:	4a4d      	ldr	r2, [pc, #308]	@ (34014984 <HAL_SPI_Transmit_DMA+0x244>)
34014850:	4293      	cmp	r3, r2
34014852:	d022      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
34014854:	68fb      	ldr	r3, [r7, #12]
34014856:	681b      	ldr	r3, [r3, #0]
34014858:	4a4b      	ldr	r2, [pc, #300]	@ (34014988 <HAL_SPI_Transmit_DMA+0x248>)
3401485a:	4293      	cmp	r3, r2
3401485c:	d01d      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
3401485e:	68fb      	ldr	r3, [r7, #12]
34014860:	681b      	ldr	r3, [r3, #0]
34014862:	4a4a      	ldr	r2, [pc, #296]	@ (3401498c <HAL_SPI_Transmit_DMA+0x24c>)
34014864:	4293      	cmp	r3, r2
34014866:	d018      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
34014868:	68fb      	ldr	r3, [r7, #12]
3401486a:	681b      	ldr	r3, [r3, #0]
3401486c:	4a48      	ldr	r2, [pc, #288]	@ (34014990 <HAL_SPI_Transmit_DMA+0x250>)
3401486e:	4293      	cmp	r3, r2
34014870:	d013      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
34014872:	68fb      	ldr	r3, [r7, #12]
34014874:	681b      	ldr	r3, [r3, #0]
34014876:	4a47      	ldr	r2, [pc, #284]	@ (34014994 <HAL_SPI_Transmit_DMA+0x254>)
34014878:	4293      	cmp	r3, r2
3401487a:	d00e      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
3401487c:	68fb      	ldr	r3, [r7, #12]
3401487e:	681b      	ldr	r3, [r3, #0]
34014880:	4a45      	ldr	r2, [pc, #276]	@ (34014998 <HAL_SPI_Transmit_DMA+0x258>)
34014882:	4293      	cmp	r3, r2
34014884:	d009      	beq.n	3401489a <HAL_SPI_Transmit_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
34014886:	68fb      	ldr	r3, [r7, #12]
34014888:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
3401488a:	2b07      	cmp	r3, #7
3401488c:	d90b      	bls.n	340148a6 <HAL_SPI_Transmit_DMA+0x166>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
3401488e:	68fb      	ldr	r3, [r7, #12]
34014890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014894:	699b      	ldr	r3, [r3, #24]
34014896:	2b00      	cmp	r3, #0
34014898:	d105      	bne.n	340148a6 <HAL_SPI_Transmit_DMA+0x166>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
3401489a:	68fb      	ldr	r3, [r7, #12]
3401489c:	2200      	movs	r2, #0
3401489e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
340148a2:	2301      	movs	r3, #1
340148a4:	e126      	b.n	34014af4 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
340148a6:	68fb      	ldr	r3, [r7, #12]
340148a8:	68db      	ldr	r3, [r3, #12]
340148aa:	2b07      	cmp	r3, #7
340148ac:	d820      	bhi.n	340148f0 <HAL_SPI_Transmit_DMA+0x1b0>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
340148ae:	68fb      	ldr	r3, [r7, #12]
340148b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340148b4:	699b      	ldr	r3, [r3, #24]
340148b6:	2b01      	cmp	r3, #1
340148b8:	d109      	bne.n	340148ce <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
340148ba:	68fb      	ldr	r3, [r7, #12]
340148bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
340148c0:	b29b      	uxth	r3, r3
340148c2:	3301      	adds	r3, #1
340148c4:	105b      	asrs	r3, r3, #1
340148c6:	b29a      	uxth	r2, r3
340148c8:	68fb      	ldr	r3, [r7, #12]
340148ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
340148ce:	68fb      	ldr	r3, [r7, #12]
340148d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340148d4:	699b      	ldr	r3, [r3, #24]
340148d6:	2b02      	cmp	r3, #2
340148d8:	d11e      	bne.n	34014918 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
340148da:	68fb      	ldr	r3, [r7, #12]
340148dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
340148e0:	b29b      	uxth	r3, r3
340148e2:	3303      	adds	r3, #3
340148e4:	109b      	asrs	r3, r3, #2
340148e6:	b29a      	uxth	r2, r3
340148e8:	68fb      	ldr	r3, [r7, #12]
340148ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
340148ee:	e013      	b.n	34014918 <HAL_SPI_Transmit_DMA+0x1d8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
340148f0:	68fb      	ldr	r3, [r7, #12]
340148f2:	68db      	ldr	r3, [r3, #12]
340148f4:	2b0f      	cmp	r3, #15
340148f6:	d80f      	bhi.n	34014918 <HAL_SPI_Transmit_DMA+0x1d8>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
340148f8:	68fb      	ldr	r3, [r7, #12]
340148fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340148fe:	699b      	ldr	r3, [r3, #24]
34014900:	2b02      	cmp	r3, #2
34014902:	d109      	bne.n	34014918 <HAL_SPI_Transmit_DMA+0x1d8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
34014904:	68fb      	ldr	r3, [r7, #12]
34014906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
3401490a:	b29b      	uxth	r3, r3
3401490c:	3301      	adds	r3, #1
3401490e:	105b      	asrs	r3, r3, #1
34014910:	b29a      	uxth	r2, r3
34014912:	68fb      	ldr	r3, [r7, #12]
34014914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
34014918:	68fb      	ldr	r3, [r7, #12]
3401491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401491e:	4a1f      	ldr	r2, [pc, #124]	@ (3401499c <HAL_SPI_Transmit_DMA+0x25c>)
34014920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
34014922:	68fb      	ldr	r3, [r7, #12]
34014924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014928:	4a1d      	ldr	r2, [pc, #116]	@ (340149a0 <HAL_SPI_Transmit_DMA+0x260>)
3401492a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
3401492c:	68fb      	ldr	r3, [r7, #12]
3401492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014932:	4a1c      	ldr	r2, [pc, #112]	@ (340149a4 <HAL_SPI_Transmit_DMA+0x264>)
34014934:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
34014936:	68fb      	ldr	r3, [r7, #12]
34014938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3401493c:	2200      	movs	r2, #0
3401493e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34014940:	68fb      	ldr	r3, [r7, #12]
34014942:	681b      	ldr	r3, [r3, #0]
34014944:	689a      	ldr	r2, [r3, #8]
34014946:	68fb      	ldr	r3, [r7, #12]
34014948:	681b      	ldr	r3, [r3, #0]
3401494a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3401494e:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
34014950:	68fb      	ldr	r3, [r7, #12]
34014952:	68db      	ldr	r3, [r3, #12]
34014954:	2b07      	cmp	r3, #7
34014956:	d804      	bhi.n	34014962 <HAL_SPI_Transmit_DMA+0x222>
  {
    hspi->TxXferCount = Size;
34014958:	68fb      	ldr	r3, [r7, #12]
3401495a:	88fa      	ldrh	r2, [r7, #6]
3401495c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014960:	e028      	b.n	340149b4 <HAL_SPI_Transmit_DMA+0x274>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
34014962:	68fb      	ldr	r3, [r7, #12]
34014964:	68db      	ldr	r3, [r3, #12]
34014966:	2b0f      	cmp	r3, #15
34014968:	d81e      	bhi.n	340149a8 <HAL_SPI_Transmit_DMA+0x268>
  {
    hspi->TxXferCount = Size * 2U;
3401496a:	88fb      	ldrh	r3, [r7, #6]
3401496c:	005b      	lsls	r3, r3, #1
3401496e:	b29a      	uxth	r2, r3
34014970:	68fb      	ldr	r3, [r7, #12]
34014972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
34014976:	e01d      	b.n	340149b4 <HAL_SPI_Transmit_DMA+0x274>
34014978:	3401af6c 	.word	0x3401af6c
3401497c:	52003000 	.word	0x52003000
34014980:	42003000 	.word	0x42003000
34014984:	50003800 	.word	0x50003800
34014988:	40003800 	.word	0x40003800
3401498c:	50003c00 	.word	0x50003c00
34014990:	40003c00 	.word	0x40003c00
34014994:	56001400 	.word	0x56001400
34014998:	46001400 	.word	0x46001400
3401499c:	34014f3b 	.word	0x34014f3b
340149a0:	34014ef5 	.word	0x34014ef5
340149a4:	34014f57 	.word	0x34014f57
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
340149a8:	88fb      	ldrh	r3, [r7, #6]
340149aa:	009b      	lsls	r3, r3, #2
340149ac:	b29a      	uxth	r2, r3
340149ae:	68fb      	ldr	r3, [r7, #12]
340149b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
340149b4:	68fb      	ldr	r3, [r7, #12]
340149b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340149ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
340149bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340149c0:	2b00      	cmp	r3, #0
340149c2:	d02d      	beq.n	34014a20 <HAL_SPI_Transmit_DMA+0x2e0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
340149c4:	68fb      	ldr	r3, [r7, #12]
340149c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340149ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340149cc:	2b00      	cmp	r3, #0
340149ce:	d024      	beq.n	34014a1a <HAL_SPI_Transmit_DMA+0x2da>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
340149d0:	68fb      	ldr	r3, [r7, #12]
340149d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
340149d6:	b29a      	uxth	r2, r3
340149d8:	68fb      	ldr	r3, [r7, #12]
340149da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340149de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340149e0:	681b      	ldr	r3, [r3, #0]
340149e2:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
340149e4:	68fb      	ldr	r3, [r7, #12]
340149e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
340149e8:	68fb      	ldr	r3, [r7, #12]
340149ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340149ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340149f0:	681b      	ldr	r3, [r3, #0]
340149f2:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
340149f4:	68fb      	ldr	r3, [r7, #12]
340149f6:	681b      	ldr	r3, [r3, #0]
340149f8:	f103 0220 	add.w	r2, r3, #32
340149fc:	68fb      	ldr	r3, [r7, #12]
340149fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34014a04:	681b      	ldr	r3, [r3, #0]
34014a06:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
34014a08:	68fb      	ldr	r3, [r7, #12]
34014a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014a0e:	4618      	mov	r0, r3
34014a10:	f7f0 fbb3 	bl	3400517a <HAL_DMAEx_List_Start_IT>
34014a14:	4603      	mov	r3, r0
34014a16:	75fb      	strb	r3, [r7, #23]
34014a18:	e014      	b.n	34014a44 <HAL_SPI_Transmit_DMA+0x304>
    }
    else
    {
      status = HAL_ERROR;
34014a1a:	2301      	movs	r3, #1
34014a1c:	75fb      	strb	r3, [r7, #23]
34014a1e:	e011      	b.n	34014a44 <HAL_SPI_Transmit_DMA+0x304>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34014a20:	68fb      	ldr	r3, [r7, #12]
34014a22:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34014a26:	68fb      	ldr	r3, [r7, #12]
34014a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34014a2a:	4619      	mov	r1, r3
34014a2c:	68fb      	ldr	r3, [r7, #12]
34014a2e:	681b      	ldr	r3, [r3, #0]
34014a30:	3320      	adds	r3, #32
34014a32:	461a      	mov	r2, r3
                              hspi->TxXferCount);
34014a34:	68fb      	ldr	r3, [r7, #12]
34014a36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
34014a3a:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
34014a3c:	f7f0 f85c 	bl	34004af8 <HAL_DMA_Start_IT>
34014a40:	4603      	mov	r3, r0
34014a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
34014a44:	7dfb      	ldrb	r3, [r7, #23]
34014a46:	2b00      	cmp	r3, #0
34014a48:	d011      	beq.n	34014a6e <HAL_SPI_Transmit_DMA+0x32e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34014a4a:	68fb      	ldr	r3, [r7, #12]
34014a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014a50:	f043 0210 	orr.w	r2, r3, #16
34014a54:	68fb      	ldr	r3, [r7, #12]
34014a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34014a5a:	68fb      	ldr	r3, [r7, #12]
34014a5c:	2201      	movs	r2, #1
34014a5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
34014a62:	68fb      	ldr	r3, [r7, #12]
34014a64:	2200      	movs	r2, #0
34014a66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
34014a6a:	2301      	movs	r3, #1
34014a6c:	e042      	b.n	34014af4 <HAL_SPI_Transmit_DMA+0x3b4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
34014a6e:	68fb      	ldr	r3, [r7, #12]
34014a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34014a76:	2b81      	cmp	r3, #129	@ 0x81
34014a78:	d108      	bne.n	34014a8c <HAL_SPI_Transmit_DMA+0x34c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
34014a7a:	68fb      	ldr	r3, [r7, #12]
34014a7c:	681b      	ldr	r3, [r3, #0]
34014a7e:	685b      	ldr	r3, [r3, #4]
34014a80:	68fa      	ldr	r2, [r7, #12]
34014a82:	6812      	ldr	r2, [r2, #0]
34014a84:	0c1b      	lsrs	r3, r3, #16
34014a86:	041b      	lsls	r3, r3, #16
34014a88:	6053      	str	r3, [r2, #4]
34014a8a:	e009      	b.n	34014aa0 <HAL_SPI_Transmit_DMA+0x360>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
34014a8c:	68fb      	ldr	r3, [r7, #12]
34014a8e:	681b      	ldr	r3, [r3, #0]
34014a90:	685b      	ldr	r3, [r3, #4]
34014a92:	0c1b      	lsrs	r3, r3, #16
34014a94:	041b      	lsls	r3, r3, #16
34014a96:	88f9      	ldrh	r1, [r7, #6]
34014a98:	68fa      	ldr	r2, [r7, #12]
34014a9a:	6812      	ldr	r2, [r2, #0]
34014a9c:	430b      	orrs	r3, r1
34014a9e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
34014aa0:	68fb      	ldr	r3, [r7, #12]
34014aa2:	681b      	ldr	r3, [r3, #0]
34014aa4:	689a      	ldr	r2, [r3, #8]
34014aa6:	68fb      	ldr	r3, [r7, #12]
34014aa8:	681b      	ldr	r3, [r3, #0]
34014aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34014aae:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
34014ab0:	68fb      	ldr	r3, [r7, #12]
34014ab2:	681b      	ldr	r3, [r3, #0]
34014ab4:	691a      	ldr	r2, [r3, #16]
34014ab6:	68fb      	ldr	r3, [r7, #12]
34014ab8:	681b      	ldr	r3, [r3, #0]
34014aba:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
34014abe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
34014ac0:	68fb      	ldr	r3, [r7, #12]
34014ac2:	681b      	ldr	r3, [r3, #0]
34014ac4:	681a      	ldr	r2, [r3, #0]
34014ac6:	68fb      	ldr	r3, [r7, #12]
34014ac8:	681b      	ldr	r3, [r3, #0]
34014aca:	f042 0201 	orr.w	r2, r2, #1
34014ace:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
34014ad0:	68fb      	ldr	r3, [r7, #12]
34014ad2:	685b      	ldr	r3, [r3, #4]
34014ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34014ad8:	d107      	bne.n	34014aea <HAL_SPI_Transmit_DMA+0x3aa>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
34014ada:	68fb      	ldr	r3, [r7, #12]
34014adc:	681b      	ldr	r3, [r3, #0]
34014ade:	681a      	ldr	r2, [r3, #0]
34014ae0:	68fb      	ldr	r3, [r7, #12]
34014ae2:	681b      	ldr	r3, [r3, #0]
34014ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34014ae8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
34014aea:	68fb      	ldr	r3, [r7, #12]
34014aec:	2200      	movs	r2, #0
34014aee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
34014af2:	2300      	movs	r3, #0
}
34014af4:	4618      	mov	r0, r3
34014af6:	3718      	adds	r7, #24
34014af8:	46bd      	mov	sp, r7
34014afa:	bd80      	pop	{r7, pc}

34014afc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
34014afc:	b580      	push	{r7, lr}
34014afe:	b08a      	sub	sp, #40	@ 0x28
34014b00:	af00      	add	r7, sp, #0
34014b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
34014b04:	687b      	ldr	r3, [r7, #4]
34014b06:	681b      	ldr	r3, [r3, #0]
34014b08:	691b      	ldr	r3, [r3, #16]
34014b0a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
34014b0c:	687b      	ldr	r3, [r7, #4]
34014b0e:	681b      	ldr	r3, [r3, #0]
34014b10:	695b      	ldr	r3, [r3, #20]
34014b12:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
34014b14:	6a3a      	ldr	r2, [r7, #32]
34014b16:	69fb      	ldr	r3, [r7, #28]
34014b18:	4013      	ands	r3, r2
34014b1a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
34014b1c:	687b      	ldr	r3, [r7, #4]
34014b1e:	681b      	ldr	r3, [r3, #0]
34014b20:	689b      	ldr	r3, [r3, #8]
34014b22:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
34014b24:	2300      	movs	r3, #0
34014b26:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
34014b28:	687b      	ldr	r3, [r7, #4]
34014b2a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34014b2e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
34014b30:	687b      	ldr	r3, [r7, #4]
34014b32:	681b      	ldr	r3, [r3, #0]
34014b34:	3330      	adds	r3, #48	@ 0x30
34014b36:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
34014b38:	69fb      	ldr	r3, [r7, #28]
34014b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34014b3e:	2b00      	cmp	r3, #0
34014b40:	d010      	beq.n	34014b64 <HAL_SPI_IRQHandler+0x68>
34014b42:	6a3b      	ldr	r3, [r7, #32]
34014b44:	f003 0308 	and.w	r3, r3, #8
34014b48:	2b00      	cmp	r3, #0
34014b4a:	d00b      	beq.n	34014b64 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34014b4c:	687b      	ldr	r3, [r7, #4]
34014b4e:	681b      	ldr	r3, [r3, #0]
34014b50:	699a      	ldr	r2, [r3, #24]
34014b52:	687b      	ldr	r3, [r7, #4]
34014b54:	681b      	ldr	r3, [r3, #0]
34014b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34014b5a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
34014b5c:	6878      	ldr	r0, [r7, #4]
34014b5e:	f000 f9bf 	bl	34014ee0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
34014b62:	e19a      	b.n	34014e9a <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34014b64:	69bb      	ldr	r3, [r7, #24]
34014b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34014b6a:	2b00      	cmp	r3, #0
34014b6c:	d113      	bne.n	34014b96 <HAL_SPI_IRQHandler+0x9a>
34014b6e:	69bb      	ldr	r3, [r7, #24]
34014b70:	f003 0320 	and.w	r3, r3, #32
34014b74:	2b00      	cmp	r3, #0
34014b76:	d10e      	bne.n	34014b96 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
34014b78:	69bb      	ldr	r3, [r7, #24]
34014b7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
34014b7e:	2b00      	cmp	r3, #0
34014b80:	d009      	beq.n	34014b96 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
34014b82:	687b      	ldr	r3, [r7, #4]
34014b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34014b86:	6878      	ldr	r0, [r7, #4]
34014b88:	4798      	blx	r3
    hspi->RxISR(hspi);
34014b8a:	687b      	ldr	r3, [r7, #4]
34014b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34014b8e:	6878      	ldr	r0, [r7, #4]
34014b90:	4798      	blx	r3
    handled = 1UL;
34014b92:	2301      	movs	r3, #1
34014b94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
34014b96:	69bb      	ldr	r3, [r7, #24]
34014b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34014b9c:	2b00      	cmp	r3, #0
34014b9e:	d10f      	bne.n	34014bc0 <HAL_SPI_IRQHandler+0xc4>
34014ba0:	69bb      	ldr	r3, [r7, #24]
34014ba2:	f003 0301 	and.w	r3, r3, #1
34014ba6:	2b00      	cmp	r3, #0
34014ba8:	d00a      	beq.n	34014bc0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
34014baa:	69bb      	ldr	r3, [r7, #24]
34014bac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
34014bb0:	2b00      	cmp	r3, #0
34014bb2:	d105      	bne.n	34014bc0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
34014bb4:	687b      	ldr	r3, [r7, #4]
34014bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
34014bb8:	6878      	ldr	r0, [r7, #4]
34014bba:	4798      	blx	r3
    handled = 1UL;
34014bbc:	2301      	movs	r3, #1
34014bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
34014bc0:	69bb      	ldr	r3, [r7, #24]
34014bc2:	f003 0320 	and.w	r3, r3, #32
34014bc6:	2b00      	cmp	r3, #0
34014bc8:	d10f      	bne.n	34014bea <HAL_SPI_IRQHandler+0xee>
34014bca:	69bb      	ldr	r3, [r7, #24]
34014bcc:	f003 0302 	and.w	r3, r3, #2
34014bd0:	2b00      	cmp	r3, #0
34014bd2:	d00a      	beq.n	34014bea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
34014bd4:	69bb      	ldr	r3, [r7, #24]
34014bd6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
34014bda:	2b00      	cmp	r3, #0
34014bdc:	d105      	bne.n	34014bea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
34014bde:	687b      	ldr	r3, [r7, #4]
34014be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34014be2:	6878      	ldr	r0, [r7, #4]
34014be4:	4798      	blx	r3
    handled = 1UL;
34014be6:	2301      	movs	r3, #1
34014be8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
34014bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34014bec:	2b00      	cmp	r3, #0
34014bee:	f040 814f 	bne.w	34014e90 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
34014bf2:	69bb      	ldr	r3, [r7, #24]
34014bf4:	f003 0308 	and.w	r3, r3, #8
34014bf8:	2b00      	cmp	r3, #0
34014bfa:	f000 808b 	beq.w	34014d14 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
34014bfe:	687b      	ldr	r3, [r7, #4]
34014c00:	681b      	ldr	r3, [r3, #0]
34014c02:	699a      	ldr	r2, [r3, #24]
34014c04:	687b      	ldr	r3, [r7, #4]
34014c06:	681b      	ldr	r3, [r3, #0]
34014c08:	f042 0208 	orr.w	r2, r2, #8
34014c0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
34014c0e:	687b      	ldr	r3, [r7, #4]
34014c10:	681b      	ldr	r3, [r3, #0]
34014c12:	699a      	ldr	r2, [r3, #24]
34014c14:	687b      	ldr	r3, [r7, #4]
34014c16:	681b      	ldr	r3, [r3, #0]
34014c18:	f042 0210 	orr.w	r2, r2, #16
34014c1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
34014c1e:	687b      	ldr	r3, [r7, #4]
34014c20:	681b      	ldr	r3, [r3, #0]
34014c22:	699a      	ldr	r2, [r3, #24]
34014c24:	687b      	ldr	r3, [r7, #4]
34014c26:	681b      	ldr	r3, [r3, #0]
34014c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
34014c2c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
34014c2e:	687b      	ldr	r3, [r7, #4]
34014c30:	681b      	ldr	r3, [r3, #0]
34014c32:	691a      	ldr	r2, [r3, #16]
34014c34:	687b      	ldr	r3, [r7, #4]
34014c36:	681b      	ldr	r3, [r3, #0]
34014c38:	f022 0208 	bic.w	r2, r2, #8
34014c3c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
34014c3e:	687b      	ldr	r3, [r7, #4]
34014c40:	681b      	ldr	r3, [r3, #0]
34014c42:	689b      	ldr	r3, [r3, #8]
34014c44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
34014c48:	2b00      	cmp	r3, #0
34014c4a:	d13d      	bne.n	34014cc8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
34014c4c:	e036      	b.n	34014cbc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
34014c4e:	687b      	ldr	r3, [r7, #4]
34014c50:	68db      	ldr	r3, [r3, #12]
34014c52:	2b0f      	cmp	r3, #15
34014c54:	d90b      	bls.n	34014c6e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
34014c56:	687b      	ldr	r3, [r7, #4]
34014c58:	681a      	ldr	r2, [r3, #0]
34014c5a:	687b      	ldr	r3, [r7, #4]
34014c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014c5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
34014c60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
34014c62:	687b      	ldr	r3, [r7, #4]
34014c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014c66:	1d1a      	adds	r2, r3, #4
34014c68:	687b      	ldr	r3, [r7, #4]
34014c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
34014c6c:	e01d      	b.n	34014caa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
34014c6e:	687b      	ldr	r3, [r7, #4]
34014c70:	68db      	ldr	r3, [r3, #12]
34014c72:	2b07      	cmp	r3, #7
34014c74:	d90b      	bls.n	34014c8e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
34014c76:	687b      	ldr	r3, [r7, #4]
34014c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014c7a:	68fa      	ldr	r2, [r7, #12]
34014c7c:	8812      	ldrh	r2, [r2, #0]
34014c7e:	b292      	uxth	r2, r2
34014c80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
34014c82:	687b      	ldr	r3, [r7, #4]
34014c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014c86:	1c9a      	adds	r2, r3, #2
34014c88:	687b      	ldr	r3, [r7, #4]
34014c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
34014c8c:	e00d      	b.n	34014caa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
34014c8e:	687b      	ldr	r3, [r7, #4]
34014c90:	681b      	ldr	r3, [r3, #0]
34014c92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
34014c96:	687b      	ldr	r3, [r7, #4]
34014c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014c9a:	7812      	ldrb	r2, [r2, #0]
34014c9c:	b2d2      	uxtb	r2, r2
34014c9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
34014ca0:	687b      	ldr	r3, [r7, #4]
34014ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34014ca4:	1c5a      	adds	r2, r3, #1
34014ca6:	687b      	ldr	r3, [r7, #4]
34014ca8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
34014caa:	687b      	ldr	r3, [r7, #4]
34014cac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
34014cb0:	b29b      	uxth	r3, r3
34014cb2:	3b01      	subs	r3, #1
34014cb4:	b29a      	uxth	r2, r3
34014cb6:	687b      	ldr	r3, [r7, #4]
34014cb8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
34014cbc:	687b      	ldr	r3, [r7, #4]
34014cbe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
34014cc2:	b29b      	uxth	r3, r3
34014cc4:	2b00      	cmp	r3, #0
34014cc6:	d1c2      	bne.n	34014c4e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
34014cc8:	6878      	ldr	r0, [r7, #4]
34014cca:	f000 f981 	bl	34014fd0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
34014cce:	687b      	ldr	r3, [r7, #4]
34014cd0:	2201      	movs	r2, #1
34014cd2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
34014cd6:	687b      	ldr	r3, [r7, #4]
34014cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014cdc:	2b00      	cmp	r3, #0
34014cde:	d003      	beq.n	34014ce8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
34014ce0:	6878      	ldr	r0, [r7, #4]
34014ce2:	f002 fcdd 	bl	340176a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
34014ce6:	e0d8      	b.n	34014e9a <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
34014ce8:	7cfb      	ldrb	r3, [r7, #19]
34014cea:	2b05      	cmp	r3, #5
34014cec:	d103      	bne.n	34014cf6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
34014cee:	6878      	ldr	r0, [r7, #4]
34014cf0:	f000 f8e2 	bl	34014eb8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
34014cf4:	e0ce      	b.n	34014e94 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
34014cf6:	7cfb      	ldrb	r3, [r7, #19]
34014cf8:	2b04      	cmp	r3, #4
34014cfa:	d103      	bne.n	34014d04 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
34014cfc:	6878      	ldr	r0, [r7, #4]
34014cfe:	f000 f8d1 	bl	34014ea4 <HAL_SPI_RxCpltCallback>
    return;
34014d02:	e0c7      	b.n	34014e94 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
34014d04:	7cfb      	ldrb	r3, [r7, #19]
34014d06:	2b03      	cmp	r3, #3
34014d08:	f040 80c4 	bne.w	34014e94 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
34014d0c:	6878      	ldr	r0, [r7, #4]
34014d0e:	f002 fcab 	bl	34017668 <HAL_SPI_TxCpltCallback>
    return;
34014d12:	e0bf      	b.n	34014e94 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
34014d14:	69bb      	ldr	r3, [r7, #24]
34014d16:	f403 7358 	and.w	r3, r3, #864	@ 0x360
34014d1a:	2b00      	cmp	r3, #0
34014d1c:	f000 80bd 	beq.w	34014e9a <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
34014d20:	69bb      	ldr	r3, [r7, #24]
34014d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34014d26:	2b00      	cmp	r3, #0
34014d28:	d00f      	beq.n	34014d4a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34014d2a:	687b      	ldr	r3, [r7, #4]
34014d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014d30:	f043 0204 	orr.w	r2, r3, #4
34014d34:	687b      	ldr	r3, [r7, #4]
34014d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34014d3a:	687b      	ldr	r3, [r7, #4]
34014d3c:	681b      	ldr	r3, [r3, #0]
34014d3e:	699a      	ldr	r2, [r3, #24]
34014d40:	687b      	ldr	r3, [r7, #4]
34014d42:	681b      	ldr	r3, [r3, #0]
34014d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
34014d48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
34014d4a:	69bb      	ldr	r3, [r7, #24]
34014d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34014d50:	2b00      	cmp	r3, #0
34014d52:	d00f      	beq.n	34014d74 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
34014d54:	687b      	ldr	r3, [r7, #4]
34014d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014d5a:	f043 0201 	orr.w	r2, r3, #1
34014d5e:	687b      	ldr	r3, [r7, #4]
34014d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
34014d64:	687b      	ldr	r3, [r7, #4]
34014d66:	681b      	ldr	r3, [r3, #0]
34014d68:	699a      	ldr	r2, [r3, #24]
34014d6a:	687b      	ldr	r3, [r7, #4]
34014d6c:	681b      	ldr	r3, [r3, #0]
34014d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
34014d72:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
34014d74:	69bb      	ldr	r3, [r7, #24]
34014d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34014d7a:	2b00      	cmp	r3, #0
34014d7c:	d00f      	beq.n	34014d9e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
34014d7e:	687b      	ldr	r3, [r7, #4]
34014d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014d84:	f043 0208 	orr.w	r2, r3, #8
34014d88:	687b      	ldr	r3, [r7, #4]
34014d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
34014d8e:	687b      	ldr	r3, [r7, #4]
34014d90:	681b      	ldr	r3, [r3, #0]
34014d92:	699a      	ldr	r2, [r3, #24]
34014d94:	687b      	ldr	r3, [r7, #4]
34014d96:	681b      	ldr	r3, [r3, #0]
34014d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34014d9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
34014d9e:	69bb      	ldr	r3, [r7, #24]
34014da0:	f003 0320 	and.w	r3, r3, #32
34014da4:	2b00      	cmp	r3, #0
34014da6:	d00f      	beq.n	34014dc8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
34014da8:	687b      	ldr	r3, [r7, #4]
34014daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014dae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34014db2:	687b      	ldr	r3, [r7, #4]
34014db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
34014db8:	687b      	ldr	r3, [r7, #4]
34014dba:	681b      	ldr	r3, [r3, #0]
34014dbc:	699a      	ldr	r2, [r3, #24]
34014dbe:	687b      	ldr	r3, [r7, #4]
34014dc0:	681b      	ldr	r3, [r3, #0]
34014dc2:	f042 0220 	orr.w	r2, r2, #32
34014dc6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
34014dc8:	687b      	ldr	r3, [r7, #4]
34014dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014dce:	2b00      	cmp	r3, #0
34014dd0:	d062      	beq.n	34014e98 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
34014dd2:	687b      	ldr	r3, [r7, #4]
34014dd4:	681b      	ldr	r3, [r3, #0]
34014dd6:	681a      	ldr	r2, [r3, #0]
34014dd8:	687b      	ldr	r3, [r7, #4]
34014dda:	681b      	ldr	r3, [r3, #0]
34014ddc:	f022 0201 	bic.w	r2, r2, #1
34014de0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
34014de2:	687b      	ldr	r3, [r7, #4]
34014de4:	681b      	ldr	r3, [r3, #0]
34014de6:	691b      	ldr	r3, [r3, #16]
34014de8:	687a      	ldr	r2, [r7, #4]
34014dea:	6812      	ldr	r2, [r2, #0]
34014dec:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
34014df0:	f023 0303 	bic.w	r3, r3, #3
34014df4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
34014df6:	697b      	ldr	r3, [r7, #20]
34014df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
34014dfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
34014e00:	d13e      	bne.n	34014e80 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34014e02:	687b      	ldr	r3, [r7, #4]
34014e04:	681b      	ldr	r3, [r3, #0]
34014e06:	689a      	ldr	r2, [r3, #8]
34014e08:	687b      	ldr	r3, [r7, #4]
34014e0a:	681b      	ldr	r3, [r3, #0]
34014e0c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34014e10:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
34014e12:	687b      	ldr	r3, [r7, #4]
34014e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34014e18:	2b00      	cmp	r3, #0
34014e1a:	d015      	beq.n	34014e48 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
34014e1c:	687b      	ldr	r3, [r7, #4]
34014e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34014e22:	4a1f      	ldr	r2, [pc, #124]	@ (34014ea0 <HAL_SPI_IRQHandler+0x3a4>)
34014e24:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
34014e26:	687b      	ldr	r3, [r7, #4]
34014e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34014e2c:	4618      	mov	r0, r3
34014e2e:	f7ef fed1 	bl	34004bd4 <HAL_DMA_Abort_IT>
34014e32:	4603      	mov	r3, r0
34014e34:	2b00      	cmp	r3, #0
34014e36:	d007      	beq.n	34014e48 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34014e38:	687b      	ldr	r3, [r7, #4]
34014e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014e3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34014e42:	687b      	ldr	r3, [r7, #4]
34014e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
34014e48:	687b      	ldr	r3, [r7, #4]
34014e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e4e:	2b00      	cmp	r3, #0
34014e50:	d022      	beq.n	34014e98 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
34014e52:	687b      	ldr	r3, [r7, #4]
34014e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e58:	4a11      	ldr	r2, [pc, #68]	@ (34014ea0 <HAL_SPI_IRQHandler+0x3a4>)
34014e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
34014e5c:	687b      	ldr	r3, [r7, #4]
34014e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014e62:	4618      	mov	r0, r3
34014e64:	f7ef feb6 	bl	34004bd4 <HAL_DMA_Abort_IT>
34014e68:	4603      	mov	r3, r0
34014e6a:	2b00      	cmp	r3, #0
34014e6c:	d014      	beq.n	34014e98 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
34014e6e:	687b      	ldr	r3, [r7, #4]
34014e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
34014e78:	687b      	ldr	r3, [r7, #4]
34014e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
34014e7e:	e00b      	b.n	34014e98 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
34014e80:	687b      	ldr	r3, [r7, #4]
34014e82:	2201      	movs	r2, #1
34014e84:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
34014e88:	6878      	ldr	r0, [r7, #4]
34014e8a:	f002 fc09 	bl	340176a0 <HAL_SPI_ErrorCallback>
    return;
34014e8e:	e003      	b.n	34014e98 <HAL_SPI_IRQHandler+0x39c>
    return;
34014e90:	bf00      	nop
34014e92:	e002      	b.n	34014e9a <HAL_SPI_IRQHandler+0x39e>
    return;
34014e94:	bf00      	nop
34014e96:	e000      	b.n	34014e9a <HAL_SPI_IRQHandler+0x39e>
    return;
34014e98:	bf00      	nop
  }
}
34014e9a:	3728      	adds	r7, #40	@ 0x28
34014e9c:	46bd      	mov	sp, r7
34014e9e:	bd80      	pop	{r7, pc}
34014ea0:	34014f9d 	.word	0x34014f9d

34014ea4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34014ea4:	b480      	push	{r7}
34014ea6:	b083      	sub	sp, #12
34014ea8:	af00      	add	r7, sp, #0
34014eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
34014eac:	bf00      	nop
34014eae:	370c      	adds	r7, #12
34014eb0:	46bd      	mov	sp, r7
34014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34014eb6:	4770      	bx	lr

34014eb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34014eb8:	b480      	push	{r7}
34014eba:	b083      	sub	sp, #12
34014ebc:	af00      	add	r7, sp, #0
34014ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
34014ec0:	bf00      	nop
34014ec2:	370c      	adds	r7, #12
34014ec4:	46bd      	mov	sp, r7
34014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
34014eca:	4770      	bx	lr

34014ecc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34014ecc:	b480      	push	{r7}
34014ece:	b083      	sub	sp, #12
34014ed0:	af00      	add	r7, sp, #0
34014ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
34014ed4:	bf00      	nop
34014ed6:	370c      	adds	r7, #12
34014ed8:	46bd      	mov	sp, r7
34014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
34014ede:	4770      	bx	lr

34014ee0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
34014ee0:	b480      	push	{r7}
34014ee2:	b083      	sub	sp, #12
34014ee4:	af00      	add	r7, sp, #0
34014ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
34014ee8:	bf00      	nop
34014eea:	370c      	adds	r7, #12
34014eec:	46bd      	mov	sp, r7
34014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
34014ef2:	4770      	bx	lr

34014ef4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
34014ef4:	b580      	push	{r7, lr}
34014ef6:	b084      	sub	sp, #16
34014ef8:	af00      	add	r7, sp, #0
34014efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34014efc:	687b      	ldr	r3, [r7, #4]
34014efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34014f00:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
34014f02:	68fb      	ldr	r3, [r7, #12]
34014f04:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34014f08:	b2db      	uxtb	r3, r3
34014f0a:	2b07      	cmp	r3, #7
34014f0c:	d011      	beq.n	34014f32 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
34014f0e:	68fb      	ldr	r3, [r7, #12]
34014f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34014f16:	2b81      	cmp	r3, #129	@ 0x81
34014f18:	d103      	bne.n	34014f22 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
34014f1a:	68f8      	ldr	r0, [r7, #12]
34014f1c:	f002 fba4 	bl	34017668 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
34014f20:	e007      	b.n	34014f32 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
34014f22:	68fb      	ldr	r3, [r7, #12]
34014f24:	681b      	ldr	r3, [r3, #0]
34014f26:	691a      	ldr	r2, [r3, #16]
34014f28:	68fb      	ldr	r3, [r7, #12]
34014f2a:	681b      	ldr	r3, [r3, #0]
34014f2c:	f042 0208 	orr.w	r2, r2, #8
34014f30:	611a      	str	r2, [r3, #16]
}
34014f32:	bf00      	nop
34014f34:	3710      	adds	r7, #16
34014f36:	46bd      	mov	sp, r7
34014f38:	bd80      	pop	{r7, pc}

34014f3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
34014f3a:	b580      	push	{r7, lr}
34014f3c:	b084      	sub	sp, #16
34014f3e:	af00      	add	r7, sp, #0
34014f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
34014f42:	687b      	ldr	r3, [r7, #4]
34014f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34014f46:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
34014f48:	68f8      	ldr	r0, [r7, #12]
34014f4a:	f7ff ffbf 	bl	34014ecc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
34014f4e:	bf00      	nop
34014f50:	3710      	adds	r7, #16
34014f52:	46bd      	mov	sp, r7
34014f54:	bd80      	pop	{r7, pc}

34014f56 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
34014f56:	b580      	push	{r7, lr}
34014f58:	b084      	sub	sp, #16
34014f5a:	af00      	add	r7, sp, #0
34014f5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34014f5e:	687b      	ldr	r3, [r7, #4]
34014f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34014f62:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
34014f64:	6878      	ldr	r0, [r7, #4]
34014f66:	f7ef ffc7 	bl	34004ef8 <HAL_DMA_GetError>
34014f6a:	4603      	mov	r3, r0
34014f6c:	2b00      	cmp	r3, #0
34014f6e:	d011      	beq.n	34014f94 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
34014f70:	68f8      	ldr	r0, [r7, #12]
34014f72:	f000 f82d 	bl	34014fd0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
34014f76:	68fb      	ldr	r3, [r7, #12]
34014f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34014f7c:	f043 0210 	orr.w	r2, r3, #16
34014f80:	68fb      	ldr	r3, [r7, #12]
34014f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
34014f86:	68fb      	ldr	r3, [r7, #12]
34014f88:	2201      	movs	r2, #1
34014f8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
34014f8e:	68f8      	ldr	r0, [r7, #12]
34014f90:	f002 fb86 	bl	340176a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
34014f94:	bf00      	nop
34014f96:	3710      	adds	r7, #16
34014f98:	46bd      	mov	sp, r7
34014f9a:	bd80      	pop	{r7, pc}

34014f9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
34014f9c:	b580      	push	{r7, lr}
34014f9e:	b084      	sub	sp, #16
34014fa0:	af00      	add	r7, sp, #0
34014fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
34014fa4:	687b      	ldr	r3, [r7, #4]
34014fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34014fa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
34014faa:	68fb      	ldr	r3, [r7, #12]
34014fac:	2200      	movs	r2, #0
34014fae:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
34014fb2:	68fb      	ldr	r3, [r7, #12]
34014fb4:	2200      	movs	r2, #0
34014fb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
34014fba:	68fb      	ldr	r3, [r7, #12]
34014fbc:	2201      	movs	r2, #1
34014fbe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
34014fc2:	68f8      	ldr	r0, [r7, #12]
34014fc4:	f002 fb6c 	bl	340176a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
34014fc8:	bf00      	nop
34014fca:	3710      	adds	r7, #16
34014fcc:	46bd      	mov	sp, r7
34014fce:	bd80      	pop	{r7, pc}

34014fd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
34014fd0:	b480      	push	{r7}
34014fd2:	b085      	sub	sp, #20
34014fd4:	af00      	add	r7, sp, #0
34014fd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
34014fd8:	687b      	ldr	r3, [r7, #4]
34014fda:	681b      	ldr	r3, [r3, #0]
34014fdc:	695b      	ldr	r3, [r3, #20]
34014fde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
34014fe0:	687b      	ldr	r3, [r7, #4]
34014fe2:	681b      	ldr	r3, [r3, #0]
34014fe4:	699a      	ldr	r2, [r3, #24]
34014fe6:	687b      	ldr	r3, [r7, #4]
34014fe8:	681b      	ldr	r3, [r3, #0]
34014fea:	f042 0208 	orr.w	r2, r2, #8
34014fee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
34014ff0:	687b      	ldr	r3, [r7, #4]
34014ff2:	681b      	ldr	r3, [r3, #0]
34014ff4:	699a      	ldr	r2, [r3, #24]
34014ff6:	687b      	ldr	r3, [r7, #4]
34014ff8:	681b      	ldr	r3, [r3, #0]
34014ffa:	f042 0210 	orr.w	r2, r2, #16
34014ffe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
34015000:	687b      	ldr	r3, [r7, #4]
34015002:	681b      	ldr	r3, [r3, #0]
34015004:	681a      	ldr	r2, [r3, #0]
34015006:	687b      	ldr	r3, [r7, #4]
34015008:	681b      	ldr	r3, [r3, #0]
3401500a:	f022 0201 	bic.w	r2, r2, #1
3401500e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
34015010:	687b      	ldr	r3, [r7, #4]
34015012:	681b      	ldr	r3, [r3, #0]
34015014:	691b      	ldr	r3, [r3, #16]
34015016:	687a      	ldr	r2, [r7, #4]
34015018:	6812      	ldr	r2, [r2, #0]
3401501a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
3401501e:	f023 0303 	bic.w	r3, r3, #3
34015022:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
34015024:	687b      	ldr	r3, [r7, #4]
34015026:	681b      	ldr	r3, [r3, #0]
34015028:	689a      	ldr	r2, [r3, #8]
3401502a:	687b      	ldr	r3, [r7, #4]
3401502c:	681b      	ldr	r3, [r3, #0]
3401502e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
34015032:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
34015034:	687b      	ldr	r3, [r7, #4]
34015036:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
3401503a:	b2db      	uxtb	r3, r3
3401503c:	2b04      	cmp	r3, #4
3401503e:	d014      	beq.n	3401506a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
34015040:	68fb      	ldr	r3, [r7, #12]
34015042:	f003 0320 	and.w	r3, r3, #32
34015046:	2b00      	cmp	r3, #0
34015048:	d00f      	beq.n	3401506a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
3401504a:	687b      	ldr	r3, [r7, #4]
3401504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015050:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34015054:	687b      	ldr	r3, [r7, #4]
34015056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
3401505a:	687b      	ldr	r3, [r7, #4]
3401505c:	681b      	ldr	r3, [r3, #0]
3401505e:	699a      	ldr	r2, [r3, #24]
34015060:	687b      	ldr	r3, [r7, #4]
34015062:	681b      	ldr	r3, [r3, #0]
34015064:	f042 0220 	orr.w	r2, r2, #32
34015068:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
3401506a:	687b      	ldr	r3, [r7, #4]
3401506c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
34015070:	b2db      	uxtb	r3, r3
34015072:	2b03      	cmp	r3, #3
34015074:	d02e      	beq.n	340150d4 <SPI_CloseTransfer+0x104>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
34015076:	68fb      	ldr	r3, [r7, #12]
34015078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3401507c:	2b00      	cmp	r3, #0
3401507e:	d00f      	beq.n	340150a0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
34015080:	687b      	ldr	r3, [r7, #4]
34015082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34015086:	f043 0204 	orr.w	r2, r3, #4
3401508a:	687b      	ldr	r3, [r7, #4]
3401508c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
34015090:	687b      	ldr	r3, [r7, #4]
34015092:	681b      	ldr	r3, [r3, #0]
34015094:	699a      	ldr	r2, [r3, #24]
34015096:	687b      	ldr	r3, [r7, #4]
34015098:	681b      	ldr	r3, [r3, #0]
3401509a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
3401509e:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
340150a0:	687b      	ldr	r3, [r7, #4]
340150a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340150a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
340150a8:	d114      	bne.n	340150d4 <SPI_CloseTransfer+0x104>
    {
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
340150aa:	68fb      	ldr	r3, [r7, #12]
340150ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
340150b0:	2b00      	cmp	r3, #0
340150b2:	d00f      	beq.n	340150d4 <SPI_CloseTransfer+0x104>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
340150b4:	687b      	ldr	r3, [r7, #4]
340150b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340150ba:	f043 0202 	orr.w	r2, r3, #2
340150be:	687b      	ldr	r3, [r7, #4]
340150c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
340150c4:	687b      	ldr	r3, [r7, #4]
340150c6:	681b      	ldr	r3, [r3, #0]
340150c8:	699a      	ldr	r2, [r3, #24]
340150ca:	687b      	ldr	r3, [r7, #4]
340150cc:	681b      	ldr	r3, [r3, #0]
340150ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
340150d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
340150d4:	68fb      	ldr	r3, [r7, #12]
340150d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340150da:	2b00      	cmp	r3, #0
340150dc:	d00f      	beq.n	340150fe <SPI_CloseTransfer+0x12e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
340150de:	687b      	ldr	r3, [r7, #4]
340150e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
340150e4:	f043 0201 	orr.w	r2, r3, #1
340150e8:	687b      	ldr	r3, [r7, #4]
340150ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
340150ee:	687b      	ldr	r3, [r7, #4]
340150f0:	681b      	ldr	r3, [r3, #0]
340150f2:	699a      	ldr	r2, [r3, #24]
340150f4:	687b      	ldr	r3, [r7, #4]
340150f6:	681b      	ldr	r3, [r3, #0]
340150f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
340150fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
340150fe:	68fb      	ldr	r3, [r7, #12]
34015100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34015104:	2b00      	cmp	r3, #0
34015106:	d00f      	beq.n	34015128 <SPI_CloseTransfer+0x158>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
34015108:	687b      	ldr	r3, [r7, #4]
3401510a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3401510e:	f043 0208 	orr.w	r2, r3, #8
34015112:	687b      	ldr	r3, [r7, #4]
34015114:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
34015118:	687b      	ldr	r3, [r7, #4]
3401511a:	681b      	ldr	r3, [r3, #0]
3401511c:	699a      	ldr	r2, [r3, #24]
3401511e:	687b      	ldr	r3, [r7, #4]
34015120:	681b      	ldr	r3, [r3, #0]
34015122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34015126:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
34015128:	687b      	ldr	r3, [r7, #4]
3401512a:	2200      	movs	r2, #0
3401512c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
34015130:	687b      	ldr	r3, [r7, #4]
34015132:	2200      	movs	r2, #0
34015134:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
34015138:	bf00      	nop
3401513a:	3714      	adds	r7, #20
3401513c:	46bd      	mov	sp, r7
3401513e:	f85d 7b04 	ldr.w	r7, [sp], #4
34015142:	4770      	bx	lr

34015144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34015144:	b580      	push	{r7, lr}
34015146:	b082      	sub	sp, #8
34015148:	af00      	add	r7, sp, #0
3401514a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3401514c:	687b      	ldr	r3, [r7, #4]
3401514e:	2b00      	cmp	r3, #0
34015150:	d101      	bne.n	34015156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
34015152:	2301      	movs	r3, #1
34015154:	e16e      	b.n	34015434 <HAL_UART_Init+0x2f0>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34015156:	687b      	ldr	r3, [r7, #4]
34015158:	699b      	ldr	r3, [r3, #24]
3401515a:	2b00      	cmp	r3, #0
3401515c:	f000 8088 	beq.w	34015270 <HAL_UART_Init+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
34015160:	687b      	ldr	r3, [r7, #4]
34015162:	681b      	ldr	r3, [r3, #0]
34015164:	4a8f      	ldr	r2, [pc, #572]	@ (340153a4 <HAL_UART_Init+0x260>)
34015166:	4293      	cmp	r3, r2
34015168:	f000 80f5 	beq.w	34015356 <HAL_UART_Init+0x212>
3401516c:	687b      	ldr	r3, [r7, #4]
3401516e:	681b      	ldr	r3, [r3, #0]
34015170:	4a8d      	ldr	r2, [pc, #564]	@ (340153a8 <HAL_UART_Init+0x264>)
34015172:	4293      	cmp	r3, r2
34015174:	f000 80ef 	beq.w	34015356 <HAL_UART_Init+0x212>
34015178:	687b      	ldr	r3, [r7, #4]
3401517a:	681b      	ldr	r3, [r3, #0]
3401517c:	4a8b      	ldr	r2, [pc, #556]	@ (340153ac <HAL_UART_Init+0x268>)
3401517e:	4293      	cmp	r3, r2
34015180:	f000 80e9 	beq.w	34015356 <HAL_UART_Init+0x212>
34015184:	687b      	ldr	r3, [r7, #4]
34015186:	681b      	ldr	r3, [r3, #0]
34015188:	4a89      	ldr	r2, [pc, #548]	@ (340153b0 <HAL_UART_Init+0x26c>)
3401518a:	4293      	cmp	r3, r2
3401518c:	f000 80e3 	beq.w	34015356 <HAL_UART_Init+0x212>
34015190:	687b      	ldr	r3, [r7, #4]
34015192:	681b      	ldr	r3, [r3, #0]
34015194:	4a87      	ldr	r2, [pc, #540]	@ (340153b4 <HAL_UART_Init+0x270>)
34015196:	4293      	cmp	r3, r2
34015198:	f000 80dd 	beq.w	34015356 <HAL_UART_Init+0x212>
3401519c:	687b      	ldr	r3, [r7, #4]
3401519e:	681b      	ldr	r3, [r3, #0]
340151a0:	4a85      	ldr	r2, [pc, #532]	@ (340153b8 <HAL_UART_Init+0x274>)
340151a2:	4293      	cmp	r3, r2
340151a4:	f000 80d7 	beq.w	34015356 <HAL_UART_Init+0x212>
340151a8:	687b      	ldr	r3, [r7, #4]
340151aa:	681b      	ldr	r3, [r3, #0]
340151ac:	4a83      	ldr	r2, [pc, #524]	@ (340153bc <HAL_UART_Init+0x278>)
340151ae:	4293      	cmp	r3, r2
340151b0:	f000 80d1 	beq.w	34015356 <HAL_UART_Init+0x212>
340151b4:	687b      	ldr	r3, [r7, #4]
340151b6:	681b      	ldr	r3, [r3, #0]
340151b8:	4a81      	ldr	r2, [pc, #516]	@ (340153c0 <HAL_UART_Init+0x27c>)
340151ba:	4293      	cmp	r3, r2
340151bc:	f000 80cb 	beq.w	34015356 <HAL_UART_Init+0x212>
340151c0:	687b      	ldr	r3, [r7, #4]
340151c2:	681b      	ldr	r3, [r3, #0]
340151c4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340151c8:	f000 80c5 	beq.w	34015356 <HAL_UART_Init+0x212>
340151cc:	687b      	ldr	r3, [r7, #4]
340151ce:	681b      	ldr	r3, [r3, #0]
340151d0:	4a7c      	ldr	r2, [pc, #496]	@ (340153c4 <HAL_UART_Init+0x280>)
340151d2:	4293      	cmp	r3, r2
340151d4:	f000 80bf 	beq.w	34015356 <HAL_UART_Init+0x212>
340151d8:	687b      	ldr	r3, [r7, #4]
340151da:	681b      	ldr	r3, [r3, #0]
340151dc:	4a7a      	ldr	r2, [pc, #488]	@ (340153c8 <HAL_UART_Init+0x284>)
340151de:	4293      	cmp	r3, r2
340151e0:	f000 80b9 	beq.w	34015356 <HAL_UART_Init+0x212>
340151e4:	687b      	ldr	r3, [r7, #4]
340151e6:	681b      	ldr	r3, [r3, #0]
340151e8:	4a78      	ldr	r2, [pc, #480]	@ (340153cc <HAL_UART_Init+0x288>)
340151ea:	4293      	cmp	r3, r2
340151ec:	f000 80b3 	beq.w	34015356 <HAL_UART_Init+0x212>
340151f0:	687b      	ldr	r3, [r7, #4]
340151f2:	681b      	ldr	r3, [r3, #0]
340151f4:	4a76      	ldr	r2, [pc, #472]	@ (340153d0 <HAL_UART_Init+0x28c>)
340151f6:	4293      	cmp	r3, r2
340151f8:	f000 80ad 	beq.w	34015356 <HAL_UART_Init+0x212>
340151fc:	687b      	ldr	r3, [r7, #4]
340151fe:	681b      	ldr	r3, [r3, #0]
34015200:	4a74      	ldr	r2, [pc, #464]	@ (340153d4 <HAL_UART_Init+0x290>)
34015202:	4293      	cmp	r3, r2
34015204:	f000 80a7 	beq.w	34015356 <HAL_UART_Init+0x212>
34015208:	687b      	ldr	r3, [r7, #4]
3401520a:	681b      	ldr	r3, [r3, #0]
3401520c:	4a72      	ldr	r2, [pc, #456]	@ (340153d8 <HAL_UART_Init+0x294>)
3401520e:	4293      	cmp	r3, r2
34015210:	f000 80a1 	beq.w	34015356 <HAL_UART_Init+0x212>
34015214:	687b      	ldr	r3, [r7, #4]
34015216:	681b      	ldr	r3, [r3, #0]
34015218:	4a70      	ldr	r2, [pc, #448]	@ (340153dc <HAL_UART_Init+0x298>)
3401521a:	4293      	cmp	r3, r2
3401521c:	f000 809b 	beq.w	34015356 <HAL_UART_Init+0x212>
34015220:	687b      	ldr	r3, [r7, #4]
34015222:	681b      	ldr	r3, [r3, #0]
34015224:	4a6e      	ldr	r2, [pc, #440]	@ (340153e0 <HAL_UART_Init+0x29c>)
34015226:	4293      	cmp	r3, r2
34015228:	f000 8095 	beq.w	34015356 <HAL_UART_Init+0x212>
3401522c:	687b      	ldr	r3, [r7, #4]
3401522e:	681b      	ldr	r3, [r3, #0]
34015230:	4a6c      	ldr	r2, [pc, #432]	@ (340153e4 <HAL_UART_Init+0x2a0>)
34015232:	4293      	cmp	r3, r2
34015234:	f000 808f 	beq.w	34015356 <HAL_UART_Init+0x212>
34015238:	687b      	ldr	r3, [r7, #4]
3401523a:	681b      	ldr	r3, [r3, #0]
3401523c:	4a6a      	ldr	r2, [pc, #424]	@ (340153e8 <HAL_UART_Init+0x2a4>)
3401523e:	4293      	cmp	r3, r2
34015240:	f000 8089 	beq.w	34015356 <HAL_UART_Init+0x212>
34015244:	687b      	ldr	r3, [r7, #4]
34015246:	681b      	ldr	r3, [r3, #0]
34015248:	4a68      	ldr	r2, [pc, #416]	@ (340153ec <HAL_UART_Init+0x2a8>)
3401524a:	4293      	cmp	r3, r2
3401524c:	f000 8083 	beq.w	34015356 <HAL_UART_Init+0x212>
34015250:	687b      	ldr	r3, [r7, #4]
34015252:	681b      	ldr	r3, [r3, #0]
34015254:	4a66      	ldr	r2, [pc, #408]	@ (340153f0 <HAL_UART_Init+0x2ac>)
34015256:	4293      	cmp	r3, r2
34015258:	d07d      	beq.n	34015356 <HAL_UART_Init+0x212>
3401525a:	687b      	ldr	r3, [r7, #4]
3401525c:	681b      	ldr	r3, [r3, #0]
3401525e:	4a65      	ldr	r2, [pc, #404]	@ (340153f4 <HAL_UART_Init+0x2b0>)
34015260:	4293      	cmp	r3, r2
34015262:	d078      	beq.n	34015356 <HAL_UART_Init+0x212>
34015264:	f240 113f 	movw	r1, #319	@ 0x13f
34015268:	4863      	ldr	r0, [pc, #396]	@ (340153f8 <HAL_UART_Init+0x2b4>)
3401526a:	f7ec f9df 	bl	3400162c <assert_failed>
3401526e:	e072      	b.n	34015356 <HAL_UART_Init+0x212>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
34015270:	687b      	ldr	r3, [r7, #4]
34015272:	681b      	ldr	r3, [r3, #0]
34015274:	4a4b      	ldr	r2, [pc, #300]	@ (340153a4 <HAL_UART_Init+0x260>)
34015276:	4293      	cmp	r3, r2
34015278:	d06d      	beq.n	34015356 <HAL_UART_Init+0x212>
3401527a:	687b      	ldr	r3, [r7, #4]
3401527c:	681b      	ldr	r3, [r3, #0]
3401527e:	4a4a      	ldr	r2, [pc, #296]	@ (340153a8 <HAL_UART_Init+0x264>)
34015280:	4293      	cmp	r3, r2
34015282:	d068      	beq.n	34015356 <HAL_UART_Init+0x212>
34015284:	687b      	ldr	r3, [r7, #4]
34015286:	681b      	ldr	r3, [r3, #0]
34015288:	4a48      	ldr	r2, [pc, #288]	@ (340153ac <HAL_UART_Init+0x268>)
3401528a:	4293      	cmp	r3, r2
3401528c:	d063      	beq.n	34015356 <HAL_UART_Init+0x212>
3401528e:	687b      	ldr	r3, [r7, #4]
34015290:	681b      	ldr	r3, [r3, #0]
34015292:	4a47      	ldr	r2, [pc, #284]	@ (340153b0 <HAL_UART_Init+0x26c>)
34015294:	4293      	cmp	r3, r2
34015296:	d05e      	beq.n	34015356 <HAL_UART_Init+0x212>
34015298:	687b      	ldr	r3, [r7, #4]
3401529a:	681b      	ldr	r3, [r3, #0]
3401529c:	4a45      	ldr	r2, [pc, #276]	@ (340153b4 <HAL_UART_Init+0x270>)
3401529e:	4293      	cmp	r3, r2
340152a0:	d059      	beq.n	34015356 <HAL_UART_Init+0x212>
340152a2:	687b      	ldr	r3, [r7, #4]
340152a4:	681b      	ldr	r3, [r3, #0]
340152a6:	4a44      	ldr	r2, [pc, #272]	@ (340153b8 <HAL_UART_Init+0x274>)
340152a8:	4293      	cmp	r3, r2
340152aa:	d054      	beq.n	34015356 <HAL_UART_Init+0x212>
340152ac:	687b      	ldr	r3, [r7, #4]
340152ae:	681b      	ldr	r3, [r3, #0]
340152b0:	4a42      	ldr	r2, [pc, #264]	@ (340153bc <HAL_UART_Init+0x278>)
340152b2:	4293      	cmp	r3, r2
340152b4:	d04f      	beq.n	34015356 <HAL_UART_Init+0x212>
340152b6:	687b      	ldr	r3, [r7, #4]
340152b8:	681b      	ldr	r3, [r3, #0]
340152ba:	4a41      	ldr	r2, [pc, #260]	@ (340153c0 <HAL_UART_Init+0x27c>)
340152bc:	4293      	cmp	r3, r2
340152be:	d04a      	beq.n	34015356 <HAL_UART_Init+0x212>
340152c0:	687b      	ldr	r3, [r7, #4]
340152c2:	681b      	ldr	r3, [r3, #0]
340152c4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
340152c8:	d045      	beq.n	34015356 <HAL_UART_Init+0x212>
340152ca:	687b      	ldr	r3, [r7, #4]
340152cc:	681b      	ldr	r3, [r3, #0]
340152ce:	4a3d      	ldr	r2, [pc, #244]	@ (340153c4 <HAL_UART_Init+0x280>)
340152d0:	4293      	cmp	r3, r2
340152d2:	d040      	beq.n	34015356 <HAL_UART_Init+0x212>
340152d4:	687b      	ldr	r3, [r7, #4]
340152d6:	681b      	ldr	r3, [r3, #0]
340152d8:	4a3b      	ldr	r2, [pc, #236]	@ (340153c8 <HAL_UART_Init+0x284>)
340152da:	4293      	cmp	r3, r2
340152dc:	d03b      	beq.n	34015356 <HAL_UART_Init+0x212>
340152de:	687b      	ldr	r3, [r7, #4]
340152e0:	681b      	ldr	r3, [r3, #0]
340152e2:	4a3a      	ldr	r2, [pc, #232]	@ (340153cc <HAL_UART_Init+0x288>)
340152e4:	4293      	cmp	r3, r2
340152e6:	d036      	beq.n	34015356 <HAL_UART_Init+0x212>
340152e8:	687b      	ldr	r3, [r7, #4]
340152ea:	681b      	ldr	r3, [r3, #0]
340152ec:	4a38      	ldr	r2, [pc, #224]	@ (340153d0 <HAL_UART_Init+0x28c>)
340152ee:	4293      	cmp	r3, r2
340152f0:	d031      	beq.n	34015356 <HAL_UART_Init+0x212>
340152f2:	687b      	ldr	r3, [r7, #4]
340152f4:	681b      	ldr	r3, [r3, #0]
340152f6:	4a37      	ldr	r2, [pc, #220]	@ (340153d4 <HAL_UART_Init+0x290>)
340152f8:	4293      	cmp	r3, r2
340152fa:	d02c      	beq.n	34015356 <HAL_UART_Init+0x212>
340152fc:	687b      	ldr	r3, [r7, #4]
340152fe:	681b      	ldr	r3, [r3, #0]
34015300:	4a35      	ldr	r2, [pc, #212]	@ (340153d8 <HAL_UART_Init+0x294>)
34015302:	4293      	cmp	r3, r2
34015304:	d027      	beq.n	34015356 <HAL_UART_Init+0x212>
34015306:	687b      	ldr	r3, [r7, #4]
34015308:	681b      	ldr	r3, [r3, #0]
3401530a:	4a34      	ldr	r2, [pc, #208]	@ (340153dc <HAL_UART_Init+0x298>)
3401530c:	4293      	cmp	r3, r2
3401530e:	d022      	beq.n	34015356 <HAL_UART_Init+0x212>
34015310:	687b      	ldr	r3, [r7, #4]
34015312:	681b      	ldr	r3, [r3, #0]
34015314:	4a32      	ldr	r2, [pc, #200]	@ (340153e0 <HAL_UART_Init+0x29c>)
34015316:	4293      	cmp	r3, r2
34015318:	d01d      	beq.n	34015356 <HAL_UART_Init+0x212>
3401531a:	687b      	ldr	r3, [r7, #4]
3401531c:	681b      	ldr	r3, [r3, #0]
3401531e:	4a31      	ldr	r2, [pc, #196]	@ (340153e4 <HAL_UART_Init+0x2a0>)
34015320:	4293      	cmp	r3, r2
34015322:	d018      	beq.n	34015356 <HAL_UART_Init+0x212>
34015324:	687b      	ldr	r3, [r7, #4]
34015326:	681b      	ldr	r3, [r3, #0]
34015328:	4a2f      	ldr	r2, [pc, #188]	@ (340153e8 <HAL_UART_Init+0x2a4>)
3401532a:	4293      	cmp	r3, r2
3401532c:	d013      	beq.n	34015356 <HAL_UART_Init+0x212>
3401532e:	687b      	ldr	r3, [r7, #4]
34015330:	681b      	ldr	r3, [r3, #0]
34015332:	4a2e      	ldr	r2, [pc, #184]	@ (340153ec <HAL_UART_Init+0x2a8>)
34015334:	4293      	cmp	r3, r2
34015336:	d00e      	beq.n	34015356 <HAL_UART_Init+0x212>
34015338:	687b      	ldr	r3, [r7, #4]
3401533a:	681b      	ldr	r3, [r3, #0]
3401533c:	4a2c      	ldr	r2, [pc, #176]	@ (340153f0 <HAL_UART_Init+0x2ac>)
3401533e:	4293      	cmp	r3, r2
34015340:	d009      	beq.n	34015356 <HAL_UART_Init+0x212>
34015342:	687b      	ldr	r3, [r7, #4]
34015344:	681b      	ldr	r3, [r3, #0]
34015346:	4a2b      	ldr	r2, [pc, #172]	@ (340153f4 <HAL_UART_Init+0x2b0>)
34015348:	4293      	cmp	r3, r2
3401534a:	d004      	beq.n	34015356 <HAL_UART_Init+0x212>
3401534c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
34015350:	4829      	ldr	r0, [pc, #164]	@ (340153f8 <HAL_UART_Init+0x2b4>)
34015352:	f7ec f96b 	bl	3400162c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34015356:	687b      	ldr	r3, [r7, #4]
34015358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3401535c:	2b00      	cmp	r3, #0
3401535e:	d106      	bne.n	3401536e <HAL_UART_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
34015360:	687b      	ldr	r3, [r7, #4]
34015362:	2200      	movs	r2, #0
34015364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34015368:	6878      	ldr	r0, [r7, #4]
3401536a:	f000 f867 	bl	3401543c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3401536e:	687b      	ldr	r3, [r7, #4]
34015370:	2224      	movs	r2, #36	@ 0x24
34015372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34015376:	687b      	ldr	r3, [r7, #4]
34015378:	681b      	ldr	r3, [r3, #0]
3401537a:	681a      	ldr	r2, [r3, #0]
3401537c:	687b      	ldr	r3, [r7, #4]
3401537e:	681b      	ldr	r3, [r3, #0]
34015380:	f022 0201 	bic.w	r2, r2, #1
34015384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34015386:	687b      	ldr	r3, [r7, #4]
34015388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3401538a:	2b00      	cmp	r3, #0
3401538c:	d002      	beq.n	34015394 <HAL_UART_Init+0x250>
  {
    UART_AdvFeatureConfig(huart);
3401538e:	6878      	ldr	r0, [r7, #4]
34015390:	f000 fbb8 	bl	34015b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34015394:	6878      	ldr	r0, [r7, #4]
34015396:	f000 f8e9 	bl	3401556c <UART_SetConfig>
3401539a:	4603      	mov	r3, r0
3401539c:	2b01      	cmp	r3, #1
3401539e:	d12d      	bne.n	340153fc <HAL_UART_Init+0x2b8>
  {
    return HAL_ERROR;
340153a0:	2301      	movs	r3, #1
340153a2:	e047      	b.n	34015434 <HAL_UART_Init+0x2f0>
340153a4:	52001000 	.word	0x52001000
340153a8:	42001000 	.word	0x42001000
340153ac:	50004400 	.word	0x50004400
340153b0:	40004400 	.word	0x40004400
340153b4:	50004800 	.word	0x50004800
340153b8:	40004800 	.word	0x40004800
340153bc:	50004c00 	.word	0x50004c00
340153c0:	40004c00 	.word	0x40004c00
340153c4:	40005000 	.word	0x40005000
340153c8:	52001400 	.word	0x52001400
340153cc:	42001400 	.word	0x42001400
340153d0:	50007800 	.word	0x50007800
340153d4:	40007800 	.word	0x40007800
340153d8:	50007c00 	.word	0x50007c00
340153dc:	40007c00 	.word	0x40007c00
340153e0:	52001800 	.word	0x52001800
340153e4:	42001800 	.word	0x42001800
340153e8:	52001c00 	.word	0x52001c00
340153ec:	42001c00 	.word	0x42001c00
340153f0:	56000c00 	.word	0x56000c00
340153f4:	46000c00 	.word	0x46000c00
340153f8:	3401b014 	.word	0x3401b014
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
340153fc:	687b      	ldr	r3, [r7, #4]
340153fe:	681b      	ldr	r3, [r3, #0]
34015400:	685a      	ldr	r2, [r3, #4]
34015402:	687b      	ldr	r3, [r7, #4]
34015404:	681b      	ldr	r3, [r3, #0]
34015406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3401540a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3401540c:	687b      	ldr	r3, [r7, #4]
3401540e:	681b      	ldr	r3, [r3, #0]
34015410:	689a      	ldr	r2, [r3, #8]
34015412:	687b      	ldr	r3, [r7, #4]
34015414:	681b      	ldr	r3, [r3, #0]
34015416:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3401541a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3401541c:	687b      	ldr	r3, [r7, #4]
3401541e:	681b      	ldr	r3, [r3, #0]
34015420:	681a      	ldr	r2, [r3, #0]
34015422:	687b      	ldr	r3, [r7, #4]
34015424:	681b      	ldr	r3, [r3, #0]
34015426:	f042 0201 	orr.w	r2, r2, #1
3401542a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3401542c:	6878      	ldr	r0, [r7, #4]
3401542e:	f000 fd33 	bl	34015e98 <UART_CheckIdleState>
34015432:	4603      	mov	r3, r0
}
34015434:	4618      	mov	r0, r3
34015436:	3708      	adds	r7, #8
34015438:	46bd      	mov	sp, r7
3401543a:	bd80      	pop	{r7, pc}

3401543c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
3401543c:	b480      	push	{r7}
3401543e:	b083      	sub	sp, #12
34015440:	af00      	add	r7, sp, #0
34015442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
34015444:	bf00      	nop
34015446:	370c      	adds	r7, #12
34015448:	46bd      	mov	sp, r7
3401544a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401544e:	4770      	bx	lr

34015450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34015450:	b580      	push	{r7, lr}
34015452:	b08a      	sub	sp, #40	@ 0x28
34015454:	af02      	add	r7, sp, #8
34015456:	60f8      	str	r0, [r7, #12]
34015458:	60b9      	str	r1, [r7, #8]
3401545a:	603b      	str	r3, [r7, #0]
3401545c:	4613      	mov	r3, r2
3401545e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
34015460:	68fb      	ldr	r3, [r7, #12]
34015462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34015466:	2b20      	cmp	r3, #32
34015468:	d17b      	bne.n	34015562 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3401546a:	68bb      	ldr	r3, [r7, #8]
3401546c:	2b00      	cmp	r3, #0
3401546e:	d002      	beq.n	34015476 <HAL_UART_Transmit+0x26>
34015470:	88fb      	ldrh	r3, [r7, #6]
34015472:	2b00      	cmp	r3, #0
34015474:	d101      	bne.n	3401547a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34015476:	2301      	movs	r3, #1
34015478:	e074      	b.n	34015564 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3401547a:	68fb      	ldr	r3, [r7, #12]
3401547c:	2200      	movs	r2, #0
3401547e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
34015482:	68fb      	ldr	r3, [r7, #12]
34015484:	2221      	movs	r2, #33	@ 0x21
34015486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3401548a:	f7ee f8af 	bl	340035ec <HAL_GetTick>
3401548e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
34015490:	68fb      	ldr	r3, [r7, #12]
34015492:	88fa      	ldrh	r2, [r7, #6]
34015494:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34015498:	68fb      	ldr	r3, [r7, #12]
3401549a:	88fa      	ldrh	r2, [r7, #6]
3401549c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
340154a0:	68fb      	ldr	r3, [r7, #12]
340154a2:	689b      	ldr	r3, [r3, #8]
340154a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340154a8:	d108      	bne.n	340154bc <HAL_UART_Transmit+0x6c>
340154aa:	68fb      	ldr	r3, [r7, #12]
340154ac:	691b      	ldr	r3, [r3, #16]
340154ae:	2b00      	cmp	r3, #0
340154b0:	d104      	bne.n	340154bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
340154b2:	2300      	movs	r3, #0
340154b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
340154b6:	68bb      	ldr	r3, [r7, #8]
340154b8:	61bb      	str	r3, [r7, #24]
340154ba:	e003      	b.n	340154c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
340154bc:	68bb      	ldr	r3, [r7, #8]
340154be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
340154c0:	2300      	movs	r3, #0
340154c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
340154c4:	e030      	b.n	34015528 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
340154c6:	683b      	ldr	r3, [r7, #0]
340154c8:	9300      	str	r3, [sp, #0]
340154ca:	697b      	ldr	r3, [r7, #20]
340154cc:	2200      	movs	r2, #0
340154ce:	2180      	movs	r1, #128	@ 0x80
340154d0:	68f8      	ldr	r0, [r7, #12]
340154d2:	f000 fd8b 	bl	34015fec <UART_WaitOnFlagUntilTimeout>
340154d6:	4603      	mov	r3, r0
340154d8:	2b00      	cmp	r3, #0
340154da:	d005      	beq.n	340154e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
340154dc:	68fb      	ldr	r3, [r7, #12]
340154de:	2220      	movs	r2, #32
340154e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
340154e4:	2303      	movs	r3, #3
340154e6:	e03d      	b.n	34015564 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
340154e8:	69fb      	ldr	r3, [r7, #28]
340154ea:	2b00      	cmp	r3, #0
340154ec:	d10b      	bne.n	34015506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
340154ee:	69bb      	ldr	r3, [r7, #24]
340154f0:	881b      	ldrh	r3, [r3, #0]
340154f2:	461a      	mov	r2, r3
340154f4:	68fb      	ldr	r3, [r7, #12]
340154f6:	681b      	ldr	r3, [r3, #0]
340154f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
340154fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
340154fe:	69bb      	ldr	r3, [r7, #24]
34015500:	3302      	adds	r3, #2
34015502:	61bb      	str	r3, [r7, #24]
34015504:	e007      	b.n	34015516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
34015506:	69fb      	ldr	r3, [r7, #28]
34015508:	781a      	ldrb	r2, [r3, #0]
3401550a:	68fb      	ldr	r3, [r7, #12]
3401550c:	681b      	ldr	r3, [r3, #0]
3401550e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
34015510:	69fb      	ldr	r3, [r7, #28]
34015512:	3301      	adds	r3, #1
34015514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
34015516:	68fb      	ldr	r3, [r7, #12]
34015518:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3401551c:	b29b      	uxth	r3, r3
3401551e:	3b01      	subs	r3, #1
34015520:	b29a      	uxth	r2, r3
34015522:	68fb      	ldr	r3, [r7, #12]
34015524:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
34015528:	68fb      	ldr	r3, [r7, #12]
3401552a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3401552e:	b29b      	uxth	r3, r3
34015530:	2b00      	cmp	r3, #0
34015532:	d1c8      	bne.n	340154c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
34015534:	683b      	ldr	r3, [r7, #0]
34015536:	9300      	str	r3, [sp, #0]
34015538:	697b      	ldr	r3, [r7, #20]
3401553a:	2200      	movs	r2, #0
3401553c:	2140      	movs	r1, #64	@ 0x40
3401553e:	68f8      	ldr	r0, [r7, #12]
34015540:	f000 fd54 	bl	34015fec <UART_WaitOnFlagUntilTimeout>
34015544:	4603      	mov	r3, r0
34015546:	2b00      	cmp	r3, #0
34015548:	d005      	beq.n	34015556 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3401554a:	68fb      	ldr	r3, [r7, #12]
3401554c:	2220      	movs	r2, #32
3401554e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
34015552:	2303      	movs	r3, #3
34015554:	e006      	b.n	34015564 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
34015556:	68fb      	ldr	r3, [r7, #12]
34015558:	2220      	movs	r2, #32
3401555a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3401555e:	2300      	movs	r3, #0
34015560:	e000      	b.n	34015564 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
34015562:	2302      	movs	r3, #2
  }
}
34015564:	4618      	mov	r0, r3
34015566:	3720      	adds	r7, #32
34015568:	46bd      	mov	sp, r7
3401556a:	bd80      	pop	{r7, pc}

3401556c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3401556c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34015570:	b090      	sub	sp, #64	@ 0x40
34015572:	af00      	add	r7, sp, #0
34015574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
34015576:	2300      	movs	r3, #0
34015578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401557c:	697b      	ldr	r3, [r7, #20]
3401557e:	685b      	ldr	r3, [r3, #4]
34015580:	4a19      	ldr	r2, [pc, #100]	@ (340155e8 <UART_SetConfig+0x7c>)
34015582:	4293      	cmp	r3, r2
34015584:	d904      	bls.n	34015590 <UART_SetConfig+0x24>
34015586:	f640 414f 	movw	r1, #3151	@ 0xc4f
3401558a:	4818      	ldr	r0, [pc, #96]	@ (340155ec <UART_SetConfig+0x80>)
3401558c:	f7ec f84e 	bl	3400162c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34015590:	697b      	ldr	r3, [r7, #20]
34015592:	689b      	ldr	r3, [r3, #8]
34015594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015598:	d00d      	beq.n	340155b6 <UART_SetConfig+0x4a>
3401559a:	697b      	ldr	r3, [r7, #20]
3401559c:	689b      	ldr	r3, [r3, #8]
3401559e:	2b00      	cmp	r3, #0
340155a0:	d009      	beq.n	340155b6 <UART_SetConfig+0x4a>
340155a2:	697b      	ldr	r3, [r7, #20]
340155a4:	689b      	ldr	r3, [r3, #8]
340155a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340155aa:	d004      	beq.n	340155b6 <UART_SetConfig+0x4a>
340155ac:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
340155b0:	480e      	ldr	r0, [pc, #56]	@ (340155ec <UART_SetConfig+0x80>)
340155b2:	f7ec f83b 	bl	3400162c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
340155b6:	697b      	ldr	r3, [r7, #20]
340155b8:	681b      	ldr	r3, [r3, #0]
340155ba:	4a0d      	ldr	r2, [pc, #52]	@ (340155f0 <UART_SetConfig+0x84>)
340155bc:	4293      	cmp	r3, r2
340155be:	d004      	beq.n	340155ca <UART_SetConfig+0x5e>
340155c0:	697b      	ldr	r3, [r7, #20]
340155c2:	681b      	ldr	r3, [r3, #0]
340155c4:	4a0b      	ldr	r2, [pc, #44]	@ (340155f4 <UART_SetConfig+0x88>)
340155c6:	4293      	cmp	r3, r2
340155c8:	d116      	bne.n	340155f8 <UART_SetConfig+0x8c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
340155ca:	697b      	ldr	r3, [r7, #20]
340155cc:	68db      	ldr	r3, [r3, #12]
340155ce:	2b00      	cmp	r3, #0
340155d0:	d038      	beq.n	34015644 <UART_SetConfig+0xd8>
340155d2:	697b      	ldr	r3, [r7, #20]
340155d4:	68db      	ldr	r3, [r3, #12]
340155d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340155da:	d033      	beq.n	34015644 <UART_SetConfig+0xd8>
340155dc:	f640 4153 	movw	r1, #3155	@ 0xc53
340155e0:	4802      	ldr	r0, [pc, #8]	@ (340155ec <UART_SetConfig+0x80>)
340155e2:	f7ec f823 	bl	3400162c <assert_failed>
340155e6:	e02d      	b.n	34015644 <UART_SetConfig+0xd8>
340155e8:	00bebc1f 	.word	0x00bebc1f
340155ec:	3401b014 	.word	0x3401b014
340155f0:	56000c00 	.word	0x56000c00
340155f4:	46000c00 	.word	0x46000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
340155f8:	697b      	ldr	r3, [r7, #20]
340155fa:	68db      	ldr	r3, [r3, #12]
340155fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015600:	d012      	beq.n	34015628 <UART_SetConfig+0xbc>
34015602:	697b      	ldr	r3, [r7, #20]
34015604:	68db      	ldr	r3, [r3, #12]
34015606:	2b00      	cmp	r3, #0
34015608:	d00e      	beq.n	34015628 <UART_SetConfig+0xbc>
3401560a:	697b      	ldr	r3, [r7, #20]
3401560c:	68db      	ldr	r3, [r3, #12]
3401560e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34015612:	d009      	beq.n	34015628 <UART_SetConfig+0xbc>
34015614:	697b      	ldr	r3, [r7, #20]
34015616:	68db      	ldr	r3, [r3, #12]
34015618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401561c:	d004      	beq.n	34015628 <UART_SetConfig+0xbc>
3401561e:	f640 4157 	movw	r1, #3159	@ 0xc57
34015622:	4896      	ldr	r0, [pc, #600]	@ (3401587c <UART_SetConfig+0x310>)
34015624:	f7ec f802 	bl	3400162c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34015628:	697b      	ldr	r3, [r7, #20]
3401562a:	6a1b      	ldr	r3, [r3, #32]
3401562c:	2b00      	cmp	r3, #0
3401562e:	d009      	beq.n	34015644 <UART_SetConfig+0xd8>
34015630:	697b      	ldr	r3, [r7, #20]
34015632:	6a1b      	ldr	r3, [r3, #32]
34015634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34015638:	d004      	beq.n	34015644 <UART_SetConfig+0xd8>
3401563a:	f640 4158 	movw	r1, #3160	@ 0xc58
3401563e:	488f      	ldr	r0, [pc, #572]	@ (3401587c <UART_SetConfig+0x310>)
34015640:	f7eb fff4 	bl	3400162c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
34015644:	697b      	ldr	r3, [r7, #20]
34015646:	691b      	ldr	r3, [r3, #16]
34015648:	2b00      	cmp	r3, #0
3401564a:	d00e      	beq.n	3401566a <UART_SetConfig+0xfe>
3401564c:	697b      	ldr	r3, [r7, #20]
3401564e:	691b      	ldr	r3, [r3, #16]
34015650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34015654:	d009      	beq.n	3401566a <UART_SetConfig+0xfe>
34015656:	697b      	ldr	r3, [r7, #20]
34015658:	691b      	ldr	r3, [r3, #16]
3401565a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401565e:	d004      	beq.n	3401566a <UART_SetConfig+0xfe>
34015660:	f640 415b 	movw	r1, #3163	@ 0xc5b
34015664:	4885      	ldr	r0, [pc, #532]	@ (3401587c <UART_SetConfig+0x310>)
34015666:	f7eb ffe1 	bl	3400162c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3401566a:	697b      	ldr	r3, [r7, #20]
3401566c:	695b      	ldr	r3, [r3, #20]
3401566e:	f023 030c 	bic.w	r3, r3, #12
34015672:	2b00      	cmp	r3, #0
34015674:	d103      	bne.n	3401567e <UART_SetConfig+0x112>
34015676:	697b      	ldr	r3, [r7, #20]
34015678:	695b      	ldr	r3, [r3, #20]
3401567a:	2b00      	cmp	r3, #0
3401567c:	d104      	bne.n	34015688 <UART_SetConfig+0x11c>
3401567e:	f640 415c 	movw	r1, #3164	@ 0xc5c
34015682:	487e      	ldr	r0, [pc, #504]	@ (3401587c <UART_SetConfig+0x310>)
34015684:	f7eb ffd2 	bl	3400162c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34015688:	697b      	ldr	r3, [r7, #20]
3401568a:	699b      	ldr	r3, [r3, #24]
3401568c:	2b00      	cmp	r3, #0
3401568e:	d013      	beq.n	340156b8 <UART_SetConfig+0x14c>
34015690:	697b      	ldr	r3, [r7, #20]
34015692:	699b      	ldr	r3, [r3, #24]
34015694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34015698:	d00e      	beq.n	340156b8 <UART_SetConfig+0x14c>
3401569a:	697b      	ldr	r3, [r7, #20]
3401569c:	699b      	ldr	r3, [r3, #24]
3401569e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340156a2:	d009      	beq.n	340156b8 <UART_SetConfig+0x14c>
340156a4:	697b      	ldr	r3, [r7, #20]
340156a6:	699b      	ldr	r3, [r3, #24]
340156a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340156ac:	d004      	beq.n	340156b8 <UART_SetConfig+0x14c>
340156ae:	f640 415d 	movw	r1, #3165	@ 0xc5d
340156b2:	4872      	ldr	r0, [pc, #456]	@ (3401587c <UART_SetConfig+0x310>)
340156b4:	f7eb ffba 	bl	3400162c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
340156b8:	697b      	ldr	r3, [r7, #20]
340156ba:	69db      	ldr	r3, [r3, #28]
340156bc:	2b00      	cmp	r3, #0
340156be:	d009      	beq.n	340156d4 <UART_SetConfig+0x168>
340156c0:	697b      	ldr	r3, [r7, #20]
340156c2:	69db      	ldr	r3, [r3, #28]
340156c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
340156c8:	d004      	beq.n	340156d4 <UART_SetConfig+0x168>
340156ca:	f640 415e 	movw	r1, #3166	@ 0xc5e
340156ce:	486b      	ldr	r0, [pc, #428]	@ (3401587c <UART_SetConfig+0x310>)
340156d0:	f7eb ffac 	bl	3400162c <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
340156d4:	697b      	ldr	r3, [r7, #20]
340156d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340156d8:	2b00      	cmp	r3, #0
340156da:	d030      	beq.n	3401573e <UART_SetConfig+0x1d2>
340156dc:	697b      	ldr	r3, [r7, #20]
340156de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340156e0:	2b01      	cmp	r3, #1
340156e2:	d02c      	beq.n	3401573e <UART_SetConfig+0x1d2>
340156e4:	697b      	ldr	r3, [r7, #20]
340156e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340156e8:	2b02      	cmp	r3, #2
340156ea:	d028      	beq.n	3401573e <UART_SetConfig+0x1d2>
340156ec:	697b      	ldr	r3, [r7, #20]
340156ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340156f0:	2b03      	cmp	r3, #3
340156f2:	d024      	beq.n	3401573e <UART_SetConfig+0x1d2>
340156f4:	697b      	ldr	r3, [r7, #20]
340156f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340156f8:	2b04      	cmp	r3, #4
340156fa:	d020      	beq.n	3401573e <UART_SetConfig+0x1d2>
340156fc:	697b      	ldr	r3, [r7, #20]
340156fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015700:	2b05      	cmp	r3, #5
34015702:	d01c      	beq.n	3401573e <UART_SetConfig+0x1d2>
34015704:	697b      	ldr	r3, [r7, #20]
34015706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015708:	2b06      	cmp	r3, #6
3401570a:	d018      	beq.n	3401573e <UART_SetConfig+0x1d2>
3401570c:	697b      	ldr	r3, [r7, #20]
3401570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015710:	2b07      	cmp	r3, #7
34015712:	d014      	beq.n	3401573e <UART_SetConfig+0x1d2>
34015714:	697b      	ldr	r3, [r7, #20]
34015716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015718:	2b08      	cmp	r3, #8
3401571a:	d010      	beq.n	3401573e <UART_SetConfig+0x1d2>
3401571c:	697b      	ldr	r3, [r7, #20]
3401571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015720:	2b09      	cmp	r3, #9
34015722:	d00c      	beq.n	3401573e <UART_SetConfig+0x1d2>
34015724:	697b      	ldr	r3, [r7, #20]
34015726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015728:	2b0a      	cmp	r3, #10
3401572a:	d008      	beq.n	3401573e <UART_SetConfig+0x1d2>
3401572c:	697b      	ldr	r3, [r7, #20]
3401572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015730:	2b0b      	cmp	r3, #11
34015732:	d004      	beq.n	3401573e <UART_SetConfig+0x1d2>
34015734:	f640 415f 	movw	r1, #3167	@ 0xc5f
34015738:	4850      	ldr	r0, [pc, #320]	@ (3401587c <UART_SetConfig+0x310>)
3401573a:	f7eb ff77 	bl	3400162c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401573e:	697b      	ldr	r3, [r7, #20]
34015740:	689a      	ldr	r2, [r3, #8]
34015742:	697b      	ldr	r3, [r7, #20]
34015744:	691b      	ldr	r3, [r3, #16]
34015746:	431a      	orrs	r2, r3
34015748:	697b      	ldr	r3, [r7, #20]
3401574a:	695b      	ldr	r3, [r3, #20]
3401574c:	431a      	orrs	r2, r3
3401574e:	697b      	ldr	r3, [r7, #20]
34015750:	69db      	ldr	r3, [r3, #28]
34015752:	4313      	orrs	r3, r2
34015754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34015756:	697b      	ldr	r3, [r7, #20]
34015758:	681b      	ldr	r3, [r3, #0]
3401575a:	681a      	ldr	r2, [r3, #0]
3401575c:	4b48      	ldr	r3, [pc, #288]	@ (34015880 <UART_SetConfig+0x314>)
3401575e:	4013      	ands	r3, r2
34015760:	697a      	ldr	r2, [r7, #20]
34015762:	6812      	ldr	r2, [r2, #0]
34015764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
34015766:	430b      	orrs	r3, r1
34015768:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3401576a:	697b      	ldr	r3, [r7, #20]
3401576c:	681b      	ldr	r3, [r3, #0]
3401576e:	685b      	ldr	r3, [r3, #4]
34015770:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
34015774:	697b      	ldr	r3, [r7, #20]
34015776:	68da      	ldr	r2, [r3, #12]
34015778:	697b      	ldr	r3, [r7, #20]
3401577a:	681b      	ldr	r3, [r3, #0]
3401577c:	430a      	orrs	r2, r1
3401577e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34015780:	697b      	ldr	r3, [r7, #20]
34015782:	699b      	ldr	r3, [r3, #24]
34015784:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
34015786:	697b      	ldr	r3, [r7, #20]
34015788:	681b      	ldr	r3, [r3, #0]
3401578a:	4a3e      	ldr	r2, [pc, #248]	@ (34015884 <UART_SetConfig+0x318>)
3401578c:	4293      	cmp	r3, r2
3401578e:	d009      	beq.n	340157a4 <UART_SetConfig+0x238>
34015790:	697b      	ldr	r3, [r7, #20]
34015792:	681b      	ldr	r3, [r3, #0]
34015794:	4a3c      	ldr	r2, [pc, #240]	@ (34015888 <UART_SetConfig+0x31c>)
34015796:	4293      	cmp	r3, r2
34015798:	d004      	beq.n	340157a4 <UART_SetConfig+0x238>
  {
    tmpreg |= huart->Init.OneBitSampling;
3401579a:	697b      	ldr	r3, [r7, #20]
3401579c:	6a1b      	ldr	r3, [r3, #32]
3401579e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
340157a0:	4313      	orrs	r3, r2
340157a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
340157a4:	697b      	ldr	r3, [r7, #20]
340157a6:	681b      	ldr	r3, [r3, #0]
340157a8:	689b      	ldr	r3, [r3, #8]
340157aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
340157ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
340157b2:	697a      	ldr	r2, [r7, #20]
340157b4:	6812      	ldr	r2, [r2, #0]
340157b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340157b8:	430b      	orrs	r3, r1
340157ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
340157bc:	697b      	ldr	r3, [r7, #20]
340157be:	681b      	ldr	r3, [r3, #0]
340157c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340157c2:	f023 010f 	bic.w	r1, r3, #15
340157c6:	697b      	ldr	r3, [r7, #20]
340157c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340157ca:	697b      	ldr	r3, [r7, #20]
340157cc:	681b      	ldr	r3, [r3, #0]
340157ce:	430a      	orrs	r2, r1
340157d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
340157d2:	697b      	ldr	r3, [r7, #20]
340157d4:	681b      	ldr	r3, [r3, #0]
340157d6:	4a2d      	ldr	r2, [pc, #180]	@ (3401588c <UART_SetConfig+0x320>)
340157d8:	4293      	cmp	r3, r2
340157da:	d106      	bne.n	340157ea <UART_SetConfig+0x27e>
340157dc:	f04f 0200 	mov.w	r2, #0
340157e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
340157e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340157e8:	e092      	b.n	34015910 <UART_SetConfig+0x3a4>
340157ea:	697b      	ldr	r3, [r7, #20]
340157ec:	681b      	ldr	r3, [r3, #0]
340157ee:	4a28      	ldr	r2, [pc, #160]	@ (34015890 <UART_SetConfig+0x324>)
340157f0:	4293      	cmp	r3, r2
340157f2:	d106      	bne.n	34015802 <UART_SetConfig+0x296>
340157f4:	f04f 0200 	mov.w	r2, #0
340157f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
340157fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015800:	e086      	b.n	34015910 <UART_SetConfig+0x3a4>
34015802:	697b      	ldr	r3, [r7, #20]
34015804:	681b      	ldr	r3, [r3, #0]
34015806:	4a23      	ldr	r2, [pc, #140]	@ (34015894 <UART_SetConfig+0x328>)
34015808:	4293      	cmp	r3, r2
3401580a:	d106      	bne.n	3401581a <UART_SetConfig+0x2ae>
3401580c:	f04f 0200 	mov.w	r2, #0
34015810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34015814:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015818:	e07a      	b.n	34015910 <UART_SetConfig+0x3a4>
3401581a:	697b      	ldr	r3, [r7, #20]
3401581c:	681b      	ldr	r3, [r3, #0]
3401581e:	4a1e      	ldr	r2, [pc, #120]	@ (34015898 <UART_SetConfig+0x32c>)
34015820:	4293      	cmp	r3, r2
34015822:	d106      	bne.n	34015832 <UART_SetConfig+0x2c6>
34015824:	f04f 0200 	mov.w	r2, #0
34015828:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3401582c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015830:	e06e      	b.n	34015910 <UART_SetConfig+0x3a4>
34015832:	697b      	ldr	r3, [r7, #20]
34015834:	681b      	ldr	r3, [r3, #0]
34015836:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401583a:	d106      	bne.n	3401584a <UART_SetConfig+0x2de>
3401583c:	f04f 0200 	mov.w	r2, #0
34015840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34015844:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015848:	e062      	b.n	34015910 <UART_SetConfig+0x3a4>
3401584a:	697b      	ldr	r3, [r7, #20]
3401584c:	681b      	ldr	r3, [r3, #0]
3401584e:	4a13      	ldr	r2, [pc, #76]	@ (3401589c <UART_SetConfig+0x330>)
34015850:	4293      	cmp	r3, r2
34015852:	d106      	bne.n	34015862 <UART_SetConfig+0x2f6>
34015854:	f04f 0200 	mov.w	r2, #0
34015858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401585c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015860:	e056      	b.n	34015910 <UART_SetConfig+0x3a4>
34015862:	697b      	ldr	r3, [r7, #20]
34015864:	681b      	ldr	r3, [r3, #0]
34015866:	4a0e      	ldr	r2, [pc, #56]	@ (340158a0 <UART_SetConfig+0x334>)
34015868:	4293      	cmp	r3, r2
3401586a:	d11b      	bne.n	340158a4 <UART_SetConfig+0x338>
3401586c:	f04f 0200 	mov.w	r2, #0
34015870:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34015874:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015878:	e04a      	b.n	34015910 <UART_SetConfig+0x3a4>
3401587a:	bf00      	nop
3401587c:	3401b014 	.word	0x3401b014
34015880:	cfff69f3 	.word	0xcfff69f3
34015884:	56000c00 	.word	0x56000c00
34015888:	46000c00 	.word	0x46000c00
3401588c:	52001000 	.word	0x52001000
34015890:	50004400 	.word	0x50004400
34015894:	50004800 	.word	0x50004800
34015898:	50004c00 	.word	0x50004c00
3401589c:	52001400 	.word	0x52001400
340158a0:	50007800 	.word	0x50007800
340158a4:	697b      	ldr	r3, [r7, #20]
340158a6:	681b      	ldr	r3, [r3, #0]
340158a8:	4a90      	ldr	r2, [pc, #576]	@ (34015aec <UART_SetConfig+0x580>)
340158aa:	4293      	cmp	r3, r2
340158ac:	d106      	bne.n	340158bc <UART_SetConfig+0x350>
340158ae:	f04f 0200 	mov.w	r2, #0
340158b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340158b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340158ba:	e029      	b.n	34015910 <UART_SetConfig+0x3a4>
340158bc:	697b      	ldr	r3, [r7, #20]
340158be:	681b      	ldr	r3, [r3, #0]
340158c0:	4a8b      	ldr	r2, [pc, #556]	@ (34015af0 <UART_SetConfig+0x584>)
340158c2:	4293      	cmp	r3, r2
340158c4:	d106      	bne.n	340158d4 <UART_SetConfig+0x368>
340158c6:	f04f 0200 	mov.w	r2, #0
340158ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
340158ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340158d2:	e01d      	b.n	34015910 <UART_SetConfig+0x3a4>
340158d4:	697b      	ldr	r3, [r7, #20]
340158d6:	681b      	ldr	r3, [r3, #0]
340158d8:	4a86      	ldr	r2, [pc, #536]	@ (34015af4 <UART_SetConfig+0x588>)
340158da:	4293      	cmp	r3, r2
340158dc:	d106      	bne.n	340158ec <UART_SetConfig+0x380>
340158de:	f04f 0200 	mov.w	r2, #0
340158e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
340158e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
340158ea:	e011      	b.n	34015910 <UART_SetConfig+0x3a4>
340158ec:	697b      	ldr	r3, [r7, #20]
340158ee:	681b      	ldr	r3, [r3, #0]
340158f0:	4a81      	ldr	r2, [pc, #516]	@ (34015af8 <UART_SetConfig+0x58c>)
340158f2:	4293      	cmp	r3, r2
340158f4:	d106      	bne.n	34015904 <UART_SetConfig+0x398>
340158f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340158fa:	f04f 0300 	mov.w	r3, #0
340158fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
34015902:	e005      	b.n	34015910 <UART_SetConfig+0x3a4>
34015904:	f04f 0200 	mov.w	r2, #0
34015908:	f04f 0300 	mov.w	r3, #0
3401590c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
34015910:	697b      	ldr	r3, [r7, #20]
34015912:	681b      	ldr	r3, [r3, #0]
34015914:	4a78      	ldr	r2, [pc, #480]	@ (34015af8 <UART_SetConfig+0x58c>)
34015916:	4293      	cmp	r3, r2
34015918:	d004      	beq.n	34015924 <UART_SetConfig+0x3b8>
3401591a:	697b      	ldr	r3, [r7, #20]
3401591c:	681b      	ldr	r3, [r3, #0]
3401591e:	4a77      	ldr	r2, [pc, #476]	@ (34015afc <UART_SetConfig+0x590>)
34015920:	4293      	cmp	r3, r2
34015922:	d166      	bne.n	340159f2 <UART_SetConfig+0x486>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34015924:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015928:	f7fa f934 	bl	3400fb94 <HAL_RCCEx_GetPeriphCLKFreq>
3401592c:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3401592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015930:	2b00      	cmp	r3, #0
34015932:	f000 80c6 	beq.w	34015ac2 <UART_SetConfig+0x556>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34015936:	697b      	ldr	r3, [r7, #20]
34015938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401593a:	4a71      	ldr	r2, [pc, #452]	@ (34015b00 <UART_SetConfig+0x594>)
3401593c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015940:	461a      	mov	r2, r3
34015942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015944:	fbb3 f3f2 	udiv	r3, r3, r2
34015948:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401594a:	697b      	ldr	r3, [r7, #20]
3401594c:	685a      	ldr	r2, [r3, #4]
3401594e:	4613      	mov	r3, r2
34015950:	005b      	lsls	r3, r3, #1
34015952:	4413      	add	r3, r2
34015954:	69fa      	ldr	r2, [r7, #28]
34015956:	429a      	cmp	r2, r3
34015958:	d305      	bcc.n	34015966 <UART_SetConfig+0x3fa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3401595a:	697b      	ldr	r3, [r7, #20]
3401595c:	685b      	ldr	r3, [r3, #4]
3401595e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34015960:	69fa      	ldr	r2, [r7, #28]
34015962:	429a      	cmp	r2, r3
34015964:	d903      	bls.n	3401596e <UART_SetConfig+0x402>
      {
        ret = HAL_ERROR;
34015966:	2301      	movs	r3, #1
34015968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3401596c:	e040      	b.n	340159f0 <UART_SetConfig+0x484>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015970:	2200      	movs	r2, #0
34015972:	60bb      	str	r3, [r7, #8]
34015974:	60fa      	str	r2, [r7, #12]
34015976:	697b      	ldr	r3, [r7, #20]
34015978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401597a:	4a61      	ldr	r2, [pc, #388]	@ (34015b00 <UART_SetConfig+0x594>)
3401597c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015980:	b29b      	uxth	r3, r3
34015982:	2200      	movs	r2, #0
34015984:	603b      	str	r3, [r7, #0]
34015986:	607a      	str	r2, [r7, #4]
34015988:	e9d7 2300 	ldrd	r2, r3, [r7]
3401598c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34015990:	f7ea ff06 	bl	340007a0 <__aeabi_uldivmod>
34015994:	4602      	mov	r2, r0
34015996:	460b      	mov	r3, r1
34015998:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3401599c:	6979      	ldr	r1, [r7, #20]
3401599e:	6849      	ldr	r1, [r1, #4]
340159a0:	0849      	lsrs	r1, r1, #1
340159a2:	2000      	movs	r0, #0
340159a4:	460c      	mov	r4, r1
340159a6:	4605      	mov	r5, r0
340159a8:	eb12 0804 	adds.w	r8, r2, r4
340159ac:	eb43 0905 	adc.w	r9, r3, r5
340159b0:	697b      	ldr	r3, [r7, #20]
340159b2:	685b      	ldr	r3, [r3, #4]
340159b4:	2200      	movs	r2, #0
340159b6:	469a      	mov	sl, r3
340159b8:	4693      	mov	fp, r2
340159ba:	4652      	mov	r2, sl
340159bc:	465b      	mov	r3, fp
340159be:	4640      	mov	r0, r8
340159c0:	4649      	mov	r1, r9
340159c2:	f7ea feed 	bl	340007a0 <__aeabi_uldivmod>
340159c6:	4602      	mov	r2, r0
340159c8:	460b      	mov	r3, r1
340159ca:	4613      	mov	r3, r2
340159cc:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
340159ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340159d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340159d4:	d308      	bcc.n	340159e8 <UART_SetConfig+0x47c>
340159d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340159d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340159dc:	d204      	bcs.n	340159e8 <UART_SetConfig+0x47c>
        {
          huart->Instance->BRR = usartdiv;
340159de:	697b      	ldr	r3, [r7, #20]
340159e0:	681b      	ldr	r3, [r3, #0]
340159e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
340159e4:	60da      	str	r2, [r3, #12]
340159e6:	e003      	b.n	340159f0 <UART_SetConfig+0x484>
        }
        else
        {
          ret = HAL_ERROR;
340159e8:	2301      	movs	r3, #1
340159ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
340159ee:	e068      	b.n	34015ac2 <UART_SetConfig+0x556>
340159f0:	e067      	b.n	34015ac2 <UART_SetConfig+0x556>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
340159f2:	697b      	ldr	r3, [r7, #20]
340159f4:	69db      	ldr	r3, [r3, #28]
340159f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
340159fa:	d138      	bne.n	34015a6e <UART_SetConfig+0x502>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
340159fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015a00:	f7fa f8c8 	bl	3400fb94 <HAL_RCCEx_GetPeriphCLKFreq>
34015a04:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
34015a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015a08:	2b00      	cmp	r3, #0
34015a0a:	d05a      	beq.n	34015ac2 <UART_SetConfig+0x556>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34015a0c:	697b      	ldr	r3, [r7, #20]
34015a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015a10:	4a3b      	ldr	r2, [pc, #236]	@ (34015b00 <UART_SetConfig+0x594>)
34015a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015a16:	461a      	mov	r2, r3
34015a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015a1a:	fbb3 f3f2 	udiv	r3, r3, r2
34015a1e:	005a      	lsls	r2, r3, #1
34015a20:	697b      	ldr	r3, [r7, #20]
34015a22:	685b      	ldr	r3, [r3, #4]
34015a24:	085b      	lsrs	r3, r3, #1
34015a26:	441a      	add	r2, r3
34015a28:	697b      	ldr	r3, [r7, #20]
34015a2a:	685b      	ldr	r3, [r3, #4]
34015a2c:	fbb2 f3f3 	udiv	r3, r2, r3
34015a30:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34015a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015a34:	2b0f      	cmp	r3, #15
34015a36:	d916      	bls.n	34015a66 <UART_SetConfig+0x4fa>
34015a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34015a3e:	d212      	bcs.n	34015a66 <UART_SetConfig+0x4fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34015a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015a42:	b29b      	uxth	r3, r3
34015a44:	f023 030f 	bic.w	r3, r3, #15
34015a48:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
34015a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015a4c:	085b      	lsrs	r3, r3, #1
34015a4e:	b29b      	uxth	r3, r3
34015a50:	f003 0307 	and.w	r3, r3, #7
34015a54:	b29a      	uxth	r2, r3
34015a56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
34015a58:	4313      	orrs	r3, r2
34015a5a:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
34015a5c:	697b      	ldr	r3, [r7, #20]
34015a5e:	681b      	ldr	r3, [r3, #0]
34015a60:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
34015a62:	60da      	str	r2, [r3, #12]
34015a64:	e02d      	b.n	34015ac2 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
34015a66:	2301      	movs	r3, #1
34015a68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
34015a6c:	e029      	b.n	34015ac2 <UART_SetConfig+0x556>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34015a6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34015a72:	f7fa f88f 	bl	3400fb94 <HAL_RCCEx_GetPeriphCLKFreq>
34015a76:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
34015a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015a7a:	2b00      	cmp	r3, #0
34015a7c:	d021      	beq.n	34015ac2 <UART_SetConfig+0x556>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34015a7e:	697b      	ldr	r3, [r7, #20]
34015a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34015a82:	4a1f      	ldr	r2, [pc, #124]	@ (34015b00 <UART_SetConfig+0x594>)
34015a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
34015a88:	461a      	mov	r2, r3
34015a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015a8c:	fbb3 f2f2 	udiv	r2, r3, r2
34015a90:	697b      	ldr	r3, [r7, #20]
34015a92:	685b      	ldr	r3, [r3, #4]
34015a94:	085b      	lsrs	r3, r3, #1
34015a96:	441a      	add	r2, r3
34015a98:	697b      	ldr	r3, [r7, #20]
34015a9a:	685b      	ldr	r3, [r3, #4]
34015a9c:	fbb2 f3f3 	udiv	r3, r2, r3
34015aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015aa4:	2b0f      	cmp	r3, #15
34015aa6:	d909      	bls.n	34015abc <UART_SetConfig+0x550>
34015aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34015aae:	d205      	bcs.n	34015abc <UART_SetConfig+0x550>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
34015ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015ab2:	b29a      	uxth	r2, r3
34015ab4:	697b      	ldr	r3, [r7, #20]
34015ab6:	681b      	ldr	r3, [r3, #0]
34015ab8:	60da      	str	r2, [r3, #12]
34015aba:	e002      	b.n	34015ac2 <UART_SetConfig+0x556>
      }
      else
      {
        ret = HAL_ERROR;
34015abc:	2301      	movs	r3, #1
34015abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
34015ac2:	697b      	ldr	r3, [r7, #20]
34015ac4:	2201      	movs	r2, #1
34015ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
34015aca:	697b      	ldr	r3, [r7, #20]
34015acc:	2201      	movs	r2, #1
34015ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
34015ad2:	697b      	ldr	r3, [r7, #20]
34015ad4:	2200      	movs	r2, #0
34015ad6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
34015ad8:	697b      	ldr	r3, [r7, #20]
34015ada:	2200      	movs	r2, #0
34015adc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
34015ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
34015ae2:	4618      	mov	r0, r3
34015ae4:	3740      	adds	r7, #64	@ 0x40
34015ae6:	46bd      	mov	sp, r7
34015ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34015aec:	50007c00 	.word	0x50007c00
34015af0:	52001800 	.word	0x52001800
34015af4:	52001c00 	.word	0x52001c00
34015af8:	56000c00 	.word	0x56000c00
34015afc:	46000c00 	.word	0x46000c00
34015b00:	3401b9f8 	.word	0x3401b9f8

34015b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
34015b04:	b580      	push	{r7, lr}
34015b06:	b082      	sub	sp, #8
34015b08:	af00      	add	r7, sp, #0
34015b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34015b0c:	687b      	ldr	r3, [r7, #4]
34015b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015b10:	2bff      	cmp	r3, #255	@ 0xff
34015b12:	d904      	bls.n	34015b1e <UART_AdvFeatureConfig+0x1a>
34015b14:	f640 41e4 	movw	r1, #3300	@ 0xce4
34015b18:	4890      	ldr	r0, [pc, #576]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015b1a:	f7eb fd87 	bl	3400162c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
34015b1e:	687b      	ldr	r3, [r7, #4]
34015b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015b22:	f003 0308 	and.w	r3, r3, #8
34015b26:	2b00      	cmp	r3, #0
34015b28:	d018      	beq.n	34015b5c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
34015b2a:	687b      	ldr	r3, [r7, #4]
34015b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34015b2e:	2b00      	cmp	r3, #0
34015b30:	d009      	beq.n	34015b46 <UART_AdvFeatureConfig+0x42>
34015b32:	687b      	ldr	r3, [r7, #4]
34015b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34015b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34015b3a:	d004      	beq.n	34015b46 <UART_AdvFeatureConfig+0x42>
34015b3c:	f640 41e9 	movw	r1, #3305	@ 0xce9
34015b40:	4886      	ldr	r0, [pc, #536]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015b42:	f7eb fd73 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
34015b46:	687b      	ldr	r3, [r7, #4]
34015b48:	681b      	ldr	r3, [r3, #0]
34015b4a:	685b      	ldr	r3, [r3, #4]
34015b4c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
34015b50:	687b      	ldr	r3, [r7, #4]
34015b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34015b54:	687b      	ldr	r3, [r7, #4]
34015b56:	681b      	ldr	r3, [r3, #0]
34015b58:	430a      	orrs	r2, r1
34015b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
34015b5c:	687b      	ldr	r3, [r7, #4]
34015b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015b60:	f003 0301 	and.w	r3, r3, #1
34015b64:	2b00      	cmp	r3, #0
34015b66:	d018      	beq.n	34015b9a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
34015b68:	687b      	ldr	r3, [r7, #4]
34015b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015b6c:	2b00      	cmp	r3, #0
34015b6e:	d009      	beq.n	34015b84 <UART_AdvFeatureConfig+0x80>
34015b70:	687b      	ldr	r3, [r7, #4]
34015b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34015b78:	d004      	beq.n	34015b84 <UART_AdvFeatureConfig+0x80>
34015b7a:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
34015b7e:	4877      	ldr	r0, [pc, #476]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015b80:	f7eb fd54 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
34015b84:	687b      	ldr	r3, [r7, #4]
34015b86:	681b      	ldr	r3, [r3, #0]
34015b88:	685b      	ldr	r3, [r3, #4]
34015b8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
34015b8e:	687b      	ldr	r3, [r7, #4]
34015b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34015b92:	687b      	ldr	r3, [r7, #4]
34015b94:	681b      	ldr	r3, [r3, #0]
34015b96:	430a      	orrs	r2, r1
34015b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
34015b9a:	687b      	ldr	r3, [r7, #4]
34015b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015b9e:	f003 0302 	and.w	r3, r3, #2
34015ba2:	2b00      	cmp	r3, #0
34015ba4:	d018      	beq.n	34015bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
34015ba6:	687b      	ldr	r3, [r7, #4]
34015ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34015baa:	2b00      	cmp	r3, #0
34015bac:	d009      	beq.n	34015bc2 <UART_AdvFeatureConfig+0xbe>
34015bae:	687b      	ldr	r3, [r7, #4]
34015bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34015bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34015bb6:	d004      	beq.n	34015bc2 <UART_AdvFeatureConfig+0xbe>
34015bb8:	f640 41f7 	movw	r1, #3319	@ 0xcf7
34015bbc:	4867      	ldr	r0, [pc, #412]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015bbe:	f7eb fd35 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
34015bc2:	687b      	ldr	r3, [r7, #4]
34015bc4:	681b      	ldr	r3, [r3, #0]
34015bc6:	685b      	ldr	r3, [r3, #4]
34015bc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34015bcc:	687b      	ldr	r3, [r7, #4]
34015bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34015bd0:	687b      	ldr	r3, [r7, #4]
34015bd2:	681b      	ldr	r3, [r3, #0]
34015bd4:	430a      	orrs	r2, r1
34015bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
34015bd8:	687b      	ldr	r3, [r7, #4]
34015bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015bdc:	f003 0304 	and.w	r3, r3, #4
34015be0:	2b00      	cmp	r3, #0
34015be2:	d018      	beq.n	34015c16 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
34015be4:	687b      	ldr	r3, [r7, #4]
34015be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34015be8:	2b00      	cmp	r3, #0
34015bea:	d009      	beq.n	34015c00 <UART_AdvFeatureConfig+0xfc>
34015bec:	687b      	ldr	r3, [r7, #4]
34015bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34015bf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34015bf4:	d004      	beq.n	34015c00 <UART_AdvFeatureConfig+0xfc>
34015bf6:	f640 41fe 	movw	r1, #3326	@ 0xcfe
34015bfa:	4858      	ldr	r0, [pc, #352]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015bfc:	f7eb fd16 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
34015c00:	687b      	ldr	r3, [r7, #4]
34015c02:	681b      	ldr	r3, [r3, #0]
34015c04:	685b      	ldr	r3, [r3, #4]
34015c06:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
34015c0a:	687b      	ldr	r3, [r7, #4]
34015c0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34015c0e:	687b      	ldr	r3, [r7, #4]
34015c10:	681b      	ldr	r3, [r3, #0]
34015c12:	430a      	orrs	r2, r1
34015c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
34015c16:	687b      	ldr	r3, [r7, #4]
34015c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015c1a:	f003 0310 	and.w	r3, r3, #16
34015c1e:	2b00      	cmp	r3, #0
34015c20:	d018      	beq.n	34015c54 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
34015c22:	687b      	ldr	r3, [r7, #4]
34015c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34015c26:	2b00      	cmp	r3, #0
34015c28:	d009      	beq.n	34015c3e <UART_AdvFeatureConfig+0x13a>
34015c2a:	687b      	ldr	r3, [r7, #4]
34015c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34015c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015c32:	d004      	beq.n	34015c3e <UART_AdvFeatureConfig+0x13a>
34015c34:	f640 5105 	movw	r1, #3333	@ 0xd05
34015c38:	4848      	ldr	r0, [pc, #288]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015c3a:	f7eb fcf7 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
34015c3e:	687b      	ldr	r3, [r7, #4]
34015c40:	681b      	ldr	r3, [r3, #0]
34015c42:	689b      	ldr	r3, [r3, #8]
34015c44:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
34015c48:	687b      	ldr	r3, [r7, #4]
34015c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
34015c4c:	687b      	ldr	r3, [r7, #4]
34015c4e:	681b      	ldr	r3, [r3, #0]
34015c50:	430a      	orrs	r2, r1
34015c52:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
34015c54:	687b      	ldr	r3, [r7, #4]
34015c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015c58:	f003 0320 	and.w	r3, r3, #32
34015c5c:	2b00      	cmp	r3, #0
34015c5e:	d018      	beq.n	34015c92 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
34015c60:	687b      	ldr	r3, [r7, #4]
34015c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34015c64:	2b00      	cmp	r3, #0
34015c66:	d009      	beq.n	34015c7c <UART_AdvFeatureConfig+0x178>
34015c68:	687b      	ldr	r3, [r7, #4]
34015c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34015c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015c70:	d004      	beq.n	34015c7c <UART_AdvFeatureConfig+0x178>
34015c72:	f640 510d 	movw	r1, #3341	@ 0xd0d
34015c76:	4839      	ldr	r0, [pc, #228]	@ (34015d5c <UART_AdvFeatureConfig+0x258>)
34015c78:	f7eb fcd8 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
34015c7c:	687b      	ldr	r3, [r7, #4]
34015c7e:	681b      	ldr	r3, [r3, #0]
34015c80:	689b      	ldr	r3, [r3, #8]
34015c82:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
34015c86:	687b      	ldr	r3, [r7, #4]
34015c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34015c8a:	687b      	ldr	r3, [r7, #4]
34015c8c:	681b      	ldr	r3, [r3, #0]
34015c8e:	430a      	orrs	r2, r1
34015c90:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
34015c92:	687b      	ldr	r3, [r7, #4]
34015c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34015c9a:	2b00      	cmp	r3, #0
34015c9c:	f000 80d2 	beq.w	34015e44 <UART_AdvFeatureConfig+0x340>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
34015ca0:	687b      	ldr	r3, [r7, #4]
34015ca2:	681b      	ldr	r3, [r3, #0]
34015ca4:	4a2e      	ldr	r2, [pc, #184]	@ (34015d60 <UART_AdvFeatureConfig+0x25c>)
34015ca6:	4293      	cmp	r3, r2
34015ca8:	f000 808b 	beq.w	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cac:	687b      	ldr	r3, [r7, #4]
34015cae:	681b      	ldr	r3, [r3, #0]
34015cb0:	4a2c      	ldr	r2, [pc, #176]	@ (34015d64 <UART_AdvFeatureConfig+0x260>)
34015cb2:	4293      	cmp	r3, r2
34015cb4:	f000 8085 	beq.w	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cb8:	687b      	ldr	r3, [r7, #4]
34015cba:	681b      	ldr	r3, [r3, #0]
34015cbc:	4a2a      	ldr	r2, [pc, #168]	@ (34015d68 <UART_AdvFeatureConfig+0x264>)
34015cbe:	4293      	cmp	r3, r2
34015cc0:	d07f      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cc2:	687b      	ldr	r3, [r7, #4]
34015cc4:	681b      	ldr	r3, [r3, #0]
34015cc6:	4a29      	ldr	r2, [pc, #164]	@ (34015d6c <UART_AdvFeatureConfig+0x268>)
34015cc8:	4293      	cmp	r3, r2
34015cca:	d07a      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015ccc:	687b      	ldr	r3, [r7, #4]
34015cce:	681b      	ldr	r3, [r3, #0]
34015cd0:	4a27      	ldr	r2, [pc, #156]	@ (34015d70 <UART_AdvFeatureConfig+0x26c>)
34015cd2:	4293      	cmp	r3, r2
34015cd4:	d075      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cd6:	687b      	ldr	r3, [r7, #4]
34015cd8:	681b      	ldr	r3, [r3, #0]
34015cda:	4a26      	ldr	r2, [pc, #152]	@ (34015d74 <UART_AdvFeatureConfig+0x270>)
34015cdc:	4293      	cmp	r3, r2
34015cde:	d070      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015ce0:	687b      	ldr	r3, [r7, #4]
34015ce2:	681b      	ldr	r3, [r3, #0]
34015ce4:	4a24      	ldr	r2, [pc, #144]	@ (34015d78 <UART_AdvFeatureConfig+0x274>)
34015ce6:	4293      	cmp	r3, r2
34015ce8:	d06b      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cea:	687b      	ldr	r3, [r7, #4]
34015cec:	681b      	ldr	r3, [r3, #0]
34015cee:	4a23      	ldr	r2, [pc, #140]	@ (34015d7c <UART_AdvFeatureConfig+0x278>)
34015cf0:	4293      	cmp	r3, r2
34015cf2:	d066      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cf4:	687b      	ldr	r3, [r7, #4]
34015cf6:	681b      	ldr	r3, [r3, #0]
34015cf8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34015cfc:	d061      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015cfe:	687b      	ldr	r3, [r7, #4]
34015d00:	681b      	ldr	r3, [r3, #0]
34015d02:	4a1f      	ldr	r2, [pc, #124]	@ (34015d80 <UART_AdvFeatureConfig+0x27c>)
34015d04:	4293      	cmp	r3, r2
34015d06:	d05c      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d08:	687b      	ldr	r3, [r7, #4]
34015d0a:	681b      	ldr	r3, [r3, #0]
34015d0c:	4a1d      	ldr	r2, [pc, #116]	@ (34015d84 <UART_AdvFeatureConfig+0x280>)
34015d0e:	4293      	cmp	r3, r2
34015d10:	d057      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d12:	687b      	ldr	r3, [r7, #4]
34015d14:	681b      	ldr	r3, [r3, #0]
34015d16:	4a1c      	ldr	r2, [pc, #112]	@ (34015d88 <UART_AdvFeatureConfig+0x284>)
34015d18:	4293      	cmp	r3, r2
34015d1a:	d052      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d1c:	687b      	ldr	r3, [r7, #4]
34015d1e:	681b      	ldr	r3, [r3, #0]
34015d20:	4a1a      	ldr	r2, [pc, #104]	@ (34015d8c <UART_AdvFeatureConfig+0x288>)
34015d22:	4293      	cmp	r3, r2
34015d24:	d04d      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d26:	687b      	ldr	r3, [r7, #4]
34015d28:	681b      	ldr	r3, [r3, #0]
34015d2a:	4a19      	ldr	r2, [pc, #100]	@ (34015d90 <UART_AdvFeatureConfig+0x28c>)
34015d2c:	4293      	cmp	r3, r2
34015d2e:	d048      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d30:	687b      	ldr	r3, [r7, #4]
34015d32:	681b      	ldr	r3, [r3, #0]
34015d34:	4a17      	ldr	r2, [pc, #92]	@ (34015d94 <UART_AdvFeatureConfig+0x290>)
34015d36:	4293      	cmp	r3, r2
34015d38:	d043      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d3a:	687b      	ldr	r3, [r7, #4]
34015d3c:	681b      	ldr	r3, [r3, #0]
34015d3e:	4a16      	ldr	r2, [pc, #88]	@ (34015d98 <UART_AdvFeatureConfig+0x294>)
34015d40:	4293      	cmp	r3, r2
34015d42:	d03e      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d44:	687b      	ldr	r3, [r7, #4]
34015d46:	681b      	ldr	r3, [r3, #0]
34015d48:	4a14      	ldr	r2, [pc, #80]	@ (34015d9c <UART_AdvFeatureConfig+0x298>)
34015d4a:	4293      	cmp	r3, r2
34015d4c:	d039      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d4e:	687b      	ldr	r3, [r7, #4]
34015d50:	681b      	ldr	r3, [r3, #0]
34015d52:	4a13      	ldr	r2, [pc, #76]	@ (34015da0 <UART_AdvFeatureConfig+0x29c>)
34015d54:	4293      	cmp	r3, r2
34015d56:	d034      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015d58:	e024      	b.n	34015da4 <UART_AdvFeatureConfig+0x2a0>
34015d5a:	bf00      	nop
34015d5c:	3401b014 	.word	0x3401b014
34015d60:	52001000 	.word	0x52001000
34015d64:	42001000 	.word	0x42001000
34015d68:	50004400 	.word	0x50004400
34015d6c:	40004400 	.word	0x40004400
34015d70:	50004800 	.word	0x50004800
34015d74:	40004800 	.word	0x40004800
34015d78:	50004c00 	.word	0x50004c00
34015d7c:	40004c00 	.word	0x40004c00
34015d80:	40005000 	.word	0x40005000
34015d84:	52001400 	.word	0x52001400
34015d88:	42001400 	.word	0x42001400
34015d8c:	50007800 	.word	0x50007800
34015d90:	40007800 	.word	0x40007800
34015d94:	50007c00 	.word	0x50007c00
34015d98:	40007c00 	.word	0x40007c00
34015d9c:	52001800 	.word	0x52001800
34015da0:	42001800 	.word	0x42001800
34015da4:	687b      	ldr	r3, [r7, #4]
34015da6:	681b      	ldr	r3, [r3, #0]
34015da8:	4a38      	ldr	r2, [pc, #224]	@ (34015e8c <UART_AdvFeatureConfig+0x388>)
34015daa:	4293      	cmp	r3, r2
34015dac:	d009      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015dae:	687b      	ldr	r3, [r7, #4]
34015db0:	681b      	ldr	r3, [r3, #0]
34015db2:	4a37      	ldr	r2, [pc, #220]	@ (34015e90 <UART_AdvFeatureConfig+0x38c>)
34015db4:	4293      	cmp	r3, r2
34015db6:	d004      	beq.n	34015dc2 <UART_AdvFeatureConfig+0x2be>
34015db8:	f640 5115 	movw	r1, #3349	@ 0xd15
34015dbc:	4835      	ldr	r0, [pc, #212]	@ (34015e94 <UART_AdvFeatureConfig+0x390>)
34015dbe:	f7eb fc35 	bl	3400162c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
34015dc2:	687b      	ldr	r3, [r7, #4]
34015dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34015dc6:	2b00      	cmp	r3, #0
34015dc8:	d009      	beq.n	34015dde <UART_AdvFeatureConfig+0x2da>
34015dca:	687b      	ldr	r3, [r7, #4]
34015dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34015dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34015dd2:	d004      	beq.n	34015dde <UART_AdvFeatureConfig+0x2da>
34015dd4:	f640 5116 	movw	r1, #3350	@ 0xd16
34015dd8:	482e      	ldr	r0, [pc, #184]	@ (34015e94 <UART_AdvFeatureConfig+0x390>)
34015dda:	f7eb fc27 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
34015dde:	687b      	ldr	r3, [r7, #4]
34015de0:	681b      	ldr	r3, [r3, #0]
34015de2:	685b      	ldr	r3, [r3, #4]
34015de4:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
34015de8:	687b      	ldr	r3, [r7, #4]
34015dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
34015dec:	687b      	ldr	r3, [r7, #4]
34015dee:	681b      	ldr	r3, [r3, #0]
34015df0:	430a      	orrs	r2, r1
34015df2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
34015df4:	687b      	ldr	r3, [r7, #4]
34015df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34015df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34015dfc:	d122      	bne.n	34015e44 <UART_AdvFeatureConfig+0x340>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
34015dfe:	687b      	ldr	r3, [r7, #4]
34015e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015e02:	2b00      	cmp	r3, #0
34015e04:	d013      	beq.n	34015e2e <UART_AdvFeatureConfig+0x32a>
34015e06:	687b      	ldr	r3, [r7, #4]
34015e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34015e0e:	d00e      	beq.n	34015e2e <UART_AdvFeatureConfig+0x32a>
34015e10:	687b      	ldr	r3, [r7, #4]
34015e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34015e18:	d009      	beq.n	34015e2e <UART_AdvFeatureConfig+0x32a>
34015e1a:	687b      	ldr	r3, [r7, #4]
34015e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
34015e22:	d004      	beq.n	34015e2e <UART_AdvFeatureConfig+0x32a>
34015e24:	f640 511b 	movw	r1, #3355	@ 0xd1b
34015e28:	481a      	ldr	r0, [pc, #104]	@ (34015e94 <UART_AdvFeatureConfig+0x390>)
34015e2a:	f7eb fbff 	bl	3400162c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
34015e2e:	687b      	ldr	r3, [r7, #4]
34015e30:	681b      	ldr	r3, [r3, #0]
34015e32:	685b      	ldr	r3, [r3, #4]
34015e34:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
34015e38:	687b      	ldr	r3, [r7, #4]
34015e3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34015e3c:	687b      	ldr	r3, [r7, #4]
34015e3e:	681b      	ldr	r3, [r3, #0]
34015e40:	430a      	orrs	r2, r1
34015e42:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
34015e44:	687b      	ldr	r3, [r7, #4]
34015e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34015e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34015e4c:	2b00      	cmp	r3, #0
34015e4e:	d018      	beq.n	34015e82 <UART_AdvFeatureConfig+0x37e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
34015e50:	687b      	ldr	r3, [r7, #4]
34015e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34015e54:	2b00      	cmp	r3, #0
34015e56:	d009      	beq.n	34015e6c <UART_AdvFeatureConfig+0x368>
34015e58:	687b      	ldr	r3, [r7, #4]
34015e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34015e5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34015e60:	d004      	beq.n	34015e6c <UART_AdvFeatureConfig+0x368>
34015e62:	f640 5123 	movw	r1, #3363	@ 0xd23
34015e66:	480b      	ldr	r0, [pc, #44]	@ (34015e94 <UART_AdvFeatureConfig+0x390>)
34015e68:	f7eb fbe0 	bl	3400162c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34015e6c:	687b      	ldr	r3, [r7, #4]
34015e6e:	681b      	ldr	r3, [r3, #0]
34015e70:	685b      	ldr	r3, [r3, #4]
34015e72:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
34015e76:	687b      	ldr	r3, [r7, #4]
34015e78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34015e7a:	687b      	ldr	r3, [r7, #4]
34015e7c:	681b      	ldr	r3, [r3, #0]
34015e7e:	430a      	orrs	r2, r1
34015e80:	605a      	str	r2, [r3, #4]
  }
}
34015e82:	bf00      	nop
34015e84:	3708      	adds	r7, #8
34015e86:	46bd      	mov	sp, r7
34015e88:	bd80      	pop	{r7, pc}
34015e8a:	bf00      	nop
34015e8c:	52001c00 	.word	0x52001c00
34015e90:	42001c00 	.word	0x42001c00
34015e94:	3401b014 	.word	0x3401b014

34015e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
34015e98:	b580      	push	{r7, lr}
34015e9a:	b098      	sub	sp, #96	@ 0x60
34015e9c:	af02      	add	r7, sp, #8
34015e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
34015ea0:	687b      	ldr	r3, [r7, #4]
34015ea2:	2200      	movs	r2, #0
34015ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
34015ea8:	f7ed fba0 	bl	340035ec <HAL_GetTick>
34015eac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
34015eae:	687b      	ldr	r3, [r7, #4]
34015eb0:	681b      	ldr	r3, [r3, #0]
34015eb2:	681b      	ldr	r3, [r3, #0]
34015eb4:	f003 0308 	and.w	r3, r3, #8
34015eb8:	2b08      	cmp	r3, #8
34015eba:	d12f      	bne.n	34015f1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
34015ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
34015ec0:	9300      	str	r3, [sp, #0]
34015ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34015ec4:	2200      	movs	r2, #0
34015ec6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
34015eca:	6878      	ldr	r0, [r7, #4]
34015ecc:	f000 f88e 	bl	34015fec <UART_WaitOnFlagUntilTimeout>
34015ed0:	4603      	mov	r3, r0
34015ed2:	2b00      	cmp	r3, #0
34015ed4:	d022      	beq.n	34015f1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
34015ed6:	687b      	ldr	r3, [r7, #4]
34015ed8:	681b      	ldr	r3, [r3, #0]
34015eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34015edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34015ede:	e853 3f00 	ldrex	r3, [r3]
34015ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
34015ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34015ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
34015eea:	653b      	str	r3, [r7, #80]	@ 0x50
34015eec:	687b      	ldr	r3, [r7, #4]
34015eee:	681b      	ldr	r3, [r3, #0]
34015ef0:	461a      	mov	r2, r3
34015ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
34015ef4:	647b      	str	r3, [r7, #68]	@ 0x44
34015ef6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34015ef8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
34015efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
34015efc:	e841 2300 	strex	r3, r2, [r1]
34015f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
34015f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34015f04:	2b00      	cmp	r3, #0
34015f06:	d1e6      	bne.n	34015ed6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
34015f08:	687b      	ldr	r3, [r7, #4]
34015f0a:	2220      	movs	r2, #32
34015f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
34015f10:	687b      	ldr	r3, [r7, #4]
34015f12:	2200      	movs	r2, #0
34015f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
34015f18:	2303      	movs	r3, #3
34015f1a:	e063      	b.n	34015fe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
34015f1c:	687b      	ldr	r3, [r7, #4]
34015f1e:	681b      	ldr	r3, [r3, #0]
34015f20:	681b      	ldr	r3, [r3, #0]
34015f22:	f003 0304 	and.w	r3, r3, #4
34015f26:	2b04      	cmp	r3, #4
34015f28:	d149      	bne.n	34015fbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
34015f2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
34015f2e:	9300      	str	r3, [sp, #0]
34015f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34015f32:	2200      	movs	r2, #0
34015f34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34015f38:	6878      	ldr	r0, [r7, #4]
34015f3a:	f000 f857 	bl	34015fec <UART_WaitOnFlagUntilTimeout>
34015f3e:	4603      	mov	r3, r0
34015f40:	2b00      	cmp	r3, #0
34015f42:	d03c      	beq.n	34015fbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34015f44:	687b      	ldr	r3, [r7, #4]
34015f46:	681b      	ldr	r3, [r3, #0]
34015f48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34015f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34015f4c:	e853 3f00 	ldrex	r3, [r3]
34015f50:	623b      	str	r3, [r7, #32]
   return(result);
34015f52:	6a3b      	ldr	r3, [r7, #32]
34015f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
34015f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
34015f5a:	687b      	ldr	r3, [r7, #4]
34015f5c:	681b      	ldr	r3, [r3, #0]
34015f5e:	461a      	mov	r2, r3
34015f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34015f62:	633b      	str	r3, [r7, #48]	@ 0x30
34015f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34015f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
34015f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34015f6a:	e841 2300 	strex	r3, r2, [r1]
34015f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
34015f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34015f72:	2b00      	cmp	r3, #0
34015f74:	d1e6      	bne.n	34015f44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
34015f76:	687b      	ldr	r3, [r7, #4]
34015f78:	681b      	ldr	r3, [r3, #0]
34015f7a:	3308      	adds	r3, #8
34015f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34015f7e:	693b      	ldr	r3, [r7, #16]
34015f80:	e853 3f00 	ldrex	r3, [r3]
34015f84:	60fb      	str	r3, [r7, #12]
   return(result);
34015f86:	68fb      	ldr	r3, [r7, #12]
34015f88:	f023 0301 	bic.w	r3, r3, #1
34015f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
34015f8e:	687b      	ldr	r3, [r7, #4]
34015f90:	681b      	ldr	r3, [r3, #0]
34015f92:	3308      	adds	r3, #8
34015f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34015f96:	61fa      	str	r2, [r7, #28]
34015f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34015f9a:	69b9      	ldr	r1, [r7, #24]
34015f9c:	69fa      	ldr	r2, [r7, #28]
34015f9e:	e841 2300 	strex	r3, r2, [r1]
34015fa2:	617b      	str	r3, [r7, #20]
   return(result);
34015fa4:	697b      	ldr	r3, [r7, #20]
34015fa6:	2b00      	cmp	r3, #0
34015fa8:	d1e5      	bne.n	34015f76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
34015faa:	687b      	ldr	r3, [r7, #4]
34015fac:	2220      	movs	r2, #32
34015fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
34015fb2:	687b      	ldr	r3, [r7, #4]
34015fb4:	2200      	movs	r2, #0
34015fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
34015fba:	2303      	movs	r3, #3
34015fbc:	e012      	b.n	34015fe4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
34015fbe:	687b      	ldr	r3, [r7, #4]
34015fc0:	2220      	movs	r2, #32
34015fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
34015fc6:	687b      	ldr	r3, [r7, #4]
34015fc8:	2220      	movs	r2, #32
34015fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34015fce:	687b      	ldr	r3, [r7, #4]
34015fd0:	2200      	movs	r2, #0
34015fd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
34015fd4:	687b      	ldr	r3, [r7, #4]
34015fd6:	2200      	movs	r2, #0
34015fd8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
34015fda:	687b      	ldr	r3, [r7, #4]
34015fdc:	2200      	movs	r2, #0
34015fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
34015fe2:	2300      	movs	r3, #0
}
34015fe4:	4618      	mov	r0, r3
34015fe6:	3758      	adds	r7, #88	@ 0x58
34015fe8:	46bd      	mov	sp, r7
34015fea:	bd80      	pop	{r7, pc}

34015fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
34015fec:	b580      	push	{r7, lr}
34015fee:	b084      	sub	sp, #16
34015ff0:	af00      	add	r7, sp, #0
34015ff2:	60f8      	str	r0, [r7, #12]
34015ff4:	60b9      	str	r1, [r7, #8]
34015ff6:	603b      	str	r3, [r7, #0]
34015ff8:	4613      	mov	r3, r2
34015ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
34015ffc:	e04f      	b.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
34015ffe:	69bb      	ldr	r3, [r7, #24]
34016000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34016004:	d04b      	beq.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34016006:	f7ed faf1 	bl	340035ec <HAL_GetTick>
3401600a:	4602      	mov	r2, r0
3401600c:	683b      	ldr	r3, [r7, #0]
3401600e:	1ad3      	subs	r3, r2, r3
34016010:	69ba      	ldr	r2, [r7, #24]
34016012:	429a      	cmp	r2, r3
34016014:	d302      	bcc.n	3401601c <UART_WaitOnFlagUntilTimeout+0x30>
34016016:	69bb      	ldr	r3, [r7, #24]
34016018:	2b00      	cmp	r3, #0
3401601a:	d101      	bne.n	34016020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3401601c:	2303      	movs	r3, #3
3401601e:	e04e      	b.n	340160be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
34016020:	68fb      	ldr	r3, [r7, #12]
34016022:	681b      	ldr	r3, [r3, #0]
34016024:	681b      	ldr	r3, [r3, #0]
34016026:	f003 0304 	and.w	r3, r3, #4
3401602a:	2b00      	cmp	r3, #0
3401602c:	d037      	beq.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
3401602e:	68bb      	ldr	r3, [r7, #8]
34016030:	2b80      	cmp	r3, #128	@ 0x80
34016032:	d034      	beq.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
34016034:	68bb      	ldr	r3, [r7, #8]
34016036:	2b40      	cmp	r3, #64	@ 0x40
34016038:	d031      	beq.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3401603a:	68fb      	ldr	r3, [r7, #12]
3401603c:	681b      	ldr	r3, [r3, #0]
3401603e:	69db      	ldr	r3, [r3, #28]
34016040:	f003 0308 	and.w	r3, r3, #8
34016044:	2b08      	cmp	r3, #8
34016046:	d110      	bne.n	3401606a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
34016048:	68fb      	ldr	r3, [r7, #12]
3401604a:	681b      	ldr	r3, [r3, #0]
3401604c:	2208      	movs	r2, #8
3401604e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016050:	68f8      	ldr	r0, [r7, #12]
34016052:	f000 f838 	bl	340160c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
34016056:	68fb      	ldr	r3, [r7, #12]
34016058:	2208      	movs	r2, #8
3401605a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3401605e:	68fb      	ldr	r3, [r7, #12]
34016060:	2200      	movs	r2, #0
34016062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
34016066:	2301      	movs	r3, #1
34016068:	e029      	b.n	340160be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3401606a:	68fb      	ldr	r3, [r7, #12]
3401606c:	681b      	ldr	r3, [r3, #0]
3401606e:	69db      	ldr	r3, [r3, #28]
34016070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34016074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34016078:	d111      	bne.n	3401609e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401607a:	68fb      	ldr	r3, [r7, #12]
3401607c:	681b      	ldr	r3, [r3, #0]
3401607e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34016082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
34016084:	68f8      	ldr	r0, [r7, #12]
34016086:	f000 f81e 	bl	340160c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401608a:	68fb      	ldr	r3, [r7, #12]
3401608c:	2220      	movs	r2, #32
3401608e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
34016092:	68fb      	ldr	r3, [r7, #12]
34016094:	2200      	movs	r2, #0
34016096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3401609a:	2303      	movs	r3, #3
3401609c:	e00f      	b.n	340160be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401609e:	68fb      	ldr	r3, [r7, #12]
340160a0:	681b      	ldr	r3, [r3, #0]
340160a2:	69da      	ldr	r2, [r3, #28]
340160a4:	68bb      	ldr	r3, [r7, #8]
340160a6:	4013      	ands	r3, r2
340160a8:	68ba      	ldr	r2, [r7, #8]
340160aa:	429a      	cmp	r2, r3
340160ac:	bf0c      	ite	eq
340160ae:	2301      	moveq	r3, #1
340160b0:	2300      	movne	r3, #0
340160b2:	b2db      	uxtb	r3, r3
340160b4:	461a      	mov	r2, r3
340160b6:	79fb      	ldrb	r3, [r7, #7]
340160b8:	429a      	cmp	r2, r3
340160ba:	d0a0      	beq.n	34015ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
340160bc:	2300      	movs	r3, #0
}
340160be:	4618      	mov	r0, r3
340160c0:	3710      	adds	r7, #16
340160c2:	46bd      	mov	sp, r7
340160c4:	bd80      	pop	{r7, pc}

340160c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
340160c6:	b480      	push	{r7}
340160c8:	b095      	sub	sp, #84	@ 0x54
340160ca:	af00      	add	r7, sp, #0
340160cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
340160ce:	687b      	ldr	r3, [r7, #4]
340160d0:	681b      	ldr	r3, [r3, #0]
340160d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
340160d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
340160d6:	e853 3f00 	ldrex	r3, [r3]
340160da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
340160dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
340160de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
340160e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
340160e4:	687b      	ldr	r3, [r7, #4]
340160e6:	681b      	ldr	r3, [r3, #0]
340160e8:	461a      	mov	r2, r3
340160ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340160ec:	643b      	str	r3, [r7, #64]	@ 0x40
340160ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
340160f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
340160f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
340160f4:	e841 2300 	strex	r3, r2, [r1]
340160f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
340160fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
340160fc:	2b00      	cmp	r3, #0
340160fe:	d1e6      	bne.n	340160ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
34016100:	687b      	ldr	r3, [r7, #4]
34016102:	681b      	ldr	r3, [r3, #0]
34016104:	3308      	adds	r3, #8
34016106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016108:	6a3b      	ldr	r3, [r7, #32]
3401610a:	e853 3f00 	ldrex	r3, [r3]
3401610e:	61fb      	str	r3, [r7, #28]
   return(result);
34016110:	69fb      	ldr	r3, [r7, #28]
34016112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34016116:	f023 0301 	bic.w	r3, r3, #1
3401611a:	64bb      	str	r3, [r7, #72]	@ 0x48
3401611c:	687b      	ldr	r3, [r7, #4]
3401611e:	681b      	ldr	r3, [r3, #0]
34016120:	3308      	adds	r3, #8
34016122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
34016124:	62fa      	str	r2, [r7, #44]	@ 0x2c
34016126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3401612a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3401612c:	e841 2300 	strex	r3, r2, [r1]
34016130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
34016132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34016134:	2b00      	cmp	r3, #0
34016136:	d1e3      	bne.n	34016100 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34016138:	687b      	ldr	r3, [r7, #4]
3401613a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3401613c:	2b01      	cmp	r3, #1
3401613e:	d118      	bne.n	34016172 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
34016140:	687b      	ldr	r3, [r7, #4]
34016142:	681b      	ldr	r3, [r3, #0]
34016144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34016146:	68fb      	ldr	r3, [r7, #12]
34016148:	e853 3f00 	ldrex	r3, [r3]
3401614c:	60bb      	str	r3, [r7, #8]
   return(result);
3401614e:	68bb      	ldr	r3, [r7, #8]
34016150:	f023 0310 	bic.w	r3, r3, #16
34016154:	647b      	str	r3, [r7, #68]	@ 0x44
34016156:	687b      	ldr	r3, [r7, #4]
34016158:	681b      	ldr	r3, [r3, #0]
3401615a:	461a      	mov	r2, r3
3401615c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3401615e:	61bb      	str	r3, [r7, #24]
34016160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34016162:	6979      	ldr	r1, [r7, #20]
34016164:	69ba      	ldr	r2, [r7, #24]
34016166:	e841 2300 	strex	r3, r2, [r1]
3401616a:	613b      	str	r3, [r7, #16]
   return(result);
3401616c:	693b      	ldr	r3, [r7, #16]
3401616e:	2b00      	cmp	r3, #0
34016170:	d1e6      	bne.n	34016140 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34016172:	687b      	ldr	r3, [r7, #4]
34016174:	2220      	movs	r2, #32
34016176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401617a:	687b      	ldr	r3, [r7, #4]
3401617c:	2200      	movs	r2, #0
3401617e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34016180:	687b      	ldr	r3, [r7, #4]
34016182:	2200      	movs	r2, #0
34016184:	675a      	str	r2, [r3, #116]	@ 0x74
}
34016186:	bf00      	nop
34016188:	3754      	adds	r7, #84	@ 0x54
3401618a:	46bd      	mov	sp, r7
3401618c:	f85d 7b04 	ldr.w	r7, [sp], #4
34016190:	4770      	bx	lr
	...

34016194 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
34016194:	b580      	push	{r7, lr}
34016196:	b086      	sub	sp, #24
34016198:	af02      	add	r7, sp, #8
3401619a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3401619c:	2300      	movs	r3, #0
3401619e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
340161a0:	f7ed fa24 	bl	340035ec <HAL_GetTick>
340161a4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
340161a6:	687b      	ldr	r3, [r7, #4]
340161a8:	2b00      	cmp	r3, #0
340161aa:	d102      	bne.n	340161b2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
340161ac:	2301      	movs	r3, #1
340161ae:	73fb      	strb	r3, [r7, #15]
340161b0:	e2c8      	b.n	34016744 <HAL_XSPI_Init+0x5b0>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Check the parameters of the initialization structure */
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
340161b2:	687b      	ldr	r3, [r7, #4]
340161b4:	689b      	ldr	r3, [r3, #8]
340161b6:	2b00      	cmp	r3, #0
340161b8:	d008      	beq.n	340161cc <HAL_XSPI_Init+0x38>
340161ba:	687b      	ldr	r3, [r7, #4]
340161bc:	689b      	ldr	r3, [r3, #8]
340161be:	2b40      	cmp	r3, #64	@ 0x40
340161c0:	d004      	beq.n	340161cc <HAL_XSPI_Init+0x38>
340161c2:	f240 1161 	movw	r1, #353	@ 0x161
340161c6:	488a      	ldr	r0, [pc, #552]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
340161c8:	f7eb fa30 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
340161cc:	687b      	ldr	r3, [r7, #4]
340161ce:	68db      	ldr	r3, [r3, #12]
340161d0:	2b00      	cmp	r3, #0
340161d2:	d01d      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
340161d4:	687b      	ldr	r3, [r7, #4]
340161d6:	68db      	ldr	r3, [r3, #12]
340161d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340161dc:	d018      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
340161de:	687b      	ldr	r3, [r7, #4]
340161e0:	68db      	ldr	r3, [r3, #12]
340161e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340161e6:	d013      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
340161e8:	687b      	ldr	r3, [r7, #4]
340161ea:	68db      	ldr	r3, [r3, #12]
340161ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
340161f0:	d00e      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
340161f2:	687b      	ldr	r3, [r7, #4]
340161f4:	68db      	ldr	r3, [r3, #12]
340161f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340161fa:	d009      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
340161fc:	687b      	ldr	r3, [r7, #4]
340161fe:	68db      	ldr	r3, [r3, #12]
34016200:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
34016204:	d004      	beq.n	34016210 <HAL_XSPI_Init+0x7c>
34016206:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401620a:	4879      	ldr	r0, [pc, #484]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
3401620c:	f7eb fa0e 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
34016210:	687b      	ldr	r3, [r7, #4]
34016212:	691b      	ldr	r3, [r3, #16]
34016214:	2b00      	cmp	r3, #0
34016216:	f000 8081 	beq.w	3401631c <HAL_XSPI_Init+0x188>
3401621a:	687b      	ldr	r3, [r7, #4]
3401621c:	691b      	ldr	r3, [r3, #16]
3401621e:	2b01      	cmp	r3, #1
34016220:	d07c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016222:	687b      	ldr	r3, [r7, #4]
34016224:	691b      	ldr	r3, [r3, #16]
34016226:	2b02      	cmp	r3, #2
34016228:	d078      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401622a:	687b      	ldr	r3, [r7, #4]
3401622c:	691b      	ldr	r3, [r3, #16]
3401622e:	2b03      	cmp	r3, #3
34016230:	d074      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016232:	687b      	ldr	r3, [r7, #4]
34016234:	691b      	ldr	r3, [r3, #16]
34016236:	2b04      	cmp	r3, #4
34016238:	d070      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401623a:	687b      	ldr	r3, [r7, #4]
3401623c:	691b      	ldr	r3, [r3, #16]
3401623e:	2b05      	cmp	r3, #5
34016240:	d06c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016242:	687b      	ldr	r3, [r7, #4]
34016244:	691b      	ldr	r3, [r3, #16]
34016246:	2b06      	cmp	r3, #6
34016248:	d068      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401624a:	687b      	ldr	r3, [r7, #4]
3401624c:	691b      	ldr	r3, [r3, #16]
3401624e:	2b07      	cmp	r3, #7
34016250:	d064      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016252:	687b      	ldr	r3, [r7, #4]
34016254:	691b      	ldr	r3, [r3, #16]
34016256:	2b08      	cmp	r3, #8
34016258:	d060      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401625a:	687b      	ldr	r3, [r7, #4]
3401625c:	691b      	ldr	r3, [r3, #16]
3401625e:	2b09      	cmp	r3, #9
34016260:	d05c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016262:	687b      	ldr	r3, [r7, #4]
34016264:	691b      	ldr	r3, [r3, #16]
34016266:	2b0a      	cmp	r3, #10
34016268:	d058      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401626a:	687b      	ldr	r3, [r7, #4]
3401626c:	691b      	ldr	r3, [r3, #16]
3401626e:	2b0b      	cmp	r3, #11
34016270:	d054      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016272:	687b      	ldr	r3, [r7, #4]
34016274:	691b      	ldr	r3, [r3, #16]
34016276:	2b0c      	cmp	r3, #12
34016278:	d050      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401627a:	687b      	ldr	r3, [r7, #4]
3401627c:	691b      	ldr	r3, [r3, #16]
3401627e:	2b0d      	cmp	r3, #13
34016280:	d04c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016282:	687b      	ldr	r3, [r7, #4]
34016284:	691b      	ldr	r3, [r3, #16]
34016286:	2b0e      	cmp	r3, #14
34016288:	d048      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401628a:	687b      	ldr	r3, [r7, #4]
3401628c:	691b      	ldr	r3, [r3, #16]
3401628e:	2b0f      	cmp	r3, #15
34016290:	d044      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016292:	687b      	ldr	r3, [r7, #4]
34016294:	691b      	ldr	r3, [r3, #16]
34016296:	2b10      	cmp	r3, #16
34016298:	d040      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401629a:	687b      	ldr	r3, [r7, #4]
3401629c:	691b      	ldr	r3, [r3, #16]
3401629e:	2b11      	cmp	r3, #17
340162a0:	d03c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162a2:	687b      	ldr	r3, [r7, #4]
340162a4:	691b      	ldr	r3, [r3, #16]
340162a6:	2b12      	cmp	r3, #18
340162a8:	d038      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162aa:	687b      	ldr	r3, [r7, #4]
340162ac:	691b      	ldr	r3, [r3, #16]
340162ae:	2b13      	cmp	r3, #19
340162b0:	d034      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162b2:	687b      	ldr	r3, [r7, #4]
340162b4:	691b      	ldr	r3, [r3, #16]
340162b6:	2b14      	cmp	r3, #20
340162b8:	d030      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162ba:	687b      	ldr	r3, [r7, #4]
340162bc:	691b      	ldr	r3, [r3, #16]
340162be:	2b15      	cmp	r3, #21
340162c0:	d02c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162c2:	687b      	ldr	r3, [r7, #4]
340162c4:	691b      	ldr	r3, [r3, #16]
340162c6:	2b16      	cmp	r3, #22
340162c8:	d028      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162ca:	687b      	ldr	r3, [r7, #4]
340162cc:	691b      	ldr	r3, [r3, #16]
340162ce:	2b17      	cmp	r3, #23
340162d0:	d024      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162d2:	687b      	ldr	r3, [r7, #4]
340162d4:	691b      	ldr	r3, [r3, #16]
340162d6:	2b18      	cmp	r3, #24
340162d8:	d020      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162da:	687b      	ldr	r3, [r7, #4]
340162dc:	691b      	ldr	r3, [r3, #16]
340162de:	2b19      	cmp	r3, #25
340162e0:	d01c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162e2:	687b      	ldr	r3, [r7, #4]
340162e4:	691b      	ldr	r3, [r3, #16]
340162e6:	2b1a      	cmp	r3, #26
340162e8:	d018      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162ea:	687b      	ldr	r3, [r7, #4]
340162ec:	691b      	ldr	r3, [r3, #16]
340162ee:	2b1b      	cmp	r3, #27
340162f0:	d014      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162f2:	687b      	ldr	r3, [r7, #4]
340162f4:	691b      	ldr	r3, [r3, #16]
340162f6:	2b1c      	cmp	r3, #28
340162f8:	d010      	beq.n	3401631c <HAL_XSPI_Init+0x188>
340162fa:	687b      	ldr	r3, [r7, #4]
340162fc:	691b      	ldr	r3, [r3, #16]
340162fe:	2b1d      	cmp	r3, #29
34016300:	d00c      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016302:	687b      	ldr	r3, [r7, #4]
34016304:	691b      	ldr	r3, [r3, #16]
34016306:	2b1e      	cmp	r3, #30
34016308:	d008      	beq.n	3401631c <HAL_XSPI_Init+0x188>
3401630a:	687b      	ldr	r3, [r7, #4]
3401630c:	691b      	ldr	r3, [r3, #16]
3401630e:	2b1f      	cmp	r3, #31
34016310:	d004      	beq.n	3401631c <HAL_XSPI_Init+0x188>
34016312:	f240 1163 	movw	r1, #355	@ 0x163
34016316:	4836      	ldr	r0, [pc, #216]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
34016318:	f7eb f988 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3401631c:	687b      	ldr	r3, [r7, #4]
3401631e:	695b      	ldr	r3, [r3, #20]
34016320:	2b00      	cmp	r3, #0
34016322:	d003      	beq.n	3401632c <HAL_XSPI_Init+0x198>
34016324:	687b      	ldr	r3, [r7, #4]
34016326:	695b      	ldr	r3, [r3, #20]
34016328:	2b40      	cmp	r3, #64	@ 0x40
3401632a:	d904      	bls.n	34016336 <HAL_XSPI_Init+0x1a2>
3401632c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34016330:	482f      	ldr	r0, [pc, #188]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
34016332:	f7eb f97b 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
34016336:	687b      	ldr	r3, [r7, #4]
34016338:	699b      	ldr	r3, [r3, #24]
3401633a:	2b00      	cmp	r3, #0
3401633c:	d008      	beq.n	34016350 <HAL_XSPI_Init+0x1bc>
3401633e:	687b      	ldr	r3, [r7, #4]
34016340:	699b      	ldr	r3, [r3, #24]
34016342:	2b02      	cmp	r3, #2
34016344:	d004      	beq.n	34016350 <HAL_XSPI_Init+0x1bc>
34016346:	f240 1165 	movw	r1, #357	@ 0x165
3401634a:	4829      	ldr	r0, [pc, #164]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
3401634c:	f7eb f96e 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
34016350:	687b      	ldr	r3, [r7, #4]
34016352:	69db      	ldr	r3, [r3, #28]
34016354:	2b00      	cmp	r3, #0
34016356:	d008      	beq.n	3401636a <HAL_XSPI_Init+0x1d6>
34016358:	687b      	ldr	r3, [r7, #4]
3401635a:	69db      	ldr	r3, [r3, #28]
3401635c:	2b01      	cmp	r3, #1
3401635e:	d004      	beq.n	3401636a <HAL_XSPI_Init+0x1d6>
34016360:	f44f 71b3 	mov.w	r1, #358	@ 0x166
34016364:	4822      	ldr	r0, [pc, #136]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
34016366:	f7eb f961 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3401636a:	687b      	ldr	r3, [r7, #4]
3401636c:	6a1b      	ldr	r3, [r3, #32]
3401636e:	2b00      	cmp	r3, #0
34016370:	d018      	beq.n	340163a4 <HAL_XSPI_Init+0x210>
34016372:	687b      	ldr	r3, [r7, #4]
34016374:	6a1b      	ldr	r3, [r3, #32]
34016376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401637a:	d013      	beq.n	340163a4 <HAL_XSPI_Init+0x210>
3401637c:	687b      	ldr	r3, [r7, #4]
3401637e:	6a1b      	ldr	r3, [r3, #32]
34016380:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34016384:	d00e      	beq.n	340163a4 <HAL_XSPI_Init+0x210>
34016386:	687b      	ldr	r3, [r7, #4]
34016388:	6a1b      	ldr	r3, [r3, #32]
3401638a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401638e:	d009      	beq.n	340163a4 <HAL_XSPI_Init+0x210>
34016390:	687b      	ldr	r3, [r7, #4]
34016392:	6a1b      	ldr	r3, [r3, #32]
34016394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34016398:	d004      	beq.n	340163a4 <HAL_XSPI_Init+0x210>
3401639a:	f240 1167 	movw	r1, #359	@ 0x167
3401639e:	4814      	ldr	r0, [pc, #80]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
340163a0:	f7eb f944 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
340163a4:	687b      	ldr	r3, [r7, #4]
340163a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340163a8:	2bff      	cmp	r3, #255	@ 0xff
340163aa:	d904      	bls.n	340163b6 <HAL_XSPI_Init+0x222>
340163ac:	f44f 71b4 	mov.w	r1, #360	@ 0x168
340163b0:	480f      	ldr	r0, [pc, #60]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
340163b2:	f7eb f93b 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
340163b6:	687b      	ldr	r3, [r7, #4]
340163b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340163ba:	2b00      	cmp	r3, #0
340163bc:	d009      	beq.n	340163d2 <HAL_XSPI_Init+0x23e>
340163be:	687b      	ldr	r3, [r7, #4]
340163c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340163c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340163c6:	d004      	beq.n	340163d2 <HAL_XSPI_Init+0x23e>
340163c8:	f240 1169 	movw	r1, #361	@ 0x169
340163cc:	4808      	ldr	r0, [pc, #32]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
340163ce:	f7eb f92d 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
340163d2:	687b      	ldr	r3, [r7, #4]
340163d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340163d6:	2b00      	cmp	r3, #0
340163d8:	d00c      	beq.n	340163f4 <HAL_XSPI_Init+0x260>
340163da:	687b      	ldr	r3, [r7, #4]
340163dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340163de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340163e2:	d007      	beq.n	340163f4 <HAL_XSPI_Init+0x260>
340163e4:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
340163e8:	4801      	ldr	r0, [pc, #4]	@ (340163f0 <HAL_XSPI_Init+0x25c>)
340163ea:	f7eb f91f 	bl	3400162c <assert_failed>
340163ee:	e001      	b.n	340163f4 <HAL_XSPI_Init+0x260>
340163f0:	3401b04c 	.word	0x3401b04c
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
340163f4:	687b      	ldr	r3, [r7, #4]
340163f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340163f8:	2b00      	cmp	r3, #0
340163fa:	f000 8081 	beq.w	34016500 <HAL_XSPI_Init+0x36c>
340163fe:	687b      	ldr	r3, [r7, #4]
34016400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016402:	2b01      	cmp	r3, #1
34016404:	d07c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016406:	687b      	ldr	r3, [r7, #4]
34016408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401640a:	2b02      	cmp	r3, #2
3401640c:	d078      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401640e:	687b      	ldr	r3, [r7, #4]
34016410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016412:	2b03      	cmp	r3, #3
34016414:	d074      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016416:	687b      	ldr	r3, [r7, #4]
34016418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401641a:	2b04      	cmp	r3, #4
3401641c:	d070      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401641e:	687b      	ldr	r3, [r7, #4]
34016420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016422:	2b05      	cmp	r3, #5
34016424:	d06c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016426:	687b      	ldr	r3, [r7, #4]
34016428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401642a:	2b06      	cmp	r3, #6
3401642c:	d068      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401642e:	687b      	ldr	r3, [r7, #4]
34016430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016432:	2b07      	cmp	r3, #7
34016434:	d064      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016436:	687b      	ldr	r3, [r7, #4]
34016438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401643a:	2b08      	cmp	r3, #8
3401643c:	d060      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401643e:	687b      	ldr	r3, [r7, #4]
34016440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016442:	2b09      	cmp	r3, #9
34016444:	d05c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016446:	687b      	ldr	r3, [r7, #4]
34016448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401644a:	2b0a      	cmp	r3, #10
3401644c:	d058      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401644e:	687b      	ldr	r3, [r7, #4]
34016450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016452:	2b0b      	cmp	r3, #11
34016454:	d054      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016456:	687b      	ldr	r3, [r7, #4]
34016458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401645a:	2b0c      	cmp	r3, #12
3401645c:	d050      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401645e:	687b      	ldr	r3, [r7, #4]
34016460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016462:	2b0d      	cmp	r3, #13
34016464:	d04c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016466:	687b      	ldr	r3, [r7, #4]
34016468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401646a:	2b0e      	cmp	r3, #14
3401646c:	d048      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401646e:	687b      	ldr	r3, [r7, #4]
34016470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016472:	2b0f      	cmp	r3, #15
34016474:	d044      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016476:	687b      	ldr	r3, [r7, #4]
34016478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401647a:	2b10      	cmp	r3, #16
3401647c:	d040      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401647e:	687b      	ldr	r3, [r7, #4]
34016480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016482:	2b11      	cmp	r3, #17
34016484:	d03c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016486:	687b      	ldr	r3, [r7, #4]
34016488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401648a:	2b12      	cmp	r3, #18
3401648c:	d038      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401648e:	687b      	ldr	r3, [r7, #4]
34016490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016492:	2b13      	cmp	r3, #19
34016494:	d034      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
34016496:	687b      	ldr	r3, [r7, #4]
34016498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401649a:	2b14      	cmp	r3, #20
3401649c:	d030      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
3401649e:	687b      	ldr	r3, [r7, #4]
340164a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164a2:	2b15      	cmp	r3, #21
340164a4:	d02c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164a6:	687b      	ldr	r3, [r7, #4]
340164a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164aa:	2b16      	cmp	r3, #22
340164ac:	d028      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164ae:	687b      	ldr	r3, [r7, #4]
340164b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164b2:	2b17      	cmp	r3, #23
340164b4:	d024      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164b6:	687b      	ldr	r3, [r7, #4]
340164b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164ba:	2b18      	cmp	r3, #24
340164bc:	d020      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164be:	687b      	ldr	r3, [r7, #4]
340164c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164c2:	2b19      	cmp	r3, #25
340164c4:	d01c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164c6:	687b      	ldr	r3, [r7, #4]
340164c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164ca:	2b1a      	cmp	r3, #26
340164cc:	d018      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164ce:	687b      	ldr	r3, [r7, #4]
340164d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164d2:	2b1b      	cmp	r3, #27
340164d4:	d014      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164d6:	687b      	ldr	r3, [r7, #4]
340164d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164da:	2b1c      	cmp	r3, #28
340164dc:	d010      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164de:	687b      	ldr	r3, [r7, #4]
340164e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164e2:	2b1d      	cmp	r3, #29
340164e4:	d00c      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164e6:	687b      	ldr	r3, [r7, #4]
340164e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164ea:	2b1e      	cmp	r3, #30
340164ec:	d008      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164ee:	687b      	ldr	r3, [r7, #4]
340164f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340164f2:	2b1f      	cmp	r3, #31
340164f4:	d004      	beq.n	34016500 <HAL_XSPI_Init+0x36c>
340164f6:	f240 116b 	movw	r1, #363	@ 0x16b
340164fa:	4895      	ldr	r0, [pc, #596]	@ (34016750 <HAL_XSPI_Init+0x5bc>)
340164fc:	f7eb f896 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
34016500:	687b      	ldr	r3, [r7, #4]
34016502:	685b      	ldr	r3, [r3, #4]
34016504:	2b00      	cmp	r3, #0
34016506:	d003      	beq.n	34016510 <HAL_XSPI_Init+0x37c>
34016508:	687b      	ldr	r3, [r7, #4]
3401650a:	685b      	ldr	r3, [r3, #4]
3401650c:	2b40      	cmp	r3, #64	@ 0x40
3401650e:	d904      	bls.n	3401651a <HAL_XSPI_Init+0x386>
34016510:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
34016514:	488e      	ldr	r0, [pc, #568]	@ (34016750 <HAL_XSPI_Init+0x5bc>)
34016516:	f7eb f889 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3401651a:	687b      	ldr	r3, [r7, #4]
3401651c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3401651e:	2bff      	cmp	r3, #255	@ 0xff
34016520:	d904      	bls.n	3401652c <HAL_XSPI_Init+0x398>
34016522:	f240 116d 	movw	r1, #365	@ 0x16d
34016526:	488a      	ldr	r0, [pc, #552]	@ (34016750 <HAL_XSPI_Init+0x5bc>)
34016528:	f7eb f880 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3401652c:	687b      	ldr	r3, [r7, #4]
3401652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016530:	2b00      	cmp	r3, #0
34016532:	d009      	beq.n	34016548 <HAL_XSPI_Init+0x3b4>
34016534:	687b      	ldr	r3, [r7, #4]
34016536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401653c:	d004      	beq.n	34016548 <HAL_XSPI_Init+0x3b4>
3401653e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
34016542:	4883      	ldr	r0, [pc, #524]	@ (34016750 <HAL_XSPI_Init+0x5bc>)
34016544:	f7eb f872 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
34016548:	687b      	ldr	r3, [r7, #4]
3401654a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3401654c:	2b00      	cmp	r3, #0
3401654e:	d009      	beq.n	34016564 <HAL_XSPI_Init+0x3d0>
34016550:	687b      	ldr	r3, [r7, #4]
34016552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016558:	d004      	beq.n	34016564 <HAL_XSPI_Init+0x3d0>
3401655a:	f240 116f 	movw	r1, #367	@ 0x16f
3401655e:	487c      	ldr	r0, [pc, #496]	@ (34016750 <HAL_XSPI_Init+0x5bc>)
34016560:	f7eb f864 	bl	3400162c <assert_failed>
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016564:	687b      	ldr	r3, [r7, #4]
34016566:	2200      	movs	r2, #0
34016568:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3401656a:	687b      	ldr	r3, [r7, #4]
3401656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3401656e:	2b00      	cmp	r3, #0
34016570:	f040 80e8 	bne.w	34016744 <HAL_XSPI_Init+0x5b0>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
34016574:	6878      	ldr	r0, [r7, #4]
34016576:	f000 f8fb 	bl	34016770 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3401657a:	f241 3188 	movw	r1, #5000	@ 0x1388
3401657e:	6878      	ldr	r0, [r7, #4]
34016580:	f000 fdc4 	bl	3401710c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
34016584:	687b      	ldr	r3, [r7, #4]
34016586:	681b      	ldr	r3, [r3, #0]
34016588:	689a      	ldr	r2, [r3, #8]
3401658a:	4b72      	ldr	r3, [pc, #456]	@ (34016754 <HAL_XSPI_Init+0x5c0>)
3401658c:	4013      	ands	r3, r2
3401658e:	687a      	ldr	r2, [r7, #4]
34016590:	68d1      	ldr	r1, [r2, #12]
34016592:	687a      	ldr	r2, [r7, #4]
34016594:	6912      	ldr	r2, [r2, #16]
34016596:	0412      	lsls	r2, r2, #16
34016598:	4311      	orrs	r1, r2
3401659a:	687a      	ldr	r2, [r7, #4]
3401659c:	6952      	ldr	r2, [r2, #20]
3401659e:	3a01      	subs	r2, #1
340165a0:	0212      	lsls	r2, r2, #8
340165a2:	4311      	orrs	r1, r2
340165a4:	687a      	ldr	r2, [r7, #4]
340165a6:	69d2      	ldr	r2, [r2, #28]
340165a8:	4311      	orrs	r1, r2
340165aa:	687a      	ldr	r2, [r7, #4]
340165ac:	6812      	ldr	r2, [r2, #0]
340165ae:	430b      	orrs	r3, r1
340165b0:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
340165b2:	687b      	ldr	r3, [r7, #4]
340165b4:	681b      	ldr	r3, [r3, #0]
340165b6:	68db      	ldr	r3, [r3, #12]
340165b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
340165bc:	687b      	ldr	r3, [r7, #4]
340165be:	6a1a      	ldr	r2, [r3, #32]
340165c0:	687b      	ldr	r3, [r7, #4]
340165c2:	681b      	ldr	r3, [r3, #0]
340165c4:	430a      	orrs	r2, r1
340165c6:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
340165c8:	687b      	ldr	r3, [r7, #4]
340165ca:	681b      	ldr	r3, [r3, #0]
340165cc:	691b      	ldr	r3, [r3, #16]
340165ce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
340165d2:	687b      	ldr	r3, [r7, #4]
340165d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340165d6:	041a      	lsls	r2, r3, #16
340165d8:	687b      	ldr	r3, [r7, #4]
340165da:	681b      	ldr	r3, [r3, #0]
340165dc:	430a      	orrs	r2, r1
340165de:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
340165e0:	687b      	ldr	r3, [r7, #4]
340165e2:	681b      	ldr	r3, [r3, #0]
340165e4:	691b      	ldr	r3, [r3, #16]
340165e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
340165ea:	687b      	ldr	r3, [r7, #4]
340165ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
340165ee:	687b      	ldr	r3, [r7, #4]
340165f0:	681b      	ldr	r3, [r3, #0]
340165f2:	430a      	orrs	r2, r1
340165f4:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
340165f6:	687b      	ldr	r3, [r7, #4]
340165f8:	681b      	ldr	r3, [r3, #0]
340165fa:	687a      	ldr	r2, [r7, #4]
340165fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
340165fe:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
34016600:	687b      	ldr	r3, [r7, #4]
34016602:	681b      	ldr	r3, [r3, #0]
34016604:	681b      	ldr	r3, [r3, #0]
34016606:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3401660a:	687b      	ldr	r3, [r7, #4]
3401660c:	685b      	ldr	r3, [r3, #4]
3401660e:	3b01      	subs	r3, #1
34016610:	021a      	lsls	r2, r3, #8
34016612:	687b      	ldr	r3, [r7, #4]
34016614:	681b      	ldr	r3, [r3, #0]
34016616:	430a      	orrs	r2, r1
34016618:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401661a:	687b      	ldr	r3, [r7, #4]
3401661c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3401661e:	9300      	str	r3, [sp, #0]
34016620:	68bb      	ldr	r3, [r7, #8]
34016622:	2200      	movs	r2, #0
34016624:	2120      	movs	r1, #32
34016626:	6878      	ldr	r0, [r7, #4]
34016628:	f000 fd7f 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
3401662c:	4603      	mov	r3, r0
3401662e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
34016630:	7bfb      	ldrb	r3, [r7, #15]
34016632:	2b00      	cmp	r3, #0
34016634:	f040 8086 	bne.w	34016744 <HAL_XSPI_Init+0x5b0>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
34016638:	687b      	ldr	r3, [r7, #4]
3401663a:	681b      	ldr	r3, [r3, #0]
3401663c:	68db      	ldr	r3, [r3, #12]
3401663e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34016642:	687b      	ldr	r3, [r7, #4]
34016644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34016646:	687b      	ldr	r3, [r7, #4]
34016648:	681b      	ldr	r3, [r3, #0]
3401664a:	430a      	orrs	r2, r1
3401664c:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3401664e:	687b      	ldr	r3, [r7, #4]
34016650:	681b      	ldr	r3, [r3, #0]
34016652:	4a41      	ldr	r2, [pc, #260]	@ (34016758 <HAL_XSPI_Init+0x5c4>)
34016654:	4293      	cmp	r3, r2
34016656:	d018      	beq.n	3401668a <HAL_XSPI_Init+0x4f6>
34016658:	687b      	ldr	r3, [r7, #4]
3401665a:	681b      	ldr	r3, [r3, #0]
3401665c:	4a3f      	ldr	r2, [pc, #252]	@ (3401675c <HAL_XSPI_Init+0x5c8>)
3401665e:	4293      	cmp	r3, r2
34016660:	d013      	beq.n	3401668a <HAL_XSPI_Init+0x4f6>
34016662:	687b      	ldr	r3, [r7, #4]
34016664:	681b      	ldr	r3, [r3, #0]
34016666:	4a3e      	ldr	r2, [pc, #248]	@ (34016760 <HAL_XSPI_Init+0x5cc>)
34016668:	4293      	cmp	r3, r2
3401666a:	d00e      	beq.n	3401668a <HAL_XSPI_Init+0x4f6>
3401666c:	687b      	ldr	r3, [r7, #4]
3401666e:	681b      	ldr	r3, [r3, #0]
34016670:	4a3c      	ldr	r2, [pc, #240]	@ (34016764 <HAL_XSPI_Init+0x5d0>)
34016672:	4293      	cmp	r3, r2
34016674:	d009      	beq.n	3401668a <HAL_XSPI_Init+0x4f6>
34016676:	687b      	ldr	r3, [r7, #4]
34016678:	681b      	ldr	r3, [r3, #0]
3401667a:	4a3b      	ldr	r2, [pc, #236]	@ (34016768 <HAL_XSPI_Init+0x5d4>)
3401667c:	4293      	cmp	r3, r2
3401667e:	d004      	beq.n	3401668a <HAL_XSPI_Init+0x4f6>
34016680:	687b      	ldr	r3, [r7, #4]
34016682:	681b      	ldr	r3, [r3, #0]
34016684:	4a39      	ldr	r2, [pc, #228]	@ (3401676c <HAL_XSPI_Init+0x5d8>)
34016686:	4293      	cmp	r3, r2
34016688:	d10f      	bne.n	340166aa <HAL_XSPI_Init+0x516>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401668a:	687b      	ldr	r3, [r7, #4]
3401668c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3401668e:	9300      	str	r3, [sp, #0]
34016690:	68bb      	ldr	r3, [r7, #8]
34016692:	2200      	movs	r2, #0
34016694:	2120      	movs	r1, #32
34016696:	6878      	ldr	r0, [r7, #4]
34016698:	f000 fd47 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
3401669c:	4603      	mov	r3, r0
3401669e:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
340166a0:	7bfb      	ldrb	r3, [r7, #15]
340166a2:	2b00      	cmp	r3, #0
340166a4:	d001      	beq.n	340166aa <HAL_XSPI_Init+0x516>
          {
            return status;
340166a6:	7bfb      	ldrb	r3, [r7, #15]
340166a8:	e04d      	b.n	34016746 <HAL_XSPI_Init+0x5b2>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
340166aa:	687b      	ldr	r3, [r7, #4]
340166ac:	681b      	ldr	r3, [r3, #0]
340166ae:	681b      	ldr	r3, [r3, #0]
340166b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340166b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
340166b8:	687a      	ldr	r2, [r7, #4]
340166ba:	6891      	ldr	r1, [r2, #8]
340166bc:	687a      	ldr	r2, [r7, #4]
340166be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
340166c0:	4311      	orrs	r1, r2
340166c2:	687a      	ldr	r2, [r7, #4]
340166c4:	6812      	ldr	r2, [r2, #0]
340166c6:	430b      	orrs	r3, r1
340166c8:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
340166ca:	687b      	ldr	r3, [r7, #4]
340166cc:	681b      	ldr	r3, [r3, #0]
340166ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
340166d2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
340166d6:	687b      	ldr	r3, [r7, #4]
340166d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340166da:	687b      	ldr	r3, [r7, #4]
340166dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340166de:	431a      	orrs	r2, r3
340166e0:	687b      	ldr	r3, [r7, #4]
340166e2:	681b      	ldr	r3, [r3, #0]
340166e4:	430a      	orrs	r2, r1
340166e6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
340166ea:	687b      	ldr	r3, [r7, #4]
340166ec:	681b      	ldr	r3, [r3, #0]
340166ee:	681a      	ldr	r2, [r3, #0]
340166f0:	687b      	ldr	r3, [r7, #4]
340166f2:	681b      	ldr	r3, [r3, #0]
340166f4:	f042 0201 	orr.w	r2, r2, #1
340166f8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
340166fa:	687b      	ldr	r3, [r7, #4]
340166fc:	699b      	ldr	r3, [r3, #24]
340166fe:	2b02      	cmp	r3, #2
34016700:	d107      	bne.n	34016712 <HAL_XSPI_Init+0x57e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
34016702:	687b      	ldr	r3, [r7, #4]
34016704:	681b      	ldr	r3, [r3, #0]
34016706:	689a      	ldr	r2, [r3, #8]
34016708:	687b      	ldr	r3, [r7, #4]
3401670a:	681b      	ldr	r3, [r3, #0]
3401670c:	f042 0202 	orr.w	r2, r2, #2
34016710:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
34016712:	687b      	ldr	r3, [r7, #4]
34016714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401671a:	d107      	bne.n	3401672c <HAL_XSPI_Init+0x598>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3401671c:	687b      	ldr	r3, [r7, #4]
3401671e:	681b      	ldr	r3, [r3, #0]
34016720:	689a      	ldr	r2, [r3, #8]
34016722:	687b      	ldr	r3, [r7, #4]
34016724:	681b      	ldr	r3, [r3, #0]
34016726:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3401672a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401672c:	687b      	ldr	r3, [r7, #4]
3401672e:	68db      	ldr	r3, [r3, #12]
34016730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016734:	d103      	bne.n	3401673e <HAL_XSPI_Init+0x5aa>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
34016736:	687b      	ldr	r3, [r7, #4]
34016738:	2201      	movs	r2, #1
3401673a:	659a      	str	r2, [r3, #88]	@ 0x58
3401673c:	e002      	b.n	34016744 <HAL_XSPI_Init+0x5b0>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3401673e:	687b      	ldr	r3, [r7, #4]
34016740:	2202      	movs	r2, #2
34016742:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
34016744:	7bfb      	ldrb	r3, [r7, #15]
}
34016746:	4618      	mov	r0, r3
34016748:	3710      	adds	r7, #16
3401674a:	46bd      	mov	sp, r7
3401674c:	bd80      	pop	{r7, pc}
3401674e:	bf00      	nop
34016750:	3401b04c 	.word	0x3401b04c
34016754:	f8e0c0fc 	.word	0xf8e0c0fc
34016758:	58025000 	.word	0x58025000
3401675c:	48025000 	.word	0x48025000
34016760:	5802a000 	.word	0x5802a000
34016764:	4802a000 	.word	0x4802a000
34016768:	5802d000 	.word	0x5802d000
3401676c:	4802d000 	.word	0x4802d000

34016770 <HAL_XSPI_MspInit>:
  * @brief  Initialize the XSPI MSP.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_MspInit(XSPI_HandleTypeDef *hxspi)
{
34016770:	b480      	push	{r7}
34016772:	b083      	sub	sp, #12
34016774:	af00      	add	r7, sp, #0
34016776:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_MspInit can be implemented in the user file
   */
}
34016778:	bf00      	nop
3401677a:	370c      	adds	r7, #12
3401677c:	46bd      	mov	sp, r7
3401677e:	f85d 7b04 	ldr.w	r7, [sp], #4
34016782:	4770      	bx	lr

34016784 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
34016784:	b580      	push	{r7, lr}
34016786:	b08a      	sub	sp, #40	@ 0x28
34016788:	af02      	add	r7, sp, #8
3401678a:	60f8      	str	r0, [r7, #12]
3401678c:	60b9      	str	r1, [r7, #8]
3401678e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
34016790:	f7ec ff2c 	bl	340035ec <HAL_GetTick>
34016794:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
34016796:	68bb      	ldr	r3, [r7, #8]
34016798:	681b      	ldr	r3, [r3, #0]
3401679a:	2b00      	cmp	r3, #0
3401679c:	d010      	beq.n	340167c0 <HAL_XSPI_Command+0x3c>
3401679e:	68bb      	ldr	r3, [r7, #8]
340167a0:	681b      	ldr	r3, [r3, #0]
340167a2:	2b01      	cmp	r3, #1
340167a4:	d00c      	beq.n	340167c0 <HAL_XSPI_Command+0x3c>
340167a6:	68bb      	ldr	r3, [r7, #8]
340167a8:	681b      	ldr	r3, [r3, #0]
340167aa:	2b02      	cmp	r3, #2
340167ac:	d008      	beq.n	340167c0 <HAL_XSPI_Command+0x3c>
340167ae:	68bb      	ldr	r3, [r7, #8]
340167b0:	681b      	ldr	r3, [r3, #0]
340167b2:	2b03      	cmp	r3, #3
340167b4:	d004      	beq.n	340167c0 <HAL_XSPI_Command+0x3c>
340167b6:	f240 313e 	movw	r1, #830	@ 0x33e
340167ba:	4887      	ldr	r0, [pc, #540]	@ (340169d8 <HAL_XSPI_Command+0x254>)
340167bc:	f7ea ff36 	bl	3400162c <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
340167c0:	68fb      	ldr	r3, [r7, #12]
340167c2:	689b      	ldr	r3, [r3, #8]
340167c4:	2b00      	cmp	r3, #0
340167c6:	d120      	bne.n	3401680a <HAL_XSPI_Command+0x86>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
340167c8:	68bb      	ldr	r3, [r7, #8]
340167ca:	685b      	ldr	r3, [r3, #4]
340167cc:	2b00      	cmp	r3, #0
340167ce:	d01c      	beq.n	3401680a <HAL_XSPI_Command+0x86>
340167d0:	68bb      	ldr	r3, [r7, #8]
340167d2:	685b      	ldr	r3, [r3, #4]
340167d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340167d8:	d017      	beq.n	3401680a <HAL_XSPI_Command+0x86>
340167da:	68bb      	ldr	r3, [r7, #8]
340167dc:	685b      	ldr	r3, [r3, #4]
340167de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340167e2:	d012      	beq.n	3401680a <HAL_XSPI_Command+0x86>
340167e4:	68bb      	ldr	r3, [r7, #8]
340167e6:	685b      	ldr	r3, [r3, #4]
340167e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
340167ec:	d00d      	beq.n	3401680a <HAL_XSPI_Command+0x86>
340167ee:	68bb      	ldr	r3, [r7, #8]
340167f0:	685b      	ldr	r3, [r3, #4]
340167f2:	2b00      	cmp	r3, #0
340167f4:	d009      	beq.n	3401680a <HAL_XSPI_Command+0x86>
340167f6:	68bb      	ldr	r3, [r7, #8]
340167f8:	685b      	ldr	r3, [r3, #4]
340167fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340167fe:	d004      	beq.n	3401680a <HAL_XSPI_Command+0x86>
34016800:	f240 3141 	movw	r1, #833	@ 0x341
34016804:	4874      	ldr	r0, [pc, #464]	@ (340169d8 <HAL_XSPI_Command+0x254>)
34016806:	f7ea ff11 	bl	3400162c <assert_failed>
  }

  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3401680a:	68bb      	ldr	r3, [r7, #8]
3401680c:	68db      	ldr	r3, [r3, #12]
3401680e:	2b00      	cmp	r3, #0
34016810:	d014      	beq.n	3401683c <HAL_XSPI_Command+0xb8>
34016812:	68bb      	ldr	r3, [r7, #8]
34016814:	68db      	ldr	r3, [r3, #12]
34016816:	2b01      	cmp	r3, #1
34016818:	d010      	beq.n	3401683c <HAL_XSPI_Command+0xb8>
3401681a:	68bb      	ldr	r3, [r7, #8]
3401681c:	68db      	ldr	r3, [r3, #12]
3401681e:	2b02      	cmp	r3, #2
34016820:	d00c      	beq.n	3401683c <HAL_XSPI_Command+0xb8>
34016822:	68bb      	ldr	r3, [r7, #8]
34016824:	68db      	ldr	r3, [r3, #12]
34016826:	2b03      	cmp	r3, #3
34016828:	d008      	beq.n	3401683c <HAL_XSPI_Command+0xb8>
3401682a:	68bb      	ldr	r3, [r7, #8]
3401682c:	68db      	ldr	r3, [r3, #12]
3401682e:	2b04      	cmp	r3, #4
34016830:	d004      	beq.n	3401683c <HAL_XSPI_Command+0xb8>
34016832:	f44f 7151 	mov.w	r1, #836	@ 0x344
34016836:	4868      	ldr	r0, [pc, #416]	@ (340169d8 <HAL_XSPI_Command+0x254>)
34016838:	f7ea fef8 	bl	3400162c <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401683c:	68bb      	ldr	r3, [r7, #8]
3401683e:	68db      	ldr	r3, [r3, #12]
34016840:	2b00      	cmp	r3, #0
34016842:	d021      	beq.n	34016888 <HAL_XSPI_Command+0x104>
  {
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
34016844:	68bb      	ldr	r3, [r7, #8]
34016846:	691b      	ldr	r3, [r3, #16]
34016848:	2b00      	cmp	r3, #0
3401684a:	d010      	beq.n	3401686e <HAL_XSPI_Command+0xea>
3401684c:	68bb      	ldr	r3, [r7, #8]
3401684e:	691b      	ldr	r3, [r3, #16]
34016850:	2b10      	cmp	r3, #16
34016852:	d00c      	beq.n	3401686e <HAL_XSPI_Command+0xea>
34016854:	68bb      	ldr	r3, [r7, #8]
34016856:	691b      	ldr	r3, [r3, #16]
34016858:	2b20      	cmp	r3, #32
3401685a:	d008      	beq.n	3401686e <HAL_XSPI_Command+0xea>
3401685c:	68bb      	ldr	r3, [r7, #8]
3401685e:	691b      	ldr	r3, [r3, #16]
34016860:	2b30      	cmp	r3, #48	@ 0x30
34016862:	d004      	beq.n	3401686e <HAL_XSPI_Command+0xea>
34016864:	f240 3147 	movw	r1, #839	@ 0x347
34016868:	485b      	ldr	r0, [pc, #364]	@ (340169d8 <HAL_XSPI_Command+0x254>)
3401686a:	f7ea fedf 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3401686e:	68bb      	ldr	r3, [r7, #8]
34016870:	695b      	ldr	r3, [r3, #20]
34016872:	2b00      	cmp	r3, #0
34016874:	d008      	beq.n	34016888 <HAL_XSPI_Command+0x104>
34016876:	68bb      	ldr	r3, [r7, #8]
34016878:	695b      	ldr	r3, [r3, #20]
3401687a:	2b08      	cmp	r3, #8
3401687c:	d004      	beq.n	34016888 <HAL_XSPI_Command+0x104>
3401687e:	f44f 7152 	mov.w	r1, #840	@ 0x348
34016882:	4855      	ldr	r0, [pc, #340]	@ (340169d8 <HAL_XSPI_Command+0x254>)
34016884:	f7ea fed2 	bl	3400162c <assert_failed>
  }

  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
34016888:	68bb      	ldr	r3, [r7, #8]
3401688a:	69db      	ldr	r3, [r3, #28]
3401688c:	2b00      	cmp	r3, #0
3401688e:	d018      	beq.n	340168c2 <HAL_XSPI_Command+0x13e>
34016890:	68bb      	ldr	r3, [r7, #8]
34016892:	69db      	ldr	r3, [r3, #28]
34016894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34016898:	d013      	beq.n	340168c2 <HAL_XSPI_Command+0x13e>
3401689a:	68bb      	ldr	r3, [r7, #8]
3401689c:	69db      	ldr	r3, [r3, #28]
3401689e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340168a2:	d00e      	beq.n	340168c2 <HAL_XSPI_Command+0x13e>
340168a4:	68bb      	ldr	r3, [r7, #8]
340168a6:	69db      	ldr	r3, [r3, #28]
340168a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340168ac:	d009      	beq.n	340168c2 <HAL_XSPI_Command+0x13e>
340168ae:	68bb      	ldr	r3, [r7, #8]
340168b0:	69db      	ldr	r3, [r3, #28]
340168b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340168b6:	d004      	beq.n	340168c2 <HAL_XSPI_Command+0x13e>
340168b8:	f240 314b 	movw	r1, #843	@ 0x34b
340168bc:	4846      	ldr	r0, [pc, #280]	@ (340169d8 <HAL_XSPI_Command+0x254>)
340168be:	f7ea feb5 	bl	3400162c <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
340168c2:	68bb      	ldr	r3, [r7, #8]
340168c4:	69db      	ldr	r3, [r3, #28]
340168c6:	2b00      	cmp	r3, #0
340168c8:	d025      	beq.n	34016916 <HAL_XSPI_Command+0x192>
  {
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
340168ca:	68bb      	ldr	r3, [r7, #8]
340168cc:	6a1b      	ldr	r3, [r3, #32]
340168ce:	2b00      	cmp	r3, #0
340168d0:	d013      	beq.n	340168fa <HAL_XSPI_Command+0x176>
340168d2:	68bb      	ldr	r3, [r7, #8]
340168d4:	6a1b      	ldr	r3, [r3, #32]
340168d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340168da:	d00e      	beq.n	340168fa <HAL_XSPI_Command+0x176>
340168dc:	68bb      	ldr	r3, [r7, #8]
340168de:	6a1b      	ldr	r3, [r3, #32]
340168e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340168e4:	d009      	beq.n	340168fa <HAL_XSPI_Command+0x176>
340168e6:	68bb      	ldr	r3, [r7, #8]
340168e8:	6a1b      	ldr	r3, [r3, #32]
340168ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340168ee:	d004      	beq.n	340168fa <HAL_XSPI_Command+0x176>
340168f0:	f240 314e 	movw	r1, #846	@ 0x34e
340168f4:	4838      	ldr	r0, [pc, #224]	@ (340169d8 <HAL_XSPI_Command+0x254>)
340168f6:	f7ea fe99 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
340168fa:	68bb      	ldr	r3, [r7, #8]
340168fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340168fe:	2b00      	cmp	r3, #0
34016900:	d009      	beq.n	34016916 <HAL_XSPI_Command+0x192>
34016902:	68bb      	ldr	r3, [r7, #8]
34016904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401690a:	d004      	beq.n	34016916 <HAL_XSPI_Command+0x192>
3401690c:	f240 314f 	movw	r1, #847	@ 0x34f
34016910:	4831      	ldr	r0, [pc, #196]	@ (340169d8 <HAL_XSPI_Command+0x254>)
34016912:	f7ea fe8b 	bl	3400162c <assert_failed>
  }

  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
34016916:	68bb      	ldr	r3, [r7, #8]
34016918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401691a:	2b00      	cmp	r3, #0
3401691c:	d018      	beq.n	34016950 <HAL_XSPI_Command+0x1cc>
3401691e:	68bb      	ldr	r3, [r7, #8]
34016920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016926:	d013      	beq.n	34016950 <HAL_XSPI_Command+0x1cc>
34016928:	68bb      	ldr	r3, [r7, #8]
3401692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401692c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016930:	d00e      	beq.n	34016950 <HAL_XSPI_Command+0x1cc>
34016932:	68bb      	ldr	r3, [r7, #8]
34016934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016936:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401693a:	d009      	beq.n	34016950 <HAL_XSPI_Command+0x1cc>
3401693c:	68bb      	ldr	r3, [r7, #8]
3401693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016944:	d004      	beq.n	34016950 <HAL_XSPI_Command+0x1cc>
34016946:	f240 3152 	movw	r1, #850	@ 0x352
3401694a:	4823      	ldr	r0, [pc, #140]	@ (340169d8 <HAL_XSPI_Command+0x254>)
3401694c:	f7ea fe6e 	bl	3400162c <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34016950:	68bb      	ldr	r3, [r7, #8]
34016952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016954:	2b00      	cmp	r3, #0
34016956:	d025      	beq.n	340169a4 <HAL_XSPI_Command+0x220>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
34016958:	68bb      	ldr	r3, [r7, #8]
3401695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401695c:	2b00      	cmp	r3, #0
3401695e:	d013      	beq.n	34016988 <HAL_XSPI_Command+0x204>
34016960:	68bb      	ldr	r3, [r7, #8]
34016962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34016968:	d00e      	beq.n	34016988 <HAL_XSPI_Command+0x204>
3401696a:	68bb      	ldr	r3, [r7, #8]
3401696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401696e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016972:	d009      	beq.n	34016988 <HAL_XSPI_Command+0x204>
34016974:	68bb      	ldr	r3, [r7, #8]
34016976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34016978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3401697c:	d004      	beq.n	34016988 <HAL_XSPI_Command+0x204>
3401697e:	f240 3155 	movw	r1, #853	@ 0x355
34016982:	4815      	ldr	r0, [pc, #84]	@ (340169d8 <HAL_XSPI_Command+0x254>)
34016984:	f7ea fe52 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
34016988:	68bb      	ldr	r3, [r7, #8]
3401698a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3401698c:	2b00      	cmp	r3, #0
3401698e:	d009      	beq.n	340169a4 <HAL_XSPI_Command+0x220>
34016990:	68bb      	ldr	r3, [r7, #8]
34016992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34016994:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34016998:	d004      	beq.n	340169a4 <HAL_XSPI_Command+0x220>
3401699a:	f240 3156 	movw	r1, #854	@ 0x356
3401699e:	480e      	ldr	r0, [pc, #56]	@ (340169d8 <HAL_XSPI_Command+0x254>)
340169a0:	f7ea fe44 	bl	3400162c <assert_failed>
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
340169a4:	68fb      	ldr	r3, [r7, #12]
340169a6:	68db      	ldr	r3, [r3, #12]
340169a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340169ac:	d116      	bne.n	340169dc <HAL_XSPI_Command+0x258>
340169ae:	68bb      	ldr	r3, [r7, #8]
340169b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169b2:	2b00      	cmp	r3, #0
340169b4:	d009      	beq.n	340169ca <HAL_XSPI_Command+0x246>
340169b6:	68bb      	ldr	r3, [r7, #8]
340169b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
340169be:	d004      	beq.n	340169ca <HAL_XSPI_Command+0x246>
340169c0:	68bb      	ldr	r3, [r7, #8]
340169c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
340169c8:	d101      	bne.n	340169ce <HAL_XSPI_Command+0x24a>
340169ca:	2301      	movs	r3, #1
340169cc:	e000      	b.n	340169d0 <HAL_XSPI_Command+0x24c>
340169ce:	2300      	movs	r3, #0
340169d0:	f003 0301 	and.w	r3, r3, #1
340169d4:	b2db      	uxtb	r3, r3
340169d6:	e024      	b.n	34016a22 <HAL_XSPI_Command+0x29e>
340169d8:	3401b04c 	.word	0x3401b04c
340169dc:	68bb      	ldr	r3, [r7, #8]
340169de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169e0:	2b00      	cmp	r3, #0
340169e2:	d018      	beq.n	34016a16 <HAL_XSPI_Command+0x292>
340169e4:	68bb      	ldr	r3, [r7, #8]
340169e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340169ec:	d013      	beq.n	34016a16 <HAL_XSPI_Command+0x292>
340169ee:	68bb      	ldr	r3, [r7, #8]
340169f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340169f6:	d00e      	beq.n	34016a16 <HAL_XSPI_Command+0x292>
340169f8:	68bb      	ldr	r3, [r7, #8]
340169fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340169fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34016a00:	d009      	beq.n	34016a16 <HAL_XSPI_Command+0x292>
34016a02:	68bb      	ldr	r3, [r7, #8]
34016a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016a06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016a0a:	d004      	beq.n	34016a16 <HAL_XSPI_Command+0x292>
34016a0c:	68bb      	ldr	r3, [r7, #8]
34016a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016a10:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
34016a14:	d101      	bne.n	34016a1a <HAL_XSPI_Command+0x296>
34016a16:	2301      	movs	r3, #1
34016a18:	e000      	b.n	34016a1c <HAL_XSPI_Command+0x298>
34016a1a:	2300      	movs	r3, #0
34016a1c:	f003 0301 	and.w	r3, r3, #1
34016a20:	b2db      	uxtb	r3, r3
34016a22:	2b00      	cmp	r3, #0
34016a24:	d104      	bne.n	34016a30 <HAL_XSPI_Command+0x2ac>
34016a26:	f240 3159 	movw	r1, #857	@ 0x359
34016a2a:	485e      	ldr	r0, [pc, #376]	@ (34016ba4 <HAL_XSPI_Command+0x420>)
34016a2c:	f7ea fdfe 	bl	3400162c <assert_failed>

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34016a30:	68bb      	ldr	r3, [r7, #8]
34016a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016a34:	2b00      	cmp	r3, #0
34016a36:	d023      	beq.n	34016a80 <HAL_XSPI_Command+0x2fc>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34016a38:	68bb      	ldr	r3, [r7, #8]
34016a3a:	681b      	ldr	r3, [r3, #0]
34016a3c:	2b00      	cmp	r3, #0
34016a3e:	d108      	bne.n	34016a52 <HAL_XSPI_Command+0x2ce>
    {
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
34016a40:	68bb      	ldr	r3, [r7, #8]
34016a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34016a44:	2b00      	cmp	r3, #0
34016a46:	d104      	bne.n	34016a52 <HAL_XSPI_Command+0x2ce>
34016a48:	f240 315f 	movw	r1, #863	@ 0x35f
34016a4c:	4855      	ldr	r0, [pc, #340]	@ (34016ba4 <HAL_XSPI_Command+0x420>)
34016a4e:	f7ea fded 	bl	3400162c <assert_failed>
    }
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
34016a52:	68bb      	ldr	r3, [r7, #8]
34016a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016a56:	2b00      	cmp	r3, #0
34016a58:	d009      	beq.n	34016a6e <HAL_XSPI_Command+0x2ea>
34016a5a:	68bb      	ldr	r3, [r7, #8]
34016a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34016a62:	d004      	beq.n	34016a6e <HAL_XSPI_Command+0x2ea>
34016a64:	f240 3161 	movw	r1, #865	@ 0x361
34016a68:	484e      	ldr	r0, [pc, #312]	@ (34016ba4 <HAL_XSPI_Command+0x420>)
34016a6a:	f7ea fddf 	bl	3400162c <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
34016a6e:	68bb      	ldr	r3, [r7, #8]
34016a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016a72:	2b1f      	cmp	r3, #31
34016a74:	d904      	bls.n	34016a80 <HAL_XSPI_Command+0x2fc>
34016a76:	f240 3162 	movw	r1, #866	@ 0x362
34016a7a:	484a      	ldr	r0, [pc, #296]	@ (34016ba4 <HAL_XSPI_Command+0x420>)
34016a7c:	f7ea fdd6 	bl	3400162c <assert_failed>
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
34016a80:	68bb      	ldr	r3, [r7, #8]
34016a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016a84:	2b00      	cmp	r3, #0
34016a86:	d009      	beq.n	34016a9c <HAL_XSPI_Command+0x318>
34016a88:	68bb      	ldr	r3, [r7, #8]
34016a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34016a90:	d004      	beq.n	34016a9c <HAL_XSPI_Command+0x318>
34016a92:	f240 3165 	movw	r1, #869	@ 0x365
34016a96:	4843      	ldr	r0, [pc, #268]	@ (34016ba4 <HAL_XSPI_Command+0x420>)
34016a98:	f7ea fdc8 	bl	3400162c <assert_failed>

  /* Check the state of the driver */
  state = hxspi->State;
34016a9c:	68fb      	ldr	r3, [r7, #12]
34016a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016aa0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
34016aa2:	697b      	ldr	r3, [r7, #20]
34016aa4:	2b02      	cmp	r3, #2
34016aa6:	d104      	bne.n	34016ab2 <HAL_XSPI_Command+0x32e>
34016aa8:	68fb      	ldr	r3, [r7, #12]
34016aaa:	68db      	ldr	r3, [r3, #12]
34016aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016ab0:	d115      	bne.n	34016ade <HAL_XSPI_Command+0x35a>
34016ab2:	697b      	ldr	r3, [r7, #20]
34016ab4:	2b14      	cmp	r3, #20
34016ab6:	d107      	bne.n	34016ac8 <HAL_XSPI_Command+0x344>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34016ab8:	68bb      	ldr	r3, [r7, #8]
34016aba:	681b      	ldr	r3, [r3, #0]
34016abc:	2b02      	cmp	r3, #2
34016abe:	d00e      	beq.n	34016ade <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34016ac0:	68bb      	ldr	r3, [r7, #8]
34016ac2:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
34016ac4:	2b03      	cmp	r3, #3
34016ac6:	d00a      	beq.n	34016ade <HAL_XSPI_Command+0x35a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
34016ac8:	697b      	ldr	r3, [r7, #20]
34016aca:	2b24      	cmp	r3, #36	@ 0x24
34016acc:	d15e      	bne.n	34016b8c <HAL_XSPI_Command+0x408>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
34016ace:	68bb      	ldr	r3, [r7, #8]
34016ad0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
34016ad2:	2b01      	cmp	r3, #1
34016ad4:	d003      	beq.n	34016ade <HAL_XSPI_Command+0x35a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
34016ad6:	68bb      	ldr	r3, [r7, #8]
34016ad8:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
34016ada:	2b03      	cmp	r3, #3
34016adc:	d156      	bne.n	34016b8c <HAL_XSPI_Command+0x408>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34016ade:	687b      	ldr	r3, [r7, #4]
34016ae0:	9300      	str	r3, [sp, #0]
34016ae2:	69bb      	ldr	r3, [r7, #24]
34016ae4:	2200      	movs	r2, #0
34016ae6:	2120      	movs	r1, #32
34016ae8:	68f8      	ldr	r0, [r7, #12]
34016aea:	f000 fb1e 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016aee:	4603      	mov	r3, r0
34016af0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
34016af2:	7ffb      	ldrb	r3, [r7, #31]
34016af4:	2b00      	cmp	r3, #0
34016af6:	d146      	bne.n	34016b86 <HAL_XSPI_Command+0x402>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
34016af8:	68fb      	ldr	r3, [r7, #12]
34016afa:	2200      	movs	r2, #0
34016afc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
34016afe:	68b9      	ldr	r1, [r7, #8]
34016b00:	68f8      	ldr	r0, [r7, #12]
34016b02:	f000 fb49 	bl	34017198 <XSPI_ConfigCmd>
34016b06:	4603      	mov	r3, r0
34016b08:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
34016b0a:	7ffb      	ldrb	r3, [r7, #31]
34016b0c:	2b00      	cmp	r3, #0
34016b0e:	d143      	bne.n	34016b98 <HAL_XSPI_Command+0x414>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
34016b10:	68bb      	ldr	r3, [r7, #8]
34016b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34016b14:	2b00      	cmp	r3, #0
34016b16:	d10e      	bne.n	34016b36 <HAL_XSPI_Command+0x3b2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34016b18:	687b      	ldr	r3, [r7, #4]
34016b1a:	9300      	str	r3, [sp, #0]
34016b1c:	69bb      	ldr	r3, [r7, #24]
34016b1e:	2200      	movs	r2, #0
34016b20:	2120      	movs	r1, #32
34016b22:	68f8      	ldr	r0, [r7, #12]
34016b24:	f000 fb01 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016b28:	4603      	mov	r3, r0
34016b2a:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34016b2c:	68fb      	ldr	r3, [r7, #12]
34016b2e:	681b      	ldr	r3, [r3, #0]
34016b30:	2202      	movs	r2, #2
34016b32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
34016b34:	e030      	b.n	34016b98 <HAL_XSPI_Command+0x414>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34016b36:	68bb      	ldr	r3, [r7, #8]
34016b38:	681b      	ldr	r3, [r3, #0]
34016b3a:	2b00      	cmp	r3, #0
34016b3c:	d103      	bne.n	34016b46 <HAL_XSPI_Command+0x3c2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34016b3e:	68fb      	ldr	r3, [r7, #12]
34016b40:	2204      	movs	r2, #4
34016b42:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016b44:	e028      	b.n	34016b98 <HAL_XSPI_Command+0x414>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
34016b46:	68bb      	ldr	r3, [r7, #8]
34016b48:	681b      	ldr	r3, [r3, #0]
34016b4a:	2b01      	cmp	r3, #1
34016b4c:	d10b      	bne.n	34016b66 <HAL_XSPI_Command+0x3e2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
34016b4e:	68fb      	ldr	r3, [r7, #12]
34016b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016b52:	2b24      	cmp	r3, #36	@ 0x24
34016b54:	d103      	bne.n	34016b5e <HAL_XSPI_Command+0x3da>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34016b56:	68fb      	ldr	r3, [r7, #12]
34016b58:	2204      	movs	r2, #4
34016b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016b5c:	e01c      	b.n	34016b98 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
34016b5e:	68fb      	ldr	r3, [r7, #12]
34016b60:	2214      	movs	r2, #20
34016b62:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016b64:	e018      	b.n	34016b98 <HAL_XSPI_Command+0x414>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34016b66:	68bb      	ldr	r3, [r7, #8]
34016b68:	681b      	ldr	r3, [r3, #0]
34016b6a:	2b02      	cmp	r3, #2
34016b6c:	d114      	bne.n	34016b98 <HAL_XSPI_Command+0x414>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
34016b6e:	68fb      	ldr	r3, [r7, #12]
34016b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016b72:	2b14      	cmp	r3, #20
34016b74:	d103      	bne.n	34016b7e <HAL_XSPI_Command+0x3fa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
34016b76:	68fb      	ldr	r3, [r7, #12]
34016b78:	2204      	movs	r2, #4
34016b7a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016b7c:	e00c      	b.n	34016b98 <HAL_XSPI_Command+0x414>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
34016b7e:	68fb      	ldr	r3, [r7, #12]
34016b80:	2224      	movs	r2, #36	@ 0x24
34016b82:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016b84:	e008      	b.n	34016b98 <HAL_XSPI_Command+0x414>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
34016b86:	2302      	movs	r3, #2
34016b88:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
34016b8a:	e005      	b.n	34016b98 <HAL_XSPI_Command+0x414>
    }
  }
  else
  {
    status = HAL_ERROR;
34016b8c:	2301      	movs	r3, #1
34016b8e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34016b90:	68fb      	ldr	r3, [r7, #12]
34016b92:	2210      	movs	r2, #16
34016b94:	65da      	str	r2, [r3, #92]	@ 0x5c
34016b96:	e000      	b.n	34016b9a <HAL_XSPI_Command+0x416>
    if (status == HAL_OK)
34016b98:	bf00      	nop
  }

  return status;
34016b9a:	7ffb      	ldrb	r3, [r7, #31]
}
34016b9c:	4618      	mov	r0, r3
34016b9e:	3720      	adds	r7, #32
34016ba0:	46bd      	mov	sp, r7
34016ba2:	bd80      	pop	{r7, pc}
34016ba4:	3401b04c 	.word	0x3401b04c

34016ba8 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
34016ba8:	b580      	push	{r7, lr}
34016baa:	b08a      	sub	sp, #40	@ 0x28
34016bac:	af02      	add	r7, sp, #8
34016bae:	60f8      	str	r0, [r7, #12]
34016bb0:	60b9      	str	r1, [r7, #8]
34016bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34016bb4:	f7ec fd1a 	bl	340035ec <HAL_GetTick>
34016bb8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
34016bba:	68fb      	ldr	r3, [r7, #12]
34016bbc:	681b      	ldr	r3, [r3, #0]
34016bbe:	3350      	adds	r3, #80	@ 0x50
34016bc0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
34016bc2:	68bb      	ldr	r3, [r7, #8]
34016bc4:	2b00      	cmp	r3, #0
34016bc6:	d105      	bne.n	34016bd4 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
34016bc8:	2301      	movs	r3, #1
34016bca:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34016bcc:	68fb      	ldr	r3, [r7, #12]
34016bce:	2208      	movs	r2, #8
34016bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
34016bd2:	e057      	b.n	34016c84 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34016bd4:	68fb      	ldr	r3, [r7, #12]
34016bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016bd8:	2b04      	cmp	r3, #4
34016bda:	d14e      	bne.n	34016c7a <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
34016bdc:	68fb      	ldr	r3, [r7, #12]
34016bde:	681b      	ldr	r3, [r3, #0]
34016be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016be2:	1c5a      	adds	r2, r3, #1
34016be4:	68fb      	ldr	r3, [r7, #12]
34016be6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
34016be8:	68fb      	ldr	r3, [r7, #12]
34016bea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34016bec:	68fb      	ldr	r3, [r7, #12]
34016bee:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
34016bf0:	68fb      	ldr	r3, [r7, #12]
34016bf2:	68ba      	ldr	r2, [r7, #8]
34016bf4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
34016bf6:	68fb      	ldr	r3, [r7, #12]
34016bf8:	681b      	ldr	r3, [r3, #0]
34016bfa:	681a      	ldr	r2, [r3, #0]
34016bfc:	68fb      	ldr	r3, [r7, #12]
34016bfe:	681b      	ldr	r3, [r3, #0]
34016c00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34016c04:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
34016c06:	687b      	ldr	r3, [r7, #4]
34016c08:	9300      	str	r3, [sp, #0]
34016c0a:	69bb      	ldr	r3, [r7, #24]
34016c0c:	2201      	movs	r2, #1
34016c0e:	2104      	movs	r1, #4
34016c10:	68f8      	ldr	r0, [r7, #12]
34016c12:	f000 fa8a 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016c16:	4603      	mov	r3, r0
34016c18:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
34016c1a:	7ffb      	ldrb	r3, [r7, #31]
34016c1c:	2b00      	cmp	r3, #0
34016c1e:	d113      	bne.n	34016c48 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
34016c20:	68fb      	ldr	r3, [r7, #12]
34016c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016c24:	781a      	ldrb	r2, [r3, #0]
34016c26:	697b      	ldr	r3, [r7, #20]
34016c28:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34016c2a:	68fb      	ldr	r3, [r7, #12]
34016c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016c2e:	1c5a      	adds	r2, r3, #1
34016c30:	68fb      	ldr	r3, [r7, #12]
34016c32:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34016c34:	68fb      	ldr	r3, [r7, #12]
34016c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016c38:	1e5a      	subs	r2, r3, #1
34016c3a:	68fb      	ldr	r3, [r7, #12]
34016c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34016c3e:	68fb      	ldr	r3, [r7, #12]
34016c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016c42:	2b00      	cmp	r3, #0
34016c44:	d1df      	bne.n	34016c06 <HAL_XSPI_Transmit+0x5e>
34016c46:	e000      	b.n	34016c4a <HAL_XSPI_Transmit+0xa2>
          break;
34016c48:	bf00      	nop

      if (status == HAL_OK)
34016c4a:	7ffb      	ldrb	r3, [r7, #31]
34016c4c:	2b00      	cmp	r3, #0
34016c4e:	d119      	bne.n	34016c84 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
34016c50:	687b      	ldr	r3, [r7, #4]
34016c52:	9300      	str	r3, [sp, #0]
34016c54:	69bb      	ldr	r3, [r7, #24]
34016c56:	2201      	movs	r2, #1
34016c58:	2102      	movs	r1, #2
34016c5a:	68f8      	ldr	r0, [r7, #12]
34016c5c:	f000 fa65 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016c60:	4603      	mov	r3, r0
34016c62:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
34016c64:	7ffb      	ldrb	r3, [r7, #31]
34016c66:	2b00      	cmp	r3, #0
34016c68:	d10c      	bne.n	34016c84 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34016c6a:	68fb      	ldr	r3, [r7, #12]
34016c6c:	681b      	ldr	r3, [r3, #0]
34016c6e:	2202      	movs	r2, #2
34016c70:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
34016c72:	68fb      	ldr	r3, [r7, #12]
34016c74:	2202      	movs	r2, #2
34016c76:	659a      	str	r2, [r3, #88]	@ 0x58
34016c78:	e004      	b.n	34016c84 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
34016c7a:	2301      	movs	r3, #1
34016c7c:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34016c7e:	68fb      	ldr	r3, [r7, #12]
34016c80:	2210      	movs	r2, #16
34016c82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34016c84:	7ffb      	ldrb	r3, [r7, #31]
}
34016c86:	4618      	mov	r0, r3
34016c88:	3720      	adds	r7, #32
34016c8a:	46bd      	mov	sp, r7
34016c8c:	bd80      	pop	{r7, pc}

34016c8e <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
34016c8e:	b580      	push	{r7, lr}
34016c90:	b08c      	sub	sp, #48	@ 0x30
34016c92:	af02      	add	r7, sp, #8
34016c94:	60f8      	str	r0, [r7, #12]
34016c96:	60b9      	str	r1, [r7, #8]
34016c98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34016c9a:	f7ec fca7 	bl	340035ec <HAL_GetTick>
34016c9e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
34016ca0:	68fb      	ldr	r3, [r7, #12]
34016ca2:	681b      	ldr	r3, [r3, #0]
34016ca4:	3350      	adds	r3, #80	@ 0x50
34016ca6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
34016ca8:	68fb      	ldr	r3, [r7, #12]
34016caa:	681b      	ldr	r3, [r3, #0]
34016cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016cae:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
34016cb0:	68fb      	ldr	r3, [r7, #12]
34016cb2:	681b      	ldr	r3, [r3, #0]
34016cb4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34016cb8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
34016cba:	68bb      	ldr	r3, [r7, #8]
34016cbc:	2b00      	cmp	r3, #0
34016cbe:	d106      	bne.n	34016cce <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
34016cc0:	2301      	movs	r3, #1
34016cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34016cc6:	68fb      	ldr	r3, [r7, #12]
34016cc8:	2208      	movs	r2, #8
34016cca:	65da      	str	r2, [r3, #92]	@ 0x5c
34016ccc:	e07c      	b.n	34016dc8 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34016cce:	68fb      	ldr	r3, [r7, #12]
34016cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016cd2:	2b04      	cmp	r3, #4
34016cd4:	d172      	bne.n	34016dbc <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
34016cd6:	68fb      	ldr	r3, [r7, #12]
34016cd8:	681b      	ldr	r3, [r3, #0]
34016cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016cdc:	1c5a      	adds	r2, r3, #1
34016cde:	68fb      	ldr	r3, [r7, #12]
34016ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
34016ce2:	68fb      	ldr	r3, [r7, #12]
34016ce4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34016ce6:	68fb      	ldr	r3, [r7, #12]
34016ce8:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
34016cea:	68fb      	ldr	r3, [r7, #12]
34016cec:	68ba      	ldr	r2, [r7, #8]
34016cee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
34016cf0:	68fb      	ldr	r3, [r7, #12]
34016cf2:	681b      	ldr	r3, [r3, #0]
34016cf4:	681b      	ldr	r3, [r3, #0]
34016cf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
34016cfa:	68fb      	ldr	r3, [r7, #12]
34016cfc:	681b      	ldr	r3, [r3, #0]
34016cfe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
34016d02:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34016d04:	68fb      	ldr	r3, [r7, #12]
34016d06:	68db      	ldr	r3, [r3, #12]
34016d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016d0c:	d104      	bne.n	34016d18 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
34016d0e:	68fb      	ldr	r3, [r7, #12]
34016d10:	681b      	ldr	r3, [r3, #0]
34016d12:	69ba      	ldr	r2, [r7, #24]
34016d14:	649a      	str	r2, [r3, #72]	@ 0x48
34016d16:	e011      	b.n	34016d3c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
34016d18:	68fb      	ldr	r3, [r7, #12]
34016d1a:	681b      	ldr	r3, [r3, #0]
34016d1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34016d20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34016d24:	2b00      	cmp	r3, #0
34016d26:	d004      	beq.n	34016d32 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
34016d28:	68fb      	ldr	r3, [r7, #12]
34016d2a:	681b      	ldr	r3, [r3, #0]
34016d2c:	69ba      	ldr	r2, [r7, #24]
34016d2e:	649a      	str	r2, [r3, #72]	@ 0x48
34016d30:	e004      	b.n	34016d3c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34016d32:	68fb      	ldr	r3, [r7, #12]
34016d34:	681b      	ldr	r3, [r3, #0]
34016d36:	697a      	ldr	r2, [r7, #20]
34016d38:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
34016d3c:	687b      	ldr	r3, [r7, #4]
34016d3e:	9300      	str	r3, [sp, #0]
34016d40:	6a3b      	ldr	r3, [r7, #32]
34016d42:	2201      	movs	r2, #1
34016d44:	2106      	movs	r1, #6
34016d46:	68f8      	ldr	r0, [r7, #12]
34016d48:	f000 f9ef 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016d4c:	4603      	mov	r3, r0
34016d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
34016d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34016d56:	2b00      	cmp	r3, #0
34016d58:	d114      	bne.n	34016d84 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
34016d5a:	68fb      	ldr	r3, [r7, #12]
34016d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016d5e:	69fa      	ldr	r2, [r7, #28]
34016d60:	7812      	ldrb	r2, [r2, #0]
34016d62:	b2d2      	uxtb	r2, r2
34016d64:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
34016d66:	68fb      	ldr	r3, [r7, #12]
34016d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016d6a:	1c5a      	adds	r2, r3, #1
34016d6c:	68fb      	ldr	r3, [r7, #12]
34016d6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
34016d70:	68fb      	ldr	r3, [r7, #12]
34016d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016d74:	1e5a      	subs	r2, r3, #1
34016d76:	68fb      	ldr	r3, [r7, #12]
34016d78:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
34016d7a:	68fb      	ldr	r3, [r7, #12]
34016d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34016d7e:	2b00      	cmp	r3, #0
34016d80:	d1dc      	bne.n	34016d3c <HAL_XSPI_Receive+0xae>
34016d82:	e000      	b.n	34016d86 <HAL_XSPI_Receive+0xf8>
          break;
34016d84:	bf00      	nop

      if (status == HAL_OK)
34016d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34016d8a:	2b00      	cmp	r3, #0
34016d8c:	d11c      	bne.n	34016dc8 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
34016d8e:	687b      	ldr	r3, [r7, #4]
34016d90:	9300      	str	r3, [sp, #0]
34016d92:	6a3b      	ldr	r3, [r7, #32]
34016d94:	2201      	movs	r2, #1
34016d96:	2102      	movs	r1, #2
34016d98:	68f8      	ldr	r0, [r7, #12]
34016d9a:	f000 f9c6 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016d9e:	4603      	mov	r3, r0
34016da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
34016da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34016da8:	2b00      	cmp	r3, #0
34016daa:	d10d      	bne.n	34016dc8 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
34016dac:	68fb      	ldr	r3, [r7, #12]
34016dae:	681b      	ldr	r3, [r3, #0]
34016db0:	2202      	movs	r2, #2
34016db2:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
34016db4:	68fb      	ldr	r3, [r7, #12]
34016db6:	2202      	movs	r2, #2
34016db8:	659a      	str	r2, [r3, #88]	@ 0x58
34016dba:	e005      	b.n	34016dc8 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
34016dbc:	2301      	movs	r3, #1
34016dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34016dc2:	68fb      	ldr	r3, [r7, #12]
34016dc4:	2210      	movs	r2, #16
34016dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34016dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34016dcc:	4618      	mov	r0, r3
34016dce:	3728      	adds	r7, #40	@ 0x28
34016dd0:	46bd      	mov	sp, r7
34016dd2:	bd80      	pop	{r7, pc}

34016dd4 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
34016dd4:	b580      	push	{r7, lr}
34016dd6:	b08c      	sub	sp, #48	@ 0x30
34016dd8:	af02      	add	r7, sp, #8
34016dda:	60f8      	str	r0, [r7, #12]
34016ddc:	60b9      	str	r1, [r7, #8]
34016dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34016de0:	f7ec fc04 	bl	340035ec <HAL_GetTick>
34016de4:	6238      	str	r0, [r7, #32]
  uint32_t addr_reg = hxspi->Instance->AR;
34016de6:	68fb      	ldr	r3, [r7, #12]
34016de8:	681b      	ldr	r3, [r3, #0]
34016dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34016dec:	61fb      	str	r3, [r7, #28]
  uint32_t ir_reg = hxspi->Instance->IR;
34016dee:	68fb      	ldr	r3, [r7, #12]
34016df0:	681b      	ldr	r3, [r3, #0]
34016df2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34016df6:	61bb      	str	r3, [r7, #24]
#ifdef USE_FULL_ASSERT
  uint32_t dlr_reg = hxspi->Instance->DLR;
34016df8:	68fb      	ldr	r3, [r7, #12]
34016dfa:	681b      	ldr	r3, [r3, #0]
34016dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34016dfe:	617b      	str	r3, [r7, #20]
#endif /* USE_FULL_ASSERT */

  /* Check the parameters of the autopolling configuration structure */
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
34016e00:	68bb      	ldr	r3, [r7, #8]
34016e02:	689b      	ldr	r3, [r3, #8]
34016e04:	2b00      	cmp	r3, #0
34016e06:	d009      	beq.n	34016e1c <HAL_XSPI_AutoPolling+0x48>
34016e08:	68bb      	ldr	r3, [r7, #8]
34016e0a:	689b      	ldr	r3, [r3, #8]
34016e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34016e10:	d004      	beq.n	34016e1c <HAL_XSPI_AutoPolling+0x48>
34016e12:	f240 7134 	movw	r1, #1844	@ 0x734
34016e16:	4853      	ldr	r0, [pc, #332]	@ (34016f64 <HAL_XSPI_AutoPolling+0x190>)
34016e18:	f7ea fc08 	bl	3400162c <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
34016e1c:	68bb      	ldr	r3, [r7, #8]
34016e1e:	68db      	ldr	r3, [r3, #12]
34016e20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34016e24:	d008      	beq.n	34016e38 <HAL_XSPI_AutoPolling+0x64>
34016e26:	68bb      	ldr	r3, [r7, #8]
34016e28:	68db      	ldr	r3, [r3, #12]
34016e2a:	2b00      	cmp	r3, #0
34016e2c:	d004      	beq.n	34016e38 <HAL_XSPI_AutoPolling+0x64>
34016e2e:	f240 7135 	movw	r1, #1845	@ 0x735
34016e32:	484c      	ldr	r0, [pc, #304]	@ (34016f64 <HAL_XSPI_AutoPolling+0x190>)
34016e34:	f7ea fbfa 	bl	3400162c <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
34016e38:	68bb      	ldr	r3, [r7, #8]
34016e3a:	691b      	ldr	r3, [r3, #16]
34016e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016e40:	d304      	bcc.n	34016e4c <HAL_XSPI_AutoPolling+0x78>
34016e42:	f240 7136 	movw	r1, #1846	@ 0x736
34016e46:	4847      	ldr	r0, [pc, #284]	@ (34016f64 <HAL_XSPI_AutoPolling+0x190>)
34016e48:	f7ea fbf0 	bl	3400162c <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
34016e4c:	697b      	ldr	r3, [r7, #20]
34016e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34016e52:	d003      	beq.n	34016e5c <HAL_XSPI_AutoPolling+0x88>
34016e54:	697b      	ldr	r3, [r7, #20]
34016e56:	3301      	adds	r3, #1
34016e58:	2b04      	cmp	r3, #4
34016e5a:	d904      	bls.n	34016e66 <HAL_XSPI_AutoPolling+0x92>
34016e5c:	f240 7137 	movw	r1, #1847	@ 0x737
34016e60:	4840      	ldr	r0, [pc, #256]	@ (34016f64 <HAL_XSPI_AutoPolling+0x190>)
34016e62:	f7ea fbe3 	bl	3400162c <assert_failed>

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
34016e66:	68fb      	ldr	r3, [r7, #12]
34016e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016e6a:	2b04      	cmp	r3, #4
34016e6c:	d16c      	bne.n	34016f48 <HAL_XSPI_AutoPolling+0x174>
34016e6e:	68bb      	ldr	r3, [r7, #8]
34016e70:	68db      	ldr	r3, [r3, #12]
34016e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34016e76:	d167      	bne.n	34016f48 <HAL_XSPI_AutoPolling+0x174>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
34016e78:	687b      	ldr	r3, [r7, #4]
34016e7a:	9300      	str	r3, [sp, #0]
34016e7c:	6a3b      	ldr	r3, [r7, #32]
34016e7e:	2200      	movs	r2, #0
34016e80:	2120      	movs	r1, #32
34016e82:	68f8      	ldr	r0, [r7, #12]
34016e84:	f000 f951 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016e88:	4603      	mov	r3, r0
34016e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (status == HAL_OK)
34016e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34016e92:	2b00      	cmp	r3, #0
34016e94:	d154      	bne.n	34016f40 <HAL_XSPI_AutoPolling+0x16c>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
34016e96:	68fb      	ldr	r3, [r7, #12]
34016e98:	681b      	ldr	r3, [r3, #0]
34016e9a:	68ba      	ldr	r2, [r7, #8]
34016e9c:	6812      	ldr	r2, [r2, #0]
34016e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
34016ea2:	68fb      	ldr	r3, [r7, #12]
34016ea4:	681b      	ldr	r3, [r3, #0]
34016ea6:	68ba      	ldr	r2, [r7, #8]
34016ea8:	6852      	ldr	r2, [r2, #4]
34016eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
34016eae:	68fb      	ldr	r3, [r7, #12]
34016eb0:	681b      	ldr	r3, [r3, #0]
34016eb2:	68ba      	ldr	r2, [r7, #8]
34016eb4:	6912      	ldr	r2, [r2, #16]
34016eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
34016eba:	68fb      	ldr	r3, [r7, #12]
34016ebc:	681b      	ldr	r3, [r3, #0]
34016ebe:	681b      	ldr	r3, [r3, #0]
34016ec0:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
34016ec4:	68bb      	ldr	r3, [r7, #8]
34016ec6:	6899      	ldr	r1, [r3, #8]
34016ec8:	68bb      	ldr	r3, [r7, #8]
34016eca:	68db      	ldr	r3, [r3, #12]
34016ecc:	430b      	orrs	r3, r1
34016ece:	431a      	orrs	r2, r3
34016ed0:	68fb      	ldr	r3, [r7, #12]
34016ed2:	681b      	ldr	r3, [r3, #0]
34016ed4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
34016ed8:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34016eda:	68fb      	ldr	r3, [r7, #12]
34016edc:	68db      	ldr	r3, [r3, #12]
34016ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34016ee2:	d104      	bne.n	34016eee <HAL_XSPI_AutoPolling+0x11a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
34016ee4:	68fb      	ldr	r3, [r7, #12]
34016ee6:	681b      	ldr	r3, [r3, #0]
34016ee8:	69fa      	ldr	r2, [r7, #28]
34016eea:	649a      	str	r2, [r3, #72]	@ 0x48
34016eec:	e011      	b.n	34016f12 <HAL_XSPI_AutoPolling+0x13e>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
34016eee:	68fb      	ldr	r3, [r7, #12]
34016ef0:	681b      	ldr	r3, [r3, #0]
34016ef2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34016ef6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34016efa:	2b00      	cmp	r3, #0
34016efc:	d004      	beq.n	34016f08 <HAL_XSPI_AutoPolling+0x134>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
34016efe:	68fb      	ldr	r3, [r7, #12]
34016f00:	681b      	ldr	r3, [r3, #0]
34016f02:	69fa      	ldr	r2, [r7, #28]
34016f04:	649a      	str	r2, [r3, #72]	@ 0x48
34016f06:	e004      	b.n	34016f12 <HAL_XSPI_AutoPolling+0x13e>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34016f08:	68fb      	ldr	r3, [r7, #12]
34016f0a:	681b      	ldr	r3, [r3, #0]
34016f0c:	69ba      	ldr	r2, [r7, #24]
34016f0e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
34016f12:	687b      	ldr	r3, [r7, #4]
34016f14:	9300      	str	r3, [sp, #0]
34016f16:	6a3b      	ldr	r3, [r7, #32]
34016f18:	2201      	movs	r2, #1
34016f1a:	2108      	movs	r1, #8
34016f1c:	68f8      	ldr	r0, [r7, #12]
34016f1e:	f000 f904 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016f22:	4603      	mov	r3, r0
34016f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      if (status == HAL_OK)
34016f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34016f2c:	2b00      	cmp	r3, #0
34016f2e:	d112      	bne.n	34016f56 <HAL_XSPI_AutoPolling+0x182>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
34016f30:	68fb      	ldr	r3, [r7, #12]
34016f32:	681b      	ldr	r3, [r3, #0]
34016f34:	2208      	movs	r2, #8
34016f36:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
34016f38:	68fb      	ldr	r3, [r7, #12]
34016f3a:	2202      	movs	r2, #2
34016f3c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34016f3e:	e00a      	b.n	34016f56 <HAL_XSPI_AutoPolling+0x182>
      }
    }
    else
    {
      status = HAL_BUSY;
34016f40:	2302      	movs	r3, #2
34016f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status == HAL_OK)
34016f46:	e006      	b.n	34016f56 <HAL_XSPI_AutoPolling+0x182>
    }
  }
  else
  {
    status = HAL_ERROR;
34016f48:	2301      	movs	r3, #1
34016f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34016f4e:	68fb      	ldr	r3, [r7, #12]
34016f50:	2210      	movs	r2, #16
34016f52:	65da      	str	r2, [r3, #92]	@ 0x5c
34016f54:	e000      	b.n	34016f58 <HAL_XSPI_AutoPolling+0x184>
    if (status == HAL_OK)
34016f56:	bf00      	nop
  }

  return status;
34016f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34016f5c:	4618      	mov	r0, r3
34016f5e:	3728      	adds	r7, #40	@ 0x28
34016f60:	46bd      	mov	sp, r7
34016f62:	bd80      	pop	{r7, pc}
34016f64:	3401b04c 	.word	0x3401b04c

34016f68 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
34016f68:	b580      	push	{r7, lr}
34016f6a:	b086      	sub	sp, #24
34016f6c:	af02      	add	r7, sp, #8
34016f6e:	6078      	str	r0, [r7, #4]
34016f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
34016f72:	f7ec fb3b 	bl	340035ec <HAL_GetTick>
34016f76:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
34016f78:	683b      	ldr	r3, [r7, #0]
34016f7a:	681b      	ldr	r3, [r3, #0]
34016f7c:	2b00      	cmp	r3, #0
34016f7e:	d008      	beq.n	34016f92 <HAL_XSPI_MemoryMapped+0x2a>
34016f80:	683b      	ldr	r3, [r7, #0]
34016f82:	681b      	ldr	r3, [r3, #0]
34016f84:	2b08      	cmp	r3, #8
34016f86:	d004      	beq.n	34016f92 <HAL_XSPI_MemoryMapped+0x2a>
34016f88:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
34016f8c:	4846      	ldr	r0, [pc, #280]	@ (340170a8 <HAL_XSPI_MemoryMapped+0x140>)
34016f8e:	f7ea fb4d 	bl	3400162c <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
34016f92:	683b      	ldr	r3, [r7, #0]
34016f94:	689b      	ldr	r3, [r3, #8]
34016f96:	2b00      	cmp	r3, #0
34016f98:	d009      	beq.n	34016fae <HAL_XSPI_MemoryMapped+0x46>
34016f9a:	683b      	ldr	r3, [r7, #0]
34016f9c:	689b      	ldr	r3, [r3, #8]
34016f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34016fa2:	d004      	beq.n	34016fae <HAL_XSPI_MemoryMapped+0x46>
34016fa4:	f240 71c9 	movw	r1, #1993	@ 0x7c9
34016fa8:	483f      	ldr	r0, [pc, #252]	@ (340170a8 <HAL_XSPI_MemoryMapped+0x140>)
34016faa:	f7ea fb3f 	bl	3400162c <assert_failed>

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
34016fae:	687b      	ldr	r3, [r7, #4]
34016fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34016fb2:	2b04      	cmp	r3, #4
34016fb4:	d16d      	bne.n	34017092 <HAL_XSPI_MemoryMapped+0x12a>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
34016fb6:	687b      	ldr	r3, [r7, #4]
34016fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34016fba:	9300      	str	r3, [sp, #0]
34016fbc:	68bb      	ldr	r3, [r7, #8]
34016fbe:	2200      	movs	r2, #0
34016fc0:	2120      	movs	r1, #32
34016fc2:	6878      	ldr	r0, [r7, #4]
34016fc4:	f000 f8b1 	bl	3401712a <XSPI_WaitFlagStateUntilTimeout>
34016fc8:	4603      	mov	r3, r0
34016fca:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
34016fcc:	7bfb      	ldrb	r3, [r7, #15]
34016fce:	2b00      	cmp	r3, #0
34016fd0:	d164      	bne.n	3401709c <HAL_XSPI_MemoryMapped+0x134>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
34016fd2:	687b      	ldr	r3, [r7, #4]
34016fd4:	2288      	movs	r2, #136	@ 0x88
34016fd6:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
34016fd8:	683b      	ldr	r3, [r7, #0]
34016fda:	689b      	ldr	r3, [r3, #8]
34016fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34016fe0:	d10b      	bne.n	34016ffa <HAL_XSPI_MemoryMapped+0x92>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
34016fe2:	687b      	ldr	r3, [r7, #4]
34016fe4:	681b      	ldr	r3, [r3, #0]
34016fe6:	681b      	ldr	r3, [r3, #0]
34016fe8:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
34016fec:	683b      	ldr	r3, [r7, #0]
34016fee:	689a      	ldr	r2, [r3, #8]
34016ff0:	687b      	ldr	r3, [r7, #4]
34016ff2:	681b      	ldr	r3, [r3, #0]
34016ff4:	430a      	orrs	r2, r1
34016ff6:	601a      	str	r2, [r3, #0]
34016ff8:	e01b      	b.n	34017032 <HAL_XSPI_MemoryMapped+0xca>
      }

      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
34016ffa:	683b      	ldr	r3, [r7, #0]
34016ffc:	68db      	ldr	r3, [r3, #12]
34016ffe:	2b00      	cmp	r3, #0
34017000:	d009      	beq.n	34017016 <HAL_XSPI_MemoryMapped+0xae>
34017002:	683b      	ldr	r3, [r7, #0]
34017004:	68db      	ldr	r3, [r3, #12]
34017006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401700a:	d004      	beq.n	34017016 <HAL_XSPI_MemoryMapped+0xae>
3401700c:	f240 71dd 	movw	r1, #2013	@ 0x7dd
34017010:	4825      	ldr	r0, [pc, #148]	@ (340170a8 <HAL_XSPI_MemoryMapped+0x140>)
34017012:	f7ea fb0b 	bl	3400162c <assert_failed>

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
34017016:	687b      	ldr	r3, [r7, #4]
34017018:	681b      	ldr	r3, [r3, #0]
3401701a:	681b      	ldr	r3, [r3, #0]
3401701c:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
34017020:	683b      	ldr	r3, [r7, #0]
34017022:	689a      	ldr	r2, [r3, #8]
34017024:	683b      	ldr	r3, [r7, #0]
34017026:	68db      	ldr	r3, [r3, #12]
34017028:	431a      	orrs	r2, r3
3401702a:	687b      	ldr	r3, [r7, #4]
3401702c:	681b      	ldr	r3, [r3, #0]
3401702e:	430a      	orrs	r2, r1
34017030:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
34017032:	683b      	ldr	r3, [r7, #0]
34017034:	681b      	ldr	r3, [r3, #0]
34017036:	2b08      	cmp	r3, #8
34017038:	d11b      	bne.n	34017072 <HAL_XSPI_MemoryMapped+0x10a>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3401703a:	683b      	ldr	r3, [r7, #0]
3401703c:	685b      	ldr	r3, [r3, #4]
3401703e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34017042:	d304      	bcc.n	3401704e <HAL_XSPI_MemoryMapped+0xe6>
34017044:	f240 71e5 	movw	r1, #2021	@ 0x7e5
34017048:	4817      	ldr	r0, [pc, #92]	@ (340170a8 <HAL_XSPI_MemoryMapped+0x140>)
3401704a:	f7ea faef 	bl	3400162c <assert_failed>

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401704e:	687b      	ldr	r3, [r7, #4]
34017050:	681b      	ldr	r3, [r3, #0]
34017052:	683a      	ldr	r2, [r7, #0]
34017054:	6852      	ldr	r2, [r2, #4]
34017056:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3401705a:	687b      	ldr	r3, [r7, #4]
3401705c:	681b      	ldr	r3, [r3, #0]
3401705e:	2210      	movs	r2, #16
34017060:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
34017062:	687b      	ldr	r3, [r7, #4]
34017064:	681b      	ldr	r3, [r3, #0]
34017066:	681a      	ldr	r2, [r3, #0]
34017068:	687b      	ldr	r3, [r7, #4]
3401706a:	681b      	ldr	r3, [r3, #0]
3401706c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
34017070:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
34017072:	687b      	ldr	r3, [r7, #4]
34017074:	681b      	ldr	r3, [r3, #0]
34017076:	681b      	ldr	r3, [r3, #0]
34017078:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401707c:	f023 0308 	bic.w	r3, r3, #8
34017080:	683a      	ldr	r2, [r7, #0]
34017082:	6812      	ldr	r2, [r2, #0]
34017084:	431a      	orrs	r2, r3
34017086:	687b      	ldr	r3, [r7, #4]
34017088:	681b      	ldr	r3, [r3, #0]
3401708a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3401708e:	601a      	str	r2, [r3, #0]
34017090:	e004      	b.n	3401709c <HAL_XSPI_MemoryMapped+0x134>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
34017092:	2301      	movs	r3, #1
34017094:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34017096:	687b      	ldr	r3, [r7, #4]
34017098:	2210      	movs	r2, #16
3401709a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3401709c:	7bfb      	ldrb	r3, [r7, #15]
}
3401709e:	4618      	mov	r0, r3
340170a0:	3710      	adds	r7, #16
340170a2:	46bd      	mov	sp, r7
340170a4:	bd80      	pop	{r7, pc}
340170a6:	bf00      	nop
340170a8:	3401b04c 	.word	0x3401b04c

340170ac <HAL_XSPI_SetClockPrescaler>:
  * @param  hxspi     : XSPI handle.
  * @param  Prescaler : Clock prescaler.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetClockPrescaler(XSPI_HandleTypeDef *hxspi, uint32_t Prescaler)
{
340170ac:	b580      	push	{r7, lr}
340170ae:	b084      	sub	sp, #16
340170b0:	af00      	add	r7, sp, #0
340170b2:	6078      	str	r0, [r7, #4]
340170b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
340170b6:	2300      	movs	r3, #0
340170b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
340170ba:	683b      	ldr	r3, [r7, #0]
340170bc:	2bff      	cmp	r3, #255	@ 0xff
340170be:	d904      	bls.n	340170ca <HAL_XSPI_SetClockPrescaler+0x1e>
340170c0:	f640 2193 	movw	r1, #2707	@ 0xa93
340170c4:	4810      	ldr	r0, [pc, #64]	@ (34017108 <HAL_XSPI_SetClockPrescaler+0x5c>)
340170c6:	f7ea fab1 	bl	3400162c <assert_failed>

  /* Check the state */
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
340170ca:	687b      	ldr	r3, [r7, #4]
340170cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
340170ce:	f003 0308 	and.w	r3, r3, #8
340170d2:	2b00      	cmp	r3, #0
340170d4:	d10e      	bne.n	340170f4 <HAL_XSPI_SetClockPrescaler+0x48>
  {
    /* Synchronize initialization structure with the new clock prescaler value */
    hxspi->Init.ClockPrescaler = Prescaler;
340170d6:	687b      	ldr	r3, [r7, #4]
340170d8:	683a      	ldr	r2, [r7, #0]
340170da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure clock prescaler */
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
340170dc:	687b      	ldr	r3, [r7, #4]
340170de:	681b      	ldr	r3, [r3, #0]
340170e0:	68db      	ldr	r3, [r3, #12]
340170e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
340170e6:	687b      	ldr	r3, [r7, #4]
340170e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340170ea:	687b      	ldr	r3, [r7, #4]
340170ec:	681b      	ldr	r3, [r3, #0]
340170ee:	430a      	orrs	r2, r1
340170f0:	60da      	str	r2, [r3, #12]
340170f2:	e004      	b.n	340170fe <HAL_XSPI_SetClockPrescaler+0x52>
               ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));
  }
  else
  {
    status = HAL_ERROR;
340170f4:	2301      	movs	r3, #1
340170f6:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
340170f8:	687b      	ldr	r3, [r7, #4]
340170fa:	2210      	movs	r2, #16
340170fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
340170fe:	7bfb      	ldrb	r3, [r7, #15]
}
34017100:	4618      	mov	r0, r3
34017102:	3710      	adds	r7, #16
34017104:	46bd      	mov	sp, r7
34017106:	bd80      	pop	{r7, pc}
34017108:	3401b04c 	.word	0x3401b04c

3401710c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3401710c:	b480      	push	{r7}
3401710e:	b083      	sub	sp, #12
34017110:	af00      	add	r7, sp, #0
34017112:	6078      	str	r0, [r7, #4]
34017114:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
34017116:	687b      	ldr	r3, [r7, #4]
34017118:	683a      	ldr	r2, [r7, #0]
3401711a:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3401711c:	2300      	movs	r3, #0
}
3401711e:	4618      	mov	r0, r3
34017120:	370c      	adds	r7, #12
34017122:	46bd      	mov	sp, r7
34017124:	f85d 7b04 	ldr.w	r7, [sp], #4
34017128:	4770      	bx	lr

3401712a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3401712a:	b580      	push	{r7, lr}
3401712c:	b084      	sub	sp, #16
3401712e:	af00      	add	r7, sp, #0
34017130:	60f8      	str	r0, [r7, #12]
34017132:	60b9      	str	r1, [r7, #8]
34017134:	603b      	str	r3, [r7, #0]
34017136:	4613      	mov	r3, r2
34017138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401713a:	e019      	b.n	34017170 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3401713c:	69bb      	ldr	r3, [r7, #24]
3401713e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34017142:	d015      	beq.n	34017170 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34017144:	f7ec fa52 	bl	340035ec <HAL_GetTick>
34017148:	4602      	mov	r2, r0
3401714a:	683b      	ldr	r3, [r7, #0]
3401714c:	1ad3      	subs	r3, r2, r3
3401714e:	69ba      	ldr	r2, [r7, #24]
34017150:	429a      	cmp	r2, r3
34017152:	d302      	bcc.n	3401715a <XSPI_WaitFlagStateUntilTimeout+0x30>
34017154:	69bb      	ldr	r3, [r7, #24]
34017156:	2b00      	cmp	r3, #0
34017158:	d10a      	bne.n	34017170 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3401715a:	68fb      	ldr	r3, [r7, #12]
3401715c:	2202      	movs	r2, #2
3401715e:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34017160:	68fb      	ldr	r3, [r7, #12]
34017162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34017164:	f043 0201 	orr.w	r2, r3, #1
34017168:	68fb      	ldr	r3, [r7, #12]
3401716a:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3401716c:	2303      	movs	r3, #3
3401716e:	e00e      	b.n	3401718e <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34017170:	68fb      	ldr	r3, [r7, #12]
34017172:	681b      	ldr	r3, [r3, #0]
34017174:	6a1a      	ldr	r2, [r3, #32]
34017176:	68bb      	ldr	r3, [r7, #8]
34017178:	4013      	ands	r3, r2
3401717a:	2b00      	cmp	r3, #0
3401717c:	bf14      	ite	ne
3401717e:	2301      	movne	r3, #1
34017180:	2300      	moveq	r3, #0
34017182:	b2db      	uxtb	r3, r3
34017184:	461a      	mov	r2, r3
34017186:	79fb      	ldrb	r3, [r7, #7]
34017188:	429a      	cmp	r2, r3
3401718a:	d1d7      	bne.n	3401713c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3401718c:	2300      	movs	r3, #0
}
3401718e:	4618      	mov	r0, r3
34017190:	3710      	adds	r7, #16
34017192:	46bd      	mov	sp, r7
34017194:	bd80      	pop	{r7, pc}
	...

34017198 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
34017198:	b580      	push	{r7, lr}
3401719a:	b088      	sub	sp, #32
3401719c:	af00      	add	r7, sp, #0
3401719e:	6078      	str	r0, [r7, #4]
340171a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
340171a2:	2300      	movs	r3, #0
340171a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
340171a6:	687b      	ldr	r3, [r7, #4]
340171a8:	681b      	ldr	r3, [r3, #0]
340171aa:	681a      	ldr	r2, [r3, #0]
340171ac:	687b      	ldr	r3, [r7, #4]
340171ae:	681b      	ldr	r3, [r3, #0]
340171b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
340171b4:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
340171b6:	687b      	ldr	r3, [r7, #4]
340171b8:	689b      	ldr	r3, [r3, #8]
340171ba:	2b00      	cmp	r3, #0
340171bc:	d12b      	bne.n	34017216 <XSPI_ConfigCmd+0x7e>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
340171be:	683b      	ldr	r3, [r7, #0]
340171c0:	685b      	ldr	r3, [r3, #4]
340171c2:	2b00      	cmp	r3, #0
340171c4:	d01c      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171c6:	683b      	ldr	r3, [r7, #0]
340171c8:	685b      	ldr	r3, [r3, #4]
340171ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340171ce:	d017      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171d0:	683b      	ldr	r3, [r7, #0]
340171d2:	685b      	ldr	r3, [r3, #4]
340171d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340171d8:	d012      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171da:	683b      	ldr	r3, [r7, #0]
340171dc:	685b      	ldr	r3, [r3, #4]
340171de:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
340171e2:	d00d      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171e4:	683b      	ldr	r3, [r7, #0]
340171e6:	685b      	ldr	r3, [r3, #4]
340171e8:	2b00      	cmp	r3, #0
340171ea:	d009      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171ec:	683b      	ldr	r3, [r7, #0]
340171ee:	685b      	ldr	r3, [r3, #4]
340171f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
340171f4:	d004      	beq.n	34017200 <XSPI_ConfigCmd+0x68>
340171f6:	f640 41a4 	movw	r1, #3236	@ 0xca4
340171fa:	4892      	ldr	r0, [pc, #584]	@ (34017444 <XSPI_ConfigCmd+0x2ac>)
340171fc:	f7ea fa16 	bl	3400162c <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
34017200:	687b      	ldr	r3, [r7, #4]
34017202:	681b      	ldr	r3, [r3, #0]
34017204:	681b      	ldr	r3, [r3, #0]
34017206:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3401720a:	683b      	ldr	r3, [r7, #0]
3401720c:	685a      	ldr	r2, [r3, #4]
3401720e:	687b      	ldr	r3, [r7, #4]
34017210:	681b      	ldr	r3, [r3, #0]
34017212:	430a      	orrs	r2, r1
34017214:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
34017216:	683b      	ldr	r3, [r7, #0]
34017218:	681b      	ldr	r3, [r3, #0]
3401721a:	2b02      	cmp	r3, #2
3401721c:	d114      	bne.n	34017248 <XSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3401721e:	687b      	ldr	r3, [r7, #4]
34017220:	681b      	ldr	r3, [r3, #0]
34017222:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
34017226:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
34017228:	687b      	ldr	r3, [r7, #4]
3401722a:	681b      	ldr	r3, [r3, #0]
3401722c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
34017230:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
34017232:	687b      	ldr	r3, [r7, #4]
34017234:	681b      	ldr	r3, [r3, #0]
34017236:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3401723a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3401723c:	687b      	ldr	r3, [r7, #4]
3401723e:	681b      	ldr	r3, [r3, #0]
34017240:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
34017244:	60fb      	str	r3, [r7, #12]
34017246:	e02c      	b.n	340172a2 <XSPI_ConfigCmd+0x10a>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
34017248:	683b      	ldr	r3, [r7, #0]
3401724a:	681b      	ldr	r3, [r3, #0]
3401724c:	2b03      	cmp	r3, #3
3401724e:	d114      	bne.n	3401727a <XSPI_ConfigCmd+0xe2>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
34017250:	687b      	ldr	r3, [r7, #4]
34017252:	681b      	ldr	r3, [r3, #0]
34017254:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
34017258:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3401725a:	687b      	ldr	r3, [r7, #4]
3401725c:	681b      	ldr	r3, [r3, #0]
3401725e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
34017262:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34017264:	687b      	ldr	r3, [r7, #4]
34017266:	681b      	ldr	r3, [r3, #0]
34017268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3401726c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3401726e:	687b      	ldr	r3, [r7, #4]
34017270:	681b      	ldr	r3, [r3, #0]
34017272:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
34017276:	60fb      	str	r3, [r7, #12]
34017278:	e013      	b.n	340172a2 <XSPI_ConfigCmd+0x10a>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3401727a:	687b      	ldr	r3, [r7, #4]
3401727c:	681b      	ldr	r3, [r3, #0]
3401727e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34017282:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34017284:	687b      	ldr	r3, [r7, #4]
34017286:	681b      	ldr	r3, [r3, #0]
34017288:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3401728c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3401728e:	687b      	ldr	r3, [r7, #4]
34017290:	681b      	ldr	r3, [r3, #0]
34017292:	f503 7388 	add.w	r3, r3, #272	@ 0x110
34017296:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
34017298:	687b      	ldr	r3, [r7, #4]
3401729a:	681b      	ldr	r3, [r3, #0]
3401729c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
340172a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
340172a2:	683b      	ldr	r3, [r7, #0]
340172a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340172a6:	69bb      	ldr	r3, [r7, #24]
340172a8:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
340172aa:	683b      	ldr	r3, [r7, #0]
340172ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340172ae:	2b00      	cmp	r3, #0
340172b0:	d012      	beq.n	340172d8 <XSPI_ConfigCmd+0x140>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
340172b2:	683b      	ldr	r3, [r7, #0]
340172b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340172b6:	68fb      	ldr	r3, [r7, #12]
340172b8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
340172ba:	69bb      	ldr	r3, [r7, #24]
340172bc:	681b      	ldr	r3, [r3, #0]
340172be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
340172c2:	683b      	ldr	r3, [r7, #0]
340172c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
340172c6:	683b      	ldr	r3, [r7, #0]
340172c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
340172ca:	4319      	orrs	r1, r3
340172cc:	683b      	ldr	r3, [r7, #0]
340172ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340172d0:	430b      	orrs	r3, r1
340172d2:	431a      	orrs	r2, r3
340172d4:	69bb      	ldr	r3, [r7, #24]
340172d6:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
340172d8:	697b      	ldr	r3, [r7, #20]
340172da:	681b      	ldr	r3, [r3, #0]
340172dc:	f023 021f 	bic.w	r2, r3, #31
340172e0:	683b      	ldr	r3, [r7, #0]
340172e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340172e4:	431a      	orrs	r2, r3
340172e6:	697b      	ldr	r3, [r7, #20]
340172e8:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
340172ea:	683b      	ldr	r3, [r7, #0]
340172ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340172ee:	2b00      	cmp	r3, #0
340172f0:	d009      	beq.n	34017306 <XSPI_ConfigCmd+0x16e>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
340172f2:	683b      	ldr	r3, [r7, #0]
340172f4:	681b      	ldr	r3, [r3, #0]
340172f6:	2b00      	cmp	r3, #0
340172f8:	d105      	bne.n	34017306 <XSPI_ConfigCmd+0x16e>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
340172fa:	683b      	ldr	r3, [r7, #0]
340172fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
340172fe:	687b      	ldr	r3, [r7, #4]
34017300:	681b      	ldr	r3, [r3, #0]
34017302:	3a01      	subs	r2, #1
34017304:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34017306:	683b      	ldr	r3, [r7, #0]
34017308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401730a:	2b00      	cmp	r3, #0
3401730c:	d01e      	beq.n	3401734c <XSPI_ConfigCmd+0x1b4>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3401730e:	683b      	ldr	r3, [r7, #0]
34017310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34017312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34017316:	d10a      	bne.n	3401732e <XSPI_ConfigCmd+0x196>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017318:	687b      	ldr	r3, [r7, #4]
3401731a:	681b      	ldr	r3, [r3, #0]
3401731c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017320:	687b      	ldr	r3, [r7, #4]
34017322:	681b      	ldr	r3, [r3, #0]
34017324:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34017328:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3401732c:	e00e      	b.n	3401734c <XSPI_ConfigCmd+0x1b4>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3401732e:	687b      	ldr	r3, [r7, #4]
34017330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34017332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34017336:	d109      	bne.n	3401734c <XSPI_ConfigCmd+0x1b4>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
34017338:	687b      	ldr	r3, [r7, #4]
3401733a:	681b      	ldr	r3, [r3, #0]
3401733c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34017340:	687b      	ldr	r3, [r7, #4]
34017342:	681b      	ldr	r3, [r3, #0]
34017344:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
34017348:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401734c:	683b      	ldr	r3, [r7, #0]
3401734e:	68db      	ldr	r3, [r3, #12]
34017350:	2b00      	cmp	r3, #0
34017352:	f000 809e 	beq.w	34017492 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017356:	683b      	ldr	r3, [r7, #0]
34017358:	69db      	ldr	r3, [r3, #28]
3401735a:	2b00      	cmp	r3, #0
3401735c:	d055      	beq.n	3401740a <XSPI_ConfigCmd+0x272>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401735e:	683b      	ldr	r3, [r7, #0]
34017360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34017362:	2b00      	cmp	r3, #0
34017364:	d01e      	beq.n	340173a4 <XSPI_ConfigCmd+0x20c>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34017366:	69bb      	ldr	r3, [r7, #24]
34017368:	681a      	ldr	r2, [r3, #0]
3401736a:	4b37      	ldr	r3, [pc, #220]	@ (34017448 <XSPI_ConfigCmd+0x2b0>)
3401736c:	4013      	ands	r3, r2
3401736e:	683a      	ldr	r2, [r7, #0]
34017370:	68d1      	ldr	r1, [r2, #12]
34017372:	683a      	ldr	r2, [r7, #0]
34017374:	6952      	ldr	r2, [r2, #20]
34017376:	4311      	orrs	r1, r2
34017378:	683a      	ldr	r2, [r7, #0]
3401737a:	6912      	ldr	r2, [r2, #16]
3401737c:	4311      	orrs	r1, r2
3401737e:	683a      	ldr	r2, [r7, #0]
34017380:	69d2      	ldr	r2, [r2, #28]
34017382:	4311      	orrs	r1, r2
34017384:	683a      	ldr	r2, [r7, #0]
34017386:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34017388:	4311      	orrs	r1, r2
3401738a:	683a      	ldr	r2, [r7, #0]
3401738c:	6a12      	ldr	r2, [r2, #32]
3401738e:	4311      	orrs	r1, r2
34017390:	683a      	ldr	r2, [r7, #0]
34017392:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017394:	4311      	orrs	r1, r2
34017396:	683a      	ldr	r2, [r7, #0]
34017398:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3401739a:	430a      	orrs	r2, r1
3401739c:	431a      	orrs	r2, r3
3401739e:	69bb      	ldr	r3, [r7, #24]
340173a0:	601a      	str	r2, [r3, #0]
340173a2:	e028      	b.n	340173f6 <XSPI_ConfigCmd+0x25e>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
340173a4:	69bb      	ldr	r3, [r7, #24]
340173a6:	681b      	ldr	r3, [r3, #0]
340173a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
340173ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
340173b0:	683a      	ldr	r2, [r7, #0]
340173b2:	68d1      	ldr	r1, [r2, #12]
340173b4:	683a      	ldr	r2, [r7, #0]
340173b6:	6952      	ldr	r2, [r2, #20]
340173b8:	4311      	orrs	r1, r2
340173ba:	683a      	ldr	r2, [r7, #0]
340173bc:	6912      	ldr	r2, [r2, #16]
340173be:	4311      	orrs	r1, r2
340173c0:	683a      	ldr	r2, [r7, #0]
340173c2:	69d2      	ldr	r2, [r2, #28]
340173c4:	4311      	orrs	r1, r2
340173c6:	683a      	ldr	r2, [r7, #0]
340173c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
340173ca:	4311      	orrs	r1, r2
340173cc:	683a      	ldr	r2, [r7, #0]
340173ce:	6a12      	ldr	r2, [r2, #32]
340173d0:	430a      	orrs	r2, r1
340173d2:	431a      	orrs	r2, r3
340173d4:	69bb      	ldr	r3, [r7, #24]
340173d6:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
340173d8:	687b      	ldr	r3, [r7, #4]
340173da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340173dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340173e0:	d109      	bne.n	340173f6 <XSPI_ConfigCmd+0x25e>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
340173e2:	683b      	ldr	r3, [r7, #0]
340173e4:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
340173e6:	2b08      	cmp	r3, #8
340173e8:	d105      	bne.n	340173f6 <XSPI_ConfigCmd+0x25e>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
340173ea:	69bb      	ldr	r3, [r7, #24]
340173ec:	681b      	ldr	r3, [r3, #0]
340173ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
340173f2:	69bb      	ldr	r3, [r7, #24]
340173f4:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
340173f6:	683b      	ldr	r3, [r7, #0]
340173f8:	689a      	ldr	r2, [r3, #8]
340173fa:	693b      	ldr	r3, [r7, #16]
340173fc:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
340173fe:	687b      	ldr	r3, [r7, #4]
34017400:	681b      	ldr	r3, [r3, #0]
34017402:	683a      	ldr	r2, [r7, #0]
34017404:	6992      	ldr	r2, [r2, #24]
34017406:	649a      	str	r2, [r3, #72]	@ 0x48
34017408:	e07d      	b.n	34017506 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401740a:	683b      	ldr	r3, [r7, #0]
3401740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401740e:	2b00      	cmp	r3, #0
34017410:	d01c      	beq.n	3401744c <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
34017412:	69bb      	ldr	r3, [r7, #24]
34017414:	681b      	ldr	r3, [r3, #0]
34017416:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3401741a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3401741e:	683a      	ldr	r2, [r7, #0]
34017420:	68d1      	ldr	r1, [r2, #12]
34017422:	683a      	ldr	r2, [r7, #0]
34017424:	6952      	ldr	r2, [r2, #20]
34017426:	4311      	orrs	r1, r2
34017428:	683a      	ldr	r2, [r7, #0]
3401742a:	6912      	ldr	r2, [r2, #16]
3401742c:	4311      	orrs	r1, r2
3401742e:	683a      	ldr	r2, [r7, #0]
34017430:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34017432:	4311      	orrs	r1, r2
34017434:	683a      	ldr	r2, [r7, #0]
34017436:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34017438:	430a      	orrs	r2, r1
3401743a:	431a      	orrs	r2, r3
3401743c:	69bb      	ldr	r3, [r7, #24]
3401743e:	601a      	str	r2, [r3, #0]
34017440:	e022      	b.n	34017488 <XSPI_ConfigCmd+0x2f0>
34017442:	bf00      	nop
34017444:	3401b04c 	.word	0x3401b04c
34017448:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3401744c:	69bb      	ldr	r3, [r7, #24]
3401744e:	681b      	ldr	r3, [r3, #0]
34017450:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
34017454:	683b      	ldr	r3, [r7, #0]
34017456:	68d9      	ldr	r1, [r3, #12]
34017458:	683b      	ldr	r3, [r7, #0]
3401745a:	695b      	ldr	r3, [r3, #20]
3401745c:	4319      	orrs	r1, r3
3401745e:	683b      	ldr	r3, [r7, #0]
34017460:	691b      	ldr	r3, [r3, #16]
34017462:	430b      	orrs	r3, r1
34017464:	431a      	orrs	r2, r3
34017466:	69bb      	ldr	r3, [r7, #24]
34017468:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3401746a:	687b      	ldr	r3, [r7, #4]
3401746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401746e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34017472:	d109      	bne.n	34017488 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34017474:	683b      	ldr	r3, [r7, #0]
34017476:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34017478:	2b08      	cmp	r3, #8
3401747a:	d105      	bne.n	34017488 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401747c:	69bb      	ldr	r3, [r7, #24]
3401747e:	681b      	ldr	r3, [r3, #0]
34017480:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34017484:	69bb      	ldr	r3, [r7, #24]
34017486:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34017488:	683b      	ldr	r3, [r7, #0]
3401748a:	689a      	ldr	r2, [r3, #8]
3401748c:	693b      	ldr	r3, [r7, #16]
3401748e:	601a      	str	r2, [r3, #0]
34017490:	e039      	b.n	34017506 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34017492:	683b      	ldr	r3, [r7, #0]
34017494:	69db      	ldr	r3, [r3, #28]
34017496:	2b00      	cmp	r3, #0
34017498:	d030      	beq.n	340174fc <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401749a:	683b      	ldr	r3, [r7, #0]
3401749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3401749e:	2b00      	cmp	r3, #0
340174a0:	d017      	beq.n	340174d2 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
340174a2:	69bb      	ldr	r3, [r7, #24]
340174a4:	681b      	ldr	r3, [r3, #0]
340174a6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
340174aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
340174ae:	683a      	ldr	r2, [r7, #0]
340174b0:	69d1      	ldr	r1, [r2, #28]
340174b2:	683a      	ldr	r2, [r7, #0]
340174b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
340174b6:	4311      	orrs	r1, r2
340174b8:	683a      	ldr	r2, [r7, #0]
340174ba:	6a12      	ldr	r2, [r2, #32]
340174bc:	4311      	orrs	r1, r2
340174be:	683a      	ldr	r2, [r7, #0]
340174c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
340174c2:	4311      	orrs	r1, r2
340174c4:	683a      	ldr	r2, [r7, #0]
340174c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
340174c8:	430a      	orrs	r2, r1
340174ca:	431a      	orrs	r2, r3
340174cc:	69bb      	ldr	r3, [r7, #24]
340174ce:	601a      	str	r2, [r3, #0]
340174d0:	e00e      	b.n	340174f0 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
340174d2:	69bb      	ldr	r3, [r7, #24]
340174d4:	681b      	ldr	r3, [r3, #0]
340174d6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
340174da:	683b      	ldr	r3, [r7, #0]
340174dc:	69d9      	ldr	r1, [r3, #28]
340174de:	683b      	ldr	r3, [r7, #0]
340174e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340174e2:	4319      	orrs	r1, r3
340174e4:	683b      	ldr	r3, [r7, #0]
340174e6:	6a1b      	ldr	r3, [r3, #32]
340174e8:	430b      	orrs	r3, r1
340174ea:	431a      	orrs	r2, r3
340174ec:	69bb      	ldr	r3, [r7, #24]
340174ee:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
340174f0:	687b      	ldr	r3, [r7, #4]
340174f2:	681b      	ldr	r3, [r3, #0]
340174f4:	683a      	ldr	r2, [r7, #0]
340174f6:	6992      	ldr	r2, [r2, #24]
340174f8:	649a      	str	r2, [r3, #72]	@ 0x48
340174fa:	e004      	b.n	34017506 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
340174fc:	2301      	movs	r3, #1
340174fe:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34017500:	687b      	ldr	r3, [r7, #4]
34017502:	2208      	movs	r2, #8
34017504:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
34017506:	7ffb      	ldrb	r3, [r7, #31]
}
34017508:	4618      	mov	r0, r3
3401750a:	3720      	adds	r7, #32
3401750c:	46bd      	mov	sp, r7
3401750e:	bd80      	pop	{r7, pc}

34017510 <CMW_CAMERA_GetDCMIPPHandle>:
static void CMW_CAMERA_PwrDown(void);
static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch);
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName);

DCMIPP_HandleTypeDef* CMW_CAMERA_GetDCMIPPHandle(void)
{
34017510:	b480      	push	{r7}
34017512:	af00      	add	r7, sp, #0
    return &hcamera_dcmipp;
34017514:	4b02      	ldr	r3, [pc, #8]	@ (34017520 <CMW_CAMERA_GetDCMIPPHandle+0x10>)
}
34017516:	4618      	mov	r0, r3
34017518:	46bd      	mov	sp, r7
3401751a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401751e:	4770      	bx	lr
34017520:	3401c1c4 	.word	0x3401c1c4

34017524 <CMW_CAMERA_PIPE_VsyncEventCallback>:
 * @brief  Vsync Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
34017524:	b480      	push	{r7}
34017526:	b083      	sub	sp, #12
34017528:	af00      	add	r7, sp, #0
3401752a:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
3401752c:	2300      	movs	r3, #0
}
3401752e:	4618      	mov	r0, r3
34017530:	370c      	adds	r7, #12
34017532:	46bd      	mov	sp, r7
34017534:	f85d 7b04 	ldr.w	r7, [sp], #4
34017538:	4770      	bx	lr

3401753a <CMW_CAMERA_PIPE_FrameEventCallback>:
 * @brief  Frame Event callback on pipe
 * @param  Pipe  Pipe receiving the callback
 * @retval None
 */
__weak int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
3401753a:	b480      	push	{r7}
3401753c:	b083      	sub	sp, #12
3401753e:	af00      	add	r7, sp, #0
34017540:	6078      	str	r0, [r7, #4]
  UNUSED(pipe);

  return HAL_OK;
34017542:	2300      	movs	r3, #0
}
34017544:	4618      	mov	r0, r3
34017546:	370c      	adds	r7, #12
34017548:	46bd      	mov	sp, r7
3401754a:	f85d 7b04 	ldr.w	r7, [sp], #4
3401754e:	4770      	bx	lr

34017550 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_VsyncEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017550:	b580      	push	{r7, lr}
34017552:	b082      	sub	sp, #8
34017554:	af00      	add	r7, sp, #0
34017556:	6078      	str	r0, [r7, #4]
34017558:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.VsyncEventCallback != NULL)
3401755a:	4b08      	ldr	r3, [pc, #32]	@ (3401757c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
3401755c:	691b      	ldr	r3, [r3, #16]
3401755e:	2b00      	cmp	r3, #0
34017560:	d004      	beq.n	3401756c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>
  {
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34017562:	4b06      	ldr	r3, [pc, #24]	@ (3401757c <HAL_DCMIPP_PIPE_VsyncEventCallback+0x2c>)
34017564:	691b      	ldr	r3, [r3, #16]
34017566:	6839      	ldr	r1, [r7, #0]
34017568:	4805      	ldr	r0, [pc, #20]	@ (34017580 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x30>)
3401756a:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
3401756c:	6838      	ldr	r0, [r7, #0]
3401756e:	f7ff ffd9 	bl	34017524 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34017572:	bf00      	nop
34017574:	3708      	adds	r7, #8
34017576:	46bd      	mov	sp, r7
34017578:	bd80      	pop	{r7, pc}
3401757a:	bf00      	nop
3401757c:	3401c1d0 	.word	0x3401c1d0
34017580:	3401c238 	.word	0x3401c238

34017584 <HAL_DCMIPP_PIPE_FrameEventCallback>:
 * @param  hdcmipp DCMIPP device handle
 *         Pipe    Pipe receiving the callback
 * @retval None
 */
void HAL_DCMIPP_PIPE_FrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
34017584:	b580      	push	{r7, lr}
34017586:	b082      	sub	sp, #8
34017588:	af00      	add	r7, sp, #0
3401758a:	6078      	str	r0, [r7, #4]
3401758c:	6039      	str	r1, [r7, #0]
  UNUSED(hdcmipp);
  if(Camera_Drv.FrameEventCallback != NULL)
3401758e:	4b08      	ldr	r3, [pc, #32]	@ (340175b0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017590:	695b      	ldr	r3, [r3, #20]
34017592:	2b00      	cmp	r3, #0
34017594:	d004      	beq.n	340175a0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>
  {
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34017596:	4b06      	ldr	r3, [pc, #24]	@ (340175b0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x2c>)
34017598:	695b      	ldr	r3, [r3, #20]
3401759a:	6839      	ldr	r1, [r7, #0]
3401759c:	4805      	ldr	r0, [pc, #20]	@ (340175b4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x30>)
3401759e:	4798      	blx	r3
  }
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
340175a0:	6838      	ldr	r0, [r7, #0]
340175a2:	f7ff ffca 	bl	3401753a <CMW_CAMERA_PIPE_FrameEventCallback>
}
340175a6:	bf00      	nop
340175a8:	3708      	adds	r7, #8
340175aa:	46bd      	mov	sp, r7
340175ac:	bd80      	pop	{r7, pc}
340175ae:	bf00      	nop
340175b0:	3401c1d0 	.word	0x3401c1d0
340175b4:	3401c238 	.word	0x3401c238

340175b8 <DMA2D_IRQHandler>:
                                   ctx->layers[0].size.height);
  assert(ret == HAL_OK);
}

void DMA2D_IRQHandler(void)
{
340175b8:	b580      	push	{r7, lr}
340175ba:	af00      	add	r7, sp, #0
  HAL_DMA2D_IRQHandler(dma2d_current);
340175bc:	4b03      	ldr	r3, [pc, #12]	@ (340175cc <DMA2D_IRQHandler+0x14>)
340175be:	681b      	ldr	r3, [r3, #0]
340175c0:	4618      	mov	r0, r3
340175c2:	f7ed fcca 	bl	34004f5a <HAL_DMA2D_IRQHandler>
}
340175c6:	bf00      	nop
340175c8:	bd80      	pop	{r7, pc}
340175ca:	bf00      	nop
340175cc:	3401c37c 	.word	0x3401c37c

340175d0 <spi_transfert_data_deinit>:
  ctx->len = w * h * 2;
  LCD_CS_LOW();
}

static void spi_transfert_data_deinit(struct scrl_spi_ctx *ctx)
{
340175d0:	b480      	push	{r7}
340175d2:	b083      	sub	sp, #12
340175d4:	af00      	add	r7, sp, #0
340175d6:	6078      	str	r0, [r7, #4]
  LCD_CS_HIGH();
340175d8:	4b04      	ldr	r3, [pc, #16]	@ (340175ec <spi_transfert_data_deinit+0x1c>)
340175da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340175de:	619a      	str	r2, [r3, #24]
}
340175e0:	bf00      	nop
340175e2:	370c      	adds	r7, #12
340175e4:	46bd      	mov	sp, r7
340175e6:	f85d 7b04 	ldr.w	r7, [sp], #4
340175ea:	4770      	bx	lr
340175ec:	56020c00 	.word	0x56020c00

340175f0 <spi_transfert_data_chunck_start>:

static void spi_transfert_data_chunck_start(struct scrl_spi_ctx *ctx)
{
340175f0:	b580      	push	{r7, lr}
340175f2:	b084      	sub	sp, #16
340175f4:	af00      	add	r7, sp, #0
340175f6:	6078      	str	r0, [r7, #4]
  uint16_t size = MIN(ctx->len, 63 * 1024);
340175f8:	687b      	ldr	r3, [r7, #4]
340175fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
340175fe:	f5b3 4f7c 	cmp.w	r3, #64512	@ 0xfc00
34017602:	bfa8      	it	ge
34017604:	f44f 437c 	movge.w	r3, #64512	@ 0xfc00
34017608:	81fb      	strh	r3, [r7, #14]
  int ret;

  ret = HAL_SPI_Transmit_DMA(&hspi, ctx->data, size);
3401760a:	687b      	ldr	r3, [r7, #4]
3401760c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34017610:	89fa      	ldrh	r2, [r7, #14]
34017612:	4619      	mov	r1, r3
34017614:	4810      	ldr	r0, [pc, #64]	@ (34017658 <spi_transfert_data_chunck_start+0x68>)
34017616:	f7fd f893 	bl	34014740 <HAL_SPI_Transmit_DMA>
3401761a:	4603      	mov	r3, r0
3401761c:	60bb      	str	r3, [r7, #8]
  assert(ret == HAL_OK);
3401761e:	68bb      	ldr	r3, [r7, #8]
34017620:	2b00      	cmp	r3, #0
34017622:	d005      	beq.n	34017630 <spi_transfert_data_chunck_start+0x40>
34017624:	4b0d      	ldr	r3, [pc, #52]	@ (3401765c <spi_transfert_data_chunck_start+0x6c>)
34017626:	4a0e      	ldr	r2, [pc, #56]	@ (34017660 <spi_transfert_data_chunck_start+0x70>)
34017628:	219e      	movs	r1, #158	@ 0x9e
3401762a:	480e      	ldr	r0, [pc, #56]	@ (34017664 <spi_transfert_data_chunck_start+0x74>)
3401762c:	f000 fb96 	bl	34017d5c <__assert_func>

  ctx->len -= size;
34017630:	687b      	ldr	r3, [r7, #4]
34017632:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34017636:	89fb      	ldrh	r3, [r7, #14]
34017638:	1ad2      	subs	r2, r2, r3
3401763a:	687b      	ldr	r3, [r7, #4]
3401763c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ctx->data += size;
34017640:	687b      	ldr	r3, [r7, #4]
34017642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34017646:	89fb      	ldrh	r3, [r7, #14]
34017648:	441a      	add	r2, r3
3401764a:	687b      	ldr	r3, [r7, #4]
3401764c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
34017650:	bf00      	nop
34017652:	3710      	adds	r7, #16
34017654:	46bd      	mov	sp, r7
34017656:	bd80      	pop	{r7, pc}
34017658:	3401c438 	.word	0x3401c438
3401765c:	3401b0f8 	.word	0x3401b0f8
34017660:	3401ba10 	.word	0x3401ba10
34017664:	3401b108 	.word	0x3401b108

34017668 <HAL_SPI_TxCpltCallback>:
  ret = xSemaphoreGive(ctx->dma_sem);
  assert(ret == pdTRUE);
}
#else
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
34017668:	b580      	push	{r7, lr}
3401766a:	b084      	sub	sp, #16
3401766c:	af00      	add	r7, sp, #0
3401766e:	6078      	str	r0, [r7, #4]
  struct scrl_spi_ctx *ctx = &scrl_ctx;
34017670:	4b0a      	ldr	r3, [pc, #40]	@ (3401769c <HAL_SPI_TxCpltCallback+0x34>)
34017672:	60fb      	str	r3, [r7, #12]

  if (ctx->len) {
34017674:	68fb      	ldr	r3, [r7, #12]
34017676:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3401767a:	2b00      	cmp	r3, #0
3401767c:	d003      	beq.n	34017686 <HAL_SPI_TxCpltCallback+0x1e>
    spi_transfert_data_chunck_start(ctx);
3401767e:	68f8      	ldr	r0, [r7, #12]
34017680:	f7ff ffb6 	bl	340175f0 <spi_transfert_data_chunck_start>
  } else {
    spi_transfert_data_deinit(ctx);
    ctx->is_screen_ready_to_update = 1;
  }
}
34017684:	e006      	b.n	34017694 <HAL_SPI_TxCpltCallback+0x2c>
    spi_transfert_data_deinit(ctx);
34017686:	68f8      	ldr	r0, [r7, #12]
34017688:	f7ff ffa2 	bl	340175d0 <spi_transfert_data_deinit>
    ctx->is_screen_ready_to_update = 1;
3401768c:	68fb      	ldr	r3, [r7, #12]
3401768e:	2201      	movs	r2, #1
34017690:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34017694:	bf00      	nop
34017696:	3710      	adds	r7, #16
34017698:	46bd      	mov	sp, r7
3401769a:	bd80      	pop	{r7, pc}
3401769c:	3401c380 	.word	0x3401c380

340176a0 <HAL_SPI_ErrorCallback>:
#endif

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
340176a0:	b580      	push	{r7, lr}
340176a2:	b082      	sub	sp, #8
340176a4:	af00      	add	r7, sp, #0
340176a6:	6078      	str	r0, [r7, #4]
  assert(0);
340176a8:	4b03      	ldr	r3, [pc, #12]	@ (340176b8 <HAL_SPI_ErrorCallback+0x18>)
340176aa:	4a04      	ldr	r2, [pc, #16]	@ (340176bc <HAL_SPI_ErrorCallback+0x1c>)
340176ac:	f44f 7123 	mov.w	r1, #652	@ 0x28c
340176b0:	4803      	ldr	r0, [pc, #12]	@ (340176c0 <HAL_SPI_ErrorCallback+0x20>)
340176b2:	f000 fb53 	bl	34017d5c <__assert_func>
340176b6:	bf00      	nop
340176b8:	3401b190 	.word	0x3401b190
340176bc:	3401ba30 	.word	0x3401ba30
340176c0:	3401b108 	.word	0x3401b108

340176c4 <SPI5_IRQHandler>:
}

void SPI5_IRQHandler(void)
{
340176c4:	b580      	push	{r7, lr}
340176c6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
340176c8:	4802      	ldr	r0, [pc, #8]	@ (340176d4 <SPI5_IRQHandler+0x10>)
340176ca:	f7fd fa17 	bl	34014afc <HAL_SPI_IRQHandler>
}
340176ce:	bf00      	nop
340176d0:	bd80      	pop	{r7, pc}
340176d2:	bf00      	nop
340176d4:	3401c438 	.word	0x3401c438

340176d8 <HPDMA1_Channel12_IRQHandler>:

void HPDMA1_Channel12_IRQHandler(void)
{
340176d8:	b580      	push	{r7, lr}
340176da:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma);
340176dc:	4802      	ldr	r0, [pc, #8]	@ (340176e8 <HPDMA1_Channel12_IRQHandler+0x10>)
340176de:	f7ed faa2 	bl	34004c26 <HAL_DMA_IRQHandler>
}
340176e2:	bf00      	nop
340176e4:	bd80      	pop	{r7, pc}
340176e6:	bf00      	nop
340176e8:	3401c4c8 	.word	0x3401c4c8

340176ec <simd_matrix_vector_mul_int8>:
    const int8_t* matrix,   // Pointer to MxN matrix
    const int8_t* vector,   // Pointer to vector of size N
    int32_t* result,        // Output vector of size M
    uint32_t M,             // Number of rows
    uint32_t N              // Number of columns (must be multiple of 4)
) {
340176ec:	b480      	push	{r7}
340176ee:	b0a5      	sub	sp, #148	@ 0x94
340176f0:	af00      	add	r7, sp, #0
340176f2:	60f8      	str	r0, [r7, #12]
340176f4:	60b9      	str	r1, [r7, #8]
340176f6:	607a      	str	r2, [r7, #4]
340176f8:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < M; i++) {
340176fa:	2300      	movs	r3, #0
340176fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34017700:	e0c7      	b.n	34017892 <simd_matrix_vector_mul_int8+0x1a6>
        const int8_t* mat_row = &matrix[i * N];
34017702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
34017706:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
3401770a:	fb02 f303 	mul.w	r3, r2, r3
3401770e:	68fa      	ldr	r2, [r7, #12]
34017710:	4413      	add	r3, r2
34017712:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        int32_t acc = 0;
34017716:	2300      	movs	r3, #0
34017718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        for (uint32_t j = 0; j < N; j += 4) {
3401771c:	2300      	movs	r3, #0
3401771e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34017722:	e0a2      	b.n	3401786a <simd_matrix_vector_mul_int8+0x17e>
            // Load 4 int8_t matrix elements and widen to int16_t
            int16_t mat16_0 = (int16_t)mat_row[j];
34017724:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
34017728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3401772c:	4413      	add	r3, r2
3401772e:	f993 3000 	ldrsb.w	r3, [r3]
34017732:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
            int16_t mat16_1 = (int16_t)mat_row[j+1];
34017736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3401773a:	3301      	adds	r3, #1
3401773c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
34017740:	4413      	add	r3, r2
34017742:	f993 3000 	ldrsb.w	r3, [r3]
34017746:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
            int16_t mat16_2 = (int16_t)mat_row[j+2];
3401774a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3401774e:	3302      	adds	r3, #2
34017750:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
34017754:	4413      	add	r3, r2
34017756:	f993 3000 	ldrsb.w	r3, [r3]
3401775a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
            int16_t mat16_3 = (int16_t)mat_row[j+3];
3401775e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34017762:	3303      	adds	r3, #3
34017764:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
34017768:	4413      	add	r3, r2
3401776a:	f993 3000 	ldrsb.w	r3, [r3]
3401776e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

            int16_t vec16_0 = (int16_t)vector[j];
34017772:	68ba      	ldr	r2, [r7, #8]
34017774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34017778:	4413      	add	r3, r2
3401777a:	f993 3000 	ldrsb.w	r3, [r3]
3401777e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
            int16_t vec16_1 = (int16_t)vector[j+1];
34017782:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34017786:	3301      	adds	r3, #1
34017788:	68ba      	ldr	r2, [r7, #8]
3401778a:	4413      	add	r3, r2
3401778c:	f993 3000 	ldrsb.w	r3, [r3]
34017790:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
            int16_t vec16_2 = (int16_t)vector[j+2];
34017794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34017798:	3302      	adds	r3, #2
3401779a:	68ba      	ldr	r2, [r7, #8]
3401779c:	4413      	add	r3, r2
3401779e:	f993 3000 	ldrsb.w	r3, [r3]
340177a2:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
            int16_t vec16_3 = (int16_t)vector[j+3];
340177a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
340177aa:	3303      	adds	r3, #3
340177ac:	68ba      	ldr	r2, [r7, #8]
340177ae:	4413      	add	r3, r2
340177b0:	f993 3000 	ldrsb.w	r3, [r3]
340177b4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

            // Pack two 16-bit values into one 32-bit value (low | high)
            int32_t mat_pack1 = __PKHBT(mat16_0, mat16_1, 16);
340177b8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
340177bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
340177be:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
340177c2:	66bb      	str	r3, [r7, #104]	@ 0x68
340177c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
340177c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
340177c8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
340177cc:	667b      	str	r3, [r7, #100]	@ 0x64
340177ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
340177d0:	663b      	str	r3, [r7, #96]	@ 0x60
            int32_t mat_pack2 = __PKHBT(mat16_2, mat16_3, 16);
340177d2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
340177d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
340177d8:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
340177dc:	65bb      	str	r3, [r7, #88]	@ 0x58
340177de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
340177e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
340177e2:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
340177e6:	657b      	str	r3, [r7, #84]	@ 0x54
340177e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
340177ea:	653b      	str	r3, [r7, #80]	@ 0x50

            int32_t vec_pack1 = __PKHBT(vec16_0, vec16_1, 16);
340177ec:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
340177f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
340177f2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
340177f6:	64bb      	str	r3, [r7, #72]	@ 0x48
340177f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
340177fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
340177fc:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
34017800:	647b      	str	r3, [r7, #68]	@ 0x44
34017802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34017804:	643b      	str	r3, [r7, #64]	@ 0x40
            int32_t vec_pack2 = __PKHBT(vec16_2, vec16_3, 16);
34017806:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
3401780a:	63fb      	str	r3, [r7, #60]	@ 0x3c
3401780c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
34017810:	63bb      	str	r3, [r7, #56]	@ 0x38
34017812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34017814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
34017816:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
3401781a:	637b      	str	r3, [r7, #52]	@ 0x34
3401781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3401781e:	633b      	str	r3, [r7, #48]	@ 0x30

            // Multiply-accumulate using SIMD (SMLAD: dual 16-bit signed multiply and accumulate)
            acc = __SMLAD(mat_pack1, vec_pack1, acc);
34017820:	6e39      	ldr	r1, [r7, #96]	@ 0x60
34017822:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
34017824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
34017828:	61f9      	str	r1, [r7, #28]
3401782a:	61ba      	str	r2, [r7, #24]
3401782c:	617b      	str	r3, [r7, #20]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
3401782e:	69fb      	ldr	r3, [r7, #28]
34017830:	69ba      	ldr	r2, [r7, #24]
34017832:	6979      	ldr	r1, [r7, #20]
34017834:	fb23 1302 	smlad	r3, r3, r2, r1
34017838:	613b      	str	r3, [r7, #16]
  return(result);
3401783a:	693b      	ldr	r3, [r7, #16]
3401783c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            acc = __SMLAD(mat_pack2, vec_pack2, acc);
34017840:	6d39      	ldr	r1, [r7, #80]	@ 0x50
34017842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
34017844:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
34017848:	62f9      	str	r1, [r7, #44]	@ 0x2c
3401784a:	62ba      	str	r2, [r7, #40]	@ 0x28
3401784c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
3401784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34017850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
34017852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
34017854:	fb23 1302 	smlad	r3, r3, r2, r1
34017858:	623b      	str	r3, [r7, #32]
  return(result);
3401785a:	6a3b      	ldr	r3, [r7, #32]
3401785c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (uint32_t j = 0; j < N; j += 4) {
34017860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34017864:	3304      	adds	r3, #4
34017866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3401786a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
3401786e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
34017872:	429a      	cmp	r2, r3
34017874:	f4ff af56 	bcc.w	34017724 <simd_matrix_vector_mul_int8+0x38>
        }

        result[i] = acc;
34017878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
3401787c:	009b      	lsls	r3, r3, #2
3401787e:	687a      	ldr	r2, [r7, #4]
34017880:	4413      	add	r3, r2
34017882:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
34017886:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < M; i++) {
34017888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
3401788c:	3301      	adds	r3, #1
3401788e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34017892:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
34017896:	683b      	ldr	r3, [r7, #0]
34017898:	429a      	cmp	r2, r3
3401789a:	f4ff af32 	bcc.w	34017702 <simd_matrix_vector_mul_int8+0x16>
    }
}
3401789e:	bf00      	nop
340178a0:	bf00      	nop
340178a2:	3794      	adds	r7, #148	@ 0x94
340178a4:	46bd      	mov	sp, r7
340178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340178aa:	4770      	bx	lr

340178ac <EpochBlock_IsEpochBlob>:
  {
    return ((eb->flags & EpochBlock_Flags_epoch_end) != 0);
  }

  static inline bool EpochBlock_IsEpochBlob(const EpochBlock_ItemTypeDef *eb)
  {
340178ac:	b480      	push	{r7}
340178ae:	b083      	sub	sp, #12
340178b0:	af00      	add	r7, sp, #0
340178b2:	6078      	str	r0, [r7, #4]
    return ((eb->flags & EpochBlock_Flags_blob) != 0);
340178b4:	687b      	ldr	r3, [r7, #4]
340178b6:	8a1b      	ldrh	r3, [r3, #16]
340178b8:	f003 0304 	and.w	r3, r3, #4
340178bc:	2b00      	cmp	r3, #0
340178be:	bf14      	ite	ne
340178c0:	2301      	movne	r3, #1
340178c2:	2300      	moveq	r3, #0
340178c4:	b2db      	uxtb	r3, r3
  }
340178c6:	4618      	mov	r0, r3
340178c8:	370c      	adds	r7, #12
340178ca:	46bd      	mov	sp, r7
340178cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340178d0:	4770      	bx	lr
	...

340178d4 <EpochBlock_EpochControllerUnit>:
  {
    return ((eb->flags & EpochBlock_Flags_internal) != 0);
  }

  static inline uint32_t EpochBlock_EpochControllerUnit(const EpochBlock_ItemTypeDef *eb)
  {
340178d4:	b580      	push	{r7, lr}
340178d6:	b082      	sub	sp, #8
340178d8:	af00      	add	r7, sp, #0
340178da:	6078      	str	r0, [r7, #4]
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
340178dc:	6878      	ldr	r0, [r7, #4]
340178de:	f7ff ffe5 	bl	340178ac <EpochBlock_IsEpochBlob>
340178e2:	4603      	mov	r3, r0
340178e4:	2b00      	cmp	r3, #0
340178e6:	d106      	bne.n	340178f6 <EpochBlock_EpochControllerUnit+0x22>
340178e8:	4b06      	ldr	r3, [pc, #24]	@ (34017904 <EpochBlock_EpochControllerUnit+0x30>)
340178ea:	4a07      	ldr	r2, [pc, #28]	@ (34017908 <EpochBlock_EpochControllerUnit+0x34>)
340178ec:	f240 212f 	movw	r1, #559	@ 0x22f
340178f0:	4806      	ldr	r0, [pc, #24]	@ (3401790c <EpochBlock_EpochControllerUnit+0x38>)
340178f2:	f000 fa33 	bl	34017d5c <__assert_func>
    return eb->wait_mask;
340178f6:	687b      	ldr	r3, [r7, #4]
340178f8:	68db      	ldr	r3, [r3, #12]
  }
340178fa:	4618      	mov	r0, r3
340178fc:	3708      	adds	r7, #8
340178fe:	46bd      	mov	sp, r7
34017900:	bd80      	pop	{r7, pc}
34017902:	bf00      	nop
34017904:	3401b1a0 	.word	0x3401b1a0
34017908:	3401ba48 	.word	0x3401ba48
3401790c:	3401b1bc 	.word	0x3401b1bc

34017910 <dump_dma_state>:
#error current ATON runtime supports only up to 32 epoch controllers!
#endif // (ATON_EPOCHCTRL_NUM > 32)

#endif // `ATON_INT_NR` and `ATON_STRENG_NUM` are defined

LL_ATON_WEAK void dump_dma_state(void){};
34017910:	b480      	push	{r7}
34017912:	af00      	add	r7, sp, #0
34017914:	bf00      	nop
34017916:	46bd      	mov	sp, r7
34017918:	f85d 7b04 	ldr.w	r7, [sp], #4
3401791c:	4770      	bx	lr
	...

34017920 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34017920:	b5b0      	push	{r4, r5, r7, lr}
34017922:	b086      	sub	sp, #24
34017924:	af00      	add	r7, sp, #0
34017926:	6078      	str	r0, [r7, #4]
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
34017928:	687b      	ldr	r3, [r7, #4]
3401792a:	2b00      	cmp	r3, #0
3401792c:	f000 8095 	beq.w	34017a5a <__LL_ATON_RT_IrqErr+0x13a>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
34017930:	687a      	ldr	r2, [r7, #4]
34017932:	4b4c      	ldr	r3, [pc, #304]	@ (34017a64 <__LL_ATON_RT_IrqErr+0x144>)
34017934:	4013      	ands	r3, r2
34017936:	2b00      	cmp	r3, #0
34017938:	d013      	beq.n	34017962 <__LL_ATON_RT_IrqErr+0x42>
    int64_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#else                    //(ATON_INT_NR <= 32)
    int32_t masked_irqs; // must be signed for two's compliment `(-masked_irqs)`
#endif                   //(ATON_INT_NR <= 32)

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));
3401793a:	687a      	ldr	r2, [r7, #4]
3401793c:	4b49      	ldr	r3, [pc, #292]	@ (34017a64 <__LL_ATON_RT_IrqErr+0x144>)
3401793e:	4013      	ands	r3, r2
34017940:	613b      	str	r3, [r7, #16]

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
34017942:	693b      	ldr	r3, [r7, #16]
34017944:	425a      	negs	r2, r3
34017946:	693b      	ldr	r3, [r7, #16]
34017948:	4013      	ands	r3, r2
3401794a:	60fb      	str	r3, [r7, #12]
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
3401794c:	68fb      	ldr	r3, [r7, #12]
3401794e:	031a      	lsls	r2, r3, #12
34017950:	4b45      	ldr	r3, [pc, #276]	@ (34017a68 <__LL_ATON_RT_IrqErr+0x148>)
34017952:	4413      	add	r3, r2
34017954:	681b      	ldr	r3, [r3, #0]
34017956:	60bb      	str	r3, [r7, #8]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
34017958:	68ba      	ldr	r2, [r7, #8]
3401795a:	68f9      	ldr	r1, [r7, #12]
3401795c:	4843      	ldr	r0, [pc, #268]	@ (34017a6c <__LL_ATON_RT_IrqErr+0x14c>)
3401795e:	f001 f89d 	bl	34018a9c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
34017962:	687b      	ldr	r3, [r7, #4]
34017964:	f3c3 0309 	ubfx	r3, r3, #0, #10
34017968:	2b00      	cmp	r3, #0
3401796a:	d002      	beq.n	34017972 <__LL_ATON_RT_IrqErr+0x52>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
3401796c:	4840      	ldr	r0, [pc, #256]	@ (34017a70 <__LL_ATON_RT_IrqErr+0x150>)
3401796e:	f001 f8fd 	bl	34018b6c <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
34017972:	687b      	ldr	r3, [r7, #4]
34017974:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
34017978:	2b00      	cmp	r3, #0
3401797a:	d002      	beq.n	34017982 <__LL_ATON_RT_IrqErr+0x62>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
3401797c:	483d      	ldr	r0, [pc, #244]	@ (34017a74 <__LL_ATON_RT_IrqErr+0x154>)
3401797e:	f001 f8f5 	bl	34018b6c <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
34017982:	687b      	ldr	r3, [r7, #4]
34017984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34017988:	2b00      	cmp	r3, #0
3401798a:	d002      	beq.n	34017992 <__LL_ATON_RT_IrqErr+0x72>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3401798c:	483a      	ldr	r0, [pc, #232]	@ (34017a78 <__LL_ATON_RT_IrqErr+0x158>)
3401798e:	f001 f8ed 	bl	34018b6c <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
34017992:	687b      	ldr	r3, [r7, #4]
34017994:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
34017998:	2b00      	cmp	r3, #0
3401799a:	d015      	beq.n	340179c8 <__LL_ATON_RT_IrqErr+0xa8>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
3401799c:	4837      	ldr	r0, [pc, #220]	@ (34017a7c <__LL_ATON_RT_IrqErr+0x15c>)
3401799e:	f001 f8e5 	bl	34018b6c <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
340179a2:	2300      	movs	r3, #0
340179a4:	617b      	str	r3, [r7, #20]
340179a6:	e00c      	b.n	340179c2 <__LL_ATON_RT_IrqErr+0xa2>
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
340179a8:	697b      	ldr	r3, [r7, #20]
340179aa:	031a      	lsls	r2, r3, #12
340179ac:	4b34      	ldr	r3, [pc, #208]	@ (34017a80 <__LL_ATON_RT_IrqErr+0x160>)
340179ae:	4413      	add	r3, r2
340179b0:	681b      	ldr	r3, [r3, #0]
340179b2:	461a      	mov	r2, r3
340179b4:	6979      	ldr	r1, [r7, #20]
340179b6:	4833      	ldr	r0, [pc, #204]	@ (34017a84 <__LL_ATON_RT_IrqErr+0x164>)
340179b8:	f001 f870 	bl	34018a9c <iprintf>
    for (i = 0; i < ATON_BUSIF_NUM; i++)
340179bc:	697b      	ldr	r3, [r7, #20]
340179be:	3301      	adds	r3, #1
340179c0:	617b      	str	r3, [r7, #20]
340179c2:	697b      	ldr	r3, [r7, #20]
340179c4:	2b01      	cmp	r3, #1
340179c6:	ddef      	ble.n	340179a8 <__LL_ATON_RT_IrqErr+0x88>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
340179c8:	687b      	ldr	r3, [r7, #4]
340179ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340179ce:	2b00      	cmp	r3, #0
340179d0:	d002      	beq.n	340179d8 <__LL_ATON_RT_IrqErr+0xb8>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
340179d2:	482d      	ldr	r0, [pc, #180]	@ (34017a88 <__LL_ATON_RT_IrqErr+0x168>)
340179d4:	f001 f8ca 	bl	34018b6c <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
340179d8:	687b      	ldr	r3, [r7, #4]
340179da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
340179de:	2b00      	cmp	r3, #0
340179e0:	d011      	beq.n	34017a06 <__LL_ATON_RT_IrqErr+0xe6>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
340179e2:	4b2a      	ldr	r3, [pc, #168]	@ (34017a8c <__LL_ATON_RT_IrqErr+0x16c>)
340179e4:	681b      	ldr	r3, [r3, #0]
340179e6:	4619      	mov	r1, r3
340179e8:	4829      	ldr	r0, [pc, #164]	@ (34017a90 <__LL_ATON_RT_IrqErr+0x170>)
340179ea:	f001 f857 	bl	34018a9c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
340179ee:	4b29      	ldr	r3, [pc, #164]	@ (34017a94 <__LL_ATON_RT_IrqErr+0x174>)
340179f0:	681b      	ldr	r3, [r3, #0]
340179f2:	4619      	mov	r1, r3
340179f4:	4828      	ldr	r0, [pc, #160]	@ (34017a98 <__LL_ATON_RT_IrqErr+0x178>)
340179f6:	f001 f851 	bl	34018a9c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
340179fa:	4b28      	ldr	r3, [pc, #160]	@ (34017a9c <__LL_ATON_RT_IrqErr+0x17c>)
340179fc:	681b      	ldr	r3, [r3, #0]
340179fe:	4619      	mov	r1, r3
34017a00:	4827      	ldr	r0, [pc, #156]	@ (34017aa0 <__LL_ATON_RT_IrqErr+0x180>)
34017a02:	f001 f84b 	bl	34018a9c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
34017a06:	687b      	ldr	r3, [r7, #4]
34017a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34017a0c:	2b00      	cmp	r3, #0
34017a0e:	d002      	beq.n	34017a16 <__LL_ATON_RT_IrqErr+0xf6>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
34017a10:	4824      	ldr	r0, [pc, #144]	@ (34017aa4 <__LL_ATON_RT_IrqErr+0x184>)
34017a12:	f001 f8ab 	bl	34018b6c <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
34017a16:	687b      	ldr	r3, [r7, #4]
34017a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
34017a1c:	2b00      	cmp	r3, #0
34017a1e:	d002      	beq.n	34017a26 <__LL_ATON_RT_IrqErr+0x106>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
34017a20:	4821      	ldr	r0, [pc, #132]	@ (34017aa8 <__LL_ATON_RT_IrqErr+0x188>)
34017a22:	f001 f8a3 	bl	34018b6c <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
34017a26:	f7ff ff73 	bl	34017910 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
34017a2a:	687b      	ldr	r3, [r7, #4]
34017a2c:	2200      	movs	r2, #0
34017a2e:	461c      	mov	r4, r3
34017a30:	4615      	mov	r5, r2
34017a32:	4622      	mov	r2, r4
34017a34:	462b      	mov	r3, r5
34017a36:	f240 314a 	movw	r1, #842	@ 0x34a
34017a3a:	481c      	ldr	r0, [pc, #112]	@ (34017aac <__LL_ATON_RT_IrqErr+0x18c>)
34017a3c:	f001 f82e 	bl	34018a9c <iprintf>
//#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
34017a40:	4b1b      	ldr	r3, [pc, #108]	@ (34017ab0 <__LL_ATON_RT_IrqErr+0x190>)
34017a42:	681b      	ldr	r3, [r3, #0]
34017a44:	689b      	ldr	r3, [r3, #8]
34017a46:	4618      	mov	r0, r3
34017a48:	f000 ff40 	bl	340188cc <fflush>
//#endif
  LL_ATON_ASSERT(false); // may never happen
34017a4c:	4b19      	ldr	r3, [pc, #100]	@ (34017ab4 <__LL_ATON_RT_IrqErr+0x194>)
34017a4e:	4a1a      	ldr	r2, [pc, #104]	@ (34017ab8 <__LL_ATON_RT_IrqErr+0x198>)
34017a50:	f240 314e 	movw	r1, #846	@ 0x34e
34017a54:	4819      	ldr	r0, [pc, #100]	@ (34017abc <__LL_ATON_RT_IrqErr+0x19c>)
34017a56:	f000 f981 	bl	34017d5c <__assert_func>
    return;
34017a5a:	bf00      	nop
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
34017a5c:	3718      	adds	r7, #24
34017a5e:	46bd      	mov	sp, r7
34017a60:	bdb0      	pop	{r4, r5, r7, pc}
34017a62:	bf00      	nop
34017a64:	000ffc00 	.word	0x000ffc00
34017a68:	580e503c 	.word	0x580e503c
34017a6c:	3401b7d8 	.word	0x3401b7d8
34017a70:	3401b808 	.word	0x3401b808
34017a74:	3401b830 	.word	0x3401b830
34017a78:	3401b854 	.word	0x3401b854
34017a7c:	3401b874 	.word	0x3401b874
34017a80:	580e2010 	.word	0x580e2010
34017a84:	3401b88c 	.word	0x3401b88c
34017a88:	3401b8a4 	.word	0x3401b8a4
34017a8c:	580fe00c 	.word	0x580fe00c
34017a90:	3401b8bc 	.word	0x3401b8bc
34017a94:	580fe020 	.word	0x580fe020
34017a98:	3401b8f0 	.word	0x3401b8f0
34017a9c:	580fe01c 	.word	0x580fe01c
34017aa0:	3401b91c 	.word	0x3401b91c
34017aa4:	3401b940 	.word	0x3401b940
34017aa8:	3401b964 	.word	0x3401b964
34017aac:	3401b980 	.word	0x3401b980
34017ab0:	3401be4c 	.word	0x3401be4c
34017ab4:	3401b9a8 	.word	0x3401b9a8
34017ab8:	3401ba68 	.word	0x3401ba68
34017abc:	3401b544 	.word	0x3401b544

34017ac0 <__LL_ATON_RT_IrqEpochBlock>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlock(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34017ac0:	b480      	push	{r7}
34017ac2:	b087      	sub	sp, #28
34017ac4:	af00      	add	r7, sp, #0
34017ac6:	6078      	str	r0, [r7, #4]
   * consecutive bits within the `INTREG` register (and within all other interrupt controller registers, like e.g.
   * status/mask/clear)! */
  irqs >>= ATON_STRENG_INT(0);
  wait_irqs =
      irqs &
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
34017ac8:	4b1e      	ldr	r3, [pc, #120]	@ (34017b44 <__LL_ATON_RT_IrqEpochBlock+0x84>)
34017aca:	681b      	ldr	r3, [r3, #0]
34017acc:	685b      	ldr	r3, [r3, #4]
          ->wait_mask; /* treat only IRQs we are currently waiting for
34017ace:	68db      	ldr	r3, [r3, #12]
  wait_irqs =
34017ad0:	687a      	ldr	r2, [r7, #4]
34017ad2:	4013      	ands	r3, r2
34017ad4:	60fb      	str	r3, [r7, #12]
                          (Note: we might be running in a hybrid function which uses DMAs in parallel with a "normal"
                          ATON execution and we must not clear the IRQs of this "normal" ATON execution here) */
  if (wait_irqs)
34017ad6:	68fb      	ldr	r3, [r7, #12]
34017ad8:	2b00      	cmp	r3, #0
34017ada:	d02d      	beq.n	34017b38 <__LL_ATON_RT_IrqEpochBlock+0x78>
  {
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34017adc:	4b19      	ldr	r3, [pc, #100]	@ (34017b44 <__LL_ATON_RT_IrqEpochBlock+0x84>)
34017ade:	681b      	ldr	r3, [r3, #0]
34017ae0:	69db      	ldr	r3, [r3, #28]
34017ae2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
34017ae4:	2300      	movs	r3, #0
34017ae6:	617b      	str	r3, [r7, #20]
34017ae8:	e01f      	b.n	34017b2a <__LL_ATON_RT_IrqEpochBlock+0x6a>
    {
      /* Handle event interrupts */
      if ((wait_irqs >> i) & 1)
34017aea:	68fa      	ldr	r2, [r7, #12]
34017aec:	697b      	ldr	r3, [r7, #20]
34017aee:	fa22 f303 	lsr.w	r3, r2, r3
34017af2:	f003 0301 	and.w	r3, r3, #1
34017af6:	2b00      	cmp	r3, #0
34017af8:	d014      	beq.n	34017b24 <__LL_ATON_RT_IrqEpochBlock+0x64>
      { /* more future-proofed but less efficient alternative:
           `if (wait_irqs & ATON_STRENG_INT_MASK(i, 0, 0))`
         */
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34017afa:	697b      	ldr	r3, [r7, #20]
34017afc:	031a      	lsls	r2, r3, #12
34017afe:	4b12      	ldr	r3, [pc, #72]	@ (34017b48 <__LL_ATON_RT_IrqEpochBlock+0x88>)
34017b00:	4413      	add	r3, r2
34017b02:	681b      	ldr	r3, [r3, #0]
34017b04:	60bb      	str	r3, [r7, #8]
        ATON_STRENG_IRQ_SET(
34017b06:	697b      	ldr	r3, [r7, #20]
34017b08:	031a      	lsls	r2, r3, #12
34017b0a:	4b0f      	ldr	r3, [pc, #60]	@ (34017b48 <__LL_ATON_RT_IrqEpochBlock+0x88>)
34017b0c:	4413      	add	r3, r2
34017b0e:	461a      	mov	r2, r3
34017b10:	68bb      	ldr	r3, [r7, #8]
34017b12:	6013      	str	r3, [r2, #0]
            i, strengIrqs); /* Acknowledge ATON interrupt source (i.e. stream engine #i) - could be more fine grain */

        /* Handle RT integration */
        _tmp_triggered_events |= (1 << i);
34017b14:	2201      	movs	r2, #1
34017b16:	697b      	ldr	r3, [r7, #20]
34017b18:	fa02 f303 	lsl.w	r3, r2, r3
34017b1c:	461a      	mov	r2, r3
34017b1e:	693b      	ldr	r3, [r7, #16]
34017b20:	4313      	orrs	r3, r2
34017b22:	613b      	str	r3, [r7, #16]
    for (i = 0; i < ATON_STRENG_NUM; i++)
34017b24:	697b      	ldr	r3, [r7, #20]
34017b26:	3301      	adds	r3, #1
34017b28:	617b      	str	r3, [r7, #20]
34017b2a:	697b      	ldr	r3, [r7, #20]
34017b2c:	2b09      	cmp	r3, #9
34017b2e:	dddc      	ble.n	34017aea <__LL_ATON_RT_IrqEpochBlock+0x2a>
      }
    }
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34017b30:	4b04      	ldr	r3, [pc, #16]	@ (34017b44 <__LL_ATON_RT_IrqEpochBlock+0x84>)
34017b32:	681b      	ldr	r3, [r3, #0]
34017b34:	693a      	ldr	r2, [r7, #16]
34017b36:	61da      	str	r2, [r3, #28]
  }
}
34017b38:	bf00      	nop
34017b3a:	371c      	adds	r7, #28
34017b3c:	46bd      	mov	sp, r7
34017b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34017b42:	4770      	bx	lr
34017b44:	3401c540 	.word	0x3401c540
34017b48:	580e503c 	.word	0x580e503c

34017b4c <__LL_ATON_RT_IrqEpochBlob>:
#if (ATON_INT_NR > 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static inline void __LL_ATON_RT_IrqEpochBlob(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34017b4c:	b580      	push	{r7, lr}
34017b4e:	b086      	sub	sp, #24
34017b50:	af00      	add	r7, sp, #0
34017b52:	6078      	str	r0, [r7, #4]
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34017b54:	4b1d      	ldr	r3, [pc, #116]	@ (34017bcc <__LL_ATON_RT_IrqEpochBlob+0x80>)
34017b56:	681b      	ldr	r3, [r3, #0]
34017b58:	685b      	ldr	r3, [r3, #4]
34017b5a:	4618      	mov	r0, r3
34017b5c:	f7ff feba 	bl	340178d4 <EpochBlock_EpochControllerUnit>
34017b60:	6178      	str	r0, [r7, #20]
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34017b62:	697b      	ldr	r3, [r7, #20]
34017b64:	2b00      	cmp	r3, #0
34017b66:	d006      	beq.n	34017b76 <__LL_ATON_RT_IrqEpochBlob+0x2a>
34017b68:	4b19      	ldr	r3, [pc, #100]	@ (34017bd0 <__LL_ATON_RT_IrqEpochBlob+0x84>)
34017b6a:	4a1a      	ldr	r2, [pc, #104]	@ (34017bd4 <__LL_ATON_RT_IrqEpochBlob+0x88>)
34017b6c:	f240 3191 	movw	r1, #913	@ 0x391
34017b70:	4819      	ldr	r0, [pc, #100]	@ (34017bd8 <__LL_ATON_RT_IrqEpochBlob+0x8c>)
34017b72:	f000 f8f3 	bl	34017d5c <__assert_func>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
34017b76:	697b      	ldr	r3, [r7, #20]
34017b78:	2b00      	cmp	r3, #0
34017b7a:	d007      	beq.n	34017b8c <__LL_ATON_RT_IrqEpochBlob+0x40>
34017b7c:	697b      	ldr	r3, [r7, #20]
34017b7e:	2b01      	cmp	r3, #1
34017b80:	d102      	bne.n	34017b88 <__LL_ATON_RT_IrqEpochBlob+0x3c>
34017b82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
34017b86:	e003      	b.n	34017b90 <__LL_ATON_RT_IrqEpochBlob+0x44>
34017b88:	2300      	movs	r3, #0
34017b8a:	e001      	b.n	34017b90 <__LL_ATON_RT_IrqEpochBlob+0x44>
34017b8c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
34017b90:	687a      	ldr	r2, [r7, #4]
34017b92:	4013      	ands	r3, r2
34017b94:	2b00      	cmp	r3, #0
34017b96:	d015      	beq.n	34017bc4 <__LL_ATON_RT_IrqEpochBlob+0x78>
  {
    /* Acknowledge interrupts in active epoch controller unit - could be more fine grain */
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
34017b98:	4b10      	ldr	r3, [pc, #64]	@ (34017bdc <__LL_ATON_RT_IrqEpochBlob+0x90>)
34017b9a:	681b      	ldr	r3, [r3, #0]
34017b9c:	613b      	str	r3, [r7, #16]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
34017b9e:	4a0f      	ldr	r2, [pc, #60]	@ (34017bdc <__LL_ATON_RT_IrqEpochBlob+0x90>)
34017ba0:	693b      	ldr	r3, [r7, #16]
34017ba2:	6013      	str	r3, [r2, #0]

    /* Handle RT integration */
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34017ba4:	4b09      	ldr	r3, [pc, #36]	@ (34017bcc <__LL_ATON_RT_IrqEpochBlob+0x80>)
34017ba6:	681b      	ldr	r3, [r3, #0]
34017ba8:	69db      	ldr	r3, [r3, #28]
34017baa:	60fb      	str	r3, [r7, #12]
    _tmp_triggered_events |= (1 << ecId);
34017bac:	2201      	movs	r2, #1
34017bae:	697b      	ldr	r3, [r7, #20]
34017bb0:	fa02 f303 	lsl.w	r3, r2, r3
34017bb4:	461a      	mov	r2, r3
34017bb6:	68fb      	ldr	r3, [r7, #12]
34017bb8:	4313      	orrs	r3, r2
34017bba:	60fb      	str	r3, [r7, #12]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34017bbc:	4b03      	ldr	r3, [pc, #12]	@ (34017bcc <__LL_ATON_RT_IrqEpochBlob+0x80>)
34017bbe:	681b      	ldr	r3, [r3, #0]
34017bc0:	68fa      	ldr	r2, [r7, #12]
34017bc2:	61da      	str	r2, [r3, #28]
  }
}
34017bc4:	bf00      	nop
34017bc6:	3718      	adds	r7, #24
34017bc8:	46bd      	mov	sp, r7
34017bca:	bd80      	pop	{r7, pc}
34017bcc:	3401c540 	.word	0x3401c540
34017bd0:	3401b608 	.word	0x3401b608
34017bd4:	3401ba8c 	.word	0x3401ba8c
34017bd8:	3401b544 	.word	0x3401b544
34017bdc:	580fe00c 	.word	0x580fe00c

34017be0 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
34017be0:	b580      	push	{r7, lr}
34017be2:	b082      	sub	sp, #8
34017be4:	af00      	add	r7, sp, #0
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
34017be6:	4b3d      	ldr	r3, [pc, #244]	@ (34017cdc <NPU0_IRQHandler+0xfc>)
34017be8:	681b      	ldr	r3, [r3, #0]
34017bea:	607b      	str	r3, [r7, #4]
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
34017bec:	4b3c      	ldr	r3, [pc, #240]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017bee:	681b      	ldr	r3, [r3, #0]
34017bf0:	2b00      	cmp	r3, #0
34017bf2:	d045      	beq.n	34017c80 <NPU0_IRQHandler+0xa0>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
34017bf4:	4b3a      	ldr	r3, [pc, #232]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017bf6:	681b      	ldr	r3, [r3, #0]
34017bf8:	685b      	ldr	r3, [r3, #4]
34017bfa:	2b00      	cmp	r3, #0
34017bfc:	d106      	bne.n	34017c0c <NPU0_IRQHandler+0x2c>
34017bfe:	4b39      	ldr	r3, [pc, #228]	@ (34017ce4 <NPU0_IRQHandler+0x104>)
34017c00:	4a39      	ldr	r2, [pc, #228]	@ (34017ce8 <NPU0_IRQHandler+0x108>)
34017c02:	f240 31b1 	movw	r1, #945	@ 0x3b1
34017c06:	4839      	ldr	r0, [pc, #228]	@ (34017cec <NPU0_IRQHandler+0x10c>)
34017c08:	f000 f8a8 	bl	34017d5c <__assert_func>

    /** OR-mask interrupts MUST be handled first **/
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34017c0c:	4b34      	ldr	r3, [pc, #208]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017c0e:	681b      	ldr	r3, [r3, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
34017c10:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34017c12:	4618      	mov	r0, r3
34017c14:	f7ff fe4a 	bl	340178ac <EpochBlock_IsEpochBlob>
34017c18:	4603      	mov	r3, r0
34017c1a:	f083 0301 	eor.w	r3, r3, #1
34017c1e:	b2db      	uxtb	r3, r3
34017c20:	2b00      	cmp	r3, #0
34017c22:	d008      	beq.n	34017c36 <NPU0_IRQHandler+0x56>
    {
      __LL_ATON_RT_IrqErr(
34017c24:	687b      	ldr	r3, [r7, #4]
34017c26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
34017c2a:	f023 0303 	bic.w	r3, r3, #3
34017c2e:	4618      	mov	r0, r3
34017c30:	f7ff fe76 	bl	34017920 <__LL_ATON_RT_IrqErr>
34017c34:	e027      	b.n	34017c86 <NPU0_IRQHandler+0xa6>
          irqs & ~ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0)); /* exclude all streaming engine completion interrupts */
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34017c36:	4b2a      	ldr	r3, [pc, #168]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017c38:	681b      	ldr	r3, [r3, #0]
34017c3a:	685b      	ldr	r3, [r3, #4]
34017c3c:	4618      	mov	r0, r3
34017c3e:	f7ff fe49 	bl	340178d4 <EpochBlock_EpochControllerUnit>
34017c42:	6038      	str	r0, [r7, #0]
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34017c44:	683b      	ldr	r3, [r7, #0]
34017c46:	2b00      	cmp	r3, #0
34017c48:	d006      	beq.n	34017c58 <NPU0_IRQHandler+0x78>
34017c4a:	4b29      	ldr	r3, [pc, #164]	@ (34017cf0 <NPU0_IRQHandler+0x110>)
34017c4c:	4a26      	ldr	r2, [pc, #152]	@ (34017ce8 <NPU0_IRQHandler+0x108>)
34017c4e:	f240 31be 	movw	r1, #958	@ 0x3be
34017c52:	4826      	ldr	r0, [pc, #152]	@ (34017cec <NPU0_IRQHandler+0x10c>)
34017c54:	f000 f882 	bl	34017d5c <__assert_func>

      // epoch blob handling based on epoch controller interrupt
      __LL_ATON_RT_IrqErr(
          irqs & ~ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK,
34017c58:	683b      	ldr	r3, [r7, #0]
34017c5a:	2b00      	cmp	r3, #0
34017c5c:	d008      	beq.n	34017c70 <NPU0_IRQHandler+0x90>
34017c5e:	683b      	ldr	r3, [r7, #0]
34017c60:	2b01      	cmp	r3, #1
34017c62:	d102      	bne.n	34017c6a <NPU0_IRQHandler+0x8a>
34017c64:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
34017c68:	e004      	b.n	34017c74 <NPU0_IRQHandler+0x94>
34017c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
34017c6e:	e001      	b.n	34017c74 <NPU0_IRQHandler+0x94>
34017c70:	f06f 5380 	mvn.w	r3, #268435456	@ 0x10000000
      __LL_ATON_RT_IrqErr(
34017c74:	687a      	ldr	r2, [r7, #4]
34017c76:	4013      	ands	r3, r2
34017c78:	4618      	mov	r0, r3
34017c7a:	f7ff fe51 	bl	34017920 <__LL_ATON_RT_IrqErr>
34017c7e:	e002      	b.n	34017c86 <NPU0_IRQHandler+0xa6>
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
34017c80:	6878      	ldr	r0, [r7, #4]
34017c82:	f7ff fe4d 	bl	34017920 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34017c86:	4b16      	ldr	r3, [pc, #88]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017c88:	681b      	ldr	r3, [r3, #0]
34017c8a:	2b00      	cmp	r3, #0
34017c8c:	d106      	bne.n	34017c9c <NPU0_IRQHandler+0xbc>
34017c8e:	4b19      	ldr	r3, [pc, #100]	@ (34017cf4 <NPU0_IRQHandler+0x114>)
34017c90:	4a15      	ldr	r2, [pc, #84]	@ (34017ce8 <NPU0_IRQHandler+0x108>)
34017c92:	f240 31d2 	movw	r1, #978	@ 0x3d2
34017c96:	4815      	ldr	r0, [pc, #84]	@ (34017cec <NPU0_IRQHandler+0x10c>)
34017c98:	f000 f860 	bl	34017d5c <__assert_func>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
34017c9c:	4b10      	ldr	r3, [pc, #64]	@ (34017ce0 <NPU0_IRQHandler+0x100>)
34017c9e:	681b      	ldr	r3, [r3, #0]
34017ca0:	685b      	ldr	r3, [r3, #4]
34017ca2:	4618      	mov	r0, r3
34017ca4:	f7ff fe02 	bl	340178ac <EpochBlock_IsEpochBlob>
34017ca8:	4603      	mov	r3, r0
34017caa:	f083 0301 	eor.w	r3, r3, #1
34017cae:	b2db      	uxtb	r3, r3
34017cb0:	2b00      	cmp	r3, #0
34017cb2:	d003      	beq.n	34017cbc <NPU0_IRQHandler+0xdc>
  { // standard epoch block handling based on streaming engines
    __LL_ATON_RT_IrqEpochBlock(irqs);
34017cb4:	6878      	ldr	r0, [r7, #4]
34017cb6:	f7ff ff03 	bl	34017ac0 <__LL_ATON_RT_IrqEpochBlock>
34017cba:	e002      	b.n	34017cc2 <NPU0_IRQHandler+0xe2>
  }
  else
  { // epoch blob handling based on epoch controller
#if defined(ATON_EPOCHCTRL_NUM)
    __LL_ATON_RT_IrqEpochBlob(irqs);
34017cbc:	6878      	ldr	r0, [r7, #4]
34017cbe:	f7ff ff45 	bl	34017b4c <__LL_ATON_RT_IrqEpochBlob>
  __ASM volatile ("dsb 0xF":::"memory");
34017cc2:	f3bf 8f4f 	dsb	sy
}
34017cc6:	bf00      	nop
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
34017cc8:	4a0b      	ldr	r2, [pc, #44]	@ (34017cf8 <NPU0_IRQHandler+0x118>)
34017cca:	687b      	ldr	r3, [r7, #4]
34017ccc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
34017cce:	f3bf 8f4f 	dsb	sy
}
34017cd2:	bf00      	nop
  /* Signal event */
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
34017cd4:	bf00      	nop
}
34017cd6:	3708      	adds	r7, #8
34017cd8:	46bd      	mov	sp, r7
34017cda:	bd80      	pop	{r7, pc}
34017cdc:	580e1008 	.word	0x580e1008
34017ce0:	3401c540 	.word	0x3401c540
34017ce4:	3401b9ac 	.word	0x3401b9ac
34017ce8:	3401ba7c 	.word	0x3401ba7c
34017cec:	3401b544 	.word	0x3401b544
34017cf0:	3401b608 	.word	0x3401b608
34017cf4:	3401b3dc 	.word	0x3401b3dc
34017cf8:	580e1010 	.word	0x580e1010

34017cfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34017cfc:	480f      	ldr	r0, [pc, #60]	@ (34017d3c <LoopForever+0x4>)
  msr   MSPLIM, r0
34017cfe:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34017d02:	480f      	ldr	r0, [pc, #60]	@ (34017d40 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34017d04:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
34017d06:	f7eb f967 	bl	34002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34017d0a:	480e      	ldr	r0, [pc, #56]	@ (34017d44 <LoopForever+0xc>)
  ldr r1, =_edata
34017d0c:	490e      	ldr	r1, [pc, #56]	@ (34017d48 <LoopForever+0x10>)
  ldr r2, =_sidata
34017d0e:	4a0f      	ldr	r2, [pc, #60]	@ (34017d4c <LoopForever+0x14>)
  movs r3, #0
34017d10:	2300      	movs	r3, #0
  b LoopCopyDataInit
34017d12:	e002      	b.n	34017d1a <LoopCopyDataInit>

34017d14 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34017d14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
34017d16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34017d18:	3304      	adds	r3, #4

34017d1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34017d1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34017d1c:	428c      	cmp	r4, r1
  bcc CopyDataInit
34017d1e:	d3f9      	bcc.n	34017d14 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34017d20:	4a0b      	ldr	r2, [pc, #44]	@ (34017d50 <LoopForever+0x18>)
  ldr r4, =_ebss
34017d22:	4c0c      	ldr	r4, [pc, #48]	@ (34017d54 <LoopForever+0x1c>)
  movs r3, #0
34017d24:	2300      	movs	r3, #0
  b LoopFillZerobss
34017d26:	e001      	b.n	34017d2c <LoopFillZerobss>

34017d28 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34017d28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34017d2a:	3204      	adds	r2, #4

34017d2c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34017d2c:	42a2      	cmp	r2, r4
  bcc FillZerobss
34017d2e:	d3fb      	bcc.n	34017d28 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34017d30:	f001 f864 	bl	34018dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34017d34:	f7e9 f8e0 	bl	34000ef8 <main>

34017d38 <LoopForever>:

LoopForever:
  b LoopForever
34017d38:	e7fe      	b.n	34017d38 <LoopForever>
34017d3a:	0000      	.short	0x0000
  ldr   r0, =_sstack
34017d3c:	340fc000 	.word	0x340fc000
  ldr   r0, =_estack
34017d40:	34100000 	.word	0x34100000
  ldr r0, =_sdata
34017d44:	3401be2c 	.word	0x3401be2c
  ldr r1, =_edata
34017d48:	3401c008 	.word	0x3401c008
  ldr r2, =_sidata
34017d4c:	3401be2c 	.word	0x3401be2c
  ldr r2, =_sbss
34017d50:	3401c008 	.word	0x3401c008
  ldr r4, =_ebss
34017d54:	3401c694 	.word	0x3401c694

34017d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34017d58:	e7fe      	b.n	34017d58 <ADC1_2_IRQHandler>
	...

34017d5c <__assert_func>:
34017d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
34017d5e:	4614      	mov	r4, r2
34017d60:	461a      	mov	r2, r3
34017d62:	4b09      	ldr	r3, [pc, #36]	@ (34017d88 <__assert_func+0x2c>)
34017d64:	4605      	mov	r5, r0
34017d66:	681b      	ldr	r3, [r3, #0]
34017d68:	68d8      	ldr	r0, [r3, #12]
34017d6a:	b14c      	cbz	r4, 34017d80 <__assert_func+0x24>
34017d6c:	4b07      	ldr	r3, [pc, #28]	@ (34017d8c <__assert_func+0x30>)
34017d6e:	9100      	str	r1, [sp, #0]
34017d70:	4907      	ldr	r1, [pc, #28]	@ (34017d90 <__assert_func+0x34>)
34017d72:	e9cd 3401 	strd	r3, r4, [sp, #4]
34017d76:	462b      	mov	r3, r5
34017d78:	f000 fe60 	bl	34018a3c <fiprintf>
34017d7c:	f001 f880 	bl	34018e80 <abort>
34017d80:	4b04      	ldr	r3, [pc, #16]	@ (34017d94 <__assert_func+0x38>)
34017d82:	461c      	mov	r4, r3
34017d84:	e7f3      	b.n	34017d6e <__assert_func+0x12>
34017d86:	bf00      	nop
34017d88:	3401be4c 	.word	0x3401be4c
34017d8c:	3401baa6 	.word	0x3401baa6
34017d90:	3401bab3 	.word	0x3401bab3
34017d94:	3401bae1 	.word	0x3401bae1

34017d98 <malloc>:
34017d98:	4b02      	ldr	r3, [pc, #8]	@ (34017da4 <malloc+0xc>)
34017d9a:	4601      	mov	r1, r0
34017d9c:	6818      	ldr	r0, [r3, #0]
34017d9e:	f000 b825 	b.w	34017dec <_malloc_r>
34017da2:	bf00      	nop
34017da4:	3401be4c 	.word	0x3401be4c

34017da8 <sbrk_aligned>:
34017da8:	b570      	push	{r4, r5, r6, lr}
34017daa:	4e0f      	ldr	r6, [pc, #60]	@ (34017de8 <sbrk_aligned+0x40>)
34017dac:	460c      	mov	r4, r1
34017dae:	4605      	mov	r5, r0
34017db0:	6831      	ldr	r1, [r6, #0]
34017db2:	b911      	cbnz	r1, 34017dba <sbrk_aligned+0x12>
34017db4:	f000 fffa 	bl	34018dac <_sbrk_r>
34017db8:	6030      	str	r0, [r6, #0]
34017dba:	4621      	mov	r1, r4
34017dbc:	4628      	mov	r0, r5
34017dbe:	f000 fff5 	bl	34018dac <_sbrk_r>
34017dc2:	1c43      	adds	r3, r0, #1
34017dc4:	d103      	bne.n	34017dce <sbrk_aligned+0x26>
34017dc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
34017dca:	4620      	mov	r0, r4
34017dcc:	bd70      	pop	{r4, r5, r6, pc}
34017dce:	1cc4      	adds	r4, r0, #3
34017dd0:	f024 0403 	bic.w	r4, r4, #3
34017dd4:	42a0      	cmp	r0, r4
34017dd6:	d0f8      	beq.n	34017dca <sbrk_aligned+0x22>
34017dd8:	1a21      	subs	r1, r4, r0
34017dda:	4628      	mov	r0, r5
34017ddc:	f000 ffe6 	bl	34018dac <_sbrk_r>
34017de0:	3001      	adds	r0, #1
34017de2:	d1f2      	bne.n	34017dca <sbrk_aligned+0x22>
34017de4:	e7ef      	b.n	34017dc6 <sbrk_aligned+0x1e>
34017de6:	bf00      	nop
34017de8:	3401c544 	.word	0x3401c544

34017dec <_malloc_r>:
34017dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34017df0:	1ccd      	adds	r5, r1, #3
34017df2:	4606      	mov	r6, r0
34017df4:	f025 0503 	bic.w	r5, r5, #3
34017df8:	3508      	adds	r5, #8
34017dfa:	2d0c      	cmp	r5, #12
34017dfc:	bf38      	it	cc
34017dfe:	250c      	movcc	r5, #12
34017e00:	2d00      	cmp	r5, #0
34017e02:	db01      	blt.n	34017e08 <_malloc_r+0x1c>
34017e04:	42a9      	cmp	r1, r5
34017e06:	d904      	bls.n	34017e12 <_malloc_r+0x26>
34017e08:	230c      	movs	r3, #12
34017e0a:	6033      	str	r3, [r6, #0]
34017e0c:	2000      	movs	r0, #0
34017e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34017e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34017ee8 <_malloc_r+0xfc>
34017e16:	f000 f869 	bl	34017eec <__malloc_lock>
34017e1a:	f8d8 3000 	ldr.w	r3, [r8]
34017e1e:	461c      	mov	r4, r3
34017e20:	bb44      	cbnz	r4, 34017e74 <_malloc_r+0x88>
34017e22:	4629      	mov	r1, r5
34017e24:	4630      	mov	r0, r6
34017e26:	f7ff ffbf 	bl	34017da8 <sbrk_aligned>
34017e2a:	1c43      	adds	r3, r0, #1
34017e2c:	4604      	mov	r4, r0
34017e2e:	d158      	bne.n	34017ee2 <_malloc_r+0xf6>
34017e30:	f8d8 4000 	ldr.w	r4, [r8]
34017e34:	4627      	mov	r7, r4
34017e36:	2f00      	cmp	r7, #0
34017e38:	d143      	bne.n	34017ec2 <_malloc_r+0xd6>
34017e3a:	2c00      	cmp	r4, #0
34017e3c:	d04b      	beq.n	34017ed6 <_malloc_r+0xea>
34017e3e:	6823      	ldr	r3, [r4, #0]
34017e40:	4639      	mov	r1, r7
34017e42:	4630      	mov	r0, r6
34017e44:	eb04 0903 	add.w	r9, r4, r3
34017e48:	f000 ffb0 	bl	34018dac <_sbrk_r>
34017e4c:	4581      	cmp	r9, r0
34017e4e:	d142      	bne.n	34017ed6 <_malloc_r+0xea>
34017e50:	6821      	ldr	r1, [r4, #0]
34017e52:	4630      	mov	r0, r6
34017e54:	1a6d      	subs	r5, r5, r1
34017e56:	4629      	mov	r1, r5
34017e58:	f7ff ffa6 	bl	34017da8 <sbrk_aligned>
34017e5c:	3001      	adds	r0, #1
34017e5e:	d03a      	beq.n	34017ed6 <_malloc_r+0xea>
34017e60:	6823      	ldr	r3, [r4, #0]
34017e62:	442b      	add	r3, r5
34017e64:	6023      	str	r3, [r4, #0]
34017e66:	f8d8 3000 	ldr.w	r3, [r8]
34017e6a:	685a      	ldr	r2, [r3, #4]
34017e6c:	bb62      	cbnz	r2, 34017ec8 <_malloc_r+0xdc>
34017e6e:	f8c8 7000 	str.w	r7, [r8]
34017e72:	e00f      	b.n	34017e94 <_malloc_r+0xa8>
34017e74:	6822      	ldr	r2, [r4, #0]
34017e76:	1b52      	subs	r2, r2, r5
34017e78:	d420      	bmi.n	34017ebc <_malloc_r+0xd0>
34017e7a:	2a0b      	cmp	r2, #11
34017e7c:	d917      	bls.n	34017eae <_malloc_r+0xc2>
34017e7e:	1961      	adds	r1, r4, r5
34017e80:	42a3      	cmp	r3, r4
34017e82:	6025      	str	r5, [r4, #0]
34017e84:	bf18      	it	ne
34017e86:	6059      	strne	r1, [r3, #4]
34017e88:	6863      	ldr	r3, [r4, #4]
34017e8a:	bf08      	it	eq
34017e8c:	f8c8 1000 	streq.w	r1, [r8]
34017e90:	5162      	str	r2, [r4, r5]
34017e92:	604b      	str	r3, [r1, #4]
34017e94:	4630      	mov	r0, r6
34017e96:	f000 f82f 	bl	34017ef8 <__malloc_unlock>
34017e9a:	f104 000b 	add.w	r0, r4, #11
34017e9e:	1d23      	adds	r3, r4, #4
34017ea0:	f020 0007 	bic.w	r0, r0, #7
34017ea4:	1ac2      	subs	r2, r0, r3
34017ea6:	bf1c      	itt	ne
34017ea8:	1a1b      	subne	r3, r3, r0
34017eaa:	50a3      	strne	r3, [r4, r2]
34017eac:	e7af      	b.n	34017e0e <_malloc_r+0x22>
34017eae:	6862      	ldr	r2, [r4, #4]
34017eb0:	42a3      	cmp	r3, r4
34017eb2:	bf0c      	ite	eq
34017eb4:	f8c8 2000 	streq.w	r2, [r8]
34017eb8:	605a      	strne	r2, [r3, #4]
34017eba:	e7eb      	b.n	34017e94 <_malloc_r+0xa8>
34017ebc:	4623      	mov	r3, r4
34017ebe:	6864      	ldr	r4, [r4, #4]
34017ec0:	e7ae      	b.n	34017e20 <_malloc_r+0x34>
34017ec2:	463c      	mov	r4, r7
34017ec4:	687f      	ldr	r7, [r7, #4]
34017ec6:	e7b6      	b.n	34017e36 <_malloc_r+0x4a>
34017ec8:	461a      	mov	r2, r3
34017eca:	685b      	ldr	r3, [r3, #4]
34017ecc:	42a3      	cmp	r3, r4
34017ece:	d1fb      	bne.n	34017ec8 <_malloc_r+0xdc>
34017ed0:	2300      	movs	r3, #0
34017ed2:	6053      	str	r3, [r2, #4]
34017ed4:	e7de      	b.n	34017e94 <_malloc_r+0xa8>
34017ed6:	230c      	movs	r3, #12
34017ed8:	4630      	mov	r0, r6
34017eda:	6033      	str	r3, [r6, #0]
34017edc:	f000 f80c 	bl	34017ef8 <__malloc_unlock>
34017ee0:	e794      	b.n	34017e0c <_malloc_r+0x20>
34017ee2:	6005      	str	r5, [r0, #0]
34017ee4:	e7d6      	b.n	34017e94 <_malloc_r+0xa8>
34017ee6:	bf00      	nop
34017ee8:	3401c548 	.word	0x3401c548

34017eec <__malloc_lock>:
34017eec:	4801      	ldr	r0, [pc, #4]	@ (34017ef4 <__malloc_lock+0x8>)
34017eee:	f000 bfaa 	b.w	34018e46 <__retarget_lock_acquire_recursive>
34017ef2:	bf00      	nop
34017ef4:	3401c68c 	.word	0x3401c68c

34017ef8 <__malloc_unlock>:
34017ef8:	4801      	ldr	r0, [pc, #4]	@ (34017f00 <__malloc_unlock+0x8>)
34017efa:	f000 bfa5 	b.w	34018e48 <__retarget_lock_release_recursive>
34017efe:	bf00      	nop
34017f00:	3401c68c 	.word	0x3401c68c

34017f04 <__cvt>:
34017f04:	b5f0      	push	{r4, r5, r6, r7, lr}
34017f06:	ed2d 8b02 	vpush	{d8}
34017f0a:	eeb0 8b40 	vmov.f64	d8, d0
34017f0e:	b085      	sub	sp, #20
34017f10:	4617      	mov	r7, r2
34017f12:	460c      	mov	r4, r1
34017f14:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
34017f16:	ee18 2a90 	vmov	r2, s17
34017f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34017f1c:	f025 0520 	bic.w	r5, r5, #32
34017f20:	2a00      	cmp	r2, #0
34017f22:	bfb6      	itet	lt
34017f24:	222d      	movlt	r2, #45	@ 0x2d
34017f26:	2200      	movge	r2, #0
34017f28:	eeb1 8b40 	vneglt.f64	d8, d0
34017f2c:	2d46      	cmp	r5, #70	@ 0x46
34017f2e:	701a      	strb	r2, [r3, #0]
34017f30:	d004      	beq.n	34017f3c <__cvt+0x38>
34017f32:	2d45      	cmp	r5, #69	@ 0x45
34017f34:	d100      	bne.n	34017f38 <__cvt+0x34>
34017f36:	3401      	adds	r4, #1
34017f38:	2102      	movs	r1, #2
34017f3a:	e000      	b.n	34017f3e <__cvt+0x3a>
34017f3c:	2103      	movs	r1, #3
34017f3e:	ab03      	add	r3, sp, #12
34017f40:	eeb0 0b48 	vmov.f64	d0, d8
34017f44:	4622      	mov	r2, r4
34017f46:	9301      	str	r3, [sp, #4]
34017f48:	ab02      	add	r3, sp, #8
34017f4a:	9300      	str	r3, [sp, #0]
34017f4c:	4633      	mov	r3, r6
34017f4e:	f001 f82b 	bl	34018fa8 <_dtoa_r>
34017f52:	2d47      	cmp	r5, #71	@ 0x47
34017f54:	d114      	bne.n	34017f80 <__cvt+0x7c>
34017f56:	07fb      	lsls	r3, r7, #31
34017f58:	d50a      	bpl.n	34017f70 <__cvt+0x6c>
34017f5a:	1902      	adds	r2, r0, r4
34017f5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
34017f60:	2130      	movs	r1, #48	@ 0x30
34017f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34017f66:	bf08      	it	eq
34017f68:	9203      	streq	r2, [sp, #12]
34017f6a:	9b03      	ldr	r3, [sp, #12]
34017f6c:	4293      	cmp	r3, r2
34017f6e:	d319      	bcc.n	34017fa4 <__cvt+0xa0>
34017f70:	9b03      	ldr	r3, [sp, #12]
34017f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34017f74:	1a1b      	subs	r3, r3, r0
34017f76:	6013      	str	r3, [r2, #0]
34017f78:	b005      	add	sp, #20
34017f7a:	ecbd 8b02 	vpop	{d8}
34017f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34017f80:	2d46      	cmp	r5, #70	@ 0x46
34017f82:	eb00 0204 	add.w	r2, r0, r4
34017f86:	d1e9      	bne.n	34017f5c <__cvt+0x58>
34017f88:	7803      	ldrb	r3, [r0, #0]
34017f8a:	2b30      	cmp	r3, #48	@ 0x30
34017f8c:	d107      	bne.n	34017f9e <__cvt+0x9a>
34017f8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
34017f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34017f96:	bf1c      	itt	ne
34017f98:	f1c4 0401 	rsbne	r4, r4, #1
34017f9c:	6034      	strne	r4, [r6, #0]
34017f9e:	6833      	ldr	r3, [r6, #0]
34017fa0:	441a      	add	r2, r3
34017fa2:	e7db      	b.n	34017f5c <__cvt+0x58>
34017fa4:	1c5c      	adds	r4, r3, #1
34017fa6:	9403      	str	r4, [sp, #12]
34017fa8:	7019      	strb	r1, [r3, #0]
34017faa:	e7de      	b.n	34017f6a <__cvt+0x66>

34017fac <__exponent>:
34017fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34017fae:	2900      	cmp	r1, #0
34017fb0:	7002      	strb	r2, [r0, #0]
34017fb2:	bfba      	itte	lt
34017fb4:	4249      	neglt	r1, r1
34017fb6:	232d      	movlt	r3, #45	@ 0x2d
34017fb8:	232b      	movge	r3, #43	@ 0x2b
34017fba:	2909      	cmp	r1, #9
34017fbc:	7043      	strb	r3, [r0, #1]
34017fbe:	dd28      	ble.n	34018012 <__exponent+0x66>
34017fc0:	f10d 0307 	add.w	r3, sp, #7
34017fc4:	270a      	movs	r7, #10
34017fc6:	461d      	mov	r5, r3
34017fc8:	461a      	mov	r2, r3
34017fca:	3b01      	subs	r3, #1
34017fcc:	fbb1 f6f7 	udiv	r6, r1, r7
34017fd0:	fb07 1416 	mls	r4, r7, r6, r1
34017fd4:	3430      	adds	r4, #48	@ 0x30
34017fd6:	f802 4c01 	strb.w	r4, [r2, #-1]
34017fda:	460c      	mov	r4, r1
34017fdc:	4631      	mov	r1, r6
34017fde:	2c63      	cmp	r4, #99	@ 0x63
34017fe0:	dcf2      	bgt.n	34017fc8 <__exponent+0x1c>
34017fe2:	3130      	adds	r1, #48	@ 0x30
34017fe4:	1e94      	subs	r4, r2, #2
34017fe6:	f803 1c01 	strb.w	r1, [r3, #-1]
34017fea:	1c41      	adds	r1, r0, #1
34017fec:	4623      	mov	r3, r4
34017fee:	42ab      	cmp	r3, r5
34017ff0:	d30a      	bcc.n	34018008 <__exponent+0x5c>
34017ff2:	f10d 0309 	add.w	r3, sp, #9
34017ff6:	1a9b      	subs	r3, r3, r2
34017ff8:	42ac      	cmp	r4, r5
34017ffa:	bf88      	it	hi
34017ffc:	2300      	movhi	r3, #0
34017ffe:	3302      	adds	r3, #2
34018000:	4403      	add	r3, r0
34018002:	1a18      	subs	r0, r3, r0
34018004:	b003      	add	sp, #12
34018006:	bdf0      	pop	{r4, r5, r6, r7, pc}
34018008:	f813 6b01 	ldrb.w	r6, [r3], #1
3401800c:	f801 6f01 	strb.w	r6, [r1, #1]!
34018010:	e7ed      	b.n	34017fee <__exponent+0x42>
34018012:	2330      	movs	r3, #48	@ 0x30
34018014:	3130      	adds	r1, #48	@ 0x30
34018016:	7083      	strb	r3, [r0, #2]
34018018:	1d03      	adds	r3, r0, #4
3401801a:	70c1      	strb	r1, [r0, #3]
3401801c:	e7f1      	b.n	34018002 <__exponent+0x56>
	...

34018020 <_printf_float>:
34018020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34018024:	b08d      	sub	sp, #52	@ 0x34
34018026:	460c      	mov	r4, r1
34018028:	4616      	mov	r6, r2
3401802a:	461f      	mov	r7, r3
3401802c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
34018030:	4605      	mov	r5, r0
34018032:	f000 fe83 	bl	34018d3c <_localeconv_r>
34018036:	f8d0 b000 	ldr.w	fp, [r0]
3401803a:	4658      	mov	r0, fp
3401803c:	f7e8 fba8 	bl	34000790 <strlen>
34018040:	2300      	movs	r3, #0
34018042:	f894 9018 	ldrb.w	r9, [r4, #24]
34018046:	930a      	str	r3, [sp, #40]	@ 0x28
34018048:	f8d8 3000 	ldr.w	r3, [r8]
3401804c:	6822      	ldr	r2, [r4, #0]
3401804e:	3307      	adds	r3, #7
34018050:	9005      	str	r0, [sp, #20]
34018052:	f023 0307 	bic.w	r3, r3, #7
34018056:	f103 0108 	add.w	r1, r3, #8
3401805a:	f8c8 1000 	str.w	r1, [r8]
3401805e:	ed93 0b00 	vldr	d0, [r3]
34018062:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 340182c0 <_printf_float+0x2a0>
34018066:	eeb0 7bc0 	vabs.f64	d7, d0
3401806a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401806e:	eeb4 7b46 	vcmp.f64	d7, d6
34018072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34018076:	dd24      	ble.n	340180c2 <_printf_float+0xa2>
34018078:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34018080:	d502      	bpl.n	34018088 <_printf_float+0x68>
34018082:	232d      	movs	r3, #45	@ 0x2d
34018084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34018088:	498f      	ldr	r1, [pc, #572]	@ (340182c8 <_printf_float+0x2a8>)
3401808a:	4b90      	ldr	r3, [pc, #576]	@ (340182cc <_printf_float+0x2ac>)
3401808c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
34018090:	bf8c      	ite	hi
34018092:	4688      	movhi	r8, r1
34018094:	4698      	movls	r8, r3
34018096:	f022 0204 	bic.w	r2, r2, #4
3401809a:	2303      	movs	r3, #3
3401809c:	f04f 0a00 	mov.w	sl, #0
340180a0:	6022      	str	r2, [r4, #0]
340180a2:	6123      	str	r3, [r4, #16]
340180a4:	4633      	mov	r3, r6
340180a6:	aa0b      	add	r2, sp, #44	@ 0x2c
340180a8:	4621      	mov	r1, r4
340180aa:	4628      	mov	r0, r5
340180ac:	9700      	str	r7, [sp, #0]
340180ae:	f000 f9d1 	bl	34018454 <_printf_common>
340180b2:	3001      	adds	r0, #1
340180b4:	f040 8089 	bne.w	340181ca <_printf_float+0x1aa>
340180b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
340180bc:	b00d      	add	sp, #52	@ 0x34
340180be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340180c2:	eeb4 0b40 	vcmp.f64	d0, d0
340180c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340180ca:	d709      	bvc.n	340180e0 <_printf_float+0xc0>
340180cc:	ee10 3a90 	vmov	r3, s1
340180d0:	497f      	ldr	r1, [pc, #508]	@ (340182d0 <_printf_float+0x2b0>)
340180d2:	2b00      	cmp	r3, #0
340180d4:	bfbc      	itt	lt
340180d6:	232d      	movlt	r3, #45	@ 0x2d
340180d8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
340180dc:	4b7d      	ldr	r3, [pc, #500]	@ (340182d4 <_printf_float+0x2b4>)
340180de:	e7d5      	b.n	3401808c <_printf_float+0x6c>
340180e0:	6863      	ldr	r3, [r4, #4]
340180e2:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
340180e6:	1c59      	adds	r1, r3, #1
340180e8:	d139      	bne.n	3401815e <_printf_float+0x13e>
340180ea:	2306      	movs	r3, #6
340180ec:	6063      	str	r3, [r4, #4]
340180ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
340180f2:	2300      	movs	r3, #0
340180f4:	4628      	mov	r0, r5
340180f6:	6022      	str	r2, [r4, #0]
340180f8:	9303      	str	r3, [sp, #12]
340180fa:	ab0a      	add	r3, sp, #40	@ 0x28
340180fc:	e9cd 9301 	strd	r9, r3, [sp, #4]
34018100:	ab09      	add	r3, sp, #36	@ 0x24
34018102:	9300      	str	r3, [sp, #0]
34018104:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
34018108:	6861      	ldr	r1, [r4, #4]
3401810a:	f7ff fefb 	bl	34017f04 <__cvt>
3401810e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34018112:	4680      	mov	r8, r0
34018114:	9909      	ldr	r1, [sp, #36]	@ 0x24
34018116:	d129      	bne.n	3401816c <_printf_float+0x14c>
34018118:	1cc8      	adds	r0, r1, #3
3401811a:	db02      	blt.n	34018122 <_printf_float+0x102>
3401811c:	6863      	ldr	r3, [r4, #4]
3401811e:	4299      	cmp	r1, r3
34018120:	dd41      	ble.n	340181a6 <_printf_float+0x186>
34018122:	f1a9 0902 	sub.w	r9, r9, #2
34018126:	fa5f f989 	uxtb.w	r9, r9
3401812a:	3901      	subs	r1, #1
3401812c:	464a      	mov	r2, r9
3401812e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
34018132:	9109      	str	r1, [sp, #36]	@ 0x24
34018134:	f7ff ff3a 	bl	34017fac <__exponent>
34018138:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401813a:	4682      	mov	sl, r0
3401813c:	1813      	adds	r3, r2, r0
3401813e:	2a01      	cmp	r2, #1
34018140:	6123      	str	r3, [r4, #16]
34018142:	dc02      	bgt.n	3401814a <_printf_float+0x12a>
34018144:	6822      	ldr	r2, [r4, #0]
34018146:	07d2      	lsls	r2, r2, #31
34018148:	d501      	bpl.n	3401814e <_printf_float+0x12e>
3401814a:	3301      	adds	r3, #1
3401814c:	6123      	str	r3, [r4, #16]
3401814e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
34018152:	2b00      	cmp	r3, #0
34018154:	d0a6      	beq.n	340180a4 <_printf_float+0x84>
34018156:	232d      	movs	r3, #45	@ 0x2d
34018158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401815c:	e7a2      	b.n	340180a4 <_printf_float+0x84>
3401815e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34018162:	d1c4      	bne.n	340180ee <_printf_float+0xce>
34018164:	2b00      	cmp	r3, #0
34018166:	d1c2      	bne.n	340180ee <_printf_float+0xce>
34018168:	2301      	movs	r3, #1
3401816a:	e7bf      	b.n	340180ec <_printf_float+0xcc>
3401816c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34018170:	d9db      	bls.n	3401812a <_printf_float+0x10a>
34018172:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
34018176:	d118      	bne.n	340181aa <_printf_float+0x18a>
34018178:	2900      	cmp	r1, #0
3401817a:	6863      	ldr	r3, [r4, #4]
3401817c:	dd0b      	ble.n	34018196 <_printf_float+0x176>
3401817e:	6121      	str	r1, [r4, #16]
34018180:	b913      	cbnz	r3, 34018188 <_printf_float+0x168>
34018182:	6822      	ldr	r2, [r4, #0]
34018184:	07d0      	lsls	r0, r2, #31
34018186:	d502      	bpl.n	3401818e <_printf_float+0x16e>
34018188:	3301      	adds	r3, #1
3401818a:	440b      	add	r3, r1
3401818c:	6123      	str	r3, [r4, #16]
3401818e:	f04f 0a00 	mov.w	sl, #0
34018192:	65a1      	str	r1, [r4, #88]	@ 0x58
34018194:	e7db      	b.n	3401814e <_printf_float+0x12e>
34018196:	b913      	cbnz	r3, 3401819e <_printf_float+0x17e>
34018198:	6822      	ldr	r2, [r4, #0]
3401819a:	07d2      	lsls	r2, r2, #31
3401819c:	d501      	bpl.n	340181a2 <_printf_float+0x182>
3401819e:	3302      	adds	r3, #2
340181a0:	e7f4      	b.n	3401818c <_printf_float+0x16c>
340181a2:	2301      	movs	r3, #1
340181a4:	e7f2      	b.n	3401818c <_printf_float+0x16c>
340181a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
340181aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
340181ac:	4299      	cmp	r1, r3
340181ae:	db05      	blt.n	340181bc <_printf_float+0x19c>
340181b0:	6823      	ldr	r3, [r4, #0]
340181b2:	6121      	str	r1, [r4, #16]
340181b4:	07d8      	lsls	r0, r3, #31
340181b6:	d5ea      	bpl.n	3401818e <_printf_float+0x16e>
340181b8:	1c4b      	adds	r3, r1, #1
340181ba:	e7e7      	b.n	3401818c <_printf_float+0x16c>
340181bc:	2900      	cmp	r1, #0
340181be:	bfd4      	ite	le
340181c0:	f1c1 0202 	rsble	r2, r1, #2
340181c4:	2201      	movgt	r2, #1
340181c6:	4413      	add	r3, r2
340181c8:	e7e0      	b.n	3401818c <_printf_float+0x16c>
340181ca:	6823      	ldr	r3, [r4, #0]
340181cc:	055a      	lsls	r2, r3, #21
340181ce:	d407      	bmi.n	340181e0 <_printf_float+0x1c0>
340181d0:	6923      	ldr	r3, [r4, #16]
340181d2:	4642      	mov	r2, r8
340181d4:	4631      	mov	r1, r6
340181d6:	4628      	mov	r0, r5
340181d8:	47b8      	blx	r7
340181da:	3001      	adds	r0, #1
340181dc:	d12a      	bne.n	34018234 <_printf_float+0x214>
340181de:	e76b      	b.n	340180b8 <_printf_float+0x98>
340181e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
340181e4:	f240 80e0 	bls.w	340183a8 <_printf_float+0x388>
340181e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
340181ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
340181f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340181f4:	d133      	bne.n	3401825e <_printf_float+0x23e>
340181f6:	2301      	movs	r3, #1
340181f8:	4a37      	ldr	r2, [pc, #220]	@ (340182d8 <_printf_float+0x2b8>)
340181fa:	4631      	mov	r1, r6
340181fc:	4628      	mov	r0, r5
340181fe:	47b8      	blx	r7
34018200:	3001      	adds	r0, #1
34018202:	f43f af59 	beq.w	340180b8 <_printf_float+0x98>
34018206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401820a:	4543      	cmp	r3, r8
3401820c:	db02      	blt.n	34018214 <_printf_float+0x1f4>
3401820e:	6823      	ldr	r3, [r4, #0]
34018210:	07d8      	lsls	r0, r3, #31
34018212:	d50f      	bpl.n	34018234 <_printf_float+0x214>
34018214:	9b05      	ldr	r3, [sp, #20]
34018216:	465a      	mov	r2, fp
34018218:	4631      	mov	r1, r6
3401821a:	4628      	mov	r0, r5
3401821c:	47b8      	blx	r7
3401821e:	3001      	adds	r0, #1
34018220:	f43f af4a 	beq.w	340180b8 <_printf_float+0x98>
34018224:	f04f 0900 	mov.w	r9, #0
34018228:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401822c:	f104 0a1a 	add.w	sl, r4, #26
34018230:	45c8      	cmp	r8, r9
34018232:	dc09      	bgt.n	34018248 <_printf_float+0x228>
34018234:	6823      	ldr	r3, [r4, #0]
34018236:	079b      	lsls	r3, r3, #30
34018238:	f100 8107 	bmi.w	3401844a <_printf_float+0x42a>
3401823c:	68e0      	ldr	r0, [r4, #12]
3401823e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34018240:	4298      	cmp	r0, r3
34018242:	bfb8      	it	lt
34018244:	4618      	movlt	r0, r3
34018246:	e739      	b.n	340180bc <_printf_float+0x9c>
34018248:	2301      	movs	r3, #1
3401824a:	4652      	mov	r2, sl
3401824c:	4631      	mov	r1, r6
3401824e:	4628      	mov	r0, r5
34018250:	47b8      	blx	r7
34018252:	3001      	adds	r0, #1
34018254:	f43f af30 	beq.w	340180b8 <_printf_float+0x98>
34018258:	f109 0901 	add.w	r9, r9, #1
3401825c:	e7e8      	b.n	34018230 <_printf_float+0x210>
3401825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34018260:	2b00      	cmp	r3, #0
34018262:	dc3b      	bgt.n	340182dc <_printf_float+0x2bc>
34018264:	2301      	movs	r3, #1
34018266:	4a1c      	ldr	r2, [pc, #112]	@ (340182d8 <_printf_float+0x2b8>)
34018268:	4631      	mov	r1, r6
3401826a:	4628      	mov	r0, r5
3401826c:	47b8      	blx	r7
3401826e:	3001      	adds	r0, #1
34018270:	f43f af22 	beq.w	340180b8 <_printf_float+0x98>
34018274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
34018278:	ea59 0303 	orrs.w	r3, r9, r3
3401827c:	d102      	bne.n	34018284 <_printf_float+0x264>
3401827e:	6823      	ldr	r3, [r4, #0]
34018280:	07d9      	lsls	r1, r3, #31
34018282:	d5d7      	bpl.n	34018234 <_printf_float+0x214>
34018284:	9b05      	ldr	r3, [sp, #20]
34018286:	465a      	mov	r2, fp
34018288:	4631      	mov	r1, r6
3401828a:	4628      	mov	r0, r5
3401828c:	47b8      	blx	r7
3401828e:	3001      	adds	r0, #1
34018290:	f43f af12 	beq.w	340180b8 <_printf_float+0x98>
34018294:	f04f 0a00 	mov.w	sl, #0
34018298:	f104 0b1a 	add.w	fp, r4, #26
3401829c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401829e:	425b      	negs	r3, r3
340182a0:	4553      	cmp	r3, sl
340182a2:	dc01      	bgt.n	340182a8 <_printf_float+0x288>
340182a4:	464b      	mov	r3, r9
340182a6:	e794      	b.n	340181d2 <_printf_float+0x1b2>
340182a8:	2301      	movs	r3, #1
340182aa:	465a      	mov	r2, fp
340182ac:	4631      	mov	r1, r6
340182ae:	4628      	mov	r0, r5
340182b0:	47b8      	blx	r7
340182b2:	3001      	adds	r0, #1
340182b4:	f43f af00 	beq.w	340180b8 <_printf_float+0x98>
340182b8:	f10a 0a01 	add.w	sl, sl, #1
340182bc:	e7ee      	b.n	3401829c <_printf_float+0x27c>
340182be:	bf00      	nop
340182c0:	ffffffff 	.word	0xffffffff
340182c4:	7fefffff 	.word	0x7fefffff
340182c8:	3401bae6 	.word	0x3401bae6
340182cc:	3401bae2 	.word	0x3401bae2
340182d0:	3401baee 	.word	0x3401baee
340182d4:	3401baea 	.word	0x3401baea
340182d8:	3401baf2 	.word	0x3401baf2
340182dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
340182de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
340182e2:	4553      	cmp	r3, sl
340182e4:	bfa8      	it	ge
340182e6:	4653      	movge	r3, sl
340182e8:	2b00      	cmp	r3, #0
340182ea:	4699      	mov	r9, r3
340182ec:	dc37      	bgt.n	3401835e <_printf_float+0x33e>
340182ee:	2300      	movs	r3, #0
340182f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
340182f4:	f104 021a 	add.w	r2, r4, #26
340182f8:	9307      	str	r3, [sp, #28]
340182fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
340182fc:	9907      	ldr	r1, [sp, #28]
340182fe:	9306      	str	r3, [sp, #24]
34018300:	eba3 0309 	sub.w	r3, r3, r9
34018304:	428b      	cmp	r3, r1
34018306:	dc31      	bgt.n	3401836c <_printf_float+0x34c>
34018308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401830a:	459a      	cmp	sl, r3
3401830c:	dc3b      	bgt.n	34018386 <_printf_float+0x366>
3401830e:	6823      	ldr	r3, [r4, #0]
34018310:	07da      	lsls	r2, r3, #31
34018312:	d438      	bmi.n	34018386 <_printf_float+0x366>
34018314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34018316:	ebaa 0903 	sub.w	r9, sl, r3
3401831a:	9b06      	ldr	r3, [sp, #24]
3401831c:	ebaa 0303 	sub.w	r3, sl, r3
34018320:	4599      	cmp	r9, r3
34018322:	bfa8      	it	ge
34018324:	4699      	movge	r9, r3
34018326:	f1b9 0f00 	cmp.w	r9, #0
3401832a:	dc34      	bgt.n	34018396 <_printf_float+0x376>
3401832c:	f04f 0800 	mov.w	r8, #0
34018330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
34018334:	f104 0b1a 	add.w	fp, r4, #26
34018338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401833a:	ebaa 0303 	sub.w	r3, sl, r3
3401833e:	eba3 0309 	sub.w	r3, r3, r9
34018342:	4543      	cmp	r3, r8
34018344:	f77f af76 	ble.w	34018234 <_printf_float+0x214>
34018348:	2301      	movs	r3, #1
3401834a:	465a      	mov	r2, fp
3401834c:	4631      	mov	r1, r6
3401834e:	4628      	mov	r0, r5
34018350:	47b8      	blx	r7
34018352:	3001      	adds	r0, #1
34018354:	f43f aeb0 	beq.w	340180b8 <_printf_float+0x98>
34018358:	f108 0801 	add.w	r8, r8, #1
3401835c:	e7ec      	b.n	34018338 <_printf_float+0x318>
3401835e:	4642      	mov	r2, r8
34018360:	4631      	mov	r1, r6
34018362:	4628      	mov	r0, r5
34018364:	47b8      	blx	r7
34018366:	3001      	adds	r0, #1
34018368:	d1c1      	bne.n	340182ee <_printf_float+0x2ce>
3401836a:	e6a5      	b.n	340180b8 <_printf_float+0x98>
3401836c:	2301      	movs	r3, #1
3401836e:	4631      	mov	r1, r6
34018370:	4628      	mov	r0, r5
34018372:	9206      	str	r2, [sp, #24]
34018374:	47b8      	blx	r7
34018376:	3001      	adds	r0, #1
34018378:	f43f ae9e 	beq.w	340180b8 <_printf_float+0x98>
3401837c:	9b07      	ldr	r3, [sp, #28]
3401837e:	9a06      	ldr	r2, [sp, #24]
34018380:	3301      	adds	r3, #1
34018382:	9307      	str	r3, [sp, #28]
34018384:	e7b9      	b.n	340182fa <_printf_float+0x2da>
34018386:	9b05      	ldr	r3, [sp, #20]
34018388:	465a      	mov	r2, fp
3401838a:	4631      	mov	r1, r6
3401838c:	4628      	mov	r0, r5
3401838e:	47b8      	blx	r7
34018390:	3001      	adds	r0, #1
34018392:	d1bf      	bne.n	34018314 <_printf_float+0x2f4>
34018394:	e690      	b.n	340180b8 <_printf_float+0x98>
34018396:	9a06      	ldr	r2, [sp, #24]
34018398:	464b      	mov	r3, r9
3401839a:	4631      	mov	r1, r6
3401839c:	4628      	mov	r0, r5
3401839e:	4442      	add	r2, r8
340183a0:	47b8      	blx	r7
340183a2:	3001      	adds	r0, #1
340183a4:	d1c2      	bne.n	3401832c <_printf_float+0x30c>
340183a6:	e687      	b.n	340180b8 <_printf_float+0x98>
340183a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
340183ac:	f1b9 0f01 	cmp.w	r9, #1
340183b0:	dc01      	bgt.n	340183b6 <_printf_float+0x396>
340183b2:	07db      	lsls	r3, r3, #31
340183b4:	d536      	bpl.n	34018424 <_printf_float+0x404>
340183b6:	2301      	movs	r3, #1
340183b8:	4642      	mov	r2, r8
340183ba:	4631      	mov	r1, r6
340183bc:	4628      	mov	r0, r5
340183be:	47b8      	blx	r7
340183c0:	3001      	adds	r0, #1
340183c2:	f43f ae79 	beq.w	340180b8 <_printf_float+0x98>
340183c6:	9b05      	ldr	r3, [sp, #20]
340183c8:	465a      	mov	r2, fp
340183ca:	4631      	mov	r1, r6
340183cc:	4628      	mov	r0, r5
340183ce:	47b8      	blx	r7
340183d0:	3001      	adds	r0, #1
340183d2:	f43f ae71 	beq.w	340180b8 <_printf_float+0x98>
340183d6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
340183da:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
340183de:	eeb5 7b40 	vcmp.f64	d7, #0.0
340183e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340183e6:	d018      	beq.n	3401841a <_printf_float+0x3fa>
340183e8:	464b      	mov	r3, r9
340183ea:	f108 0201 	add.w	r2, r8, #1
340183ee:	4631      	mov	r1, r6
340183f0:	4628      	mov	r0, r5
340183f2:	47b8      	blx	r7
340183f4:	3001      	adds	r0, #1
340183f6:	d10c      	bne.n	34018412 <_printf_float+0x3f2>
340183f8:	e65e      	b.n	340180b8 <_printf_float+0x98>
340183fa:	2301      	movs	r3, #1
340183fc:	465a      	mov	r2, fp
340183fe:	4631      	mov	r1, r6
34018400:	4628      	mov	r0, r5
34018402:	47b8      	blx	r7
34018404:	3001      	adds	r0, #1
34018406:	f43f ae57 	beq.w	340180b8 <_printf_float+0x98>
3401840a:	f108 0801 	add.w	r8, r8, #1
3401840e:	45c8      	cmp	r8, r9
34018410:	dbf3      	blt.n	340183fa <_printf_float+0x3da>
34018412:	4653      	mov	r3, sl
34018414:	f104 0250 	add.w	r2, r4, #80	@ 0x50
34018418:	e6dc      	b.n	340181d4 <_printf_float+0x1b4>
3401841a:	f04f 0800 	mov.w	r8, #0
3401841e:	f104 0b1a 	add.w	fp, r4, #26
34018422:	e7f4      	b.n	3401840e <_printf_float+0x3ee>
34018424:	2301      	movs	r3, #1
34018426:	4642      	mov	r2, r8
34018428:	e7e1      	b.n	340183ee <_printf_float+0x3ce>
3401842a:	2301      	movs	r3, #1
3401842c:	464a      	mov	r2, r9
3401842e:	4631      	mov	r1, r6
34018430:	4628      	mov	r0, r5
34018432:	47b8      	blx	r7
34018434:	3001      	adds	r0, #1
34018436:	f43f ae3f 	beq.w	340180b8 <_printf_float+0x98>
3401843a:	f108 0801 	add.w	r8, r8, #1
3401843e:	68e3      	ldr	r3, [r4, #12]
34018440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
34018442:	1a5b      	subs	r3, r3, r1
34018444:	4543      	cmp	r3, r8
34018446:	dcf0      	bgt.n	3401842a <_printf_float+0x40a>
34018448:	e6f8      	b.n	3401823c <_printf_float+0x21c>
3401844a:	f04f 0800 	mov.w	r8, #0
3401844e:	f104 0919 	add.w	r9, r4, #25
34018452:	e7f4      	b.n	3401843e <_printf_float+0x41e>

34018454 <_printf_common>:
34018454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34018458:	4616      	mov	r6, r2
3401845a:	4698      	mov	r8, r3
3401845c:	688a      	ldr	r2, [r1, #8]
3401845e:	4607      	mov	r7, r0
34018460:	690b      	ldr	r3, [r1, #16]
34018462:	460c      	mov	r4, r1
34018464:	f8dd 9020 	ldr.w	r9, [sp, #32]
34018468:	4293      	cmp	r3, r2
3401846a:	bfb8      	it	lt
3401846c:	4613      	movlt	r3, r2
3401846e:	6033      	str	r3, [r6, #0]
34018470:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
34018474:	b10a      	cbz	r2, 3401847a <_printf_common+0x26>
34018476:	3301      	adds	r3, #1
34018478:	6033      	str	r3, [r6, #0]
3401847a:	6823      	ldr	r3, [r4, #0]
3401847c:	0699      	lsls	r1, r3, #26
3401847e:	bf42      	ittt	mi
34018480:	6833      	ldrmi	r3, [r6, #0]
34018482:	3302      	addmi	r3, #2
34018484:	6033      	strmi	r3, [r6, #0]
34018486:	6825      	ldr	r5, [r4, #0]
34018488:	f015 0506 	ands.w	r5, r5, #6
3401848c:	d106      	bne.n	3401849c <_printf_common+0x48>
3401848e:	f104 0a19 	add.w	sl, r4, #25
34018492:	68e3      	ldr	r3, [r4, #12]
34018494:	6832      	ldr	r2, [r6, #0]
34018496:	1a9b      	subs	r3, r3, r2
34018498:	42ab      	cmp	r3, r5
3401849a:	dc2b      	bgt.n	340184f4 <_printf_common+0xa0>
3401849c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
340184a0:	6822      	ldr	r2, [r4, #0]
340184a2:	3b00      	subs	r3, #0
340184a4:	bf18      	it	ne
340184a6:	2301      	movne	r3, #1
340184a8:	0692      	lsls	r2, r2, #26
340184aa:	d430      	bmi.n	3401850e <_printf_common+0xba>
340184ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
340184b0:	4641      	mov	r1, r8
340184b2:	4638      	mov	r0, r7
340184b4:	47c8      	blx	r9
340184b6:	3001      	adds	r0, #1
340184b8:	d023      	beq.n	34018502 <_printf_common+0xae>
340184ba:	6823      	ldr	r3, [r4, #0]
340184bc:	341a      	adds	r4, #26
340184be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
340184c2:	f003 0306 	and.w	r3, r3, #6
340184c6:	2b04      	cmp	r3, #4
340184c8:	bf0a      	itet	eq
340184ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
340184ce:	2500      	movne	r5, #0
340184d0:	6833      	ldreq	r3, [r6, #0]
340184d2:	f04f 0600 	mov.w	r6, #0
340184d6:	bf08      	it	eq
340184d8:	1aed      	subeq	r5, r5, r3
340184da:	f854 3c12 	ldr.w	r3, [r4, #-18]
340184de:	bf08      	it	eq
340184e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
340184e4:	4293      	cmp	r3, r2
340184e6:	bfc4      	itt	gt
340184e8:	1a9b      	subgt	r3, r3, r2
340184ea:	18ed      	addgt	r5, r5, r3
340184ec:	42b5      	cmp	r5, r6
340184ee:	d11a      	bne.n	34018526 <_printf_common+0xd2>
340184f0:	2000      	movs	r0, #0
340184f2:	e008      	b.n	34018506 <_printf_common+0xb2>
340184f4:	2301      	movs	r3, #1
340184f6:	4652      	mov	r2, sl
340184f8:	4641      	mov	r1, r8
340184fa:	4638      	mov	r0, r7
340184fc:	47c8      	blx	r9
340184fe:	3001      	adds	r0, #1
34018500:	d103      	bne.n	3401850a <_printf_common+0xb6>
34018502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34018506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401850a:	3501      	adds	r5, #1
3401850c:	e7c1      	b.n	34018492 <_printf_common+0x3e>
3401850e:	18e1      	adds	r1, r4, r3
34018510:	1c5a      	adds	r2, r3, #1
34018512:	2030      	movs	r0, #48	@ 0x30
34018514:	3302      	adds	r3, #2
34018516:	4422      	add	r2, r4
34018518:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401851c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
34018520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
34018524:	e7c2      	b.n	340184ac <_printf_common+0x58>
34018526:	2301      	movs	r3, #1
34018528:	4622      	mov	r2, r4
3401852a:	4641      	mov	r1, r8
3401852c:	4638      	mov	r0, r7
3401852e:	47c8      	blx	r9
34018530:	3001      	adds	r0, #1
34018532:	d0e6      	beq.n	34018502 <_printf_common+0xae>
34018534:	3601      	adds	r6, #1
34018536:	e7d9      	b.n	340184ec <_printf_common+0x98>

34018538 <_printf_i>:
34018538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401853c:	7e0f      	ldrb	r7, [r1, #24]
3401853e:	4691      	mov	r9, r2
34018540:	4680      	mov	r8, r0
34018542:	460c      	mov	r4, r1
34018544:	2f78      	cmp	r7, #120	@ 0x78
34018546:	469a      	mov	sl, r3
34018548:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401854a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401854e:	d807      	bhi.n	34018560 <_printf_i+0x28>
34018550:	2f62      	cmp	r7, #98	@ 0x62
34018552:	d80a      	bhi.n	3401856a <_printf_i+0x32>
34018554:	2f00      	cmp	r7, #0
34018556:	f000 80d1 	beq.w	340186fc <_printf_i+0x1c4>
3401855a:	2f58      	cmp	r7, #88	@ 0x58
3401855c:	f000 80b8 	beq.w	340186d0 <_printf_i+0x198>
34018560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34018564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
34018568:	e03a      	b.n	340185e0 <_printf_i+0xa8>
3401856a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401856e:	2b15      	cmp	r3, #21
34018570:	d8f6      	bhi.n	34018560 <_printf_i+0x28>
34018572:	a101      	add	r1, pc, #4	@ (adr r1, 34018578 <_printf_i+0x40>)
34018574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
34018578:	340185d1 	.word	0x340185d1
3401857c:	340185e5 	.word	0x340185e5
34018580:	34018561 	.word	0x34018561
34018584:	34018561 	.word	0x34018561
34018588:	34018561 	.word	0x34018561
3401858c:	34018561 	.word	0x34018561
34018590:	340185e5 	.word	0x340185e5
34018594:	34018561 	.word	0x34018561
34018598:	34018561 	.word	0x34018561
3401859c:	34018561 	.word	0x34018561
340185a0:	34018561 	.word	0x34018561
340185a4:	340186e3 	.word	0x340186e3
340185a8:	3401860f 	.word	0x3401860f
340185ac:	3401869d 	.word	0x3401869d
340185b0:	34018561 	.word	0x34018561
340185b4:	34018561 	.word	0x34018561
340185b8:	34018705 	.word	0x34018705
340185bc:	34018561 	.word	0x34018561
340185c0:	3401860f 	.word	0x3401860f
340185c4:	34018561 	.word	0x34018561
340185c8:	34018561 	.word	0x34018561
340185cc:	340186a5 	.word	0x340186a5
340185d0:	6833      	ldr	r3, [r6, #0]
340185d2:	1d1a      	adds	r2, r3, #4
340185d4:	681b      	ldr	r3, [r3, #0]
340185d6:	6032      	str	r2, [r6, #0]
340185d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
340185dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
340185e0:	2301      	movs	r3, #1
340185e2:	e09c      	b.n	3401871e <_printf_i+0x1e6>
340185e4:	6833      	ldr	r3, [r6, #0]
340185e6:	6820      	ldr	r0, [r4, #0]
340185e8:	1d19      	adds	r1, r3, #4
340185ea:	6031      	str	r1, [r6, #0]
340185ec:	0606      	lsls	r6, r0, #24
340185ee:	d501      	bpl.n	340185f4 <_printf_i+0xbc>
340185f0:	681d      	ldr	r5, [r3, #0]
340185f2:	e003      	b.n	340185fc <_printf_i+0xc4>
340185f4:	0645      	lsls	r5, r0, #25
340185f6:	d5fb      	bpl.n	340185f0 <_printf_i+0xb8>
340185f8:	f9b3 5000 	ldrsh.w	r5, [r3]
340185fc:	2d00      	cmp	r5, #0
340185fe:	da03      	bge.n	34018608 <_printf_i+0xd0>
34018600:	232d      	movs	r3, #45	@ 0x2d
34018602:	426d      	negs	r5, r5
34018604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34018608:	4858      	ldr	r0, [pc, #352]	@ (3401876c <_printf_i+0x234>)
3401860a:	230a      	movs	r3, #10
3401860c:	e011      	b.n	34018632 <_printf_i+0xfa>
3401860e:	6821      	ldr	r1, [r4, #0]
34018610:	6833      	ldr	r3, [r6, #0]
34018612:	0608      	lsls	r0, r1, #24
34018614:	f853 5b04 	ldr.w	r5, [r3], #4
34018618:	d402      	bmi.n	34018620 <_printf_i+0xe8>
3401861a:	0649      	lsls	r1, r1, #25
3401861c:	bf48      	it	mi
3401861e:	b2ad      	uxthmi	r5, r5
34018620:	2f6f      	cmp	r7, #111	@ 0x6f
34018622:	6033      	str	r3, [r6, #0]
34018624:	4851      	ldr	r0, [pc, #324]	@ (3401876c <_printf_i+0x234>)
34018626:	bf14      	ite	ne
34018628:	230a      	movne	r3, #10
3401862a:	2308      	moveq	r3, #8
3401862c:	2100      	movs	r1, #0
3401862e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
34018632:	6866      	ldr	r6, [r4, #4]
34018634:	2e00      	cmp	r6, #0
34018636:	60a6      	str	r6, [r4, #8]
34018638:	db05      	blt.n	34018646 <_printf_i+0x10e>
3401863a:	6821      	ldr	r1, [r4, #0]
3401863c:	432e      	orrs	r6, r5
3401863e:	f021 0104 	bic.w	r1, r1, #4
34018642:	6021      	str	r1, [r4, #0]
34018644:	d04b      	beq.n	340186de <_printf_i+0x1a6>
34018646:	4616      	mov	r6, r2
34018648:	fbb5 f1f3 	udiv	r1, r5, r3
3401864c:	fb03 5711 	mls	r7, r3, r1, r5
34018650:	5dc7      	ldrb	r7, [r0, r7]
34018652:	f806 7d01 	strb.w	r7, [r6, #-1]!
34018656:	462f      	mov	r7, r5
34018658:	460d      	mov	r5, r1
3401865a:	42bb      	cmp	r3, r7
3401865c:	d9f4      	bls.n	34018648 <_printf_i+0x110>
3401865e:	2b08      	cmp	r3, #8
34018660:	d10b      	bne.n	3401867a <_printf_i+0x142>
34018662:	6823      	ldr	r3, [r4, #0]
34018664:	07df      	lsls	r7, r3, #31
34018666:	d508      	bpl.n	3401867a <_printf_i+0x142>
34018668:	6923      	ldr	r3, [r4, #16]
3401866a:	6861      	ldr	r1, [r4, #4]
3401866c:	4299      	cmp	r1, r3
3401866e:	bfde      	ittt	le
34018670:	2330      	movle	r3, #48	@ 0x30
34018672:	f806 3c01 	strble.w	r3, [r6, #-1]
34018676:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
3401867a:	1b92      	subs	r2, r2, r6
3401867c:	6122      	str	r2, [r4, #16]
3401867e:	464b      	mov	r3, r9
34018680:	aa03      	add	r2, sp, #12
34018682:	4621      	mov	r1, r4
34018684:	4640      	mov	r0, r8
34018686:	f8cd a000 	str.w	sl, [sp]
3401868a:	f7ff fee3 	bl	34018454 <_printf_common>
3401868e:	3001      	adds	r0, #1
34018690:	d14a      	bne.n	34018728 <_printf_i+0x1f0>
34018692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34018696:	b004      	add	sp, #16
34018698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401869c:	6823      	ldr	r3, [r4, #0]
3401869e:	f043 0320 	orr.w	r3, r3, #32
340186a2:	6023      	str	r3, [r4, #0]
340186a4:	2778      	movs	r7, #120	@ 0x78
340186a6:	4832      	ldr	r0, [pc, #200]	@ (34018770 <_printf_i+0x238>)
340186a8:	6823      	ldr	r3, [r4, #0]
340186aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
340186ae:	061f      	lsls	r7, r3, #24
340186b0:	6831      	ldr	r1, [r6, #0]
340186b2:	f851 5b04 	ldr.w	r5, [r1], #4
340186b6:	d402      	bmi.n	340186be <_printf_i+0x186>
340186b8:	065f      	lsls	r7, r3, #25
340186ba:	bf48      	it	mi
340186bc:	b2ad      	uxthmi	r5, r5
340186be:	6031      	str	r1, [r6, #0]
340186c0:	07d9      	lsls	r1, r3, #31
340186c2:	bf44      	itt	mi
340186c4:	f043 0320 	orrmi.w	r3, r3, #32
340186c8:	6023      	strmi	r3, [r4, #0]
340186ca:	b11d      	cbz	r5, 340186d4 <_printf_i+0x19c>
340186cc:	2310      	movs	r3, #16
340186ce:	e7ad      	b.n	3401862c <_printf_i+0xf4>
340186d0:	4826      	ldr	r0, [pc, #152]	@ (3401876c <_printf_i+0x234>)
340186d2:	e7e9      	b.n	340186a8 <_printf_i+0x170>
340186d4:	6823      	ldr	r3, [r4, #0]
340186d6:	f023 0320 	bic.w	r3, r3, #32
340186da:	6023      	str	r3, [r4, #0]
340186dc:	e7f6      	b.n	340186cc <_printf_i+0x194>
340186de:	4616      	mov	r6, r2
340186e0:	e7bd      	b.n	3401865e <_printf_i+0x126>
340186e2:	6833      	ldr	r3, [r6, #0]
340186e4:	6825      	ldr	r5, [r4, #0]
340186e6:	1d18      	adds	r0, r3, #4
340186e8:	6961      	ldr	r1, [r4, #20]
340186ea:	6030      	str	r0, [r6, #0]
340186ec:	062e      	lsls	r6, r5, #24
340186ee:	681b      	ldr	r3, [r3, #0]
340186f0:	d501      	bpl.n	340186f6 <_printf_i+0x1be>
340186f2:	6019      	str	r1, [r3, #0]
340186f4:	e002      	b.n	340186fc <_printf_i+0x1c4>
340186f6:	0668      	lsls	r0, r5, #25
340186f8:	d5fb      	bpl.n	340186f2 <_printf_i+0x1ba>
340186fa:	8019      	strh	r1, [r3, #0]
340186fc:	2300      	movs	r3, #0
340186fe:	4616      	mov	r6, r2
34018700:	6123      	str	r3, [r4, #16]
34018702:	e7bc      	b.n	3401867e <_printf_i+0x146>
34018704:	6833      	ldr	r3, [r6, #0]
34018706:	2100      	movs	r1, #0
34018708:	1d1a      	adds	r2, r3, #4
3401870a:	6032      	str	r2, [r6, #0]
3401870c:	681e      	ldr	r6, [r3, #0]
3401870e:	6862      	ldr	r2, [r4, #4]
34018710:	4630      	mov	r0, r6
34018712:	f000 fb9a 	bl	34018e4a <memchr>
34018716:	b108      	cbz	r0, 3401871c <_printf_i+0x1e4>
34018718:	1b80      	subs	r0, r0, r6
3401871a:	6060      	str	r0, [r4, #4]
3401871c:	6863      	ldr	r3, [r4, #4]
3401871e:	6123      	str	r3, [r4, #16]
34018720:	2300      	movs	r3, #0
34018722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34018726:	e7aa      	b.n	3401867e <_printf_i+0x146>
34018728:	6923      	ldr	r3, [r4, #16]
3401872a:	4632      	mov	r2, r6
3401872c:	4649      	mov	r1, r9
3401872e:	4640      	mov	r0, r8
34018730:	47d0      	blx	sl
34018732:	3001      	adds	r0, #1
34018734:	d0ad      	beq.n	34018692 <_printf_i+0x15a>
34018736:	6823      	ldr	r3, [r4, #0]
34018738:	079b      	lsls	r3, r3, #30
3401873a:	d413      	bmi.n	34018764 <_printf_i+0x22c>
3401873c:	68e0      	ldr	r0, [r4, #12]
3401873e:	9b03      	ldr	r3, [sp, #12]
34018740:	4298      	cmp	r0, r3
34018742:	bfb8      	it	lt
34018744:	4618      	movlt	r0, r3
34018746:	e7a6      	b.n	34018696 <_printf_i+0x15e>
34018748:	2301      	movs	r3, #1
3401874a:	4632      	mov	r2, r6
3401874c:	4649      	mov	r1, r9
3401874e:	4640      	mov	r0, r8
34018750:	47d0      	blx	sl
34018752:	3001      	adds	r0, #1
34018754:	d09d      	beq.n	34018692 <_printf_i+0x15a>
34018756:	3501      	adds	r5, #1
34018758:	68e3      	ldr	r3, [r4, #12]
3401875a:	9903      	ldr	r1, [sp, #12]
3401875c:	1a5b      	subs	r3, r3, r1
3401875e:	42ab      	cmp	r3, r5
34018760:	dcf2      	bgt.n	34018748 <_printf_i+0x210>
34018762:	e7eb      	b.n	3401873c <_printf_i+0x204>
34018764:	2500      	movs	r5, #0
34018766:	f104 0619 	add.w	r6, r4, #25
3401876a:	e7f5      	b.n	34018758 <_printf_i+0x220>
3401876c:	3401baf4 	.word	0x3401baf4
34018770:	3401bb05 	.word	0x3401bb05

34018774 <__sflush_r>:
34018774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34018778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401877c:	0716      	lsls	r6, r2, #28
3401877e:	4605      	mov	r5, r0
34018780:	460c      	mov	r4, r1
34018782:	d454      	bmi.n	3401882e <__sflush_r+0xba>
34018784:	684b      	ldr	r3, [r1, #4]
34018786:	2b00      	cmp	r3, #0
34018788:	dc02      	bgt.n	34018790 <__sflush_r+0x1c>
3401878a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3401878c:	2b00      	cmp	r3, #0
3401878e:	dd48      	ble.n	34018822 <__sflush_r+0xae>
34018790:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34018792:	2e00      	cmp	r6, #0
34018794:	d045      	beq.n	34018822 <__sflush_r+0xae>
34018796:	2300      	movs	r3, #0
34018798:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3401879c:	682f      	ldr	r7, [r5, #0]
3401879e:	6a21      	ldr	r1, [r4, #32]
340187a0:	602b      	str	r3, [r5, #0]
340187a2:	d030      	beq.n	34018806 <__sflush_r+0x92>
340187a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
340187a6:	89a3      	ldrh	r3, [r4, #12]
340187a8:	0759      	lsls	r1, r3, #29
340187aa:	d505      	bpl.n	340187b8 <__sflush_r+0x44>
340187ac:	6863      	ldr	r3, [r4, #4]
340187ae:	1ad2      	subs	r2, r2, r3
340187b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340187b2:	b10b      	cbz	r3, 340187b8 <__sflush_r+0x44>
340187b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340187b6:	1ad2      	subs	r2, r2, r3
340187b8:	2300      	movs	r3, #0
340187ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340187bc:	6a21      	ldr	r1, [r4, #32]
340187be:	4628      	mov	r0, r5
340187c0:	47b0      	blx	r6
340187c2:	1c43      	adds	r3, r0, #1
340187c4:	89a3      	ldrh	r3, [r4, #12]
340187c6:	d106      	bne.n	340187d6 <__sflush_r+0x62>
340187c8:	6829      	ldr	r1, [r5, #0]
340187ca:	291d      	cmp	r1, #29
340187cc:	d82b      	bhi.n	34018826 <__sflush_r+0xb2>
340187ce:	4a2a      	ldr	r2, [pc, #168]	@ (34018878 <__sflush_r+0x104>)
340187d0:	40ca      	lsrs	r2, r1
340187d2:	07d6      	lsls	r6, r2, #31
340187d4:	d527      	bpl.n	34018826 <__sflush_r+0xb2>
340187d6:	2200      	movs	r2, #0
340187d8:	04d9      	lsls	r1, r3, #19
340187da:	6062      	str	r2, [r4, #4]
340187dc:	6922      	ldr	r2, [r4, #16]
340187de:	6022      	str	r2, [r4, #0]
340187e0:	d504      	bpl.n	340187ec <__sflush_r+0x78>
340187e2:	1c42      	adds	r2, r0, #1
340187e4:	d101      	bne.n	340187ea <__sflush_r+0x76>
340187e6:	682b      	ldr	r3, [r5, #0]
340187e8:	b903      	cbnz	r3, 340187ec <__sflush_r+0x78>
340187ea:	6560      	str	r0, [r4, #84]	@ 0x54
340187ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
340187ee:	602f      	str	r7, [r5, #0]
340187f0:	b1b9      	cbz	r1, 34018822 <__sflush_r+0xae>
340187f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
340187f6:	4299      	cmp	r1, r3
340187f8:	d002      	beq.n	34018800 <__sflush_r+0x8c>
340187fa:	4628      	mov	r0, r5
340187fc:	f001 f932 	bl	34019a64 <_free_r>
34018800:	2300      	movs	r3, #0
34018802:	6363      	str	r3, [r4, #52]	@ 0x34
34018804:	e00d      	b.n	34018822 <__sflush_r+0xae>
34018806:	2301      	movs	r3, #1
34018808:	4628      	mov	r0, r5
3401880a:	47b0      	blx	r6
3401880c:	4602      	mov	r2, r0
3401880e:	1c50      	adds	r0, r2, #1
34018810:	d1c9      	bne.n	340187a6 <__sflush_r+0x32>
34018812:	682b      	ldr	r3, [r5, #0]
34018814:	2b00      	cmp	r3, #0
34018816:	d0c6      	beq.n	340187a6 <__sflush_r+0x32>
34018818:	2b1d      	cmp	r3, #29
3401881a:	d001      	beq.n	34018820 <__sflush_r+0xac>
3401881c:	2b16      	cmp	r3, #22
3401881e:	d11d      	bne.n	3401885c <__sflush_r+0xe8>
34018820:	602f      	str	r7, [r5, #0]
34018822:	2000      	movs	r0, #0
34018824:	e021      	b.n	3401886a <__sflush_r+0xf6>
34018826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401882a:	b21b      	sxth	r3, r3
3401882c:	e01a      	b.n	34018864 <__sflush_r+0xf0>
3401882e:	690f      	ldr	r7, [r1, #16]
34018830:	2f00      	cmp	r7, #0
34018832:	d0f6      	beq.n	34018822 <__sflush_r+0xae>
34018834:	0793      	lsls	r3, r2, #30
34018836:	680e      	ldr	r6, [r1, #0]
34018838:	600f      	str	r7, [r1, #0]
3401883a:	bf0c      	ite	eq
3401883c:	694b      	ldreq	r3, [r1, #20]
3401883e:	2300      	movne	r3, #0
34018840:	eba6 0807 	sub.w	r8, r6, r7
34018844:	608b      	str	r3, [r1, #8]
34018846:	f1b8 0f00 	cmp.w	r8, #0
3401884a:	ddea      	ble.n	34018822 <__sflush_r+0xae>
3401884c:	4643      	mov	r3, r8
3401884e:	463a      	mov	r2, r7
34018850:	6a21      	ldr	r1, [r4, #32]
34018852:	4628      	mov	r0, r5
34018854:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
34018856:	47b0      	blx	r6
34018858:	2800      	cmp	r0, #0
3401885a:	dc08      	bgt.n	3401886e <__sflush_r+0xfa>
3401885c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34018860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34018864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34018868:	81a3      	strh	r3, [r4, #12]
3401886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401886e:	4407      	add	r7, r0
34018870:	eba8 0800 	sub.w	r8, r8, r0
34018874:	e7e7      	b.n	34018846 <__sflush_r+0xd2>
34018876:	bf00      	nop
34018878:	20400001 	.word	0x20400001

3401887c <_fflush_r>:
3401887c:	b538      	push	{r3, r4, r5, lr}
3401887e:	690b      	ldr	r3, [r1, #16]
34018880:	4605      	mov	r5, r0
34018882:	460c      	mov	r4, r1
34018884:	b913      	cbnz	r3, 3401888c <_fflush_r+0x10>
34018886:	2500      	movs	r5, #0
34018888:	4628      	mov	r0, r5
3401888a:	bd38      	pop	{r3, r4, r5, pc}
3401888c:	b118      	cbz	r0, 34018896 <_fflush_r+0x1a>
3401888e:	6a03      	ldr	r3, [r0, #32]
34018890:	b90b      	cbnz	r3, 34018896 <_fflush_r+0x1a>
34018892:	f000 f8bb 	bl	34018a0c <__sinit>
34018896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401889a:	2b00      	cmp	r3, #0
3401889c:	d0f3      	beq.n	34018886 <_fflush_r+0xa>
3401889e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
340188a0:	07d0      	lsls	r0, r2, #31
340188a2:	d404      	bmi.n	340188ae <_fflush_r+0x32>
340188a4:	0599      	lsls	r1, r3, #22
340188a6:	d402      	bmi.n	340188ae <_fflush_r+0x32>
340188a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340188aa:	f000 facc 	bl	34018e46 <__retarget_lock_acquire_recursive>
340188ae:	4628      	mov	r0, r5
340188b0:	4621      	mov	r1, r4
340188b2:	f7ff ff5f 	bl	34018774 <__sflush_r>
340188b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340188b8:	4605      	mov	r5, r0
340188ba:	07da      	lsls	r2, r3, #31
340188bc:	d4e4      	bmi.n	34018888 <_fflush_r+0xc>
340188be:	89a3      	ldrh	r3, [r4, #12]
340188c0:	059b      	lsls	r3, r3, #22
340188c2:	d4e1      	bmi.n	34018888 <_fflush_r+0xc>
340188c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340188c6:	f000 fabf 	bl	34018e48 <__retarget_lock_release_recursive>
340188ca:	e7dd      	b.n	34018888 <_fflush_r+0xc>

340188cc <fflush>:
340188cc:	4601      	mov	r1, r0
340188ce:	b920      	cbnz	r0, 340188da <fflush+0xe>
340188d0:	4a04      	ldr	r2, [pc, #16]	@ (340188e4 <fflush+0x18>)
340188d2:	4905      	ldr	r1, [pc, #20]	@ (340188e8 <fflush+0x1c>)
340188d4:	4805      	ldr	r0, [pc, #20]	@ (340188ec <fflush+0x20>)
340188d6:	f000 b8c3 	b.w	34018a60 <_fwalk_sglue>
340188da:	4b05      	ldr	r3, [pc, #20]	@ (340188f0 <fflush+0x24>)
340188dc:	6818      	ldr	r0, [r3, #0]
340188de:	f7ff bfcd 	b.w	3401887c <_fflush_r>
340188e2:	bf00      	nop
340188e4:	3401be40 	.word	0x3401be40
340188e8:	3401887d 	.word	0x3401887d
340188ec:	3401be50 	.word	0x3401be50
340188f0:	3401be4c 	.word	0x3401be4c

340188f4 <std>:
340188f4:	2300      	movs	r3, #0
340188f6:	b510      	push	{r4, lr}
340188f8:	4604      	mov	r4, r0
340188fa:	6083      	str	r3, [r0, #8]
340188fc:	8181      	strh	r1, [r0, #12]
340188fe:	4619      	mov	r1, r3
34018900:	6643      	str	r3, [r0, #100]	@ 0x64
34018902:	81c2      	strh	r2, [r0, #14]
34018904:	2208      	movs	r2, #8
34018906:	6183      	str	r3, [r0, #24]
34018908:	e9c0 3300 	strd	r3, r3, [r0]
3401890c:	e9c0 3304 	strd	r3, r3, [r0, #16]
34018910:	305c      	adds	r0, #92	@ 0x5c
34018912:	f000 fa0b 	bl	34018d2c <memset>
34018916:	4b0d      	ldr	r3, [pc, #52]	@ (3401894c <std+0x58>)
34018918:	6224      	str	r4, [r4, #32]
3401891a:	6263      	str	r3, [r4, #36]	@ 0x24
3401891c:	4b0c      	ldr	r3, [pc, #48]	@ (34018950 <std+0x5c>)
3401891e:	62a3      	str	r3, [r4, #40]	@ 0x28
34018920:	4b0c      	ldr	r3, [pc, #48]	@ (34018954 <std+0x60>)
34018922:	62e3      	str	r3, [r4, #44]	@ 0x2c
34018924:	4b0c      	ldr	r3, [pc, #48]	@ (34018958 <std+0x64>)
34018926:	6323      	str	r3, [r4, #48]	@ 0x30
34018928:	4b0c      	ldr	r3, [pc, #48]	@ (3401895c <std+0x68>)
3401892a:	429c      	cmp	r4, r3
3401892c:	d006      	beq.n	3401893c <std+0x48>
3401892e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
34018932:	4294      	cmp	r4, r2
34018934:	d002      	beq.n	3401893c <std+0x48>
34018936:	33d0      	adds	r3, #208	@ 0xd0
34018938:	429c      	cmp	r4, r3
3401893a:	d105      	bne.n	34018948 <std+0x54>
3401893c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
34018940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34018944:	f000 ba7e 	b.w	34018e44 <__retarget_lock_init_recursive>
34018948:	bd10      	pop	{r4, pc}
3401894a:	bf00      	nop
3401894c:	34018b7d 	.word	0x34018b7d
34018950:	34018b9f 	.word	0x34018b9f
34018954:	34018bd7 	.word	0x34018bd7
34018958:	34018bfb 	.word	0x34018bfb
3401895c:	3401c54c 	.word	0x3401c54c

34018960 <stdio_exit_handler>:
34018960:	4a02      	ldr	r2, [pc, #8]	@ (3401896c <stdio_exit_handler+0xc>)
34018962:	4903      	ldr	r1, [pc, #12]	@ (34018970 <stdio_exit_handler+0x10>)
34018964:	4803      	ldr	r0, [pc, #12]	@ (34018974 <stdio_exit_handler+0x14>)
34018966:	f000 b87b 	b.w	34018a60 <_fwalk_sglue>
3401896a:	bf00      	nop
3401896c:	3401be40 	.word	0x3401be40
34018970:	3401887d 	.word	0x3401887d
34018974:	3401be50 	.word	0x3401be50

34018978 <cleanup_stdio>:
34018978:	6841      	ldr	r1, [r0, #4]
3401897a:	4b0c      	ldr	r3, [pc, #48]	@ (340189ac <cleanup_stdio+0x34>)
3401897c:	4299      	cmp	r1, r3
3401897e:	b510      	push	{r4, lr}
34018980:	4604      	mov	r4, r0
34018982:	d001      	beq.n	34018988 <cleanup_stdio+0x10>
34018984:	f7ff ff7a 	bl	3401887c <_fflush_r>
34018988:	68a1      	ldr	r1, [r4, #8]
3401898a:	4b09      	ldr	r3, [pc, #36]	@ (340189b0 <cleanup_stdio+0x38>)
3401898c:	4299      	cmp	r1, r3
3401898e:	d002      	beq.n	34018996 <cleanup_stdio+0x1e>
34018990:	4620      	mov	r0, r4
34018992:	f7ff ff73 	bl	3401887c <_fflush_r>
34018996:	68e1      	ldr	r1, [r4, #12]
34018998:	4b06      	ldr	r3, [pc, #24]	@ (340189b4 <cleanup_stdio+0x3c>)
3401899a:	4299      	cmp	r1, r3
3401899c:	d004      	beq.n	340189a8 <cleanup_stdio+0x30>
3401899e:	4620      	mov	r0, r4
340189a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340189a4:	f7ff bf6a 	b.w	3401887c <_fflush_r>
340189a8:	bd10      	pop	{r4, pc}
340189aa:	bf00      	nop
340189ac:	3401c54c 	.word	0x3401c54c
340189b0:	3401c5b4 	.word	0x3401c5b4
340189b4:	3401c61c 	.word	0x3401c61c

340189b8 <global_stdio_init.part.0>:
340189b8:	b510      	push	{r4, lr}
340189ba:	4b0b      	ldr	r3, [pc, #44]	@ (340189e8 <global_stdio_init.part.0+0x30>)
340189bc:	2104      	movs	r1, #4
340189be:	4c0b      	ldr	r4, [pc, #44]	@ (340189ec <global_stdio_init.part.0+0x34>)
340189c0:	4a0b      	ldr	r2, [pc, #44]	@ (340189f0 <global_stdio_init.part.0+0x38>)
340189c2:	4620      	mov	r0, r4
340189c4:	601a      	str	r2, [r3, #0]
340189c6:	2200      	movs	r2, #0
340189c8:	f7ff ff94 	bl	340188f4 <std>
340189cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
340189d0:	2201      	movs	r2, #1
340189d2:	2109      	movs	r1, #9
340189d4:	f7ff ff8e 	bl	340188f4 <std>
340189d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
340189dc:	2202      	movs	r2, #2
340189de:	2112      	movs	r1, #18
340189e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340189e4:	f7ff bf86 	b.w	340188f4 <std>
340189e8:	3401c684 	.word	0x3401c684
340189ec:	3401c54c 	.word	0x3401c54c
340189f0:	34018961 	.word	0x34018961

340189f4 <__sfp_lock_acquire>:
340189f4:	4801      	ldr	r0, [pc, #4]	@ (340189fc <__sfp_lock_acquire+0x8>)
340189f6:	f000 ba26 	b.w	34018e46 <__retarget_lock_acquire_recursive>
340189fa:	bf00      	nop
340189fc:	3401c68d 	.word	0x3401c68d

34018a00 <__sfp_lock_release>:
34018a00:	4801      	ldr	r0, [pc, #4]	@ (34018a08 <__sfp_lock_release+0x8>)
34018a02:	f000 ba21 	b.w	34018e48 <__retarget_lock_release_recursive>
34018a06:	bf00      	nop
34018a08:	3401c68d 	.word	0x3401c68d

34018a0c <__sinit>:
34018a0c:	b510      	push	{r4, lr}
34018a0e:	4604      	mov	r4, r0
34018a10:	f7ff fff0 	bl	340189f4 <__sfp_lock_acquire>
34018a14:	6a23      	ldr	r3, [r4, #32]
34018a16:	b11b      	cbz	r3, 34018a20 <__sinit+0x14>
34018a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34018a1c:	f7ff bff0 	b.w	34018a00 <__sfp_lock_release>
34018a20:	4b04      	ldr	r3, [pc, #16]	@ (34018a34 <__sinit+0x28>)
34018a22:	6223      	str	r3, [r4, #32]
34018a24:	4b04      	ldr	r3, [pc, #16]	@ (34018a38 <__sinit+0x2c>)
34018a26:	681b      	ldr	r3, [r3, #0]
34018a28:	2b00      	cmp	r3, #0
34018a2a:	d1f5      	bne.n	34018a18 <__sinit+0xc>
34018a2c:	f7ff ffc4 	bl	340189b8 <global_stdio_init.part.0>
34018a30:	e7f2      	b.n	34018a18 <__sinit+0xc>
34018a32:	bf00      	nop
34018a34:	34018979 	.word	0x34018979
34018a38:	3401c684 	.word	0x3401c684

34018a3c <fiprintf>:
34018a3c:	b40e      	push	{r1, r2, r3}
34018a3e:	b503      	push	{r0, r1, lr}
34018a40:	ab03      	add	r3, sp, #12
34018a42:	4601      	mov	r1, r0
34018a44:	4805      	ldr	r0, [pc, #20]	@ (34018a5c <fiprintf+0x20>)
34018a46:	f853 2b04 	ldr.w	r2, [r3], #4
34018a4a:	6800      	ldr	r0, [r0, #0]
34018a4c:	9301      	str	r3, [sp, #4]
34018a4e:	f001 fbff 	bl	3401a250 <_vfiprintf_r>
34018a52:	b002      	add	sp, #8
34018a54:	f85d eb04 	ldr.w	lr, [sp], #4
34018a58:	b003      	add	sp, #12
34018a5a:	4770      	bx	lr
34018a5c:	3401be4c 	.word	0x3401be4c

34018a60 <_fwalk_sglue>:
34018a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34018a64:	4607      	mov	r7, r0
34018a66:	4688      	mov	r8, r1
34018a68:	4614      	mov	r4, r2
34018a6a:	2600      	movs	r6, #0
34018a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34018a70:	f1b9 0901 	subs.w	r9, r9, #1
34018a74:	d505      	bpl.n	34018a82 <_fwalk_sglue+0x22>
34018a76:	6824      	ldr	r4, [r4, #0]
34018a78:	2c00      	cmp	r4, #0
34018a7a:	d1f7      	bne.n	34018a6c <_fwalk_sglue+0xc>
34018a7c:	4630      	mov	r0, r6
34018a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34018a82:	89ab      	ldrh	r3, [r5, #12]
34018a84:	2b01      	cmp	r3, #1
34018a86:	d907      	bls.n	34018a98 <_fwalk_sglue+0x38>
34018a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
34018a8c:	3301      	adds	r3, #1
34018a8e:	d003      	beq.n	34018a98 <_fwalk_sglue+0x38>
34018a90:	4629      	mov	r1, r5
34018a92:	4638      	mov	r0, r7
34018a94:	47c0      	blx	r8
34018a96:	4306      	orrs	r6, r0
34018a98:	3568      	adds	r5, #104	@ 0x68
34018a9a:	e7e9      	b.n	34018a70 <_fwalk_sglue+0x10>

34018a9c <iprintf>:
34018a9c:	b40f      	push	{r0, r1, r2, r3}
34018a9e:	b507      	push	{r0, r1, r2, lr}
34018aa0:	4906      	ldr	r1, [pc, #24]	@ (34018abc <iprintf+0x20>)
34018aa2:	ab04      	add	r3, sp, #16
34018aa4:	6808      	ldr	r0, [r1, #0]
34018aa6:	f853 2b04 	ldr.w	r2, [r3], #4
34018aaa:	6881      	ldr	r1, [r0, #8]
34018aac:	9301      	str	r3, [sp, #4]
34018aae:	f001 fbcf 	bl	3401a250 <_vfiprintf_r>
34018ab2:	b003      	add	sp, #12
34018ab4:	f85d eb04 	ldr.w	lr, [sp], #4
34018ab8:	b004      	add	sp, #16
34018aba:	4770      	bx	lr
34018abc:	3401be4c 	.word	0x3401be4c

34018ac0 <_puts_r>:
34018ac0:	6a03      	ldr	r3, [r0, #32]
34018ac2:	b570      	push	{r4, r5, r6, lr}
34018ac4:	4605      	mov	r5, r0
34018ac6:	460e      	mov	r6, r1
34018ac8:	6884      	ldr	r4, [r0, #8]
34018aca:	b90b      	cbnz	r3, 34018ad0 <_puts_r+0x10>
34018acc:	f7ff ff9e 	bl	34018a0c <__sinit>
34018ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34018ad2:	07db      	lsls	r3, r3, #31
34018ad4:	d405      	bmi.n	34018ae2 <_puts_r+0x22>
34018ad6:	89a3      	ldrh	r3, [r4, #12]
34018ad8:	0598      	lsls	r0, r3, #22
34018ada:	d402      	bmi.n	34018ae2 <_puts_r+0x22>
34018adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34018ade:	f000 f9b2 	bl	34018e46 <__retarget_lock_acquire_recursive>
34018ae2:	89a3      	ldrh	r3, [r4, #12]
34018ae4:	0719      	lsls	r1, r3, #28
34018ae6:	d502      	bpl.n	34018aee <_puts_r+0x2e>
34018ae8:	6923      	ldr	r3, [r4, #16]
34018aea:	2b00      	cmp	r3, #0
34018aec:	d135      	bne.n	34018b5a <_puts_r+0x9a>
34018aee:	4621      	mov	r1, r4
34018af0:	4628      	mov	r0, r5
34018af2:	f000 f8c5 	bl	34018c80 <__swsetup_r>
34018af6:	b380      	cbz	r0, 34018b5a <_puts_r+0x9a>
34018af8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
34018afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34018afe:	07da      	lsls	r2, r3, #31
34018b00:	d405      	bmi.n	34018b0e <_puts_r+0x4e>
34018b02:	89a3      	ldrh	r3, [r4, #12]
34018b04:	059b      	lsls	r3, r3, #22
34018b06:	d402      	bmi.n	34018b0e <_puts_r+0x4e>
34018b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34018b0a:	f000 f99d 	bl	34018e48 <__retarget_lock_release_recursive>
34018b0e:	4628      	mov	r0, r5
34018b10:	bd70      	pop	{r4, r5, r6, pc}
34018b12:	2b00      	cmp	r3, #0
34018b14:	da04      	bge.n	34018b20 <_puts_r+0x60>
34018b16:	69a2      	ldr	r2, [r4, #24]
34018b18:	429a      	cmp	r2, r3
34018b1a:	dc17      	bgt.n	34018b4c <_puts_r+0x8c>
34018b1c:	290a      	cmp	r1, #10
34018b1e:	d015      	beq.n	34018b4c <_puts_r+0x8c>
34018b20:	6823      	ldr	r3, [r4, #0]
34018b22:	1c5a      	adds	r2, r3, #1
34018b24:	6022      	str	r2, [r4, #0]
34018b26:	7019      	strb	r1, [r3, #0]
34018b28:	68a3      	ldr	r3, [r4, #8]
34018b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
34018b2e:	3b01      	subs	r3, #1
34018b30:	60a3      	str	r3, [r4, #8]
34018b32:	2900      	cmp	r1, #0
34018b34:	d1ed      	bne.n	34018b12 <_puts_r+0x52>
34018b36:	2b00      	cmp	r3, #0
34018b38:	da11      	bge.n	34018b5e <_puts_r+0x9e>
34018b3a:	4622      	mov	r2, r4
34018b3c:	210a      	movs	r1, #10
34018b3e:	4628      	mov	r0, r5
34018b40:	f000 f85f 	bl	34018c02 <__swbuf_r>
34018b44:	3001      	adds	r0, #1
34018b46:	d0d7      	beq.n	34018af8 <_puts_r+0x38>
34018b48:	250a      	movs	r5, #10
34018b4a:	e7d7      	b.n	34018afc <_puts_r+0x3c>
34018b4c:	4622      	mov	r2, r4
34018b4e:	4628      	mov	r0, r5
34018b50:	f000 f857 	bl	34018c02 <__swbuf_r>
34018b54:	3001      	adds	r0, #1
34018b56:	d1e7      	bne.n	34018b28 <_puts_r+0x68>
34018b58:	e7ce      	b.n	34018af8 <_puts_r+0x38>
34018b5a:	3e01      	subs	r6, #1
34018b5c:	e7e4      	b.n	34018b28 <_puts_r+0x68>
34018b5e:	6823      	ldr	r3, [r4, #0]
34018b60:	1c5a      	adds	r2, r3, #1
34018b62:	6022      	str	r2, [r4, #0]
34018b64:	220a      	movs	r2, #10
34018b66:	701a      	strb	r2, [r3, #0]
34018b68:	e7ee      	b.n	34018b48 <_puts_r+0x88>
	...

34018b6c <puts>:
34018b6c:	4b02      	ldr	r3, [pc, #8]	@ (34018b78 <puts+0xc>)
34018b6e:	4601      	mov	r1, r0
34018b70:	6818      	ldr	r0, [r3, #0]
34018b72:	f7ff bfa5 	b.w	34018ac0 <_puts_r>
34018b76:	bf00      	nop
34018b78:	3401be4c 	.word	0x3401be4c

34018b7c <__sread>:
34018b7c:	b510      	push	{r4, lr}
34018b7e:	460c      	mov	r4, r1
34018b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34018b84:	f000 f900 	bl	34018d88 <_read_r>
34018b88:	2800      	cmp	r0, #0
34018b8a:	bfab      	itete	ge
34018b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
34018b8e:	89a3      	ldrhlt	r3, [r4, #12]
34018b90:	181b      	addge	r3, r3, r0
34018b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34018b96:	bfac      	ite	ge
34018b98:	6563      	strge	r3, [r4, #84]	@ 0x54
34018b9a:	81a3      	strhlt	r3, [r4, #12]
34018b9c:	bd10      	pop	{r4, pc}

34018b9e <__swrite>:
34018b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34018ba2:	461f      	mov	r7, r3
34018ba4:	898b      	ldrh	r3, [r1, #12]
34018ba6:	4605      	mov	r5, r0
34018ba8:	460c      	mov	r4, r1
34018baa:	05db      	lsls	r3, r3, #23
34018bac:	4616      	mov	r6, r2
34018bae:	d505      	bpl.n	34018bbc <__swrite+0x1e>
34018bb0:	2302      	movs	r3, #2
34018bb2:	2200      	movs	r2, #0
34018bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34018bb8:	f000 f8d4 	bl	34018d64 <_lseek_r>
34018bbc:	89a3      	ldrh	r3, [r4, #12]
34018bbe:	4632      	mov	r2, r6
34018bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34018bc4:	4628      	mov	r0, r5
34018bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34018bca:	81a3      	strh	r3, [r4, #12]
34018bcc:	463b      	mov	r3, r7
34018bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34018bd2:	f000 b8fb 	b.w	34018dcc <_write_r>

34018bd6 <__sseek>:
34018bd6:	b510      	push	{r4, lr}
34018bd8:	460c      	mov	r4, r1
34018bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34018bde:	f000 f8c1 	bl	34018d64 <_lseek_r>
34018be2:	1c43      	adds	r3, r0, #1
34018be4:	89a3      	ldrh	r3, [r4, #12]
34018be6:	bf15      	itete	ne
34018be8:	6560      	strne	r0, [r4, #84]	@ 0x54
34018bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
34018bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34018bf2:	81a3      	strheq	r3, [r4, #12]
34018bf4:	bf18      	it	ne
34018bf6:	81a3      	strhne	r3, [r4, #12]
34018bf8:	bd10      	pop	{r4, pc}

34018bfa <__sclose>:
34018bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34018bfe:	f000 b8a1 	b.w	34018d44 <_close_r>

34018c02 <__swbuf_r>:
34018c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34018c04:	460e      	mov	r6, r1
34018c06:	4614      	mov	r4, r2
34018c08:	4605      	mov	r5, r0
34018c0a:	b118      	cbz	r0, 34018c14 <__swbuf_r+0x12>
34018c0c:	6a03      	ldr	r3, [r0, #32]
34018c0e:	b90b      	cbnz	r3, 34018c14 <__swbuf_r+0x12>
34018c10:	f7ff fefc 	bl	34018a0c <__sinit>
34018c14:	69a3      	ldr	r3, [r4, #24]
34018c16:	60a3      	str	r3, [r4, #8]
34018c18:	89a3      	ldrh	r3, [r4, #12]
34018c1a:	071a      	lsls	r2, r3, #28
34018c1c:	d501      	bpl.n	34018c22 <__swbuf_r+0x20>
34018c1e:	6923      	ldr	r3, [r4, #16]
34018c20:	b943      	cbnz	r3, 34018c34 <__swbuf_r+0x32>
34018c22:	4621      	mov	r1, r4
34018c24:	4628      	mov	r0, r5
34018c26:	f000 f82b 	bl	34018c80 <__swsetup_r>
34018c2a:	b118      	cbz	r0, 34018c34 <__swbuf_r+0x32>
34018c2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
34018c30:	4638      	mov	r0, r7
34018c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34018c34:	6823      	ldr	r3, [r4, #0]
34018c36:	b2f6      	uxtb	r6, r6
34018c38:	6922      	ldr	r2, [r4, #16]
34018c3a:	4637      	mov	r7, r6
34018c3c:	1a98      	subs	r0, r3, r2
34018c3e:	6963      	ldr	r3, [r4, #20]
34018c40:	4283      	cmp	r3, r0
34018c42:	dc05      	bgt.n	34018c50 <__swbuf_r+0x4e>
34018c44:	4621      	mov	r1, r4
34018c46:	4628      	mov	r0, r5
34018c48:	f7ff fe18 	bl	3401887c <_fflush_r>
34018c4c:	2800      	cmp	r0, #0
34018c4e:	d1ed      	bne.n	34018c2c <__swbuf_r+0x2a>
34018c50:	68a3      	ldr	r3, [r4, #8]
34018c52:	3b01      	subs	r3, #1
34018c54:	60a3      	str	r3, [r4, #8]
34018c56:	6823      	ldr	r3, [r4, #0]
34018c58:	1c5a      	adds	r2, r3, #1
34018c5a:	6022      	str	r2, [r4, #0]
34018c5c:	701e      	strb	r6, [r3, #0]
34018c5e:	1c43      	adds	r3, r0, #1
34018c60:	6962      	ldr	r2, [r4, #20]
34018c62:	429a      	cmp	r2, r3
34018c64:	d004      	beq.n	34018c70 <__swbuf_r+0x6e>
34018c66:	89a3      	ldrh	r3, [r4, #12]
34018c68:	07db      	lsls	r3, r3, #31
34018c6a:	d5e1      	bpl.n	34018c30 <__swbuf_r+0x2e>
34018c6c:	2e0a      	cmp	r6, #10
34018c6e:	d1df      	bne.n	34018c30 <__swbuf_r+0x2e>
34018c70:	4621      	mov	r1, r4
34018c72:	4628      	mov	r0, r5
34018c74:	f7ff fe02 	bl	3401887c <_fflush_r>
34018c78:	2800      	cmp	r0, #0
34018c7a:	d0d9      	beq.n	34018c30 <__swbuf_r+0x2e>
34018c7c:	e7d6      	b.n	34018c2c <__swbuf_r+0x2a>
	...

34018c80 <__swsetup_r>:
34018c80:	b538      	push	{r3, r4, r5, lr}
34018c82:	4b29      	ldr	r3, [pc, #164]	@ (34018d28 <__swsetup_r+0xa8>)
34018c84:	4605      	mov	r5, r0
34018c86:	460c      	mov	r4, r1
34018c88:	6818      	ldr	r0, [r3, #0]
34018c8a:	b118      	cbz	r0, 34018c94 <__swsetup_r+0x14>
34018c8c:	6a03      	ldr	r3, [r0, #32]
34018c8e:	b90b      	cbnz	r3, 34018c94 <__swsetup_r+0x14>
34018c90:	f7ff febc 	bl	34018a0c <__sinit>
34018c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34018c98:	0719      	lsls	r1, r3, #28
34018c9a:	d422      	bmi.n	34018ce2 <__swsetup_r+0x62>
34018c9c:	06da      	lsls	r2, r3, #27
34018c9e:	d407      	bmi.n	34018cb0 <__swsetup_r+0x30>
34018ca0:	2209      	movs	r2, #9
34018ca2:	602a      	str	r2, [r5, #0]
34018ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34018ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34018cac:	81a3      	strh	r3, [r4, #12]
34018cae:	e033      	b.n	34018d18 <__swsetup_r+0x98>
34018cb0:	0758      	lsls	r0, r3, #29
34018cb2:	d512      	bpl.n	34018cda <__swsetup_r+0x5a>
34018cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34018cb6:	b141      	cbz	r1, 34018cca <__swsetup_r+0x4a>
34018cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34018cbc:	4299      	cmp	r1, r3
34018cbe:	d002      	beq.n	34018cc6 <__swsetup_r+0x46>
34018cc0:	4628      	mov	r0, r5
34018cc2:	f000 fecf 	bl	34019a64 <_free_r>
34018cc6:	2300      	movs	r3, #0
34018cc8:	6363      	str	r3, [r4, #52]	@ 0x34
34018cca:	89a3      	ldrh	r3, [r4, #12]
34018ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34018cd0:	81a3      	strh	r3, [r4, #12]
34018cd2:	2300      	movs	r3, #0
34018cd4:	6063      	str	r3, [r4, #4]
34018cd6:	6923      	ldr	r3, [r4, #16]
34018cd8:	6023      	str	r3, [r4, #0]
34018cda:	89a3      	ldrh	r3, [r4, #12]
34018cdc:	f043 0308 	orr.w	r3, r3, #8
34018ce0:	81a3      	strh	r3, [r4, #12]
34018ce2:	6923      	ldr	r3, [r4, #16]
34018ce4:	b94b      	cbnz	r3, 34018cfa <__swsetup_r+0x7a>
34018ce6:	89a3      	ldrh	r3, [r4, #12]
34018ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34018cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34018cf0:	d003      	beq.n	34018cfa <__swsetup_r+0x7a>
34018cf2:	4621      	mov	r1, r4
34018cf4:	4628      	mov	r0, r5
34018cf6:	f001 fbe8 	bl	3401a4ca <__smakebuf_r>
34018cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34018cfe:	f013 0201 	ands.w	r2, r3, #1
34018d02:	d00a      	beq.n	34018d1a <__swsetup_r+0x9a>
34018d04:	2200      	movs	r2, #0
34018d06:	60a2      	str	r2, [r4, #8]
34018d08:	6962      	ldr	r2, [r4, #20]
34018d0a:	4252      	negs	r2, r2
34018d0c:	61a2      	str	r2, [r4, #24]
34018d0e:	6922      	ldr	r2, [r4, #16]
34018d10:	b942      	cbnz	r2, 34018d24 <__swsetup_r+0xa4>
34018d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
34018d16:	d1c5      	bne.n	34018ca4 <__swsetup_r+0x24>
34018d18:	bd38      	pop	{r3, r4, r5, pc}
34018d1a:	0799      	lsls	r1, r3, #30
34018d1c:	bf58      	it	pl
34018d1e:	6962      	ldrpl	r2, [r4, #20]
34018d20:	60a2      	str	r2, [r4, #8]
34018d22:	e7f4      	b.n	34018d0e <__swsetup_r+0x8e>
34018d24:	2000      	movs	r0, #0
34018d26:	e7f7      	b.n	34018d18 <__swsetup_r+0x98>
34018d28:	3401be4c 	.word	0x3401be4c

34018d2c <memset>:
34018d2c:	4402      	add	r2, r0
34018d2e:	4603      	mov	r3, r0
34018d30:	4293      	cmp	r3, r2
34018d32:	d100      	bne.n	34018d36 <memset+0xa>
34018d34:	4770      	bx	lr
34018d36:	f803 1b01 	strb.w	r1, [r3], #1
34018d3a:	e7f9      	b.n	34018d30 <memset+0x4>

34018d3c <_localeconv_r>:
34018d3c:	4800      	ldr	r0, [pc, #0]	@ (34018d40 <_localeconv_r+0x4>)
34018d3e:	4770      	bx	lr
34018d40:	3401bf8c 	.word	0x3401bf8c

34018d44 <_close_r>:
34018d44:	b538      	push	{r3, r4, r5, lr}
34018d46:	2300      	movs	r3, #0
34018d48:	4d05      	ldr	r5, [pc, #20]	@ (34018d60 <_close_r+0x1c>)
34018d4a:	4604      	mov	r4, r0
34018d4c:	4608      	mov	r0, r1
34018d4e:	602b      	str	r3, [r5, #0]
34018d50:	f7e8 fd1e 	bl	34001790 <_close>
34018d54:	1c43      	adds	r3, r0, #1
34018d56:	d102      	bne.n	34018d5e <_close_r+0x1a>
34018d58:	682b      	ldr	r3, [r5, #0]
34018d5a:	b103      	cbz	r3, 34018d5e <_close_r+0x1a>
34018d5c:	6023      	str	r3, [r4, #0]
34018d5e:	bd38      	pop	{r3, r4, r5, pc}
34018d60:	3401c688 	.word	0x3401c688

34018d64 <_lseek_r>:
34018d64:	b538      	push	{r3, r4, r5, lr}
34018d66:	4604      	mov	r4, r0
34018d68:	4d06      	ldr	r5, [pc, #24]	@ (34018d84 <_lseek_r+0x20>)
34018d6a:	4608      	mov	r0, r1
34018d6c:	4611      	mov	r1, r2
34018d6e:	2200      	movs	r2, #0
34018d70:	602a      	str	r2, [r5, #0]
34018d72:	461a      	mov	r2, r3
34018d74:	f7e8 fd33 	bl	340017de <_lseek>
34018d78:	1c43      	adds	r3, r0, #1
34018d7a:	d102      	bne.n	34018d82 <_lseek_r+0x1e>
34018d7c:	682b      	ldr	r3, [r5, #0]
34018d7e:	b103      	cbz	r3, 34018d82 <_lseek_r+0x1e>
34018d80:	6023      	str	r3, [r4, #0]
34018d82:	bd38      	pop	{r3, r4, r5, pc}
34018d84:	3401c688 	.word	0x3401c688

34018d88 <_read_r>:
34018d88:	b538      	push	{r3, r4, r5, lr}
34018d8a:	4604      	mov	r4, r0
34018d8c:	4d06      	ldr	r5, [pc, #24]	@ (34018da8 <_read_r+0x20>)
34018d8e:	4608      	mov	r0, r1
34018d90:	4611      	mov	r1, r2
34018d92:	2200      	movs	r2, #0
34018d94:	602a      	str	r2, [r5, #0]
34018d96:	461a      	mov	r2, r3
34018d98:	f7e8 fcdd 	bl	34001756 <_read>
34018d9c:	1c43      	adds	r3, r0, #1
34018d9e:	d102      	bne.n	34018da6 <_read_r+0x1e>
34018da0:	682b      	ldr	r3, [r5, #0]
34018da2:	b103      	cbz	r3, 34018da6 <_read_r+0x1e>
34018da4:	6023      	str	r3, [r4, #0]
34018da6:	bd38      	pop	{r3, r4, r5, pc}
34018da8:	3401c688 	.word	0x3401c688

34018dac <_sbrk_r>:
34018dac:	b538      	push	{r3, r4, r5, lr}
34018dae:	2300      	movs	r3, #0
34018db0:	4d05      	ldr	r5, [pc, #20]	@ (34018dc8 <_sbrk_r+0x1c>)
34018db2:	4604      	mov	r4, r0
34018db4:	4608      	mov	r0, r1
34018db6:	602b      	str	r3, [r5, #0]
34018db8:	f001 fc5e 	bl	3401a678 <_sbrk>
34018dbc:	1c43      	adds	r3, r0, #1
34018dbe:	d102      	bne.n	34018dc6 <_sbrk_r+0x1a>
34018dc0:	682b      	ldr	r3, [r5, #0]
34018dc2:	b103      	cbz	r3, 34018dc6 <_sbrk_r+0x1a>
34018dc4:	6023      	str	r3, [r4, #0]
34018dc6:	bd38      	pop	{r3, r4, r5, pc}
34018dc8:	3401c688 	.word	0x3401c688

34018dcc <_write_r>:
34018dcc:	b538      	push	{r3, r4, r5, lr}
34018dce:	4604      	mov	r4, r0
34018dd0:	4d06      	ldr	r5, [pc, #24]	@ (34018dec <_write_r+0x20>)
34018dd2:	4608      	mov	r0, r1
34018dd4:	4611      	mov	r1, r2
34018dd6:	2200      	movs	r2, #0
34018dd8:	602a      	str	r2, [r5, #0]
34018dda:	461a      	mov	r2, r3
34018ddc:	f7e8 f9f0 	bl	340011c0 <_write>
34018de0:	1c43      	adds	r3, r0, #1
34018de2:	d102      	bne.n	34018dea <_write_r+0x1e>
34018de4:	682b      	ldr	r3, [r5, #0]
34018de6:	b103      	cbz	r3, 34018dea <_write_r+0x1e>
34018de8:	6023      	str	r3, [r4, #0]
34018dea:	bd38      	pop	{r3, r4, r5, pc}
34018dec:	3401c688 	.word	0x3401c688

34018df0 <__errno>:
34018df0:	4b01      	ldr	r3, [pc, #4]	@ (34018df8 <__errno+0x8>)
34018df2:	6818      	ldr	r0, [r3, #0]
34018df4:	4770      	bx	lr
34018df6:	bf00      	nop
34018df8:	3401be4c 	.word	0x3401be4c

34018dfc <__libc_init_array>:
34018dfc:	b570      	push	{r4, r5, r6, lr}
34018dfe:	4d0d      	ldr	r5, [pc, #52]	@ (34018e34 <__libc_init_array+0x38>)
34018e00:	2600      	movs	r6, #0
34018e02:	4c0d      	ldr	r4, [pc, #52]	@ (34018e38 <__libc_init_array+0x3c>)
34018e04:	1b64      	subs	r4, r4, r5
34018e06:	10a4      	asrs	r4, r4, #2
34018e08:	42a6      	cmp	r6, r4
34018e0a:	d109      	bne.n	34018e20 <__libc_init_array+0x24>
34018e0c:	4d0b      	ldr	r5, [pc, #44]	@ (34018e3c <__libc_init_array+0x40>)
34018e0e:	2600      	movs	r6, #0
34018e10:	4c0b      	ldr	r4, [pc, #44]	@ (34018e40 <__libc_init_array+0x44>)
34018e12:	f001 fc3f 	bl	3401a694 <_init>
34018e16:	1b64      	subs	r4, r4, r5
34018e18:	10a4      	asrs	r4, r4, #2
34018e1a:	42a6      	cmp	r6, r4
34018e1c:	d105      	bne.n	34018e2a <__libc_init_array+0x2e>
34018e1e:	bd70      	pop	{r4, r5, r6, pc}
34018e20:	f855 3b04 	ldr.w	r3, [r5], #4
34018e24:	3601      	adds	r6, #1
34018e26:	4798      	blx	r3
34018e28:	e7ee      	b.n	34018e08 <__libc_init_array+0xc>
34018e2a:	f855 3b04 	ldr.w	r3, [r5], #4
34018e2e:	3601      	adds	r6, #1
34018e30:	4798      	blx	r3
34018e32:	e7f2      	b.n	34018e1a <__libc_init_array+0x1e>
34018e34:	3401be24 	.word	0x3401be24
34018e38:	3401be24 	.word	0x3401be24
34018e3c:	3401be24 	.word	0x3401be24
34018e40:	3401be28 	.word	0x3401be28

34018e44 <__retarget_lock_init_recursive>:
34018e44:	4770      	bx	lr

34018e46 <__retarget_lock_acquire_recursive>:
34018e46:	4770      	bx	lr

34018e48 <__retarget_lock_release_recursive>:
34018e48:	4770      	bx	lr

34018e4a <memchr>:
34018e4a:	b2c9      	uxtb	r1, r1
34018e4c:	4603      	mov	r3, r0
34018e4e:	4402      	add	r2, r0
34018e50:	b510      	push	{r4, lr}
34018e52:	4293      	cmp	r3, r2
34018e54:	4618      	mov	r0, r3
34018e56:	d101      	bne.n	34018e5c <memchr+0x12>
34018e58:	2000      	movs	r0, #0
34018e5a:	e003      	b.n	34018e64 <memchr+0x1a>
34018e5c:	7804      	ldrb	r4, [r0, #0]
34018e5e:	3301      	adds	r3, #1
34018e60:	428c      	cmp	r4, r1
34018e62:	d1f6      	bne.n	34018e52 <memchr+0x8>
34018e64:	bd10      	pop	{r4, pc}

34018e66 <memcpy>:
34018e66:	440a      	add	r2, r1
34018e68:	1e43      	subs	r3, r0, #1
34018e6a:	4291      	cmp	r1, r2
34018e6c:	d100      	bne.n	34018e70 <memcpy+0xa>
34018e6e:	4770      	bx	lr
34018e70:	b510      	push	{r4, lr}
34018e72:	f811 4b01 	ldrb.w	r4, [r1], #1
34018e76:	4291      	cmp	r1, r2
34018e78:	f803 4f01 	strb.w	r4, [r3, #1]!
34018e7c:	d1f9      	bne.n	34018e72 <memcpy+0xc>
34018e7e:	bd10      	pop	{r4, pc}

34018e80 <abort>:
34018e80:	2006      	movs	r0, #6
34018e82:	b508      	push	{r3, lr}
34018e84:	f001 fb86 	bl	3401a594 <raise>
34018e88:	2001      	movs	r0, #1
34018e8a:	f7e8 fc59 	bl	34001740 <_exit>

34018e8e <quorem>:
34018e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34018e92:	6903      	ldr	r3, [r0, #16]
34018e94:	4607      	mov	r7, r0
34018e96:	690c      	ldr	r4, [r1, #16]
34018e98:	42a3      	cmp	r3, r4
34018e9a:	f2c0 8083 	blt.w	34018fa4 <quorem+0x116>
34018e9e:	3c01      	subs	r4, #1
34018ea0:	f100 0514 	add.w	r5, r0, #20
34018ea4:	f101 0814 	add.w	r8, r1, #20
34018ea8:	00a3      	lsls	r3, r4, #2
34018eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34018eae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
34018eb2:	9300      	str	r3, [sp, #0]
34018eb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34018eb8:	9301      	str	r3, [sp, #4]
34018eba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
34018ebe:	3301      	adds	r3, #1
34018ec0:	429a      	cmp	r2, r3
34018ec2:	fbb2 f6f3 	udiv	r6, r2, r3
34018ec6:	d331      	bcc.n	34018f2c <quorem+0x9e>
34018ec8:	f04f 0a00 	mov.w	sl, #0
34018ecc:	46c4      	mov	ip, r8
34018ece:	46ae      	mov	lr, r5
34018ed0:	46d3      	mov	fp, sl
34018ed2:	f85c 3b04 	ldr.w	r3, [ip], #4
34018ed6:	b298      	uxth	r0, r3
34018ed8:	45e1      	cmp	r9, ip
34018eda:	ea4f 4313 	mov.w	r3, r3, lsr #16
34018ede:	fb06 a000 	mla	r0, r6, r0, sl
34018ee2:	ea4f 4210 	mov.w	r2, r0, lsr #16
34018ee6:	b280      	uxth	r0, r0
34018ee8:	fb06 2303 	mla	r3, r6, r3, r2
34018eec:	f8de 2000 	ldr.w	r2, [lr]
34018ef0:	b292      	uxth	r2, r2
34018ef2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34018ef6:	eba2 0200 	sub.w	r2, r2, r0
34018efa:	b29b      	uxth	r3, r3
34018efc:	f8de 0000 	ldr.w	r0, [lr]
34018f00:	445a      	add	r2, fp
34018f02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
34018f06:	b292      	uxth	r2, r2
34018f08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
34018f0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34018f10:	ea4f 4b23 	mov.w	fp, r3, asr #16
34018f14:	f84e 2b04 	str.w	r2, [lr], #4
34018f18:	d2db      	bcs.n	34018ed2 <quorem+0x44>
34018f1a:	9b00      	ldr	r3, [sp, #0]
34018f1c:	58eb      	ldr	r3, [r5, r3]
34018f1e:	b92b      	cbnz	r3, 34018f2c <quorem+0x9e>
34018f20:	9b01      	ldr	r3, [sp, #4]
34018f22:	3b04      	subs	r3, #4
34018f24:	429d      	cmp	r5, r3
34018f26:	461a      	mov	r2, r3
34018f28:	d330      	bcc.n	34018f8c <quorem+0xfe>
34018f2a:	613c      	str	r4, [r7, #16]
34018f2c:	4638      	mov	r0, r7
34018f2e:	f001 f859 	bl	34019fe4 <__mcmp>
34018f32:	2800      	cmp	r0, #0
34018f34:	db26      	blt.n	34018f84 <quorem+0xf6>
34018f36:	4629      	mov	r1, r5
34018f38:	2000      	movs	r0, #0
34018f3a:	f858 2b04 	ldr.w	r2, [r8], #4
34018f3e:	f8d1 c000 	ldr.w	ip, [r1]
34018f42:	fa1f fe82 	uxth.w	lr, r2
34018f46:	45c1      	cmp	r9, r8
34018f48:	fa1f f38c 	uxth.w	r3, ip
34018f4c:	ea4f 4212 	mov.w	r2, r2, lsr #16
34018f50:	eba3 030e 	sub.w	r3, r3, lr
34018f54:	4403      	add	r3, r0
34018f56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
34018f5a:	b29b      	uxth	r3, r3
34018f5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
34018f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34018f64:	ea4f 4022 	mov.w	r0, r2, asr #16
34018f68:	f841 3b04 	str.w	r3, [r1], #4
34018f6c:	d2e5      	bcs.n	34018f3a <quorem+0xac>
34018f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34018f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34018f76:	b922      	cbnz	r2, 34018f82 <quorem+0xf4>
34018f78:	3b04      	subs	r3, #4
34018f7a:	429d      	cmp	r5, r3
34018f7c:	461a      	mov	r2, r3
34018f7e:	d30b      	bcc.n	34018f98 <quorem+0x10a>
34018f80:	613c      	str	r4, [r7, #16]
34018f82:	3601      	adds	r6, #1
34018f84:	4630      	mov	r0, r6
34018f86:	b003      	add	sp, #12
34018f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34018f8c:	6812      	ldr	r2, [r2, #0]
34018f8e:	3b04      	subs	r3, #4
34018f90:	2a00      	cmp	r2, #0
34018f92:	d1ca      	bne.n	34018f2a <quorem+0x9c>
34018f94:	3c01      	subs	r4, #1
34018f96:	e7c5      	b.n	34018f24 <quorem+0x96>
34018f98:	6812      	ldr	r2, [r2, #0]
34018f9a:	3b04      	subs	r3, #4
34018f9c:	2a00      	cmp	r2, #0
34018f9e:	d1ef      	bne.n	34018f80 <quorem+0xf2>
34018fa0:	3c01      	subs	r4, #1
34018fa2:	e7ea      	b.n	34018f7a <quorem+0xec>
34018fa4:	2000      	movs	r0, #0
34018fa6:	e7ee      	b.n	34018f86 <quorem+0xf8>

34018fa8 <_dtoa_r>:
34018fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34018fac:	69c7      	ldr	r7, [r0, #28]
34018fae:	4681      	mov	r9, r0
34018fb0:	ed2d 8b02 	vpush	{d8}
34018fb4:	b091      	sub	sp, #68	@ 0x44
34018fb6:	ec55 4b10 	vmov	r4, r5, d0
34018fba:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
34018fbc:	9107      	str	r1, [sp, #28]
34018fbe:	9209      	str	r2, [sp, #36]	@ 0x24
34018fc0:	930d      	str	r3, [sp, #52]	@ 0x34
34018fc2:	ed8d 0b02 	vstr	d0, [sp, #8]
34018fc6:	b97f      	cbnz	r7, 34018fe8 <_dtoa_r+0x40>
34018fc8:	2010      	movs	r0, #16
34018fca:	f7fe fee5 	bl	34017d98 <malloc>
34018fce:	4602      	mov	r2, r0
34018fd0:	f8c9 001c 	str.w	r0, [r9, #28]
34018fd4:	b920      	cbnz	r0, 34018fe0 <_dtoa_r+0x38>
34018fd6:	4ba0      	ldr	r3, [pc, #640]	@ (34019258 <_dtoa_r+0x2b0>)
34018fd8:	21ef      	movs	r1, #239	@ 0xef
34018fda:	48a0      	ldr	r0, [pc, #640]	@ (3401925c <_dtoa_r+0x2b4>)
34018fdc:	f7fe febe 	bl	34017d5c <__assert_func>
34018fe0:	e9c0 7701 	strd	r7, r7, [r0, #4]
34018fe4:	6007      	str	r7, [r0, #0]
34018fe6:	60c7      	str	r7, [r0, #12]
34018fe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
34018fec:	6819      	ldr	r1, [r3, #0]
34018fee:	b159      	cbz	r1, 34019008 <_dtoa_r+0x60>
34018ff0:	685a      	ldr	r2, [r3, #4]
34018ff2:	2301      	movs	r3, #1
34018ff4:	4648      	mov	r0, r9
34018ff6:	4093      	lsls	r3, r2
34018ff8:	604a      	str	r2, [r1, #4]
34018ffa:	608b      	str	r3, [r1, #8]
34018ffc:	f000 fdbc 	bl	34019b78 <_Bfree>
34019000:	f8d9 301c 	ldr.w	r3, [r9, #28]
34019004:	2200      	movs	r2, #0
34019006:	601a      	str	r2, [r3, #0]
34019008:	1e2b      	subs	r3, r5, #0
3401900a:	bfb7      	itett	lt
3401900c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
34019010:	2300      	movge	r3, #0
34019012:	2201      	movlt	r2, #1
34019014:	9303      	strlt	r3, [sp, #12]
34019016:	bfac      	ite	ge
34019018:	6033      	strge	r3, [r6, #0]
3401901a:	6032      	strlt	r2, [r6, #0]
3401901c:	4b90      	ldr	r3, [pc, #576]	@ (34019260 <_dtoa_r+0x2b8>)
3401901e:	9e03      	ldr	r6, [sp, #12]
34019020:	43b3      	bics	r3, r6
34019022:	d110      	bne.n	34019046 <_dtoa_r+0x9e>
34019024:	f242 730f 	movw	r3, #9999	@ 0x270f
34019028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401902a:	6013      	str	r3, [r2, #0]
3401902c:	f3c6 0313 	ubfx	r3, r6, #0, #20
34019030:	4323      	orrs	r3, r4
34019032:	f000 84e6 	beq.w	34019a02 <_dtoa_r+0xa5a>
34019036:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34019038:	4f8a      	ldr	r7, [pc, #552]	@ (34019264 <_dtoa_r+0x2bc>)
3401903a:	2b00      	cmp	r3, #0
3401903c:	f000 84e8 	beq.w	34019a10 <_dtoa_r+0xa68>
34019040:	1cfb      	adds	r3, r7, #3
34019042:	f000 bce3 	b.w	34019a0c <_dtoa_r+0xa64>
34019046:	ed9d 8b02 	vldr	d8, [sp, #8]
3401904a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019052:	d10a      	bne.n	3401906a <_dtoa_r+0xc2>
34019054:	2301      	movs	r3, #1
34019056:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34019058:	6013      	str	r3, [r2, #0]
3401905a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401905c:	b113      	cbz	r3, 34019064 <_dtoa_r+0xbc>
3401905e:	4b82      	ldr	r3, [pc, #520]	@ (34019268 <_dtoa_r+0x2c0>)
34019060:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
34019062:	6013      	str	r3, [r2, #0]
34019064:	4f81      	ldr	r7, [pc, #516]	@ (3401926c <_dtoa_r+0x2c4>)
34019066:	f000 bcd3 	b.w	34019a10 <_dtoa_r+0xa68>
3401906a:	aa0e      	add	r2, sp, #56	@ 0x38
3401906c:	eeb0 0b48 	vmov.f64	d0, d8
34019070:	a90f      	add	r1, sp, #60	@ 0x3c
34019072:	4648      	mov	r0, r9
34019074:	f001 f86a 	bl	3401a14c <__d2b>
34019078:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401907c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401907e:	9001      	str	r0, [sp, #4]
34019080:	2b00      	cmp	r3, #0
34019082:	d045      	beq.n	34019110 <_dtoa_r+0x168>
34019084:	ee18 1a90 	vmov	r1, s17
34019088:	eeb0 7b48 	vmov.f64	d7, d8
3401908c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
34019090:	2500      	movs	r5, #0
34019092:	f3c1 0113 	ubfx	r1, r1, #0, #20
34019096:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401909a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401909e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
340190a2:	ee07 1a90 	vmov	s15, r1
340190a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 34019240 <_dtoa_r+0x298>
340190aa:	ee37 7b46 	vsub.f64	d7, d7, d6
340190ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 34019248 <_dtoa_r+0x2a0>
340190b2:	eea7 6b05 	vfma.f64	d6, d7, d5
340190b6:	ee07 3a90 	vmov	s15, r3
340190ba:	eeb8 4be7 	vcvt.f64.s32	d4, s15
340190be:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 34019250 <_dtoa_r+0x2a8>
340190c2:	eeb0 7b46 	vmov.f64	d7, d6
340190c6:	eea4 7b05 	vfma.f64	d7, d4, d5
340190ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
340190ce:	eefd 6bc7 	vcvt.s32.f64	s13, d7
340190d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340190d6:	ee16 8a90 	vmov	r8, s13
340190da:	d508      	bpl.n	340190ee <_dtoa_r+0x146>
340190dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
340190e0:	eeb4 6b47 	vcmp.f64	d6, d7
340190e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340190e8:	bf18      	it	ne
340190ea:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
340190ee:	f1b8 0f16 	cmp.w	r8, #22
340190f2:	d82d      	bhi.n	34019150 <_dtoa_r+0x1a8>
340190f4:	495e      	ldr	r1, [pc, #376]	@ (34019270 <_dtoa_r+0x2c8>)
340190f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
340190fa:	ed91 7b00 	vldr	d7, [r1]
340190fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
34019102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019106:	d501      	bpl.n	3401910c <_dtoa_r+0x164>
34019108:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
3401910c:	2100      	movs	r1, #0
3401910e:	e020      	b.n	34019152 <_dtoa_r+0x1aa>
34019110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34019112:	2501      	movs	r5, #1
34019114:	4413      	add	r3, r2
34019116:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401911a:	2920      	cmp	r1, #32
3401911c:	bfc9      	itett	gt
3401911e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
34019122:	f1c1 0120 	rsble	r1, r1, #32
34019126:	408e      	lslgt	r6, r1
34019128:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401912c:	bfd8      	it	le
3401912e:	fa04 f101 	lslle.w	r1, r4, r1
34019132:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
34019136:	bfc4      	itt	gt
34019138:	fa24 f101 	lsrgt.w	r1, r4, r1
3401913c:	4331      	orrgt	r1, r6
3401913e:	ee07 1a90 	vmov	s15, r1
34019142:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34019146:	ee17 1a90 	vmov	r1, s15
3401914a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401914e:	e7a6      	b.n	3401909e <_dtoa_r+0xf6>
34019150:	2101      	movs	r1, #1
34019152:	1ad2      	subs	r2, r2, r3
34019154:	910c      	str	r1, [sp, #48]	@ 0x30
34019156:	1e53      	subs	r3, r2, #1
34019158:	9306      	str	r3, [sp, #24]
3401915a:	bf49      	itett	mi
3401915c:	f1c2 0301 	rsbmi	r3, r2, #1
34019160:	2300      	movpl	r3, #0
34019162:	9304      	strmi	r3, [sp, #16]
34019164:	2300      	movmi	r3, #0
34019166:	bf54      	ite	pl
34019168:	9304      	strpl	r3, [sp, #16]
3401916a:	9306      	strmi	r3, [sp, #24]
3401916c:	f1b8 0f00 	cmp.w	r8, #0
34019170:	db16      	blt.n	340191a0 <_dtoa_r+0x1f8>
34019172:	9b06      	ldr	r3, [sp, #24]
34019174:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
34019178:	4443      	add	r3, r8
3401917a:	9306      	str	r3, [sp, #24]
3401917c:	2300      	movs	r3, #0
3401917e:	9a07      	ldr	r2, [sp, #28]
34019180:	2a09      	cmp	r2, #9
34019182:	d843      	bhi.n	3401920c <_dtoa_r+0x264>
34019184:	2a05      	cmp	r2, #5
34019186:	bfc5      	ittet	gt
34019188:	3a04      	subgt	r2, #4
3401918a:	2400      	movgt	r4, #0
3401918c:	2401      	movle	r4, #1
3401918e:	9207      	strgt	r2, [sp, #28]
34019190:	9a07      	ldr	r2, [sp, #28]
34019192:	3a02      	subs	r2, #2
34019194:	2a03      	cmp	r2, #3
34019196:	d844      	bhi.n	34019222 <_dtoa_r+0x27a>
34019198:	e8df f002 	tbb	[pc, r2]
3401919c:	0b173634 	.word	0x0b173634
340191a0:	9b04      	ldr	r3, [sp, #16]
340191a2:	2200      	movs	r2, #0
340191a4:	eba3 0308 	sub.w	r3, r3, r8
340191a8:	920a      	str	r2, [sp, #40]	@ 0x28
340191aa:	9304      	str	r3, [sp, #16]
340191ac:	f1c8 0300 	rsb	r3, r8, #0
340191b0:	e7e5      	b.n	3401917e <_dtoa_r+0x1d6>
340191b2:	2201      	movs	r2, #1
340191b4:	9208      	str	r2, [sp, #32]
340191b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340191b8:	eb08 0b02 	add.w	fp, r8, r2
340191bc:	f10b 0a01 	add.w	sl, fp, #1
340191c0:	4652      	mov	r2, sl
340191c2:	2a01      	cmp	r2, #1
340191c4:	bfb8      	it	lt
340191c6:	2201      	movlt	r2, #1
340191c8:	e006      	b.n	340191d8 <_dtoa_r+0x230>
340191ca:	2201      	movs	r2, #1
340191cc:	9208      	str	r2, [sp, #32]
340191ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340191d0:	2a00      	cmp	r2, #0
340191d2:	dd29      	ble.n	34019228 <_dtoa_r+0x280>
340191d4:	4693      	mov	fp, r2
340191d6:	4692      	mov	sl, r2
340191d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
340191dc:	2100      	movs	r1, #0
340191de:	2004      	movs	r0, #4
340191e0:	f100 0614 	add.w	r6, r0, #20
340191e4:	4296      	cmp	r6, r2
340191e6:	d926      	bls.n	34019236 <_dtoa_r+0x28e>
340191e8:	6079      	str	r1, [r7, #4]
340191ea:	4648      	mov	r0, r9
340191ec:	9305      	str	r3, [sp, #20]
340191ee:	f000 fc83 	bl	34019af8 <_Balloc>
340191f2:	9b05      	ldr	r3, [sp, #20]
340191f4:	4607      	mov	r7, r0
340191f6:	2800      	cmp	r0, #0
340191f8:	d13e      	bne.n	34019278 <_dtoa_r+0x2d0>
340191fa:	4b1e      	ldr	r3, [pc, #120]	@ (34019274 <_dtoa_r+0x2cc>)
340191fc:	4602      	mov	r2, r0
340191fe:	f240 11af 	movw	r1, #431	@ 0x1af
34019202:	e6ea      	b.n	34018fda <_dtoa_r+0x32>
34019204:	2200      	movs	r2, #0
34019206:	e7e1      	b.n	340191cc <_dtoa_r+0x224>
34019208:	2200      	movs	r2, #0
3401920a:	e7d3      	b.n	340191b4 <_dtoa_r+0x20c>
3401920c:	2401      	movs	r4, #1
3401920e:	2200      	movs	r2, #0
34019210:	e9cd 2407 	strd	r2, r4, [sp, #28]
34019214:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
34019218:	2100      	movs	r1, #0
3401921a:	2212      	movs	r2, #18
3401921c:	46da      	mov	sl, fp
3401921e:	9109      	str	r1, [sp, #36]	@ 0x24
34019220:	e7da      	b.n	340191d8 <_dtoa_r+0x230>
34019222:	2201      	movs	r2, #1
34019224:	9208      	str	r2, [sp, #32]
34019226:	e7f5      	b.n	34019214 <_dtoa_r+0x26c>
34019228:	f04f 0b01 	mov.w	fp, #1
3401922c:	46da      	mov	sl, fp
3401922e:	465a      	mov	r2, fp
34019230:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
34019234:	e7d0      	b.n	340191d8 <_dtoa_r+0x230>
34019236:	3101      	adds	r1, #1
34019238:	0040      	lsls	r0, r0, #1
3401923a:	e7d1      	b.n	340191e0 <_dtoa_r+0x238>
3401923c:	f3af 8000 	nop.w
34019240:	636f4361 	.word	0x636f4361
34019244:	3fd287a7 	.word	0x3fd287a7
34019248:	8b60c8b3 	.word	0x8b60c8b3
3401924c:	3fc68a28 	.word	0x3fc68a28
34019250:	509f79fb 	.word	0x509f79fb
34019254:	3fd34413 	.word	0x3fd34413
34019258:	3401bb23 	.word	0x3401bb23
3401925c:	3401bb3a 	.word	0x3401bb3a
34019260:	7ff00000 	.word	0x7ff00000
34019264:	3401bb1f 	.word	0x3401bb1f
34019268:	3401baf3 	.word	0x3401baf3
3401926c:	3401baf2 	.word	0x3401baf2
34019270:	3401bc50 	.word	0x3401bc50
34019274:	3401bb92 	.word	0x3401bb92
34019278:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401927c:	f1ba 0f0e 	cmp.w	sl, #14
34019280:	6010      	str	r0, [r2, #0]
34019282:	d86e      	bhi.n	34019362 <_dtoa_r+0x3ba>
34019284:	2c00      	cmp	r4, #0
34019286:	d06c      	beq.n	34019362 <_dtoa_r+0x3ba>
34019288:	f1b8 0f00 	cmp.w	r8, #0
3401928c:	f340 80b4 	ble.w	340193f8 <_dtoa_r+0x450>
34019290:	f008 010f 	and.w	r1, r8, #15
34019294:	4ac7      	ldr	r2, [pc, #796]	@ (340195b4 <_dtoa_r+0x60c>)
34019296:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401929a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401929e:	ea4f 1128 	mov.w	r1, r8, asr #4
340192a2:	ed92 7b00 	vldr	d7, [r2]
340192a6:	f000 809b 	beq.w	340193e0 <_dtoa_r+0x438>
340192aa:	4ac3      	ldr	r2, [pc, #780]	@ (340195b8 <_dtoa_r+0x610>)
340192ac:	f001 010f 	and.w	r1, r1, #15
340192b0:	ed92 6b08 	vldr	d6, [r2, #32]
340192b4:	2203      	movs	r2, #3
340192b6:	ee88 6b06 	vdiv.f64	d6, d8, d6
340192ba:	ed8d 6b02 	vstr	d6, [sp, #8]
340192be:	48be      	ldr	r0, [pc, #760]	@ (340195b8 <_dtoa_r+0x610>)
340192c0:	2900      	cmp	r1, #0
340192c2:	f040 808f 	bne.w	340193e4 <_dtoa_r+0x43c>
340192c6:	ed9d 6b02 	vldr	d6, [sp, #8]
340192ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
340192ce:	ed8d 7b02 	vstr	d7, [sp, #8]
340192d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
340192d4:	ed9d 7b02 	vldr	d7, [sp, #8]
340192d8:	2900      	cmp	r1, #0
340192da:	f000 80b3 	beq.w	34019444 <_dtoa_r+0x49c>
340192de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
340192e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
340192e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340192ea:	f140 80ab 	bpl.w	34019444 <_dtoa_r+0x49c>
340192ee:	f1ba 0f00 	cmp.w	sl, #0
340192f2:	f000 80a7 	beq.w	34019444 <_dtoa_r+0x49c>
340192f6:	f1bb 0f00 	cmp.w	fp, #0
340192fa:	dd30      	ble.n	3401935e <_dtoa_r+0x3b6>
340192fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
34019300:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
34019304:	3201      	adds	r2, #1
34019306:	465c      	mov	r4, fp
34019308:	9105      	str	r1, [sp, #20]
3401930a:	ee27 7b06 	vmul.f64	d7, d7, d6
3401930e:	ed8d 7b02 	vstr	d7, [sp, #8]
34019312:	ee07 2a90 	vmov	s15, r2
34019316:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401931a:	ed9d 6b02 	vldr	d6, [sp, #8]
3401931e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34019322:	eea7 5b06 	vfma.f64	d5, d7, d6
34019326:	ee15 2a90 	vmov	r2, s11
3401932a:	ec51 0b15 	vmov	r0, r1, d5
3401932e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
34019332:	2c00      	cmp	r4, #0
34019334:	f040 808a 	bne.w	3401944c <_dtoa_r+0x4a4>
34019338:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401933c:	ee36 6b47 	vsub.f64	d6, d6, d7
34019340:	ec41 0b17 	vmov	d7, r0, r1
34019344:	eeb4 6bc7 	vcmpe.f64	d6, d7
34019348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401934c:	f300 826a 	bgt.w	34019824 <_dtoa_r+0x87c>
34019350:	eeb1 7b47 	vneg.f64	d7, d7
34019354:	eeb4 6bc7 	vcmpe.f64	d6, d7
34019358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401935c:	d423      	bmi.n	340193a6 <_dtoa_r+0x3fe>
3401935e:	ed8d 8b02 	vstr	d8, [sp, #8]
34019362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
34019364:	2a00      	cmp	r2, #0
34019366:	f2c0 8129 	blt.w	340195bc <_dtoa_r+0x614>
3401936a:	f1b8 0f0e 	cmp.w	r8, #14
3401936e:	f300 8125 	bgt.w	340195bc <_dtoa_r+0x614>
34019372:	4b90      	ldr	r3, [pc, #576]	@ (340195b4 <_dtoa_r+0x60c>)
34019374:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
34019378:	ed93 6b00 	vldr	d6, [r3]
3401937c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401937e:	2b00      	cmp	r3, #0
34019380:	f280 80c8 	bge.w	34019514 <_dtoa_r+0x56c>
34019384:	f1ba 0f00 	cmp.w	sl, #0
34019388:	f300 80c4 	bgt.w	34019514 <_dtoa_r+0x56c>
3401938c:	d10b      	bne.n	340193a6 <_dtoa_r+0x3fe>
3401938e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
34019392:	ee26 6b07 	vmul.f64	d6, d6, d7
34019396:	ed9d 7b02 	vldr	d7, [sp, #8]
3401939a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340193a2:	f2c0 823c 	blt.w	3401981e <_dtoa_r+0x876>
340193a6:	2400      	movs	r4, #0
340193a8:	4625      	mov	r5, r4
340193aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340193ac:	463e      	mov	r6, r7
340193ae:	43db      	mvns	r3, r3
340193b0:	9305      	str	r3, [sp, #20]
340193b2:	f04f 0800 	mov.w	r8, #0
340193b6:	4621      	mov	r1, r4
340193b8:	4648      	mov	r0, r9
340193ba:	f000 fbdd 	bl	34019b78 <_Bfree>
340193be:	2d00      	cmp	r5, #0
340193c0:	f000 80a2 	beq.w	34019508 <_dtoa_r+0x560>
340193c4:	f1b8 0f00 	cmp.w	r8, #0
340193c8:	d005      	beq.n	340193d6 <_dtoa_r+0x42e>
340193ca:	45a8      	cmp	r8, r5
340193cc:	d003      	beq.n	340193d6 <_dtoa_r+0x42e>
340193ce:	4641      	mov	r1, r8
340193d0:	4648      	mov	r0, r9
340193d2:	f000 fbd1 	bl	34019b78 <_Bfree>
340193d6:	4629      	mov	r1, r5
340193d8:	4648      	mov	r0, r9
340193da:	f000 fbcd 	bl	34019b78 <_Bfree>
340193de:	e093      	b.n	34019508 <_dtoa_r+0x560>
340193e0:	2202      	movs	r2, #2
340193e2:	e76c      	b.n	340192be <_dtoa_r+0x316>
340193e4:	07cc      	lsls	r4, r1, #31
340193e6:	d504      	bpl.n	340193f2 <_dtoa_r+0x44a>
340193e8:	3201      	adds	r2, #1
340193ea:	ed90 6b00 	vldr	d6, [r0]
340193ee:	ee27 7b06 	vmul.f64	d7, d7, d6
340193f2:	1049      	asrs	r1, r1, #1
340193f4:	3008      	adds	r0, #8
340193f6:	e763      	b.n	340192c0 <_dtoa_r+0x318>
340193f8:	d022      	beq.n	34019440 <_dtoa_r+0x498>
340193fa:	f1c8 0100 	rsb	r1, r8, #0
340193fe:	4a6d      	ldr	r2, [pc, #436]	@ (340195b4 <_dtoa_r+0x60c>)
34019400:	2400      	movs	r4, #0
34019402:	f001 000f 	and.w	r0, r1, #15
34019406:	1109      	asrs	r1, r1, #4
34019408:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401940c:	486a      	ldr	r0, [pc, #424]	@ (340195b8 <_dtoa_r+0x610>)
3401940e:	ed92 7b00 	vldr	d7, [r2]
34019412:	2202      	movs	r2, #2
34019414:	ee28 7b07 	vmul.f64	d7, d8, d7
34019418:	ed8d 7b02 	vstr	d7, [sp, #8]
3401941c:	b929      	cbnz	r1, 3401942a <_dtoa_r+0x482>
3401941e:	2c00      	cmp	r4, #0
34019420:	f43f af57 	beq.w	340192d2 <_dtoa_r+0x32a>
34019424:	ed8d 7b02 	vstr	d7, [sp, #8]
34019428:	e753      	b.n	340192d2 <_dtoa_r+0x32a>
3401942a:	07ce      	lsls	r6, r1, #31
3401942c:	d505      	bpl.n	3401943a <_dtoa_r+0x492>
3401942e:	3201      	adds	r2, #1
34019430:	2401      	movs	r4, #1
34019432:	ed90 6b00 	vldr	d6, [r0]
34019436:	ee27 7b06 	vmul.f64	d7, d7, d6
3401943a:	1049      	asrs	r1, r1, #1
3401943c:	3008      	adds	r0, #8
3401943e:	e7ed      	b.n	3401941c <_dtoa_r+0x474>
34019440:	2202      	movs	r2, #2
34019442:	e746      	b.n	340192d2 <_dtoa_r+0x32a>
34019444:	4654      	mov	r4, sl
34019446:	f8cd 8014 	str.w	r8, [sp, #20]
3401944a:	e762      	b.n	34019312 <_dtoa_r+0x36a>
3401944c:	4a59      	ldr	r2, [pc, #356]	@ (340195b4 <_dtoa_r+0x60c>)
3401944e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
34019452:	443c      	add	r4, r7
34019454:	ed12 4b02 	vldr	d4, [r2, #-8]
34019458:	9a08      	ldr	r2, [sp, #32]
3401945a:	ec41 0b17 	vmov	d7, r0, r1
3401945e:	b34a      	cbz	r2, 340194b4 <_dtoa_r+0x50c>
34019460:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
34019464:	463e      	mov	r6, r7
34019466:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401946a:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401946e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
34019472:	ee35 7b47 	vsub.f64	d7, d5, d7
34019476:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401947a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401947e:	ee14 2a90 	vmov	r2, s9
34019482:	3230      	adds	r2, #48	@ 0x30
34019484:	ee36 6b45 	vsub.f64	d6, d6, d5
34019488:	f806 2b01 	strb.w	r2, [r6], #1
3401948c:	eeb4 6bc7 	vcmpe.f64	d6, d7
34019490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019494:	d438      	bmi.n	34019508 <_dtoa_r+0x560>
34019496:	ee32 5b46 	vsub.f64	d5, d2, d6
3401949a:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340194a2:	d46e      	bmi.n	34019582 <_dtoa_r+0x5da>
340194a4:	42a6      	cmp	r6, r4
340194a6:	f43f af5a 	beq.w	3401935e <_dtoa_r+0x3b6>
340194aa:	ee27 7b03 	vmul.f64	d7, d7, d3
340194ae:	ee26 6b03 	vmul.f64	d6, d6, d3
340194b2:	e7e0      	b.n	34019476 <_dtoa_r+0x4ce>
340194b4:	ee27 7b04 	vmul.f64	d7, d7, d4
340194b8:	4621      	mov	r1, r4
340194ba:	463e      	mov	r6, r7
340194bc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
340194c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
340194c4:	ee14 2a90 	vmov	r2, s9
340194c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
340194cc:	3230      	adds	r2, #48	@ 0x30
340194ce:	ee36 6b45 	vsub.f64	d6, d6, d5
340194d2:	f806 2b01 	strb.w	r2, [r6], #1
340194d6:	42a6      	cmp	r6, r4
340194d8:	d119      	bne.n	3401950e <_dtoa_r+0x566>
340194da:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
340194de:	ee37 4b05 	vadd.f64	d4, d7, d5
340194e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
340194e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340194ea:	dc4a      	bgt.n	34019582 <_dtoa_r+0x5da>
340194ec:	ee35 5b47 	vsub.f64	d5, d5, d7
340194f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
340194f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340194f8:	f57f af31 	bpl.w	3401935e <_dtoa_r+0x3b6>
340194fc:	460e      	mov	r6, r1
340194fe:	3901      	subs	r1, #1
34019500:	f816 3c01 	ldrb.w	r3, [r6, #-1]
34019504:	2b30      	cmp	r3, #48	@ 0x30
34019506:	d0f9      	beq.n	340194fc <_dtoa_r+0x554>
34019508:	f8dd 8014 	ldr.w	r8, [sp, #20]
3401950c:	e027      	b.n	3401955e <_dtoa_r+0x5b6>
3401950e:	ee26 6b03 	vmul.f64	d6, d6, d3
34019512:	e7d5      	b.n	340194c0 <_dtoa_r+0x518>
34019514:	ed9d 7b02 	vldr	d7, [sp, #8]
34019518:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401951c:	463e      	mov	r6, r7
3401951e:	ee87 5b06 	vdiv.f64	d5, d7, d6
34019522:	eebd 5bc5 	vcvt.s32.f64	s10, d5
34019526:	ee15 3a10 	vmov	r3, s10
3401952a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401952e:	3330      	adds	r3, #48	@ 0x30
34019530:	eea3 7b46 	vfms.f64	d7, d3, d6
34019534:	f806 3b01 	strb.w	r3, [r6], #1
34019538:	1bf3      	subs	r3, r6, r7
3401953a:	459a      	cmp	sl, r3
3401953c:	d132      	bne.n	340195a4 <_dtoa_r+0x5fc>
3401953e:	ee37 7b07 	vadd.f64	d7, d7, d7
34019542:	eeb4 7bc6 	vcmpe.f64	d7, d6
34019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401954a:	dc18      	bgt.n	3401957e <_dtoa_r+0x5d6>
3401954c:	eeb4 7b46 	vcmp.f64	d7, d6
34019550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34019554:	d103      	bne.n	3401955e <_dtoa_r+0x5b6>
34019556:	ee15 3a10 	vmov	r3, s10
3401955a:	07db      	lsls	r3, r3, #31
3401955c:	d40f      	bmi.n	3401957e <_dtoa_r+0x5d6>
3401955e:	9901      	ldr	r1, [sp, #4]
34019560:	4648      	mov	r0, r9
34019562:	f000 fb09 	bl	34019b78 <_Bfree>
34019566:	2300      	movs	r3, #0
34019568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401956a:	7033      	strb	r3, [r6, #0]
3401956c:	f108 0301 	add.w	r3, r8, #1
34019570:	6013      	str	r3, [r2, #0]
34019572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34019574:	2b00      	cmp	r3, #0
34019576:	f000 824b 	beq.w	34019a10 <_dtoa_r+0xa68>
3401957a:	601e      	str	r6, [r3, #0]
3401957c:	e248      	b.n	34019a10 <_dtoa_r+0xa68>
3401957e:	f8cd 8014 	str.w	r8, [sp, #20]
34019582:	4633      	mov	r3, r6
34019584:	461e      	mov	r6, r3
34019586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401958a:	2a39      	cmp	r2, #57	@ 0x39
3401958c:	d106      	bne.n	3401959c <_dtoa_r+0x5f4>
3401958e:	429f      	cmp	r7, r3
34019590:	d1f8      	bne.n	34019584 <_dtoa_r+0x5dc>
34019592:	9a05      	ldr	r2, [sp, #20]
34019594:	3201      	adds	r2, #1
34019596:	9205      	str	r2, [sp, #20]
34019598:	2230      	movs	r2, #48	@ 0x30
3401959a:	703a      	strb	r2, [r7, #0]
3401959c:	781a      	ldrb	r2, [r3, #0]
3401959e:	3201      	adds	r2, #1
340195a0:	701a      	strb	r2, [r3, #0]
340195a2:	e7b1      	b.n	34019508 <_dtoa_r+0x560>
340195a4:	ee27 7b04 	vmul.f64	d7, d7, d4
340195a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
340195ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340195b0:	d1b5      	bne.n	3401951e <_dtoa_r+0x576>
340195b2:	e7d4      	b.n	3401955e <_dtoa_r+0x5b6>
340195b4:	3401bc50 	.word	0x3401bc50
340195b8:	3401bc28 	.word	0x3401bc28
340195bc:	9908      	ldr	r1, [sp, #32]
340195be:	2900      	cmp	r1, #0
340195c0:	f000 80e9 	beq.w	34019796 <_dtoa_r+0x7ee>
340195c4:	9907      	ldr	r1, [sp, #28]
340195c6:	2901      	cmp	r1, #1
340195c8:	f300 80cb 	bgt.w	34019762 <_dtoa_r+0x7ba>
340195cc:	2d00      	cmp	r5, #0
340195ce:	f000 80c4 	beq.w	3401975a <_dtoa_r+0x7b2>
340195d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
340195d6:	461c      	mov	r4, r3
340195d8:	9e04      	ldr	r6, [sp, #16]
340195da:	9305      	str	r3, [sp, #20]
340195dc:	2101      	movs	r1, #1
340195de:	9b04      	ldr	r3, [sp, #16]
340195e0:	4648      	mov	r0, r9
340195e2:	4413      	add	r3, r2
340195e4:	9304      	str	r3, [sp, #16]
340195e6:	9b06      	ldr	r3, [sp, #24]
340195e8:	4413      	add	r3, r2
340195ea:	9306      	str	r3, [sp, #24]
340195ec:	f000 fb7a 	bl	34019ce4 <__i2b>
340195f0:	9b05      	ldr	r3, [sp, #20]
340195f2:	4605      	mov	r5, r0
340195f4:	b166      	cbz	r6, 34019610 <_dtoa_r+0x668>
340195f6:	9a06      	ldr	r2, [sp, #24]
340195f8:	2a00      	cmp	r2, #0
340195fa:	dd09      	ble.n	34019610 <_dtoa_r+0x668>
340195fc:	42b2      	cmp	r2, r6
340195fe:	9904      	ldr	r1, [sp, #16]
34019600:	bfa8      	it	ge
34019602:	4632      	movge	r2, r6
34019604:	1a89      	subs	r1, r1, r2
34019606:	1ab6      	subs	r6, r6, r2
34019608:	9104      	str	r1, [sp, #16]
3401960a:	9906      	ldr	r1, [sp, #24]
3401960c:	1a8a      	subs	r2, r1, r2
3401960e:	9206      	str	r2, [sp, #24]
34019610:	b30b      	cbz	r3, 34019656 <_dtoa_r+0x6ae>
34019612:	9a08      	ldr	r2, [sp, #32]
34019614:	2a00      	cmp	r2, #0
34019616:	f000 80c5 	beq.w	340197a4 <_dtoa_r+0x7fc>
3401961a:	2c00      	cmp	r4, #0
3401961c:	f000 80bf 	beq.w	3401979e <_dtoa_r+0x7f6>
34019620:	4629      	mov	r1, r5
34019622:	4622      	mov	r2, r4
34019624:	4648      	mov	r0, r9
34019626:	930b      	str	r3, [sp, #44]	@ 0x2c
34019628:	f000 fc16 	bl	34019e58 <__pow5mult>
3401962c:	9a01      	ldr	r2, [sp, #4]
3401962e:	4601      	mov	r1, r0
34019630:	4605      	mov	r5, r0
34019632:	4648      	mov	r0, r9
34019634:	f000 fb6c 	bl	34019d10 <__multiply>
34019638:	9901      	ldr	r1, [sp, #4]
3401963a:	9005      	str	r0, [sp, #20]
3401963c:	4648      	mov	r0, r9
3401963e:	f000 fa9b 	bl	34019b78 <_Bfree>
34019642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34019644:	1b1b      	subs	r3, r3, r4
34019646:	f000 80b0 	beq.w	340197aa <_dtoa_r+0x802>
3401964a:	461a      	mov	r2, r3
3401964c:	9905      	ldr	r1, [sp, #20]
3401964e:	4648      	mov	r0, r9
34019650:	f000 fc02 	bl	34019e58 <__pow5mult>
34019654:	9001      	str	r0, [sp, #4]
34019656:	2101      	movs	r1, #1
34019658:	4648      	mov	r0, r9
3401965a:	f000 fb43 	bl	34019ce4 <__i2b>
3401965e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34019660:	4604      	mov	r4, r0
34019662:	2b00      	cmp	r3, #0
34019664:	f000 81da 	beq.w	34019a1c <_dtoa_r+0xa74>
34019668:	461a      	mov	r2, r3
3401966a:	4601      	mov	r1, r0
3401966c:	4648      	mov	r0, r9
3401966e:	f000 fbf3 	bl	34019e58 <__pow5mult>
34019672:	9b07      	ldr	r3, [sp, #28]
34019674:	4604      	mov	r4, r0
34019676:	2b01      	cmp	r3, #1
34019678:	f300 80a0 	bgt.w	340197bc <_dtoa_r+0x814>
3401967c:	9b02      	ldr	r3, [sp, #8]
3401967e:	2b00      	cmp	r3, #0
34019680:	f040 8096 	bne.w	340197b0 <_dtoa_r+0x808>
34019684:	9b03      	ldr	r3, [sp, #12]
34019686:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401968a:	2a00      	cmp	r2, #0
3401968c:	f040 8092 	bne.w	340197b4 <_dtoa_r+0x80c>
34019690:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34019694:	0d12      	lsrs	r2, r2, #20
34019696:	0512      	lsls	r2, r2, #20
34019698:	2a00      	cmp	r2, #0
3401969a:	f000 808d 	beq.w	340197b8 <_dtoa_r+0x810>
3401969e:	9b04      	ldr	r3, [sp, #16]
340196a0:	3301      	adds	r3, #1
340196a2:	9304      	str	r3, [sp, #16]
340196a4:	9b06      	ldr	r3, [sp, #24]
340196a6:	3301      	adds	r3, #1
340196a8:	9306      	str	r3, [sp, #24]
340196aa:	2301      	movs	r3, #1
340196ac:	930b      	str	r3, [sp, #44]	@ 0x2c
340196ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
340196b0:	2b00      	cmp	r3, #0
340196b2:	f000 81b9 	beq.w	34019a28 <_dtoa_r+0xa80>
340196b6:	6922      	ldr	r2, [r4, #16]
340196b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
340196bc:	6910      	ldr	r0, [r2, #16]
340196be:	f000 fac5 	bl	34019c4c <__hi0bits>
340196c2:	f1c0 0020 	rsb	r0, r0, #32
340196c6:	9b06      	ldr	r3, [sp, #24]
340196c8:	4418      	add	r0, r3
340196ca:	f010 001f 	ands.w	r0, r0, #31
340196ce:	f000 8081 	beq.w	340197d4 <_dtoa_r+0x82c>
340196d2:	f1c0 0220 	rsb	r2, r0, #32
340196d6:	2a04      	cmp	r2, #4
340196d8:	dd73      	ble.n	340197c2 <_dtoa_r+0x81a>
340196da:	f1c0 001c 	rsb	r0, r0, #28
340196de:	9b04      	ldr	r3, [sp, #16]
340196e0:	4403      	add	r3, r0
340196e2:	4406      	add	r6, r0
340196e4:	9304      	str	r3, [sp, #16]
340196e6:	9b06      	ldr	r3, [sp, #24]
340196e8:	4403      	add	r3, r0
340196ea:	9306      	str	r3, [sp, #24]
340196ec:	9b04      	ldr	r3, [sp, #16]
340196ee:	2b00      	cmp	r3, #0
340196f0:	dd05      	ble.n	340196fe <_dtoa_r+0x756>
340196f2:	461a      	mov	r2, r3
340196f4:	9901      	ldr	r1, [sp, #4]
340196f6:	4648      	mov	r0, r9
340196f8:	f000 fc08 	bl	34019f0c <__lshift>
340196fc:	9001      	str	r0, [sp, #4]
340196fe:	9b06      	ldr	r3, [sp, #24]
34019700:	2b00      	cmp	r3, #0
34019702:	dd05      	ble.n	34019710 <_dtoa_r+0x768>
34019704:	4621      	mov	r1, r4
34019706:	461a      	mov	r2, r3
34019708:	4648      	mov	r0, r9
3401970a:	f000 fbff 	bl	34019f0c <__lshift>
3401970e:	4604      	mov	r4, r0
34019710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34019712:	2b00      	cmp	r3, #0
34019714:	d060      	beq.n	340197d8 <_dtoa_r+0x830>
34019716:	4621      	mov	r1, r4
34019718:	9801      	ldr	r0, [sp, #4]
3401971a:	f000 fc63 	bl	34019fe4 <__mcmp>
3401971e:	2800      	cmp	r0, #0
34019720:	da5a      	bge.n	340197d8 <_dtoa_r+0x830>
34019722:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
34019726:	220a      	movs	r2, #10
34019728:	9901      	ldr	r1, [sp, #4]
3401972a:	4648      	mov	r0, r9
3401972c:	9305      	str	r3, [sp, #20]
3401972e:	2300      	movs	r3, #0
34019730:	f000 fa44 	bl	34019bbc <__multadd>
34019734:	9b08      	ldr	r3, [sp, #32]
34019736:	9001      	str	r0, [sp, #4]
34019738:	2b00      	cmp	r3, #0
3401973a:	f000 8177 	beq.w	34019a2c <_dtoa_r+0xa84>
3401973e:	4629      	mov	r1, r5
34019740:	2300      	movs	r3, #0
34019742:	220a      	movs	r2, #10
34019744:	4648      	mov	r0, r9
34019746:	f000 fa39 	bl	34019bbc <__multadd>
3401974a:	f1bb 0f00 	cmp.w	fp, #0
3401974e:	4605      	mov	r5, r0
34019750:	dc6e      	bgt.n	34019830 <_dtoa_r+0x888>
34019752:	9b07      	ldr	r3, [sp, #28]
34019754:	2b02      	cmp	r3, #2
34019756:	dc48      	bgt.n	340197ea <_dtoa_r+0x842>
34019758:	e06a      	b.n	34019830 <_dtoa_r+0x888>
3401975a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401975c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
34019760:	e739      	b.n	340195d6 <_dtoa_r+0x62e>
34019762:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
34019766:	42a3      	cmp	r3, r4
34019768:	db07      	blt.n	3401977a <_dtoa_r+0x7d2>
3401976a:	f1ba 0f00 	cmp.w	sl, #0
3401976e:	eba3 0404 	sub.w	r4, r3, r4
34019772:	db0b      	blt.n	3401978c <_dtoa_r+0x7e4>
34019774:	9e04      	ldr	r6, [sp, #16]
34019776:	4652      	mov	r2, sl
34019778:	e72f      	b.n	340195da <_dtoa_r+0x632>
3401977a:	1ae2      	subs	r2, r4, r3
3401977c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401977e:	9e04      	ldr	r6, [sp, #16]
34019780:	4413      	add	r3, r2
34019782:	4652      	mov	r2, sl
34019784:	930a      	str	r3, [sp, #40]	@ 0x28
34019786:	4623      	mov	r3, r4
34019788:	2400      	movs	r4, #0
3401978a:	e726      	b.n	340195da <_dtoa_r+0x632>
3401978c:	9a04      	ldr	r2, [sp, #16]
3401978e:	eba2 060a 	sub.w	r6, r2, sl
34019792:	2200      	movs	r2, #0
34019794:	e721      	b.n	340195da <_dtoa_r+0x632>
34019796:	461c      	mov	r4, r3
34019798:	9e04      	ldr	r6, [sp, #16]
3401979a:	9d08      	ldr	r5, [sp, #32]
3401979c:	e72a      	b.n	340195f4 <_dtoa_r+0x64c>
3401979e:	9a01      	ldr	r2, [sp, #4]
340197a0:	9205      	str	r2, [sp, #20]
340197a2:	e752      	b.n	3401964a <_dtoa_r+0x6a2>
340197a4:	461a      	mov	r2, r3
340197a6:	9901      	ldr	r1, [sp, #4]
340197a8:	e751      	b.n	3401964e <_dtoa_r+0x6a6>
340197aa:	9b05      	ldr	r3, [sp, #20]
340197ac:	9301      	str	r3, [sp, #4]
340197ae:	e752      	b.n	34019656 <_dtoa_r+0x6ae>
340197b0:	2300      	movs	r3, #0
340197b2:	e77b      	b.n	340196ac <_dtoa_r+0x704>
340197b4:	9b02      	ldr	r3, [sp, #8]
340197b6:	e779      	b.n	340196ac <_dtoa_r+0x704>
340197b8:	920b      	str	r2, [sp, #44]	@ 0x2c
340197ba:	e778      	b.n	340196ae <_dtoa_r+0x706>
340197bc:	2300      	movs	r3, #0
340197be:	930b      	str	r3, [sp, #44]	@ 0x2c
340197c0:	e779      	b.n	340196b6 <_dtoa_r+0x70e>
340197c2:	d093      	beq.n	340196ec <_dtoa_r+0x744>
340197c4:	321c      	adds	r2, #28
340197c6:	9b04      	ldr	r3, [sp, #16]
340197c8:	4413      	add	r3, r2
340197ca:	4416      	add	r6, r2
340197cc:	9304      	str	r3, [sp, #16]
340197ce:	9b06      	ldr	r3, [sp, #24]
340197d0:	4413      	add	r3, r2
340197d2:	e78a      	b.n	340196ea <_dtoa_r+0x742>
340197d4:	4602      	mov	r2, r0
340197d6:	e7f5      	b.n	340197c4 <_dtoa_r+0x81c>
340197d8:	f1ba 0f00 	cmp.w	sl, #0
340197dc:	46d3      	mov	fp, sl
340197de:	f8cd 8014 	str.w	r8, [sp, #20]
340197e2:	dc21      	bgt.n	34019828 <_dtoa_r+0x880>
340197e4:	9b07      	ldr	r3, [sp, #28]
340197e6:	2b02      	cmp	r3, #2
340197e8:	dd1e      	ble.n	34019828 <_dtoa_r+0x880>
340197ea:	f1bb 0f00 	cmp.w	fp, #0
340197ee:	f47f addc 	bne.w	340193aa <_dtoa_r+0x402>
340197f2:	4621      	mov	r1, r4
340197f4:	465b      	mov	r3, fp
340197f6:	2205      	movs	r2, #5
340197f8:	4648      	mov	r0, r9
340197fa:	f000 f9df 	bl	34019bbc <__multadd>
340197fe:	4601      	mov	r1, r0
34019800:	4604      	mov	r4, r0
34019802:	9801      	ldr	r0, [sp, #4]
34019804:	f000 fbee 	bl	34019fe4 <__mcmp>
34019808:	2800      	cmp	r0, #0
3401980a:	f77f adce 	ble.w	340193aa <_dtoa_r+0x402>
3401980e:	2331      	movs	r3, #49	@ 0x31
34019810:	463e      	mov	r6, r7
34019812:	f806 3b01 	strb.w	r3, [r6], #1
34019816:	9b05      	ldr	r3, [sp, #20]
34019818:	3301      	adds	r3, #1
3401981a:	9305      	str	r3, [sp, #20]
3401981c:	e5c9      	b.n	340193b2 <_dtoa_r+0x40a>
3401981e:	4654      	mov	r4, sl
34019820:	f8cd 8014 	str.w	r8, [sp, #20]
34019824:	4625      	mov	r5, r4
34019826:	e7f2      	b.n	3401980e <_dtoa_r+0x866>
34019828:	9b08      	ldr	r3, [sp, #32]
3401982a:	2b00      	cmp	r3, #0
3401982c:	f000 8102 	beq.w	34019a34 <_dtoa_r+0xa8c>
34019830:	2e00      	cmp	r6, #0
34019832:	dd05      	ble.n	34019840 <_dtoa_r+0x898>
34019834:	4629      	mov	r1, r5
34019836:	4632      	mov	r2, r6
34019838:	4648      	mov	r0, r9
3401983a:	f000 fb67 	bl	34019f0c <__lshift>
3401983e:	4605      	mov	r5, r0
34019840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34019842:	2b00      	cmp	r3, #0
34019844:	d058      	beq.n	340198f8 <_dtoa_r+0x950>
34019846:	6869      	ldr	r1, [r5, #4]
34019848:	4648      	mov	r0, r9
3401984a:	f000 f955 	bl	34019af8 <_Balloc>
3401984e:	4606      	mov	r6, r0
34019850:	b928      	cbnz	r0, 3401985e <_dtoa_r+0x8b6>
34019852:	4b82      	ldr	r3, [pc, #520]	@ (34019a5c <_dtoa_r+0xab4>)
34019854:	4602      	mov	r2, r0
34019856:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401985a:	f7ff bbbe 	b.w	34018fda <_dtoa_r+0x32>
3401985e:	692a      	ldr	r2, [r5, #16]
34019860:	f105 010c 	add.w	r1, r5, #12
34019864:	300c      	adds	r0, #12
34019866:	3202      	adds	r2, #2
34019868:	0092      	lsls	r2, r2, #2
3401986a:	f7ff fafc 	bl	34018e66 <memcpy>
3401986e:	2201      	movs	r2, #1
34019870:	4631      	mov	r1, r6
34019872:	4648      	mov	r0, r9
34019874:	f000 fb4a 	bl	34019f0c <__lshift>
34019878:	1c7b      	adds	r3, r7, #1
3401987a:	46a8      	mov	r8, r5
3401987c:	4605      	mov	r5, r0
3401987e:	9304      	str	r3, [sp, #16]
34019880:	eb07 030b 	add.w	r3, r7, fp
34019884:	9309      	str	r3, [sp, #36]	@ 0x24
34019886:	9b02      	ldr	r3, [sp, #8]
34019888:	f003 0301 	and.w	r3, r3, #1
3401988c:	9308      	str	r3, [sp, #32]
3401988e:	9b04      	ldr	r3, [sp, #16]
34019890:	4621      	mov	r1, r4
34019892:	9801      	ldr	r0, [sp, #4]
34019894:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
34019898:	f7ff faf9 	bl	34018e8e <quorem>
3401989c:	4641      	mov	r1, r8
3401989e:	9002      	str	r0, [sp, #8]
340198a0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
340198a4:	9801      	ldr	r0, [sp, #4]
340198a6:	f000 fb9d 	bl	34019fe4 <__mcmp>
340198aa:	462a      	mov	r2, r5
340198ac:	9006      	str	r0, [sp, #24]
340198ae:	4621      	mov	r1, r4
340198b0:	4648      	mov	r0, r9
340198b2:	f000 fbb3 	bl	3401a01c <__mdiff>
340198b6:	68c2      	ldr	r2, [r0, #12]
340198b8:	4606      	mov	r6, r0
340198ba:	b9fa      	cbnz	r2, 340198fc <_dtoa_r+0x954>
340198bc:	4601      	mov	r1, r0
340198be:	9801      	ldr	r0, [sp, #4]
340198c0:	f000 fb90 	bl	34019fe4 <__mcmp>
340198c4:	4602      	mov	r2, r0
340198c6:	4631      	mov	r1, r6
340198c8:	4648      	mov	r0, r9
340198ca:	920a      	str	r2, [sp, #40]	@ 0x28
340198cc:	f000 f954 	bl	34019b78 <_Bfree>
340198d0:	9b07      	ldr	r3, [sp, #28]
340198d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
340198d4:	9e04      	ldr	r6, [sp, #16]
340198d6:	ea42 0103 	orr.w	r1, r2, r3
340198da:	9b08      	ldr	r3, [sp, #32]
340198dc:	4319      	orrs	r1, r3
340198de:	d10f      	bne.n	34019900 <_dtoa_r+0x958>
340198e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
340198e4:	d028      	beq.n	34019938 <_dtoa_r+0x990>
340198e6:	9b06      	ldr	r3, [sp, #24]
340198e8:	2b00      	cmp	r3, #0
340198ea:	dd02      	ble.n	340198f2 <_dtoa_r+0x94a>
340198ec:	9b02      	ldr	r3, [sp, #8]
340198ee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
340198f2:	f88b a000 	strb.w	sl, [fp]
340198f6:	e55e      	b.n	340193b6 <_dtoa_r+0x40e>
340198f8:	4628      	mov	r0, r5
340198fa:	e7bd      	b.n	34019878 <_dtoa_r+0x8d0>
340198fc:	2201      	movs	r2, #1
340198fe:	e7e2      	b.n	340198c6 <_dtoa_r+0x91e>
34019900:	9b06      	ldr	r3, [sp, #24]
34019902:	2b00      	cmp	r3, #0
34019904:	db04      	blt.n	34019910 <_dtoa_r+0x968>
34019906:	9907      	ldr	r1, [sp, #28]
34019908:	430b      	orrs	r3, r1
3401990a:	9908      	ldr	r1, [sp, #32]
3401990c:	430b      	orrs	r3, r1
3401990e:	d120      	bne.n	34019952 <_dtoa_r+0x9aa>
34019910:	2a00      	cmp	r2, #0
34019912:	ddee      	ble.n	340198f2 <_dtoa_r+0x94a>
34019914:	2201      	movs	r2, #1
34019916:	9901      	ldr	r1, [sp, #4]
34019918:	4648      	mov	r0, r9
3401991a:	f000 faf7 	bl	34019f0c <__lshift>
3401991e:	4621      	mov	r1, r4
34019920:	9001      	str	r0, [sp, #4]
34019922:	f000 fb5f 	bl	34019fe4 <__mcmp>
34019926:	2800      	cmp	r0, #0
34019928:	dc03      	bgt.n	34019932 <_dtoa_r+0x98a>
3401992a:	d1e2      	bne.n	340198f2 <_dtoa_r+0x94a>
3401992c:	f01a 0f01 	tst.w	sl, #1
34019930:	d0df      	beq.n	340198f2 <_dtoa_r+0x94a>
34019932:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
34019936:	d1d9      	bne.n	340198ec <_dtoa_r+0x944>
34019938:	2339      	movs	r3, #57	@ 0x39
3401993a:	f88b 3000 	strb.w	r3, [fp]
3401993e:	4633      	mov	r3, r6
34019940:	461e      	mov	r6, r3
34019942:	3b01      	subs	r3, #1
34019944:	f816 2c01 	ldrb.w	r2, [r6, #-1]
34019948:	2a39      	cmp	r2, #57	@ 0x39
3401994a:	d052      	beq.n	340199f2 <_dtoa_r+0xa4a>
3401994c:	3201      	adds	r2, #1
3401994e:	701a      	strb	r2, [r3, #0]
34019950:	e531      	b.n	340193b6 <_dtoa_r+0x40e>
34019952:	2a00      	cmp	r2, #0
34019954:	dd07      	ble.n	34019966 <_dtoa_r+0x9be>
34019956:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401995a:	d0ed      	beq.n	34019938 <_dtoa_r+0x990>
3401995c:	f10a 0301 	add.w	r3, sl, #1
34019960:	f88b 3000 	strb.w	r3, [fp]
34019964:	e527      	b.n	340193b6 <_dtoa_r+0x40e>
34019966:	9b04      	ldr	r3, [sp, #16]
34019968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401996a:	f803 ac01 	strb.w	sl, [r3, #-1]
3401996e:	4293      	cmp	r3, r2
34019970:	d029      	beq.n	340199c6 <_dtoa_r+0xa1e>
34019972:	2300      	movs	r3, #0
34019974:	220a      	movs	r2, #10
34019976:	9901      	ldr	r1, [sp, #4]
34019978:	4648      	mov	r0, r9
3401997a:	f000 f91f 	bl	34019bbc <__multadd>
3401997e:	45a8      	cmp	r8, r5
34019980:	9001      	str	r0, [sp, #4]
34019982:	f04f 0300 	mov.w	r3, #0
34019986:	f04f 020a 	mov.w	r2, #10
3401998a:	4641      	mov	r1, r8
3401998c:	4648      	mov	r0, r9
3401998e:	d107      	bne.n	340199a0 <_dtoa_r+0x9f8>
34019990:	f000 f914 	bl	34019bbc <__multadd>
34019994:	4680      	mov	r8, r0
34019996:	4605      	mov	r5, r0
34019998:	9b04      	ldr	r3, [sp, #16]
3401999a:	3301      	adds	r3, #1
3401999c:	9304      	str	r3, [sp, #16]
3401999e:	e776      	b.n	3401988e <_dtoa_r+0x8e6>
340199a0:	f000 f90c 	bl	34019bbc <__multadd>
340199a4:	4629      	mov	r1, r5
340199a6:	4680      	mov	r8, r0
340199a8:	2300      	movs	r3, #0
340199aa:	220a      	movs	r2, #10
340199ac:	4648      	mov	r0, r9
340199ae:	f000 f905 	bl	34019bbc <__multadd>
340199b2:	4605      	mov	r5, r0
340199b4:	e7f0      	b.n	34019998 <_dtoa_r+0x9f0>
340199b6:	f1bb 0f00 	cmp.w	fp, #0
340199ba:	f04f 0800 	mov.w	r8, #0
340199be:	bfcc      	ite	gt
340199c0:	465e      	movgt	r6, fp
340199c2:	2601      	movle	r6, #1
340199c4:	443e      	add	r6, r7
340199c6:	2201      	movs	r2, #1
340199c8:	9901      	ldr	r1, [sp, #4]
340199ca:	4648      	mov	r0, r9
340199cc:	f000 fa9e 	bl	34019f0c <__lshift>
340199d0:	4621      	mov	r1, r4
340199d2:	9001      	str	r0, [sp, #4]
340199d4:	f000 fb06 	bl	34019fe4 <__mcmp>
340199d8:	2800      	cmp	r0, #0
340199da:	dcb0      	bgt.n	3401993e <_dtoa_r+0x996>
340199dc:	d102      	bne.n	340199e4 <_dtoa_r+0xa3c>
340199de:	f01a 0f01 	tst.w	sl, #1
340199e2:	d1ac      	bne.n	3401993e <_dtoa_r+0x996>
340199e4:	4633      	mov	r3, r6
340199e6:	461e      	mov	r6, r3
340199e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
340199ec:	2a30      	cmp	r2, #48	@ 0x30
340199ee:	d0fa      	beq.n	340199e6 <_dtoa_r+0xa3e>
340199f0:	e4e1      	b.n	340193b6 <_dtoa_r+0x40e>
340199f2:	429f      	cmp	r7, r3
340199f4:	d1a4      	bne.n	34019940 <_dtoa_r+0x998>
340199f6:	9b05      	ldr	r3, [sp, #20]
340199f8:	3301      	adds	r3, #1
340199fa:	9305      	str	r3, [sp, #20]
340199fc:	2331      	movs	r3, #49	@ 0x31
340199fe:	703b      	strb	r3, [r7, #0]
34019a00:	e4d9      	b.n	340193b6 <_dtoa_r+0x40e>
34019a02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34019a04:	4f16      	ldr	r7, [pc, #88]	@ (34019a60 <_dtoa_r+0xab8>)
34019a06:	b11b      	cbz	r3, 34019a10 <_dtoa_r+0xa68>
34019a08:	f107 0308 	add.w	r3, r7, #8
34019a0c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
34019a0e:	6013      	str	r3, [r2, #0]
34019a10:	4638      	mov	r0, r7
34019a12:	b011      	add	sp, #68	@ 0x44
34019a14:	ecbd 8b02 	vpop	{d8}
34019a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34019a1c:	9b07      	ldr	r3, [sp, #28]
34019a1e:	2b01      	cmp	r3, #1
34019a20:	f77f ae2c 	ble.w	3401967c <_dtoa_r+0x6d4>
34019a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34019a26:	930b      	str	r3, [sp, #44]	@ 0x2c
34019a28:	2001      	movs	r0, #1
34019a2a:	e64c      	b.n	340196c6 <_dtoa_r+0x71e>
34019a2c:	f1bb 0f00 	cmp.w	fp, #0
34019a30:	f77f aed8 	ble.w	340197e4 <_dtoa_r+0x83c>
34019a34:	463e      	mov	r6, r7
34019a36:	4621      	mov	r1, r4
34019a38:	9801      	ldr	r0, [sp, #4]
34019a3a:	f7ff fa28 	bl	34018e8e <quorem>
34019a3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
34019a42:	f806 ab01 	strb.w	sl, [r6], #1
34019a46:	1bf2      	subs	r2, r6, r7
34019a48:	4593      	cmp	fp, r2
34019a4a:	ddb4      	ble.n	340199b6 <_dtoa_r+0xa0e>
34019a4c:	2300      	movs	r3, #0
34019a4e:	220a      	movs	r2, #10
34019a50:	9901      	ldr	r1, [sp, #4]
34019a52:	4648      	mov	r0, r9
34019a54:	f000 f8b2 	bl	34019bbc <__multadd>
34019a58:	9001      	str	r0, [sp, #4]
34019a5a:	e7ec      	b.n	34019a36 <_dtoa_r+0xa8e>
34019a5c:	3401bb92 	.word	0x3401bb92
34019a60:	3401bb16 	.word	0x3401bb16

34019a64 <_free_r>:
34019a64:	b538      	push	{r3, r4, r5, lr}
34019a66:	4605      	mov	r5, r0
34019a68:	2900      	cmp	r1, #0
34019a6a:	d041      	beq.n	34019af0 <_free_r+0x8c>
34019a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
34019a70:	1f0c      	subs	r4, r1, #4
34019a72:	2b00      	cmp	r3, #0
34019a74:	bfb8      	it	lt
34019a76:	18e4      	addlt	r4, r4, r3
34019a78:	f7fe fa38 	bl	34017eec <__malloc_lock>
34019a7c:	4a1d      	ldr	r2, [pc, #116]	@ (34019af4 <_free_r+0x90>)
34019a7e:	6813      	ldr	r3, [r2, #0]
34019a80:	b933      	cbnz	r3, 34019a90 <_free_r+0x2c>
34019a82:	6063      	str	r3, [r4, #4]
34019a84:	6014      	str	r4, [r2, #0]
34019a86:	4628      	mov	r0, r5
34019a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34019a8c:	f7fe ba34 	b.w	34017ef8 <__malloc_unlock>
34019a90:	42a3      	cmp	r3, r4
34019a92:	d908      	bls.n	34019aa6 <_free_r+0x42>
34019a94:	6820      	ldr	r0, [r4, #0]
34019a96:	1821      	adds	r1, r4, r0
34019a98:	428b      	cmp	r3, r1
34019a9a:	bf01      	itttt	eq
34019a9c:	6819      	ldreq	r1, [r3, #0]
34019a9e:	685b      	ldreq	r3, [r3, #4]
34019aa0:	1809      	addeq	r1, r1, r0
34019aa2:	6021      	streq	r1, [r4, #0]
34019aa4:	e7ed      	b.n	34019a82 <_free_r+0x1e>
34019aa6:	461a      	mov	r2, r3
34019aa8:	685b      	ldr	r3, [r3, #4]
34019aaa:	b10b      	cbz	r3, 34019ab0 <_free_r+0x4c>
34019aac:	42a3      	cmp	r3, r4
34019aae:	d9fa      	bls.n	34019aa6 <_free_r+0x42>
34019ab0:	6811      	ldr	r1, [r2, #0]
34019ab2:	1850      	adds	r0, r2, r1
34019ab4:	42a0      	cmp	r0, r4
34019ab6:	d10b      	bne.n	34019ad0 <_free_r+0x6c>
34019ab8:	6820      	ldr	r0, [r4, #0]
34019aba:	4401      	add	r1, r0
34019abc:	1850      	adds	r0, r2, r1
34019abe:	6011      	str	r1, [r2, #0]
34019ac0:	4283      	cmp	r3, r0
34019ac2:	d1e0      	bne.n	34019a86 <_free_r+0x22>
34019ac4:	6818      	ldr	r0, [r3, #0]
34019ac6:	685b      	ldr	r3, [r3, #4]
34019ac8:	4408      	add	r0, r1
34019aca:	6053      	str	r3, [r2, #4]
34019acc:	6010      	str	r0, [r2, #0]
34019ace:	e7da      	b.n	34019a86 <_free_r+0x22>
34019ad0:	d902      	bls.n	34019ad8 <_free_r+0x74>
34019ad2:	230c      	movs	r3, #12
34019ad4:	602b      	str	r3, [r5, #0]
34019ad6:	e7d6      	b.n	34019a86 <_free_r+0x22>
34019ad8:	6820      	ldr	r0, [r4, #0]
34019ada:	1821      	adds	r1, r4, r0
34019adc:	428b      	cmp	r3, r1
34019ade:	bf02      	ittt	eq
34019ae0:	6819      	ldreq	r1, [r3, #0]
34019ae2:	685b      	ldreq	r3, [r3, #4]
34019ae4:	1809      	addeq	r1, r1, r0
34019ae6:	6063      	str	r3, [r4, #4]
34019ae8:	bf08      	it	eq
34019aea:	6021      	streq	r1, [r4, #0]
34019aec:	6054      	str	r4, [r2, #4]
34019aee:	e7ca      	b.n	34019a86 <_free_r+0x22>
34019af0:	bd38      	pop	{r3, r4, r5, pc}
34019af2:	bf00      	nop
34019af4:	3401c548 	.word	0x3401c548

34019af8 <_Balloc>:
34019af8:	b570      	push	{r4, r5, r6, lr}
34019afa:	69c6      	ldr	r6, [r0, #28]
34019afc:	4604      	mov	r4, r0
34019afe:	460d      	mov	r5, r1
34019b00:	b976      	cbnz	r6, 34019b20 <_Balloc+0x28>
34019b02:	2010      	movs	r0, #16
34019b04:	f7fe f948 	bl	34017d98 <malloc>
34019b08:	4602      	mov	r2, r0
34019b0a:	61e0      	str	r0, [r4, #28]
34019b0c:	b920      	cbnz	r0, 34019b18 <_Balloc+0x20>
34019b0e:	4b18      	ldr	r3, [pc, #96]	@ (34019b70 <_Balloc+0x78>)
34019b10:	216b      	movs	r1, #107	@ 0x6b
34019b12:	4818      	ldr	r0, [pc, #96]	@ (34019b74 <_Balloc+0x7c>)
34019b14:	f7fe f922 	bl	34017d5c <__assert_func>
34019b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
34019b1c:	6006      	str	r6, [r0, #0]
34019b1e:	60c6      	str	r6, [r0, #12]
34019b20:	69e6      	ldr	r6, [r4, #28]
34019b22:	68f3      	ldr	r3, [r6, #12]
34019b24:	b183      	cbz	r3, 34019b48 <_Balloc+0x50>
34019b26:	69e3      	ldr	r3, [r4, #28]
34019b28:	68db      	ldr	r3, [r3, #12]
34019b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
34019b2e:	b9b8      	cbnz	r0, 34019b60 <_Balloc+0x68>
34019b30:	2101      	movs	r1, #1
34019b32:	4620      	mov	r0, r4
34019b34:	fa01 f605 	lsl.w	r6, r1, r5
34019b38:	1d72      	adds	r2, r6, #5
34019b3a:	0092      	lsls	r2, r2, #2
34019b3c:	f000 fd68 	bl	3401a610 <_calloc_r>
34019b40:	b160      	cbz	r0, 34019b5c <_Balloc+0x64>
34019b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
34019b46:	e00e      	b.n	34019b66 <_Balloc+0x6e>
34019b48:	2221      	movs	r2, #33	@ 0x21
34019b4a:	2104      	movs	r1, #4
34019b4c:	4620      	mov	r0, r4
34019b4e:	f000 fd5f 	bl	3401a610 <_calloc_r>
34019b52:	69e3      	ldr	r3, [r4, #28]
34019b54:	60f0      	str	r0, [r6, #12]
34019b56:	68db      	ldr	r3, [r3, #12]
34019b58:	2b00      	cmp	r3, #0
34019b5a:	d1e4      	bne.n	34019b26 <_Balloc+0x2e>
34019b5c:	2000      	movs	r0, #0
34019b5e:	bd70      	pop	{r4, r5, r6, pc}
34019b60:	6802      	ldr	r2, [r0, #0]
34019b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
34019b66:	2300      	movs	r3, #0
34019b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
34019b6c:	e7f7      	b.n	34019b5e <_Balloc+0x66>
34019b6e:	bf00      	nop
34019b70:	3401bb23 	.word	0x3401bb23
34019b74:	3401bba3 	.word	0x3401bba3

34019b78 <_Bfree>:
34019b78:	b570      	push	{r4, r5, r6, lr}
34019b7a:	69c6      	ldr	r6, [r0, #28]
34019b7c:	4605      	mov	r5, r0
34019b7e:	460c      	mov	r4, r1
34019b80:	b976      	cbnz	r6, 34019ba0 <_Bfree+0x28>
34019b82:	2010      	movs	r0, #16
34019b84:	f7fe f908 	bl	34017d98 <malloc>
34019b88:	4602      	mov	r2, r0
34019b8a:	61e8      	str	r0, [r5, #28]
34019b8c:	b920      	cbnz	r0, 34019b98 <_Bfree+0x20>
34019b8e:	4b09      	ldr	r3, [pc, #36]	@ (34019bb4 <_Bfree+0x3c>)
34019b90:	218f      	movs	r1, #143	@ 0x8f
34019b92:	4809      	ldr	r0, [pc, #36]	@ (34019bb8 <_Bfree+0x40>)
34019b94:	f7fe f8e2 	bl	34017d5c <__assert_func>
34019b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
34019b9c:	6006      	str	r6, [r0, #0]
34019b9e:	60c6      	str	r6, [r0, #12]
34019ba0:	b13c      	cbz	r4, 34019bb2 <_Bfree+0x3a>
34019ba2:	69eb      	ldr	r3, [r5, #28]
34019ba4:	6862      	ldr	r2, [r4, #4]
34019ba6:	68db      	ldr	r3, [r3, #12]
34019ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34019bac:	6021      	str	r1, [r4, #0]
34019bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
34019bb2:	bd70      	pop	{r4, r5, r6, pc}
34019bb4:	3401bb23 	.word	0x3401bb23
34019bb8:	3401bba3 	.word	0x3401bba3

34019bbc <__multadd>:
34019bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34019bc0:	f101 0c14 	add.w	ip, r1, #20
34019bc4:	4607      	mov	r7, r0
34019bc6:	460c      	mov	r4, r1
34019bc8:	461e      	mov	r6, r3
34019bca:	690d      	ldr	r5, [r1, #16]
34019bcc:	2000      	movs	r0, #0
34019bce:	f8dc 3000 	ldr.w	r3, [ip]
34019bd2:	3001      	adds	r0, #1
34019bd4:	b299      	uxth	r1, r3
34019bd6:	4285      	cmp	r5, r0
34019bd8:	fb02 6101 	mla	r1, r2, r1, r6
34019bdc:	ea4f 4613 	mov.w	r6, r3, lsr #16
34019be0:	ea4f 4311 	mov.w	r3, r1, lsr #16
34019be4:	b289      	uxth	r1, r1
34019be6:	fb02 3306 	mla	r3, r2, r6, r3
34019bea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
34019bee:	ea4f 4613 	mov.w	r6, r3, lsr #16
34019bf2:	f84c 1b04 	str.w	r1, [ip], #4
34019bf6:	dcea      	bgt.n	34019bce <__multadd+0x12>
34019bf8:	b30e      	cbz	r6, 34019c3e <__multadd+0x82>
34019bfa:	68a3      	ldr	r3, [r4, #8]
34019bfc:	42ab      	cmp	r3, r5
34019bfe:	dc19      	bgt.n	34019c34 <__multadd+0x78>
34019c00:	6861      	ldr	r1, [r4, #4]
34019c02:	4638      	mov	r0, r7
34019c04:	3101      	adds	r1, #1
34019c06:	f7ff ff77 	bl	34019af8 <_Balloc>
34019c0a:	4680      	mov	r8, r0
34019c0c:	b928      	cbnz	r0, 34019c1a <__multadd+0x5e>
34019c0e:	4602      	mov	r2, r0
34019c10:	4b0c      	ldr	r3, [pc, #48]	@ (34019c44 <__multadd+0x88>)
34019c12:	21ba      	movs	r1, #186	@ 0xba
34019c14:	480c      	ldr	r0, [pc, #48]	@ (34019c48 <__multadd+0x8c>)
34019c16:	f7fe f8a1 	bl	34017d5c <__assert_func>
34019c1a:	6922      	ldr	r2, [r4, #16]
34019c1c:	f104 010c 	add.w	r1, r4, #12
34019c20:	300c      	adds	r0, #12
34019c22:	3202      	adds	r2, #2
34019c24:	0092      	lsls	r2, r2, #2
34019c26:	f7ff f91e 	bl	34018e66 <memcpy>
34019c2a:	4621      	mov	r1, r4
34019c2c:	4644      	mov	r4, r8
34019c2e:	4638      	mov	r0, r7
34019c30:	f7ff ffa2 	bl	34019b78 <_Bfree>
34019c34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
34019c38:	3501      	adds	r5, #1
34019c3a:	615e      	str	r6, [r3, #20]
34019c3c:	6125      	str	r5, [r4, #16]
34019c3e:	4620      	mov	r0, r4
34019c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34019c44:	3401bb92 	.word	0x3401bb92
34019c48:	3401bba3 	.word	0x3401bba3

34019c4c <__hi0bits>:
34019c4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
34019c50:	4603      	mov	r3, r0
34019c52:	bf36      	itet	cc
34019c54:	0403      	lslcc	r3, r0, #16
34019c56:	2000      	movcs	r0, #0
34019c58:	2010      	movcc	r0, #16
34019c5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34019c5e:	bf3c      	itt	cc
34019c60:	021b      	lslcc	r3, r3, #8
34019c62:	3008      	addcc	r0, #8
34019c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34019c68:	bf3c      	itt	cc
34019c6a:	011b      	lslcc	r3, r3, #4
34019c6c:	3004      	addcc	r0, #4
34019c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34019c72:	bf3c      	itt	cc
34019c74:	009b      	lslcc	r3, r3, #2
34019c76:	3002      	addcc	r0, #2
34019c78:	2b00      	cmp	r3, #0
34019c7a:	db05      	blt.n	34019c88 <__hi0bits+0x3c>
34019c7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
34019c80:	f100 0001 	add.w	r0, r0, #1
34019c84:	bf08      	it	eq
34019c86:	2020      	moveq	r0, #32
34019c88:	4770      	bx	lr

34019c8a <__lo0bits>:
34019c8a:	6803      	ldr	r3, [r0, #0]
34019c8c:	4602      	mov	r2, r0
34019c8e:	f013 0007 	ands.w	r0, r3, #7
34019c92:	d00b      	beq.n	34019cac <__lo0bits+0x22>
34019c94:	07d9      	lsls	r1, r3, #31
34019c96:	d421      	bmi.n	34019cdc <__lo0bits+0x52>
34019c98:	0798      	lsls	r0, r3, #30
34019c9a:	bf47      	ittee	mi
34019c9c:	085b      	lsrmi	r3, r3, #1
34019c9e:	2001      	movmi	r0, #1
34019ca0:	089b      	lsrpl	r3, r3, #2
34019ca2:	2002      	movpl	r0, #2
34019ca4:	bf4c      	ite	mi
34019ca6:	6013      	strmi	r3, [r2, #0]
34019ca8:	6013      	strpl	r3, [r2, #0]
34019caa:	4770      	bx	lr
34019cac:	b299      	uxth	r1, r3
34019cae:	b909      	cbnz	r1, 34019cb4 <__lo0bits+0x2a>
34019cb0:	0c1b      	lsrs	r3, r3, #16
34019cb2:	2010      	movs	r0, #16
34019cb4:	b2d9      	uxtb	r1, r3
34019cb6:	b909      	cbnz	r1, 34019cbc <__lo0bits+0x32>
34019cb8:	3008      	adds	r0, #8
34019cba:	0a1b      	lsrs	r3, r3, #8
34019cbc:	0719      	lsls	r1, r3, #28
34019cbe:	bf04      	itt	eq
34019cc0:	091b      	lsreq	r3, r3, #4
34019cc2:	3004      	addeq	r0, #4
34019cc4:	0799      	lsls	r1, r3, #30
34019cc6:	bf04      	itt	eq
34019cc8:	089b      	lsreq	r3, r3, #2
34019cca:	3002      	addeq	r0, #2
34019ccc:	07d9      	lsls	r1, r3, #31
34019cce:	d403      	bmi.n	34019cd8 <__lo0bits+0x4e>
34019cd0:	085b      	lsrs	r3, r3, #1
34019cd2:	f100 0001 	add.w	r0, r0, #1
34019cd6:	d003      	beq.n	34019ce0 <__lo0bits+0x56>
34019cd8:	6013      	str	r3, [r2, #0]
34019cda:	4770      	bx	lr
34019cdc:	2000      	movs	r0, #0
34019cde:	4770      	bx	lr
34019ce0:	2020      	movs	r0, #32
34019ce2:	4770      	bx	lr

34019ce4 <__i2b>:
34019ce4:	b510      	push	{r4, lr}
34019ce6:	460c      	mov	r4, r1
34019ce8:	2101      	movs	r1, #1
34019cea:	f7ff ff05 	bl	34019af8 <_Balloc>
34019cee:	4602      	mov	r2, r0
34019cf0:	b928      	cbnz	r0, 34019cfe <__i2b+0x1a>
34019cf2:	4b05      	ldr	r3, [pc, #20]	@ (34019d08 <__i2b+0x24>)
34019cf4:	f240 1145 	movw	r1, #325	@ 0x145
34019cf8:	4804      	ldr	r0, [pc, #16]	@ (34019d0c <__i2b+0x28>)
34019cfa:	f7fe f82f 	bl	34017d5c <__assert_func>
34019cfe:	2301      	movs	r3, #1
34019d00:	6144      	str	r4, [r0, #20]
34019d02:	6103      	str	r3, [r0, #16]
34019d04:	bd10      	pop	{r4, pc}
34019d06:	bf00      	nop
34019d08:	3401bb92 	.word	0x3401bb92
34019d0c:	3401bba3 	.word	0x3401bba3

34019d10 <__multiply>:
34019d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34019d14:	4617      	mov	r7, r2
34019d16:	690a      	ldr	r2, [r1, #16]
34019d18:	4689      	mov	r9, r1
34019d1a:	b085      	sub	sp, #20
34019d1c:	693b      	ldr	r3, [r7, #16]
34019d1e:	429a      	cmp	r2, r3
34019d20:	bfa2      	ittt	ge
34019d22:	463b      	movge	r3, r7
34019d24:	460f      	movge	r7, r1
34019d26:	4699      	movge	r9, r3
34019d28:	693d      	ldr	r5, [r7, #16]
34019d2a:	68bb      	ldr	r3, [r7, #8]
34019d2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
34019d30:	6879      	ldr	r1, [r7, #4]
34019d32:	eb05 060a 	add.w	r6, r5, sl
34019d36:	42b3      	cmp	r3, r6
34019d38:	bfb8      	it	lt
34019d3a:	3101      	addlt	r1, #1
34019d3c:	f7ff fedc 	bl	34019af8 <_Balloc>
34019d40:	b930      	cbnz	r0, 34019d50 <__multiply+0x40>
34019d42:	4602      	mov	r2, r0
34019d44:	4b42      	ldr	r3, [pc, #264]	@ (34019e50 <__multiply+0x140>)
34019d46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
34019d4a:	4842      	ldr	r0, [pc, #264]	@ (34019e54 <__multiply+0x144>)
34019d4c:	f7fe f806 	bl	34017d5c <__assert_func>
34019d50:	f100 0414 	add.w	r4, r0, #20
34019d54:	2200      	movs	r2, #0
34019d56:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
34019d5a:	4623      	mov	r3, r4
34019d5c:	4573      	cmp	r3, lr
34019d5e:	d320      	bcc.n	34019da2 <__multiply+0x92>
34019d60:	f107 0814 	add.w	r8, r7, #20
34019d64:	f109 0114 	add.w	r1, r9, #20
34019d68:	eb08 0585 	add.w	r5, r8, r5, lsl #2
34019d6c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
34019d70:	9302      	str	r3, [sp, #8]
34019d72:	1beb      	subs	r3, r5, r7
34019d74:	3715      	adds	r7, #21
34019d76:	3b15      	subs	r3, #21
34019d78:	f023 0303 	bic.w	r3, r3, #3
34019d7c:	3304      	adds	r3, #4
34019d7e:	42bd      	cmp	r5, r7
34019d80:	bf38      	it	cc
34019d82:	2304      	movcc	r3, #4
34019d84:	9301      	str	r3, [sp, #4]
34019d86:	9b02      	ldr	r3, [sp, #8]
34019d88:	9103      	str	r1, [sp, #12]
34019d8a:	428b      	cmp	r3, r1
34019d8c:	d80c      	bhi.n	34019da8 <__multiply+0x98>
34019d8e:	2e00      	cmp	r6, #0
34019d90:	dd03      	ble.n	34019d9a <__multiply+0x8a>
34019d92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
34019d96:	2b00      	cmp	r3, #0
34019d98:	d057      	beq.n	34019e4a <__multiply+0x13a>
34019d9a:	6106      	str	r6, [r0, #16]
34019d9c:	b005      	add	sp, #20
34019d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34019da2:	f843 2b04 	str.w	r2, [r3], #4
34019da6:	e7d9      	b.n	34019d5c <__multiply+0x4c>
34019da8:	f8b1 a000 	ldrh.w	sl, [r1]
34019dac:	f1ba 0f00 	cmp.w	sl, #0
34019db0:	d021      	beq.n	34019df6 <__multiply+0xe6>
34019db2:	46c4      	mov	ip, r8
34019db4:	46a1      	mov	r9, r4
34019db6:	2700      	movs	r7, #0
34019db8:	f85c 2b04 	ldr.w	r2, [ip], #4
34019dbc:	f8d9 3000 	ldr.w	r3, [r9]
34019dc0:	fa1f fb82 	uxth.w	fp, r2
34019dc4:	4565      	cmp	r5, ip
34019dc6:	b29b      	uxth	r3, r3
34019dc8:	ea4f 4212 	mov.w	r2, r2, lsr #16
34019dcc:	fb0a 330b 	mla	r3, sl, fp, r3
34019dd0:	443b      	add	r3, r7
34019dd2:	f8d9 7000 	ldr.w	r7, [r9]
34019dd6:	ea4f 4717 	mov.w	r7, r7, lsr #16
34019dda:	fb0a 7202 	mla	r2, sl, r2, r7
34019dde:	eb02 4213 	add.w	r2, r2, r3, lsr #16
34019de2:	b29b      	uxth	r3, r3
34019de4:	ea4f 4712 	mov.w	r7, r2, lsr #16
34019de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34019dec:	f849 3b04 	str.w	r3, [r9], #4
34019df0:	d8e2      	bhi.n	34019db8 <__multiply+0xa8>
34019df2:	9b01      	ldr	r3, [sp, #4]
34019df4:	50e7      	str	r7, [r4, r3]
34019df6:	9b03      	ldr	r3, [sp, #12]
34019df8:	3104      	adds	r1, #4
34019dfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
34019dfe:	f1b9 0f00 	cmp.w	r9, #0
34019e02:	d020      	beq.n	34019e46 <__multiply+0x136>
34019e04:	6823      	ldr	r3, [r4, #0]
34019e06:	4647      	mov	r7, r8
34019e08:	46a4      	mov	ip, r4
34019e0a:	f04f 0a00 	mov.w	sl, #0
34019e0e:	f8b7 b000 	ldrh.w	fp, [r7]
34019e12:	b29b      	uxth	r3, r3
34019e14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
34019e18:	fb09 220b 	mla	r2, r9, fp, r2
34019e1c:	4452      	add	r2, sl
34019e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34019e22:	f84c 3b04 	str.w	r3, [ip], #4
34019e26:	f857 3b04 	ldr.w	r3, [r7], #4
34019e2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34019e2e:	f8bc 3000 	ldrh.w	r3, [ip]
34019e32:	42bd      	cmp	r5, r7
34019e34:	fb09 330a 	mla	r3, r9, sl, r3
34019e38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
34019e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34019e40:	d8e5      	bhi.n	34019e0e <__multiply+0xfe>
34019e42:	9a01      	ldr	r2, [sp, #4]
34019e44:	50a3      	str	r3, [r4, r2]
34019e46:	3404      	adds	r4, #4
34019e48:	e79d      	b.n	34019d86 <__multiply+0x76>
34019e4a:	3e01      	subs	r6, #1
34019e4c:	e79f      	b.n	34019d8e <__multiply+0x7e>
34019e4e:	bf00      	nop
34019e50:	3401bb92 	.word	0x3401bb92
34019e54:	3401bba3 	.word	0x3401bba3

34019e58 <__pow5mult>:
34019e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34019e5c:	4615      	mov	r5, r2
34019e5e:	f012 0203 	ands.w	r2, r2, #3
34019e62:	4607      	mov	r7, r0
34019e64:	460e      	mov	r6, r1
34019e66:	d007      	beq.n	34019e78 <__pow5mult+0x20>
34019e68:	3a01      	subs	r2, #1
34019e6a:	4c25      	ldr	r4, [pc, #148]	@ (34019f00 <__pow5mult+0xa8>)
34019e6c:	2300      	movs	r3, #0
34019e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
34019e72:	f7ff fea3 	bl	34019bbc <__multadd>
34019e76:	4606      	mov	r6, r0
34019e78:	10ad      	asrs	r5, r5, #2
34019e7a:	d03d      	beq.n	34019ef8 <__pow5mult+0xa0>
34019e7c:	69fc      	ldr	r4, [r7, #28]
34019e7e:	b97c      	cbnz	r4, 34019ea0 <__pow5mult+0x48>
34019e80:	2010      	movs	r0, #16
34019e82:	f7fd ff89 	bl	34017d98 <malloc>
34019e86:	4602      	mov	r2, r0
34019e88:	61f8      	str	r0, [r7, #28]
34019e8a:	b928      	cbnz	r0, 34019e98 <__pow5mult+0x40>
34019e8c:	4b1d      	ldr	r3, [pc, #116]	@ (34019f04 <__pow5mult+0xac>)
34019e8e:	f240 11b3 	movw	r1, #435	@ 0x1b3
34019e92:	481d      	ldr	r0, [pc, #116]	@ (34019f08 <__pow5mult+0xb0>)
34019e94:	f7fd ff62 	bl	34017d5c <__assert_func>
34019e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
34019e9c:	6004      	str	r4, [r0, #0]
34019e9e:	60c4      	str	r4, [r0, #12]
34019ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
34019ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
34019ea8:	b94c      	cbnz	r4, 34019ebe <__pow5mult+0x66>
34019eaa:	f240 2171 	movw	r1, #625	@ 0x271
34019eae:	4638      	mov	r0, r7
34019eb0:	f7ff ff18 	bl	34019ce4 <__i2b>
34019eb4:	2300      	movs	r3, #0
34019eb6:	4604      	mov	r4, r0
34019eb8:	f8c8 0008 	str.w	r0, [r8, #8]
34019ebc:	6003      	str	r3, [r0, #0]
34019ebe:	f04f 0900 	mov.w	r9, #0
34019ec2:	07eb      	lsls	r3, r5, #31
34019ec4:	d50a      	bpl.n	34019edc <__pow5mult+0x84>
34019ec6:	4631      	mov	r1, r6
34019ec8:	4622      	mov	r2, r4
34019eca:	4638      	mov	r0, r7
34019ecc:	f7ff ff20 	bl	34019d10 <__multiply>
34019ed0:	4680      	mov	r8, r0
34019ed2:	4631      	mov	r1, r6
34019ed4:	4638      	mov	r0, r7
34019ed6:	4646      	mov	r6, r8
34019ed8:	f7ff fe4e 	bl	34019b78 <_Bfree>
34019edc:	106d      	asrs	r5, r5, #1
34019ede:	d00b      	beq.n	34019ef8 <__pow5mult+0xa0>
34019ee0:	6820      	ldr	r0, [r4, #0]
34019ee2:	b938      	cbnz	r0, 34019ef4 <__pow5mult+0x9c>
34019ee4:	4622      	mov	r2, r4
34019ee6:	4621      	mov	r1, r4
34019ee8:	4638      	mov	r0, r7
34019eea:	f7ff ff11 	bl	34019d10 <__multiply>
34019eee:	6020      	str	r0, [r4, #0]
34019ef0:	f8c0 9000 	str.w	r9, [r0]
34019ef4:	4604      	mov	r4, r0
34019ef6:	e7e4      	b.n	34019ec2 <__pow5mult+0x6a>
34019ef8:	4630      	mov	r0, r6
34019efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34019efe:	bf00      	nop
34019f00:	3401bc18 	.word	0x3401bc18
34019f04:	3401bb23 	.word	0x3401bb23
34019f08:	3401bba3 	.word	0x3401bba3

34019f0c <__lshift>:
34019f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34019f10:	460c      	mov	r4, r1
34019f12:	4607      	mov	r7, r0
34019f14:	4691      	mov	r9, r2
34019f16:	ea4f 1a62 	mov.w	sl, r2, asr #5
34019f1a:	6923      	ldr	r3, [r4, #16]
34019f1c:	6849      	ldr	r1, [r1, #4]
34019f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
34019f22:	68a3      	ldr	r3, [r4, #8]
34019f24:	f108 0601 	add.w	r6, r8, #1
34019f28:	42b3      	cmp	r3, r6
34019f2a:	db0b      	blt.n	34019f44 <__lshift+0x38>
34019f2c:	4638      	mov	r0, r7
34019f2e:	f7ff fde3 	bl	34019af8 <_Balloc>
34019f32:	4605      	mov	r5, r0
34019f34:	b948      	cbnz	r0, 34019f4a <__lshift+0x3e>
34019f36:	4602      	mov	r2, r0
34019f38:	4b28      	ldr	r3, [pc, #160]	@ (34019fdc <__lshift+0xd0>)
34019f3a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34019f3e:	4828      	ldr	r0, [pc, #160]	@ (34019fe0 <__lshift+0xd4>)
34019f40:	f7fd ff0c 	bl	34017d5c <__assert_func>
34019f44:	3101      	adds	r1, #1
34019f46:	005b      	lsls	r3, r3, #1
34019f48:	e7ee      	b.n	34019f28 <__lshift+0x1c>
34019f4a:	2300      	movs	r3, #0
34019f4c:	f100 0114 	add.w	r1, r0, #20
34019f50:	f100 0210 	add.w	r2, r0, #16
34019f54:	4618      	mov	r0, r3
34019f56:	4553      	cmp	r3, sl
34019f58:	db33      	blt.n	34019fc2 <__lshift+0xb6>
34019f5a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
34019f5e:	f104 0314 	add.w	r3, r4, #20
34019f62:	6920      	ldr	r0, [r4, #16]
34019f64:	f019 091f 	ands.w	r9, r9, #31
34019f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
34019f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
34019f70:	d02b      	beq.n	34019fca <__lshift+0xbe>
34019f72:	f1c9 0e20 	rsb	lr, r9, #32
34019f76:	468a      	mov	sl, r1
34019f78:	2200      	movs	r2, #0
34019f7a:	6818      	ldr	r0, [r3, #0]
34019f7c:	fa00 f009 	lsl.w	r0, r0, r9
34019f80:	4310      	orrs	r0, r2
34019f82:	f84a 0b04 	str.w	r0, [sl], #4
34019f86:	f853 2b04 	ldr.w	r2, [r3], #4
34019f8a:	459c      	cmp	ip, r3
34019f8c:	fa22 f20e 	lsr.w	r2, r2, lr
34019f90:	d8f3      	bhi.n	34019f7a <__lshift+0x6e>
34019f92:	ebac 0304 	sub.w	r3, ip, r4
34019f96:	f104 0015 	add.w	r0, r4, #21
34019f9a:	3b15      	subs	r3, #21
34019f9c:	f023 0303 	bic.w	r3, r3, #3
34019fa0:	3304      	adds	r3, #4
34019fa2:	4560      	cmp	r0, ip
34019fa4:	bf88      	it	hi
34019fa6:	2304      	movhi	r3, #4
34019fa8:	50ca      	str	r2, [r1, r3]
34019faa:	b10a      	cbz	r2, 34019fb0 <__lshift+0xa4>
34019fac:	f108 0602 	add.w	r6, r8, #2
34019fb0:	3e01      	subs	r6, #1
34019fb2:	4638      	mov	r0, r7
34019fb4:	4621      	mov	r1, r4
34019fb6:	612e      	str	r6, [r5, #16]
34019fb8:	f7ff fdde 	bl	34019b78 <_Bfree>
34019fbc:	4628      	mov	r0, r5
34019fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34019fc2:	3301      	adds	r3, #1
34019fc4:	f842 0f04 	str.w	r0, [r2, #4]!
34019fc8:	e7c5      	b.n	34019f56 <__lshift+0x4a>
34019fca:	3904      	subs	r1, #4
34019fcc:	f853 2b04 	ldr.w	r2, [r3], #4
34019fd0:	459c      	cmp	ip, r3
34019fd2:	f841 2f04 	str.w	r2, [r1, #4]!
34019fd6:	d8f9      	bhi.n	34019fcc <__lshift+0xc0>
34019fd8:	e7ea      	b.n	34019fb0 <__lshift+0xa4>
34019fda:	bf00      	nop
34019fdc:	3401bb92 	.word	0x3401bb92
34019fe0:	3401bba3 	.word	0x3401bba3

34019fe4 <__mcmp>:
34019fe4:	4603      	mov	r3, r0
34019fe6:	690a      	ldr	r2, [r1, #16]
34019fe8:	6900      	ldr	r0, [r0, #16]
34019fea:	1a80      	subs	r0, r0, r2
34019fec:	b530      	push	{r4, r5, lr}
34019fee:	d10e      	bne.n	3401a00e <__mcmp+0x2a>
34019ff0:	3314      	adds	r3, #20
34019ff2:	3114      	adds	r1, #20
34019ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
34019ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
34019ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3401a000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3401a004:	4295      	cmp	r5, r2
3401a006:	d003      	beq.n	3401a010 <__mcmp+0x2c>
3401a008:	d205      	bcs.n	3401a016 <__mcmp+0x32>
3401a00a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a00e:	bd30      	pop	{r4, r5, pc}
3401a010:	42a3      	cmp	r3, r4
3401a012:	d3f3      	bcc.n	34019ffc <__mcmp+0x18>
3401a014:	e7fb      	b.n	3401a00e <__mcmp+0x2a>
3401a016:	2001      	movs	r0, #1
3401a018:	e7f9      	b.n	3401a00e <__mcmp+0x2a>
	...

3401a01c <__mdiff>:
3401a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401a020:	4689      	mov	r9, r1
3401a022:	4606      	mov	r6, r0
3401a024:	4611      	mov	r1, r2
3401a026:	4614      	mov	r4, r2
3401a028:	4648      	mov	r0, r9
3401a02a:	f7ff ffdb 	bl	34019fe4 <__mcmp>
3401a02e:	1e05      	subs	r5, r0, #0
3401a030:	d112      	bne.n	3401a058 <__mdiff+0x3c>
3401a032:	4629      	mov	r1, r5
3401a034:	4630      	mov	r0, r6
3401a036:	f7ff fd5f 	bl	34019af8 <_Balloc>
3401a03a:	4602      	mov	r2, r0
3401a03c:	b928      	cbnz	r0, 3401a04a <__mdiff+0x2e>
3401a03e:	4b41      	ldr	r3, [pc, #260]	@ (3401a144 <__mdiff+0x128>)
3401a040:	f240 2137 	movw	r1, #567	@ 0x237
3401a044:	4840      	ldr	r0, [pc, #256]	@ (3401a148 <__mdiff+0x12c>)
3401a046:	f7fd fe89 	bl	34017d5c <__assert_func>
3401a04a:	2301      	movs	r3, #1
3401a04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
3401a050:	4610      	mov	r0, r2
3401a052:	b003      	add	sp, #12
3401a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401a058:	bfbc      	itt	lt
3401a05a:	464b      	movlt	r3, r9
3401a05c:	46a1      	movlt	r9, r4
3401a05e:	4630      	mov	r0, r6
3401a060:	bfb8      	it	lt
3401a062:	2501      	movlt	r5, #1
3401a064:	f8d9 1004 	ldr.w	r1, [r9, #4]
3401a068:	bfb4      	ite	lt
3401a06a:	461c      	movlt	r4, r3
3401a06c:	2500      	movge	r5, #0
3401a06e:	f7ff fd43 	bl	34019af8 <_Balloc>
3401a072:	4602      	mov	r2, r0
3401a074:	b918      	cbnz	r0, 3401a07e <__mdiff+0x62>
3401a076:	4b33      	ldr	r3, [pc, #204]	@ (3401a144 <__mdiff+0x128>)
3401a078:	f240 2145 	movw	r1, #581	@ 0x245
3401a07c:	e7e2      	b.n	3401a044 <__mdiff+0x28>
3401a07e:	f8d9 7010 	ldr.w	r7, [r9, #16]
3401a082:	f104 0e14 	add.w	lr, r4, #20
3401a086:	6926      	ldr	r6, [r4, #16]
3401a088:	f100 0b14 	add.w	fp, r0, #20
3401a08c:	60c5      	str	r5, [r0, #12]
3401a08e:	f109 0514 	add.w	r5, r9, #20
3401a092:	f109 0310 	add.w	r3, r9, #16
3401a096:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3401a09a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3401a09e:	46d9      	mov	r9, fp
3401a0a0:	f04f 0c00 	mov.w	ip, #0
3401a0a4:	9301      	str	r3, [sp, #4]
3401a0a6:	9b01      	ldr	r3, [sp, #4]
3401a0a8:	f85e 0b04 	ldr.w	r0, [lr], #4
3401a0ac:	f853 af04 	ldr.w	sl, [r3, #4]!
3401a0b0:	4576      	cmp	r6, lr
3401a0b2:	9301      	str	r3, [sp, #4]
3401a0b4:	fa1f f38a 	uxth.w	r3, sl
3401a0b8:	4619      	mov	r1, r3
3401a0ba:	b283      	uxth	r3, r0
3401a0bc:	ea4f 4010 	mov.w	r0, r0, lsr #16
3401a0c0:	eba1 0303 	sub.w	r3, r1, r3
3401a0c4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3401a0c8:	4463      	add	r3, ip
3401a0ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
3401a0ce:	b29b      	uxth	r3, r3
3401a0d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401a0d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401a0d8:	f849 3b04 	str.w	r3, [r9], #4
3401a0dc:	d8e3      	bhi.n	3401a0a6 <__mdiff+0x8a>
3401a0de:	1b33      	subs	r3, r6, r4
3401a0e0:	3415      	adds	r4, #21
3401a0e2:	3b15      	subs	r3, #21
3401a0e4:	f023 0303 	bic.w	r3, r3, #3
3401a0e8:	3304      	adds	r3, #4
3401a0ea:	42a6      	cmp	r6, r4
3401a0ec:	bf38      	it	cc
3401a0ee:	2304      	movcc	r3, #4
3401a0f0:	441d      	add	r5, r3
3401a0f2:	445b      	add	r3, fp
3401a0f4:	462c      	mov	r4, r5
3401a0f6:	461e      	mov	r6, r3
3401a0f8:	4544      	cmp	r4, r8
3401a0fa:	d30e      	bcc.n	3401a11a <__mdiff+0xfe>
3401a0fc:	f108 0103 	add.w	r1, r8, #3
3401a100:	1b49      	subs	r1, r1, r5
3401a102:	3d03      	subs	r5, #3
3401a104:	f021 0103 	bic.w	r1, r1, #3
3401a108:	45a8      	cmp	r8, r5
3401a10a:	bf38      	it	cc
3401a10c:	2100      	movcc	r1, #0
3401a10e:	440b      	add	r3, r1
3401a110:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3401a114:	b199      	cbz	r1, 3401a13e <__mdiff+0x122>
3401a116:	6117      	str	r7, [r2, #16]
3401a118:	e79a      	b.n	3401a050 <__mdiff+0x34>
3401a11a:	f854 1b04 	ldr.w	r1, [r4], #4
3401a11e:	46e6      	mov	lr, ip
3401a120:	fa1f fc81 	uxth.w	ip, r1
3401a124:	0c08      	lsrs	r0, r1, #16
3401a126:	4471      	add	r1, lr
3401a128:	44f4      	add	ip, lr
3401a12a:	b289      	uxth	r1, r1
3401a12c:	eb00 402c 	add.w	r0, r0, ip, asr #16
3401a130:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3401a134:	ea4f 4c20 	mov.w	ip, r0, asr #16
3401a138:	f846 1b04 	str.w	r1, [r6], #4
3401a13c:	e7dc      	b.n	3401a0f8 <__mdiff+0xdc>
3401a13e:	3f01      	subs	r7, #1
3401a140:	e7e6      	b.n	3401a110 <__mdiff+0xf4>
3401a142:	bf00      	nop
3401a144:	3401bb92 	.word	0x3401bb92
3401a148:	3401bba3 	.word	0x3401bba3

3401a14c <__d2b>:
3401a14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401a150:	460f      	mov	r7, r1
3401a152:	2101      	movs	r1, #1
3401a154:	4616      	mov	r6, r2
3401a156:	ec59 8b10 	vmov	r8, r9, d0
3401a15a:	f7ff fccd 	bl	34019af8 <_Balloc>
3401a15e:	4604      	mov	r4, r0
3401a160:	b930      	cbnz	r0, 3401a170 <__d2b+0x24>
3401a162:	4602      	mov	r2, r0
3401a164:	4b23      	ldr	r3, [pc, #140]	@ (3401a1f4 <__d2b+0xa8>)
3401a166:	f240 310f 	movw	r1, #783	@ 0x30f
3401a16a:	4823      	ldr	r0, [pc, #140]	@ (3401a1f8 <__d2b+0xac>)
3401a16c:	f7fd fdf6 	bl	34017d5c <__assert_func>
3401a170:	f3c9 550a 	ubfx	r5, r9, #20, #11
3401a174:	f3c9 0313 	ubfx	r3, r9, #0, #20
3401a178:	b10d      	cbz	r5, 3401a17e <__d2b+0x32>
3401a17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3401a17e:	9301      	str	r3, [sp, #4]
3401a180:	f1b8 0300 	subs.w	r3, r8, #0
3401a184:	d023      	beq.n	3401a1ce <__d2b+0x82>
3401a186:	4668      	mov	r0, sp
3401a188:	9300      	str	r3, [sp, #0]
3401a18a:	f7ff fd7e 	bl	34019c8a <__lo0bits>
3401a18e:	e9dd 1200 	ldrd	r1, r2, [sp]
3401a192:	b1d0      	cbz	r0, 3401a1ca <__d2b+0x7e>
3401a194:	f1c0 0320 	rsb	r3, r0, #32
3401a198:	fa02 f303 	lsl.w	r3, r2, r3
3401a19c:	40c2      	lsrs	r2, r0
3401a19e:	430b      	orrs	r3, r1
3401a1a0:	9201      	str	r2, [sp, #4]
3401a1a2:	6163      	str	r3, [r4, #20]
3401a1a4:	9b01      	ldr	r3, [sp, #4]
3401a1a6:	2b00      	cmp	r3, #0
3401a1a8:	61a3      	str	r3, [r4, #24]
3401a1aa:	bf0c      	ite	eq
3401a1ac:	2201      	moveq	r2, #1
3401a1ae:	2202      	movne	r2, #2
3401a1b0:	6122      	str	r2, [r4, #16]
3401a1b2:	b1a5      	cbz	r5, 3401a1de <__d2b+0x92>
3401a1b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3401a1b8:	4405      	add	r5, r0
3401a1ba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3401a1be:	603d      	str	r5, [r7, #0]
3401a1c0:	6030      	str	r0, [r6, #0]
3401a1c2:	4620      	mov	r0, r4
3401a1c4:	b003      	add	sp, #12
3401a1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401a1ca:	6161      	str	r1, [r4, #20]
3401a1cc:	e7ea      	b.n	3401a1a4 <__d2b+0x58>
3401a1ce:	a801      	add	r0, sp, #4
3401a1d0:	f7ff fd5b 	bl	34019c8a <__lo0bits>
3401a1d4:	9b01      	ldr	r3, [sp, #4]
3401a1d6:	3020      	adds	r0, #32
3401a1d8:	2201      	movs	r2, #1
3401a1da:	6163      	str	r3, [r4, #20]
3401a1dc:	e7e8      	b.n	3401a1b0 <__d2b+0x64>
3401a1de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3401a1e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401a1e6:	6038      	str	r0, [r7, #0]
3401a1e8:	6918      	ldr	r0, [r3, #16]
3401a1ea:	f7ff fd2f 	bl	34019c4c <__hi0bits>
3401a1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3401a1f2:	e7e5      	b.n	3401a1c0 <__d2b+0x74>
3401a1f4:	3401bb92 	.word	0x3401bb92
3401a1f8:	3401bba3 	.word	0x3401bba3

3401a1fc <__sfputc_r>:
3401a1fc:	6893      	ldr	r3, [r2, #8]
3401a1fe:	3b01      	subs	r3, #1
3401a200:	2b00      	cmp	r3, #0
3401a202:	b410      	push	{r4}
3401a204:	6093      	str	r3, [r2, #8]
3401a206:	da08      	bge.n	3401a21a <__sfputc_r+0x1e>
3401a208:	6994      	ldr	r4, [r2, #24]
3401a20a:	42a3      	cmp	r3, r4
3401a20c:	db01      	blt.n	3401a212 <__sfputc_r+0x16>
3401a20e:	290a      	cmp	r1, #10
3401a210:	d103      	bne.n	3401a21a <__sfputc_r+0x1e>
3401a212:	f85d 4b04 	ldr.w	r4, [sp], #4
3401a216:	f7fe bcf4 	b.w	34018c02 <__swbuf_r>
3401a21a:	6813      	ldr	r3, [r2, #0]
3401a21c:	1c58      	adds	r0, r3, #1
3401a21e:	6010      	str	r0, [r2, #0]
3401a220:	4608      	mov	r0, r1
3401a222:	7019      	strb	r1, [r3, #0]
3401a224:	f85d 4b04 	ldr.w	r4, [sp], #4
3401a228:	4770      	bx	lr

3401a22a <__sfputs_r>:
3401a22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401a22c:	4606      	mov	r6, r0
3401a22e:	460f      	mov	r7, r1
3401a230:	4614      	mov	r4, r2
3401a232:	18d5      	adds	r5, r2, r3
3401a234:	42ac      	cmp	r4, r5
3401a236:	d101      	bne.n	3401a23c <__sfputs_r+0x12>
3401a238:	2000      	movs	r0, #0
3401a23a:	e007      	b.n	3401a24c <__sfputs_r+0x22>
3401a23c:	463a      	mov	r2, r7
3401a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
3401a242:	4630      	mov	r0, r6
3401a244:	f7ff ffda 	bl	3401a1fc <__sfputc_r>
3401a248:	1c43      	adds	r3, r0, #1
3401a24a:	d1f3      	bne.n	3401a234 <__sfputs_r+0xa>
3401a24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3401a250 <_vfiprintf_r>:
3401a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401a254:	460d      	mov	r5, r1
3401a256:	b09d      	sub	sp, #116	@ 0x74
3401a258:	4614      	mov	r4, r2
3401a25a:	4698      	mov	r8, r3
3401a25c:	4606      	mov	r6, r0
3401a25e:	b118      	cbz	r0, 3401a268 <_vfiprintf_r+0x18>
3401a260:	6a03      	ldr	r3, [r0, #32]
3401a262:	b90b      	cbnz	r3, 3401a268 <_vfiprintf_r+0x18>
3401a264:	f7fe fbd2 	bl	34018a0c <__sinit>
3401a268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401a26a:	07d9      	lsls	r1, r3, #31
3401a26c:	d405      	bmi.n	3401a27a <_vfiprintf_r+0x2a>
3401a26e:	89ab      	ldrh	r3, [r5, #12]
3401a270:	059a      	lsls	r2, r3, #22
3401a272:	d402      	bmi.n	3401a27a <_vfiprintf_r+0x2a>
3401a274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401a276:	f7fe fde6 	bl	34018e46 <__retarget_lock_acquire_recursive>
3401a27a:	89ab      	ldrh	r3, [r5, #12]
3401a27c:	071b      	lsls	r3, r3, #28
3401a27e:	d501      	bpl.n	3401a284 <_vfiprintf_r+0x34>
3401a280:	692b      	ldr	r3, [r5, #16]
3401a282:	b99b      	cbnz	r3, 3401a2ac <_vfiprintf_r+0x5c>
3401a284:	4629      	mov	r1, r5
3401a286:	4630      	mov	r0, r6
3401a288:	f7fe fcfa 	bl	34018c80 <__swsetup_r>
3401a28c:	b170      	cbz	r0, 3401a2ac <_vfiprintf_r+0x5c>
3401a28e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401a290:	07dc      	lsls	r4, r3, #31
3401a292:	d504      	bpl.n	3401a29e <_vfiprintf_r+0x4e>
3401a294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a298:	b01d      	add	sp, #116	@ 0x74
3401a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401a29e:	89ab      	ldrh	r3, [r5, #12]
3401a2a0:	0598      	lsls	r0, r3, #22
3401a2a2:	d4f7      	bmi.n	3401a294 <_vfiprintf_r+0x44>
3401a2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401a2a6:	f7fe fdcf 	bl	34018e48 <__retarget_lock_release_recursive>
3401a2aa:	e7f3      	b.n	3401a294 <_vfiprintf_r+0x44>
3401a2ac:	2300      	movs	r3, #0
3401a2ae:	f8cd 800c 	str.w	r8, [sp, #12]
3401a2b2:	f04f 0901 	mov.w	r9, #1
3401a2b6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3401a46c <_vfiprintf_r+0x21c>
3401a2ba:	9309      	str	r3, [sp, #36]	@ 0x24
3401a2bc:	2320      	movs	r3, #32
3401a2be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3401a2c2:	2330      	movs	r3, #48	@ 0x30
3401a2c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3401a2c8:	4623      	mov	r3, r4
3401a2ca:	469a      	mov	sl, r3
3401a2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
3401a2d0:	b10a      	cbz	r2, 3401a2d6 <_vfiprintf_r+0x86>
3401a2d2:	2a25      	cmp	r2, #37	@ 0x25
3401a2d4:	d1f9      	bne.n	3401a2ca <_vfiprintf_r+0x7a>
3401a2d6:	ebba 0b04 	subs.w	fp, sl, r4
3401a2da:	d00b      	beq.n	3401a2f4 <_vfiprintf_r+0xa4>
3401a2dc:	465b      	mov	r3, fp
3401a2de:	4622      	mov	r2, r4
3401a2e0:	4629      	mov	r1, r5
3401a2e2:	4630      	mov	r0, r6
3401a2e4:	f7ff ffa1 	bl	3401a22a <__sfputs_r>
3401a2e8:	3001      	adds	r0, #1
3401a2ea:	f000 80a7 	beq.w	3401a43c <_vfiprintf_r+0x1ec>
3401a2ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401a2f0:	445a      	add	r2, fp
3401a2f2:	9209      	str	r2, [sp, #36]	@ 0x24
3401a2f4:	f89a 3000 	ldrb.w	r3, [sl]
3401a2f8:	2b00      	cmp	r3, #0
3401a2fa:	f000 809f 	beq.w	3401a43c <_vfiprintf_r+0x1ec>
3401a2fe:	2300      	movs	r3, #0
3401a300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
3401a304:	f10a 0a01 	add.w	sl, sl, #1
3401a308:	9304      	str	r3, [sp, #16]
3401a30a:	9307      	str	r3, [sp, #28]
3401a30c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3401a310:	931a      	str	r3, [sp, #104]	@ 0x68
3401a312:	e9cd 2305 	strd	r2, r3, [sp, #20]
3401a316:	4654      	mov	r4, sl
3401a318:	2205      	movs	r2, #5
3401a31a:	4854      	ldr	r0, [pc, #336]	@ (3401a46c <_vfiprintf_r+0x21c>)
3401a31c:	f814 1b01 	ldrb.w	r1, [r4], #1
3401a320:	f7fe fd93 	bl	34018e4a <memchr>
3401a324:	9a04      	ldr	r2, [sp, #16]
3401a326:	b9d8      	cbnz	r0, 3401a360 <_vfiprintf_r+0x110>
3401a328:	06d1      	lsls	r1, r2, #27
3401a32a:	bf44      	itt	mi
3401a32c:	2320      	movmi	r3, #32
3401a32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401a332:	0713      	lsls	r3, r2, #28
3401a334:	bf44      	itt	mi
3401a336:	232b      	movmi	r3, #43	@ 0x2b
3401a338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3401a33c:	f89a 3000 	ldrb.w	r3, [sl]
3401a340:	2b2a      	cmp	r3, #42	@ 0x2a
3401a342:	d015      	beq.n	3401a370 <_vfiprintf_r+0x120>
3401a344:	9a07      	ldr	r2, [sp, #28]
3401a346:	4654      	mov	r4, sl
3401a348:	2000      	movs	r0, #0
3401a34a:	f04f 0c0a 	mov.w	ip, #10
3401a34e:	4621      	mov	r1, r4
3401a350:	f811 3b01 	ldrb.w	r3, [r1], #1
3401a354:	3b30      	subs	r3, #48	@ 0x30
3401a356:	2b09      	cmp	r3, #9
3401a358:	d94b      	bls.n	3401a3f2 <_vfiprintf_r+0x1a2>
3401a35a:	b1b0      	cbz	r0, 3401a38a <_vfiprintf_r+0x13a>
3401a35c:	9207      	str	r2, [sp, #28]
3401a35e:	e014      	b.n	3401a38a <_vfiprintf_r+0x13a>
3401a360:	eba0 0308 	sub.w	r3, r0, r8
3401a364:	46a2      	mov	sl, r4
3401a366:	fa09 f303 	lsl.w	r3, r9, r3
3401a36a:	4313      	orrs	r3, r2
3401a36c:	9304      	str	r3, [sp, #16]
3401a36e:	e7d2      	b.n	3401a316 <_vfiprintf_r+0xc6>
3401a370:	9b03      	ldr	r3, [sp, #12]
3401a372:	1d19      	adds	r1, r3, #4
3401a374:	681b      	ldr	r3, [r3, #0]
3401a376:	2b00      	cmp	r3, #0
3401a378:	9103      	str	r1, [sp, #12]
3401a37a:	bfbb      	ittet	lt
3401a37c:	425b      	neglt	r3, r3
3401a37e:	f042 0202 	orrlt.w	r2, r2, #2
3401a382:	9307      	strge	r3, [sp, #28]
3401a384:	9307      	strlt	r3, [sp, #28]
3401a386:	bfb8      	it	lt
3401a388:	9204      	strlt	r2, [sp, #16]
3401a38a:	7823      	ldrb	r3, [r4, #0]
3401a38c:	2b2e      	cmp	r3, #46	@ 0x2e
3401a38e:	d10a      	bne.n	3401a3a6 <_vfiprintf_r+0x156>
3401a390:	7863      	ldrb	r3, [r4, #1]
3401a392:	2b2a      	cmp	r3, #42	@ 0x2a
3401a394:	d132      	bne.n	3401a3fc <_vfiprintf_r+0x1ac>
3401a396:	9b03      	ldr	r3, [sp, #12]
3401a398:	3402      	adds	r4, #2
3401a39a:	1d1a      	adds	r2, r3, #4
3401a39c:	681b      	ldr	r3, [r3, #0]
3401a39e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3401a3a2:	9203      	str	r2, [sp, #12]
3401a3a4:	9305      	str	r3, [sp, #20]
3401a3a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401a47c <_vfiprintf_r+0x22c>
3401a3aa:	2203      	movs	r2, #3
3401a3ac:	7821      	ldrb	r1, [r4, #0]
3401a3ae:	4650      	mov	r0, sl
3401a3b0:	f7fe fd4b 	bl	34018e4a <memchr>
3401a3b4:	b138      	cbz	r0, 3401a3c6 <_vfiprintf_r+0x176>
3401a3b6:	eba0 000a 	sub.w	r0, r0, sl
3401a3ba:	2240      	movs	r2, #64	@ 0x40
3401a3bc:	9b04      	ldr	r3, [sp, #16]
3401a3be:	3401      	adds	r4, #1
3401a3c0:	4082      	lsls	r2, r0
3401a3c2:	4313      	orrs	r3, r2
3401a3c4:	9304      	str	r3, [sp, #16]
3401a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
3401a3ca:	2206      	movs	r2, #6
3401a3cc:	4828      	ldr	r0, [pc, #160]	@ (3401a470 <_vfiprintf_r+0x220>)
3401a3ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3401a3d2:	f7fe fd3a 	bl	34018e4a <memchr>
3401a3d6:	2800      	cmp	r0, #0
3401a3d8:	d03f      	beq.n	3401a45a <_vfiprintf_r+0x20a>
3401a3da:	4b26      	ldr	r3, [pc, #152]	@ (3401a474 <_vfiprintf_r+0x224>)
3401a3dc:	bb1b      	cbnz	r3, 3401a426 <_vfiprintf_r+0x1d6>
3401a3de:	9b03      	ldr	r3, [sp, #12]
3401a3e0:	3307      	adds	r3, #7
3401a3e2:	f023 0307 	bic.w	r3, r3, #7
3401a3e6:	3308      	adds	r3, #8
3401a3e8:	9303      	str	r3, [sp, #12]
3401a3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401a3ec:	443b      	add	r3, r7
3401a3ee:	9309      	str	r3, [sp, #36]	@ 0x24
3401a3f0:	e76a      	b.n	3401a2c8 <_vfiprintf_r+0x78>
3401a3f2:	fb0c 3202 	mla	r2, ip, r2, r3
3401a3f6:	460c      	mov	r4, r1
3401a3f8:	2001      	movs	r0, #1
3401a3fa:	e7a8      	b.n	3401a34e <_vfiprintf_r+0xfe>
3401a3fc:	2300      	movs	r3, #0
3401a3fe:	3401      	adds	r4, #1
3401a400:	f04f 0c0a 	mov.w	ip, #10
3401a404:	4619      	mov	r1, r3
3401a406:	9305      	str	r3, [sp, #20]
3401a408:	4620      	mov	r0, r4
3401a40a:	f810 2b01 	ldrb.w	r2, [r0], #1
3401a40e:	3a30      	subs	r2, #48	@ 0x30
3401a410:	2a09      	cmp	r2, #9
3401a412:	d903      	bls.n	3401a41c <_vfiprintf_r+0x1cc>
3401a414:	2b00      	cmp	r3, #0
3401a416:	d0c6      	beq.n	3401a3a6 <_vfiprintf_r+0x156>
3401a418:	9105      	str	r1, [sp, #20]
3401a41a:	e7c4      	b.n	3401a3a6 <_vfiprintf_r+0x156>
3401a41c:	fb0c 2101 	mla	r1, ip, r1, r2
3401a420:	4604      	mov	r4, r0
3401a422:	2301      	movs	r3, #1
3401a424:	e7f0      	b.n	3401a408 <_vfiprintf_r+0x1b8>
3401a426:	ab03      	add	r3, sp, #12
3401a428:	462a      	mov	r2, r5
3401a42a:	a904      	add	r1, sp, #16
3401a42c:	4630      	mov	r0, r6
3401a42e:	9300      	str	r3, [sp, #0]
3401a430:	4b11      	ldr	r3, [pc, #68]	@ (3401a478 <_vfiprintf_r+0x228>)
3401a432:	f7fd fdf5 	bl	34018020 <_printf_float>
3401a436:	4607      	mov	r7, r0
3401a438:	1c78      	adds	r0, r7, #1
3401a43a:	d1d6      	bne.n	3401a3ea <_vfiprintf_r+0x19a>
3401a43c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3401a43e:	07d9      	lsls	r1, r3, #31
3401a440:	d405      	bmi.n	3401a44e <_vfiprintf_r+0x1fe>
3401a442:	89ab      	ldrh	r3, [r5, #12]
3401a444:	059a      	lsls	r2, r3, #22
3401a446:	d402      	bmi.n	3401a44e <_vfiprintf_r+0x1fe>
3401a448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3401a44a:	f7fe fcfd 	bl	34018e48 <__retarget_lock_release_recursive>
3401a44e:	89ab      	ldrh	r3, [r5, #12]
3401a450:	065b      	lsls	r3, r3, #25
3401a452:	f53f af1f 	bmi.w	3401a294 <_vfiprintf_r+0x44>
3401a456:	9809      	ldr	r0, [sp, #36]	@ 0x24
3401a458:	e71e      	b.n	3401a298 <_vfiprintf_r+0x48>
3401a45a:	ab03      	add	r3, sp, #12
3401a45c:	462a      	mov	r2, r5
3401a45e:	a904      	add	r1, sp, #16
3401a460:	4630      	mov	r0, r6
3401a462:	9300      	str	r3, [sp, #0]
3401a464:	4b04      	ldr	r3, [pc, #16]	@ (3401a478 <_vfiprintf_r+0x228>)
3401a466:	f7fe f867 	bl	34018538 <_printf_i>
3401a46a:	e7e4      	b.n	3401a436 <_vfiprintf_r+0x1e6>
3401a46c:	3401bbfc 	.word	0x3401bbfc
3401a470:	3401bc06 	.word	0x3401bc06
3401a474:	34018021 	.word	0x34018021
3401a478:	3401a22b 	.word	0x3401a22b
3401a47c:	3401bc02 	.word	0x3401bc02

3401a480 <__swhatbuf_r>:
3401a480:	b570      	push	{r4, r5, r6, lr}
3401a482:	460c      	mov	r4, r1
3401a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401a488:	b096      	sub	sp, #88	@ 0x58
3401a48a:	4615      	mov	r5, r2
3401a48c:	2900      	cmp	r1, #0
3401a48e:	461e      	mov	r6, r3
3401a490:	da0c      	bge.n	3401a4ac <__swhatbuf_r+0x2c>
3401a492:	89a3      	ldrh	r3, [r4, #12]
3401a494:	2100      	movs	r1, #0
3401a496:	f013 0f80 	tst.w	r3, #128	@ 0x80
3401a49a:	bf14      	ite	ne
3401a49c:	2340      	movne	r3, #64	@ 0x40
3401a49e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3401a4a2:	2000      	movs	r0, #0
3401a4a4:	6031      	str	r1, [r6, #0]
3401a4a6:	602b      	str	r3, [r5, #0]
3401a4a8:	b016      	add	sp, #88	@ 0x58
3401a4aa:	bd70      	pop	{r4, r5, r6, pc}
3401a4ac:	466a      	mov	r2, sp
3401a4ae:	f000 f879 	bl	3401a5a4 <_fstat_r>
3401a4b2:	2800      	cmp	r0, #0
3401a4b4:	dbed      	blt.n	3401a492 <__swhatbuf_r+0x12>
3401a4b6:	9901      	ldr	r1, [sp, #4]
3401a4b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3401a4bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3401a4c0:	4259      	negs	r1, r3
3401a4c2:	4159      	adcs	r1, r3
3401a4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401a4c8:	e7eb      	b.n	3401a4a2 <__swhatbuf_r+0x22>

3401a4ca <__smakebuf_r>:
3401a4ca:	898b      	ldrh	r3, [r1, #12]
3401a4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401a4ce:	079d      	lsls	r5, r3, #30
3401a4d0:	4606      	mov	r6, r0
3401a4d2:	460c      	mov	r4, r1
3401a4d4:	d507      	bpl.n	3401a4e6 <__smakebuf_r+0x1c>
3401a4d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3401a4da:	6023      	str	r3, [r4, #0]
3401a4dc:	6123      	str	r3, [r4, #16]
3401a4de:	2301      	movs	r3, #1
3401a4e0:	6163      	str	r3, [r4, #20]
3401a4e2:	b003      	add	sp, #12
3401a4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401a4e6:	ab01      	add	r3, sp, #4
3401a4e8:	466a      	mov	r2, sp
3401a4ea:	f7ff ffc9 	bl	3401a480 <__swhatbuf_r>
3401a4ee:	9f00      	ldr	r7, [sp, #0]
3401a4f0:	4605      	mov	r5, r0
3401a4f2:	4630      	mov	r0, r6
3401a4f4:	4639      	mov	r1, r7
3401a4f6:	f7fd fc79 	bl	34017dec <_malloc_r>
3401a4fa:	b948      	cbnz	r0, 3401a510 <__smakebuf_r+0x46>
3401a4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401a500:	059a      	lsls	r2, r3, #22
3401a502:	d4ee      	bmi.n	3401a4e2 <__smakebuf_r+0x18>
3401a504:	f023 0303 	bic.w	r3, r3, #3
3401a508:	f043 0302 	orr.w	r3, r3, #2
3401a50c:	81a3      	strh	r3, [r4, #12]
3401a50e:	e7e2      	b.n	3401a4d6 <__smakebuf_r+0xc>
3401a510:	89a3      	ldrh	r3, [r4, #12]
3401a512:	6020      	str	r0, [r4, #0]
3401a514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3401a518:	81a3      	strh	r3, [r4, #12]
3401a51a:	9b01      	ldr	r3, [sp, #4]
3401a51c:	e9c4 0704 	strd	r0, r7, [r4, #16]
3401a520:	b15b      	cbz	r3, 3401a53a <__smakebuf_r+0x70>
3401a522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401a526:	4630      	mov	r0, r6
3401a528:	f000 f84e 	bl	3401a5c8 <_isatty_r>
3401a52c:	b128      	cbz	r0, 3401a53a <__smakebuf_r+0x70>
3401a52e:	89a3      	ldrh	r3, [r4, #12]
3401a530:	f023 0303 	bic.w	r3, r3, #3
3401a534:	f043 0301 	orr.w	r3, r3, #1
3401a538:	81a3      	strh	r3, [r4, #12]
3401a53a:	89a3      	ldrh	r3, [r4, #12]
3401a53c:	431d      	orrs	r5, r3
3401a53e:	81a5      	strh	r5, [r4, #12]
3401a540:	e7cf      	b.n	3401a4e2 <__smakebuf_r+0x18>

3401a542 <_raise_r>:
3401a542:	291f      	cmp	r1, #31
3401a544:	b538      	push	{r3, r4, r5, lr}
3401a546:	4605      	mov	r5, r0
3401a548:	460c      	mov	r4, r1
3401a54a:	d904      	bls.n	3401a556 <_raise_r+0x14>
3401a54c:	2316      	movs	r3, #22
3401a54e:	6003      	str	r3, [r0, #0]
3401a550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a554:	bd38      	pop	{r3, r4, r5, pc}
3401a556:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3401a558:	b112      	cbz	r2, 3401a560 <_raise_r+0x1e>
3401a55a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3401a55e:	b94b      	cbnz	r3, 3401a574 <_raise_r+0x32>
3401a560:	4628      	mov	r0, r5
3401a562:	f000 f853 	bl	3401a60c <_getpid_r>
3401a566:	4622      	mov	r2, r4
3401a568:	4601      	mov	r1, r0
3401a56a:	4628      	mov	r0, r5
3401a56c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401a570:	f000 b83a 	b.w	3401a5e8 <_kill_r>
3401a574:	2b01      	cmp	r3, #1
3401a576:	d00a      	beq.n	3401a58e <_raise_r+0x4c>
3401a578:	1c59      	adds	r1, r3, #1
3401a57a:	d103      	bne.n	3401a584 <_raise_r+0x42>
3401a57c:	2316      	movs	r3, #22
3401a57e:	6003      	str	r3, [r0, #0]
3401a580:	2001      	movs	r0, #1
3401a582:	e7e7      	b.n	3401a554 <_raise_r+0x12>
3401a584:	2100      	movs	r1, #0
3401a586:	4620      	mov	r0, r4
3401a588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3401a58c:	4798      	blx	r3
3401a58e:	2000      	movs	r0, #0
3401a590:	e7e0      	b.n	3401a554 <_raise_r+0x12>
	...

3401a594 <raise>:
3401a594:	4b02      	ldr	r3, [pc, #8]	@ (3401a5a0 <raise+0xc>)
3401a596:	4601      	mov	r1, r0
3401a598:	6818      	ldr	r0, [r3, #0]
3401a59a:	f7ff bfd2 	b.w	3401a542 <_raise_r>
3401a59e:	bf00      	nop
3401a5a0:	3401be4c 	.word	0x3401be4c

3401a5a4 <_fstat_r>:
3401a5a4:	b538      	push	{r3, r4, r5, lr}
3401a5a6:	2300      	movs	r3, #0
3401a5a8:	4d06      	ldr	r5, [pc, #24]	@ (3401a5c4 <_fstat_r+0x20>)
3401a5aa:	4604      	mov	r4, r0
3401a5ac:	4608      	mov	r0, r1
3401a5ae:	4611      	mov	r1, r2
3401a5b0:	602b      	str	r3, [r5, #0]
3401a5b2:	f7e7 f8f9 	bl	340017a8 <_fstat>
3401a5b6:	1c43      	adds	r3, r0, #1
3401a5b8:	d102      	bne.n	3401a5c0 <_fstat_r+0x1c>
3401a5ba:	682b      	ldr	r3, [r5, #0]
3401a5bc:	b103      	cbz	r3, 3401a5c0 <_fstat_r+0x1c>
3401a5be:	6023      	str	r3, [r4, #0]
3401a5c0:	bd38      	pop	{r3, r4, r5, pc}
3401a5c2:	bf00      	nop
3401a5c4:	3401c688 	.word	0x3401c688

3401a5c8 <_isatty_r>:
3401a5c8:	b538      	push	{r3, r4, r5, lr}
3401a5ca:	2300      	movs	r3, #0
3401a5cc:	4d05      	ldr	r5, [pc, #20]	@ (3401a5e4 <_isatty_r+0x1c>)
3401a5ce:	4604      	mov	r4, r0
3401a5d0:	4608      	mov	r0, r1
3401a5d2:	602b      	str	r3, [r5, #0]
3401a5d4:	f7e7 f8f8 	bl	340017c8 <_isatty>
3401a5d8:	1c43      	adds	r3, r0, #1
3401a5da:	d102      	bne.n	3401a5e2 <_isatty_r+0x1a>
3401a5dc:	682b      	ldr	r3, [r5, #0]
3401a5de:	b103      	cbz	r3, 3401a5e2 <_isatty_r+0x1a>
3401a5e0:	6023      	str	r3, [r4, #0]
3401a5e2:	bd38      	pop	{r3, r4, r5, pc}
3401a5e4:	3401c688 	.word	0x3401c688

3401a5e8 <_kill_r>:
3401a5e8:	b538      	push	{r3, r4, r5, lr}
3401a5ea:	2300      	movs	r3, #0
3401a5ec:	4d06      	ldr	r5, [pc, #24]	@ (3401a608 <_kill_r+0x20>)
3401a5ee:	4604      	mov	r4, r0
3401a5f0:	4608      	mov	r0, r1
3401a5f2:	4611      	mov	r1, r2
3401a5f4:	602b      	str	r3, [r5, #0]
3401a5f6:	f7e7 f893 	bl	34001720 <_kill>
3401a5fa:	1c43      	adds	r3, r0, #1
3401a5fc:	d102      	bne.n	3401a604 <_kill_r+0x1c>
3401a5fe:	682b      	ldr	r3, [r5, #0]
3401a600:	b103      	cbz	r3, 3401a604 <_kill_r+0x1c>
3401a602:	6023      	str	r3, [r4, #0]
3401a604:	bd38      	pop	{r3, r4, r5, pc}
3401a606:	bf00      	nop
3401a608:	3401c688 	.word	0x3401c688

3401a60c <_getpid_r>:
3401a60c:	f7e7 b880 	b.w	34001710 <_getpid>

3401a610 <_calloc_r>:
3401a610:	b570      	push	{r4, r5, r6, lr}
3401a612:	fba1 5402 	umull	r5, r4, r1, r2
3401a616:	b934      	cbnz	r4, 3401a626 <_calloc_r+0x16>
3401a618:	4629      	mov	r1, r5
3401a61a:	f7fd fbe7 	bl	34017dec <_malloc_r>
3401a61e:	4606      	mov	r6, r0
3401a620:	b928      	cbnz	r0, 3401a62e <_calloc_r+0x1e>
3401a622:	4630      	mov	r0, r6
3401a624:	bd70      	pop	{r4, r5, r6, pc}
3401a626:	220c      	movs	r2, #12
3401a628:	2600      	movs	r6, #0
3401a62a:	6002      	str	r2, [r0, #0]
3401a62c:	e7f9      	b.n	3401a622 <_calloc_r+0x12>
3401a62e:	462a      	mov	r2, r5
3401a630:	4621      	mov	r1, r4
3401a632:	f7fe fb7b 	bl	34018d2c <memset>
3401a636:	e7f4      	b.n	3401a622 <_calloc_r+0x12>

3401a638 <__ascii_mbtowc>:
3401a638:	b082      	sub	sp, #8
3401a63a:	b901      	cbnz	r1, 3401a63e <__ascii_mbtowc+0x6>
3401a63c:	a901      	add	r1, sp, #4
3401a63e:	b142      	cbz	r2, 3401a652 <__ascii_mbtowc+0x1a>
3401a640:	b14b      	cbz	r3, 3401a656 <__ascii_mbtowc+0x1e>
3401a642:	7813      	ldrb	r3, [r2, #0]
3401a644:	600b      	str	r3, [r1, #0]
3401a646:	7812      	ldrb	r2, [r2, #0]
3401a648:	1e10      	subs	r0, r2, #0
3401a64a:	bf18      	it	ne
3401a64c:	2001      	movne	r0, #1
3401a64e:	b002      	add	sp, #8
3401a650:	4770      	bx	lr
3401a652:	4610      	mov	r0, r2
3401a654:	e7fb      	b.n	3401a64e <__ascii_mbtowc+0x16>
3401a656:	f06f 0001 	mvn.w	r0, #1
3401a65a:	e7f8      	b.n	3401a64e <__ascii_mbtowc+0x16>

3401a65c <__ascii_wctomb>:
3401a65c:	4603      	mov	r3, r0
3401a65e:	4608      	mov	r0, r1
3401a660:	b141      	cbz	r1, 3401a674 <__ascii_wctomb+0x18>
3401a662:	2aff      	cmp	r2, #255	@ 0xff
3401a664:	d904      	bls.n	3401a670 <__ascii_wctomb+0x14>
3401a666:	228a      	movs	r2, #138	@ 0x8a
3401a668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
3401a66c:	601a      	str	r2, [r3, #0]
3401a66e:	4770      	bx	lr
3401a670:	2001      	movs	r0, #1
3401a672:	700a      	strb	r2, [r1, #0]
3401a674:	4770      	bx	lr
	...

3401a678 <_sbrk>:
3401a678:	4a04      	ldr	r2, [pc, #16]	@ (3401a68c <_sbrk+0x14>)
3401a67a:	4603      	mov	r3, r0
3401a67c:	6811      	ldr	r1, [r2, #0]
3401a67e:	b909      	cbnz	r1, 3401a684 <_sbrk+0xc>
3401a680:	4903      	ldr	r1, [pc, #12]	@ (3401a690 <_sbrk+0x18>)
3401a682:	6011      	str	r1, [r2, #0]
3401a684:	6810      	ldr	r0, [r2, #0]
3401a686:	4403      	add	r3, r0
3401a688:	6013      	str	r3, [r2, #0]
3401a68a:	4770      	bx	lr
3401a68c:	3401c690 	.word	0x3401c690
3401a690:	3401c698 	.word	0x3401c698

3401a694 <_init>:
3401a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401a696:	bf00      	nop
3401a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401a69a:	bc08      	pop	{r3}
3401a69c:	469e      	mov	lr, r3
3401a69e:	4770      	bx	lr

3401a6a0 <_fini>:
3401a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401a6a2:	bf00      	nop
3401a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
3401a6a6:	bc08      	pop	{r3}
3401a6a8:	469e      	mov	lr, r3
3401a6aa:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3401a6c0 <SECURE_SystemCoreClockUpdate>:
3401a6c0:	e97f e97f 	sg
3401a6c4:	f7e8 bf16 	b.w	340034f4 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
